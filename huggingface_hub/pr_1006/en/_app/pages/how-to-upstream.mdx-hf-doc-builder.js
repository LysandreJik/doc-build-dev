import{S as Nh,i as Gh,s as Mh,e as s,k as h,w as u,t as a,M as Bh,c as r,d as o,m as f,a as i,x as d,h as l,b as c,G as t,g as p,y as m,L as Wh,q as _,o as g,B as y,v as Yh}from"../chunks/vendor-hf-doc-builder.js";import{I as Ee}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as w}from"../chunks/CodeBlock-hf-doc-builder.js";function zh(Mn){let I,fa,R,J,eo,be,Ql,to,Vl,ca,K,Xl,oo,Zl,es,ua,k,ao,ts,os,$e,as,ke,ls,ss,rs,je,is,lo,ns,ps,hs,Ae,fs,ft,cs,us,da,ct,ds,ma,Q,He,so,ms,_s,Pe,gs,U,qe,ys,ro,vs,ws,Es,Ce,bs,ut,io,$s,ks,_a,F,V,no,xe,js,po,As,ga,C,Hs,dt,Ps,qs,mt,Cs,xs,ya,E,Ds,_t,Os,Ts,gt,Ss,Ls,yt,Is,Rs,vt,Us,Fs,va,N,X,ho,De,Ns,fo,Gs,wa,x,Ms,wt,co,Bs,Ws,Et,Ys,zs,Ea,j,Js,uo,Ks,Qs,mo,Vs,Xs,_o,Zs,er,ba,Oe,$a,G,Z,go,Te,tr,yo,or,ka,b,ar,bt,lr,sr,vo,rr,ir,wo,nr,pr,Eo,hr,fr,ja,v,cr,bo,ur,dr,$o,mr,_r,Se,gr,yr,ko,vr,wr,jo,Er,br,Aa,Le,Ha,M,ee,Ao,Ie,$r,Ho,kr,Pa,D,jr,$t,Ar,Hr,kt,Pr,qr,qa,te,Re,jt,Po,Cr,xr,Dr,Ue,At,qo,Or,Tr,Sr,Ht,Co,Lr,Ir,Rr,xo,oe,Do,Ur,Fr,Oo,Nr,Gr,Ca,Pt,Mr,xa,qt,Fe,Br,To,Wr,Yr,Da,Ne,Oa,Ge,Me,zr,Ct,Jr,Kr,Ta,Be,Sa,A,Qr,xt,Vr,Xr,Dt,Zr,ei,Ot,ti,oi,La,ae,Tt,St,ai,li,si,Lt,So,ri,ii,Ia,le,ni,It,pi,hi,Ra,B,se,Lo,We,fi,Io,ci,Ua,Rt,ui,Fa,Ye,Na,Ut,di,Ga,W,re,Ro,ze,mi,Uo,_i,Ma,H,gi,Fo,yi,vi,No,wi,Ei,Go,bi,$i,Ba,P,Je,ki,Mo,ji,Ai,Hi,Ke,Pi,Bo,qi,Ci,xi,Wo,Di,Oi,Qe,Ti,Yo,Si,Li,Wa,Ve,Ya,ie,Ii,zo,Ri,Ui,za,Xe,Ja,ne,Fi,Jo,Ni,Gi,Ka,Ze,Qa,pe,Mi,Ko,Bi,Wi,Va,et,Xa,Ft,Yi,Za,he,Qo,tt,Vo,zi,Ji,Xo,Ki,Qi,Y,ot,Zo,Vi,Xi,ea,Zi,en,at,ta,tn,on,oa,an,ln,lt,aa,sn,rn,la,nn,el,fe,pn,sa,hn,fn,tl,st,ol,z,ce,ra,rt,cn,ia,un,al,$,dn,Nt,mn,_n,Gt,gn,yn,na,vn,wn,Mt,En,bn,ll,ue,$n,pa,kn,jn,sl,it,rl,de,An,Bt,Hn,Pn,il,nt,nl,O,qn,Wt,Cn,xn,Yt,Dn,On,pl,pt,hl,me,Tn,zt,Sn,Ln,fl,ht,cl;return be=new Ee({}),Pe=new w({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),Ce=new w({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),xe=new Ee({}),De=new Ee({}),Oe=new w({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_file(
    path_or_fileobj="/path/to/local/folder/README.md",
    path_in_repo="README.md",
    repo_id="username/test-dataset",
    repo_type="dataset",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_file(
<span class="hljs-meta">... </span>    path_or_fileobj=<span class="hljs-string">&quot;/path/to/local/folder/README.md&quot;</span>,
<span class="hljs-meta">... </span>    path_in_repo=<span class="hljs-string">&quot;README.md&quot;</span>,
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>,
<span class="hljs-meta">... </span>    repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Te=new Ee({}),Le=new w({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_folder(
    folder_path="/path/to/local/folder",
    path_in_repo="my-dataset/train",
    repo_id="username/test-dataset",
    repo_type="dataset",
    ignore_patterns="**/logs/*.txt",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_folder(
<span class="hljs-meta">... </span>    folder_path=<span class="hljs-string">&quot;/path/to/local/folder&quot;</span>,
<span class="hljs-meta">... </span>    path_in_repo=<span class="hljs-string">&quot;my-dataset/train&quot;</span>,
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>,
<span class="hljs-meta">... </span>    repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>    ignore_patterns=<span class="hljs-string">&quot;**/logs/*.txt&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Ie=new Ee({}),Ne=new w({props:{code:`from huggingface_hub import HfApi, CommitOperationAdd, CommitOperationDelete
api = HfApi()
operations = [
    CommitOperationAdd(path_in_repo="LICENSE.md", path_or_fileobj="~/repo/LICENSE.md"),
    CommitOperationAdd(path_in_repo="weights.h5", path_or_fileobj="~/repo/weights-final.h5"),
    CommitOperationDelete(path_in_repo="old-weights.h5"),
]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi, CommitOperationAdd, CommitOperationDelete
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>operations = [
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;LICENSE.md&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/LICENSE.md&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;weights.h5&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/weights-final.h5&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationDelete(path_in_repo=<span class="hljs-string">&quot;old-weights.h5&quot;</span>),
<span class="hljs-meta">... </span>]`}}),Be=new w({props:{code:`api.create_commit(
    repo_id="lysandre/test-model",
    operations=operations,
    commit_message="Upload my model weights and license",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>api.create_commit(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>    operations=operations,
<span class="hljs-meta">... </span>    commit_message=<span class="hljs-string">&quot;Upload my model weights and license&quot;</span>,
<span class="hljs-meta">... </span>)`}}),We=new Ee({}),Ye=new w({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),ze=new Ee({}),Ve=new w({props:{code:`from huggingface_hub import Repository
with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),Xe=new w({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),Ze=new w({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),et=new w({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status`}}),st=new w({props:{code:`last_command.stderr

last_command.is_done

last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),rt=new Ee({}),it=new w({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="path/to/local/repo")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;path/to/local/repo&quot;</span>)`}}),nt=new w({props:{code:`repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),pt=new w({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),ht=new w({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),{c(){I=s("meta"),fa=h(),R=s("h1"),J=s("a"),eo=s("span"),u(be.$$.fragment),Ql=h(),to=s("span"),Vl=a("Upload files to the Hub"),ca=h(),K=s("p"),Xl=a("Sharing your files and work is an important aspect of the Hub. The "),oo=s("code"),Zl=a("huggingface_hub"),es=a(" offers several options for uploading your files to the Hub. You can use these functions independently or integrate them into your library, making it more convenient for your users to interact with the Hub. This guide will show you how to push files:"),ua=h(),k=s("ul"),ao=s("li"),ts=a("without using Git."),os=h(),$e=s("li"),as=a("that are very large with "),ke=s("a"),ls=a("Git LFS"),ss=a("."),rs=h(),je=s("li"),is=a("with the "),lo=s("code"),ns=a("commit"),ps=a(" context manager."),hs=h(),Ae=s("li"),fs=a("with the "),ft=s("a"),cs=a("push_to_hub()"),us=a(" function."),da=h(),ct=s("p"),ds=a("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),ma=h(),Q=s("ul"),He=s("li"),so=s("p"),ms=a("Log in to your Hugging Face account with the following command:"),_s=h(),u(Pe.$$.fragment),gs=h(),U=s("li"),qe=s("p"),ys=a("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, log in with "),ro=s("code"),vs=a("notebook_login()"),ws=a(":"),Es=h(),u(Ce.$$.fragment),bs=h(),ut=s("p"),io=s("code"),$s=a("notebook_login()"),ks=a(" launches a widget in your notebook from which you can enter your Hugging Face credentials."),_a=h(),F=s("h2"),V=s("a"),no=s("span"),u(xe.$$.fragment),js=h(),po=s("span"),As=a("Push files without Git"),ga=h(),C=s("p"),Hs=a("If you don\u2019t have Git installed on your system, use "),dt=s("a"),Ps=a("create_commit()"),qs=a(" to push your files to the Hub. "),mt=s("a"),Cs=a("create_commit()"),xs=a(" uses the HTTP protocol to upload files to the Hub."),ya=h(),E=s("p"),Ds=a("However, "),_t=s("a"),Os=a("create_commit()"),Ts=a(" is a low-level API for working at a commit level. The "),gt=s("a"),Ss=a("upload_file()"),Ls=a(" and "),yt=s("a"),Is=a("upload_folder()"),Rs=a(" functions are higher-level APIs that use "),vt=s("a"),Us=a("create_commit()"),Fs=a(" under the hood and are generally more convenient. We recommend trying these functions first if you don\u2019t need to work at a lower level."),va=h(),N=s("h3"),X=s("a"),ho=s("span"),u(De.$$.fragment),Ns=h(),fo=s("span"),Gs=a("Upload a file"),wa=h(),x=s("p"),Ms=a("Once you\u2019ve created a repository with the "),wt=s("a"),co=s("code"),Bs=a("create_repo"),Ws=a(" function, you can upload a file to your repository with the "),Et=s("a"),Ys=a("upload_file()"),zs=a(" function."),Ea=h(),j=s("p"),Js=a("Specify the path of the file to upload, where you want to upload the file to in the repository, and the name of the repository you want to add the file to. Depending on your repository type, you can optionally set the repository type as a "),uo=s("code"),Ks=a("dataset"),Qs=a(", "),mo=s("code"),Vs=a("model"),Xs=a(", or "),_o=s("code"),Zs=a("space"),er=a("."),ba=h(),u(Oe.$$.fragment),$a=h(),G=s("h3"),Z=s("a"),go=s("span"),u(Te.$$.fragment),tr=h(),yo=s("span"),or=a("Upload a folder"),ka=h(),b=s("p"),ar=a("Use the "),bt=s("a"),lr=a("upload_folder()"),sr=a(" function to upload a local folder to an existing repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to. Depending on your repository type, you can optionally set the repository type as a "),vo=s("code"),rr=a("dataset"),ir=a(", "),wo=s("code"),nr=a("model"),pr=a(", or "),Eo=s("code"),hr=a("space"),fr=a("."),ja=h(),v=s("p"),cr=a("Use the "),bo=s("code"),ur=a("allow_patterns"),dr=a(" and "),$o=s("code"),mr=a("ignore_patterns"),_r=a(` arguments to specify which files to upload. These parameters accept either a single pattern or a list of patterns.
Patterns are Standard Wildcards (globbing patterns) as documented `),Se=s("a"),gr=a("here"),yr=a(`.
If both `),ko=s("code"),vr=a("allow_patterns"),wr=a(" and "),jo=s("code"),Er=a("ignore_patterns"),br=a(" are provided, both constraints apply. By default, all files from the folder are uploaded."),Aa=h(),u(Le.$$.fragment),Ha=h(),M=s("h3"),ee=s("a"),Ao=s("span"),u(Ie.$$.fragment),$r=h(),Ho=s("span"),kr=a("create_commit"),Pa=h(),D=s("p"),jr=a("If you want to work at a commit-level, use the "),$t=s("a"),Ar=a("create_commit()"),Hr=a(" function directly. There are two types of operations supported by "),kt=s("a"),Pr=a("create_commit()"),qr=a(":"),qa=h(),te=s("ul"),Re=s("li"),jt=s("p"),Po=s("code"),Cr=a("CommitOperationAdd"),xr=a(" uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),Dr=h(),Ue=s("ul"),At=s("li"),qo=s("code"),Or=a("path_in_repo"),Tr=a(": the repository path to upload a file to."),Sr=h(),Ht=s("li"),Co=s("code"),Lr=a("path_or_fileobj"),Ir=a(": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),Rr=h(),xo=s("li"),oe=s("p"),Do=s("code"),Ur=a("CommitOperationDelete"),Fr=a(" removes a file from a repository. This operation accepts "),Oo=s("code"),Nr=a("path_in_repo"),Gr=a(" as an argument."),Ca=h(),Pt=s("p"),Mr=a("For example, if you want to upload two files and delete a file in a Hub repository:"),xa=h(),qt=s("ol"),Fe=s("li"),Br=a("Use the appropriate "),To=s("code"),Wr=a("CommitOperation"),Yr=a(" to add and delete a file:"),Da=h(),u(Ne.$$.fragment),Oa=h(),Ge=s("ol"),Me=s("li"),zr=a("Pass your operations to "),Ct=s("a"),Jr=a("create_commit()"),Kr=a(":"),Ta=h(),u(Be.$$.fragment),Sa=h(),A=s("p"),Qr=a("In addition to "),xt=s("a"),Vr=a("upload_file()"),Xr=a(" and "),Dt=s("a"),Zr=a("upload_folder()"),ei=a(", the following functions also use "),Ot=s("a"),ti=a("create_commit()"),oi=a(" under the hood:"),La=h(),ae=s("ul"),Tt=s("li"),St=s("a"),ai=a("delete_file()"),li=a(" deletes a single file from a repository on the Hub."),si=h(),Lt=s("li"),So=s("code"),ri=a("metadata_update()"),ii=a(" updates a repository\u2019s metadata."),Ia=h(),le=s("p"),ni=a("For more detailed information, take a look at the "),It=s("a"),pi=a("HfApi"),hi=a(" reference."),Ra=h(),B=s("h2"),se=s("a"),Lo=s("span"),u(We.$$.fragment),fi=h(),Io=s("span"),ci=a("Push files with Git LFS"),Ua=h(),Rt=s("p"),ui=a("Git LFS automatically handles files larger than 10MB. But for very large files (>5GB), you need to install a custom transfer agent for Git LFS:"),Fa=h(),u(Ye.$$.fragment),Na=h(),Ut=s("p"),di=a("You should install this for each repository that has a very large file. Once installed, you\u2019ll be able to push files larger than 5GB."),Ga=h(),W=s("h2"),re=s("a"),Ro=s("span"),u(ze.$$.fragment),mi=h(),Uo=s("span"),_i=a("commit context manager"),Ma=h(),H=s("p"),gi=a("The "),Fo=s("code"),yi=a("commit"),vi=a(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),No=s("code"),wi=a("git-lfs"),Ei=a(" automatically tracks any file larger than 10MB. In the following example, the "),Go=s("code"),bi=a("commit"),$i=a(" context manager:"),Ba=h(),P=s("ol"),Je=s("li"),ki=a("Pulls from the "),Mo=s("code"),ji=a("text-files"),Ai=a(" repository."),Hi=h(),Ke=s("li"),Pi=a("Adds a change made to "),Bo=s("code"),qi=a("file.txt"),Ci=a("."),xi=h(),Wo=s("li"),Di=a("Commits the change."),Oi=h(),Qe=s("li"),Ti=a("Pushes the change to the "),Yo=s("code"),Si=a("text-files"),Li=a(" repository."),Wa=h(),u(Ve.$$.fragment),Ya=h(),ie=s("p"),Ii=a("Here is another example of how to use the "),zo=s("code"),Ri=a("commit"),Ui=a(" context manager to save and upload a file to a repository:"),za=h(),u(Xe.$$.fragment),Ja=h(),ne=s("p"),Fi=a("Set "),Jo=s("code"),Ni=a("blocking=False"),Gi=a(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while your commits are being pushed."),Ka=h(),u(Ze.$$.fragment),Qa=h(),pe=s("p"),Mi=a("You can check the status of your push with the "),Ko=s("code"),Bi=a("command_queue"),Wi=a(" method:"),Va=h(),u(et.$$.fragment),Xa=h(),Ft=s("p"),Yi=a("Refer to the table below for the possible statuses:"),Za=h(),he=s("table"),Qo=s("thead"),tt=s("tr"),Vo=s("th"),zi=a("Status"),Ji=h(),Xo=s("th"),Ki=a("Description"),Qi=h(),Y=s("tbody"),ot=s("tr"),Zo=s("td"),Vi=a("-1"),Xi=h(),ea=s("td"),Zi=a("The push is ongoing."),en=h(),at=s("tr"),ta=s("td"),tn=a("0"),on=h(),oa=s("td"),an=a("The push has completed successfully."),ln=h(),lt=s("tr"),aa=s("td"),sn=a("Non-zero"),rn=h(),la=s("td"),nn=a("An error has occurred."),el=h(),fe=s("p"),pn=a("When "),sa=s("code"),hn=a("blocking=False"),fn=a(", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),tl=h(),u(st.$$.fragment),ol=h(),z=s("h2"),ce=s("a"),ra=s("span"),u(rt.$$.fragment),cn=h(),ia=s("span"),un=a("push_to_hub"),al=h(),$=s("p"),dn=a("The "),Nt=s("a"),mn=a("Repository"),_n=a(" class has a "),Gt=s("a"),gn=a("push_to_hub()"),yn=a(" function to add files, make a commit, and push them to a repository. Unlike the "),na=s("code"),vn=a("commit"),wn=a(" context manager, you\u2019ll need to pull from a repository first before calling "),Mt=s("a"),En=a("push_to_hub()"),bn=a("."),ll=h(),ue=s("p"),$n=a("For example, if you\u2019ve already cloned a repository from the Hub, then you can initialize the "),pa=s("code"),kn=a("repo"),jn=a(" from the local directory:"),sl=h(),u(it.$$.fragment),rl=h(),de=s("p"),An=a("Update your local clone with "),Bt=s("a"),Hn=a("git_pull()"),Pn=a(" and then push your file to the Hub:"),il=h(),u(nt.$$.fragment),nl=h(),O=s("p"),qn=a("However, if you aren\u2019t ready to push a file yet, you can use "),Wt=s("a"),Cn=a("git_add()"),xn=a(" and "),Yt=s("a"),Dn=a("git_commit()"),On=a(" to only add and commit your file:"),pl=h(),u(pt.$$.fragment),hl=h(),me=s("p"),Tn=a("When you\u2019re ready, push the file to your repository with "),zt=s("a"),Sn=a("git_push()"),Ln=a(":"),fl=h(),u(ht.$$.fragment),this.h()},l(e){const n=Bh('[data-svelte="svelte-1phssyn"]',document.head);I=r(n,"META",{name:!0,content:!0}),n.forEach(o),fa=f(e),R=r(e,"H1",{class:!0});var ul=i(R);J=r(ul,"A",{id:!0,class:!0,href:!0});var Bn=i(J);eo=r(Bn,"SPAN",{});var Wn=i(eo);d(be.$$.fragment,Wn),Wn.forEach(o),Bn.forEach(o),Ql=f(ul),to=r(ul,"SPAN",{});var Yn=i(to);Vl=l(Yn,"Upload files to the Hub"),Yn.forEach(o),ul.forEach(o),ca=f(e),K=r(e,"P",{});var dl=i(K);Xl=l(dl,"Sharing your files and work is an important aspect of the Hub. The "),oo=r(dl,"CODE",{});var zn=i(oo);Zl=l(zn,"huggingface_hub"),zn.forEach(o),es=l(dl," offers several options for uploading your files to the Hub. You can use these functions independently or integrate them into your library, making it more convenient for your users to interact with the Hub. This guide will show you how to push files:"),dl.forEach(o),ua=f(e),k=r(e,"UL",{});var _e=i(k);ao=r(_e,"LI",{});var Jn=i(ao);ts=l(Jn,"without using Git."),Jn.forEach(o),os=f(_e),$e=r(_e,"LI",{});var ml=i($e);as=l(ml,"that are very large with "),ke=r(ml,"A",{href:!0,rel:!0});var Kn=i(ke);ls=l(Kn,"Git LFS"),Kn.forEach(o),ss=l(ml,"."),ml.forEach(o),rs=f(_e),je=r(_e,"LI",{});var _l=i(je);is=l(_l,"with the "),lo=r(_l,"CODE",{});var Qn=i(lo);ns=l(Qn,"commit"),Qn.forEach(o),ps=l(_l," context manager."),_l.forEach(o),hs=f(_e),Ae=r(_e,"LI",{});var gl=i(Ae);fs=l(gl,"with the "),ft=r(gl,"A",{href:!0});var Vn=i(ft);cs=l(Vn,"push_to_hub()"),Vn.forEach(o),us=l(gl," function."),gl.forEach(o),_e.forEach(o),da=f(e),ct=r(e,"P",{});var Xn=i(ct);ds=l(Xn,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),Xn.forEach(o),ma=f(e),Q=r(e,"UL",{});var yl=i(Q);He=r(yl,"LI",{});var vl=i(He);so=r(vl,"P",{});var Zn=i(so);ms=l(Zn,"Log in to your Hugging Face account with the following command:"),Zn.forEach(o),_s=f(vl),d(Pe.$$.fragment,vl),vl.forEach(o),gs=f(yl),U=r(yl,"LI",{});var Jt=i(U);qe=r(Jt,"P",{});var wl=i(qe);ys=l(wl,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, log in with "),ro=r(wl,"CODE",{});var ep=i(ro);vs=l(ep,"notebook_login()"),ep.forEach(o),ws=l(wl,":"),wl.forEach(o),Es=f(Jt),d(Ce.$$.fragment,Jt),bs=f(Jt),ut=r(Jt,"P",{});var In=i(ut);io=r(In,"CODE",{});var tp=i(io);$s=l(tp,"notebook_login()"),tp.forEach(o),ks=l(In," launches a widget in your notebook from which you can enter your Hugging Face credentials."),In.forEach(o),Jt.forEach(o),yl.forEach(o),_a=f(e),F=r(e,"H2",{class:!0});var El=i(F);V=r(El,"A",{id:!0,class:!0,href:!0});var op=i(V);no=r(op,"SPAN",{});var ap=i(no);d(xe.$$.fragment,ap),ap.forEach(o),op.forEach(o),js=f(El),po=r(El,"SPAN",{});var lp=i(po);As=l(lp,"Push files without Git"),lp.forEach(o),El.forEach(o),ga=f(e),C=r(e,"P",{});var Kt=i(C);Hs=l(Kt,"If you don\u2019t have Git installed on your system, use "),dt=r(Kt,"A",{href:!0});var sp=i(dt);Ps=l(sp,"create_commit()"),sp.forEach(o),qs=l(Kt," to push your files to the Hub. "),mt=r(Kt,"A",{href:!0});var rp=i(mt);Cs=l(rp,"create_commit()"),rp.forEach(o),xs=l(Kt," uses the HTTP protocol to upload files to the Hub."),Kt.forEach(o),ya=f(e),E=r(e,"P",{});var T=i(E);Ds=l(T,"However, "),_t=r(T,"A",{href:!0});var ip=i(_t);Os=l(ip,"create_commit()"),ip.forEach(o),Ts=l(T," is a low-level API for working at a commit level. The "),gt=r(T,"A",{href:!0});var np=i(gt);Ss=l(np,"upload_file()"),np.forEach(o),Ls=l(T," and "),yt=r(T,"A",{href:!0});var pp=i(yt);Is=l(pp,"upload_folder()"),pp.forEach(o),Rs=l(T," functions are higher-level APIs that use "),vt=r(T,"A",{href:!0});var hp=i(vt);Us=l(hp,"create_commit()"),hp.forEach(o),Fs=l(T," under the hood and are generally more convenient. We recommend trying these functions first if you don\u2019t need to work at a lower level."),T.forEach(o),va=f(e),N=r(e,"H3",{class:!0});var bl=i(N);X=r(bl,"A",{id:!0,class:!0,href:!0});var fp=i(X);ho=r(fp,"SPAN",{});var cp=i(ho);d(De.$$.fragment,cp),cp.forEach(o),fp.forEach(o),Ns=f(bl),fo=r(bl,"SPAN",{});var up=i(fo);Gs=l(up,"Upload a file"),up.forEach(o),bl.forEach(o),wa=f(e),x=r(e,"P",{});var Qt=i(x);Ms=l(Qt,"Once you\u2019ve created a repository with the "),wt=r(Qt,"A",{href:!0});var dp=i(wt);co=r(dp,"CODE",{});var mp=i(co);Bs=l(mp,"create_repo"),mp.forEach(o),dp.forEach(o),Ws=l(Qt," function, you can upload a file to your repository with the "),Et=r(Qt,"A",{href:!0});var _p=i(Et);Ys=l(_p,"upload_file()"),_p.forEach(o),zs=l(Qt," function."),Qt.forEach(o),Ea=f(e),j=r(e,"P",{});var ge=i(j);Js=l(ge,"Specify the path of the file to upload, where you want to upload the file to in the repository, and the name of the repository you want to add the file to. Depending on your repository type, you can optionally set the repository type as a "),uo=r(ge,"CODE",{});var gp=i(uo);Ks=l(gp,"dataset"),gp.forEach(o),Qs=l(ge,", "),mo=r(ge,"CODE",{});var yp=i(mo);Vs=l(yp,"model"),yp.forEach(o),Xs=l(ge,", or "),_o=r(ge,"CODE",{});var vp=i(_o);Zs=l(vp,"space"),vp.forEach(o),er=l(ge,"."),ge.forEach(o),ba=f(e),d(Oe.$$.fragment,e),$a=f(e),G=r(e,"H3",{class:!0});var $l=i(G);Z=r($l,"A",{id:!0,class:!0,href:!0});var wp=i(Z);go=r(wp,"SPAN",{});var Ep=i(go);d(Te.$$.fragment,Ep),Ep.forEach(o),wp.forEach(o),tr=f($l),yo=r($l,"SPAN",{});var bp=i(yo);or=l(bp,"Upload a folder"),bp.forEach(o),$l.forEach(o),ka=f(e),b=r(e,"P",{});var S=i(b);ar=l(S,"Use the "),bt=r(S,"A",{href:!0});var $p=i(bt);lr=l($p,"upload_folder()"),$p.forEach(o),sr=l(S," function to upload a local folder to an existing repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to. Depending on your repository type, you can optionally set the repository type as a "),vo=r(S,"CODE",{});var kp=i(vo);rr=l(kp,"dataset"),kp.forEach(o),ir=l(S,", "),wo=r(S,"CODE",{});var jp=i(wo);nr=l(jp,"model"),jp.forEach(o),pr=l(S,", or "),Eo=r(S,"CODE",{});var Ap=i(Eo);hr=l(Ap,"space"),Ap.forEach(o),fr=l(S,"."),S.forEach(o),ja=f(e),v=r(e,"P",{});var q=i(v);cr=l(q,"Use the "),bo=r(q,"CODE",{});var Hp=i(bo);ur=l(Hp,"allow_patterns"),Hp.forEach(o),dr=l(q," and "),$o=r(q,"CODE",{});var Pp=i($o);mr=l(Pp,"ignore_patterns"),Pp.forEach(o),_r=l(q,` arguments to specify which files to upload. These parameters accept either a single pattern or a list of patterns.
Patterns are Standard Wildcards (globbing patterns) as documented `),Se=r(q,"A",{href:!0,rel:!0});var qp=i(Se);gr=l(qp,"here"),qp.forEach(o),yr=l(q,`.
If both `),ko=r(q,"CODE",{});var Cp=i(ko);vr=l(Cp,"allow_patterns"),Cp.forEach(o),wr=l(q," and "),jo=r(q,"CODE",{});var xp=i(jo);Er=l(xp,"ignore_patterns"),xp.forEach(o),br=l(q," are provided, both constraints apply. By default, all files from the folder are uploaded."),q.forEach(o),Aa=f(e),d(Le.$$.fragment,e),Ha=f(e),M=r(e,"H3",{class:!0});var kl=i(M);ee=r(kl,"A",{id:!0,class:!0,href:!0});var Dp=i(ee);Ao=r(Dp,"SPAN",{});var Op=i(Ao);d(Ie.$$.fragment,Op),Op.forEach(o),Dp.forEach(o),$r=f(kl),Ho=r(kl,"SPAN",{});var Tp=i(Ho);kr=l(Tp,"create_commit"),Tp.forEach(o),kl.forEach(o),Pa=f(e),D=r(e,"P",{});var Vt=i(D);jr=l(Vt,"If you want to work at a commit-level, use the "),$t=r(Vt,"A",{href:!0});var Sp=i($t);Ar=l(Sp,"create_commit()"),Sp.forEach(o),Hr=l(Vt," function directly. There are two types of operations supported by "),kt=r(Vt,"A",{href:!0});var Lp=i(kt);Pr=l(Lp,"create_commit()"),Lp.forEach(o),qr=l(Vt,":"),Vt.forEach(o),qa=f(e),te=r(e,"UL",{});var jl=i(te);Re=r(jl,"LI",{});var Al=i(Re);jt=r(Al,"P",{});var Rn=i(jt);Po=r(Rn,"CODE",{});var Ip=i(Po);Cr=l(Ip,"CommitOperationAdd"),Ip.forEach(o),xr=l(Rn," uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),Rn.forEach(o),Dr=f(Al),Ue=r(Al,"UL",{});var Hl=i(Ue);At=r(Hl,"LI",{});var Un=i(At);qo=r(Un,"CODE",{});var Rp=i(qo);Or=l(Rp,"path_in_repo"),Rp.forEach(o),Tr=l(Un,": the repository path to upload a file to."),Un.forEach(o),Sr=f(Hl),Ht=r(Hl,"LI",{});var Fn=i(Ht);Co=r(Fn,"CODE",{});var Up=i(Co);Lr=l(Up,"path_or_fileobj"),Up.forEach(o),Ir=l(Fn,": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),Fn.forEach(o),Hl.forEach(o),Al.forEach(o),Rr=f(jl),xo=r(jl,"LI",{});var Fp=i(xo);oe=r(Fp,"P",{});var ha=i(oe);Do=r(ha,"CODE",{});var Np=i(Do);Ur=l(Np,"CommitOperationDelete"),Np.forEach(o),Fr=l(ha," removes a file from a repository. This operation accepts "),Oo=r(ha,"CODE",{});var Gp=i(Oo);Nr=l(Gp,"path_in_repo"),Gp.forEach(o),Gr=l(ha," as an argument."),ha.forEach(o),Fp.forEach(o),jl.forEach(o),Ca=f(e),Pt=r(e,"P",{});var Mp=i(Pt);Mr=l(Mp,"For example, if you want to upload two files and delete a file in a Hub repository:"),Mp.forEach(o),xa=f(e),qt=r(e,"OL",{});var Bp=i(qt);Fe=r(Bp,"LI",{});var Pl=i(Fe);Br=l(Pl,"Use the appropriate "),To=r(Pl,"CODE",{});var Wp=i(To);Wr=l(Wp,"CommitOperation"),Wp.forEach(o),Yr=l(Pl," to add and delete a file:"),Pl.forEach(o),Bp.forEach(o),Da=f(e),d(Ne.$$.fragment,e),Oa=f(e),Ge=r(e,"OL",{start:!0});var Yp=i(Ge);Me=r(Yp,"LI",{});var ql=i(Me);zr=l(ql,"Pass your operations to "),Ct=r(ql,"A",{href:!0});var zp=i(Ct);Jr=l(zp,"create_commit()"),zp.forEach(o),Kr=l(ql,":"),ql.forEach(o),Yp.forEach(o),Ta=f(e),d(Be.$$.fragment,e),Sa=f(e),A=r(e,"P",{});var ye=i(A);Qr=l(ye,"In addition to "),xt=r(ye,"A",{href:!0});var Jp=i(xt);Vr=l(Jp,"upload_file()"),Jp.forEach(o),Xr=l(ye," and "),Dt=r(ye,"A",{href:!0});var Kp=i(Dt);Zr=l(Kp,"upload_folder()"),Kp.forEach(o),ei=l(ye,", the following functions also use "),Ot=r(ye,"A",{href:!0});var Qp=i(Ot);ti=l(Qp,"create_commit()"),Qp.forEach(o),oi=l(ye," under the hood:"),ye.forEach(o),La=f(e),ae=r(e,"UL",{});var Cl=i(ae);Tt=r(Cl,"LI",{});var Nn=i(Tt);St=r(Nn,"A",{href:!0});var Vp=i(St);ai=l(Vp,"delete_file()"),Vp.forEach(o),li=l(Nn," deletes a single file from a repository on the Hub."),Nn.forEach(o),si=f(Cl),Lt=r(Cl,"LI",{});var Gn=i(Lt);So=r(Gn,"CODE",{});var Xp=i(So);ri=l(Xp,"metadata_update()"),Xp.forEach(o),ii=l(Gn," updates a repository\u2019s metadata."),Gn.forEach(o),Cl.forEach(o),Ia=f(e),le=r(e,"P",{});var xl=i(le);ni=l(xl,"For more detailed information, take a look at the "),It=r(xl,"A",{href:!0});var Zp=i(It);pi=l(Zp,"HfApi"),Zp.forEach(o),hi=l(xl," reference."),xl.forEach(o),Ra=f(e),B=r(e,"H2",{class:!0});var Dl=i(B);se=r(Dl,"A",{id:!0,class:!0,href:!0});var eh=i(se);Lo=r(eh,"SPAN",{});var th=i(Lo);d(We.$$.fragment,th),th.forEach(o),eh.forEach(o),fi=f(Dl),Io=r(Dl,"SPAN",{});var oh=i(Io);ci=l(oh,"Push files with Git LFS"),oh.forEach(o),Dl.forEach(o),Ua=f(e),Rt=r(e,"P",{});var ah=i(Rt);ui=l(ah,"Git LFS automatically handles files larger than 10MB. But for very large files (>5GB), you need to install a custom transfer agent for Git LFS:"),ah.forEach(o),Fa=f(e),d(Ye.$$.fragment,e),Na=f(e),Ut=r(e,"P",{});var lh=i(Ut);di=l(lh,"You should install this for each repository that has a very large file. Once installed, you\u2019ll be able to push files larger than 5GB."),lh.forEach(o),Ga=f(e),W=r(e,"H2",{class:!0});var Ol=i(W);re=r(Ol,"A",{id:!0,class:!0,href:!0});var sh=i(re);Ro=r(sh,"SPAN",{});var rh=i(Ro);d(ze.$$.fragment,rh),rh.forEach(o),sh.forEach(o),mi=f(Ol),Uo=r(Ol,"SPAN",{});var ih=i(Uo);_i=l(ih,"commit context manager"),ih.forEach(o),Ol.forEach(o),Ma=f(e),H=r(e,"P",{});var ve=i(H);gi=l(ve,"The "),Fo=r(ve,"CODE",{});var nh=i(Fo);yi=l(nh,"commit"),nh.forEach(o),vi=l(ve," context manager handles four of the most common Git commands: pull, add, commit, and push. "),No=r(ve,"CODE",{});var ph=i(No);wi=l(ph,"git-lfs"),ph.forEach(o),Ei=l(ve," automatically tracks any file larger than 10MB. In the following example, the "),Go=r(ve,"CODE",{});var hh=i(Go);bi=l(hh,"commit"),hh.forEach(o),$i=l(ve," context manager:"),ve.forEach(o),Ba=f(e),P=r(e,"OL",{});var we=i(P);Je=r(we,"LI",{});var Tl=i(Je);ki=l(Tl,"Pulls from the "),Mo=r(Tl,"CODE",{});var fh=i(Mo);ji=l(fh,"text-files"),fh.forEach(o),Ai=l(Tl," repository."),Tl.forEach(o),Hi=f(we),Ke=r(we,"LI",{});var Sl=i(Ke);Pi=l(Sl,"Adds a change made to "),Bo=r(Sl,"CODE",{});var ch=i(Bo);qi=l(ch,"file.txt"),ch.forEach(o),Ci=l(Sl,"."),Sl.forEach(o),xi=f(we),Wo=r(we,"LI",{});var uh=i(Wo);Di=l(uh,"Commits the change."),uh.forEach(o),Oi=f(we),Qe=r(we,"LI",{});var Ll=i(Qe);Ti=l(Ll,"Pushes the change to the "),Yo=r(Ll,"CODE",{});var dh=i(Yo);Si=l(dh,"text-files"),dh.forEach(o),Li=l(Ll," repository."),Ll.forEach(o),we.forEach(o),Wa=f(e),d(Ve.$$.fragment,e),Ya=f(e),ie=r(e,"P",{});var Il=i(ie);Ii=l(Il,"Here is another example of how to use the "),zo=r(Il,"CODE",{});var mh=i(zo);Ri=l(mh,"commit"),mh.forEach(o),Ui=l(Il," context manager to save and upload a file to a repository:"),Il.forEach(o),za=f(e),d(Xe.$$.fragment,e),Ja=f(e),ne=r(e,"P",{});var Rl=i(ne);Fi=l(Rl,"Set "),Jo=r(Rl,"CODE",{});var _h=i(Jo);Ni=l(_h,"blocking=False"),_h.forEach(o),Gi=l(Rl," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while your commits are being pushed."),Rl.forEach(o),Ka=f(e),d(Ze.$$.fragment,e),Qa=f(e),pe=r(e,"P",{});var Ul=i(pe);Mi=l(Ul,"You can check the status of your push with the "),Ko=r(Ul,"CODE",{});var gh=i(Ko);Bi=l(gh,"command_queue"),gh.forEach(o),Wi=l(Ul," method:"),Ul.forEach(o),Va=f(e),d(et.$$.fragment,e),Xa=f(e),Ft=r(e,"P",{});var yh=i(Ft);Yi=l(yh,"Refer to the table below for the possible statuses:"),yh.forEach(o),Za=f(e),he=r(e,"TABLE",{});var Fl=i(he);Qo=r(Fl,"THEAD",{});var vh=i(Qo);tt=r(vh,"TR",{});var Nl=i(tt);Vo=r(Nl,"TH",{});var wh=i(Vo);zi=l(wh,"Status"),wh.forEach(o),Ji=f(Nl),Xo=r(Nl,"TH",{});var Eh=i(Xo);Ki=l(Eh,"Description"),Eh.forEach(o),Nl.forEach(o),vh.forEach(o),Qi=f(Fl),Y=r(Fl,"TBODY",{});var Xt=i(Y);ot=r(Xt,"TR",{});var Gl=i(ot);Zo=r(Gl,"TD",{});var bh=i(Zo);Vi=l(bh,"-1"),bh.forEach(o),Xi=f(Gl),ea=r(Gl,"TD",{});var $h=i(ea);Zi=l($h,"The push is ongoing."),$h.forEach(o),Gl.forEach(o),en=f(Xt),at=r(Xt,"TR",{});var Ml=i(at);ta=r(Ml,"TD",{});var kh=i(ta);tn=l(kh,"0"),kh.forEach(o),on=f(Ml),oa=r(Ml,"TD",{});var jh=i(oa);an=l(jh,"The push has completed successfully."),jh.forEach(o),Ml.forEach(o),ln=f(Xt),lt=r(Xt,"TR",{});var Bl=i(lt);aa=r(Bl,"TD",{});var Ah=i(aa);sn=l(Ah,"Non-zero"),Ah.forEach(o),rn=f(Bl),la=r(Bl,"TD",{});var Hh=i(la);nn=l(Hh,"An error has occurred."),Hh.forEach(o),Bl.forEach(o),Xt.forEach(o),Fl.forEach(o),el=f(e),fe=r(e,"P",{});var Wl=i(fe);pn=l(Wl,"When "),sa=r(Wl,"CODE",{});var Ph=i(sa);hn=l(Ph,"blocking=False"),Ph.forEach(o),fn=l(Wl,", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Wl.forEach(o),tl=f(e),d(st.$$.fragment,e),ol=f(e),z=r(e,"H2",{class:!0});var Yl=i(z);ce=r(Yl,"A",{id:!0,class:!0,href:!0});var qh=i(ce);ra=r(qh,"SPAN",{});var Ch=i(ra);d(rt.$$.fragment,Ch),Ch.forEach(o),qh.forEach(o),cn=f(Yl),ia=r(Yl,"SPAN",{});var xh=i(ia);un=l(xh,"push_to_hub"),xh.forEach(o),Yl.forEach(o),al=f(e),$=r(e,"P",{});var L=i($);dn=l(L,"The "),Nt=r(L,"A",{href:!0});var Dh=i(Nt);mn=l(Dh,"Repository"),Dh.forEach(o),_n=l(L," class has a "),Gt=r(L,"A",{href:!0});var Oh=i(Gt);gn=l(Oh,"push_to_hub()"),Oh.forEach(o),yn=l(L," function to add files, make a commit, and push them to a repository. Unlike the "),na=r(L,"CODE",{});var Th=i(na);vn=l(Th,"commit"),Th.forEach(o),wn=l(L," context manager, you\u2019ll need to pull from a repository first before calling "),Mt=r(L,"A",{href:!0});var Sh=i(Mt);En=l(Sh,"push_to_hub()"),Sh.forEach(o),bn=l(L,"."),L.forEach(o),ll=f(e),ue=r(e,"P",{});var zl=i(ue);$n=l(zl,"For example, if you\u2019ve already cloned a repository from the Hub, then you can initialize the "),pa=r(zl,"CODE",{});var Lh=i(pa);kn=l(Lh,"repo"),Lh.forEach(o),jn=l(zl," from the local directory:"),zl.forEach(o),sl=f(e),d(it.$$.fragment,e),rl=f(e),de=r(e,"P",{});var Jl=i(de);An=l(Jl,"Update your local clone with "),Bt=r(Jl,"A",{href:!0});var Ih=i(Bt);Hn=l(Ih,"git_pull()"),Ih.forEach(o),Pn=l(Jl," and then push your file to the Hub:"),Jl.forEach(o),il=f(e),d(nt.$$.fragment,e),nl=f(e),O=r(e,"P",{});var Zt=i(O);qn=l(Zt,"However, if you aren\u2019t ready to push a file yet, you can use "),Wt=r(Zt,"A",{href:!0});var Rh=i(Wt);Cn=l(Rh,"git_add()"),Rh.forEach(o),xn=l(Zt," and "),Yt=r(Zt,"A",{href:!0});var Uh=i(Yt);Dn=l(Uh,"git_commit()"),Uh.forEach(o),On=l(Zt," to only add and commit your file:"),Zt.forEach(o),pl=f(e),d(pt.$$.fragment,e),hl=f(e),me=r(e,"P",{});var Kl=i(me);Tn=l(Kl,"When you\u2019re ready, push the file to your repository with "),zt=r(Kl,"A",{href:!0});var Fh=i(zt);Sn=l(Fh,"git_push()"),Fh.forEach(o),Ln=l(Kl,":"),Kl.forEach(o),fl=f(e),d(ht.$$.fragment,e),this.h()},h(){c(I,"name","hf:doc:metadata"),c(I,"content",JSON.stringify(Jh)),c(J,"id","upload-files-to-the-hub"),c(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J,"href","#upload-files-to-the-hub"),c(R,"class","relative group"),c(ke,"href","https://git-lfs.github.com/"),c(ke,"rel","nofollow"),c(ft,"href","/docs/huggingface_hub/pr_1006/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(V,"id","push-files-without-git"),c(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V,"href","#push-files-without-git"),c(F,"class","relative group"),c(dt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(mt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(_t,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(gt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(yt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(vt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(X,"id","upload-a-file"),c(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X,"href","#upload-a-file"),c(N,"class","relative group"),c(wt,"href","./how-to-manage#create-a-repository"),c(Et,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(Z,"id","upload-a-folder"),c(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z,"href","#upload-a-folder"),c(G,"class","relative group"),c(bt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(Se,"href","https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm"),c(Se,"rel","nofollow"),c(ee,"id","createcommit"),c(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ee,"href","#createcommit"),c(M,"class","relative group"),c($t,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(kt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Ct,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Ge,"start","2"),c(xt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(Dt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(Ot,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(St,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file"),c(It,"href","/docs/huggingface_hub/pr_1006/en/package_reference/hf_api#huggingface_hub.HfApi"),c(se,"id","push-files-with-git-lfs"),c(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(se,"href","#push-files-with-git-lfs"),c(B,"class","relative group"),c(re,"id","commit-context-manager"),c(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(re,"href","#commit-context-manager"),c(W,"class","relative group"),c(ce,"id","pushtohub"),c(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ce,"href","#pushtohub"),c(z,"class","relative group"),c(Nt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/repository#huggingface_hub.Repository"),c(Gt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(Mt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(Bt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/repository#huggingface_hub.Repository.git_pull"),c(Wt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/repository#huggingface_hub.Repository.git_add"),c(Yt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/repository#huggingface_hub.Repository.git_commit"),c(zt,"href","/docs/huggingface_hub/pr_1006/en/package_reference/repository#huggingface_hub.Repository.git_push")},m(e,n){t(document.head,I),p(e,fa,n),p(e,R,n),t(R,J),t(J,eo),m(be,eo,null),t(R,Ql),t(R,to),t(to,Vl),p(e,ca,n),p(e,K,n),t(K,Xl),t(K,oo),t(oo,Zl),t(K,es),p(e,ua,n),p(e,k,n),t(k,ao),t(ao,ts),t(k,os),t(k,$e),t($e,as),t($e,ke),t(ke,ls),t($e,ss),t(k,rs),t(k,je),t(je,is),t(je,lo),t(lo,ns),t(je,ps),t(k,hs),t(k,Ae),t(Ae,fs),t(Ae,ft),t(ft,cs),t(Ae,us),p(e,da,n),p(e,ct,n),t(ct,ds),p(e,ma,n),p(e,Q,n),t(Q,He),t(He,so),t(so,ms),t(He,_s),m(Pe,He,null),t(Q,gs),t(Q,U),t(U,qe),t(qe,ys),t(qe,ro),t(ro,vs),t(qe,ws),t(U,Es),m(Ce,U,null),t(U,bs),t(U,ut),t(ut,io),t(io,$s),t(ut,ks),p(e,_a,n),p(e,F,n),t(F,V),t(V,no),m(xe,no,null),t(F,js),t(F,po),t(po,As),p(e,ga,n),p(e,C,n),t(C,Hs),t(C,dt),t(dt,Ps),t(C,qs),t(C,mt),t(mt,Cs),t(C,xs),p(e,ya,n),p(e,E,n),t(E,Ds),t(E,_t),t(_t,Os),t(E,Ts),t(E,gt),t(gt,Ss),t(E,Ls),t(E,yt),t(yt,Is),t(E,Rs),t(E,vt),t(vt,Us),t(E,Fs),p(e,va,n),p(e,N,n),t(N,X),t(X,ho),m(De,ho,null),t(N,Ns),t(N,fo),t(fo,Gs),p(e,wa,n),p(e,x,n),t(x,Ms),t(x,wt),t(wt,co),t(co,Bs),t(x,Ws),t(x,Et),t(Et,Ys),t(x,zs),p(e,Ea,n),p(e,j,n),t(j,Js),t(j,uo),t(uo,Ks),t(j,Qs),t(j,mo),t(mo,Vs),t(j,Xs),t(j,_o),t(_o,Zs),t(j,er),p(e,ba,n),m(Oe,e,n),p(e,$a,n),p(e,G,n),t(G,Z),t(Z,go),m(Te,go,null),t(G,tr),t(G,yo),t(yo,or),p(e,ka,n),p(e,b,n),t(b,ar),t(b,bt),t(bt,lr),t(b,sr),t(b,vo),t(vo,rr),t(b,ir),t(b,wo),t(wo,nr),t(b,pr),t(b,Eo),t(Eo,hr),t(b,fr),p(e,ja,n),p(e,v,n),t(v,cr),t(v,bo),t(bo,ur),t(v,dr),t(v,$o),t($o,mr),t(v,_r),t(v,Se),t(Se,gr),t(v,yr),t(v,ko),t(ko,vr),t(v,wr),t(v,jo),t(jo,Er),t(v,br),p(e,Aa,n),m(Le,e,n),p(e,Ha,n),p(e,M,n),t(M,ee),t(ee,Ao),m(Ie,Ao,null),t(M,$r),t(M,Ho),t(Ho,kr),p(e,Pa,n),p(e,D,n),t(D,jr),t(D,$t),t($t,Ar),t(D,Hr),t(D,kt),t(kt,Pr),t(D,qr),p(e,qa,n),p(e,te,n),t(te,Re),t(Re,jt),t(jt,Po),t(Po,Cr),t(jt,xr),t(Re,Dr),t(Re,Ue),t(Ue,At),t(At,qo),t(qo,Or),t(At,Tr),t(Ue,Sr),t(Ue,Ht),t(Ht,Co),t(Co,Lr),t(Ht,Ir),t(te,Rr),t(te,xo),t(xo,oe),t(oe,Do),t(Do,Ur),t(oe,Fr),t(oe,Oo),t(Oo,Nr),t(oe,Gr),p(e,Ca,n),p(e,Pt,n),t(Pt,Mr),p(e,xa,n),p(e,qt,n),t(qt,Fe),t(Fe,Br),t(Fe,To),t(To,Wr),t(Fe,Yr),p(e,Da,n),m(Ne,e,n),p(e,Oa,n),p(e,Ge,n),t(Ge,Me),t(Me,zr),t(Me,Ct),t(Ct,Jr),t(Me,Kr),p(e,Ta,n),m(Be,e,n),p(e,Sa,n),p(e,A,n),t(A,Qr),t(A,xt),t(xt,Vr),t(A,Xr),t(A,Dt),t(Dt,Zr),t(A,ei),t(A,Ot),t(Ot,ti),t(A,oi),p(e,La,n),p(e,ae,n),t(ae,Tt),t(Tt,St),t(St,ai),t(Tt,li),t(ae,si),t(ae,Lt),t(Lt,So),t(So,ri),t(Lt,ii),p(e,Ia,n),p(e,le,n),t(le,ni),t(le,It),t(It,pi),t(le,hi),p(e,Ra,n),p(e,B,n),t(B,se),t(se,Lo),m(We,Lo,null),t(B,fi),t(B,Io),t(Io,ci),p(e,Ua,n),p(e,Rt,n),t(Rt,ui),p(e,Fa,n),m(Ye,e,n),p(e,Na,n),p(e,Ut,n),t(Ut,di),p(e,Ga,n),p(e,W,n),t(W,re),t(re,Ro),m(ze,Ro,null),t(W,mi),t(W,Uo),t(Uo,_i),p(e,Ma,n),p(e,H,n),t(H,gi),t(H,Fo),t(Fo,yi),t(H,vi),t(H,No),t(No,wi),t(H,Ei),t(H,Go),t(Go,bi),t(H,$i),p(e,Ba,n),p(e,P,n),t(P,Je),t(Je,ki),t(Je,Mo),t(Mo,ji),t(Je,Ai),t(P,Hi),t(P,Ke),t(Ke,Pi),t(Ke,Bo),t(Bo,qi),t(Ke,Ci),t(P,xi),t(P,Wo),t(Wo,Di),t(P,Oi),t(P,Qe),t(Qe,Ti),t(Qe,Yo),t(Yo,Si),t(Qe,Li),p(e,Wa,n),m(Ve,e,n),p(e,Ya,n),p(e,ie,n),t(ie,Ii),t(ie,zo),t(zo,Ri),t(ie,Ui),p(e,za,n),m(Xe,e,n),p(e,Ja,n),p(e,ne,n),t(ne,Fi),t(ne,Jo),t(Jo,Ni),t(ne,Gi),p(e,Ka,n),m(Ze,e,n),p(e,Qa,n),p(e,pe,n),t(pe,Mi),t(pe,Ko),t(Ko,Bi),t(pe,Wi),p(e,Va,n),m(et,e,n),p(e,Xa,n),p(e,Ft,n),t(Ft,Yi),p(e,Za,n),p(e,he,n),t(he,Qo),t(Qo,tt),t(tt,Vo),t(Vo,zi),t(tt,Ji),t(tt,Xo),t(Xo,Ki),t(he,Qi),t(he,Y),t(Y,ot),t(ot,Zo),t(Zo,Vi),t(ot,Xi),t(ot,ea),t(ea,Zi),t(Y,en),t(Y,at),t(at,ta),t(ta,tn),t(at,on),t(at,oa),t(oa,an),t(Y,ln),t(Y,lt),t(lt,aa),t(aa,sn),t(lt,rn),t(lt,la),t(la,nn),p(e,el,n),p(e,fe,n),t(fe,pn),t(fe,sa),t(sa,hn),t(fe,fn),p(e,tl,n),m(st,e,n),p(e,ol,n),p(e,z,n),t(z,ce),t(ce,ra),m(rt,ra,null),t(z,cn),t(z,ia),t(ia,un),p(e,al,n),p(e,$,n),t($,dn),t($,Nt),t(Nt,mn),t($,_n),t($,Gt),t(Gt,gn),t($,yn),t($,na),t(na,vn),t($,wn),t($,Mt),t(Mt,En),t($,bn),p(e,ll,n),p(e,ue,n),t(ue,$n),t(ue,pa),t(pa,kn),t(ue,jn),p(e,sl,n),m(it,e,n),p(e,rl,n),p(e,de,n),t(de,An),t(de,Bt),t(Bt,Hn),t(de,Pn),p(e,il,n),m(nt,e,n),p(e,nl,n),p(e,O,n),t(O,qn),t(O,Wt),t(Wt,Cn),t(O,xn),t(O,Yt),t(Yt,Dn),t(O,On),p(e,pl,n),m(pt,e,n),p(e,hl,n),p(e,me,n),t(me,Tn),t(me,zt),t(zt,Sn),t(me,Ln),p(e,fl,n),m(ht,e,n),cl=!0},p:Wh,i(e){cl||(_(be.$$.fragment,e),_(Pe.$$.fragment,e),_(Ce.$$.fragment,e),_(xe.$$.fragment,e),_(De.$$.fragment,e),_(Oe.$$.fragment,e),_(Te.$$.fragment,e),_(Le.$$.fragment,e),_(Ie.$$.fragment,e),_(Ne.$$.fragment,e),_(Be.$$.fragment,e),_(We.$$.fragment,e),_(Ye.$$.fragment,e),_(ze.$$.fragment,e),_(Ve.$$.fragment,e),_(Xe.$$.fragment,e),_(Ze.$$.fragment,e),_(et.$$.fragment,e),_(st.$$.fragment,e),_(rt.$$.fragment,e),_(it.$$.fragment,e),_(nt.$$.fragment,e),_(pt.$$.fragment,e),_(ht.$$.fragment,e),cl=!0)},o(e){g(be.$$.fragment,e),g(Pe.$$.fragment,e),g(Ce.$$.fragment,e),g(xe.$$.fragment,e),g(De.$$.fragment,e),g(Oe.$$.fragment,e),g(Te.$$.fragment,e),g(Le.$$.fragment,e),g(Ie.$$.fragment,e),g(Ne.$$.fragment,e),g(Be.$$.fragment,e),g(We.$$.fragment,e),g(Ye.$$.fragment,e),g(ze.$$.fragment,e),g(Ve.$$.fragment,e),g(Xe.$$.fragment,e),g(Ze.$$.fragment,e),g(et.$$.fragment,e),g(st.$$.fragment,e),g(rt.$$.fragment,e),g(it.$$.fragment,e),g(nt.$$.fragment,e),g(pt.$$.fragment,e),g(ht.$$.fragment,e),cl=!1},d(e){o(I),e&&o(fa),e&&o(R),y(be),e&&o(ca),e&&o(K),e&&o(ua),e&&o(k),e&&o(da),e&&o(ct),e&&o(ma),e&&o(Q),y(Pe),y(Ce),e&&o(_a),e&&o(F),y(xe),e&&o(ga),e&&o(C),e&&o(ya),e&&o(E),e&&o(va),e&&o(N),y(De),e&&o(wa),e&&o(x),e&&o(Ea),e&&o(j),e&&o(ba),y(Oe,e),e&&o($a),e&&o(G),y(Te),e&&o(ka),e&&o(b),e&&o(ja),e&&o(v),e&&o(Aa),y(Le,e),e&&o(Ha),e&&o(M),y(Ie),e&&o(Pa),e&&o(D),e&&o(qa),e&&o(te),e&&o(Ca),e&&o(Pt),e&&o(xa),e&&o(qt),e&&o(Da),y(Ne,e),e&&o(Oa),e&&o(Ge),e&&o(Ta),y(Be,e),e&&o(Sa),e&&o(A),e&&o(La),e&&o(ae),e&&o(Ia),e&&o(le),e&&o(Ra),e&&o(B),y(We),e&&o(Ua),e&&o(Rt),e&&o(Fa),y(Ye,e),e&&o(Na),e&&o(Ut),e&&o(Ga),e&&o(W),y(ze),e&&o(Ma),e&&o(H),e&&o(Ba),e&&o(P),e&&o(Wa),y(Ve,e),e&&o(Ya),e&&o(ie),e&&o(za),y(Xe,e),e&&o(Ja),e&&o(ne),e&&o(Ka),y(Ze,e),e&&o(Qa),e&&o(pe),e&&o(Va),y(et,e),e&&o(Xa),e&&o(Ft),e&&o(Za),e&&o(he),e&&o(el),e&&o(fe),e&&o(tl),y(st,e),e&&o(ol),e&&o(z),y(rt),e&&o(al),e&&o($),e&&o(ll),e&&o(ue),e&&o(sl),y(it,e),e&&o(rl),e&&o(de),e&&o(il),y(nt,e),e&&o(nl),e&&o(O),e&&o(pl),y(pt,e),e&&o(hl),e&&o(me),e&&o(fl),y(ht,e)}}}const Jh={local:"upload-files-to-the-hub",sections:[{local:"push-files-without-git",sections:[{local:"upload-a-file",title:"Upload a file"},{local:"upload-a-folder",title:"Upload a folder"},{local:"createcommit",title:"create_commit"}],title:"Push files without Git"},{local:"push-files-with-git-lfs",title:"Push files with Git LFS"},{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"}],title:"Upload files to the Hub"};function Kh(Mn){return Yh(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Zh extends Nh{constructor(I){super();Gh(this,I,Kh,zh,Mh,{})}}export{Zh as default,Jh as metadata};
