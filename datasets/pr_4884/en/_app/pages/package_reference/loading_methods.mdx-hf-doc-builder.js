import{S as Fl,i as Pl,s as ql,e as o,k as f,w as b,t as d,M as Tl,c as n,d as a,m,a as r,x as w,h as c,b as v,G as t,g as u,y as x,q as k,o as E,B as D,v as Il,L as M}from"../../chunks/vendor-hf-doc-builder.js";import{T as mi}from"../../chunks/Tip-hf-doc-builder.js";import{D as q}from"../../chunks/Docstring-hf-doc-builder.js";import{C as L}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as W}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as U}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";import{D as gi}from"../../chunks/Deprecated-hf-doc-builder.js";function Al(j){let i,$,g,p,_;return p=new L({props:{code:`from datasets import list_datasets
list_datasets()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> list_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>list_datasets()
[<span class="hljs-string">&#x27;acronym_identification&#x27;</span>,
 <span class="hljs-string">&#x27;ade_corpus_v2&#x27;</span>,
 <span class="hljs-string">&#x27;adversarial_qa&#x27;</span>,
 <span class="hljs-string">&#x27;aeslc&#x27;</span>,
 <span class="hljs-string">&#x27;afrikaans_ner_corpus&#x27;</span>,
 <span class="hljs-string">&#x27;ag_news&#x27;</span>,
 ...
]`}}),{c(){i=o("p"),$=d("Example:"),g=f(),b(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),g=m(s),w(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,g,l),x(p,s,l),_=!0},p:M,i(s){_||(k(p.$$.fragment,s),_=!0)},o(s){E(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(g),D(p,s)}}}function Ll(j){let i,$,g,p,_;return{c(){i=o("p"),$=d("Passing "),g=o("em"),p=d("use_auth_token=True"),_=d(" is required when you want to access a private dataset.")},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Passing "),g=n(l,"EM",{});var N=r(g);p=c(N,"use_auth_token=True"),N.forEach(a),_=c(l," is required when you want to access a private dataset."),l.forEach(a)},m(s,l){u(s,i,l),t(i,$),t(i,g),t(g,p),t(i,_)},d(s){s&&a(i)}}}function Hl(j){let i,$,g,p,_;return p=new L({props:{code:`from datasets import load_dataset
ds = load_dataset('rotten_tomatoes', split='train')

data_files = {'train': 'train.csv', 'test': 'test.csv'}
ds = load_dataset('namespace/your_dataset_name', data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)

<span class="hljs-comment"># Map data files to splits</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;train.csv&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-string">&#x27;test.csv&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;namespace/your_dataset_name&#x27;</span>, data_files=data_files)`}}),{c(){i=o("p"),$=d("Load a dataset from the Hugging Face Hub:"),g=f(),b(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Load a dataset from the Hugging Face Hub:"),l.forEach(a),g=m(s),w(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,g,l),x(p,s,l),_=!0},p:M,i(s){_||(k(p.$$.fragment,s),_=!0)},o(s){E(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(g),D(p,s)}}}function Ul(j){let i,$,g,p,_;return p=new L({props:{code:`from datasets import load_dataset
ds = load_dataset('csv', data_files='path/to/local/my_dataset.csv')

from datasets import load_dataset
ds = load_dataset('json', data_files='path/to/local/my_dataset.json')

from datasets import load_dataset
ds = load_dataset('path/to/local/loading_script/loading_script.py', split='train')`,highlighted:`<span class="hljs-comment"># Load a CSV file</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files=<span class="hljs-string">&#x27;path/to/local/my_dataset.csv&#x27;</span>)

<span class="hljs-comment"># Load a JSON file</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;json&#x27;</span>, data_files=<span class="hljs-string">&#x27;path/to/local/my_dataset.json&#x27;</span>)

<span class="hljs-comment"># Load from a local loading script</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;path/to/local/loading_script/loading_script.py&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)`}}),{c(){i=o("p"),$=d("Load a local dataset:"),g=f(),b(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Load a local dataset:"),l.forEach(a),g=m(s),w(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,g,l),x(p,s,l),_=!0},p:M,i(s){_||(k(p.$$.fragment,s),_=!0)},o(s){E(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(g),D(p,s)}}}function Ml(j){let i,$,g,p,_,s,l,N;return l=new L({props:{code:`from datasets import load_dataset
ds = load_dataset('rotten_tomatoes', split='train', streaming=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)`}}),{c(){i=o("p"),$=d("Load an ["),g=o("em"),p=d("~datasets.IterableDataset"),_=d("]:"),s=f(),b(l.$$.fragment)},l(y){i=n(y,"P",{});var O=r(i);$=c(O,"Load an ["),g=n(O,"EM",{});var F=r(g);p=c(F,"~datasets.IterableDataset"),F.forEach(a),_=c(O,"]:"),O.forEach(a),s=m(y),w(l.$$.fragment,y)},m(y,O){u(y,i,O),t(i,$),t(i,g),t(g,p),t(i,_),u(y,s,O),x(l,y,O),N=!0},p:M,i(y){N||(k(l.$$.fragment,y),N=!0)},o(y){E(l.$$.fragment,y),N=!1},d(y){y&&a(i),y&&a(s),D(l,y)}}}function Vl(j){let i,$,g,p,_,s,l,N;return l=new L({props:{code:`from datasets import load_dataset
ds = load_dataset('imagefolder', data_dir='/path/to/images', split='train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;imagefolder&#x27;</span>, data_dir=<span class="hljs-string">&#x27;/path/to/images&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)`}}),{c(){i=o("p"),$=d("Load an image dataset with the "),g=o("em"),p=d("ImageFolder"),_=d(" dataset builder:"),s=f(),b(l.$$.fragment)},l(y){i=n(y,"P",{});var O=r(i);$=c(O,"Load an image dataset with the "),g=n(O,"EM",{});var F=r(g);p=c(F,"ImageFolder"),F.forEach(a),_=c(O," dataset builder:"),O.forEach(a),s=m(y),w(l.$$.fragment,y)},m(y,O){u(y,i,O),t(i,$),t(i,g),t(g,p),t(i,_),u(y,s,O),x(l,y,O),N=!0},p:M,i(y){N||(k(l.$$.fragment,y),N=!0)},o(y){E(l.$$.fragment,y),N=!1},d(y){y&&a(i),y&&a(s),D(l,y)}}}function Bl(j){let i,$,g,p,_;return p=new L({props:{code:`from datasets import load_from_disk
ds = load_from_disk('path/to/dataset/directory')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&#x27;path/to/dataset/directory&#x27;</span>)`}}),{c(){i=o("p"),$=d("Example:"),g=f(),b(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),g=m(s),w(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,g,l),x(p,s,l),_=!0},p:M,i(s){_||(k(p.$$.fragment,s),_=!0)},o(s){E(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(g),D(p,s)}}}function Rl(j){let i,$,g,p,_;return{c(){i=o("p"),$=d("Passing "),g=o("em"),p=d("use_auth_token=True"),_=d(" is required when you want to access a private dataset.")},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Passing "),g=n(l,"EM",{});var N=r(g);p=c(N,"use_auth_token=True"),N.forEach(a),_=c(l," is required when you want to access a private dataset."),l.forEach(a)},m(s,l){u(s,i,l),t(i,$),t(i,g),t(g,p),t(i,_)},d(s){s&&a(i)}}}function Jl(j){let i,$,g,p,_;return p=new L({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder('rotten_tomatoes')
ds_builder.info.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.info.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=o("p"),$=d("Example:"),g=f(),b(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),g=m(s),w(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,g,l),x(p,s,l),_=!0},p:M,i(s){_||(k(p.$$.fragment,s),_=!0)},o(s){E(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(g),D(p,s)}}}function Yl(j){let i,$,g,p,_;return p=new L({props:{code:`from datasets import get_dataset_config_names
get_dataset_config_names("glue")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> get_dataset_config_names
<span class="hljs-meta">&gt;&gt;&gt; </span>get_dataset_config_names(<span class="hljs-string">&quot;glue&quot;</span>)
[<span class="hljs-string">&#x27;cola&#x27;</span>,
 <span class="hljs-string">&#x27;sst2&#x27;</span>,
 <span class="hljs-string">&#x27;mrpc&#x27;</span>,
 <span class="hljs-string">&#x27;qqp&#x27;</span>,
 <span class="hljs-string">&#x27;stsb&#x27;</span>,
 <span class="hljs-string">&#x27;mnli&#x27;</span>,
 <span class="hljs-string">&#x27;mnli_mismatched&#x27;</span>,
 <span class="hljs-string">&#x27;mnli_matched&#x27;</span>,
 <span class="hljs-string">&#x27;qnli&#x27;</span>,
 <span class="hljs-string">&#x27;rte&#x27;</span>,
 <span class="hljs-string">&#x27;wnli&#x27;</span>,
 <span class="hljs-string">&#x27;ax&#x27;</span>]`}}),{c(){i=o("p"),$=d("Example:"),g=f(),b(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),g=m(s),w(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,g,l),x(p,s,l),_=!0},p:M,i(s){_||(k(p.$$.fragment,s),_=!0)},o(s){E(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(g),D(p,s)}}}function zl(j){let i,$,g,p,_;return p=new L({props:{code:`from datasets import get_dataset_infos
get_dataset_infos('rotten_tomatoes')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> get_dataset_infos
<span class="hljs-meta">&gt;&gt;&gt; </span>get_dataset_infos(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
{<span class="hljs-string">&#x27;default&#x27;</span>: DatasetInfo(description=<span class="hljs-string">&quot;Movie Review Dataset.
 is a dataset of containing 5,331 positive and 5,331 negative processed
ences from Rotten Tomatoes movie reviews...), ...}</span>`}}),{c(){i=o("p"),$=d("Example:"),g=f(),b(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),g=m(s),w(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,g,l),x(p,s,l),_=!0},p:M,i(s){_||(k(p.$$.fragment,s),_=!0)},o(s){E(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(g),D(p,s)}}}function Gl(j){let i,$,g,p,_;return p=new L({props:{code:`from datasets import get_dataset_split_names
get_dataset_split_names('rotten_tomatoes')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> get_dataset_split_names
<span class="hljs-meta">&gt;&gt;&gt; </span>get_dataset_split_names(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
[<span class="hljs-string">&#x27;train&#x27;</span>, <span class="hljs-string">&#x27;validation&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>]`}}),{c(){i=o("p"),$=d("Example:"),g=f(),b(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),g=m(s),w(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,g,l),x(p,s,l),_=!0},p:M,i(s){_||(k(p.$$.fragment,s),_=!0)},o(s){E(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(g),D(p,s)}}}function Xl(j){let i,$,g,p,_;return{c(){i=o("p"),$=d("Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),g=o("a"),p=d("Evaluate"),_=d("! In addition to metrics, you can find more tools for evaluating models and datasets."),this.h()},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),g=n(l,"A",{href:!0,rel:!0});var N=r(g);p=c(N,"Evaluate"),N.forEach(a),_=c(l,"! In addition to metrics, you can find more tools for evaluating models and datasets."),l.forEach(a),this.h()},h(){v(g,"href","https://huggingface.co/docs/evaluate/index"),v(g,"rel","nofollow")},m(s,l){u(s,i,l),t(i,$),t(i,g),t(g,p),t(i,_)},d(s){s&&a(i)}}}function Wl(j){let i,$,g,p,_,s,l;return{c(){i=o("p"),$=d("Use "),g=o("em"),p=d("evaluate.list_evaluation_modules"),_=d(" instead, from the new library \u{1F917} Evaluate: "),s=o("a"),l=d("https://huggingface.co/docs/evaluate"),this.h()},l(N){i=n(N,"P",{});var y=r(i);$=c(y,"Use "),g=n(y,"EM",{});var O=r(g);p=c(O,"evaluate.list_evaluation_modules"),O.forEach(a),_=c(y," instead, from the new library \u{1F917} Evaluate: "),s=n(y,"A",{href:!0,rel:!0});var F=r(s);l=c(F,"https://huggingface.co/docs/evaluate"),F.forEach(a),y.forEach(a),this.h()},h(){v(s,"href","https://huggingface.co/docs/evaluate"),v(s,"rel","nofollow")},m(N,y){u(N,i,y),t(i,$),t(i,g),t(g,p),t(i,_),t(i,s),t(s,l)},d(N){N&&a(i)}}}function Kl(j){let i,$,g,p,_;return p=new L({props:{code:`from datasets import list_metrics
list_metrics()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> list_metrics
<span class="hljs-meta">&gt;&gt;&gt; </span>list_metrics()
[<span class="hljs-string">&#x27;accuracy&#x27;</span>,
 <span class="hljs-string">&#x27;bertscore&#x27;</span>,
 <span class="hljs-string">&#x27;bleu&#x27;</span>,
 <span class="hljs-string">&#x27;bleurt&#x27;</span>,
 <span class="hljs-string">&#x27;cer&#x27;</span>,
 <span class="hljs-string">&#x27;chrf&#x27;</span>,
 ...
]`}}),{c(){i=o("p"),$=d("Example:"),g=f(),b(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),g=m(s),w(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,g,l),x(p,s,l),_=!0},p:M,i(s){_||(k(p.$$.fragment,s),_=!0)},o(s){E(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(g),D(p,s)}}}function Zl(j){let i,$,g,p,_,s,l;return{c(){i=o("p"),$=d("Use "),g=o("em"),p=d("evaluate.load"),_=d(" instead, from the new library \u{1F917} Evaluate: "),s=o("a"),l=d("https://huggingface.co/docs/evaluate"),this.h()},l(N){i=n(N,"P",{});var y=r(i);$=c(y,"Use "),g=n(y,"EM",{});var O=r(g);p=c(O,"evaluate.load"),O.forEach(a),_=c(y," instead, from the new library \u{1F917} Evaluate: "),s=n(y,"A",{href:!0,rel:!0});var F=r(s);l=c(F,"https://huggingface.co/docs/evaluate"),F.forEach(a),y.forEach(a),this.h()},h(){v(s,"href","https://huggingface.co/docs/evaluate"),v(s,"rel","nofollow")},m(N,y){u(N,i,y),t(i,$),t(i,g),t(g,p),t(i,_),t(i,s),t(s,l)},d(N){N&&a(i)}}}function Ql(j){let i,$,g,p,_;return p=new L({props:{code:`from datasets import load_metric
accuracy = load_metric('accuracy')
accuracy.compute(references=[1, 0], predictions=[1, 1])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = load_metric(<span class="hljs-string">&#x27;accuracy&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute(references=[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], predictions=[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),{c(){i=o("p"),$=d("Example:"),g=f(),b(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),g=m(s),w(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,g,l),x(p,s,l),_=!0},p:M,i(s){_||(k(p.$$.fragment,s),_=!0)},o(s){E(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(g),D(p,s)}}}function ed(j){let i,$,g,p,_,s,l;return{c(){i=o("p"),$=d("Use "),g=o("em"),p=d("evaluate.inspect_evaluation_module"),_=d(" instead, from the new library \u{1F917} Evaluate instead: "),s=o("a"),l=d("https://huggingface.co/docs/evaluate"),this.h()},l(N){i=n(N,"P",{});var y=r(i);$=c(y,"Use "),g=n(y,"EM",{});var O=r(g);p=c(O,"evaluate.inspect_evaluation_module"),O.forEach(a),_=c(y," instead, from the new library \u{1F917} Evaluate instead: "),s=n(y,"A",{href:!0,rel:!0});var F=r(s);l=c(F,"https://huggingface.co/docs/evaluate"),F.forEach(a),y.forEach(a),this.h()},h(){v(s,"href","https://huggingface.co/docs/evaluate"),v(s,"rel","nofollow")},m(N,y){u(N,i,y),t(i,$),t(i,g),t(g,p),t(i,_),t(i,s),t(s,l)},d(N){N&&a(i)}}}function td(j){let i,$,g,p,_,s,l,N,y,O,F,wo,ys,K,ve,Qt,Ze,xo,ea,ko,bs,V,Qe,Eo,ta,Do,No,$e,ws,C,et,jo,aa,Co,So,Z,Oo,tt,Fo,Po,sa,qo,To,Io,oa,Ao,Lo,at,na,Ho,Uo,ra,Mo,Vo,ia,Bo,Ro,la,Jo,Yo,Q,B,st,zo,da,Go,Xo,Wo,ca,Ko,Zo,pa,Qo,en,ye,tn,ot,an,sn,nt,on,nn,rt,fa,rn,ln,it,ma,ga,dn,cn,lt,ha,pn,fn,ua,mn,gn,_a,dt,hn,va,un,_n,vn,$a,$n,yn,be,bn,ya,wn,xn,we,kn,xe,En,ke,Dn,Ee,xs,R,ct,Nn,J,jn,Ut,Cn,Sn,Mt,On,Fn,ba,Pn,qn,Tn,De,ks,P,pt,In,wa,An,Ln,ee,Hn,ft,Un,Mn,xa,Vn,Bn,Rn,ka,Jn,Yn,mt,Ea,zn,Gn,Da,Xn,Wn,Na,Kn,Zn,Ne,Qn,je,Es,Y,gt,er,ja,tr,ar,Ce,Ds,z,ht,sr,Ca,or,nr,Se,Ns,G,ut,rr,Sa,ir,lr,Oe,js,te,_t,dr,Oa,cr,Cs,ae,Fe,Fa,vt,pr,Pa,fr,Ss,Pe,Os,I,$t,mr,qa,gr,hr,qe,ur,Te,Fs,A,yt,_r,bt,vr,Ta,$r,yr,br,Ie,wr,Ae,Ps,X,wt,xr,Ia,kr,Er,Le,qs,se,He,Aa,xt,Dr,La,Nr,Ts,Vt,jr,Is,Ue,Bt,Cr,Ha,Sr,Or,Rt,Fr,Ua,Pr,As,H,qr,Ma,Tr,Ir,Va,Ar,Lr,Jt,Hr,Ur,Ls,kt,Hs,oe,Me,Ba,Et,Mr,Ra,Vr,Us,ne,Dt,Br,Ja,Rr,Ms,re,Ve,Ya,Nt,Jr,za,Yr,Vs,ie,jt,zr,Ga,Gr,Bs,le,Be,Xa,Ct,Xr,Wa,Wr,Rs,de,St,Kr,Ka,Zr,Js,ce,Re,Za,Ot,Qr,Qa,ei,Ys,pe,Ft,ti,es,ai,zs,fe,Je,ts,Pt,si,as,oi,Gs,me,qt,ni,ss,ri,Xs,ge,Ye,os,Tt,ii,ns,li,Ws,he,It,di,rs,ci,Ks;return s=new W({}),Ze=new W({}),Qe=new q({props:{name:"datasets.list_datasets",anchor:"datasets.list_datasets",parameters:[{name:"with_community_datasets",val:" = True"},{name:"with_details",val:" = False"}],parametersDescription:[{anchor:"datasets.list_datasets.with_community_datasets",description:"<strong>with_community_datasets</strong> (<code>bool</code>, optional, default <code>True</code>) &#x2014; Include the community provided datasets.",name:"with_community_datasets"},{anchor:"datasets.list_datasets.with_details",description:"<strong>with_details</strong> (<code>bool</code>, optional, default <code>False</code>) &#x2014; Return the full details on the datasets instead of only the short name.",name:"with_details"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/inspect.py#L44"}}),$e=new U({props:{anchor:"datasets.list_datasets.example",$$slots:{default:[Al]},$$scope:{ctx:j}}}),et=new q({props:{name:"datasets.load_dataset",anchor:"datasets.load_dataset",parameters:[{name:"path",val:": str"},{name:"name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, typing.Sequence[str], typing.Mapping[str, typing.Union[str, typing.Sequence[str]]], NoneType] = None"},{name:"split",val:": typing.Union[str, datasets.splits.Split, NoneType] = None"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"ignore_verifications",val:": bool = False"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"},{name:"save_infos",val:": bool = False"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate, NoneType] = None"},{name:"streaming",val:": bool = False"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.load_dataset.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; Path or name of the dataset.
Depending on <code>path</code>, the dataset builder that is used comes from a generic dataset script (JSON, CSV, Parquet, text etc.) or from the dataset script (a python file) inside the dataset directory.</p>
<p>For local datasets:</p>
<ul>
<li>if <code>path</code> is a local directory (containing data files only)
-&gt; load a generic dataset builder (csv, json, text etc.) based on the content of the directory
e.g. <code>&apos;./path/to/directory/with/my/csv/data&apos;</code>.</li>
<li>if <code>path</code> is a local dataset script or a directory containing a local dataset script (if the script has the same name as the directory):
-&gt; load the dataset builder from the dataset script
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code>.</li>
</ul>
<p>For datasets on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)</p>
<ul>
<li>if <code>path</code> is a dataset repository on the HF hub (containing data files only)
-&gt; load a generic dataset builder (csv, text etc.) based on the content of the repository
e.g. <code>&apos;username/dataset_name&apos;</code>, a dataset repository on the HF hub containing your data files.</li>
<li>if <code>path</code> is a dataset repository on the HF hub with a dataset script (if the script has the same name as the directory)
-&gt; load the dataset builder from the dataset script in the dataset repository
e.g. <code>glue</code>, <code>squad</code>, <code>&apos;username/dataset_name&apos;</code>, a dataset repository on the HF hub containing a dataset script <em>&#x2018;dataset_name.py&#x2019;</em>.</li>
</ul>`,name:"path"},{anchor:"datasets.load_dataset.name",description:"<strong>name</strong> (<code>str</code>, optional) &#x2014; Defining the name of the dataset configuration.",name:"name"},{anchor:"datasets.load_dataset.data_dir",description:`<strong>data_dir</strong> (<code>str</code>, optional) &#x2014; Defining the data_dir of the dataset configuration. If specified for the generic builders (csv, text etc.) or the Hub datasets and <em>data_files</em> is None,
the behavior is equal to passing <em>os.path.join(data_dir, **)</em> as <em>data_files</em> to reference all the files in a directory.`,name:"data_dir"},{anchor:"datasets.load_dataset.data_files",description:"<strong>data_files</strong> (<code>str</code> or <code>Sequence</code> or <code>Mapping</code>, optional) &#x2014; Path(s) to source data file(s).",name:"data_files"},{anchor:"datasets.load_dataset.split",description:`<strong>split</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.Split">Split</a> or <code>str</code>) &#x2014; Which split of the data to load.
If None, will return a <em>dict</em> with all splits (typically <em>datasets.Split.TRAIN</em> and <em>datasets.Split.TEST</em>).
If given, will return a single Dataset.
Splits can be combined and specified like in tensorflow-datasets.`,name:"split"},{anchor:"datasets.load_dataset.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional) &#x2014; Directory to read/write data. Defaults to &#x201D;~/.cache/huggingface/datasets&#x201D;.",name:"cache_dir"},{anchor:"datasets.load_dataset.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Set the features type to use for this dataset.',name:"features"},{anchor:"datasets.load_dataset.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.load_dataset.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.load_dataset.ignore_verifications",description:"<strong>ignore_verifications</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Ignore the verifications of the downloaded/processed dataset information (checksums/size/splits/&#x2026;).",name:"ignore_verifications"},{anchor:"datasets.load_dataset.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the dataset
will not be copied in-memory unless explicitly enabled by setting <em>datasets.config.IN_MEMORY_MAX_SIZE</em> to
nonzero. See more details in the <a href="/docs/datasets/pr_4884/en/package_reference/loading_methods#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"},{anchor:"datasets.load_dataset.save_infos",description:"<strong>save_infos</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Save the dataset information (checksums/size/splits/&#x2026;).",name:"save_infos"},{anchor:"datasets.load_dataset.revision",description:`<strong>revision</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.Version">Version</a> or <code>str</code>, optional) &#x2014; Version of the dataset script to load:</p>
<ul>
<li>For datasets in the <em>huggingface/datasets</em> library on GitHub like &#x201C;squad&#x201D;, the default version of the module is the local version of the lib.
You can specify a different version from your local version of the lib (e.g. &#x201C;main&#x201D; or &#x201C;1.2.0&#x201D;) but it might cause compatibility issues.</li>
<li>For community datasets like &#x201C;lhoestq/squad&#x201D; that have their own git repository on the Datasets Hub, the default version &#x201C;main&#x201D; corresponds to the &#x201C;main&#x201D; branch.
You can specify a different version that the default &#x201C;main&#x201D; by using a commit sha or a git tag of the dataset repository.</li>
</ul>`,name:"revision"},{anchor:"datasets.load_dataset.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from <em>&#x201D;~/.huggingface&#x201D;</em>.`,name:"use_auth_token"},{anchor:"datasets.load_dataset.task",description:'<strong>task</strong> (<code>str</code>) &#x2014; The task to prepare the dataset for during training and evaluation. Casts the dataset&#x2019;s <a href="/docs/datasets/pr_4884/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.',name:"task"},{anchor:"datasets.load_dataset.streaming",description:`<strong>streaming</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If set to True, don&#x2019;t download the data files. Instead, it streams the data progressively while
iterating on the dataset. An IterableDataset or IterableDatasetDict is returned instead in this case.</p>
<p>Note that streaming works for datasets that use data formats that support being iterated over like txt, csv, jsonl for example.
Json files may be downloaded completely. Also streaming from remote zip or gzip files is supported but other compressed formats
like rar and xz are not yet supported. The tgz format doesn&#x2019;t allow streaming.`,name:"streaming"},{anchor:"datasets.load_dataset.*config_kwargs",description:`*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>
and used in the <a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/load.py#L1588",returnDescription:`
<ul>
<li>if <em>split</em> is not None: the dataset requested,</li>
<li>if <em>split</em> is None, a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
<p>or <a
  href="/docs/datasets/pr_4884/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a> or <a
  href="/docs/datasets/pr_4884/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a>: if streaming=True</p>
<ul>
<li>if <em>split</em> is not None: the dataset requested,</li>
<li>if <em>split</em> is None, a <code>datasets.streaming.IterableDatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4884/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4884/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),be=new mi({props:{$$slots:{default:[Ll]},$$scope:{ctx:j}}}),we=new U({props:{anchor:"datasets.load_dataset.example",$$slots:{default:[Hl]},$$scope:{ctx:j}}}),xe=new U({props:{anchor:"datasets.load_dataset.example-2",$$slots:{default:[Ul]},$$scope:{ctx:j}}}),ke=new U({props:{anchor:"datasets.load_dataset.example-3",$$slots:{default:[Ml]},$$scope:{ctx:j}}}),Ee=new U({props:{anchor:"datasets.load_dataset.example-4",$$slots:{default:[Vl]},$$scope:{ctx:j}}}),ct=new q({props:{name:"datasets.load_from_disk",anchor:"datasets.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3://my-bucket/dataset/train&#x201D;</em>) of the Dataset or DatasetDict directory where the dataset will be
loaded from.`,name:"dataset_path"},{anchor:"datasets.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the dataset
will not be copied in-memory unless explicitly enabled by setting <em>datasets.config.IN_MEMORY_MAX_SIZE</em> to
nonzero. See more details in the <a href="/docs/datasets/pr_4884/en/package_reference/loading_methods#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/load.py#L1815",returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4884/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4884/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),De=new U({props:{anchor:"datasets.load_from_disk.example",$$slots:{default:[Bl]},$$scope:{ctx:j}}}),pt=new q({props:{name:"datasets.load_dataset_builder",anchor:"datasets.load_dataset_builder",parameters:[{name:"path",val:": str"},{name:"name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, typing.Sequence[str], typing.Mapping[str, typing.Union[str, typing.Sequence[str]]], NoneType] = None"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.load_dataset_builder.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; Path or name of the dataset.
Depending on <code>path</code>, the dataset builder that is used comes from a generic dataset script (JSON, CSV, Parquet, text etc.) or from the dataset script (a python file) inside the dataset directory.</p>
<p>For local datasets:</p>
<ul>
<li>if <code>path</code> is a local directory (containing data files only)
-&gt; load a generic dataset builder (csv, json, text etc.) based on the content of the directory
e.g. <code>&apos;./path/to/directory/with/my/csv/data&apos;</code>.</li>
<li>if <code>path</code> is a local dataset script or a directory containing a local dataset script (if the script has the same name as the directory):
-&gt; load the dataset builder from the dataset script
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code>.</li>
</ul>
<p>For datasets on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)</p>
<ul>
<li>if <code>path</code> is a dataset repository on the HF hub (containing data files only)
-&gt; load a generic dataset builder (csv, text etc.) based on the content of the repository
e.g. <code>&apos;username/dataset_name&apos;</code>, a dataset repository on the HF hub containing your data files.</li>
<li>if <code>path</code> is a dataset repository on the HF hub with a dataset script (if the script has the same name as the directory)
-&gt; load the dataset builder from the dataset script in the dataset repository
e.g. <code>glue</code>, <code>squad</code>, <code>&apos;username/dataset_name&apos;</code>, a dataset repository on the HF hub containing a dataset script <em>&#x2018;dataset_name.py&#x2019;</em>.</li>
</ul>`,name:"path"},{anchor:"datasets.load_dataset_builder.name",description:"<strong>name</strong> (<code>str</code>, optional) &#x2014; Defining the name of the dataset configuration.",name:"name"},{anchor:"datasets.load_dataset_builder.data_dir",description:`<strong>data_dir</strong> (<code>str</code>, optional) &#x2014; Defining the data_dir of the dataset configuration. If specified for the generic builders (csv, text etc.) or the Hub datasets and <em>data_files</em> is None,
the behavior is equal to passing <em>os.path.join(data_dir, **)</em> as <em>data_files</em> to reference all the files in a directory.`,name:"data_dir"},{anchor:"datasets.load_dataset_builder.data_files",description:"<strong>data_files</strong> (<code>str</code> or <code>Sequence</code> or <code>Mapping</code>, optional) &#x2014; Path(s) to source data file(s).",name:"data_files"},{anchor:"datasets.load_dataset_builder.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional) &#x2014; Directory to read/write data. Defaults to &#x201D;~/.cache/huggingface/datasets&#x201D;.",name:"cache_dir"},{anchor:"datasets.load_dataset_builder.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Set the features type to use for this dataset.',name:"features"},{anchor:"datasets.load_dataset_builder.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.load_dataset_builder.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.load_dataset_builder.revision",description:`<strong>revision</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.Version">Version</a> or <code>str</code>, optional) &#x2014; Version of the dataset script to load:</p>
<ul>
<li>For datasets in the <em>huggingface/datasets</em> library on GitHub like &#x201C;squad&#x201D;, the default version of the module is the local version of the lib.
You can specify a different version from your local version of the lib (e.g. &#x201C;main&#x201D; or &#x201C;1.2.0&#x201D;) but it might cause compatibility issues.</li>
<li>For community datasets like &#x201C;lhoestq/squad&#x201D; that have their own git repository on the Datasets Hub, the default version &#x201C;main&#x201D; corresponds to the &#x201C;main&#x201D; branch.
You can specify a different version that the default &#x201C;main&#x201D; by using a commit sha or a git tag of the dataset repository.</li>
</ul>`,name:"revision"},{anchor:"datasets.load_dataset_builder.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from <em>&#x201D;~/.huggingface&#x201D;</em>.`,name:"use_auth_token"},{anchor:"datasets.load_dataset_builder.*config_kwargs",description:`*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>
and used in the <a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/load.py#L1456",returnType:`
<p><a
  href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DatasetBuilder"
>DatasetBuilder</a></p>
`}}),Ne=new mi({props:{$$slots:{default:[Rl]},$$scope:{ctx:j}}}),je=new U({props:{anchor:"datasets.load_dataset_builder.example",$$slots:{default:[Jl]},$$scope:{ctx:j}}}),gt=new q({props:{name:"datasets.get_dataset_config_names",anchor:"datasets.get_dataset_config_names",parameters:[{name:"path",val:": str"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"dynamic_modules_path",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, typing.List, typing.Dict, NoneType] = None"},{name:"**download_kwargs",val:""}],parametersDescription:[{anchor:"datasets.get_dataset_config_names.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.get_dataset_config_names.revision",description:`<strong>revision</strong> (Optional <code>Union[str, datasets.Version]</code>) &#x2014;
If specified, the dataset module will be loaded from the datasets repository at this version.
By default:</p>
<ul>
<li>it is set to the local version of the lib.</li>
<li>it will also try to load it from the main branch if it&#x2019;s not available at the local version of the lib.
Specifying a version that is different from your local version of the lib might cause compatibility issues.</li>
</ul>`,name:"revision"},{anchor:"datasets.get_dataset_config_names.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.get_dataset_config_names.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.get_dataset_config_names.dynamic_modules_path",description:`<strong>dynamic_modules_path</strong> (Optional str, defaults to HF_MODULES_CACHE / &#x201C;datasets_modules&#x201D;, i.e. ~/.cache/huggingface/modules/datasets_modules) &#x2014;
Optional path to the directory in which the dynamic modules are saved. It must have been initialized with <code>init_dynamic_modules</code>.
By default the datasets and metrics are stored inside the <em>datasets_modules</em> module.`,name:"dynamic_modules_path"},{anchor:"datasets.get_dataset_config_names.data_files",description:"<strong>data_files</strong> (<code>Union[Dict, List, str]</code>, optional) &#x2014; Defining the data_files of the dataset configuration.",name:"data_files"},{anchor:"datasets.get_dataset_config_names.*download_kwargs",description:`*<strong>*download_kwargs</strong> (additional keyword arguments) &#x2014; optional attributes for DownloadConfig() which will override the attributes in download_config if supplied,
for example <code>use_auth_token</code>`,name:"*download_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/inspect.py#L256"}}),Ce=new U({props:{anchor:"datasets.get_dataset_config_names.example",$$slots:{default:[Yl]},$$scope:{ctx:j}}}),ht=new q({props:{name:"datasets.get_dataset_infos",anchor:"datasets.get_dataset_infos",parameters:[{name:"path",val:": str"},{name:"data_files",val:": typing.Union[str, typing.List, typing.Dict, NoneType] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.get_dataset_infos.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.get_dataset_infos.revision",description:`<strong>revision</strong> (Optional <code>Union[str, datasets.Version]</code>) &#x2014;
If specified, the dataset module will be loaded from the datasets repository at this version.
By default:</p>
<ul>
<li>it is set to the local version of the lib.</li>
<li>it will also try to load it from the main branch if it&#x2019;s not available at the local version of the lib.
Specifying a version that is different from your local version of the lib might cause compatibility issues.</li>
</ul>`,name:"revision"},{anchor:"datasets.get_dataset_infos.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.get_dataset_infos.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.get_dataset_infos.data_files",description:"<strong>data_files</strong> (<code>Union[Dict, List, str]</code>, optional) &#x2014; Defining the data_files of the dataset configuration.",name:"data_files"},{anchor:"datasets.get_dataset_infos.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from <em>&#x201D;~/.huggingface&#x201D;</em>.`,name:"use_auth_token"},{anchor:"datasets.get_dataset_infos.*config_kwargs",description:"*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; optional attributes for builder class which will override the attributes if supplied.",name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/inspect.py#L195"}}),Se=new U({props:{anchor:"datasets.get_dataset_infos.example",$$slots:{default:[zl]},$$scope:{ctx:j}}}),ut=new q({props:{name:"datasets.get_dataset_split_names",anchor:"datasets.get_dataset_split_names",parameters:[{name:"path",val:": str"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, typing.Sequence[str], typing.Mapping[str, typing.Union[str, typing.Sequence[str]]], NoneType] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.get_dataset_split_names.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.get_dataset_split_names.config_name",description:"<strong>config_name</strong> (<code>str</code>, optional) &#x2014; Defining the name of the dataset configuration.",name:"config_name"},{anchor:"datasets.get_dataset_split_names.data_files",description:"<strong>data_files</strong> (<code>str</code> or <code>Sequence</code> or <code>Mapping</code>, optional) &#x2014; Path(s) to source data file(s).",name:"data_files"},{anchor:"datasets.get_dataset_split_names.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.get_dataset_split_names.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.get_dataset_split_names.revision",description:`<strong>revision</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.Version">Version</a> or <code>str</code>, optional) &#x2014; Version of the dataset script to load:</p>
<ul>
<li>For datasets in the <em>huggingface/datasets</em> library on GitHub like &#x201C;squad&#x201D;, the default version of the module is the local version of the lib.
You can specify a different version from your local version of the lib (e.g. &#x201C;main&#x201D; or &#x201C;1.2.0&#x201D;) but it might cause compatibility issues.</li>
<li>For community datasets like &#x201C;lhoestq/squad&#x201D; that have their own git repository on the Datasets Hub, the default version &#x201C;main&#x201D; corresponds to the &#x201C;main&#x201D; branch.
You can specify a different version that the default &#x201C;main&#x201D; by using a commit sha or a git tag of the dataset repository.</li>
</ul>`,name:"revision"},{anchor:"datasets.get_dataset_split_names.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from <em>&#x201D;~/.huggingface&#x201D;</em>.`,name:"use_auth_token"},{anchor:"datasets.get_dataset_split_names.*config_kwargs",description:"*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; optional attributes for builder class which will override the attributes if supplied.",name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/inspect.py#L382"}}),Oe=new U({props:{anchor:"datasets.get_dataset_split_names.example",$$slots:{default:[Gl]},$$scope:{ctx:j}}}),_t=new q({props:{name:"datasets.inspect_dataset",anchor:"datasets.inspect_dataset",parameters:[{name:"path",val:": str"},{name:"local_path",val:": str"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"**download_kwargs",val:""}],parametersDescription:[{anchor:"datasets.inspect_dataset.path",description:`<strong>path</strong> (<em>str</em>) &#x2014; Path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name
as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code>.</li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with [<em>list_datasets</em>])
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code>.</li>
</ul>`,name:"path"},{anchor:"datasets.inspect_dataset.local_path",description:"<strong>local_path</strong> (<em>str</em>) &#x2014; Path to the local folder to copy the dataset script to.",name:"local_path"},{anchor:"datasets.inspect_dataset.download_config",description:"<strong>download_config</strong> ([<em>DownloadConfig</em>], <em>optional</em>) &#x2014; Specific download configuration parameters.",name:"download_config"},{anchor:"datasets.inspect_dataset.*download_kwargs",description:`*<strong>*download_kwargs</strong> (additional keyword arguments) &#x2014; Optional arguments for [<em>DownloadConfig</em>] which will override
the attributes of <em>download_config</em> if supplied.`,name:"*download_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/inspect.py#L113"}}),vt=new W({}),Pe=new mi({props:{warning:!0,$$slots:{default:[Xl]},$$scope:{ctx:j}}}),$t=new q({props:{name:"datasets.list_metrics",anchor:"datasets.list_metrics",parameters:[{name:"with_community_metrics",val:" = True"},{name:"with_details",val:" = False"}],parametersDescription:[{anchor:"datasets.list_metrics.with_community_metrics",description:"<strong>with_community_metrics</strong> (<code>bool</code>, optional, default <code>True</code>) &#x2014; Include the community provided metrics.",name:"with_community_metrics"},{anchor:"datasets.list_metrics.with_details",description:"<strong>with_details</strong> (<code>bool</code>, optional, default <code>False</code>) &#x2014; Return the full details on the metrics instead of only the short name.",name:"with_details"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/inspect.py#L74"}}),qe=new gi({props:{version:"2.5.0",$$slots:{default:[Wl]},$$scope:{ctx:j}}}),Te=new U({props:{anchor:"datasets.list_metrics.example",$$slots:{default:[Kl]},$$scope:{ctx:j}}}),yt=new q({props:{name:"datasets.load_metric",anchor:"datasets.load_metric",parameters:[{name:"path",val:": str"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"process_id",val:": int = 0"},{name:"num_process",val:": int = 1"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"**metric_init_kwargs",val:""}],parametersDescription:[{anchor:"datasets.load_metric.path",description:`<strong>path</strong> (<code>str</code>) &#x2014;
path to the metric processing script with the metric builder. Can be either:<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./metrics/rouge&apos;</code> or <code>&apos;./metrics/rogue/rouge.py&apos;</code></li>
<li>a metric identifier on the HuggingFace datasets repo (list all available metrics with <code>datasets.list_metrics()</code>)
e.g. <code>&apos;rouge&apos;</code> or <code>&apos;bleu&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.load_metric.config_name",description:"<strong>config_name</strong> (<code>str</code>, optional) &#x2014; selecting a configuration for the metric (e.g. the GLUE metric has a configuration for each subset)",name:"config_name"},{anchor:"datasets.load_metric.process_id",description:"<strong>process_id</strong> (<code>int</code>, optional) &#x2014; for distributed evaluation: id of the process",name:"process_id"},{anchor:"datasets.load_metric.num_process",description:"<strong>num_process</strong> (<code>int</code>, optional) &#x2014; for distributed evaluation: total number of processes",name:"num_process"},{anchor:"datasets.load_metric.cache_dir",description:"<strong>cache_dir</strong> (Optional str) &#x2014; path to store the temporary predictions and references (default to <em>~/.cache/huggingface/metrics/</em>)",name:"cache_dir"},{anchor:"datasets.load_metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.load_metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool) &#x2014; Whether to store the temporary results in memory (defaults to False)",name:"keep_in_memory"},{anchor:"datasets.load_metric.download_config",description:"<strong>download_config</strong> (Optional <code>datasets.DownloadConfig</code> &#x2014; specific download configuration parameters.",name:"download_config"},{anchor:"datasets.load_metric.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4884/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.load_metric.revision",description:`<strong>revision</strong> (Optional <code>Union[str, datasets.Version]</code>) &#x2014; if specified, the module will be loaded from the datasets repository
at this version. By default it is set to the local version of the lib. Specifying a version that is different from
your local version of the lib might cause compatibility issues.`,name:"revision"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/load.py#L1376",returnDescription:`
<p><em>datasets.Metric</em></p>
`}}),Ie=new gi({props:{version:"2.5.0",$$slots:{default:[Zl]},$$scope:{ctx:j}}}),Ae=new U({props:{anchor:"datasets.load_metric.example",$$slots:{default:[Ql]},$$scope:{ctx:j}}}),wt=new q({props:{name:"datasets.inspect_metric",anchor:"datasets.inspect_metric",parameters:[{name:"path",val:": str"},{name:"local_path",val:": str"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"**download_kwargs",val:""}],parametersDescription:[{anchor:"datasets.inspect_metric.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.inspect_metric.local_path",description:"<strong>local_path</strong> (<code>str</code>) &#x2014; path to the local folder to copy the datset script to.",name:"local_path"},{anchor:"datasets.inspect_metric.download_config",description:"<strong>download_config</strong> (Optional <code>datasets.DownloadConfig</code>) &#x2014; specific download configuration parameters.",name:"download_config"},{anchor:"datasets.inspect_metric.*download_kwargs",description:"*<strong>*download_kwargs</strong> (additional keyword arguments) &#x2014; optional attributes for DownloadConfig() which will override the attributes in download_config if supplied.",name:"*download_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/inspect.py#L151"}}),Le=new gi({props:{version:"2.5.0",$$slots:{default:[ed]},$$scope:{ctx:j}}}),xt=new W({}),kt=new L({props:{code:'load_dataset("csv", data_dir="path/to/data/dir", sep="\\t")',highlighted:'load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_dir=<span class="hljs-string">&quot;path/to/data/dir&quot;</span>, sep=<span class="hljs-string">&quot;\\t&quot;</span>)'}}),Et=new W({}),Dt=new q({props:{name:"class datasets.packaged_modules.text.TextConfig",anchor:"datasets.packaged_modules.text.TextConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"encoding",val:": str = 'utf-8'"},{name:"chunksize",val:": int = 10485760"},{name:"keep_linebreaks",val:": bool = False"},{name:"sample_by",val:": str = 'line'"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/packaged_modules/text/text.py#L17"}}),Nt=new W({}),jt=new q({props:{name:"class datasets.packaged_modules.csv.CsvConfig",anchor:"datasets.packaged_modules.csv.CsvConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"sep",val:": str = ','"},{name:"delimiter",val:": typing.Optional[str] = None"},{name:"header",val:": typing.Union[int, typing.List[int], str, NoneType] = 'infer'"},{name:"names",val:": typing.Optional[typing.List[str]] = None"},{name:"column_names",val:": typing.Optional[typing.List[str]] = None"},{name:"index_col",val:": typing.Union[int, str, typing.List[int], typing.List[str], NoneType] = None"},{name:"usecols",val:": typing.Union[typing.List[int], typing.List[str], NoneType] = None"},{name:"prefix",val:": typing.Optional[str] = None"},{name:"mangle_dupe_cols",val:": bool = True"},{name:"engine",val:": typing.Optional[str] = None"},{name:"true_values",val:": typing.Optional[list] = None"},{name:"false_values",val:": typing.Optional[list] = None"},{name:"skipinitialspace",val:": bool = False"},{name:"skiprows",val:": typing.Union[int, typing.List[int], NoneType] = None"},{name:"nrows",val:": typing.Optional[int] = None"},{name:"na_values",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_default_na",val:": bool = True"},{name:"na_filter",val:": bool = True"},{name:"verbose",val:": bool = False"},{name:"skip_blank_lines",val:": bool = True"},{name:"thousands",val:": typing.Optional[str] = None"},{name:"decimal",val:": str = '.'"},{name:"lineterminator",val:": typing.Optional[str] = None"},{name:"quotechar",val:`: str = '"'`},{name:"quoting",val:": int = 0"},{name:"escapechar",val:": typing.Optional[str] = None"},{name:"comment",val:": typing.Optional[str] = None"},{name:"encoding",val:": typing.Optional[str] = None"},{name:"dialect",val:": typing.Optional[str] = None"},{name:"error_bad_lines",val:": bool = True"},{name:"warn_bad_lines",val:": bool = True"},{name:"skipfooter",val:": int = 0"},{name:"doublequote",val:": bool = True"},{name:"memory_map",val:": bool = False"},{name:"float_precision",val:": typing.Optional[str] = None"},{name:"chunksize",val:": int = 10000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"encoding_errors",val:": typing.Optional[str] = 'strict'"},{name:"on_bad_lines",val:": typing.Literal['error', 'warn', 'skip'] = 'error'"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/packaged_modules/csv/csv.py#L23"}}),Ct=new W({}),St=new q({props:{name:"class datasets.packaged_modules.json.JsonConfig",anchor:"datasets.packaged_modules.json.JsonConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"field",val:": typing.Optional[str] = None"},{name:"use_threads",val:": bool = True"},{name:"block_size",val:": typing.Optional[int] = None"},{name:"chunksize",val:": int = 10485760"},{name:"newlines_in_values",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/packaged_modules/json/json.py#L19"}}),Ot=new W({}),Ft=new q({props:{name:"class datasets.packaged_modules.parquet.ParquetConfig",anchor:"datasets.packaged_modules.parquet.ParquetConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"batch_size",val:": int = 10000"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/packaged_modules/parquet/parquet.py#L16"}}),Pt=new W({}),qt=new q({props:{name:"class datasets.packaged_modules.imagefolder.ImageFolderConfig",anchor:"datasets.packaged_modules.imagefolder.ImageFolderConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"drop_labels",val:": bool = None"},{name:"drop_metadata",val:": bool = None"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/packaged_modules/imagefolder/imagefolder.py#L11"}}),Tt=new W({}),It=new q({props:{name:"class datasets.packaged_modules.audiofolder.AudioFolderConfig",anchor:"datasets.packaged_modules.audiofolder.AudioFolderConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"drop_labels",val:": bool = None"},{name:"drop_metadata",val:": bool = None"}],source:"https://github.com/huggingface/datasets/blob/r_4884/src/datasets/packaged_modules/audiofolder/audiofolder.py#L11"}}),{c(){i=o("meta"),$=f(),g=o("h1"),p=o("a"),_=o("span"),b(s.$$.fragment),l=f(),N=o("span"),y=d("Loading methods"),O=f(),F=o("p"),wo=d("Methods for listing and loading datasets and metrics:"),ys=f(),K=o("h2"),ve=o("a"),Qt=o("span"),b(Ze.$$.fragment),xo=f(),ea=o("span"),ko=d("Datasets"),bs=f(),V=o("div"),b(Qe.$$.fragment),Eo=f(),ta=o("p"),Do=d("List all the datasets scripts available on the Hugging Face Hub."),No=f(),b($e.$$.fragment),ws=f(),C=o("div"),b(et.$$.fragment),jo=f(),aa=o("p"),Co=d("Load a dataset from the Hugging Face Hub, or a local dataset."),So=f(),Z=o("p"),Oo=d("You can find the list of datasets on the Hub at "),tt=o("a"),Fo=d("https://huggingface.co/datasets"),Po=d(" or with "),sa=o("code"),qo=d("datasets.list_datasets()"),To=d("."),Io=f(),oa=o("p"),Ao=d("A dataset is a directory that contains:"),Lo=f(),at=o("ul"),na=o("li"),Ho=d("some data files in generic formats (JSON, CSV, Parquet, text, etc.)"),Uo=f(),ra=o("li"),Mo=d("and optionally a dataset script, if it requires some code to read the data files. This is used to load any kind of formats or structures."),Vo=f(),ia=o("p"),Bo=d("Note that dataset scripts can also download and read data files from anywhere - in case your data files already exist online."),Ro=f(),la=o("p"),Jo=d("This function does the following under the hood:"),Yo=f(),Q=o("ol"),B=o("li"),st=o("p"),zo=d("Download and import in the library the dataset script from "),da=o("code"),Go=d("path"),Xo=d(" if it\u2019s not already cached inside the library."),Wo=f(),ca=o("p"),Ko=d("If the dataset has no dataset script, then a generic dataset script is imported instead (JSON, CSV, Parquet, text, etc.)"),Zo=f(),pa=o("p"),Qo=d(`Dataset scripts are small python scripts that define dataset builders. They define the citation, info and format of the dataset,
contain the path or URL to the original data files and the code to load examples from the original data files.`),en=f(),ye=o("p"),tn=d("You can find some of the scripts here: "),ot=o("a"),an=d("https://github.com/huggingface/datasets/tree/main/datasets"),sn=d(`
You can find the complete list of datasets in the Datasets Hub at `),nt=o("a"),on=d("https://huggingface.co/datasets"),nn=f(),rt=o("li"),fa=o("p"),rn=d("Run the dataset script which will:"),ln=f(),it=o("ul"),ma=o("li"),ga=o("p"),dn=d("Download the dataset file from the original URL (see the script) if it\u2019s not already available locally or cached."),cn=f(),lt=o("li"),ha=o("p"),pn=d("Process and cache the dataset in typed Arrow tables for caching."),fn=f(),ua=o("p"),mn=d(`Arrow table are arbitrarily long, typed tables which can store nested objects and be mapped to numpy/pandas/python generic types.
They can be directly accessed from disk, loaded in RAM or even streamed over the web.`),gn=f(),_a=o("li"),dt=o("p"),hn=d("Return a dataset built from the requested splits in "),va=o("code"),un=d("split"),_n=d(" (default: all)."),vn=f(),$a=o("p"),$n=d(`It also allows to load a dataset from a local directory or a dataset repository on the Hugging Face Hub without dataset script.
In this case, it automatically loads all the data files from the directory or the dataset repository.`),yn=f(),b(be.$$.fragment),bn=f(),ya=o("p"),wn=d("Example:"),xn=f(),b(we.$$.fragment),kn=f(),b(xe.$$.fragment),En=f(),b(ke.$$.fragment),Dn=f(),b(Ee.$$.fragment),xs=f(),R=o("div"),b(ct.$$.fragment),Nn=f(),J=o("p"),jn=d("Loads a dataset that was previously saved using "),Ut=o("a"),Cn=d("Dataset.save_to_disk()"),Sn=d(` from a dataset directory, or
from a filesystem using either `),Mt=o("a"),On=d("datasets.filesystems.S3FileSystem"),Fn=d(` or any implementation of
`),ba=o("code"),Pn=d("fsspec.spec.AbstractFileSystem"),qn=d("."),Tn=f(),b(De.$$.fragment),ks=f(),P=o("div"),b(pt.$$.fragment),In=f(),wa=o("p"),An=d(`Load a dataset builder from the Hugging Face Hub, or a local dataset. A dataset builder can be used to inspect general information that is required to build a dataset (cache directory, config, dataset info, etc.)
without downloading the dataset itself.`),Ln=f(),ee=o("p"),Hn=d("You can find the list of datasets on the Hub at "),ft=o("a"),Un=d("https://huggingface.co/datasets"),Mn=d(" or with "),xa=o("code"),Vn=d("datasets.list_datasets()"),Bn=d("."),Rn=f(),ka=o("p"),Jn=d("A dataset is a directory that contains:"),Yn=f(),mt=o("ul"),Ea=o("li"),zn=d("some data files in generic formats (JSON, CSV, Parquet, text, etc.)"),Gn=f(),Da=o("li"),Xn=d("and optionally a dataset script, if it requires some code to read the data files. This is used to load any kind of formats or structures."),Wn=f(),Na=o("p"),Kn=d("Note that dataset scripts can also download and read data files from anywhere - in case your data files already exist online."),Zn=f(),b(Ne.$$.fragment),Qn=f(),b(je.$$.fragment),Es=f(),Y=o("div"),b(gt.$$.fragment),er=f(),ja=o("p"),tr=d("Get the list of available config names for a particular dataset."),ar=f(),b(Ce.$$.fragment),Ds=f(),z=o("div"),b(ht.$$.fragment),sr=f(),Ca=o("p"),or=d("Get the meta information about a dataset, returned as a dict mapping config name to DatasetInfoDict."),nr=f(),b(Se.$$.fragment),Ns=f(),G=o("div"),b(ut.$$.fragment),rr=f(),Sa=o("p"),ir=d("Get the list of available splits for a particular config and dataset."),lr=f(),b(Oe.$$.fragment),js=f(),te=o("div"),b(_t.$$.fragment),dr=f(),Oa=o("p"),cr=d("Allow inspection/modification of a dataset script by copying on local drive at local_path."),Cs=f(),ae=o("h2"),Fe=o("a"),Fa=o("span"),b(vt.$$.fragment),pr=f(),Pa=o("span"),fr=d("Metrics"),Ss=f(),b(Pe.$$.fragment),Os=f(),I=o("div"),b($t.$$.fragment),mr=f(),qa=o("p"),gr=d("List all the metrics script available on the Hugging Face Hub."),hr=f(),b(qe.$$.fragment),ur=f(),b(Te.$$.fragment),Fs=f(),A=o("div"),b(yt.$$.fragment),_r=f(),bt=o("p"),vr=d("Load a "),Ta=o("em"),$r=d("datasets.Metric"),yr=d("."),br=f(),b(Ie.$$.fragment),wr=f(),b(Ae.$$.fragment),Ps=f(),X=o("div"),b(wt.$$.fragment),xr=f(),Ia=o("p"),kr=d("Allow inspection/modification of a metric script by copying it on local drive at local_path."),Er=f(),b(Le.$$.fragment),qs=f(),se=o("h2"),He=o("a"),Aa=o("span"),b(xt.$$.fragment),Dr=f(),La=o("span"),Nr=d("From files"),Ts=f(),Vt=o("p"),jr=d(`Configurations used to load data files.
They are used when loading local files or a dataset repository:`),Is=f(),Ue=o("ul"),Bt=o("li"),Cr=d("local files: "),Ha=o("code"),Sr=d('load_dataset("parquet", data_dir="path/to/data/dir")'),Or=f(),Rt=o("li"),Fr=d("dataset repository: "),Ua=o("code"),Pr=d('load_dataset("allenai/c4")'),As=f(),H=o("p"),qr=d("You can pass arguments to "),Ma=o("code"),Tr=d("load_dataset"),Ir=d(` to configure data loading.
For example you can specify the `),Va=o("code"),Ar=d("sep"),Lr=d(" parameter to define the "),Jt=o("a"),Hr=d("CsvConfig"),Ur=d(" that is used to load the data:"),Ls=f(),b(kt.$$.fragment),Hs=f(),oe=o("h3"),Me=o("a"),Ba=o("span"),b(Et.$$.fragment),Mr=f(),Ra=o("span"),Vr=d("Text"),Us=f(),ne=o("div"),b(Dt.$$.fragment),Br=f(),Ja=o("p"),Rr=d("BuilderConfig for text files."),Ms=f(),re=o("h3"),Ve=o("a"),Ya=o("span"),b(Nt.$$.fragment),Jr=f(),za=o("span"),Yr=d("CSV"),Vs=f(),ie=o("div"),b(jt.$$.fragment),zr=f(),Ga=o("p"),Gr=d("BuilderConfig for CSV."),Bs=f(),le=o("h3"),Be=o("a"),Xa=o("span"),b(Ct.$$.fragment),Xr=f(),Wa=o("span"),Wr=d("JSON"),Rs=f(),de=o("div"),b(St.$$.fragment),Kr=f(),Ka=o("p"),Zr=d("BuilderConfig for JSON."),Js=f(),ce=o("h3"),Re=o("a"),Za=o("span"),b(Ot.$$.fragment),Qr=f(),Qa=o("span"),ei=d("Parquet"),Ys=f(),pe=o("div"),b(Ft.$$.fragment),ti=f(),es=o("p"),ai=d("BuilderConfig for Parquet."),zs=f(),fe=o("h3"),Je=o("a"),ts=o("span"),b(Pt.$$.fragment),si=f(),as=o("span"),oi=d("Images"),Gs=f(),me=o("div"),b(qt.$$.fragment),ni=f(),ss=o("p"),ri=d("BuilderConfig for ImageFolder."),Xs=f(),ge=o("h3"),Ye=o("a"),os=o("span"),b(Tt.$$.fragment),ii=f(),ns=o("span"),li=d("Audio"),Ws=f(),he=o("div"),b(It.$$.fragment),di=f(),rs=o("p"),ci=d("Builder Config for AudioFolder."),this.h()},l(e){const h=Tl('[data-svelte="svelte-1phssyn"]',document.head);i=n(h,"META",{name:!0,content:!0}),h.forEach(a),$=m(e),g=n(e,"H1",{class:!0});var At=r(g);p=n(At,"A",{id:!0,class:!0,href:!0});var is=r(p);_=n(is,"SPAN",{});var ls=r(_);w(s.$$.fragment,ls),ls.forEach(a),is.forEach(a),l=m(At),N=n(At,"SPAN",{});var ds=r(N);y=c(ds,"Loading methods"),ds.forEach(a),At.forEach(a),O=m(e),F=n(e,"P",{});var cs=r(F);wo=c(cs,"Methods for listing and loading datasets and metrics:"),cs.forEach(a),ys=m(e),K=n(e,"H2",{class:!0});var Lt=r(K);ve=n(Lt,"A",{id:!0,class:!0,href:!0});var ps=r(ve);Qt=n(ps,"SPAN",{});var fs=r(Qt);w(Ze.$$.fragment,fs),fs.forEach(a),ps.forEach(a),xo=m(Lt),ea=n(Lt,"SPAN",{});var ms=r(ea);ko=c(ms,"Datasets"),ms.forEach(a),Lt.forEach(a),bs=m(e),V=n(e,"DIV",{class:!0});var ue=r(V);w(Qe.$$.fragment,ue),Eo=m(ue),ta=n(ue,"P",{});var gs=r(ta);Do=c(gs,"List all the datasets scripts available on the Hugging Face Hub."),gs.forEach(a),No=m(ue),w($e.$$.fragment,ue),ue.forEach(a),ws=m(e),C=n(e,"DIV",{class:!0});var S=r(C);w(et.$$.fragment,S),jo=m(S),aa=n(S,"P",{});var hs=r(aa);Co=c(hs,"Load a dataset from the Hugging Face Hub, or a local dataset."),hs.forEach(a),So=m(S),Z=n(S,"P",{});var _e=r(Z);Oo=c(_e,"You can find the list of datasets on the Hub at "),tt=n(_e,"A",{href:!0,rel:!0});var us=r(tt);Fo=c(us,"https://huggingface.co/datasets"),us.forEach(a),Po=c(_e," or with "),sa=n(_e,"CODE",{});var _s=r(sa);qo=c(_s,"datasets.list_datasets()"),_s.forEach(a),To=c(_e,"."),_e.forEach(a),Io=m(S),oa=n(S,"P",{});var vs=r(oa);Ao=c(vs,"A dataset is a directory that contains:"),vs.forEach(a),Lo=m(S),at=n(S,"UL",{});var Ht=r(at);na=n(Ht,"LI",{});var hi=r(na);Ho=c(hi,"some data files in generic formats (JSON, CSV, Parquet, text, etc.)"),hi.forEach(a),Uo=m(Ht),ra=n(Ht,"LI",{});var ui=r(ra);Mo=c(ui,"and optionally a dataset script, if it requires some code to read the data files. This is used to load any kind of formats or structures."),ui.forEach(a),Ht.forEach(a),Vo=m(S),ia=n(S,"P",{});var _i=r(ia);Bo=c(_i,"Note that dataset scripts can also download and read data files from anywhere - in case your data files already exist online."),_i.forEach(a),Ro=m(S),la=n(S,"P",{});var vi=r(la);Jo=c(vi,"This function does the following under the hood:"),vi.forEach(a),Yo=m(S),Q=n(S,"OL",{});var Yt=r(Q);B=n(Yt,"LI",{});var ze=r(B);st=n(ze,"P",{});var Zs=r(st);zo=c(Zs,"Download and import in the library the dataset script from "),da=n(Zs,"CODE",{});var $i=r(da);Go=c($i,"path"),$i.forEach(a),Xo=c(Zs," if it\u2019s not already cached inside the library."),Zs.forEach(a),Wo=m(ze),ca=n(ze,"P",{});var yi=r(ca);Ko=c(yi,"If the dataset has no dataset script, then a generic dataset script is imported instead (JSON, CSV, Parquet, text, etc.)"),yi.forEach(a),Zo=m(ze),pa=n(ze,"P",{});var bi=r(pa);Qo=c(bi,`Dataset scripts are small python scripts that define dataset builders. They define the citation, info and format of the dataset,
contain the path or URL to the original data files and the code to load examples from the original data files.`),bi.forEach(a),en=m(ze),ye=n(ze,"P",{});var $s=r(ye);tn=c($s,"You can find some of the scripts here: "),ot=n($s,"A",{href:!0,rel:!0});var wi=r(ot);an=c(wi,"https://github.com/huggingface/datasets/tree/main/datasets"),wi.forEach(a),sn=c($s,`
You can find the complete list of datasets in the Datasets Hub at `),nt=n($s,"A",{href:!0,rel:!0});var xi=r(nt);on=c(xi,"https://huggingface.co/datasets"),xi.forEach(a),$s.forEach(a),ze.forEach(a),nn=m(Yt),rt=n(Yt,"LI",{});var Qs=r(rt);fa=n(Qs,"P",{});var ki=r(fa);rn=c(ki,"Run the dataset script which will:"),ki.forEach(a),ln=m(Qs),it=n(Qs,"UL",{});var eo=r(it);ma=n(eo,"LI",{});var Ei=r(ma);ga=n(Ei,"P",{});var Di=r(ga);dn=c(Di,"Download the dataset file from the original URL (see the script) if it\u2019s not already available locally or cached."),Di.forEach(a),Ei.forEach(a),cn=m(eo),lt=n(eo,"LI",{});var to=r(lt);ha=n(to,"P",{});var Ni=r(ha);pn=c(Ni,"Process and cache the dataset in typed Arrow tables for caching."),Ni.forEach(a),fn=m(to),ua=n(to,"P",{});var ji=r(ua);mn=c(ji,`Arrow table are arbitrarily long, typed tables which can store nested objects and be mapped to numpy/pandas/python generic types.
They can be directly accessed from disk, loaded in RAM or even streamed over the web.`),ji.forEach(a),to.forEach(a),eo.forEach(a),Qs.forEach(a),gn=m(Yt),_a=n(Yt,"LI",{});var Ci=r(_a);dt=n(Ci,"P",{});var ao=r(dt);hn=c(ao,"Return a dataset built from the requested splits in "),va=n(ao,"CODE",{});var Si=r(va);un=c(Si,"split"),Si.forEach(a),_n=c(ao," (default: all)."),ao.forEach(a),Ci.forEach(a),Yt.forEach(a),vn=m(S),$a=n(S,"P",{});var Oi=r($a);$n=c(Oi,`It also allows to load a dataset from a local directory or a dataset repository on the Hugging Face Hub without dataset script.
In this case, it automatically loads all the data files from the directory or the dataset repository.`),Oi.forEach(a),yn=m(S),w(be.$$.fragment,S),bn=m(S),ya=n(S,"P",{});var Fi=r(ya);wn=c(Fi,"Example:"),Fi.forEach(a),xn=m(S),w(we.$$.fragment,S),kn=m(S),w(xe.$$.fragment,S),En=m(S),w(ke.$$.fragment,S),Dn=m(S),w(Ee.$$.fragment,S),S.forEach(a),xs=m(e),R=n(e,"DIV",{class:!0});var zt=r(R);w(ct.$$.fragment,zt),Nn=m(zt),J=n(zt,"P",{});var Ge=r(J);jn=c(Ge,"Loads a dataset that was previously saved using "),Ut=n(Ge,"A",{href:!0});var Pi=r(Ut);Cn=c(Pi,"Dataset.save_to_disk()"),Pi.forEach(a),Sn=c(Ge,` from a dataset directory, or
from a filesystem using either `),Mt=n(Ge,"A",{href:!0});var qi=r(Mt);On=c(qi,"datasets.filesystems.S3FileSystem"),qi.forEach(a),Fn=c(Ge,` or any implementation of
`),ba=n(Ge,"CODE",{});var Ti=r(ba);Pn=c(Ti,"fsspec.spec.AbstractFileSystem"),Ti.forEach(a),qn=c(Ge,"."),Ge.forEach(a),Tn=m(zt),w(De.$$.fragment,zt),zt.forEach(a),ks=m(e),P=n(e,"DIV",{class:!0});var T=r(P);w(pt.$$.fragment,T),In=m(T),wa=n(T,"P",{});var Ii=r(wa);An=c(Ii,`Load a dataset builder from the Hugging Face Hub, or a local dataset. A dataset builder can be used to inspect general information that is required to build a dataset (cache directory, config, dataset info, etc.)
without downloading the dataset itself.`),Ii.forEach(a),Ln=m(T),ee=n(T,"P",{});var Gt=r(ee);Hn=c(Gt,"You can find the list of datasets on the Hub at "),ft=n(Gt,"A",{href:!0,rel:!0});var Ai=r(ft);Un=c(Ai,"https://huggingface.co/datasets"),Ai.forEach(a),Mn=c(Gt," or with "),xa=n(Gt,"CODE",{});var Li=r(xa);Vn=c(Li,"datasets.list_datasets()"),Li.forEach(a),Bn=c(Gt,"."),Gt.forEach(a),Rn=m(T),ka=n(T,"P",{});var Hi=r(ka);Jn=c(Hi,"A dataset is a directory that contains:"),Hi.forEach(a),Yn=m(T),mt=n(T,"UL",{});var so=r(mt);Ea=n(so,"LI",{});var Ui=r(Ea);zn=c(Ui,"some data files in generic formats (JSON, CSV, Parquet, text, etc.)"),Ui.forEach(a),Gn=m(so),Da=n(so,"LI",{});var Mi=r(Da);Xn=c(Mi,"and optionally a dataset script, if it requires some code to read the data files. This is used to load any kind of formats or structures."),Mi.forEach(a),so.forEach(a),Wn=m(T),Na=n(T,"P",{});var Vi=r(Na);Kn=c(Vi,"Note that dataset scripts can also download and read data files from anywhere - in case your data files already exist online."),Vi.forEach(a),Zn=m(T),w(Ne.$$.fragment,T),Qn=m(T),w(je.$$.fragment,T),T.forEach(a),Es=m(e),Y=n(e,"DIV",{class:!0});var Xt=r(Y);w(gt.$$.fragment,Xt),er=m(Xt),ja=n(Xt,"P",{});var Bi=r(ja);tr=c(Bi,"Get the list of available config names for a particular dataset."),Bi.forEach(a),ar=m(Xt),w(Ce.$$.fragment,Xt),Xt.forEach(a),Ds=m(e),z=n(e,"DIV",{class:!0});var Wt=r(z);w(ht.$$.fragment,Wt),sr=m(Wt),Ca=n(Wt,"P",{});var Ri=r(Ca);or=c(Ri,"Get the meta information about a dataset, returned as a dict mapping config name to DatasetInfoDict."),Ri.forEach(a),nr=m(Wt),w(Se.$$.fragment,Wt),Wt.forEach(a),Ns=m(e),G=n(e,"DIV",{class:!0});var Kt=r(G);w(ut.$$.fragment,Kt),rr=m(Kt),Sa=n(Kt,"P",{});var Ji=r(Sa);ir=c(Ji,"Get the list of available splits for a particular config and dataset."),Ji.forEach(a),lr=m(Kt),w(Oe.$$.fragment,Kt),Kt.forEach(a),js=m(e),te=n(e,"DIV",{class:!0});var oo=r(te);w(_t.$$.fragment,oo),dr=m(oo),Oa=n(oo,"P",{});var Yi=r(Oa);cr=c(Yi,"Allow inspection/modification of a dataset script by copying on local drive at local_path."),Yi.forEach(a),oo.forEach(a),Cs=m(e),ae=n(e,"H2",{class:!0});var no=r(ae);Fe=n(no,"A",{id:!0,class:!0,href:!0});var zi=r(Fe);Fa=n(zi,"SPAN",{});var Gi=r(Fa);w(vt.$$.fragment,Gi),Gi.forEach(a),zi.forEach(a),pr=m(no),Pa=n(no,"SPAN",{});var Xi=r(Pa);fr=c(Xi,"Metrics"),Xi.forEach(a),no.forEach(a),Ss=m(e),w(Pe.$$.fragment,e),Os=m(e),I=n(e,"DIV",{class:!0});var Xe=r(I);w($t.$$.fragment,Xe),mr=m(Xe),qa=n(Xe,"P",{});var Wi=r(qa);gr=c(Wi,"List all the metrics script available on the Hugging Face Hub."),Wi.forEach(a),hr=m(Xe),w(qe.$$.fragment,Xe),ur=m(Xe),w(Te.$$.fragment,Xe),Xe.forEach(a),Fs=m(e),A=n(e,"DIV",{class:!0});var We=r(A);w(yt.$$.fragment,We),_r=m(We),bt=n(We,"P",{});var ro=r(bt);vr=c(ro,"Load a "),Ta=n(ro,"EM",{});var Ki=r(Ta);$r=c(Ki,"datasets.Metric"),Ki.forEach(a),yr=c(ro,"."),ro.forEach(a),br=m(We),w(Ie.$$.fragment,We),wr=m(We),w(Ae.$$.fragment,We),We.forEach(a),Ps=m(e),X=n(e,"DIV",{class:!0});var Zt=r(X);w(wt.$$.fragment,Zt),xr=m(Zt),Ia=n(Zt,"P",{});var Zi=r(Ia);kr=c(Zi,"Allow inspection/modification of a metric script by copying it on local drive at local_path."),Zi.forEach(a),Er=m(Zt),w(Le.$$.fragment,Zt),Zt.forEach(a),qs=m(e),se=n(e,"H2",{class:!0});var io=r(se);He=n(io,"A",{id:!0,class:!0,href:!0});var Qi=r(He);Aa=n(Qi,"SPAN",{});var el=r(Aa);w(xt.$$.fragment,el),el.forEach(a),Qi.forEach(a),Dr=m(io),La=n(io,"SPAN",{});var tl=r(La);Nr=c(tl,"From files"),tl.forEach(a),io.forEach(a),Ts=m(e),Vt=n(e,"P",{});var al=r(Vt);jr=c(al,`Configurations used to load data files.
They are used when loading local files or a dataset repository:`),al.forEach(a),Is=m(e),Ue=n(e,"UL",{});var lo=r(Ue);Bt=n(lo,"LI",{});var pi=r(Bt);Cr=c(pi,"local files: "),Ha=n(pi,"CODE",{});var sl=r(Ha);Sr=c(sl,'load_dataset("parquet", data_dir="path/to/data/dir")'),sl.forEach(a),pi.forEach(a),Or=m(lo),Rt=n(lo,"LI",{});var fi=r(Rt);Fr=c(fi,"dataset repository: "),Ua=n(fi,"CODE",{});var ol=r(Ua);Pr=c(ol,'load_dataset("allenai/c4")'),ol.forEach(a),fi.forEach(a),lo.forEach(a),As=m(e),H=n(e,"P",{});var Ke=r(H);qr=c(Ke,"You can pass arguments to "),Ma=n(Ke,"CODE",{});var nl=r(Ma);Tr=c(nl,"load_dataset"),nl.forEach(a),Ir=c(Ke,` to configure data loading.
For example you can specify the `),Va=n(Ke,"CODE",{});var rl=r(Va);Ar=c(rl,"sep"),rl.forEach(a),Lr=c(Ke," parameter to define the "),Jt=n(Ke,"A",{href:!0});var il=r(Jt);Hr=c(il,"CsvConfig"),il.forEach(a),Ur=c(Ke," that is used to load the data:"),Ke.forEach(a),Ls=m(e),w(kt.$$.fragment,e),Hs=m(e),oe=n(e,"H3",{class:!0});var co=r(oe);Me=n(co,"A",{id:!0,class:!0,href:!0});var ll=r(Me);Ba=n(ll,"SPAN",{});var dl=r(Ba);w(Et.$$.fragment,dl),dl.forEach(a),ll.forEach(a),Mr=m(co),Ra=n(co,"SPAN",{});var cl=r(Ra);Vr=c(cl,"Text"),cl.forEach(a),co.forEach(a),Us=m(e),ne=n(e,"DIV",{class:!0});var po=r(ne);w(Dt.$$.fragment,po),Br=m(po),Ja=n(po,"P",{});var pl=r(Ja);Rr=c(pl,"BuilderConfig for text files."),pl.forEach(a),po.forEach(a),Ms=m(e),re=n(e,"H3",{class:!0});var fo=r(re);Ve=n(fo,"A",{id:!0,class:!0,href:!0});var fl=r(Ve);Ya=n(fl,"SPAN",{});var ml=r(Ya);w(Nt.$$.fragment,ml),ml.forEach(a),fl.forEach(a),Jr=m(fo),za=n(fo,"SPAN",{});var gl=r(za);Yr=c(gl,"CSV"),gl.forEach(a),fo.forEach(a),Vs=m(e),ie=n(e,"DIV",{class:!0});var mo=r(ie);w(jt.$$.fragment,mo),zr=m(mo),Ga=n(mo,"P",{});var hl=r(Ga);Gr=c(hl,"BuilderConfig for CSV."),hl.forEach(a),mo.forEach(a),Bs=m(e),le=n(e,"H3",{class:!0});var go=r(le);Be=n(go,"A",{id:!0,class:!0,href:!0});var ul=r(Be);Xa=n(ul,"SPAN",{});var _l=r(Xa);w(Ct.$$.fragment,_l),_l.forEach(a),ul.forEach(a),Xr=m(go),Wa=n(go,"SPAN",{});var vl=r(Wa);Wr=c(vl,"JSON"),vl.forEach(a),go.forEach(a),Rs=m(e),de=n(e,"DIV",{class:!0});var ho=r(de);w(St.$$.fragment,ho),Kr=m(ho),Ka=n(ho,"P",{});var $l=r(Ka);Zr=c($l,"BuilderConfig for JSON."),$l.forEach(a),ho.forEach(a),Js=m(e),ce=n(e,"H3",{class:!0});var uo=r(ce);Re=n(uo,"A",{id:!0,class:!0,href:!0});var yl=r(Re);Za=n(yl,"SPAN",{});var bl=r(Za);w(Ot.$$.fragment,bl),bl.forEach(a),yl.forEach(a),Qr=m(uo),Qa=n(uo,"SPAN",{});var wl=r(Qa);ei=c(wl,"Parquet"),wl.forEach(a),uo.forEach(a),Ys=m(e),pe=n(e,"DIV",{class:!0});var _o=r(pe);w(Ft.$$.fragment,_o),ti=m(_o),es=n(_o,"P",{});var xl=r(es);ai=c(xl,"BuilderConfig for Parquet."),xl.forEach(a),_o.forEach(a),zs=m(e),fe=n(e,"H3",{class:!0});var vo=r(fe);Je=n(vo,"A",{id:!0,class:!0,href:!0});var kl=r(Je);ts=n(kl,"SPAN",{});var El=r(ts);w(Pt.$$.fragment,El),El.forEach(a),kl.forEach(a),si=m(vo),as=n(vo,"SPAN",{});var Dl=r(as);oi=c(Dl,"Images"),Dl.forEach(a),vo.forEach(a),Gs=m(e),me=n(e,"DIV",{class:!0});var $o=r(me);w(qt.$$.fragment,$o),ni=m($o),ss=n($o,"P",{});var Nl=r(ss);ri=c(Nl,"BuilderConfig for ImageFolder."),Nl.forEach(a),$o.forEach(a),Xs=m(e),ge=n(e,"H3",{class:!0});var yo=r(ge);Ye=n(yo,"A",{id:!0,class:!0,href:!0});var jl=r(Ye);os=n(jl,"SPAN",{});var Cl=r(os);w(Tt.$$.fragment,Cl),Cl.forEach(a),jl.forEach(a),ii=m(yo),ns=n(yo,"SPAN",{});var Sl=r(ns);li=c(Sl,"Audio"),Sl.forEach(a),yo.forEach(a),Ws=m(e),he=n(e,"DIV",{class:!0});var bo=r(he);w(It.$$.fragment,bo),di=m(bo),rs=n(bo,"P",{});var Ol=r(rs);ci=c(Ol,"Builder Config for AudioFolder."),Ol.forEach(a),bo.forEach(a),this.h()},h(){v(i,"name","hf:doc:metadata"),v(i,"content",JSON.stringify(ad)),v(p,"id","loading-methods"),v(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(p,"href","#loading-methods"),v(g,"class","relative group"),v(ve,"id","datasets.list_datasets"),v(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(ve,"href","#datasets.list_datasets"),v(K,"class","relative group"),v(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(tt,"href","https://huggingface.co/datasets"),v(tt,"rel","nofollow"),v(ot,"href","https://github.com/huggingface/datasets/tree/main/datasets"),v(ot,"rel","nofollow"),v(nt,"href","https://huggingface.co/datasets"),v(nt,"rel","nofollow"),v(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ut,"href","/docs/datasets/pr_4884/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),v(Mt,"href","/docs/datasets/pr_4884/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),v(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(ft,"href","https://huggingface.co/datasets"),v(ft,"rel","nofollow"),v(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Fe,"id","datasets.list_metrics"),v(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Fe,"href","#datasets.list_metrics"),v(ae,"class","relative group"),v(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(He,"id","from-files"),v(He,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(He,"href","#from-files"),v(se,"class","relative group"),v(Jt,"href","/docs/datasets/pr_4884/en/package_reference/loading_methods#datasets.packaged_modules.csv.CsvConfig"),v(Me,"id","datasets.packaged_modules.text.TextConfig"),v(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Me,"href","#datasets.packaged_modules.text.TextConfig"),v(oe,"class","relative group"),v(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ve,"id","datasets.packaged_modules.csv.CsvConfig"),v(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ve,"href","#datasets.packaged_modules.csv.CsvConfig"),v(re,"class","relative group"),v(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Be,"id","datasets.packaged_modules.json.JsonConfig"),v(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Be,"href","#datasets.packaged_modules.json.JsonConfig"),v(le,"class","relative group"),v(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Re,"id","datasets.packaged_modules.parquet.ParquetConfig"),v(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Re,"href","#datasets.packaged_modules.parquet.ParquetConfig"),v(ce,"class","relative group"),v(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Je,"id","datasets.packaged_modules.imagefolder.ImageFolderConfig"),v(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Je,"href","#datasets.packaged_modules.imagefolder.ImageFolderConfig"),v(fe,"class","relative group"),v(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ye,"id","datasets.packaged_modules.audiofolder.AudioFolderConfig"),v(Ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ye,"href","#datasets.packaged_modules.audiofolder.AudioFolderConfig"),v(ge,"class","relative group"),v(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,h){t(document.head,i),u(e,$,h),u(e,g,h),t(g,p),t(p,_),x(s,_,null),t(g,l),t(g,N),t(N,y),u(e,O,h),u(e,F,h),t(F,wo),u(e,ys,h),u(e,K,h),t(K,ve),t(ve,Qt),x(Ze,Qt,null),t(K,xo),t(K,ea),t(ea,ko),u(e,bs,h),u(e,V,h),x(Qe,V,null),t(V,Eo),t(V,ta),t(ta,Do),t(V,No),x($e,V,null),u(e,ws,h),u(e,C,h),x(et,C,null),t(C,jo),t(C,aa),t(aa,Co),t(C,So),t(C,Z),t(Z,Oo),t(Z,tt),t(tt,Fo),t(Z,Po),t(Z,sa),t(sa,qo),t(Z,To),t(C,Io),t(C,oa),t(oa,Ao),t(C,Lo),t(C,at),t(at,na),t(na,Ho),t(at,Uo),t(at,ra),t(ra,Mo),t(C,Vo),t(C,ia),t(ia,Bo),t(C,Ro),t(C,la),t(la,Jo),t(C,Yo),t(C,Q),t(Q,B),t(B,st),t(st,zo),t(st,da),t(da,Go),t(st,Xo),t(B,Wo),t(B,ca),t(ca,Ko),t(B,Zo),t(B,pa),t(pa,Qo),t(B,en),t(B,ye),t(ye,tn),t(ye,ot),t(ot,an),t(ye,sn),t(ye,nt),t(nt,on),t(Q,nn),t(Q,rt),t(rt,fa),t(fa,rn),t(rt,ln),t(rt,it),t(it,ma),t(ma,ga),t(ga,dn),t(it,cn),t(it,lt),t(lt,ha),t(ha,pn),t(lt,fn),t(lt,ua),t(ua,mn),t(Q,gn),t(Q,_a),t(_a,dt),t(dt,hn),t(dt,va),t(va,un),t(dt,_n),t(C,vn),t(C,$a),t($a,$n),t(C,yn),x(be,C,null),t(C,bn),t(C,ya),t(ya,wn),t(C,xn),x(we,C,null),t(C,kn),x(xe,C,null),t(C,En),x(ke,C,null),t(C,Dn),x(Ee,C,null),u(e,xs,h),u(e,R,h),x(ct,R,null),t(R,Nn),t(R,J),t(J,jn),t(J,Ut),t(Ut,Cn),t(J,Sn),t(J,Mt),t(Mt,On),t(J,Fn),t(J,ba),t(ba,Pn),t(J,qn),t(R,Tn),x(De,R,null),u(e,ks,h),u(e,P,h),x(pt,P,null),t(P,In),t(P,wa),t(wa,An),t(P,Ln),t(P,ee),t(ee,Hn),t(ee,ft),t(ft,Un),t(ee,Mn),t(ee,xa),t(xa,Vn),t(ee,Bn),t(P,Rn),t(P,ka),t(ka,Jn),t(P,Yn),t(P,mt),t(mt,Ea),t(Ea,zn),t(mt,Gn),t(mt,Da),t(Da,Xn),t(P,Wn),t(P,Na),t(Na,Kn),t(P,Zn),x(Ne,P,null),t(P,Qn),x(je,P,null),u(e,Es,h),u(e,Y,h),x(gt,Y,null),t(Y,er),t(Y,ja),t(ja,tr),t(Y,ar),x(Ce,Y,null),u(e,Ds,h),u(e,z,h),x(ht,z,null),t(z,sr),t(z,Ca),t(Ca,or),t(z,nr),x(Se,z,null),u(e,Ns,h),u(e,G,h),x(ut,G,null),t(G,rr),t(G,Sa),t(Sa,ir),t(G,lr),x(Oe,G,null),u(e,js,h),u(e,te,h),x(_t,te,null),t(te,dr),t(te,Oa),t(Oa,cr),u(e,Cs,h),u(e,ae,h),t(ae,Fe),t(Fe,Fa),x(vt,Fa,null),t(ae,pr),t(ae,Pa),t(Pa,fr),u(e,Ss,h),x(Pe,e,h),u(e,Os,h),u(e,I,h),x($t,I,null),t(I,mr),t(I,qa),t(qa,gr),t(I,hr),x(qe,I,null),t(I,ur),x(Te,I,null),u(e,Fs,h),u(e,A,h),x(yt,A,null),t(A,_r),t(A,bt),t(bt,vr),t(bt,Ta),t(Ta,$r),t(bt,yr),t(A,br),x(Ie,A,null),t(A,wr),x(Ae,A,null),u(e,Ps,h),u(e,X,h),x(wt,X,null),t(X,xr),t(X,Ia),t(Ia,kr),t(X,Er),x(Le,X,null),u(e,qs,h),u(e,se,h),t(se,He),t(He,Aa),x(xt,Aa,null),t(se,Dr),t(se,La),t(La,Nr),u(e,Ts,h),u(e,Vt,h),t(Vt,jr),u(e,Is,h),u(e,Ue,h),t(Ue,Bt),t(Bt,Cr),t(Bt,Ha),t(Ha,Sr),t(Ue,Or),t(Ue,Rt),t(Rt,Fr),t(Rt,Ua),t(Ua,Pr),u(e,As,h),u(e,H,h),t(H,qr),t(H,Ma),t(Ma,Tr),t(H,Ir),t(H,Va),t(Va,Ar),t(H,Lr),t(H,Jt),t(Jt,Hr),t(H,Ur),u(e,Ls,h),x(kt,e,h),u(e,Hs,h),u(e,oe,h),t(oe,Me),t(Me,Ba),x(Et,Ba,null),t(oe,Mr),t(oe,Ra),t(Ra,Vr),u(e,Us,h),u(e,ne,h),x(Dt,ne,null),t(ne,Br),t(ne,Ja),t(Ja,Rr),u(e,Ms,h),u(e,re,h),t(re,Ve),t(Ve,Ya),x(Nt,Ya,null),t(re,Jr),t(re,za),t(za,Yr),u(e,Vs,h),u(e,ie,h),x(jt,ie,null),t(ie,zr),t(ie,Ga),t(Ga,Gr),u(e,Bs,h),u(e,le,h),t(le,Be),t(Be,Xa),x(Ct,Xa,null),t(le,Xr),t(le,Wa),t(Wa,Wr),u(e,Rs,h),u(e,de,h),x(St,de,null),t(de,Kr),t(de,Ka),t(Ka,Zr),u(e,Js,h),u(e,ce,h),t(ce,Re),t(Re,Za),x(Ot,Za,null),t(ce,Qr),t(ce,Qa),t(Qa,ei),u(e,Ys,h),u(e,pe,h),x(Ft,pe,null),t(pe,ti),t(pe,es),t(es,ai),u(e,zs,h),u(e,fe,h),t(fe,Je),t(Je,ts),x(Pt,ts,null),t(fe,si),t(fe,as),t(as,oi),u(e,Gs,h),u(e,me,h),x(qt,me,null),t(me,ni),t(me,ss),t(ss,ri),u(e,Xs,h),u(e,ge,h),t(ge,Ye),t(Ye,os),x(Tt,os,null),t(ge,ii),t(ge,ns),t(ns,li),u(e,Ws,h),u(e,he,h),x(It,he,null),t(he,di),t(he,rs),t(rs,ci),Ks=!0},p(e,[h]){const At={};h&2&&(At.$$scope={dirty:h,ctx:e}),$e.$set(At);const is={};h&2&&(is.$$scope={dirty:h,ctx:e}),be.$set(is);const ls={};h&2&&(ls.$$scope={dirty:h,ctx:e}),we.$set(ls);const ds={};h&2&&(ds.$$scope={dirty:h,ctx:e}),xe.$set(ds);const cs={};h&2&&(cs.$$scope={dirty:h,ctx:e}),ke.$set(cs);const Lt={};h&2&&(Lt.$$scope={dirty:h,ctx:e}),Ee.$set(Lt);const ps={};h&2&&(ps.$$scope={dirty:h,ctx:e}),De.$set(ps);const fs={};h&2&&(fs.$$scope={dirty:h,ctx:e}),Ne.$set(fs);const ms={};h&2&&(ms.$$scope={dirty:h,ctx:e}),je.$set(ms);const ue={};h&2&&(ue.$$scope={dirty:h,ctx:e}),Ce.$set(ue);const gs={};h&2&&(gs.$$scope={dirty:h,ctx:e}),Se.$set(gs);const S={};h&2&&(S.$$scope={dirty:h,ctx:e}),Oe.$set(S);const hs={};h&2&&(hs.$$scope={dirty:h,ctx:e}),Pe.$set(hs);const _e={};h&2&&(_e.$$scope={dirty:h,ctx:e}),qe.$set(_e);const us={};h&2&&(us.$$scope={dirty:h,ctx:e}),Te.$set(us);const _s={};h&2&&(_s.$$scope={dirty:h,ctx:e}),Ie.$set(_s);const vs={};h&2&&(vs.$$scope={dirty:h,ctx:e}),Ae.$set(vs);const Ht={};h&2&&(Ht.$$scope={dirty:h,ctx:e}),Le.$set(Ht)},i(e){Ks||(k(s.$$.fragment,e),k(Ze.$$.fragment,e),k(Qe.$$.fragment,e),k($e.$$.fragment,e),k(et.$$.fragment,e),k(be.$$.fragment,e),k(we.$$.fragment,e),k(xe.$$.fragment,e),k(ke.$$.fragment,e),k(Ee.$$.fragment,e),k(ct.$$.fragment,e),k(De.$$.fragment,e),k(pt.$$.fragment,e),k(Ne.$$.fragment,e),k(je.$$.fragment,e),k(gt.$$.fragment,e),k(Ce.$$.fragment,e),k(ht.$$.fragment,e),k(Se.$$.fragment,e),k(ut.$$.fragment,e),k(Oe.$$.fragment,e),k(_t.$$.fragment,e),k(vt.$$.fragment,e),k(Pe.$$.fragment,e),k($t.$$.fragment,e),k(qe.$$.fragment,e),k(Te.$$.fragment,e),k(yt.$$.fragment,e),k(Ie.$$.fragment,e),k(Ae.$$.fragment,e),k(wt.$$.fragment,e),k(Le.$$.fragment,e),k(xt.$$.fragment,e),k(kt.$$.fragment,e),k(Et.$$.fragment,e),k(Dt.$$.fragment,e),k(Nt.$$.fragment,e),k(jt.$$.fragment,e),k(Ct.$$.fragment,e),k(St.$$.fragment,e),k(Ot.$$.fragment,e),k(Ft.$$.fragment,e),k(Pt.$$.fragment,e),k(qt.$$.fragment,e),k(Tt.$$.fragment,e),k(It.$$.fragment,e),Ks=!0)},o(e){E(s.$$.fragment,e),E(Ze.$$.fragment,e),E(Qe.$$.fragment,e),E($e.$$.fragment,e),E(et.$$.fragment,e),E(be.$$.fragment,e),E(we.$$.fragment,e),E(xe.$$.fragment,e),E(ke.$$.fragment,e),E(Ee.$$.fragment,e),E(ct.$$.fragment,e),E(De.$$.fragment,e),E(pt.$$.fragment,e),E(Ne.$$.fragment,e),E(je.$$.fragment,e),E(gt.$$.fragment,e),E(Ce.$$.fragment,e),E(ht.$$.fragment,e),E(Se.$$.fragment,e),E(ut.$$.fragment,e),E(Oe.$$.fragment,e),E(_t.$$.fragment,e),E(vt.$$.fragment,e),E(Pe.$$.fragment,e),E($t.$$.fragment,e),E(qe.$$.fragment,e),E(Te.$$.fragment,e),E(yt.$$.fragment,e),E(Ie.$$.fragment,e),E(Ae.$$.fragment,e),E(wt.$$.fragment,e),E(Le.$$.fragment,e),E(xt.$$.fragment,e),E(kt.$$.fragment,e),E(Et.$$.fragment,e),E(Dt.$$.fragment,e),E(Nt.$$.fragment,e),E(jt.$$.fragment,e),E(Ct.$$.fragment,e),E(St.$$.fragment,e),E(Ot.$$.fragment,e),E(Ft.$$.fragment,e),E(Pt.$$.fragment,e),E(qt.$$.fragment,e),E(Tt.$$.fragment,e),E(It.$$.fragment,e),Ks=!1},d(e){a(i),e&&a($),e&&a(g),D(s),e&&a(O),e&&a(F),e&&a(ys),e&&a(K),D(Ze),e&&a(bs),e&&a(V),D(Qe),D($e),e&&a(ws),e&&a(C),D(et),D(be),D(we),D(xe),D(ke),D(Ee),e&&a(xs),e&&a(R),D(ct),D(De),e&&a(ks),e&&a(P),D(pt),D(Ne),D(je),e&&a(Es),e&&a(Y),D(gt),D(Ce),e&&a(Ds),e&&a(z),D(ht),D(Se),e&&a(Ns),e&&a(G),D(ut),D(Oe),e&&a(js),e&&a(te),D(_t),e&&a(Cs),e&&a(ae),D(vt),e&&a(Ss),D(Pe,e),e&&a(Os),e&&a(I),D($t),D(qe),D(Te),e&&a(Fs),e&&a(A),D(yt),D(Ie),D(Ae),e&&a(Ps),e&&a(X),D(wt),D(Le),e&&a(qs),e&&a(se),D(xt),e&&a(Ts),e&&a(Vt),e&&a(Is),e&&a(Ue),e&&a(As),e&&a(H),e&&a(Ls),D(kt,e),e&&a(Hs),e&&a(oe),D(Et),e&&a(Us),e&&a(ne),D(Dt),e&&a(Ms),e&&a(re),D(Nt),e&&a(Vs),e&&a(ie),D(jt),e&&a(Bs),e&&a(le),D(Ct),e&&a(Rs),e&&a(de),D(St),e&&a(Js),e&&a(ce),D(Ot),e&&a(Ys),e&&a(pe),D(Ft),e&&a(zs),e&&a(fe),D(Pt),e&&a(Gs),e&&a(me),D(qt),e&&a(Xs),e&&a(ge),D(Tt),e&&a(Ws),e&&a(he),D(It)}}}const ad={local:"loading-methods",sections:[{local:"datasets.list_datasets",title:"Datasets"},{local:"datasets.list_metrics",title:"Metrics"},{local:"from-files",sections:[{local:"datasets.packaged_modules.text.TextConfig",title:"Text"},{local:"datasets.packaged_modules.csv.CsvConfig",title:"CSV"},{local:"datasets.packaged_modules.json.JsonConfig",title:"JSON"},{local:"datasets.packaged_modules.parquet.ParquetConfig",title:"Parquet"},{local:"datasets.packaged_modules.imagefolder.ImageFolderConfig",title:"Images"},{local:"datasets.packaged_modules.audiofolder.AudioFolderConfig",title:"Audio"}],title:"From files"}],title:"Loading methods"};function sd(j){return Il(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class pd extends Fl{constructor(i){super();Pl(this,i,sd,td,ql,{})}}export{pd as default,ad as metadata};
