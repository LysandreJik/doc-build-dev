import{S as bae,i as $ae,s as xae,e as r,k as m,w as _,t as i,M as vae,c as o,d as s,m as h,a as l,x as b,h as p,b as w,G as e,g as D,y as $,q as x,o as v,B as y,v as yae,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as jae}from"../../chunks/Tip-hf-doc-builder.js";import{D as E}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as fs}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as T}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";import{D as wae}from"../../chunks/Deprecated-hf-doc-builder.js";function Dae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetInfo
ds_info = DatasetInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_info = DatasetInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function kae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Eae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
more_text = ds["text"]
ds.add_column(name="text_2", column=more_text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>more_text = ds[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_column(name=<span class="hljs-string">&quot;text_2&quot;</span>, column=more_text)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;text_2&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function qae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
new_review = {'label': 0, 'text': 'this movie is the absolute worst thing I have ever seen'}
ds = ds.add_item(new_review)
ds[-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>new_review = {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.add_item(new_review)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[-<span class="hljs-number">1</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Iae(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_pandas(df)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_pandas(df)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Tae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data
MemoryMappedTable
text: string
label: int64
----
text: [[<span class="hljs-string">&quot;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&quot;</span>,<span class="hljs-string">&quot;the soundtrack alone is worth the price of admission .&quot;</span>,<span class="hljs-string">&quot;rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&quot;</span>,<span class="hljs-string">&quot;beneath the film&#x27;s obvious determination to shock at any cost lies considerable skill and determination , backed by sheer nerve .&quot;</span>,<span class="hljs-string">&quot;bielinsky is a filmmaker of impressive talent .&quot;</span>,<span class="hljs-string">&quot;so beautifully acted and directed , it&#x27;s clear that washington most certainly has a new career ahead of him if he so chooses .&quot;</span>,<span class="hljs-string">&quot;a visual spectacle full of stunning images and effects .&quot;</span>,<span class="hljs-string">&quot;a gentle and engrossing character study .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s enough to watch huppert scheming , with her small , intelligent eyes as steady as any noir villain , and to enjoy the perfectly pitched web of tension that chabrol spins .&quot;</span>,<span class="hljs-string">&quot;an engrossing portrait of uncompromising artists trying to create something original against the backdrop of a corporate music industry that only seems to care about the bottom line .&quot;</span>,...,<span class="hljs-string">&quot;ultimately , jane learns her place as a girl , softens up and loses some of the intensity that made her an interesting character to begin with .&quot;</span>,<span class="hljs-string">&quot;ah-nuld&#x27;s action hero days might be over .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s clear why deuces wild , which was shot two years ago , has been gathering dust on mgm&#x27;s shelf .&quot;</span>,<span class="hljs-string">&quot;feels like nothing quite so much as a middle-aged moviemaker&#x27;s attempt to surround himself with beautiful , half-naked women .&quot;</span>,<span class="hljs-string">&quot;when the precise nature of matthew&#x27;s predicament finally comes into sharp focus , the revelation fails to justify the build-up .&quot;</span>,<span class="hljs-string">&quot;this picture is murder by numbers , and as easy to be bored by as your abc&#x27;s , despite a few whopping shootouts .&quot;</span>,<span class="hljs-string">&quot;hilarious musical comedy though stymied by accents thick as mud .&quot;</span>,<span class="hljs-string">&quot;if you are into splatter movies , then you will probably have a reasonably good time with the salton sea .&quot;</span>,<span class="hljs-string">&quot;a dull , simple-minded and stereotypical tale of drugs , death and mind-numbing indifference on the inner-city streets .&quot;</span>,<span class="hljs-string">&quot;the feature-length stretch . . . strains the show&#x27;s concept .&quot;</span>]]
label: [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,...,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Nae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
[{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Pae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
<span class="hljs-number">2</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Aae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
<span class="hljs-number">1066</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Fae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Lae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
(<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Sae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.unique('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&#x27;label&#x27;</span>)
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Oae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
    num_rows: <span class="hljs-number">87599</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Cae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, ClassLabel, Value
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
new_features = ds.features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function zae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Vae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.remove_columns('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&#x27;label&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Uae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_column('label', 'label_new')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Mae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
Dataset({
    features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Rae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq", split="validation")
ds.features
ds = ds.class_encode_column('answer')
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&#x27;answer&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Bae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.__len__`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.__len__
&lt;bound method Dataset.__len__ of Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})&gt;`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Hae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['text', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Gae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')
def encode(batch):
    return tokenizer(batch['text'], padding=True, truncation=True, return_tensors='pt')
ds.set_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&#x27;text&#x27;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">29353</span>,  <span class="hljs-number">2135</span>, <span class="hljs-number">15102</span>,  <span class="hljs-number">1996</span>,  <span class="hljs-number">9428</span>, <span class="hljs-number">20868</span>,  <span class="hljs-number">2890</span>,  <span class="hljs-number">8663</span>,  <span class="hljs-number">6895</span>,
         <span class="hljs-number">20470</span>,  <span class="hljs-number">2571</span>,  <span class="hljs-number">3663</span>,  <span class="hljs-number">2090</span>,  <span class="hljs-number">4603</span>,  <span class="hljs-number">3017</span>,  <span class="hljs-number">3008</span>,  <span class="hljs-number">1998</span>,  <span class="hljs-number">2037</span>, <span class="hljs-number">24211</span>,
         <span class="hljs-number">5637</span>,  <span class="hljs-number">1998</span>, <span class="hljs-number">11690</span>,  <span class="hljs-number">2336</span>,  <span class="hljs-number">1012</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Wae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format
ds.reset_format()
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Yae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Jae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example["text"], padding=True, truncation=True, return_tensors='pt')
ds = ds.with_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
         <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
         <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Kae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
<span class="hljs-number">10</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Zae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds[0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the soundtrack alone is worth the price of admission .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Xae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Qae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.select(range(4))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.select(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">4</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ene(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]
sorted_ds = ds.sort('label')
sorted_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&#x27;label&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function tne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function sne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds = ds.train_test_split(test_size=0.2, shuffle=True)

ds = ds.train_test_split(test_size=0.2, seed=42)

ds = load_dataset("imdb",split="train")
ds = ds.train_test_split(test_size=0.2, stratify_by_column="label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, shuffle=<span class="hljs-literal">True</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">852</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">214</span>
    })
})

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, seed=<span class="hljs-number">42</span>)

<span class="hljs-comment"># stratified split</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>,split=<span class="hljs-string">&quot;train&quot;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">25000</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, stratify_by_column=<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">20000</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">5000</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ane(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds
ds.shard(num_shards=2, index=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shard(num_shards=<span class="hljs-number">2</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function nne(k){let c,g,f,n,u;return n=new P({props:{code:`ds_train = ds["train"].to_tf_dataset(
   columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'],
   shuffle=True,
   batch_size=16,
   collate_fn=data_collator,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds_train = ds[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>   columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
<span class="hljs-meta">... </span>   shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>   batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>   collate_fn=data_collator,
<span class="hljs-meta">... </span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function rne(k){let c,g,f,n,u;return n=new P({props:{code:'dataset.push_to_hub("<organization>/<dataset_id>", split="evaluation")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;evaluation&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function one(k){let c,g,f,n,u;return n=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=r("p"),g=i("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function lne(k){let c,g;return c=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function ine(k){let c,g,f,n,u;return n=new P({props:{code:'saved_ds = ds.save_to_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>saved_ds = ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function pne(k){let c,g,f,n,u;return n=new P({props:{code:'ds = load_from_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function cne(k){let c,g,f,n,u;return n=new P({props:{code:'ds.to_csv("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_csv(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function dne(k){let c,g,f,n,u;return n=new P({props:{code:"ds.to_pandas()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_pandas()'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function mne(k){let c,g,f,n,u;return n=new P({props:{code:"ds.to_dict()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_dict()'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function hne(k){let c,g,f,n,u;return n=new P({props:{code:'ds.to_json("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_json(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function fne(k){let c,g,f,n,u;return n=new P({props:{code:'ds.to_parquet("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_parquet(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function une(k){let c,g,f,n,u;return n=new P({props:{code:`ds = datasets.load_dataset('crime_and_punish', split='train')
ds_with_embeddings = ds.map(lambda example: {'embeddings': embed(example['line']}))
ds_with_embeddings.add_faiss_index(column='embeddings')
# query
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples('embeddings', embed('my new query'), k=10)
# save index
ds_with_embeddings.save_faiss_index('embeddings', 'my_index.faiss')

ds = datasets.load_dataset('crime_and_punish', split='train')
# load index
ds.load_faiss_index('embeddings', 'my_index.faiss')
# query
scores, retrieved_examples = ds.get_nearest_examples('embeddings', embed('my new query'), k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># save index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function gne(k){let c,g,f,n,u;return n=new P({props:{code:`es_client = elasticsearch.Elasticsearch()
ds = datasets.load_dataset('crime_and_punish', split='train')
ds.add_elasticsearch_index(column='line', es_client=es_client, es_index_name="my_es_index")
scores, retrieved_examples = ds.get_nearest_examples('line', 'my new query', k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>es_client = elasticsearch.Elasticsearch()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function _ne(k){let c,g,f,n,u;return n=new P({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),{c(){c=r("p"),g=i("Default config is:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Default config is:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function bne(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_csv('path/to/dataset.csv')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_csv(<span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function $ne(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_json('path/to/dataset.json')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_json(<span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function xne(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_parquet('path/to/dataset.parquet')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_parquet(<span class="hljs-string">&#x27;path/to/dataset.parquet&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function vne(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_text('path/to/dataset.txt')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_text(<span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function yne(k){let c,g,f,n,u;return n=new P({props:{code:`# dataset with mapping {'entailment': 0, 'neutral': 1, 'contradiction': 2}
ds = load_dataset("glue", "mnli", split="train")
# mapping to align with
label2id = {'CONTRADICTION': 0, 'NEUTRAL': 1, 'ENTAILMENT': 2}
ds_aligned = ds.align_labels_with_mapping(label2id, "label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mapping to align with</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function jne(k){let c,g,f,n,u;return n=new P({props:{code:"ds3 = concatenate_datasets([ds1, ds2])",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds3 = concatenate_datasets([ds1, ds2])'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function wne(k){let c,g,f,n,u;return n=new P({props:{code:`

from datasets import Dataset, interleave_datasets
d1 = Dataset.from_dict({"a": [0, 1, 2]})
d2 = Dataset.from_dict({"a": [10, 11, 12]})
d3 = Dataset.from_dict({"a": [20, 21, 22]})
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42, stopping_strategy="all_exhausted")
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
dataset["a"]
dataset = interleave_datasets([d1, d2, d3])
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], stopping_strategy="all_exhausted")
dataset["a"]
d1 = Dataset.from_dict({"a": [0, 1, 2]})
d2 = Dataset.from_dict({"a": [10, 11, 12, 13]})
d3 = Dataset.from_dict({"a": [20, 21, 22, 23, 24]})
dataset = interleave_datasets([d1, d2, d3])
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], stopping_strategy="all_exhausted")
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42, stopping_strategy="all_exhausted")
dataset["a"]

from datasets import load_dataset, interleave_datasets
d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
dataset = interleave_datasets([d1, d2])
iterator = iter(dataset)
next(iterator)
next(iterator)`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>, stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">23</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>, stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, ..., <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>]
For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Dne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function kne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
{<span class="hljs-string">&#x27;test&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-test.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;train&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-train.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Ene(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">2</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function qne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">1066</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">8530</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">1066</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Ine(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Tne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
{<span class="hljs-string">&#x27;test&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;train&#x27;</span>: (<span class="hljs-number">8530</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;validation&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Nne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.unique("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&quot;label&quot;</span>)
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Pne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">0</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Ane(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds["train"][0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Fne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">4265</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Lne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]
sorted_ds = ds.sort("label")
sorted_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Sne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function One(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Cne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format
ds.reset_format()
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function zne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds["train"].format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Vne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example['text'], truncation=True, padding=True, return_tensors="pt")
ds = ds.with_transform(encode)
ds["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">2067</span>,  <span class="hljs-number">1110</span>, <span class="hljs-number">17348</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1129</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">6880</span>,  <span class="hljs-number">1432</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1207</span>,   <span class="hljs-number">107</span>, <span class="hljs-number">14255</span>,  <span class="hljs-number">1389</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1105</span>,  <span class="hljs-number">1115</span>,  <span class="hljs-number">1119</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1280</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1294</span>,   <span class="hljs-number">170</span>, <span class="hljs-number">24194</span>,  <span class="hljs-number">1256</span>,  <span class="hljs-number">3407</span>,  <span class="hljs-number">1190</span>,
        <span class="hljs-number">170</span>, <span class="hljs-number">11791</span>,  <span class="hljs-number">5253</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1732</span>,  <span class="hljs-number">7200</span>, <span class="hljs-number">10947</span>, <span class="hljs-number">12606</span>,  <span class="hljs-number">2895</span>,   <span class="hljs-number">117</span>,
        <span class="hljs-number">179</span>,  <span class="hljs-number">7766</span>,   <span class="hljs-number">118</span>,   <span class="hljs-number">172</span>, <span class="hljs-number">15554</span>,  <span class="hljs-number">1181</span>,  <span class="hljs-number">3498</span>,  <span class="hljs-number">6961</span>,  <span class="hljs-number">3263</span>,  <span class="hljs-number">1137</span>,
        <span class="hljs-number">188</span>,  <span class="hljs-number">1566</span>,  <span class="hljs-number">7912</span>, <span class="hljs-number">14516</span>,  <span class="hljs-number">6997</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Une(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad")
ds["train"].features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">87599</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">10570</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Mne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Rne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Bne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.remove_columns("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Hne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_column("label", "label_new")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;label&quot;</span>, <span class="hljs-string">&quot;label_new&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Gne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Wne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq")
ds["train"].features
ds = ds.class_encode_column("answer")
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&quot;answer&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Yne(k){let c,g,f,n,u;return n=new P({props:{code:'dataset_dict.push_to_hub("<organization>/<dataset_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Jne(k){let c,g,f,n,u;return n=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=r("p"),g=i("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Kne(k){let c,g;return c=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Zne(k){let c,g,f,n,u;return n=new P({props:{code:"ds = load_from_disk('path/to/dataset/directory')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&#x27;path/to/dataset/directory&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Xne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_csv({'train': 'path/to/dataset.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_csv({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Qne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_json({'train': 'path/to/dataset.json'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_json({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ere(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_parquet({'train': 'path/to/dataset/parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_parquet({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset/parquet&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function tre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_text({'train': 'path/to/dataset.txt'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_text({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function sre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds = ds.remove_columns("label")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function are(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train", streaming=True)
ds.features
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">8000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function nre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds.features
new_features = ds.features.copy()
new_features["label"] = ClassLabel(names=["bad", "good"])
new_features["text"] = Value("large_string")
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&quot;bad&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;text&quot;</span>] = Value(<span class="hljs-string">&quot;large_string&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function rre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ore(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds.rename_column("text", "movie_review")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function lre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&quot;it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ire(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
shuffled_ds = ds.shuffle(seed=42)
list(shuffled_ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(shuffled_ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function pre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
ds = ds.skip(1)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.skip(<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;if you sometimes like to go to the movies to have fun , wasabi is a good place to start .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function cre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
small_ds = ds.take(2)
list(small_ds)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>small_ds = ds.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(small_ds)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function dre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function mre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;Review: it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function hre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
list(ds["train"].take(3))
ds = ds.shuffle(seed=42)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function fre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
def encode(example):
    return tokenizer(examples["text"], truncation=True, padding="max_length")
ds = ds.map(encode, batched=True, remove_columns=["text"])
ds = ds.with_format("torch")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-string">&quot;max_length&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(encode, batched=<span class="hljs-literal">True</span>, remove_columns=[<span class="hljs-string">&quot;text&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ure(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function gre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function _re(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.remove_columns("label")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function bre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_column("text", "movie_review")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function $re(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_columns({"text": "movie_review", "label": "rating"})
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_columns({<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;movie_review&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;rating&quot;</span>})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;rating&#x27;</span>: <span class="hljs-number">1</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function xre(k){let c,g,f,n,u,t,d,mn,us,Ar,Oe;return{c(){c=r("p"),g=i("A "),f=r("a"),n=i("datasets.Sequence"),u=i(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=r("code"),d=i("list"),mn=i(` instead of the
`),us=r("a"),Ar=i("datasets.Sequence"),Oe=i("."),this.h()},l(be){c=o(be,"P",{});var ne=l(c);g=p(ne,"A "),f=o(ne,"A",{href:!0});var gs=l(f);n=p(gs,"datasets.Sequence"),gs.forEach(s),u=p(ne,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=o(ne,"CODE",{});var su=l(t);d=p(su,"list"),su.forEach(s),mn=p(ne,` instead of the
`),us=o(ne,"A",{href:!0});var Fr=l(us);Ar=p(Fr,"datasets.Sequence"),Fr.forEach(s),Oe=p(ne,"."),ne.forEach(s),this.h()},h(){w(f,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Sequence"),w(us,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Sequence")},m(be,ne){D(be,c,ne),e(c,g),e(c,f),e(f,n),e(c,u),e(c,t),e(t,d),e(c,mn),e(c,us),e(us,Ar),e(c,Oe)},d(be){be&&s(c)}}}function vre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
copy_of_features = ds.features.copy()
copy_of_features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>copy_of_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>copy_of_features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function yre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features.flatten()
{<span class="hljs-string">&#x27;answers.answer_start&#x27;</span>: <span class="hljs-type">Sequence</span>(feature=Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;answers.text&#x27;</span>: <span class="hljs-type">Sequence</span>(feature=Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function jre(k){let c,g,f,n,u;return n=new P({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function wre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Dre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features, Sequence, Value, ClassLabel
features = Features({'post': Sequence(feature={'text': Value(dtype='string'), 'upvotes': Value(dtype='int32'), 'label': ClassLabel(num_classes=2, names=['hot', 'cold'])})})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value, ClassLabel
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;upvotes&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>])})})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;upvotes&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function kre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets Features
features = Features({'label': ClassLabel(num_classes=3, names=['bad', 'ok', 'good'])})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">3</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">3</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Ere(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
ds.features["label"].int2str(0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;label&quot;</span>].int2str(<span class="hljs-number">0</span>)
<span class="hljs-string">&#x27;neg&#x27;</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function qre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
ds.features["label"].str2int('neg')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;label&quot;</span>].str2int(<span class="hljs-string">&#x27;neg&#x27;</span>)
<span class="hljs-number">0</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Ire(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'stars': Value(dtype='int32')})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;stars&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;stars&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Tre(k){let c,g,f,n,u;return n=new P({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': 'le chat',
        'de': 'die katze'
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Nre(k){let c,g,f,n,u;return n=new P({props:{code:`# At construction time:
datasets.features.TranslationVariableLanguages(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': ['le chat', 'la chatte,']
        'de': 'die katze'
}
# Tensor returned :
{
        'language': ['en', 'de', 'fr', 'fr'],
        'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.TranslationVariableLanguages(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tensor returned :</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>{
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
<span class="hljs-meta">... </span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Pre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array2D(shape=(1, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array2D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Are(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array3D(shape=(1, 2, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array3D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Fre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array4D(shape=(1, 2, 2, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array4D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Lre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array5D(shape=(1, 2, 2, 3, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array5D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Sre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train")
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds[0]["audio"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([ <span class="hljs-number">2.3443763e-05</span>,  <span class="hljs-number">2.1729663e-04</span>,  <span class="hljs-number">2.2145823e-04</span>, ...,
     <span class="hljs-number">3.8356509e-05</span>, -<span class="hljs-number">7.3497440e-06</span>, -<span class="hljs-number">2.1754686e-05</span>], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/f14948e0e84be638dd7943ac36518a4cf3324e8b7aa331c5ab11541518e9368c/en-US~JOINT_ACCOUNT/602ba55abb1e6d0fbce92065.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Ore(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Image
ds = load_dataset("beans", split="train")
ds.features["image"]
ds[0]["image"]
ds = ds.cast_column('image', Image(decode=False))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;image&quot;</span>]
Image(decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x500 at <span class="hljs-number">0x15E52E7F0</span>&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;image&#x27;</span>, Image(decode=<span class="hljs-literal">False</span>))
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/healthy/healthy_train.85.jpg&#x27;</span>}`}}),{c(){c=r("p"),g=i("Examples:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Examples:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Cre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import MetricInfo
metric_info = MetricInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> MetricInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>metric_info = MetricInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function zre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Vre(k){let c,g,f,n;return{c(){c=r("p"),g=i("Use the new library \u{1F917} Evaluate instead: "),f=r("a"),n=i("https://huggingface.co/docs/evaluate"),this.h()},l(u){c=o(u,"P",{});var t=l(c);g=p(t,"Use the new library \u{1F917} Evaluate instead: "),f=o(t,"A",{href:!0,rel:!0});var d=l(f);n=p(d,"https://huggingface.co/docs/evaluate"),d.forEach(s),t.forEach(s),this.h()},h(){w(f,"href","https://huggingface.co/docs/evaluate"),w(f,"rel","nofollow")},m(u,t){D(u,c,t),e(c,g),e(c,f),e(f,n)},d(u){u&&s(c)}}}function Ure(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.add(predictions=model_predictions, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.add(predictions=model_predictions, references=labels)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Mre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.add_batch(predictions=model_prediction, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.add_batch(predictions=model_prediction, references=labels)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Rre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
accuracy = metric.compute(predictions=model_prediction, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = metric.compute(predictions=model_prediction, references=labels)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Bre(k){let c,g;return c=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(anon=True)
s3.ls('public-datasets/imdb/train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(anon=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;public-datasets/imdb/train&#x27;</span>)
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Hre(k){let c,g;return c=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
s3.ls('my-private-datasets/imdb/train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;my-private-datasets/imdb/train&#x27;</span>)
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Gre(k){let c,g;return c=new P({props:{code:`import botocore
from datasets.filesystems import S3Filesystem

s3_session = botocore.session.Session(profile_name='my_profile_name')
s3 = S3FileSystem(session=s3_session)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile_name=<span class="hljs-string">&#x27;my_profile_name&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(session=s3_session)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Wre(k){let c,g;return c=new P({props:{code:`from datasets import load_from_disk
from datasets.filesystems import S3Filesystem

s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
dataset = load_from_disk('s3://my-private-datasets/imdb/train', fs=s3)
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>, fs=s3)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Yre(k){let c,g;return c=new P({props:{code:`from datasets import load_dataset
from datasets.filesystems import S3Filesystem

dataset = load_dataset("imdb")
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
dataset.save_to_disk('s3://my-private-datasets/imdb/train', fs=s3)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.save_to_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>, fs=s3)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Jre(k){let c,g,f,n,u,t,d,mn,us,Ar,Oe,be,ne,gs,su,Fr,WD,j7,Q,Cp,YD,g$,JD,KD,au,_$,ZD,XD,QD,b$,ek,tk,$e,zp,sk,Vp,ak,$$,nk,rk,ok,x$,lk,ik,v$,pk,ck,Lr,dk,_s,Up,mk,hn,hk,y$,fk,uk,j$,gk,_k,bk,Sr,w7,fn,Or,w$,Mp,$k,D$,xk,D7,Cr,vk,nu,yk,jk,k7,q,Rp,wk,k$,Dk,kk,tt,Bp,Ek,E$,qk,Ik,q$,I$,Tk,Nk,zr,Pk,st,Hp,Ak,T$,Fk,Lk,N$,P$,Sk,Ok,Vr,Ck,Ur,Gp,zk,A$,Vk,Uk,Mr,Wp,Mk,F$,Rk,Bk,xe,Yp,Hk,At,Gk,L$,Wk,Yk,S$,Jk,Kk,ru,Zk,Xk,Qk,Jp,e3,O$,t3,s3,a3,Kp,n3,C$,r3,o3,l3,Rr,i3,Br,Zp,p3,Ft,c3,z$,d3,m3,V$,h3,f3,ou,u3,g3,_3,bs,Xp,b3,U$,$3,x3,Hr,v3,$s,Qp,y3,M$,j3,w3,Gr,D3,xs,ec,k3,R$,E3,q3,Wr,I3,vs,tc,T3,sc,N3,Yr,P3,B$,A3,F3,L3,S3,Jr,O3,ys,ac,C3,H$,z3,V3,Kr,U3,js,nc,M3,G$,R3,B3,Zr,H3,at,rc,G3,W$,W3,Y3,Y$,J3,K3,Xr,Z3,ws,oc,X3,J$,Q3,e8,Qr,t8,Ds,lc,s8,K$,a8,n8,eo,r8,ks,ic,o8,Z$,l8,i8,to,p8,nt,pc,c8,X$,d8,m8,un,h8,lu,f8,u8,Q$,g8,_8,b8,so,$8,Es,cc,x8,e1,v8,y8,ao,j8,qs,dc,w8,t1,D8,k8,no,E8,Is,mc,q8,hc,I8,s1,T8,N8,P8,ro,A8,Ts,fc,F8,a1,L8,S8,oo,O8,Ns,uc,C8,n1,z8,V8,gc,U8,iu,M8,R8,B8,lo,_c,H8,gn,G8,r1,W8,Y8,o1,J8,K8,Z8,ve,bc,X8,Ce,Q8,l1,eE,tE,i1,sE,aE,p1,nE,rE,pu,oE,lE,iE,ze,pE,c1,cE,dE,d1,mE,hE,m1,fE,uE,h1,gE,_E,bE,f1,$E,xE,io,vE,Ps,$c,yE,rt,jE,u1,wE,DE,g1,kE,EE,cu,qE,IE,du,TE,NE,po,PE,ot,xc,AE,vc,FE,_1,LE,SE,OE,mu,CE,b1,zE,VE,co,UE,ye,yc,ME,Lt,RE,$1,BE,HE,x1,GE,WE,v1,YE,JE,KE,jc,ZE,hu,XE,QE,e5,_n,t5,fu,s5,a5,y1,n5,r5,o5,mo,l5,je,wc,i5,bn,p5,j1,c5,d5,w1,m5,h5,f5,$n,u5,uu,g5,_5,gu,b5,$5,x5,xn,v5,_u,y5,j5,D1,w5,D5,k5,ho,E5,fo,Dc,q5,k1,I5,T5,lt,kc,N5,E1,P5,A5,q1,F5,L5,uo,S5,we,Ec,O5,I1,C5,z5,qc,V5,T1,U5,M5,R5,vn,N1,B5,H5,P1,G5,W5,de,Y5,A1,J5,K5,F1,Z5,X5,L1,Q5,e6,S1,t6,s6,O1,a6,n6,r6,go,o6,As,Ic,l6,C1,i6,p6,_o,c6,Fs,Tc,d6,z1,m6,h6,bo,f6,it,Nc,u6,V1,g6,_6,U1,b6,$6,$o,x6,pt,Pc,v6,M1,y6,j6,R1,w6,D6,xo,k6,ct,Ac,E6,Y,q6,B1,I6,T6,H1,N6,P6,G1,A6,F6,W1,L6,S6,Y1,O6,C6,J1,z6,V6,K1,U6,M6,R6,Fc,B6,Z1,H6,G6,W6,vo,Y6,re,Lc,J6,yn,K6,X1,Z6,X6,Q1,Q6,eq,tq,e2,sq,aq,Sc,nq,t2,rq,oq,lq,s2,iq,pq,yo,cq,Ls,Oc,dq,a2,mq,hq,jo,fq,dt,Cc,uq,n2,gq,_q,St,bq,bu,$q,xq,$u,vq,yq,r2,jq,wq,Dq,wo,kq,Z,zc,Eq,jn,qq,xu,Iq,Tq,o2,Nq,Pq,Aq,wn,Fq,vu,Lq,Sq,yu,Oq,Cq,zq,Vc,Vq,l2,Uq,Mq,Rq,Do,Bq,ko,Hq,Eo,Gq,Ss,Uc,Wq,Ot,Yq,i2,Jq,Kq,ju,Zq,Xq,p2,Qq,e9,t9,qo,s9,Io,Mc,a9,c2,n9,r9,Os,Rc,o9,d2,l9,i9,To,p9,Cs,Bc,c9,Hc,d9,m2,m9,h9,f9,No,u9,zs,Gc,g9,h2,_9,b9,Po,$9,Vs,Wc,x9,f2,v9,y9,Ao,j9,Us,Yc,w9,u2,D9,k9,Fo,E9,mt,Jc,q9,Dn,I9,g2,T9,N9,_2,P9,A9,F9,b2,wu,L9,Kc,S9,O9,Lo,C9,Ms,Zc,z9,Ct,V9,$2,U9,M9,x2,R9,B9,v2,H9,G9,W9,y2,Du,Y9,Xc,J9,K9,So,Qc,Z9,j2,X9,Q9,Rs,ed,eI,w2,tI,sI,td,aI,D2,nI,rI,oI,Bs,sd,lI,k2,iI,pI,Oo,cI,Hs,ad,dI,E2,mI,hI,Co,fI,zo,nd,uI,q2,gI,_I,Vo,rd,bI,I2,$I,xI,Uo,od,vI,T2,yI,jI,Mo,ld,wI,N2,DI,kI,Ro,id,EI,P2,qI,II,Bo,pd,TI,A2,NI,PI,Ho,cd,AI,F2,FI,LI,Go,dd,SI,ku,Eu,OI,CI,zI,Wo,md,VI,qu,Iu,UI,MI,RI,Tu,hd,BI,Nu,fd,HI,Pu,ud,GI,Au,gd,WI,Fu,_d,YI,Lu,bd,JI,Su,$d,KI,Ou,xd,ZI,Cu,vd,XI,zu,yd,QI,Vu,jd,eT,Uu,wd,tT,Mu,Dd,sT,Gs,kd,aT,L2,nT,rT,Yo,oT,Ws,Ed,lT,S2,iT,pT,Jo,cT,Ys,qd,dT,O2,mT,hT,Ko,fT,Js,Id,uT,C2,gT,_T,Zo,bT,Ks,Td,$T,kn,xT,Ru,vT,yT,Bu,jT,wT,DT,En,kT,z2,ET,qT,V2,IT,TT,NT,Zs,Nd,PT,Pd,AT,U2,FT,LT,ST,Xo,E7,zt,Ad,OT,qn,CT,Hu,zT,VT,Gu,UT,MT,RT,Qo,q7,ee,Fd,BT,M2,HT,GT,In,WT,Wu,YT,JT,Yu,KT,ZT,XT,Ve,QT,R2,eN,tN,B2,sN,aN,H2,nN,rN,G2,oN,lN,iN,Vt,pN,W2,cN,dN,Y2,mN,hN,Ju,fN,uN,gN,el,I7,me,Ld,_N,J2,bN,$N,K2,xN,vN,Z2,yN,jN,Ue,X2,wN,DN,Q2,kN,EN,ex,qN,IN,Sd,TN,Ku,NN,PN,AN,Ut,FN,Zu,LN,SN,tx,ON,CN,Xu,zN,VN,T7,he,Od,UN,sx,MN,RN,ax,BN,HN,nx,GN,WN,Me,rx,YN,JN,ox,KN,ZN,lx,XN,QN,Cd,eP,Qu,tP,sP,aP,Mt,nP,eg,rP,oP,ix,lP,iP,tg,pP,cP,N7,fe,zd,dP,px,mP,hP,cx,fP,uP,dx,gP,_P,Re,mx,bP,$P,hx,xP,vP,fx,yP,jP,Vd,wP,sg,DP,kP,EP,Rt,qP,ag,IP,TP,ux,NP,PP,ng,AP,FP,P7,Tn,tl,gx,Ud,LP,_x,SP,A7,sl,OP,bx,CP,zP,F7,A,Md,VP,$x,UP,MP,Xs,Rd,RP,xx,BP,HP,al,GP,Qs,Bd,WP,vx,YP,JP,nl,KP,ea,Hd,ZP,yx,XP,QP,rl,eA,ta,Gd,tA,Wd,sA,ol,aA,jx,nA,rA,oA,lA,ll,iA,sa,Yd,pA,wx,cA,dA,il,mA,aa,Jd,hA,Dx,fA,uA,pl,gA,ht,Kd,_A,kx,bA,$A,Ex,xA,vA,cl,yA,na,Zd,jA,qx,wA,DA,dl,kA,ra,Xd,EA,Ix,qA,IA,ml,TA,oa,Qd,NA,Tx,PA,AA,hl,FA,ft,em,LA,Nx,SA,OA,Px,CA,zA,fl,VA,De,tm,UA,Ax,MA,RA,Fx,BA,HA,Lx,GA,WA,ul,YA,ke,sm,JA,am,KA,Sx,ZA,XA,QA,Be,eF,Ox,tF,sF,Cx,aF,nF,zx,rF,oF,Vx,lF,iF,pF,Ux,cF,dF,gl,mF,ut,nm,hF,rm,fF,Mx,uF,gF,_F,rg,bF,Rx,$F,xF,_l,vF,bl,om,yF,Nn,jF,Bx,wF,DF,Hx,kF,EF,qF,Ee,lm,IF,Bt,TF,Gx,NF,PF,Wx,AF,FF,Yx,LF,SF,OF,im,CF,og,zF,VF,UF,Pn,MF,lg,RF,BF,Jx,HF,GF,WF,$l,YF,qe,pm,JF,An,KF,Kx,ZF,XF,Zx,QF,eL,tL,Fn,sL,ig,aL,nL,pg,rL,oL,lL,Ln,iL,Xx,pL,cL,Qx,dL,mL,hL,xl,fL,la,cm,uL,ev,gL,_L,vl,bL,gt,dm,$L,tv,xL,vL,Ht,yL,cg,jL,wL,sv,DL,kL,av,EL,qL,IL,yl,TL,ia,mm,NL,nv,PL,AL,jl,FL,Ie,hm,LL,rv,SL,OL,ov,CL,zL,Sn,VL,dg,UL,ML,lv,RL,BL,HL,wl,GL,Te,fm,WL,iv,YL,JL,On,KL,mg,ZL,XL,pv,QL,eS,tS,um,cv,sS,aS,dv,nS,rS,Dl,oS,pa,gm,lS,mv,iS,pS,kl,cS,ca,_m,dS,bm,mS,hv,hS,fS,uS,El,gS,Ne,$m,_S,Cn,bS,fv,$S,xS,uv,vS,yS,jS,gv,wS,DS,Gt,kS,hg,ES,qS,fg,IS,TS,_v,NS,PS,AS,ql,FS,oe,xm,LS,zn,SS,ug,OS,CS,bv,zS,VS,US,Vn,MS,gg,RS,BS,_g,HS,GS,WS,vm,YS,$v,JS,KS,ZS,Il,XS,Tl,QS,da,ym,eO,Wt,tO,xv,sO,aO,bg,nO,rO,vv,oO,lO,iO,Nl,pO,ma,jm,cO,yv,dO,mO,Pl,hO,ha,wm,fO,jv,uO,gO,Al,_O,fa,Dm,bO,wv,$O,xO,Fl,vO,ua,km,yO,Dv,jO,wO,Ll,DO,ga,Em,kO,Un,EO,$g,qO,IO,xg,TO,NO,PO,Mn,AO,kv,FO,LO,Ev,SO,OO,L7,vg,S7,Rn,Sl,qv,qm,CO,Iv,zO,O7,Ol,VO,yg,UO,MO,C7,L,Im,RO,Tv,BO,HO,_a,Tm,GO,Nv,WO,YO,Cl,JO,ba,Nm,KO,Pv,ZO,XO,zl,QO,$a,Pm,eC,Av,tC,sC,Vl,aC,jg,Am,nC,Pe,Fm,rC,Fv,oC,lC,Lm,iC,Lv,pC,cC,dC,Bn,Sv,mC,hC,Ov,fC,uC,ue,gC,Cv,_C,bC,zv,$C,xC,Vv,vC,yC,Uv,jC,wC,Mv,DC,kC,EC,Ul,qC,xa,Sm,IC,Rv,TC,NC,Ml,PC,va,Om,AC,Bv,FC,LC,Rl,SC,le,Cm,OC,Hv,CC,zC,Gv,VC,UC,zm,MC,Wv,RC,BC,HC,Hn,GC,wg,WC,YC,Dg,JC,KC,ZC,Bl,XC,ya,Vm,QC,Um,ez,Yv,tz,sz,az,Hl,nz,ja,Mm,rz,Rm,oz,Jv,lz,iz,pz,Gl,cz,Wl,Bm,dz,kg,Eg,mz,hz,fz,Yl,Hm,uz,qg,Ig,gz,_z,bz,Tg,Gm,$z,Ng,Wm,xz,Pg,Ym,vz,Ag,Jm,yz,Fg,Km,jz,Lg,Zm,wz,Sg,Xm,Dz,Og,Qm,kz,Cg,eh,Ez,zg,th,qz,Vg,sh,Iz,Ug,ah,Tz,Mg,nh,z7,Gn,Jl,Kv,rh,Nz,Zv,Pz,V7,Kl,Az,Xv,Fz,Lz,U7,U,oh,Sz,Ae,lh,Oz,Qv,Cz,zz,ih,Vz,ey,Uz,Mz,Rz,Wn,ty,Bz,Hz,sy,Gz,Wz,ge,Yz,ay,Jz,Kz,ny,Zz,Xz,ry,Qz,eV,oy,tV,sV,ly,aV,nV,rV,Zl,oV,wa,ph,lV,iy,iV,pV,Xl,cV,ie,ch,dV,py,mV,hV,cy,fV,uV,dh,gV,dy,_V,bV,$V,Yn,xV,Rg,vV,yV,Bg,jV,wV,DV,Ql,kV,Da,mh,EV,my,qV,IV,ei,TV,ka,hh,NV,hy,PV,AV,ti,FV,Ea,fh,LV,fy,SV,OV,si,CV,qa,uh,zV,uy,VV,UV,ai,MV,Ia,gh,RV,gy,BV,HV,ni,GV,Ta,_h,WV,_y,YV,JV,ri,M7,Jn,oi,by,bh,KV,$y,ZV,R7,O,$h,XV,xy,QV,eU,xh,tU,vy,sU,aU,nU,Hg,yy,rU,oU,lU,J,jy,Na,iU,Gg,pU,cU,wy,dU,mU,Dy,hU,fU,ky,vh,uU,Wg,gU,_U,bU,Ey,yh,$U,qy,xU,vU,yU,jh,He,jU,Iy,wU,DU,Yg,kU,EU,Ty,qU,IU,Jg,TU,NU,PU,li,AU,Ny,Ge,FU,Kg,LU,SU,Zg,OU,CU,Xg,zU,VU,Qg,UU,MU,RU,Py,wh,BU,e_,HU,GU,WU,Ay,Yt,YU,t_,JU,KU,Fy,ZU,XU,Ly,QU,eM,tM,Sy,ii,s_,sM,aM,a_,nM,rM,oM,Pa,Dh,lM,Oy,iM,pM,pi,cM,ci,kh,dM,Cy,mM,hM,di,Eh,fM,zy,uM,gM,mi,qh,_M,Vy,bM,$M,hi,Ih,xM,Uy,vM,yM,fi,Th,jM,My,wM,DM,_t,Nh,kM,Ry,EM,qM,By,IM,TM,ui,NM,gi,Ph,PM,Hy,AM,FM,Fe,Ah,LM,Gy,SM,OM,Wy,CM,zM,Jt,VM,n_,UM,MM,r_,RM,BM,o_,HM,GM,WM,_i,YM,bt,Fh,JM,Yy,KM,ZM,Jy,XM,QM,bi,B7,Kt,Lh,eR,Ky,tR,sR,$i,H7,B,Sh,aR,Zy,nR,rR,Oh,oR,Xy,lR,iR,pR,Kn,l_,Qy,cR,dR,mR,i_,ej,hR,fR,uR,p_,tj,gR,_R,bR,sj,$R,xR,xi,vR,Aa,Ch,yR,aj,jR,wR,zh,nj,DR,kR,rj,ER,qR,$t,Vh,IR,oj,TR,NR,lj,PR,AR,vi,FR,Fa,Uh,LR,ij,SR,OR,yi,G7,We,Mh,CR,pj,zR,VR,cj,UR,MR,ji,W7,te,Rh,RR,c_,dj,BR,HR,GR,mj,WR,YR,Bh,JR,hj,KR,ZR,XR,wi,QR,Di,Hh,eB,fj,tB,Y7,se,Gh,sB,d_,uj,aB,nB,rB,gj,oB,lB,_j,iB,pB,ki,cB,Ei,Wh,dB,bj,mB,J7,Zt,Yh,hB,$j,fB,uB,qi,K7,Xt,Jh,gB,xj,_B,bB,Ii,Z7,Qt,Kh,$B,vj,xB,vB,Ti,X7,es,Zh,yB,yj,jB,wB,Ni,Q7,M,Xh,DB,jj,kB,EB,wj,qB,IB,Zn,Dj,Qh,TB,kj,NB,PB,AB,Xn,ef,FB,Ej,LB,SB,OB,tf,qj,CB,zB,Ij,VB,UB,Tj,MB,RB,Qn,sf,BB,Nj,HB,GB,WB,er,Pj,YB,JB,Aj,KB,ZB,Fj,XB,QB,Lj,eH,tH,Pi,sH,La,af,aH,Sj,nH,rH,ts,Oj,oH,lH,Cj,iH,pH,zj,cH,dH,Vj,mH,hH,Ai,nf,fH,Uj,uH,gH,Fi,rf,_H,Mj,bH,$H,Li,of,xH,Rj,vH,yH,Si,lf,jH,Bj,wH,e4,R,pf,DH,Hj,kH,EH,Gj,qH,IH,ss,Wj,cf,TH,Yj,NH,PH,AH,tr,df,FH,Jj,LH,SH,OH,mf,Kj,CH,zH,Zj,VH,UH,Xj,MH,RH,Qj,hf,BH,e0,HH,GH,WH,t0,ff,YH,s0,JH,KH,ZH,Oi,XH,Sa,uf,QH,a0,eG,tG,Ye,n0,sG,aG,r0,nG,rG,o0,oG,lG,l0,iG,pG,i0,cG,dG,Ci,gf,mG,p0,hG,fG,zi,_f,uG,c0,gG,_G,Vi,bf,bG,d0,$G,xG,Ui,$f,vG,m0,yG,t4,sr,Mi,h0,xf,jG,f0,wG,s4,ae,vf,DG,u0,kG,EG,m_,g0,qG,IG,TG,_0,NG,PG,Oa,yf,AG,jf,FG,b0,LG,SG,OG,Ri,CG,Ca,wf,zG,as,VG,$0,UG,MG,x0,RG,BG,v0,HG,GG,WG,Bi,a4,ar,Hi,y0,Df,YG,j0,JG,n4,za,KG,w0,ZG,XG,h_,QG,eW,r4,K,kf,tW,D0,sW,aW,Gi,nW,Va,Ef,rW,k0,oW,lW,Wi,iW,Ua,qf,pW,E0,cW,dW,Yi,mW,xt,If,hW,q0,fW,uW,I0,gW,_W,Ji,bW,Ki,Tf,$W,T0,xW,o4,nr,Zi,N0,Nf,vW,P0,yW,l4,C,Pf,jW,Xi,A0,wW,DW,Af,F0,kW,EW,qW,ns,IW,L0,TW,NW,S0,PW,AW,O0,FW,LW,SW,C0,OW,CW,z0,zW,VW,Qi,UW,rr,MW,V0,RW,BW,U0,HW,GW,WW,ep,YW,rs,JW,M0,KW,ZW,R0,XW,QW,B0,eY,tY,sY,tp,aY,or,nY,H0,rY,oY,f_,lY,iY,pY,sp,cY,lr,dY,G0,mY,hY,u_,fY,uY,gY,ap,i4,ir,Ff,_Y,pr,bY,W0,$Y,xY,Y0,vY,yY,p4,cr,Lf,jY,J0,wY,c4,dr,np,K0,Sf,DY,Z0,kY,d4,mr,Of,EY,X0,qY,m4;return t=new fs({}),gs=new fs({}),Cp=new E({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:'<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.',name:"task_templates"},{anchor:"datasets.DatasetInfo.*config_kwargs",description:'*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.',name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/info.py#L87"}}),zp=new E({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/info.py#L241"}}),Lr=new T({props:{anchor:"datasets.DatasetInfo.from_directory.example",$$slots:{default:[Dae]},$$scope:{ctx:k}}}),Up=new E({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""},{name:"pretty_print",val:" = False"}],parametersDescription:[{anchor:"datasets.DatasetInfo.write_to_directory.dataset_info_dir",description:"<strong>dataset_info_dir</strong> (str) &#x2014; Destination directory.",name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.write_to_directory.pretty_print",description:"<strong>pretty_print</strong> (bool, default <code>False</code>) &#x2014; If True, the JSON will be pretty-printed with the indent level of 4.",name:"pretty_print"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/info.py#L182"}}),Sr=new T({props:{anchor:"datasets.DatasetInfo.write_to_directory.example",$$slots:{default:[kae]},$$scope:{ctx:k}}}),Mp=new fs({}),Rp=new E({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L650"}}),Bp=new E({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L4364",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),zr=new T({props:{anchor:"datasets.Dataset.add_column.example",$$slots:{default:[Eae]},$$scope:{ctx:k}}}),Hp=new E({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L4605",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Vr=new T({props:{anchor:"datasets.Dataset.add_item.example",$$slots:{default:[qae]},$$scope:{ctx:k}}}),Gp=new E({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L716",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Wp=new E({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L751",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Yp=new E({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L779",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Rr=new T({props:{anchor:"datasets.Dataset.from_pandas.example",$$slots:{default:[Iae]},$$scope:{ctx:k}}}),Zp=new E({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L836",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Xp=new E({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1235"}}),Hr=new T({props:{anchor:"datasets.Dataset.data.example",$$slots:{default:[Tae]},$$scope:{ctx:k}}}),Qp=new E({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1255"}}),Gr=new T({props:{anchor:"datasets.Dataset.cache_files.example",$$slots:{default:[Nae]},$$scope:{ctx:k}}}),ec=new E({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1273"}}),Wr=new T({props:{anchor:"datasets.Dataset.num_columns.example",$$slots:{default:[Pae]},$$scope:{ctx:k}}}),tc=new E({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1288"}}),Jr=new T({props:{anchor:"datasets.Dataset.num_rows.example",$$slots:{default:[Aae]},$$scope:{ctx:k}}}),ac=new E({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1305"}}),Kr=new T({props:{anchor:"datasets.Dataset.column_names.example",$$slots:{default:[Fae]},$$scope:{ctx:k}}}),nc=new E({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1320"}}),Zr=new T({props:{anchor:"datasets.Dataset.shape.example",$$slots:{default:[Lae]},$$scope:{ctx:k}}}),rc=new E({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names</a>).',name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1337",returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),Xr=new T({props:{anchor:"datasets.Dataset.unique.example",$$slots:{default:[Sae]},$$scope:{ctx:k}}}),oc=new E({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"max_depth",val:" = 16"}],parametersDescription:[{anchor:"datasets.Dataset.flatten.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1441",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Qr=new T({props:{anchor:"datasets.Dataset.flatten.example",$$slots:{default:[Oae]},$$scope:{ctx:k}}}),lc=new E({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 10000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 10000"},{name:"num_proc",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1484",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),eo=new T({props:{anchor:"datasets.Dataset.cast.example",$$slots:{default:[Cae]},$$scope:{ctx:k}}}),ic=new E({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"},{anchor:"datasets.Dataset.cast_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1560",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),to=new T({props:{anchor:"datasets.Dataset.cast_column.example",$$slots:{default:[zae]},$$scope:{ctx:k}}}),pc=new E({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1599",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),so=new T({props:{anchor:"datasets.Dataset.remove_columns.example",$$slots:{default:[Vae]},$$scope:{ctx:k}}}),cc=new E({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1648",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ao=new T({props:{anchor:"datasets.Dataset.rename_column.example",$$slots:{default:[Uae]},$$scope:{ctx:k}}}),dc=new E({props:{name:"rename_columns",anchor:"datasets.Dataset.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"},{anchor:"datasets.Dataset.rename_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1712",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),no=new T({props:{anchor:"datasets.Dataset.rename_columns.example",$$slots:{default:[Mae]},$$scope:{ctx:k}}}),mc=new E({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1367"}}),ro=new T({props:{anchor:"datasets.Dataset.class_encode_column.example",$$slots:{default:[Rae]},$$scope:{ctx:k}}}),fc=new E({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1778"}}),oo=new T({props:{anchor:"datasets.Dataset.__len__.example",$$slots:{default:[Bae]},$$scope:{ctx:k}}}),uc=new E({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1807"}}),_c=new E({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.Dataset.formatted_as.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1827"}}),bc=new E({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.Dataset.set_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1855"}}),io=new T({props:{anchor:"datasets.Dataset.set_format.example",$$slots:{default:[Hae]},$$scope:{ctx:k}}}),$c=new E({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1956"}}),po=new T({props:{anchor:"datasets.Dataset.set_transform.example",$$slots:{default:[Gae]},$$scope:{ctx:k}}}),xc=new E({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1927"}}),co=new T({props:{anchor:"datasets.Dataset.reset_format.example",$$slots:{default:[Wae]},$$scope:{ctx:k}}}),yc=new E({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.Dataset.with_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1996"}}),mo=new T({props:{anchor:"datasets.Dataset.with_format.example",$$slots:{default:[Yae]},$$scope:{ctx:k}}}),wc=new E({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L2044"}}),ho=new T({props:{anchor:"datasets.Dataset.with_transform.example",$$slots:{default:[Jae]},$$scope:{ctx:k}}}),Dc=new E({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L2163"}}),kc=new E({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L2169",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),uo=new T({props:{anchor:"datasets.Dataset.cleanup_cache_files.example",$$slots:{default:[Kae]},$$scope:{ctx:k}}}),Ec=new E({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Dict[str, Any], </em>extra_args) -&gt; Dict[str, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Dict[str, List], </em>extra_args) -&gt; Dict[str, List]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L2216"}}),go=new T({props:{anchor:"datasets.Dataset.map.example",$$slots:{default:[Zae]},$$scope:{ctx:k}}}),Ic=new E({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L2824"}}),_o=new T({props:{anchor:"datasets.Dataset.filter.example",$$slots:{default:[Xae]},$$scope:{ctx:k}}}),Tc=new E({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:`<strong>indices</strong> (range, list, iterable, ndarray or Series) &#x2014; Range, list or 1D-array of integer indices for indexing.
If the indices correspond to a contiguous range, the Arrow table is simply sliced.
However passing a list of indices that are not contiguous creates indices mapping, which is much less efficient,
but still faster than recreating an Arrow table made of the requested rows.`,name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L2998"}}),bo=new T({props:{anchor:"datasets.Dataset.select.example",$$slots:{default:[Qae]},$$scope:{ctx:k}}}),Nc=new E({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L3239"}}),$o=new T({props:{anchor:"datasets.Dataset.sort.example",$$slots:{default:[ene]},$$scope:{ctx:k}}}),Pc=new E({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L3333"}}),xo=new T({props:{anchor:"datasets.Dataset.shuffle.example",$$slots:{default:[tne]},$$scope:{ctx:k}}}),Ac=new E({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"stratify_by_column",val:": typing.Optional[str] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.stratify_by_column",description:"<strong>stratify_by_column</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The column name of labels to be used to perform stratified split of data.",name:"stratify_by_column"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L3425"}}),vo=new T({props:{anchor:"datasets.Dataset.train_test_split.example",$$slots:{default:[sne]},$$scope:{ctx:k}}}),Lc=new E({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L3693"}}),yo=new T({props:{anchor:"datasets.Dataset.shard.example",$$slots:{default:[ane]},$$scope:{ctx:k}}}),Oc=new E({props:{name:"to_tf_dataset",anchor:"datasets.Dataset.to_tf_dataset",parameters:[{name:"batch_size",val:": int"},{name:"columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"shuffle",val:": bool = False"},{name:"collate_fn",val:": typing.Optional[typing.Callable] = None"},{name:"drop_remainder",val:": bool = False"},{name:"collate_fn_args",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"prefetch",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.to_tf_dataset.batch_size",description:"<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.",name:"batch_size"},{anchor:"datasets.Dataset.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>, optional) &#x2014; Dataset column(s) to load in the tf.data.Dataset. Column
names that are created by the <em>collate_fn</em> and that do not exist in the original dataset can be used.`,name:"columns"},{anchor:"datasets.Dataset.to_tf_dataset.shuffle(bool,",description:`<strong>shuffle(<code>bool</code>,</strong> default to <em>False</em>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"shuffle(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>False</code>) &#x2014; Drop the last incomplete batch when loading. Ensures
that all batches yielded by the dataset will have the same length on the batch dimension.`,name:"drop_remainder(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn(Callable,",description:`<strong>collate_fn(<code>Callable</code>,</strong> optional) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"collate_fn(Callable,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.Dataset.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case
passing the labels here is optional, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.Dataset.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L320",returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),jo=new T({props:{anchor:"datasets.Dataset.to_tf_dataset.example",$$slots:{default:[nne]},$$scope:{ctx:k}}}),Cc=new E({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '500MB'"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;5MB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L4242"}}),wo=new T({props:{anchor:"datasets.Dataset.push_to_hub.example",$$slots:{default:[rne]},$$scope:{ctx:k}}}),zc=new E({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1046"}}),Do=new T({props:{anchor:"datasets.Dataset.save_to_disk.example",$$slots:{default:[one]},$$scope:{ctx:k}}}),ko=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-2",$$slots:{default:[lne]},$$scope:{ctx:k}}}),Eo=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-3",$$slots:{default:[ine]},$$scope:{ctx:k}}}),Uc=new E({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L1168",returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),qo=new T({props:{anchor:"datasets.Dataset.load_from_disk.example",$$slots:{default:[pne]},$$scope:{ctx:k}}}),Mc=new E({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L2929"}}),Rc=new E({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_csv.*to_csv_kwargs",description:"*<strong>*to_csv_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>",name:"*to_csv_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L3849",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),To=new T({props:{anchor:"datasets.Dataset.to_csv.example",$$slots:{default:[cne]},$$scope:{ctx:k}}}),Bc=new E({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L3962",returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),No=new T({props:{anchor:"datasets.Dataset.to_pandas.example",$$slots:{default:[dne]},$$scope:{ctx:k}}}),Gc=new E({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L3882",returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),Po=new T({props:{anchor:"datasets.Dataset.to_dict.example",$$slots:{default:[mne]},$$scope:{ctx:k}}}),Wc=new E({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code></li>
</ul>`,name:"lines"},{anchor:"datasets.Dataset.to_json.*to_json_kwargs",description:'*<strong>*to_json_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.',name:"*to_json_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L3917",returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),Ao=new T({props:{anchor:"datasets.Dataset.to_json.example",$$slots:{default:[hne]},$$scope:{ctx:k}}}),Yc=new E({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_parquet.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_parquet.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_parquet.*parquet_writer_kwargs",description:"*<strong>*parquet_writer_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to PyArrow&#x2019;s <code>pyarrow.parquet.ParquetWriter</code>",name:"*parquet_writer_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L3999",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Fo=new T({props:{anchor:"datasets.Dataset.to_parquet.example",$$slots:{default:[fne]},$$scope:{ctx:k}}}),Jc=new E({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"batch_size",val:": int = 1000"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.batch_size",description:`<strong>batch_size</strong> (Optional <code>int</code>) &#x2014; Size of the batch to use while adding vectors to the FaissIndex. Default value is 1000.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"batch_size"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L4402"}}),Lo=new T({props:{anchor:"datasets.Dataset.add_faiss_index.example",$$slots:{default:[une]},$$scope:{ctx:k}}}),Zc=new E({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"batch_size",val:": int = 1000"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.batch_size",description:`<strong>batch_size</strong> (Optional <code>int</code>) &#x2014; Size of the batch to use while adding vectors to the FaissIndex. Default value is 1000.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"batch_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L4479"}}),Qc=new E({props:{name:"save_faiss_index",anchor:"datasets.Dataset.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],parametersDescription:[{anchor:"datasets.Dataset.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/search.py#L523"}}),ed=new E({props:{name:"load_faiss_index",anchor:"datasets.Dataset.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, typing.List[int], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.Dataset.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.Dataset.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/search.py#L536"}}),sd=new E({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.search">Dataset.search()</a>.
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.
Default config is:`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L4535"}}),Oo=new T({props:{anchor:"datasets.Dataset.add_elasticsearch_index.example",$$slots:{default:[gne]},$$scope:{ctx:k}}}),ad=new E({props:{name:"load_elasticsearch_index",anchor:"datasets.Dataset.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/search.py#L614"}}),Co=new T({props:{anchor:"datasets.Dataset.load_elasticsearch_index.example",$$slots:{default:[_ne]},$$scope:{ctx:k}}}),nd=new E({props:{name:"list_indexes",anchor:"datasets.Dataset.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/search.py#L426"}}),rd=new E({props:{name:"get_index",anchor:"datasets.Dataset.get_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/search.py#L430",returnType:`
<p><code>BaseIndex</code></p>
`}}),od=new E({props:{name:"drop_index",anchor:"datasets.Dataset.drop_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/search.py#L658"}}),ld=new E({props:{name:"search",anchor:"datasets.Dataset.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/search.py#L666",returnDescription:`
<p>The retrieval scores of the retrieved examples.
indices (<code>List[List[int]]</code>): The indices of the retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[List[float]</code>)</p>
`}}),id=new E({props:{name:"search_batch",anchor:"datasets.Dataset.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/search.py#L681",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_indices (<code>List[List[int]]</code>): The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<code>List[List[float]</code>)</p>
`}}),pd=new E({props:{name:"get_nearest_examples",anchor:"datasets.Dataset.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/search.py#L696",returnDescription:`
<p>The retrieval scores of the retrieved examples.
examples (<code>dict</code>): The retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[float]</code>)</p>
`}}),cd=new E({props:{name:"get_nearest_examples_batch",anchor:"datasets.Dataset.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/search.py#L715",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_examples (<em>List[dict]</em>): The retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<em>List[List[float]</em>)</p>
`}}),dd=new E({props:{name:"info",anchor:"datasets.Dataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L150"}}),md=new E({props:{name:"split",anchor:"datasets.Dataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L155"}}),hd=new E({props:{name:"builder_name",anchor:"datasets.Dataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L160"}}),fd=new E({props:{name:"citation",anchor:"datasets.Dataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L164"}}),ud=new E({props:{name:"config_name",anchor:"datasets.Dataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L168"}}),gd=new E({props:{name:"dataset_size",anchor:"datasets.Dataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L172"}}),_d=new E({props:{name:"description",anchor:"datasets.Dataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L176"}}),bd=new E({props:{name:"download_checksums",anchor:"datasets.Dataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L180"}}),$d=new E({props:{name:"download_size",anchor:"datasets.Dataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L184"}}),xd=new E({props:{name:"features",anchor:"datasets.Dataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L188"}}),vd=new E({props:{name:"homepage",anchor:"datasets.Dataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L192"}}),yd=new E({props:{name:"license",anchor:"datasets.Dataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L196"}}),jd=new E({props:{name:"size_in_bytes",anchor:"datasets.Dataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L200"}}),wd=new E({props:{name:"supervised_keys",anchor:"datasets.Dataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L204"}}),Dd=new E({props:{name:"version",anchor:"datasets.Dataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L212"}}),kd=new E({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_csv.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L875",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Yo=new T({props:{anchor:"datasets.Dataset.from_csv.example",$$slots:{default:[bne]},$$scope:{ctx:k}}}),Ed=new E({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:"<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.",name:"field"},{anchor:"datasets.Dataset.from_json.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L910",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Jo=new T({props:{anchor:"datasets.Dataset.from_json.example",$$slots:{default:[$ne]},$$scope:{ctx:k}}}),qd=new E({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.`,name:"columns"},{anchor:"datasets.Dataset.from_parquet.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L953",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ko=new T({props:{anchor:"datasets.Dataset.from_parquet.example",$$slots:{default:[xne]},$$scope:{ctx:k}}}),Id=new E({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_text.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L998",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Zo=new T({props:{anchor:"datasets.Dataset.from_text.example",$$slots:{default:[vne]},$$scope:{ctx:k}}}),Td=new E({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L2089"}}),Nd=new E({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L4656"}}),Xo=new T({props:{anchor:"datasets.Dataset.align_labels_with_mapping.example",$$slots:{default:[yne]},$$scope:{ctx:k}}}),Ad=new E({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/combine.py#L136"}}),Qo=new T({props:{anchor:"datasets.concatenate_datasets.example",$$slots:{default:[jne]},$$scope:{ctx:k}}}),Fd=new E({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"stopping_strategy",val:": typing.Optional[str] = 'first_exhausted'"}],parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructued by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:"<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.",name:"seed"},{anchor:"datasets.interleave_datasets.info",description:`<strong>info</strong> ([<em>DatasetInfo</em>], <em>optional</em>) &#x2014; Dataset information, like description, citation, etc.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"info"},{anchor:"datasets.interleave_datasets.split",description:`<strong>split</strong> ([<em>NamedSplit</em>], <em>optional</em>) &#x2014; Name of the dataset split.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"split"},{anchor:"datasets.interleave_datasets.stopping_strategy",description:`<strong>stopping_strategy</strong> (Optional <code>str</code>, defaults to <em>first_exhausted</em>) &#x2014;
Two strategies are proposed right now for <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset">Dataset</a> objects.
For <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDataset">IterableDataset</a> objects, only <em>first_exhausted</em> is proposed right now.
By default, <em>first_exhausted</em> is an undersampling strategy, i.e the dataset construction is stopped as soon as one dataset has ran out of samples.
If the strategy is <em>all_exhausted</em>,  we use an oversampling strategy, i.e the dataset construction is stopped as soon as every samples of every dataset has been added at least once.
Note that if the strategy is <em>all_exhausted</em>, the interleaved dataset size can get enormous:<ul>
<li>with no probabilities, the resulting dataset will have max_length_datasets*nb_dataset samples.</li>
<li>with given probabilities, the resulting dataset will have more samples if some datasets have really low probability of visiting.</li>
</ul>`,name:"stopping_strategy"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/combine.py#L16",returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),el=new T({props:{anchor:"datasets.interleave_datasets.example",$$slots:{default:[wne]},$$scope:{ctx:k}}}),Ld=new E({props:{name:"datasets.enable_caching",anchor:"datasets.enable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/fingerprint.py#L96"}}),Od=new E({props:{name:"datasets.disable_caching",anchor:"datasets.disable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/fingerprint.py#L117"}}),zd=new E({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/fingerprint.py#L162"}}),Ud=new fs({}),Md=new E({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L32"}}),Rd=new E({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L62"}}),al=new T({props:{anchor:"datasets.DatasetDict.data.example",$$slots:{default:[Dne]},$$scope:{ctx:k}}}),Bd=new E({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L77"}}),nl=new T({props:{anchor:"datasets.DatasetDict.cache_files.example",$$slots:{default:[kne]},$$scope:{ctx:k}}}),Hd=new E({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L95"}}),rl=new T({props:{anchor:"datasets.DatasetDict.num_columns.example",$$slots:{default:[Ene]},$$scope:{ctx:k}}}),Gd=new E({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L111"}}),ll=new T({props:{anchor:"datasets.DatasetDict.num_rows.example",$$slots:{default:[qne]},$$scope:{ctx:k}}}),Yd=new E({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L127"}}),il=new T({props:{anchor:"datasets.DatasetDict.column_names.example",$$slots:{default:[Ine]},$$scope:{ctx:k}}}),Jd=new E({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L145"}}),pl=new T({props:{anchor:"datasets.DatasetDict.shape.example",$$slots:{default:[Tne]},$$scope:{ctx:k}}}),Kd=new E({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names</a>)`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L193",returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),cl=new T({props:{anchor:"datasets.DatasetDict.unique.example",$$slots:{default:[Nne]},$$scope:{ctx:k}}}),Zd=new E({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L217",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),dl=new T({props:{anchor:"datasets.DatasetDict.cleanup_cache_files.example",$$slots:{default:[Pne]},$$scope:{ctx:k}}}),Xd=new E({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], indices: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L682"}}),ml=new T({props:{anchor:"datasets.DatasetDict.map.example",$$slots:{default:[Ane]},$$scope:{ctx:k}}}),Qd=new E({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L794"}}),hl=new T({props:{anchor:"datasets.DatasetDict.filter.example",$$slots:{default:[Fne]},$$scope:{ctx:k}}}),em=new E({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L884"}}),fl=new T({props:{anchor:"datasets.DatasetDict.sort.example",$$slots:{default:[Lne]},$$scope:{ctx:k}}}),tm=new E({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (a <em>ValueError</em> is raised if both are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L952"}}),ul=new T({props:{anchor:"datasets.DatasetDict.shuffle.example",$$slots:{default:[Sne]},$$scope:{ctx:k}}}),sm=new E({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.DatasetDict.set_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L484"}}),gl=new T({props:{anchor:"datasets.DatasetDict.set_format.example",$$slots:{default:[One]},$$scope:{ctx:k}}}),nm=new E({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L526"}}),_l=new T({props:{anchor:"datasets.DatasetDict.reset_format.example",$$slots:{default:[Cne]},$$scope:{ctx:k}}}),om=new E({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.DatasetDict.formatted_as.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L451"}}),lm=new E({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.DatasetDict.with_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L582"}}),$l=new T({props:{anchor:"datasets.DatasetDict.with_format.example",$$slots:{default:[zne]},$$scope:{ctx:k}}}),pm=new E({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L631"}}),xl=new T({props:{anchor:"datasets.DatasetDict.with_transform.example",$$slots:{default:[Vne]},$$scope:{ctx:k}}}),cm=new E({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L161"}}),vl=new T({props:{anchor:"datasets.DatasetDict.flatten.example",$$slots:{default:[Une]},$$scope:{ctx:k}}}),dm=new E({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L241"}}),yl=new T({props:{anchor:"datasets.DatasetDict.cast.example",$$slots:{default:[Mne]},$$scope:{ctx:k}}}),mm=new E({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L275",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),jl=new T({props:{anchor:"datasets.DatasetDict.cast_column.example",$$slots:{default:[Rne]},$$scope:{ctx:k}}}),hm=new E({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L302"}}),wl=new T({props:{anchor:"datasets.DatasetDict.remove_columns.example",$$slots:{default:[Bne]},$$scope:{ctx:k}}}),fm=new E({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L340"}}),Dl=new T({props:{anchor:"datasets.DatasetDict.rename_column.example",$$slots:{default:[Hne]},$$scope:{ctx:k}}}),gm=new E({props:{name:"rename_columns",anchor:"datasets.DatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L383",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),kl=new T({props:{anchor:"datasets.DatasetDict.rename_columns.example",$$slots:{default:[Gne]},$$scope:{ctx:k}}}),_m=new E({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L420"}}),El=new T({props:{anchor:"datasets.DatasetDict.class_encode_column.example",$$slots:{default:[Wne]},$$scope:{ctx:k}}}),$m=new E({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '500MB'"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <code>&lt;user&gt;/&lt;dataset_name&gt;</code> or
<code>&lt;org&gt;/&lt;dataset_name&gt;</code>. Also accepts <code>&lt;dataset_name&gt;</code>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;500MB&#x201D;</em> or <em>&#x201C;1GB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1283"}}),ql=new T({props:{anchor:"datasets.DatasetDict.push_to_hub.example",$$slots:{default:[Yne]},$$scope:{ctx:k}}}),xm=new E({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1028"}}),Il=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example",$$slots:{default:[Jne]},$$scope:{ctx:k}}}),Tl=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example-2",$$slots:{default:[Kne]},$$scope:{ctx:k}}}),ym=new E({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1076",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Nl=new T({props:{anchor:"datasets.DatasetDict.load_from_disk.example",$$slots:{default:[Zne]},$$scope:{ctx:k}}}),jm=new E({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_csv.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1123",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Pl=new T({props:{anchor:"datasets.DatasetDict.from_csv.example",$$slots:{default:[Xne]},$$scope:{ctx:k}}}),wm=new E({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_json.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1157",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Al=new T({props:{anchor:"datasets.DatasetDict.from_json.example",$$slots:{default:[Qne]},$$scope:{ctx:k}}}),Dm=new E({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.`,name:"columns"},{anchor:"datasets.DatasetDict.from_parquet.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1191",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Fl=new T({props:{anchor:"datasets.DatasetDict.from_parquet.example",$$slots:{default:[ere]},$$scope:{ctx:k}}}),km=new E({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_text.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1234",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Ll=new T({props:{anchor:"datasets.DatasetDict.from_text.example",$$slots:{default:[tre]},$$scope:{ctx:k}}}),Em=new E({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1268"}}),qm=new fs({}),Im=new E({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/iterable_dataset.py#L664"}}),Tm=new E({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/iterable_dataset.py#L1132",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Cl=new T({props:{anchor:"datasets.IterableDataset.remove_columns.example",$$slots:{default:[sre]},$$scope:{ctx:k}}}),Nm=new E({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/iterable_dataset.py#L1158",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),zl=new T({props:{anchor:"datasets.IterableDataset.cast_column.example",$$slots:{default:[are]},$$scope:{ctx:k}}}),Pm=new E({props:{name:"cast",anchor:"datasets.IterableDataset.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/iterable_dataset.py#L1206",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Vl=new T({props:{anchor:"datasets.IterableDataset.cast.example",$$slots:{default:[nre]},$$scope:{ctx:k}}}),Am=new E({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/iterable_dataset.py#L717"}}),Fm=new E({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/iterable_dataset.py#L752"}}),Ul=new T({props:{anchor:"datasets.IterableDataset.map.example",$$slots:{default:[rre]},$$scope:{ctx:k}}}),Sm=new E({props:{name:"rename_column",anchor:"datasets.IterableDataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/iterable_dataset.py#L1064",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Ml=new T({props:{anchor:"datasets.IterableDataset.rename_column.example",$$slots:{default:[ore]},$$scope:{ctx:k}}}),Om=new E({props:{name:"filter",anchor:"datasets.IterableDataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDataset.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/iterable_dataset.py#L846"}}),Rl=new T({props:{anchor:"datasets.IterableDataset.filter.example",$$slots:{default:[lre]},$$scope:{ctx:k}}}),Cm=new E({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/iterable_dataset.py#L913"}}),Bl=new T({props:{anchor:"datasets.IterableDataset.shuffle.example",$$slots:{default:[ire]},$$scope:{ctx:k}}}),Vm=new E({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/iterable_dataset.py#L979"}}),Hl=new T({props:{anchor:"datasets.IterableDataset.skip.example",$$slots:{default:[pre]},$$scope:{ctx:k}}}),Mm=new E({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/iterable_dataset.py#L1016"}}),Gl=new T({props:{anchor:"datasets.IterableDataset.take.example",$$slots:{default:[cre]},$$scope:{ctx:k}}}),Bm=new E({props:{name:"info",anchor:"datasets.IterableDataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L150"}}),Hm=new E({props:{name:"split",anchor:"datasets.IterableDataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L155"}}),Gm=new E({props:{name:"builder_name",anchor:"datasets.IterableDataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L160"}}),Wm=new E({props:{name:"citation",anchor:"datasets.IterableDataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L164"}}),Ym=new E({props:{name:"config_name",anchor:"datasets.IterableDataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L168"}}),Jm=new E({props:{name:"dataset_size",anchor:"datasets.IterableDataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L172"}}),Km=new E({props:{name:"description",anchor:"datasets.IterableDataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L176"}}),Zm=new E({props:{name:"download_checksums",anchor:"datasets.IterableDataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L180"}}),Xm=new E({props:{name:"download_size",anchor:"datasets.IterableDataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L184"}}),Qm=new E({props:{name:"features",anchor:"datasets.IterableDataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L188"}}),eh=new E({props:{name:"homepage",anchor:"datasets.IterableDataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L192"}}),th=new E({props:{name:"license",anchor:"datasets.IterableDataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L196"}}),sh=new E({props:{name:"size_in_bytes",anchor:"datasets.IterableDataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L200"}}),ah=new E({props:{name:"supervised_keys",anchor:"datasets.IterableDataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L204"}}),nh=new E({props:{name:"version",anchor:"datasets.IterableDataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/arrow_dataset.py#L212"}}),rh=new fs({}),oh=new E({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1384"}}),lh=new E({props:{name:"map",anchor:"datasets.IterableDatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDatasetDict.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1414"}}),Zl=new T({props:{anchor:"datasets.IterableDatasetDict.map.example",$$slots:{default:[dre]},$$scope:{ctx:k}}}),ph=new E({props:{name:"filter",anchor:"datasets.IterableDatasetDict.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDatasetDict.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1492"}}),Xl=new T({props:{anchor:"datasets.IterableDatasetDict.filter.example",$$slots:{default:[mre]},$$scope:{ctx:k}}}),ch=new E({props:{name:"shuffle",anchor:"datasets.IterableDatasetDict.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDatasetDict.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDatasetDict.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1546"}}),Ql=new T({props:{anchor:"datasets.IterableDatasetDict.shuffle.example",$$slots:{default:[hre]},$$scope:{ctx:k}}}),mh=new E({props:{name:"with_format",anchor:"datasets.IterableDatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional, default None) &#x2014; if set to &#x201C;torch&#x201D;, the returned dataset
will be a subclass of torch.utils.data.IterableDataset to be used in a DataLoader`,name:"type"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1385"}}),ei=new T({props:{anchor:"datasets.IterableDatasetDict.with_format.example",$$slots:{default:[fre]},$$scope:{ctx:k}}}),hh=new E({props:{name:"cast",anchor:"datasets.IterableDatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1713",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ti=new T({props:{anchor:"datasets.IterableDatasetDict.cast.example",$$slots:{default:[ure]},$$scope:{ctx:k}}}),fh=new E({props:{name:"cast_column",anchor:"datasets.IterableDatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1684",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),si=new T({props:{anchor:"datasets.IterableDatasetDict.cast_column.example",$$slots:{default:[gre]},$$scope:{ctx:k}}}),uh=new E({props:{name:"remove_columns",anchor:"datasets.IterableDatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1659",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ai=new T({props:{anchor:"datasets.IterableDatasetDict.remove_columns.example",$$slots:{default:[_re]},$$scope:{ctx:k}}}),gh=new E({props:{name:"rename_column",anchor:"datasets.IterableDatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1601",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ni=new T({props:{anchor:"datasets.IterableDatasetDict.rename_column.example",$$slots:{default:[bre]},$$scope:{ctx:k}}}),_h=new E({props:{name:"rename_columns",anchor:"datasets.IterableDatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/dataset_dict.py#L1632",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ri=new T({props:{anchor:"datasets.IterableDatasetDict.rename_columns.example",$$slots:{default:[$re]},$$scope:{ctx:k}}}),bh=new fs({}),$h=new E({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1481"}}),li=new jae({props:{$$slots:{default:[xre]},$$scope:{ctx:k}}}),Dh=new E({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1690",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),pi=new T({props:{anchor:"datasets.Features.copy.example",$$slots:{default:[vre]},$$scope:{ctx:k}}}),kh=new E({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1672",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Eh=new E({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1656",returnDescription:`
<p><code>list[Any]</code></p>
`}}),qh=new E({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"},{anchor:"datasets.Features.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio or image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1634",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Ih=new E({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1616",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Th=new E({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1603",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Nh=new E({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1771",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),ui=new T({props:{anchor:"datasets.Features.flatten.example",$$slots:{default:[yre]},$$scope:{ctx:k}}}),Ph=new E({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1552",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Ah=new E({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1572",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),_i=new T({props:{anchor:"datasets.Features.from_dict.example",$$slots:{default:[jre]},$$scope:{ctx:k}}}),Fh=new E({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1710",returnType:`
<p><a
  href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),bi=new T({props:{anchor:"datasets.Features.reorder_fields_as.example",$$slots:{default:[wre]},$$scope:{ctx:k}}}),Lh=new E({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Sequence.length",description:"<strong>length</strong> (<code>int</code>) &#x2014; Length of the sequence.",name:"length"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1053"}}),$i=new T({props:{anchor:"datasets.Sequence.example",$$slots:{default:[Dre]},$$scope:{ctx:k}}}),Sh=new E({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": int = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L862"}}),xi=new T({props:{anchor:"datasets.ClassLabel.example",$$slots:{default:[kre]},$$scope:{ctx:k}}}),Ch=new E({props:{name:"cast_storage",anchor:"datasets.ClassLabel.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.IntegerArray]"}],parametersDescription:[{anchor:"datasets.ClassLabel.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.IntegerArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L1021",returnDescription:`
<p>Array in the ClassLabel arrow storage type</p>
`,returnType:`
<p>pa.Int64Array</p>
`}}),Vh=new E({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L975"}}),vi=new T({props:{anchor:"datasets.ClassLabel.int2str.example",$$slots:{default:[Ere]},$$scope:{ctx:k}}}),Uh=new E({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L930"}}),yi=new T({props:{anchor:"datasets.ClassLabel.str2int.example",$$slots:{default:[qre]},$$scope:{ctx:k}}}),Mh=new E({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L418"}}),ji=new T({props:{anchor:"datasets.Value.example",$$slots:{default:[Ire]},$$scope:{ctx:k}}}),Rh=new E({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/translation.py#L12"}}),wi=new T({props:{anchor:"datasets.Translation.example",$$slots:{default:[Tre]},$$scope:{ctx:k}}}),Hh=new E({props:{name:"flatten",anchor:"datasets.Translation.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/translation.py#L46"}}),Gh=new E({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/translation.py#L54"}}),ki=new T({props:{anchor:"datasets.TranslationVariableLanguages.example",$$slots:{default:[Nre]},$$scope:{ctx:k}}}),Wh=new E({props:{name:"flatten",anchor:"datasets.TranslationVariableLanguages.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/translation.py#L123"}}),Yh=new E({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array2D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array2D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L503"}}),qi=new T({props:{anchor:"datasets.Array2D.example",$$slots:{default:[Pre]},$$scope:{ctx:k}}}),Jh=new E({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array3D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array3D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L526"}}),Ii=new T({props:{anchor:"datasets.Array3D.example",$$slots:{default:[Are]},$$scope:{ctx:k}}}),Kh=new E({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array4D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array4D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L549"}}),Ti=new T({props:{anchor:"datasets.Array4D.example",$$slots:{default:[Fre]},$$scope:{ctx:k}}}),Zh=new E({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array5D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array5D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/features.py#L572"}}),Ni=new T({props:{anchor:"datasets.Array5D.example",$$slots:{default:[Lre]},$$scope:{ctx:k}}}),Xh=new E({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/audio.py#L21"}}),Pi=new T({props:{anchor:"datasets.Audio.example",$$slots:{default:[Sre]},$$scope:{ctx:k}}}),af=new E({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/audio.py#L170",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),nf=new E({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"},{anchor:"datasets.Audio.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/audio.py#L120",returnDescription:`
<p>dict</p>
`}}),rf=new E({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/audio.py#L203",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),of=new E({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/audio.py#L74",returnType:`
<p><code>dict</code></p>
`}}),lf=new E({props:{name:"flatten",anchor:"datasets.Audio.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/audio.py#L159"}}),pf=new E({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/image.py#L26"}}),Oi=new T({props:{anchor:"datasets.Image.example",$$slots:{default:[Ore]},$$scope:{ctx:k}}}),uf=new E({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/image.py#L166",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),gf=new E({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"},{anchor:"datasets.Image.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/image.py#L104",returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),_f=new E({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/image.py#L215",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),bf=new E({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/image.py#L70",returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),$f=new E({props:{name:"flatten",anchor:"datasets.Image.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/features/image.py#L153"}}),xf=new fs({}),vf=new E({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/info.py#L317"}}),yf=new E({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/info.py#L372"}}),Ri=new T({props:{anchor:"datasets.MetricInfo.from_directory.example",$$slots:{default:[Cre]},$$scope:{ctx:k}}}),wf=new E({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""},{name:"pretty_print",val:" = False"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/info.py#L352"}}),Bi=new T({props:{anchor:"datasets.MetricInfo.write_to_directory.example",$$slots:{default:[zre]},$$scope:{ctx:k}}}),Df=new fs({}),kf=new E({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/metric.py#L146"}}),Gi=new wae({props:{version:"2.5.0",$$slots:{default:[Vre]},$$scope:{ctx:k}}}),Ef=new E({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/metric.py#L521"}}),Wi=new T({props:{anchor:"datasets.Metric.add.example",$$slots:{default:[Ure]},$$scope:{ctx:k}}}),qf=new E({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/metric.py#L474"}}),Yi=new T({props:{anchor:"datasets.Metric.add_batch.example",$$slots:{default:[Mre]},$$scope:{ctx:k}}}),If=new E({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/metric.py#L403",returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),Ji=new T({props:{anchor:"datasets.Metric.compute.example",$$slots:{default:[Rre]},$$scope:{ctx:k}}}),Tf=new E({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.download.download_manager.DownloadManager] = None"}],parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/metric.py#L604"}}),Nf=new fs({}),Pf=new E({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.filesystems.S3FileSystem.anon",description:`<strong>anon</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to use anonymous connection (public buckets only). If False, uses the key/secret given,
or boto&#x2019;s credential resolver (client_kwargs, environment, variables, config files, EC2 IAM server, in that order).`,name:"anon"},{anchor:"datasets.filesystems.S3FileSystem.key",description:"<strong>key</strong> (<code>str</code>) &#x2014; If not anonymous, use this access key ID, if specified.",name:"key"},{anchor:"datasets.filesystems.S3FileSystem.secret",description:"<strong>secret</strong> (<code>str</code>) &#x2014; If not anonymous, use this secret access key, if specified.",name:"secret"},{anchor:"datasets.filesystems.S3FileSystem.token",description:"<strong>token</strong> (<code>str</code>) &#x2014; If not anonymous, use this security token, if specified.",name:"token"},{anchor:"datasets.filesystems.S3FileSystem.use_ssl",description:`<strong>use_ssl</strong> (<code>bool</code>, default to <code>True</code>) &#x2014; Whether to use SSL in connections to S3; may be faster without, but insecure. If <code>use_ssl</code> is
also set in <code>client_kwargs</code>, the value set in <code>client_kwargs</code> will take priority.`,name:"use_ssl"},{anchor:"datasets.filesystems.S3FileSystem.s3_additional_kwargs",description:`<strong>s3_additional_kwargs</strong> (<code>dict</code>) &#x2014; Parameters that are used when calling S3 API methods. Typically used for things
like ServerSideEncryption.`,name:"s3_additional_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.client_kwargs",description:"<strong>client_kwargs</strong> (<code>dict</code>) &#x2014; Parameters for the botocore client.",name:"client_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.requester_pays",description:"<strong>requester_pays</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether RequesterPays buckets are supported.",name:"requester_pays"},{anchor:"datasets.filesystems.S3FileSystem.default_block_size",description:`<strong>default_block_size</strong> (<code>int</code>) &#x2014; If given, the default block size value used for <code>open()</code>, if no specific value is given at all time.
The built-in default is 5MB.`,name:"default_block_size"},{anchor:"datasets.filesystems.S3FileSystem.default_fill_cache",description:"<strong>default_fill_cache</strong> (<code>bool</code>, default to <code>True</code>) &#x2014; Whether to use cache filling with open by default. Refer to <code>S3File.open</code>.",name:"default_fill_cache"},{anchor:"datasets.filesystems.S3FileSystem.default_cache_type",description:`<strong>default_cache_type</strong> (<code>str</code>, default to <code>bytes</code>) &#x2014; If given, the default cache_type value used for <code>open()</code>. Set to <code>none</code> if no
caching is desired. See fsspec&#x2019;s documentation for other available cache_type values.`,name:"default_cache_type"},{anchor:"datasets.filesystems.S3FileSystem.version_aware",description:`<strong>version_aware</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to support bucket versioning. If enable this will require the user to have
the necessary IAM permissions for dealing with versioned objects.`,name:"version_aware"},{anchor:"datasets.filesystems.S3FileSystem.cache_regions",description:`<strong>cache_regions</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to cache bucket regions. Whenever a new bucket is used, it will
first find out which region it belongs to and then use the client for that region.`,name:"cache_regions"},{anchor:"datasets.filesystems.S3FileSystem.asynchronous",description:"<strong>asynchronous</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether this instance is to be used from inside coroutines.",name:"asynchronous"},{anchor:"datasets.filesystems.S3FileSystem.config_kwargs",description:`<strong>config_kwargs</strong> (<code>dict</code>) &#x2014; Parameters passed to <code>botocore.client.Config</code>.
kwargs &#x2014; Other parameters for core session.`,name:"config_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.session",description:`<strong>session</strong> (<code>aiobotocore.session.AioSession</code>) &#x2014; Session to be used for all connections. This session will be used inplace of creating
a new session inside S3FileSystem. For example: <code>aiobotocore.session.AioSession(profile=&apos;test_user&apos;)</code>.`,name:"session"},{anchor:"datasets.filesystems.S3FileSystem.skip_instance_cache",description:"<strong>skip_instance_cache</strong> (<code>bool</code>) &#x2014; Control reuse of instances. Passed on to <code>fsspec</code>.",name:"skip_instance_cache"},{anchor:"datasets.filesystems.S3FileSystem.use_listings_cache",description:"<strong>use_listings_cache</strong> (<code>bool</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"use_listings_cache"},{anchor:"datasets.filesystems.S3FileSystem.listings_expiry_time",description:"<strong>listings_expiry_time</strong> (<code>int</code> or <code>float</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"listings_expiry_time"},{anchor:"datasets.filesystems.S3FileSystem.max_paths",description:"<strong>max_paths</strong> (<code>int</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"max_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/filesystems/s3filesystem.py#L4"}}),Qi=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example",$$slots:{default:[Bre]},$$scope:{ctx:k}}}),ep=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-2",$$slots:{default:[Hre]},$$scope:{ctx:k}}}),tp=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-3",$$slots:{default:[Gre]},$$scope:{ctx:k}}}),sp=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-4",$$slots:{default:[Wre]},$$scope:{ctx:k}}}),ap=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-5",$$slots:{default:[Yre]},$$scope:{ctx:k}}}),Ff=new E({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/filesystems/__init__.py#L28"}}),Lf=new E({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/filesystems/__init__.py#L40"}}),Sf=new fs({}),Of=new E({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4831/src/datasets/fingerprint.py#L212"}}),{c(){c=r("meta"),g=m(),f=r("h1"),n=r("a"),u=r("span"),_(t.$$.fragment),d=m(),mn=r("span"),us=i("Main classes"),Ar=m(),Oe=r("h2"),be=r("a"),ne=r("span"),_(gs.$$.fragment),su=m(),Fr=r("span"),WD=i("DatasetInfo"),j7=m(),Q=r("div"),_(Cp.$$.fragment),YD=m(),g$=r("p"),JD=i("Information about a dataset."),KD=m(),au=r("p"),_$=r("em"),ZD=i("DatasetInfo"),XD=i(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),QD=m(),b$=r("p"),ek=i("Note: Not all fields are known on construction and may be updated later."),tk=m(),$e=r("div"),_(zp.$$.fragment),sk=m(),Vp=r("p"),ak=i("Create DatasetInfo from the JSON file in "),$$=r("code"),nk=i("dataset_info_dir"),rk=i("."),ok=m(),x$=r("p"),lk=i(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),ik=m(),v$=r("p"),pk=i("This will overwrite all previous metadata."),ck=m(),_(Lr.$$.fragment),dk=m(),_s=r("div"),_(Up.$$.fragment),mk=m(),hn=r("p"),hk=i("Write "),y$=r("em"),fk=i("DatasetInfo"),uk=i(" and license (if present) as JSON files to "),j$=r("em"),gk=i("dataset_info_dir"),_k=i("."),bk=m(),_(Sr.$$.fragment),w7=m(),fn=r("h2"),Or=r("a"),w$=r("span"),_(Mp.$$.fragment),$k=m(),D$=r("span"),xk=i("Dataset"),D7=m(),Cr=r("p"),vk=i("The base class "),nu=r("a"),yk=i("Dataset"),jk=i(" implements a Dataset backed by an Apache Arrow table."),k7=m(),q=r("div"),_(Rp.$$.fragment),wk=m(),k$=r("p"),Dk=i("A Dataset backed by an Arrow table."),kk=m(),tt=r("div"),_(Bp.$$.fragment),Ek=m(),E$=r("p"),qk=i("Add column to Dataset."),Ik=m(),q$=r("p"),I$=r("em"),Tk=i("New in version 1.7."),Nk=m(),_(zr.$$.fragment),Pk=m(),st=r("div"),_(Hp.$$.fragment),Ak=m(),T$=r("p"),Fk=i("Add item to Dataset."),Lk=m(),N$=r("p"),P$=r("em"),Sk=i("New in version 1.7."),Ok=m(),_(Vr.$$.fragment),Ck=m(),Ur=r("div"),_(Gp.$$.fragment),zk=m(),A$=r("p"),Vk=i("Instantiate a Dataset backed by an Arrow table at filename."),Uk=m(),Mr=r("div"),_(Wp.$$.fragment),Mk=m(),F$=r("p"),Rk=i("Instantiate a Dataset backed by an Arrow buffer."),Bk=m(),xe=r("div"),_(Yp.$$.fragment),Hk=m(),At=r("p"),Gk=i("Convert "),L$=r("code"),Wk=i("pandas.DataFrame"),Yk=i(" to a "),S$=r("code"),Jk=i("pyarrow.Table"),Kk=i(" to create a "),ru=r("a"),Zk=i("Dataset"),Xk=i("."),Qk=m(),Jp=r("p"),e3=i(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),O$=r("em"),t3=i("object"),s3=i(", we need to guess the datatype by looking at the Python objects in this Series."),a3=m(),Kp=r("p"),n3=i("Be aware that Series of the "),C$=r("em"),r3=i("object"),o3=i(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),l3=m(),_(Rr.$$.fragment),i3=m(),Br=r("div"),_(Zp.$$.fragment),p3=m(),Ft=r("p"),c3=i("Convert "),z$=r("code"),d3=i("dict"),m3=i(" to a "),V$=r("code"),h3=i("pyarrow.Table"),f3=i(" to create a "),ou=r("a"),u3=i("Dataset"),g3=i("."),_3=m(),bs=r("div"),_(Xp.$$.fragment),b3=m(),U$=r("p"),$3=i("The Apache Arrow table backing the dataset."),x3=m(),_(Hr.$$.fragment),v3=m(),$s=r("div"),_(Qp.$$.fragment),y3=m(),M$=r("p"),j3=i("The cache files containing the Apache Arrow table backing the dataset."),w3=m(),_(Gr.$$.fragment),D3=m(),xs=r("div"),_(ec.$$.fragment),k3=m(),R$=r("p"),E3=i("Number of columns in the dataset."),q3=m(),_(Wr.$$.fragment),I3=m(),vs=r("div"),_(tc.$$.fragment),T3=m(),sc=r("p"),N3=i("Number of rows in the dataset (same as "),Yr=r("a"),P3=i("Dataset."),B$=r("strong"),A3=i("len"),F3=i("()"),L3=i(")."),S3=m(),_(Jr.$$.fragment),O3=m(),ys=r("div"),_(ac.$$.fragment),C3=m(),H$=r("p"),z3=i("Names of the columns in the dataset."),V3=m(),_(Kr.$$.fragment),U3=m(),js=r("div"),_(nc.$$.fragment),M3=m(),G$=r("p"),R3=i("Shape of the dataset (number of columns, number of rows)."),B3=m(),_(Zr.$$.fragment),H3=m(),at=r("div"),_(rc.$$.fragment),G3=m(),W$=r("p"),W3=i("Return a list of the unique elements in a column."),Y3=m(),Y$=r("p"),J3=i("This is implemented in the low-level backend and as such, very fast."),K3=m(),_(Xr.$$.fragment),Z3=m(),ws=r("div"),_(oc.$$.fragment),X3=m(),J$=r("p"),Q3=i(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),e8=m(),_(Qr.$$.fragment),t8=m(),Ds=r("div"),_(lc.$$.fragment),s8=m(),K$=r("p"),a8=i("Cast the dataset to a new set of features."),n8=m(),_(eo.$$.fragment),r8=m(),ks=r("div"),_(ic.$$.fragment),o8=m(),Z$=r("p"),l8=i("Cast column to feature for decoding."),i8=m(),_(to.$$.fragment),p8=m(),nt=r("div"),_(pc.$$.fragment),c8=m(),X$=r("p"),d8=i("Remove one or several column(s) in the dataset and the features associated to them."),m8=m(),un=r("p"),h8=i("You can also remove a column using "),lu=r("a"),f8=i("Dataset.map()"),u8=i(" with "),Q$=r("em"),g8=i("remove_columns"),_8=i(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),b8=m(),_(so.$$.fragment),$8=m(),Es=r("div"),_(cc.$$.fragment),x8=m(),e1=r("p"),v8=i(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),y8=m(),_(ao.$$.fragment),j8=m(),qs=r("div"),_(dc.$$.fragment),w8=m(),t1=r("p"),D8=i(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),k8=m(),_(no.$$.fragment),E8=m(),Is=r("div"),_(mc.$$.fragment),q8=m(),hc=r("p"),I8=i("Casts the given column as :obj:"),s1=r("code"),T8=i("datasets.features.ClassLabel"),N8=i(" and updates the table."),P8=m(),_(ro.$$.fragment),A8=m(),Ts=r("div"),_(fc.$$.fragment),F8=m(),a1=r("p"),L8=i("Number of rows in the dataset."),S8=m(),_(oo.$$.fragment),O8=m(),Ns=r("div"),_(uc.$$.fragment),C8=m(),n1=r("p"),z8=i("Iterate through the examples."),V8=m(),gc=r("p"),U8=i("If a formatting is set with "),iu=r("a"),M8=i("Dataset.set_format()"),R8=i(` rows will be returned with the
selected format.`),B8=m(),lo=r("div"),_(_c.$$.fragment),H8=m(),gn=r("p"),G8=i("To be used in a "),r1=r("code"),W8=i("with"),Y8=i(" statement. Set "),o1=r("code"),J8=i("__getitem__"),K8=i(" return format (type and columns)."),Z8=m(),ve=r("div"),_(bc.$$.fragment),X8=m(),Ce=r("p"),Q8=i("Set "),l1=r("strong"),eE=i("getitem"),tE=i(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),i1=r("code"),sE=i("type"),aE=i(" (for example \u201Cnumpy\u201D) is used to format batches when using "),p1=r("strong"),nE=i("getitem"),rE=i(`.
It\u2019s also possible to use custom transforms for formatting using `),pu=r("a"),oE=i("datasets.Dataset.set_transform()"),lE=i("."),iE=m(),ze=r("p"),pE=i("It is possible to call "),c1=r("code"),cE=i("map"),dE=i(" after calling "),d1=r("code"),mE=i("set_format"),hE=i(". Since "),m1=r("code"),fE=i("map"),uE=i(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),h1=r("code"),gE=i("map"),_E=i(" on a dataset to add a new column, then this column will be formatted:"),bE=m(),f1=r("p"),$E=i("new formatted columns = (all columns - previously unformatted columns)"),xE=m(),_(io.$$.fragment),vE=m(),Ps=r("div"),_($c.$$.fragment),yE=m(),rt=r("p"),jE=i("Set "),u1=r("strong"),wE=i("getitem"),DE=i(" return format using this transform. The transform is applied on-the-fly on batches when "),g1=r("strong"),kE=i("getitem"),EE=i(` is called.
As `),cu=r("a"),qE=i("datasets.Dataset.set_format()"),IE=i(", this can be reset using "),du=r("a"),TE=i("datasets.Dataset.reset_format()"),NE=m(),_(po.$$.fragment),PE=m(),ot=r("div"),_(xc.$$.fragment),AE=m(),vc=r("p"),FE=i("Reset "),_1=r("strong"),LE=i("getitem"),SE=i(" return format to python objects and all columns."),OE=m(),mu=r("p"),CE=i("Same as "),b1=r("code"),zE=i("self.set_format()"),VE=m(),_(co.$$.fragment),UE=m(),ye=r("div"),_(yc.$$.fragment),ME=m(),Lt=r("p"),RE=i("Set "),$1=r("strong"),BE=i("getitem"),HE=i(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),x1=r("code"),GE=i("type"),WE=i(" (for example \u201Cnumpy\u201D) is used to format batches when using "),v1=r("strong"),YE=i("getitem"),JE=i("."),KE=m(),jc=r("p"),ZE=i("It\u2019s also possible to use custom transforms for formatting using "),hu=r("a"),XE=i("datasets.Dataset.with_transform()"),QE=i("."),e5=m(),_n=r("p"),t5=i("Contrary to "),fu=r("a"),s5=i("datasets.Dataset.set_format()"),a5=i(", "),y1=r("code"),n5=i("with_format"),r5=i(" returns a new Dataset object."),o5=m(),_(mo.$$.fragment),l5=m(),je=r("div"),_(wc.$$.fragment),i5=m(),bn=r("p"),p5=i("Set "),j1=r("strong"),c5=i("getitem"),d5=i(" return format using this transform. The transform is applied on-the-fly on batches when "),w1=r("strong"),m5=i("getitem"),h5=i(" is called."),f5=m(),$n=r("p"),u5=i("As "),uu=r("a"),g5=i("datasets.Dataset.set_format()"),_5=i(", this can be reset using "),gu=r("a"),b5=i("datasets.Dataset.reset_format()"),$5=i("."),x5=m(),xn=r("p"),v5=i("Contrary to "),_u=r("a"),y5=i("datasets.Dataset.set_transform()"),j5=i(", "),D1=r("code"),w5=i("with_transform"),D5=i(" returns a new Dataset object."),k5=m(),_(ho.$$.fragment),E5=m(),fo=r("div"),_(Dc.$$.fragment),q5=m(),k1=r("p"),I5=i("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),T5=m(),lt=r("div"),_(kc.$$.fragment),N5=m(),E1=r("p"),P5=i(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),A5=m(),q1=r("p"),F5=i("Be careful when running this command that no other process is currently using other cache files."),L5=m(),_(uo.$$.fragment),S5=m(),we=r("div"),_(Ec.$$.fragment),O5=m(),I1=r("p"),C5=i(`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),z5=m(),qc=r("p"),V5=i("You can specify whether the function should be batched or not with the "),T1=r("code"),U5=i("batched"),M5=i(" parameter:"),R5=m(),vn=r("ul"),N1=r("li"),B5=i(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),H5=m(),P1=r("li"),G5=i(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),W5=m(),de=r("li"),Y5=i("If batched is True and batch_size is "),A1=r("code"),J5=i("n"),K5=i(" > 1, then the function takes a batch of "),F1=r("code"),Z5=i("n"),X5=i(" examples as input and can return a batch with "),L1=r("code"),Q5=i("n"),e6=i(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),S1=r("code"),t6=i("n"),s6=i(` examples.
A batch is a dictionary, e.g. a batch of `),O1=r("code"),a6=i("n"),n6=i(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),r6=m(),_(go.$$.fragment),o6=m(),As=r("div"),_(Ic.$$.fragment),l6=m(),C1=r("p"),i6=i(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),p6=m(),_(_o.$$.fragment),c6=m(),Fs=r("div"),_(Tc.$$.fragment),d6=m(),z1=r("p"),m6=i("Create a new dataset with rows selected following the list/array of indices."),h6=m(),_(bo.$$.fragment),f6=m(),it=r("div"),_(Nc.$$.fragment),u6=m(),V1=r("p"),g6=i("Create a new dataset sorted according to a column."),_6=m(),U1=r("p"),b6=i(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),$6=m(),_($o.$$.fragment),x6=m(),pt=r("div"),_(Pc.$$.fragment),v6=m(),M1=r("p"),y6=i("Create a new Dataset where the rows are shuffled."),j6=m(),R1=r("p"),w6=i(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),D6=m(),_(xo.$$.fragment),k6=m(),ct=r("div"),_(Ac.$$.fragment),E6=m(),Y=r("p"),q6=i("Return a dictionary ("),B1=r("code"),I6=i("datasets.DatasetDict"),T6=i(") with two random train and test subsets ("),H1=r("em"),N6=i("train"),P6=i(" and "),G1=r("em"),A6=i("test"),F6=m(),W1=r("code"),L6=i("Dataset"),S6=i(` splits).
Splits are created from the dataset according to `),Y1=r("em"),O6=i("test_size"),C6=i(", "),J1=r("em"),z6=i("train_size"),V6=i(" and "),K1=r("em"),U6=i("shuffle"),M6=i("."),R6=m(),Fc=r("p"),B6=i("This method is similar to scikit-learn "),Z1=r("em"),H6=i("train_test_split"),G6=i("."),W6=m(),_(vo.$$.fragment),Y6=m(),re=r("div"),_(Lc.$$.fragment),J6=m(),yn=r("p"),K6=i("Return the "),X1=r("em"),Z6=i("index"),X6=i("-nth shard from dataset split into "),Q1=r("em"),Q6=i("num_shards"),eq=i(" pieces."),tq=m(),e2=r("p"),sq=i(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),aq=m(),Sc=r("p"),nq=i(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),t2=r("em"),rq=i("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),oq=i(` will return
a dataset with the same order as the original.`),lq=m(),s2=r("p"),iq=i(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),pq=m(),_(yo.$$.fragment),cq=m(),Ls=r("div"),_(Oc.$$.fragment),dq=m(),a2=r("p"),mq=i(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict(). The dataset will yield
dicts for both inputs and labels unless the dict would contain only a single key, in which case a raw
tf.Tensor is yielded instead.`),hq=m(),_(jo.$$.fragment),fq=m(),dt=r("div"),_(Cc.$$.fragment),uq=m(),n2=r("p"),gq=i(`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),_q=m(),St=r("p"),bq=i("The resulting Parquet files are self-contained by default: if your dataset contains "),bu=r("a"),$q=i("Image"),xq=i(" or "),$u=r("a"),vq=i("Audio"),yq=i(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),r2=r("em"),jq=i("embed_external_files"),wq=i(" to False."),Dq=m(),_(wo.$$.fragment),kq=m(),Z=r("div"),_(zc.$$.fragment),Eq=m(),jn=r("p"),qq=i("Saves a dataset to a dataset directory, or in a filesystem using either "),xu=r("a"),Iq=i("S3FileSystem"),Tq=i(` or
any implementation of `),o2=r("code"),Nq=i("fsspec.spec.AbstractFileSystem"),Pq=i("."),Aq=m(),wn=r("p"),Fq=i("For "),vu=r("a"),Lq=i("Image"),Sq=i(" and "),yu=r("a"),Oq=i("Audio"),Cq=i(" data:"),zq=m(),Vc=r("p"),Vq=i(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),l2=r("em"),Uq=i("read()"),Mq=i(" those files first."),Rq=m(),_(Do.$$.fragment),Bq=m(),_(ko.$$.fragment),Hq=m(),_(Eo.$$.fragment),Gq=m(),Ss=r("div"),_(Uc.$$.fragment),Wq=m(),Ot=r("p"),Yq=i("Loads a dataset that was previously saved using "),i2=r("code"),Jq=i("save_to_disk"),Kq=i(` from a dataset directory, or from a
filesystem using either `),ju=r("a"),Zq=i("S3FileSystem"),Xq=i(` or any implementation of
`),p2=r("code"),Qq=i("fsspec.spec.AbstractFileSystem"),e9=i("."),t9=m(),_(qo.$$.fragment),s9=m(),Io=r("div"),_(Mc.$$.fragment),a9=m(),c2=r("p"),n9=i("Create and cache a new Dataset by flattening the indices mapping."),r9=m(),Os=r("div"),_(Rc.$$.fragment),o9=m(),d2=r("p"),l9=i("Exports the dataset to csv"),i9=m(),_(To.$$.fragment),p9=m(),Cs=r("div"),_(Bc.$$.fragment),c9=m(),Hc=r("p"),d9=i("Returns the dataset as a "),m2=r("code"),m9=i("pandas.DataFrame"),h9=i(". Can also return a generator for large datasets."),f9=m(),_(No.$$.fragment),u9=m(),zs=r("div"),_(Gc.$$.fragment),g9=m(),h2=r("p"),_9=i("Returns the dataset as a Python dict. Can also return a generator for large datasets."),b9=m(),_(Po.$$.fragment),$9=m(),Vs=r("div"),_(Wc.$$.fragment),x9=m(),f2=r("p"),v9=i("Export the dataset to JSON Lines or JSON."),y9=m(),_(Ao.$$.fragment),j9=m(),Us=r("div"),_(Yc.$$.fragment),w9=m(),u2=r("p"),D9=i("Exports the dataset to parquet"),k9=m(),_(Fo.$$.fragment),E9=m(),mt=r("div"),_(Jc.$$.fragment),q9=m(),Dn=r("p"),I9=i(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),g2=r("code"),T9=i("device"),N9=i(" if you want to run it on GPU ("),_2=r("code"),P9=i("device"),A9=i(` must be the GPU index).
You can find more information about Faiss here:`),F9=m(),b2=r("ul"),wu=r("li"),L9=i("For "),Kc=r("a"),S9=i("string factory"),O9=m(),_(Lo.$$.fragment),C9=m(),Ms=r("div"),_(Zc.$$.fragment),z9=m(),Ct=r("p"),V9=i(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),$2=r("em"),U9=i("external_arrays"),M9=i(`.
You can specify `),x2=r("em"),R9=i("device"),B9=i(" if you want to run it on GPU ("),v2=r("em"),H9=i("device"),G9=i(` must be the GPU index).
You can find more information about Faiss here:`),W9=m(),y2=r("ul"),Du=r("li"),Y9=i("For "),Xc=r("a"),J9=i("string factory"),K9=m(),So=r("div"),_(Qc.$$.fragment),Z9=m(),j2=r("p"),X9=i("Save a FaissIndex on disk."),Q9=m(),Rs=r("div"),_(ed.$$.fragment),eI=m(),w2=r("p"),tI=i("Load a FaissIndex from disk."),sI=m(),td=r("p"),aI=i(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),D2=r("em"),nI=i(".get_index(index_name).faiss_index"),rI=i(" to make it fit your needs."),oI=m(),Bs=r("div"),_(sd.$$.fragment),lI=m(),k2=r("p"),iI=i("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),pI=m(),_(Oo.$$.fragment),cI=m(),Hs=r("div"),_(ad.$$.fragment),dI=m(),E2=r("p"),mI=i("Load an existing text index using ElasticSearch for fast retrieval."),hI=m(),_(Co.$$.fragment),fI=m(),zo=r("div"),_(nd.$$.fragment),uI=m(),q2=r("p"),gI=i("List the colindex_nameumns/identifiers of all the attached indexes."),_I=m(),Vo=r("div"),_(rd.$$.fragment),bI=m(),I2=r("p"),$I=i("List the index_name/identifiers of all the attached indexes."),xI=m(),Uo=r("div"),_(od.$$.fragment),vI=m(),T2=r("p"),yI=i("Drop the index with the specified column."),jI=m(),Mo=r("div"),_(ld.$$.fragment),wI=m(),N2=r("p"),DI=i("Find the nearest examples indices in the dataset to the query."),kI=m(),Ro=r("div"),_(id.$$.fragment),EI=m(),P2=r("p"),qI=i("Find the nearest examples indices in the dataset to the query."),II=m(),Bo=r("div"),_(pd.$$.fragment),TI=m(),A2=r("p"),NI=i("Find the nearest examples in the dataset to the query."),PI=m(),Ho=r("div"),_(cd.$$.fragment),AI=m(),F2=r("p"),FI=i("Find the nearest examples in the dataset to the query."),LI=m(),Go=r("div"),_(dd.$$.fragment),SI=m(),ku=r("p"),Eu=r("a"),OI=i("datasets.DatasetInfo"),CI=i(" object containing all the metadata in the dataset."),zI=m(),Wo=r("div"),_(md.$$.fragment),VI=m(),qu=r("p"),Iu=r("a"),UI=i("datasets.NamedSplit"),MI=i(" object corresponding to a named dataset split."),RI=m(),Tu=r("div"),_(hd.$$.fragment),BI=m(),Nu=r("div"),_(fd.$$.fragment),HI=m(),Pu=r("div"),_(ud.$$.fragment),GI=m(),Au=r("div"),_(gd.$$.fragment),WI=m(),Fu=r("div"),_(_d.$$.fragment),YI=m(),Lu=r("div"),_(bd.$$.fragment),JI=m(),Su=r("div"),_($d.$$.fragment),KI=m(),Ou=r("div"),_(xd.$$.fragment),ZI=m(),Cu=r("div"),_(vd.$$.fragment),XI=m(),zu=r("div"),_(yd.$$.fragment),QI=m(),Vu=r("div"),_(jd.$$.fragment),eT=m(),Uu=r("div"),_(wd.$$.fragment),tT=m(),Mu=r("div"),_(Dd.$$.fragment),sT=m(),Gs=r("div"),_(kd.$$.fragment),aT=m(),L2=r("p"),nT=i("Create Dataset from CSV file(s)."),rT=m(),_(Yo.$$.fragment),oT=m(),Ws=r("div"),_(Ed.$$.fragment),lT=m(),S2=r("p"),iT=i("Create Dataset from JSON or JSON Lines file(s)."),pT=m(),_(Jo.$$.fragment),cT=m(),Ys=r("div"),_(qd.$$.fragment),dT=m(),O2=r("p"),mT=i("Create Dataset from Parquet file(s)."),hT=m(),_(Ko.$$.fragment),fT=m(),Js=r("div"),_(Id.$$.fragment),uT=m(),C2=r("p"),gT=i("Create Dataset from text file(s)."),_T=m(),_(Zo.$$.fragment),bT=m(),Ks=r("div"),_(Td.$$.fragment),$T=m(),kn=r("p"),xT=i("Prepare a dataset for the given task by casting the dataset\u2019s "),Ru=r("a"),vT=i("Features"),yT=i(" to standardized column names and types as detailed in "),Bu=r("a"),jT=i("datasets.tasks"),wT=i("."),DT=m(),En=r("p"),kT=i("Casts "),z2=r("code"),ET=i("datasets.DatasetInfo.features"),qT=i(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),V2=r("code"),IT=i("datasets.DatasetInfo.task_templates"),TT=i(" after casting."),NT=m(),Zs=r("div"),_(Nd.$$.fragment),PT=m(),Pd=r("p"),AT=i("Align the dataset\u2019s label ID and label name mapping to match an input "),U2=r("code"),FT=i("label2id"),LT=i(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),ST=m(),_(Xo.$$.fragment),E7=m(),zt=r("div"),_(Ad.$$.fragment),OT=m(),qn=r("p"),CT=i("Converts a list of "),Hu=r("a"),zT=i("Dataset"),VT=i(" with the same schema into a single "),Gu=r("a"),UT=i("Dataset"),MT=i("."),RT=m(),_(Qo.$$.fragment),q7=m(),ee=r("div"),_(Fd.$$.fragment),BT=m(),M2=r("p"),HT=i(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),GT=m(),In=r("p"),WT=i("You can use this function on a list of "),Wu=r("a"),YT=i("Dataset"),JT=i(" objects, or on a list of "),Yu=r("a"),KT=i("IterableDataset"),ZT=i(" objects."),XT=m(),Ve=r("p"),QT=i("If "),R2=r("code"),eN=i("probabilities"),tN=i(" is "),B2=r("code"),sN=i("None"),aN=i(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),H2=r("code"),nN=i("probabilities"),rN=i(" is not "),G2=r("code"),oN=i("None"),lN=i(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),iN=m(),Vt=r("p"),pN=i("The resulting dataset ends when one of the source datasets runs out of examples except when "),W2=r("code"),cN=i("oversampling"),dN=i(" is "),Y2=r("code"),mN=i("True"),hN=i(" and "),Ju=r("a"),fN=i("Dataset"),uN=i(` objects are used,
in which case, the resulting dataset ends when all datasets have ran out of examples at least one time.`),gN=m(),_(el.$$.fragment),I7=m(),me=r("div"),_(Ld.$$.fragment),_N=m(),J2=r("p"),bN=i(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),$N=m(),K2=r("p"),xN=i(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),vN=m(),Z2=r("p"),yN=i(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),jN=m(),Ue=r("ul"),X2=r("li"),wN=i("cache files are always recreated"),DN=m(),Q2=r("li"),kN=i("cache files are written to a temporary directory that is deleted when session closes"),EN=m(),ex=r("li"),qN=i("cache files are named using a random hash instead of the dataset fingerprint"),IN=m(),Sd=r("li"),TN=i("use "),Ku=r("a"),NN=i("datasets.Dataset.save_to_disk()"),PN=i(" to save a transformed dataset or it will be deleted when session closes"),AN=m(),Ut=r("li"),FN=i("caching doesn\u2019t affect "),Zu=r("a"),LN=i("datasets.load_dataset()"),SN=i(`. If you want to regenerate a dataset from scratch you should use
the `),tx=r("code"),ON=i("download_mode"),CN=i(" parameter in "),Xu=r("a"),zN=i("datasets.load_dataset()"),VN=i("."),T7=m(),he=r("div"),_(Od.$$.fragment),UN=m(),sx=r("p"),MN=i(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),RN=m(),ax=r("p"),BN=i(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),HN=m(),nx=r("p"),GN=i(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),WN=m(),Me=r("ul"),rx=r("li"),YN=i("cache files are always recreated"),JN=m(),ox=r("li"),KN=i("cache files are written to a temporary directory that is deleted when session closes"),ZN=m(),lx=r("li"),XN=i("cache files are named using a random hash instead of the dataset fingerprint"),QN=m(),Cd=r("li"),eP=i("use "),Qu=r("a"),tP=i("datasets.Dataset.save_to_disk()"),sP=i(" to save a transformed dataset or it will be deleted when session closes"),aP=m(),Mt=r("li"),nP=i("caching doesn\u2019t affect "),eg=r("a"),rP=i("datasets.load_dataset()"),oP=i(`. If you want to regenerate a dataset from scratch you should use
the `),ix=r("code"),lP=i("download_mode"),iP=i(" parameter in "),tg=r("a"),pP=i("datasets.load_dataset()"),cP=i("."),N7=m(),fe=r("div"),_(zd.$$.fragment),dP=m(),px=r("p"),mP=i(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),hP=m(),cx=r("p"),fP=i(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),uP=m(),dx=r("p"),gP=i(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),_P=m(),Re=r("ul"),mx=r("li"),bP=i("cache files are always recreated"),$P=m(),hx=r("li"),xP=i("cache files are written to a temporary directory that is deleted when session closes"),vP=m(),fx=r("li"),yP=i("cache files are named using a random hash instead of the dataset fingerprint"),jP=m(),Vd=r("li"),wP=i("use "),sg=r("a"),DP=i("datasets.Dataset.save_to_disk()"),kP=i(" to save a transformed dataset or it will be deleted when session closes"),EP=m(),Rt=r("li"),qP=i("caching doesn\u2019t affect "),ag=r("a"),IP=i("datasets.load_dataset()"),TP=i(`. If you want to regenerate a dataset from scratch you should use
the `),ux=r("code"),NP=i("download_mode"),PP=i(" parameter in "),ng=r("a"),AP=i("datasets.load_dataset()"),FP=i("."),P7=m(),Tn=r("h2"),tl=r("a"),gx=r("span"),_(Ud.$$.fragment),LP=m(),_x=r("span"),SP=i("DatasetDict"),A7=m(),sl=r("p"),OP=i("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),bx=r("code"),CP=i("Dataset"),zP=i(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),F7=m(),A=r("div"),_(Md.$$.fragment),VP=m(),$x=r("p"),UP=i("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),MP=m(),Xs=r("div"),_(Rd.$$.fragment),RP=m(),xx=r("p"),BP=i("The Apache Arrow tables backing each split."),HP=m(),_(al.$$.fragment),GP=m(),Qs=r("div"),_(Bd.$$.fragment),WP=m(),vx=r("p"),YP=i("The cache files containing the Apache Arrow table backing each split."),JP=m(),_(nl.$$.fragment),KP=m(),ea=r("div"),_(Hd.$$.fragment),ZP=m(),yx=r("p"),XP=i("Number of columns in each split of the dataset."),QP=m(),_(rl.$$.fragment),eA=m(),ta=r("div"),_(Gd.$$.fragment),tA=m(),Wd=r("p"),sA=i("Number of rows in each split of the dataset (same as "),ol=r("a"),aA=i("datasets.Dataset."),jx=r("strong"),nA=i("len"),rA=i("()"),oA=i(")."),lA=m(),_(ll.$$.fragment),iA=m(),sa=r("div"),_(Yd.$$.fragment),pA=m(),wx=r("p"),cA=i("Names of the columns in each split of the dataset."),dA=m(),_(il.$$.fragment),mA=m(),aa=r("div"),_(Jd.$$.fragment),hA=m(),Dx=r("p"),fA=i("Shape of each split of the dataset (number of columns, number of rows)."),uA=m(),_(pl.$$.fragment),gA=m(),ht=r("div"),_(Kd.$$.fragment),_A=m(),kx=r("p"),bA=i("Return a list of the unique elements in a column for each split."),$A=m(),Ex=r("p"),xA=i("This is implemented in the low-level backend and as such, very fast."),vA=m(),_(cl.$$.fragment),yA=m(),na=r("div"),_(Zd.$$.fragment),jA=m(),qx=r("p"),wA=i(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),DA=m(),_(dl.$$.fragment),kA=m(),ra=r("div"),_(Xd.$$.fragment),EA=m(),Ix=r("p"),qA=i(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),IA=m(),_(ml.$$.fragment),TA=m(),oa=r("div"),_(Qd.$$.fragment),NA=m(),Tx=r("p"),PA=i(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),AA=m(),_(hl.$$.fragment),FA=m(),ft=r("div"),_(em.$$.fragment),LA=m(),Nx=r("p"),SA=i(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),OA=m(),Px=r("p"),CA=i(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),zA=m(),_(fl.$$.fragment),VA=m(),De=r("div"),_(tm.$$.fragment),UA=m(),Ax=r("p"),MA=i("Create a new Dataset where the rows are shuffled."),RA=m(),Fx=r("p"),BA=i("The transformation is applied to all the datasets of the dataset dictionary."),HA=m(),Lx=r("p"),GA=i(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),WA=m(),_(ul.$$.fragment),YA=m(),ke=r("div"),_(sm.$$.fragment),JA=m(),am=r("p"),KA=i("Set "),Sx=r("code"),ZA=i("__getitem__"),XA=i(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),QA=m(),Be=r("p"),eF=i("It is possible to call "),Ox=r("code"),tF=i("map"),sF=i(" after calling "),Cx=r("code"),aF=i("set_format"),nF=i(". Since "),zx=r("code"),rF=i("map"),oF=i(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),Vx=r("code"),lF=i("map"),iF=i(" on a dataset to add a new column, then this column will be formatted:"),pF=m(),Ux=r("p"),cF=i("new formatted columns = (all columns - previously unformatted columns)"),dF=m(),_(gl.$$.fragment),mF=m(),ut=r("div"),_(nm.$$.fragment),hF=m(),rm=r("p"),fF=i("Reset "),Mx=r("code"),uF=i("__getitem__"),gF=i(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),_F=m(),rg=r("p"),bF=i("Same as "),Rx=r("code"),$F=i("self.set_format()"),xF=m(),_(_l.$$.fragment),vF=m(),bl=r("div"),_(om.$$.fragment),yF=m(),Nn=r("p"),jF=i("To be used in a "),Bx=r("em"),wF=i("with"),DF=i(" statement. Set "),Hx=r("code"),kF=i("__getitem__"),EF=i(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),qF=m(),Ee=r("div"),_(lm.$$.fragment),IF=m(),Bt=r("p"),TF=i("Set "),Gx=r("code"),NF=i("__getitem__"),PF=i(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Wx=r("code"),AF=i("type"),FF=i(" (for example \u201Cnumpy\u201D) is used to format batches when using "),Yx=r("code"),LF=i("__getitem__"),SF=i(`.
The format is set for every dataset in the dataset dictionary`),OF=m(),im=r("p"),CF=i("It\u2019s also possible to use custom transforms for formatting using "),og=r("a"),zF=i("datasets.Dataset.with_transform()"),VF=i("."),UF=m(),Pn=r("p"),MF=i("Contrary to "),lg=r("a"),RF=i("datasets.DatasetDict.set_format()"),BF=i(", "),Jx=r("code"),HF=i("with_format"),GF=i(" returns a new DatasetDict object with new Dataset objects."),WF=m(),_($l.$$.fragment),YF=m(),qe=r("div"),_(pm.$$.fragment),JF=m(),An=r("p"),KF=i("Set "),Kx=r("code"),ZF=i("__getitem__"),XF=i(" return format using this transform. The transform is applied on-the-fly on batches when "),Zx=r("code"),QF=i("__getitem__"),eL=i(` is called.
The transform is set for every dataset in the dataset dictionary`),tL=m(),Fn=r("p"),sL=i("As "),ig=r("a"),aL=i("datasets.Dataset.set_format()"),nL=i(", this can be reset using "),pg=r("a"),rL=i("datasets.Dataset.reset_format()"),oL=i("."),lL=m(),Ln=r("p"),iL=i("Contrary to "),Xx=r("code"),pL=i("datasets.DatasetDict.set_transform()"),cL=i(", "),Qx=r("code"),dL=i("with_transform"),mL=i(" returns a new DatasetDict object with new Dataset objects."),hL=m(),_(xl.$$.fragment),fL=m(),la=r("div"),_(cm.$$.fragment),uL=m(),ev=r("p"),gL=i(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),_L=m(),_(vl.$$.fragment),bL=m(),gt=r("div"),_(dm.$$.fragment),$L=m(),tv=r("p"),xL=i(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),vL=m(),Ht=r("p"),yL=i("You can also remove a column using "),cg=r("a"),jL=i("Dataset.map()"),wL=i(" with "),sv=r("em"),DL=i("feature"),kL=i(" but "),av=r("code"),EL=i("cast_"),qL=i(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),IL=m(),_(yl.$$.fragment),TL=m(),ia=r("div"),_(mm.$$.fragment),NL=m(),nv=r("p"),PL=i("Cast column to feature for decoding."),AL=m(),_(jl.$$.fragment),FL=m(),Ie=r("div"),_(hm.$$.fragment),LL=m(),rv=r("p"),SL=i(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),OL=m(),ov=r("p"),CL=i("The transformation is applied to all the splits of the dataset dictionary."),zL=m(),Sn=r("p"),VL=i("You can also remove a column using "),dg=r("a"),UL=i("Dataset.map()"),ML=i(" with "),lv=r("em"),RL=i("remove_columns"),BL=i(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),HL=m(),_(wl.$$.fragment),GL=m(),Te=r("div"),_(fm.$$.fragment),WL=m(),iv=r("p"),YL=i(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),JL=m(),On=r("p"),KL=i("You can also rename a column using "),mg=r("a"),ZL=i("Dataset.map()"),XL=i(" with "),pv=r("em"),QL=i("remove_columns"),eS=i(" but the present method:"),tS=m(),um=r("ul"),cv=r("li"),sS=i("takes care of moving the original features under the new column name."),aS=m(),dv=r("li"),nS=i("doesn\u2019t copy the data to a new dataset and is thus much faster."),rS=m(),_(Dl.$$.fragment),oS=m(),pa=r("div"),_(gm.$$.fragment),lS=m(),mv=r("p"),iS=i(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),pS=m(),_(kl.$$.fragment),cS=m(),ca=r("div"),_(_m.$$.fragment),dS=m(),bm=r("p"),mS=i("Casts the given column as :obj:"),hv=r("code"),hS=i("datasets.features.ClassLabel"),fS=i(" and updates the tables."),uS=m(),_(El.$$.fragment),gS=m(),Ne=r("div"),_($m.$$.fragment),_S=m(),Cn=r("p"),bS=i("Pushes the "),fv=r("code"),$S=i("DatasetDict"),xS=i(` to the hub as a Parquet dataset.
The `),uv=r("code"),vS=i("DatasetDict"),yS=i(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),jS=m(),gv=r("p"),wS=i("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),DS=m(),Gt=r("p"),kS=i("The resulting Parquet files are self-contained by default: if your dataset contains "),hg=r("a"),ES=i("Image"),qS=i(" or "),fg=r("a"),IS=i("Audio"),TS=i(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),_v=r("em"),NS=i("embed_external_files"),PS=i(" to False."),AS=m(),_(ql.$$.fragment),FS=m(),oe=r("div"),_(xm.$$.fragment),LS=m(),zn=r("p"),SS=i("Saves a dataset dict to a filesystem using either "),ug=r("a"),OS=i("S3FileSystem"),CS=i(` or
`),bv=r("code"),zS=i("fsspec.spec.AbstractFileSystem"),VS=i("."),US=m(),Vn=r("p"),MS=i("For "),gg=r("a"),RS=i("Image"),BS=i(" and "),_g=r("a"),HS=i("Audio"),GS=i(" data:"),WS=m(),vm=r("p"),YS=i(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),$v=r("em"),JS=i("read()"),KS=i(" those files first."),ZS=m(),_(Il.$$.fragment),XS=m(),_(Tl.$$.fragment),QS=m(),da=r("div"),_(ym.$$.fragment),eO=m(),Wt=r("p"),tO=i("Load a dataset that was previously saved using "),xv=r("code"),sO=i("save_to_disk"),aO=i(` from a filesystem using either
`),bg=r("a"),nO=i("S3FileSystem"),rO=i(" or "),vv=r("code"),oO=i("fsspec.spec.AbstractFileSystem"),lO=i("."),iO=m(),_(Nl.$$.fragment),pO=m(),ma=r("div"),_(jm.$$.fragment),cO=m(),yv=r("p"),dO=i("Create DatasetDict from CSV file(s)."),mO=m(),_(Pl.$$.fragment),hO=m(),ha=r("div"),_(wm.$$.fragment),fO=m(),jv=r("p"),uO=i("Create DatasetDict from JSON Lines file(s)."),gO=m(),_(Al.$$.fragment),_O=m(),fa=r("div"),_(Dm.$$.fragment),bO=m(),wv=r("p"),$O=i("Create DatasetDict from Parquet file(s)."),xO=m(),_(Fl.$$.fragment),vO=m(),ua=r("div"),_(km.$$.fragment),yO=m(),Dv=r("p"),jO=i("Create DatasetDict from text file(s)."),wO=m(),_(Ll.$$.fragment),DO=m(),ga=r("div"),_(Em.$$.fragment),kO=m(),Un=r("p"),EO=i("Prepare a dataset for the given task by casting the dataset\u2019s "),$g=r("a"),qO=i("Features"),IO=i(" to standardized column names and types as detailed in "),xg=r("a"),TO=i("datasets.tasks"),NO=i("."),PO=m(),Mn=r("p"),AO=i("Casts "),kv=r("code"),FO=i("datasets.DatasetInfo.features"),LO=i(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Ev=r("code"),SO=i("datasets.DatasetInfo.task_templates"),OO=i(" after casting."),L7=m(),vg=r("a"),S7=m(),Rn=r("h2"),Sl=r("a"),qv=r("span"),_(qm.$$.fragment),CO=m(),Iv=r("span"),zO=i("IterableDataset"),O7=m(),Ol=r("p"),VO=i("The base class "),yg=r("a"),UO=i("IterableDataset"),MO=i(" implements an iterable Dataset backed by python generators."),C7=m(),L=r("div"),_(Im.$$.fragment),RO=m(),Tv=r("p"),BO=i("A Dataset backed by an iterable."),HO=m(),_a=r("div"),_(Tm.$$.fragment),GO=m(),Nv=r("p"),WO=i(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),YO=m(),_(Cl.$$.fragment),JO=m(),ba=r("div"),_(Nm.$$.fragment),KO=m(),Pv=r("p"),ZO=i("Cast column to feature for decoding."),XO=m(),_(zl.$$.fragment),QO=m(),$a=r("div"),_(Pm.$$.fragment),eC=m(),Av=r("p"),tC=i("Cast the dataset to a new set of features."),sC=m(),_(Vl.$$.fragment),aC=m(),jg=r("div"),_(Am.$$.fragment),nC=m(),Pe=r("div"),_(Fm.$$.fragment),rC=m(),Fv=r("p"),oC=i(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),lC=m(),Lm=r("p"),iC=i("You can specify whether the function should be batched or not with the "),Lv=r("code"),pC=i("batched"),cC=i(" parameter:"),dC=m(),Bn=r("ul"),Sv=r("li"),mC=i(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),hC=m(),Ov=r("li"),fC=i(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),uC=m(),ue=r("li"),gC=i("If batched is True and batch_size is "),Cv=r("code"),_C=i("n"),bC=i(" > 1, then the function takes a batch of "),zv=r("code"),$C=i("n"),xC=i(" examples as input and can return a batch with "),Vv=r("code"),vC=i("n"),yC=i(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Uv=r("code"),jC=i("n"),wC=i(` examples.
A batch is a dictionary, e.g. a batch of `),Mv=r("code"),DC=i("n"),kC=i(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),EC=m(),_(Ul.$$.fragment),qC=m(),xa=r("div"),_(Sm.$$.fragment),IC=m(),Rv=r("p"),TC=i(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),NC=m(),_(Ml.$$.fragment),PC=m(),va=r("div"),_(Om.$$.fragment),AC=m(),Bv=r("p"),FC=i(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),LC=m(),_(Rl.$$.fragment),SC=m(),le=r("div"),_(Cm.$$.fragment),OC=m(),Hv=r("p"),CC=i("Randomly shuffles the elements of this dataset."),zC=m(),Gv=r("p"),VC=i(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),UC=m(),zm=r("p"),MC=i("For instance, if your dataset contains 10,000 elements but "),Wv=r("code"),RC=i("buffer_size"),BC=i(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),HC=m(),Hn=r("p"),GC=i(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),wg=r("a"),WC=i("datasets.IterableDataset.skip()"),YC=i(" or "),Dg=r("a"),JC=i("datasets.IterableDataset.take()"),KC=i(`
then the order of the shards is kept unchanged.`),ZC=m(),_(Bl.$$.fragment),XC=m(),ya=r("div"),_(Vm.$$.fragment),QC=m(),Um=r("p"),ez=i("Create a new IterableDataset that skips the first "),Yv=r("code"),tz=i("n"),sz=i(" elements."),az=m(),_(Hl.$$.fragment),nz=m(),ja=r("div"),_(Mm.$$.fragment),rz=m(),Rm=r("p"),oz=i("Create a new IterableDataset with only the first "),Jv=r("code"),lz=i("n"),iz=i(" elements."),pz=m(),_(Gl.$$.fragment),cz=m(),Wl=r("div"),_(Bm.$$.fragment),dz=m(),kg=r("p"),Eg=r("a"),mz=i("datasets.DatasetInfo"),hz=i(" object containing all the metadata in the dataset."),fz=m(),Yl=r("div"),_(Hm.$$.fragment),uz=m(),qg=r("p"),Ig=r("a"),gz=i("datasets.NamedSplit"),_z=i(" object corresponding to a named dataset split."),bz=m(),Tg=r("div"),_(Gm.$$.fragment),$z=m(),Ng=r("div"),_(Wm.$$.fragment),xz=m(),Pg=r("div"),_(Ym.$$.fragment),vz=m(),Ag=r("div"),_(Jm.$$.fragment),yz=m(),Fg=r("div"),_(Km.$$.fragment),jz=m(),Lg=r("div"),_(Zm.$$.fragment),wz=m(),Sg=r("div"),_(Xm.$$.fragment),Dz=m(),Og=r("div"),_(Qm.$$.fragment),kz=m(),Cg=r("div"),_(eh.$$.fragment),Ez=m(),zg=r("div"),_(th.$$.fragment),qz=m(),Vg=r("div"),_(sh.$$.fragment),Iz=m(),Ug=r("div"),_(ah.$$.fragment),Tz=m(),Mg=r("div"),_(nh.$$.fragment),z7=m(),Gn=r("h2"),Jl=r("a"),Kv=r("span"),_(rh.$$.fragment),Nz=m(),Zv=r("span"),Pz=i("IterableDatasetDict"),V7=m(),Kl=r("p"),Az=i("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Xv=r("code"),Fz=i("IterableDataset"),Lz=i(" objects as values."),U7=m(),U=r("div"),_(oh.$$.fragment),Sz=m(),Ae=r("div"),_(lh.$$.fragment),Oz=m(),Qv=r("p"),Cz=i(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),zz=m(),ih=r("p"),Vz=i("You can specify whether the function should be batched or not with the "),ey=r("code"),Uz=i("batched"),Mz=i(" parameter:"),Rz=m(),Wn=r("ul"),ty=r("li"),Bz=i(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),Hz=m(),sy=r("li"),Gz=i(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),Wz=m(),ge=r("li"),Yz=i("If batched is True and batch_size is "),ay=r("code"),Jz=i("n"),Kz=i(" > 1, then the function takes a batch of "),ny=r("code"),Zz=i("n"),Xz=i(" examples as input and can return a batch with "),ry=r("code"),Qz=i("n"),eV=i(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),oy=r("code"),tV=i("n"),sV=i(` examples.
A batch is a dictionary, e.g. a batch of `),ly=r("code"),aV=i("n"),nV=i(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),rV=m(),_(Zl.$$.fragment),oV=m(),wa=r("div"),_(ph.$$.fragment),lV=m(),iy=r("p"),iV=i(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),pV=m(),_(Xl.$$.fragment),cV=m(),ie=r("div"),_(ch.$$.fragment),dV=m(),py=r("p"),mV=i(`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),hV=m(),cy=r("p"),fV=i(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),uV=m(),dh=r("p"),gV=i("For instance, if your dataset contains 10,000 elements but "),dy=r("code"),_V=i("buffer_size"),bV=i(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),$V=m(),Yn=r("p"),xV=i(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Rg=r("a"),vV=i("datasets.IterableDataset.skip()"),yV=i(" or "),Bg=r("a"),jV=i("datasets.IterableDataset.take()"),wV=i(`
then the order of the shards is kept unchanged.`),DV=m(),_(Ql.$$.fragment),kV=m(),Da=r("div"),_(mh.$$.fragment),EV=m(),my=r("p"),qV=i(`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),IV=m(),_(ei.$$.fragment),TV=m(),ka=r("div"),_(hh.$$.fragment),NV=m(),hy=r("p"),PV=i(`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),AV=m(),_(ti.$$.fragment),FV=m(),Ea=r("div"),_(fh.$$.fragment),LV=m(),fy=r("p"),SV=i(`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),OV=m(),_(si.$$.fragment),CV=m(),qa=r("div"),_(uh.$$.fragment),zV=m(),uy=r("p"),VV=i(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),UV=m(),_(ai.$$.fragment),MV=m(),Ia=r("div"),_(gh.$$.fragment),RV=m(),gy=r("p"),BV=i(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),HV=m(),_(ni.$$.fragment),GV=m(),Ta=r("div"),_(_h.$$.fragment),WV=m(),_y=r("p"),YV=i(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),JV=m(),_(ri.$$.fragment),M7=m(),Jn=r("h2"),oi=r("a"),by=r("span"),_(bh.$$.fragment),KV=m(),$y=r("span"),ZV=i("Features"),R7=m(),O=r("div"),_($h.$$.fragment),XV=m(),xy=r("p"),QV=i("A special dictionary that defines the internal structure of a dataset."),eU=m(),xh=r("p"),tU=i("Instantiated with a dictionary of type "),vy=r("code"),sU=i("dict[str, FieldType]"),aU=i(`, where keys are the desired column names,
and values are the type of that column.`),nU=m(),Hg=r("p"),yy=r("code"),rU=i("FieldType"),oU=i(" can be one of the following:"),lU=m(),J=r("ul"),jy=r("li"),Na=r("p"),iU=i("a "),Gg=r("a"),pU=i("datasets.Value"),cU=i(" feature specifies a single typed value, e.g. "),wy=r("code"),dU=i("int64"),mU=i(" or "),Dy=r("code"),hU=i("string"),fU=m(),ky=r("li"),vh=r("p"),uU=i("a "),Wg=r("a"),gU=i("datasets.ClassLabel"),_U=i(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),bU=m(),Ey=r("li"),yh=r("p"),$U=i("a python "),qy=r("code"),xU=i("dict"),vU=i(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),yU=m(),jh=r("li"),He=r("p"),jU=i("a python "),Iy=r("code"),wU=i("list"),DU=i(" or a "),Yg=r("a"),kU=i("datasets.Sequence"),EU=i(` specifies that the field contains a list of objects. The python
`),Ty=r("code"),qU=i("list"),IU=i(" or "),Jg=r("a"),TU=i("datasets.Sequence"),NU=i(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),PU=m(),_(li.$$.fragment),AU=m(),Ny=r("li"),Ge=r("p"),FU=i("a "),Kg=r("a"),LU=i("Array2D"),SU=i(", "),Zg=r("a"),OU=i("Array3D"),CU=i(", "),Xg=r("a"),zU=i("Array4D"),VU=i(" or "),Qg=r("a"),UU=i("Array5D"),MU=i(" feature for multidimensional arrays"),RU=m(),Py=r("li"),wh=r("p"),BU=i("an "),e_=r("a"),HU=i("Audio"),GU=i(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),WU=m(),Ay=r("li"),Yt=r("p"),YU=i("an "),t_=r("a"),JU=i("Image"),KU=i(" feature to store the absolute path to an image file, an "),Fy=r("code"),ZU=i("np.ndarray"),XU=i(" object, a "),Ly=r("code"),QU=i("PIL.Image.Image"),eM=i(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),tM=m(),Sy=r("li"),ii=r("p"),s_=r("a"),sM=i("datasets.Translation"),aM=i(" and "),a_=r("a"),nM=i("datasets.TranslationVariableLanguages"),rM=i(", the two features specific to Machine Translation"),oM=m(),Pa=r("div"),_(Dh.$$.fragment),lM=m(),Oy=r("p"),iM=i("Make a deep copy of Features."),pM=m(),_(pi.$$.fragment),cM=m(),ci=r("div"),_(kh.$$.fragment),dM=m(),Cy=r("p"),mM=i("Decode batch with custom feature decoding."),hM=m(),di=r("div"),_(Eh.$$.fragment),fM=m(),zy=r("p"),uM=i("Decode column with custom feature decoding."),gM=m(),mi=r("div"),_(qh.$$.fragment),_M=m(),Vy=r("p"),bM=i("Decode example with custom feature decoding."),$M=m(),hi=r("div"),_(Ih.$$.fragment),xM=m(),Uy=r("p"),vM=i("Encode batch into a format for Arrow."),yM=m(),fi=r("div"),_(Th.$$.fragment),jM=m(),My=r("p"),wM=i("Encode example into a format for Arrow."),DM=m(),_t=r("div"),_(Nh.$$.fragment),kM=m(),Ry=r("p"),EM=i(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),qM=m(),By=r("p"),IM=i(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),TM=m(),_(ui.$$.fragment),NM=m(),gi=r("div"),_(Ph.$$.fragment),PM=m(),Hy=r("p"),AM=i(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),FM=m(),Fe=r("div"),_(Ah.$$.fragment),LM=m(),Gy=r("p"),SM=i("Construct Features from dict."),OM=m(),Wy=r("p"),CM=i(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),zM=m(),Jt=r("p"),VM=i(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),n_=r("a"),UM=i("DatasetInfo"),MM=i(` that was dumped to a JSON object. This acts as an analogue to
`),r_=r("a"),RM=i("Features.from_arrow_schema()"),BM=i(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),o_=r("a"),HM=i("Value"),GM=i(" automatically performs."),WM=m(),_(_i.$$.fragment),YM=m(),bt=r("div"),_(Fh.$$.fragment),JM=m(),Yy=r("p"),KM=i("Reorder Features fields to match the field order of other Features."),ZM=m(),Jy=r("p"),XM=i(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),QM=m(),_(bi.$$.fragment),B7=m(),Kt=r("div"),_(Lh.$$.fragment),eR=m(),Ky=r("p"),tR=i(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),sR=m(),_($i.$$.fragment),H7=m(),B=r("div"),_(Sh.$$.fragment),aR=m(),Zy=r("p"),nR=i("Feature type for integer class labels."),rR=m(),Oh=r("p"),oR=i("There are 3 ways to define a "),Xy=r("em"),lR=i("ClassLabel"),iR=i(", which correspond to the 3 arguments:"),pR=m(),Kn=r("ul"),l_=r("li"),Qy=r("em"),cR=i("num_classes"),dR=i(": Create 0 to (num_classes-1) labels."),mR=m(),i_=r("li"),ej=r("em"),hR=i("names"),fR=i(": List of label strings."),uR=m(),p_=r("li"),tj=r("em"),gR=i("names_file"),_R=i(": File containing the list of labels."),bR=m(),sj=r("p"),$R=i(`Under the hood the labels are stored as integers.
You can use negative integers to represent unknown/missing labels.`),xR=m(),_(xi.$$.fragment),vR=m(),Aa=r("div"),_(Ch.$$.fragment),yR=m(),aj=r("p"),jR=i(`Cast an Arrow array to the ClassLabel arrow storage type.
The Arrow types that can be converted to the ClassLabel pyarrow storage type are:`),wR=m(),zh=r("ul"),nj=r("li"),DR=i("pa.string()"),kR=m(),rj=r("li"),ER=i("pa.int()"),qR=m(),$t=r("div"),_(Vh.$$.fragment),IR=m(),oj=r("p"),TR=i("Conversion integer => class name string."),NR=m(),lj=r("p"),PR=i("Regarding unknown/missing labels: passing negative integers raises ValueError."),AR=m(),_(vi.$$.fragment),FR=m(),Fa=r("div"),_(Uh.$$.fragment),LR=m(),ij=r("p"),SR=i("Conversion class name string => integer."),OR=m(),_(yi.$$.fragment),G7=m(),We=r("div"),_(Mh.$$.fragment),CR=m(),pj=r("p"),zR=i("The Value dtypes are as follows:"),VR=m(),cj=r("p"),UR=i(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),MR=m(),_(ji.$$.fragment),W7=m(),te=r("div"),_(Rh.$$.fragment),RR=m(),c_=r("p"),dj=r("code"),BR=i("FeatureConnector"),HR=i(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),GR=m(),mj=r("p"),WR=i(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),YR=m(),Bh=r("p"),JR=i("Output: A dictionary mapping string language codes to translations as "),hj=r("code"),KR=i("Text"),ZR=i(`
features.`),XR=m(),_(wi.$$.fragment),QR=m(),Di=r("div"),_(Hh.$$.fragment),eB=m(),fj=r("p"),tB=i("Flatten the Translation feature into a dictionary."),Y7=m(),se=r("div"),_(Gh.$$.fragment),sB=m(),d_=r("p"),uj=r("code"),aB=i("FeatureConnector"),nB=i(` for translations with variable languages per example.
Here for compatiblity with tfds.`),rB=m(),gj=r("p"),oB=i(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),lB=m(),_j=r("p"),iB=i(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),pB=m(),_(ki.$$.fragment),cB=m(),Ei=r("div"),_(Wh.$$.fragment),dB=m(),bj=r("p"),mB=i("Flatten the TranslationVariableLanguages feature into a dictionary."),J7=m(),Zt=r("div"),_(Yh.$$.fragment),hB=m(),$j=r("p"),fB=i("Create a two-dimensional array."),uB=m(),_(qi.$$.fragment),K7=m(),Xt=r("div"),_(Jh.$$.fragment),gB=m(),xj=r("p"),_B=i("Create a three-dimensional array."),bB=m(),_(Ii.$$.fragment),Z7=m(),Qt=r("div"),_(Kh.$$.fragment),$B=m(),vj=r("p"),xB=i("Create a four-dimensional array."),vB=m(),_(Ti.$$.fragment),X7=m(),es=r("div"),_(Zh.$$.fragment),yB=m(),yj=r("p"),jB=i("Create a five-dimensional array."),wB=m(),_(Ni.$$.fragment),Q7=m(),M=r("div"),_(Xh.$$.fragment),DB=m(),jj=r("p"),kB=i("Audio Feature to extract audio data from an audio file."),EB=m(),wj=r("p"),qB=i("Input: The Audio feature accepts as input:"),IB=m(),Zn=r("ul"),Dj=r("li"),Qh=r("p"),TB=i("A "),kj=r("code"),NB=i("str"),PB=i(": Absolute path to the audio file (i.e. random access is allowed)."),AB=m(),Xn=r("li"),ef=r("p"),FB=i("A "),Ej=r("code"),LB=i("dict"),SB=i(" with the keys:"),OB=m(),tf=r("ul"),qj=r("li"),CB=i("path: String with relative path of the audio file to the archive file."),zB=m(),Ij=r("li"),VB=i("bytes: Bytes content of the audio file."),UB=m(),Tj=r("p"),MB=i("This is useful for archived files with sequential access."),RB=m(),Qn=r("li"),sf=r("p"),BB=i("A "),Nj=r("code"),HB=i("dict"),GB=i(" with the keys:"),WB=m(),er=r("ul"),Pj=r("li"),YB=i("path: String with relative path of the audio file to the archive file."),JB=m(),Aj=r("li"),KB=i("array: Array containing the audio sample"),ZB=m(),Fj=r("li"),XB=i("sampling_rate: Integer corresponding to the samping rate of the audio sample."),QB=m(),Lj=r("p"),eH=i("This is useful for archived files with sequential access."),tH=m(),_(Pi.$$.fragment),sH=m(),La=r("div"),_(af.$$.fragment),aH=m(),Sj=r("p"),nH=i(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),rH=m(),ts=r("ul"),Oj=r("li"),oH=i("pa.string() - it must contain the \u201Cpath\u201D data"),lH=m(),Cj=r("li"),iH=i("pa.struct({\u201Cbytes\u201D: pa.binary()})"),pH=m(),zj=r("li"),cH=i("pa.struct({\u201Cpath\u201D: pa.string()})"),dH=m(),Vj=r("li"),mH=i("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),hH=m(),Ai=r("div"),_(nf.$$.fragment),fH=m(),Uj=r("p"),uH=i("Decode example audio file into audio data."),gH=m(),Fi=r("div"),_(rf.$$.fragment),_H=m(),Mj=r("p"),bH=i("Embed audio files into the Arrow array."),$H=m(),Li=r("div"),_(of.$$.fragment),xH=m(),Rj=r("p"),vH=i("Encode example into a format for Arrow."),yH=m(),Si=r("div"),_(lf.$$.fragment),jH=m(),Bj=r("p"),wH=i("If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),e4=m(),R=r("div"),_(pf.$$.fragment),DH=m(),Hj=r("p"),kH=i("Image feature to read image data from an image file."),EH=m(),Gj=r("p"),qH=i("Input: The Image feature accepts as input:"),IH=m(),ss=r("ul"),Wj=r("li"),cf=r("p"),TH=i("A "),Yj=r("code"),NH=i("str"),PH=i(": Absolute path to the image file (i.e. random access is allowed)."),AH=m(),tr=r("li"),df=r("p"),FH=i("A "),Jj=r("code"),LH=i("dict"),SH=i(" with the keys:"),OH=m(),mf=r("ul"),Kj=r("li"),CH=i("path: String with relative path of the image file to the archive file."),zH=m(),Zj=r("li"),VH=i("bytes: Bytes of the image file."),UH=m(),Xj=r("p"),MH=i("This is useful for archived files with sequential access."),RH=m(),Qj=r("li"),hf=r("p"),BH=i("An "),e0=r("code"),HH=i("np.ndarray"),GH=i(": NumPy array representing an image."),WH=m(),t0=r("li"),ff=r("p"),YH=i("A "),s0=r("code"),JH=i("PIL.Image.Image"),KH=i(": PIL image object."),ZH=m(),_(Oi.$$.fragment),XH=m(),Sa=r("div"),_(uf.$$.fragment),QH=m(),a0=r("p"),eG=i(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),tG=m(),Ye=r("ul"),n0=r("li"),sG=i("pa.string() - it must contain the \u201Cpath\u201D data"),aG=m(),r0=r("li"),nG=i("pa.struct({\u201Cbytes\u201D: pa.binary()})"),rG=m(),o0=r("li"),oG=i("pa.struct({\u201Cpath\u201D: pa.string()})"),lG=m(),l0=r("li"),iG=i("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),pG=m(),i0=r("li"),cG=i("pa.list(*) - it must contain the image array data"),dG=m(),Ci=r("div"),_(gf.$$.fragment),mG=m(),p0=r("p"),hG=i("Decode example image file into image data."),fG=m(),zi=r("div"),_(_f.$$.fragment),uG=m(),c0=r("p"),gG=i("Embed image files into the Arrow array."),_G=m(),Vi=r("div"),_(bf.$$.fragment),bG=m(),d0=r("p"),$G=i("Encode example into a format for Arrow."),xG=m(),Ui=r("div"),_($f.$$.fragment),vG=m(),m0=r("p"),yG=i("If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),t4=m(),sr=r("h2"),Mi=r("a"),h0=r("span"),_(xf.$$.fragment),jG=m(),f0=r("span"),wG=i("MetricInfo"),s4=m(),ae=r("div"),_(vf.$$.fragment),DG=m(),u0=r("p"),kG=i("Information about a metric."),EG=m(),m_=r("p"),g0=r("code"),qG=i("MetricInfo"),IG=i(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),TG=m(),_0=r("p"),NG=i("Note: Not all fields are known on construction and may be updated later."),PG=m(),Oa=r("div"),_(yf.$$.fragment),AG=m(),jf=r("p"),FG=i("Create MetricInfo from the JSON file in "),b0=r("code"),LG=i("metric_info_dir"),SG=i("."),OG=m(),_(Ri.$$.fragment),CG=m(),Ca=r("div"),_(wf.$$.fragment),zG=m(),as=r("p"),VG=i("Write "),$0=r("code"),UG=i("MetricInfo"),MG=i(" as JSON to "),x0=r("code"),RG=i("metric_info_dir"),BG=i(`.
Also save the license separately in LICENCE.
If `),v0=r("code"),HG=i("pretty_print"),GG=i(" is True, the JSON will be pretty-printed with the indent level of 4."),WG=m(),_(Bi.$$.fragment),a4=m(),ar=r("h2"),Hi=r("a"),y0=r("span"),_(Df.$$.fragment),YG=m(),j0=r("span"),JG=i("Metric"),n4=m(),za=r("p"),KG=i("The base class "),w0=r("code"),ZG=i("Metric"),XG=i(" implements a Metric backed by one or several "),h_=r("a"),QG=i("Dataset"),eW=i("."),r4=m(),K=r("div"),_(kf.$$.fragment),tW=m(),D0=r("p"),sW=i("A Metric is the base class and common API for all metrics."),aW=m(),_(Gi.$$.fragment),nW=m(),Va=r("div"),_(Ef.$$.fragment),rW=m(),k0=r("p"),oW=i("Add one prediction and reference for the metric\u2019s stack."),lW=m(),_(Wi.$$.fragment),iW=m(),Ua=r("div"),_(qf.$$.fragment),pW=m(),E0=r("p"),cW=i("Add a batch of predictions and references for the metric\u2019s stack."),dW=m(),_(Yi.$$.fragment),mW=m(),xt=r("div"),_(If.$$.fragment),hW=m(),q0=r("p"),fW=i("Compute the metrics."),uW=m(),I0=r("p"),gW=i("Usage of positional arguments is not allowed to prevent mistakes."),_W=m(),_(Ji.$$.fragment),bW=m(),Ki=r("div"),_(Tf.$$.fragment),$W=m(),T0=r("p"),xW=i("Downloads and prepares dataset for reading."),o4=m(),nr=r("h2"),Zi=r("a"),N0=r("span"),_(Nf.$$.fragment),vW=m(),P0=r("span"),yW=i("Filesystems"),l4=m(),C=r("div"),_(Pf.$$.fragment),jW=m(),Xi=r("p"),A0=r("code"),wW=i("datasets.filesystems.S3FileSystem"),DW=i(" is a subclass of "),Af=r("a"),F0=r("code"),kW=i("s3fs.S3FileSystem"),EW=i("."),qW=m(),ns=r("p"),IW=i("Users can use this class to access S3 as if it were a file system. It exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),L0=r("code"),TW=i("key="),NW=i(", "),S0=r("code"),PW=i("secret="),AW=i(") or with boto\u2019s credential methods. See botocore documentation for more information. If no credentials are availabe, use "),O0=r("code"),FW=i("anon=True"),LW=i("."),SW=m(),C0=r("p"),OW=i("Examples:"),CW=m(),z0=r("p"),zW=i("Listing files from public S3 bucket."),VW=m(),_(Qi.$$.fragment),UW=m(),rr=r("p"),MW=i("Listing files from private S3 bucket using "),V0=r("code"),RW=i("aws_access_key_id"),BW=i(" and "),U0=r("code"),HW=i("aws_secret_access_key"),GW=i("."),WW=m(),_(ep.$$.fragment),YW=m(),rs=r("p"),JW=i("Using "),M0=r("code"),KW=i("S3Filesystem"),ZW=i(" with "),R0=r("code"),XW=i("botocore.session.Session"),QW=i(" and custom "),B0=r("code"),eY=i("aws_profile"),tY=i("."),sY=m(),_(tp.$$.fragment),aY=m(),or=r("p"),nY=i("Loading dataset from S3 using "),H0=r("code"),rY=i("S3Filesystem"),oY=i(" and "),f_=r("a"),lY=i("load_from_disk()"),iY=i("."),pY=m(),_(sp.$$.fragment),cY=m(),lr=r("p"),dY=i("Saving dataset to S3 using "),G0=r("code"),mY=i("S3Filesystem"),hY=i(" and "),u_=r("a"),fY=i("Dataset.save_to_disk()"),uY=i("."),gY=m(),_(ap.$$.fragment),i4=m(),ir=r("div"),_(Ff.$$.fragment),_Y=m(),pr=r("p"),bY=i("preprocesses "),W0=r("em"),$Y=i("dataset_path"),xY=i(" and removes remote filesystem (e.g. removing "),Y0=r("code"),vY=i("s3://"),yY=i(")"),p4=m(),cr=r("div"),_(Lf.$$.fragment),jY=m(),J0=r("p"),wY=i("Validates if filesystem has remote protocol."),c4=m(),dr=r("h2"),np=r("a"),K0=r("span"),_(Sf.$$.fragment),DY=m(),Z0=r("span"),kY=i("Fingerprint"),d4=m(),mr=r("div"),_(Of.$$.fragment),EY=m(),X0=r("p"),qY=i("Hasher that accepts python objects as inputs."),this.h()},l(a){const j=vae('[data-svelte="svelte-1phssyn"]',document.head);c=o(j,"META",{name:!0,content:!0}),j.forEach(s),g=h(a),f=o(a,"H1",{class:!0});var Cf=l(f);n=o(Cf,"A",{id:!0,class:!0,href:!0});var Q0=l(n);u=o(Q0,"SPAN",{});var ew=l(u);b(t.$$.fragment,ew),ew.forEach(s),Q0.forEach(s),d=h(Cf),mn=o(Cf,"SPAN",{});var tw=l(mn);us=p(tw,"Main classes"),tw.forEach(s),Cf.forEach(s),Ar=h(a),Oe=o(a,"H2",{class:!0});var zf=l(Oe);be=o(zf,"A",{id:!0,class:!0,href:!0});var sw=l(be);ne=o(sw,"SPAN",{});var aw=l(ne);b(gs.$$.fragment,aw),aw.forEach(s),sw.forEach(s),su=h(zf),Fr=o(zf,"SPAN",{});var nw=l(Fr);WD=p(nw,"DatasetInfo"),nw.forEach(s),zf.forEach(s),j7=h(a),Q=o(a,"DIV",{class:!0});var _e=l(Q);b(Cp.$$.fragment,_e),YD=h(_e),g$=o(_e,"P",{});var rw=l(g$);JD=p(rw,"Information about a dataset."),rw.forEach(s),KD=h(_e),au=o(_e,"P",{});var g_=l(au);_$=o(g_,"EM",{});var ow=l(_$);ZD=p(ow,"DatasetInfo"),ow.forEach(s),XD=p(g_,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),g_.forEach(s),QD=h(_e),b$=o(_e,"P",{});var lw=l(b$);ek=p(lw,"Note: Not all fields are known on construction and may be updated later."),lw.forEach(s),tk=h(_e),$e=o(_e,"DIV",{class:!0});var Je=l($e);b(zp.$$.fragment,Je),sk=h(Je),Vp=o(Je,"P",{});var Vf=l(Vp);ak=p(Vf,"Create DatasetInfo from the JSON file in "),$$=o(Vf,"CODE",{});var iw=l($$);nk=p(iw,"dataset_info_dir"),iw.forEach(s),rk=p(Vf,"."),Vf.forEach(s),ok=h(Je),x$=o(Je,"P",{});var pw=l(x$);lk=p(pw,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),pw.forEach(s),ik=h(Je),v$=o(Je,"P",{});var cw=l(v$);pk=p(cw,"This will overwrite all previous metadata."),cw.forEach(s),ck=h(Je),b(Lr.$$.fragment,Je),Je.forEach(s),dk=h(_e),_s=o(_e,"DIV",{class:!0});var hr=l(_s);b(Up.$$.fragment,hr),mk=h(hr),hn=o(hr,"P",{});var fr=l(hn);hk=p(fr,"Write "),y$=o(fr,"EM",{});var dw=l(y$);fk=p(dw,"DatasetInfo"),dw.forEach(s),uk=p(fr," and license (if present) as JSON files to "),j$=o(fr,"EM",{});var mw=l(j$);gk=p(mw,"dataset_info_dir"),mw.forEach(s),_k=p(fr,"."),fr.forEach(s),bk=h(hr),b(Sr.$$.fragment,hr),hr.forEach(s),_e.forEach(s),w7=h(a),fn=o(a,"H2",{class:!0});var Uf=l(fn);Or=o(Uf,"A",{id:!0,class:!0,href:!0});var hw=l(Or);w$=o(hw,"SPAN",{});var fw=l(w$);b(Mp.$$.fragment,fw),fw.forEach(s),hw.forEach(s),$k=h(Uf),D$=o(Uf,"SPAN",{});var uw=l(D$);xk=p(uw,"Dataset"),uw.forEach(s),Uf.forEach(s),D7=h(a),Cr=o(a,"P",{});var Mf=l(Cr);vk=p(Mf,"The base class "),nu=o(Mf,"A",{href:!0});var gw=l(nu);yk=p(gw,"Dataset"),gw.forEach(s),jk=p(Mf," implements a Dataset backed by an Apache Arrow table."),Mf.forEach(s),k7=h(a),q=o(a,"DIV",{class:!0});var I=l(q);b(Rp.$$.fragment,I),wk=h(I),k$=o(I,"P",{});var _w=l(k$);Dk=p(_w,"A Dataset backed by an Arrow table."),_w.forEach(s),kk=h(I),tt=o(I,"DIV",{class:!0});var os=l(tt);b(Bp.$$.fragment,os),Ek=h(os),E$=o(os,"P",{});var bw=l(E$);qk=p(bw,"Add column to Dataset."),bw.forEach(s),Ik=h(os),q$=o(os,"P",{});var $w=l(q$);I$=o($w,"EM",{});var xw=l(I$);Tk=p(xw,"New in version 1.7."),xw.forEach(s),$w.forEach(s),Nk=h(os),b(zr.$$.fragment,os),os.forEach(s),Pk=h(I),st=o(I,"DIV",{class:!0});var ls=l(st);b(Hp.$$.fragment,ls),Ak=h(ls),T$=o(ls,"P",{});var vw=l(T$);Fk=p(vw,"Add item to Dataset."),vw.forEach(s),Lk=h(ls),N$=o(ls,"P",{});var yw=l(N$);P$=o(yw,"EM",{});var jw=l(P$);Sk=p(jw,"New in version 1.7."),jw.forEach(s),yw.forEach(s),Ok=h(ls),b(Vr.$$.fragment,ls),ls.forEach(s),Ck=h(I),Ur=o(I,"DIV",{class:!0});var Rf=l(Ur);b(Gp.$$.fragment,Rf),zk=h(Rf),A$=o(Rf,"P",{});var ww=l(A$);Vk=p(ww,"Instantiate a Dataset backed by an Arrow table at filename."),ww.forEach(s),Rf.forEach(s),Uk=h(I),Mr=o(I,"DIV",{class:!0});var Bf=l(Mr);b(Wp.$$.fragment,Bf),Mk=h(Bf),F$=o(Bf,"P",{});var Dw=l(F$);Rk=p(Dw,"Instantiate a Dataset backed by an Arrow buffer."),Dw.forEach(s),Bf.forEach(s),Bk=h(I),xe=o(I,"DIV",{class:!0});var Ke=l(xe);b(Yp.$$.fragment,Ke),Hk=h(Ke),At=o(Ke,"P",{});var is=l(At);Gk=p(is,"Convert "),L$=o(is,"CODE",{});var kw=l(L$);Wk=p(kw,"pandas.DataFrame"),kw.forEach(s),Yk=p(is," to a "),S$=o(is,"CODE",{});var Ew=l(S$);Jk=p(Ew,"pyarrow.Table"),Ew.forEach(s),Kk=p(is," to create a "),ru=o(is,"A",{href:!0});var qw=l(ru);Zk=p(qw,"Dataset"),qw.forEach(s),Xk=p(is,"."),is.forEach(s),Qk=h(Ke),Jp=o(Ke,"P",{});var Hf=l(Jp);e3=p(Hf,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),O$=o(Hf,"EM",{});var Iw=l(O$);t3=p(Iw,"object"),Iw.forEach(s),s3=p(Hf,", we need to guess the datatype by looking at the Python objects in this Series."),Hf.forEach(s),a3=h(Ke),Kp=o(Ke,"P",{});var Gf=l(Kp);n3=p(Gf,"Be aware that Series of the "),C$=o(Gf,"EM",{});var Tw=l(C$);r3=p(Tw,"object"),Tw.forEach(s),o3=p(Gf,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),Gf.forEach(s),l3=h(Ke),b(Rr.$$.fragment,Ke),Ke.forEach(s),i3=h(I),Br=o(I,"DIV",{class:!0});var Wf=l(Br);b(Zp.$$.fragment,Wf),p3=h(Wf),Ft=o(Wf,"P",{});var ps=l(Ft);c3=p(ps,"Convert "),z$=o(ps,"CODE",{});var Nw=l(z$);d3=p(Nw,"dict"),Nw.forEach(s),m3=p(ps," to a "),V$=o(ps,"CODE",{});var Pw=l(V$);h3=p(Pw,"pyarrow.Table"),Pw.forEach(s),f3=p(ps," to create a "),ou=o(ps,"A",{href:!0});var Aw=l(ou);u3=p(Aw,"Dataset"),Aw.forEach(s),g3=p(ps,"."),ps.forEach(s),Wf.forEach(s),_3=h(I),bs=o(I,"DIV",{class:!0});var ur=l(bs);b(Xp.$$.fragment,ur),b3=h(ur),U$=o(ur,"P",{});var Fw=l(U$);$3=p(Fw,"The Apache Arrow table backing the dataset."),Fw.forEach(s),x3=h(ur),b(Hr.$$.fragment,ur),ur.forEach(s),v3=h(I),$s=o(I,"DIV",{class:!0});var gr=l($s);b(Qp.$$.fragment,gr),y3=h(gr),M$=o(gr,"P",{});var Lw=l(M$);j3=p(Lw,"The cache files containing the Apache Arrow table backing the dataset."),Lw.forEach(s),w3=h(gr),b(Gr.$$.fragment,gr),gr.forEach(s),D3=h(I),xs=o(I,"DIV",{class:!0});var _r=l(xs);b(ec.$$.fragment,_r),k3=h(_r),R$=o(_r,"P",{});var Sw=l(R$);E3=p(Sw,"Number of columns in the dataset."),Sw.forEach(s),q3=h(_r),b(Wr.$$.fragment,_r),_r.forEach(s),I3=h(I),vs=o(I,"DIV",{class:!0});var br=l(vs);b(tc.$$.fragment,br),T3=h(br),sc=o(br,"P",{});var Yf=l(sc);N3=p(Yf,"Number of rows in the dataset (same as "),Yr=o(Yf,"A",{href:!0});var Jf=l(Yr);P3=p(Jf,"Dataset."),B$=o(Jf,"STRONG",{});var Ow=l(B$);A3=p(Ow,"len"),Ow.forEach(s),F3=p(Jf,"()"),Jf.forEach(s),L3=p(Yf,")."),Yf.forEach(s),S3=h(br),b(Jr.$$.fragment,br),br.forEach(s),O3=h(I),ys=o(I,"DIV",{class:!0});var $r=l(ys);b(ac.$$.fragment,$r),C3=h($r),H$=o($r,"P",{});var Cw=l(H$);z3=p(Cw,"Names of the columns in the dataset."),Cw.forEach(s),V3=h($r),b(Kr.$$.fragment,$r),$r.forEach(s),U3=h(I),js=o(I,"DIV",{class:!0});var xr=l(js);b(nc.$$.fragment,xr),M3=h(xr),G$=o(xr,"P",{});var zw=l(G$);R3=p(zw,"Shape of the dataset (number of columns, number of rows)."),zw.forEach(s),B3=h(xr),b(Zr.$$.fragment,xr),xr.forEach(s),H3=h(I),at=o(I,"DIV",{class:!0});var cs=l(at);b(rc.$$.fragment,cs),G3=h(cs),W$=o(cs,"P",{});var Vw=l(W$);W3=p(Vw,"Return a list of the unique elements in a column."),Vw.forEach(s),Y3=h(cs),Y$=o(cs,"P",{});var Uw=l(Y$);J3=p(Uw,"This is implemented in the low-level backend and as such, very fast."),Uw.forEach(s),K3=h(cs),b(Xr.$$.fragment,cs),cs.forEach(s),Z3=h(I),ws=o(I,"DIV",{class:!0});var vr=l(ws);b(oc.$$.fragment,vr),X3=h(vr),J$=o(vr,"P",{});var Mw=l(J$);Q3=p(Mw,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),Mw.forEach(s),e8=h(vr),b(Qr.$$.fragment,vr),vr.forEach(s),t8=h(I),Ds=o(I,"DIV",{class:!0});var yr=l(Ds);b(lc.$$.fragment,yr),s8=h(yr),K$=o(yr,"P",{});var Rw=l(K$);a8=p(Rw,"Cast the dataset to a new set of features."),Rw.forEach(s),n8=h(yr),b(eo.$$.fragment,yr),yr.forEach(s),r8=h(I),ks=o(I,"DIV",{class:!0});var jr=l(ks);b(ic.$$.fragment,jr),o8=h(jr),Z$=o(jr,"P",{});var Bw=l(Z$);l8=p(Bw,"Cast column to feature for decoding."),Bw.forEach(s),i8=h(jr),b(to.$$.fragment,jr),jr.forEach(s),p8=h(I),nt=o(I,"DIV",{class:!0});var ds=l(nt);b(pc.$$.fragment,ds),c8=h(ds),X$=o(ds,"P",{});var Hw=l(X$);d8=p(Hw,"Remove one or several column(s) in the dataset and the features associated to them."),Hw.forEach(s),m8=h(ds),un=o(ds,"P",{});var wr=l(un);h8=p(wr,"You can also remove a column using "),lu=o(wr,"A",{href:!0});var Gw=l(lu);f8=p(Gw,"Dataset.map()"),Gw.forEach(s),u8=p(wr," with "),Q$=o(wr,"EM",{});var Ww=l(Q$);g8=p(Ww,"remove_columns"),Ww.forEach(s),_8=p(wr,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),wr.forEach(s),b8=h(ds),b(so.$$.fragment,ds),ds.forEach(s),$8=h(I),Es=o(I,"DIV",{class:!0});var Dr=l(Es);b(cc.$$.fragment,Dr),x8=h(Dr),e1=o(Dr,"P",{});var Yw=l(e1);v8=p(Yw,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),Yw.forEach(s),y8=h(Dr),b(ao.$$.fragment,Dr),Dr.forEach(s),j8=h(I),qs=o(I,"DIV",{class:!0});var kr=l(qs);b(dc.$$.fragment,kr),w8=h(kr),t1=o(kr,"P",{});var Jw=l(t1);D8=p(Jw,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),Jw.forEach(s),k8=h(kr),b(no.$$.fragment,kr),kr.forEach(s),E8=h(I),Is=o(I,"DIV",{class:!0});var Er=l(Is);b(mc.$$.fragment,Er),q8=h(Er),hc=o(Er,"P",{});var Kf=l(hc);I8=p(Kf,"Casts the given column as :obj:"),s1=o(Kf,"CODE",{});var Kw=l(s1);T8=p(Kw,"datasets.features.ClassLabel"),Kw.forEach(s),N8=p(Kf," and updates the table."),Kf.forEach(s),P8=h(Er),b(ro.$$.fragment,Er),Er.forEach(s),A8=h(I),Ts=o(I,"DIV",{class:!0});var qr=l(Ts);b(fc.$$.fragment,qr),F8=h(qr),a1=o(qr,"P",{});var Zw=l(a1);L8=p(Zw,"Number of rows in the dataset."),Zw.forEach(s),S8=h(qr),b(oo.$$.fragment,qr),qr.forEach(s),O8=h(I),Ns=o(I,"DIV",{class:!0});var Ir=l(Ns);b(uc.$$.fragment,Ir),C8=h(Ir),n1=o(Ir,"P",{});var Xw=l(n1);z8=p(Xw,"Iterate through the examples."),Xw.forEach(s),V8=h(Ir),gc=o(Ir,"P",{});var Zf=l(gc);U8=p(Zf,"If a formatting is set with "),iu=o(Zf,"A",{href:!0});var Qw=l(iu);M8=p(Qw,"Dataset.set_format()"),Qw.forEach(s),R8=p(Zf,` rows will be returned with the
selected format.`),Zf.forEach(s),Ir.forEach(s),B8=h(I),lo=o(I,"DIV",{class:!0});var Xf=l(lo);b(_c.$$.fragment,Xf),H8=h(Xf),gn=o(Xf,"P",{});var Tr=l(gn);G8=p(Tr,"To be used in a "),r1=o(Tr,"CODE",{});var e7=l(r1);W8=p(e7,"with"),e7.forEach(s),Y8=p(Tr," statement. Set "),o1=o(Tr,"CODE",{});var t7=l(o1);J8=p(t7,"__getitem__"),t7.forEach(s),K8=p(Tr," return format (type and columns)."),Tr.forEach(s),Xf.forEach(s),Z8=h(I),ve=o(I,"DIV",{class:!0});var Ze=l(ve);b(bc.$$.fragment,Ze),X8=h(Ze),Ce=o(Ze,"P",{});var Xe=l(Ce);Q8=p(Xe,"Set "),l1=o(Xe,"STRONG",{});var s7=l(l1);eE=p(s7,"getitem"),s7.forEach(s),tE=p(Xe,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),i1=o(Xe,"CODE",{});var a7=l(i1);sE=p(a7,"type"),a7.forEach(s),aE=p(Xe," (for example \u201Cnumpy\u201D) is used to format batches when using "),p1=o(Xe,"STRONG",{});var n7=l(p1);nE=p(n7,"getitem"),n7.forEach(s),rE=p(Xe,`.
It\u2019s also possible to use custom transforms for formatting using `),pu=o(Xe,"A",{href:!0});var r7=l(pu);oE=p(r7,"datasets.Dataset.set_transform()"),r7.forEach(s),lE=p(Xe,"."),Xe.forEach(s),iE=h(Ze),ze=o(Ze,"P",{});var Qe=l(ze);pE=p(Qe,"It is possible to call "),c1=o(Qe,"CODE",{});var o7=l(c1);cE=p(o7,"map"),o7.forEach(s),dE=p(Qe," after calling "),d1=o(Qe,"CODE",{});var l7=l(d1);mE=p(l7,"set_format"),l7.forEach(s),hE=p(Qe,". Since "),m1=o(Qe,"CODE",{});var i7=l(m1);fE=p(i7,"map"),i7.forEach(s),uE=p(Qe,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),h1=o(Qe,"CODE",{});var p7=l(h1);gE=p(p7,"map"),p7.forEach(s),_E=p(Qe," on a dataset to add a new column, then this column will be formatted:"),Qe.forEach(s),bE=h(Ze),f1=o(Ze,"P",{});var c7=l(f1);$E=p(c7,"new formatted columns = (all columns - previously unformatted columns)"),c7.forEach(s),xE=h(Ze),b(io.$$.fragment,Ze),Ze.forEach(s),vE=h(I),Ps=o(I,"DIV",{class:!0});var Nr=l(Ps);b($c.$$.fragment,Nr),yE=h(Nr),rt=o(Nr,"P",{});var vt=l(rt);jE=p(vt,"Set "),u1=o(vt,"STRONG",{});var d7=l(u1);wE=p(d7,"getitem"),d7.forEach(s),DE=p(vt," return format using this transform. The transform is applied on-the-fly on batches when "),g1=o(vt,"STRONG",{});var m7=l(g1);kE=p(m7,"getitem"),m7.forEach(s),EE=p(vt,` is called.
As `),cu=o(vt,"A",{href:!0});var h7=l(cu);qE=p(h7,"datasets.Dataset.set_format()"),h7.forEach(s),IE=p(vt,", this can be reset using "),du=o(vt,"A",{href:!0});var f7=l(du);TE=p(f7,"datasets.Dataset.reset_format()"),f7.forEach(s),vt.forEach(s),NE=h(Nr),b(po.$$.fragment,Nr),Nr.forEach(s),PE=h(I),ot=o(I,"DIV",{class:!0});var ms=l(ot);b(xc.$$.fragment,ms),AE=h(ms),vc=o(ms,"P",{});var Qf=l(vc);FE=p(Qf,"Reset "),_1=o(Qf,"STRONG",{});var u7=l(_1);LE=p(u7,"getitem"),u7.forEach(s),SE=p(Qf," return format to python objects and all columns."),Qf.forEach(s),OE=h(ms),mu=o(ms,"P",{});var __=l(mu);CE=p(__,"Same as "),b1=o(__,"CODE",{});var g7=l(b1);zE=p(g7,"self.set_format()"),g7.forEach(s),__.forEach(s),VE=h(ms),b(co.$$.fragment,ms),ms.forEach(s),UE=h(I),ye=o(I,"DIV",{class:!0});var et=l(ye);b(yc.$$.fragment,et),ME=h(et),Lt=o(et,"P",{});var hs=l(Lt);RE=p(hs,"Set "),$1=o(hs,"STRONG",{});var _7=l($1);BE=p(_7,"getitem"),_7.forEach(s),HE=p(hs,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),x1=o(hs,"CODE",{});var b7=l(x1);GE=p(b7,"type"),b7.forEach(s),WE=p(hs," (for example \u201Cnumpy\u201D) is used to format batches when using "),v1=o(hs,"STRONG",{});var $7=l(v1);YE=p($7,"getitem"),$7.forEach(s),JE=p(hs,"."),hs.forEach(s),KE=h(et),jc=o(et,"P",{});var eu=l(jc);ZE=p(eu,"It\u2019s also possible to use custom transforms for formatting using "),hu=o(eu,"A",{href:!0});var x7=l(hu);XE=p(x7,"datasets.Dataset.with_transform()"),x7.forEach(s),QE=p(eu,"."),eu.forEach(s),e5=h(et),_n=o(et,"P",{});var Pr=l(_n);t5=p(Pr,"Contrary to "),fu=o(Pr,"A",{href:!0});var RY=l(fu);s5=p(RY,"datasets.Dataset.set_format()"),RY.forEach(s),a5=p(Pr,", "),y1=o(Pr,"CODE",{});var BY=l(y1);n5=p(BY,"with_format"),BY.forEach(s),r5=p(Pr," returns a new Dataset object."),Pr.forEach(s),o5=h(et),b(mo.$$.fragment,et),et.forEach(s),l5=h(I),je=o(I,"DIV",{class:!0});var Ma=l(je);b(wc.$$.fragment,Ma),i5=h(Ma),bn=o(Ma,"P",{});var b_=l(bn);p5=p(b_,"Set "),j1=o(b_,"STRONG",{});var HY=l(j1);c5=p(HY,"getitem"),HY.forEach(s),d5=p(b_," return format using this transform. The transform is applied on-the-fly on batches when "),w1=o(b_,"STRONG",{});var GY=l(w1);m5=p(GY,"getitem"),GY.forEach(s),h5=p(b_," is called."),b_.forEach(s),f5=h(Ma),$n=o(Ma,"P",{});var $_=l($n);u5=p($_,"As "),uu=o($_,"A",{href:!0});var WY=l(uu);g5=p(WY,"datasets.Dataset.set_format()"),WY.forEach(s),_5=p($_,", this can be reset using "),gu=o($_,"A",{href:!0});var YY=l(gu);b5=p(YY,"datasets.Dataset.reset_format()"),YY.forEach(s),$5=p($_,"."),$_.forEach(s),x5=h(Ma),xn=o(Ma,"P",{});var x_=l(xn);v5=p(x_,"Contrary to "),_u=o(x_,"A",{href:!0});var JY=l(_u);y5=p(JY,"datasets.Dataset.set_transform()"),JY.forEach(s),j5=p(x_,", "),D1=o(x_,"CODE",{});var KY=l(D1);w5=p(KY,"with_transform"),KY.forEach(s),D5=p(x_," returns a new Dataset object."),x_.forEach(s),k5=h(Ma),b(ho.$$.fragment,Ma),Ma.forEach(s),E5=h(I),fo=o(I,"DIV",{class:!0});var h4=l(fo);b(Dc.$$.fragment,h4),q5=h(h4),k1=o(h4,"P",{});var ZY=l(k1);I5=p(ZY,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),ZY.forEach(s),h4.forEach(s),T5=h(I),lt=o(I,"DIV",{class:!0});var rp=l(lt);b(kc.$$.fragment,rp),N5=h(rp),E1=o(rp,"P",{});var XY=l(E1);P5=p(XY,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),XY.forEach(s),A5=h(rp),q1=o(rp,"P",{});var QY=l(q1);F5=p(QY,"Be careful when running this command that no other process is currently using other cache files."),QY.forEach(s),L5=h(rp),b(uo.$$.fragment,rp),rp.forEach(s),S5=h(I),we=o(I,"DIV",{class:!0});var Ra=l(we);b(Ec.$$.fragment,Ra),O5=h(Ra),I1=o(Ra,"P",{});var eJ=l(I1);C5=p(eJ,`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),eJ.forEach(s),z5=h(Ra),qc=o(Ra,"P",{});var f4=l(qc);V5=p(f4,"You can specify whether the function should be batched or not with the "),T1=o(f4,"CODE",{});var tJ=l(T1);U5=p(tJ,"batched"),tJ.forEach(s),M5=p(f4," parameter:"),f4.forEach(s),R5=h(Ra),vn=o(Ra,"UL",{});var v_=l(vn);N1=o(v_,"LI",{});var sJ=l(N1);B5=p(sJ,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),sJ.forEach(s),H5=h(v_),P1=o(v_,"LI",{});var aJ=l(P1);G5=p(aJ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),aJ.forEach(s),W5=h(v_),de=o(v_,"LI",{});var yt=l(de);Y5=p(yt,"If batched is True and batch_size is "),A1=o(yt,"CODE",{});var nJ=l(A1);J5=p(nJ,"n"),nJ.forEach(s),K5=p(yt," > 1, then the function takes a batch of "),F1=o(yt,"CODE",{});var rJ=l(F1);Z5=p(rJ,"n"),rJ.forEach(s),X5=p(yt," examples as input and can return a batch with "),L1=o(yt,"CODE",{});var oJ=l(L1);Q5=p(oJ,"n"),oJ.forEach(s),e6=p(yt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),S1=o(yt,"CODE",{});var lJ=l(S1);t6=p(lJ,"n"),lJ.forEach(s),s6=p(yt,` examples.
A batch is a dictionary, e.g. a batch of `),O1=o(yt,"CODE",{});var iJ=l(O1);a6=p(iJ,"n"),iJ.forEach(s),n6=p(yt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),yt.forEach(s),v_.forEach(s),r6=h(Ra),b(go.$$.fragment,Ra),Ra.forEach(s),o6=h(I),As=o(I,"DIV",{class:!0});var y_=l(As);b(Ic.$$.fragment,y_),l6=h(y_),C1=o(y_,"P",{});var pJ=l(C1);i6=p(pJ,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),pJ.forEach(s),p6=h(y_),b(_o.$$.fragment,y_),y_.forEach(s),c6=h(I),Fs=o(I,"DIV",{class:!0});var j_=l(Fs);b(Tc.$$.fragment,j_),d6=h(j_),z1=o(j_,"P",{});var cJ=l(z1);m6=p(cJ,"Create a new dataset with rows selected following the list/array of indices."),cJ.forEach(s),h6=h(j_),b(bo.$$.fragment,j_),j_.forEach(s),f6=h(I),it=o(I,"DIV",{class:!0});var op=l(it);b(Nc.$$.fragment,op),u6=h(op),V1=o(op,"P",{});var dJ=l(V1);g6=p(dJ,"Create a new dataset sorted according to a column."),dJ.forEach(s),_6=h(op),U1=o(op,"P",{});var mJ=l(U1);b6=p(mJ,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),mJ.forEach(s),$6=h(op),b($o.$$.fragment,op),op.forEach(s),x6=h(I),pt=o(I,"DIV",{class:!0});var lp=l(pt);b(Pc.$$.fragment,lp),v6=h(lp),M1=o(lp,"P",{});var hJ=l(M1);y6=p(hJ,"Create a new Dataset where the rows are shuffled."),hJ.forEach(s),j6=h(lp),R1=o(lp,"P",{});var fJ=l(R1);w6=p(fJ,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),fJ.forEach(s),D6=h(lp),b(xo.$$.fragment,lp),lp.forEach(s),k6=h(I),ct=o(I,"DIV",{class:!0});var ip=l(ct);b(Ac.$$.fragment,ip),E6=h(ip),Y=o(ip,"P",{});var pe=l(Y);q6=p(pe,"Return a dictionary ("),B1=o(pe,"CODE",{});var uJ=l(B1);I6=p(uJ,"datasets.DatasetDict"),uJ.forEach(s),T6=p(pe,") with two random train and test subsets ("),H1=o(pe,"EM",{});var gJ=l(H1);N6=p(gJ,"train"),gJ.forEach(s),P6=p(pe," and "),G1=o(pe,"EM",{});var _J=l(G1);A6=p(_J,"test"),_J.forEach(s),F6=h(pe),W1=o(pe,"CODE",{});var bJ=l(W1);L6=p(bJ,"Dataset"),bJ.forEach(s),S6=p(pe,` splits).
Splits are created from the dataset according to `),Y1=o(pe,"EM",{});var $J=l(Y1);O6=p($J,"test_size"),$J.forEach(s),C6=p(pe,", "),J1=o(pe,"EM",{});var xJ=l(J1);z6=p(xJ,"train_size"),xJ.forEach(s),V6=p(pe," and "),K1=o(pe,"EM",{});var vJ=l(K1);U6=p(vJ,"shuffle"),vJ.forEach(s),M6=p(pe,"."),pe.forEach(s),R6=h(ip),Fc=o(ip,"P",{});var u4=l(Fc);B6=p(u4,"This method is similar to scikit-learn "),Z1=o(u4,"EM",{});var yJ=l(Z1);H6=p(yJ,"train_test_split"),yJ.forEach(s),G6=p(u4,"."),u4.forEach(s),W6=h(ip),b(vo.$$.fragment,ip),ip.forEach(s),Y6=h(I),re=o(I,"DIV",{class:!0});var jt=l(re);b(Lc.$$.fragment,jt),J6=h(jt),yn=o(jt,"P",{});var w_=l(yn);K6=p(w_,"Return the "),X1=o(w_,"EM",{});var jJ=l(X1);Z6=p(jJ,"index"),jJ.forEach(s),X6=p(w_,"-nth shard from dataset split into "),Q1=o(w_,"EM",{});var wJ=l(Q1);Q6=p(wJ,"num_shards"),wJ.forEach(s),eq=p(w_," pieces."),w_.forEach(s),tq=h(jt),e2=o(jt,"P",{});var DJ=l(e2);sq=p(DJ,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),DJ.forEach(s),aq=h(jt),Sc=o(jt,"P",{});var g4=l(Sc);nq=p(g4,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),t2=o(g4,"EM",{});var kJ=l(t2);rq=p(kJ,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),kJ.forEach(s),oq=p(g4,` will return
a dataset with the same order as the original.`),g4.forEach(s),lq=h(jt),s2=o(jt,"P",{});var EJ=l(s2);iq=p(EJ,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),EJ.forEach(s),pq=h(jt),b(yo.$$.fragment,jt),jt.forEach(s),cq=h(I),Ls=o(I,"DIV",{class:!0});var D_=l(Ls);b(Oc.$$.fragment,D_),dq=h(D_),a2=o(D_,"P",{});var qJ=l(a2);mq=p(qJ,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict(). The dataset will yield
dicts for both inputs and labels unless the dict would contain only a single key, in which case a raw
tf.Tensor is yielded instead.`),qJ.forEach(s),hq=h(D_),b(jo.$$.fragment,D_),D_.forEach(s),fq=h(I),dt=o(I,"DIV",{class:!0});var pp=l(dt);b(Cc.$$.fragment,pp),uq=h(pp),n2=o(pp,"P",{});var IJ=l(n2);gq=p(IJ,`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),IJ.forEach(s),_q=h(pp),St=o(pp,"P",{});var cp=l(St);bq=p(cp,"The resulting Parquet files are self-contained by default: if your dataset contains "),bu=o(cp,"A",{href:!0});var TJ=l(bu);$q=p(TJ,"Image"),TJ.forEach(s),xq=p(cp," or "),$u=o(cp,"A",{href:!0});var NJ=l($u);vq=p(NJ,"Audio"),NJ.forEach(s),yq=p(cp,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),r2=o(cp,"EM",{});var PJ=l(r2);jq=p(PJ,"embed_external_files"),PJ.forEach(s),wq=p(cp," to False."),cp.forEach(s),Dq=h(pp),b(wo.$$.fragment,pp),pp.forEach(s),kq=h(I),Z=o(I,"DIV",{class:!0});var Le=l(Z);b(zc.$$.fragment,Le),Eq=h(Le),jn=o(Le,"P",{});var k_=l(jn);qq=p(k_,"Saves a dataset to a dataset directory, or in a filesystem using either "),xu=o(k_,"A",{href:!0});var AJ=l(xu);Iq=p(AJ,"S3FileSystem"),AJ.forEach(s),Tq=p(k_,` or
any implementation of `),o2=o(k_,"CODE",{});var FJ=l(o2);Nq=p(FJ,"fsspec.spec.AbstractFileSystem"),FJ.forEach(s),Pq=p(k_,"."),k_.forEach(s),Aq=h(Le),wn=o(Le,"P",{});var E_=l(wn);Fq=p(E_,"For "),vu=o(E_,"A",{href:!0});var LJ=l(vu);Lq=p(LJ,"Image"),LJ.forEach(s),Sq=p(E_," and "),yu=o(E_,"A",{href:!0});var SJ=l(yu);Oq=p(SJ,"Audio"),SJ.forEach(s),Cq=p(E_," data:"),E_.forEach(s),zq=h(Le),Vc=o(Le,"P",{});var _4=l(Vc);Vq=p(_4,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),l2=o(_4,"EM",{});var OJ=l(l2);Uq=p(OJ,"read()"),OJ.forEach(s),Mq=p(_4," those files first."),_4.forEach(s),Rq=h(Le),b(Do.$$.fragment,Le),Bq=h(Le),b(ko.$$.fragment,Le),Hq=h(Le),b(Eo.$$.fragment,Le),Le.forEach(s),Gq=h(I),Ss=o(I,"DIV",{class:!0});var q_=l(Ss);b(Uc.$$.fragment,q_),Wq=h(q_),Ot=o(q_,"P",{});var dp=l(Ot);Yq=p(dp,"Loads a dataset that was previously saved using "),i2=o(dp,"CODE",{});var CJ=l(i2);Jq=p(CJ,"save_to_disk"),CJ.forEach(s),Kq=p(dp,` from a dataset directory, or from a
filesystem using either `),ju=o(dp,"A",{href:!0});var zJ=l(ju);Zq=p(zJ,"S3FileSystem"),zJ.forEach(s),Xq=p(dp,` or any implementation of
`),p2=o(dp,"CODE",{});var VJ=l(p2);Qq=p(VJ,"fsspec.spec.AbstractFileSystem"),VJ.forEach(s),e9=p(dp,"."),dp.forEach(s),t9=h(q_),b(qo.$$.fragment,q_),q_.forEach(s),s9=h(I),Io=o(I,"DIV",{class:!0});var b4=l(Io);b(Mc.$$.fragment,b4),a9=h(b4),c2=o(b4,"P",{});var UJ=l(c2);n9=p(UJ,"Create and cache a new Dataset by flattening the indices mapping."),UJ.forEach(s),b4.forEach(s),r9=h(I),Os=o(I,"DIV",{class:!0});var I_=l(Os);b(Rc.$$.fragment,I_),o9=h(I_),d2=o(I_,"P",{});var MJ=l(d2);l9=p(MJ,"Exports the dataset to csv"),MJ.forEach(s),i9=h(I_),b(To.$$.fragment,I_),I_.forEach(s),p9=h(I),Cs=o(I,"DIV",{class:!0});var T_=l(Cs);b(Bc.$$.fragment,T_),c9=h(T_),Hc=o(T_,"P",{});var $4=l(Hc);d9=p($4,"Returns the dataset as a "),m2=o($4,"CODE",{});var RJ=l(m2);m9=p(RJ,"pandas.DataFrame"),RJ.forEach(s),h9=p($4,". Can also return a generator for large datasets."),$4.forEach(s),f9=h(T_),b(No.$$.fragment,T_),T_.forEach(s),u9=h(I),zs=o(I,"DIV",{class:!0});var N_=l(zs);b(Gc.$$.fragment,N_),g9=h(N_),h2=o(N_,"P",{});var BJ=l(h2);_9=p(BJ,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),BJ.forEach(s),b9=h(N_),b(Po.$$.fragment,N_),N_.forEach(s),$9=h(I),Vs=o(I,"DIV",{class:!0});var P_=l(Vs);b(Wc.$$.fragment,P_),x9=h(P_),f2=o(P_,"P",{});var HJ=l(f2);v9=p(HJ,"Export the dataset to JSON Lines or JSON."),HJ.forEach(s),y9=h(P_),b(Ao.$$.fragment,P_),P_.forEach(s),j9=h(I),Us=o(I,"DIV",{class:!0});var A_=l(Us);b(Yc.$$.fragment,A_),w9=h(A_),u2=o(A_,"P",{});var GJ=l(u2);D9=p(GJ,"Exports the dataset to parquet"),GJ.forEach(s),k9=h(A_),b(Fo.$$.fragment,A_),A_.forEach(s),E9=h(I),mt=o(I,"DIV",{class:!0});var mp=l(mt);b(Jc.$$.fragment,mp),q9=h(mp),Dn=o(mp,"P",{});var F_=l(Dn);I9=p(F_,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),g2=o(F_,"CODE",{});var WJ=l(g2);T9=p(WJ,"device"),WJ.forEach(s),N9=p(F_," if you want to run it on GPU ("),_2=o(F_,"CODE",{});var YJ=l(_2);P9=p(YJ,"device"),YJ.forEach(s),A9=p(F_,` must be the GPU index).
You can find more information about Faiss here:`),F_.forEach(s),F9=h(mp),b2=o(mp,"UL",{});var JJ=l(b2);wu=o(JJ,"LI",{});var IY=l(wu);L9=p(IY,"For "),Kc=o(IY,"A",{href:!0,rel:!0});var KJ=l(Kc);S9=p(KJ,"string factory"),KJ.forEach(s),IY.forEach(s),JJ.forEach(s),O9=h(mp),b(Lo.$$.fragment,mp),mp.forEach(s),C9=h(I),Ms=o(I,"DIV",{class:!0});var L_=l(Ms);b(Zc.$$.fragment,L_),z9=h(L_),Ct=o(L_,"P",{});var hp=l(Ct);V9=p(hp,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),$2=o(hp,"EM",{});var ZJ=l($2);U9=p(ZJ,"external_arrays"),ZJ.forEach(s),M9=p(hp,`.
You can specify `),x2=o(hp,"EM",{});var XJ=l(x2);R9=p(XJ,"device"),XJ.forEach(s),B9=p(hp," if you want to run it on GPU ("),v2=o(hp,"EM",{});var QJ=l(v2);H9=p(QJ,"device"),QJ.forEach(s),G9=p(hp,` must be the GPU index).
You can find more information about Faiss here:`),hp.forEach(s),W9=h(L_),y2=o(L_,"UL",{});var eK=l(y2);Du=o(eK,"LI",{});var TY=l(Du);Y9=p(TY,"For "),Xc=o(TY,"A",{href:!0,rel:!0});var tK=l(Xc);J9=p(tK,"string factory"),tK.forEach(s),TY.forEach(s),eK.forEach(s),L_.forEach(s),K9=h(I),So=o(I,"DIV",{class:!0});var x4=l(So);b(Qc.$$.fragment,x4),Z9=h(x4),j2=o(x4,"P",{});var sK=l(j2);X9=p(sK,"Save a FaissIndex on disk."),sK.forEach(s),x4.forEach(s),Q9=h(I),Rs=o(I,"DIV",{class:!0});var S_=l(Rs);b(ed.$$.fragment,S_),eI=h(S_),w2=o(S_,"P",{});var aK=l(w2);tI=p(aK,"Load a FaissIndex from disk."),aK.forEach(s),sI=h(S_),td=o(S_,"P",{});var v4=l(td);aI=p(v4,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),D2=o(v4,"EM",{});var nK=l(D2);nI=p(nK,".get_index(index_name).faiss_index"),nK.forEach(s),rI=p(v4," to make it fit your needs."),v4.forEach(s),S_.forEach(s),oI=h(I),Bs=o(I,"DIV",{class:!0});var O_=l(Bs);b(sd.$$.fragment,O_),lI=h(O_),k2=o(O_,"P",{});var rK=l(k2);iI=p(rK,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),rK.forEach(s),pI=h(O_),b(Oo.$$.fragment,O_),O_.forEach(s),cI=h(I),Hs=o(I,"DIV",{class:!0});var C_=l(Hs);b(ad.$$.fragment,C_),dI=h(C_),E2=o(C_,"P",{});var oK=l(E2);mI=p(oK,"Load an existing text index using ElasticSearch for fast retrieval."),oK.forEach(s),hI=h(C_),b(Co.$$.fragment,C_),C_.forEach(s),fI=h(I),zo=o(I,"DIV",{class:!0});var y4=l(zo);b(nd.$$.fragment,y4),uI=h(y4),q2=o(y4,"P",{});var lK=l(q2);gI=p(lK,"List the colindex_nameumns/identifiers of all the attached indexes."),lK.forEach(s),y4.forEach(s),_I=h(I),Vo=o(I,"DIV",{class:!0});var j4=l(Vo);b(rd.$$.fragment,j4),bI=h(j4),I2=o(j4,"P",{});var iK=l(I2);$I=p(iK,"List the index_name/identifiers of all the attached indexes."),iK.forEach(s),j4.forEach(s),xI=h(I),Uo=o(I,"DIV",{class:!0});var w4=l(Uo);b(od.$$.fragment,w4),vI=h(w4),T2=o(w4,"P",{});var pK=l(T2);yI=p(pK,"Drop the index with the specified column."),pK.forEach(s),w4.forEach(s),jI=h(I),Mo=o(I,"DIV",{class:!0});var D4=l(Mo);b(ld.$$.fragment,D4),wI=h(D4),N2=o(D4,"P",{});var cK=l(N2);DI=p(cK,"Find the nearest examples indices in the dataset to the query."),cK.forEach(s),D4.forEach(s),kI=h(I),Ro=o(I,"DIV",{class:!0});var k4=l(Ro);b(id.$$.fragment,k4),EI=h(k4),P2=o(k4,"P",{});var dK=l(P2);qI=p(dK,"Find the nearest examples indices in the dataset to the query."),dK.forEach(s),k4.forEach(s),II=h(I),Bo=o(I,"DIV",{class:!0});var E4=l(Bo);b(pd.$$.fragment,E4),TI=h(E4),A2=o(E4,"P",{});var mK=l(A2);NI=p(mK,"Find the nearest examples in the dataset to the query."),mK.forEach(s),E4.forEach(s),PI=h(I),Ho=o(I,"DIV",{class:!0});var q4=l(Ho);b(cd.$$.fragment,q4),AI=h(q4),F2=o(q4,"P",{});var hK=l(F2);FI=p(hK,"Find the nearest examples in the dataset to the query."),hK.forEach(s),q4.forEach(s),LI=h(I),Go=o(I,"DIV",{class:!0});var I4=l(Go);b(dd.$$.fragment,I4),SI=h(I4),ku=o(I4,"P",{});var NY=l(ku);Eu=o(NY,"A",{href:!0});var fK=l(Eu);OI=p(fK,"datasets.DatasetInfo"),fK.forEach(s),CI=p(NY," object containing all the metadata in the dataset."),NY.forEach(s),I4.forEach(s),zI=h(I),Wo=o(I,"DIV",{class:!0});var T4=l(Wo);b(md.$$.fragment,T4),VI=h(T4),qu=o(T4,"P",{});var PY=l(qu);Iu=o(PY,"A",{href:!0});var uK=l(Iu);UI=p(uK,"datasets.NamedSplit"),uK.forEach(s),MI=p(PY," object corresponding to a named dataset split."),PY.forEach(s),T4.forEach(s),RI=h(I),Tu=o(I,"DIV",{class:!0});var gK=l(Tu);b(hd.$$.fragment,gK),gK.forEach(s),BI=h(I),Nu=o(I,"DIV",{class:!0});var _K=l(Nu);b(fd.$$.fragment,_K),_K.forEach(s),HI=h(I),Pu=o(I,"DIV",{class:!0});var bK=l(Pu);b(ud.$$.fragment,bK),bK.forEach(s),GI=h(I),Au=o(I,"DIV",{class:!0});var $K=l(Au);b(gd.$$.fragment,$K),$K.forEach(s),WI=h(I),Fu=o(I,"DIV",{class:!0});var xK=l(Fu);b(_d.$$.fragment,xK),xK.forEach(s),YI=h(I),Lu=o(I,"DIV",{class:!0});var vK=l(Lu);b(bd.$$.fragment,vK),vK.forEach(s),JI=h(I),Su=o(I,"DIV",{class:!0});var yK=l(Su);b($d.$$.fragment,yK),yK.forEach(s),KI=h(I),Ou=o(I,"DIV",{class:!0});var jK=l(Ou);b(xd.$$.fragment,jK),jK.forEach(s),ZI=h(I),Cu=o(I,"DIV",{class:!0});var wK=l(Cu);b(vd.$$.fragment,wK),wK.forEach(s),XI=h(I),zu=o(I,"DIV",{class:!0});var DK=l(zu);b(yd.$$.fragment,DK),DK.forEach(s),QI=h(I),Vu=o(I,"DIV",{class:!0});var kK=l(Vu);b(jd.$$.fragment,kK),kK.forEach(s),eT=h(I),Uu=o(I,"DIV",{class:!0});var EK=l(Uu);b(wd.$$.fragment,EK),EK.forEach(s),tT=h(I),Mu=o(I,"DIV",{class:!0});var qK=l(Mu);b(Dd.$$.fragment,qK),qK.forEach(s),sT=h(I),Gs=o(I,"DIV",{class:!0});var z_=l(Gs);b(kd.$$.fragment,z_),aT=h(z_),L2=o(z_,"P",{});var IK=l(L2);nT=p(IK,"Create Dataset from CSV file(s)."),IK.forEach(s),rT=h(z_),b(Yo.$$.fragment,z_),z_.forEach(s),oT=h(I),Ws=o(I,"DIV",{class:!0});var V_=l(Ws);b(Ed.$$.fragment,V_),lT=h(V_),S2=o(V_,"P",{});var TK=l(S2);iT=p(TK,"Create Dataset from JSON or JSON Lines file(s)."),TK.forEach(s),pT=h(V_),b(Jo.$$.fragment,V_),V_.forEach(s),cT=h(I),Ys=o(I,"DIV",{class:!0});var U_=l(Ys);b(qd.$$.fragment,U_),dT=h(U_),O2=o(U_,"P",{});var NK=l(O2);mT=p(NK,"Create Dataset from Parquet file(s)."),NK.forEach(s),hT=h(U_),b(Ko.$$.fragment,U_),U_.forEach(s),fT=h(I),Js=o(I,"DIV",{class:!0});var M_=l(Js);b(Id.$$.fragment,M_),uT=h(M_),C2=o(M_,"P",{});var PK=l(C2);gT=p(PK,"Create Dataset from text file(s)."),PK.forEach(s),_T=h(M_),b(Zo.$$.fragment,M_),M_.forEach(s),bT=h(I),Ks=o(I,"DIV",{class:!0});var R_=l(Ks);b(Td.$$.fragment,R_),$T=h(R_),kn=o(R_,"P",{});var B_=l(kn);xT=p(B_,"Prepare a dataset for the given task by casting the dataset\u2019s "),Ru=o(B_,"A",{href:!0});var AK=l(Ru);vT=p(AK,"Features"),AK.forEach(s),yT=p(B_," to standardized column names and types as detailed in "),Bu=o(B_,"A",{href:!0});var FK=l(Bu);jT=p(FK,"datasets.tasks"),FK.forEach(s),wT=p(B_,"."),B_.forEach(s),DT=h(R_),En=o(R_,"P",{});var H_=l(En);kT=p(H_,"Casts "),z2=o(H_,"CODE",{});var LK=l(z2);ET=p(LK,"datasets.DatasetInfo.features"),LK.forEach(s),qT=p(H_," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),V2=o(H_,"CODE",{});var SK=l(V2);IT=p(SK,"datasets.DatasetInfo.task_templates"),SK.forEach(s),TT=p(H_," after casting."),H_.forEach(s),R_.forEach(s),NT=h(I),Zs=o(I,"DIV",{class:!0});var G_=l(Zs);b(Nd.$$.fragment,G_),PT=h(G_),Pd=o(G_,"P",{});var N4=l(Pd);AT=p(N4,"Align the dataset\u2019s label ID and label name mapping to match an input "),U2=o(N4,"CODE",{});var OK=l(U2);FT=p(OK,"label2id"),OK.forEach(s),LT=p(N4,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),N4.forEach(s),ST=h(G_),b(Xo.$$.fragment,G_),G_.forEach(s),I.forEach(s),E7=h(a),zt=o(a,"DIV",{class:!0});var W_=l(zt);b(Ad.$$.fragment,W_),OT=h(W_),qn=o(W_,"P",{});var Y_=l(qn);CT=p(Y_,"Converts a list of "),Hu=o(Y_,"A",{href:!0});var CK=l(Hu);zT=p(CK,"Dataset"),CK.forEach(s),VT=p(Y_," with the same schema into a single "),Gu=o(Y_,"A",{href:!0});var zK=l(Gu);UT=p(zK,"Dataset"),zK.forEach(s),MT=p(Y_,"."),Y_.forEach(s),RT=h(W_),b(Qo.$$.fragment,W_),W_.forEach(s),q7=h(a),ee=o(a,"DIV",{class:!0});var wt=l(ee);b(Fd.$$.fragment,wt),BT=h(wt),M2=o(wt,"P",{});var VK=l(M2);HT=p(VK,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),VK.forEach(s),GT=h(wt),In=o(wt,"P",{});var J_=l(In);WT=p(J_,"You can use this function on a list of "),Wu=o(J_,"A",{href:!0});var UK=l(Wu);YT=p(UK,"Dataset"),UK.forEach(s),JT=p(J_," objects, or on a list of "),Yu=o(J_,"A",{href:!0});var MK=l(Yu);KT=p(MK,"IterableDataset"),MK.forEach(s),ZT=p(J_," objects."),J_.forEach(s),XT=h(wt),Ve=o(wt,"P",{});var Ba=l(Ve);QT=p(Ba,"If "),R2=o(Ba,"CODE",{});var RK=l(R2);eN=p(RK,"probabilities"),RK.forEach(s),tN=p(Ba," is "),B2=o(Ba,"CODE",{});var BK=l(B2);sN=p(BK,"None"),BK.forEach(s),aN=p(Ba,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),H2=o(Ba,"CODE",{});var HK=l(H2);nN=p(HK,"probabilities"),HK.forEach(s),rN=p(Ba," is not "),G2=o(Ba,"CODE",{});var GK=l(G2);oN=p(GK,"None"),GK.forEach(s),lN=p(Ba,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),Ba.forEach(s),iN=h(wt),Vt=o(wt,"P",{});var fp=l(Vt);pN=p(fp,"The resulting dataset ends when one of the source datasets runs out of examples except when "),W2=o(fp,"CODE",{});var WK=l(W2);cN=p(WK,"oversampling"),WK.forEach(s),dN=p(fp," is "),Y2=o(fp,"CODE",{});var YK=l(Y2);mN=p(YK,"True"),YK.forEach(s),hN=p(fp," and "),Ju=o(fp,"A",{href:!0});var JK=l(Ju);fN=p(JK,"Dataset"),JK.forEach(s),uN=p(fp,` objects are used,
in which case, the resulting dataset ends when all datasets have ran out of examples at least one time.`),fp.forEach(s),gN=h(wt),b(el.$$.fragment,wt),wt.forEach(s),I7=h(a),me=o(a,"DIV",{class:!0});var Ha=l(me);b(Ld.$$.fragment,Ha),_N=h(Ha),J2=o(Ha,"P",{});var KK=l(J2);bN=p(KK,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),KK.forEach(s),$N=h(Ha),K2=o(Ha,"P",{});var ZK=l(K2);xN=p(ZK,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),ZK.forEach(s),vN=h(Ha),Z2=o(Ha,"P",{});var XK=l(Z2);yN=p(XK,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),XK.forEach(s),jN=h(Ha),Ue=o(Ha,"UL",{});var Ga=l(Ue);X2=o(Ga,"LI",{});var QK=l(X2);wN=p(QK,"cache files are always recreated"),QK.forEach(s),DN=h(Ga),Q2=o(Ga,"LI",{});var eZ=l(Q2);kN=p(eZ,"cache files are written to a temporary directory that is deleted when session closes"),eZ.forEach(s),EN=h(Ga),ex=o(Ga,"LI",{});var tZ=l(ex);qN=p(tZ,"cache files are named using a random hash instead of the dataset fingerprint"),tZ.forEach(s),IN=h(Ga),Sd=o(Ga,"LI",{});var P4=l(Sd);TN=p(P4,"use "),Ku=o(P4,"A",{href:!0});var sZ=l(Ku);NN=p(sZ,"datasets.Dataset.save_to_disk()"),sZ.forEach(s),PN=p(P4," to save a transformed dataset or it will be deleted when session closes"),P4.forEach(s),AN=h(Ga),Ut=o(Ga,"LI",{});var up=l(Ut);FN=p(up,"caching doesn\u2019t affect "),Zu=o(up,"A",{href:!0});var aZ=l(Zu);LN=p(aZ,"datasets.load_dataset()"),aZ.forEach(s),SN=p(up,`. If you want to regenerate a dataset from scratch you should use
the `),tx=o(up,"CODE",{});var nZ=l(tx);ON=p(nZ,"download_mode"),nZ.forEach(s),CN=p(up," parameter in "),Xu=o(up,"A",{href:!0});var rZ=l(Xu);zN=p(rZ,"datasets.load_dataset()"),rZ.forEach(s),VN=p(up,"."),up.forEach(s),Ga.forEach(s),Ha.forEach(s),T7=h(a),he=o(a,"DIV",{class:!0});var Wa=l(he);b(Od.$$.fragment,Wa),UN=h(Wa),sx=o(Wa,"P",{});var oZ=l(sx);MN=p(oZ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),oZ.forEach(s),RN=h(Wa),ax=o(Wa,"P",{});var lZ=l(ax);BN=p(lZ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),lZ.forEach(s),HN=h(Wa),nx=o(Wa,"P",{});var iZ=l(nx);GN=p(iZ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),iZ.forEach(s),WN=h(Wa),Me=o(Wa,"UL",{});var Ya=l(Me);rx=o(Ya,"LI",{});var pZ=l(rx);YN=p(pZ,"cache files are always recreated"),pZ.forEach(s),JN=h(Ya),ox=o(Ya,"LI",{});var cZ=l(ox);KN=p(cZ,"cache files are written to a temporary directory that is deleted when session closes"),cZ.forEach(s),ZN=h(Ya),lx=o(Ya,"LI",{});var dZ=l(lx);XN=p(dZ,"cache files are named using a random hash instead of the dataset fingerprint"),dZ.forEach(s),QN=h(Ya),Cd=o(Ya,"LI",{});var A4=l(Cd);eP=p(A4,"use "),Qu=o(A4,"A",{href:!0});var mZ=l(Qu);tP=p(mZ,"datasets.Dataset.save_to_disk()"),mZ.forEach(s),sP=p(A4," to save a transformed dataset or it will be deleted when session closes"),A4.forEach(s),aP=h(Ya),Mt=o(Ya,"LI",{});var gp=l(Mt);nP=p(gp,"caching doesn\u2019t affect "),eg=o(gp,"A",{href:!0});var hZ=l(eg);rP=p(hZ,"datasets.load_dataset()"),hZ.forEach(s),oP=p(gp,`. If you want to regenerate a dataset from scratch you should use
the `),ix=o(gp,"CODE",{});var fZ=l(ix);lP=p(fZ,"download_mode"),fZ.forEach(s),iP=p(gp," parameter in "),tg=o(gp,"A",{href:!0});var uZ=l(tg);pP=p(uZ,"datasets.load_dataset()"),uZ.forEach(s),cP=p(gp,"."),gp.forEach(s),Ya.forEach(s),Wa.forEach(s),N7=h(a),fe=o(a,"DIV",{class:!0});var Ja=l(fe);b(zd.$$.fragment,Ja),dP=h(Ja),px=o(Ja,"P",{});var gZ=l(px);mP=p(gZ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),gZ.forEach(s),hP=h(Ja),cx=o(Ja,"P",{});var _Z=l(cx);fP=p(_Z,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),_Z.forEach(s),uP=h(Ja),dx=o(Ja,"P",{});var bZ=l(dx);gP=p(bZ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),bZ.forEach(s),_P=h(Ja),Re=o(Ja,"UL",{});var Ka=l(Re);mx=o(Ka,"LI",{});var $Z=l(mx);bP=p($Z,"cache files are always recreated"),$Z.forEach(s),$P=h(Ka),hx=o(Ka,"LI",{});var xZ=l(hx);xP=p(xZ,"cache files are written to a temporary directory that is deleted when session closes"),xZ.forEach(s),vP=h(Ka),fx=o(Ka,"LI",{});var vZ=l(fx);yP=p(vZ,"cache files are named using a random hash instead of the dataset fingerprint"),vZ.forEach(s),jP=h(Ka),Vd=o(Ka,"LI",{});var F4=l(Vd);wP=p(F4,"use "),sg=o(F4,"A",{href:!0});var yZ=l(sg);DP=p(yZ,"datasets.Dataset.save_to_disk()"),yZ.forEach(s),kP=p(F4," to save a transformed dataset or it will be deleted when session closes"),F4.forEach(s),EP=h(Ka),Rt=o(Ka,"LI",{});var _p=l(Rt);qP=p(_p,"caching doesn\u2019t affect "),ag=o(_p,"A",{href:!0});var jZ=l(ag);IP=p(jZ,"datasets.load_dataset()"),jZ.forEach(s),TP=p(_p,`. If you want to regenerate a dataset from scratch you should use
the `),ux=o(_p,"CODE",{});var wZ=l(ux);NP=p(wZ,"download_mode"),wZ.forEach(s),PP=p(_p," parameter in "),ng=o(_p,"A",{href:!0});var DZ=l(ng);AP=p(DZ,"datasets.load_dataset()"),DZ.forEach(s),FP=p(_p,"."),_p.forEach(s),Ka.forEach(s),Ja.forEach(s),P7=h(a),Tn=o(a,"H2",{class:!0});var L4=l(Tn);tl=o(L4,"A",{id:!0,class:!0,href:!0});var kZ=l(tl);gx=o(kZ,"SPAN",{});var EZ=l(gx);b(Ud.$$.fragment,EZ),EZ.forEach(s),kZ.forEach(s),LP=h(L4),_x=o(L4,"SPAN",{});var qZ=l(_x);SP=p(qZ,"DatasetDict"),qZ.forEach(s),L4.forEach(s),A7=h(a),sl=o(a,"P",{});var S4=l(sl);OP=p(S4,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),bx=o(S4,"CODE",{});var IZ=l(bx);CP=p(IZ,"Dataset"),IZ.forEach(s),zP=p(S4,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),S4.forEach(s),F7=h(a),A=o(a,"DIV",{class:!0});var F=l(A);b(Md.$$.fragment,F),VP=h(F),$x=o(F,"P",{});var TZ=l($x);UP=p(TZ,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),TZ.forEach(s),MP=h(F),Xs=o(F,"DIV",{class:!0});var K_=l(Xs);b(Rd.$$.fragment,K_),RP=h(K_),xx=o(K_,"P",{});var NZ=l(xx);BP=p(NZ,"The Apache Arrow tables backing each split."),NZ.forEach(s),HP=h(K_),b(al.$$.fragment,K_),K_.forEach(s),GP=h(F),Qs=o(F,"DIV",{class:!0});var Z_=l(Qs);b(Bd.$$.fragment,Z_),WP=h(Z_),vx=o(Z_,"P",{});var PZ=l(vx);YP=p(PZ,"The cache files containing the Apache Arrow table backing each split."),PZ.forEach(s),JP=h(Z_),b(nl.$$.fragment,Z_),Z_.forEach(s),KP=h(F),ea=o(F,"DIV",{class:!0});var X_=l(ea);b(Hd.$$.fragment,X_),ZP=h(X_),yx=o(X_,"P",{});var AZ=l(yx);XP=p(AZ,"Number of columns in each split of the dataset."),AZ.forEach(s),QP=h(X_),b(rl.$$.fragment,X_),X_.forEach(s),eA=h(F),ta=o(F,"DIV",{class:!0});var Q_=l(ta);b(Gd.$$.fragment,Q_),tA=h(Q_),Wd=o(Q_,"P",{});var O4=l(Wd);sA=p(O4,"Number of rows in each split of the dataset (same as "),ol=o(O4,"A",{href:!0});var C4=l(ol);aA=p(C4,"datasets.Dataset."),jx=o(C4,"STRONG",{});var FZ=l(jx);nA=p(FZ,"len"),FZ.forEach(s),rA=p(C4,"()"),C4.forEach(s),oA=p(O4,")."),O4.forEach(s),lA=h(Q_),b(ll.$$.fragment,Q_),Q_.forEach(s),iA=h(F),sa=o(F,"DIV",{class:!0});var eb=l(sa);b(Yd.$$.fragment,eb),pA=h(eb),wx=o(eb,"P",{});var LZ=l(wx);cA=p(LZ,"Names of the columns in each split of the dataset."),LZ.forEach(s),dA=h(eb),b(il.$$.fragment,eb),eb.forEach(s),mA=h(F),aa=o(F,"DIV",{class:!0});var tb=l(aa);b(Jd.$$.fragment,tb),hA=h(tb),Dx=o(tb,"P",{});var SZ=l(Dx);fA=p(SZ,"Shape of each split of the dataset (number of columns, number of rows)."),SZ.forEach(s),uA=h(tb),b(pl.$$.fragment,tb),tb.forEach(s),gA=h(F),ht=o(F,"DIV",{class:!0});var bp=l(ht);b(Kd.$$.fragment,bp),_A=h(bp),kx=o(bp,"P",{});var OZ=l(kx);bA=p(OZ,"Return a list of the unique elements in a column for each split."),OZ.forEach(s),$A=h(bp),Ex=o(bp,"P",{});var CZ=l(Ex);xA=p(CZ,"This is implemented in the low-level backend and as such, very fast."),CZ.forEach(s),vA=h(bp),b(cl.$$.fragment,bp),bp.forEach(s),yA=h(F),na=o(F,"DIV",{class:!0});var sb=l(na);b(Zd.$$.fragment,sb),jA=h(sb),qx=o(sb,"P",{});var zZ=l(qx);wA=p(zZ,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),zZ.forEach(s),DA=h(sb),b(dl.$$.fragment,sb),sb.forEach(s),kA=h(F),ra=o(F,"DIV",{class:!0});var ab=l(ra);b(Xd.$$.fragment,ab),EA=h(ab),Ix=o(ab,"P",{});var VZ=l(Ix);qA=p(VZ,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),VZ.forEach(s),IA=h(ab),b(ml.$$.fragment,ab),ab.forEach(s),TA=h(F),oa=o(F,"DIV",{class:!0});var nb=l(oa);b(Qd.$$.fragment,nb),NA=h(nb),Tx=o(nb,"P",{});var UZ=l(Tx);PA=p(UZ,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),UZ.forEach(s),AA=h(nb),b(hl.$$.fragment,nb),nb.forEach(s),FA=h(F),ft=o(F,"DIV",{class:!0});var $p=l(ft);b(em.$$.fragment,$p),LA=h($p),Nx=o($p,"P",{});var MZ=l(Nx);SA=p(MZ,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),MZ.forEach(s),OA=h($p),Px=o($p,"P",{});var RZ=l(Px);CA=p(RZ,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),RZ.forEach(s),zA=h($p),b(fl.$$.fragment,$p),$p.forEach(s),VA=h(F),De=o(F,"DIV",{class:!0});var Za=l(De);b(tm.$$.fragment,Za),UA=h(Za),Ax=o(Za,"P",{});var BZ=l(Ax);MA=p(BZ,"Create a new Dataset where the rows are shuffled."),BZ.forEach(s),RA=h(Za),Fx=o(Za,"P",{});var HZ=l(Fx);BA=p(HZ,"The transformation is applied to all the datasets of the dataset dictionary."),HZ.forEach(s),HA=h(Za),Lx=o(Za,"P",{});var GZ=l(Lx);GA=p(GZ,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),GZ.forEach(s),WA=h(Za),b(ul.$$.fragment,Za),Za.forEach(s),YA=h(F),ke=o(F,"DIV",{class:!0});var Xa=l(ke);b(sm.$$.fragment,Xa),JA=h(Xa),am=o(Xa,"P",{});var z4=l(am);KA=p(z4,"Set "),Sx=o(z4,"CODE",{});var WZ=l(Sx);ZA=p(WZ,"__getitem__"),WZ.forEach(s),XA=p(z4,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),z4.forEach(s),QA=h(Xa),Be=o(Xa,"P",{});var Qa=l(Be);eF=p(Qa,"It is possible to call "),Ox=o(Qa,"CODE",{});var YZ=l(Ox);tF=p(YZ,"map"),YZ.forEach(s),sF=p(Qa," after calling "),Cx=o(Qa,"CODE",{});var JZ=l(Cx);aF=p(JZ,"set_format"),JZ.forEach(s),nF=p(Qa,". Since "),zx=o(Qa,"CODE",{});var KZ=l(zx);rF=p(KZ,"map"),KZ.forEach(s),oF=p(Qa,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),Vx=o(Qa,"CODE",{});var ZZ=l(Vx);lF=p(ZZ,"map"),ZZ.forEach(s),iF=p(Qa," on a dataset to add a new column, then this column will be formatted:"),Qa.forEach(s),pF=h(Xa),Ux=o(Xa,"P",{});var XZ=l(Ux);cF=p(XZ,"new formatted columns = (all columns - previously unformatted columns)"),XZ.forEach(s),dF=h(Xa),b(gl.$$.fragment,Xa),Xa.forEach(s),mF=h(F),ut=o(F,"DIV",{class:!0});var xp=l(ut);b(nm.$$.fragment,xp),hF=h(xp),rm=o(xp,"P",{});var V4=l(rm);fF=p(V4,"Reset "),Mx=o(V4,"CODE",{});var QZ=l(Mx);uF=p(QZ,"__getitem__"),QZ.forEach(s),gF=p(V4,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),V4.forEach(s),_F=h(xp),rg=o(xp,"P",{});var AY=l(rg);bF=p(AY,"Same as "),Rx=o(AY,"CODE",{});var eX=l(Rx);$F=p(eX,"self.set_format()"),eX.forEach(s),AY.forEach(s),xF=h(xp),b(_l.$$.fragment,xp),xp.forEach(s),vF=h(F),bl=o(F,"DIV",{class:!0});var U4=l(bl);b(om.$$.fragment,U4),yF=h(U4),Nn=o(U4,"P",{});var rb=l(Nn);jF=p(rb,"To be used in a "),Bx=o(rb,"EM",{});var tX=l(Bx);wF=p(tX,"with"),tX.forEach(s),DF=p(rb," statement. Set "),Hx=o(rb,"CODE",{});var sX=l(Hx);kF=p(sX,"__getitem__"),sX.forEach(s),EF=p(rb,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),rb.forEach(s),U4.forEach(s),qF=h(F),Ee=o(F,"DIV",{class:!0});var en=l(Ee);b(lm.$$.fragment,en),IF=h(en),Bt=o(en,"P",{});var vp=l(Bt);TF=p(vp,"Set "),Gx=o(vp,"CODE",{});var aX=l(Gx);NF=p(aX,"__getitem__"),aX.forEach(s),PF=p(vp,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Wx=o(vp,"CODE",{});var nX=l(Wx);AF=p(nX,"type"),nX.forEach(s),FF=p(vp," (for example \u201Cnumpy\u201D) is used to format batches when using "),Yx=o(vp,"CODE",{});var rX=l(Yx);LF=p(rX,"__getitem__"),rX.forEach(s),SF=p(vp,`.
The format is set for every dataset in the dataset dictionary`),vp.forEach(s),OF=h(en),im=o(en,"P",{});var M4=l(im);CF=p(M4,"It\u2019s also possible to use custom transforms for formatting using "),og=o(M4,"A",{href:!0});var oX=l(og);zF=p(oX,"datasets.Dataset.with_transform()"),oX.forEach(s),VF=p(M4,"."),M4.forEach(s),UF=h(en),Pn=o(en,"P",{});var ob=l(Pn);MF=p(ob,"Contrary to "),lg=o(ob,"A",{href:!0});var lX=l(lg);RF=p(lX,"datasets.DatasetDict.set_format()"),lX.forEach(s),BF=p(ob,", "),Jx=o(ob,"CODE",{});var iX=l(Jx);HF=p(iX,"with_format"),iX.forEach(s),GF=p(ob," returns a new DatasetDict object with new Dataset objects."),ob.forEach(s),WF=h(en),b($l.$$.fragment,en),en.forEach(s),YF=h(F),qe=o(F,"DIV",{class:!0});var tn=l(qe);b(pm.$$.fragment,tn),JF=h(tn),An=o(tn,"P",{});var lb=l(An);KF=p(lb,"Set "),Kx=o(lb,"CODE",{});var pX=l(Kx);ZF=p(pX,"__getitem__"),pX.forEach(s),XF=p(lb," return format using this transform. The transform is applied on-the-fly on batches when "),Zx=o(lb,"CODE",{});var cX=l(Zx);QF=p(cX,"__getitem__"),cX.forEach(s),eL=p(lb,` is called.
The transform is set for every dataset in the dataset dictionary`),lb.forEach(s),tL=h(tn),Fn=o(tn,"P",{});var ib=l(Fn);sL=p(ib,"As "),ig=o(ib,"A",{href:!0});var dX=l(ig);aL=p(dX,"datasets.Dataset.set_format()"),dX.forEach(s),nL=p(ib,", this can be reset using "),pg=o(ib,"A",{href:!0});var mX=l(pg);rL=p(mX,"datasets.Dataset.reset_format()"),mX.forEach(s),oL=p(ib,"."),ib.forEach(s),lL=h(tn),Ln=o(tn,"P",{});var pb=l(Ln);iL=p(pb,"Contrary to "),Xx=o(pb,"CODE",{});var hX=l(Xx);pL=p(hX,"datasets.DatasetDict.set_transform()"),hX.forEach(s),cL=p(pb,", "),Qx=o(pb,"CODE",{});var fX=l(Qx);dL=p(fX,"with_transform"),fX.forEach(s),mL=p(pb," returns a new DatasetDict object with new Dataset objects."),pb.forEach(s),hL=h(tn),b(xl.$$.fragment,tn),tn.forEach(s),fL=h(F),la=o(F,"DIV",{class:!0});var cb=l(la);b(cm.$$.fragment,cb),uL=h(cb),ev=o(cb,"P",{});var uX=l(ev);gL=p(uX,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),uX.forEach(s),_L=h(cb),b(vl.$$.fragment,cb),cb.forEach(s),bL=h(F),gt=o(F,"DIV",{class:!0});var yp=l(gt);b(dm.$$.fragment,yp),$L=h(yp),tv=o(yp,"P",{});var gX=l(tv);xL=p(gX,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),gX.forEach(s),vL=h(yp),Ht=o(yp,"P",{});var jp=l(Ht);yL=p(jp,"You can also remove a column using "),cg=o(jp,"A",{href:!0});var _X=l(cg);jL=p(_X,"Dataset.map()"),_X.forEach(s),wL=p(jp," with "),sv=o(jp,"EM",{});var bX=l(sv);DL=p(bX,"feature"),bX.forEach(s),kL=p(jp," but "),av=o(jp,"CODE",{});var $X=l(av);EL=p($X,"cast_"),$X.forEach(s),qL=p(jp,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),jp.forEach(s),IL=h(yp),b(yl.$$.fragment,yp),yp.forEach(s),TL=h(F),ia=o(F,"DIV",{class:!0});var db=l(ia);b(mm.$$.fragment,db),NL=h(db),nv=o(db,"P",{});var xX=l(nv);PL=p(xX,"Cast column to feature for decoding."),xX.forEach(s),AL=h(db),b(jl.$$.fragment,db),db.forEach(s),FL=h(F),Ie=o(F,"DIV",{class:!0});var sn=l(Ie);b(hm.$$.fragment,sn),LL=h(sn),rv=o(sn,"P",{});var vX=l(rv);SL=p(vX,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),vX.forEach(s),OL=h(sn),ov=o(sn,"P",{});var yX=l(ov);CL=p(yX,"The transformation is applied to all the splits of the dataset dictionary."),yX.forEach(s),zL=h(sn),Sn=o(sn,"P",{});var mb=l(Sn);VL=p(mb,"You can also remove a column using "),dg=o(mb,"A",{href:!0});var jX=l(dg);UL=p(jX,"Dataset.map()"),jX.forEach(s),ML=p(mb," with "),lv=o(mb,"EM",{});var wX=l(lv);RL=p(wX,"remove_columns"),wX.forEach(s),BL=p(mb,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),mb.forEach(s),HL=h(sn),b(wl.$$.fragment,sn),sn.forEach(s),GL=h(F),Te=o(F,"DIV",{class:!0});var an=l(Te);b(fm.$$.fragment,an),WL=h(an),iv=o(an,"P",{});var DX=l(iv);YL=p(DX,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),DX.forEach(s),JL=h(an),On=o(an,"P",{});var hb=l(On);KL=p(hb,"You can also rename a column using "),mg=o(hb,"A",{href:!0});var kX=l(mg);ZL=p(kX,"Dataset.map()"),kX.forEach(s),XL=p(hb," with "),pv=o(hb,"EM",{});var EX=l(pv);QL=p(EX,"remove_columns"),EX.forEach(s),eS=p(hb," but the present method:"),hb.forEach(s),tS=h(an),um=o(an,"UL",{});var R4=l(um);cv=o(R4,"LI",{});var qX=l(cv);sS=p(qX,"takes care of moving the original features under the new column name."),qX.forEach(s),aS=h(R4),dv=o(R4,"LI",{});var IX=l(dv);nS=p(IX,"doesn\u2019t copy the data to a new dataset and is thus much faster."),IX.forEach(s),R4.forEach(s),rS=h(an),b(Dl.$$.fragment,an),an.forEach(s),oS=h(F),pa=o(F,"DIV",{class:!0});var fb=l(pa);b(gm.$$.fragment,fb),lS=h(fb),mv=o(fb,"P",{});var TX=l(mv);iS=p(TX,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),TX.forEach(s),pS=h(fb),b(kl.$$.fragment,fb),fb.forEach(s),cS=h(F),ca=o(F,"DIV",{class:!0});var ub=l(ca);b(_m.$$.fragment,ub),dS=h(ub),bm=o(ub,"P",{});var B4=l(bm);mS=p(B4,"Casts the given column as :obj:"),hv=o(B4,"CODE",{});var NX=l(hv);hS=p(NX,"datasets.features.ClassLabel"),NX.forEach(s),fS=p(B4," and updates the tables."),B4.forEach(s),uS=h(ub),b(El.$$.fragment,ub),ub.forEach(s),gS=h(F),Ne=o(F,"DIV",{class:!0});var nn=l(Ne);b($m.$$.fragment,nn),_S=h(nn),Cn=o(nn,"P",{});var gb=l(Cn);bS=p(gb,"Pushes the "),fv=o(gb,"CODE",{});var PX=l(fv);$S=p(PX,"DatasetDict"),PX.forEach(s),xS=p(gb,` to the hub as a Parquet dataset.
The `),uv=o(gb,"CODE",{});var AX=l(uv);vS=p(AX,"DatasetDict"),AX.forEach(s),yS=p(gb," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),gb.forEach(s),jS=h(nn),gv=o(nn,"P",{});var FX=l(gv);wS=p(FX,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),FX.forEach(s),DS=h(nn),Gt=o(nn,"P",{});var wp=l(Gt);kS=p(wp,"The resulting Parquet files are self-contained by default: if your dataset contains "),hg=o(wp,"A",{href:!0});var LX=l(hg);ES=p(LX,"Image"),LX.forEach(s),qS=p(wp," or "),fg=o(wp,"A",{href:!0});var SX=l(fg);IS=p(SX,"Audio"),SX.forEach(s),TS=p(wp,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),_v=o(wp,"EM",{});var OX=l(_v);NS=p(OX,"embed_external_files"),OX.forEach(s),PS=p(wp," to False."),wp.forEach(s),AS=h(nn),b(ql.$$.fragment,nn),nn.forEach(s),FS=h(F),oe=o(F,"DIV",{class:!0});var Dt=l(oe);b(xm.$$.fragment,Dt),LS=h(Dt),zn=o(Dt,"P",{});var _b=l(zn);SS=p(_b,"Saves a dataset dict to a filesystem using either "),ug=o(_b,"A",{href:!0});var CX=l(ug);OS=p(CX,"S3FileSystem"),CX.forEach(s),CS=p(_b,` or
`),bv=o(_b,"CODE",{});var zX=l(bv);zS=p(zX,"fsspec.spec.AbstractFileSystem"),zX.forEach(s),VS=p(_b,"."),_b.forEach(s),US=h(Dt),Vn=o(Dt,"P",{});var bb=l(Vn);MS=p(bb,"For "),gg=o(bb,"A",{href:!0});var VX=l(gg);RS=p(VX,"Image"),VX.forEach(s),BS=p(bb," and "),_g=o(bb,"A",{href:!0});var UX=l(_g);HS=p(UX,"Audio"),UX.forEach(s),GS=p(bb," data:"),bb.forEach(s),WS=h(Dt),vm=o(Dt,"P",{});var H4=l(vm);YS=p(H4,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),$v=o(H4,"EM",{});var MX=l($v);JS=p(MX,"read()"),MX.forEach(s),KS=p(H4," those files first."),H4.forEach(s),ZS=h(Dt),b(Il.$$.fragment,Dt),XS=h(Dt),b(Tl.$$.fragment,Dt),Dt.forEach(s),QS=h(F),da=o(F,"DIV",{class:!0});var $b=l(da);b(ym.$$.fragment,$b),eO=h($b),Wt=o($b,"P",{});var Dp=l(Wt);tO=p(Dp,"Load a dataset that was previously saved using "),xv=o(Dp,"CODE",{});var RX=l(xv);sO=p(RX,"save_to_disk"),RX.forEach(s),aO=p(Dp,` from a filesystem using either
`),bg=o(Dp,"A",{href:!0});var BX=l(bg);nO=p(BX,"S3FileSystem"),BX.forEach(s),rO=p(Dp," or "),vv=o(Dp,"CODE",{});var HX=l(vv);oO=p(HX,"fsspec.spec.AbstractFileSystem"),HX.forEach(s),lO=p(Dp,"."),Dp.forEach(s),iO=h($b),b(Nl.$$.fragment,$b),$b.forEach(s),pO=h(F),ma=o(F,"DIV",{class:!0});var xb=l(ma);b(jm.$$.fragment,xb),cO=h(xb),yv=o(xb,"P",{});var GX=l(yv);dO=p(GX,"Create DatasetDict from CSV file(s)."),GX.forEach(s),mO=h(xb),b(Pl.$$.fragment,xb),xb.forEach(s),hO=h(F),ha=o(F,"DIV",{class:!0});var vb=l(ha);b(wm.$$.fragment,vb),fO=h(vb),jv=o(vb,"P",{});var WX=l(jv);uO=p(WX,"Create DatasetDict from JSON Lines file(s)."),WX.forEach(s),gO=h(vb),b(Al.$$.fragment,vb),vb.forEach(s),_O=h(F),fa=o(F,"DIV",{class:!0});var yb=l(fa);b(Dm.$$.fragment,yb),bO=h(yb),wv=o(yb,"P",{});var YX=l(wv);$O=p(YX,"Create DatasetDict from Parquet file(s)."),YX.forEach(s),xO=h(yb),b(Fl.$$.fragment,yb),yb.forEach(s),vO=h(F),ua=o(F,"DIV",{class:!0});var jb=l(ua);b(km.$$.fragment,jb),yO=h(jb),Dv=o(jb,"P",{});var JX=l(Dv);jO=p(JX,"Create DatasetDict from text file(s)."),JX.forEach(s),wO=h(jb),b(Ll.$$.fragment,jb),jb.forEach(s),DO=h(F),ga=o(F,"DIV",{class:!0});var wb=l(ga);b(Em.$$.fragment,wb),kO=h(wb),Un=o(wb,"P",{});var Db=l(Un);EO=p(Db,"Prepare a dataset for the given task by casting the dataset\u2019s "),$g=o(Db,"A",{href:!0});var KX=l($g);qO=p(KX,"Features"),KX.forEach(s),IO=p(Db," to standardized column names and types as detailed in "),xg=o(Db,"A",{href:!0});var ZX=l(xg);TO=p(ZX,"datasets.tasks"),ZX.forEach(s),NO=p(Db,"."),Db.forEach(s),PO=h(wb),Mn=o(wb,"P",{});var kb=l(Mn);AO=p(kb,"Casts "),kv=o(kb,"CODE",{});var XX=l(kv);FO=p(XX,"datasets.DatasetInfo.features"),XX.forEach(s),LO=p(kb," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Ev=o(kb,"CODE",{});var QX=l(Ev);SO=p(QX,"datasets.DatasetInfo.task_templates"),QX.forEach(s),OO=p(kb," after casting."),kb.forEach(s),wb.forEach(s),F.forEach(s),L7=h(a),vg=o(a,"A",{id:!0}),l(vg).forEach(s),S7=h(a),Rn=o(a,"H2",{class:!0});var G4=l(Rn);Sl=o(G4,"A",{id:!0,class:!0,href:!0});var eQ=l(Sl);qv=o(eQ,"SPAN",{});var tQ=l(qv);b(qm.$$.fragment,tQ),tQ.forEach(s),eQ.forEach(s),CO=h(G4),Iv=o(G4,"SPAN",{});var sQ=l(Iv);zO=p(sQ,"IterableDataset"),sQ.forEach(s),G4.forEach(s),O7=h(a),Ol=o(a,"P",{});var W4=l(Ol);VO=p(W4,"The base class "),yg=o(W4,"A",{href:!0});var aQ=l(yg);UO=p(aQ,"IterableDataset"),aQ.forEach(s),MO=p(W4," implements an iterable Dataset backed by python generators."),W4.forEach(s),C7=h(a),L=o(a,"DIV",{class:!0});var S=l(L);b(Im.$$.fragment,S),RO=h(S),Tv=o(S,"P",{});var nQ=l(Tv);BO=p(nQ,"A Dataset backed by an iterable."),nQ.forEach(s),HO=h(S),_a=o(S,"DIV",{class:!0});var Eb=l(_a);b(Tm.$$.fragment,Eb),GO=h(Eb),Nv=o(Eb,"P",{});var rQ=l(Nv);WO=p(rQ,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),rQ.forEach(s),YO=h(Eb),b(Cl.$$.fragment,Eb),Eb.forEach(s),JO=h(S),ba=o(S,"DIV",{class:!0});var qb=l(ba);b(Nm.$$.fragment,qb),KO=h(qb),Pv=o(qb,"P",{});var oQ=l(Pv);ZO=p(oQ,"Cast column to feature for decoding."),oQ.forEach(s),XO=h(qb),b(zl.$$.fragment,qb),qb.forEach(s),QO=h(S),$a=o(S,"DIV",{class:!0});var Ib=l($a);b(Pm.$$.fragment,Ib),eC=h(Ib),Av=o(Ib,"P",{});var lQ=l(Av);tC=p(lQ,"Cast the dataset to a new set of features."),lQ.forEach(s),sC=h(Ib),b(Vl.$$.fragment,Ib),Ib.forEach(s),aC=h(S),jg=o(S,"DIV",{class:!0});var iQ=l(jg);b(Am.$$.fragment,iQ),iQ.forEach(s),nC=h(S),Pe=o(S,"DIV",{class:!0});var rn=l(Pe);b(Fm.$$.fragment,rn),rC=h(rn),Fv=o(rn,"P",{});var pQ=l(Fv);oC=p(pQ,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),pQ.forEach(s),lC=h(rn),Lm=o(rn,"P",{});var Y4=l(Lm);iC=p(Y4,"You can specify whether the function should be batched or not with the "),Lv=o(Y4,"CODE",{});var cQ=l(Lv);pC=p(cQ,"batched"),cQ.forEach(s),cC=p(Y4," parameter:"),Y4.forEach(s),dC=h(rn),Bn=o(rn,"UL",{});var Tb=l(Bn);Sv=o(Tb,"LI",{});var dQ=l(Sv);mC=p(dQ,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),dQ.forEach(s),hC=h(Tb),Ov=o(Tb,"LI",{});var mQ=l(Ov);fC=p(mQ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),mQ.forEach(s),uC=h(Tb),ue=o(Tb,"LI",{});var kt=l(ue);gC=p(kt,"If batched is True and batch_size is "),Cv=o(kt,"CODE",{});var hQ=l(Cv);_C=p(hQ,"n"),hQ.forEach(s),bC=p(kt," > 1, then the function takes a batch of "),zv=o(kt,"CODE",{});var fQ=l(zv);$C=p(fQ,"n"),fQ.forEach(s),xC=p(kt," examples as input and can return a batch with "),Vv=o(kt,"CODE",{});var uQ=l(Vv);vC=p(uQ,"n"),uQ.forEach(s),yC=p(kt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Uv=o(kt,"CODE",{});var gQ=l(Uv);jC=p(gQ,"n"),gQ.forEach(s),wC=p(kt,` examples.
A batch is a dictionary, e.g. a batch of `),Mv=o(kt,"CODE",{});var _Q=l(Mv);DC=p(_Q,"n"),_Q.forEach(s),kC=p(kt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),kt.forEach(s),Tb.forEach(s),EC=h(rn),b(Ul.$$.fragment,rn),rn.forEach(s),qC=h(S),xa=o(S,"DIV",{class:!0});var Nb=l(xa);b(Sm.$$.fragment,Nb),IC=h(Nb),Rv=o(Nb,"P",{});var bQ=l(Rv);TC=p(bQ,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),bQ.forEach(s),NC=h(Nb),b(Ml.$$.fragment,Nb),Nb.forEach(s),PC=h(S),va=o(S,"DIV",{class:!0});var Pb=l(va);b(Om.$$.fragment,Pb),AC=h(Pb),Bv=o(Pb,"P",{});var $Q=l(Bv);FC=p($Q,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),$Q.forEach(s),LC=h(Pb),b(Rl.$$.fragment,Pb),Pb.forEach(s),SC=h(S),le=o(S,"DIV",{class:!0});var Et=l(le);b(Cm.$$.fragment,Et),OC=h(Et),Hv=o(Et,"P",{});var xQ=l(Hv);CC=p(xQ,"Randomly shuffles the elements of this dataset."),xQ.forEach(s),zC=h(Et),Gv=o(Et,"P",{});var vQ=l(Gv);VC=p(vQ,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),vQ.forEach(s),UC=h(Et),zm=o(Et,"P",{});var J4=l(zm);MC=p(J4,"For instance, if your dataset contains 10,000 elements but "),Wv=o(J4,"CODE",{});var yQ=l(Wv);RC=p(yQ,"buffer_size"),yQ.forEach(s),BC=p(J4,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),J4.forEach(s),HC=h(Et),Hn=o(Et,"P",{});var Ab=l(Hn);GC=p(Ab,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),wg=o(Ab,"A",{href:!0});var jQ=l(wg);WC=p(jQ,"datasets.IterableDataset.skip()"),jQ.forEach(s),YC=p(Ab," or "),Dg=o(Ab,"A",{href:!0});var wQ=l(Dg);JC=p(wQ,"datasets.IterableDataset.take()"),wQ.forEach(s),KC=p(Ab,`
then the order of the shards is kept unchanged.`),Ab.forEach(s),ZC=h(Et),b(Bl.$$.fragment,Et),Et.forEach(s),XC=h(S),ya=o(S,"DIV",{class:!0});var Fb=l(ya);b(Vm.$$.fragment,Fb),QC=h(Fb),Um=o(Fb,"P",{});var K4=l(Um);ez=p(K4,"Create a new IterableDataset that skips the first "),Yv=o(K4,"CODE",{});var DQ=l(Yv);tz=p(DQ,"n"),DQ.forEach(s),sz=p(K4," elements."),K4.forEach(s),az=h(Fb),b(Hl.$$.fragment,Fb),Fb.forEach(s),nz=h(S),ja=o(S,"DIV",{class:!0});var Lb=l(ja);b(Mm.$$.fragment,Lb),rz=h(Lb),Rm=o(Lb,"P",{});var Z4=l(Rm);oz=p(Z4,"Create a new IterableDataset with only the first "),Jv=o(Z4,"CODE",{});var kQ=l(Jv);lz=p(kQ,"n"),kQ.forEach(s),iz=p(Z4," elements."),Z4.forEach(s),pz=h(Lb),b(Gl.$$.fragment,Lb),Lb.forEach(s),cz=h(S),Wl=o(S,"DIV",{class:!0});var X4=l(Wl);b(Bm.$$.fragment,X4),dz=h(X4),kg=o(X4,"P",{});var FY=l(kg);Eg=o(FY,"A",{href:!0});var EQ=l(Eg);mz=p(EQ,"datasets.DatasetInfo"),EQ.forEach(s),hz=p(FY," object containing all the metadata in the dataset."),FY.forEach(s),X4.forEach(s),fz=h(S),Yl=o(S,"DIV",{class:!0});var Q4=l(Yl);b(Hm.$$.fragment,Q4),uz=h(Q4),qg=o(Q4,"P",{});var LY=l(qg);Ig=o(LY,"A",{href:!0});var qQ=l(Ig);gz=p(qQ,"datasets.NamedSplit"),qQ.forEach(s),_z=p(LY," object corresponding to a named dataset split."),LY.forEach(s),Q4.forEach(s),bz=h(S),Tg=o(S,"DIV",{class:!0});var IQ=l(Tg);b(Gm.$$.fragment,IQ),IQ.forEach(s),$z=h(S),Ng=o(S,"DIV",{class:!0});var TQ=l(Ng);b(Wm.$$.fragment,TQ),TQ.forEach(s),xz=h(S),Pg=o(S,"DIV",{class:!0});var NQ=l(Pg);b(Ym.$$.fragment,NQ),NQ.forEach(s),vz=h(S),Ag=o(S,"DIV",{class:!0});var PQ=l(Ag);b(Jm.$$.fragment,PQ),PQ.forEach(s),yz=h(S),Fg=o(S,"DIV",{class:!0});var AQ=l(Fg);b(Km.$$.fragment,AQ),AQ.forEach(s),jz=h(S),Lg=o(S,"DIV",{class:!0});var FQ=l(Lg);b(Zm.$$.fragment,FQ),FQ.forEach(s),wz=h(S),Sg=o(S,"DIV",{class:!0});var LQ=l(Sg);b(Xm.$$.fragment,LQ),LQ.forEach(s),Dz=h(S),Og=o(S,"DIV",{class:!0});var SQ=l(Og);b(Qm.$$.fragment,SQ),SQ.forEach(s),kz=h(S),Cg=o(S,"DIV",{class:!0});var OQ=l(Cg);b(eh.$$.fragment,OQ),OQ.forEach(s),Ez=h(S),zg=o(S,"DIV",{class:!0});var CQ=l(zg);b(th.$$.fragment,CQ),CQ.forEach(s),qz=h(S),Vg=o(S,"DIV",{class:!0});var zQ=l(Vg);b(sh.$$.fragment,zQ),zQ.forEach(s),Iz=h(S),Ug=o(S,"DIV",{class:!0});var VQ=l(Ug);b(ah.$$.fragment,VQ),VQ.forEach(s),Tz=h(S),Mg=o(S,"DIV",{class:!0});var UQ=l(Mg);b(nh.$$.fragment,UQ),UQ.forEach(s),S.forEach(s),z7=h(a),Gn=o(a,"H2",{class:!0});var eD=l(Gn);Jl=o(eD,"A",{id:!0,class:!0,href:!0});var MQ=l(Jl);Kv=o(MQ,"SPAN",{});var RQ=l(Kv);b(rh.$$.fragment,RQ),RQ.forEach(s),MQ.forEach(s),Nz=h(eD),Zv=o(eD,"SPAN",{});var BQ=l(Zv);Pz=p(BQ,"IterableDatasetDict"),BQ.forEach(s),eD.forEach(s),V7=h(a),Kl=o(a,"P",{});var tD=l(Kl);Az=p(tD,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Xv=o(tD,"CODE",{});var HQ=l(Xv);Fz=p(HQ,"IterableDataset"),HQ.forEach(s),Lz=p(tD," objects as values."),tD.forEach(s),U7=h(a),U=o(a,"DIV",{class:!0});var H=l(U);b(oh.$$.fragment,H),Sz=h(H),Ae=o(H,"DIV",{class:!0});var on=l(Ae);b(lh.$$.fragment,on),Oz=h(on),Qv=o(on,"P",{});var GQ=l(Qv);Cz=p(GQ,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),GQ.forEach(s),zz=h(on),ih=o(on,"P",{});var sD=l(ih);Vz=p(sD,"You can specify whether the function should be batched or not with the "),ey=o(sD,"CODE",{});var WQ=l(ey);Uz=p(WQ,"batched"),WQ.forEach(s),Mz=p(sD," parameter:"),sD.forEach(s),Rz=h(on),Wn=o(on,"UL",{});var Sb=l(Wn);ty=o(Sb,"LI",{});var YQ=l(ty);Bz=p(YQ,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),YQ.forEach(s),Hz=h(Sb),sy=o(Sb,"LI",{});var JQ=l(sy);Gz=p(JQ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),JQ.forEach(s),Wz=h(Sb),ge=o(Sb,"LI",{});var qt=l(ge);Yz=p(qt,"If batched is True and batch_size is "),ay=o(qt,"CODE",{});var KQ=l(ay);Jz=p(KQ,"n"),KQ.forEach(s),Kz=p(qt," > 1, then the function takes a batch of "),ny=o(qt,"CODE",{});var ZQ=l(ny);Zz=p(ZQ,"n"),ZQ.forEach(s),Xz=p(qt," examples as input and can return a batch with "),ry=o(qt,"CODE",{});var XQ=l(ry);Qz=p(XQ,"n"),XQ.forEach(s),eV=p(qt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),oy=o(qt,"CODE",{});var QQ=l(oy);tV=p(QQ,"n"),QQ.forEach(s),sV=p(qt,` examples.
A batch is a dictionary, e.g. a batch of `),ly=o(qt,"CODE",{});var eee=l(ly);aV=p(eee,"n"),eee.forEach(s),nV=p(qt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),qt.forEach(s),Sb.forEach(s),rV=h(on),b(Zl.$$.fragment,on),on.forEach(s),oV=h(H),wa=o(H,"DIV",{class:!0});var Ob=l(wa);b(ph.$$.fragment,Ob),lV=h(Ob),iy=o(Ob,"P",{});var tee=l(iy);iV=p(tee,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),tee.forEach(s),pV=h(Ob),b(Xl.$$.fragment,Ob),Ob.forEach(s),cV=h(H),ie=o(H,"DIV",{class:!0});var It=l(ie);b(ch.$$.fragment,It),dV=h(It),py=o(It,"P",{});var see=l(py);mV=p(see,`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),see.forEach(s),hV=h(It),cy=o(It,"P",{});var aee=l(cy);fV=p(aee,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),aee.forEach(s),uV=h(It),dh=o(It,"P",{});var aD=l(dh);gV=p(aD,"For instance, if your dataset contains 10,000 elements but "),dy=o(aD,"CODE",{});var nee=l(dy);_V=p(nee,"buffer_size"),nee.forEach(s),bV=p(aD,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),aD.forEach(s),$V=h(It),Yn=o(It,"P",{});var Cb=l(Yn);xV=p(Cb,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Rg=o(Cb,"A",{href:!0});var ree=l(Rg);vV=p(ree,"datasets.IterableDataset.skip()"),ree.forEach(s),yV=p(Cb," or "),Bg=o(Cb,"A",{href:!0});var oee=l(Bg);jV=p(oee,"datasets.IterableDataset.take()"),oee.forEach(s),wV=p(Cb,`
then the order of the shards is kept unchanged.`),Cb.forEach(s),DV=h(It),b(Ql.$$.fragment,It),It.forEach(s),kV=h(H),Da=o(H,"DIV",{class:!0});var zb=l(Da);b(mh.$$.fragment,zb),EV=h(zb),my=o(zb,"P",{});var lee=l(my);qV=p(lee,`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),lee.forEach(s),IV=h(zb),b(ei.$$.fragment,zb),zb.forEach(s),TV=h(H),ka=o(H,"DIV",{class:!0});var Vb=l(ka);b(hh.$$.fragment,Vb),NV=h(Vb),hy=o(Vb,"P",{});var iee=l(hy);PV=p(iee,`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),iee.forEach(s),AV=h(Vb),b(ti.$$.fragment,Vb),Vb.forEach(s),FV=h(H),Ea=o(H,"DIV",{class:!0});var Ub=l(Ea);b(fh.$$.fragment,Ub),LV=h(Ub),fy=o(Ub,"P",{});var pee=l(fy);SV=p(pee,`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),pee.forEach(s),OV=h(Ub),b(si.$$.fragment,Ub),Ub.forEach(s),CV=h(H),qa=o(H,"DIV",{class:!0});var Mb=l(qa);b(uh.$$.fragment,Mb),zV=h(Mb),uy=o(Mb,"P",{});var cee=l(uy);VV=p(cee,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),cee.forEach(s),UV=h(Mb),b(ai.$$.fragment,Mb),Mb.forEach(s),MV=h(H),Ia=o(H,"DIV",{class:!0});var Rb=l(Ia);b(gh.$$.fragment,Rb),RV=h(Rb),gy=o(Rb,"P",{});var dee=l(gy);BV=p(dee,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),dee.forEach(s),HV=h(Rb),b(ni.$$.fragment,Rb),Rb.forEach(s),GV=h(H),Ta=o(H,"DIV",{class:!0});var Bb=l(Ta);b(_h.$$.fragment,Bb),WV=h(Bb),_y=o(Bb,"P",{});var mee=l(_y);YV=p(mee,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),mee.forEach(s),JV=h(Bb),b(ri.$$.fragment,Bb),Bb.forEach(s),H.forEach(s),M7=h(a),Jn=o(a,"H2",{class:!0});var nD=l(Jn);oi=o(nD,"A",{id:!0,class:!0,href:!0});var hee=l(oi);by=o(hee,"SPAN",{});var fee=l(by);b(bh.$$.fragment,fee),fee.forEach(s),hee.forEach(s),KV=h(nD),$y=o(nD,"SPAN",{});var uee=l($y);ZV=p(uee,"Features"),uee.forEach(s),nD.forEach(s),R7=h(a),O=o(a,"DIV",{class:!0});var z=l(O);b($h.$$.fragment,z),XV=h(z),xy=o(z,"P",{});var gee=l(xy);QV=p(gee,"A special dictionary that defines the internal structure of a dataset."),gee.forEach(s),eU=h(z),xh=o(z,"P",{});var rD=l(xh);tU=p(rD,"Instantiated with a dictionary of type "),vy=o(rD,"CODE",{});var _ee=l(vy);sU=p(_ee,"dict[str, FieldType]"),_ee.forEach(s),aU=p(rD,`, where keys are the desired column names,
and values are the type of that column.`),rD.forEach(s),nU=h(z),Hg=o(z,"P",{});var SY=l(Hg);yy=o(SY,"CODE",{});var bee=l(yy);rU=p(bee,"FieldType"),bee.forEach(s),oU=p(SY," can be one of the following:"),SY.forEach(s),lU=h(z),J=o(z,"UL",{});var ce=l(J);jy=o(ce,"LI",{});var $ee=l(jy);Na=o($ee,"P",{});var tu=l(Na);iU=p(tu,"a "),Gg=o(tu,"A",{href:!0});var xee=l(Gg);pU=p(xee,"datasets.Value"),xee.forEach(s),cU=p(tu," feature specifies a single typed value, e.g. "),wy=o(tu,"CODE",{});var vee=l(wy);dU=p(vee,"int64"),vee.forEach(s),mU=p(tu," or "),Dy=o(tu,"CODE",{});var yee=l(Dy);hU=p(yee,"string"),yee.forEach(s),tu.forEach(s),$ee.forEach(s),fU=h(ce),ky=o(ce,"LI",{});var jee=l(ky);vh=o(jee,"P",{});var oD=l(vh);uU=p(oD,"a "),Wg=o(oD,"A",{href:!0});var wee=l(Wg);gU=p(wee,"datasets.ClassLabel"),wee.forEach(s),_U=p(oD,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),oD.forEach(s),jee.forEach(s),bU=h(ce),Ey=o(ce,"LI",{});var Dee=l(Ey);yh=o(Dee,"P",{});var lD=l(yh);$U=p(lD,"a python "),qy=o(lD,"CODE",{});var kee=l(qy);xU=p(kee,"dict"),kee.forEach(s),vU=p(lD,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),lD.forEach(s),Dee.forEach(s),yU=h(ce),jh=o(ce,"LI",{});var iD=l(jh);He=o(iD,"P",{});var ln=l(He);jU=p(ln,"a python "),Iy=o(ln,"CODE",{});var Eee=l(Iy);wU=p(Eee,"list"),Eee.forEach(s),DU=p(ln," or a "),Yg=o(ln,"A",{href:!0});var qee=l(Yg);kU=p(qee,"datasets.Sequence"),qee.forEach(s),EU=p(ln,` specifies that the field contains a list of objects. The python
`),Ty=o(ln,"CODE",{});var Iee=l(Ty);qU=p(Iee,"list"),Iee.forEach(s),IU=p(ln," or "),Jg=o(ln,"A",{href:!0});var Tee=l(Jg);TU=p(Tee,"datasets.Sequence"),Tee.forEach(s),NU=p(ln,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),ln.forEach(s),PU=h(iD),b(li.$$.fragment,iD),iD.forEach(s),AU=h(ce),Ny=o(ce,"LI",{});var Nee=l(Ny);Ge=o(Nee,"P",{});var pn=l(Ge);FU=p(pn,"a "),Kg=o(pn,"A",{href:!0});var Pee=l(Kg);LU=p(Pee,"Array2D"),Pee.forEach(s),SU=p(pn,", "),Zg=o(pn,"A",{href:!0});var Aee=l(Zg);OU=p(Aee,"Array3D"),Aee.forEach(s),CU=p(pn,", "),Xg=o(pn,"A",{href:!0});var Fee=l(Xg);zU=p(Fee,"Array4D"),Fee.forEach(s),VU=p(pn," or "),Qg=o(pn,"A",{href:!0});var Lee=l(Qg);UU=p(Lee,"Array5D"),Lee.forEach(s),MU=p(pn," feature for multidimensional arrays"),pn.forEach(s),Nee.forEach(s),RU=h(ce),Py=o(ce,"LI",{});var See=l(Py);wh=o(See,"P",{});var pD=l(wh);BU=p(pD,"an "),e_=o(pD,"A",{href:!0});var Oee=l(e_);HU=p(Oee,"Audio"),Oee.forEach(s),GU=p(pD,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),pD.forEach(s),See.forEach(s),WU=h(ce),Ay=o(ce,"LI",{});var Cee=l(Ay);Yt=o(Cee,"P",{});var kp=l(Yt);YU=p(kp,"an "),t_=o(kp,"A",{href:!0});var zee=l(t_);JU=p(zee,"Image"),zee.forEach(s),KU=p(kp," feature to store the absolute path to an image file, an "),Fy=o(kp,"CODE",{});var Vee=l(Fy);ZU=p(Vee,"np.ndarray"),Vee.forEach(s),XU=p(kp," object, a "),Ly=o(kp,"CODE",{});var Uee=l(Ly);QU=p(Uee,"PIL.Image.Image"),Uee.forEach(s),eM=p(kp,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),kp.forEach(s),Cee.forEach(s),tM=h(ce),Sy=o(ce,"LI",{});var Mee=l(Sy);ii=o(Mee,"P",{});var v7=l(ii);s_=o(v7,"A",{href:!0});var Ree=l(s_);sM=p(Ree,"datasets.Translation"),Ree.forEach(s),aM=p(v7," and "),a_=o(v7,"A",{href:!0});var Bee=l(a_);nM=p(Bee,"datasets.TranslationVariableLanguages"),Bee.forEach(s),rM=p(v7,", the two features specific to Machine Translation"),v7.forEach(s),Mee.forEach(s),ce.forEach(s),oM=h(z),Pa=o(z,"DIV",{class:!0});var Hb=l(Pa);b(Dh.$$.fragment,Hb),lM=h(Hb),Oy=o(Hb,"P",{});var Hee=l(Oy);iM=p(Hee,"Make a deep copy of Features."),Hee.forEach(s),pM=h(Hb),b(pi.$$.fragment,Hb),Hb.forEach(s),cM=h(z),ci=o(z,"DIV",{class:!0});var cD=l(ci);b(kh.$$.fragment,cD),dM=h(cD),Cy=o(cD,"P",{});var Gee=l(Cy);mM=p(Gee,"Decode batch with custom feature decoding."),Gee.forEach(s),cD.forEach(s),hM=h(z),di=o(z,"DIV",{class:!0});var dD=l(di);b(Eh.$$.fragment,dD),fM=h(dD),zy=o(dD,"P",{});var Wee=l(zy);uM=p(Wee,"Decode column with custom feature decoding."),Wee.forEach(s),dD.forEach(s),gM=h(z),mi=o(z,"DIV",{class:!0});var mD=l(mi);b(qh.$$.fragment,mD),_M=h(mD),Vy=o(mD,"P",{});var Yee=l(Vy);bM=p(Yee,"Decode example with custom feature decoding."),Yee.forEach(s),mD.forEach(s),$M=h(z),hi=o(z,"DIV",{class:!0});var hD=l(hi);b(Ih.$$.fragment,hD),xM=h(hD),Uy=o(hD,"P",{});var Jee=l(Uy);vM=p(Jee,"Encode batch into a format for Arrow."),Jee.forEach(s),hD.forEach(s),yM=h(z),fi=o(z,"DIV",{class:!0});var fD=l(fi);b(Th.$$.fragment,fD),jM=h(fD),My=o(fD,"P",{});var Kee=l(My);wM=p(Kee,"Encode example into a format for Arrow."),Kee.forEach(s),fD.forEach(s),DM=h(z),_t=o(z,"DIV",{class:!0});var Ep=l(_t);b(Nh.$$.fragment,Ep),kM=h(Ep),Ry=o(Ep,"P",{});var Zee=l(Ry);EM=p(Zee,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),Zee.forEach(s),qM=h(Ep),By=o(Ep,"P",{});var Xee=l(By);IM=p(Xee,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),Xee.forEach(s),TM=h(Ep),b(ui.$$.fragment,Ep),Ep.forEach(s),NM=h(z),gi=o(z,"DIV",{class:!0});var uD=l(gi);b(Ph.$$.fragment,uD),PM=h(uD),Hy=o(uD,"P",{});var Qee=l(Hy);AM=p(Qee,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),Qee.forEach(s),uD.forEach(s),FM=h(z),Fe=o(z,"DIV",{class:!0});var cn=l(Fe);b(Ah.$$.fragment,cn),LM=h(cn),Gy=o(cn,"P",{});var ete=l(Gy);SM=p(ete,"Construct Features from dict."),ete.forEach(s),OM=h(cn),Wy=o(cn,"P",{});var tte=l(Wy);CM=p(tte,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),tte.forEach(s),zM=h(cn),Jt=o(cn,"P",{});var qp=l(Jt);VM=p(qp,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),n_=o(qp,"A",{href:!0});var ste=l(n_);UM=p(ste,"DatasetInfo"),ste.forEach(s),MM=p(qp,` that was dumped to a JSON object. This acts as an analogue to
`),r_=o(qp,"A",{href:!0});var ate=l(r_);RM=p(ate,"Features.from_arrow_schema()"),ate.forEach(s),BM=p(qp,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),o_=o(qp,"A",{href:!0});var nte=l(o_);HM=p(nte,"Value"),nte.forEach(s),GM=p(qp," automatically performs."),qp.forEach(s),WM=h(cn),b(_i.$$.fragment,cn),cn.forEach(s),YM=h(z),bt=o(z,"DIV",{class:!0});var Ip=l(bt);b(Fh.$$.fragment,Ip),JM=h(Ip),Yy=o(Ip,"P",{});var rte=l(Yy);KM=p(rte,"Reorder Features fields to match the field order of other Features."),rte.forEach(s),ZM=h(Ip),Jy=o(Ip,"P",{});var ote=l(Jy);XM=p(ote,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),ote.forEach(s),QM=h(Ip),b(bi.$$.fragment,Ip),Ip.forEach(s),z.forEach(s),B7=h(a),Kt=o(a,"DIV",{class:!0});var Gb=l(Kt);b(Lh.$$.fragment,Gb),eR=h(Gb),Ky=o(Gb,"P",{});var lte=l(Ky);tR=p(lte,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),lte.forEach(s),sR=h(Gb),b($i.$$.fragment,Gb),Gb.forEach(s),H7=h(a),B=o(a,"DIV",{class:!0});var X=l(B);b(Sh.$$.fragment,X),aR=h(X),Zy=o(X,"P",{});var ite=l(Zy);nR=p(ite,"Feature type for integer class labels."),ite.forEach(s),rR=h(X),Oh=o(X,"P",{});var gD=l(Oh);oR=p(gD,"There are 3 ways to define a "),Xy=o(gD,"EM",{});var pte=l(Xy);lR=p(pte,"ClassLabel"),pte.forEach(s),iR=p(gD,", which correspond to the 3 arguments:"),gD.forEach(s),pR=h(X),Kn=o(X,"UL",{});var Wb=l(Kn);l_=o(Wb,"LI",{});var OY=l(l_);Qy=o(OY,"EM",{});var cte=l(Qy);cR=p(cte,"num_classes"),cte.forEach(s),dR=p(OY,": Create 0 to (num_classes-1) labels."),OY.forEach(s),mR=h(Wb),i_=o(Wb,"LI",{});var CY=l(i_);ej=o(CY,"EM",{});var dte=l(ej);hR=p(dte,"names"),dte.forEach(s),fR=p(CY,": List of label strings."),CY.forEach(s),uR=h(Wb),p_=o(Wb,"LI",{});var zY=l(p_);tj=o(zY,"EM",{});var mte=l(tj);gR=p(mte,"names_file"),mte.forEach(s),_R=p(zY,": File containing the list of labels."),zY.forEach(s),Wb.forEach(s),bR=h(X),sj=o(X,"P",{});var hte=l(sj);$R=p(hte,`Under the hood the labels are stored as integers.
You can use negative integers to represent unknown/missing labels.`),hte.forEach(s),xR=h(X),b(xi.$$.fragment,X),vR=h(X),Aa=o(X,"DIV",{class:!0});var Yb=l(Aa);b(Ch.$$.fragment,Yb),yR=h(Yb),aj=o(Yb,"P",{});var fte=l(aj);jR=p(fte,`Cast an Arrow array to the ClassLabel arrow storage type.
The Arrow types that can be converted to the ClassLabel pyarrow storage type are:`),fte.forEach(s),wR=h(Yb),zh=o(Yb,"UL",{});var _D=l(zh);nj=o(_D,"LI",{});var ute=l(nj);DR=p(ute,"pa.string()"),ute.forEach(s),kR=h(_D),rj=o(_D,"LI",{});var gte=l(rj);ER=p(gte,"pa.int()"),gte.forEach(s),_D.forEach(s),Yb.forEach(s),qR=h(X),$t=o(X,"DIV",{class:!0});var Tp=l($t);b(Vh.$$.fragment,Tp),IR=h(Tp),oj=o(Tp,"P",{});var _te=l(oj);TR=p(_te,"Conversion integer => class name string."),_te.forEach(s),NR=h(Tp),lj=o(Tp,"P",{});var bte=l(lj);PR=p(bte,"Regarding unknown/missing labels: passing negative integers raises ValueError."),bte.forEach(s),AR=h(Tp),b(vi.$$.fragment,Tp),Tp.forEach(s),FR=h(X),Fa=o(X,"DIV",{class:!0});var Jb=l(Fa);b(Uh.$$.fragment,Jb),LR=h(Jb),ij=o(Jb,"P",{});var $te=l(ij);SR=p($te,"Conversion class name string => integer."),$te.forEach(s),OR=h(Jb),b(yi.$$.fragment,Jb),Jb.forEach(s),X.forEach(s),G7=h(a),We=o(a,"DIV",{class:!0});var Np=l(We);b(Mh.$$.fragment,Np),CR=h(Np),pj=o(Np,"P",{});var xte=l(pj);zR=p(xte,"The Value dtypes are as follows:"),xte.forEach(s),VR=h(Np),cj=o(Np,"P",{});var vte=l(cj);UR=p(vte,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),vte.forEach(s),MR=h(Np),b(ji.$$.fragment,Np),Np.forEach(s),W7=h(a),te=o(a,"DIV",{class:!0});var Tt=l(te);b(Rh.$$.fragment,Tt),RR=h(Tt),c_=o(Tt,"P",{});var VY=l(c_);dj=o(VY,"CODE",{});var yte=l(dj);BR=p(yte,"FeatureConnector"),yte.forEach(s),HR=p(VY,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),VY.forEach(s),GR=h(Tt),mj=o(Tt,"P",{});var jte=l(mj);WR=p(jte,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),jte.forEach(s),YR=h(Tt),Bh=o(Tt,"P",{});var bD=l(Bh);JR=p(bD,"Output: A dictionary mapping string language codes to translations as "),hj=o(bD,"CODE",{});var wte=l(hj);KR=p(wte,"Text"),wte.forEach(s),ZR=p(bD,`
features.`),bD.forEach(s),XR=h(Tt),b(wi.$$.fragment,Tt),QR=h(Tt),Di=o(Tt,"DIV",{class:!0});var $D=l(Di);b(Hh.$$.fragment,$D),eB=h($D),fj=o($D,"P",{});var Dte=l(fj);tB=p(Dte,"Flatten the Translation feature into a dictionary."),Dte.forEach(s),$D.forEach(s),Tt.forEach(s),Y7=h(a),se=o(a,"DIV",{class:!0});var Nt=l(se);b(Gh.$$.fragment,Nt),sB=h(Nt),d_=o(Nt,"P",{});var UY=l(d_);uj=o(UY,"CODE",{});var kte=l(uj);aB=p(kte,"FeatureConnector"),kte.forEach(s),nB=p(UY,` for translations with variable languages per example.
Here for compatiblity with tfds.`),UY.forEach(s),rB=h(Nt),gj=o(Nt,"P",{});var Ete=l(gj);oB=p(Ete,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),Ete.forEach(s),lB=h(Nt),_j=o(Nt,"P",{});var qte=l(_j);iB=p(qte,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),qte.forEach(s),pB=h(Nt),b(ki.$$.fragment,Nt),cB=h(Nt),Ei=o(Nt,"DIV",{class:!0});var xD=l(Ei);b(Wh.$$.fragment,xD),dB=h(xD),bj=o(xD,"P",{});var Ite=l(bj);mB=p(Ite,"Flatten the TranslationVariableLanguages feature into a dictionary."),Ite.forEach(s),xD.forEach(s),Nt.forEach(s),J7=h(a),Zt=o(a,"DIV",{class:!0});var Kb=l(Zt);b(Yh.$$.fragment,Kb),hB=h(Kb),$j=o(Kb,"P",{});var Tte=l($j);fB=p(Tte,"Create a two-dimensional array."),Tte.forEach(s),uB=h(Kb),b(qi.$$.fragment,Kb),Kb.forEach(s),K7=h(a),Xt=o(a,"DIV",{class:!0});var Zb=l(Xt);b(Jh.$$.fragment,Zb),gB=h(Zb),xj=o(Zb,"P",{});var Nte=l(xj);_B=p(Nte,"Create a three-dimensional array."),Nte.forEach(s),bB=h(Zb),b(Ii.$$.fragment,Zb),Zb.forEach(s),Z7=h(a),Qt=o(a,"DIV",{class:!0});var Xb=l(Qt);b(Kh.$$.fragment,Xb),$B=h(Xb),vj=o(Xb,"P",{});var Pte=l(vj);xB=p(Pte,"Create a four-dimensional array."),Pte.forEach(s),vB=h(Xb),b(Ti.$$.fragment,Xb),Xb.forEach(s),X7=h(a),es=o(a,"DIV",{class:!0});var Qb=l(es);b(Zh.$$.fragment,Qb),yB=h(Qb),yj=o(Qb,"P",{});var Ate=l(yj);jB=p(Ate,"Create a five-dimensional array."),Ate.forEach(s),wB=h(Qb),b(Ni.$$.fragment,Qb),Qb.forEach(s),Q7=h(a),M=o(a,"DIV",{class:!0});var G=l(M);b(Xh.$$.fragment,G),DB=h(G),jj=o(G,"P",{});var Fte=l(jj);kB=p(Fte,"Audio Feature to extract audio data from an audio file."),Fte.forEach(s),EB=h(G),wj=o(G,"P",{});var Lte=l(wj);qB=p(Lte,"Input: The Audio feature accepts as input:"),Lte.forEach(s),IB=h(G),Zn=o(G,"UL",{});var e$=l(Zn);Dj=o(e$,"LI",{});var Ste=l(Dj);Qh=o(Ste,"P",{});var vD=l(Qh);TB=p(vD,"A "),kj=o(vD,"CODE",{});var Ote=l(kj);NB=p(Ote,"str"),Ote.forEach(s),PB=p(vD,": Absolute path to the audio file (i.e. random access is allowed)."),vD.forEach(s),Ste.forEach(s),AB=h(e$),Xn=o(e$,"LI",{});var t$=l(Xn);ef=o(t$,"P",{});var yD=l(ef);FB=p(yD,"A "),Ej=o(yD,"CODE",{});var Cte=l(Ej);LB=p(Cte,"dict"),Cte.forEach(s),SB=p(yD," with the keys:"),yD.forEach(s),OB=h(t$),tf=o(t$,"UL",{});var jD=l(tf);qj=o(jD,"LI",{});var zte=l(qj);CB=p(zte,"path: String with relative path of the audio file to the archive file."),zte.forEach(s),zB=h(jD),Ij=o(jD,"LI",{});var Vte=l(Ij);VB=p(Vte,"bytes: Bytes content of the audio file."),Vte.forEach(s),jD.forEach(s),UB=h(t$),Tj=o(t$,"P",{});var Ute=l(Tj);MB=p(Ute,"This is useful for archived files with sequential access."),Ute.forEach(s),t$.forEach(s),RB=h(e$),Qn=o(e$,"LI",{});var s$=l(Qn);sf=o(s$,"P",{});var wD=l(sf);BB=p(wD,"A "),Nj=o(wD,"CODE",{});var Mte=l(Nj);HB=p(Mte,"dict"),Mte.forEach(s),GB=p(wD," with the keys:"),wD.forEach(s),WB=h(s$),er=o(s$,"UL",{});var a$=l(er);Pj=o(a$,"LI",{});var Rte=l(Pj);YB=p(Rte,"path: String with relative path of the audio file to the archive file."),Rte.forEach(s),JB=h(a$),Aj=o(a$,"LI",{});var Bte=l(Aj);KB=p(Bte,"array: Array containing the audio sample"),Bte.forEach(s),ZB=h(a$),Fj=o(a$,"LI",{});var Hte=l(Fj);XB=p(Hte,"sampling_rate: Integer corresponding to the samping rate of the audio sample."),Hte.forEach(s),a$.forEach(s),QB=h(s$),Lj=o(s$,"P",{});var Gte=l(Lj);eH=p(Gte,"This is useful for archived files with sequential access."),Gte.forEach(s),s$.forEach(s),e$.forEach(s),tH=h(G),b(Pi.$$.fragment,G),sH=h(G),La=o(G,"DIV",{class:!0});var n$=l(La);b(af.$$.fragment,n$),aH=h(n$),Sj=o(n$,"P",{});var Wte=l(Sj);nH=p(Wte,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),Wte.forEach(s),rH=h(n$),ts=o(n$,"UL",{});var Pp=l(ts);Oj=o(Pp,"LI",{});var Yte=l(Oj);oH=p(Yte,"pa.string() - it must contain the \u201Cpath\u201D data"),Yte.forEach(s),lH=h(Pp),Cj=o(Pp,"LI",{});var Jte=l(Cj);iH=p(Jte,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),Jte.forEach(s),pH=h(Pp),zj=o(Pp,"LI",{});var Kte=l(zj);cH=p(Kte,"pa.struct({\u201Cpath\u201D: pa.string()})"),Kte.forEach(s),dH=h(Pp),Vj=o(Pp,"LI",{});var Zte=l(Vj);mH=p(Zte,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),Zte.forEach(s),Pp.forEach(s),n$.forEach(s),hH=h(G),Ai=o(G,"DIV",{class:!0});var DD=l(Ai);b(nf.$$.fragment,DD),fH=h(DD),Uj=o(DD,"P",{});var Xte=l(Uj);uH=p(Xte,"Decode example audio file into audio data."),Xte.forEach(s),DD.forEach(s),gH=h(G),Fi=o(G,"DIV",{class:!0});var kD=l(Fi);b(rf.$$.fragment,kD),_H=h(kD),Mj=o(kD,"P",{});var Qte=l(Mj);bH=p(Qte,"Embed audio files into the Arrow array."),Qte.forEach(s),kD.forEach(s),$H=h(G),Li=o(G,"DIV",{class:!0});var ED=l(Li);b(of.$$.fragment,ED),xH=h(ED),Rj=o(ED,"P",{});var ese=l(Rj);vH=p(ese,"Encode example into a format for Arrow."),ese.forEach(s),ED.forEach(s),yH=h(G),Si=o(G,"DIV",{class:!0});var qD=l(Si);b(lf.$$.fragment,qD),jH=h(qD),Bj=o(qD,"P",{});var tse=l(Bj);wH=p(tse,"If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),tse.forEach(s),qD.forEach(s),G.forEach(s),e4=h(a),R=o(a,"DIV",{class:!0});var W=l(R);b(pf.$$.fragment,W),DH=h(W),Hj=o(W,"P",{});var sse=l(Hj);kH=p(sse,"Image feature to read image data from an image file."),sse.forEach(s),EH=h(W),Gj=o(W,"P",{});var ase=l(Gj);qH=p(ase,"Input: The Image feature accepts as input:"),ase.forEach(s),IH=h(W),ss=o(W,"UL",{});var Ap=l(ss);Wj=o(Ap,"LI",{});var nse=l(Wj);cf=o(nse,"P",{});var ID=l(cf);TH=p(ID,"A "),Yj=o(ID,"CODE",{});var rse=l(Yj);NH=p(rse,"str"),rse.forEach(s),PH=p(ID,": Absolute path to the image file (i.e. random access is allowed)."),ID.forEach(s),nse.forEach(s),AH=h(Ap),tr=o(Ap,"LI",{});var r$=l(tr);df=o(r$,"P",{});var TD=l(df);FH=p(TD,"A "),Jj=o(TD,"CODE",{});var ose=l(Jj);LH=p(ose,"dict"),ose.forEach(s),SH=p(TD," with the keys:"),TD.forEach(s),OH=h(r$),mf=o(r$,"UL",{});var ND=l(mf);Kj=o(ND,"LI",{});var lse=l(Kj);CH=p(lse,"path: String with relative path of the image file to the archive file."),lse.forEach(s),zH=h(ND),Zj=o(ND,"LI",{});var ise=l(Zj);VH=p(ise,"bytes: Bytes of the image file."),ise.forEach(s),ND.forEach(s),UH=h(r$),Xj=o(r$,"P",{});var pse=l(Xj);MH=p(pse,"This is useful for archived files with sequential access."),pse.forEach(s),r$.forEach(s),RH=h(Ap),Qj=o(Ap,"LI",{});var cse=l(Qj);hf=o(cse,"P",{});var PD=l(hf);BH=p(PD,"An "),e0=o(PD,"CODE",{});var dse=l(e0);HH=p(dse,"np.ndarray"),dse.forEach(s),GH=p(PD,": NumPy array representing an image."),PD.forEach(s),cse.forEach(s),WH=h(Ap),t0=o(Ap,"LI",{});var mse=l(t0);ff=o(mse,"P",{});var AD=l(ff);YH=p(AD,"A "),s0=o(AD,"CODE",{});var hse=l(s0);JH=p(hse,"PIL.Image.Image"),hse.forEach(s),KH=p(AD,": PIL image object."),AD.forEach(s),mse.forEach(s),Ap.forEach(s),ZH=h(W),b(Oi.$$.fragment,W),XH=h(W),Sa=o(W,"DIV",{class:!0});var o$=l(Sa);b(uf.$$.fragment,o$),QH=h(o$),a0=o(o$,"P",{});var fse=l(a0);eG=p(fse,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),fse.forEach(s),tG=h(o$),Ye=o(o$,"UL",{});var dn=l(Ye);n0=o(dn,"LI",{});var use=l(n0);sG=p(use,"pa.string() - it must contain the \u201Cpath\u201D data"),use.forEach(s),aG=h(dn),r0=o(dn,"LI",{});var gse=l(r0);nG=p(gse,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),gse.forEach(s),rG=h(dn),o0=o(dn,"LI",{});var _se=l(o0);oG=p(_se,"pa.struct({\u201Cpath\u201D: pa.string()})"),_se.forEach(s),lG=h(dn),l0=o(dn,"LI",{});var bse=l(l0);iG=p(bse,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),bse.forEach(s),pG=h(dn),i0=o(dn,"LI",{});var $se=l(i0);cG=p($se,"pa.list(*) - it must contain the image array data"),$se.forEach(s),dn.forEach(s),o$.forEach(s),dG=h(W),Ci=o(W,"DIV",{class:!0});var FD=l(Ci);b(gf.$$.fragment,FD),mG=h(FD),p0=o(FD,"P",{});var xse=l(p0);hG=p(xse,"Decode example image file into image data."),xse.forEach(s),FD.forEach(s),fG=h(W),zi=o(W,"DIV",{class:!0});var LD=l(zi);b(_f.$$.fragment,LD),uG=h(LD),c0=o(LD,"P",{});var vse=l(c0);gG=p(vse,"Embed image files into the Arrow array."),vse.forEach(s),LD.forEach(s),_G=h(W),Vi=o(W,"DIV",{class:!0});var SD=l(Vi);b(bf.$$.fragment,SD),bG=h(SD),d0=o(SD,"P",{});var yse=l(d0);$G=p(yse,"Encode example into a format for Arrow."),yse.forEach(s),SD.forEach(s),xG=h(W),Ui=o(W,"DIV",{class:!0});var OD=l(Ui);b($f.$$.fragment,OD),vG=h(OD),m0=o(OD,"P",{});var jse=l(m0);yG=p(jse,"If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),jse.forEach(s),OD.forEach(s),W.forEach(s),t4=h(a),sr=o(a,"H2",{class:!0});var CD=l(sr);Mi=o(CD,"A",{id:!0,class:!0,href:!0});var wse=l(Mi);h0=o(wse,"SPAN",{});var Dse=l(h0);b(xf.$$.fragment,Dse),Dse.forEach(s),wse.forEach(s),jG=h(CD),f0=o(CD,"SPAN",{});var kse=l(f0);wG=p(kse,"MetricInfo"),kse.forEach(s),CD.forEach(s),s4=h(a),ae=o(a,"DIV",{class:!0});var Pt=l(ae);b(vf.$$.fragment,Pt),DG=h(Pt),u0=o(Pt,"P",{});var Ese=l(u0);kG=p(Ese,"Information about a metric."),Ese.forEach(s),EG=h(Pt),m_=o(Pt,"P",{});var MY=l(m_);g0=o(MY,"CODE",{});var qse=l(g0);qG=p(qse,"MetricInfo"),qse.forEach(s),IG=p(MY,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),MY.forEach(s),TG=h(Pt),_0=o(Pt,"P",{});var Ise=l(_0);NG=p(Ise,"Note: Not all fields are known on construction and may be updated later."),Ise.forEach(s),PG=h(Pt),Oa=o(Pt,"DIV",{class:!0});var l$=l(Oa);b(yf.$$.fragment,l$),AG=h(l$),jf=o(l$,"P",{});var zD=l(jf);FG=p(zD,"Create MetricInfo from the JSON file in "),b0=o(zD,"CODE",{});var Tse=l(b0);LG=p(Tse,"metric_info_dir"),Tse.forEach(s),SG=p(zD,"."),zD.forEach(s),OG=h(l$),b(Ri.$$.fragment,l$),l$.forEach(s),CG=h(Pt),Ca=o(Pt,"DIV",{class:!0});var i$=l(Ca);b(wf.$$.fragment,i$),zG=h(i$),as=o(i$,"P",{});var Fp=l(as);VG=p(Fp,"Write "),$0=o(Fp,"CODE",{});var Nse=l($0);UG=p(Nse,"MetricInfo"),Nse.forEach(s),MG=p(Fp," as JSON to "),x0=o(Fp,"CODE",{});var Pse=l(x0);RG=p(Pse,"metric_info_dir"),Pse.forEach(s),BG=p(Fp,`.
Also save the license separately in LICENCE.
If `),v0=o(Fp,"CODE",{});var Ase=l(v0);HG=p(Ase,"pretty_print"),Ase.forEach(s),GG=p(Fp," is True, the JSON will be pretty-printed with the indent level of 4."),Fp.forEach(s),WG=h(i$),b(Bi.$$.fragment,i$),i$.forEach(s),Pt.forEach(s),a4=h(a),ar=o(a,"H2",{class:!0});var VD=l(ar);Hi=o(VD,"A",{id:!0,class:!0,href:!0});var Fse=l(Hi);y0=o(Fse,"SPAN",{});var Lse=l(y0);b(Df.$$.fragment,Lse),Lse.forEach(s),Fse.forEach(s),YG=h(VD),j0=o(VD,"SPAN",{});var Sse=l(j0);JG=p(Sse,"Metric"),Sse.forEach(s),VD.forEach(s),n4=h(a),za=o(a,"P",{});var p$=l(za);KG=p(p$,"The base class "),w0=o(p$,"CODE",{});var Ose=l(w0);ZG=p(Ose,"Metric"),Ose.forEach(s),XG=p(p$," implements a Metric backed by one or several "),h_=o(p$,"A",{href:!0});var Cse=l(h_);QG=p(Cse,"Dataset"),Cse.forEach(s),eW=p(p$,"."),p$.forEach(s),r4=h(a),K=o(a,"DIV",{class:!0});var Se=l(K);b(kf.$$.fragment,Se),tW=h(Se),D0=o(Se,"P",{});var zse=l(D0);sW=p(zse,"A Metric is the base class and common API for all metrics."),zse.forEach(s),aW=h(Se),b(Gi.$$.fragment,Se),nW=h(Se),Va=o(Se,"DIV",{class:!0});var c$=l(Va);b(Ef.$$.fragment,c$),rW=h(c$),k0=o(c$,"P",{});var Vse=l(k0);oW=p(Vse,"Add one prediction and reference for the metric\u2019s stack."),Vse.forEach(s),lW=h(c$),b(Wi.$$.fragment,c$),c$.forEach(s),iW=h(Se),Ua=o(Se,"DIV",{class:!0});var d$=l(Ua);b(qf.$$.fragment,d$),pW=h(d$),E0=o(d$,"P",{});var Use=l(E0);cW=p(Use,"Add a batch of predictions and references for the metric\u2019s stack."),Use.forEach(s),dW=h(d$),b(Yi.$$.fragment,d$),d$.forEach(s),mW=h(Se),xt=o(Se,"DIV",{class:!0});var Lp=l(xt);b(If.$$.fragment,Lp),hW=h(Lp),q0=o(Lp,"P",{});var Mse=l(q0);fW=p(Mse,"Compute the metrics."),Mse.forEach(s),uW=h(Lp),I0=o(Lp,"P",{});var Rse=l(I0);gW=p(Rse,"Usage of positional arguments is not allowed to prevent mistakes."),Rse.forEach(s),_W=h(Lp),b(Ji.$$.fragment,Lp),Lp.forEach(s),bW=h(Se),Ki=o(Se,"DIV",{class:!0});var UD=l(Ki);b(Tf.$$.fragment,UD),$W=h(UD),T0=o(UD,"P",{});var Bse=l(T0);xW=p(Bse,"Downloads and prepares dataset for reading."),Bse.forEach(s),UD.forEach(s),Se.forEach(s),o4=h(a),nr=o(a,"H2",{class:!0});var MD=l(nr);Zi=o(MD,"A",{id:!0,class:!0,href:!0});var Hse=l(Zi);N0=o(Hse,"SPAN",{});var Gse=l(N0);b(Nf.$$.fragment,Gse),Gse.forEach(s),Hse.forEach(s),vW=h(MD),P0=o(MD,"SPAN",{});var Wse=l(P0);yW=p(Wse,"Filesystems"),Wse.forEach(s),MD.forEach(s),l4=h(a),C=o(a,"DIV",{class:!0});var V=l(C);b(Pf.$$.fragment,V),jW=h(V),Xi=o(V,"P",{});var y7=l(Xi);A0=o(y7,"CODE",{});var Yse=l(A0);wW=p(Yse,"datasets.filesystems.S3FileSystem"),Yse.forEach(s),DW=p(y7," is a subclass of "),Af=o(y7,"A",{href:!0,rel:!0});var Jse=l(Af);F0=o(Jse,"CODE",{});var Kse=l(F0);kW=p(Kse,"s3fs.S3FileSystem"),Kse.forEach(s),Jse.forEach(s),EW=p(y7,"."),y7.forEach(s),qW=h(V),ns=o(V,"P",{});var Sp=l(ns);IW=p(Sp,"Users can use this class to access S3 as if it were a file system. It exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),L0=o(Sp,"CODE",{});var Zse=l(L0);TW=p(Zse,"key="),Zse.forEach(s),NW=p(Sp,", "),S0=o(Sp,"CODE",{});var Xse=l(S0);PW=p(Xse,"secret="),Xse.forEach(s),AW=p(Sp,") or with boto\u2019s credential methods. See botocore documentation for more information. If no credentials are availabe, use "),O0=o(Sp,"CODE",{});var Qse=l(O0);FW=p(Qse,"anon=True"),Qse.forEach(s),LW=p(Sp,"."),Sp.forEach(s),SW=h(V),C0=o(V,"P",{});var eae=l(C0);OW=p(eae,"Examples:"),eae.forEach(s),CW=h(V),z0=o(V,"P",{});var tae=l(z0);zW=p(tae,"Listing files from public S3 bucket."),tae.forEach(s),VW=h(V),b(Qi.$$.fragment,V),UW=h(V),rr=o(V,"P",{});var m$=l(rr);MW=p(m$,"Listing files from private S3 bucket using "),V0=o(m$,"CODE",{});var sae=l(V0);RW=p(sae,"aws_access_key_id"),sae.forEach(s),BW=p(m$," and "),U0=o(m$,"CODE",{});var aae=l(U0);HW=p(aae,"aws_secret_access_key"),aae.forEach(s),GW=p(m$,"."),m$.forEach(s),WW=h(V),b(ep.$$.fragment,V),YW=h(V),rs=o(V,"P",{});var Op=l(rs);JW=p(Op,"Using "),M0=o(Op,"CODE",{});var nae=l(M0);KW=p(nae,"S3Filesystem"),nae.forEach(s),ZW=p(Op," with "),R0=o(Op,"CODE",{});var rae=l(R0);XW=p(rae,"botocore.session.Session"),rae.forEach(s),QW=p(Op," and custom "),B0=o(Op,"CODE",{});var oae=l(B0);eY=p(oae,"aws_profile"),oae.forEach(s),tY=p(Op,"."),Op.forEach(s),sY=h(V),b(tp.$$.fragment,V),aY=h(V),or=o(V,"P",{});var h$=l(or);nY=p(h$,"Loading dataset from S3 using "),H0=o(h$,"CODE",{});var lae=l(H0);rY=p(lae,"S3Filesystem"),lae.forEach(s),oY=p(h$," and "),f_=o(h$,"A",{href:!0});var iae=l(f_);lY=p(iae,"load_from_disk()"),iae.forEach(s),iY=p(h$,"."),h$.forEach(s),pY=h(V),b(sp.$$.fragment,V),cY=h(V),lr=o(V,"P",{});var f$=l(lr);dY=p(f$,"Saving dataset to S3 using "),G0=o(f$,"CODE",{});var pae=l(G0);mY=p(pae,"S3Filesystem"),pae.forEach(s),hY=p(f$," and "),u_=o(f$,"A",{href:!0});var cae=l(u_);fY=p(cae,"Dataset.save_to_disk()"),cae.forEach(s),uY=p(f$,"."),f$.forEach(s),gY=h(V),b(ap.$$.fragment,V),V.forEach(s),i4=h(a),ir=o(a,"DIV",{class:!0});var RD=l(ir);b(Ff.$$.fragment,RD),_Y=h(RD),pr=o(RD,"P",{});var u$=l(pr);bY=p(u$,"preprocesses "),W0=o(u$,"EM",{});var dae=l(W0);$Y=p(dae,"dataset_path"),dae.forEach(s),xY=p(u$," and removes remote filesystem (e.g. removing "),Y0=o(u$,"CODE",{});var mae=l(Y0);vY=p(mae,"s3://"),mae.forEach(s),yY=p(u$,")"),u$.forEach(s),RD.forEach(s),p4=h(a),cr=o(a,"DIV",{class:!0});var BD=l(cr);b(Lf.$$.fragment,BD),jY=h(BD),J0=o(BD,"P",{});var hae=l(J0);wY=p(hae,"Validates if filesystem has remote protocol."),hae.forEach(s),BD.forEach(s),c4=h(a),dr=o(a,"H2",{class:!0});var HD=l(dr);np=o(HD,"A",{id:!0,class:!0,href:!0});var fae=l(np);K0=o(fae,"SPAN",{});var uae=l(K0);b(Sf.$$.fragment,uae),uae.forEach(s),fae.forEach(s),DY=h(HD),Z0=o(HD,"SPAN",{});var gae=l(Z0);kY=p(gae,"Fingerprint"),gae.forEach(s),HD.forEach(s),d4=h(a),mr=o(a,"DIV",{class:!0});var GD=l(mr);b(Of.$$.fragment,GD),EY=h(GD),X0=o(GD,"P",{});var _ae=l(X0);qY=p(_ae,"Hasher that accepts python objects as inputs."),_ae.forEach(s),GD.forEach(s),this.h()},h(){w(c,"name","hf:doc:metadata"),w(c,"content",JSON.stringify(Kre)),w(n,"id","main-classes"),w(n,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(n,"href","#main-classes"),w(f,"class","relative group"),w(be,"id","datasets.DatasetInfo"),w(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(be,"href","#datasets.DatasetInfo"),w(Oe,"class","relative group"),w($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Or,"id","datasets.Dataset"),w(Or,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Or,"href","#datasets.Dataset"),w(fn,"class","relative group"),w(nu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"),w(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ru,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"),w(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ou,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"),w(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Yr,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.__len__"),w(vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.map"),w(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(iu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.set_format"),w(Ns,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.set_transform"),w(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(cu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.set_format"),w(du,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(Ps,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(hu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.with_transform"),w(fu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.set_format"),w(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(uu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.set_format"),w(gu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(_u,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.set_transform"),w(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(As,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Image"),w($u,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Audio"),w(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(vu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Image"),w(yu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Audio"),w(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ju,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(Ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Kc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),w(Kc,"rel","nofollow"),w(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),w(Xc,"rel","nofollow"),w(Ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Rs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Eu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetInfo"),w(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Iu,"href","/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.NamedSplit"),w(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Tu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Nu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Au,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Lu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Su,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ou,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Uu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ru,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features"),w(Bu,"href","/docs/datasets/package_reference/task_templates"),w(Ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Hu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"),w(Gu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"),w(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"),w(Yu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDataset"),w(Ju,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"),w(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ku,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(Zu,"href","/docs/datasets/pr_4831/en/package_reference/loading_methods#datasets.load_dataset"),w(Xu,"href","/docs/datasets/pr_4831/en/package_reference/loading_methods#datasets.load_dataset"),w(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qu,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(eg,"href","/docs/datasets/pr_4831/en/package_reference/loading_methods#datasets.load_dataset"),w(tg,"href","/docs/datasets/pr_4831/en/package_reference/loading_methods#datasets.load_dataset"),w(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(sg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(ag,"href","/docs/datasets/pr_4831/en/package_reference/loading_methods#datasets.load_dataset"),w(ng,"href","/docs/datasets/pr_4831/en/package_reference/loading_methods#datasets.load_dataset"),w(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(tl,"id","datasets.DatasetDict"),w(tl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(tl,"href","#datasets.DatasetDict"),w(Tn,"class","relative group"),w(Xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ol,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.__len__"),w(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(og,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.with_transform"),w(lg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetDict.set_format"),w(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ig,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.set_format"),w(pg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(cg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.map"),w(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(dg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.map"),w(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(mg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.map"),w(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(hg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Image"),w(fg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Audio"),w(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ug,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(gg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Image"),w(_g,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Audio"),w(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($g,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features"),w(xg,"href","/docs/datasets/package_reference/task_templates"),w(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(vg,"id","package_reference_features"),w(Sl,"id","datasets.IterableDataset"),w(Sl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Sl,"href","#datasets.IterableDataset"),w(Rn,"class","relative group"),w(yg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDataset"),w(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDataset.skip"),w(Dg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDataset.take"),w(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Eg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetInfo"),w(Wl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ig,"href","/docs/datasets/pr_4831/en/package_reference/builder_classes#datasets.NamedSplit"),w(Yl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Lg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Sg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Jl,"id","datasets.IterableDatasetDict"),w(Jl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Jl,"href","#datasets.IterableDatasetDict"),w(Gn,"class","relative group"),w(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Rg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDataset.skip"),w(Bg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.IterableDataset.take"),w(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(oi,"id","datasets.Features"),w(oi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(oi,"href","#datasets.Features"),w(Jn,"class","relative group"),w(Gg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Value"),w(Wg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.ClassLabel"),w(Yg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Sequence"),w(Jg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Sequence"),w(Kg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Array2D"),w(Zg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Array3D"),w(Xg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Array4D"),w(Qg,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Array5D"),w(e_,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Audio"),w(t_,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Image"),w(s_,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Translation"),w(a_,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),w(Pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(di,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(mi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(hi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(fi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(gi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(n_,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.DatasetInfo"),w(r_,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),w(o_,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Value"),w(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Di,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ei,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(La,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ai,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Li,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Si,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ui,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mi,"id","datasets.MetricInfo"),w(Mi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Mi,"href","#datasets.MetricInfo"),w(sr,"class","relative group"),w(Oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Hi,"id","datasets.Metric"),w(Hi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Hi,"href","#datasets.Metric"),w(ar,"class","relative group"),w(h_,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset"),w(Va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ki,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zi,"id","datasets.filesystems.S3FileSystem"),w(Zi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Zi,"href","#datasets.filesystems.S3FileSystem"),w(nr,"class","relative group"),w(Af,"href","https://s3fs.readthedocs.io/en/latest/api.html"),w(Af,"rel","nofollow"),w(f_,"href","/docs/datasets/pr_4831/en/package_reference/loading_methods#datasets.load_from_disk"),w(u_,"href","/docs/datasets/pr_4831/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(np,"id","datasets.fingerprint.Hasher"),w(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(np,"href","#datasets.fingerprint.Hasher"),w(dr,"class","relative group"),w(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(a,j){e(document.head,c),D(a,g,j),D(a,f,j),e(f,n),e(n,u),$(t,u,null),e(f,d),e(f,mn),e(mn,us),D(a,Ar,j),D(a,Oe,j),e(Oe,be),e(be,ne),$(gs,ne,null),e(Oe,su),e(Oe,Fr),e(Fr,WD),D(a,j7,j),D(a,Q,j),$(Cp,Q,null),e(Q,YD),e(Q,g$),e(g$,JD),e(Q,KD),e(Q,au),e(au,_$),e(_$,ZD),e(au,XD),e(Q,QD),e(Q,b$),e(b$,ek),e(Q,tk),e(Q,$e),$(zp,$e,null),e($e,sk),e($e,Vp),e(Vp,ak),e(Vp,$$),e($$,nk),e(Vp,rk),e($e,ok),e($e,x$),e(x$,lk),e($e,ik),e($e,v$),e(v$,pk),e($e,ck),$(Lr,$e,null),e(Q,dk),e(Q,_s),$(Up,_s,null),e(_s,mk),e(_s,hn),e(hn,hk),e(hn,y$),e(y$,fk),e(hn,uk),e(hn,j$),e(j$,gk),e(hn,_k),e(_s,bk),$(Sr,_s,null),D(a,w7,j),D(a,fn,j),e(fn,Or),e(Or,w$),$(Mp,w$,null),e(fn,$k),e(fn,D$),e(D$,xk),D(a,D7,j),D(a,Cr,j),e(Cr,vk),e(Cr,nu),e(nu,yk),e(Cr,jk),D(a,k7,j),D(a,q,j),$(Rp,q,null),e(q,wk),e(q,k$),e(k$,Dk),e(q,kk),e(q,tt),$(Bp,tt,null),e(tt,Ek),e(tt,E$),e(E$,qk),e(tt,Ik),e(tt,q$),e(q$,I$),e(I$,Tk),e(tt,Nk),$(zr,tt,null),e(q,Pk),e(q,st),$(Hp,st,null),e(st,Ak),e(st,T$),e(T$,Fk),e(st,Lk),e(st,N$),e(N$,P$),e(P$,Sk),e(st,Ok),$(Vr,st,null),e(q,Ck),e(q,Ur),$(Gp,Ur,null),e(Ur,zk),e(Ur,A$),e(A$,Vk),e(q,Uk),e(q,Mr),$(Wp,Mr,null),e(Mr,Mk),e(Mr,F$),e(F$,Rk),e(q,Bk),e(q,xe),$(Yp,xe,null),e(xe,Hk),e(xe,At),e(At,Gk),e(At,L$),e(L$,Wk),e(At,Yk),e(At,S$),e(S$,Jk),e(At,Kk),e(At,ru),e(ru,Zk),e(At,Xk),e(xe,Qk),e(xe,Jp),e(Jp,e3),e(Jp,O$),e(O$,t3),e(Jp,s3),e(xe,a3),e(xe,Kp),e(Kp,n3),e(Kp,C$),e(C$,r3),e(Kp,o3),e(xe,l3),$(Rr,xe,null),e(q,i3),e(q,Br),$(Zp,Br,null),e(Br,p3),e(Br,Ft),e(Ft,c3),e(Ft,z$),e(z$,d3),e(Ft,m3),e(Ft,V$),e(V$,h3),e(Ft,f3),e(Ft,ou),e(ou,u3),e(Ft,g3),e(q,_3),e(q,bs),$(Xp,bs,null),e(bs,b3),e(bs,U$),e(U$,$3),e(bs,x3),$(Hr,bs,null),e(q,v3),e(q,$s),$(Qp,$s,null),e($s,y3),e($s,M$),e(M$,j3),e($s,w3),$(Gr,$s,null),e(q,D3),e(q,xs),$(ec,xs,null),e(xs,k3),e(xs,R$),e(R$,E3),e(xs,q3),$(Wr,xs,null),e(q,I3),e(q,vs),$(tc,vs,null),e(vs,T3),e(vs,sc),e(sc,N3),e(sc,Yr),e(Yr,P3),e(Yr,B$),e(B$,A3),e(Yr,F3),e(sc,L3),e(vs,S3),$(Jr,vs,null),e(q,O3),e(q,ys),$(ac,ys,null),e(ys,C3),e(ys,H$),e(H$,z3),e(ys,V3),$(Kr,ys,null),e(q,U3),e(q,js),$(nc,js,null),e(js,M3),e(js,G$),e(G$,R3),e(js,B3),$(Zr,js,null),e(q,H3),e(q,at),$(rc,at,null),e(at,G3),e(at,W$),e(W$,W3),e(at,Y3),e(at,Y$),e(Y$,J3),e(at,K3),$(Xr,at,null),e(q,Z3),e(q,ws),$(oc,ws,null),e(ws,X3),e(ws,J$),e(J$,Q3),e(ws,e8),$(Qr,ws,null),e(q,t8),e(q,Ds),$(lc,Ds,null),e(Ds,s8),e(Ds,K$),e(K$,a8),e(Ds,n8),$(eo,Ds,null),e(q,r8),e(q,ks),$(ic,ks,null),e(ks,o8),e(ks,Z$),e(Z$,l8),e(ks,i8),$(to,ks,null),e(q,p8),e(q,nt),$(pc,nt,null),e(nt,c8),e(nt,X$),e(X$,d8),e(nt,m8),e(nt,un),e(un,h8),e(un,lu),e(lu,f8),e(un,u8),e(un,Q$),e(Q$,g8),e(un,_8),e(nt,b8),$(so,nt,null),e(q,$8),e(q,Es),$(cc,Es,null),e(Es,x8),e(Es,e1),e(e1,v8),e(Es,y8),$(ao,Es,null),e(q,j8),e(q,qs),$(dc,qs,null),e(qs,w8),e(qs,t1),e(t1,D8),e(qs,k8),$(no,qs,null),e(q,E8),e(q,Is),$(mc,Is,null),e(Is,q8),e(Is,hc),e(hc,I8),e(hc,s1),e(s1,T8),e(hc,N8),e(Is,P8),$(ro,Is,null),e(q,A8),e(q,Ts),$(fc,Ts,null),e(Ts,F8),e(Ts,a1),e(a1,L8),e(Ts,S8),$(oo,Ts,null),e(q,O8),e(q,Ns),$(uc,Ns,null),e(Ns,C8),e(Ns,n1),e(n1,z8),e(Ns,V8),e(Ns,gc),e(gc,U8),e(gc,iu),e(iu,M8),e(gc,R8),e(q,B8),e(q,lo),$(_c,lo,null),e(lo,H8),e(lo,gn),e(gn,G8),e(gn,r1),e(r1,W8),e(gn,Y8),e(gn,o1),e(o1,J8),e(gn,K8),e(q,Z8),e(q,ve),$(bc,ve,null),e(ve,X8),e(ve,Ce),e(Ce,Q8),e(Ce,l1),e(l1,eE),e(Ce,tE),e(Ce,i1),e(i1,sE),e(Ce,aE),e(Ce,p1),e(p1,nE),e(Ce,rE),e(Ce,pu),e(pu,oE),e(Ce,lE),e(ve,iE),e(ve,ze),e(ze,pE),e(ze,c1),e(c1,cE),e(ze,dE),e(ze,d1),e(d1,mE),e(ze,hE),e(ze,m1),e(m1,fE),e(ze,uE),e(ze,h1),e(h1,gE),e(ze,_E),e(ve,bE),e(ve,f1),e(f1,$E),e(ve,xE),$(io,ve,null),e(q,vE),e(q,Ps),$($c,Ps,null),e(Ps,yE),e(Ps,rt),e(rt,jE),e(rt,u1),e(u1,wE),e(rt,DE),e(rt,g1),e(g1,kE),e(rt,EE),e(rt,cu),e(cu,qE),e(rt,IE),e(rt,du),e(du,TE),e(Ps,NE),$(po,Ps,null),e(q,PE),e(q,ot),$(xc,ot,null),e(ot,AE),e(ot,vc),e(vc,FE),e(vc,_1),e(_1,LE),e(vc,SE),e(ot,OE),e(ot,mu),e(mu,CE),e(mu,b1),e(b1,zE),e(ot,VE),$(co,ot,null),e(q,UE),e(q,ye),$(yc,ye,null),e(ye,ME),e(ye,Lt),e(Lt,RE),e(Lt,$1),e($1,BE),e(Lt,HE),e(Lt,x1),e(x1,GE),e(Lt,WE),e(Lt,v1),e(v1,YE),e(Lt,JE),e(ye,KE),e(ye,jc),e(jc,ZE),e(jc,hu),e(hu,XE),e(jc,QE),e(ye,e5),e(ye,_n),e(_n,t5),e(_n,fu),e(fu,s5),e(_n,a5),e(_n,y1),e(y1,n5),e(_n,r5),e(ye,o5),$(mo,ye,null),e(q,l5),e(q,je),$(wc,je,null),e(je,i5),e(je,bn),e(bn,p5),e(bn,j1),e(j1,c5),e(bn,d5),e(bn,w1),e(w1,m5),e(bn,h5),e(je,f5),e(je,$n),e($n,u5),e($n,uu),e(uu,g5),e($n,_5),e($n,gu),e(gu,b5),e($n,$5),e(je,x5),e(je,xn),e(xn,v5),e(xn,_u),e(_u,y5),e(xn,j5),e(xn,D1),e(D1,w5),e(xn,D5),e(je,k5),$(ho,je,null),e(q,E5),e(q,fo),$(Dc,fo,null),e(fo,q5),e(fo,k1),e(k1,I5),e(q,T5),e(q,lt),$(kc,lt,null),e(lt,N5),e(lt,E1),e(E1,P5),e(lt,A5),e(lt,q1),e(q1,F5),e(lt,L5),$(uo,lt,null),e(q,S5),e(q,we),$(Ec,we,null),e(we,O5),e(we,I1),e(I1,C5),e(we,z5),e(we,qc),e(qc,V5),e(qc,T1),e(T1,U5),e(qc,M5),e(we,R5),e(we,vn),e(vn,N1),e(N1,B5),e(vn,H5),e(vn,P1),e(P1,G5),e(vn,W5),e(vn,de),e(de,Y5),e(de,A1),e(A1,J5),e(de,K5),e(de,F1),e(F1,Z5),e(de,X5),e(de,L1),e(L1,Q5),e(de,e6),e(de,S1),e(S1,t6),e(de,s6),e(de,O1),e(O1,a6),e(de,n6),e(we,r6),$(go,we,null),e(q,o6),e(q,As),$(Ic,As,null),e(As,l6),e(As,C1),e(C1,i6),e(As,p6),$(_o,As,null),e(q,c6),e(q,Fs),$(Tc,Fs,null),e(Fs,d6),e(Fs,z1),e(z1,m6),e(Fs,h6),$(bo,Fs,null),e(q,f6),e(q,it),$(Nc,it,null),e(it,u6),e(it,V1),e(V1,g6),e(it,_6),e(it,U1),e(U1,b6),e(it,$6),$($o,it,null),e(q,x6),e(q,pt),$(Pc,pt,null),e(pt,v6),e(pt,M1),e(M1,y6),e(pt,j6),e(pt,R1),e(R1,w6),e(pt,D6),$(xo,pt,null),e(q,k6),e(q,ct),$(Ac,ct,null),e(ct,E6),e(ct,Y),e(Y,q6),e(Y,B1),e(B1,I6),e(Y,T6),e(Y,H1),e(H1,N6),e(Y,P6),e(Y,G1),e(G1,A6),e(Y,F6),e(Y,W1),e(W1,L6),e(Y,S6),e(Y,Y1),e(Y1,O6),e(Y,C6),e(Y,J1),e(J1,z6),e(Y,V6),e(Y,K1),e(K1,U6),e(Y,M6),e(ct,R6),e(ct,Fc),e(Fc,B6),e(Fc,Z1),e(Z1,H6),e(Fc,G6),e(ct,W6),$(vo,ct,null),e(q,Y6),e(q,re),$(Lc,re,null),e(re,J6),e(re,yn),e(yn,K6),e(yn,X1),e(X1,Z6),e(yn,X6),e(yn,Q1),e(Q1,Q6),e(yn,eq),e(re,tq),e(re,e2),e(e2,sq),e(re,aq),e(re,Sc),e(Sc,nq),e(Sc,t2),e(t2,rq),e(Sc,oq),e(re,lq),e(re,s2),e(s2,iq),e(re,pq),$(yo,re,null),e(q,cq),e(q,Ls),$(Oc,Ls,null),e(Ls,dq),e(Ls,a2),e(a2,mq),e(Ls,hq),$(jo,Ls,null),e(q,fq),e(q,dt),$(Cc,dt,null),e(dt,uq),e(dt,n2),e(n2,gq),e(dt,_q),e(dt,St),e(St,bq),e(St,bu),e(bu,$q),e(St,xq),e(St,$u),e($u,vq),e(St,yq),e(St,r2),e(r2,jq),e(St,wq),e(dt,Dq),$(wo,dt,null),e(q,kq),e(q,Z),$(zc,Z,null),e(Z,Eq),e(Z,jn),e(jn,qq),e(jn,xu),e(xu,Iq),e(jn,Tq),e(jn,o2),e(o2,Nq),e(jn,Pq),e(Z,Aq),e(Z,wn),e(wn,Fq),e(wn,vu),e(vu,Lq),e(wn,Sq),e(wn,yu),e(yu,Oq),e(wn,Cq),e(Z,zq),e(Z,Vc),e(Vc,Vq),e(Vc,l2),e(l2,Uq),e(Vc,Mq),e(Z,Rq),$(Do,Z,null),e(Z,Bq),$(ko,Z,null),e(Z,Hq),$(Eo,Z,null),e(q,Gq),e(q,Ss),$(Uc,Ss,null),e(Ss,Wq),e(Ss,Ot),e(Ot,Yq),e(Ot,i2),e(i2,Jq),e(Ot,Kq),e(Ot,ju),e(ju,Zq),e(Ot,Xq),e(Ot,p2),e(p2,Qq),e(Ot,e9),e(Ss,t9),$(qo,Ss,null),e(q,s9),e(q,Io),$(Mc,Io,null),e(Io,a9),e(Io,c2),e(c2,n9),e(q,r9),e(q,Os),$(Rc,Os,null),e(Os,o9),e(Os,d2),e(d2,l9),e(Os,i9),$(To,Os,null),e(q,p9),e(q,Cs),$(Bc,Cs,null),e(Cs,c9),e(Cs,Hc),e(Hc,d9),e(Hc,m2),e(m2,m9),e(Hc,h9),e(Cs,f9),$(No,Cs,null),e(q,u9),e(q,zs),$(Gc,zs,null),e(zs,g9),e(zs,h2),e(h2,_9),e(zs,b9),$(Po,zs,null),e(q,$9),e(q,Vs),$(Wc,Vs,null),e(Vs,x9),e(Vs,f2),e(f2,v9),e(Vs,y9),$(Ao,Vs,null),e(q,j9),e(q,Us),$(Yc,Us,null),e(Us,w9),e(Us,u2),e(u2,D9),e(Us,k9),$(Fo,Us,null),e(q,E9),e(q,mt),$(Jc,mt,null),e(mt,q9),e(mt,Dn),e(Dn,I9),e(Dn,g2),e(g2,T9),e(Dn,N9),e(Dn,_2),e(_2,P9),e(Dn,A9),e(mt,F9),e(mt,b2),e(b2,wu),e(wu,L9),e(wu,Kc),e(Kc,S9),e(mt,O9),$(Lo,mt,null),e(q,C9),e(q,Ms),$(Zc,Ms,null),e(Ms,z9),e(Ms,Ct),e(Ct,V9),e(Ct,$2),e($2,U9),e(Ct,M9),e(Ct,x2),e(x2,R9),e(Ct,B9),e(Ct,v2),e(v2,H9),e(Ct,G9),e(Ms,W9),e(Ms,y2),e(y2,Du),e(Du,Y9),e(Du,Xc),e(Xc,J9),e(q,K9),e(q,So),$(Qc,So,null),e(So,Z9),e(So,j2),e(j2,X9),e(q,Q9),e(q,Rs),$(ed,Rs,null),e(Rs,eI),e(Rs,w2),e(w2,tI),e(Rs,sI),e(Rs,td),e(td,aI),e(td,D2),e(D2,nI),e(td,rI),e(q,oI),e(q,Bs),$(sd,Bs,null),e(Bs,lI),e(Bs,k2),e(k2,iI),e(Bs,pI),$(Oo,Bs,null),e(q,cI),e(q,Hs),$(ad,Hs,null),e(Hs,dI),e(Hs,E2),e(E2,mI),e(Hs,hI),$(Co,Hs,null),e(q,fI),e(q,zo),$(nd,zo,null),e(zo,uI),e(zo,q2),e(q2,gI),e(q,_I),e(q,Vo),$(rd,Vo,null),e(Vo,bI),e(Vo,I2),e(I2,$I),e(q,xI),e(q,Uo),$(od,Uo,null),e(Uo,vI),e(Uo,T2),e(T2,yI),e(q,jI),e(q,Mo),$(ld,Mo,null),e(Mo,wI),e(Mo,N2),e(N2,DI),e(q,kI),e(q,Ro),$(id,Ro,null),e(Ro,EI),e(Ro,P2),e(P2,qI),e(q,II),e(q,Bo),$(pd,Bo,null),e(Bo,TI),e(Bo,A2),e(A2,NI),e(q,PI),e(q,Ho),$(cd,Ho,null),e(Ho,AI),e(Ho,F2),e(F2,FI),e(q,LI),e(q,Go),$(dd,Go,null),e(Go,SI),e(Go,ku),e(ku,Eu),e(Eu,OI),e(ku,CI),e(q,zI),e(q,Wo),$(md,Wo,null),e(Wo,VI),e(Wo,qu),e(qu,Iu),e(Iu,UI),e(qu,MI),e(q,RI),e(q,Tu),$(hd,Tu,null),e(q,BI),e(q,Nu),$(fd,Nu,null),e(q,HI),e(q,Pu),$(ud,Pu,null),e(q,GI),e(q,Au),$(gd,Au,null),e(q,WI),e(q,Fu),$(_d,Fu,null),e(q,YI),e(q,Lu),$(bd,Lu,null),e(q,JI),e(q,Su),$($d,Su,null),e(q,KI),e(q,Ou),$(xd,Ou,null),e(q,ZI),e(q,Cu),$(vd,Cu,null),e(q,XI),e(q,zu),$(yd,zu,null),e(q,QI),e(q,Vu),$(jd,Vu,null),e(q,eT),e(q,Uu),$(wd,Uu,null),e(q,tT),e(q,Mu),$(Dd,Mu,null),e(q,sT),e(q,Gs),$(kd,Gs,null),e(Gs,aT),e(Gs,L2),e(L2,nT),e(Gs,rT),$(Yo,Gs,null),e(q,oT),e(q,Ws),$(Ed,Ws,null),e(Ws,lT),e(Ws,S2),e(S2,iT),e(Ws,pT),$(Jo,Ws,null),e(q,cT),e(q,Ys),$(qd,Ys,null),e(Ys,dT),e(Ys,O2),e(O2,mT),e(Ys,hT),$(Ko,Ys,null),e(q,fT),e(q,Js),$(Id,Js,null),e(Js,uT),e(Js,C2),e(C2,gT),e(Js,_T),$(Zo,Js,null),e(q,bT),e(q,Ks),$(Td,Ks,null),e(Ks,$T),e(Ks,kn),e(kn,xT),e(kn,Ru),e(Ru,vT),e(kn,yT),e(kn,Bu),e(Bu,jT),e(kn,wT),e(Ks,DT),e(Ks,En),e(En,kT),e(En,z2),e(z2,ET),e(En,qT),e(En,V2),e(V2,IT),e(En,TT),e(q,NT),e(q,Zs),$(Nd,Zs,null),e(Zs,PT),e(Zs,Pd),e(Pd,AT),e(Pd,U2),e(U2,FT),e(Pd,LT),e(Zs,ST),$(Xo,Zs,null),D(a,E7,j),D(a,zt,j),$(Ad,zt,null),e(zt,OT),e(zt,qn),e(qn,CT),e(qn,Hu),e(Hu,zT),e(qn,VT),e(qn,Gu),e(Gu,UT),e(qn,MT),e(zt,RT),$(Qo,zt,null),D(a,q7,j),D(a,ee,j),$(Fd,ee,null),e(ee,BT),e(ee,M2),e(M2,HT),e(ee,GT),e(ee,In),e(In,WT),e(In,Wu),e(Wu,YT),e(In,JT),e(In,Yu),e(Yu,KT),e(In,ZT),e(ee,XT),e(ee,Ve),e(Ve,QT),e(Ve,R2),e(R2,eN),e(Ve,tN),e(Ve,B2),e(B2,sN),e(Ve,aN),e(Ve,H2),e(H2,nN),e(Ve,rN),e(Ve,G2),e(G2,oN),e(Ve,lN),e(ee,iN),e(ee,Vt),e(Vt,pN),e(Vt,W2),e(W2,cN),e(Vt,dN),e(Vt,Y2),e(Y2,mN),e(Vt,hN),e(Vt,Ju),e(Ju,fN),e(Vt,uN),e(ee,gN),$(el,ee,null),D(a,I7,j),D(a,me,j),$(Ld,me,null),e(me,_N),e(me,J2),e(J2,bN),e(me,$N),e(me,K2),e(K2,xN),e(me,vN),e(me,Z2),e(Z2,yN),e(me,jN),e(me,Ue),e(Ue,X2),e(X2,wN),e(Ue,DN),e(Ue,Q2),e(Q2,kN),e(Ue,EN),e(Ue,ex),e(ex,qN),e(Ue,IN),e(Ue,Sd),e(Sd,TN),e(Sd,Ku),e(Ku,NN),e(Sd,PN),e(Ue,AN),e(Ue,Ut),e(Ut,FN),e(Ut,Zu),e(Zu,LN),e(Ut,SN),e(Ut,tx),e(tx,ON),e(Ut,CN),e(Ut,Xu),e(Xu,zN),e(Ut,VN),D(a,T7,j),D(a,he,j),$(Od,he,null),e(he,UN),e(he,sx),e(sx,MN),e(he,RN),e(he,ax),e(ax,BN),e(he,HN),e(he,nx),e(nx,GN),e(he,WN),e(he,Me),e(Me,rx),e(rx,YN),e(Me,JN),e(Me,ox),e(ox,KN),e(Me,ZN),e(Me,lx),e(lx,XN),e(Me,QN),e(Me,Cd),e(Cd,eP),e(Cd,Qu),e(Qu,tP),e(Cd,sP),e(Me,aP),e(Me,Mt),e(Mt,nP),e(Mt,eg),e(eg,rP),e(Mt,oP),e(Mt,ix),e(ix,lP),e(Mt,iP),e(Mt,tg),e(tg,pP),e(Mt,cP),D(a,N7,j),D(a,fe,j),$(zd,fe,null),e(fe,dP),e(fe,px),e(px,mP),e(fe,hP),e(fe,cx),e(cx,fP),e(fe,uP),e(fe,dx),e(dx,gP),e(fe,_P),e(fe,Re),e(Re,mx),e(mx,bP),e(Re,$P),e(Re,hx),e(hx,xP),e(Re,vP),e(Re,fx),e(fx,yP),e(Re,jP),e(Re,Vd),e(Vd,wP),e(Vd,sg),e(sg,DP),e(Vd,kP),e(Re,EP),e(Re,Rt),e(Rt,qP),e(Rt,ag),e(ag,IP),e(Rt,TP),e(Rt,ux),e(ux,NP),e(Rt,PP),e(Rt,ng),e(ng,AP),e(Rt,FP),D(a,P7,j),D(a,Tn,j),e(Tn,tl),e(tl,gx),$(Ud,gx,null),e(Tn,LP),e(Tn,_x),e(_x,SP),D(a,A7,j),D(a,sl,j),e(sl,OP),e(sl,bx),e(bx,CP),e(sl,zP),D(a,F7,j),D(a,A,j),$(Md,A,null),e(A,VP),e(A,$x),e($x,UP),e(A,MP),e(A,Xs),$(Rd,Xs,null),e(Xs,RP),e(Xs,xx),e(xx,BP),e(Xs,HP),$(al,Xs,null),e(A,GP),e(A,Qs),$(Bd,Qs,null),e(Qs,WP),e(Qs,vx),e(vx,YP),e(Qs,JP),$(nl,Qs,null),e(A,KP),e(A,ea),$(Hd,ea,null),e(ea,ZP),e(ea,yx),e(yx,XP),e(ea,QP),$(rl,ea,null),e(A,eA),e(A,ta),$(Gd,ta,null),e(ta,tA),e(ta,Wd),e(Wd,sA),e(Wd,ol),e(ol,aA),e(ol,jx),e(jx,nA),e(ol,rA),e(Wd,oA),e(ta,lA),$(ll,ta,null),e(A,iA),e(A,sa),$(Yd,sa,null),e(sa,pA),e(sa,wx),e(wx,cA),e(sa,dA),$(il,sa,null),e(A,mA),e(A,aa),$(Jd,aa,null),e(aa,hA),e(aa,Dx),e(Dx,fA),e(aa,uA),$(pl,aa,null),e(A,gA),e(A,ht),$(Kd,ht,null),e(ht,_A),e(ht,kx),e(kx,bA),e(ht,$A),e(ht,Ex),e(Ex,xA),e(ht,vA),$(cl,ht,null),e(A,yA),e(A,na),$(Zd,na,null),e(na,jA),e(na,qx),e(qx,wA),e(na,DA),$(dl,na,null),e(A,kA),e(A,ra),$(Xd,ra,null),e(ra,EA),e(ra,Ix),e(Ix,qA),e(ra,IA),$(ml,ra,null),e(A,TA),e(A,oa),$(Qd,oa,null),e(oa,NA),e(oa,Tx),e(Tx,PA),e(oa,AA),$(hl,oa,null),e(A,FA),e(A,ft),$(em,ft,null),e(ft,LA),e(ft,Nx),e(Nx,SA),e(ft,OA),e(ft,Px),e(Px,CA),e(ft,zA),$(fl,ft,null),e(A,VA),e(A,De),$(tm,De,null),e(De,UA),e(De,Ax),e(Ax,MA),e(De,RA),e(De,Fx),e(Fx,BA),e(De,HA),e(De,Lx),e(Lx,GA),e(De,WA),$(ul,De,null),e(A,YA),e(A,ke),$(sm,ke,null),e(ke,JA),e(ke,am),e(am,KA),e(am,Sx),e(Sx,ZA),e(am,XA),e(ke,QA),e(ke,Be),e(Be,eF),e(Be,Ox),e(Ox,tF),e(Be,sF),e(Be,Cx),e(Cx,aF),e(Be,nF),e(Be,zx),e(zx,rF),e(Be,oF),e(Be,Vx),e(Vx,lF),e(Be,iF),e(ke,pF),e(ke,Ux),e(Ux,cF),e(ke,dF),$(gl,ke,null),e(A,mF),e(A,ut),$(nm,ut,null),e(ut,hF),e(ut,rm),e(rm,fF),e(rm,Mx),e(Mx,uF),e(rm,gF),e(ut,_F),e(ut,rg),e(rg,bF),e(rg,Rx),e(Rx,$F),e(ut,xF),$(_l,ut,null),e(A,vF),e(A,bl),$(om,bl,null),e(bl,yF),e(bl,Nn),e(Nn,jF),e(Nn,Bx),e(Bx,wF),e(Nn,DF),e(Nn,Hx),e(Hx,kF),e(Nn,EF),e(A,qF),e(A,Ee),$(lm,Ee,null),e(Ee,IF),e(Ee,Bt),e(Bt,TF),e(Bt,Gx),e(Gx,NF),e(Bt,PF),e(Bt,Wx),e(Wx,AF),e(Bt,FF),e(Bt,Yx),e(Yx,LF),e(Bt,SF),e(Ee,OF),e(Ee,im),e(im,CF),e(im,og),e(og,zF),e(im,VF),e(Ee,UF),e(Ee,Pn),e(Pn,MF),e(Pn,lg),e(lg,RF),e(Pn,BF),e(Pn,Jx),e(Jx,HF),e(Pn,GF),e(Ee,WF),$($l,Ee,null),e(A,YF),e(A,qe),$(pm,qe,null),e(qe,JF),e(qe,An),e(An,KF),e(An,Kx),e(Kx,ZF),e(An,XF),e(An,Zx),e(Zx,QF),e(An,eL),e(qe,tL),e(qe,Fn),e(Fn,sL),e(Fn,ig),e(ig,aL),e(Fn,nL),e(Fn,pg),e(pg,rL),e(Fn,oL),e(qe,lL),e(qe,Ln),e(Ln,iL),e(Ln,Xx),e(Xx,pL),e(Ln,cL),e(Ln,Qx),e(Qx,dL),e(Ln,mL),e(qe,hL),$(xl,qe,null),e(A,fL),e(A,la),$(cm,la,null),e(la,uL),e(la,ev),e(ev,gL),e(la,_L),$(vl,la,null),e(A,bL),e(A,gt),$(dm,gt,null),e(gt,$L),e(gt,tv),e(tv,xL),e(gt,vL),e(gt,Ht),e(Ht,yL),e(Ht,cg),e(cg,jL),e(Ht,wL),e(Ht,sv),e(sv,DL),e(Ht,kL),e(Ht,av),e(av,EL),e(Ht,qL),e(gt,IL),$(yl,gt,null),e(A,TL),e(A,ia),$(mm,ia,null),e(ia,NL),e(ia,nv),e(nv,PL),e(ia,AL),$(jl,ia,null),e(A,FL),e(A,Ie),$(hm,Ie,null),e(Ie,LL),e(Ie,rv),e(rv,SL),e(Ie,OL),e(Ie,ov),e(ov,CL),e(Ie,zL),e(Ie,Sn),e(Sn,VL),e(Sn,dg),e(dg,UL),e(Sn,ML),e(Sn,lv),e(lv,RL),e(Sn,BL),e(Ie,HL),$(wl,Ie,null),e(A,GL),e(A,Te),$(fm,Te,null),e(Te,WL),e(Te,iv),e(iv,YL),e(Te,JL),e(Te,On),e(On,KL),e(On,mg),e(mg,ZL),e(On,XL),e(On,pv),e(pv,QL),e(On,eS),e(Te,tS),e(Te,um),e(um,cv),e(cv,sS),e(um,aS),e(um,dv),e(dv,nS),e(Te,rS),$(Dl,Te,null),e(A,oS),e(A,pa),$(gm,pa,null),e(pa,lS),e(pa,mv),e(mv,iS),e(pa,pS),$(kl,pa,null),e(A,cS),e(A,ca),$(_m,ca,null),e(ca,dS),e(ca,bm),e(bm,mS),e(bm,hv),e(hv,hS),e(bm,fS),e(ca,uS),$(El,ca,null),e(A,gS),e(A,Ne),$($m,Ne,null),e(Ne,_S),e(Ne,Cn),e(Cn,bS),e(Cn,fv),e(fv,$S),e(Cn,xS),e(Cn,uv),e(uv,vS),e(Cn,yS),e(Ne,jS),e(Ne,gv),e(gv,wS),e(Ne,DS),e(Ne,Gt),e(Gt,kS),e(Gt,hg),e(hg,ES),e(Gt,qS),e(Gt,fg),e(fg,IS),e(Gt,TS),e(Gt,_v),e(_v,NS),e(Gt,PS),e(Ne,AS),$(ql,Ne,null),e(A,FS),e(A,oe),$(xm,oe,null),e(oe,LS),e(oe,zn),e(zn,SS),e(zn,ug),e(ug,OS),e(zn,CS),e(zn,bv),e(bv,zS),e(zn,VS),e(oe,US),e(oe,Vn),e(Vn,MS),e(Vn,gg),e(gg,RS),e(Vn,BS),e(Vn,_g),e(_g,HS),e(Vn,GS),e(oe,WS),e(oe,vm),e(vm,YS),e(vm,$v),e($v,JS),e(vm,KS),e(oe,ZS),$(Il,oe,null),e(oe,XS),$(Tl,oe,null),e(A,QS),e(A,da),$(ym,da,null),e(da,eO),e(da,Wt),e(Wt,tO),e(Wt,xv),e(xv,sO),e(Wt,aO),e(Wt,bg),e(bg,nO),e(Wt,rO),e(Wt,vv),e(vv,oO),e(Wt,lO),e(da,iO),$(Nl,da,null),e(A,pO),e(A,ma),$(jm,ma,null),e(ma,cO),e(ma,yv),e(yv,dO),e(ma,mO),$(Pl,ma,null),e(A,hO),e(A,ha),$(wm,ha,null),e(ha,fO),e(ha,jv),e(jv,uO),e(ha,gO),$(Al,ha,null),e(A,_O),e(A,fa),$(Dm,fa,null),e(fa,bO),e(fa,wv),e(wv,$O),e(fa,xO),$(Fl,fa,null),e(A,vO),e(A,ua),$(km,ua,null),e(ua,yO),e(ua,Dv),e(Dv,jO),e(ua,wO),$(Ll,ua,null),e(A,DO),e(A,ga),$(Em,ga,null),e(ga,kO),e(ga,Un),e(Un,EO),e(Un,$g),e($g,qO),e(Un,IO),e(Un,xg),e(xg,TO),e(Un,NO),e(ga,PO),e(ga,Mn),e(Mn,AO),e(Mn,kv),e(kv,FO),e(Mn,LO),e(Mn,Ev),e(Ev,SO),e(Mn,OO),D(a,L7,j),D(a,vg,j),D(a,S7,j),D(a,Rn,j),e(Rn,Sl),e(Sl,qv),$(qm,qv,null),e(Rn,CO),e(Rn,Iv),e(Iv,zO),D(a,O7,j),D(a,Ol,j),e(Ol,VO),e(Ol,yg),e(yg,UO),e(Ol,MO),D(a,C7,j),D(a,L,j),$(Im,L,null),e(L,RO),e(L,Tv),e(Tv,BO),e(L,HO),e(L,_a),$(Tm,_a,null),e(_a,GO),e(_a,Nv),e(Nv,WO),e(_a,YO),$(Cl,_a,null),e(L,JO),e(L,ba),$(Nm,ba,null),e(ba,KO),e(ba,Pv),e(Pv,ZO),e(ba,XO),$(zl,ba,null),e(L,QO),e(L,$a),$(Pm,$a,null),e($a,eC),e($a,Av),e(Av,tC),e($a,sC),$(Vl,$a,null),e(L,aC),e(L,jg),$(Am,jg,null),e(L,nC),e(L,Pe),$(Fm,Pe,null),e(Pe,rC),e(Pe,Fv),e(Fv,oC),e(Pe,lC),e(Pe,Lm),e(Lm,iC),e(Lm,Lv),e(Lv,pC),e(Lm,cC),e(Pe,dC),e(Pe,Bn),e(Bn,Sv),e(Sv,mC),e(Bn,hC),e(Bn,Ov),e(Ov,fC),e(Bn,uC),e(Bn,ue),e(ue,gC),e(ue,Cv),e(Cv,_C),e(ue,bC),e(ue,zv),e(zv,$C),e(ue,xC),e(ue,Vv),e(Vv,vC),e(ue,yC),e(ue,Uv),e(Uv,jC),e(ue,wC),e(ue,Mv),e(Mv,DC),e(ue,kC),e(Pe,EC),$(Ul,Pe,null),e(L,qC),e(L,xa),$(Sm,xa,null),e(xa,IC),e(xa,Rv),e(Rv,TC),e(xa,NC),$(Ml,xa,null),e(L,PC),e(L,va),$(Om,va,null),e(va,AC),e(va,Bv),e(Bv,FC),e(va,LC),$(Rl,va,null),e(L,SC),e(L,le),$(Cm,le,null),e(le,OC),e(le,Hv),e(Hv,CC),e(le,zC),e(le,Gv),e(Gv,VC),e(le,UC),e(le,zm),e(zm,MC),e(zm,Wv),e(Wv,RC),e(zm,BC),e(le,HC),e(le,Hn),e(Hn,GC),e(Hn,wg),e(wg,WC),e(Hn,YC),e(Hn,Dg),e(Dg,JC),e(Hn,KC),e(le,ZC),$(Bl,le,null),e(L,XC),e(L,ya),$(Vm,ya,null),e(ya,QC),e(ya,Um),e(Um,ez),e(Um,Yv),e(Yv,tz),e(Um,sz),e(ya,az),$(Hl,ya,null),e(L,nz),e(L,ja),$(Mm,ja,null),e(ja,rz),e(ja,Rm),e(Rm,oz),e(Rm,Jv),e(Jv,lz),e(Rm,iz),e(ja,pz),$(Gl,ja,null),e(L,cz),e(L,Wl),$(Bm,Wl,null),e(Wl,dz),e(Wl,kg),e(kg,Eg),e(Eg,mz),e(kg,hz),e(L,fz),e(L,Yl),$(Hm,Yl,null),e(Yl,uz),e(Yl,qg),e(qg,Ig),e(Ig,gz),e(qg,_z),e(L,bz),e(L,Tg),$(Gm,Tg,null),e(L,$z),e(L,Ng),$(Wm,Ng,null),e(L,xz),e(L,Pg),$(Ym,Pg,null),e(L,vz),e(L,Ag),$(Jm,Ag,null),e(L,yz),e(L,Fg),$(Km,Fg,null),e(L,jz),e(L,Lg),$(Zm,Lg,null),e(L,wz),e(L,Sg),$(Xm,Sg,null),e(L,Dz),e(L,Og),$(Qm,Og,null),e(L,kz),e(L,Cg),$(eh,Cg,null),e(L,Ez),e(L,zg),$(th,zg,null),e(L,qz),e(L,Vg),$(sh,Vg,null),e(L,Iz),e(L,Ug),$(ah,Ug,null),e(L,Tz),e(L,Mg),$(nh,Mg,null),D(a,z7,j),D(a,Gn,j),e(Gn,Jl),e(Jl,Kv),$(rh,Kv,null),e(Gn,Nz),e(Gn,Zv),e(Zv,Pz),D(a,V7,j),D(a,Kl,j),e(Kl,Az),e(Kl,Xv),e(Xv,Fz),e(Kl,Lz),D(a,U7,j),D(a,U,j),$(oh,U,null),e(U,Sz),e(U,Ae),$(lh,Ae,null),e(Ae,Oz),e(Ae,Qv),e(Qv,Cz),e(Ae,zz),e(Ae,ih),e(ih,Vz),e(ih,ey),e(ey,Uz),e(ih,Mz),e(Ae,Rz),e(Ae,Wn),e(Wn,ty),e(ty,Bz),e(Wn,Hz),e(Wn,sy),e(sy,Gz),e(Wn,Wz),e(Wn,ge),e(ge,Yz),e(ge,ay),e(ay,Jz),e(ge,Kz),e(ge,ny),e(ny,Zz),e(ge,Xz),e(ge,ry),e(ry,Qz),e(ge,eV),e(ge,oy),e(oy,tV),e(ge,sV),e(ge,ly),e(ly,aV),e(ge,nV),e(Ae,rV),$(Zl,Ae,null),e(U,oV),e(U,wa),$(ph,wa,null),e(wa,lV),e(wa,iy),e(iy,iV),e(wa,pV),$(Xl,wa,null),e(U,cV),e(U,ie),$(ch,ie,null),e(ie,dV),e(ie,py),e(py,mV),e(ie,hV),e(ie,cy),e(cy,fV),e(ie,uV),e(ie,dh),e(dh,gV),e(dh,dy),e(dy,_V),e(dh,bV),e(ie,$V),e(ie,Yn),e(Yn,xV),e(Yn,Rg),e(Rg,vV),e(Yn,yV),e(Yn,Bg),e(Bg,jV),e(Yn,wV),e(ie,DV),$(Ql,ie,null),e(U,kV),e(U,Da),$(mh,Da,null),e(Da,EV),e(Da,my),e(my,qV),e(Da,IV),$(ei,Da,null),e(U,TV),e(U,ka),$(hh,ka,null),e(ka,NV),e(ka,hy),e(hy,PV),e(ka,AV),$(ti,ka,null),e(U,FV),e(U,Ea),$(fh,Ea,null),e(Ea,LV),e(Ea,fy),e(fy,SV),e(Ea,OV),$(si,Ea,null),e(U,CV),e(U,qa),$(uh,qa,null),e(qa,zV),e(qa,uy),e(uy,VV),e(qa,UV),$(ai,qa,null),e(U,MV),e(U,Ia),$(gh,Ia,null),e(Ia,RV),e(Ia,gy),e(gy,BV),e(Ia,HV),$(ni,Ia,null),e(U,GV),e(U,Ta),$(_h,Ta,null),e(Ta,WV),e(Ta,_y),e(_y,YV),e(Ta,JV),$(ri,Ta,null),D(a,M7,j),D(a,Jn,j),e(Jn,oi),e(oi,by),$(bh,by,null),e(Jn,KV),e(Jn,$y),e($y,ZV),D(a,R7,j),D(a,O,j),$($h,O,null),e(O,XV),e(O,xy),e(xy,QV),e(O,eU),e(O,xh),e(xh,tU),e(xh,vy),e(vy,sU),e(xh,aU),e(O,nU),e(O,Hg),e(Hg,yy),e(yy,rU),e(Hg,oU),e(O,lU),e(O,J),e(J,jy),e(jy,Na),e(Na,iU),e(Na,Gg),e(Gg,pU),e(Na,cU),e(Na,wy),e(wy,dU),e(Na,mU),e(Na,Dy),e(Dy,hU),e(J,fU),e(J,ky),e(ky,vh),e(vh,uU),e(vh,Wg),e(Wg,gU),e(vh,_U),e(J,bU),e(J,Ey),e(Ey,yh),e(yh,$U),e(yh,qy),e(qy,xU),e(yh,vU),e(J,yU),e(J,jh),e(jh,He),e(He,jU),e(He,Iy),e(Iy,wU),e(He,DU),e(He,Yg),e(Yg,kU),e(He,EU),e(He,Ty),e(Ty,qU),e(He,IU),e(He,Jg),e(Jg,TU),e(He,NU),e(jh,PU),$(li,jh,null),e(J,AU),e(J,Ny),e(Ny,Ge),e(Ge,FU),e(Ge,Kg),e(Kg,LU),e(Ge,SU),e(Ge,Zg),e(Zg,OU),e(Ge,CU),e(Ge,Xg),e(Xg,zU),e(Ge,VU),e(Ge,Qg),e(Qg,UU),e(Ge,MU),e(J,RU),e(J,Py),e(Py,wh),e(wh,BU),e(wh,e_),e(e_,HU),e(wh,GU),e(J,WU),e(J,Ay),e(Ay,Yt),e(Yt,YU),e(Yt,t_),e(t_,JU),e(Yt,KU),e(Yt,Fy),e(Fy,ZU),e(Yt,XU),e(Yt,Ly),e(Ly,QU),e(Yt,eM),e(J,tM),e(J,Sy),e(Sy,ii),e(ii,s_),e(s_,sM),e(ii,aM),e(ii,a_),e(a_,nM),e(ii,rM),e(O,oM),e(O,Pa),$(Dh,Pa,null),e(Pa,lM),e(Pa,Oy),e(Oy,iM),e(Pa,pM),$(pi,Pa,null),e(O,cM),e(O,ci),$(kh,ci,null),e(ci,dM),e(ci,Cy),e(Cy,mM),e(O,hM),e(O,di),$(Eh,di,null),e(di,fM),e(di,zy),e(zy,uM),e(O,gM),e(O,mi),$(qh,mi,null),e(mi,_M),e(mi,Vy),e(Vy,bM),e(O,$M),e(O,hi),$(Ih,hi,null),e(hi,xM),e(hi,Uy),e(Uy,vM),e(O,yM),e(O,fi),$(Th,fi,null),e(fi,jM),e(fi,My),e(My,wM),e(O,DM),e(O,_t),$(Nh,_t,null),e(_t,kM),e(_t,Ry),e(Ry,EM),e(_t,qM),e(_t,By),e(By,IM),e(_t,TM),$(ui,_t,null),e(O,NM),e(O,gi),$(Ph,gi,null),e(gi,PM),e(gi,Hy),e(Hy,AM),e(O,FM),e(O,Fe),$(Ah,Fe,null),e(Fe,LM),e(Fe,Gy),e(Gy,SM),e(Fe,OM),e(Fe,Wy),e(Wy,CM),e(Fe,zM),e(Fe,Jt),e(Jt,VM),e(Jt,n_),e(n_,UM),e(Jt,MM),e(Jt,r_),e(r_,RM),e(Jt,BM),e(Jt,o_),e(o_,HM),e(Jt,GM),e(Fe,WM),$(_i,Fe,null),e(O,YM),e(O,bt),$(Fh,bt,null),e(bt,JM),e(bt,Yy),e(Yy,KM),e(bt,ZM),e(bt,Jy),e(Jy,XM),e(bt,QM),$(bi,bt,null),D(a,B7,j),D(a,Kt,j),$(Lh,Kt,null),e(Kt,eR),e(Kt,Ky),e(Ky,tR),e(Kt,sR),$($i,Kt,null),D(a,H7,j),D(a,B,j),$(Sh,B,null),e(B,aR),e(B,Zy),e(Zy,nR),e(B,rR),e(B,Oh),e(Oh,oR),e(Oh,Xy),e(Xy,lR),e(Oh,iR),e(B,pR),e(B,Kn),e(Kn,l_),e(l_,Qy),e(Qy,cR),e(l_,dR),e(Kn,mR),e(Kn,i_),e(i_,ej),e(ej,hR),e(i_,fR),e(Kn,uR),e(Kn,p_),e(p_,tj),e(tj,gR),e(p_,_R),e(B,bR),e(B,sj),e(sj,$R),e(B,xR),$(xi,B,null),e(B,vR),e(B,Aa),$(Ch,Aa,null),e(Aa,yR),e(Aa,aj),e(aj,jR),e(Aa,wR),e(Aa,zh),e(zh,nj),e(nj,DR),e(zh,kR),e(zh,rj),e(rj,ER),e(B,qR),e(B,$t),$(Vh,$t,null),e($t,IR),e($t,oj),e(oj,TR),e($t,NR),e($t,lj),e(lj,PR),e($t,AR),$(vi,$t,null),e(B,FR),e(B,Fa),$(Uh,Fa,null),e(Fa,LR),e(Fa,ij),e(ij,SR),e(Fa,OR),$(yi,Fa,null),D(a,G7,j),D(a,We,j),$(Mh,We,null),e(We,CR),e(We,pj),e(pj,zR),e(We,VR),e(We,cj),e(cj,UR),e(We,MR),$(ji,We,null),D(a,W7,j),D(a,te,j),$(Rh,te,null),e(te,RR),e(te,c_),e(c_,dj),e(dj,BR),e(c_,HR),e(te,GR),e(te,mj),e(mj,WR),e(te,YR),e(te,Bh),e(Bh,JR),e(Bh,hj),e(hj,KR),e(Bh,ZR),e(te,XR),$(wi,te,null),e(te,QR),e(te,Di),$(Hh,Di,null),e(Di,eB),e(Di,fj),e(fj,tB),D(a,Y7,j),D(a,se,j),$(Gh,se,null),e(se,sB),e(se,d_),e(d_,uj),e(uj,aB),e(d_,nB),e(se,rB),e(se,gj),e(gj,oB),e(se,lB),e(se,_j),e(_j,iB),e(se,pB),$(ki,se,null),e(se,cB),e(se,Ei),$(Wh,Ei,null),e(Ei,dB),e(Ei,bj),e(bj,mB),D(a,J7,j),D(a,Zt,j),$(Yh,Zt,null),e(Zt,hB),e(Zt,$j),e($j,fB),e(Zt,uB),$(qi,Zt,null),D(a,K7,j),D(a,Xt,j),$(Jh,Xt,null),e(Xt,gB),e(Xt,xj),e(xj,_B),e(Xt,bB),$(Ii,Xt,null),D(a,Z7,j),D(a,Qt,j),$(Kh,Qt,null),e(Qt,$B),e(Qt,vj),e(vj,xB),e(Qt,vB),$(Ti,Qt,null),D(a,X7,j),D(a,es,j),$(Zh,es,null),e(es,yB),e(es,yj),e(yj,jB),e(es,wB),$(Ni,es,null),D(a,Q7,j),D(a,M,j),$(Xh,M,null),e(M,DB),e(M,jj),e(jj,kB),e(M,EB),e(M,wj),e(wj,qB),e(M,IB),e(M,Zn),e(Zn,Dj),e(Dj,Qh),e(Qh,TB),e(Qh,kj),e(kj,NB),e(Qh,PB),e(Zn,AB),e(Zn,Xn),e(Xn,ef),e(ef,FB),e(ef,Ej),e(Ej,LB),e(ef,SB),e(Xn,OB),e(Xn,tf),e(tf,qj),e(qj,CB),e(tf,zB),e(tf,Ij),e(Ij,VB),e(Xn,UB),e(Xn,Tj),e(Tj,MB),e(Zn,RB),e(Zn,Qn),e(Qn,sf),e(sf,BB),e(sf,Nj),e(Nj,HB),e(sf,GB),e(Qn,WB),e(Qn,er),e(er,Pj),e(Pj,YB),e(er,JB),e(er,Aj),e(Aj,KB),e(er,ZB),e(er,Fj),e(Fj,XB),e(Qn,QB),e(Qn,Lj),e(Lj,eH),e(M,tH),$(Pi,M,null),e(M,sH),e(M,La),$(af,La,null),e(La,aH),e(La,Sj),e(Sj,nH),e(La,rH),e(La,ts),e(ts,Oj),e(Oj,oH),e(ts,lH),e(ts,Cj),e(Cj,iH),e(ts,pH),e(ts,zj),e(zj,cH),e(ts,dH),e(ts,Vj),e(Vj,mH),e(M,hH),e(M,Ai),$(nf,Ai,null),e(Ai,fH),e(Ai,Uj),e(Uj,uH),e(M,gH),e(M,Fi),$(rf,Fi,null),e(Fi,_H),e(Fi,Mj),e(Mj,bH),e(M,$H),e(M,Li),$(of,Li,null),e(Li,xH),e(Li,Rj),e(Rj,vH),e(M,yH),e(M,Si),$(lf,Si,null),e(Si,jH),e(Si,Bj),e(Bj,wH),D(a,e4,j),D(a,R,j),$(pf,R,null),e(R,DH),e(R,Hj),e(Hj,kH),e(R,EH),e(R,Gj),e(Gj,qH),e(R,IH),e(R,ss),e(ss,Wj),e(Wj,cf),e(cf,TH),e(cf,Yj),e(Yj,NH),e(cf,PH),e(ss,AH),e(ss,tr),e(tr,df),e(df,FH),e(df,Jj),e(Jj,LH),e(df,SH),e(tr,OH),e(tr,mf),e(mf,Kj),e(Kj,CH),e(mf,zH),e(mf,Zj),e(Zj,VH),e(tr,UH),e(tr,Xj),e(Xj,MH),e(ss,RH),e(ss,Qj),e(Qj,hf),e(hf,BH),e(hf,e0),e(e0,HH),e(hf,GH),e(ss,WH),e(ss,t0),e(t0,ff),e(ff,YH),e(ff,s0),e(s0,JH),e(ff,KH),e(R,ZH),$(Oi,R,null),e(R,XH),e(R,Sa),$(uf,Sa,null),e(Sa,QH),e(Sa,a0),e(a0,eG),e(Sa,tG),e(Sa,Ye),e(Ye,n0),e(n0,sG),e(Ye,aG),e(Ye,r0),e(r0,nG),e(Ye,rG),e(Ye,o0),e(o0,oG),e(Ye,lG),e(Ye,l0),e(l0,iG),e(Ye,pG),e(Ye,i0),e(i0,cG),e(R,dG),e(R,Ci),$(gf,Ci,null),e(Ci,mG),e(Ci,p0),e(p0,hG),e(R,fG),e(R,zi),$(_f,zi,null),e(zi,uG),e(zi,c0),e(c0,gG),e(R,_G),e(R,Vi),$(bf,Vi,null),e(Vi,bG),e(Vi,d0),e(d0,$G),e(R,xG),e(R,Ui),$($f,Ui,null),e(Ui,vG),e(Ui,m0),e(m0,yG),D(a,t4,j),D(a,sr,j),e(sr,Mi),e(Mi,h0),$(xf,h0,null),e(sr,jG),e(sr,f0),e(f0,wG),D(a,s4,j),D(a,ae,j),$(vf,ae,null),e(ae,DG),e(ae,u0),e(u0,kG),e(ae,EG),e(ae,m_),e(m_,g0),e(g0,qG),e(m_,IG),e(ae,TG),e(ae,_0),e(_0,NG),e(ae,PG),e(ae,Oa),$(yf,Oa,null),e(Oa,AG),e(Oa,jf),e(jf,FG),e(jf,b0),e(b0,LG),e(jf,SG),e(Oa,OG),$(Ri,Oa,null),e(ae,CG),e(ae,Ca),$(wf,Ca,null),e(Ca,zG),e(Ca,as),e(as,VG),e(as,$0),e($0,UG),e(as,MG),e(as,x0),e(x0,RG),e(as,BG),e(as,v0),e(v0,HG),e(as,GG),e(Ca,WG),$(Bi,Ca,null),D(a,a4,j),D(a,ar,j),e(ar,Hi),e(Hi,y0),$(Df,y0,null),e(ar,YG),e(ar,j0),e(j0,JG),D(a,n4,j),D(a,za,j),e(za,KG),e(za,w0),e(w0,ZG),e(za,XG),e(za,h_),e(h_,QG),e(za,eW),D(a,r4,j),D(a,K,j),$(kf,K,null),e(K,tW),e(K,D0),e(D0,sW),e(K,aW),$(Gi,K,null),e(K,nW),e(K,Va),$(Ef,Va,null),e(Va,rW),e(Va,k0),e(k0,oW),e(Va,lW),$(Wi,Va,null),e(K,iW),e(K,Ua),$(qf,Ua,null),e(Ua,pW),e(Ua,E0),e(E0,cW),e(Ua,dW),$(Yi,Ua,null),e(K,mW),e(K,xt),$(If,xt,null),e(xt,hW),e(xt,q0),e(q0,fW),e(xt,uW),e(xt,I0),e(I0,gW),e(xt,_W),$(Ji,xt,null),e(K,bW),e(K,Ki),$(Tf,Ki,null),e(Ki,$W),e(Ki,T0),e(T0,xW),D(a,o4,j),D(a,nr,j),e(nr,Zi),e(Zi,N0),$(Nf,N0,null),e(nr,vW),e(nr,P0),e(P0,yW),D(a,l4,j),D(a,C,j),$(Pf,C,null),e(C,jW),e(C,Xi),e(Xi,A0),e(A0,wW),e(Xi,DW),e(Xi,Af),e(Af,F0),e(F0,kW),e(Xi,EW),e(C,qW),e(C,ns),e(ns,IW),e(ns,L0),e(L0,TW),e(ns,NW),e(ns,S0),e(S0,PW),e(ns,AW),e(ns,O0),e(O0,FW),e(ns,LW),e(C,SW),e(C,C0),e(C0,OW),e(C,CW),e(C,z0),e(z0,zW),e(C,VW),$(Qi,C,null),e(C,UW),e(C,rr),e(rr,MW),e(rr,V0),e(V0,RW),e(rr,BW),e(rr,U0),e(U0,HW),e(rr,GW),e(C,WW),$(ep,C,null),e(C,YW),e(C,rs),e(rs,JW),e(rs,M0),e(M0,KW),e(rs,ZW),e(rs,R0),e(R0,XW),e(rs,QW),e(rs,B0),e(B0,eY),e(rs,tY),e(C,sY),$(tp,C,null),e(C,aY),e(C,or),e(or,nY),e(or,H0),e(H0,rY),e(or,oY),e(or,f_),e(f_,lY),e(or,iY),e(C,pY),$(sp,C,null),e(C,cY),e(C,lr),e(lr,dY),e(lr,G0),e(G0,mY),e(lr,hY),e(lr,u_),e(u_,fY),e(lr,uY),e(C,gY),$(ap,C,null),D(a,i4,j),D(a,ir,j),$(Ff,ir,null),e(ir,_Y),e(ir,pr),e(pr,bY),e(pr,W0),e(W0,$Y),e(pr,xY),e(pr,Y0),e(Y0,vY),e(pr,yY),D(a,p4,j),D(a,cr,j),$(Lf,cr,null),e(cr,jY),e(cr,J0),e(J0,wY),D(a,c4,j),D(a,dr,j),e(dr,np),e(np,K0),$(Sf,K0,null),e(dr,DY),e(dr,Z0),e(Z0,kY),D(a,d4,j),D(a,mr,j),$(Of,mr,null),e(mr,EY),e(mr,X0),e(X0,qY),m4=!0},p(a,[j]){const Cf={};j&2&&(Cf.$$scope={dirty:j,ctx:a}),Lr.$set(Cf);const Q0={};j&2&&(Q0.$$scope={dirty:j,ctx:a}),Sr.$set(Q0);const ew={};j&2&&(ew.$$scope={dirty:j,ctx:a}),zr.$set(ew);const tw={};j&2&&(tw.$$scope={dirty:j,ctx:a}),Vr.$set(tw);const zf={};j&2&&(zf.$$scope={dirty:j,ctx:a}),Rr.$set(zf);const sw={};j&2&&(sw.$$scope={dirty:j,ctx:a}),Hr.$set(sw);const aw={};j&2&&(aw.$$scope={dirty:j,ctx:a}),Gr.$set(aw);const nw={};j&2&&(nw.$$scope={dirty:j,ctx:a}),Wr.$set(nw);const _e={};j&2&&(_e.$$scope={dirty:j,ctx:a}),Jr.$set(_e);const rw={};j&2&&(rw.$$scope={dirty:j,ctx:a}),Kr.$set(rw);const g_={};j&2&&(g_.$$scope={dirty:j,ctx:a}),Zr.$set(g_);const ow={};j&2&&(ow.$$scope={dirty:j,ctx:a}),Xr.$set(ow);const lw={};j&2&&(lw.$$scope={dirty:j,ctx:a}),Qr.$set(lw);const Je={};j&2&&(Je.$$scope={dirty:j,ctx:a}),eo.$set(Je);const Vf={};j&2&&(Vf.$$scope={dirty:j,ctx:a}),to.$set(Vf);const iw={};j&2&&(iw.$$scope={dirty:j,ctx:a}),so.$set(iw);const pw={};j&2&&(pw.$$scope={dirty:j,ctx:a}),ao.$set(pw);const cw={};j&2&&(cw.$$scope={dirty:j,ctx:a}),no.$set(cw);const hr={};j&2&&(hr.$$scope={dirty:j,ctx:a}),ro.$set(hr);const fr={};j&2&&(fr.$$scope={dirty:j,ctx:a}),oo.$set(fr);const dw={};j&2&&(dw.$$scope={dirty:j,ctx:a}),io.$set(dw);const mw={};j&2&&(mw.$$scope={dirty:j,ctx:a}),po.$set(mw);const Uf={};j&2&&(Uf.$$scope={dirty:j,ctx:a}),co.$set(Uf);const hw={};j&2&&(hw.$$scope={dirty:j,ctx:a}),mo.$set(hw);const fw={};j&2&&(fw.$$scope={dirty:j,ctx:a}),ho.$set(fw);const uw={};j&2&&(uw.$$scope={dirty:j,ctx:a}),uo.$set(uw);const Mf={};j&2&&(Mf.$$scope={dirty:j,ctx:a}),go.$set(Mf);const gw={};j&2&&(gw.$$scope={dirty:j,ctx:a}),_o.$set(gw);const I={};j&2&&(I.$$scope={dirty:j,ctx:a}),bo.$set(I);const _w={};j&2&&(_w.$$scope={dirty:j,ctx:a}),$o.$set(_w);const os={};j&2&&(os.$$scope={dirty:j,ctx:a}),xo.$set(os);const bw={};j&2&&(bw.$$scope={dirty:j,ctx:a}),vo.$set(bw);const $w={};j&2&&($w.$$scope={dirty:j,ctx:a}),yo.$set($w);const xw={};j&2&&(xw.$$scope={dirty:j,ctx:a}),jo.$set(xw);const ls={};j&2&&(ls.$$scope={dirty:j,ctx:a}),wo.$set(ls);const vw={};j&2&&(vw.$$scope={dirty:j,ctx:a}),Do.$set(vw);const yw={};j&2&&(yw.$$scope={dirty:j,ctx:a}),ko.$set(yw);const jw={};j&2&&(jw.$$scope={dirty:j,ctx:a}),Eo.$set(jw);const Rf={};j&2&&(Rf.$$scope={dirty:j,ctx:a}),qo.$set(Rf);const ww={};j&2&&(ww.$$scope={dirty:j,ctx:a}),To.$set(ww);const Bf={};j&2&&(Bf.$$scope={dirty:j,ctx:a}),No.$set(Bf);const Dw={};j&2&&(Dw.$$scope={dirty:j,ctx:a}),Po.$set(Dw);const Ke={};j&2&&(Ke.$$scope={dirty:j,ctx:a}),Ao.$set(Ke);const is={};j&2&&(is.$$scope={dirty:j,ctx:a}),Fo.$set(is);const kw={};j&2&&(kw.$$scope={dirty:j,ctx:a}),Lo.$set(kw);const Ew={};j&2&&(Ew.$$scope={dirty:j,ctx:a}),Oo.$set(Ew);const qw={};j&2&&(qw.$$scope={dirty:j,ctx:a}),Co.$set(qw);const Hf={};j&2&&(Hf.$$scope={dirty:j,ctx:a}),Yo.$set(Hf);const Iw={};j&2&&(Iw.$$scope={dirty:j,ctx:a}),Jo.$set(Iw);const Gf={};j&2&&(Gf.$$scope={dirty:j,ctx:a}),Ko.$set(Gf);const Tw={};j&2&&(Tw.$$scope={dirty:j,ctx:a}),Zo.$set(Tw);const Wf={};j&2&&(Wf.$$scope={dirty:j,ctx:a}),Xo.$set(Wf);const ps={};j&2&&(ps.$$scope={dirty:j,ctx:a}),Qo.$set(ps);const Nw={};j&2&&(Nw.$$scope={dirty:j,ctx:a}),el.$set(Nw);const Pw={};j&2&&(Pw.$$scope={dirty:j,ctx:a}),al.$set(Pw);const Aw={};j&2&&(Aw.$$scope={dirty:j,ctx:a}),nl.$set(Aw);const ur={};j&2&&(ur.$$scope={dirty:j,ctx:a}),rl.$set(ur);const Fw={};j&2&&(Fw.$$scope={dirty:j,ctx:a}),ll.$set(Fw);const gr={};j&2&&(gr.$$scope={dirty:j,ctx:a}),il.$set(gr);const Lw={};j&2&&(Lw.$$scope={dirty:j,ctx:a}),pl.$set(Lw);const _r={};j&2&&(_r.$$scope={dirty:j,ctx:a}),cl.$set(_r);const Sw={};j&2&&(Sw.$$scope={dirty:j,ctx:a}),dl.$set(Sw);const br={};j&2&&(br.$$scope={dirty:j,ctx:a}),ml.$set(br);const Yf={};j&2&&(Yf.$$scope={dirty:j,ctx:a}),hl.$set(Yf);const Jf={};j&2&&(Jf.$$scope={dirty:j,ctx:a}),fl.$set(Jf);const Ow={};j&2&&(Ow.$$scope={dirty:j,ctx:a}),ul.$set(Ow);const $r={};j&2&&($r.$$scope={dirty:j,ctx:a}),gl.$set($r);const Cw={};j&2&&(Cw.$$scope={dirty:j,ctx:a}),_l.$set(Cw);const xr={};j&2&&(xr.$$scope={dirty:j,ctx:a}),$l.$set(xr);const zw={};j&2&&(zw.$$scope={dirty:j,ctx:a}),xl.$set(zw);const cs={};j&2&&(cs.$$scope={dirty:j,ctx:a}),vl.$set(cs);const Vw={};j&2&&(Vw.$$scope={dirty:j,ctx:a}),yl.$set(Vw);const Uw={};j&2&&(Uw.$$scope={dirty:j,ctx:a}),jl.$set(Uw);const vr={};j&2&&(vr.$$scope={dirty:j,ctx:a}),wl.$set(vr);const Mw={};j&2&&(Mw.$$scope={dirty:j,ctx:a}),Dl.$set(Mw);const yr={};j&2&&(yr.$$scope={dirty:j,ctx:a}),kl.$set(yr);const Rw={};j&2&&(Rw.$$scope={dirty:j,ctx:a}),El.$set(Rw);const jr={};j&2&&(jr.$$scope={dirty:j,ctx:a}),ql.$set(jr);const Bw={};j&2&&(Bw.$$scope={dirty:j,ctx:a}),Il.$set(Bw);const ds={};j&2&&(ds.$$scope={dirty:j,ctx:a}),Tl.$set(ds);const Hw={};j&2&&(Hw.$$scope={dirty:j,ctx:a}),Nl.$set(Hw);const wr={};j&2&&(wr.$$scope={dirty:j,ctx:a}),Pl.$set(wr);const Gw={};j&2&&(Gw.$$scope={dirty:j,ctx:a}),Al.$set(Gw);const Ww={};j&2&&(Ww.$$scope={dirty:j,ctx:a}),Fl.$set(Ww);const Dr={};j&2&&(Dr.$$scope={dirty:j,ctx:a}),Ll.$set(Dr);const Yw={};j&2&&(Yw.$$scope={dirty:j,ctx:a}),Cl.$set(Yw);const kr={};j&2&&(kr.$$scope={dirty:j,ctx:a}),zl.$set(kr);const Jw={};j&2&&(Jw.$$scope={dirty:j,ctx:a}),Vl.$set(Jw);const Er={};j&2&&(Er.$$scope={dirty:j,ctx:a}),Ul.$set(Er);const Kf={};j&2&&(Kf.$$scope={dirty:j,ctx:a}),Ml.$set(Kf);const Kw={};j&2&&(Kw.$$scope={dirty:j,ctx:a}),Rl.$set(Kw);const qr={};j&2&&(qr.$$scope={dirty:j,ctx:a}),Bl.$set(qr);const Zw={};j&2&&(Zw.$$scope={dirty:j,ctx:a}),Hl.$set(Zw);const Ir={};j&2&&(Ir.$$scope={dirty:j,ctx:a}),Gl.$set(Ir);const Xw={};j&2&&(Xw.$$scope={dirty:j,ctx:a}),Zl.$set(Xw);const Zf={};j&2&&(Zf.$$scope={dirty:j,ctx:a}),Xl.$set(Zf);const Qw={};j&2&&(Qw.$$scope={dirty:j,ctx:a}),Ql.$set(Qw);const Xf={};j&2&&(Xf.$$scope={dirty:j,ctx:a}),ei.$set(Xf);const Tr={};j&2&&(Tr.$$scope={dirty:j,ctx:a}),ti.$set(Tr);const e7={};j&2&&(e7.$$scope={dirty:j,ctx:a}),si.$set(e7);const t7={};j&2&&(t7.$$scope={dirty:j,ctx:a}),ai.$set(t7);const Ze={};j&2&&(Ze.$$scope={dirty:j,ctx:a}),ni.$set(Ze);const Xe={};j&2&&(Xe.$$scope={dirty:j,ctx:a}),ri.$set(Xe);const s7={};j&2&&(s7.$$scope={dirty:j,ctx:a}),li.$set(s7);const a7={};j&2&&(a7.$$scope={dirty:j,ctx:a}),pi.$set(a7);const n7={};j&2&&(n7.$$scope={dirty:j,ctx:a}),ui.$set(n7);const r7={};j&2&&(r7.$$scope={dirty:j,ctx:a}),_i.$set(r7);const Qe={};j&2&&(Qe.$$scope={dirty:j,ctx:a}),bi.$set(Qe);const o7={};j&2&&(o7.$$scope={dirty:j,ctx:a}),$i.$set(o7);const l7={};j&2&&(l7.$$scope={dirty:j,ctx:a}),xi.$set(l7);const i7={};j&2&&(i7.$$scope={dirty:j,ctx:a}),vi.$set(i7);const p7={};j&2&&(p7.$$scope={dirty:j,ctx:a}),yi.$set(p7);const c7={};j&2&&(c7.$$scope={dirty:j,ctx:a}),ji.$set(c7);const Nr={};j&2&&(Nr.$$scope={dirty:j,ctx:a}),wi.$set(Nr);const vt={};j&2&&(vt.$$scope={dirty:j,ctx:a}),ki.$set(vt);const d7={};j&2&&(d7.$$scope={dirty:j,ctx:a}),qi.$set(d7);const m7={};j&2&&(m7.$$scope={dirty:j,ctx:a}),Ii.$set(m7);const h7={};j&2&&(h7.$$scope={dirty:j,ctx:a}),Ti.$set(h7);const f7={};j&2&&(f7.$$scope={dirty:j,ctx:a}),Ni.$set(f7);const ms={};j&2&&(ms.$$scope={dirty:j,ctx:a}),Pi.$set(ms);const Qf={};j&2&&(Qf.$$scope={dirty:j,ctx:a}),Oi.$set(Qf);const u7={};j&2&&(u7.$$scope={dirty:j,ctx:a}),Ri.$set(u7);const __={};j&2&&(__.$$scope={dirty:j,ctx:a}),Bi.$set(__);const g7={};j&2&&(g7.$$scope={dirty:j,ctx:a}),Gi.$set(g7);const et={};j&2&&(et.$$scope={dirty:j,ctx:a}),Wi.$set(et);const hs={};j&2&&(hs.$$scope={dirty:j,ctx:a}),Yi.$set(hs);const _7={};j&2&&(_7.$$scope={dirty:j,ctx:a}),Ji.$set(_7);const b7={};j&2&&(b7.$$scope={dirty:j,ctx:a}),Qi.$set(b7);const $7={};j&2&&($7.$$scope={dirty:j,ctx:a}),ep.$set($7);const eu={};j&2&&(eu.$$scope={dirty:j,ctx:a}),tp.$set(eu);const x7={};j&2&&(x7.$$scope={dirty:j,ctx:a}),sp.$set(x7);const Pr={};j&2&&(Pr.$$scope={dirty:j,ctx:a}),ap.$set(Pr)},i(a){m4||(x(t.$$.fragment,a),x(gs.$$.fragment,a),x(Cp.$$.fragment,a),x(zp.$$.fragment,a),x(Lr.$$.fragment,a),x(Up.$$.fragment,a),x(Sr.$$.fragment,a),x(Mp.$$.fragment,a),x(Rp.$$.fragment,a),x(Bp.$$.fragment,a),x(zr.$$.fragment,a),x(Hp.$$.fragment,a),x(Vr.$$.fragment,a),x(Gp.$$.fragment,a),x(Wp.$$.fragment,a),x(Yp.$$.fragment,a),x(Rr.$$.fragment,a),x(Zp.$$.fragment,a),x(Xp.$$.fragment,a),x(Hr.$$.fragment,a),x(Qp.$$.fragment,a),x(Gr.$$.fragment,a),x(ec.$$.fragment,a),x(Wr.$$.fragment,a),x(tc.$$.fragment,a),x(Jr.$$.fragment,a),x(ac.$$.fragment,a),x(Kr.$$.fragment,a),x(nc.$$.fragment,a),x(Zr.$$.fragment,a),x(rc.$$.fragment,a),x(Xr.$$.fragment,a),x(oc.$$.fragment,a),x(Qr.$$.fragment,a),x(lc.$$.fragment,a),x(eo.$$.fragment,a),x(ic.$$.fragment,a),x(to.$$.fragment,a),x(pc.$$.fragment,a),x(so.$$.fragment,a),x(cc.$$.fragment,a),x(ao.$$.fragment,a),x(dc.$$.fragment,a),x(no.$$.fragment,a),x(mc.$$.fragment,a),x(ro.$$.fragment,a),x(fc.$$.fragment,a),x(oo.$$.fragment,a),x(uc.$$.fragment,a),x(_c.$$.fragment,a),x(bc.$$.fragment,a),x(io.$$.fragment,a),x($c.$$.fragment,a),x(po.$$.fragment,a),x(xc.$$.fragment,a),x(co.$$.fragment,a),x(yc.$$.fragment,a),x(mo.$$.fragment,a),x(wc.$$.fragment,a),x(ho.$$.fragment,a),x(Dc.$$.fragment,a),x(kc.$$.fragment,a),x(uo.$$.fragment,a),x(Ec.$$.fragment,a),x(go.$$.fragment,a),x(Ic.$$.fragment,a),x(_o.$$.fragment,a),x(Tc.$$.fragment,a),x(bo.$$.fragment,a),x(Nc.$$.fragment,a),x($o.$$.fragment,a),x(Pc.$$.fragment,a),x(xo.$$.fragment,a),x(Ac.$$.fragment,a),x(vo.$$.fragment,a),x(Lc.$$.fragment,a),x(yo.$$.fragment,a),x(Oc.$$.fragment,a),x(jo.$$.fragment,a),x(Cc.$$.fragment,a),x(wo.$$.fragment,a),x(zc.$$.fragment,a),x(Do.$$.fragment,a),x(ko.$$.fragment,a),x(Eo.$$.fragment,a),x(Uc.$$.fragment,a),x(qo.$$.fragment,a),x(Mc.$$.fragment,a),x(Rc.$$.fragment,a),x(To.$$.fragment,a),x(Bc.$$.fragment,a),x(No.$$.fragment,a),x(Gc.$$.fragment,a),x(Po.$$.fragment,a),x(Wc.$$.fragment,a),x(Ao.$$.fragment,a),x(Yc.$$.fragment,a),x(Fo.$$.fragment,a),x(Jc.$$.fragment,a),x(Lo.$$.fragment,a),x(Zc.$$.fragment,a),x(Qc.$$.fragment,a),x(ed.$$.fragment,a),x(sd.$$.fragment,a),x(Oo.$$.fragment,a),x(ad.$$.fragment,a),x(Co.$$.fragment,a),x(nd.$$.fragment,a),x(rd.$$.fragment,a),x(od.$$.fragment,a),x(ld.$$.fragment,a),x(id.$$.fragment,a),x(pd.$$.fragment,a),x(cd.$$.fragment,a),x(dd.$$.fragment,a),x(md.$$.fragment,a),x(hd.$$.fragment,a),x(fd.$$.fragment,a),x(ud.$$.fragment,a),x(gd.$$.fragment,a),x(_d.$$.fragment,a),x(bd.$$.fragment,a),x($d.$$.fragment,a),x(xd.$$.fragment,a),x(vd.$$.fragment,a),x(yd.$$.fragment,a),x(jd.$$.fragment,a),x(wd.$$.fragment,a),x(Dd.$$.fragment,a),x(kd.$$.fragment,a),x(Yo.$$.fragment,a),x(Ed.$$.fragment,a),x(Jo.$$.fragment,a),x(qd.$$.fragment,a),x(Ko.$$.fragment,a),x(Id.$$.fragment,a),x(Zo.$$.fragment,a),x(Td.$$.fragment,a),x(Nd.$$.fragment,a),x(Xo.$$.fragment,a),x(Ad.$$.fragment,a),x(Qo.$$.fragment,a),x(Fd.$$.fragment,a),x(el.$$.fragment,a),x(Ld.$$.fragment,a),x(Od.$$.fragment,a),x(zd.$$.fragment,a),x(Ud.$$.fragment,a),x(Md.$$.fragment,a),x(Rd.$$.fragment,a),x(al.$$.fragment,a),x(Bd.$$.fragment,a),x(nl.$$.fragment,a),x(Hd.$$.fragment,a),x(rl.$$.fragment,a),x(Gd.$$.fragment,a),x(ll.$$.fragment,a),x(Yd.$$.fragment,a),x(il.$$.fragment,a),x(Jd.$$.fragment,a),x(pl.$$.fragment,a),x(Kd.$$.fragment,a),x(cl.$$.fragment,a),x(Zd.$$.fragment,a),x(dl.$$.fragment,a),x(Xd.$$.fragment,a),x(ml.$$.fragment,a),x(Qd.$$.fragment,a),x(hl.$$.fragment,a),x(em.$$.fragment,a),x(fl.$$.fragment,a),x(tm.$$.fragment,a),x(ul.$$.fragment,a),x(sm.$$.fragment,a),x(gl.$$.fragment,a),x(nm.$$.fragment,a),x(_l.$$.fragment,a),x(om.$$.fragment,a),x(lm.$$.fragment,a),x($l.$$.fragment,a),x(pm.$$.fragment,a),x(xl.$$.fragment,a),x(cm.$$.fragment,a),x(vl.$$.fragment,a),x(dm.$$.fragment,a),x(yl.$$.fragment,a),x(mm.$$.fragment,a),x(jl.$$.fragment,a),x(hm.$$.fragment,a),x(wl.$$.fragment,a),x(fm.$$.fragment,a),x(Dl.$$.fragment,a),x(gm.$$.fragment,a),x(kl.$$.fragment,a),x(_m.$$.fragment,a),x(El.$$.fragment,a),x($m.$$.fragment,a),x(ql.$$.fragment,a),x(xm.$$.fragment,a),x(Il.$$.fragment,a),x(Tl.$$.fragment,a),x(ym.$$.fragment,a),x(Nl.$$.fragment,a),x(jm.$$.fragment,a),x(Pl.$$.fragment,a),x(wm.$$.fragment,a),x(Al.$$.fragment,a),x(Dm.$$.fragment,a),x(Fl.$$.fragment,a),x(km.$$.fragment,a),x(Ll.$$.fragment,a),x(Em.$$.fragment,a),x(qm.$$.fragment,a),x(Im.$$.fragment,a),x(Tm.$$.fragment,a),x(Cl.$$.fragment,a),x(Nm.$$.fragment,a),x(zl.$$.fragment,a),x(Pm.$$.fragment,a),x(Vl.$$.fragment,a),x(Am.$$.fragment,a),x(Fm.$$.fragment,a),x(Ul.$$.fragment,a),x(Sm.$$.fragment,a),x(Ml.$$.fragment,a),x(Om.$$.fragment,a),x(Rl.$$.fragment,a),x(Cm.$$.fragment,a),x(Bl.$$.fragment,a),x(Vm.$$.fragment,a),x(Hl.$$.fragment,a),x(Mm.$$.fragment,a),x(Gl.$$.fragment,a),x(Bm.$$.fragment,a),x(Hm.$$.fragment,a),x(Gm.$$.fragment,a),x(Wm.$$.fragment,a),x(Ym.$$.fragment,a),x(Jm.$$.fragment,a),x(Km.$$.fragment,a),x(Zm.$$.fragment,a),x(Xm.$$.fragment,a),x(Qm.$$.fragment,a),x(eh.$$.fragment,a),x(th.$$.fragment,a),x(sh.$$.fragment,a),x(ah.$$.fragment,a),x(nh.$$.fragment,a),x(rh.$$.fragment,a),x(oh.$$.fragment,a),x(lh.$$.fragment,a),x(Zl.$$.fragment,a),x(ph.$$.fragment,a),x(Xl.$$.fragment,a),x(ch.$$.fragment,a),x(Ql.$$.fragment,a),x(mh.$$.fragment,a),x(ei.$$.fragment,a),x(hh.$$.fragment,a),x(ti.$$.fragment,a),x(fh.$$.fragment,a),x(si.$$.fragment,a),x(uh.$$.fragment,a),x(ai.$$.fragment,a),x(gh.$$.fragment,a),x(ni.$$.fragment,a),x(_h.$$.fragment,a),x(ri.$$.fragment,a),x(bh.$$.fragment,a),x($h.$$.fragment,a),x(li.$$.fragment,a),x(Dh.$$.fragment,a),x(pi.$$.fragment,a),x(kh.$$.fragment,a),x(Eh.$$.fragment,a),x(qh.$$.fragment,a),x(Ih.$$.fragment,a),x(Th.$$.fragment,a),x(Nh.$$.fragment,a),x(ui.$$.fragment,a),x(Ph.$$.fragment,a),x(Ah.$$.fragment,a),x(_i.$$.fragment,a),x(Fh.$$.fragment,a),x(bi.$$.fragment,a),x(Lh.$$.fragment,a),x($i.$$.fragment,a),x(Sh.$$.fragment,a),x(xi.$$.fragment,a),x(Ch.$$.fragment,a),x(Vh.$$.fragment,a),x(vi.$$.fragment,a),x(Uh.$$.fragment,a),x(yi.$$.fragment,a),x(Mh.$$.fragment,a),x(ji.$$.fragment,a),x(Rh.$$.fragment,a),x(wi.$$.fragment,a),x(Hh.$$.fragment,a),x(Gh.$$.fragment,a),x(ki.$$.fragment,a),x(Wh.$$.fragment,a),x(Yh.$$.fragment,a),x(qi.$$.fragment,a),x(Jh.$$.fragment,a),x(Ii.$$.fragment,a),x(Kh.$$.fragment,a),x(Ti.$$.fragment,a),x(Zh.$$.fragment,a),x(Ni.$$.fragment,a),x(Xh.$$.fragment,a),x(Pi.$$.fragment,a),x(af.$$.fragment,a),x(nf.$$.fragment,a),x(rf.$$.fragment,a),x(of.$$.fragment,a),x(lf.$$.fragment,a),x(pf.$$.fragment,a),x(Oi.$$.fragment,a),x(uf.$$.fragment,a),x(gf.$$.fragment,a),x(_f.$$.fragment,a),x(bf.$$.fragment,a),x($f.$$.fragment,a),x(xf.$$.fragment,a),x(vf.$$.fragment,a),x(yf.$$.fragment,a),x(Ri.$$.fragment,a),x(wf.$$.fragment,a),x(Bi.$$.fragment,a),x(Df.$$.fragment,a),x(kf.$$.fragment,a),x(Gi.$$.fragment,a),x(Ef.$$.fragment,a),x(Wi.$$.fragment,a),x(qf.$$.fragment,a),x(Yi.$$.fragment,a),x(If.$$.fragment,a),x(Ji.$$.fragment,a),x(Tf.$$.fragment,a),x(Nf.$$.fragment,a),x(Pf.$$.fragment,a),x(Qi.$$.fragment,a),x(ep.$$.fragment,a),x(tp.$$.fragment,a),x(sp.$$.fragment,a),x(ap.$$.fragment,a),x(Ff.$$.fragment,a),x(Lf.$$.fragment,a),x(Sf.$$.fragment,a),x(Of.$$.fragment,a),m4=!0)},o(a){v(t.$$.fragment,a),v(gs.$$.fragment,a),v(Cp.$$.fragment,a),v(zp.$$.fragment,a),v(Lr.$$.fragment,a),v(Up.$$.fragment,a),v(Sr.$$.fragment,a),v(Mp.$$.fragment,a),v(Rp.$$.fragment,a),v(Bp.$$.fragment,a),v(zr.$$.fragment,a),v(Hp.$$.fragment,a),v(Vr.$$.fragment,a),v(Gp.$$.fragment,a),v(Wp.$$.fragment,a),v(Yp.$$.fragment,a),v(Rr.$$.fragment,a),v(Zp.$$.fragment,a),v(Xp.$$.fragment,a),v(Hr.$$.fragment,a),v(Qp.$$.fragment,a),v(Gr.$$.fragment,a),v(ec.$$.fragment,a),v(Wr.$$.fragment,a),v(tc.$$.fragment,a),v(Jr.$$.fragment,a),v(ac.$$.fragment,a),v(Kr.$$.fragment,a),v(nc.$$.fragment,a),v(Zr.$$.fragment,a),v(rc.$$.fragment,a),v(Xr.$$.fragment,a),v(oc.$$.fragment,a),v(Qr.$$.fragment,a),v(lc.$$.fragment,a),v(eo.$$.fragment,a),v(ic.$$.fragment,a),v(to.$$.fragment,a),v(pc.$$.fragment,a),v(so.$$.fragment,a),v(cc.$$.fragment,a),v(ao.$$.fragment,a),v(dc.$$.fragment,a),v(no.$$.fragment,a),v(mc.$$.fragment,a),v(ro.$$.fragment,a),v(fc.$$.fragment,a),v(oo.$$.fragment,a),v(uc.$$.fragment,a),v(_c.$$.fragment,a),v(bc.$$.fragment,a),v(io.$$.fragment,a),v($c.$$.fragment,a),v(po.$$.fragment,a),v(xc.$$.fragment,a),v(co.$$.fragment,a),v(yc.$$.fragment,a),v(mo.$$.fragment,a),v(wc.$$.fragment,a),v(ho.$$.fragment,a),v(Dc.$$.fragment,a),v(kc.$$.fragment,a),v(uo.$$.fragment,a),v(Ec.$$.fragment,a),v(go.$$.fragment,a),v(Ic.$$.fragment,a),v(_o.$$.fragment,a),v(Tc.$$.fragment,a),v(bo.$$.fragment,a),v(Nc.$$.fragment,a),v($o.$$.fragment,a),v(Pc.$$.fragment,a),v(xo.$$.fragment,a),v(Ac.$$.fragment,a),v(vo.$$.fragment,a),v(Lc.$$.fragment,a),v(yo.$$.fragment,a),v(Oc.$$.fragment,a),v(jo.$$.fragment,a),v(Cc.$$.fragment,a),v(wo.$$.fragment,a),v(zc.$$.fragment,a),v(Do.$$.fragment,a),v(ko.$$.fragment,a),v(Eo.$$.fragment,a),v(Uc.$$.fragment,a),v(qo.$$.fragment,a),v(Mc.$$.fragment,a),v(Rc.$$.fragment,a),v(To.$$.fragment,a),v(Bc.$$.fragment,a),v(No.$$.fragment,a),v(Gc.$$.fragment,a),v(Po.$$.fragment,a),v(Wc.$$.fragment,a),v(Ao.$$.fragment,a),v(Yc.$$.fragment,a),v(Fo.$$.fragment,a),v(Jc.$$.fragment,a),v(Lo.$$.fragment,a),v(Zc.$$.fragment,a),v(Qc.$$.fragment,a),v(ed.$$.fragment,a),v(sd.$$.fragment,a),v(Oo.$$.fragment,a),v(ad.$$.fragment,a),v(Co.$$.fragment,a),v(nd.$$.fragment,a),v(rd.$$.fragment,a),v(od.$$.fragment,a),v(ld.$$.fragment,a),v(id.$$.fragment,a),v(pd.$$.fragment,a),v(cd.$$.fragment,a),v(dd.$$.fragment,a),v(md.$$.fragment,a),v(hd.$$.fragment,a),v(fd.$$.fragment,a),v(ud.$$.fragment,a),v(gd.$$.fragment,a),v(_d.$$.fragment,a),v(bd.$$.fragment,a),v($d.$$.fragment,a),v(xd.$$.fragment,a),v(vd.$$.fragment,a),v(yd.$$.fragment,a),v(jd.$$.fragment,a),v(wd.$$.fragment,a),v(Dd.$$.fragment,a),v(kd.$$.fragment,a),v(Yo.$$.fragment,a),v(Ed.$$.fragment,a),v(Jo.$$.fragment,a),v(qd.$$.fragment,a),v(Ko.$$.fragment,a),v(Id.$$.fragment,a),v(Zo.$$.fragment,a),v(Td.$$.fragment,a),v(Nd.$$.fragment,a),v(Xo.$$.fragment,a),v(Ad.$$.fragment,a),v(Qo.$$.fragment,a),v(Fd.$$.fragment,a),v(el.$$.fragment,a),v(Ld.$$.fragment,a),v(Od.$$.fragment,a),v(zd.$$.fragment,a),v(Ud.$$.fragment,a),v(Md.$$.fragment,a),v(Rd.$$.fragment,a),v(al.$$.fragment,a),v(Bd.$$.fragment,a),v(nl.$$.fragment,a),v(Hd.$$.fragment,a),v(rl.$$.fragment,a),v(Gd.$$.fragment,a),v(ll.$$.fragment,a),v(Yd.$$.fragment,a),v(il.$$.fragment,a),v(Jd.$$.fragment,a),v(pl.$$.fragment,a),v(Kd.$$.fragment,a),v(cl.$$.fragment,a),v(Zd.$$.fragment,a),v(dl.$$.fragment,a),v(Xd.$$.fragment,a),v(ml.$$.fragment,a),v(Qd.$$.fragment,a),v(hl.$$.fragment,a),v(em.$$.fragment,a),v(fl.$$.fragment,a),v(tm.$$.fragment,a),v(ul.$$.fragment,a),v(sm.$$.fragment,a),v(gl.$$.fragment,a),v(nm.$$.fragment,a),v(_l.$$.fragment,a),v(om.$$.fragment,a),v(lm.$$.fragment,a),v($l.$$.fragment,a),v(pm.$$.fragment,a),v(xl.$$.fragment,a),v(cm.$$.fragment,a),v(vl.$$.fragment,a),v(dm.$$.fragment,a),v(yl.$$.fragment,a),v(mm.$$.fragment,a),v(jl.$$.fragment,a),v(hm.$$.fragment,a),v(wl.$$.fragment,a),v(fm.$$.fragment,a),v(Dl.$$.fragment,a),v(gm.$$.fragment,a),v(kl.$$.fragment,a),v(_m.$$.fragment,a),v(El.$$.fragment,a),v($m.$$.fragment,a),v(ql.$$.fragment,a),v(xm.$$.fragment,a),v(Il.$$.fragment,a),v(Tl.$$.fragment,a),v(ym.$$.fragment,a),v(Nl.$$.fragment,a),v(jm.$$.fragment,a),v(Pl.$$.fragment,a),v(wm.$$.fragment,a),v(Al.$$.fragment,a),v(Dm.$$.fragment,a),v(Fl.$$.fragment,a),v(km.$$.fragment,a),v(Ll.$$.fragment,a),v(Em.$$.fragment,a),v(qm.$$.fragment,a),v(Im.$$.fragment,a),v(Tm.$$.fragment,a),v(Cl.$$.fragment,a),v(Nm.$$.fragment,a),v(zl.$$.fragment,a),v(Pm.$$.fragment,a),v(Vl.$$.fragment,a),v(Am.$$.fragment,a),v(Fm.$$.fragment,a),v(Ul.$$.fragment,a),v(Sm.$$.fragment,a),v(Ml.$$.fragment,a),v(Om.$$.fragment,a),v(Rl.$$.fragment,a),v(Cm.$$.fragment,a),v(Bl.$$.fragment,a),v(Vm.$$.fragment,a),v(Hl.$$.fragment,a),v(Mm.$$.fragment,a),v(Gl.$$.fragment,a),v(Bm.$$.fragment,a),v(Hm.$$.fragment,a),v(Gm.$$.fragment,a),v(Wm.$$.fragment,a),v(Ym.$$.fragment,a),v(Jm.$$.fragment,a),v(Km.$$.fragment,a),v(Zm.$$.fragment,a),v(Xm.$$.fragment,a),v(Qm.$$.fragment,a),v(eh.$$.fragment,a),v(th.$$.fragment,a),v(sh.$$.fragment,a),v(ah.$$.fragment,a),v(nh.$$.fragment,a),v(rh.$$.fragment,a),v(oh.$$.fragment,a),v(lh.$$.fragment,a),v(Zl.$$.fragment,a),v(ph.$$.fragment,a),v(Xl.$$.fragment,a),v(ch.$$.fragment,a),v(Ql.$$.fragment,a),v(mh.$$.fragment,a),v(ei.$$.fragment,a),v(hh.$$.fragment,a),v(ti.$$.fragment,a),v(fh.$$.fragment,a),v(si.$$.fragment,a),v(uh.$$.fragment,a),v(ai.$$.fragment,a),v(gh.$$.fragment,a),v(ni.$$.fragment,a),v(_h.$$.fragment,a),v(ri.$$.fragment,a),v(bh.$$.fragment,a),v($h.$$.fragment,a),v(li.$$.fragment,a),v(Dh.$$.fragment,a),v(pi.$$.fragment,a),v(kh.$$.fragment,a),v(Eh.$$.fragment,a),v(qh.$$.fragment,a),v(Ih.$$.fragment,a),v(Th.$$.fragment,a),v(Nh.$$.fragment,a),v(ui.$$.fragment,a),v(Ph.$$.fragment,a),v(Ah.$$.fragment,a),v(_i.$$.fragment,a),v(Fh.$$.fragment,a),v(bi.$$.fragment,a),v(Lh.$$.fragment,a),v($i.$$.fragment,a),v(Sh.$$.fragment,a),v(xi.$$.fragment,a),v(Ch.$$.fragment,a),v(Vh.$$.fragment,a),v(vi.$$.fragment,a),v(Uh.$$.fragment,a),v(yi.$$.fragment,a),v(Mh.$$.fragment,a),v(ji.$$.fragment,a),v(Rh.$$.fragment,a),v(wi.$$.fragment,a),v(Hh.$$.fragment,a),v(Gh.$$.fragment,a),v(ki.$$.fragment,a),v(Wh.$$.fragment,a),v(Yh.$$.fragment,a),v(qi.$$.fragment,a),v(Jh.$$.fragment,a),v(Ii.$$.fragment,a),v(Kh.$$.fragment,a),v(Ti.$$.fragment,a),v(Zh.$$.fragment,a),v(Ni.$$.fragment,a),v(Xh.$$.fragment,a),v(Pi.$$.fragment,a),v(af.$$.fragment,a),v(nf.$$.fragment,a),v(rf.$$.fragment,a),v(of.$$.fragment,a),v(lf.$$.fragment,a),v(pf.$$.fragment,a),v(Oi.$$.fragment,a),v(uf.$$.fragment,a),v(gf.$$.fragment,a),v(_f.$$.fragment,a),v(bf.$$.fragment,a),v($f.$$.fragment,a),v(xf.$$.fragment,a),v(vf.$$.fragment,a),v(yf.$$.fragment,a),v(Ri.$$.fragment,a),v(wf.$$.fragment,a),v(Bi.$$.fragment,a),v(Df.$$.fragment,a),v(kf.$$.fragment,a),v(Gi.$$.fragment,a),v(Ef.$$.fragment,a),v(Wi.$$.fragment,a),v(qf.$$.fragment,a),v(Yi.$$.fragment,a),v(If.$$.fragment,a),v(Ji.$$.fragment,a),v(Tf.$$.fragment,a),v(Nf.$$.fragment,a),v(Pf.$$.fragment,a),v(Qi.$$.fragment,a),v(ep.$$.fragment,a),v(tp.$$.fragment,a),v(sp.$$.fragment,a),v(ap.$$.fragment,a),v(Ff.$$.fragment,a),v(Lf.$$.fragment,a),v(Sf.$$.fragment,a),v(Of.$$.fragment,a),m4=!1},d(a){s(c),a&&s(g),a&&s(f),y(t),a&&s(Ar),a&&s(Oe),y(gs),a&&s(j7),a&&s(Q),y(Cp),y(zp),y(Lr),y(Up),y(Sr),a&&s(w7),a&&s(fn),y(Mp),a&&s(D7),a&&s(Cr),a&&s(k7),a&&s(q),y(Rp),y(Bp),y(zr),y(Hp),y(Vr),y(Gp),y(Wp),y(Yp),y(Rr),y(Zp),y(Xp),y(Hr),y(Qp),y(Gr),y(ec),y(Wr),y(tc),y(Jr),y(ac),y(Kr),y(nc),y(Zr),y(rc),y(Xr),y(oc),y(Qr),y(lc),y(eo),y(ic),y(to),y(pc),y(so),y(cc),y(ao),y(dc),y(no),y(mc),y(ro),y(fc),y(oo),y(uc),y(_c),y(bc),y(io),y($c),y(po),y(xc),y(co),y(yc),y(mo),y(wc),y(ho),y(Dc),y(kc),y(uo),y(Ec),y(go),y(Ic),y(_o),y(Tc),y(bo),y(Nc),y($o),y(Pc),y(xo),y(Ac),y(vo),y(Lc),y(yo),y(Oc),y(jo),y(Cc),y(wo),y(zc),y(Do),y(ko),y(Eo),y(Uc),y(qo),y(Mc),y(Rc),y(To),y(Bc),y(No),y(Gc),y(Po),y(Wc),y(Ao),y(Yc),y(Fo),y(Jc),y(Lo),y(Zc),y(Qc),y(ed),y(sd),y(Oo),y(ad),y(Co),y(nd),y(rd),y(od),y(ld),y(id),y(pd),y(cd),y(dd),y(md),y(hd),y(fd),y(ud),y(gd),y(_d),y(bd),y($d),y(xd),y(vd),y(yd),y(jd),y(wd),y(Dd),y(kd),y(Yo),y(Ed),y(Jo),y(qd),y(Ko),y(Id),y(Zo),y(Td),y(Nd),y(Xo),a&&s(E7),a&&s(zt),y(Ad),y(Qo),a&&s(q7),a&&s(ee),y(Fd),y(el),a&&s(I7),a&&s(me),y(Ld),a&&s(T7),a&&s(he),y(Od),a&&s(N7),a&&s(fe),y(zd),a&&s(P7),a&&s(Tn),y(Ud),a&&s(A7),a&&s(sl),a&&s(F7),a&&s(A),y(Md),y(Rd),y(al),y(Bd),y(nl),y(Hd),y(rl),y(Gd),y(ll),y(Yd),y(il),y(Jd),y(pl),y(Kd),y(cl),y(Zd),y(dl),y(Xd),y(ml),y(Qd),y(hl),y(em),y(fl),y(tm),y(ul),y(sm),y(gl),y(nm),y(_l),y(om),y(lm),y($l),y(pm),y(xl),y(cm),y(vl),y(dm),y(yl),y(mm),y(jl),y(hm),y(wl),y(fm),y(Dl),y(gm),y(kl),y(_m),y(El),y($m),y(ql),y(xm),y(Il),y(Tl),y(ym),y(Nl),y(jm),y(Pl),y(wm),y(Al),y(Dm),y(Fl),y(km),y(Ll),y(Em),a&&s(L7),a&&s(vg),a&&s(S7),a&&s(Rn),y(qm),a&&s(O7),a&&s(Ol),a&&s(C7),a&&s(L),y(Im),y(Tm),y(Cl),y(Nm),y(zl),y(Pm),y(Vl),y(Am),y(Fm),y(Ul),y(Sm),y(Ml),y(Om),y(Rl),y(Cm),y(Bl),y(Vm),y(Hl),y(Mm),y(Gl),y(Bm),y(Hm),y(Gm),y(Wm),y(Ym),y(Jm),y(Km),y(Zm),y(Xm),y(Qm),y(eh),y(th),y(sh),y(ah),y(nh),a&&s(z7),a&&s(Gn),y(rh),a&&s(V7),a&&s(Kl),a&&s(U7),a&&s(U),y(oh),y(lh),y(Zl),y(ph),y(Xl),y(ch),y(Ql),y(mh),y(ei),y(hh),y(ti),y(fh),y(si),y(uh),y(ai),y(gh),y(ni),y(_h),y(ri),a&&s(M7),a&&s(Jn),y(bh),a&&s(R7),a&&s(O),y($h),y(li),y(Dh),y(pi),y(kh),y(Eh),y(qh),y(Ih),y(Th),y(Nh),y(ui),y(Ph),y(Ah),y(_i),y(Fh),y(bi),a&&s(B7),a&&s(Kt),y(Lh),y($i),a&&s(H7),a&&s(B),y(Sh),y(xi),y(Ch),y(Vh),y(vi),y(Uh),y(yi),a&&s(G7),a&&s(We),y(Mh),y(ji),a&&s(W7),a&&s(te),y(Rh),y(wi),y(Hh),a&&s(Y7),a&&s(se),y(Gh),y(ki),y(Wh),a&&s(J7),a&&s(Zt),y(Yh),y(qi),a&&s(K7),a&&s(Xt),y(Jh),y(Ii),a&&s(Z7),a&&s(Qt),y(Kh),y(Ti),a&&s(X7),a&&s(es),y(Zh),y(Ni),a&&s(Q7),a&&s(M),y(Xh),y(Pi),y(af),y(nf),y(rf),y(of),y(lf),a&&s(e4),a&&s(R),y(pf),y(Oi),y(uf),y(gf),y(_f),y(bf),y($f),a&&s(t4),a&&s(sr),y(xf),a&&s(s4),a&&s(ae),y(vf),y(yf),y(Ri),y(wf),y(Bi),a&&s(a4),a&&s(ar),y(Df),a&&s(n4),a&&s(za),a&&s(r4),a&&s(K),y(kf),y(Gi),y(Ef),y(Wi),y(qf),y(Yi),y(If),y(Ji),y(Tf),a&&s(o4),a&&s(nr),y(Nf),a&&s(l4),a&&s(C),y(Pf),y(Qi),y(ep),y(tp),y(sp),y(ap),a&&s(i4),a&&s(ir),y(Ff),a&&s(p4),a&&s(cr),y(Lf),a&&s(c4),a&&s(dr),y(Sf),a&&s(d4),a&&s(mr),y(Of)}}}const Kre={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.IterableDatasetDict",title:"IterableDatasetDict"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function Zre(k){return yae(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class roe extends bae{constructor(c){super();$ae(this,c,Zre,Jre,xae,{})}}export{roe as default,Kre as metadata};
