import{S as Kn,i as Zn,s as ti,e as s,k as d,w as m,t as n,M as ei,c as o,d as e,m as u,a as l,x as _,h as i,b as f,G as a,g as p,y as g,q as w,o as v,B as q,v as ai}from"../chunks/vendor-hf-doc-builder.js";import{T as wr}from"../chunks/Tip-hf-doc-builder.js";import{I as ct}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as k}from"../chunks/CodeBlock-hf-doc-builder.js";function si(H){let h,$,c,y,N;return{c(){h=s("p"),$=n("To help you get started, try beginning with the dataset loading script "),c=s("a"),y=n("template"),N=n("!"),this.h()},l(b){h=o(b,"P",{});var I=l(h);$=i(I,"To help you get started, try beginning with the dataset loading script "),c=o(I,"A",{href:!0,rel:!0});var M=l(c);y=i(M,"template"),M.forEach(e),N=i(I,"!"),I.forEach(e),this.h()},h(){f(c,"href","https://github.com/huggingface/datasets/blob/main/templates/new_dataset_script.py"),f(c,"rel","nofollow")},m(b,I){p(b,h,I),a(h,$),a(h,c),a(c,y),a(h,N)},d(b){b&&e(h)}}}function oi(H){let h,$;return{c(){h=s("p"),$=n("Only use a default configuration when it makes sense. Don\u2019t set one because it may be more convenient for the user to not specify a configuration when they load your dataset. For example, multi-lingual datasets often have a separate configuration for each language. An appropriate default may be an aggregated configuration that loads all the languages of the dataset if the user doesn\u2019t request a particular one.")},l(c){h=o(c,"P",{});var y=l(h);$=i(y,"Only use a default configuration when it makes sense. Don\u2019t set one because it may be more convenient for the user to not specify a configuration when they load your dataset. For example, multi-lingual datasets often have a separate configuration for each language. An appropriate default may be an aggregated configuration that loads all the languages of the dataset if the user doesn\u2019t request a particular one."),y.forEach(e)},m(c,y){p(c,h,y),a(h,$)},d(c){c&&e(h)}}}function li(H){let h,$;return{c(){h=s("p"),$=n("If the data files live in the same folder or repository of the dataset script, you can just pass the relative paths to the files instead of URLs.")},l(c){h=o(c,"P",{});var y=l(h);$=i(y,"If the data files live in the same folder or repository of the dataset script, you can just pass the relative paths to the files instead of URLs."),y.forEach(e)},m(c,y){p(c,h,y),a(h,$)},d(c){c&&e(h)}}}function ri(H){let h,$,c,y,N,b,I,M,Ys,Ia,Yt,Xs,Sa,Xt,Ws,Aa,S,Js,ye,Ks,Zs,$e,to,eo,Da,mt,xa,_t,Ca,Wt,ao,La,E,Ee,so,oo,be,lo,ro,je,no,io,ke,po,uo,Ie,fo,Oa,Q,ho,gt,co,mo,Ta,Y,Na,P,X,Se,wt,_o,Ae,go,Pa,W,wo,De,vo,qo,Ga,J,xe,Jt,Ce,yo,$o,Eo,Le,K,Oe,bo,jo,Kt,ko,Io,Ua,vt,Ra,G,Te,Zt,Ne,So,Ao,Do,Pe,te,Ge,xo,Co,Ba,ee,Lo,Va,qt,Fa,U,Z,Ue,yt,Oo,Re,To,za,A,No,$t,Po,Go,ae,Uo,Ro,Ha,tt,Bo,Et,Vo,Fo,Ma,se,bt,zo,oe,Ho,Mo,Qa,jt,Ya,kt,It,Qo,Be,Yo,Xo,Xa,St,Wa,At,Dt,Wo,Ve,Jo,Ko,Ja,xt,Ka,R,et,Fe,Ct,Zo,ze,tl,Za,D,el,He,al,sl,Me,ol,ll,ts,Lt,es,at,as,B,st,Qe,Ot,rl,Ye,nl,ss,le,il,os,re,Xe,pl,ls,Tt,rs,ot,ns,Nt,Pt,lt,ne,dl,ul,ie,fl,hl,cl,Gt,We,j,ml,Je,_l,gl,Ke,wl,vl,Ze,ql,yl,ta,$l,El,bl,ea,pe,aa,jl,kl,is,rt,Il,sa,Sl,Al,ps,Ut,ds,V,nt,oa,Rt,Dl,la,xl,us,de,Cl,fs,x,ra,Ll,Ol,na,Tl,Nl,ia,Pl,hs,ue,Gl,cs,it,pa,pt,da,Ul,Rl,ua,Bl,Vl,Fl,fa,Bt,zl,ha,Hl,Ml,ms,Vt,_s,F,dt,ca,Ft,Ql,ma,Yl,gs,C,Xl,_a,Wl,Jl,ga,Kl,Zl,ws,ut,tr,wa,er,ar,vs,zt,qs,ft,sr,va,or,lr,ys,z,ht,qa,Ht,rr,ya,nr,$s,L,ir,fe,pr,dr,he,ur,fr,Es,ce,hr,bs,Mt,js;return b=new ct({}),mt=new k({props:{code:`my_dataset/
\u251C\u2500\u2500 README.md
\u2514\u2500\u2500 my_dataset.py`,highlighted:`my<span class="hljs-emphasis">_dataset/
\u251C\u2500\u2500 README.md
\u2514\u2500\u2500 my_</span>dataset.py`}}),_t=new k({props:{code:`from datasets import load_dataset
load_dataset("path/to/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>load_dataset(<span class="hljs-string">&quot;path/to/my_dataset&quot;</span>)`}}),Y=new wr({props:{$$slots:{default:[si]},$$scope:{ctx:H}}}),wt=new ct({}),vt=new k({props:{code:`datasets.Features(
    {
        "id": datasets.Value("string"),
        "title": datasets.Value("string"),
        "context": datasets.Value("string"),
        "question": datasets.Value("string"),
        "answers": datasets.Sequence(
            {
                "text": datasets.Value("string"),
                "answer_start": datasets.Value("int32"),
            }
        ),
    }
)`,highlighted:`datasets.Features(
    {
        <span class="hljs-string">&quot;id&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;title&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;context&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;question&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;answers&quot;</span>: datasets.<span class="hljs-type">Sequence</span>(
            {
                <span class="hljs-string">&quot;text&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;answer_start&quot;</span>: datasets.Value(<span class="hljs-string">&quot;int32&quot;</span>),
            }
        ),
    }
)`}}),qt=new k({props:{code:`def _info(self):
    return datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                "id": datasets.Value("string"),
                "title": datasets.Value("string"),
                "context": datasets.Value("string"),
                "question": datasets.Value("string"),
                "answers": datasets.features.Sequence(
                    {"text": datasets.Value("string"), "answer_start": datasets.Value("int32"),}
                ),
            }
        ),
        # No default supervised_keys (as we have to pass both question
        # and context as input).
        supervised_keys=None,
        homepage="https://rajpurkar.github.io/SQuAD-explorer/",
        citation=_CITATION,
    )`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_info</span>(<span class="hljs-params">self</span>):
    <span class="hljs-keyword">return</span> datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                <span class="hljs-string">&quot;id&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;title&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;context&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;question&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;answers&quot;</span>: datasets.features.<span class="hljs-type">Sequence</span>(
                    {<span class="hljs-string">&quot;text&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;answer_start&quot;</span>: datasets.Value(<span class="hljs-string">&quot;int32&quot;</span>),}
                ),
            }
        ),
        <span class="hljs-comment"># No default supervised_keys (as we have to pass both question</span>
        <span class="hljs-comment"># and context as input).</span>
        supervised_keys=<span class="hljs-literal">None</span>,
        homepage=<span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/&quot;</span>,
        citation=_CITATION,
    )`}}),yt=new ct({}),jt=new k({props:{code:`class SuperGlueConfig(datasets.BuilderConfig):
    """BuilderConfig for SuperGLUE."""

    def __init__(self, features, data_url, citation, url, label_classes=("False", "True"), **kwargs):
        """BuilderConfig for SuperGLUE.

        Args:
        features: *list[string]*, list of the features that will appear in the
            feature dict. Should not include "label".
        data_url: *string*, url to download the zip file from.
        citation: *string*, citation for the data set.
        url: *string*, url for information about the data set.
        label_classes: *list[string]*, the list of classes for the label if the
            label is present as a string. Non-string labels will be cast to either
            'False' or 'True'.
        **kwargs: keyword arguments forwarded to super.
        """
        # Version history:
        # 1.0.2: Fixed non-nondeterminism in ReCoRD.
        # 1.0.1: Change from the pre-release trial version of SuperGLUE (v1.9) to
        #        the full release (v2.0).
        # 1.0.0: S3 (new shuffling, sharding and slicing mechanism).
        # 0.0.2: Initial version.
        super(SuperGlueConfig, self).__init__(version=datasets.Version("1.0.2"), **kwargs)
        self.features = features
        self.label_classes = label_classes
        self.data_url = data_url
        self.citation = citation
        self.url = url`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperGlueConfig</span>(datasets.BuilderConfig):
    <span class="hljs-string">&quot;&quot;&quot;BuilderConfig for SuperGLUE.&quot;&quot;&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, features, data_url, citation, url, label_classes=(<span class="hljs-params"><span class="hljs-string">&quot;False&quot;</span>, <span class="hljs-string">&quot;True&quot;</span></span>), **kwargs</span>):
        <span class="hljs-string">&quot;&quot;&quot;BuilderConfig for SuperGLUE.

        Args:
        features: *list[string]*, list of the features that will appear in the
            feature dict. Should not include &quot;label&quot;.
        data_url: *string*, url to download the zip file from.
        citation: *string*, citation for the data set.
        url: *string*, url for information about the data set.
        label_classes: *list[string]*, the list of classes for the label if the
            label is present as a string. Non-string labels will be cast to either
            &#x27;False&#x27; or &#x27;True&#x27;.
        **kwargs: keyword arguments forwarded to super.
        &quot;&quot;&quot;</span>
        <span class="hljs-comment"># Version history:</span>
        <span class="hljs-comment"># 1.0.2: Fixed non-nondeterminism in ReCoRD.</span>
        <span class="hljs-comment"># 1.0.1: Change from the pre-release trial version of SuperGLUE (v1.9) to</span>
        <span class="hljs-comment">#        the full release (v2.0).</span>
        <span class="hljs-comment"># 1.0.0: S3 (new shuffling, sharding and slicing mechanism).</span>
        <span class="hljs-comment"># 0.0.2: Initial version.</span>
        <span class="hljs-built_in">super</span>(SuperGlueConfig, self).__init__(version=datasets.Version(<span class="hljs-string">&quot;1.0.2&quot;</span>), **kwargs)
        self.features = features
        self.label_classes = label_classes
        self.data_url = data_url
        self.citation = citation
        self.url = url`}}),St=new k({props:{code:`class SuperGlue(datasets.GeneratorBasedBuilder):
    """The SuperGLUE benchmark."""

    BUILDER_CONFIGS = [
        SuperGlueConfig(
            name="boolq",
            description=_BOOLQ_DESCRIPTION,
            features=["question", "passage"],
            data_url="https://dl.fbaipublicfiles.com/glue/superglue/data/v2/BoolQ.zip",
            citation=_BOOLQ_CITATION,
            url="https://github.com/google-research-datasets/boolean-questions",
        ),
        ...
        ...
        SuperGlueConfig(
            name="axg",
            description=_AXG_DESCRIPTION,
            features=["premise", "hypothesis"],
            label_classes=["entailment", "not_entailment"],
            data_url="https://dl.fbaipublicfiles.com/glue/superglue/data/v2/AX-g.zip",
            citation=_AXG_CITATION,
            url="https://github.com/rudinger/winogender-schemas",
        ),`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperGlue</span>(datasets.GeneratorBasedBuilder):
    <span class="hljs-string">&quot;&quot;&quot;The SuperGLUE benchmark.&quot;&quot;&quot;</span>

    BUILDER_CONFIGS = [
        SuperGlueConfig(
            name=<span class="hljs-string">&quot;boolq&quot;</span>,
            description=_BOOLQ_DESCRIPTION,
            features=[<span class="hljs-string">&quot;question&quot;</span>, <span class="hljs-string">&quot;passage&quot;</span>],
            data_url=<span class="hljs-string">&quot;https://dl.fbaipublicfiles.com/glue/superglue/data/v2/BoolQ.zip&quot;</span>,
            citation=_BOOLQ_CITATION,
            url=<span class="hljs-string">&quot;https://github.com/google-research-datasets/boolean-questions&quot;</span>,
        ),
        ...
        ...
        SuperGlueConfig(
            name=<span class="hljs-string">&quot;axg&quot;</span>,
            description=_AXG_DESCRIPTION,
            features=[<span class="hljs-string">&quot;premise&quot;</span>, <span class="hljs-string">&quot;hypothesis&quot;</span>],
            label_classes=[<span class="hljs-string">&quot;entailment&quot;</span>, <span class="hljs-string">&quot;not_entailment&quot;</span>],
            data_url=<span class="hljs-string">&quot;https://dl.fbaipublicfiles.com/glue/superglue/data/v2/AX-g.zip&quot;</span>,
            citation=_AXG_CITATION,
            url=<span class="hljs-string">&quot;https://github.com/rudinger/winogender-schemas&quot;</span>,
        ),`}}),xt=new k({props:{code:`from datasets import load_dataset
dataset = load_dataset('super_glue', 'boolq')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;super_glue&#x27;</span>, <span class="hljs-string">&#x27;boolq&#x27;</span>)`}}),Ct=new ct({}),Lt=new k({props:{code:`class NewDataset(datasets.GeneratorBasedBuilder):

VERSION = datasets.Version("1.1.0")

BUILDER_CONFIGS = [
    datasets.BuilderConfig(name="first_domain", version=VERSION, description="This part of my dataset covers a first domain"),
    datasets.BuilderConfig(name="second_domain", version=VERSION, description="This part of my dataset covers a second domain"),
]

DEFAULT_CONFIG_NAME = "first_domain"`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">NewDataset</span>(datasets.GeneratorBasedBuilder):

VERSION = datasets.Version(<span class="hljs-string">&quot;1.1.0&quot;</span>)

BUILDER_CONFIGS = [
    datasets.BuilderConfig(name=<span class="hljs-string">&quot;first_domain&quot;</span>, version=VERSION, description=<span class="hljs-string">&quot;This part of my dataset covers a first domain&quot;</span>),
    datasets.BuilderConfig(name=<span class="hljs-string">&quot;second_domain&quot;</span>, version=VERSION, description=<span class="hljs-string">&quot;This part of my dataset covers a second domain&quot;</span>),
]

DEFAULT_CONFIG_NAME = <span class="hljs-string">&quot;first_domain&quot;</span>`}}),at=new wr({props:{warning:!0,$$slots:{default:[oi]},$$scope:{ctx:H}}}),Ot=new ct({}),Tt=new k({props:{code:`_URL = "https://rajpurkar.github.io/SQuAD-explorer/dataset/"
_URLS = {
    "train": _URL + "train-v1.1.json",
    "dev": _URL + "dev-v1.1.json",
}`,highlighted:`_URL = <span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/dataset/&quot;</span>
_URLS = {
    <span class="hljs-string">&quot;train&quot;</span>: _URL + <span class="hljs-string">&quot;train-v1.1.json&quot;</span>,
    <span class="hljs-string">&quot;dev&quot;</span>: _URL + <span class="hljs-string">&quot;dev-v1.1.json&quot;</span>,
}`}}),ot=new wr({props:{$$slots:{default:[li]},$$scope:{ctx:H}}}),Ut=new k({props:{code:`def _split_generators(self, dl_manager: datasets.DownloadManager) -> List[datasets.SplitGenerator]:
    urls_to_download = self._URLS
    downloaded_files = dl_manager.download_and_extract(urls_to_download)

    return [
        datasets.SplitGenerator(name=datasets.Split.TRAIN, gen_kwargs={"filepath": downloaded_files["train"]}),
        datasets.SplitGenerator(name=datasets.Split.VALIDATION, gen_kwargs={"filepath": downloaded_files["dev"]}),
    ]`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_generators</span>(<span class="hljs-params">self, dl_manager: datasets.DownloadManager</span>) -&gt; <span class="hljs-type">List</span>[datasets.SplitGenerator]:
    urls_to_download = self._URLS
    downloaded_files = dl_manager.download_and_extract(urls_to_download)

    <span class="hljs-keyword">return</span> [
        datasets.SplitGenerator(name=datasets.Split.TRAIN, gen_kwargs={<span class="hljs-string">&quot;filepath&quot;</span>: downloaded_files[<span class="hljs-string">&quot;train&quot;</span>]}),
        datasets.SplitGenerator(name=datasets.Split.VALIDATION, gen_kwargs={<span class="hljs-string">&quot;filepath&quot;</span>: downloaded_files[<span class="hljs-string">&quot;dev&quot;</span>]}),
    ]`}}),Rt=new ct({}),Vt=new k({props:{code:`def _generate_examples(self, filepath):
    """This function returns the examples in the raw (text) form."""
    logger.info("generating examples from = %s", filepath)
    with open(filepath) as f:
        squad = json.load(f)
        for article in squad["data"]:
            title = article.get("title", "").strip()
            for paragraph in article["paragraphs"]:
                context = paragraph["context"].strip()
                for qa in paragraph["qas"]:
                    question = qa["question"].strip()
                    id_ = qa["id"]

                    answer_starts = [answer["answer_start"] for answer in qa["answers"]]
                    answers = [answer["text"].strip() for answer in qa["answers"]]

                    # Features currently used are "context", "question", and "answers".
                    # Others are extracted here for the ease of future expansions.
                    yield id_, {
                        "title": title,
                        "context": context,
                        "question": question,
                        "id": id_,
                        "answers": {"answer_start": answer_starts, "text": answers,},
                    }`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_examples</span>(<span class="hljs-params">self, filepath</span>):
    <span class="hljs-string">&quot;&quot;&quot;This function returns the examples in the raw (text) form.&quot;&quot;&quot;</span>
    logger.info(<span class="hljs-string">&quot;generating examples from = %s&quot;</span>, filepath)
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath) <span class="hljs-keyword">as</span> f:
        squad = json.load(f)
        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> squad[<span class="hljs-string">&quot;data&quot;</span>]:
            title = article.get(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).strip()
            <span class="hljs-keyword">for</span> paragraph <span class="hljs-keyword">in</span> article[<span class="hljs-string">&quot;paragraphs&quot;</span>]:
                context = paragraph[<span class="hljs-string">&quot;context&quot;</span>].strip()
                <span class="hljs-keyword">for</span> qa <span class="hljs-keyword">in</span> paragraph[<span class="hljs-string">&quot;qas&quot;</span>]:
                    question = qa[<span class="hljs-string">&quot;question&quot;</span>].strip()
                    id_ = qa[<span class="hljs-string">&quot;id&quot;</span>]

                    answer_starts = [answer[<span class="hljs-string">&quot;answer_start&quot;</span>] <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> qa[<span class="hljs-string">&quot;answers&quot;</span>]]
                    answers = [answer[<span class="hljs-string">&quot;text&quot;</span>].strip() <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> qa[<span class="hljs-string">&quot;answers&quot;</span>]]

                    <span class="hljs-comment"># Features currently used are &quot;context&quot;, &quot;question&quot;, and &quot;answers&quot;.</span>
                    <span class="hljs-comment"># Others are extracted here for the ease of future expansions.</span>
                    <span class="hljs-keyword">yield</span> id_, {
                        <span class="hljs-string">&quot;title&quot;</span>: title,
                        <span class="hljs-string">&quot;context&quot;</span>: context,
                        <span class="hljs-string">&quot;question&quot;</span>: question,
                        <span class="hljs-string">&quot;id&quot;</span>: id_,
                        <span class="hljs-string">&quot;answers&quot;</span>: {<span class="hljs-string">&quot;answer_start&quot;</span>: answer_starts, <span class="hljs-string">&quot;text&quot;</span>: answers,},
                    }`}}),Ft=new ct({}),zt=new k({props:{code:"datasets-cli test path/to/<your-dataset-loading-script> --save_infos --all_configs",highlighted:'datasets-cli test path/<span class="hljs-keyword">to</span>/&lt;your-dataset-loading-<span class="hljs-keyword">script</span>&gt; <span class="hljs-comment">--save_infos --all_configs</span>'}}),Ht=new ct({}),Mt=new k({props:{code:`from datasets import load_dataset
load_dataset("<username>/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>load_dataset(<span class="hljs-string">&quot;&lt;username&gt;/my_dataset&quot;</span>)`}}),{c(){h=s("meta"),$=d(),c=s("h1"),y=s("a"),N=s("span"),m(b.$$.fragment),I=d(),M=s("span"),Ys=n("Create a dataset loading script"),Ia=d(),Yt=s("p"),Xs=n("Write a dataset script to load and share your own datasets. It is a Python file that defines the different configurations and splits of your dataset, as well as how to download and process the data."),Sa=d(),Xt=s("p"),Ws=n("The script can download data files from any website, or from the same dataset repository."),Aa=d(),S=s("p"),Js=n("Any dataset script, for example "),ye=s("code"),Ks=n("my_dataset.py"),Zs=n(", can be placed in a folder or a repository named "),$e=s("code"),to=n("my_dataset"),eo=n(" and be loaded with:"),Da=d(),m(mt.$$.fragment),xa=d(),m(_t.$$.fragment),Ca=d(),Wt=s("p"),ao=n("The following guide includes instructions for dataset scripts for how to:"),La=d(),E=s("ul"),Ee=s("li"),so=n("Add dataset metadata."),oo=d(),be=s("li"),lo=n("Download data files."),ro=d(),je=s("li"),no=n("Generate samples."),io=d(),ke=s("li"),po=n("Generate dataset metadata."),uo=d(),Ie=s("li"),fo=n("Upload a dataset to the Hub."),Oa=d(),Q=s("p"),ho=n("Open the "),gt=s("a"),co=n("SQuAD dataset loading script"),mo=n(" template to follow along on how to share a dataset."),Ta=d(),m(Y.$$.fragment),Na=d(),P=s("h2"),X=s("a"),Se=s("span"),m(wt.$$.fragment),_o=d(),Ae=s("span"),go=n("Add dataset attributes"),Pa=d(),W=s("p"),wo=n("The first step is to add some information, or attributes, about your dataset in "),De=s("code"),vo=n("DatasetBuilder._info()"),qo=n(". The most important attributes you should specify are:"),Ga=d(),J=s("ol"),xe=s("li"),Jt=s("p"),Ce=s("code"),yo=n("DatasetInfo.description"),$o=n(" provides a concise description of your dataset. The description informs the user what\u2019s in the dataset, how it was collected, and how it can be used for a NLP task."),Eo=d(),Le=s("li"),K=s("p"),Oe=s("code"),bo=n("DatasetInfo.features"),jo=n(" defines the name and type of each column in your dataset. This will also provide the structure for each example, so it is possible to create nested subfields in a column if you want. Take a look at "),Kt=s("a"),ko=n("Features"),Io=n(" for a full list of feature types you can use."),Ua=d(),m(vt.$$.fragment),Ra=d(),G=s("ol"),Te=s("li"),Zt=s("p"),Ne=s("code"),So=n("DatasetInfo.homepage"),Ao=n(" contains the URL to the dataset homepage so users can find more details about the dataset."),Do=d(),Pe=s("li"),te=s("p"),Ge=s("code"),xo=n("DatasetInfo.citation"),Co=n(" contains a BibTeX citation for the dataset."),Ba=d(),ee=s("p"),Lo=n("After you\u2019ve filled out all these fields in the template, it should look like the following example from the SQuAD loading script:"),Va=d(),m(qt.$$.fragment),Fa=d(),U=s("h3"),Z=s("a"),Ue=s("span"),m(yt.$$.fragment),Oo=d(),Re=s("span"),To=n("Multiple configurations"),za=d(),A=s("p"),No=n("In some cases, your dataset may have multiple configurations. For example, the "),$t=s("a"),Po=n("SuperGLUE"),Go=n(" dataset is a collection of 5 datasets designed to evaluate language understanding tasks. \u{1F917} Datasets provides "),ae=s("a"),Uo=n("BuilderConfig"),Ro=n(" which allows you to create different configurations for the user to select from."),Ha=d(),tt=s("p"),Bo=n("Let\u2019s study the "),Et=s("a"),Vo=n("SuperGLUE loading script"),Fo=n(" to see how you can define several configurations."),Ma=d(),se=s("ol"),bt=s("li"),zo=n("Create a "),oe=s("a"),Ho=n("BuilderConfig"),Mo=n(" subclass with attributes about your dataset. These attributes can be the features of your dataset, label classes, and a URL to the data files."),Qa=d(),m(jt.$$.fragment),Ya=d(),kt=s("ol"),It=s("li"),Qo=n("Create instances of your config to specify the values of the attributes of each configuration. This gives you the flexibility to specify all the name and description of each configuration. These sub-class instances should be listed under "),Be=s("code"),Yo=n("DatasetBuilder.BUILDER_CONFIGS"),Xo=n(":"),Xa=d(),m(St.$$.fragment),Wa=d(),At=s("ol"),Dt=s("li"),Wo=n("Now, users can load a specific configuration of the dataset with the configuration "),Ve=s("code"),Jo=n("name"),Ko=n(":"),Ja=d(),m(xt.$$.fragment),Ka=d(),R=s("h3"),et=s("a"),Fe=s("span"),m(Ct.$$.fragment),Zo=d(),ze=s("span"),tl=n("Default configurations"),Za=d(),D=s("p"),el=n("Users must specify a configuration name when they load a dataset with multiple configurations. Otherwise, \u{1F917} Datasets will raise a "),He=s("code"),al=n("ValueError"),sl=n(", and prompt the user to select a configuration name. You can avoid this by setting a default dataset configuration with the "),Me=s("code"),ol=n("DEFAULT_CONFIG_NAME"),ll=n(" attribute:"),ts=d(),m(Lt.$$.fragment),es=d(),m(at.$$.fragment),as=d(),B=s("h2"),st=s("a"),Qe=s("span"),m(Ot.$$.fragment),rl=d(),Ye=s("span"),nl=n("Download data files and organize splits"),ss=d(),le=s("p"),il=n("After you\u2019ve defined the attributes of your dataset, the next step is to download the data files and organize them according to their splits."),os=d(),re=s("ol"),Xe=s("li"),pl=n("Create a dictionary of URLs in the loading script that point to the original SQuAD data files:"),ls=d(),m(Tt.$$.fragment),rs=d(),m(ot.$$.fragment),ns=d(),Nt=s("ol"),Pt=s("li"),lt=s("p"),ne=s("a"),dl=n("DownloadManager.download_and_extract()"),ul=n(" takes this dictionary and downloads the data files. Once the files are downloaded, use "),ie=s("a"),fl=n("SplitGenerator"),hl=n(" to organize each split in the dataset. This is a simple class that contains:"),cl=d(),Gt=s("ul"),We=s("li"),j=s("p"),ml=n("The "),Je=s("code"),_l=n("name"),gl=n(" of each split. You should use the standard split names: "),Ke=s("code"),wl=n("Split.TRAIN"),vl=n(", "),Ze=s("code"),ql=n("Split.TEST"),yl=n(", and "),ta=s("code"),$l=n("Split.VALIDATION"),El=n("."),bl=d(),ea=s("li"),pe=s("p"),aa=s("code"),jl=n("gen_kwargs"),kl=n(" provides the file paths to the data files to load for each split."),is=d(),rt=s("p"),Il=n("Your "),sa=s("code"),Sl=n("DatasetBuilder._split_generator()"),Al=n(" should look like this now:"),ps=d(),m(Ut.$$.fragment),ds=d(),V=s("h2"),nt=s("a"),oa=s("span"),m(Rt.$$.fragment),Dl=d(),la=s("span"),xl=n("Generate samples"),us=d(),de=s("p"),Cl=n("At this point, you have:"),fs=d(),x=s("ul"),ra=s("li"),Ll=n("Added the dataset attributes."),Ol=d(),na=s("li"),Tl=n("Provided instructions for how to download the data files."),Nl=d(),ia=s("li"),Pl=n("Organized the splits."),hs=d(),ue=s("p"),Gl=n("The next step is to actually generate the samples in each split."),cs=d(),it=s("ol"),pa=s("li"),pt=s("p"),da=s("code"),Ul=n("DatasetBuilder._generate_examples"),Rl=n(" takes the file path provided by "),ua=s("code"),Bl=n("gen_kwargs"),Vl=n(" to read and parse the data files. You need to write a function that loads the data files and extracts the columns."),Fl=d(),fa=s("li"),Bt=s("p"),zl=n("Your function should yield a tuple of an "),ha=s("code"),Hl=n("id_"),Ml=n(", and an example from the dataset."),ms=d(),m(Vt.$$.fragment),_s=d(),F=s("h2"),dt=s("a"),ca=s("span"),m(Ft.$$.fragment),Ql=d(),ma=s("span"),Yl=n("Generate dataset metadata"),gs=d(),C=s("p"),Xl=n("Adding dataset metadata is a great way to include information about your dataset. The metadata is stored in a "),_a=s("code"),Wl=n("dataset_infos.json"),Jl=n(" file. It includes information like data file checksums, the number of examples required to confirm the dataset was correctly generated, and information about the dataset like its "),ga=s("code"),Kl=n("features"),Zl=n("."),ws=d(),ut=s("p"),tr=n("Run the following command to generate your dataset metadata in "),wa=s("code"),er=n("dataset_infos.json"),ar=n(" and make sure your new dataset loading script works correctly:"),vs=d(),m(zt.$$.fragment),qs=d(),ft=s("p"),sr=n("If your dataset loading script passed the test, you should now have a "),va=s("code"),or=n("dataset_infos.json"),lr=n(" file in your dataset folder."),ys=d(),z=s("h2"),ht=s("a"),qa=s("span"),m(Ht.$$.fragment),rr=d(),ya=s("span"),nr=n("Upload to the Hub"),$s=d(),L=s("p"),ir=n("Once your script is ready, "),fe=s("a"),pr=n("create a dataset card"),dr=n(" and "),he=s("a"),ur=n("upload it to the Hub"),fr=n("."),Es=d(),ce=s("p"),hr=n("Congratulations, you can now load your dataset from the Hub! \u{1F973}"),bs=d(),m(Mt.$$.fragment),this.h()},l(t){const r=ei('[data-svelte="svelte-1phssyn"]',document.head);h=o(r,"META",{name:!0,content:!0}),r.forEach(e),$=u(t),c=o(t,"H1",{class:!0});var Qt=l(c);y=o(Qt,"A",{id:!0,class:!0,href:!0});var $a=l(y);N=o($a,"SPAN",{});var Ea=l(N);_(b.$$.fragment,Ea),Ea.forEach(e),$a.forEach(e),I=u(Qt),M=o(Qt,"SPAN",{});var vr=l(M);Ys=i(vr,"Create a dataset loading script"),vr.forEach(e),Qt.forEach(e),Ia=u(t),Yt=o(t,"P",{});var qr=l(Yt);Xs=i(qr,"Write a dataset script to load and share your own datasets. It is a Python file that defines the different configurations and splits of your dataset, as well as how to download and process the data."),qr.forEach(e),Sa=u(t),Xt=o(t,"P",{});var yr=l(Xt);Ws=i(yr,"The script can download data files from any website, or from the same dataset repository."),yr.forEach(e),Aa=u(t),S=o(t,"P",{});var me=l(S);Js=i(me,"Any dataset script, for example "),ye=o(me,"CODE",{});var $r=l(ye);Ks=i($r,"my_dataset.py"),$r.forEach(e),Zs=i(me,", can be placed in a folder or a repository named "),$e=o(me,"CODE",{});var Er=l($e);to=i(Er,"my_dataset"),Er.forEach(e),eo=i(me," and be loaded with:"),me.forEach(e),Da=u(t),_(mt.$$.fragment,t),xa=u(t),_(_t.$$.fragment,t),Ca=u(t),Wt=o(t,"P",{});var br=l(Wt);ao=i(br,"The following guide includes instructions for dataset scripts for how to:"),br.forEach(e),La=u(t),E=o(t,"UL",{});var O=l(E);Ee=o(O,"LI",{});var jr=l(Ee);so=i(jr,"Add dataset metadata."),jr.forEach(e),oo=u(O),be=o(O,"LI",{});var kr=l(be);lo=i(kr,"Download data files."),kr.forEach(e),ro=u(O),je=o(O,"LI",{});var Ir=l(je);no=i(Ir,"Generate samples."),Ir.forEach(e),io=u(O),ke=o(O,"LI",{});var Sr=l(ke);po=i(Sr,"Generate dataset metadata."),Sr.forEach(e),uo=u(O),Ie=o(O,"LI",{});var Ar=l(Ie);fo=i(Ar,"Upload a dataset to the Hub."),Ar.forEach(e),O.forEach(e),Oa=u(t),Q=o(t,"P",{});var ks=l(Q);ho=i(ks,"Open the "),gt=o(ks,"A",{href:!0,rel:!0});var Dr=l(gt);co=i(Dr,"SQuAD dataset loading script"),Dr.forEach(e),mo=i(ks," template to follow along on how to share a dataset."),ks.forEach(e),Ta=u(t),_(Y.$$.fragment,t),Na=u(t),P=o(t,"H2",{class:!0});var Is=l(P);X=o(Is,"A",{id:!0,class:!0,href:!0});var xr=l(X);Se=o(xr,"SPAN",{});var Cr=l(Se);_(wt.$$.fragment,Cr),Cr.forEach(e),xr.forEach(e),_o=u(Is),Ae=o(Is,"SPAN",{});var Lr=l(Ae);go=i(Lr,"Add dataset attributes"),Lr.forEach(e),Is.forEach(e),Pa=u(t),W=o(t,"P",{});var Ss=l(W);wo=i(Ss,"The first step is to add some information, or attributes, about your dataset in "),De=o(Ss,"CODE",{});var Or=l(De);vo=i(Or,"DatasetBuilder._info()"),Or.forEach(e),qo=i(Ss,". The most important attributes you should specify are:"),Ss.forEach(e),Ga=u(t),J=o(t,"OL",{});var As=l(J);xe=o(As,"LI",{});var Tr=l(xe);Jt=o(Tr,"P",{});var cr=l(Jt);Ce=o(cr,"CODE",{});var Nr=l(Ce);yo=i(Nr,"DatasetInfo.description"),Nr.forEach(e),$o=i(cr," provides a concise description of your dataset. The description informs the user what\u2019s in the dataset, how it was collected, and how it can be used for a NLP task."),cr.forEach(e),Tr.forEach(e),Eo=u(As),Le=o(As,"LI",{});var Pr=l(Le);K=o(Pr,"P",{});var ba=l(K);Oe=o(ba,"CODE",{});var Gr=l(Oe);bo=i(Gr,"DatasetInfo.features"),Gr.forEach(e),jo=i(ba," defines the name and type of each column in your dataset. This will also provide the structure for each example, so it is possible to create nested subfields in a column if you want. Take a look at "),Kt=o(ba,"A",{href:!0});var Ur=l(Kt);ko=i(Ur,"Features"),Ur.forEach(e),Io=i(ba," for a full list of feature types you can use."),ba.forEach(e),Pr.forEach(e),As.forEach(e),Ua=u(t),_(vt.$$.fragment,t),Ra=u(t),G=o(t,"OL",{start:!0});var Ds=l(G);Te=o(Ds,"LI",{});var Rr=l(Te);Zt=o(Rr,"P",{});var mr=l(Zt);Ne=o(mr,"CODE",{});var Br=l(Ne);So=i(Br,"DatasetInfo.homepage"),Br.forEach(e),Ao=i(mr," contains the URL to the dataset homepage so users can find more details about the dataset."),mr.forEach(e),Rr.forEach(e),Do=u(Ds),Pe=o(Ds,"LI",{});var Vr=l(Pe);te=o(Vr,"P",{});var _r=l(te);Ge=o(_r,"CODE",{});var Fr=l(Ge);xo=i(Fr,"DatasetInfo.citation"),Fr.forEach(e),Co=i(_r," contains a BibTeX citation for the dataset."),_r.forEach(e),Vr.forEach(e),Ds.forEach(e),Ba=u(t),ee=o(t,"P",{});var zr=l(ee);Lo=i(zr,"After you\u2019ve filled out all these fields in the template, it should look like the following example from the SQuAD loading script:"),zr.forEach(e),Va=u(t),_(qt.$$.fragment,t),Fa=u(t),U=o(t,"H3",{class:!0});var xs=l(U);Z=o(xs,"A",{id:!0,class:!0,href:!0});var Hr=l(Z);Ue=o(Hr,"SPAN",{});var Mr=l(Ue);_(yt.$$.fragment,Mr),Mr.forEach(e),Hr.forEach(e),Oo=u(xs),Re=o(xs,"SPAN",{});var Qr=l(Re);To=i(Qr,"Multiple configurations"),Qr.forEach(e),xs.forEach(e),za=u(t),A=o(t,"P",{});var _e=l(A);No=i(_e,"In some cases, your dataset may have multiple configurations. For example, the "),$t=o(_e,"A",{href:!0,rel:!0});var Yr=l($t);Po=i(Yr,"SuperGLUE"),Yr.forEach(e),Go=i(_e," dataset is a collection of 5 datasets designed to evaluate language understanding tasks. \u{1F917} Datasets provides "),ae=o(_e,"A",{href:!0});var Xr=l(ae);Uo=i(Xr,"BuilderConfig"),Xr.forEach(e),Ro=i(_e," which allows you to create different configurations for the user to select from."),_e.forEach(e),Ha=u(t),tt=o(t,"P",{});var Cs=l(tt);Bo=i(Cs,"Let\u2019s study the "),Et=o(Cs,"A",{href:!0,rel:!0});var Wr=l(Et);Vo=i(Wr,"SuperGLUE loading script"),Wr.forEach(e),Fo=i(Cs," to see how you can define several configurations."),Cs.forEach(e),Ma=u(t),se=o(t,"OL",{});var Jr=l(se);bt=o(Jr,"LI",{});var Ls=l(bt);zo=i(Ls,"Create a "),oe=o(Ls,"A",{href:!0});var Kr=l(oe);Ho=i(Kr,"BuilderConfig"),Kr.forEach(e),Mo=i(Ls," subclass with attributes about your dataset. These attributes can be the features of your dataset, label classes, and a URL to the data files."),Ls.forEach(e),Jr.forEach(e),Qa=u(t),_(jt.$$.fragment,t),Ya=u(t),kt=o(t,"OL",{start:!0});var Zr=l(kt);It=o(Zr,"LI",{});var Os=l(It);Qo=i(Os,"Create instances of your config to specify the values of the attributes of each configuration. This gives you the flexibility to specify all the name and description of each configuration. These sub-class instances should be listed under "),Be=o(Os,"CODE",{});var tn=l(Be);Yo=i(tn,"DatasetBuilder.BUILDER_CONFIGS"),tn.forEach(e),Xo=i(Os,":"),Os.forEach(e),Zr.forEach(e),Xa=u(t),_(St.$$.fragment,t),Wa=u(t),At=o(t,"OL",{start:!0});var en=l(At);Dt=o(en,"LI",{});var Ts=l(Dt);Wo=i(Ts,"Now, users can load a specific configuration of the dataset with the configuration "),Ve=o(Ts,"CODE",{});var an=l(Ve);Jo=i(an,"name"),an.forEach(e),Ko=i(Ts,":"),Ts.forEach(e),en.forEach(e),Ja=u(t),_(xt.$$.fragment,t),Ka=u(t),R=o(t,"H3",{class:!0});var Ns=l(R);et=o(Ns,"A",{id:!0,class:!0,href:!0});var sn=l(et);Fe=o(sn,"SPAN",{});var on=l(Fe);_(Ct.$$.fragment,on),on.forEach(e),sn.forEach(e),Zo=u(Ns),ze=o(Ns,"SPAN",{});var ln=l(ze);tl=i(ln,"Default configurations"),ln.forEach(e),Ns.forEach(e),Za=u(t),D=o(t,"P",{});var ge=l(D);el=i(ge,"Users must specify a configuration name when they load a dataset with multiple configurations. Otherwise, \u{1F917} Datasets will raise a "),He=o(ge,"CODE",{});var rn=l(He);al=i(rn,"ValueError"),rn.forEach(e),sl=i(ge,", and prompt the user to select a configuration name. You can avoid this by setting a default dataset configuration with the "),Me=o(ge,"CODE",{});var nn=l(Me);ol=i(nn,"DEFAULT_CONFIG_NAME"),nn.forEach(e),ll=i(ge," attribute:"),ge.forEach(e),ts=u(t),_(Lt.$$.fragment,t),es=u(t),_(at.$$.fragment,t),as=u(t),B=o(t,"H2",{class:!0});var Ps=l(B);st=o(Ps,"A",{id:!0,class:!0,href:!0});var pn=l(st);Qe=o(pn,"SPAN",{});var dn=l(Qe);_(Ot.$$.fragment,dn),dn.forEach(e),pn.forEach(e),rl=u(Ps),Ye=o(Ps,"SPAN",{});var un=l(Ye);nl=i(un,"Download data files and organize splits"),un.forEach(e),Ps.forEach(e),ss=u(t),le=o(t,"P",{});var fn=l(le);il=i(fn,"After you\u2019ve defined the attributes of your dataset, the next step is to download the data files and organize them according to their splits."),fn.forEach(e),os=u(t),re=o(t,"OL",{});var hn=l(re);Xe=o(hn,"LI",{});var cn=l(Xe);pl=i(cn,"Create a dictionary of URLs in the loading script that point to the original SQuAD data files:"),cn.forEach(e),hn.forEach(e),ls=u(t),_(Tt.$$.fragment,t),rs=u(t),_(ot.$$.fragment,t),ns=u(t),Nt=o(t,"OL",{start:!0});var mn=l(Nt);Pt=o(mn,"LI",{});var Gs=l(Pt);lt=o(Gs,"P",{});var ja=l(lt);ne=o(ja,"A",{href:!0});var _n=l(ne);dl=i(_n,"DownloadManager.download_and_extract()"),_n.forEach(e),ul=i(ja," takes this dictionary and downloads the data files. Once the files are downloaded, use "),ie=o(ja,"A",{href:!0});var gn=l(ie);fl=i(gn,"SplitGenerator"),gn.forEach(e),hl=i(ja," to organize each split in the dataset. This is a simple class that contains:"),ja.forEach(e),cl=u(Gs),Gt=o(Gs,"UL",{});var Us=l(Gt);We=o(Us,"LI",{});var wn=l(We);j=o(wn,"P",{});var T=l(j);ml=i(T,"The "),Je=o(T,"CODE",{});var vn=l(Je);_l=i(vn,"name"),vn.forEach(e),gl=i(T," of each split. You should use the standard split names: "),Ke=o(T,"CODE",{});var qn=l(Ke);wl=i(qn,"Split.TRAIN"),qn.forEach(e),vl=i(T,", "),Ze=o(T,"CODE",{});var yn=l(Ze);ql=i(yn,"Split.TEST"),yn.forEach(e),yl=i(T,", and "),ta=o(T,"CODE",{});var $n=l(ta);$l=i($n,"Split.VALIDATION"),$n.forEach(e),El=i(T,"."),T.forEach(e),wn.forEach(e),bl=u(Us),ea=o(Us,"LI",{});var En=l(ea);pe=o(En,"P",{});var gr=l(pe);aa=o(gr,"CODE",{});var bn=l(aa);jl=i(bn,"gen_kwargs"),bn.forEach(e),kl=i(gr," provides the file paths to the data files to load for each split."),gr.forEach(e),En.forEach(e),Us.forEach(e),Gs.forEach(e),mn.forEach(e),is=u(t),rt=o(t,"P",{});var Rs=l(rt);Il=i(Rs,"Your "),sa=o(Rs,"CODE",{});var jn=l(sa);Sl=i(jn,"DatasetBuilder._split_generator()"),jn.forEach(e),Al=i(Rs," should look like this now:"),Rs.forEach(e),ps=u(t),_(Ut.$$.fragment,t),ds=u(t),V=o(t,"H2",{class:!0});var Bs=l(V);nt=o(Bs,"A",{id:!0,class:!0,href:!0});var kn=l(nt);oa=o(kn,"SPAN",{});var In=l(oa);_(Rt.$$.fragment,In),In.forEach(e),kn.forEach(e),Dl=u(Bs),la=o(Bs,"SPAN",{});var Sn=l(la);xl=i(Sn,"Generate samples"),Sn.forEach(e),Bs.forEach(e),us=u(t),de=o(t,"P",{});var An=l(de);Cl=i(An,"At this point, you have:"),An.forEach(e),fs=u(t),x=o(t,"UL",{});var we=l(x);ra=o(we,"LI",{});var Dn=l(ra);Ll=i(Dn,"Added the dataset attributes."),Dn.forEach(e),Ol=u(we),na=o(we,"LI",{});var xn=l(na);Tl=i(xn,"Provided instructions for how to download the data files."),xn.forEach(e),Nl=u(we),ia=o(we,"LI",{});var Cn=l(ia);Pl=i(Cn,"Organized the splits."),Cn.forEach(e),we.forEach(e),hs=u(t),ue=o(t,"P",{});var Ln=l(ue);Gl=i(Ln,"The next step is to actually generate the samples in each split."),Ln.forEach(e),cs=u(t),it=o(t,"OL",{});var Vs=l(it);pa=o(Vs,"LI",{});var On=l(pa);pt=o(On,"P",{});var ka=l(pt);da=o(ka,"CODE",{});var Tn=l(da);Ul=i(Tn,"DatasetBuilder._generate_examples"),Tn.forEach(e),Rl=i(ka," takes the file path provided by "),ua=o(ka,"CODE",{});var Nn=l(ua);Bl=i(Nn,"gen_kwargs"),Nn.forEach(e),Vl=i(ka," to read and parse the data files. You need to write a function that loads the data files and extracts the columns."),ka.forEach(e),On.forEach(e),Fl=u(Vs),fa=o(Vs,"LI",{});var Pn=l(fa);Bt=o(Pn,"P",{});var Fs=l(Bt);zl=i(Fs,"Your function should yield a tuple of an "),ha=o(Fs,"CODE",{});var Gn=l(ha);Hl=i(Gn,"id_"),Gn.forEach(e),Ml=i(Fs,", and an example from the dataset."),Fs.forEach(e),Pn.forEach(e),Vs.forEach(e),ms=u(t),_(Vt.$$.fragment,t),_s=u(t),F=o(t,"H2",{class:!0});var zs=l(F);dt=o(zs,"A",{id:!0,class:!0,href:!0});var Un=l(dt);ca=o(Un,"SPAN",{});var Rn=l(ca);_(Ft.$$.fragment,Rn),Rn.forEach(e),Un.forEach(e),Ql=u(zs),ma=o(zs,"SPAN",{});var Bn=l(ma);Yl=i(Bn,"Generate dataset metadata"),Bn.forEach(e),zs.forEach(e),gs=u(t),C=o(t,"P",{});var ve=l(C);Xl=i(ve,"Adding dataset metadata is a great way to include information about your dataset. The metadata is stored in a "),_a=o(ve,"CODE",{});var Vn=l(_a);Wl=i(Vn,"dataset_infos.json"),Vn.forEach(e),Jl=i(ve," file. It includes information like data file checksums, the number of examples required to confirm the dataset was correctly generated, and information about the dataset like its "),ga=o(ve,"CODE",{});var Fn=l(ga);Kl=i(Fn,"features"),Fn.forEach(e),Zl=i(ve,"."),ve.forEach(e),ws=u(t),ut=o(t,"P",{});var Hs=l(ut);tr=i(Hs,"Run the following command to generate your dataset metadata in "),wa=o(Hs,"CODE",{});var zn=l(wa);er=i(zn,"dataset_infos.json"),zn.forEach(e),ar=i(Hs," and make sure your new dataset loading script works correctly:"),Hs.forEach(e),vs=u(t),_(zt.$$.fragment,t),qs=u(t),ft=o(t,"P",{});var Ms=l(ft);sr=i(Ms,"If your dataset loading script passed the test, you should now have a "),va=o(Ms,"CODE",{});var Hn=l(va);or=i(Hn,"dataset_infos.json"),Hn.forEach(e),lr=i(Ms," file in your dataset folder."),Ms.forEach(e),ys=u(t),z=o(t,"H2",{class:!0});var Qs=l(z);ht=o(Qs,"A",{id:!0,class:!0,href:!0});var Mn=l(ht);qa=o(Mn,"SPAN",{});var Qn=l(qa);_(Ht.$$.fragment,Qn),Qn.forEach(e),Mn.forEach(e),rr=u(Qs),ya=o(Qs,"SPAN",{});var Yn=l(ya);nr=i(Yn,"Upload to the Hub"),Yn.forEach(e),Qs.forEach(e),$s=u(t),L=o(t,"P",{});var qe=l(L);ir=i(qe,"Once your script is ready, "),fe=o(qe,"A",{href:!0});var Xn=l(fe);pr=i(Xn,"create a dataset card"),Xn.forEach(e),dr=i(qe," and "),he=o(qe,"A",{href:!0});var Wn=l(he);ur=i(Wn,"upload it to the Hub"),Wn.forEach(e),fr=i(qe,"."),qe.forEach(e),Es=u(t),ce=o(t,"P",{});var Jn=l(ce);hr=i(Jn,"Congratulations, you can now load your dataset from the Hub! \u{1F973}"),Jn.forEach(e),bs=u(t),_(Mt.$$.fragment,t),this.h()},h(){f(h,"name","hf:doc:metadata"),f(h,"content",JSON.stringify(ni)),f(y,"id","create-a-dataset-loading-script"),f(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(y,"href","#create-a-dataset-loading-script"),f(c,"class","relative group"),f(gt,"href","https://huggingface.co/datasets/squad/blob/main/squad.py"),f(gt,"rel","nofollow"),f(X,"id","add-dataset-attributes"),f(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(X,"href","#add-dataset-attributes"),f(P,"class","relative group"),f(Kt,"href","/docs/datasets/pr_4844/en/package_reference/main_classes#datasets.Features"),f(G,"start","3"),f(Z,"id","multiple-configurations"),f(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Z,"href","#multiple-configurations"),f(U,"class","relative group"),f($t,"href","https://huggingface.co/datasets/super_glue"),f($t,"rel","nofollow"),f(ae,"href","/docs/datasets/pr_4844/en/package_reference/builder_classes#datasets.BuilderConfig"),f(Et,"href","https://github.com/huggingface/datasets/blob/main/datasets/super_glue/super_glue.py"),f(Et,"rel","nofollow"),f(oe,"href","/docs/datasets/pr_4844/en/package_reference/builder_classes#datasets.BuilderConfig"),f(kt,"start","2"),f(At,"start","3"),f(et,"id","default-configurations"),f(et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(et,"href","#default-configurations"),f(R,"class","relative group"),f(st,"id","download-data-files-and-organize-splits"),f(st,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(st,"href","#download-data-files-and-organize-splits"),f(B,"class","relative group"),f(ne,"href","/docs/datasets/pr_4844/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract"),f(ie,"href","/docs/datasets/pr_4844/en/package_reference/builder_classes#datasets.SplitGenerator"),f(Nt,"start","2"),f(nt,"id","generate-samples"),f(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(nt,"href","#generate-samples"),f(V,"class","relative group"),f(dt,"id","generate-dataset-metadata"),f(dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(dt,"href","#generate-dataset-metadata"),f(F,"class","relative group"),f(ht,"id","upload-to-the-hub"),f(ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ht,"href","#upload-to-the-hub"),f(z,"class","relative group"),f(fe,"href","dataset_card"),f(he,"href","share")},m(t,r){a(document.head,h),p(t,$,r),p(t,c,r),a(c,y),a(y,N),g(b,N,null),a(c,I),a(c,M),a(M,Ys),p(t,Ia,r),p(t,Yt,r),a(Yt,Xs),p(t,Sa,r),p(t,Xt,r),a(Xt,Ws),p(t,Aa,r),p(t,S,r),a(S,Js),a(S,ye),a(ye,Ks),a(S,Zs),a(S,$e),a($e,to),a(S,eo),p(t,Da,r),g(mt,t,r),p(t,xa,r),g(_t,t,r),p(t,Ca,r),p(t,Wt,r),a(Wt,ao),p(t,La,r),p(t,E,r),a(E,Ee),a(Ee,so),a(E,oo),a(E,be),a(be,lo),a(E,ro),a(E,je),a(je,no),a(E,io),a(E,ke),a(ke,po),a(E,uo),a(E,Ie),a(Ie,fo),p(t,Oa,r),p(t,Q,r),a(Q,ho),a(Q,gt),a(gt,co),a(Q,mo),p(t,Ta,r),g(Y,t,r),p(t,Na,r),p(t,P,r),a(P,X),a(X,Se),g(wt,Se,null),a(P,_o),a(P,Ae),a(Ae,go),p(t,Pa,r),p(t,W,r),a(W,wo),a(W,De),a(De,vo),a(W,qo),p(t,Ga,r),p(t,J,r),a(J,xe),a(xe,Jt),a(Jt,Ce),a(Ce,yo),a(Jt,$o),a(J,Eo),a(J,Le),a(Le,K),a(K,Oe),a(Oe,bo),a(K,jo),a(K,Kt),a(Kt,ko),a(K,Io),p(t,Ua,r),g(vt,t,r),p(t,Ra,r),p(t,G,r),a(G,Te),a(Te,Zt),a(Zt,Ne),a(Ne,So),a(Zt,Ao),a(G,Do),a(G,Pe),a(Pe,te),a(te,Ge),a(Ge,xo),a(te,Co),p(t,Ba,r),p(t,ee,r),a(ee,Lo),p(t,Va,r),g(qt,t,r),p(t,Fa,r),p(t,U,r),a(U,Z),a(Z,Ue),g(yt,Ue,null),a(U,Oo),a(U,Re),a(Re,To),p(t,za,r),p(t,A,r),a(A,No),a(A,$t),a($t,Po),a(A,Go),a(A,ae),a(ae,Uo),a(A,Ro),p(t,Ha,r),p(t,tt,r),a(tt,Bo),a(tt,Et),a(Et,Vo),a(tt,Fo),p(t,Ma,r),p(t,se,r),a(se,bt),a(bt,zo),a(bt,oe),a(oe,Ho),a(bt,Mo),p(t,Qa,r),g(jt,t,r),p(t,Ya,r),p(t,kt,r),a(kt,It),a(It,Qo),a(It,Be),a(Be,Yo),a(It,Xo),p(t,Xa,r),g(St,t,r),p(t,Wa,r),p(t,At,r),a(At,Dt),a(Dt,Wo),a(Dt,Ve),a(Ve,Jo),a(Dt,Ko),p(t,Ja,r),g(xt,t,r),p(t,Ka,r),p(t,R,r),a(R,et),a(et,Fe),g(Ct,Fe,null),a(R,Zo),a(R,ze),a(ze,tl),p(t,Za,r),p(t,D,r),a(D,el),a(D,He),a(He,al),a(D,sl),a(D,Me),a(Me,ol),a(D,ll),p(t,ts,r),g(Lt,t,r),p(t,es,r),g(at,t,r),p(t,as,r),p(t,B,r),a(B,st),a(st,Qe),g(Ot,Qe,null),a(B,rl),a(B,Ye),a(Ye,nl),p(t,ss,r),p(t,le,r),a(le,il),p(t,os,r),p(t,re,r),a(re,Xe),a(Xe,pl),p(t,ls,r),g(Tt,t,r),p(t,rs,r),g(ot,t,r),p(t,ns,r),p(t,Nt,r),a(Nt,Pt),a(Pt,lt),a(lt,ne),a(ne,dl),a(lt,ul),a(lt,ie),a(ie,fl),a(lt,hl),a(Pt,cl),a(Pt,Gt),a(Gt,We),a(We,j),a(j,ml),a(j,Je),a(Je,_l),a(j,gl),a(j,Ke),a(Ke,wl),a(j,vl),a(j,Ze),a(Ze,ql),a(j,yl),a(j,ta),a(ta,$l),a(j,El),a(Gt,bl),a(Gt,ea),a(ea,pe),a(pe,aa),a(aa,jl),a(pe,kl),p(t,is,r),p(t,rt,r),a(rt,Il),a(rt,sa),a(sa,Sl),a(rt,Al),p(t,ps,r),g(Ut,t,r),p(t,ds,r),p(t,V,r),a(V,nt),a(nt,oa),g(Rt,oa,null),a(V,Dl),a(V,la),a(la,xl),p(t,us,r),p(t,de,r),a(de,Cl),p(t,fs,r),p(t,x,r),a(x,ra),a(ra,Ll),a(x,Ol),a(x,na),a(na,Tl),a(x,Nl),a(x,ia),a(ia,Pl),p(t,hs,r),p(t,ue,r),a(ue,Gl),p(t,cs,r),p(t,it,r),a(it,pa),a(pa,pt),a(pt,da),a(da,Ul),a(pt,Rl),a(pt,ua),a(ua,Bl),a(pt,Vl),a(it,Fl),a(it,fa),a(fa,Bt),a(Bt,zl),a(Bt,ha),a(ha,Hl),a(Bt,Ml),p(t,ms,r),g(Vt,t,r),p(t,_s,r),p(t,F,r),a(F,dt),a(dt,ca),g(Ft,ca,null),a(F,Ql),a(F,ma),a(ma,Yl),p(t,gs,r),p(t,C,r),a(C,Xl),a(C,_a),a(_a,Wl),a(C,Jl),a(C,ga),a(ga,Kl),a(C,Zl),p(t,ws,r),p(t,ut,r),a(ut,tr),a(ut,wa),a(wa,er),a(ut,ar),p(t,vs,r),g(zt,t,r),p(t,qs,r),p(t,ft,r),a(ft,sr),a(ft,va),a(va,or),a(ft,lr),p(t,ys,r),p(t,z,r),a(z,ht),a(ht,qa),g(Ht,qa,null),a(z,rr),a(z,ya),a(ya,nr),p(t,$s,r),p(t,L,r),a(L,ir),a(L,fe),a(fe,pr),a(L,dr),a(L,he),a(he,ur),a(L,fr),p(t,Es,r),p(t,ce,r),a(ce,hr),p(t,bs,r),g(Mt,t,r),js=!0},p(t,[r]){const Qt={};r&2&&(Qt.$$scope={dirty:r,ctx:t}),Y.$set(Qt);const $a={};r&2&&($a.$$scope={dirty:r,ctx:t}),at.$set($a);const Ea={};r&2&&(Ea.$$scope={dirty:r,ctx:t}),ot.$set(Ea)},i(t){js||(w(b.$$.fragment,t),w(mt.$$.fragment,t),w(_t.$$.fragment,t),w(Y.$$.fragment,t),w(wt.$$.fragment,t),w(vt.$$.fragment,t),w(qt.$$.fragment,t),w(yt.$$.fragment,t),w(jt.$$.fragment,t),w(St.$$.fragment,t),w(xt.$$.fragment,t),w(Ct.$$.fragment,t),w(Lt.$$.fragment,t),w(at.$$.fragment,t),w(Ot.$$.fragment,t),w(Tt.$$.fragment,t),w(ot.$$.fragment,t),w(Ut.$$.fragment,t),w(Rt.$$.fragment,t),w(Vt.$$.fragment,t),w(Ft.$$.fragment,t),w(zt.$$.fragment,t),w(Ht.$$.fragment,t),w(Mt.$$.fragment,t),js=!0)},o(t){v(b.$$.fragment,t),v(mt.$$.fragment,t),v(_t.$$.fragment,t),v(Y.$$.fragment,t),v(wt.$$.fragment,t),v(vt.$$.fragment,t),v(qt.$$.fragment,t),v(yt.$$.fragment,t),v(jt.$$.fragment,t),v(St.$$.fragment,t),v(xt.$$.fragment,t),v(Ct.$$.fragment,t),v(Lt.$$.fragment,t),v(at.$$.fragment,t),v(Ot.$$.fragment,t),v(Tt.$$.fragment,t),v(ot.$$.fragment,t),v(Ut.$$.fragment,t),v(Rt.$$.fragment,t),v(Vt.$$.fragment,t),v(Ft.$$.fragment,t),v(zt.$$.fragment,t),v(Ht.$$.fragment,t),v(Mt.$$.fragment,t),js=!1},d(t){e(h),t&&e($),t&&e(c),q(b),t&&e(Ia),t&&e(Yt),t&&e(Sa),t&&e(Xt),t&&e(Aa),t&&e(S),t&&e(Da),q(mt,t),t&&e(xa),q(_t,t),t&&e(Ca),t&&e(Wt),t&&e(La),t&&e(E),t&&e(Oa),t&&e(Q),t&&e(Ta),q(Y,t),t&&e(Na),t&&e(P),q(wt),t&&e(Pa),t&&e(W),t&&e(Ga),t&&e(J),t&&e(Ua),q(vt,t),t&&e(Ra),t&&e(G),t&&e(Ba),t&&e(ee),t&&e(Va),q(qt,t),t&&e(Fa),t&&e(U),q(yt),t&&e(za),t&&e(A),t&&e(Ha),t&&e(tt),t&&e(Ma),t&&e(se),t&&e(Qa),q(jt,t),t&&e(Ya),t&&e(kt),t&&e(Xa),q(St,t),t&&e(Wa),t&&e(At),t&&e(Ja),q(xt,t),t&&e(Ka),t&&e(R),q(Ct),t&&e(Za),t&&e(D),t&&e(ts),q(Lt,t),t&&e(es),q(at,t),t&&e(as),t&&e(B),q(Ot),t&&e(ss),t&&e(le),t&&e(os),t&&e(re),t&&e(ls),q(Tt,t),t&&e(rs),q(ot,t),t&&e(ns),t&&e(Nt),t&&e(is),t&&e(rt),t&&e(ps),q(Ut,t),t&&e(ds),t&&e(V),q(Rt),t&&e(us),t&&e(de),t&&e(fs),t&&e(x),t&&e(hs),t&&e(ue),t&&e(cs),t&&e(it),t&&e(ms),q(Vt,t),t&&e(_s),t&&e(F),q(Ft),t&&e(gs),t&&e(C),t&&e(ws),t&&e(ut),t&&e(vs),q(zt,t),t&&e(qs),t&&e(ft),t&&e(ys),t&&e(z),q(Ht),t&&e($s),t&&e(L),t&&e(Es),t&&e(ce),t&&e(bs),q(Mt,t)}}}const ni={local:"create-a-dataset-loading-script",sections:[{local:"add-dataset-attributes",sections:[{local:"multiple-configurations",title:"Multiple configurations"},{local:"default-configurations",title:"Default configurations"}],title:"Add dataset attributes"},{local:"download-data-files-and-organize-splits",title:"Download data files and organize splits"},{local:"generate-samples",title:"Generate samples"},{local:"generate-dataset-metadata",title:"Generate dataset metadata"},{local:"upload-to-the-hub",title:"Upload to the Hub"}],title:"Create a dataset loading script"};function ii(H){return ai(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class hi extends Kn{constructor(h){super();Zn(this,h,ii,ri,ti,{})}}export{hi as default,ni as metadata};
