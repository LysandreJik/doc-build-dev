import{S as po,i as co,s as uo,e as o,k as p,w as j,t as s,M as fo,c as n,d as t,m as c,a as i,x as $,h as l,b as f,G as e,g as d,y as v,q as y,o as b,B as k,v as ho}from"../chunks/vendor-hf-doc-builder.js";import{T as cl}from"../chunks/Tip-hf-doc-builder.js";import{I as Ra}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as J}from"../chunks/CodeBlock-hf-doc-builder.js";function mo(K){let u,A,m,w,E,_,z,x;return{c(){u=o("p"),A=s("To work with audio datasets, you need to have the "),m=o("code"),w=s("audio"),E=s(" dependency installed. Check out the "),_=o("a"),z=s("installation"),x=s(" guide to learn how to install it."),this.h()},l(g){u=n(g,"P",{});var h=i(u);A=l(h,"To work with audio datasets, you need to have the "),m=n(h,"CODE",{});var q=i(m);w=l(q,"audio"),q.forEach(t),E=l(h," dependency installed. Check out the "),_=n(h,"A",{href:!0});var O=i(_);z=l(O,"installation"),O.forEach(t),x=l(h," guide to learn how to install it."),h.forEach(t),this.h()},h(){f(_,"href","./installation#audio")},m(g,h){d(g,u,h),e(u,A),e(u,m),e(m,w),e(u,E),e(u,_),e(_,z),e(u,x)},d(g){g&&t(u)}}}function _o(K){let u,A,m,w,E,_,z,x;return{c(){u=o("p"),A=s("Index into an audio dataset using the row index first and then the "),m=o("code"),w=s("audio"),E=s(" column - "),_=o("code"),z=s('dataset[0]["audio"]'),x=s(" - to avoid decoding and resampling all the audio files in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset.")},l(g){u=n(g,"P",{});var h=i(u);A=l(h,"Index into an audio dataset using the row index first and then the "),m=n(h,"CODE",{});var q=i(m);w=l(q,"audio"),q.forEach(t),E=l(h," column - "),_=n(h,"CODE",{});var O=i(_);z=l(O,'dataset[0]["audio"]'),O.forEach(t),x=l(h," - to avoid decoding and resampling all the audio files in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset."),h.forEach(t)},m(g,h){d(g,u,h),e(u,A),e(u,m),e(m,w),e(u,E),e(u,_),e(_,z),e(u,x)},d(g){g&&t(u)}}}function go(K){let u,A,m,w,E,_,z,x;return{c(){u=o("p"),A=s("Alternatively, you can add "),m=o("code"),w=s("label"),E=s(" column to your "),_=o("code"),z=s("metadata.jsonl"),x=s(" file.")},l(g){u=n(g,"P",{});var h=i(u);A=l(h,"Alternatively, you can add "),m=n(h,"CODE",{});var q=i(m);w=l(q,"label"),q.forEach(t),E=l(h," column to your "),_=n(h,"CODE",{});var O=i(_);z=l(O,"metadata.jsonl"),O.forEach(t),x=l(h," file."),h.forEach(t)},m(g,h){d(g,u,h),e(u,A),e(u,m),e(m,w),e(u,E),e(u,_),e(_,z),e(u,x)},d(g){g&&t(u)}}}function wo(K){let u,A,m,w,E,_,z,x,g,h,q,O,Ba,yt,bt,Oe,S,za,Wa,kt,Et,xt,Ca,Ga,qt,At,zt,Oa,Ka,Ct,Ot,Pe,Q,De,L,Pt,Qa,Dt,Ft,Pa,It,St,Fe,ca,Ie,V,Se,X,Lt,ua,Nt,Tt,Le,M,Z,Va,fa,Ut,Xa,Yt,Ne,C,Ht,Za,Jt,Mt,Da,Rt,Bt,ae,Wt,Gt,Fa,Kt,Qt,Te,ha,Ue,P,Vt,ee,Xt,Zt,te,as,es,Ia,ts,ss,Ye,ma,He,R,aa,se,_a,ls,le,os,Je,ea,ns,oe,is,rs,Me,B,ta,ne,ga,ds,ie,ps,Re,sa,cs,re,us,fs,Be,wa,We,D,hs,de,ms,_s,pe,gs,ws,ce,js,$s,Ge,ja,Ke,N,vs,ue,ys,bs,fe,ks,Es,Qe,$a,Ve,I,he,xs,qs,me,As,zs,_e,Cs,Os,Xe,va,Ze,la,Ps,ge,Ds,Fs,at,ya,et,W,oa,we,ba,Is,je,Ss,tt,F,Ls,$e,Ns,Ts,ve,Us,Ys,Sa,Hs,Js,st,G,na,ye,ka,Ms,be,Rs,lt,La,Bs,ot,Ea,nt,T,Ws,ke,Gs,Ks,Ee,Qs,Vs,it,xa,rt,U,Xs,xe,Zs,al,Na,el,tl,dt,ia,pt,Y,sl,qe,ll,ol,Ae,nl,il,ct;return _=new Ra({}),Q=new cl({props:{$$slots:{default:[mo]},$$scope:{ctx:K}}}),ca=new J({props:{code:`from datasets import load_dataset, Audio

dataset = load_dataset("PolyAI/minds14", "en-US", split="train")
dataset[0]["audio"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, <span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([ <span class="hljs-number">0.</span>        ,  <span class="hljs-number">0.00024414</span>, -<span class="hljs-number">0.00024414</span>, ..., -<span class="hljs-number">0.00024414</span>,
         <span class="hljs-number">0.</span>        ,  <span class="hljs-number">0.</span>        ], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/f14948e0e84be638dd7943ac36518a4cf3324e8b7aa331c5ab11541518e9368c/en-US~JOINT_ACCOUNT/602ba55abb1e6d0fbce92065.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">8000</span>}`}}),V=new cl({props:{warning:!0,$$slots:{default:[_o]},$$scope:{ctx:K}}}),fa=new Ra({}),ha=new J({props:{code:'audio_dataset = Dataset.from_dict({"audio": ["path/to/audio_1", "path/to/audio_2", ..., "path/to/audio_n"]}).cast_column("audio", Audio())',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>audio_dataset = Dataset.from_dict({<span class="hljs-string">&quot;audio&quot;</span>: [<span class="hljs-string">&quot;path/to/audio_1&quot;</span>, <span class="hljs-string">&quot;path/to/audio_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/audio_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio())'}}),ma=new J({props:{code:`dataset = load_dataset("PolyAI/minds14", "en-US", split="train").cast_column("audio", Audio(decode=False))
dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, <span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>).cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(decode=<span class="hljs-literal">False</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;audio&#x27;</span>: {<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
  <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/f14948e0e84be638dd7943ac36518a4cf3324e8b7aa331c5ab11541518e9368c/en-US~JOINT_ACCOUNT/602ba55abb1e6d0fbce92065.wav&#x27;</span>},
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: <span class="hljs-string">&#x27;I would like to set up a joint account with my partner&#x27;</span>,
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: <span class="hljs-number">11</span>,
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: <span class="hljs-number">4</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/f14948e0e84be638dd7943ac36518a4cf3324e8b7aa331c5ab11541518e9368c/en-US~JOINT_ACCOUNT/602ba55abb1e6d0fbce92065.wav&#x27;</span>,
 <span class="hljs-string">&#x27;transcription&#x27;</span>: <span class="hljs-string">&#x27;I would like to set up a joint account with my partner&#x27;</span>}`}}),_a=new Ra({}),ga=new Ra({}),wa=new J({props:{code:`folder/train/metadata.jsonl
folder/train/first_audio_file.mp3
folder/train/second_audio_file.mp3
folder/train/third_audio_file.mp3`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span>first_audio_file.mp3
folder<span class="hljs-regexp">/train/</span>second_audio_file.mp3
folder<span class="hljs-regexp">/train/</span>third_audio_file.mp3`}}),ja=new J({props:{code:`{"file_name": "first_audio_file.mp3", "transcription": "znowu si\u0119 duch z cia\u0142em zro\u015Bnie w m\u0142odocianej wstaniesz wiosnie i mo\u017Cesz skutkiem tych lek\xF3w umiera\u0107 wstawa\u0107 wiek wiek\xF3w dalej tam by\u0142y przestrogi jak sieka\u0107 g\u0142ow\u0119 jak nogi"}
{"file_name": "second_audio_file.mp3", "transcription": "ju\u017C u \u017Awierzy\u0144ca podwoj\xF3w kr\xF3l zasiada przy nim ksi\u0105\u017C\u0119ta i panowie rada a gdzie wznios\u0142y kr\u0105\u017Cy\u0142 ganek rycerze obok kochanek kr\xF3l skin\u0105\u0142 palcem zacz\u0119to igrzysko"}
{"file_name": "third_audio_file.mp3", "transcription": "pewnie k\u0119dy\u015B w ob\u0142\u0119dzie ubite min\u0119\u0142y szlaki zaczekajmy dzie\u0144 jaki po\u015Blemy szuka\u0107 wsz\u0119dzie dzi\u015B jutro pewnie b\u0119dzie pos\u0142ali wsz\u0119dzie s\u0142ugi czekali dzie\u0144 i drugi gdy nic nie doczekali z p\u0142aczem chc\u0105 jecha\u0107 dali"}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;first_audio_file.mp3&quot;</span>, <span class="hljs-string">&quot;transcription&quot;</span>: <span class="hljs-string">&quot;znowu si\u0119 duch z cia\u0142em zro\u015Bnie w m\u0142odocianej wstaniesz wiosnie i mo\u017Cesz skutkiem tych lek\xF3w umiera\u0107 wstawa\u0107 wiek wiek\xF3w dalej tam by\u0142y przestrogi jak sieka\u0107 g\u0142ow\u0119 jak nogi&quot;</span>}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;second_audio_file.mp3&quot;</span>, <span class="hljs-string">&quot;transcription&quot;</span>: <span class="hljs-string">&quot;ju\u017C u \u017Awierzy\u0144ca podwoj\xF3w kr\xF3l zasiada przy nim ksi\u0105\u017C\u0119ta i panowie rada a gdzie wznios\u0142y kr\u0105\u017Cy\u0142 ganek rycerze obok kochanek kr\xF3l skin\u0105\u0142 palcem zacz\u0119to igrzysko&quot;</span>}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;third_audio_file.mp3&quot;</span>, <span class="hljs-string">&quot;transcription&quot;</span>: <span class="hljs-string">&quot;pewnie k\u0119dy\u015B w ob\u0142\u0119dzie ubite min\u0119\u0142y szlaki zaczekajmy dzie\u0144 jaki po\u015Blemy szuka\u0107 wsz\u0119dzie dzi\u015B jutro pewnie b\u0119dzie pos\u0142ali wsz\u0119dzie s\u0142ugi czekali dzie\u0144 i drugi gdy nic nie doczekali z p\u0142aczem chc\u0105 jecha\u0107 dali&quot;</span>}`}}),$a=new J({props:{code:`from datasets import load_dataset

dataset = load_dataset("audiofolder", data_dir="/path/to/folder")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;audiofolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)`}}),va=new J({props:{code:'dataset["train"][0]',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;audio&#x27;</span>:
    {<span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/path/to/extracted/audio/first_audio_file.mp3&#x27;</span>,
    <span class="hljs-string">&#x27;array&#x27;</span>: array([ <span class="hljs-number">0.00088501</span>,  <span class="hljs-number">0.0012207</span> ,  <span class="hljs-number">0.00131226</span>, ..., -<span class="hljs-number">0.00045776</span>, -<span class="hljs-number">0.00054932</span>, -<span class="hljs-number">0.00054932</span>], dtype=float32),
    <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>},
 <span class="hljs-string">&#x27;transcription&#x27;</span>: <span class="hljs-string">&#x27;znowu si\u0119 duch z cia\u0142em zro\u015Bnie w m\u0142odocianej wstaniesz wiosnie i mo\u017Cesz skutkiem tych lek\xF3w umiera\u0107 wstawa\u0107 wiek wiek\xF3w dalej tam by\u0142y przestrogi jak sieka\u0107 g\u0142ow\u0119 jak nogi&#x27;</span>
}`}}),ya=new J({props:{code:'dataset = load_dataset("audiofolder", data_files="https://s3.amazonaws.com/datasets.huggingface.co/SpeechCommands/v0.01/v0.01_test.tar.gz")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;audiofolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://s3.amazonaws.com/datasets.huggingface.co/SpeechCommands/v0.01/v0.01_test.tar.gz&quot;</span>)'}}),ba=new Ra({}),ka=new Ra({}),Ea=new J({props:{code:`folder/train/ar/0197_720_0207_190.wav
folder/train/ar/0179_830_0185_540.mp3
folder/train/ar/0179_830_0185_540.mp3

folder/train/zh/0442_690_0454_380.mp3`,highlighted:`folder<span class="hljs-regexp">/train/</span>ar/<span class="hljs-number">0197</span>_720_0207_190.wav
folder<span class="hljs-regexp">/train/</span>ar/<span class="hljs-number">0179</span>_830_0185_540.mp3
folder<span class="hljs-regexp">/train/</span>ar/<span class="hljs-number">0179</span>_830_0185_540.mp3

folder<span class="hljs-regexp">/train/</span>zh/<span class="hljs-number">0442</span>_690_0454_380.mp3`}}),xa=new J({props:{code:`dataset = load_dataset("audiofolder", data_dir="/path/to/folder", drop_labels=False)
dataset["train"][0]

dataset["train"][-1]`,highlighted:`&gt;&gt;&gt; dataset = load_dataset(<span class="hljs-string">&quot;audiofolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, drop_labels=<span class="hljs-symbol">False</span>)
&gt;&gt;&gt; dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;audio&#x27;</span>:
    {<span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/path/to/extracted/audio/0197_720_0207_190.mp3&#x27;</span>,
    <span class="hljs-string">&#x27;array&#x27;</span>: array([<span class="hljs-number">-3.6621094e-04</span>, <span class="hljs-number">-6.1035156e-05</span>,  <span class="hljs-number">6.1035156e-05</span>, ..., <span class="hljs-number">-5.1879883e-04</span>, <span class="hljs-number">-1.0070801e-03</span>, <span class="hljs-number">-7.6293945e-04</span>],
    <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}
 <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>  # <span class="hljs-string">&quot;ar&quot;</span>
}

&gt;&gt;&gt; dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">-1</span>]
{<span class="hljs-string">&#x27;audio&#x27;</span>:
    {<span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/path/to/extracted/audio/0442_690_0454_380.mp3&#x27;</span>,
    <span class="hljs-string">&#x27;array&#x27;</span>: array([<span class="hljs-number">1.8920898e-03</span>, <span class="hljs-number">9.4604492e-04</span>, <span class="hljs-number">1.9226074e-03</span>, ..., <span class="hljs-number">9.1552734e-05</span>, <span class="hljs-number">1.8310547e-04</span>, <span class="hljs-number">6.1035156e-05</span>],
    <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}
 <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">99</span>  # <span class="hljs-string">&quot;zh&quot;</span>
}`}}),ia=new cl({props:{$$slots:{default:[go]},$$scope:{ctx:K}}}),{c(){u=o("meta"),A=p(),m=o("h1"),w=o("a"),E=o("span"),j(_.$$.fragment),z=p(),x=o("span"),g=s("Load audio data"),h=p(),q=o("p"),O=s("Audio datasets are loaded from the "),Ba=o("code"),yt=s("audio"),bt=s(" column, which contains three important fields:"),Oe=p(),S=o("ul"),za=o("li"),Wa=o("code"),kt=s("array"),Et=s(": the decoded audio data represented as a 1-dimensional array."),xt=p(),Ca=o("li"),Ga=o("code"),qt=s("path"),At=s(": the path to the downloaded audio file."),zt=p(),Oa=o("li"),Ka=o("code"),Ct=s("sampling_rate"),Ot=s(": the sampling rate of the audio data."),Pe=p(),j(Q.$$.fragment),De=p(),L=o("p"),Pt=s("When you load an audio dataset and call the "),Qa=o("code"),Dt=s("audio"),Ft=s(" column, the "),Pa=o("a"),It=s("Audio"),St=s(" feature automatically decodes and resamples the audio file:"),Fe=p(),j(ca.$$.fragment),Ie=p(),j(V.$$.fragment),Se=p(),X=o("p"),Lt=s("For a guide on how to load any type of dataset, take a look at the "),ua=o("a"),Nt=s("general loading guide"),Tt=s("."),Le=p(),M=o("h2"),Z=o("a"),Va=o("span"),j(fa.$$.fragment),Ut=p(),Xa=o("span"),Yt=s("Local files"),Ne=p(),C=o("p"),Ht=s("The "),Za=o("code"),Jt=s("path"),Mt=s(" is useful for loading your own dataset. Use the "),Da=o("a"),Rt=s("cast_column()"),Bt=s(" function to take a column of audio file paths, and decode it into "),ae=o("code"),Wt=s("array"),Gt=s("\u2019s with the "),Fa=o("a"),Kt=s("Audio"),Qt=s(" feature:"),Te=p(),j(ha.$$.fragment),Ue=p(),P=o("p"),Vt=s("If you only want to load the underlying path to the audio dataset without decoding the audio file into an "),ee=o("code"),Xt=s("array"),Zt=s(", set "),te=o("code"),as=s("decode=False"),es=s(" in the "),Ia=o("a"),ts=s("Audio"),ss=s(" feature:"),Ye=p(),j(ma.$$.fragment),He=p(),R=o("h2"),aa=o("a"),se=o("span"),j(_a.$$.fragment),ls=p(),le=o("span"),os=s("AudioFolder"),Je=p(),ea=o("p"),ns=s("You can also load a dataset with an "),oe=o("code"),is=s("AudioFolder"),rs=s(" dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading audio data."),Me=p(),B=o("h2"),ta=o("a"),ne=o("span"),j(ga.$$.fragment),ds=p(),ie=o("span"),ps=s("AudioFolder with metadata"),Re=p(),sa=o("p"),cs=s("To link your audio files with metadata information, make sure your dataset has a "),re=o("code"),us=s("metadata.jsonl"),fs=s(" file. Your dataset structure might look like:"),Be=p(),j(wa.$$.fragment),We=p(),D=o("p"),hs=s("Your "),de=o("code"),ms=s("metadata.jsonl"),_s=s(" file must have a "),pe=o("code"),gs=s("file_name"),ws=s(" column which links audio files with their metadata. An example "),ce=o("code"),js=s("metadata.jsonl"),$s=s(" file might look like:"),Ge=p(),j(ja.$$.fragment),Ke=p(),N=o("p"),vs=s("Load your audio dataset by specifying "),ue=o("code"),ys=s("audiofolder"),bs=s(" and the directory containing your data in "),fe=o("code"),ks=s("data_dir"),Es=s(":"),Qe=p(),j($a.$$.fragment),Ve=p(),I=o("p"),he=o("code"),xs=s("AudioFolder"),qs=s(" will load audio data and create a "),me=o("code"),As=s("transcription"),zs=s(" column containing texts from "),_e=o("code"),Cs=s("metadata.jsonl"),Os=s(":"),Xe=p(),j(va.$$.fragment),Ze=p(),la=o("p"),Ps=s("You can load remote datasets from their URLs with the "),ge=o("code"),Ds=s("data_files"),Fs=s(" parameter:"),at=p(),j(ya.$$.fragment),et=p(),W=o("h2"),oa=o("a"),we=o("span"),j(ba.$$.fragment),Is=p(),je=o("span"),Ss=s("AudioFolder with labels"),tt=p(),F=o("p"),Ls=s("If your data directory doesn\u2019t contain any metadata files, by default "),$e=o("code"),Ns=s("AudioFolder"),Ts=s(" automatically adds a "),ve=o("code"),Us=s("label"),Ys=s(" column of "),Sa=o("a"),Hs=s("ClassLabel"),Js=s(` type, with labels based on the directory name.
It might be useful if you have an audio classification task.`),st=p(),G=o("h3"),na=o("a"),ye=o("span"),j(ka.$$.fragment),Ms=p(),be=o("span"),Rs=s("Language identification"),lt=p(),La=o("p"),Bs=s("Language identification datasets have audio recordings of speech in multiple languages:"),ot=p(),j(Ea.$$.fragment),nt=p(),T=o("p"),Ws=s("As there are no metadata files, "),ke=o("code"),Gs=s("AudioFolder"),Ks=s(" will create a "),Ee=o("code"),Qs=s("label"),Vs=s(" column with the language id based on the directory name:"),it=p(),j(xa.$$.fragment),rt=p(),U=o("p"),Xs=s("If you have metadata files inside your data directory, but you still want to infer labels from directories names, set "),xe=o("code"),Zs=s("drop_labels=False"),al=s(" as defined in "),Na=o("a"),el=s("AudioFolderConfig"),tl=s("."),dt=p(),j(ia.$$.fragment),pt=p(),Y=o("p"),sl=s("If you have no metadata files and want to drop automatically created labels, set "),qe=o("code"),ll=s("drop_labels=True"),ol=s(". In this case your dataset would contain only an "),Ae=o("code"),nl=s("audio"),il=s(" column."),this.h()},l(a){const r=fo('[data-svelte="svelte-1phssyn"]',document.head);u=n(r,"META",{name:!0,content:!0}),r.forEach(t),A=c(a),m=n(a,"H1",{class:!0});var qa=i(m);w=n(qa,"A",{id:!0,class:!0,href:!0});var ze=i(w);E=n(ze,"SPAN",{});var Ce=i(E);$(_.$$.fragment,Ce),Ce.forEach(t),ze.forEach(t),z=c(qa),x=n(qa,"SPAN",{});var ul=i(x);g=l(ul,"Load audio data"),ul.forEach(t),qa.forEach(t),h=c(a),q=n(a,"P",{});var ut=i(q);O=l(ut,"Audio datasets are loaded from the "),Ba=n(ut,"CODE",{});var fl=i(Ba);yt=l(fl,"audio"),fl.forEach(t),bt=l(ut," column, which contains three important fields:"),ut.forEach(t),Oe=c(a),S=n(a,"UL",{});var Ta=i(S);za=n(Ta,"LI",{});var rl=i(za);Wa=n(rl,"CODE",{});var hl=i(Wa);kt=l(hl,"array"),hl.forEach(t),Et=l(rl,": the decoded audio data represented as a 1-dimensional array."),rl.forEach(t),xt=c(Ta),Ca=n(Ta,"LI",{});var dl=i(Ca);Ga=n(dl,"CODE",{});var ml=i(Ga);qt=l(ml,"path"),ml.forEach(t),At=l(dl,": the path to the downloaded audio file."),dl.forEach(t),zt=c(Ta),Oa=n(Ta,"LI",{});var pl=i(Oa);Ka=n(pl,"CODE",{});var _l=i(Ka);Ct=l(_l,"sampling_rate"),_l.forEach(t),Ot=l(pl,": the sampling rate of the audio data."),pl.forEach(t),Ta.forEach(t),Pe=c(a),$(Q.$$.fragment,a),De=c(a),L=n(a,"P",{});var Ua=i(L);Pt=l(Ua,"When you load an audio dataset and call the "),Qa=n(Ua,"CODE",{});var gl=i(Qa);Dt=l(gl,"audio"),gl.forEach(t),Ft=l(Ua," column, the "),Pa=n(Ua,"A",{href:!0});var wl=i(Pa);It=l(wl,"Audio"),wl.forEach(t),St=l(Ua," feature automatically decodes and resamples the audio file:"),Ua.forEach(t),Fe=c(a),$(ca.$$.fragment,a),Ie=c(a),$(V.$$.fragment,a),Se=c(a),X=n(a,"P",{});var ft=i(X);Lt=l(ft,"For a guide on how to load any type of dataset, take a look at the "),ua=n(ft,"A",{class:!0,href:!0});var jl=i(ua);Nt=l(jl,"general loading guide"),jl.forEach(t),Tt=l(ft,"."),ft.forEach(t),Le=c(a),M=n(a,"H2",{class:!0});var ht=i(M);Z=n(ht,"A",{id:!0,class:!0,href:!0});var $l=i(Z);Va=n($l,"SPAN",{});var vl=i(Va);$(fa.$$.fragment,vl),vl.forEach(t),$l.forEach(t),Ut=c(ht),Xa=n(ht,"SPAN",{});var yl=i(Xa);Yt=l(yl,"Local files"),yl.forEach(t),ht.forEach(t),Ne=c(a),C=n(a,"P",{});var H=i(C);Ht=l(H,"The "),Za=n(H,"CODE",{});var bl=i(Za);Jt=l(bl,"path"),bl.forEach(t),Mt=l(H," is useful for loading your own dataset. Use the "),Da=n(H,"A",{href:!0});var kl=i(Da);Rt=l(kl,"cast_column()"),kl.forEach(t),Bt=l(H," function to take a column of audio file paths, and decode it into "),ae=n(H,"CODE",{});var El=i(ae);Wt=l(El,"array"),El.forEach(t),Gt=l(H,"\u2019s with the "),Fa=n(H,"A",{href:!0});var xl=i(Fa);Kt=l(xl,"Audio"),xl.forEach(t),Qt=l(H," feature:"),H.forEach(t),Te=c(a),$(ha.$$.fragment,a),Ue=c(a),P=n(a,"P",{});var ra=i(P);Vt=l(ra,"If you only want to load the underlying path to the audio dataset without decoding the audio file into an "),ee=n(ra,"CODE",{});var ql=i(ee);Xt=l(ql,"array"),ql.forEach(t),Zt=l(ra,", set "),te=n(ra,"CODE",{});var Al=i(te);as=l(Al,"decode=False"),Al.forEach(t),es=l(ra," in the "),Ia=n(ra,"A",{href:!0});var zl=i(Ia);ts=l(zl,"Audio"),zl.forEach(t),ss=l(ra," feature:"),ra.forEach(t),Ye=c(a),$(ma.$$.fragment,a),He=c(a),R=n(a,"H2",{class:!0});var mt=i(R);aa=n(mt,"A",{id:!0,class:!0,href:!0});var Cl=i(aa);se=n(Cl,"SPAN",{});var Ol=i(se);$(_a.$$.fragment,Ol),Ol.forEach(t),Cl.forEach(t),ls=c(mt),le=n(mt,"SPAN",{});var Pl=i(le);os=l(Pl,"AudioFolder"),Pl.forEach(t),mt.forEach(t),Je=c(a),ea=n(a,"P",{});var _t=i(ea);ns=l(_t,"You can also load a dataset with an "),oe=n(_t,"CODE",{});var Dl=i(oe);is=l(Dl,"AudioFolder"),Dl.forEach(t),rs=l(_t," dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading audio data."),_t.forEach(t),Me=c(a),B=n(a,"H2",{class:!0});var gt=i(B);ta=n(gt,"A",{id:!0,class:!0,href:!0});var Fl=i(ta);ne=n(Fl,"SPAN",{});var Il=i(ne);$(ga.$$.fragment,Il),Il.forEach(t),Fl.forEach(t),ds=c(gt),ie=n(gt,"SPAN",{});var Sl=i(ie);ps=l(Sl,"AudioFolder with metadata"),Sl.forEach(t),gt.forEach(t),Re=c(a),sa=n(a,"P",{});var wt=i(sa);cs=l(wt,"To link your audio files with metadata information, make sure your dataset has a "),re=n(wt,"CODE",{});var Ll=i(re);us=l(Ll,"metadata.jsonl"),Ll.forEach(t),fs=l(wt," file. Your dataset structure might look like:"),wt.forEach(t),Be=c(a),$(wa.$$.fragment,a),We=c(a),D=n(a,"P",{});var da=i(D);hs=l(da,"Your "),de=n(da,"CODE",{});var Nl=i(de);ms=l(Nl,"metadata.jsonl"),Nl.forEach(t),_s=l(da," file must have a "),pe=n(da,"CODE",{});var Tl=i(pe);gs=l(Tl,"file_name"),Tl.forEach(t),ws=l(da," column which links audio files with their metadata. An example "),ce=n(da,"CODE",{});var Ul=i(ce);js=l(Ul,"metadata.jsonl"),Ul.forEach(t),$s=l(da," file might look like:"),da.forEach(t),Ge=c(a),$(ja.$$.fragment,a),Ke=c(a),N=n(a,"P",{});var Ya=i(N);vs=l(Ya,"Load your audio dataset by specifying "),ue=n(Ya,"CODE",{});var Yl=i(ue);ys=l(Yl,"audiofolder"),Yl.forEach(t),bs=l(Ya," and the directory containing your data in "),fe=n(Ya,"CODE",{});var Hl=i(fe);ks=l(Hl,"data_dir"),Hl.forEach(t),Es=l(Ya,":"),Ya.forEach(t),Qe=c(a),$($a.$$.fragment,a),Ve=c(a),I=n(a,"P",{});var Aa=i(I);he=n(Aa,"CODE",{});var Jl=i(he);xs=l(Jl,"AudioFolder"),Jl.forEach(t),qs=l(Aa," will load audio data and create a "),me=n(Aa,"CODE",{});var Ml=i(me);As=l(Ml,"transcription"),Ml.forEach(t),zs=l(Aa," column containing texts from "),_e=n(Aa,"CODE",{});var Rl=i(_e);Cs=l(Rl,"metadata.jsonl"),Rl.forEach(t),Os=l(Aa,":"),Aa.forEach(t),Xe=c(a),$(va.$$.fragment,a),Ze=c(a),la=n(a,"P",{});var jt=i(la);Ps=l(jt,"You can load remote datasets from their URLs with the "),ge=n(jt,"CODE",{});var Bl=i(ge);Ds=l(Bl,"data_files"),Bl.forEach(t),Fs=l(jt," parameter:"),jt.forEach(t),at=c(a),$(ya.$$.fragment,a),et=c(a),W=n(a,"H2",{class:!0});var $t=i(W);oa=n($t,"A",{id:!0,class:!0,href:!0});var Wl=i(oa);we=n(Wl,"SPAN",{});var Gl=i(we);$(ba.$$.fragment,Gl),Gl.forEach(t),Wl.forEach(t),Is=c($t),je=n($t,"SPAN",{});var Kl=i(je);Ss=l(Kl,"AudioFolder with labels"),Kl.forEach(t),$t.forEach(t),tt=c(a),F=n(a,"P",{});var pa=i(F);Ls=l(pa,"If your data directory doesn\u2019t contain any metadata files, by default "),$e=n(pa,"CODE",{});var Ql=i($e);Ns=l(Ql,"AudioFolder"),Ql.forEach(t),Ts=l(pa," automatically adds a "),ve=n(pa,"CODE",{});var Vl=i(ve);Us=l(Vl,"label"),Vl.forEach(t),Ys=l(pa," column of "),Sa=n(pa,"A",{href:!0});var Xl=i(Sa);Hs=l(Xl,"ClassLabel"),Xl.forEach(t),Js=l(pa,` type, with labels based on the directory name.
It might be useful if you have an audio classification task.`),pa.forEach(t),st=c(a),G=n(a,"H3",{class:!0});var vt=i(G);na=n(vt,"A",{id:!0,class:!0,href:!0});var Zl=i(na);ye=n(Zl,"SPAN",{});var ao=i(ye);$(ka.$$.fragment,ao),ao.forEach(t),Zl.forEach(t),Ms=c(vt),be=n(vt,"SPAN",{});var eo=i(be);Rs=l(eo,"Language identification"),eo.forEach(t),vt.forEach(t),lt=c(a),La=n(a,"P",{});var to=i(La);Bs=l(to,"Language identification datasets have audio recordings of speech in multiple languages:"),to.forEach(t),ot=c(a),$(Ea.$$.fragment,a),nt=c(a),T=n(a,"P",{});var Ha=i(T);Ws=l(Ha,"As there are no metadata files, "),ke=n(Ha,"CODE",{});var so=i(ke);Gs=l(so,"AudioFolder"),so.forEach(t),Ks=l(Ha," will create a "),Ee=n(Ha,"CODE",{});var lo=i(Ee);Qs=l(lo,"label"),lo.forEach(t),Vs=l(Ha," column with the language id based on the directory name:"),Ha.forEach(t),it=c(a),$(xa.$$.fragment,a),rt=c(a),U=n(a,"P",{});var Ja=i(U);Xs=l(Ja,"If you have metadata files inside your data directory, but you still want to infer labels from directories names, set "),xe=n(Ja,"CODE",{});var oo=i(xe);Zs=l(oo,"drop_labels=False"),oo.forEach(t),al=l(Ja," as defined in "),Na=n(Ja,"A",{href:!0});var no=i(Na);el=l(no,"AudioFolderConfig"),no.forEach(t),tl=l(Ja,"."),Ja.forEach(t),dt=c(a),$(ia.$$.fragment,a),pt=c(a),Y=n(a,"P",{});var Ma=i(Y);sl=l(Ma,"If you have no metadata files and want to drop automatically created labels, set "),qe=n(Ma,"CODE",{});var io=i(qe);ll=l(io,"drop_labels=True"),io.forEach(t),ol=l(Ma,". In this case your dataset would contain only an "),Ae=n(Ma,"CODE",{});var ro=i(Ae);nl=l(ro,"audio"),ro.forEach(t),il=l(Ma," column."),Ma.forEach(t),this.h()},h(){f(u,"name","hf:doc:metadata"),f(u,"content",JSON.stringify(jo)),f(w,"id","load-audio-data"),f(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(w,"href","#load-audio-data"),f(m,"class","relative group"),f(Pa,"href","/docs/datasets/pr_4882/en/package_reference/main_classes#datasets.Audio"),f(ua,"class","underline decoration-sky-400 decoration-2 font-semibold"),f(ua,"href","./loading"),f(Z,"id","local-files"),f(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Z,"href","#local-files"),f(M,"class","relative group"),f(Da,"href","/docs/datasets/pr_4882/en/package_reference/main_classes#datasets.Dataset.cast_column"),f(Fa,"href","/docs/datasets/pr_4882/en/package_reference/main_classes#datasets.Audio"),f(Ia,"href","/docs/datasets/pr_4882/en/package_reference/main_classes#datasets.Audio"),f(aa,"id","audiofolder"),f(aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(aa,"href","#audiofolder"),f(R,"class","relative group"),f(ta,"id","audiofolder-with-metadata"),f(ta,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ta,"href","#audiofolder-with-metadata"),f(B,"class","relative group"),f(oa,"id","audiofolder-with-labels"),f(oa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(oa,"href","#audiofolder-with-labels"),f(W,"class","relative group"),f(Sa,"href","/docs/datasets/pr_4882/en/package_reference/main_classes#datasets.ClassLabel"),f(na,"id","language-identification"),f(na,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(na,"href","#language-identification"),f(G,"class","relative group"),f(Na,"href","/docs/datasets/pr_4882/en/package_reference/loading_methods#datasets.packaged_modules.audiofolder.AudioFolderConfig")},m(a,r){e(document.head,u),d(a,A,r),d(a,m,r),e(m,w),e(w,E),v(_,E,null),e(m,z),e(m,x),e(x,g),d(a,h,r),d(a,q,r),e(q,O),e(q,Ba),e(Ba,yt),e(q,bt),d(a,Oe,r),d(a,S,r),e(S,za),e(za,Wa),e(Wa,kt),e(za,Et),e(S,xt),e(S,Ca),e(Ca,Ga),e(Ga,qt),e(Ca,At),e(S,zt),e(S,Oa),e(Oa,Ka),e(Ka,Ct),e(Oa,Ot),d(a,Pe,r),v(Q,a,r),d(a,De,r),d(a,L,r),e(L,Pt),e(L,Qa),e(Qa,Dt),e(L,Ft),e(L,Pa),e(Pa,It),e(L,St),d(a,Fe,r),v(ca,a,r),d(a,Ie,r),v(V,a,r),d(a,Se,r),d(a,X,r),e(X,Lt),e(X,ua),e(ua,Nt),e(X,Tt),d(a,Le,r),d(a,M,r),e(M,Z),e(Z,Va),v(fa,Va,null),e(M,Ut),e(M,Xa),e(Xa,Yt),d(a,Ne,r),d(a,C,r),e(C,Ht),e(C,Za),e(Za,Jt),e(C,Mt),e(C,Da),e(Da,Rt),e(C,Bt),e(C,ae),e(ae,Wt),e(C,Gt),e(C,Fa),e(Fa,Kt),e(C,Qt),d(a,Te,r),v(ha,a,r),d(a,Ue,r),d(a,P,r),e(P,Vt),e(P,ee),e(ee,Xt),e(P,Zt),e(P,te),e(te,as),e(P,es),e(P,Ia),e(Ia,ts),e(P,ss),d(a,Ye,r),v(ma,a,r),d(a,He,r),d(a,R,r),e(R,aa),e(aa,se),v(_a,se,null),e(R,ls),e(R,le),e(le,os),d(a,Je,r),d(a,ea,r),e(ea,ns),e(ea,oe),e(oe,is),e(ea,rs),d(a,Me,r),d(a,B,r),e(B,ta),e(ta,ne),v(ga,ne,null),e(B,ds),e(B,ie),e(ie,ps),d(a,Re,r),d(a,sa,r),e(sa,cs),e(sa,re),e(re,us),e(sa,fs),d(a,Be,r),v(wa,a,r),d(a,We,r),d(a,D,r),e(D,hs),e(D,de),e(de,ms),e(D,_s),e(D,pe),e(pe,gs),e(D,ws),e(D,ce),e(ce,js),e(D,$s),d(a,Ge,r),v(ja,a,r),d(a,Ke,r),d(a,N,r),e(N,vs),e(N,ue),e(ue,ys),e(N,bs),e(N,fe),e(fe,ks),e(N,Es),d(a,Qe,r),v($a,a,r),d(a,Ve,r),d(a,I,r),e(I,he),e(he,xs),e(I,qs),e(I,me),e(me,As),e(I,zs),e(I,_e),e(_e,Cs),e(I,Os),d(a,Xe,r),v(va,a,r),d(a,Ze,r),d(a,la,r),e(la,Ps),e(la,ge),e(ge,Ds),e(la,Fs),d(a,at,r),v(ya,a,r),d(a,et,r),d(a,W,r),e(W,oa),e(oa,we),v(ba,we,null),e(W,Is),e(W,je),e(je,Ss),d(a,tt,r),d(a,F,r),e(F,Ls),e(F,$e),e($e,Ns),e(F,Ts),e(F,ve),e(ve,Us),e(F,Ys),e(F,Sa),e(Sa,Hs),e(F,Js),d(a,st,r),d(a,G,r),e(G,na),e(na,ye),v(ka,ye,null),e(G,Ms),e(G,be),e(be,Rs),d(a,lt,r),d(a,La,r),e(La,Bs),d(a,ot,r),v(Ea,a,r),d(a,nt,r),d(a,T,r),e(T,Ws),e(T,ke),e(ke,Gs),e(T,Ks),e(T,Ee),e(Ee,Qs),e(T,Vs),d(a,it,r),v(xa,a,r),d(a,rt,r),d(a,U,r),e(U,Xs),e(U,xe),e(xe,Zs),e(U,al),e(U,Na),e(Na,el),e(U,tl),d(a,dt,r),v(ia,a,r),d(a,pt,r),d(a,Y,r),e(Y,sl),e(Y,qe),e(qe,ll),e(Y,ol),e(Y,Ae),e(Ae,nl),e(Y,il),ct=!0},p(a,[r]){const qa={};r&2&&(qa.$$scope={dirty:r,ctx:a}),Q.$set(qa);const ze={};r&2&&(ze.$$scope={dirty:r,ctx:a}),V.$set(ze);const Ce={};r&2&&(Ce.$$scope={dirty:r,ctx:a}),ia.$set(Ce)},i(a){ct||(y(_.$$.fragment,a),y(Q.$$.fragment,a),y(ca.$$.fragment,a),y(V.$$.fragment,a),y(fa.$$.fragment,a),y(ha.$$.fragment,a),y(ma.$$.fragment,a),y(_a.$$.fragment,a),y(ga.$$.fragment,a),y(wa.$$.fragment,a),y(ja.$$.fragment,a),y($a.$$.fragment,a),y(va.$$.fragment,a),y(ya.$$.fragment,a),y(ba.$$.fragment,a),y(ka.$$.fragment,a),y(Ea.$$.fragment,a),y(xa.$$.fragment,a),y(ia.$$.fragment,a),ct=!0)},o(a){b(_.$$.fragment,a),b(Q.$$.fragment,a),b(ca.$$.fragment,a),b(V.$$.fragment,a),b(fa.$$.fragment,a),b(ha.$$.fragment,a),b(ma.$$.fragment,a),b(_a.$$.fragment,a),b(ga.$$.fragment,a),b(wa.$$.fragment,a),b(ja.$$.fragment,a),b($a.$$.fragment,a),b(va.$$.fragment,a),b(ya.$$.fragment,a),b(ba.$$.fragment,a),b(ka.$$.fragment,a),b(Ea.$$.fragment,a),b(xa.$$.fragment,a),b(ia.$$.fragment,a),ct=!1},d(a){t(u),a&&t(A),a&&t(m),k(_),a&&t(h),a&&t(q),a&&t(Oe),a&&t(S),a&&t(Pe),k(Q,a),a&&t(De),a&&t(L),a&&t(Fe),k(ca,a),a&&t(Ie),k(V,a),a&&t(Se),a&&t(X),a&&t(Le),a&&t(M),k(fa),a&&t(Ne),a&&t(C),a&&t(Te),k(ha,a),a&&t(Ue),a&&t(P),a&&t(Ye),k(ma,a),a&&t(He),a&&t(R),k(_a),a&&t(Je),a&&t(ea),a&&t(Me),a&&t(B),k(ga),a&&t(Re),a&&t(sa),a&&t(Be),k(wa,a),a&&t(We),a&&t(D),a&&t(Ge),k(ja,a),a&&t(Ke),a&&t(N),a&&t(Qe),k($a,a),a&&t(Ve),a&&t(I),a&&t(Xe),k(va,a),a&&t(Ze),a&&t(la),a&&t(at),k(ya,a),a&&t(et),a&&t(W),k(ba),a&&t(tt),a&&t(F),a&&t(st),a&&t(G),k(ka),a&&t(lt),a&&t(La),a&&t(ot),k(Ea,a),a&&t(nt),a&&t(T),a&&t(it),k(xa,a),a&&t(rt),a&&t(U),a&&t(dt),k(ia,a),a&&t(pt),a&&t(Y)}}}const jo={local:"load-audio-data",sections:[{local:"local-files",title:"Local files"},{local:"audiofolder",title:"AudioFolder"},{local:"audiofolder-with-metadata",title:"AudioFolder with metadata"},{local:"audiofolder-with-labels",sections:[{local:"language-identification",title:"Language identification"}],title:"AudioFolder with labels"}],title:"Load audio data"};function $o(K){return ho(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Eo extends po{constructor(u){super();co(this,u,$o,wo,uo,{})}}export{Eo as default,jo as metadata};
