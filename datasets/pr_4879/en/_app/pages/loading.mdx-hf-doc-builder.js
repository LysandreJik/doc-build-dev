import{S as uh,i as hh,s as mh,e as l,k as d,w as h,t as r,M as _h,c as o,d as a,m as c,a as n,x as m,h as i,b as f,G as s,g as p,y as _,q as g,o as v,B as $,v as gh}from"../chunks/vendor-hf-doc-builder.js";import{T as Os}from"../chunks/Tip-hf-doc-builder.js";import{I as S}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as E}from"../chunks/CodeBlock-hf-doc-builder.js";import{C as lo}from"../chunks/CodeBlockFw-hf-doc-builder.js";import"../chunks/IconTensorflow-hf-doc-builder.js";function vh(D){let u,k,y,b,q;return{c(){u=l("p"),k=r("Refer to the "),y=l("a"),b=r("Upload a dataset to the Hub"),q=r(" tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),this.h()},l(w){u=o(w,"P",{});var j=n(u);k=i(j,"Refer to the "),y=o(j,"A",{href:!0});var x=n(y);b=i(x,"Upload a dataset to the Hub"),x.forEach(a),q=i(j," tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),j.forEach(a),this.h()},h(){f(y,"href","./upload_dataset")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function $h(D){let u,k,y,b,q;return{c(){u=l("p"),k=r("If you don\u2019t specify which data files to use, "),y=l("a"),b=r("load_dataset()"),q=r(" will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),this.h()},l(w){u=o(w,"P",{});var j=n(u);k=i(j,"If you don\u2019t specify which data files to use, "),y=o(j,"A",{href:!0});var x=n(y);b=i(x,"load_dataset()"),x.forEach(a),q=i(j," will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),j.forEach(a),this.h()},h(){f(y,"href","/docs/datasets/pr_4879/en/package_reference/loading_methods#datasets.load_dataset")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function yh(D){let u,k,y,b,q,w,j,x,tt,jt,J,at,bt,U,Y,qt,A,M,$a,ya,V,wa,ja,O,ba,qa;return{c(){u=l("p"),k=r("An object data type in "),y=l("a"),b=r("pandas.Series"),q=r(" doesn\u2019t always carry enough information for Arrow to automatically infer a data type. For example, if a DataFrame is of length "),w=l("code"),j=r("0"),x=r(" or the Series only contains "),tt=l("code"),jt=r("None/NaN"),J=r(" objects, the type is set to "),at=l("code"),bt=r("null"),U=r(". Avoid potential errors by constructing an explicit schema with "),Y=l("a"),qt=r("Features"),A=r(" using the "),M=l("code"),$a=r("from_dict"),ya=r(" or "),V=l("code"),wa=r("from_pandas"),ja=r(" methods. See the "),O=l("a"),ba=r("troubleshoot"),qa=r(" section for more details on how to explicitly specify your own features."),this.h()},l(z){u=o(z,"P",{});var P=n(u);k=i(P,"An object data type in "),y=o(P,"A",{href:!0,rel:!0});var Ls=n(y);b=i(Ls,"pandas.Series"),Ls.forEach(a),q=i(P," doesn\u2019t always carry enough information for Arrow to automatically infer a data type. For example, if a DataFrame is of length "),w=o(P,"CODE",{});var kt=n(w);j=i(kt,"0"),kt.forEach(a),x=i(P," or the Series only contains "),tt=o(P,"CODE",{});var Hs=n(tt);jt=i(Hs,"None/NaN"),Hs.forEach(a),J=i(P," objects, the type is set to "),at=o(P,"CODE",{});var Fs=n(at);bt=i(Fs,"null"),Fs.forEach(a),U=i(P,". Avoid potential errors by constructing an explicit schema with "),Y=o(P,"A",{href:!0});var Et=n(Y);qt=i(Et,"Features"),Et.forEach(a),A=i(P," using the "),M=o(P,"CODE",{});var Rs=n(M);$a=i(Rs,"from_dict"),Rs.forEach(a),ya=i(P," or "),V=o(P,"CODE",{});var ka=n(V);wa=i(ka,"from_pandas"),ka.forEach(a),ja=i(P," methods. See the "),O=o(P,"A",{href:!0});var I=n(O);ba=i(I,"troubleshoot"),I.forEach(a),qa=i(P," section for more details on how to explicitly specify your own features."),P.forEach(a),this.h()},h(){f(y,"href","https://pandas.pydata.org/docs/reference/api/pandas.Series.html"),f(y,"rel","nofollow"),f(Y,"href","/docs/datasets/pr_4879/en/package_reference/main_classes#datasets.Features"),f(O,"href","./loading#specify-features")},m(z,P){p(z,u,P),s(u,k),s(u,y),s(y,b),s(u,q),s(u,w),s(w,j),s(u,x),s(u,tt),s(tt,jt),s(u,J),s(u,at),s(at,bt),s(u,U),s(u,Y),s(Y,qt),s(u,A),s(u,M),s(M,$a),s(u,ya),s(u,V),s(V,wa),s(u,ja),s(u,O),s(O,ba),s(u,qa)},d(z){z&&a(u)}}}function wh(D){let u,k,y,b;return{c(){u=l("p"),k=l("code"),y=r("pct1_dropremainder"),b=r(" rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100.")},l(q){u=o(q,"P",{});var w=n(u);k=o(w,"CODE",{});var j=n(k);y=i(j,"pct1_dropremainder"),j.forEach(a),b=i(w," rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100."),w.forEach(a)},m(q,w){p(q,u,w),s(u,k),s(k,y),s(u,b)},d(q){q&&a(u)}}}function jh(D){let u,k,y,b,q;return{c(){u=l("p"),k=r("Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),y=l("a"),b=r("Evaluate"),q=r("! In addition to metrics, you can find more tools for evaluating models and datasets."),this.h()},l(w){u=o(w,"P",{});var j=n(u);k=i(j,"Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),y=o(j,"A",{href:!0,rel:!0});var x=n(y);b=i(x,"Evaluate"),x.forEach(a),q=i(j,"! In addition to metrics, you can find more tools for evaluating models and datasets."),j.forEach(a),this.h()},h(){f(y,"href","https://huggingface.co/docs/evaluate/index"),f(y,"rel","nofollow")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function bh(D){let u,k,y,b,q;return{c(){u=l("p"),k=r("See the "),y=l("a"),b=r("Metrics"),q=r(" guide for more details on how to write your own metric loading script."),this.h()},l(w){u=o(w,"P",{});var j=n(u);k=i(j,"See the "),y=o(j,"A",{href:!0});var x=n(y);b=i(x,"Metrics"),x.forEach(a),q=i(j," guide for more details on how to write your own metric loading script."),j.forEach(a),this.h()},h(){f(y,"href","./how_to_metrics#custom-metric-loading-script")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function qh(D){let u,k,y,b,q;return{c(){u=l("p"),k=r("Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),y=l("a"),b=r("Metric.compute()"),q=r(" gathers all the predictions and references from the nodes, and computes the final metric."),this.h()},l(w){u=o(w,"P",{});var j=n(u);k=i(j,"Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),y=o(j,"A",{href:!0});var x=n(y);b=i(x,"Metric.compute()"),x.forEach(a),q=i(j," gathers all the predictions and references from the nodes, and computes the final metric."),j.forEach(a),this.h()},h(){f(y,"href","/docs/datasets/pr_4879/en/package_reference/main_classes#datasets.Metric.compute")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function kh(D){let u,k,y,b,q,w,j,x,tt,jt,J,at,bt,U,Y,qt,A,M,$a,ya,V,wa,ja,O,ba,qa,z,P,Ls,kt,Hs,Fs,Et,Rs,ka,I,Xr,Ea,Zr,ti,xa,ai,si,Pa,ei,li,oo,Ms,no,st,xt,Le,Aa,oi,He,ni,ro,B,ri,Vs,ii,pi,zs,di,ci,io,Pt,fi,Sa,ui,hi,po,Da,co,At,mi,Fe,_i,gi,fo,Ta,uo,St,ho,T,vi,Re,$i,yi,Me,wi,ji,Ve,bi,qi,ze,ki,Ei,Je,xi,Pi,mo,Na,_o,Dt,go,Tt,Ai,Ue,Si,Di,vo,Ia,$o,Nt,Ti,Ye,Ni,Ii,yo,Ca,wo,et,It,Be,Oa,Ci,We,Oi,jo,Ct,Li,Js,Hi,Fi,bo,Ot,Ge,Ri,Mi,Qe,Vi,qo,La,ko,lt,Lt,Ke,Ha,zi,Xe,Ji,Eo,Us,Ui,xo,Fa,Po,Ht,Yi,Ys,Bi,Wi,Ao,Ra,So,ot,Ft,Ze,Ma,Gi,tl,Qi,Do,N,Ki,al,Xi,Zi,sl,tp,ap,el,sp,ep,ll,lp,op,Bs,np,rp,To,nt,Rt,ol,Va,ip,nl,pp,No,Ws,dp,Io,za,Co,Gs,cp,Oo,Ja,Lo,Qs,fp,Ho,Ua,Fo,Ks,up,Ro,Ya,Mo,Xs,hp,Vo,Ba,zo,rt,Mt,rl,Wa,mp,il,_p,Jo,Vt,gp,Zs,vp,$p,Uo,Ga,Yo,te,yp,Bo,Qa,Wo,zt,wp,pl,jp,bp,Go,Ka,Qo,ae,qp,Ko,Xa,Xo,se,kp,Zo,it,Jt,dl,Za,Ep,cl,xp,tn,ee,Pp,an,le,Ap,sn,ts,en,oe,Sp,ln,as,on,pt,Ut,fl,ss,Dp,ul,Tp,nn,Yt,Np,ne,Ip,Cp,rn,dt,Bt,hl,es,Op,ml,Lp,pn,Wt,Hp,re,Fp,Rp,dn,ls,cn,ct,Gt,_l,os,Mp,gl,Vp,fn,Qt,zp,ie,Jp,Up,un,ns,hn,Kt,mn,ft,Xt,vl,rs,Yp,$l,Bp,_n,pe,Wp,gn,W,Gp,yl,Qp,Kp,wl,Xp,Zp,vn,ut,Zt,jl,is,td,bl,ad,$n,G,sd,de,ed,ld,ce,od,nd,yn,Q,rd,ql,id,pd,kl,dd,cd,wn,ps,jn,ta,fd,El,ud,hd,bn,ds,qn,fe,md,kn,cs,En,ue,_d,xn,fs,Pn,he,gd,An,us,Sn,ht,aa,xl,hs,vd,Pl,$d,Dn,me,yd,Tn,ms,Nn,sa,wd,Al,jd,bd,In,_s,Cn,ea,On,_e,Ln,mt,la,Sl,gs,qd,Dl,kd,Hn,ge,Ed,Fn,_t,oa,Tl,vs,xd,Nl,Pd,Rn,L,Ad,ve,Sd,Dd,Il,Td,Nd,Cl,Id,Cd,Mn,na,Od,$s,Ld,Hd,Vn,ys,zn,gt,ra,Ol,ws,Fd,Ll,Rd,Jn,H,Md,$e,Vd,zd,js,Jd,Ud,ye,Yd,Bd,Un,ia,Wd,we,Gd,Qd,Yn,bs,Bn,K,Kd,Hl,Xd,Zd,je,tc,ac,Wn,qs,Gn,be,sc,Qn,ks,Kn,vt,pa,Fl,Es,ec,Rl,lc,Xn,da,Zn,qe,oc,tr,xs,ar,ca,sr,$t,fa,Ml,Ps,nc,Vl,rc,er,X,ic,zl,pc,dc,ke,cc,fc,lr,As,or,yt,ua,Jl,Ss,uc,Ul,hc,nr,Ee,mc,rr,xe,_c,ir,Z,Yl,Ds,gc,Bl,vc,$c,yc,Wl,wt,wc,Gl,jc,bc,Ql,qc,kc,Ec,Kl,Ts,xc,Pe,Pc,Ac,pr,Ns,dr,ha,cr,ma,Sc,Xl,Dc,Tc,fr,Is,ur;return w=new S({}),Aa=new S({}),Da=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("lhoestq/demo1")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;lhoestq/demo1&quot;</span>)`}}),Ta=new E({props:{code:`dataset = load_dataset(
  "lhoestq/custom_squad",
  revision="main"  # tag name, or branch name, or commit hash
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;lhoestq/custom_squad&quot;</span>,
<span class="hljs-meta">... </span>  revision=<span class="hljs-string">&quot;main&quot;</span>  <span class="hljs-comment"># tag name, or branch name, or commit hash</span>
<span class="hljs-meta">... </span>)`}}),St=new Os({props:{$$slots:{default:[vh]},$$scope:{ctx:D}}}),Na=new E({props:{code:`data_files = {"train": "train.csv", "test": "test.csv"}
dataset = load_dataset("namespace/your_dataset_name", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;train.csv&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;test.csv&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;namespace/your_dataset_name&quot;</span>, data_files=data_files)`}}),Dt=new Os({props:{warning:!0,$$slots:{default:[$h]},$$scope:{ctx:D}}}),Ia=new E({props:{code:`from datasets import load_dataset
c4_subset = load_dataset("allenai/c4", data_files="en/c4-train.0000*-of-01024.json.gz")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=<span class="hljs-string">&quot;en/c4-train.0000*-of-01024.json.gz&quot;</span>)`}}),Ca=new E({props:{code:`data_files = {"validation": "en/c4-validation.*.json.gz"}
c4_validation = load_dataset("allenai/c4", data_files=data_files, split="validation")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;en/c4-validation.*.json.gz&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_validation = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;validation&quot;</span>)`}}),Oa=new S({}),La=new E({props:{code:`dataset = load_dataset("path/to/local/loading_script/loading_script.py", split="train")
dataset = load_dataset("path/to/local/loading_script", split="train")  # equivalent because the file has the same name as the directory`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script/loading_script.py&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)  <span class="hljs-comment"># equivalent because the file has the same name as the directory</span>`}}),Ha=new S({}),Fa=new E({props:{code:"git clone https://huggingface.co/datasets/eli5",highlighted:'git <span class="hljs-built_in">clone</span> https://huggingface.co/datasets/eli5'}}),Ra=new E({props:{code:`from datasets import load_dataset
eli5 = load_dataset("path/to/local/eli5")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>eli5 = load_dataset(<span class="hljs-string">&quot;path/to/local/eli5&quot;</span>)`}}),Ma=new S({}),Va=new S({}),za=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("csv", data_files="my_file.csv")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.csv&quot;</span>)`}}),Ja=new E({props:{code:'dataset = load_dataset("csv", data_files=["my_file_1.csv", "my_file_2.csv", "my_file_3.csv"])',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=[<span class="hljs-string">&quot;my_file_1.csv&quot;</span>, <span class="hljs-string">&quot;my_file_2.csv&quot;</span>, <span class="hljs-string">&quot;my_file_3.csv&quot;</span>])'}}),Ua=new E({props:{code:'dataset = load_dataset("csv", data_files={"train": ["my_train_file_1.csv", "my_train_file_2.csv"], "test": "my_test_file.csv"})',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: [<span class="hljs-string">&quot;my_train_file_1.csv&quot;</span>, <span class="hljs-string">&quot;my_train_file_2.csv&quot;</span>], <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;my_test_file.csv&quot;</span>})'}}),Ya=new E({props:{code:`base_url = "https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/"
dataset = load_dataset('csv', data_files={'train': base_url + 'train.csv', 'test': base_url + 'test.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: base_url + <span class="hljs-string">&#x27;train.csv&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: base_url + <span class="hljs-string">&#x27;test.csv&#x27;</span>})`}}),Ba=new E({props:{code:`url = "https://domain.org/train_data.zip"
data_files = {"train": url}
dataset = load_dataset("csv", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;https://domain.org/train_data.zip&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: url}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=data_files)`}}),Wa=new S({}),Ga=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>)`}}),Qa=new E({props:{code:`{"a": 1, "b": 2.0, "c": "foo", "d": false}
{"a": 4, "b": -5.5, "c": null, "d": true}`,highlighted:`<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2.0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;foo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-5.5</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">}</span>`}}),Ka=new E({props:{code:`
from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json", field="data")`,highlighted:`{<span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,
 <span class="hljs-string">&quot;data&quot;</span>: [{<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2.0</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>: false},
          {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;b&quot;</span>: -<span class="hljs-number">5.5</span>, <span class="hljs-string">&quot;c&quot;</span>: null, <span class="hljs-string">&quot;d&quot;</span>: true}]
}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),Xa=new E({props:{code:`base_url = "https://rajpurkar.github.io/SQuAD-explorer/dataset/"
dataset = load_dataset("json", data_files={"train": base_url + "train-v1.1.json", "validation": base_url + "dev-v1.1.json"}, field="data")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/dataset/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;train-v1.1.json&quot;</span>, <span class="hljs-string">&quot;validation&quot;</span>: base_url + <span class="hljs-string">&quot;dev-v1.1.json&quot;</span>}, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),Za=new S({}),ts=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("parquet", data_files={'train': 'train.parquet', 'test': 'test.parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;train.parquet&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-string">&#x27;test.parquet&#x27;</span>})`}}),as=new E({props:{code:`base_url = "https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/"
data_files = {"train": base_url + "wikipedia-train.parquet"}
wiki = load_dataset("parquet", data_files=data_files, split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;wikipedia-train.parquet&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),ss=new S({}),es=new S({}),ls=new E({props:{code:`from datasets import Dataset
my_dict = {"a": [1, 2, 3]}
dataset = Dataset.from_dict(my_dict)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>my_dict = {<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict(my_dict)`}}),os=new S({}),ns=new E({props:{code:`from datasets import Dataset
import pandas as pd
df = pd.DataFrame({"a": [1, 2, 3]})
dataset = Dataset.from_pandas(df)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd
<span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_pandas(df)`}}),Kt=new Os({props:{warning:!0,$$slots:{default:[yh]},$$scope:{ctx:D}}}),rs=new S({}),is=new S({}),ps=new lo({props:{group1:{id:"stringapi",code:'train_test_ds = datasets.load_dataset("bookcorpus", split="train+test")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train+test&quot;</span>)'},group2:{id:"readinstruction",code:`ri = datasets.ReadInstruction("train") + datasets.ReadInstruction("test")
train_test_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;test&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),ds=new lo({props:{group1:{id:"stringapi",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split="train[10:20]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[10:20]&quot;</span>)'},group2:{id:"readinstruction",code:`train_10_20_ds = datasets.load_dataset("bookcorpu"', split=datasets.ReadInstruction("train", from_=10, to=20, unit="abs"))`,highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpu&quot;</span><span class="hljs-string">&#x27;, split=datasets.ReadInstruction(&quot;train&quot;, from_=10, to=20, unit=&quot;abs&quot;))</span>'}}}),cs=new lo({props:{group1:{id:"stringapi",code:'train_10pct_ds = datasets.load_dataset("bookcorpus", split="train[:10%]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[:10%]&quot;</span>)'},group2:{id:"readinstruction",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", to=10, unit="%"))',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))'}}}),fs=new lo({props:{group1:{id:"stringapi",code:'train_10_80pct_ds = datasets.load_dataset("bookcorpus", split="tr"in[:10%]+train[-80%:]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;tr&quot;</span><span class="hljs-keyword">in</span>[:<span class="hljs-number">10</span>%]+train[-<span class="hljs-number">80</span>%:]<span class="hljs-string">&quot;)</span>'},group2:{id:"readinstruction",code:`ri = (datasets.ReadInstruction("train", to=10, unit="%") + datasets.ReadInstruction("train", from_=-80, unit="%"))
train_10_80pct_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = (datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=-<span class="hljs-number">80</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),us=new lo({props:{group1:{id:"stringapi",code:`val_ds = datasets.load_dataset("bookcorpus", split=[f"train[{k}%:{k+10}%]" for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", split=[f"train[:{k}%]+train[{k+10}%:]" for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[<span class="hljs-subst">{k}</span>%:<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[:<span class="hljs-subst">{k}</span>%]+train[<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%:]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`},group2:{id:"readinstruction",code:`val_ds = datasets.load_dataset("bookcorpus", [datasets.ReadInstruction("train", from_=k, to=k+10, unit="%") for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", [(datasets.ReadInstruction("train", to=k, unit="%") + datasets.ReadInstruction("train", from_=k+10, unit="%")) for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k, to=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [(datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=k, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>)) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`}}}),hs=new S({}),ms=new E({props:{code:`train_50_52_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%]")
train_52_54_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%]")`,highlighted:`<span class="hljs-comment"># 19 records, from 500 (included) to 519 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%]&quot;</span>)
<span class="hljs-comment"># 20 records, from 519 (included) to 539 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%]&quot;</span>)`}}),_s=new E({props:{code:`train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", from_=50, to=52, unit="%", rounding="pct1_dropremainder"))
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train",from_=52, to=54, unit="%", rounding="pct1_dropremainder"))
train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%](pct1_dropremainder)")
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%](pct1_dropremainder)")`,highlighted:`<span class="hljs-comment"># 18 records, from 450 (included) to 468 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=<span class="hljs-number">50</span>, to=<span class="hljs-number">52</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># 18 records, from 468 (included) to 486 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>,from_=<span class="hljs-number">52</span>, to=<span class="hljs-number">54</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># Or equivalently:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%](pct1_dropremainder)&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%](pct1_dropremainder)&quot;</span>)`}}),ea=new Os({props:{warning:!0,$$slots:{default:[wh]},$$scope:{ctx:D}}}),gs=new S({}),vs=new S({}),ys=new E({props:{code:'dataset = load_dataset("matinf", "summarization")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;matinf&quot;</span>, <span class="hljs-string">&quot;summarization&quot;</span>)
Downloading <span class="hljs-keyword">and</span> preparing dataset matinf/summarization (download: Unknown size, generated: <span class="hljs-number">246.89</span> MiB, post-processed: Unknown size, total: <span class="hljs-number">246.89</span> MiB) to /root/.cache/huggingface/datasets/matinf/summarization/<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>/82eee5e71c3ceaf20d909bca36ff237452b4e4ab195d3be7ee1c78b53e6f540e...
AssertionError: The dataset matinf <span class="hljs-keyword">with</span> config summarization requires manual data. 
Please follow the manual download instructions: To use MATINF you have to download it manually. Please fill this google form (https://forms.gle/nkH4LVE4iNQeDzsc9). You will receive a download link <span class="hljs-keyword">and</span> a password once you complete the form. Please extract <span class="hljs-built_in">all</span> files <span class="hljs-keyword">in</span> one folder <span class="hljs-keyword">and</span> load the dataset <span class="hljs-keyword">with</span>: *datasets.load_dataset(<span class="hljs-string">&#x27;matinf&#x27;</span>, data_dir=<span class="hljs-string">&#x27;path/to/folder/folder_name&#x27;</span>)*. 
Manual data can be loaded <span class="hljs-keyword">with</span> \`datasets.load_dataset(matinf, data_dir=<span class="hljs-string">&#x27;&lt;path/to/manual/data&gt;&#x27;</span>) `}}),ws=new S({}),bs=new E({props:{code:`class_names = ["sadness", "joy", "love", "anger", "fear", "surprise"]
emotion_features = Features({'text': Value('string'), 'label': ClassLabel(names=class_names)})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>class_names = [<span class="hljs-string">&quot;sadness&quot;</span>, <span class="hljs-string">&quot;joy&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;anger&quot;</span>, <span class="hljs-string">&quot;fear&quot;</span>, <span class="hljs-string">&quot;surprise&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>emotion_features = Features({<span class="hljs-string">&#x27;text&#x27;</span>: Value(<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=class_names)})`}}),qs=new E({props:{code:"dataset = load_dataset('csv', data_files=file_dict, delimiter=';', column_names=['text', 'label'], features=emotion_features)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files=file_dict, delimiter=<span class="hljs-string">&#x27;;&#x27;</span>, column_names=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>], features=emotion_features)'}}),ks=new E({props:{code:"dataset['train'].features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&#x27;train&#x27;</span>].features
{<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">6</span>, names=[<span class="hljs-string">&#x27;sadness&#x27;</span>, <span class="hljs-string">&#x27;joy&#x27;</span>, <span class="hljs-string">&#x27;love&#x27;</span>, <span class="hljs-string">&#x27;anger&#x27;</span>, <span class="hljs-string">&#x27;fear&#x27;</span>, <span class="hljs-string">&#x27;surprise&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Es=new S({}),da=new Os({props:{warning:!0,$$slots:{default:[jh]},$$scope:{ctx:D}}}),xs=new E({props:{code:`from datasets import load_metric
metric = load_metric('PATH/TO/MY/METRIC/SCRIPT')

# Example of typical usage
for batch in dataset:
    inputs, references = batch
    predictions = model(inputs)
    metric.add_batch(predictions=predictions, references=references)
score = metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;PATH/TO/MY/METRIC/SCRIPT&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Example of typical usage</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> dataset:
<span class="hljs-meta">... </span>    inputs, references = batch
<span class="hljs-meta">... </span>    predictions = model(inputs)
<span class="hljs-meta">... </span>    metric.add_batch(predictions=predictions, references=references)
<span class="hljs-meta">&gt;&gt;&gt; </span>score = metric.compute()`}}),ca=new Os({props:{$$slots:{default:[bh]},$$scope:{ctx:D}}}),Ps=new S({}),As=new E({props:{code:`from datasets import load_metric
metric = load_metric('bleurt', name='bleurt-base-128')
metric = load_metric('bleurt', name='bleurt-base-512')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-128&#x27;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-512&#x27;</span>)</span>`}}),Ss=new S({}),Ns=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=rank)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=rank)`}}),ha=new Os({props:{$$slots:{default:[qh]},$$scope:{ctx:D}}}),Is=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=process_id, experiment_id="My_experiment_10")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=process_id, experiment_id=<span class="hljs-string">&quot;My_experiment_10&quot;</span>)`}}),{c(){u=l("meta"),k=d(),y=l("h1"),b=l("a"),q=l("span"),h(w.$$.fragment),j=d(),x=l("span"),tt=r("Load"),jt=d(),J=l("p"),at=r("Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),bt=d(),U=l("p"),Y=r("This guide will show you how to load a dataset from:"),qt=d(),A=l("ul"),M=l("li"),$a=r("The Hub without a dataset loading script"),ya=d(),V=l("li"),wa=r("Local loading script"),ja=d(),O=l("li"),ba=r("Local files"),qa=d(),z=l("li"),P=r("In-memory data"),Ls=d(),kt=l("li"),Hs=r("Offline"),Fs=d(),Et=l("li"),Rs=r("A specific slice of a split"),ka=d(),I=l("p"),Xr=r("For more details specific to loading other dataset modalities, take a look at the "),Ea=l("a"),Zr=r("load audio dataset guide"),ti=r(", the "),xa=l("a"),ai=r("load image dataset guide"),si=r(", or the "),Pa=l("a"),ei=r("load text dataset guide"),li=r("."),oo=d(),Ms=l("a"),no=d(),st=l("h2"),xt=l("a"),Le=l("span"),h(Aa.$$.fragment),oi=d(),He=l("span"),ni=r("Hugging Face Hub"),ro=d(),B=l("p"),ri=r("Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),Vs=l("a"),ii=r("creating a dataset repository"),pi=r(" and upload your data files. Now you can use the "),zs=l("a"),di=r("load_dataset()"),ci=r(" function to load the dataset."),io=d(),Pt=l("p"),fi=r("For example, try loading the files from this "),Sa=l("a"),ui=r("demo repository"),hi=r(" by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),po=d(),h(Da.$$.fragment),co=d(),At=l("p"),mi=r("Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),Fe=l("code"),_i=r("revision"),gi=r(" parameter to specify the dataset version you want to load:"),fo=d(),h(Ta.$$.fragment),uo=d(),h(St.$$.fragment),ho=d(),T=l("p"),vi=r("A dataset without a loading script by default loads all the data into the "),Re=l("code"),$i=r("train"),yi=r(" split. Use the "),Me=l("code"),wi=r("data_files"),ji=r(" parameter to map data files to splits like "),Ve=l("code"),bi=r("train"),qi=r(", "),ze=l("code"),ki=r("validation"),Ei=r(" and "),Je=l("code"),xi=r("test"),Pi=r(":"),mo=d(),h(Na.$$.fragment),_o=d(),h(Dt.$$.fragment),go=d(),Tt=l("p"),Ai=r("You can also load a specific subset of the files with the "),Ue=l("code"),Si=r("data_files"),Di=r(" parameter. The example below only loads files that match the grep pattern:"),vo=d(),h(Ia.$$.fragment),$o=d(),Nt=l("p"),Ti=r("The "),Ye=l("code"),Ni=r("split"),Ii=r(" parameter can also map a data file to a specific split:"),yo=d(),h(Ca.$$.fragment),wo=d(),et=l("h2"),It=l("a"),Be=l("span"),h(Oa.$$.fragment),Ci=d(),We=l("span"),Oi=r("Local loading script"),jo=d(),Ct=l("p"),Li=r("You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),Js=l("a"),Hi=r("load_dataset()"),Fi=r(":"),bo=d(),Ot=l("ul"),Ge=l("li"),Ri=r("The local path to the loading script file."),Mi=d(),Qe=l("li"),Vi=r("The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),qo=d(),h(La.$$.fragment),ko=d(),lt=l("h3"),Lt=l("a"),Ke=l("span"),h(Ha.$$.fragment),zi=d(),Xe=l("span"),Ji=r("Edit loading script"),Eo=d(),Us=l("p"),Ui=r("You can also edit a loading script from the Hub to add your own modifications. Download the dataset repository locally so any data files referenced by a relative path in the loading script can be loaded:"),xo=d(),h(Fa.$$.fragment),Po=d(),Ht=l("p"),Yi=r("Make your edits to the loading script and then load it by passing its local path to "),Ys=l("a"),Bi=r("load_dataset()"),Wi=r(":"),Ao=d(),h(Ra.$$.fragment),So=d(),ot=l("h2"),Ft=l("a"),Ze=l("span"),h(Ma.$$.fragment),Gi=d(),tl=l("span"),Qi=r("Local and remote files"),Do=d(),N=l("p"),Ki=r("Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),al=l("code"),Xi=r("csv"),Zi=r(", "),sl=l("code"),tp=r("json"),ap=r(", "),el=l("code"),sp=r("txt"),ep=r(" or "),ll=l("code"),lp=r("parquet"),op=r(" file. The "),Bs=l("a"),np=r("load_dataset()"),rp=r(" function can load each of these file types."),To=d(),nt=l("h3"),Rt=l("a"),ol=l("span"),h(Va.$$.fragment),ip=d(),nl=l("span"),pp=r("CSV"),No=d(),Ws=l("p"),dp=r("\u{1F917} Datasets can read a dataset made up of one or several CSV files:"),Io=d(),h(za.$$.fragment),Co=d(),Gs=l("p"),cp=r("If you have more than one CSV file:"),Oo=d(),h(Ja.$$.fragment),Lo=d(),Qs=l("p"),fp=r("You can also map the training and test splits to specific CSV files:"),Ho=d(),h(Ua.$$.fragment),Fo=d(),Ks=l("p"),up=r("To load remote CSV files via HTTP, pass the URLs instead:"),Ro=d(),h(Ya.$$.fragment),Mo=d(),Xs=l("p"),hp=r("To load zipped CSV files:"),Vo=d(),h(Ba.$$.fragment),zo=d(),rt=l("h3"),Mt=l("a"),rl=l("span"),h(Wa.$$.fragment),mp=d(),il=l("span"),_p=r("JSON"),Jo=d(),Vt=l("p"),gp=r("JSON files are loaded directly with "),Zs=l("a"),vp=r("load_dataset()"),$p=r(" as shown below:"),Uo=d(),h(Ga.$$.fragment),Yo=d(),te=l("p"),yp=r("JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),Bo=d(),h(Qa.$$.fragment),Wo=d(),zt=l("p"),wp=r("Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),pl=l("code"),jp=r("field"),bp=r(" argument as shown in the following:"),Go=d(),h(Ka.$$.fragment),Qo=d(),ae=l("p"),qp=r("To load remote JSON files via HTTP, pass the URLs instead:"),Ko=d(),h(Xa.$$.fragment),Xo=d(),se=l("p"),kp=r("While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),Zo=d(),it=l("h3"),Jt=l("a"),dl=l("span"),h(Za.$$.fragment),Ep=d(),cl=l("span"),xp=r("Parquet"),tn=d(),ee=l("p"),Pp=r("Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),an=d(),le=l("p"),Ap=r("To load a Parquet file:"),sn=d(),h(ts.$$.fragment),en=d(),oe=l("p"),Sp=r("To load remote Parquet files via HTTP, pass the URLs instead:"),ln=d(),h(as.$$.fragment),on=d(),pt=l("h2"),Ut=l("a"),fl=l("span"),h(ss.$$.fragment),Dp=d(),ul=l("span"),Tp=r("In-memory data"),nn=d(),Yt=l("p"),Np=r("\u{1F917} Datasets will also allow you to create a "),ne=l("a"),Ip=r("Dataset"),Cp=r(" directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),rn=d(),dt=l("h3"),Bt=l("a"),hl=l("span"),h(es.$$.fragment),Op=d(),ml=l("span"),Lp=r("Python dictionary"),pn=d(),Wt=l("p"),Hp=r("Load Python dictionaries with "),re=l("a"),Fp=r("from_dict()"),Rp=r(":"),dn=d(),h(ls.$$.fragment),cn=d(),ct=l("h3"),Gt=l("a"),_l=l("span"),h(os.$$.fragment),Mp=d(),gl=l("span"),Vp=r("Pandas DataFrame"),fn=d(),Qt=l("p"),zp=r("Load Pandas DataFrames with "),ie=l("a"),Jp=r("from_pandas()"),Up=r(":"),un=d(),h(ns.$$.fragment),hn=d(),h(Kt.$$.fragment),mn=d(),ft=l("h2"),Xt=l("a"),vl=l("span"),h(rs.$$.fragment),Yp=d(),$l=l("span"),Bp=r("Offline"),_n=d(),pe=l("p"),Wp=r("Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub or \u{1F917} Datasets GitHub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),gn=d(),W=l("p"),Gp=r("If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),yl=l("code"),Qp=r("HF_DATASETS_OFFLINE"),Kp=r(" to "),wl=l("code"),Xp=r("1"),Zp=r(" to enable full offline mode."),vn=d(),ut=l("h2"),Zt=l("a"),jl=l("span"),h(is.$$.fragment),td=d(),bl=l("span"),ad=r("Slice splits"),$n=d(),G=l("p"),sd=r("You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),de=l("a"),ed=r("ReadInstruction"),ld=r(" API. Strings are more compact and readable for simple cases, while "),ce=l("a"),od=r("ReadInstruction"),nd=r(" is easier to use with variable slicing parameters."),yn=d(),Q=l("p"),rd=r("Concatenate a "),ql=l("code"),id=r("train"),pd=r(" and "),kl=l("code"),dd=r("test"),cd=r(" split by:"),wn=d(),h(ps.$$.fragment),jn=d(),ta=l("p"),fd=r("Select specific rows of the "),El=l("code"),ud=r("train"),hd=r(" split:"),bn=d(),h(ds.$$.fragment),qn=d(),fe=l("p"),md=r("Or select a percentage of a split with:"),kn=d(),h(cs.$$.fragment),En=d(),ue=l("p"),_d=r("Select a combination of percentages from each split:"),xn=d(),h(fs.$$.fragment),Pn=d(),he=l("p"),gd=r("Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),An=d(),h(us.$$.fragment),Sn=d(),ht=l("h3"),aa=l("a"),xl=l("span"),h(hs.$$.fragment),vd=d(),Pl=l("span"),$d=r("Percent slicing and rounding"),Dn=d(),me=l("p"),yd=r("The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),Tn=d(),h(ms.$$.fragment),Nn=d(),sa=l("p"),wd=r("If you want equal sized splits, use "),Al=l("code"),jd=r("pct1_dropremainder"),bd=r(" rounding instead. This treats the specified percentage boundaries as multiples of 1%."),In=d(),h(_s.$$.fragment),Cn=d(),h(ea.$$.fragment),On=d(),_e=l("a"),Ln=d(),mt=l("h2"),la=l("a"),Sl=l("span"),h(gs.$$.fragment),qd=d(),Dl=l("span"),kd=r("Troubleshooting"),Hn=d(),ge=l("p"),Ed=r("Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),Fn=d(),_t=l("h3"),oa=l("a"),Tl=l("span"),h(vs.$$.fragment),xd=d(),Nl=l("span"),Pd=r("Manual download"),Rn=d(),L=l("p"),Ad=r("Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),ve=l("a"),Sd=r("load_dataset()"),Dd=r(" to throw an "),Il=l("code"),Td=r("AssertionError"),Nd=r(". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),Cl=l("code"),Id=r("data_dir"),Cd=r(" argument to specify the path to the files you just downloaded."),Mn=d(),na=l("p"),Od=r("For example, if you try to download a configuration from the "),$s=l("a"),Ld=r("MATINF"),Hd=r(" dataset:"),Vn=d(),h(ys.$$.fragment),zn=d(),gt=l("h3"),ra=l("a"),Ol=l("span"),h(ws.$$.fragment),Fd=d(),Ll=l("span"),Rd=r("Specify features"),Jn=d(),H=l("p"),Md=r("When you create a dataset from local files, the "),$e=l("a"),Vd=r("Features"),zd=r(" are automatically inferred by "),js=l("a"),Jd=r("Apache Arrow"),Ud=r(". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),ye=l("a"),Yd=r("ClassLabel"),Bd=r(" feature."),Un=d(),ia=l("p"),Wd=r("Start by defining your own labels with the "),we=l("a"),Gd=r("Features"),Qd=r(" class:"),Yn=d(),h(bs.$$.fragment),Bn=d(),K=l("p"),Kd=r("Next, specify the "),Hl=l("code"),Xd=r("features"),Zd=r(" parameter in "),je=l("a"),tc=r("load_dataset()"),ac=r(" with the features you just created:"),Wn=d(),h(qs.$$.fragment),Gn=d(),be=l("p"),sc=r("Now when you look at your dataset features, you can see it uses the custom labels you defined:"),Qn=d(),h(ks.$$.fragment),Kn=d(),vt=l("h2"),pa=l("a"),Fl=l("span"),h(Es.$$.fragment),ec=d(),Rl=l("span"),lc=r("Metrics"),Xn=d(),h(da.$$.fragment),Zn=d(),qe=l("p"),oc=r("When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),tr=d(),h(xs.$$.fragment),ar=d(),h(ca.$$.fragment),sr=d(),$t=l("h3"),fa=l("a"),Ml=l("span"),h(Ps.$$.fragment),nc=d(),Vl=l("span"),rc=r("Load configurations"),er=d(),X=l("p"),ic=r("It is possible for a metric to have different configurations. The configurations are stored in the "),zl=l("code"),pc=r("config_name"),dc=r(" parameter in "),ke=l("a"),cc=r("MetricInfo"),fc=r(" attribute. When you load a metric, provide the configuration name as shown in the following:"),lr=d(),h(As.$$.fragment),or=d(),yt=l("h3"),ua=l("a"),Jl=l("span"),h(Ss.$$.fragment),uc=d(),Ul=l("span"),hc=r("Distributed setup"),nr=d(),Ee=l("p"),mc=r("When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),rr=d(),xe=l("p"),_c=r("For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),ir=d(),Z=l("ol"),Yl=l("li"),Ds=l("p"),gc=r("Define the total number of processes with the "),Bl=l("code"),vc=r("num_process"),$c=r(" argument."),yc=d(),Wl=l("li"),wt=l("p"),wc=r("Set the process "),Gl=l("code"),jc=r("rank"),bc=r(" as an integer between zero and "),Ql=l("code"),qc=r("num_process - 1"),kc=r("."),Ec=d(),Kl=l("li"),Ts=l("p"),xc=r("Load your metric with "),Pe=l("a"),Pc=r("load_metric()"),Ac=r(" with these arguments:"),pr=d(),h(Ns.$$.fragment),dr=d(),h(ha.$$.fragment),cr=d(),ma=l("p"),Sc=r("In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),Xl=l("code"),Dc=r("experiment_id"),Tc=r(" to distinguish the separate evaluations:"),fr=d(),h(Is.$$.fragment),this.h()},l(t){const e=_h('[data-svelte="svelte-1phssyn"]',document.head);u=o(e,"META",{name:!0,content:!0}),e.forEach(a),k=c(t),y=o(t,"H1",{class:!0});var Cs=n(y);b=o(Cs,"A",{id:!0,class:!0,href:!0});var Zl=n(b);q=o(Zl,"SPAN",{});var to=n(q);m(w.$$.fragment,to),to.forEach(a),Zl.forEach(a),j=c(Cs),x=o(Cs,"SPAN",{});var ao=n(x);tt=i(ao,"Load"),ao.forEach(a),Cs.forEach(a),jt=c(t),J=o(t,"P",{});var so=n(J);at=i(so,"Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),so.forEach(a),bt=c(t),U=o(t,"P",{});var eo=n(U);Y=i(eo,"This guide will show you how to load a dataset from:"),eo.forEach(a),qt=c(t),A=o(t,"UL",{});var C=n(A);M=o(C,"LI",{});var Nc=n(M);$a=i(Nc,"The Hub without a dataset loading script"),Nc.forEach(a),ya=c(C),V=o(C,"LI",{});var Ic=n(V);wa=i(Ic,"Local loading script"),Ic.forEach(a),ja=c(C),O=o(C,"LI",{});var Cc=n(O);ba=i(Cc,"Local files"),Cc.forEach(a),qa=c(C),z=o(C,"LI",{});var Oc=n(z);P=i(Oc,"In-memory data"),Oc.forEach(a),Ls=c(C),kt=o(C,"LI",{});var Lc=n(kt);Hs=i(Lc,"Offline"),Lc.forEach(a),Fs=c(C),Et=o(C,"LI",{});var Hc=n(Et);Rs=i(Hc,"A specific slice of a split"),Hc.forEach(a),C.forEach(a),ka=c(t),I=o(t,"P",{});var _a=n(I);Xr=i(_a,"For more details specific to loading other dataset modalities, take a look at the "),Ea=o(_a,"A",{class:!0,href:!0});var Fc=n(Ea);Zr=i(Fc,"load audio dataset guide"),Fc.forEach(a),ti=i(_a,", the "),xa=o(_a,"A",{class:!0,href:!0});var Rc=n(xa);ai=i(Rc,"load image dataset guide"),Rc.forEach(a),si=i(_a,", or the "),Pa=o(_a,"A",{class:!0,href:!0});var Mc=n(Pa);ei=i(Mc,"load text dataset guide"),Mc.forEach(a),li=i(_a,"."),_a.forEach(a),oo=c(t),Ms=o(t,"A",{id:!0}),n(Ms).forEach(a),no=c(t),st=o(t,"H2",{class:!0});var hr=n(st);xt=o(hr,"A",{id:!0,class:!0,href:!0});var Vc=n(xt);Le=o(Vc,"SPAN",{});var zc=n(Le);m(Aa.$$.fragment,zc),zc.forEach(a),Vc.forEach(a),oi=c(hr),He=o(hr,"SPAN",{});var Jc=n(He);ni=i(Jc,"Hugging Face Hub"),Jc.forEach(a),hr.forEach(a),ro=c(t),B=o(t,"P",{});var Ae=n(B);ri=i(Ae,"Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),Vs=o(Ae,"A",{href:!0});var Uc=n(Vs);ii=i(Uc,"creating a dataset repository"),Uc.forEach(a),pi=i(Ae," and upload your data files. Now you can use the "),zs=o(Ae,"A",{href:!0});var Yc=n(zs);di=i(Yc,"load_dataset()"),Yc.forEach(a),ci=i(Ae," function to load the dataset."),Ae.forEach(a),io=c(t),Pt=o(t,"P",{});var mr=n(Pt);fi=i(mr,"For example, try loading the files from this "),Sa=o(mr,"A",{href:!0,rel:!0});var Bc=n(Sa);ui=i(Bc,"demo repository"),Bc.forEach(a),hi=i(mr," by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),mr.forEach(a),po=c(t),m(Da.$$.fragment,t),co=c(t),At=o(t,"P",{});var _r=n(At);mi=i(_r,"Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),Fe=o(_r,"CODE",{});var Wc=n(Fe);_i=i(Wc,"revision"),Wc.forEach(a),gi=i(_r," parameter to specify the dataset version you want to load:"),_r.forEach(a),fo=c(t),m(Ta.$$.fragment,t),uo=c(t),m(St.$$.fragment,t),ho=c(t),T=o(t,"P",{});var F=n(T);vi=i(F,"A dataset without a loading script by default loads all the data into the "),Re=o(F,"CODE",{});var Gc=n(Re);$i=i(Gc,"train"),Gc.forEach(a),yi=i(F," split. Use the "),Me=o(F,"CODE",{});var Qc=n(Me);wi=i(Qc,"data_files"),Qc.forEach(a),ji=i(F," parameter to map data files to splits like "),Ve=o(F,"CODE",{});var Kc=n(Ve);bi=i(Kc,"train"),Kc.forEach(a),qi=i(F,", "),ze=o(F,"CODE",{});var Xc=n(ze);ki=i(Xc,"validation"),Xc.forEach(a),Ei=i(F," and "),Je=o(F,"CODE",{});var Zc=n(Je);xi=i(Zc,"test"),Zc.forEach(a),Pi=i(F,":"),F.forEach(a),mo=c(t),m(Na.$$.fragment,t),_o=c(t),m(Dt.$$.fragment,t),go=c(t),Tt=o(t,"P",{});var gr=n(Tt);Ai=i(gr,"You can also load a specific subset of the files with the "),Ue=o(gr,"CODE",{});var tf=n(Ue);Si=i(tf,"data_files"),tf.forEach(a),Di=i(gr," parameter. The example below only loads files that match the grep pattern:"),gr.forEach(a),vo=c(t),m(Ia.$$.fragment,t),$o=c(t),Nt=o(t,"P",{});var vr=n(Nt);Ti=i(vr,"The "),Ye=o(vr,"CODE",{});var af=n(Ye);Ni=i(af,"split"),af.forEach(a),Ii=i(vr," parameter can also map a data file to a specific split:"),vr.forEach(a),yo=c(t),m(Ca.$$.fragment,t),wo=c(t),et=o(t,"H2",{class:!0});var $r=n(et);It=o($r,"A",{id:!0,class:!0,href:!0});var sf=n(It);Be=o(sf,"SPAN",{});var ef=n(Be);m(Oa.$$.fragment,ef),ef.forEach(a),sf.forEach(a),Ci=c($r),We=o($r,"SPAN",{});var lf=n(We);Oi=i(lf,"Local loading script"),lf.forEach(a),$r.forEach(a),jo=c(t),Ct=o(t,"P",{});var yr=n(Ct);Li=i(yr,"You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),Js=o(yr,"A",{href:!0});var of=n(Js);Hi=i(of,"load_dataset()"),of.forEach(a),Fi=i(yr,":"),yr.forEach(a),bo=c(t),Ot=o(t,"UL",{});var wr=n(Ot);Ge=o(wr,"LI",{});var nf=n(Ge);Ri=i(nf,"The local path to the loading script file."),nf.forEach(a),Mi=c(wr),Qe=o(wr,"LI",{});var rf=n(Qe);Vi=i(rf,"The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),rf.forEach(a),wr.forEach(a),qo=c(t),m(La.$$.fragment,t),ko=c(t),lt=o(t,"H3",{class:!0});var jr=n(lt);Lt=o(jr,"A",{id:!0,class:!0,href:!0});var pf=n(Lt);Ke=o(pf,"SPAN",{});var df=n(Ke);m(Ha.$$.fragment,df),df.forEach(a),pf.forEach(a),zi=c(jr),Xe=o(jr,"SPAN",{});var cf=n(Xe);Ji=i(cf,"Edit loading script"),cf.forEach(a),jr.forEach(a),Eo=c(t),Us=o(t,"P",{});var ff=n(Us);Ui=i(ff,"You can also edit a loading script from the Hub to add your own modifications. Download the dataset repository locally so any data files referenced by a relative path in the loading script can be loaded:"),ff.forEach(a),xo=c(t),m(Fa.$$.fragment,t),Po=c(t),Ht=o(t,"P",{});var br=n(Ht);Yi=i(br,"Make your edits to the loading script and then load it by passing its local path to "),Ys=o(br,"A",{href:!0});var uf=n(Ys);Bi=i(uf,"load_dataset()"),uf.forEach(a),Wi=i(br,":"),br.forEach(a),Ao=c(t),m(Ra.$$.fragment,t),So=c(t),ot=o(t,"H2",{class:!0});var qr=n(ot);Ft=o(qr,"A",{id:!0,class:!0,href:!0});var hf=n(Ft);Ze=o(hf,"SPAN",{});var mf=n(Ze);m(Ma.$$.fragment,mf),mf.forEach(a),hf.forEach(a),Gi=c(qr),tl=o(qr,"SPAN",{});var _f=n(tl);Qi=i(_f,"Local and remote files"),_f.forEach(a),qr.forEach(a),Do=c(t),N=o(t,"P",{});var R=n(N);Ki=i(R,"Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),al=o(R,"CODE",{});var gf=n(al);Xi=i(gf,"csv"),gf.forEach(a),Zi=i(R,", "),sl=o(R,"CODE",{});var vf=n(sl);tp=i(vf,"json"),vf.forEach(a),ap=i(R,", "),el=o(R,"CODE",{});var $f=n(el);sp=i($f,"txt"),$f.forEach(a),ep=i(R," or "),ll=o(R,"CODE",{});var yf=n(ll);lp=i(yf,"parquet"),yf.forEach(a),op=i(R," file. The "),Bs=o(R,"A",{href:!0});var wf=n(Bs);np=i(wf,"load_dataset()"),wf.forEach(a),rp=i(R," function can load each of these file types."),R.forEach(a),To=c(t),nt=o(t,"H3",{class:!0});var kr=n(nt);Rt=o(kr,"A",{id:!0,class:!0,href:!0});var jf=n(Rt);ol=o(jf,"SPAN",{});var bf=n(ol);m(Va.$$.fragment,bf),bf.forEach(a),jf.forEach(a),ip=c(kr),nl=o(kr,"SPAN",{});var qf=n(nl);pp=i(qf,"CSV"),qf.forEach(a),kr.forEach(a),No=c(t),Ws=o(t,"P",{});var kf=n(Ws);dp=i(kf,"\u{1F917} Datasets can read a dataset made up of one or several CSV files:"),kf.forEach(a),Io=c(t),m(za.$$.fragment,t),Co=c(t),Gs=o(t,"P",{});var Ef=n(Gs);cp=i(Ef,"If you have more than one CSV file:"),Ef.forEach(a),Oo=c(t),m(Ja.$$.fragment,t),Lo=c(t),Qs=o(t,"P",{});var xf=n(Qs);fp=i(xf,"You can also map the training and test splits to specific CSV files:"),xf.forEach(a),Ho=c(t),m(Ua.$$.fragment,t),Fo=c(t),Ks=o(t,"P",{});var Pf=n(Ks);up=i(Pf,"To load remote CSV files via HTTP, pass the URLs instead:"),Pf.forEach(a),Ro=c(t),m(Ya.$$.fragment,t),Mo=c(t),Xs=o(t,"P",{});var Af=n(Xs);hp=i(Af,"To load zipped CSV files:"),Af.forEach(a),Vo=c(t),m(Ba.$$.fragment,t),zo=c(t),rt=o(t,"H3",{class:!0});var Er=n(rt);Mt=o(Er,"A",{id:!0,class:!0,href:!0});var Sf=n(Mt);rl=o(Sf,"SPAN",{});var Df=n(rl);m(Wa.$$.fragment,Df),Df.forEach(a),Sf.forEach(a),mp=c(Er),il=o(Er,"SPAN",{});var Tf=n(il);_p=i(Tf,"JSON"),Tf.forEach(a),Er.forEach(a),Jo=c(t),Vt=o(t,"P",{});var xr=n(Vt);gp=i(xr,"JSON files are loaded directly with "),Zs=o(xr,"A",{href:!0});var Nf=n(Zs);vp=i(Nf,"load_dataset()"),Nf.forEach(a),$p=i(xr," as shown below:"),xr.forEach(a),Uo=c(t),m(Ga.$$.fragment,t),Yo=c(t),te=o(t,"P",{});var If=n(te);yp=i(If,"JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),If.forEach(a),Bo=c(t),m(Qa.$$.fragment,t),Wo=c(t),zt=o(t,"P",{});var Pr=n(zt);wp=i(Pr,"Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),pl=o(Pr,"CODE",{});var Cf=n(pl);jp=i(Cf,"field"),Cf.forEach(a),bp=i(Pr," argument as shown in the following:"),Pr.forEach(a),Go=c(t),m(Ka.$$.fragment,t),Qo=c(t),ae=o(t,"P",{});var Of=n(ae);qp=i(Of,"To load remote JSON files via HTTP, pass the URLs instead:"),Of.forEach(a),Ko=c(t),m(Xa.$$.fragment,t),Xo=c(t),se=o(t,"P",{});var Lf=n(se);kp=i(Lf,"While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),Lf.forEach(a),Zo=c(t),it=o(t,"H3",{class:!0});var Ar=n(it);Jt=o(Ar,"A",{id:!0,class:!0,href:!0});var Hf=n(Jt);dl=o(Hf,"SPAN",{});var Ff=n(dl);m(Za.$$.fragment,Ff),Ff.forEach(a),Hf.forEach(a),Ep=c(Ar),cl=o(Ar,"SPAN",{});var Rf=n(cl);xp=i(Rf,"Parquet"),Rf.forEach(a),Ar.forEach(a),tn=c(t),ee=o(t,"P",{});var Mf=n(ee);Pp=i(Mf,"Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),Mf.forEach(a),an=c(t),le=o(t,"P",{});var Vf=n(le);Ap=i(Vf,"To load a Parquet file:"),Vf.forEach(a),sn=c(t),m(ts.$$.fragment,t),en=c(t),oe=o(t,"P",{});var zf=n(oe);Sp=i(zf,"To load remote Parquet files via HTTP, pass the URLs instead:"),zf.forEach(a),ln=c(t),m(as.$$.fragment,t),on=c(t),pt=o(t,"H2",{class:!0});var Sr=n(pt);Ut=o(Sr,"A",{id:!0,class:!0,href:!0});var Jf=n(Ut);fl=o(Jf,"SPAN",{});var Uf=n(fl);m(ss.$$.fragment,Uf),Uf.forEach(a),Jf.forEach(a),Dp=c(Sr),ul=o(Sr,"SPAN",{});var Yf=n(ul);Tp=i(Yf,"In-memory data"),Yf.forEach(a),Sr.forEach(a),nn=c(t),Yt=o(t,"P",{});var Dr=n(Yt);Np=i(Dr,"\u{1F917} Datasets will also allow you to create a "),ne=o(Dr,"A",{href:!0});var Bf=n(ne);Ip=i(Bf,"Dataset"),Bf.forEach(a),Cp=i(Dr," directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),Dr.forEach(a),rn=c(t),dt=o(t,"H3",{class:!0});var Tr=n(dt);Bt=o(Tr,"A",{id:!0,class:!0,href:!0});var Wf=n(Bt);hl=o(Wf,"SPAN",{});var Gf=n(hl);m(es.$$.fragment,Gf),Gf.forEach(a),Wf.forEach(a),Op=c(Tr),ml=o(Tr,"SPAN",{});var Qf=n(ml);Lp=i(Qf,"Python dictionary"),Qf.forEach(a),Tr.forEach(a),pn=c(t),Wt=o(t,"P",{});var Nr=n(Wt);Hp=i(Nr,"Load Python dictionaries with "),re=o(Nr,"A",{href:!0});var Kf=n(re);Fp=i(Kf,"from_dict()"),Kf.forEach(a),Rp=i(Nr,":"),Nr.forEach(a),dn=c(t),m(ls.$$.fragment,t),cn=c(t),ct=o(t,"H3",{class:!0});var Ir=n(ct);Gt=o(Ir,"A",{id:!0,class:!0,href:!0});var Xf=n(Gt);_l=o(Xf,"SPAN",{});var Zf=n(_l);m(os.$$.fragment,Zf),Zf.forEach(a),Xf.forEach(a),Mp=c(Ir),gl=o(Ir,"SPAN",{});var tu=n(gl);Vp=i(tu,"Pandas DataFrame"),tu.forEach(a),Ir.forEach(a),fn=c(t),Qt=o(t,"P",{});var Cr=n(Qt);zp=i(Cr,"Load Pandas DataFrames with "),ie=o(Cr,"A",{href:!0});var au=n(ie);Jp=i(au,"from_pandas()"),au.forEach(a),Up=i(Cr,":"),Cr.forEach(a),un=c(t),m(ns.$$.fragment,t),hn=c(t),m(Kt.$$.fragment,t),mn=c(t),ft=o(t,"H2",{class:!0});var Or=n(ft);Xt=o(Or,"A",{id:!0,class:!0,href:!0});var su=n(Xt);vl=o(su,"SPAN",{});var eu=n(vl);m(rs.$$.fragment,eu),eu.forEach(a),su.forEach(a),Yp=c(Or),$l=o(Or,"SPAN",{});var lu=n($l);Bp=i(lu,"Offline"),lu.forEach(a),Or.forEach(a),_n=c(t),pe=o(t,"P",{});var ou=n(pe);Wp=i(ou,"Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub or \u{1F917} Datasets GitHub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),ou.forEach(a),gn=c(t),W=o(t,"P",{});var Se=n(W);Gp=i(Se,"If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),yl=o(Se,"CODE",{});var nu=n(yl);Qp=i(nu,"HF_DATASETS_OFFLINE"),nu.forEach(a),Kp=i(Se," to "),wl=o(Se,"CODE",{});var ru=n(wl);Xp=i(ru,"1"),ru.forEach(a),Zp=i(Se," to enable full offline mode."),Se.forEach(a),vn=c(t),ut=o(t,"H2",{class:!0});var Lr=n(ut);Zt=o(Lr,"A",{id:!0,class:!0,href:!0});var iu=n(Zt);jl=o(iu,"SPAN",{});var pu=n(jl);m(is.$$.fragment,pu),pu.forEach(a),iu.forEach(a),td=c(Lr),bl=o(Lr,"SPAN",{});var du=n(bl);ad=i(du,"Slice splits"),du.forEach(a),Lr.forEach(a),$n=c(t),G=o(t,"P",{});var De=n(G);sd=i(De,"You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),de=o(De,"A",{href:!0});var cu=n(de);ed=i(cu,"ReadInstruction"),cu.forEach(a),ld=i(De," API. Strings are more compact and readable for simple cases, while "),ce=o(De,"A",{href:!0});var fu=n(ce);od=i(fu,"ReadInstruction"),fu.forEach(a),nd=i(De," is easier to use with variable slicing parameters."),De.forEach(a),yn=c(t),Q=o(t,"P",{});var Te=n(Q);rd=i(Te,"Concatenate a "),ql=o(Te,"CODE",{});var uu=n(ql);id=i(uu,"train"),uu.forEach(a),pd=i(Te," and "),kl=o(Te,"CODE",{});var hu=n(kl);dd=i(hu,"test"),hu.forEach(a),cd=i(Te," split by:"),Te.forEach(a),wn=c(t),m(ps.$$.fragment,t),jn=c(t),ta=o(t,"P",{});var Hr=n(ta);fd=i(Hr,"Select specific rows of the "),El=o(Hr,"CODE",{});var mu=n(El);ud=i(mu,"train"),mu.forEach(a),hd=i(Hr," split:"),Hr.forEach(a),bn=c(t),m(ds.$$.fragment,t),qn=c(t),fe=o(t,"P",{});var _u=n(fe);md=i(_u,"Or select a percentage of a split with:"),_u.forEach(a),kn=c(t),m(cs.$$.fragment,t),En=c(t),ue=o(t,"P",{});var gu=n(ue);_d=i(gu,"Select a combination of percentages from each split:"),gu.forEach(a),xn=c(t),m(fs.$$.fragment,t),Pn=c(t),he=o(t,"P",{});var vu=n(he);gd=i(vu,"Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),vu.forEach(a),An=c(t),m(us.$$.fragment,t),Sn=c(t),ht=o(t,"H3",{class:!0});var Fr=n(ht);aa=o(Fr,"A",{id:!0,class:!0,href:!0});var $u=n(aa);xl=o($u,"SPAN",{});var yu=n(xl);m(hs.$$.fragment,yu),yu.forEach(a),$u.forEach(a),vd=c(Fr),Pl=o(Fr,"SPAN",{});var wu=n(Pl);$d=i(wu,"Percent slicing and rounding"),wu.forEach(a),Fr.forEach(a),Dn=c(t),me=o(t,"P",{});var ju=n(me);yd=i(ju,"The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),ju.forEach(a),Tn=c(t),m(ms.$$.fragment,t),Nn=c(t),sa=o(t,"P",{});var Rr=n(sa);wd=i(Rr,"If you want equal sized splits, use "),Al=o(Rr,"CODE",{});var bu=n(Al);jd=i(bu,"pct1_dropremainder"),bu.forEach(a),bd=i(Rr," rounding instead. This treats the specified percentage boundaries as multiples of 1%."),Rr.forEach(a),In=c(t),m(_s.$$.fragment,t),Cn=c(t),m(ea.$$.fragment,t),On=c(t),_e=o(t,"A",{id:!0}),n(_e).forEach(a),Ln=c(t),mt=o(t,"H2",{class:!0});var Mr=n(mt);la=o(Mr,"A",{id:!0,class:!0,href:!0});var qu=n(la);Sl=o(qu,"SPAN",{});var ku=n(Sl);m(gs.$$.fragment,ku),ku.forEach(a),qu.forEach(a),qd=c(Mr),Dl=o(Mr,"SPAN",{});var Eu=n(Dl);kd=i(Eu,"Troubleshooting"),Eu.forEach(a),Mr.forEach(a),Hn=c(t),ge=o(t,"P",{});var xu=n(ge);Ed=i(xu,"Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),xu.forEach(a),Fn=c(t),_t=o(t,"H3",{class:!0});var Vr=n(_t);oa=o(Vr,"A",{id:!0,class:!0,href:!0});var Pu=n(oa);Tl=o(Pu,"SPAN",{});var Au=n(Tl);m(vs.$$.fragment,Au),Au.forEach(a),Pu.forEach(a),xd=c(Vr),Nl=o(Vr,"SPAN",{});var Su=n(Nl);Pd=i(Su,"Manual download"),Su.forEach(a),Vr.forEach(a),Rn=c(t),L=o(t,"P",{});var ga=n(L);Ad=i(ga,"Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),ve=o(ga,"A",{href:!0});var Du=n(ve);Sd=i(Du,"load_dataset()"),Du.forEach(a),Dd=i(ga," to throw an "),Il=o(ga,"CODE",{});var Tu=n(Il);Td=i(Tu,"AssertionError"),Tu.forEach(a),Nd=i(ga,". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),Cl=o(ga,"CODE",{});var Nu=n(Cl);Id=i(Nu,"data_dir"),Nu.forEach(a),Cd=i(ga," argument to specify the path to the files you just downloaded."),ga.forEach(a),Mn=c(t),na=o(t,"P",{});var zr=n(na);Od=i(zr,"For example, if you try to download a configuration from the "),$s=o(zr,"A",{href:!0,rel:!0});var Iu=n($s);Ld=i(Iu,"MATINF"),Iu.forEach(a),Hd=i(zr," dataset:"),zr.forEach(a),Vn=c(t),m(ys.$$.fragment,t),zn=c(t),gt=o(t,"H3",{class:!0});var Jr=n(gt);ra=o(Jr,"A",{id:!0,class:!0,href:!0});var Cu=n(ra);Ol=o(Cu,"SPAN",{});var Ou=n(Ol);m(ws.$$.fragment,Ou),Ou.forEach(a),Cu.forEach(a),Fd=c(Jr),Ll=o(Jr,"SPAN",{});var Lu=n(Ll);Rd=i(Lu,"Specify features"),Lu.forEach(a),Jr.forEach(a),Jn=c(t),H=o(t,"P",{});var va=n(H);Md=i(va,"When you create a dataset from local files, the "),$e=o(va,"A",{href:!0});var Hu=n($e);Vd=i(Hu,"Features"),Hu.forEach(a),zd=i(va," are automatically inferred by "),js=o(va,"A",{href:!0,rel:!0});var Fu=n(js);Jd=i(Fu,"Apache Arrow"),Fu.forEach(a),Ud=i(va,". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),ye=o(va,"A",{href:!0});var Ru=n(ye);Yd=i(Ru,"ClassLabel"),Ru.forEach(a),Bd=i(va," feature."),va.forEach(a),Un=c(t),ia=o(t,"P",{});var Ur=n(ia);Wd=i(Ur,"Start by defining your own labels with the "),we=o(Ur,"A",{href:!0});var Mu=n(we);Gd=i(Mu,"Features"),Mu.forEach(a),Qd=i(Ur," class:"),Ur.forEach(a),Yn=c(t),m(bs.$$.fragment,t),Bn=c(t),K=o(t,"P",{});var Ne=n(K);Kd=i(Ne,"Next, specify the "),Hl=o(Ne,"CODE",{});var Vu=n(Hl);Xd=i(Vu,"features"),Vu.forEach(a),Zd=i(Ne," parameter in "),je=o(Ne,"A",{href:!0});var zu=n(je);tc=i(zu,"load_dataset()"),zu.forEach(a),ac=i(Ne," with the features you just created:"),Ne.forEach(a),Wn=c(t),m(qs.$$.fragment,t),Gn=c(t),be=o(t,"P",{});var Ju=n(be);sc=i(Ju,"Now when you look at your dataset features, you can see it uses the custom labels you defined:"),Ju.forEach(a),Qn=c(t),m(ks.$$.fragment,t),Kn=c(t),vt=o(t,"H2",{class:!0});var Yr=n(vt);pa=o(Yr,"A",{id:!0,class:!0,href:!0});var Uu=n(pa);Fl=o(Uu,"SPAN",{});var Yu=n(Fl);m(Es.$$.fragment,Yu),Yu.forEach(a),Uu.forEach(a),ec=c(Yr),Rl=o(Yr,"SPAN",{});var Bu=n(Rl);lc=i(Bu,"Metrics"),Bu.forEach(a),Yr.forEach(a),Xn=c(t),m(da.$$.fragment,t),Zn=c(t),qe=o(t,"P",{});var Wu=n(qe);oc=i(Wu,"When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),Wu.forEach(a),tr=c(t),m(xs.$$.fragment,t),ar=c(t),m(ca.$$.fragment,t),sr=c(t),$t=o(t,"H3",{class:!0});var Br=n($t);fa=o(Br,"A",{id:!0,class:!0,href:!0});var Gu=n(fa);Ml=o(Gu,"SPAN",{});var Qu=n(Ml);m(Ps.$$.fragment,Qu),Qu.forEach(a),Gu.forEach(a),nc=c(Br),Vl=o(Br,"SPAN",{});var Ku=n(Vl);rc=i(Ku,"Load configurations"),Ku.forEach(a),Br.forEach(a),er=c(t),X=o(t,"P",{});var Ie=n(X);ic=i(Ie,"It is possible for a metric to have different configurations. The configurations are stored in the "),zl=o(Ie,"CODE",{});var Xu=n(zl);pc=i(Xu,"config_name"),Xu.forEach(a),dc=i(Ie," parameter in "),ke=o(Ie,"A",{href:!0});var Zu=n(ke);cc=i(Zu,"MetricInfo"),Zu.forEach(a),fc=i(Ie," attribute. When you load a metric, provide the configuration name as shown in the following:"),Ie.forEach(a),lr=c(t),m(As.$$.fragment,t),or=c(t),yt=o(t,"H3",{class:!0});var Wr=n(yt);ua=o(Wr,"A",{id:!0,class:!0,href:!0});var th=n(ua);Jl=o(th,"SPAN",{});var ah=n(Jl);m(Ss.$$.fragment,ah),ah.forEach(a),th.forEach(a),uc=c(Wr),Ul=o(Wr,"SPAN",{});var sh=n(Ul);hc=i(sh,"Distributed setup"),sh.forEach(a),Wr.forEach(a),nr=c(t),Ee=o(t,"P",{});var eh=n(Ee);mc=i(eh,"When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),eh.forEach(a),rr=c(t),xe=o(t,"P",{});var lh=n(xe);_c=i(lh,"For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),lh.forEach(a),ir=c(t),Z=o(t,"OL",{});var Ce=n(Z);Yl=o(Ce,"LI",{});var oh=n(Yl);Ds=o(oh,"P",{});var Gr=n(Ds);gc=i(Gr,"Define the total number of processes with the "),Bl=o(Gr,"CODE",{});var nh=n(Bl);vc=i(nh,"num_process"),nh.forEach(a),$c=i(Gr," argument."),Gr.forEach(a),oh.forEach(a),yc=c(Ce),Wl=o(Ce,"LI",{});var rh=n(Wl);wt=o(rh,"P",{});var Oe=n(wt);wc=i(Oe,"Set the process "),Gl=o(Oe,"CODE",{});var ih=n(Gl);jc=i(ih,"rank"),ih.forEach(a),bc=i(Oe," as an integer between zero and "),Ql=o(Oe,"CODE",{});var ph=n(Ql);qc=i(ph,"num_process - 1"),ph.forEach(a),kc=i(Oe,"."),Oe.forEach(a),rh.forEach(a),Ec=c(Ce),Kl=o(Ce,"LI",{});var dh=n(Kl);Ts=o(dh,"P",{});var Qr=n(Ts);xc=i(Qr,"Load your metric with "),Pe=o(Qr,"A",{href:!0});var ch=n(Pe);Pc=i(ch,"load_metric()"),ch.forEach(a),Ac=i(Qr," with these arguments:"),Qr.forEach(a),dh.forEach(a),Ce.forEach(a),pr=c(t),m(Ns.$$.fragment,t),dr=c(t),m(ha.$$.fragment,t),cr=c(t),ma=o(t,"P",{});var Kr=n(ma);Sc=i(Kr,"In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),Xl=o(Kr,"CODE",{});var fh=n(Xl);Dc=i(fh,"experiment_id"),fh.forEach(a),Tc=i(Kr," to distinguish the separate evaluations:"),Kr.forEach(a),fr=c(t),m(Is.$$.fragment,t),this.h()},h(){f(u,"name","hf:doc:metadata"),f(u,"content",JSON.stringify(Eh)),f(b,"id","load"),f(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(b,"href","#load"),f(y,"class","relative group"),f(Ea,"class","underline decoration-pink-400 decoration-2 font-semibold"),f(Ea,"href","./audio_load"),f(xa,"class","underline decoration-yellow-400 decoration-2 font-semibold"),f(xa,"href","./image_load"),f(Pa,"class","underline decoration-green-400 decoration-2 font-semibold"),f(Pa,"href","./nlp_load"),f(Ms,"id","load-from-the-hub"),f(xt,"id","hugging-face-hub"),f(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(xt,"href","#hugging-face-hub"),f(st,"class","relative group"),f(Vs,"href","share#create-the-repository"),f(zs,"href","/docs/datasets/pr_4879/en/package_reference/loading_methods#datasets.load_dataset"),f(Sa,"href","https://huggingface.co/datasets/lhoestq/demo1"),f(Sa,"rel","nofollow"),f(It,"id","local-loading-script"),f(It,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(It,"href","#local-loading-script"),f(et,"class","relative group"),f(Js,"href","/docs/datasets/pr_4879/en/package_reference/loading_methods#datasets.load_dataset"),f(Lt,"id","edit-loading-script"),f(Lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Lt,"href","#edit-loading-script"),f(lt,"class","relative group"),f(Ys,"href","/docs/datasets/pr_4879/en/package_reference/loading_methods#datasets.load_dataset"),f(Ft,"id","local-and-remote-files"),f(Ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ft,"href","#local-and-remote-files"),f(ot,"class","relative group"),f(Bs,"href","/docs/datasets/pr_4879/en/package_reference/loading_methods#datasets.load_dataset"),f(Rt,"id","csv"),f(Rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Rt,"href","#csv"),f(nt,"class","relative group"),f(Mt,"id","json"),f(Mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Mt,"href","#json"),f(rt,"class","relative group"),f(Zs,"href","/docs/datasets/pr_4879/en/package_reference/loading_methods#datasets.load_dataset"),f(Jt,"id","parquet"),f(Jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Jt,"href","#parquet"),f(it,"class","relative group"),f(Ut,"id","inmemory-data"),f(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ut,"href","#inmemory-data"),f(pt,"class","relative group"),f(ne,"href","/docs/datasets/pr_4879/en/package_reference/main_classes#datasets.Dataset"),f(Bt,"id","python-dictionary"),f(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Bt,"href","#python-dictionary"),f(dt,"class","relative group"),f(re,"href","/docs/datasets/pr_4879/en/package_reference/main_classes#datasets.Dataset.from_dict"),f(Gt,"id","pandas-dataframe"),f(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Gt,"href","#pandas-dataframe"),f(ct,"class","relative group"),f(ie,"href","/docs/datasets/pr_4879/en/package_reference/main_classes#datasets.Dataset.from_pandas"),f(Xt,"id","offline"),f(Xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Xt,"href","#offline"),f(ft,"class","relative group"),f(Zt,"id","slice-splits"),f(Zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Zt,"href","#slice-splits"),f(ut,"class","relative group"),f(de,"href","/docs/datasets/pr_4879/en/package_reference/builder_classes#datasets.ReadInstruction"),f(ce,"href","/docs/datasets/pr_4879/en/package_reference/builder_classes#datasets.ReadInstruction"),f(aa,"id","percent-slicing-and-rounding"),f(aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(aa,"href","#percent-slicing-and-rounding"),f(ht,"class","relative group"),f(_e,"id","troubleshoot"),f(la,"id","troubleshooting"),f(la,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(la,"href","#troubleshooting"),f(mt,"class","relative group"),f(oa,"id","manual-download"),f(oa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(oa,"href","#manual-download"),f(_t,"class","relative group"),f(ve,"href","/docs/datasets/pr_4879/en/package_reference/loading_methods#datasets.load_dataset"),f($s,"href","https://huggingface.co/datasets/matinf"),f($s,"rel","nofollow"),f(ra,"id","specify-features"),f(ra,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ra,"href","#specify-features"),f(gt,"class","relative group"),f($e,"href","/docs/datasets/pr_4879/en/package_reference/main_classes#datasets.Features"),f(js,"href","https://arrow.apache.org/docs/"),f(js,"rel","nofollow"),f(ye,"href","/docs/datasets/pr_4879/en/package_reference/main_classes#datasets.ClassLabel"),f(we,"href","/docs/datasets/pr_4879/en/package_reference/main_classes#datasets.Features"),f(je,"href","/docs/datasets/pr_4879/en/package_reference/loading_methods#datasets.load_dataset"),f(pa,"id","metrics"),f(pa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(pa,"href","#metrics"),f(vt,"class","relative group"),f(fa,"id","load-configurations"),f(fa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(fa,"href","#load-configurations"),f($t,"class","relative group"),f(ke,"href","/docs/datasets/pr_4879/en/package_reference/main_classes#datasets.MetricInfo"),f(ua,"id","distributed-setup"),f(ua,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ua,"href","#distributed-setup"),f(yt,"class","relative group"),f(Pe,"href","/docs/datasets/pr_4879/en/package_reference/loading_methods#datasets.load_metric")},m(t,e){s(document.head,u),p(t,k,e),p(t,y,e),s(y,b),s(b,q),_(w,q,null),s(y,j),s(y,x),s(x,tt),p(t,jt,e),p(t,J,e),s(J,at),p(t,bt,e),p(t,U,e),s(U,Y),p(t,qt,e),p(t,A,e),s(A,M),s(M,$a),s(A,ya),s(A,V),s(V,wa),s(A,ja),s(A,O),s(O,ba),s(A,qa),s(A,z),s(z,P),s(A,Ls),s(A,kt),s(kt,Hs),s(A,Fs),s(A,Et),s(Et,Rs),p(t,ka,e),p(t,I,e),s(I,Xr),s(I,Ea),s(Ea,Zr),s(I,ti),s(I,xa),s(xa,ai),s(I,si),s(I,Pa),s(Pa,ei),s(I,li),p(t,oo,e),p(t,Ms,e),p(t,no,e),p(t,st,e),s(st,xt),s(xt,Le),_(Aa,Le,null),s(st,oi),s(st,He),s(He,ni),p(t,ro,e),p(t,B,e),s(B,ri),s(B,Vs),s(Vs,ii),s(B,pi),s(B,zs),s(zs,di),s(B,ci),p(t,io,e),p(t,Pt,e),s(Pt,fi),s(Pt,Sa),s(Sa,ui),s(Pt,hi),p(t,po,e),_(Da,t,e),p(t,co,e),p(t,At,e),s(At,mi),s(At,Fe),s(Fe,_i),s(At,gi),p(t,fo,e),_(Ta,t,e),p(t,uo,e),_(St,t,e),p(t,ho,e),p(t,T,e),s(T,vi),s(T,Re),s(Re,$i),s(T,yi),s(T,Me),s(Me,wi),s(T,ji),s(T,Ve),s(Ve,bi),s(T,qi),s(T,ze),s(ze,ki),s(T,Ei),s(T,Je),s(Je,xi),s(T,Pi),p(t,mo,e),_(Na,t,e),p(t,_o,e),_(Dt,t,e),p(t,go,e),p(t,Tt,e),s(Tt,Ai),s(Tt,Ue),s(Ue,Si),s(Tt,Di),p(t,vo,e),_(Ia,t,e),p(t,$o,e),p(t,Nt,e),s(Nt,Ti),s(Nt,Ye),s(Ye,Ni),s(Nt,Ii),p(t,yo,e),_(Ca,t,e),p(t,wo,e),p(t,et,e),s(et,It),s(It,Be),_(Oa,Be,null),s(et,Ci),s(et,We),s(We,Oi),p(t,jo,e),p(t,Ct,e),s(Ct,Li),s(Ct,Js),s(Js,Hi),s(Ct,Fi),p(t,bo,e),p(t,Ot,e),s(Ot,Ge),s(Ge,Ri),s(Ot,Mi),s(Ot,Qe),s(Qe,Vi),p(t,qo,e),_(La,t,e),p(t,ko,e),p(t,lt,e),s(lt,Lt),s(Lt,Ke),_(Ha,Ke,null),s(lt,zi),s(lt,Xe),s(Xe,Ji),p(t,Eo,e),p(t,Us,e),s(Us,Ui),p(t,xo,e),_(Fa,t,e),p(t,Po,e),p(t,Ht,e),s(Ht,Yi),s(Ht,Ys),s(Ys,Bi),s(Ht,Wi),p(t,Ao,e),_(Ra,t,e),p(t,So,e),p(t,ot,e),s(ot,Ft),s(Ft,Ze),_(Ma,Ze,null),s(ot,Gi),s(ot,tl),s(tl,Qi),p(t,Do,e),p(t,N,e),s(N,Ki),s(N,al),s(al,Xi),s(N,Zi),s(N,sl),s(sl,tp),s(N,ap),s(N,el),s(el,sp),s(N,ep),s(N,ll),s(ll,lp),s(N,op),s(N,Bs),s(Bs,np),s(N,rp),p(t,To,e),p(t,nt,e),s(nt,Rt),s(Rt,ol),_(Va,ol,null),s(nt,ip),s(nt,nl),s(nl,pp),p(t,No,e),p(t,Ws,e),s(Ws,dp),p(t,Io,e),_(za,t,e),p(t,Co,e),p(t,Gs,e),s(Gs,cp),p(t,Oo,e),_(Ja,t,e),p(t,Lo,e),p(t,Qs,e),s(Qs,fp),p(t,Ho,e),_(Ua,t,e),p(t,Fo,e),p(t,Ks,e),s(Ks,up),p(t,Ro,e),_(Ya,t,e),p(t,Mo,e),p(t,Xs,e),s(Xs,hp),p(t,Vo,e),_(Ba,t,e),p(t,zo,e),p(t,rt,e),s(rt,Mt),s(Mt,rl),_(Wa,rl,null),s(rt,mp),s(rt,il),s(il,_p),p(t,Jo,e),p(t,Vt,e),s(Vt,gp),s(Vt,Zs),s(Zs,vp),s(Vt,$p),p(t,Uo,e),_(Ga,t,e),p(t,Yo,e),p(t,te,e),s(te,yp),p(t,Bo,e),_(Qa,t,e),p(t,Wo,e),p(t,zt,e),s(zt,wp),s(zt,pl),s(pl,jp),s(zt,bp),p(t,Go,e),_(Ka,t,e),p(t,Qo,e),p(t,ae,e),s(ae,qp),p(t,Ko,e),_(Xa,t,e),p(t,Xo,e),p(t,se,e),s(se,kp),p(t,Zo,e),p(t,it,e),s(it,Jt),s(Jt,dl),_(Za,dl,null),s(it,Ep),s(it,cl),s(cl,xp),p(t,tn,e),p(t,ee,e),s(ee,Pp),p(t,an,e),p(t,le,e),s(le,Ap),p(t,sn,e),_(ts,t,e),p(t,en,e),p(t,oe,e),s(oe,Sp),p(t,ln,e),_(as,t,e),p(t,on,e),p(t,pt,e),s(pt,Ut),s(Ut,fl),_(ss,fl,null),s(pt,Dp),s(pt,ul),s(ul,Tp),p(t,nn,e),p(t,Yt,e),s(Yt,Np),s(Yt,ne),s(ne,Ip),s(Yt,Cp),p(t,rn,e),p(t,dt,e),s(dt,Bt),s(Bt,hl),_(es,hl,null),s(dt,Op),s(dt,ml),s(ml,Lp),p(t,pn,e),p(t,Wt,e),s(Wt,Hp),s(Wt,re),s(re,Fp),s(Wt,Rp),p(t,dn,e),_(ls,t,e),p(t,cn,e),p(t,ct,e),s(ct,Gt),s(Gt,_l),_(os,_l,null),s(ct,Mp),s(ct,gl),s(gl,Vp),p(t,fn,e),p(t,Qt,e),s(Qt,zp),s(Qt,ie),s(ie,Jp),s(Qt,Up),p(t,un,e),_(ns,t,e),p(t,hn,e),_(Kt,t,e),p(t,mn,e),p(t,ft,e),s(ft,Xt),s(Xt,vl),_(rs,vl,null),s(ft,Yp),s(ft,$l),s($l,Bp),p(t,_n,e),p(t,pe,e),s(pe,Wp),p(t,gn,e),p(t,W,e),s(W,Gp),s(W,yl),s(yl,Qp),s(W,Kp),s(W,wl),s(wl,Xp),s(W,Zp),p(t,vn,e),p(t,ut,e),s(ut,Zt),s(Zt,jl),_(is,jl,null),s(ut,td),s(ut,bl),s(bl,ad),p(t,$n,e),p(t,G,e),s(G,sd),s(G,de),s(de,ed),s(G,ld),s(G,ce),s(ce,od),s(G,nd),p(t,yn,e),p(t,Q,e),s(Q,rd),s(Q,ql),s(ql,id),s(Q,pd),s(Q,kl),s(kl,dd),s(Q,cd),p(t,wn,e),_(ps,t,e),p(t,jn,e),p(t,ta,e),s(ta,fd),s(ta,El),s(El,ud),s(ta,hd),p(t,bn,e),_(ds,t,e),p(t,qn,e),p(t,fe,e),s(fe,md),p(t,kn,e),_(cs,t,e),p(t,En,e),p(t,ue,e),s(ue,_d),p(t,xn,e),_(fs,t,e),p(t,Pn,e),p(t,he,e),s(he,gd),p(t,An,e),_(us,t,e),p(t,Sn,e),p(t,ht,e),s(ht,aa),s(aa,xl),_(hs,xl,null),s(ht,vd),s(ht,Pl),s(Pl,$d),p(t,Dn,e),p(t,me,e),s(me,yd),p(t,Tn,e),_(ms,t,e),p(t,Nn,e),p(t,sa,e),s(sa,wd),s(sa,Al),s(Al,jd),s(sa,bd),p(t,In,e),_(_s,t,e),p(t,Cn,e),_(ea,t,e),p(t,On,e),p(t,_e,e),p(t,Ln,e),p(t,mt,e),s(mt,la),s(la,Sl),_(gs,Sl,null),s(mt,qd),s(mt,Dl),s(Dl,kd),p(t,Hn,e),p(t,ge,e),s(ge,Ed),p(t,Fn,e),p(t,_t,e),s(_t,oa),s(oa,Tl),_(vs,Tl,null),s(_t,xd),s(_t,Nl),s(Nl,Pd),p(t,Rn,e),p(t,L,e),s(L,Ad),s(L,ve),s(ve,Sd),s(L,Dd),s(L,Il),s(Il,Td),s(L,Nd),s(L,Cl),s(Cl,Id),s(L,Cd),p(t,Mn,e),p(t,na,e),s(na,Od),s(na,$s),s($s,Ld),s(na,Hd),p(t,Vn,e),_(ys,t,e),p(t,zn,e),p(t,gt,e),s(gt,ra),s(ra,Ol),_(ws,Ol,null),s(gt,Fd),s(gt,Ll),s(Ll,Rd),p(t,Jn,e),p(t,H,e),s(H,Md),s(H,$e),s($e,Vd),s(H,zd),s(H,js),s(js,Jd),s(H,Ud),s(H,ye),s(ye,Yd),s(H,Bd),p(t,Un,e),p(t,ia,e),s(ia,Wd),s(ia,we),s(we,Gd),s(ia,Qd),p(t,Yn,e),_(bs,t,e),p(t,Bn,e),p(t,K,e),s(K,Kd),s(K,Hl),s(Hl,Xd),s(K,Zd),s(K,je),s(je,tc),s(K,ac),p(t,Wn,e),_(qs,t,e),p(t,Gn,e),p(t,be,e),s(be,sc),p(t,Qn,e),_(ks,t,e),p(t,Kn,e),p(t,vt,e),s(vt,pa),s(pa,Fl),_(Es,Fl,null),s(vt,ec),s(vt,Rl),s(Rl,lc),p(t,Xn,e),_(da,t,e),p(t,Zn,e),p(t,qe,e),s(qe,oc),p(t,tr,e),_(xs,t,e),p(t,ar,e),_(ca,t,e),p(t,sr,e),p(t,$t,e),s($t,fa),s(fa,Ml),_(Ps,Ml,null),s($t,nc),s($t,Vl),s(Vl,rc),p(t,er,e),p(t,X,e),s(X,ic),s(X,zl),s(zl,pc),s(X,dc),s(X,ke),s(ke,cc),s(X,fc),p(t,lr,e),_(As,t,e),p(t,or,e),p(t,yt,e),s(yt,ua),s(ua,Jl),_(Ss,Jl,null),s(yt,uc),s(yt,Ul),s(Ul,hc),p(t,nr,e),p(t,Ee,e),s(Ee,mc),p(t,rr,e),p(t,xe,e),s(xe,_c),p(t,ir,e),p(t,Z,e),s(Z,Yl),s(Yl,Ds),s(Ds,gc),s(Ds,Bl),s(Bl,vc),s(Ds,$c),s(Z,yc),s(Z,Wl),s(Wl,wt),s(wt,wc),s(wt,Gl),s(Gl,jc),s(wt,bc),s(wt,Ql),s(Ql,qc),s(wt,kc),s(Z,Ec),s(Z,Kl),s(Kl,Ts),s(Ts,xc),s(Ts,Pe),s(Pe,Pc),s(Ts,Ac),p(t,pr,e),_(Ns,t,e),p(t,dr,e),_(ha,t,e),p(t,cr,e),p(t,ma,e),s(ma,Sc),s(ma,Xl),s(Xl,Dc),s(ma,Tc),p(t,fr,e),_(Is,t,e),ur=!0},p(t,[e]){const Cs={};e&2&&(Cs.$$scope={dirty:e,ctx:t}),St.$set(Cs);const Zl={};e&2&&(Zl.$$scope={dirty:e,ctx:t}),Dt.$set(Zl);const to={};e&2&&(to.$$scope={dirty:e,ctx:t}),Kt.$set(to);const ao={};e&2&&(ao.$$scope={dirty:e,ctx:t}),ea.$set(ao);const so={};e&2&&(so.$$scope={dirty:e,ctx:t}),da.$set(so);const eo={};e&2&&(eo.$$scope={dirty:e,ctx:t}),ca.$set(eo);const C={};e&2&&(C.$$scope={dirty:e,ctx:t}),ha.$set(C)},i(t){ur||(g(w.$$.fragment,t),g(Aa.$$.fragment,t),g(Da.$$.fragment,t),g(Ta.$$.fragment,t),g(St.$$.fragment,t),g(Na.$$.fragment,t),g(Dt.$$.fragment,t),g(Ia.$$.fragment,t),g(Ca.$$.fragment,t),g(Oa.$$.fragment,t),g(La.$$.fragment,t),g(Ha.$$.fragment,t),g(Fa.$$.fragment,t),g(Ra.$$.fragment,t),g(Ma.$$.fragment,t),g(Va.$$.fragment,t),g(za.$$.fragment,t),g(Ja.$$.fragment,t),g(Ua.$$.fragment,t),g(Ya.$$.fragment,t),g(Ba.$$.fragment,t),g(Wa.$$.fragment,t),g(Ga.$$.fragment,t),g(Qa.$$.fragment,t),g(Ka.$$.fragment,t),g(Xa.$$.fragment,t),g(Za.$$.fragment,t),g(ts.$$.fragment,t),g(as.$$.fragment,t),g(ss.$$.fragment,t),g(es.$$.fragment,t),g(ls.$$.fragment,t),g(os.$$.fragment,t),g(ns.$$.fragment,t),g(Kt.$$.fragment,t),g(rs.$$.fragment,t),g(is.$$.fragment,t),g(ps.$$.fragment,t),g(ds.$$.fragment,t),g(cs.$$.fragment,t),g(fs.$$.fragment,t),g(us.$$.fragment,t),g(hs.$$.fragment,t),g(ms.$$.fragment,t),g(_s.$$.fragment,t),g(ea.$$.fragment,t),g(gs.$$.fragment,t),g(vs.$$.fragment,t),g(ys.$$.fragment,t),g(ws.$$.fragment,t),g(bs.$$.fragment,t),g(qs.$$.fragment,t),g(ks.$$.fragment,t),g(Es.$$.fragment,t),g(da.$$.fragment,t),g(xs.$$.fragment,t),g(ca.$$.fragment,t),g(Ps.$$.fragment,t),g(As.$$.fragment,t),g(Ss.$$.fragment,t),g(Ns.$$.fragment,t),g(ha.$$.fragment,t),g(Is.$$.fragment,t),ur=!0)},o(t){v(w.$$.fragment,t),v(Aa.$$.fragment,t),v(Da.$$.fragment,t),v(Ta.$$.fragment,t),v(St.$$.fragment,t),v(Na.$$.fragment,t),v(Dt.$$.fragment,t),v(Ia.$$.fragment,t),v(Ca.$$.fragment,t),v(Oa.$$.fragment,t),v(La.$$.fragment,t),v(Ha.$$.fragment,t),v(Fa.$$.fragment,t),v(Ra.$$.fragment,t),v(Ma.$$.fragment,t),v(Va.$$.fragment,t),v(za.$$.fragment,t),v(Ja.$$.fragment,t),v(Ua.$$.fragment,t),v(Ya.$$.fragment,t),v(Ba.$$.fragment,t),v(Wa.$$.fragment,t),v(Ga.$$.fragment,t),v(Qa.$$.fragment,t),v(Ka.$$.fragment,t),v(Xa.$$.fragment,t),v(Za.$$.fragment,t),v(ts.$$.fragment,t),v(as.$$.fragment,t),v(ss.$$.fragment,t),v(es.$$.fragment,t),v(ls.$$.fragment,t),v(os.$$.fragment,t),v(ns.$$.fragment,t),v(Kt.$$.fragment,t),v(rs.$$.fragment,t),v(is.$$.fragment,t),v(ps.$$.fragment,t),v(ds.$$.fragment,t),v(cs.$$.fragment,t),v(fs.$$.fragment,t),v(us.$$.fragment,t),v(hs.$$.fragment,t),v(ms.$$.fragment,t),v(_s.$$.fragment,t),v(ea.$$.fragment,t),v(gs.$$.fragment,t),v(vs.$$.fragment,t),v(ys.$$.fragment,t),v(ws.$$.fragment,t),v(bs.$$.fragment,t),v(qs.$$.fragment,t),v(ks.$$.fragment,t),v(Es.$$.fragment,t),v(da.$$.fragment,t),v(xs.$$.fragment,t),v(ca.$$.fragment,t),v(Ps.$$.fragment,t),v(As.$$.fragment,t),v(Ss.$$.fragment,t),v(Ns.$$.fragment,t),v(ha.$$.fragment,t),v(Is.$$.fragment,t),ur=!1},d(t){a(u),t&&a(k),t&&a(y),$(w),t&&a(jt),t&&a(J),t&&a(bt),t&&a(U),t&&a(qt),t&&a(A),t&&a(ka),t&&a(I),t&&a(oo),t&&a(Ms),t&&a(no),t&&a(st),$(Aa),t&&a(ro),t&&a(B),t&&a(io),t&&a(Pt),t&&a(po),$(Da,t),t&&a(co),t&&a(At),t&&a(fo),$(Ta,t),t&&a(uo),$(St,t),t&&a(ho),t&&a(T),t&&a(mo),$(Na,t),t&&a(_o),$(Dt,t),t&&a(go),t&&a(Tt),t&&a(vo),$(Ia,t),t&&a($o),t&&a(Nt),t&&a(yo),$(Ca,t),t&&a(wo),t&&a(et),$(Oa),t&&a(jo),t&&a(Ct),t&&a(bo),t&&a(Ot),t&&a(qo),$(La,t),t&&a(ko),t&&a(lt),$(Ha),t&&a(Eo),t&&a(Us),t&&a(xo),$(Fa,t),t&&a(Po),t&&a(Ht),t&&a(Ao),$(Ra,t),t&&a(So),t&&a(ot),$(Ma),t&&a(Do),t&&a(N),t&&a(To),t&&a(nt),$(Va),t&&a(No),t&&a(Ws),t&&a(Io),$(za,t),t&&a(Co),t&&a(Gs),t&&a(Oo),$(Ja,t),t&&a(Lo),t&&a(Qs),t&&a(Ho),$(Ua,t),t&&a(Fo),t&&a(Ks),t&&a(Ro),$(Ya,t),t&&a(Mo),t&&a(Xs),t&&a(Vo),$(Ba,t),t&&a(zo),t&&a(rt),$(Wa),t&&a(Jo),t&&a(Vt),t&&a(Uo),$(Ga,t),t&&a(Yo),t&&a(te),t&&a(Bo),$(Qa,t),t&&a(Wo),t&&a(zt),t&&a(Go),$(Ka,t),t&&a(Qo),t&&a(ae),t&&a(Ko),$(Xa,t),t&&a(Xo),t&&a(se),t&&a(Zo),t&&a(it),$(Za),t&&a(tn),t&&a(ee),t&&a(an),t&&a(le),t&&a(sn),$(ts,t),t&&a(en),t&&a(oe),t&&a(ln),$(as,t),t&&a(on),t&&a(pt),$(ss),t&&a(nn),t&&a(Yt),t&&a(rn),t&&a(dt),$(es),t&&a(pn),t&&a(Wt),t&&a(dn),$(ls,t),t&&a(cn),t&&a(ct),$(os),t&&a(fn),t&&a(Qt),t&&a(un),$(ns,t),t&&a(hn),$(Kt,t),t&&a(mn),t&&a(ft),$(rs),t&&a(_n),t&&a(pe),t&&a(gn),t&&a(W),t&&a(vn),t&&a(ut),$(is),t&&a($n),t&&a(G),t&&a(yn),t&&a(Q),t&&a(wn),$(ps,t),t&&a(jn),t&&a(ta),t&&a(bn),$(ds,t),t&&a(qn),t&&a(fe),t&&a(kn),$(cs,t),t&&a(En),t&&a(ue),t&&a(xn),$(fs,t),t&&a(Pn),t&&a(he),t&&a(An),$(us,t),t&&a(Sn),t&&a(ht),$(hs),t&&a(Dn),t&&a(me),t&&a(Tn),$(ms,t),t&&a(Nn),t&&a(sa),t&&a(In),$(_s,t),t&&a(Cn),$(ea,t),t&&a(On),t&&a(_e),t&&a(Ln),t&&a(mt),$(gs),t&&a(Hn),t&&a(ge),t&&a(Fn),t&&a(_t),$(vs),t&&a(Rn),t&&a(L),t&&a(Mn),t&&a(na),t&&a(Vn),$(ys,t),t&&a(zn),t&&a(gt),$(ws),t&&a(Jn),t&&a(H),t&&a(Un),t&&a(ia),t&&a(Yn),$(bs,t),t&&a(Bn),t&&a(K),t&&a(Wn),$(qs,t),t&&a(Gn),t&&a(be),t&&a(Qn),$(ks,t),t&&a(Kn),t&&a(vt),$(Es),t&&a(Xn),$(da,t),t&&a(Zn),t&&a(qe),t&&a(tr),$(xs,t),t&&a(ar),$(ca,t),t&&a(sr),t&&a($t),$(Ps),t&&a(er),t&&a(X),t&&a(lr),$(As,t),t&&a(or),t&&a(yt),$(Ss),t&&a(nr),t&&a(Ee),t&&a(rr),t&&a(xe),t&&a(ir),t&&a(Z),t&&a(pr),$(Ns,t),t&&a(dr),$(ha,t),t&&a(cr),t&&a(ma),t&&a(fr),$(Is,t)}}}const Eh={local:"load",sections:[{local:"hugging-face-hub",title:"Hugging Face Hub"},{local:"local-loading-script",sections:[{local:"edit-loading-script",title:"Edit loading script"}],title:"Local loading script"},{local:"local-and-remote-files",sections:[{local:"csv",title:"CSV"},{local:"json",title:"JSON"},{local:"parquet",title:"Parquet"}],title:"Local and remote files"},{local:"inmemory-data",sections:[{local:"python-dictionary",title:"Python dictionary"},{local:"pandas-dataframe",title:"Pandas DataFrame"}],title:"In-memory data"},{local:"offline",title:"Offline"},{local:"slice-splits",sections:[{local:"percent-slicing-and-rounding",title:"Percent slicing and rounding"}],title:"Slice splits"},{local:"troubleshooting",sections:[{local:"manual-download",title:"Manual download"},{local:"specify-features",title:"Specify features"}],title:"Troubleshooting"},{local:"metrics",sections:[{local:"load-configurations",title:"Load configurations"},{local:"distributed-setup",title:"Distributed setup"}],title:"Metrics"}],title:"Load"};function xh(D){return gh(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ih extends uh{constructor(u){super();hh(this,u,xh,kh,mh,{})}}export{Ih as default,Eh as metadata};
