import{S as $p,i as Ep,s as bp,e as l,k as p,w as g,t as s,M as kp,c as r,d as a,m as f,a as n,x as v,h as o,b as h,G as t,g as d,y,q as w,o as $,B as E,v as jp}from"../chunks/vendor-hf-doc-builder.js";import{T as _s}from"../chunks/Tip-hf-doc-builder.js";import{I as Y}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as D}from"../chunks/CodeBlock-hf-doc-builder.js";function qp(F){let c,j,u,b,k;return{c(){c=l("p"),j=s("You can control access to your dataset by requiring users to share their contact information first. Check out the "),u=l("a"),b=s("Gated datasets"),k=s(" guide for more information about how to enable this feature on the Hub."),this.h()},l(m){c=r(m,"P",{});var _=n(c);j=o(_,"You can control access to your dataset by requiring users to share their contact information first. Check out the "),u=r(_,"A",{href:!0,rel:!0});var q=n(u);b=o(q,"Gated datasets"),q.forEach(a),k=o(_," guide for more information about how to enable this feature on the Hub."),_.forEach(a),this.h()},h(){h(u,"href","https://huggingface.co/docs/hub/datasets-gated"),h(u,"rel","nofollow")},m(m,_){d(m,c,_),t(c,j),t(c,u),t(u,b),t(c,k)},d(m){m&&a(c)}}}function Ip(F){let c,j,u,b,k;return{c(){c=l("p"),j=s("To help you get started, we created a loading script "),u=l("a"),b=s("template"),k=s(" you can copy and use as a starting point!"),this.h()},l(m){c=r(m,"P",{});var _=n(c);j=o(_,"To help you get started, we created a loading script "),u=r(_,"A",{href:!0,rel:!0});var q=n(u);b=o(q,"template"),q.forEach(a),k=o(_," you can copy and use as a starting point!"),_.forEach(a),this.h()},h(){h(u,"href","https://github.com/huggingface/datasets/blob/main/templates/new_dataset_script.py"),h(u,"rel","nofollow")},m(m,_){d(m,c,_),t(c,j),t(c,u),t(u,b),t(c,k)},d(m){m&&a(c)}}}function Ap(F){let c,j,u,b,k;return{c(){c=l("p"),j=s("You\u2019ll notice a lot of the dataset information is defined earlier in the loading script which makes it easier to read. There are also other "),u=l("code"),b=s("Features"),k=s(" you can input, so be sure to check out the full list for more details.")},l(m){c=r(m,"P",{});var _=n(c);j=o(_,"You\u2019ll notice a lot of the dataset information is defined earlier in the loading script which makes it easier to read. There are also other "),u=r(_,"CODE",{});var q=n(u);b=o(q,"Features"),q.forEach(a),k=o(_," you can input, so be sure to check out the full list for more details."),_.forEach(a)},m(m,_){d(m,c,_),t(c,j),t(c,u),t(u,b),t(c,k)},d(m){m&&a(c)}}}function Cp(F){let c,j,u,b,k,m,_,q;return{c(){c=l("p"),j=s("To stream a TAR archive file, you need to use "),u=l("a"),b=s("DownloadManager.iter_archive()"),k=s("! The "),m=l("a"),_=s("DownloadManager.download_and_extract()"),q=s(" function does not support TAR archives in streaming mode."),this.h()},l(V){c=r(V,"P",{});var L=n(c);j=o(L,"To stream a TAR archive file, you need to use "),u=r(L,"A",{href:!0});var W=n(u);b=o(W,"DownloadManager.iter_archive()"),W.forEach(a),k=o(L,"! The "),m=r(L,"A",{href:!0});var _t=n(m);_=o(_t,"DownloadManager.download_and_extract()"),_t.forEach(a),q=o(L," function does not support TAR archives in streaming mode."),L.forEach(a),this.h()},h(){h(u,"href","/docs/datasets/pr_4783/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive"),h(m,"href","/docs/datasets/pr_4783/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract")},m(V,L){d(V,c,L),t(c,j),t(c,u),t(u,b),t(c,k),t(c,m),t(m,_),t(c,q)},d(V){V&&a(c)}}}function Tp(F){let c,j,u,b,k;return{c(){c=l("p"),j=s("To stream a TAR archive file, the "),u=l("code"),b=s("metadata_path"),k=s(" needs to be opened and read first. TAR files are accessed and yielded sequentially. This means you need to have the metadata information in hand first so you can yield it with its corresponding image.")},l(m){c=r(m,"P",{});var _=n(c);j=o(_,"To stream a TAR archive file, the "),u=r(_,"CODE",{});var q=n(u);b=o(q,"metadata_path"),q.forEach(a),k=o(_," needs to be opened and read first. TAR files are accessed and yielded sequentially. This means you need to have the metadata information in hand first so you can yield it with its corresponding image."),_.forEach(a)},m(m,_){d(m,c,_),t(c,j),t(c,u),t(u,b),t(c,k)},d(m){m&&a(c)}}}function Dp(F){let c,j,u,b,k,m,_,q,V,L,W,_t,gs,ne,Fe,Jo,Kt,Xo,Ko,Qo,Qt,Zo,vs,ie,ys,J,de,Zt,Be,el,ea,tl,ws,R,al,ta,sl,ol,aa,ll,rl,$s,Ne,Es,B,nl,sa,il,dl,gt,pl,fl,oa,hl,cl,bs,Ge,ks,pe,ul,la,ml,_l,js,Re,qs,X,fe,ra,Me,gl,na,vl,Is,vt,yl,As,Ue,Cs,yt,wl,Ts,He,Ds,he,$l,ze,El,bl,xs,I,ia,kl,jl,da,ql,Il,pa,Al,Cl,fa,Tl,Dl,ha,xl,Sl,ca,Pl,Ll,ua,Ol,Ss,ce,Fl,Ye,Bl,Nl,Ps,ue,Ls,K,me,ma,Ve,Gl,_a,Rl,Os,We,wt,Ml,Ul,Fs,M,$t,ga,Hl,zl,Yl,Et,va,Vl,Wl,Jl,bt,ya,Xl,Kl,Bs,_e,Ql,kt,Zl,er,Ns,Je,Gs,Q,ge,wa,Xe,tr,$a,ar,Rs,ve,sr,Ke,or,lr,Ms,N,rr,jt,nr,ir,Ea,dr,pr,ba,fr,hr,Us,Qe,Hs,ye,cr,qt,ur,mr,zs,we,Z,_r,ka,gr,vr,ja,yr,wr,$r,qa,Er,Ys,Ze,Vs,$e,br,Ia,kr,jr,Ws,et,Js,ee,Ee,Aa,tt,qr,Ca,Ir,Xs,U,Ar,It,Cr,Tr,Ta,Dr,xr,Ks,at,Qs,At,Sr,Zs,T,Ct,Da,Pr,Lr,Or,be,xa,Fr,Br,Tt,Nr,Gr,Rr,Dt,Sa,Mr,Ur,Hr,xt,Pa,zr,Yr,Vr,St,La,Wr,Jr,Xr,Pt,Oa,Kr,Qr,eo,ke,to,st,ao,te,je,Fa,ot,Zr,Ba,en,so,Lt,tn,oo,qe,ae,lt,an,Ot,sn,on,ln,se,rt,rn,Na,nn,dn,pn,Ga,fn,hn,Ra,cn,un,Ma,mn,_n,nt,O,gn,Ft,vn,yn,Ua,wn,$n,Ha,En,bn,za,kn,jn,qn,C,In,Ya,An,Cn,Va,Tn,Dn,Bt,xn,Sn,Wa,Pn,Ln,Ja,On,Fn,Xa,Bn,Nn,lo,Ie,ro,it,no,oe,Ae,Ka,dt,Gn,Qa,Rn,io,A,Mn,Nt,Un,Hn,Za,zn,Yn,es,Vn,Wn,ts,Jn,Xn,as,Kn,Qn,ss,Zn,ei,po,Ce,fo,Gt,ti,ho,pt,co,le,Te,os,ft,ai,ls,si,uo,De,oi,rs,li,ri,mo,xe,ni,ns,ii,di,_o,ht,go,Se,pi,is,fi,hi,vo,re,Pe,ds,ct,ci,ps,ui,yo,H,mi,Rt,_i,gi,Mt,vi,yi,wo,Ut,wi,$o,ut,Eo;return m=new Y({}),ie=new _s({props:{$$slots:{default:[qp]},$$scope:{ctx:F}}}),Be=new Y({}),Ne=new D({props:{code:`folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png
folder/train/dog/chihuahua.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png
folder/train/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),Ge=new D({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)`}}),Re=new D({props:{code:`folder/train/metadata.jsonl
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),Me=new Y({}),Ue=new D({props:{code:`my_dataset/
\u251C\u2500\u2500 README.md
\u251C\u2500\u2500 my_dataset.py
\u2514\u2500\u2500 data/  # optional, may contain your images or TAR archives`,highlighted:`my_dataset/
\u251C\u2500\u2500 README.md
\u251C\u2500\u2500 my_dataset.py
\u2514\u2500\u2500 <span class="hljs-title">data</span>/  <span class="hljs-comment"># optional, may contain your images or TAR archives</span>`}}),He=new D({props:{code:`from datasets import load_dataset
dataset = load_dataset("path/to/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/my_dataset&quot;</span>)`}}),ue=new _s({props:{$$slots:{default:[Ip]},$$scope:{ctx:F}}}),Ve=new Y({}),Je=new D({props:{code:`class Food101(datasets.GeneratorBasedBuilder):
    """Food-101 Images dataset"""

    def _info(self):

    def _split_generators(self, dl_manager):

    def _generate_examples(self, images, metadata_path):`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">Food101</span>(datasets.GeneratorBasedBuilder):
    <span class="hljs-string">&quot;&quot;&quot;Food-101 Images dataset&quot;&quot;&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_info</span>(<span class="hljs-params">self</span>):

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_generators</span>(<span class="hljs-params">self, dl_manager</span>):

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_examples</span>(<span class="hljs-params">self, images, metadata_path</span>):`}}),Xe=new Y({}),Qe=new D({props:{code:`class Food101Config(datasets.BuilderConfig):
    """Builder Config for Food-101"""
 
    def __init__(self, data_url, metadata_urls, **kwargs):
        """BuilderConfig for Food-101.
        Args:
          data_url: \`string\`, url to download the zip file from.
          metadata_urls: dictionary with keys 'train' and 'validation' containing the archive metadata URLs
          **kwargs: keyword arguments forwarded to super.
        """
        super(Food101Config, self).__init__(version=datasets.Version("1.0.0"), **kwargs)
        self.data_url = data_url
        self.metadata_urls = metadata_urls`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">Food101Config</span>(datasets.BuilderConfig):
    <span class="hljs-string">&quot;&quot;&quot;Builder Config for Food-101&quot;&quot;&quot;</span>
 
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data_url, metadata_urls, **kwargs</span>):
        <span class="hljs-string">&quot;&quot;&quot;BuilderConfig for Food-101.
        Args:
          data_url: \`string\`, url to download the zip file from.
          metadata_urls: dictionary with keys &#x27;train&#x27; and &#x27;validation&#x27; containing the archive metadata URLs
          **kwargs: keyword arguments forwarded to super.
        &quot;&quot;&quot;</span>
        <span class="hljs-built_in">super</span>(Food101Config, self).__init__(version=datasets.Version(<span class="hljs-string">&quot;1.0.0&quot;</span>), **kwargs)
        self.data_url = data_url
        self.metadata_urls = metadata_urls`}}),Ze=new D({props:{code:`class Food101(datasets.GeneratorBasedBuilder):
    """Food-101 Images dataset"""
 
    BUILDER_CONFIGS = [
        Food101Config(
            name="breakfast",
            description="Food types commonly eaten during breakfast.",
            data_url="https://link-to-breakfast-foods.zip",
            metadata_urls={
                "train": "https://link-to-breakfast-foods-train.txt", 
                "validation": "https://link-to-breakfast-foods-validation.txt"
            },
        ,
        Food101Config(
            name="dinner",
            description="Food types commonly eaten during dinner.",
            data_url="https://link-to-dinner-foods.zip",
            metadata_urls={
                "train": "https://link-to-dinner-foods-train.txt", 
                "validation": "https://link-to-dinner-foods-validation.txt"
            },
        )...
    ]`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">Food101</span>(datasets.GeneratorBasedBuilder):
    <span class="hljs-string">&quot;&quot;&quot;Food-101 Images dataset&quot;&quot;&quot;</span>
 
    BUILDER_CONFIGS = [
        Food101Config(
            name=<span class="hljs-string">&quot;breakfast&quot;</span>,
            description=<span class="hljs-string">&quot;Food types commonly eaten during breakfast.&quot;</span>,
            data_url=<span class="hljs-string">&quot;https://link-to-breakfast-foods.zip&quot;</span>,
            metadata_urls={
                <span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;https://link-to-breakfast-foods-train.txt&quot;</span>, 
                <span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;https://link-to-breakfast-foods-validation.txt&quot;</span>
            },
        ,
        Food101Config(
            name=<span class="hljs-string">&quot;dinner&quot;</span>,
            description=<span class="hljs-string">&quot;Food types commonly eaten during dinner.&quot;</span>,
            data_url=<span class="hljs-string">&quot;https://link-to-dinner-foods.zip&quot;</span>,
            metadata_urls={
                <span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;https://link-to-dinner-foods-train.txt&quot;</span>, 
                <span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;https://link-to-dinner-foods-validation.txt&quot;</span>
            },
        )...
    ]`}}),et=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("food101", "breakfast", split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, <span class="hljs-string">&quot;breakfast&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),tt=new Y({}),at=new D({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder("food101")
ds_builder.info`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&quot;food101&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.info`}}),ke=new _s({props:{$$slots:{default:[Ap]},$$scope:{ctx:F}}}),st=new D({props:{code:`def _info(self):
    return datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                "image": datasets.Image(),
                "label": datasets.ClassLabel(names=_NAMES),
            }
        ),
        supervised_keys=("image", "label"),
        homepage=_HOMEPAGE,
        citation=_CITATION,
        license=_LICENSE,
        task_templates=[ImageClassification(image_column="image", label_column="label")],
    )`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_info</span>(<span class="hljs-params">self</span>):
    <span class="hljs-keyword">return</span> datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                <span class="hljs-string">&quot;image&quot;</span>: datasets.Image(),
                <span class="hljs-string">&quot;label&quot;</span>: datasets.ClassLabel(names=_NAMES),
            }
        ),
        supervised_keys=(<span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>),
        homepage=_HOMEPAGE,
        citation=_CITATION,
        license=_LICENSE,
        task_templates=[ImageClassification(image_column=<span class="hljs-string">&quot;image&quot;</span>, label_column=<span class="hljs-string">&quot;label&quot;</span>)],
    )`}}),ot=new Y({}),Ie=new _s({props:{warning:!0,$$slots:{default:[Cp]},$$scope:{ctx:F}}}),it=new D({props:{code:`def _split_generators(self, dl_manager):
    archive_path = dl_manager.download(_BASE_URL)
    split_metadata_paths = dl_manager.download(_METADATA_URLS)
    return [
        datasets.SplitGenerator(
            name=datasets.Split.TRAIN,
            gen_kwargs={
                "images": dl_manager.iter_archive(archive_path),
                "metadata_path": split_metadata_paths["train"],
            },
        ),
        datasets.SplitGenerator(
            name=datasets.Split.VALIDATION,
            gen_kwargs={
                "images": dl_manager.iter_archive(archive_path),
                "metadata_path": split_metadata_paths["test"],
            },
        ),
    ]`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_generators</span>(<span class="hljs-params">self, dl_manager</span>):
    archive_path = dl_manager.download(_BASE_URL)
    split_metadata_paths = dl_manager.download(_METADATA_URLS)
    <span class="hljs-keyword">return</span> [
        datasets.SplitGenerator(
            name=datasets.Split.TRAIN,
            gen_kwargs={
                <span class="hljs-string">&quot;images&quot;</span>: dl_manager.iter_archive(archive_path),
                <span class="hljs-string">&quot;metadata_path&quot;</span>: split_metadata_paths[<span class="hljs-string">&quot;train&quot;</span>],
            },
        ),
        datasets.SplitGenerator(
            name=datasets.Split.VALIDATION,
            gen_kwargs={
                <span class="hljs-string">&quot;images&quot;</span>: dl_manager.iter_archive(archive_path),
                <span class="hljs-string">&quot;metadata_path&quot;</span>: split_metadata_paths[<span class="hljs-string">&quot;test&quot;</span>],
            },
        ),
    ]`}}),dt=new Y({}),Ce=new _s({props:{warning:!0,$$slots:{default:[Tp]},$$scope:{ctx:F}}}),pt=new D({props:{code:`def _generate_examples(self, images, metadata_path):
    """Generate images and labels for splits."""
    with open(metadata_path, encoding="utf-8") as f:
        files_to_keep = set(f.read().split("\\n"))
    for file_path, file_obj in images:
        if file_path.startswith(_IMAGES_DIR):
            if file_path[len(_IMAGES_DIR) : -len(".jpg")] in files_to_keep:
                label = file_path.split("/")[2]
                yield file_path, {
                    "image": {"path": file_path, "bytes": file_obj.read()},
                    "label": label,
                }`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_examples</span>(<span class="hljs-params">self, images, metadata_path</span>):
    <span class="hljs-string">&quot;&quot;&quot;Generate images and labels for splits.&quot;&quot;&quot;</span>
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(metadata_path, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:
        files_to_keep = <span class="hljs-built_in">set</span>(f.read().split(<span class="hljs-string">&quot;\\n&quot;</span>))
    <span class="hljs-keyword">for</span> file_path, file_obj <span class="hljs-keyword">in</span> images:
        <span class="hljs-keyword">if</span> file_path.startswith(_IMAGES_DIR):
            <span class="hljs-keyword">if</span> file_path[<span class="hljs-built_in">len</span>(_IMAGES_DIR) : -<span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;.jpg&quot;</span>)] <span class="hljs-keyword">in</span> files_to_keep:
                label = file_path.split(<span class="hljs-string">&quot;/&quot;</span>)[<span class="hljs-number">2</span>]
                <span class="hljs-keyword">yield</span> file_path, {
                    <span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;path&quot;</span>: file_path, <span class="hljs-string">&quot;bytes&quot;</span>: file_obj.read()},
                    <span class="hljs-string">&quot;label&quot;</span>: label,
                }`}}),ft=new Y({}),ht=new D({props:{code:"datasets-cli test path/to/<your-dataset-loading-script> --save_infos --all_configs",highlighted:'datasets-cli <span class="hljs-built_in">test</span> path/to/&lt;your-dataset-loading-script&gt; --save_infos --all_configs'}}),ct=new Y({}),ut=new D({props:{code:`from datasets import load_dataset
load_dataset("<username>/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>load_dataset(<span class="hljs-string">&quot;&lt;username&gt;/my_dataset&quot;</span>)`}}),{c(){c=l("meta"),j=p(),u=l("h1"),b=l("a"),k=l("span"),g(m.$$.fragment),_=p(),q=l("span"),V=s("Create an image dataset"),L=p(),W=l("p"),_t=s("There are two methods for creating and sharing an image dataset. This guide will show you how to:"),gs=p(),ne=l("ul"),Fe=l("li"),Jo=s("Create an image dataset with "),Kt=l("code"),Xo=s("ImageFolder"),Ko=s(" and some metadata. This is a no-code solution for quickly creating an image dataset."),Qo=p(),Qt=l("li"),Zo=s("Create an image dataset by writing a loading script. This method is a bit more involved, but you have greater flexibility over how a dataset is defined, downloaded, and generated."),vs=p(),g(ie.$$.fragment),ys=p(),J=l("h2"),de=l("a"),Zt=l("span"),g(Be.$$.fragment),el=p(),ea=l("span"),tl=s("ImageFolder"),ws=p(),R=l("p"),al=s("The "),ta=l("code"),sl=s("ImageFolder"),ol=s(" is a dataset builder designed to quickly load an image dataset without requiring you to write any code. "),aa=l("code"),ll=s("ImageFolder"),rl=s(" automatically infers the class labels of your dataset based on the directory name. Just store your dataset in a directory structure like:"),$s=p(),g(Ne.$$.fragment),Es=p(),B=l("p"),nl=s("Then users can load your dataset by specifying "),sa=l("code"),il=s("imagefolder"),dl=s(" in "),gt=l("a"),pl=s("load_dataset()"),fl=s(" and the directory in "),oa=l("code"),hl=s("data_dir"),cl=s(":"),bs=p(),g(Ge.$$.fragment),ks=p(),pe=l("p"),ul=s("If there is additional information you\u2019d like to include about your dataset, like text captions or bounding boxes, add it as a "),la=l("code"),ml=s("metadata.jsonl"),_l=s(" file in your folder. This lets you quickly create datasets for different computer vision tasks like text captioning or object detection."),js=p(),g(Re.$$.fragment),qs=p(),X=l("h2"),fe=l("a"),ra=l("span"),g(Me.$$.fragment),gl=p(),na=l("span"),vl=s("Loading script"),Is=p(),vt=l("p"),yl=s("Write a dataset loading script to share a dataset. It defines a dataset\u2019s splits and configurations, and handles downloading and generating a dataset. The script is located in the same folder or repository as the dataset."),As=p(),g(Ue.$$.fragment),Cs=p(),yt=l("p"),wl=s("This structure allows your dataset to be loaded in one line:"),Ts=p(),g(He.$$.fragment),Ds=p(),he=l("p"),$l=s("This guide will show you how to create a dataset loading script for image datasets, which is a bit different from "),ze=l("a"),El=s("creating a loading script for text datasets"),bl=s(". You\u2019ll learn how to:"),xs=p(),I=l("ul"),ia=l("li"),kl=s("Create a dataset builder class."),jl=p(),da=l("li"),ql=s("Create dataset configurations."),Il=p(),pa=l("li"),Al=s("Add dataset metadata."),Cl=p(),fa=l("li"),Tl=s("Download and define the dataset splits."),Dl=p(),ha=l("li"),xl=s("Generate the dataset."),Sl=p(),ca=l("li"),Pl=s("Generate the dataset metadata (optional)."),Ll=p(),ua=l("li"),Ol=s("Upload the dataset to the Hub."),Ss=p(),ce=l("p"),Fl=s("The best way to learn is to open up an existing image dataset loading script, like "),Ye=l("a"),Bl=s("Food-101"),Nl=s(", and follow along!"),Ps=p(),g(ue.$$.fragment),Ls=p(),K=l("h2"),me=l("a"),ma=l("span"),g(Ve.$$.fragment),Gl=p(),_a=l("span"),Rl=s("Create a dataset builder class"),Os=p(),We=l("p"),wt=l("a"),Ml=s("GeneratorBasedBuilder"),Ul=s(" is the base class for datasets generated from a dictionary generator. Within this class, there are three methods to help create your dataset:"),Fs=p(),M=l("ul"),$t=l("li"),ga=l("code"),Hl=s("info"),zl=s(" stores information about your dataset like its description, license, and features."),Yl=p(),Et=l("li"),va=l("code"),Vl=s("split_generators"),Wl=s(" downloads the dataset and defines its splits."),Jl=p(),bt=l("li"),ya=l("code"),Xl=s("generate_examples"),Kl=s(" generates the images and labels for each split."),Bs=p(),_e=l("p"),Ql=s("Start by creating your dataset class as a subclass of "),kt=l("a"),Zl=s("GeneratorBasedBuilder"),er=s(" and add the three methods. Don\u2019t worry about filling in each of these methods yet, you\u2019ll develop those over the next few sections:"),Ns=p(),g(Je.$$.fragment),Gs=p(),Q=l("h3"),ge=l("a"),wa=l("span"),g(Xe.$$.fragment),tr=p(),$a=l("span"),ar=s("Multiple configurations"),Rs=p(),ve=l("p"),sr=s("In some cases, a dataset may have more than one configuration. For example, if you check out the "),Ke=l("a"),or=s("Imagenette dataset"),lr=s(", you\u2019ll notice there are three subsets."),Ms=p(),N=l("p"),rr=s("To create different configurations, use the "),jt=l("a"),nr=s("BuilderConfig"),ir=s(" class to create a subclass for your dataset. Provide the links to download the images and labels in "),Ea=l("code"),dr=s("data_url"),pr=s(" and "),ba=l("code"),fr=s("metadata_urls"),hr=s(":"),Us=p(),g(Qe.$$.fragment),Hs=p(),ye=l("p"),cr=s("Now you can define your subsets at the top of "),qt=l("a"),ur=s("GeneratorBasedBuilder"),mr=s(". Imagine you want to create two subsets in the Food-101 dataset based on whether it is a breakfast or dinner food."),zs=p(),we=l("ol"),Z=l("li"),_r=s("Define your subsets with "),ka=l("code"),gr=s("Food101Config"),vr=s(" in a list in "),ja=l("code"),yr=s("BUILDER_CONFIGS"),wr=s("."),$r=p(),qa=l("li"),Er=s("For each configuration, provide a name, description, and where to download the images and labels from."),Ys=p(),g(Ze.$$.fragment),Vs=p(),$e=l("p"),br=s("Now if users want to load the "),Ia=l("code"),kr=s("breakfast"),jr=s(" configuration, they can use the configuration name:"),Ws=p(),g(et.$$.fragment),Js=p(),ee=l("h2"),Ee=l("a"),Aa=l("span"),g(tt.$$.fragment),qr=p(),Ca=l("span"),Ir=s("Add dataset metadata"),Xs=p(),U=l("p"),Ar=s("Adding information about your dataset is useful for users to learn more about it. This information is stored in the "),It=l("a"),Cr=s("DatasetInfo"),Tr=s(" class which is returned by the "),Ta=l("code"),Dr=s("info"),xr=s(" method. Users can access this information by:"),Ks=p(),g(at.$$.fragment),Qs=p(),At=l("p"),Sr=s("There is a lot of information you can specify about your dataset, but some important ones to include are:"),Zs=p(),T=l("ol"),Ct=l("li"),Da=l("code"),Pr=s("description"),Lr=s(" provides a concise description of the dataset."),Or=p(),be=l("li"),xa=l("code"),Fr=s("features"),Br=s(" specify the dataset column types. Since you\u2019re creating an image loading script, you\u2019ll need to include the "),Tt=l("a"),Nr=s("Image"),Gr=s(" feature."),Rr=p(),Dt=l("li"),Sa=l("code"),Mr=s("supervised_keys"),Ur=s(" specify the input feature and label."),Hr=p(),xt=l("li"),Pa=l("code"),zr=s("homepage"),Yr=s(" provides a link to the dataset homepage."),Vr=p(),St=l("li"),La=l("code"),Wr=s("citation"),Jr=s(" is a BibTeX citation of the dataset."),Xr=p(),Pt=l("li"),Oa=l("code"),Kr=s("license"),Qr=s(" states the dataset\u2019s license."),eo=p(),g(ke.$$.fragment),to=p(),g(st.$$.fragment),ao=p(),te=l("h2"),je=l("a"),Fa=l("span"),g(ot.$$.fragment),Zr=p(),Ba=l("span"),en=s("Download and define the dataset splits"),so=p(),Lt=l("p"),tn=s("Now that you\u2019ve added some information about your dataset, the next step is to download the dataset and generate the splits."),oo=p(),qe=l("ol"),ae=l("li"),lt=l("p"),an=s("Use the "),Ot=l("a"),sn=s("DownloadManager.download()"),on=s(" method to download the dataset and any other metadata you\u2019d like to associate with it. This method accepts:"),ln=p(),se=l("ul"),rt=l("li"),rn=s("a name to a file inside a Hub dataset repository (in other words, the "),Na=l("code"),nn=s("data/"),dn=s(" folder)"),pn=p(),Ga=l("li"),fn=s("a URL to a file hosted somewhere else"),hn=p(),Ra=l("li"),cn=s("a list or dictionary of file names or URLs"),un=p(),Ma=l("p"),mn=s("In the Food-101 loading script, you\u2019ll notice again the URLs are defined earlier in the script."),_n=p(),nt=l("li"),O=l("p"),gn=s("After you\u2019ve downloaded the dataset, use the "),Ft=l("a"),vn=s("SplitGenerator"),yn=s(" to organize the images and labels in each split. Name each split with a standard name like: "),Ua=l("code"),wn=s("Split.TRAIN"),$n=s(", "),Ha=l("code"),En=s("Split.TEST"),bn=s(", and "),za=l("code"),kn=s("SPLIT.Validation"),jn=s("."),qn=p(),C=l("p"),In=s("In the "),Ya=l("code"),An=s("gen_kwargs"),Cn=s(" parameter, specify the file paths to the "),Va=l("code"),Tn=s("images"),Dn=s(" to iterate over and load. If necessary, you can use "),Bt=l("a"),xn=s("DownloadManager.iter_archive()"),Sn=s(" to iterate over images in TAR archives. You can also specify the associated labels in the "),Wa=l("code"),Pn=s("metadata_path"),Ln=s(". The "),Ja=l("code"),On=s("images"),Fn=s(" and "),Xa=l("code"),Bn=s("metadata_path"),Nn=s(" are actually passed onto the next step where you\u2019ll actually generate the dataset."),lo=p(),g(Ie.$$.fragment),ro=p(),g(it.$$.fragment),no=p(),oe=l("h2"),Ae=l("a"),Ka=l("span"),g(dt.$$.fragment),Gn=p(),Qa=l("span"),Rn=s("Generate the dataset"),io=p(),A=l("p"),Mn=s("The last method in the "),Nt=l("a"),Un=s("GeneratorBasedBuilder"),Hn=s(" class actually generates the images and labels in the dataset. It yields a dataset according to the stucture specified in "),Za=l("code"),zn=s("features"),Yn=s(" from the "),es=l("code"),Vn=s("info"),Wn=s(" method. As you can see, "),ts=l("code"),Jn=s("generate_examples"),Xn=s(" accepts the "),as=l("code"),Kn=s("images"),Qn=s(" and "),ss=l("code"),Zn=s("metadata_path"),ei=s(" from the previous method as arguments."),po=p(),g(Ce.$$.fragment),fo=p(),Gt=l("p"),ti=s("Now you can write a function for opening and loading examples from the dataset:"),ho=p(),g(pt.$$.fragment),co=p(),le=l("h2"),Te=l("a"),os=l("span"),g(ft.$$.fragment),ai=p(),ls=l("span"),si=s("Generate the dataset metadata (optional)"),uo=p(),De=l("p"),oi=s("The dataset metadata you added earlier now needs to be generated and stored in a file called "),rs=l("code"),li=s("datasets_infos.json"),ri=s(". In addition to information about a datasets features and description, this file also contains data file checksums to ensure integrity."),mo=p(),xe=l("p"),ni=s("Run the following command to generate your dataset metadata in "),ns=l("code"),ii=s("dataset_infos.json"),di=s(" and make sure your new loading script works correctly:"),_o=p(),g(ht.$$.fragment),go=p(),Se=l("p"),pi=s("If your loading script passed the test, you should now have a "),is=l("code"),fi=s("dataset_infos.json"),hi=s(" file in your dataset folder."),vo=p(),re=l("h2"),Pe=l("a"),ds=l("span"),g(ct.$$.fragment),ci=p(),ps=l("span"),ui=s("Upload the dataset to the Hub"),yo=p(),H=l("p"),mi=s("Once your script is ready, "),Rt=l("a"),_i=s("create a dataset card"),gi=s(" and "),Mt=l("a"),vi=s("upload it to the Hub"),yi=s("."),wo=p(),Ut=l("p"),wi=s("Congratulations, you can now load your dataset from the Hub! \u{1F973}"),$o=p(),g(ut.$$.fragment),this.h()},l(e){const i=kp('[data-svelte="svelte-1phssyn"]',document.head);c=r(i,"META",{name:!0,content:!0}),i.forEach(a),j=f(e),u=r(e,"H1",{class:!0});var mt=n(u);b=r(mt,"A",{id:!0,class:!0,href:!0});var fs=n(b);k=r(fs,"SPAN",{});var hs=n(k);v(m.$$.fragment,hs),hs.forEach(a),fs.forEach(a),_=f(mt),q=r(mt,"SPAN",{});var cs=n(q);V=o(cs,"Create an image dataset"),cs.forEach(a),mt.forEach(a),L=f(e),W=r(e,"P",{});var us=n(W);_t=o(us,"There are two methods for creating and sharing an image dataset. This guide will show you how to:"),us.forEach(a),gs=f(e),ne=r(e,"UL",{});var bo=n(ne);Fe=r(bo,"LI",{});var ko=n(Fe);Jo=o(ko,"Create an image dataset with "),Kt=r(ko,"CODE",{});var Ti=n(Kt);Xo=o(Ti,"ImageFolder"),Ti.forEach(a),Ko=o(ko," and some metadata. This is a no-code solution for quickly creating an image dataset."),ko.forEach(a),Qo=f(bo),Qt=r(bo,"LI",{});var Di=n(Qt);Zo=o(Di,"Create an image dataset by writing a loading script. This method is a bit more involved, but you have greater flexibility over how a dataset is defined, downloaded, and generated."),Di.forEach(a),bo.forEach(a),vs=f(e),v(ie.$$.fragment,e),ys=f(e),J=r(e,"H2",{class:!0});var jo=n(J);de=r(jo,"A",{id:!0,class:!0,href:!0});var xi=n(de);Zt=r(xi,"SPAN",{});var Si=n(Zt);v(Be.$$.fragment,Si),Si.forEach(a),xi.forEach(a),el=f(jo),ea=r(jo,"SPAN",{});var Pi=n(ea);tl=o(Pi,"ImageFolder"),Pi.forEach(a),jo.forEach(a),ws=f(e),R=r(e,"P",{});var Ht=n(R);al=o(Ht,"The "),ta=r(Ht,"CODE",{});var Li=n(ta);sl=o(Li,"ImageFolder"),Li.forEach(a),ol=o(Ht," is a dataset builder designed to quickly load an image dataset without requiring you to write any code. "),aa=r(Ht,"CODE",{});var Oi=n(aa);ll=o(Oi,"ImageFolder"),Oi.forEach(a),rl=o(Ht," automatically infers the class labels of your dataset based on the directory name. Just store your dataset in a directory structure like:"),Ht.forEach(a),$s=f(e),v(Ne.$$.fragment,e),Es=f(e),B=r(e,"P",{});var Le=n(B);nl=o(Le,"Then users can load your dataset by specifying "),sa=r(Le,"CODE",{});var Fi=n(sa);il=o(Fi,"imagefolder"),Fi.forEach(a),dl=o(Le," in "),gt=r(Le,"A",{href:!0});var Bi=n(gt);pl=o(Bi,"load_dataset()"),Bi.forEach(a),fl=o(Le," and the directory in "),oa=r(Le,"CODE",{});var Ni=n(oa);hl=o(Ni,"data_dir"),Ni.forEach(a),cl=o(Le,":"),Le.forEach(a),bs=f(e),v(Ge.$$.fragment,e),ks=f(e),pe=r(e,"P",{});var qo=n(pe);ul=o(qo,"If there is additional information you\u2019d like to include about your dataset, like text captions or bounding boxes, add it as a "),la=r(qo,"CODE",{});var Gi=n(la);ml=o(Gi,"metadata.jsonl"),Gi.forEach(a),_l=o(qo," file in your folder. This lets you quickly create datasets for different computer vision tasks like text captioning or object detection."),qo.forEach(a),js=f(e),v(Re.$$.fragment,e),qs=f(e),X=r(e,"H2",{class:!0});var Io=n(X);fe=r(Io,"A",{id:!0,class:!0,href:!0});var Ri=n(fe);ra=r(Ri,"SPAN",{});var Mi=n(ra);v(Me.$$.fragment,Mi),Mi.forEach(a),Ri.forEach(a),gl=f(Io),na=r(Io,"SPAN",{});var Ui=n(na);vl=o(Ui,"Loading script"),Ui.forEach(a),Io.forEach(a),Is=f(e),vt=r(e,"P",{});var Hi=n(vt);yl=o(Hi,"Write a dataset loading script to share a dataset. It defines a dataset\u2019s splits and configurations, and handles downloading and generating a dataset. The script is located in the same folder or repository as the dataset."),Hi.forEach(a),As=f(e),v(Ue.$$.fragment,e),Cs=f(e),yt=r(e,"P",{});var zi=n(yt);wl=o(zi,"This structure allows your dataset to be loaded in one line:"),zi.forEach(a),Ts=f(e),v(He.$$.fragment,e),Ds=f(e),he=r(e,"P",{});var Ao=n(he);$l=o(Ao,"This guide will show you how to create a dataset loading script for image datasets, which is a bit different from "),ze=r(Ao,"A",{class:!0,href:!0});var Yi=n(ze);El=o(Yi,"creating a loading script for text datasets"),Yi.forEach(a),bl=o(Ao,". You\u2019ll learn how to:"),Ao.forEach(a),xs=f(e),I=r(e,"UL",{});var x=n(I);ia=r(x,"LI",{});var Vi=n(ia);kl=o(Vi,"Create a dataset builder class."),Vi.forEach(a),jl=f(x),da=r(x,"LI",{});var Wi=n(da);ql=o(Wi,"Create dataset configurations."),Wi.forEach(a),Il=f(x),pa=r(x,"LI",{});var Ji=n(pa);Al=o(Ji,"Add dataset metadata."),Ji.forEach(a),Cl=f(x),fa=r(x,"LI",{});var Xi=n(fa);Tl=o(Xi,"Download and define the dataset splits."),Xi.forEach(a),Dl=f(x),ha=r(x,"LI",{});var Ki=n(ha);xl=o(Ki,"Generate the dataset."),Ki.forEach(a),Sl=f(x),ca=r(x,"LI",{});var Qi=n(ca);Pl=o(Qi,"Generate the dataset metadata (optional)."),Qi.forEach(a),Ll=f(x),ua=r(x,"LI",{});var Zi=n(ua);Ol=o(Zi,"Upload the dataset to the Hub."),Zi.forEach(a),x.forEach(a),Ss=f(e),ce=r(e,"P",{});var Co=n(ce);Fl=o(Co,"The best way to learn is to open up an existing image dataset loading script, like "),Ye=r(Co,"A",{href:!0,rel:!0});var ed=n(Ye);Bl=o(ed,"Food-101"),ed.forEach(a),Nl=o(Co,", and follow along!"),Co.forEach(a),Ps=f(e),v(ue.$$.fragment,e),Ls=f(e),K=r(e,"H2",{class:!0});var To=n(K);me=r(To,"A",{id:!0,class:!0,href:!0});var td=n(me);ma=r(td,"SPAN",{});var ad=n(ma);v(Ve.$$.fragment,ad),ad.forEach(a),td.forEach(a),Gl=f(To),_a=r(To,"SPAN",{});var sd=n(_a);Rl=o(sd,"Create a dataset builder class"),sd.forEach(a),To.forEach(a),Os=f(e),We=r(e,"P",{});var $i=n(We);wt=r($i,"A",{href:!0});var od=n(wt);Ml=o(od,"GeneratorBasedBuilder"),od.forEach(a),Ul=o($i," is the base class for datasets generated from a dictionary generator. Within this class, there are three methods to help create your dataset:"),$i.forEach(a),Fs=f(e),M=r(e,"UL",{});var zt=n(M);$t=r(zt,"LI",{});var Ei=n($t);ga=r(Ei,"CODE",{});var ld=n(ga);Hl=o(ld,"info"),ld.forEach(a),zl=o(Ei," stores information about your dataset like its description, license, and features."),Ei.forEach(a),Yl=f(zt),Et=r(zt,"LI",{});var bi=n(Et);va=r(bi,"CODE",{});var rd=n(va);Vl=o(rd,"split_generators"),rd.forEach(a),Wl=o(bi," downloads the dataset and defines its splits."),bi.forEach(a),Jl=f(zt),bt=r(zt,"LI",{});var ki=n(bt);ya=r(ki,"CODE",{});var nd=n(ya);Xl=o(nd,"generate_examples"),nd.forEach(a),Kl=o(ki," generates the images and labels for each split."),ki.forEach(a),zt.forEach(a),Bs=f(e),_e=r(e,"P",{});var Do=n(_e);Ql=o(Do,"Start by creating your dataset class as a subclass of "),kt=r(Do,"A",{href:!0});var id=n(kt);Zl=o(id,"GeneratorBasedBuilder"),id.forEach(a),er=o(Do," and add the three methods. Don\u2019t worry about filling in each of these methods yet, you\u2019ll develop those over the next few sections:"),Do.forEach(a),Ns=f(e),v(Je.$$.fragment,e),Gs=f(e),Q=r(e,"H3",{class:!0});var xo=n(Q);ge=r(xo,"A",{id:!0,class:!0,href:!0});var dd=n(ge);wa=r(dd,"SPAN",{});var pd=n(wa);v(Xe.$$.fragment,pd),pd.forEach(a),dd.forEach(a),tr=f(xo),$a=r(xo,"SPAN",{});var fd=n($a);ar=o(fd,"Multiple configurations"),fd.forEach(a),xo.forEach(a),Rs=f(e),ve=r(e,"P",{});var So=n(ve);sr=o(So,"In some cases, a dataset may have more than one configuration. For example, if you check out the "),Ke=r(So,"A",{href:!0,rel:!0});var hd=n(Ke);or=o(hd,"Imagenette dataset"),hd.forEach(a),lr=o(So,", you\u2019ll notice there are three subsets."),So.forEach(a),Ms=f(e),N=r(e,"P",{});var Oe=n(N);rr=o(Oe,"To create different configurations, use the "),jt=r(Oe,"A",{href:!0});var cd=n(jt);nr=o(cd,"BuilderConfig"),cd.forEach(a),ir=o(Oe," class to create a subclass for your dataset. Provide the links to download the images and labels in "),Ea=r(Oe,"CODE",{});var ud=n(Ea);dr=o(ud,"data_url"),ud.forEach(a),pr=o(Oe," and "),ba=r(Oe,"CODE",{});var md=n(ba);fr=o(md,"metadata_urls"),md.forEach(a),hr=o(Oe,":"),Oe.forEach(a),Us=f(e),v(Qe.$$.fragment,e),Hs=f(e),ye=r(e,"P",{});var Po=n(ye);cr=o(Po,"Now you can define your subsets at the top of "),qt=r(Po,"A",{href:!0});var _d=n(qt);ur=o(_d,"GeneratorBasedBuilder"),_d.forEach(a),mr=o(Po,". Imagine you want to create two subsets in the Food-101 dataset based on whether it is a breakfast or dinner food."),Po.forEach(a),zs=f(e),we=r(e,"OL",{});var Lo=n(we);Z=r(Lo,"LI",{});var Yt=n(Z);_r=o(Yt,"Define your subsets with "),ka=r(Yt,"CODE",{});var gd=n(ka);gr=o(gd,"Food101Config"),gd.forEach(a),vr=o(Yt," in a list in "),ja=r(Yt,"CODE",{});var vd=n(ja);yr=o(vd,"BUILDER_CONFIGS"),vd.forEach(a),wr=o(Yt,"."),Yt.forEach(a),$r=f(Lo),qa=r(Lo,"LI",{});var yd=n(qa);Er=o(yd,"For each configuration, provide a name, description, and where to download the images and labels from."),yd.forEach(a),Lo.forEach(a),Ys=f(e),v(Ze.$$.fragment,e),Vs=f(e),$e=r(e,"P",{});var Oo=n($e);br=o(Oo,"Now if users want to load the "),Ia=r(Oo,"CODE",{});var wd=n(Ia);kr=o(wd,"breakfast"),wd.forEach(a),jr=o(Oo," configuration, they can use the configuration name:"),Oo.forEach(a),Ws=f(e),v(et.$$.fragment,e),Js=f(e),ee=r(e,"H2",{class:!0});var Fo=n(ee);Ee=r(Fo,"A",{id:!0,class:!0,href:!0});var $d=n(Ee);Aa=r($d,"SPAN",{});var Ed=n(Aa);v(tt.$$.fragment,Ed),Ed.forEach(a),$d.forEach(a),qr=f(Fo),Ca=r(Fo,"SPAN",{});var bd=n(Ca);Ir=o(bd,"Add dataset metadata"),bd.forEach(a),Fo.forEach(a),Xs=f(e),U=r(e,"P",{});var Vt=n(U);Ar=o(Vt,"Adding information about your dataset is useful for users to learn more about it. This information is stored in the "),It=r(Vt,"A",{href:!0});var kd=n(It);Cr=o(kd,"DatasetInfo"),kd.forEach(a),Tr=o(Vt," class which is returned by the "),Ta=r(Vt,"CODE",{});var jd=n(Ta);Dr=o(jd,"info"),jd.forEach(a),xr=o(Vt," method. Users can access this information by:"),Vt.forEach(a),Ks=f(e),v(at.$$.fragment,e),Qs=f(e),At=r(e,"P",{});var qd=n(At);Sr=o(qd,"There is a lot of information you can specify about your dataset, but some important ones to include are:"),qd.forEach(a),Zs=f(e),T=r(e,"OL",{});var G=n(T);Ct=r(G,"LI",{});var ji=n(Ct);Da=r(ji,"CODE",{});var Id=n(Da);Pr=o(Id,"description"),Id.forEach(a),Lr=o(ji," provides a concise description of the dataset."),ji.forEach(a),Or=f(G),be=r(G,"LI",{});var ms=n(be);xa=r(ms,"CODE",{});var Ad=n(xa);Fr=o(Ad,"features"),Ad.forEach(a),Br=o(ms," specify the dataset column types. Since you\u2019re creating an image loading script, you\u2019ll need to include the "),Tt=r(ms,"A",{href:!0});var Cd=n(Tt);Nr=o(Cd,"Image"),Cd.forEach(a),Gr=o(ms," feature."),ms.forEach(a),Rr=f(G),Dt=r(G,"LI",{});var qi=n(Dt);Sa=r(qi,"CODE",{});var Td=n(Sa);Mr=o(Td,"supervised_keys"),Td.forEach(a),Ur=o(qi," specify the input feature and label."),qi.forEach(a),Hr=f(G),xt=r(G,"LI",{});var Ii=n(xt);Pa=r(Ii,"CODE",{});var Dd=n(Pa);zr=o(Dd,"homepage"),Dd.forEach(a),Yr=o(Ii," provides a link to the dataset homepage."),Ii.forEach(a),Vr=f(G),St=r(G,"LI",{});var Ai=n(St);La=r(Ai,"CODE",{});var xd=n(La);Wr=o(xd,"citation"),xd.forEach(a),Jr=o(Ai," is a BibTeX citation of the dataset."),Ai.forEach(a),Xr=f(G),Pt=r(G,"LI",{});var Ci=n(Pt);Oa=r(Ci,"CODE",{});var Sd=n(Oa);Kr=o(Sd,"license"),Sd.forEach(a),Qr=o(Ci," states the dataset\u2019s license."),Ci.forEach(a),G.forEach(a),eo=f(e),v(ke.$$.fragment,e),to=f(e),v(st.$$.fragment,e),ao=f(e),te=r(e,"H2",{class:!0});var Bo=n(te);je=r(Bo,"A",{id:!0,class:!0,href:!0});var Pd=n(je);Fa=r(Pd,"SPAN",{});var Ld=n(Fa);v(ot.$$.fragment,Ld),Ld.forEach(a),Pd.forEach(a),Zr=f(Bo),Ba=r(Bo,"SPAN",{});var Od=n(Ba);en=o(Od,"Download and define the dataset splits"),Od.forEach(a),Bo.forEach(a),so=f(e),Lt=r(e,"P",{});var Fd=n(Lt);tn=o(Fd,"Now that you\u2019ve added some information about your dataset, the next step is to download the dataset and generate the splits."),Fd.forEach(a),oo=f(e),qe=r(e,"OL",{});var No=n(qe);ae=r(No,"LI",{});var Wt=n(ae);lt=r(Wt,"P",{});var Go=n(lt);an=o(Go,"Use the "),Ot=r(Go,"A",{href:!0});var Bd=n(Ot);sn=o(Bd,"DownloadManager.download()"),Bd.forEach(a),on=o(Go," method to download the dataset and any other metadata you\u2019d like to associate with it. This method accepts:"),Go.forEach(a),ln=f(Wt),se=r(Wt,"UL",{});var Jt=n(se);rt=r(Jt,"LI",{});var Ro=n(rt);rn=o(Ro,"a name to a file inside a Hub dataset repository (in other words, the "),Na=r(Ro,"CODE",{});var Nd=n(Na);nn=o(Nd,"data/"),Nd.forEach(a),dn=o(Ro," folder)"),Ro.forEach(a),pn=f(Jt),Ga=r(Jt,"LI",{});var Gd=n(Ga);fn=o(Gd,"a URL to a file hosted somewhere else"),Gd.forEach(a),hn=f(Jt),Ra=r(Jt,"LI",{});var Rd=n(Ra);cn=o(Rd,"a list or dictionary of file names or URLs"),Rd.forEach(a),Jt.forEach(a),un=f(Wt),Ma=r(Wt,"P",{});var Md=n(Ma);mn=o(Md,"In the Food-101 loading script, you\u2019ll notice again the URLs are defined earlier in the script."),Md.forEach(a),Wt.forEach(a),_n=f(No),nt=r(No,"LI",{});var Mo=n(nt);O=r(Mo,"P",{});var z=n(O);gn=o(z,"After you\u2019ve downloaded the dataset, use the "),Ft=r(z,"A",{href:!0});var Ud=n(Ft);vn=o(Ud,"SplitGenerator"),Ud.forEach(a),yn=o(z," to organize the images and labels in each split. Name each split with a standard name like: "),Ua=r(z,"CODE",{});var Hd=n(Ua);wn=o(Hd,"Split.TRAIN"),Hd.forEach(a),$n=o(z,", "),Ha=r(z,"CODE",{});var zd=n(Ha);En=o(zd,"Split.TEST"),zd.forEach(a),bn=o(z,", and "),za=r(z,"CODE",{});var Yd=n(za);kn=o(Yd,"SPLIT.Validation"),Yd.forEach(a),jn=o(z,"."),z.forEach(a),qn=f(Mo),C=r(Mo,"P",{});var S=n(C);In=o(S,"In the "),Ya=r(S,"CODE",{});var Vd=n(Ya);An=o(Vd,"gen_kwargs"),Vd.forEach(a),Cn=o(S," parameter, specify the file paths to the "),Va=r(S,"CODE",{});var Wd=n(Va);Tn=o(Wd,"images"),Wd.forEach(a),Dn=o(S," to iterate over and load. If necessary, you can use "),Bt=r(S,"A",{href:!0});var Jd=n(Bt);xn=o(Jd,"DownloadManager.iter_archive()"),Jd.forEach(a),Sn=o(S," to iterate over images in TAR archives. You can also specify the associated labels in the "),Wa=r(S,"CODE",{});var Xd=n(Wa);Pn=o(Xd,"metadata_path"),Xd.forEach(a),Ln=o(S,". The "),Ja=r(S,"CODE",{});var Kd=n(Ja);On=o(Kd,"images"),Kd.forEach(a),Fn=o(S," and "),Xa=r(S,"CODE",{});var Qd=n(Xa);Bn=o(Qd,"metadata_path"),Qd.forEach(a),Nn=o(S," are actually passed onto the next step where you\u2019ll actually generate the dataset."),S.forEach(a),Mo.forEach(a),No.forEach(a),lo=f(e),v(Ie.$$.fragment,e),ro=f(e),v(it.$$.fragment,e),no=f(e),oe=r(e,"H2",{class:!0});var Uo=n(oe);Ae=r(Uo,"A",{id:!0,class:!0,href:!0});var Zd=n(Ae);Ka=r(Zd,"SPAN",{});var ep=n(Ka);v(dt.$$.fragment,ep),ep.forEach(a),Zd.forEach(a),Gn=f(Uo),Qa=r(Uo,"SPAN",{});var tp=n(Qa);Rn=o(tp,"Generate the dataset"),tp.forEach(a),Uo.forEach(a),io=f(e),A=r(e,"P",{});var P=n(A);Mn=o(P,"The last method in the "),Nt=r(P,"A",{href:!0});var ap=n(Nt);Un=o(ap,"GeneratorBasedBuilder"),ap.forEach(a),Hn=o(P," class actually generates the images and labels in the dataset. It yields a dataset according to the stucture specified in "),Za=r(P,"CODE",{});var sp=n(Za);zn=o(sp,"features"),sp.forEach(a),Yn=o(P," from the "),es=r(P,"CODE",{});var op=n(es);Vn=o(op,"info"),op.forEach(a),Wn=o(P," method. As you can see, "),ts=r(P,"CODE",{});var lp=n(ts);Jn=o(lp,"generate_examples"),lp.forEach(a),Xn=o(P," accepts the "),as=r(P,"CODE",{});var rp=n(as);Kn=o(rp,"images"),rp.forEach(a),Qn=o(P," and "),ss=r(P,"CODE",{});var np=n(ss);Zn=o(np,"metadata_path"),np.forEach(a),ei=o(P," from the previous method as arguments."),P.forEach(a),po=f(e),v(Ce.$$.fragment,e),fo=f(e),Gt=r(e,"P",{});var ip=n(Gt);ti=o(ip,"Now you can write a function for opening and loading examples from the dataset:"),ip.forEach(a),ho=f(e),v(pt.$$.fragment,e),co=f(e),le=r(e,"H2",{class:!0});var Ho=n(le);Te=r(Ho,"A",{id:!0,class:!0,href:!0});var dp=n(Te);os=r(dp,"SPAN",{});var pp=n(os);v(ft.$$.fragment,pp),pp.forEach(a),dp.forEach(a),ai=f(Ho),ls=r(Ho,"SPAN",{});var fp=n(ls);si=o(fp,"Generate the dataset metadata (optional)"),fp.forEach(a),Ho.forEach(a),uo=f(e),De=r(e,"P",{});var zo=n(De);oi=o(zo,"The dataset metadata you added earlier now needs to be generated and stored in a file called "),rs=r(zo,"CODE",{});var hp=n(rs);li=o(hp,"datasets_infos.json"),hp.forEach(a),ri=o(zo,". In addition to information about a datasets features and description, this file also contains data file checksums to ensure integrity."),zo.forEach(a),mo=f(e),xe=r(e,"P",{});var Yo=n(xe);ni=o(Yo,"Run the following command to generate your dataset metadata in "),ns=r(Yo,"CODE",{});var cp=n(ns);ii=o(cp,"dataset_infos.json"),cp.forEach(a),di=o(Yo," and make sure your new loading script works correctly:"),Yo.forEach(a),_o=f(e),v(ht.$$.fragment,e),go=f(e),Se=r(e,"P",{});var Vo=n(Se);pi=o(Vo,"If your loading script passed the test, you should now have a "),is=r(Vo,"CODE",{});var up=n(is);fi=o(up,"dataset_infos.json"),up.forEach(a),hi=o(Vo," file in your dataset folder."),Vo.forEach(a),vo=f(e),re=r(e,"H2",{class:!0});var Wo=n(re);Pe=r(Wo,"A",{id:!0,class:!0,href:!0});var mp=n(Pe);ds=r(mp,"SPAN",{});var _p=n(ds);v(ct.$$.fragment,_p),_p.forEach(a),mp.forEach(a),ci=f(Wo),ps=r(Wo,"SPAN",{});var gp=n(ps);ui=o(gp,"Upload the dataset to the Hub"),gp.forEach(a),Wo.forEach(a),yo=f(e),H=r(e,"P",{});var Xt=n(H);mi=o(Xt,"Once your script is ready, "),Rt=r(Xt,"A",{href:!0});var vp=n(Rt);_i=o(vp,"create a dataset card"),vp.forEach(a),gi=o(Xt," and "),Mt=r(Xt,"A",{href:!0});var yp=n(Mt);vi=o(yp,"upload it to the Hub"),yp.forEach(a),yi=o(Xt,"."),Xt.forEach(a),wo=f(e),Ut=r(e,"P",{});var wp=n(Ut);wi=o(wp,"Congratulations, you can now load your dataset from the Hub! \u{1F973}"),wp.forEach(a),$o=f(e),v(ut.$$.fragment,e),this.h()},h(){h(c,"name","hf:doc:metadata"),h(c,"content",JSON.stringify(xp)),h(b,"id","create-an-image-dataset"),h(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(b,"href","#create-an-image-dataset"),h(u,"class","relative group"),h(de,"id","imagefolder"),h(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(de,"href","#imagefolder"),h(J,"class","relative group"),h(gt,"href","/docs/datasets/pr_4783/en/package_reference/loading_methods#datasets.load_dataset"),h(fe,"id","loading-script"),h(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(fe,"href","#loading-script"),h(X,"class","relative group"),h(ze,"class","underline decoration-green-400 decoration-2 font-semibold"),h(ze,"href","./dataset_script"),h(Ye,"href","https://huggingface.co/datasets/food101/blob/main/food101.py"),h(Ye,"rel","nofollow"),h(me,"id","create-a-dataset-builder-class"),h(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(me,"href","#create-a-dataset-builder-class"),h(K,"class","relative group"),h(wt,"href","/docs/datasets/pr_4783/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),h(kt,"href","/docs/datasets/pr_4783/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),h(ge,"id","multiple-configurations"),h(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ge,"href","#multiple-configurations"),h(Q,"class","relative group"),h(Ke,"href","https://huggingface.co/datasets/frgfm/imagenette"),h(Ke,"rel","nofollow"),h(jt,"href","/docs/datasets/pr_4783/en/package_reference/builder_classes#datasets.BuilderConfig"),h(qt,"href","/docs/datasets/pr_4783/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),h(Ee,"id","add-dataset-metadata"),h(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ee,"href","#add-dataset-metadata"),h(ee,"class","relative group"),h(It,"href","/docs/datasets/pr_4783/en/package_reference/main_classes#datasets.DatasetInfo"),h(Tt,"href","/docs/datasets/pr_4783/en/package_reference/main_classes#datasets.Image"),h(je,"id","download-and-define-the-dataset-splits"),h(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(je,"href","#download-and-define-the-dataset-splits"),h(te,"class","relative group"),h(Ot,"href","/docs/datasets/pr_4783/en/package_reference/builder_classes#datasets.DownloadManager.download"),h(Ft,"href","/docs/datasets/pr_4783/en/package_reference/builder_classes#datasets.SplitGenerator"),h(Bt,"href","/docs/datasets/pr_4783/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive"),h(Ae,"id","generate-the-dataset"),h(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ae,"href","#generate-the-dataset"),h(oe,"class","relative group"),h(Nt,"href","/docs/datasets/pr_4783/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),h(Te,"id","generate-the-dataset-metadata-optional"),h(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Te,"href","#generate-the-dataset-metadata-optional"),h(le,"class","relative group"),h(Pe,"id","upload-the-dataset-to-the-hub"),h(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Pe,"href","#upload-the-dataset-to-the-hub"),h(re,"class","relative group"),h(Rt,"href","./dataset_card"),h(Mt,"href","./share")},m(e,i){t(document.head,c),d(e,j,i),d(e,u,i),t(u,b),t(b,k),y(m,k,null),t(u,_),t(u,q),t(q,V),d(e,L,i),d(e,W,i),t(W,_t),d(e,gs,i),d(e,ne,i),t(ne,Fe),t(Fe,Jo),t(Fe,Kt),t(Kt,Xo),t(Fe,Ko),t(ne,Qo),t(ne,Qt),t(Qt,Zo),d(e,vs,i),y(ie,e,i),d(e,ys,i),d(e,J,i),t(J,de),t(de,Zt),y(Be,Zt,null),t(J,el),t(J,ea),t(ea,tl),d(e,ws,i),d(e,R,i),t(R,al),t(R,ta),t(ta,sl),t(R,ol),t(R,aa),t(aa,ll),t(R,rl),d(e,$s,i),y(Ne,e,i),d(e,Es,i),d(e,B,i),t(B,nl),t(B,sa),t(sa,il),t(B,dl),t(B,gt),t(gt,pl),t(B,fl),t(B,oa),t(oa,hl),t(B,cl),d(e,bs,i),y(Ge,e,i),d(e,ks,i),d(e,pe,i),t(pe,ul),t(pe,la),t(la,ml),t(pe,_l),d(e,js,i),y(Re,e,i),d(e,qs,i),d(e,X,i),t(X,fe),t(fe,ra),y(Me,ra,null),t(X,gl),t(X,na),t(na,vl),d(e,Is,i),d(e,vt,i),t(vt,yl),d(e,As,i),y(Ue,e,i),d(e,Cs,i),d(e,yt,i),t(yt,wl),d(e,Ts,i),y(He,e,i),d(e,Ds,i),d(e,he,i),t(he,$l),t(he,ze),t(ze,El),t(he,bl),d(e,xs,i),d(e,I,i),t(I,ia),t(ia,kl),t(I,jl),t(I,da),t(da,ql),t(I,Il),t(I,pa),t(pa,Al),t(I,Cl),t(I,fa),t(fa,Tl),t(I,Dl),t(I,ha),t(ha,xl),t(I,Sl),t(I,ca),t(ca,Pl),t(I,Ll),t(I,ua),t(ua,Ol),d(e,Ss,i),d(e,ce,i),t(ce,Fl),t(ce,Ye),t(Ye,Bl),t(ce,Nl),d(e,Ps,i),y(ue,e,i),d(e,Ls,i),d(e,K,i),t(K,me),t(me,ma),y(Ve,ma,null),t(K,Gl),t(K,_a),t(_a,Rl),d(e,Os,i),d(e,We,i),t(We,wt),t(wt,Ml),t(We,Ul),d(e,Fs,i),d(e,M,i),t(M,$t),t($t,ga),t(ga,Hl),t($t,zl),t(M,Yl),t(M,Et),t(Et,va),t(va,Vl),t(Et,Wl),t(M,Jl),t(M,bt),t(bt,ya),t(ya,Xl),t(bt,Kl),d(e,Bs,i),d(e,_e,i),t(_e,Ql),t(_e,kt),t(kt,Zl),t(_e,er),d(e,Ns,i),y(Je,e,i),d(e,Gs,i),d(e,Q,i),t(Q,ge),t(ge,wa),y(Xe,wa,null),t(Q,tr),t(Q,$a),t($a,ar),d(e,Rs,i),d(e,ve,i),t(ve,sr),t(ve,Ke),t(Ke,or),t(ve,lr),d(e,Ms,i),d(e,N,i),t(N,rr),t(N,jt),t(jt,nr),t(N,ir),t(N,Ea),t(Ea,dr),t(N,pr),t(N,ba),t(ba,fr),t(N,hr),d(e,Us,i),y(Qe,e,i),d(e,Hs,i),d(e,ye,i),t(ye,cr),t(ye,qt),t(qt,ur),t(ye,mr),d(e,zs,i),d(e,we,i),t(we,Z),t(Z,_r),t(Z,ka),t(ka,gr),t(Z,vr),t(Z,ja),t(ja,yr),t(Z,wr),t(we,$r),t(we,qa),t(qa,Er),d(e,Ys,i),y(Ze,e,i),d(e,Vs,i),d(e,$e,i),t($e,br),t($e,Ia),t(Ia,kr),t($e,jr),d(e,Ws,i),y(et,e,i),d(e,Js,i),d(e,ee,i),t(ee,Ee),t(Ee,Aa),y(tt,Aa,null),t(ee,qr),t(ee,Ca),t(Ca,Ir),d(e,Xs,i),d(e,U,i),t(U,Ar),t(U,It),t(It,Cr),t(U,Tr),t(U,Ta),t(Ta,Dr),t(U,xr),d(e,Ks,i),y(at,e,i),d(e,Qs,i),d(e,At,i),t(At,Sr),d(e,Zs,i),d(e,T,i),t(T,Ct),t(Ct,Da),t(Da,Pr),t(Ct,Lr),t(T,Or),t(T,be),t(be,xa),t(xa,Fr),t(be,Br),t(be,Tt),t(Tt,Nr),t(be,Gr),t(T,Rr),t(T,Dt),t(Dt,Sa),t(Sa,Mr),t(Dt,Ur),t(T,Hr),t(T,xt),t(xt,Pa),t(Pa,zr),t(xt,Yr),t(T,Vr),t(T,St),t(St,La),t(La,Wr),t(St,Jr),t(T,Xr),t(T,Pt),t(Pt,Oa),t(Oa,Kr),t(Pt,Qr),d(e,eo,i),y(ke,e,i),d(e,to,i),y(st,e,i),d(e,ao,i),d(e,te,i),t(te,je),t(je,Fa),y(ot,Fa,null),t(te,Zr),t(te,Ba),t(Ba,en),d(e,so,i),d(e,Lt,i),t(Lt,tn),d(e,oo,i),d(e,qe,i),t(qe,ae),t(ae,lt),t(lt,an),t(lt,Ot),t(Ot,sn),t(lt,on),t(ae,ln),t(ae,se),t(se,rt),t(rt,rn),t(rt,Na),t(Na,nn),t(rt,dn),t(se,pn),t(se,Ga),t(Ga,fn),t(se,hn),t(se,Ra),t(Ra,cn),t(ae,un),t(ae,Ma),t(Ma,mn),t(qe,_n),t(qe,nt),t(nt,O),t(O,gn),t(O,Ft),t(Ft,vn),t(O,yn),t(O,Ua),t(Ua,wn),t(O,$n),t(O,Ha),t(Ha,En),t(O,bn),t(O,za),t(za,kn),t(O,jn),t(nt,qn),t(nt,C),t(C,In),t(C,Ya),t(Ya,An),t(C,Cn),t(C,Va),t(Va,Tn),t(C,Dn),t(C,Bt),t(Bt,xn),t(C,Sn),t(C,Wa),t(Wa,Pn),t(C,Ln),t(C,Ja),t(Ja,On),t(C,Fn),t(C,Xa),t(Xa,Bn),t(C,Nn),d(e,lo,i),y(Ie,e,i),d(e,ro,i),y(it,e,i),d(e,no,i),d(e,oe,i),t(oe,Ae),t(Ae,Ka),y(dt,Ka,null),t(oe,Gn),t(oe,Qa),t(Qa,Rn),d(e,io,i),d(e,A,i),t(A,Mn),t(A,Nt),t(Nt,Un),t(A,Hn),t(A,Za),t(Za,zn),t(A,Yn),t(A,es),t(es,Vn),t(A,Wn),t(A,ts),t(ts,Jn),t(A,Xn),t(A,as),t(as,Kn),t(A,Qn),t(A,ss),t(ss,Zn),t(A,ei),d(e,po,i),y(Ce,e,i),d(e,fo,i),d(e,Gt,i),t(Gt,ti),d(e,ho,i),y(pt,e,i),d(e,co,i),d(e,le,i),t(le,Te),t(Te,os),y(ft,os,null),t(le,ai),t(le,ls),t(ls,si),d(e,uo,i),d(e,De,i),t(De,oi),t(De,rs),t(rs,li),t(De,ri),d(e,mo,i),d(e,xe,i),t(xe,ni),t(xe,ns),t(ns,ii),t(xe,di),d(e,_o,i),y(ht,e,i),d(e,go,i),d(e,Se,i),t(Se,pi),t(Se,is),t(is,fi),t(Se,hi),d(e,vo,i),d(e,re,i),t(re,Pe),t(Pe,ds),y(ct,ds,null),t(re,ci),t(re,ps),t(ps,ui),d(e,yo,i),d(e,H,i),t(H,mi),t(H,Rt),t(Rt,_i),t(H,gi),t(H,Mt),t(Mt,vi),t(H,yi),d(e,wo,i),d(e,Ut,i),t(Ut,wi),d(e,$o,i),y(ut,e,i),Eo=!0},p(e,[i]){const mt={};i&2&&(mt.$$scope={dirty:i,ctx:e}),ie.$set(mt);const fs={};i&2&&(fs.$$scope={dirty:i,ctx:e}),ue.$set(fs);const hs={};i&2&&(hs.$$scope={dirty:i,ctx:e}),ke.$set(hs);const cs={};i&2&&(cs.$$scope={dirty:i,ctx:e}),Ie.$set(cs);const us={};i&2&&(us.$$scope={dirty:i,ctx:e}),Ce.$set(us)},i(e){Eo||(w(m.$$.fragment,e),w(ie.$$.fragment,e),w(Be.$$.fragment,e),w(Ne.$$.fragment,e),w(Ge.$$.fragment,e),w(Re.$$.fragment,e),w(Me.$$.fragment,e),w(Ue.$$.fragment,e),w(He.$$.fragment,e),w(ue.$$.fragment,e),w(Ve.$$.fragment,e),w(Je.$$.fragment,e),w(Xe.$$.fragment,e),w(Qe.$$.fragment,e),w(Ze.$$.fragment,e),w(et.$$.fragment,e),w(tt.$$.fragment,e),w(at.$$.fragment,e),w(ke.$$.fragment,e),w(st.$$.fragment,e),w(ot.$$.fragment,e),w(Ie.$$.fragment,e),w(it.$$.fragment,e),w(dt.$$.fragment,e),w(Ce.$$.fragment,e),w(pt.$$.fragment,e),w(ft.$$.fragment,e),w(ht.$$.fragment,e),w(ct.$$.fragment,e),w(ut.$$.fragment,e),Eo=!0)},o(e){$(m.$$.fragment,e),$(ie.$$.fragment,e),$(Be.$$.fragment,e),$(Ne.$$.fragment,e),$(Ge.$$.fragment,e),$(Re.$$.fragment,e),$(Me.$$.fragment,e),$(Ue.$$.fragment,e),$(He.$$.fragment,e),$(ue.$$.fragment,e),$(Ve.$$.fragment,e),$(Je.$$.fragment,e),$(Xe.$$.fragment,e),$(Qe.$$.fragment,e),$(Ze.$$.fragment,e),$(et.$$.fragment,e),$(tt.$$.fragment,e),$(at.$$.fragment,e),$(ke.$$.fragment,e),$(st.$$.fragment,e),$(ot.$$.fragment,e),$(Ie.$$.fragment,e),$(it.$$.fragment,e),$(dt.$$.fragment,e),$(Ce.$$.fragment,e),$(pt.$$.fragment,e),$(ft.$$.fragment,e),$(ht.$$.fragment,e),$(ct.$$.fragment,e),$(ut.$$.fragment,e),Eo=!1},d(e){a(c),e&&a(j),e&&a(u),E(m),e&&a(L),e&&a(W),e&&a(gs),e&&a(ne),e&&a(vs),E(ie,e),e&&a(ys),e&&a(J),E(Be),e&&a(ws),e&&a(R),e&&a($s),E(Ne,e),e&&a(Es),e&&a(B),e&&a(bs),E(Ge,e),e&&a(ks),e&&a(pe),e&&a(js),E(Re,e),e&&a(qs),e&&a(X),E(Me),e&&a(Is),e&&a(vt),e&&a(As),E(Ue,e),e&&a(Cs),e&&a(yt),e&&a(Ts),E(He,e),e&&a(Ds),e&&a(he),e&&a(xs),e&&a(I),e&&a(Ss),e&&a(ce),e&&a(Ps),E(ue,e),e&&a(Ls),e&&a(K),E(Ve),e&&a(Os),e&&a(We),e&&a(Fs),e&&a(M),e&&a(Bs),e&&a(_e),e&&a(Ns),E(Je,e),e&&a(Gs),e&&a(Q),E(Xe),e&&a(Rs),e&&a(ve),e&&a(Ms),e&&a(N),e&&a(Us),E(Qe,e),e&&a(Hs),e&&a(ye),e&&a(zs),e&&a(we),e&&a(Ys),E(Ze,e),e&&a(Vs),e&&a($e),e&&a(Ws),E(et,e),e&&a(Js),e&&a(ee),E(tt),e&&a(Xs),e&&a(U),e&&a(Ks),E(at,e),e&&a(Qs),e&&a(At),e&&a(Zs),e&&a(T),e&&a(eo),E(ke,e),e&&a(to),E(st,e),e&&a(ao),e&&a(te),E(ot),e&&a(so),e&&a(Lt),e&&a(oo),e&&a(qe),e&&a(lo),E(Ie,e),e&&a(ro),E(it,e),e&&a(no),e&&a(oe),E(dt),e&&a(io),e&&a(A),e&&a(po),E(Ce,e),e&&a(fo),e&&a(Gt),e&&a(ho),E(pt,e),e&&a(co),e&&a(le),E(ft),e&&a(uo),e&&a(De),e&&a(mo),e&&a(xe),e&&a(_o),E(ht,e),e&&a(go),e&&a(Se),e&&a(vo),e&&a(re),E(ct),e&&a(yo),e&&a(H),e&&a(wo),e&&a(Ut),e&&a($o),E(ut,e)}}}const xp={local:"create-an-image-dataset",sections:[{local:"imagefolder",title:"ImageFolder"},{local:"loading-script",title:"Loading script"},{local:"create-a-dataset-builder-class",sections:[{local:"multiple-configurations",title:"Multiple configurations"}],title:"Create a dataset builder class"},{local:"add-dataset-metadata",title:"Add dataset metadata"},{local:"download-and-define-the-dataset-splits",title:"Download and define the dataset splits"},{local:"generate-the-dataset",title:"Generate the dataset"},{local:"generate-the-dataset-metadata-optional",title:"Generate the dataset metadata (optional)"},{local:"upload-the-dataset-to-the-hub",title:"Upload the dataset to the Hub"}],title:"Create an image dataset"};function Sp(F){return jp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Bp extends $p{constructor(c){super();Ep(this,c,Sp,Dp,bp,{})}}export{Bp as default,xp as metadata};
