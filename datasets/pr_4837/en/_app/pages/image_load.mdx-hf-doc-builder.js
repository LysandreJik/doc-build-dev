import{S as Dl,i as Ol,s as Fl,e as n,k as d,w as $,t as s,M as Ll,c as i,d as t,m as c,a as r,x as j,h as l,b as f,G as e,g as p,y as v,q as b,o as q,B as w,v as Sl}from"../chunks/vendor-hf-doc-builder.js";import{T as Ms}from"../chunks/Tip-hf-doc-builder.js";import{I as Ya}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as D}from"../chunks/CodeBlock-hf-doc-builder.js";function Tl(V){let m,x,g,E,y,u,P,k;return{c(){m=n("p"),x=s("To work with image datasets, you need to have the "),g=n("code"),E=s("vision"),y=s(" dependency installed. Check out the "),u=n("a"),P=s("installation"),k=s(" guide to learn how to install it."),this.h()},l(_){m=i(_,"P",{});var h=r(m);x=l(h,"To work with image datasets, you need to have the "),g=i(h,"CODE",{});var I=r(g);E=l(I,"vision"),I.forEach(t),y=l(h," dependency installed. Check out the "),u=i(h,"A",{href:!0});var A=r(u);P=l(A,"installation"),A.forEach(t),k=l(h," guide to learn how to install it."),h.forEach(t),this.h()},h(){f(u,"href","./installation#vision")},m(_,h){p(_,m,h),e(m,x),e(m,g),e(g,E),e(m,y),e(m,u),e(u,P),e(m,k)},d(_){_&&t(m)}}}function Nl(V){let m,x,g,E,y,u,P,k;return{c(){m=n("p"),x=s("Index into an image dataset using the row index first and then the "),g=n("code"),E=s("image"),y=s(" column - "),u=n("code"),P=s('dataset[0]["image"]'),k=s(" - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset.")},l(_){m=i(_,"P",{});var h=r(m);x=l(h,"Index into an image dataset using the row index first and then the "),g=i(h,"CODE",{});var I=r(g);E=l(I,"image"),I.forEach(t),y=l(h," column - "),u=i(h,"CODE",{});var A=r(u);P=l(A,'dataset[0]["image"]'),A.forEach(t),k=l(h," - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset."),h.forEach(t)},m(_,h){p(_,m,h),e(m,x),e(m,g),e(g,E),e(m,y),e(m,u),e(u,P),e(m,k)},d(_){_&&t(m)}}}function Bl(V){let m,x,g,E,y,u,P,k;return{c(){m=n("p"),x=s("If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set "),g=n("code"),E=s("drop_labels=False"),y=s(" in "),u=n("code"),P=s("load_dataset"),k=s(".")},l(_){m=i(_,"P",{});var h=r(m);x=l(h,"If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set "),g=i(h,"CODE",{});var I=r(g);E=l(I,"drop_labels=False"),I.forEach(t),y=l(h," in "),u=i(h,"CODE",{});var A=r(u);P=l(A,"load_dataset"),A.forEach(t),k=l(h,"."),h.forEach(t)},m(_,h){p(_,m,h),e(m,x),e(m,g),e(g,E),e(m,y),e(m,u),e(u,P),e(m,k)},d(_){_&&t(m)}}}function Yl(V){let m,x,g,E,y,u,P,k,_,h,I,A,Ma,gt,ut,be,W,qe,F,_t,Ha,$t,jt,Ia,vt,bt,we,ra,Ee,J,ye,K,qt,pa,wt,Et,ke,H,Q,Ra,da,yt,za,kt,Ie,L,It,xa,xt,Pt,Pa,Ct,At,xe,ca,Pe,S,Dt,Ua,Ot,Ft,Ca,Lt,St,Ce,ma,Ae,R,X,Ga,fa,Tt,Va,Nt,De,Z,Bt,Wa,Yt,Mt,Oe,ha,Fe,T,Ht,Ja,Rt,zt,Ka,Ut,Gt,Le,ga,Se,aa,Vt,Qa,Wt,Jt,Te,ua,Ne,C,Xa,Kt,Qt,Za,Xt,Zt,ae,as,es,ee,ts,ss,Aa,ls,os,Be,z,ea,te,_a,ns,se,is,Ye,N,rs,le,ps,ds,oe,cs,ms,Me,$a,He,B,fs,ne,hs,gs,ie,us,_s,Re,ja,ze,ta,$s,re,js,vs,Ue,sa,Ge,U,la,pe,va,bs,de,qs,Ve,oa,ws,ce,Es,ys,We,ba,Je,Y,ks,me,Is,xs,fe,Ps,Cs,Ke,qa,Qe,G,na,he,wa,As,ge,Ds,Xe,ia,Os,ue,Fs,Ls,Ze,Ea,at,M,Ss,_e,Ts,Ns,$e,Bs,Ys,et,ya,tt;return u=new Ya({}),W=new Ms({props:{$$slots:{default:[Tl]},$$scope:{ctx:V}}}),ra=new D({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("beans", split="train")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),J=new Ms({props:{warning:!0,$$slots:{default:[Nl]},$$scope:{ctx:V}}}),da=new Ya({}),ca=new D({props:{code:`from datasets import load_dataset, Image

dataset = Dataset.from_dict({"image": ["path/to/image_1", "path/to/image_2", ..., "path/to/image_n"]}).cast_column("image", Image())
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: [<span class="hljs-string">&quot;path/to/image_1&quot;</span>, <span class="hljs-string">&quot;path/to/image_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/image_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),ma=new D({props:{code:`dataset = load_dataset("beans", split="train").cast_column("image", Image(decode=False))
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image(decode=<span class="hljs-literal">False</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/bean_rust/bean_rust_train.29.jpg&#x27;</span>}`}}),fa=new Ya({}),ha=new D({props:{code:`folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png
folder/train/dog/chihuahua.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png
folder/train/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),ga=new D({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")
dataset["train"][0]

dataset["train"][-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][-<span class="hljs-number">1</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E8DAD30</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">1</span>}`}}),ua=new D({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),_a=new Ya({}),$a=new D({props:{code:`folder/train/metadata.jsonl
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),ja=new D({props:{code:`{"file_name": "0001.png", "additional_feature": "This is a first value of a text feature you added to your images"}
{"file_name": "0002.png", "additional_feature": "This is a second value of a text feature you added to your images"}
{"file_name": "0003.png", "additional_feature": "This is a third value of a text feature you added to your images"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a first value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a second value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a third value of a text feature you added to your images&quot;</span>}`}}),sa=new Ms({props:{$$slots:{default:[Bl]},$$scope:{ctx:V}}}),va=new Ya({}),ba=new D({props:{code:`file_name,text
0001.png,This is a golden retriever playing with a ball
0002.png,A german shepherd
0003.png,One chihuahua`,highlighted:`file_name,text
<span class="hljs-number">0001</span><span class="hljs-selector-class">.png</span>,This is <span class="hljs-selector-tag">a</span> golden retriever playing with <span class="hljs-selector-tag">a</span> ball
<span class="hljs-number">0002</span><span class="hljs-selector-class">.png</span>,A german shepherd
<span class="hljs-number">0003</span><span class="hljs-selector-class">.png</span>,One chihuahua`}}),qa=new D({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&quot;This is a golden retriever playing with a ball&quot;</span>`}}),wa=new Ya({}),Ea=new D({props:{code:`{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0001.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[302.0, 109.0, 73.0, 52.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0002.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[810.0, 100.0, 57.0, 28.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">1</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0003.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]}}`}}),ya=new D({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;objects&quot;</span>]
{<span class="hljs-string">&quot;bbox&quot;</span>: [[<span class="hljs-number">302.0</span>, <span class="hljs-number">109.0</span>, <span class="hljs-number">73.0</span>, <span class="hljs-number">52.0</span>]], <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}`}}),{c(){m=n("meta"),x=d(),g=n("h1"),E=n("a"),y=n("span"),$(u.$$.fragment),P=d(),k=n("span"),_=s("Load image data"),h=d(),I=n("p"),A=s("Image datasets are loaded from the "),Ma=n("code"),gt=s("image"),ut=s(" column, which contains a PIL object."),be=d(),$(W.$$.fragment),qe=d(),F=n("p"),_t=s("When you load an image dataset and call the "),Ha=n("code"),$t=s("image"),jt=s(" column, the "),Ia=n("a"),vt=s("Image"),bt=s(" feature automatically decodes the PIL object into an image:"),we=d(),$(ra.$$.fragment),Ee=d(),$(J.$$.fragment),ye=d(),K=n("p"),qt=s("For a guide on how to load any type of dataset, take a look at the "),pa=n("a"),wt=s("general loading guide"),Et=s("."),ke=d(),H=n("h2"),Q=n("a"),Ra=n("span"),$(da.$$.fragment),yt=d(),za=n("span"),kt=s("Local files"),Ie=d(),L=n("p"),It=s("You can load a dataset from the image path. Use the "),xa=n("a"),xt=s("cast_column()"),Pt=s(" function to accept a column of image file paths, and decode it into a PIL image with the "),Pa=n("a"),Ct=s("Image"),At=s(" feature:"),xe=d(),$(ca.$$.fragment),Pe=d(),S=n("p"),Dt=s("If you only want to load the underlying path to the image dataset without decoding the image object, set "),Ua=n("code"),Ot=s("decode=False"),Ft=s(" in the "),Ca=n("a"),Lt=s("Image"),St=s(" feature:"),Ce=d(),$(ma.$$.fragment),Ae=d(),R=n("h2"),X=n("a"),Ga=n("span"),$(fa.$$.fragment),Tt=d(),Va=n("span"),Nt=s("ImageFolder"),De=d(),Z=n("p"),Bt=s("You can also load a dataset with a "),Wa=n("code"),Yt=s("ImageFolder"),Mt=s(" dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),Oe=d(),$(ha.$$.fragment),Fe=d(),T=n("p"),Ht=s("Load your dataset by specifying "),Ja=n("code"),Rt=s("imagefolder"),zt=s(" and the directory of your dataset in "),Ka=n("code"),Ut=s("data_dir"),Gt=s(":"),Le=d(),$(ga.$$.fragment),Se=d(),aa=n("p"),Vt=s("Load remote datasets from their URLs with the "),Qa=n("code"),Wt=s("data_files"),Jt=s(" parameter:"),Te=d(),$(ua.$$.fragment),Ne=d(),C=n("p"),Xa=n("code"),Kt=s("ImageFolder"),Qt=s(" creates a "),Za=n("code"),Xt=s("label"),Zt=s(" column, and the label name is based on the directory name. To ignore the "),ae=n("code"),as=s("label"),es=s(" column, set "),ee=n("code"),ts=s("drop_labels=False"),ss=s(" as defined in "),Aa=n("a"),ls=s("ImageFolderConfig"),os=s("."),Be=d(),z=n("h2"),ea=n("a"),te=n("span"),$(_a.$$.fragment),ns=d(),se=n("span"),is=s("ImageFolder with metadata"),Ye=d(),N=n("p"),rs=s("Metadata associated with your dataset can also be loaded, extending the utility of "),le=n("code"),ps=s("ImageFolder"),ds=s(" to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),oe=n("code"),cs=s("metadata.jsonl"),ms=s(" file:"),Me=d(),$($a.$$.fragment),He=d(),B=n("p"),fs=s("Your "),ne=n("code"),hs=s("metadata.jsonl"),gs=s(" file must have a "),ie=n("code"),us=s("file_name"),_s=s(" column which links image files with their metadata:"),Re=d(),$(ja.$$.fragment),ze=d(),ta=n("p"),$s=s("It may be more convenient to specify metadata in CSV for simple tasks. In that case, use "),re=n("code"),js=s("metadata.csv"),vs=s(" as the name of the metadata file."),Ue=d(),$(sa.$$.fragment),Ge=d(),U=n("h3"),la=n("a"),pe=n("span"),$(va.$$.fragment),bs=d(),de=n("span"),qs=s("Image captioning"),Ve=d(),oa=n("p"),ws=s("Image captioning datasets have text describing an image. An example "),ce=n("code"),Es=s("metadata.csv"),ys=s(" may look like:"),We=d(),$(ba.$$.fragment),Je=d(),Y=n("p"),ks=s("Load the dataset with "),me=n("code"),Is=s("ImageFolder"),xs=s(", and it will create a "),fe=n("code"),Ps=s("text"),Cs=s(" column for the image captions:"),Ke=d(),$(qa.$$.fragment),Qe=d(),G=n("h3"),na=n("a"),he=n("span"),$(wa.$$.fragment),As=d(),ge=n("span"),Ds=s("Object detection"),Xe=d(),ia=n("p"),Os=s("Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),ue=n("code"),Fs=s("metadata.jsonl"),Ls=s(" may look like:"),Ze=d(),$(Ea.$$.fragment),at=d(),M=n("p"),Ss=s("Load the dataset with "),_e=n("code"),Ts=s("ImageFolder"),Ns=s(", and it will create a "),$e=n("code"),Bs=s("objects"),Ys=s(" column with the bounding boxes and the categories:"),et=d(),$(ya.$$.fragment),this.h()},l(a){const o=Ll('[data-svelte="svelte-1phssyn"]',document.head);m=i(o,"META",{name:!0,content:!0}),o.forEach(t),x=c(a),g=i(a,"H1",{class:!0});var ka=r(g);E=i(ka,"A",{id:!0,class:!0,href:!0});var je=r(E);y=i(je,"SPAN",{});var ve=r(y);j(u.$$.fragment,ve),ve.forEach(t),je.forEach(t),P=c(ka),k=i(ka,"SPAN",{});var Hs=r(k);_=l(Hs,"Load image data"),Hs.forEach(t),ka.forEach(t),h=c(a),I=i(a,"P",{});var st=r(I);A=l(st,"Image datasets are loaded from the "),Ma=i(st,"CODE",{});var Rs=r(Ma);gt=l(Rs,"image"),Rs.forEach(t),ut=l(st," column, which contains a PIL object."),st.forEach(t),be=c(a),j(W.$$.fragment,a),qe=c(a),F=i(a,"P",{});var Da=r(F);_t=l(Da,"When you load an image dataset and call the "),Ha=i(Da,"CODE",{});var zs=r(Ha);$t=l(zs,"image"),zs.forEach(t),jt=l(Da," column, the "),Ia=i(Da,"A",{href:!0});var Us=r(Ia);vt=l(Us,"Image"),Us.forEach(t),bt=l(Da," feature automatically decodes the PIL object into an image:"),Da.forEach(t),we=c(a),j(ra.$$.fragment,a),Ee=c(a),j(J.$$.fragment,a),ye=c(a),K=i(a,"P",{});var lt=r(K);qt=l(lt,"For a guide on how to load any type of dataset, take a look at the "),pa=i(lt,"A",{class:!0,href:!0});var Gs=r(pa);wt=l(Gs,"general loading guide"),Gs.forEach(t),Et=l(lt,"."),lt.forEach(t),ke=c(a),H=i(a,"H2",{class:!0});var ot=r(H);Q=i(ot,"A",{id:!0,class:!0,href:!0});var Vs=r(Q);Ra=i(Vs,"SPAN",{});var Ws=r(Ra);j(da.$$.fragment,Ws),Ws.forEach(t),Vs.forEach(t),yt=c(ot),za=i(ot,"SPAN",{});var Js=r(za);kt=l(Js,"Local files"),Js.forEach(t),ot.forEach(t),Ie=c(a),L=i(a,"P",{});var Oa=r(L);It=l(Oa,"You can load a dataset from the image path. Use the "),xa=i(Oa,"A",{href:!0});var Ks=r(xa);xt=l(Ks,"cast_column()"),Ks.forEach(t),Pt=l(Oa," function to accept a column of image file paths, and decode it into a PIL image with the "),Pa=i(Oa,"A",{href:!0});var Qs=r(Pa);Ct=l(Qs,"Image"),Qs.forEach(t),At=l(Oa," feature:"),Oa.forEach(t),xe=c(a),j(ca.$$.fragment,a),Pe=c(a),S=i(a,"P",{});var Fa=r(S);Dt=l(Fa,"If you only want to load the underlying path to the image dataset without decoding the image object, set "),Ua=i(Fa,"CODE",{});var Xs=r(Ua);Ot=l(Xs,"decode=False"),Xs.forEach(t),Ft=l(Fa," in the "),Ca=i(Fa,"A",{href:!0});var Zs=r(Ca);Lt=l(Zs,"Image"),Zs.forEach(t),St=l(Fa," feature:"),Fa.forEach(t),Ce=c(a),j(ma.$$.fragment,a),Ae=c(a),R=i(a,"H2",{class:!0});var nt=r(R);X=i(nt,"A",{id:!0,class:!0,href:!0});var al=r(X);Ga=i(al,"SPAN",{});var el=r(Ga);j(fa.$$.fragment,el),el.forEach(t),al.forEach(t),Tt=c(nt),Va=i(nt,"SPAN",{});var tl=r(Va);Nt=l(tl,"ImageFolder"),tl.forEach(t),nt.forEach(t),De=c(a),Z=i(a,"P",{});var it=r(Z);Bt=l(it,"You can also load a dataset with a "),Wa=i(it,"CODE",{});var sl=r(Wa);Yt=l(sl,"ImageFolder"),sl.forEach(t),Mt=l(it," dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),it.forEach(t),Oe=c(a),j(ha.$$.fragment,a),Fe=c(a),T=i(a,"P",{});var La=r(T);Ht=l(La,"Load your dataset by specifying "),Ja=i(La,"CODE",{});var ll=r(Ja);Rt=l(ll,"imagefolder"),ll.forEach(t),zt=l(La," and the directory of your dataset in "),Ka=i(La,"CODE",{});var ol=r(Ka);Ut=l(ol,"data_dir"),ol.forEach(t),Gt=l(La,":"),La.forEach(t),Le=c(a),j(ga.$$.fragment,a),Se=c(a),aa=i(a,"P",{});var rt=r(aa);Vt=l(rt,"Load remote datasets from their URLs with the "),Qa=i(rt,"CODE",{});var nl=r(Qa);Wt=l(nl,"data_files"),nl.forEach(t),Jt=l(rt," parameter:"),rt.forEach(t),Te=c(a),j(ua.$$.fragment,a),Ne=c(a),C=i(a,"P",{});var O=r(C);Xa=i(O,"CODE",{});var il=r(Xa);Kt=l(il,"ImageFolder"),il.forEach(t),Qt=l(O," creates a "),Za=i(O,"CODE",{});var rl=r(Za);Xt=l(rl,"label"),rl.forEach(t),Zt=l(O," column, and the label name is based on the directory name. To ignore the "),ae=i(O,"CODE",{});var pl=r(ae);as=l(pl,"label"),pl.forEach(t),es=l(O," column, set "),ee=i(O,"CODE",{});var dl=r(ee);ts=l(dl,"drop_labels=False"),dl.forEach(t),ss=l(O," as defined in "),Aa=i(O,"A",{href:!0});var cl=r(Aa);ls=l(cl,"ImageFolderConfig"),cl.forEach(t),os=l(O,"."),O.forEach(t),Be=c(a),z=i(a,"H2",{class:!0});var pt=r(z);ea=i(pt,"A",{id:!0,class:!0,href:!0});var ml=r(ea);te=i(ml,"SPAN",{});var fl=r(te);j(_a.$$.fragment,fl),fl.forEach(t),ml.forEach(t),ns=c(pt),se=i(pt,"SPAN",{});var hl=r(se);is=l(hl,"ImageFolder with metadata"),hl.forEach(t),pt.forEach(t),Ye=c(a),N=i(a,"P",{});var Sa=r(N);rs=l(Sa,"Metadata associated with your dataset can also be loaded, extending the utility of "),le=i(Sa,"CODE",{});var gl=r(le);ps=l(gl,"ImageFolder"),gl.forEach(t),ds=l(Sa," to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),oe=i(Sa,"CODE",{});var ul=r(oe);cs=l(ul,"metadata.jsonl"),ul.forEach(t),ms=l(Sa," file:"),Sa.forEach(t),Me=c(a),j($a.$$.fragment,a),He=c(a),B=i(a,"P",{});var Ta=r(B);fs=l(Ta,"Your "),ne=i(Ta,"CODE",{});var _l=r(ne);hs=l(_l,"metadata.jsonl"),_l.forEach(t),gs=l(Ta," file must have a "),ie=i(Ta,"CODE",{});var $l=r(ie);us=l($l,"file_name"),$l.forEach(t),_s=l(Ta," column which links image files with their metadata:"),Ta.forEach(t),Re=c(a),j(ja.$$.fragment,a),ze=c(a),ta=i(a,"P",{});var dt=r(ta);$s=l(dt,"It may be more convenient to specify metadata in CSV for simple tasks. In that case, use "),re=i(dt,"CODE",{});var jl=r(re);js=l(jl,"metadata.csv"),jl.forEach(t),vs=l(dt," as the name of the metadata file."),dt.forEach(t),Ue=c(a),j(sa.$$.fragment,a),Ge=c(a),U=i(a,"H3",{class:!0});var ct=r(U);la=i(ct,"A",{id:!0,class:!0,href:!0});var vl=r(la);pe=i(vl,"SPAN",{});var bl=r(pe);j(va.$$.fragment,bl),bl.forEach(t),vl.forEach(t),bs=c(ct),de=i(ct,"SPAN",{});var ql=r(de);qs=l(ql,"Image captioning"),ql.forEach(t),ct.forEach(t),Ve=c(a),oa=i(a,"P",{});var mt=r(oa);ws=l(mt,"Image captioning datasets have text describing an image. An example "),ce=i(mt,"CODE",{});var wl=r(ce);Es=l(wl,"metadata.csv"),wl.forEach(t),ys=l(mt," may look like:"),mt.forEach(t),We=c(a),j(ba.$$.fragment,a),Je=c(a),Y=i(a,"P",{});var Na=r(Y);ks=l(Na,"Load the dataset with "),me=i(Na,"CODE",{});var El=r(me);Is=l(El,"ImageFolder"),El.forEach(t),xs=l(Na,", and it will create a "),fe=i(Na,"CODE",{});var yl=r(fe);Ps=l(yl,"text"),yl.forEach(t),Cs=l(Na," column for the image captions:"),Na.forEach(t),Ke=c(a),j(qa.$$.fragment,a),Qe=c(a),G=i(a,"H3",{class:!0});var ft=r(G);na=i(ft,"A",{id:!0,class:!0,href:!0});var kl=r(na);he=i(kl,"SPAN",{});var Il=r(he);j(wa.$$.fragment,Il),Il.forEach(t),kl.forEach(t),As=c(ft),ge=i(ft,"SPAN",{});var xl=r(ge);Ds=l(xl,"Object detection"),xl.forEach(t),ft.forEach(t),Xe=c(a),ia=i(a,"P",{});var ht=r(ia);Os=l(ht,"Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),ue=i(ht,"CODE",{});var Pl=r(ue);Fs=l(Pl,"metadata.jsonl"),Pl.forEach(t),Ls=l(ht," may look like:"),ht.forEach(t),Ze=c(a),j(Ea.$$.fragment,a),at=c(a),M=i(a,"P",{});var Ba=r(M);Ss=l(Ba,"Load the dataset with "),_e=i(Ba,"CODE",{});var Cl=r(_e);Ts=l(Cl,"ImageFolder"),Cl.forEach(t),Ns=l(Ba,", and it will create a "),$e=i(Ba,"CODE",{});var Al=r($e);Bs=l(Al,"objects"),Al.forEach(t),Ys=l(Ba," column with the bounding boxes and the categories:"),Ba.forEach(t),et=c(a),j(ya.$$.fragment,a),this.h()},h(){f(m,"name","hf:doc:metadata"),f(m,"content",JSON.stringify(Ml)),f(E,"id","load-image-data"),f(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(E,"href","#load-image-data"),f(g,"class","relative group"),f(Ia,"href","/docs/datasets/pr_4837/en/package_reference/main_classes#datasets.Image"),f(pa,"class","underline decoration-sky-400 decoration-2 font-semibold"),f(pa,"href","./loading"),f(Q,"id","local-files"),f(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Q,"href","#local-files"),f(H,"class","relative group"),f(xa,"href","/docs/datasets/pr_4837/en/package_reference/main_classes#datasets.Dataset.cast_column"),f(Pa,"href","/docs/datasets/pr_4837/en/package_reference/main_classes#datasets.Image"),f(Ca,"href","/docs/datasets/pr_4837/en/package_reference/main_classes#datasets.Image"),f(X,"id","imagefolder"),f(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(X,"href","#imagefolder"),f(R,"class","relative group"),f(Aa,"href","/docs/datasets/pr_4837/en/package_reference/loading_methods#datasets.packaged_modules.imagefolder.ImageFolderConfig"),f(ea,"id","imagefolder-with-metadata"),f(ea,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ea,"href","#imagefolder-with-metadata"),f(z,"class","relative group"),f(la,"id","image-captioning"),f(la,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(la,"href","#image-captioning"),f(U,"class","relative group"),f(na,"id","object-detection"),f(na,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(na,"href","#object-detection"),f(G,"class","relative group")},m(a,o){e(document.head,m),p(a,x,o),p(a,g,o),e(g,E),e(E,y),v(u,y,null),e(g,P),e(g,k),e(k,_),p(a,h,o),p(a,I,o),e(I,A),e(I,Ma),e(Ma,gt),e(I,ut),p(a,be,o),v(W,a,o),p(a,qe,o),p(a,F,o),e(F,_t),e(F,Ha),e(Ha,$t),e(F,jt),e(F,Ia),e(Ia,vt),e(F,bt),p(a,we,o),v(ra,a,o),p(a,Ee,o),v(J,a,o),p(a,ye,o),p(a,K,o),e(K,qt),e(K,pa),e(pa,wt),e(K,Et),p(a,ke,o),p(a,H,o),e(H,Q),e(Q,Ra),v(da,Ra,null),e(H,yt),e(H,za),e(za,kt),p(a,Ie,o),p(a,L,o),e(L,It),e(L,xa),e(xa,xt),e(L,Pt),e(L,Pa),e(Pa,Ct),e(L,At),p(a,xe,o),v(ca,a,o),p(a,Pe,o),p(a,S,o),e(S,Dt),e(S,Ua),e(Ua,Ot),e(S,Ft),e(S,Ca),e(Ca,Lt),e(S,St),p(a,Ce,o),v(ma,a,o),p(a,Ae,o),p(a,R,o),e(R,X),e(X,Ga),v(fa,Ga,null),e(R,Tt),e(R,Va),e(Va,Nt),p(a,De,o),p(a,Z,o),e(Z,Bt),e(Z,Wa),e(Wa,Yt),e(Z,Mt),p(a,Oe,o),v(ha,a,o),p(a,Fe,o),p(a,T,o),e(T,Ht),e(T,Ja),e(Ja,Rt),e(T,zt),e(T,Ka),e(Ka,Ut),e(T,Gt),p(a,Le,o),v(ga,a,o),p(a,Se,o),p(a,aa,o),e(aa,Vt),e(aa,Qa),e(Qa,Wt),e(aa,Jt),p(a,Te,o),v(ua,a,o),p(a,Ne,o),p(a,C,o),e(C,Xa),e(Xa,Kt),e(C,Qt),e(C,Za),e(Za,Xt),e(C,Zt),e(C,ae),e(ae,as),e(C,es),e(C,ee),e(ee,ts),e(C,ss),e(C,Aa),e(Aa,ls),e(C,os),p(a,Be,o),p(a,z,o),e(z,ea),e(ea,te),v(_a,te,null),e(z,ns),e(z,se),e(se,is),p(a,Ye,o),p(a,N,o),e(N,rs),e(N,le),e(le,ps),e(N,ds),e(N,oe),e(oe,cs),e(N,ms),p(a,Me,o),v($a,a,o),p(a,He,o),p(a,B,o),e(B,fs),e(B,ne),e(ne,hs),e(B,gs),e(B,ie),e(ie,us),e(B,_s),p(a,Re,o),v(ja,a,o),p(a,ze,o),p(a,ta,o),e(ta,$s),e(ta,re),e(re,js),e(ta,vs),p(a,Ue,o),v(sa,a,o),p(a,Ge,o),p(a,U,o),e(U,la),e(la,pe),v(va,pe,null),e(U,bs),e(U,de),e(de,qs),p(a,Ve,o),p(a,oa,o),e(oa,ws),e(oa,ce),e(ce,Es),e(oa,ys),p(a,We,o),v(ba,a,o),p(a,Je,o),p(a,Y,o),e(Y,ks),e(Y,me),e(me,Is),e(Y,xs),e(Y,fe),e(fe,Ps),e(Y,Cs),p(a,Ke,o),v(qa,a,o),p(a,Qe,o),p(a,G,o),e(G,na),e(na,he),v(wa,he,null),e(G,As),e(G,ge),e(ge,Ds),p(a,Xe,o),p(a,ia,o),e(ia,Os),e(ia,ue),e(ue,Fs),e(ia,Ls),p(a,Ze,o),v(Ea,a,o),p(a,at,o),p(a,M,o),e(M,Ss),e(M,_e),e(_e,Ts),e(M,Ns),e(M,$e),e($e,Bs),e(M,Ys),p(a,et,o),v(ya,a,o),tt=!0},p(a,[o]){const ka={};o&2&&(ka.$$scope={dirty:o,ctx:a}),W.$set(ka);const je={};o&2&&(je.$$scope={dirty:o,ctx:a}),J.$set(je);const ve={};o&2&&(ve.$$scope={dirty:o,ctx:a}),sa.$set(ve)},i(a){tt||(b(u.$$.fragment,a),b(W.$$.fragment,a),b(ra.$$.fragment,a),b(J.$$.fragment,a),b(da.$$.fragment,a),b(ca.$$.fragment,a),b(ma.$$.fragment,a),b(fa.$$.fragment,a),b(ha.$$.fragment,a),b(ga.$$.fragment,a),b(ua.$$.fragment,a),b(_a.$$.fragment,a),b($a.$$.fragment,a),b(ja.$$.fragment,a),b(sa.$$.fragment,a),b(va.$$.fragment,a),b(ba.$$.fragment,a),b(qa.$$.fragment,a),b(wa.$$.fragment,a),b(Ea.$$.fragment,a),b(ya.$$.fragment,a),tt=!0)},o(a){q(u.$$.fragment,a),q(W.$$.fragment,a),q(ra.$$.fragment,a),q(J.$$.fragment,a),q(da.$$.fragment,a),q(ca.$$.fragment,a),q(ma.$$.fragment,a),q(fa.$$.fragment,a),q(ha.$$.fragment,a),q(ga.$$.fragment,a),q(ua.$$.fragment,a),q(_a.$$.fragment,a),q($a.$$.fragment,a),q(ja.$$.fragment,a),q(sa.$$.fragment,a),q(va.$$.fragment,a),q(ba.$$.fragment,a),q(qa.$$.fragment,a),q(wa.$$.fragment,a),q(Ea.$$.fragment,a),q(ya.$$.fragment,a),tt=!1},d(a){t(m),a&&t(x),a&&t(g),w(u),a&&t(h),a&&t(I),a&&t(be),w(W,a),a&&t(qe),a&&t(F),a&&t(we),w(ra,a),a&&t(Ee),w(J,a),a&&t(ye),a&&t(K),a&&t(ke),a&&t(H),w(da),a&&t(Ie),a&&t(L),a&&t(xe),w(ca,a),a&&t(Pe),a&&t(S),a&&t(Ce),w(ma,a),a&&t(Ae),a&&t(R),w(fa),a&&t(De),a&&t(Z),a&&t(Oe),w(ha,a),a&&t(Fe),a&&t(T),a&&t(Le),w(ga,a),a&&t(Se),a&&t(aa),a&&t(Te),w(ua,a),a&&t(Ne),a&&t(C),a&&t(Be),a&&t(z),w(_a),a&&t(Ye),a&&t(N),a&&t(Me),w($a,a),a&&t(He),a&&t(B),a&&t(Re),w(ja,a),a&&t(ze),a&&t(ta),a&&t(Ue),w(sa,a),a&&t(Ge),a&&t(U),w(va),a&&t(Ve),a&&t(oa),a&&t(We),w(ba,a),a&&t(Je),a&&t(Y),a&&t(Ke),w(qa,a),a&&t(Qe),a&&t(G),w(wa),a&&t(Xe),a&&t(ia),a&&t(Ze),w(Ea,a),a&&t(at),a&&t(M),a&&t(et),w(ya,a)}}}const Ml={local:"load-image-data",sections:[{local:"local-files",title:"Local files"},{local:"imagefolder",title:"ImageFolder"},{local:"imagefolder-with-metadata",sections:[{local:"image-captioning",title:"Image captioning"},{local:"object-detection",title:"Object detection"}],title:"ImageFolder with metadata"}],title:"Load image data"};function Hl(V){return Sl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Vl extends Dl{constructor(m){super();Ol(this,m,Hl,Yl,Fl,{})}}export{Vl as default,Ml as metadata};
