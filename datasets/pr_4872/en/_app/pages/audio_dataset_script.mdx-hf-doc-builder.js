import{S as yp,i as $p,s as jp,e as l,k as p,w as m,t as s,M as Ep,c as n,d as a,m as f,a as i,x as g,h as o,b as c,G as t,g as d,y as v,q as w,o as y,B as $,v as kp}from"../chunks/vendor-hf-doc-builder.js";import{T as ws}from"../chunks/Tip-hf-doc-builder.js";import{I as Z}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as x}from"../chunks/CodeBlock-hf-doc-builder.js";function bp(S){let u,k,h,j,b;return{c(){u=l("p"),k=s("You can control access to your dataset by requiring users to share their contact information first. Check out the "),h=l("a"),j=s("Gated datasets"),b=s(" guide for more information about how to enable this feature on the Hub."),this.h()},l(_){u=n(_,"P",{});var E=i(u);k=o(E,"You can control access to your dataset by requiring users to share their contact information first. Check out the "),h=n(E,"A",{href:!0,rel:!0});var q=i(h);j=o(q,"Gated datasets"),q.forEach(a),b=o(E," guide for more information about how to enable this feature on the Hub."),E.forEach(a),this.h()},h(){c(h,"href","https://huggingface.co/docs/hub/datasets-gated"),c(h,"rel","nofollow")},m(_,E){d(_,u,E),t(u,k),t(u,h),t(h,j),t(u,b)},d(_){_&&a(u)}}}function qp(S){let u,k,h,j,b;return{c(){u=l("p"),k=s("To help you get started, we created a loading script "),h=l("a"),j=s("template"),b=s(" you can copy and use as a starting point!"),this.h()},l(_){u=n(_,"P",{});var E=i(u);k=o(E,"To help you get started, we created a loading script "),h=n(E,"A",{href:!0,rel:!0});var q=i(h);j=o(q,"template"),q.forEach(a),b=o(E," you can copy and use as a starting point!"),E.forEach(a),this.h()},h(){c(h,"href","https://github.com/huggingface/datasets/blob/main/templates/new_dataset_script.py"),c(h,"rel","nofollow")},m(_,E){d(_,u,E),t(u,k),t(u,h),t(h,j),t(u,b)},d(_){_&&a(u)}}}function Ap(S){let u,k,h,j,b;return{c(){u=l("p"),k=s("You\u2019ll notice a lot of the dataset information is defined earlier in the loading script which makes it easier to read. There are also other "),h=l("code"),j=s("Features"),b=s(" you can input, so be sure to check out the full list for more details.")},l(_){u=n(_,"P",{});var E=i(u);k=o(E,"You\u2019ll notice a lot of the dataset information is defined earlier in the loading script which makes it easier to read. There are also other "),h=n(E,"CODE",{});var q=i(h);j=o(q,"Features"),q.forEach(a),b=o(E," you can input, so be sure to check out the full list for more details."),E.forEach(a)},m(_,E){d(_,u,E),t(u,k),t(u,h),t(h,j),t(u,b)},d(_){_&&a(u)}}}function Cp(S){let u,k,h,j,b,_,E,q;return{c(){u=l("p"),k=s("To stream a TAR archive file, you need to use "),h=l("a"),j=s("DownloadManager.iter_archive()"),b=s("! The "),_=l("a"),E=s("DownloadManager.download_and_extract()"),q=s(" function does not support TAR archives in streaming mode."),this.h()},l(J){u=n(J,"P",{});var P=i(u);k=o(P,"To stream a TAR archive file, you need to use "),h=n(P,"A",{href:!0});var X=i(h);j=o(X,"DownloadManager.iter_archive()"),X.forEach(a),b=o(P,"! The "),_=n(P,"A",{href:!0});var _t=i(_);E=o(_t,"DownloadManager.download_and_extract()"),_t.forEach(a),q=o(P," function does not support TAR archives in streaming mode."),P.forEach(a),this.h()},h(){c(h,"href","/docs/datasets/pr_4872/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive"),c(_,"href","/docs/datasets/pr_4872/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract")},m(J,P){d(J,u,P),t(u,k),t(u,h),t(h,j),t(u,b),t(u,_),t(_,E),t(u,q)},d(J){J&&a(u)}}}function xp(S){let u,k;return{c(){u=l("p"),k=s("To stream a TAR archive file, it needs to be opened and read first. TAR files are accessed and yielded sequentially. This means you need to have the information in the TAR file in hand first so you can yield it with its corresponding audio file.")},l(h){u=n(h,"P",{});var j=i(u);k=o(j,"To stream a TAR archive file, it needs to be opened and read first. TAR files are accessed and yielded sequentially. This means you need to have the information in the TAR file in hand first so you can yield it with its corresponding audio file."),j.forEach(a)},m(h,j){d(h,u,j),t(u,k)},d(h){h&&a(u)}}}function Tp(S){let u,k,h,j,b,_,E,q,J,P,X,_t,ys,pe,Qt,ze,Jo,ea,Xo,Qo,el,ta,aa,tl,$s,fe,js,Q,ce,sa,Se,al,oa,sl,Es,R,ol,la,ll,nl,na,il,rl,ks,Oe,bs,G,dl,ia,pl,fl,ra,cl,ul,qs,Ne,As,ue,hl,da,_l,ml,Cs,Re,xs,B,gl,pa,vl,wl,fa,yl,$l,Ts,Ge,Is,ee,he,ca,Be,jl,ua,El,Ds,mt,kl,Ls,Me,Ps,gt,bl,zs,Ue,Ss,_e,ql,Fe,Al,Cl,Os,A,ha,xl,Tl,_a,Il,Dl,ma,Ll,Pl,ga,zl,Sl,va,Ol,Nl,wa,Rl,Gl,ya,Bl,Ns,me,Ml,He,Ul,Fl,Rs,ge,Gs,te,ve,$a,Ve,Hl,ja,Vl,Bs,Ye,vt,Yl,Kl,Ms,M,wt,Ea,Wl,Zl,Jl,yt,ka,Xl,Ql,en,$t,ba,tn,an,Us,we,sn,jt,on,ln,Fs,Ke,Hs,ae,ye,qa,We,nn,Aa,rn,Vs,Et,dn,Ys,U,pn,kt,fn,cn,Ca,un,hn,Ks,Ze,Ws,F,_n,bt,mn,gn,xa,vn,wn,Zs,Je,Js,qt,yn,Xs,Xe,Qs,$e,$n,Ta,jn,En,eo,Qe,to,se,je,Ia,et,kn,Da,bn,ao,H,qn,At,An,Cn,La,xn,Tn,so,tt,oo,Ct,In,lo,I,xt,Pa,Dn,Ln,Pn,V,za,zn,Sn,Tt,On,Nn,Sa,Rn,Gn,Bn,It,Oa,Mn,Un,Fn,Dt,Na,Hn,Vn,Yn,Lt,Ra,Kn,Wn,no,Ee,io,at,ro,oe,ke,Ga,st,Zn,Ba,Jn,po,Pt,Xn,fo,be,le,ot,Qn,zt,ei,ti,ai,ne,Ma,si,oi,Ua,li,ni,Fa,ii,ri,N,di,Ha,pi,fi,Va,ci,ui,St,hi,_i,mi,lt,z,gi,Ot,vi,wi,Ya,yi,$i,Ka,ji,Ei,Wa,ki,bi,qi,T,Ai,Za,Ci,xi,Ja,Ti,Ii,Xa,Di,Li,Qa,Pi,zi,es,Si,Oi,co,qe,uo,nt,ho,ie,Ae,ts,it,Ni,as,Ri,_o,C,Gi,Nt,Bi,Mi,ss,Ui,Fi,os,Hi,Vi,ls,Yi,Ki,ns,Wi,Zi,is,Ji,Xi,mo,Ce,go,Rt,Qi,vo,rt,wo,re,xe,rs,dt,er,ds,tr,yo,Te,ar,ps,sr,or,$o,Ie,lr,fs,nr,ir,jo,pt,Eo,De,rr,cs,dr,pr,ko,de,Le,us,ft,fr,hs,cr,bo,Y,ur,Gt,hr,_r,Bt,mr,gr,qo,Mt,vr,Ao,ct,Co;return _=new Z({}),fe=new ws({props:{$$slots:{default:[bp]},$$scope:{ctx:S}}}),Se=new Z({}),Oe=new x({props:{code:`folder/train/en_us/14223464699748513050.wav
folder/train/en_us/363601479976099198.wav
folder/train/en_us/9644097927007796370.wav

folder/train/fr_fr/14945328524472190788.wav`,highlighted:`folder<span class="hljs-regexp">/train/</span>en_us/<span class="hljs-number">14223464699748513050</span>.wav
folder<span class="hljs-regexp">/train/</span>en_us/<span class="hljs-number">363601479976099198</span>.wav
folder<span class="hljs-regexp">/train/</span>en_us/<span class="hljs-number">9644097927007796370</span>.wav

folder<span class="hljs-regexp">/train/</span>fr_fr/<span class="hljs-number">14945328524472190788</span>.wav`}}),Ne=new x({props:{code:`from datasets import load_dataset
dataset = load_dataset("audiofolder", data_dir="/path/to/folder")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;audiofolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)`}}),Re=new x({props:{code:`folder/train/metadata.jsonl
folder/train/first_audio_file.mp3
folder/train/second_audio_file.mp3
folder/train/third_audio_file.mp3`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span>first_audio_file.mp3
folder<span class="hljs-regexp">/train/</span>second_audio_file.mp3
folder<span class="hljs-regexp">/train/</span>third_audio_file.mp3`}}),Ge=new x({props:{code:`{"file_name": "first_audio_file.mp3", "transcription": "znowu si\u0119 duch z cia\u0142em zro\u015Bnie w m\u0142odocianej wstaniesz wiosnie i mo\u017Cesz skutkiem tych lek\xF3w umiera\u0107 wstawa\u0107 wiek wiek\xF3w dalej tam by\u0142y przestrogi jak sieka\u0107 g\u0142ow\u0119 jak nogi"}
{"file_name": "second_audio_file.mp3", "transcription": "ju\u017C u \u017Awierzy\u0144ca podwoj\xF3w kr\xF3l zasiada przy nim ksi\u0105\u017C\u0119ta i panowie rada a gdzie wznios\u0142y kr\u0105\u017Cy\u0142 ganek rycerze obok kochanek kr\xF3l skin\u0105\u0142 palcem zacz\u0119to igrzysko"}
{"file_name": "third_audio_file.mp3", "transcription": "pewnie k\u0119dy\u015B w ob\u0142\u0119dzie ubite min\u0119\u0142y szlaki zaczekajmy dzie\u0144 jaki po\u015Blemy szuka\u0107 wsz\u0119dzie dzi\u015B jutro pewnie b\u0119dzie pos\u0142ali wsz\u0119dzie s\u0142ugi czekali dzie\u0144 i drugi gdy nic nie doczekali z p\u0142aczem chc\u0105 jecha\u0107 dali"}`,highlighted:`<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;file_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first_audio_file.mp3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;transcription&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;znowu si\u0119 duch z cia\u0142em zro\u015Bnie w m\u0142odocianej wstaniesz wiosnie i mo\u017Cesz skutkiem tych lek\xF3w umiera\u0107 wstawa\u0107 wiek wiek\xF3w dalej tam by\u0142y przestrogi jak sieka\u0107 g\u0142ow\u0119 jak nogi&quot;</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;file_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second_audio_file.mp3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;transcription&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ju\u017C u \u017Awierzy\u0144ca podwoj\xF3w kr\xF3l zasiada przy nim ksi\u0105\u017C\u0119ta i panowie rada a gdzie wznios\u0142y kr\u0105\u017Cy\u0142 ganek rycerze obok kochanek kr\xF3l skin\u0105\u0142 palcem zacz\u0119to igrzysko&quot;</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;file_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;third_audio_file.mp3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;transcription&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pewnie k\u0119dy\u015B w ob\u0142\u0119dzie ubite min\u0119\u0142y szlaki zaczekajmy dzie\u0144 jaki po\u015Blemy szuka\u0107 wsz\u0119dzie dzi\u015B jutro pewnie b\u0119dzie pos\u0142ali wsz\u0119dzie s\u0142ugi czekali dzie\u0144 i drugi gdy nic nie doczekali z p\u0142aczem chc\u0105 jecha\u0107 dali&quot;</span><span class="hljs-punctuation">}</span>`}}),Be=new Z({}),Me=new x({props:{code:`my_dataset/
\u251C\u2500\u2500 README.md
\u251C\u2500\u2500 my_dataset.py
\u2514\u2500\u2500 data/  # optional, may contain your images or TAR archives`,highlighted:`my_dataset/
\u251C\u2500\u2500 README.md
\u251C\u2500\u2500 my_dataset.py
\u2514\u2500\u2500 <span class="hljs-title">data</span>/  <span class="hljs-comment"># optional, may contain your images or TAR archives</span>`}}),Ue=new x({props:{code:`from datasets import load_dataset
dataset = load_dataset("path/to/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/my_dataset&quot;</span>)`}}),ge=new ws({props:{$$slots:{default:[qp]},$$scope:{ctx:S}}}),Ve=new Z({}),Ke=new x({props:{code:`class Minds14(datasets.GeneratorBasedBuilder):
    """MInDS-14 dataset"""

    def _info(self):

    def _split_generators(self, dl_manager):

    def _generate_examples(self, images, metadata_path):`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">Minds14</span>(datasets.GeneratorBasedBuilder):
    <span class="hljs-string">&quot;&quot;&quot;MInDS-14 dataset&quot;&quot;&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_info</span>(<span class="hljs-params">self</span>):

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_generators</span>(<span class="hljs-params">self, dl_manager</span>):

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_examples</span>(<span class="hljs-params">self, images, metadata_path</span>):`}}),We=new Z({}),Ze=new x({props:{code:`class Minds14Config(datasets.BuilderConfig):
    """BuilderConfig for xtreme-s"""

    def __init__(
        self, name, description, homepage, data_url
    ):
        super(Minds14Config, self).__init__(
            name=self.name,
            version=datasets.Version("1.0.0", ""),
            description=self.description,
        )
        self.name = name
        self.description = description
        self.homepage = homepage
        self.data_url = data_url`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">Minds14Config</span>(datasets.BuilderConfig):
    <span class="hljs-string">&quot;&quot;&quot;BuilderConfig for xtreme-s&quot;&quot;&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">
        self, name, description, homepage, data_url
    </span>):
        <span class="hljs-built_in">super</span>(Minds14Config, self).__init__(
            name=self.name,
            version=datasets.Version(<span class="hljs-string">&quot;1.0.0&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),
            description=self.description,
        )
        self.name = name
        self.description = description
        self.homepage = homepage
        self.data_url = data_url`}}),Je=new x({props:{code:`class Minds14(datasets.GeneratorBasedBuilder):

    DEFAULT_WRITER_BATCH_SIZE = 1000
    BUILDER_CONFIGS = [_build_config(name) for name in _ALL_CONFIGS + ["all"]]`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">Minds14</span>(datasets.GeneratorBasedBuilder):

    DEFAULT_WRITER_BATCH_SIZE = <span class="hljs-number">1000</span>
    BUILDER_CONFIGS = [_build_config(name) <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> _ALL_CONFIGS + [<span class="hljs-string">&quot;all&quot;</span>]]`}}),Xe=new x({props:{code:`_ALL_CONFIGS = sorted([
    "cs-CZ", "de-DE", "en-AU", "en-GB", "en-US", "es-ES", "fr-FR", "it-IT", "ko-KR", "nl-NL", "pl-PL", "pt-PT", "ru-RU", "zh-CN"
])

def _build_config(name):
    return Minds14Config(
        name=name,
        description=_DESCRIPTION,
        homepage=_HOMEPAGE_URL,
        data_url=_DATA_URL,
    )`,highlighted:`_ALL_CONFIGS = <span class="hljs-built_in">sorted</span>([
    <span class="hljs-string">&quot;cs-CZ&quot;</span>, <span class="hljs-string">&quot;de-DE&quot;</span>, <span class="hljs-string">&quot;en-AU&quot;</span>, <span class="hljs-string">&quot;en-GB&quot;</span>, <span class="hljs-string">&quot;en-US&quot;</span>, <span class="hljs-string">&quot;es-ES&quot;</span>, <span class="hljs-string">&quot;fr-FR&quot;</span>, <span class="hljs-string">&quot;it-IT&quot;</span>, <span class="hljs-string">&quot;ko-KR&quot;</span>, <span class="hljs-string">&quot;nl-NL&quot;</span>, <span class="hljs-string">&quot;pl-PL&quot;</span>, <span class="hljs-string">&quot;pt-PT&quot;</span>, <span class="hljs-string">&quot;ru-RU&quot;</span>, <span class="hljs-string">&quot;zh-CN&quot;</span>
])

<span class="hljs-keyword">def</span> <span class="hljs-title function_">_build_config</span>(<span class="hljs-params">name</span>):
    <span class="hljs-keyword">return</span> Minds14Config(
        name=name,
        description=_DESCRIPTION,
        homepage=_HOMEPAGE_URL,
        data_url=_DATA_URL,
    )`}}),Qe=new x({props:{code:`from datasets import load_dataset
dataset = load_dataset("PolyAI/minds14", "ko-KR", split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, <span class="hljs-string">&quot;ko-KR&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),et=new Z({}),tt=new x({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder("PolyAI/minds14")
ds_builder.info`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.info`}}),Ee=new ws({props:{$$slots:{default:[Ap]},$$scope:{ctx:S}}}),at=new x({props:{code:`def _info(self):
    task_templates = None
    langs = _ALL_CONFIGS
    features = datasets.Features(
        {
            "path": datasets.Value("string"),
            "audio": datasets.Audio(sampling_rate=8_000),
            "transcription": datasets.Value("string"),
            "english_transcription": datasets.Value("string"),
            "intent_class": datasets.ClassLabel(
                names=[
                    "abroad",
                    "address",
                    "app_error",
                    "atm_limit",
                    "balance",
                    "business_loan",
                    "card_issues",
                    "cash_deposit",
                    "direct_debit",
                    "freeze",
                    "high_value_payment",
                    "joint_account",
                    "latest_transactions",
                    "pay_bill",
                ]
            ),
            "lang_id": datasets.ClassLabel(names=langs),
        }
    )

    return datasets.DatasetInfo(
    description=self.config.description + "\\n" + _DESCRIPTION,
    features=features,
    supervised_keys=("audio", "transcription"),
    homepage=self.config.homepage,
    citation=_CITATION,
    task_templates=task_templates,
)`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_info</span>(<span class="hljs-params">self</span>):
    task_templates = <span class="hljs-literal">None</span>
    langs = _ALL_CONFIGS
    features = datasets.Features(
        {
            <span class="hljs-string">&quot;path&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
            <span class="hljs-string">&quot;audio&quot;</span>: datasets.Audio(sampling_rate=<span class="hljs-number">8_000</span>),
            <span class="hljs-string">&quot;transcription&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
            <span class="hljs-string">&quot;english_transcription&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
            <span class="hljs-string">&quot;intent_class&quot;</span>: datasets.ClassLabel(
                names=[
                    <span class="hljs-string">&quot;abroad&quot;</span>,
                    <span class="hljs-string">&quot;address&quot;</span>,
                    <span class="hljs-string">&quot;app_error&quot;</span>,
                    <span class="hljs-string">&quot;atm_limit&quot;</span>,
                    <span class="hljs-string">&quot;balance&quot;</span>,
                    <span class="hljs-string">&quot;business_loan&quot;</span>,
                    <span class="hljs-string">&quot;card_issues&quot;</span>,
                    <span class="hljs-string">&quot;cash_deposit&quot;</span>,
                    <span class="hljs-string">&quot;direct_debit&quot;</span>,
                    <span class="hljs-string">&quot;freeze&quot;</span>,
                    <span class="hljs-string">&quot;high_value_payment&quot;</span>,
                    <span class="hljs-string">&quot;joint_account&quot;</span>,
                    <span class="hljs-string">&quot;latest_transactions&quot;</span>,
                    <span class="hljs-string">&quot;pay_bill&quot;</span>,
                ]
            ),
            <span class="hljs-string">&quot;lang_id&quot;</span>: datasets.ClassLabel(names=langs),
        }
    )

    <span class="hljs-keyword">return</span> datasets.DatasetInfo(
    description=self.config.description + <span class="hljs-string">&quot;\\n&quot;</span> + _DESCRIPTION,
    features=features,
    supervised_keys=(<span class="hljs-string">&quot;audio&quot;</span>, <span class="hljs-string">&quot;transcription&quot;</span>),
    homepage=self.config.homepage,
    citation=_CITATION,
    task_templates=task_templates,
)`}}),st=new Z({}),qe=new ws({props:{warning:!0,$$slots:{default:[Cp]},$$scope:{ctx:S}}}),nt=new x({props:{code:`def _split_generators(self, dl_manager):
    langs = (
        _ALL_CONFIGS
        if self.config.name == "all"
        else [self.config.name]
    )

    archive_path = dl_manager.download_and_extract(self.config.data_url)
    audio_path = dl_manager.extract(
        os.path.join(archive_path, "MInDS-14", "audio.zip")
    )
    text_path = dl_manager.extract(
        os.path.join(archive_path, "MInDS-14", "text.zip")
    )

    text_path = {l: os.path.join(text_path, f"{l}.csv") for l in langs}

    return [
        datasets.SplitGenerator(
            name=datasets.Split.TRAIN,
            gen_kwargs={
                "audio_path": audio_path,
                "text_paths": text_path,
            },
        )
    ]`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_generators</span>(<span class="hljs-params">self, dl_manager</span>):
    langs = (
        _ALL_CONFIGS
        <span class="hljs-keyword">if</span> self.config.name == <span class="hljs-string">&quot;all&quot;</span>
        <span class="hljs-keyword">else</span> [self.config.name]
    )

    archive_path = dl_manager.download_and_extract(self.config.data_url)
    audio_path = dl_manager.extract(
        os.path.join(archive_path, <span class="hljs-string">&quot;MInDS-14&quot;</span>, <span class="hljs-string">&quot;audio.zip&quot;</span>)
    )
    text_path = dl_manager.extract(
        os.path.join(archive_path, <span class="hljs-string">&quot;MInDS-14&quot;</span>, <span class="hljs-string">&quot;text.zip&quot;</span>)
    )

    text_path = {l: os.path.join(text_path, <span class="hljs-string">f&quot;<span class="hljs-subst">{l}</span>.csv&quot;</span>) <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> langs}

    <span class="hljs-keyword">return</span> [
        datasets.SplitGenerator(
            name=datasets.Split.TRAIN,
            gen_kwargs={
                <span class="hljs-string">&quot;audio_path&quot;</span>: audio_path,
                <span class="hljs-string">&quot;text_paths&quot;</span>: text_path,
            },
        )
    ]`}}),it=new Z({}),Ce=new ws({props:{warning:!0,$$slots:{default:[xp]},$$scope:{ctx:S}}}),rt=new x({props:{code:`def _generate_examples(self, audio_path, text_paths):
    key = 0
    for lang in text_paths.keys():
        text_path = text_paths[lang]
        with open(text_path, encoding="utf-8") as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=",", skipinitialspace=True)
            next(csv_reader)
            for row in csv_reader:
                file_path, transcription, english_transcription, intent_class = row

                file_path = os.path.join(audio_path, *file_path.split("/"))
                yield key, {
                    "path": file_path,
                    "audio": file_path,
                    "transcription": transcription,
                    "english_transcription": english_transcription,
                    "intent_class": intent_class.lower(),
                    "lang_id": _ALL_CONFIGS.index(lang),
                }
                key += 1`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_examples</span>(<span class="hljs-params">self, audio_path, text_paths</span>):
    key = <span class="hljs-number">0</span>
    <span class="hljs-keyword">for</span> lang <span class="hljs-keyword">in</span> text_paths.keys():
        text_path = text_paths[lang]
        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(text_path, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> csv_file:
            csv_reader = csv.reader(csv_file, delimiter=<span class="hljs-string">&quot;,&quot;</span>, skipinitialspace=<span class="hljs-literal">True</span>)
            <span class="hljs-built_in">next</span>(csv_reader)
            <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> csv_reader:
                file_path, transcription, english_transcription, intent_class = row

                file_path = os.path.join(audio_path, *file_path.split(<span class="hljs-string">&quot;/&quot;</span>))
                <span class="hljs-keyword">yield</span> key, {
                    <span class="hljs-string">&quot;path&quot;</span>: file_path,
                    <span class="hljs-string">&quot;audio&quot;</span>: file_path,
                    <span class="hljs-string">&quot;transcription&quot;</span>: transcription,
                    <span class="hljs-string">&quot;english_transcription&quot;</span>: english_transcription,
                    <span class="hljs-string">&quot;intent_class&quot;</span>: intent_class.lower(),
                    <span class="hljs-string">&quot;lang_id&quot;</span>: _ALL_CONFIGS.index(lang),
                }
                key += <span class="hljs-number">1</span>`}}),dt=new Z({}),pt=new x({props:{code:"datasets-cli test path/to/<your-dataset-loading-script> --save_infos --all_configs",highlighted:'datasets-cli <span class="hljs-built_in">test</span> path/to/&lt;your-dataset-loading-script&gt; --save_infos --all_configs'}}),ft=new Z({}),ct=new x({props:{code:`from datasets import load_dataset
load_dataset("<username>/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>load_dataset(<span class="hljs-string">&quot;&lt;username&gt;/my_dataset&quot;</span>)`}}),{c(){u=l("meta"),k=p(),h=l("h1"),j=l("a"),b=l("span"),m(_.$$.fragment),E=p(),q=l("span"),J=s("Create an audio dataset"),P=p(),X=l("p"),_t=s("There are two methods for creating and sharing an audio dataset. This guide will show you how to:"),ys=p(),pe=l("ul"),Qt=l("li"),ze=l("p"),Jo=s("Create an audio dataset with "),ea=l("code"),Xo=s("AudioFolder"),Qo=s(" and some metadata. This is a no-code solution for quickly creating an audio dataset."),el=p(),ta=l("li"),aa=l("p"),tl=s("Create an audio dataset by writing a loading script. This method is a bit more involved, but you have greater flexibility over how a dataset is defined, downloaded, and generated."),$s=p(),m(fe.$$.fragment),js=p(),Q=l("h2"),ce=l("a"),sa=l("span"),m(Se.$$.fragment),al=p(),oa=l("span"),sl=s("AudioFolder"),Es=p(),R=l("p"),ol=s("The "),la=l("code"),ll=s("AudioFolder"),nl=s(" is a dataset builder designed to quickly load an audio dataset without requiring you to write any code. "),na=l("code"),il=s("AudioFolder"),rl=s(" automatically infers the class labels of your dataset based on the directory name. Just store your dataset in a directory structure like:"),ks=p(),m(Oe.$$.fragment),bs=p(),G=l("p"),dl=s("Then users can load your dataset by specifying "),ia=l("code"),pl=s("audiofolder"),fl=s(" in load_dataset() and the directory in "),ra=l("code"),cl=s("data_dir"),ul=s(":"),qs=p(),m(Ne.$$.fragment),As=p(),ue=l("p"),hl=s("This is useful for audio classification, but for other audio tasks, you may need to include additional information about your dataset like transcription, speaker accent or speaker intent. This information can be added in a "),da=l("code"),_l=s("metadata.jsonl"),ml=s(" file in your data folder, which lets you quickly create datasets for different audio tasks like automatic speech recognition:"),Cs=p(),m(Re.$$.fragment),xs=p(),B=l("p"),gl=s("The "),pa=l("code"),vl=s("metadata.jsonl"),wl=s(" file needs a "),fa=l("code"),yl=s("file_name"),$l=s(" column to link an audio file to it\u2019s metadata:"),Ts=p(),m(Ge.$$.fragment),Is=p(),ee=l("h2"),he=l("a"),ca=l("span"),m(Be.$$.fragment),jl=p(),ua=l("span"),El=s("Loading script"),Ds=p(),mt=l("p"),kl=s("Write a dataset loading script to share a dataset. It defines a dataset\u2019s splits and configurations, and handles downloading and generating a dataset. The script is located in the same folder or repository as the dataset."),Ls=p(),m(Me.$$.fragment),Ps=p(),gt=l("p"),bl=s("This structure allows your dataset to be loaded in one line:"),zs=p(),m(Ue.$$.fragment),Ss=p(),_e=l("p"),ql=s("This guide will show you how to create a dataset loading script for image datasets, which is a bit different from "),Fe=l("a"),Al=s("creating a loading script for text datasets"),Cl=s(". You\u2019ll learn how to:"),Os=p(),A=l("ul"),ha=l("li"),xl=s("Create a dataset builder class."),Tl=p(),_a=l("li"),Il=s("Create dataset configurations."),Dl=p(),ma=l("li"),Ll=s("Add dataset metadata."),Pl=p(),ga=l("li"),zl=s("Download and define the dataset splits."),Sl=p(),va=l("li"),Ol=s("Generate the dataset."),Nl=p(),wa=l("li"),Rl=s("Generate the dataset metadata (optional)."),Gl=p(),ya=l("li"),Bl=s("Upload the dataset to the Hub."),Ns=p(),me=l("p"),Ml=s("The best way to learn is to open up an existing audio dataset loading script, like "),He=l("a"),Ul=s("MInDS-14"),Fl=s(", and follow along!"),Rs=p(),m(ge.$$.fragment),Gs=p(),te=l("h3"),ve=l("a"),$a=l("span"),m(Ve.$$.fragment),Hl=p(),ja=l("span"),Vl=s("Create a dataset builder class"),Bs=p(),Ye=l("p"),vt=l("a"),Yl=s("GeneratorBasedBuilder"),Kl=s(" is the base class for datasets generated from a dictionary generator. Within this class, there are three methods to help create your dataset:"),Ms=p(),M=l("ul"),wt=l("li"),Ea=l("code"),Wl=s("info"),Zl=s(" stores information about your dataset like its description, license, and features."),Jl=p(),yt=l("li"),ka=l("code"),Xl=s("split_generators"),Ql=s(" downloads the dataset and defines its splits."),en=p(),$t=l("li"),ba=l("code"),tn=s("generate_examples"),an=s(" generates the images and labels for each split."),Us=p(),we=l("p"),sn=s("Start by creating your dataset class as a subclass of "),jt=l("a"),on=s("GeneratorBasedBuilder"),ln=s(" and add the three methods. Don\u2019t worry about filling in each of these methods yet, you\u2019ll develop those over the next few sections:"),Fs=p(),m(Ke.$$.fragment),Hs=p(),ae=l("h4"),ye=l("a"),qa=l("span"),m(We.$$.fragment),nn=p(),Aa=l("span"),rn=s("Multiple configurations"),Vs=p(),Et=l("p"),dn=s("In some cases, a dataset may have more than one configuration. For example, the MInDS-14 dataset has several configurations corresponding to different languages."),Ys=p(),U=l("p"),pn=s("To create different configurations, use the "),kt=l("a"),fn=s("BuilderConfig"),cn=s(" class to create a subclass for your dataset. Provide the links to download the audio files in "),Ca=l("code"),un=s("data_url"),hn=s(":"),Ks=p(),m(Ze.$$.fragment),Ws=p(),F=l("p"),_n=s("Now you can define your configurations at the top of "),bt=l("a"),mn=s("GeneratorBasedBuilder"),gn=s(". For memory intensive data formats like audio datasets, it is often a good idea to set a lower "),xa=l("code"),vn=s("writer_batch_size"),wn=s(":"),Zs=p(),m(Je.$$.fragment),Js=p(),qt=l("p"),yn=s("You\u2019ll notice the author of this particular loading script defined the configuration names earlier in the script, and created a function to build each configuration. It doesn\u2019t really matter how you create the configuration objects, but each configuration should have a name, description, and where to download the data from."),Xs=p(),m(Xe.$$.fragment),Qs=p(),$e=l("p"),$n=s("Now if users want to load the "),Ta=l("code"),jn=s("ko-KR"),En=s(" configuration, they can use the configuration name:"),eo=p(),m(Qe.$$.fragment),to=p(),se=l("h3"),je=l("a"),Ia=l("span"),m(et.$$.fragment),kn=p(),Da=l("span"),bn=s("Add dataset metadata"),ao=p(),H=l("p"),qn=s("Adding information about your dataset is useful for users to learn more about it. This information is stored in the "),At=l("a"),An=s("DatasetInfo"),Cn=s(" class which is returned by the "),La=l("code"),xn=s("info"),Tn=s(" method. Users can access this information by:"),so=p(),m(tt.$$.fragment),oo=p(),Ct=l("p"),In=s("There is a lot of information you can specify about your dataset, but some important ones to include are:"),lo=p(),I=l("ol"),xt=l("li"),Pa=l("code"),Dn=s("description"),Ln=s(" provides a concise description of the dataset."),Pn=p(),V=l("li"),za=l("code"),zn=s("features"),Sn=s(" specify the dataset column types. Since you\u2019re creating an audio loading script, you\u2019ll need to include the "),Tt=l("a"),On=s("Audio"),Nn=s(" feature and specify the "),Sa=l("code"),Rn=s("sampling_rate"),Gn=s(" of the dataset."),Bn=p(),It=l("li"),Oa=l("code"),Mn=s("supervised_keys"),Un=s(" specify the input feature and label."),Fn=p(),Dt=l("li"),Na=l("code"),Hn=s("homepage"),Vn=s(" provides a link to the dataset homepage."),Yn=p(),Lt=l("li"),Ra=l("code"),Kn=s("citation"),Wn=s(" is a BibTeX citation of the dataset."),no=p(),m(Ee.$$.fragment),io=p(),m(at.$$.fragment),ro=p(),oe=l("h3"),ke=l("a"),Ga=l("span"),m(st.$$.fragment),Zn=p(),Ba=l("span"),Jn=s("Download and define the dataset splits"),po=p(),Pt=l("p"),Xn=s("Now that you\u2019ve added some information about your dataset, the next step is to download the dataset and generate the splits."),fo=p(),be=l("ol"),le=l("li"),ot=l("p"),Qn=s("Use the "),zt=l("a"),ei=s("DownloadManager.download_and_extract()"),ti=s(" method to download and extract the URLs. This method accepts:"),ai=p(),ne=l("ul"),Ma=l("li"),si=s("a name to a file inside a Hub dataset repository (in other words, the data/ folder)"),oi=p(),Ua=l("li"),li=s("a URL to a file hosted somewhere else"),ni=p(),Fa=l("li"),ii=s("a list or dictionary of file names or URLs"),ri=p(),N=l("p"),di=s("For the "),Ha=l("code"),pi=s("audio"),fi=s(" and "),Va=l("code"),ci=s("text"),ui=s(" data at these URLs, use the "),St=l("a"),hi=s("DownloadManager.extract()"),_i=s(" method to extract the file paths."),mi=p(),lt=l("li"),z=l("p"),gi=s("After you\u2019ve downloaded the dataset, use the "),Ot=l("a"),vi=s("SplitGenerator"),wi=s(" to organize the audio files and text transcriptions in each split. Name each split with a standard name like: "),Ya=l("code"),yi=s("Split.TRAIN"),$i=s(", "),Ka=l("code"),ji=s("Split.TEST"),Ei=s(", and "),Wa=l("code"),ki=s("SPLIT.Validation"),bi=s("."),qi=p(),T=l("p"),Ai=s("In the "),Za=l("code"),Ci=s("gen_kwargs"),xi=s(" parameter, specify the file paths to the "),Ja=l("code"),Ti=s("audio"),Ii=s(" and "),Xa=l("code"),Di=s("text"),Li=s(" files to load. The "),Qa=l("code"),Pi=s("audio"),zi=s(" and "),es=l("code"),Si=s("text"),Oi=s(" file paths are actually passed onto the next step where you\u2019ll actually generate the dataset."),co=p(),m(qe.$$.fragment),uo=p(),m(nt.$$.fragment),ho=p(),ie=l("h3"),Ae=l("a"),ts=l("span"),m(it.$$.fragment),Ni=p(),as=l("span"),Ri=s("Generate the dataset"),_o=p(),C=l("p"),Gi=s("The last method in the "),Nt=l("a"),Bi=s("GeneratorBasedBuilder"),Mi=s(" class actually generates the audio and transcriptions in the dataset. It yields a dataset according to the stucture specified in "),ss=l("code"),Ui=s("features"),Fi=s(" from the "),os=l("code"),Hi=s("info"),Vi=s(" method. As you can see, "),ls=l("code"),Yi=s("generate_examples"),Ki=s(" accepts the "),ns=l("code"),Wi=s("audio_path"),Zi=s(" and "),is=l("code"),Ji=s("text_paths"),Xi=s(" from the previous method as arguments."),mo=p(),m(Ce.$$.fragment),go=p(),Rt=l("p"),Qi=s("Now you can write a function for opening and loading examples from the dataset:"),vo=p(),m(rt.$$.fragment),wo=p(),re=l("h3"),xe=l("a"),rs=l("span"),m(dt.$$.fragment),er=p(),ds=l("span"),tr=s("Generate the dataset metadata (optional)"),yo=p(),Te=l("p"),ar=s("The dataset metadata you added earlier now needs to be generated and stored in a file called "),ps=l("code"),sr=s("datasets_infos.json"),or=s(". In addition to information about a datasets features and description, this file also contains data file checksums to ensure integrity."),$o=p(),Ie=l("p"),lr=s("Run the following command to generate your dataset metadata in "),fs=l("code"),nr=s("dataset_infos.json"),ir=s(" and make sure your new loading script works correctly:"),jo=p(),m(pt.$$.fragment),Eo=p(),De=l("p"),rr=s("If your loading script passed the test, you should now have a "),cs=l("code"),dr=s("dataset_infos.json"),pr=s(" file in your dataset folder."),ko=p(),de=l("h2"),Le=l("a"),us=l("span"),m(ft.$$.fragment),fr=p(),hs=l("span"),cr=s("Upload the dataset to the Hub"),bo=p(),Y=l("p"),ur=s("Once your script is ready, "),Gt=l("a"),hr=s("create a dataset card"),_r=s(" and "),Bt=l("a"),mr=s("upload it to the Hub"),gr=s("."),qo=p(),Mt=l("p"),vr=s("Congratulations, you can now load your dataset from the Hub! \u{1F973}"),Ao=p(),m(ct.$$.fragment),this.h()},l(e){const r=Ep('[data-svelte="svelte-1phssyn"]',document.head);u=n(r,"META",{name:!0,content:!0}),r.forEach(a),k=f(e),h=n(e,"H1",{class:!0});var ut=i(h);j=n(ut,"A",{id:!0,class:!0,href:!0});var _s=i(j);b=n(_s,"SPAN",{});var ms=i(b);g(_.$$.fragment,ms),ms.forEach(a),_s.forEach(a),E=f(ut),q=n(ut,"SPAN",{});var gs=i(q);J=o(gs,"Create an audio dataset"),gs.forEach(a),ut.forEach(a),P=f(e),X=n(e,"P",{});var vs=i(X);_t=o(vs,"There are two methods for creating and sharing an audio dataset. This guide will show you how to:"),vs.forEach(a),ys=f(e),pe=n(e,"UL",{});var xo=i(pe);Qt=n(xo,"LI",{});var Ar=i(Qt);ze=n(Ar,"P",{});var To=i(ze);Jo=o(To,"Create an audio dataset with "),ea=n(To,"CODE",{});var Cr=i(ea);Xo=o(Cr,"AudioFolder"),Cr.forEach(a),Qo=o(To," and some metadata. This is a no-code solution for quickly creating an audio dataset."),To.forEach(a),Ar.forEach(a),el=f(xo),ta=n(xo,"LI",{});var xr=i(ta);aa=n(xr,"P",{});var Tr=i(aa);tl=o(Tr,"Create an audio dataset by writing a loading script. This method is a bit more involved, but you have greater flexibility over how a dataset is defined, downloaded, and generated."),Tr.forEach(a),xr.forEach(a),xo.forEach(a),$s=f(e),g(fe.$$.fragment,e),js=f(e),Q=n(e,"H2",{class:!0});var Io=i(Q);ce=n(Io,"A",{id:!0,class:!0,href:!0});var Ir=i(ce);sa=n(Ir,"SPAN",{});var Dr=i(sa);g(Se.$$.fragment,Dr),Dr.forEach(a),Ir.forEach(a),al=f(Io),oa=n(Io,"SPAN",{});var Lr=i(oa);sl=o(Lr,"AudioFolder"),Lr.forEach(a),Io.forEach(a),Es=f(e),R=n(e,"P",{});var Ut=i(R);ol=o(Ut,"The "),la=n(Ut,"CODE",{});var Pr=i(la);ll=o(Pr,"AudioFolder"),Pr.forEach(a),nl=o(Ut," is a dataset builder designed to quickly load an audio dataset without requiring you to write any code. "),na=n(Ut,"CODE",{});var zr=i(na);il=o(zr,"AudioFolder"),zr.forEach(a),rl=o(Ut," automatically infers the class labels of your dataset based on the directory name. Just store your dataset in a directory structure like:"),Ut.forEach(a),ks=f(e),g(Oe.$$.fragment,e),bs=f(e),G=n(e,"P",{});var Ft=i(G);dl=o(Ft,"Then users can load your dataset by specifying "),ia=n(Ft,"CODE",{});var Sr=i(ia);pl=o(Sr,"audiofolder"),Sr.forEach(a),fl=o(Ft," in load_dataset() and the directory in "),ra=n(Ft,"CODE",{});var Or=i(ra);cl=o(Or,"data_dir"),Or.forEach(a),ul=o(Ft,":"),Ft.forEach(a),qs=f(e),g(Ne.$$.fragment,e),As=f(e),ue=n(e,"P",{});var Do=i(ue);hl=o(Do,"This is useful for audio classification, but for other audio tasks, you may need to include additional information about your dataset like transcription, speaker accent or speaker intent. This information can be added in a "),da=n(Do,"CODE",{});var Nr=i(da);_l=o(Nr,"metadata.jsonl"),Nr.forEach(a),ml=o(Do," file in your data folder, which lets you quickly create datasets for different audio tasks like automatic speech recognition:"),Do.forEach(a),Cs=f(e),g(Re.$$.fragment,e),xs=f(e),B=n(e,"P",{});var Ht=i(B);gl=o(Ht,"The "),pa=n(Ht,"CODE",{});var Rr=i(pa);vl=o(Rr,"metadata.jsonl"),Rr.forEach(a),wl=o(Ht," file needs a "),fa=n(Ht,"CODE",{});var Gr=i(fa);yl=o(Gr,"file_name"),Gr.forEach(a),$l=o(Ht," column to link an audio file to it\u2019s metadata:"),Ht.forEach(a),Ts=f(e),g(Ge.$$.fragment,e),Is=f(e),ee=n(e,"H2",{class:!0});var Lo=i(ee);he=n(Lo,"A",{id:!0,class:!0,href:!0});var Br=i(he);ca=n(Br,"SPAN",{});var Mr=i(ca);g(Be.$$.fragment,Mr),Mr.forEach(a),Br.forEach(a),jl=f(Lo),ua=n(Lo,"SPAN",{});var Ur=i(ua);El=o(Ur,"Loading script"),Ur.forEach(a),Lo.forEach(a),Ds=f(e),mt=n(e,"P",{});var Fr=i(mt);kl=o(Fr,"Write a dataset loading script to share a dataset. It defines a dataset\u2019s splits and configurations, and handles downloading and generating a dataset. The script is located in the same folder or repository as the dataset."),Fr.forEach(a),Ls=f(e),g(Me.$$.fragment,e),Ps=f(e),gt=n(e,"P",{});var Hr=i(gt);bl=o(Hr,"This structure allows your dataset to be loaded in one line:"),Hr.forEach(a),zs=f(e),g(Ue.$$.fragment,e),Ss=f(e),_e=n(e,"P",{});var Po=i(_e);ql=o(Po,"This guide will show you how to create a dataset loading script for image datasets, which is a bit different from "),Fe=n(Po,"A",{class:!0,href:!0});var Vr=i(Fe);Al=o(Vr,"creating a loading script for text datasets"),Vr.forEach(a),Cl=o(Po,". You\u2019ll learn how to:"),Po.forEach(a),Os=f(e),A=n(e,"UL",{});var D=i(A);ha=n(D,"LI",{});var Yr=i(ha);xl=o(Yr,"Create a dataset builder class."),Yr.forEach(a),Tl=f(D),_a=n(D,"LI",{});var Kr=i(_a);Il=o(Kr,"Create dataset configurations."),Kr.forEach(a),Dl=f(D),ma=n(D,"LI",{});var Wr=i(ma);Ll=o(Wr,"Add dataset metadata."),Wr.forEach(a),Pl=f(D),ga=n(D,"LI",{});var Zr=i(ga);zl=o(Zr,"Download and define the dataset splits."),Zr.forEach(a),Sl=f(D),va=n(D,"LI",{});var Jr=i(va);Ol=o(Jr,"Generate the dataset."),Jr.forEach(a),Nl=f(D),wa=n(D,"LI",{});var Xr=i(wa);Rl=o(Xr,"Generate the dataset metadata (optional)."),Xr.forEach(a),Gl=f(D),ya=n(D,"LI",{});var Qr=i(ya);Bl=o(Qr,"Upload the dataset to the Hub."),Qr.forEach(a),D.forEach(a),Ns=f(e),me=n(e,"P",{});var zo=i(me);Ml=o(zo,"The best way to learn is to open up an existing audio dataset loading script, like "),He=n(zo,"A",{href:!0,rel:!0});var ed=i(He);Ul=o(ed,"MInDS-14"),ed.forEach(a),Fl=o(zo,", and follow along!"),zo.forEach(a),Rs=f(e),g(ge.$$.fragment,e),Gs=f(e),te=n(e,"H3",{class:!0});var So=i(te);ve=n(So,"A",{id:!0,class:!0,href:!0});var td=i(ve);$a=n(td,"SPAN",{});var ad=i($a);g(Ve.$$.fragment,ad),ad.forEach(a),td.forEach(a),Hl=f(So),ja=n(So,"SPAN",{});var sd=i(ja);Vl=o(sd,"Create a dataset builder class"),sd.forEach(a),So.forEach(a),Bs=f(e),Ye=n(e,"P",{});var wr=i(Ye);vt=n(wr,"A",{href:!0});var od=i(vt);Yl=o(od,"GeneratorBasedBuilder"),od.forEach(a),Kl=o(wr," is the base class for datasets generated from a dictionary generator. Within this class, there are three methods to help create your dataset:"),wr.forEach(a),Ms=f(e),M=n(e,"UL",{});var Vt=i(M);wt=n(Vt,"LI",{});var yr=i(wt);Ea=n(yr,"CODE",{});var ld=i(Ea);Wl=o(ld,"info"),ld.forEach(a),Zl=o(yr," stores information about your dataset like its description, license, and features."),yr.forEach(a),Jl=f(Vt),yt=n(Vt,"LI",{});var $r=i(yt);ka=n($r,"CODE",{});var nd=i(ka);Xl=o(nd,"split_generators"),nd.forEach(a),Ql=o($r," downloads the dataset and defines its splits."),$r.forEach(a),en=f(Vt),$t=n(Vt,"LI",{});var jr=i($t);ba=n(jr,"CODE",{});var id=i(ba);tn=o(id,"generate_examples"),id.forEach(a),an=o(jr," generates the images and labels for each split."),jr.forEach(a),Vt.forEach(a),Us=f(e),we=n(e,"P",{});var Oo=i(we);sn=o(Oo,"Start by creating your dataset class as a subclass of "),jt=n(Oo,"A",{href:!0});var rd=i(jt);on=o(rd,"GeneratorBasedBuilder"),rd.forEach(a),ln=o(Oo," and add the three methods. Don\u2019t worry about filling in each of these methods yet, you\u2019ll develop those over the next few sections:"),Oo.forEach(a),Fs=f(e),g(Ke.$$.fragment,e),Hs=f(e),ae=n(e,"H4",{class:!0});var No=i(ae);ye=n(No,"A",{id:!0,class:!0,href:!0});var dd=i(ye);qa=n(dd,"SPAN",{});var pd=i(qa);g(We.$$.fragment,pd),pd.forEach(a),dd.forEach(a),nn=f(No),Aa=n(No,"SPAN",{});var fd=i(Aa);rn=o(fd,"Multiple configurations"),fd.forEach(a),No.forEach(a),Vs=f(e),Et=n(e,"P",{});var cd=i(Et);dn=o(cd,"In some cases, a dataset may have more than one configuration. For example, the MInDS-14 dataset has several configurations corresponding to different languages."),cd.forEach(a),Ys=f(e),U=n(e,"P",{});var Yt=i(U);pn=o(Yt,"To create different configurations, use the "),kt=n(Yt,"A",{href:!0});var ud=i(kt);fn=o(ud,"BuilderConfig"),ud.forEach(a),cn=o(Yt," class to create a subclass for your dataset. Provide the links to download the audio files in "),Ca=n(Yt,"CODE",{});var hd=i(Ca);un=o(hd,"data_url"),hd.forEach(a),hn=o(Yt,":"),Yt.forEach(a),Ks=f(e),g(Ze.$$.fragment,e),Ws=f(e),F=n(e,"P",{});var Kt=i(F);_n=o(Kt,"Now you can define your configurations at the top of "),bt=n(Kt,"A",{href:!0});var _d=i(bt);mn=o(_d,"GeneratorBasedBuilder"),_d.forEach(a),gn=o(Kt,". For memory intensive data formats like audio datasets, it is often a good idea to set a lower "),xa=n(Kt,"CODE",{});var md=i(xa);vn=o(md,"writer_batch_size"),md.forEach(a),wn=o(Kt,":"),Kt.forEach(a),Zs=f(e),g(Je.$$.fragment,e),Js=f(e),qt=n(e,"P",{});var gd=i(qt);yn=o(gd,"You\u2019ll notice the author of this particular loading script defined the configuration names earlier in the script, and created a function to build each configuration. It doesn\u2019t really matter how you create the configuration objects, but each configuration should have a name, description, and where to download the data from."),gd.forEach(a),Xs=f(e),g(Xe.$$.fragment,e),Qs=f(e),$e=n(e,"P",{});var Ro=i($e);$n=o(Ro,"Now if users want to load the "),Ta=n(Ro,"CODE",{});var vd=i(Ta);jn=o(vd,"ko-KR"),vd.forEach(a),En=o(Ro," configuration, they can use the configuration name:"),Ro.forEach(a),eo=f(e),g(Qe.$$.fragment,e),to=f(e),se=n(e,"H3",{class:!0});var Go=i(se);je=n(Go,"A",{id:!0,class:!0,href:!0});var wd=i(je);Ia=n(wd,"SPAN",{});var yd=i(Ia);g(et.$$.fragment,yd),yd.forEach(a),wd.forEach(a),kn=f(Go),Da=n(Go,"SPAN",{});var $d=i(Da);bn=o($d,"Add dataset metadata"),$d.forEach(a),Go.forEach(a),ao=f(e),H=n(e,"P",{});var Wt=i(H);qn=o(Wt,"Adding information about your dataset is useful for users to learn more about it. This information is stored in the "),At=n(Wt,"A",{href:!0});var jd=i(At);An=o(jd,"DatasetInfo"),jd.forEach(a),Cn=o(Wt," class which is returned by the "),La=n(Wt,"CODE",{});var Ed=i(La);xn=o(Ed,"info"),Ed.forEach(a),Tn=o(Wt," method. Users can access this information by:"),Wt.forEach(a),so=f(e),g(tt.$$.fragment,e),oo=f(e),Ct=n(e,"P",{});var kd=i(Ct);In=o(kd,"There is a lot of information you can specify about your dataset, but some important ones to include are:"),kd.forEach(a),lo=f(e),I=n(e,"OL",{});var K=i(I);xt=n(K,"LI",{});var Er=i(xt);Pa=n(Er,"CODE",{});var bd=i(Pa);Dn=o(bd,"description"),bd.forEach(a),Ln=o(Er," provides a concise description of the dataset."),Er.forEach(a),Pn=f(K),V=n(K,"LI",{});var ht=i(V);za=n(ht,"CODE",{});var qd=i(za);zn=o(qd,"features"),qd.forEach(a),Sn=o(ht," specify the dataset column types. Since you\u2019re creating an audio loading script, you\u2019ll need to include the "),Tt=n(ht,"A",{href:!0});var Ad=i(Tt);On=o(Ad,"Audio"),Ad.forEach(a),Nn=o(ht," feature and specify the "),Sa=n(ht,"CODE",{});var Cd=i(Sa);Rn=o(Cd,"sampling_rate"),Cd.forEach(a),Gn=o(ht," of the dataset."),ht.forEach(a),Bn=f(K),It=n(K,"LI",{});var kr=i(It);Oa=n(kr,"CODE",{});var xd=i(Oa);Mn=o(xd,"supervised_keys"),xd.forEach(a),Un=o(kr," specify the input feature and label."),kr.forEach(a),Fn=f(K),Dt=n(K,"LI",{});var br=i(Dt);Na=n(br,"CODE",{});var Td=i(Na);Hn=o(Td,"homepage"),Td.forEach(a),Vn=o(br," provides a link to the dataset homepage."),br.forEach(a),Yn=f(K),Lt=n(K,"LI",{});var qr=i(Lt);Ra=n(qr,"CODE",{});var Id=i(Ra);Kn=o(Id,"citation"),Id.forEach(a),Wn=o(qr," is a BibTeX citation of the dataset."),qr.forEach(a),K.forEach(a),no=f(e),g(Ee.$$.fragment,e),io=f(e),g(at.$$.fragment,e),ro=f(e),oe=n(e,"H3",{class:!0});var Bo=i(oe);ke=n(Bo,"A",{id:!0,class:!0,href:!0});var Dd=i(ke);Ga=n(Dd,"SPAN",{});var Ld=i(Ga);g(st.$$.fragment,Ld),Ld.forEach(a),Dd.forEach(a),Zn=f(Bo),Ba=n(Bo,"SPAN",{});var Pd=i(Ba);Jn=o(Pd,"Download and define the dataset splits"),Pd.forEach(a),Bo.forEach(a),po=f(e),Pt=n(e,"P",{});var zd=i(Pt);Xn=o(zd,"Now that you\u2019ve added some information about your dataset, the next step is to download the dataset and generate the splits."),zd.forEach(a),fo=f(e),be=n(e,"OL",{});var Mo=i(be);le=n(Mo,"LI",{});var Zt=i(le);ot=n(Zt,"P",{});var Uo=i(ot);Qn=o(Uo,"Use the "),zt=n(Uo,"A",{href:!0});var Sd=i(zt);ei=o(Sd,"DownloadManager.download_and_extract()"),Sd.forEach(a),ti=o(Uo," method to download and extract the URLs. This method accepts:"),Uo.forEach(a),ai=f(Zt),ne=n(Zt,"UL",{});var Jt=i(ne);Ma=n(Jt,"LI",{});var Od=i(Ma);si=o(Od,"a name to a file inside a Hub dataset repository (in other words, the data/ folder)"),Od.forEach(a),oi=f(Jt),Ua=n(Jt,"LI",{});var Nd=i(Ua);li=o(Nd,"a URL to a file hosted somewhere else"),Nd.forEach(a),ni=f(Jt),Fa=n(Jt,"LI",{});var Rd=i(Fa);ii=o(Rd,"a list or dictionary of file names or URLs"),Rd.forEach(a),Jt.forEach(a),ri=f(Zt),N=n(Zt,"P",{});var Pe=i(N);di=o(Pe,"For the "),Ha=n(Pe,"CODE",{});var Gd=i(Ha);pi=o(Gd,"audio"),Gd.forEach(a),fi=o(Pe," and "),Va=n(Pe,"CODE",{});var Bd=i(Va);ci=o(Bd,"text"),Bd.forEach(a),ui=o(Pe," data at these URLs, use the "),St=n(Pe,"A",{href:!0});var Md=i(St);hi=o(Md,"DownloadManager.extract()"),Md.forEach(a),_i=o(Pe," method to extract the file paths."),Pe.forEach(a),Zt.forEach(a),mi=f(Mo),lt=n(Mo,"LI",{});var Fo=i(lt);z=n(Fo,"P",{});var W=i(z);gi=o(W,"After you\u2019ve downloaded the dataset, use the "),Ot=n(W,"A",{href:!0});var Ud=i(Ot);vi=o(Ud,"SplitGenerator"),Ud.forEach(a),wi=o(W," to organize the audio files and text transcriptions in each split. Name each split with a standard name like: "),Ya=n(W,"CODE",{});var Fd=i(Ya);yi=o(Fd,"Split.TRAIN"),Fd.forEach(a),$i=o(W,", "),Ka=n(W,"CODE",{});var Hd=i(Ka);ji=o(Hd,"Split.TEST"),Hd.forEach(a),Ei=o(W,", and "),Wa=n(W,"CODE",{});var Vd=i(Wa);ki=o(Vd,"SPLIT.Validation"),Vd.forEach(a),bi=o(W,"."),W.forEach(a),qi=f(Fo),T=n(Fo,"P",{});var O=i(T);Ai=o(O,"In the "),Za=n(O,"CODE",{});var Yd=i(Za);Ci=o(Yd,"gen_kwargs"),Yd.forEach(a),xi=o(O," parameter, specify the file paths to the "),Ja=n(O,"CODE",{});var Kd=i(Ja);Ti=o(Kd,"audio"),Kd.forEach(a),Ii=o(O," and "),Xa=n(O,"CODE",{});var Wd=i(Xa);Di=o(Wd,"text"),Wd.forEach(a),Li=o(O," files to load. The "),Qa=n(O,"CODE",{});var Zd=i(Qa);Pi=o(Zd,"audio"),Zd.forEach(a),zi=o(O," and "),es=n(O,"CODE",{});var Jd=i(es);Si=o(Jd,"text"),Jd.forEach(a),Oi=o(O," file paths are actually passed onto the next step where you\u2019ll actually generate the dataset."),O.forEach(a),Fo.forEach(a),Mo.forEach(a),co=f(e),g(qe.$$.fragment,e),uo=f(e),g(nt.$$.fragment,e),ho=f(e),ie=n(e,"H3",{class:!0});var Ho=i(ie);Ae=n(Ho,"A",{id:!0,class:!0,href:!0});var Xd=i(Ae);ts=n(Xd,"SPAN",{});var Qd=i(ts);g(it.$$.fragment,Qd),Qd.forEach(a),Xd.forEach(a),Ni=f(Ho),as=n(Ho,"SPAN",{});var ep=i(as);Ri=o(ep,"Generate the dataset"),ep.forEach(a),Ho.forEach(a),_o=f(e),C=n(e,"P",{});var L=i(C);Gi=o(L,"The last method in the "),Nt=n(L,"A",{href:!0});var tp=i(Nt);Bi=o(tp,"GeneratorBasedBuilder"),tp.forEach(a),Mi=o(L," class actually generates the audio and transcriptions in the dataset. It yields a dataset according to the stucture specified in "),ss=n(L,"CODE",{});var ap=i(ss);Ui=o(ap,"features"),ap.forEach(a),Fi=o(L," from the "),os=n(L,"CODE",{});var sp=i(os);Hi=o(sp,"info"),sp.forEach(a),Vi=o(L," method. As you can see, "),ls=n(L,"CODE",{});var op=i(ls);Yi=o(op,"generate_examples"),op.forEach(a),Ki=o(L," accepts the "),ns=n(L,"CODE",{});var lp=i(ns);Wi=o(lp,"audio_path"),lp.forEach(a),Zi=o(L," and "),is=n(L,"CODE",{});var np=i(is);Ji=o(np,"text_paths"),np.forEach(a),Xi=o(L," from the previous method as arguments."),L.forEach(a),mo=f(e),g(Ce.$$.fragment,e),go=f(e),Rt=n(e,"P",{});var ip=i(Rt);Qi=o(ip,"Now you can write a function for opening and loading examples from the dataset:"),ip.forEach(a),vo=f(e),g(rt.$$.fragment,e),wo=f(e),re=n(e,"H3",{class:!0});var Vo=i(re);xe=n(Vo,"A",{id:!0,class:!0,href:!0});var rp=i(xe);rs=n(rp,"SPAN",{});var dp=i(rs);g(dt.$$.fragment,dp),dp.forEach(a),rp.forEach(a),er=f(Vo),ds=n(Vo,"SPAN",{});var pp=i(ds);tr=o(pp,"Generate the dataset metadata (optional)"),pp.forEach(a),Vo.forEach(a),yo=f(e),Te=n(e,"P",{});var Yo=i(Te);ar=o(Yo,"The dataset metadata you added earlier now needs to be generated and stored in a file called "),ps=n(Yo,"CODE",{});var fp=i(ps);sr=o(fp,"datasets_infos.json"),fp.forEach(a),or=o(Yo,". In addition to information about a datasets features and description, this file also contains data file checksums to ensure integrity."),Yo.forEach(a),$o=f(e),Ie=n(e,"P",{});var Ko=i(Ie);lr=o(Ko,"Run the following command to generate your dataset metadata in "),fs=n(Ko,"CODE",{});var cp=i(fs);nr=o(cp,"dataset_infos.json"),cp.forEach(a),ir=o(Ko," and make sure your new loading script works correctly:"),Ko.forEach(a),jo=f(e),g(pt.$$.fragment,e),Eo=f(e),De=n(e,"P",{});var Wo=i(De);rr=o(Wo,"If your loading script passed the test, you should now have a "),cs=n(Wo,"CODE",{});var up=i(cs);dr=o(up,"dataset_infos.json"),up.forEach(a),pr=o(Wo," file in your dataset folder."),Wo.forEach(a),ko=f(e),de=n(e,"H2",{class:!0});var Zo=i(de);Le=n(Zo,"A",{id:!0,class:!0,href:!0});var hp=i(Le);us=n(hp,"SPAN",{});var _p=i(us);g(ft.$$.fragment,_p),_p.forEach(a),hp.forEach(a),fr=f(Zo),hs=n(Zo,"SPAN",{});var mp=i(hs);cr=o(mp,"Upload the dataset to the Hub"),mp.forEach(a),Zo.forEach(a),bo=f(e),Y=n(e,"P",{});var Xt=i(Y);ur=o(Xt,"Once your script is ready, "),Gt=n(Xt,"A",{href:!0});var gp=i(Gt);hr=o(gp,"create a dataset card"),gp.forEach(a),_r=o(Xt," and "),Bt=n(Xt,"A",{href:!0});var vp=i(Bt);mr=o(vp,"upload it to the Hub"),vp.forEach(a),gr=o(Xt,"."),Xt.forEach(a),qo=f(e),Mt=n(e,"P",{});var wp=i(Mt);vr=o(wp,"Congratulations, you can now load your dataset from the Hub! \u{1F973}"),wp.forEach(a),Ao=f(e),g(ct.$$.fragment,e),this.h()},h(){c(u,"name","hf:doc:metadata"),c(u,"content",JSON.stringify(Ip)),c(j,"id","create-an-audio-dataset"),c(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j,"href","#create-an-audio-dataset"),c(h,"class","relative group"),c(ce,"id","audiofolder"),c(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ce,"href","#audiofolder"),c(Q,"class","relative group"),c(he,"id","loading-script"),c(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(he,"href","#loading-script"),c(ee,"class","relative group"),c(Fe,"class","underline decoration-green-400 decoration-2 font-semibold"),c(Fe,"href","./dataset_script"),c(He,"href","https://huggingface.co/datasets/PolyAI/minds14"),c(He,"rel","nofollow"),c(ve,"id","create-a-dataset-builder-class"),c(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ve,"href","#create-a-dataset-builder-class"),c(te,"class","relative group"),c(vt,"href","/docs/datasets/pr_4872/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),c(jt,"href","/docs/datasets/pr_4872/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),c(ye,"id","multiple-configurations"),c(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ye,"href","#multiple-configurations"),c(ae,"class","relative group"),c(kt,"href","/docs/datasets/pr_4872/en/package_reference/builder_classes#datasets.BuilderConfig"),c(bt,"href","/docs/datasets/pr_4872/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),c(je,"id","add-dataset-metadata"),c(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(je,"href","#add-dataset-metadata"),c(se,"class","relative group"),c(At,"href","/docs/datasets/pr_4872/en/package_reference/main_classes#datasets.DatasetInfo"),c(Tt,"href","/docs/datasets/pr_4872/en/package_reference/main_classes#datasets.Audio"),c(ke,"id","download-and-define-the-dataset-splits"),c(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ke,"href","#download-and-define-the-dataset-splits"),c(oe,"class","relative group"),c(zt,"href","/docs/datasets/pr_4872/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract"),c(St,"href","/docs/datasets/pr_4872/en/package_reference/builder_classes#datasets.DownloadManager.extract"),c(Ot,"href","/docs/datasets/pr_4872/en/package_reference/builder_classes#datasets.SplitGenerator"),c(Ae,"id","generate-the-dataset"),c(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ae,"href","#generate-the-dataset"),c(ie,"class","relative group"),c(Nt,"href","/docs/datasets/pr_4872/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),c(xe,"id","generate-the-dataset-metadata-optional"),c(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xe,"href","#generate-the-dataset-metadata-optional"),c(re,"class","relative group"),c(Le,"id","upload-the-dataset-to-the-hub"),c(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Le,"href","#upload-the-dataset-to-the-hub"),c(de,"class","relative group"),c(Gt,"href","./dataset_card"),c(Bt,"href","./share")},m(e,r){t(document.head,u),d(e,k,r),d(e,h,r),t(h,j),t(j,b),v(_,b,null),t(h,E),t(h,q),t(q,J),d(e,P,r),d(e,X,r),t(X,_t),d(e,ys,r),d(e,pe,r),t(pe,Qt),t(Qt,ze),t(ze,Jo),t(ze,ea),t(ea,Xo),t(ze,Qo),t(pe,el),t(pe,ta),t(ta,aa),t(aa,tl),d(e,$s,r),v(fe,e,r),d(e,js,r),d(e,Q,r),t(Q,ce),t(ce,sa),v(Se,sa,null),t(Q,al),t(Q,oa),t(oa,sl),d(e,Es,r),d(e,R,r),t(R,ol),t(R,la),t(la,ll),t(R,nl),t(R,na),t(na,il),t(R,rl),d(e,ks,r),v(Oe,e,r),d(e,bs,r),d(e,G,r),t(G,dl),t(G,ia),t(ia,pl),t(G,fl),t(G,ra),t(ra,cl),t(G,ul),d(e,qs,r),v(Ne,e,r),d(e,As,r),d(e,ue,r),t(ue,hl),t(ue,da),t(da,_l),t(ue,ml),d(e,Cs,r),v(Re,e,r),d(e,xs,r),d(e,B,r),t(B,gl),t(B,pa),t(pa,vl),t(B,wl),t(B,fa),t(fa,yl),t(B,$l),d(e,Ts,r),v(Ge,e,r),d(e,Is,r),d(e,ee,r),t(ee,he),t(he,ca),v(Be,ca,null),t(ee,jl),t(ee,ua),t(ua,El),d(e,Ds,r),d(e,mt,r),t(mt,kl),d(e,Ls,r),v(Me,e,r),d(e,Ps,r),d(e,gt,r),t(gt,bl),d(e,zs,r),v(Ue,e,r),d(e,Ss,r),d(e,_e,r),t(_e,ql),t(_e,Fe),t(Fe,Al),t(_e,Cl),d(e,Os,r),d(e,A,r),t(A,ha),t(ha,xl),t(A,Tl),t(A,_a),t(_a,Il),t(A,Dl),t(A,ma),t(ma,Ll),t(A,Pl),t(A,ga),t(ga,zl),t(A,Sl),t(A,va),t(va,Ol),t(A,Nl),t(A,wa),t(wa,Rl),t(A,Gl),t(A,ya),t(ya,Bl),d(e,Ns,r),d(e,me,r),t(me,Ml),t(me,He),t(He,Ul),t(me,Fl),d(e,Rs,r),v(ge,e,r),d(e,Gs,r),d(e,te,r),t(te,ve),t(ve,$a),v(Ve,$a,null),t(te,Hl),t(te,ja),t(ja,Vl),d(e,Bs,r),d(e,Ye,r),t(Ye,vt),t(vt,Yl),t(Ye,Kl),d(e,Ms,r),d(e,M,r),t(M,wt),t(wt,Ea),t(Ea,Wl),t(wt,Zl),t(M,Jl),t(M,yt),t(yt,ka),t(ka,Xl),t(yt,Ql),t(M,en),t(M,$t),t($t,ba),t(ba,tn),t($t,an),d(e,Us,r),d(e,we,r),t(we,sn),t(we,jt),t(jt,on),t(we,ln),d(e,Fs,r),v(Ke,e,r),d(e,Hs,r),d(e,ae,r),t(ae,ye),t(ye,qa),v(We,qa,null),t(ae,nn),t(ae,Aa),t(Aa,rn),d(e,Vs,r),d(e,Et,r),t(Et,dn),d(e,Ys,r),d(e,U,r),t(U,pn),t(U,kt),t(kt,fn),t(U,cn),t(U,Ca),t(Ca,un),t(U,hn),d(e,Ks,r),v(Ze,e,r),d(e,Ws,r),d(e,F,r),t(F,_n),t(F,bt),t(bt,mn),t(F,gn),t(F,xa),t(xa,vn),t(F,wn),d(e,Zs,r),v(Je,e,r),d(e,Js,r),d(e,qt,r),t(qt,yn),d(e,Xs,r),v(Xe,e,r),d(e,Qs,r),d(e,$e,r),t($e,$n),t($e,Ta),t(Ta,jn),t($e,En),d(e,eo,r),v(Qe,e,r),d(e,to,r),d(e,se,r),t(se,je),t(je,Ia),v(et,Ia,null),t(se,kn),t(se,Da),t(Da,bn),d(e,ao,r),d(e,H,r),t(H,qn),t(H,At),t(At,An),t(H,Cn),t(H,La),t(La,xn),t(H,Tn),d(e,so,r),v(tt,e,r),d(e,oo,r),d(e,Ct,r),t(Ct,In),d(e,lo,r),d(e,I,r),t(I,xt),t(xt,Pa),t(Pa,Dn),t(xt,Ln),t(I,Pn),t(I,V),t(V,za),t(za,zn),t(V,Sn),t(V,Tt),t(Tt,On),t(V,Nn),t(V,Sa),t(Sa,Rn),t(V,Gn),t(I,Bn),t(I,It),t(It,Oa),t(Oa,Mn),t(It,Un),t(I,Fn),t(I,Dt),t(Dt,Na),t(Na,Hn),t(Dt,Vn),t(I,Yn),t(I,Lt),t(Lt,Ra),t(Ra,Kn),t(Lt,Wn),d(e,no,r),v(Ee,e,r),d(e,io,r),v(at,e,r),d(e,ro,r),d(e,oe,r),t(oe,ke),t(ke,Ga),v(st,Ga,null),t(oe,Zn),t(oe,Ba),t(Ba,Jn),d(e,po,r),d(e,Pt,r),t(Pt,Xn),d(e,fo,r),d(e,be,r),t(be,le),t(le,ot),t(ot,Qn),t(ot,zt),t(zt,ei),t(ot,ti),t(le,ai),t(le,ne),t(ne,Ma),t(Ma,si),t(ne,oi),t(ne,Ua),t(Ua,li),t(ne,ni),t(ne,Fa),t(Fa,ii),t(le,ri),t(le,N),t(N,di),t(N,Ha),t(Ha,pi),t(N,fi),t(N,Va),t(Va,ci),t(N,ui),t(N,St),t(St,hi),t(N,_i),t(be,mi),t(be,lt),t(lt,z),t(z,gi),t(z,Ot),t(Ot,vi),t(z,wi),t(z,Ya),t(Ya,yi),t(z,$i),t(z,Ka),t(Ka,ji),t(z,Ei),t(z,Wa),t(Wa,ki),t(z,bi),t(lt,qi),t(lt,T),t(T,Ai),t(T,Za),t(Za,Ci),t(T,xi),t(T,Ja),t(Ja,Ti),t(T,Ii),t(T,Xa),t(Xa,Di),t(T,Li),t(T,Qa),t(Qa,Pi),t(T,zi),t(T,es),t(es,Si),t(T,Oi),d(e,co,r),v(qe,e,r),d(e,uo,r),v(nt,e,r),d(e,ho,r),d(e,ie,r),t(ie,Ae),t(Ae,ts),v(it,ts,null),t(ie,Ni),t(ie,as),t(as,Ri),d(e,_o,r),d(e,C,r),t(C,Gi),t(C,Nt),t(Nt,Bi),t(C,Mi),t(C,ss),t(ss,Ui),t(C,Fi),t(C,os),t(os,Hi),t(C,Vi),t(C,ls),t(ls,Yi),t(C,Ki),t(C,ns),t(ns,Wi),t(C,Zi),t(C,is),t(is,Ji),t(C,Xi),d(e,mo,r),v(Ce,e,r),d(e,go,r),d(e,Rt,r),t(Rt,Qi),d(e,vo,r),v(rt,e,r),d(e,wo,r),d(e,re,r),t(re,xe),t(xe,rs),v(dt,rs,null),t(re,er),t(re,ds),t(ds,tr),d(e,yo,r),d(e,Te,r),t(Te,ar),t(Te,ps),t(ps,sr),t(Te,or),d(e,$o,r),d(e,Ie,r),t(Ie,lr),t(Ie,fs),t(fs,nr),t(Ie,ir),d(e,jo,r),v(pt,e,r),d(e,Eo,r),d(e,De,r),t(De,rr),t(De,cs),t(cs,dr),t(De,pr),d(e,ko,r),d(e,de,r),t(de,Le),t(Le,us),v(ft,us,null),t(de,fr),t(de,hs),t(hs,cr),d(e,bo,r),d(e,Y,r),t(Y,ur),t(Y,Gt),t(Gt,hr),t(Y,_r),t(Y,Bt),t(Bt,mr),t(Y,gr),d(e,qo,r),d(e,Mt,r),t(Mt,vr),d(e,Ao,r),v(ct,e,r),Co=!0},p(e,[r]){const ut={};r&2&&(ut.$$scope={dirty:r,ctx:e}),fe.$set(ut);const _s={};r&2&&(_s.$$scope={dirty:r,ctx:e}),ge.$set(_s);const ms={};r&2&&(ms.$$scope={dirty:r,ctx:e}),Ee.$set(ms);const gs={};r&2&&(gs.$$scope={dirty:r,ctx:e}),qe.$set(gs);const vs={};r&2&&(vs.$$scope={dirty:r,ctx:e}),Ce.$set(vs)},i(e){Co||(w(_.$$.fragment,e),w(fe.$$.fragment,e),w(Se.$$.fragment,e),w(Oe.$$.fragment,e),w(Ne.$$.fragment,e),w(Re.$$.fragment,e),w(Ge.$$.fragment,e),w(Be.$$.fragment,e),w(Me.$$.fragment,e),w(Ue.$$.fragment,e),w(ge.$$.fragment,e),w(Ve.$$.fragment,e),w(Ke.$$.fragment,e),w(We.$$.fragment,e),w(Ze.$$.fragment,e),w(Je.$$.fragment,e),w(Xe.$$.fragment,e),w(Qe.$$.fragment,e),w(et.$$.fragment,e),w(tt.$$.fragment,e),w(Ee.$$.fragment,e),w(at.$$.fragment,e),w(st.$$.fragment,e),w(qe.$$.fragment,e),w(nt.$$.fragment,e),w(it.$$.fragment,e),w(Ce.$$.fragment,e),w(rt.$$.fragment,e),w(dt.$$.fragment,e),w(pt.$$.fragment,e),w(ft.$$.fragment,e),w(ct.$$.fragment,e),Co=!0)},o(e){y(_.$$.fragment,e),y(fe.$$.fragment,e),y(Se.$$.fragment,e),y(Oe.$$.fragment,e),y(Ne.$$.fragment,e),y(Re.$$.fragment,e),y(Ge.$$.fragment,e),y(Be.$$.fragment,e),y(Me.$$.fragment,e),y(Ue.$$.fragment,e),y(ge.$$.fragment,e),y(Ve.$$.fragment,e),y(Ke.$$.fragment,e),y(We.$$.fragment,e),y(Ze.$$.fragment,e),y(Je.$$.fragment,e),y(Xe.$$.fragment,e),y(Qe.$$.fragment,e),y(et.$$.fragment,e),y(tt.$$.fragment,e),y(Ee.$$.fragment,e),y(at.$$.fragment,e),y(st.$$.fragment,e),y(qe.$$.fragment,e),y(nt.$$.fragment,e),y(it.$$.fragment,e),y(Ce.$$.fragment,e),y(rt.$$.fragment,e),y(dt.$$.fragment,e),y(pt.$$.fragment,e),y(ft.$$.fragment,e),y(ct.$$.fragment,e),Co=!1},d(e){a(u),e&&a(k),e&&a(h),$(_),e&&a(P),e&&a(X),e&&a(ys),e&&a(pe),e&&a($s),$(fe,e),e&&a(js),e&&a(Q),$(Se),e&&a(Es),e&&a(R),e&&a(ks),$(Oe,e),e&&a(bs),e&&a(G),e&&a(qs),$(Ne,e),e&&a(As),e&&a(ue),e&&a(Cs),$(Re,e),e&&a(xs),e&&a(B),e&&a(Ts),$(Ge,e),e&&a(Is),e&&a(ee),$(Be),e&&a(Ds),e&&a(mt),e&&a(Ls),$(Me,e),e&&a(Ps),e&&a(gt),e&&a(zs),$(Ue,e),e&&a(Ss),e&&a(_e),e&&a(Os),e&&a(A),e&&a(Ns),e&&a(me),e&&a(Rs),$(ge,e),e&&a(Gs),e&&a(te),$(Ve),e&&a(Bs),e&&a(Ye),e&&a(Ms),e&&a(M),e&&a(Us),e&&a(we),e&&a(Fs),$(Ke,e),e&&a(Hs),e&&a(ae),$(We),e&&a(Vs),e&&a(Et),e&&a(Ys),e&&a(U),e&&a(Ks),$(Ze,e),e&&a(Ws),e&&a(F),e&&a(Zs),$(Je,e),e&&a(Js),e&&a(qt),e&&a(Xs),$(Xe,e),e&&a(Qs),e&&a($e),e&&a(eo),$(Qe,e),e&&a(to),e&&a(se),$(et),e&&a(ao),e&&a(H),e&&a(so),$(tt,e),e&&a(oo),e&&a(Ct),e&&a(lo),e&&a(I),e&&a(no),$(Ee,e),e&&a(io),$(at,e),e&&a(ro),e&&a(oe),$(st),e&&a(po),e&&a(Pt),e&&a(fo),e&&a(be),e&&a(co),$(qe,e),e&&a(uo),$(nt,e),e&&a(ho),e&&a(ie),$(it),e&&a(_o),e&&a(C),e&&a(mo),$(Ce,e),e&&a(go),e&&a(Rt),e&&a(vo),$(rt,e),e&&a(wo),e&&a(re),$(dt),e&&a(yo),e&&a(Te),e&&a($o),e&&a(Ie),e&&a(jo),$(pt,e),e&&a(Eo),e&&a(De),e&&a(ko),e&&a(de),$(ft),e&&a(bo),e&&a(Y),e&&a(qo),e&&a(Mt),e&&a(Ao),$(ct,e)}}}const Ip={local:"create-an-audio-dataset",sections:[{local:"audiofolder",title:"AudioFolder"},{local:"loading-script",sections:[{local:"create-a-dataset-builder-class",sections:[{local:"multiple-configurations",title:"Multiple configurations"}],title:"Create a dataset builder class"},{local:"add-dataset-metadata",title:"Add dataset metadata"},{local:"download-and-define-the-dataset-splits",title:"Download and define the dataset splits"},{local:"generate-the-dataset",title:"Generate the dataset"},{local:"generate-the-dataset-metadata-optional",title:"Generate the dataset metadata (optional)"}],title:"Loading script"},{local:"upload-the-dataset-to-the-hub",title:"Upload the dataset to the Hub"}],title:"Create an audio dataset"};function Dp(S){return kp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Op extends yp{constructor(u){super();$p(this,u,Dp,Tp,jp,{})}}export{Op as default,Ip as metadata};
