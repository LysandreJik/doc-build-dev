import{S as ti,i as ei,s as ai,e as s,k as d,w as _,t as n,M as si,c as o,d as e,m as u,a as l,x as g,h as i,b as f,G as a,g as p,y as w,q as v,o as q,B as y,v as oi}from"../chunks/vendor-hf-doc-builder.js";import{T as Ws}from"../chunks/Tip-hf-doc-builder.js";import{I as mt}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as I}from"../chunks/CodeBlock-hf-doc-builder.js";function li(D){let h,$,c,m,k;return{c(){h=s("p"),$=n(`The dataset script is optional if your dataset is in one of the following formats: CSV, JSON, JSON lines, text or Parquet.
With those formats, you should be able to load your dataset automatically with `),c=s("a"),m=n("load_dataset()"),k=n("."),this.h()},l(E){h=o(E,"P",{});var b=l(h);$=i(b,`The dataset script is optional if your dataset is in one of the following formats: CSV, JSON, JSON lines, text or Parquet.
With those formats, you should be able to load your dataset automatically with `),c=o(b,"A",{href:!0});var A=l(c);m=i(A,"load_dataset()"),A.forEach(e),k=i(b,"."),b.forEach(e),this.h()},h(){f(c,"href","/docs/datasets/pr_4874/en/package_reference/loading_methods#datasets.load_dataset")},m(E,b){p(E,h,b),a(h,$),a(h,c),a(c,m),a(h,k)},d(E){E&&e(h)}}}function ri(D){let h,$,c,m,k;return{c(){h=s("p"),$=n("To help you get started, try beginning with the dataset loading script "),c=s("a"),m=n("template"),k=n("!"),this.h()},l(E){h=o(E,"P",{});var b=l(h);$=i(b,"To help you get started, try beginning with the dataset loading script "),c=o(b,"A",{href:!0,rel:!0});var A=l(c);m=i(A,"template"),A.forEach(e),k=i(b,"!"),b.forEach(e),this.h()},h(){f(c,"href","https://github.com/huggingface/datasets/blob/main/templates/new_dataset_script.py"),f(c,"rel","nofollow")},m(E,b){p(E,h,b),a(h,$),a(h,c),a(c,m),a(h,k)},d(E){E&&e(h)}}}function ni(D){let h,$;return{c(){h=s("p"),$=n("Only use a default configuration when it makes sense. Don\u2019t set one because it may be more convenient for the user to not specify a configuration when they load your dataset. For example, multi-lingual datasets often have a separate configuration for each language. An appropriate default may be an aggregated configuration that loads all the languages of the dataset if the user doesn\u2019t request a particular one.")},l(c){h=o(c,"P",{});var m=l(h);$=i(m,"Only use a default configuration when it makes sense. Don\u2019t set one because it may be more convenient for the user to not specify a configuration when they load your dataset. For example, multi-lingual datasets often have a separate configuration for each language. An appropriate default may be an aggregated configuration that loads all the languages of the dataset if the user doesn\u2019t request a particular one."),m.forEach(e)},m(c,m){p(c,h,m),a(h,$)},d(c){c&&e(h)}}}function ii(D){let h,$;return{c(){h=s("p"),$=n("If the data files live in the same folder or repository of the dataset script, you can just pass the relative paths to the files instead of URLs.")},l(c){h=o(c,"P",{});var m=l(h);$=i(m,"If the data files live in the same folder or repository of the dataset script, you can just pass the relative paths to the files instead of URLs."),m.forEach(e)},m(c,m){p(c,h,m),a(h,$)},d(c){c&&e(h)}}}function pi(D){let h,$,c,m,k,E,b,A,Ks,Aa,Q,Da,Xt,Zs,xa,Jt,to,Oa,x,eo,$e,ao,so,Ee,oo,lo,Ca,_t,La,gt,Ta,Wt,ro,Na,j,be,no,io,je,po,uo,ke,fo,ho,Se,co,mo,Ie,_o,Pa,Y,go,wt,wo,vo,Ga,X,Ua,U,J,Ae,vt,qo,De,yo,Ra,W,$o,xe,Eo,bo,Ba,K,Oe,Kt,Ce,jo,ko,So,Le,Z,Te,Io,Ao,Zt,Do,xo,Va,qt,Fa,R,Ne,te,Pe,Oo,Co,Lo,Ge,ee,Ue,To,No,za,ae,Po,Ha,yt,Ma,B,tt,Re,$t,Go,Be,Uo,Qa,O,Ro,Et,Bo,Vo,se,Fo,zo,Ya,et,Ho,bt,Mo,Qo,Xa,oe,jt,Yo,le,Xo,Jo,Ja,kt,Wa,St,It,Wo,Ve,Ko,Zo,Ka,At,Za,Dt,xt,tl,Fe,el,al,ts,Ot,es,V,at,ze,Ct,sl,He,ol,as,C,ll,Me,rl,nl,Qe,il,pl,ss,Lt,os,st,ls,F,ot,Ye,Tt,dl,Xe,ul,rs,re,fl,ns,ne,Je,hl,is,Nt,ps,lt,ds,Pt,Gt,rt,ie,cl,ml,pe,_l,gl,wl,Ut,We,S,vl,Ke,ql,yl,Ze,$l,El,ta,bl,jl,ea,kl,Sl,Il,aa,de,sa,Al,Dl,us,nt,xl,oa,Ol,Cl,fs,Rt,hs,z,it,la,Bt,Ll,ra,Tl,cs,ue,Nl,ms,L,na,Pl,Gl,ia,Ul,Rl,pa,Bl,_s,fe,Vl,gs,pt,da,dt,ua,Fl,zl,fa,Hl,Ml,Ql,ha,Vt,Yl,ca,Xl,Jl,ws,Ft,vs,H,ut,ma,zt,Wl,_a,Kl,qs,T,Zl,ga,tr,er,wa,ar,sr,ys,ft,or,va,lr,rr,$s,Ht,Es,ht,nr,qa,ir,pr,bs,M,ct,ya,Mt,dr,$a,ur,js,N,fr,he,hr,cr,ce,mr,_r,ks,me,gr,Ss,Qt,Is;return E=new mt({}),Q=new Ws({props:{$$slots:{default:[li]},$$scope:{ctx:D}}}),_t=new I({props:{code:`my_dataset/
\u251C\u2500\u2500 README.md
\u2514\u2500\u2500 my_dataset.py`,highlighted:`my<span class="hljs-emphasis">_dataset/
\u251C\u2500\u2500 README.md
\u2514\u2500\u2500 my_</span>dataset.py`}}),gt=new I({props:{code:`from datasets import load_dataset
load_dataset("path/to/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>load_dataset(<span class="hljs-string">&quot;path/to/my_dataset&quot;</span>)`}}),X=new Ws({props:{$$slots:{default:[ri]},$$scope:{ctx:D}}}),vt=new mt({}),qt=new I({props:{code:`datasets.Features(
    {
        "id": datasets.Value("string"),
        "title": datasets.Value("string"),
        "context": datasets.Value("string"),
        "question": datasets.Value("string"),
        "answers": datasets.Sequence(
            {
                "text": datasets.Value("string"),
                "answer_start": datasets.Value("int32"),
            }
        ),
    }
)`,highlighted:`datasets.Features(
    {
        <span class="hljs-string">&quot;id&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;title&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;context&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;question&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;answers&quot;</span>: datasets.<span class="hljs-type">Sequence</span>(
            {
                <span class="hljs-string">&quot;text&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;answer_start&quot;</span>: datasets.Value(<span class="hljs-string">&quot;int32&quot;</span>),
            }
        ),
    }
)`}}),yt=new I({props:{code:`def _info(self):
    return datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                "id": datasets.Value("string"),
                "title": datasets.Value("string"),
                "context": datasets.Value("string"),
                "question": datasets.Value("string"),
                "answers": datasets.features.Sequence(
                    {"text": datasets.Value("string"), "answer_start": datasets.Value("int32"),}
                ),
            }
        ),
        # No default supervised_keys (as we have to pass both question
        # and context as input).
        supervised_keys=None,
        homepage="https://rajpurkar.github.io/SQuAD-explorer/",
        citation=_CITATION,
    )`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_info</span>(<span class="hljs-params">self</span>):
    <span class="hljs-keyword">return</span> datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                <span class="hljs-string">&quot;id&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;title&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;context&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;question&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;answers&quot;</span>: datasets.features.<span class="hljs-type">Sequence</span>(
                    {<span class="hljs-string">&quot;text&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;answer_start&quot;</span>: datasets.Value(<span class="hljs-string">&quot;int32&quot;</span>),}
                ),
            }
        ),
        <span class="hljs-comment"># No default supervised_keys (as we have to pass both question</span>
        <span class="hljs-comment"># and context as input).</span>
        supervised_keys=<span class="hljs-literal">None</span>,
        homepage=<span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/&quot;</span>,
        citation=_CITATION,
    )`}}),$t=new mt({}),kt=new I({props:{code:`class SuperGlueConfig(datasets.BuilderConfig):
    """BuilderConfig for SuperGLUE."""

    def __init__(self, features, data_url, citation, url, label_classes=("False", "True"), **kwargs):
        """BuilderConfig for SuperGLUE.

        Args:
        features: *list[string]*, list of the features that will appear in the
            feature dict. Should not include "label".
        data_url: *string*, url to download the zip file from.
        citation: *string*, citation for the data set.
        url: *string*, url for information about the data set.
        label_classes: *list[string]*, the list of classes for the label if the
            label is present as a string. Non-string labels will be cast to either
            'False' or 'True'.
        **kwargs: keyword arguments forwarded to super.
        """
        # Version history:
        # 1.0.2: Fixed non-nondeterminism in ReCoRD.
        # 1.0.1: Change from the pre-release trial version of SuperGLUE (v1.9) to
        #        the full release (v2.0).
        # 1.0.0: S3 (new shuffling, sharding and slicing mechanism).
        # 0.0.2: Initial version.
        super().__init__(version=datasets.Version("1.0.2"), **kwargs)
        self.features = features
        self.label_classes = label_classes
        self.data_url = data_url
        self.citation = citation
        self.url = url`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperGlueConfig</span>(datasets.BuilderConfig):
    <span class="hljs-string">&quot;&quot;&quot;BuilderConfig for SuperGLUE.&quot;&quot;&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, features, data_url, citation, url, label_classes=(<span class="hljs-params"><span class="hljs-string">&quot;False&quot;</span>, <span class="hljs-string">&quot;True&quot;</span></span>), **kwargs</span>):
        <span class="hljs-string">&quot;&quot;&quot;BuilderConfig for SuperGLUE.

        Args:
        features: *list[string]*, list of the features that will appear in the
            feature dict. Should not include &quot;label&quot;.
        data_url: *string*, url to download the zip file from.
        citation: *string*, citation for the data set.
        url: *string*, url for information about the data set.
        label_classes: *list[string]*, the list of classes for the label if the
            label is present as a string. Non-string labels will be cast to either
            &#x27;False&#x27; or &#x27;True&#x27;.
        **kwargs: keyword arguments forwarded to super.
        &quot;&quot;&quot;</span>
        <span class="hljs-comment"># Version history:</span>
        <span class="hljs-comment"># 1.0.2: Fixed non-nondeterminism in ReCoRD.</span>
        <span class="hljs-comment"># 1.0.1: Change from the pre-release trial version of SuperGLUE (v1.9) to</span>
        <span class="hljs-comment">#        the full release (v2.0).</span>
        <span class="hljs-comment"># 1.0.0: S3 (new shuffling, sharding and slicing mechanism).</span>
        <span class="hljs-comment"># 0.0.2: Initial version.</span>
        <span class="hljs-built_in">super</span>().__init__(version=datasets.Version(<span class="hljs-string">&quot;1.0.2&quot;</span>), **kwargs)
        self.features = features
        self.label_classes = label_classes
        self.data_url = data_url
        self.citation = citation
        self.url = url`}}),At=new I({props:{code:`class SuperGlue(datasets.GeneratorBasedBuilder):
    """The SuperGLUE benchmark."""

    BUILDER_CONFIGS = [
        SuperGlueConfig(
            name="boolq",
            description=_BOOLQ_DESCRIPTION,
            features=["question", "passage"],
            data_url="https://dl.fbaipublicfiles.com/glue/superglue/data/v2/BoolQ.zip",
            citation=_BOOLQ_CITATION,
            url="https://github.com/google-research-datasets/boolean-questions",
        ),
        ...
        ...
        SuperGlueConfig(
            name="axg",
            description=_AXG_DESCRIPTION,
            features=["premise", "hypothesis"],
            label_classes=["entailment", "not_entailment"],
            data_url="https://dl.fbaipublicfiles.com/glue/superglue/data/v2/AX-g.zip",
            citation=_AXG_CITATION,
            url="https://github.com/rudinger/winogender-schemas",
        ),`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperGlue</span>(datasets.GeneratorBasedBuilder):
    <span class="hljs-string">&quot;&quot;&quot;The SuperGLUE benchmark.&quot;&quot;&quot;</span>

    BUILDER_CONFIGS = [
        SuperGlueConfig(
            name=<span class="hljs-string">&quot;boolq&quot;</span>,
            description=_BOOLQ_DESCRIPTION,
            features=[<span class="hljs-string">&quot;question&quot;</span>, <span class="hljs-string">&quot;passage&quot;</span>],
            data_url=<span class="hljs-string">&quot;https://dl.fbaipublicfiles.com/glue/superglue/data/v2/BoolQ.zip&quot;</span>,
            citation=_BOOLQ_CITATION,
            url=<span class="hljs-string">&quot;https://github.com/google-research-datasets/boolean-questions&quot;</span>,
        ),
        ...
        ...
        SuperGlueConfig(
            name=<span class="hljs-string">&quot;axg&quot;</span>,
            description=_AXG_DESCRIPTION,
            features=[<span class="hljs-string">&quot;premise&quot;</span>, <span class="hljs-string">&quot;hypothesis&quot;</span>],
            label_classes=[<span class="hljs-string">&quot;entailment&quot;</span>, <span class="hljs-string">&quot;not_entailment&quot;</span>],
            data_url=<span class="hljs-string">&quot;https://dl.fbaipublicfiles.com/glue/superglue/data/v2/AX-g.zip&quot;</span>,
            citation=_AXG_CITATION,
            url=<span class="hljs-string">&quot;https://github.com/rudinger/winogender-schemas&quot;</span>,
        ),`}}),Ot=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('super_glue', 'boolq')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;super_glue&#x27;</span>, <span class="hljs-string">&#x27;boolq&#x27;</span>)`}}),Ct=new mt({}),Lt=new I({props:{code:`class NewDataset(datasets.GeneratorBasedBuilder):

VERSION = datasets.Version("1.1.0")

BUILDER_CONFIGS = [
    datasets.BuilderConfig(name="first_domain", version=VERSION, description="This part of my dataset covers a first domain"),
    datasets.BuilderConfig(name="second_domain", version=VERSION, description="This part of my dataset covers a second domain"),
]

DEFAULT_CONFIG_NAME = "first_domain"`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">NewDataset</span>(datasets.GeneratorBasedBuilder):

VERSION = datasets.Version(<span class="hljs-string">&quot;1.1.0&quot;</span>)

BUILDER_CONFIGS = [
    datasets.BuilderConfig(name=<span class="hljs-string">&quot;first_domain&quot;</span>, version=VERSION, description=<span class="hljs-string">&quot;This part of my dataset covers a first domain&quot;</span>),
    datasets.BuilderConfig(name=<span class="hljs-string">&quot;second_domain&quot;</span>, version=VERSION, description=<span class="hljs-string">&quot;This part of my dataset covers a second domain&quot;</span>),
]

DEFAULT_CONFIG_NAME = <span class="hljs-string">&quot;first_domain&quot;</span>`}}),st=new Ws({props:{warning:!0,$$slots:{default:[ni]},$$scope:{ctx:D}}}),Tt=new mt({}),Nt=new I({props:{code:`_URL = "https://rajpurkar.github.io/SQuAD-explorer/dataset/"
_URLS = {
    "train": _URL + "train-v1.1.json",
    "dev": _URL + "dev-v1.1.json",
}`,highlighted:`_URL = <span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/dataset/&quot;</span>
_URLS = {
    <span class="hljs-string">&quot;train&quot;</span>: _URL + <span class="hljs-string">&quot;train-v1.1.json&quot;</span>,
    <span class="hljs-string">&quot;dev&quot;</span>: _URL + <span class="hljs-string">&quot;dev-v1.1.json&quot;</span>,
}`}}),lt=new Ws({props:{$$slots:{default:[ii]},$$scope:{ctx:D}}}),Rt=new I({props:{code:`def _split_generators(self, dl_manager: datasets.DownloadManager) -> List[datasets.SplitGenerator]:
    urls_to_download = self._URLS
    downloaded_files = dl_manager.download_and_extract(urls_to_download)

    return [
        datasets.SplitGenerator(name=datasets.Split.TRAIN, gen_kwargs={"filepath": downloaded_files["train"]}),
        datasets.SplitGenerator(name=datasets.Split.VALIDATION, gen_kwargs={"filepath": downloaded_files["dev"]}),
    ]`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_generators</span>(<span class="hljs-params">self, dl_manager: datasets.DownloadManager</span>) -&gt; <span class="hljs-type">List</span>[datasets.SplitGenerator]:
    urls_to_download = self._URLS
    downloaded_files = dl_manager.download_and_extract(urls_to_download)

    <span class="hljs-keyword">return</span> [
        datasets.SplitGenerator(name=datasets.Split.TRAIN, gen_kwargs={<span class="hljs-string">&quot;filepath&quot;</span>: downloaded_files[<span class="hljs-string">&quot;train&quot;</span>]}),
        datasets.SplitGenerator(name=datasets.Split.VALIDATION, gen_kwargs={<span class="hljs-string">&quot;filepath&quot;</span>: downloaded_files[<span class="hljs-string">&quot;dev&quot;</span>]}),
    ]`}}),Bt=new mt({}),Ft=new I({props:{code:`def _generate_examples(self, filepath):
    """This function returns the examples in the raw (text) form."""
    logger.info("generating examples from = %s", filepath)
    with open(filepath) as f:
        squad = json.load(f)
        for article in squad["data"]:
            title = article.get("title", "").strip()
            for paragraph in article["paragraphs"]:
                context = paragraph["context"].strip()
                for qa in paragraph["qas"]:
                    question = qa["question"].strip()
                    id_ = qa["id"]

                    answer_starts = [answer["answer_start"] for answer in qa["answers"]]
                    answers = [answer["text"].strip() for answer in qa["answers"]]

                    # Features currently used are "context", "question", and "answers".
                    # Others are extracted here for the ease of future expansions.
                    yield id_, {
                        "title": title,
                        "context": context,
                        "question": question,
                        "id": id_,
                        "answers": {"answer_start": answer_starts, "text": answers,},
                    }`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_examples</span>(<span class="hljs-params">self, filepath</span>):
    <span class="hljs-string">&quot;&quot;&quot;This function returns the examples in the raw (text) form.&quot;&quot;&quot;</span>
    logger.info(<span class="hljs-string">&quot;generating examples from = %s&quot;</span>, filepath)
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath) <span class="hljs-keyword">as</span> f:
        squad = json.load(f)
        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> squad[<span class="hljs-string">&quot;data&quot;</span>]:
            title = article.get(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).strip()
            <span class="hljs-keyword">for</span> paragraph <span class="hljs-keyword">in</span> article[<span class="hljs-string">&quot;paragraphs&quot;</span>]:
                context = paragraph[<span class="hljs-string">&quot;context&quot;</span>].strip()
                <span class="hljs-keyword">for</span> qa <span class="hljs-keyword">in</span> paragraph[<span class="hljs-string">&quot;qas&quot;</span>]:
                    question = qa[<span class="hljs-string">&quot;question&quot;</span>].strip()
                    id_ = qa[<span class="hljs-string">&quot;id&quot;</span>]

                    answer_starts = [answer[<span class="hljs-string">&quot;answer_start&quot;</span>] <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> qa[<span class="hljs-string">&quot;answers&quot;</span>]]
                    answers = [answer[<span class="hljs-string">&quot;text&quot;</span>].strip() <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> qa[<span class="hljs-string">&quot;answers&quot;</span>]]

                    <span class="hljs-comment"># Features currently used are &quot;context&quot;, &quot;question&quot;, and &quot;answers&quot;.</span>
                    <span class="hljs-comment"># Others are extracted here for the ease of future expansions.</span>
                    <span class="hljs-keyword">yield</span> id_, {
                        <span class="hljs-string">&quot;title&quot;</span>: title,
                        <span class="hljs-string">&quot;context&quot;</span>: context,
                        <span class="hljs-string">&quot;question&quot;</span>: question,
                        <span class="hljs-string">&quot;id&quot;</span>: id_,
                        <span class="hljs-string">&quot;answers&quot;</span>: {<span class="hljs-string">&quot;answer_start&quot;</span>: answer_starts, <span class="hljs-string">&quot;text&quot;</span>: answers,},
                    }`}}),zt=new mt({}),Ht=new I({props:{code:"datasets-cli test path/to/<your-dataset-loading-script> --save_infos --all_configs",highlighted:'datasets-cli test path/<span class="hljs-keyword">to</span>/&lt;your-dataset-loading-<span class="hljs-keyword">script</span>&gt; <span class="hljs-comment">--save_infos --all_configs</span>'}}),Mt=new mt({}),Qt=new I({props:{code:`from datasets import load_dataset
load_dataset("<username>/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>load_dataset(<span class="hljs-string">&quot;&lt;username&gt;/my_dataset&quot;</span>)`}}),{c(){h=s("meta"),$=d(),c=s("h1"),m=s("a"),k=s("span"),_(E.$$.fragment),b=d(),A=s("span"),Ks=n("Create a dataset loading script"),Aa=d(),_(Q.$$.fragment),Da=d(),Xt=s("p"),Zs=n("Write a dataset script to load and share your own datasets. It is a Python file that defines the different configurations and splits of your dataset, as well as how to download and process the data."),xa=d(),Jt=s("p"),to=n("The script can download data files from any website, or from the same dataset repository."),Oa=d(),x=s("p"),eo=n("Any dataset script, for example "),$e=s("code"),ao=n("my_dataset.py"),so=n(", can be placed in a folder or a repository named "),Ee=s("code"),oo=n("my_dataset"),lo=n(" and be loaded with:"),Ca=d(),_(_t.$$.fragment),La=d(),_(gt.$$.fragment),Ta=d(),Wt=s("p"),ro=n("The following guide includes instructions for dataset scripts for how to:"),Na=d(),j=s("ul"),be=s("li"),no=n("Add dataset metadata."),io=d(),je=s("li"),po=n("Download data files."),uo=d(),ke=s("li"),fo=n("Generate samples."),ho=d(),Se=s("li"),co=n("Generate dataset metadata."),mo=d(),Ie=s("li"),_o=n("Upload a dataset to the Hub."),Pa=d(),Y=s("p"),go=n("Open the "),wt=s("a"),wo=n("SQuAD dataset loading script"),vo=n(" template to follow along on how to share a dataset."),Ga=d(),_(X.$$.fragment),Ua=d(),U=s("h2"),J=s("a"),Ae=s("span"),_(vt.$$.fragment),qo=d(),De=s("span"),yo=n("Add dataset attributes"),Ra=d(),W=s("p"),$o=n("The first step is to add some information, or attributes, about your dataset in "),xe=s("code"),Eo=n("DatasetBuilder._info()"),bo=n(". The most important attributes you should specify are:"),Ba=d(),K=s("ol"),Oe=s("li"),Kt=s("p"),Ce=s("code"),jo=n("DatasetInfo.description"),ko=n(" provides a concise description of your dataset. The description informs the user what\u2019s in the dataset, how it was collected, and how it can be used for a NLP task."),So=d(),Le=s("li"),Z=s("p"),Te=s("code"),Io=n("DatasetInfo.features"),Ao=n(" defines the name and type of each column in your dataset. This will also provide the structure for each example, so it is possible to create nested subfields in a column if you want. Take a look at "),Zt=s("a"),Do=n("Features"),xo=n(" for a full list of feature types you can use."),Va=d(),_(qt.$$.fragment),Fa=d(),R=s("ol"),Ne=s("li"),te=s("p"),Pe=s("code"),Oo=n("DatasetInfo.homepage"),Co=n(" contains the URL to the dataset homepage so users can find more details about the dataset."),Lo=d(),Ge=s("li"),ee=s("p"),Ue=s("code"),To=n("DatasetInfo.citation"),No=n(" contains a BibTeX citation for the dataset."),za=d(),ae=s("p"),Po=n("After you\u2019ve filled out all these fields in the template, it should look like the following example from the SQuAD loading script:"),Ha=d(),_(yt.$$.fragment),Ma=d(),B=s("h3"),tt=s("a"),Re=s("span"),_($t.$$.fragment),Go=d(),Be=s("span"),Uo=n("Multiple configurations"),Qa=d(),O=s("p"),Ro=n("In some cases, your dataset may have multiple configurations. For example, the "),Et=s("a"),Bo=n("SuperGLUE"),Vo=n(" dataset is a collection of 5 datasets designed to evaluate language understanding tasks. \u{1F917} Datasets provides "),se=s("a"),Fo=n("BuilderConfig"),zo=n(" which allows you to create different configurations for the user to select from."),Ya=d(),et=s("p"),Ho=n("Let\u2019s study the "),bt=s("a"),Mo=n("SuperGLUE loading script"),Qo=n(" to see how you can define several configurations."),Xa=d(),oe=s("ol"),jt=s("li"),Yo=n("Create a "),le=s("a"),Xo=n("BuilderConfig"),Jo=n(" subclass with attributes about your dataset. These attributes can be the features of your dataset, label classes, and a URL to the data files."),Ja=d(),_(kt.$$.fragment),Wa=d(),St=s("ol"),It=s("li"),Wo=n("Create instances of your config to specify the values of the attributes of each configuration. This gives you the flexibility to specify all the name and description of each configuration. These sub-class instances should be listed under "),Ve=s("code"),Ko=n("DatasetBuilder.BUILDER_CONFIGS"),Zo=n(":"),Ka=d(),_(At.$$.fragment),Za=d(),Dt=s("ol"),xt=s("li"),tl=n("Now, users can load a specific configuration of the dataset with the configuration "),Fe=s("code"),el=n("name"),al=n(":"),ts=d(),_(Ot.$$.fragment),es=d(),V=s("h3"),at=s("a"),ze=s("span"),_(Ct.$$.fragment),sl=d(),He=s("span"),ol=n("Default configurations"),as=d(),C=s("p"),ll=n("Users must specify a configuration name when they load a dataset with multiple configurations. Otherwise, \u{1F917} Datasets will raise a "),Me=s("code"),rl=n("ValueError"),nl=n(", and prompt the user to select a configuration name. You can avoid this by setting a default dataset configuration with the "),Qe=s("code"),il=n("DEFAULT_CONFIG_NAME"),pl=n(" attribute:"),ss=d(),_(Lt.$$.fragment),os=d(),_(st.$$.fragment),ls=d(),F=s("h2"),ot=s("a"),Ye=s("span"),_(Tt.$$.fragment),dl=d(),Xe=s("span"),ul=n("Download data files and organize splits"),rs=d(),re=s("p"),fl=n("After you\u2019ve defined the attributes of your dataset, the next step is to download the data files and organize them according to their splits."),ns=d(),ne=s("ol"),Je=s("li"),hl=n("Create a dictionary of URLs in the loading script that point to the original SQuAD data files:"),is=d(),_(Nt.$$.fragment),ps=d(),_(lt.$$.fragment),ds=d(),Pt=s("ol"),Gt=s("li"),rt=s("p"),ie=s("a"),cl=n("DownloadManager.download_and_extract()"),ml=n(" takes this dictionary and downloads the data files. Once the files are downloaded, use "),pe=s("a"),_l=n("SplitGenerator"),gl=n(" to organize each split in the dataset. This is a simple class that contains:"),wl=d(),Ut=s("ul"),We=s("li"),S=s("p"),vl=n("The "),Ke=s("code"),ql=n("name"),yl=n(" of each split. You should use the standard split names: "),Ze=s("code"),$l=n("Split.TRAIN"),El=n(", "),ta=s("code"),bl=n("Split.TEST"),jl=n(", and "),ea=s("code"),kl=n("Split.VALIDATION"),Sl=n("."),Il=d(),aa=s("li"),de=s("p"),sa=s("code"),Al=n("gen_kwargs"),Dl=n(" provides the file paths to the data files to load for each split."),us=d(),nt=s("p"),xl=n("Your "),oa=s("code"),Ol=n("DatasetBuilder._split_generator()"),Cl=n(" should look like this now:"),fs=d(),_(Rt.$$.fragment),hs=d(),z=s("h2"),it=s("a"),la=s("span"),_(Bt.$$.fragment),Ll=d(),ra=s("span"),Tl=n("Generate samples"),cs=d(),ue=s("p"),Nl=n("At this point, you have:"),ms=d(),L=s("ul"),na=s("li"),Pl=n("Added the dataset attributes."),Gl=d(),ia=s("li"),Ul=n("Provided instructions for how to download the data files."),Rl=d(),pa=s("li"),Bl=n("Organized the splits."),_s=d(),fe=s("p"),Vl=n("The next step is to actually generate the samples in each split."),gs=d(),pt=s("ol"),da=s("li"),dt=s("p"),ua=s("code"),Fl=n("DatasetBuilder._generate_examples"),zl=n(" takes the file path provided by "),fa=s("code"),Hl=n("gen_kwargs"),Ml=n(" to read and parse the data files. You need to write a function that loads the data files and extracts the columns."),Ql=d(),ha=s("li"),Vt=s("p"),Yl=n("Your function should yield a tuple of an "),ca=s("code"),Xl=n("id_"),Jl=n(", and an example from the dataset."),ws=d(),_(Ft.$$.fragment),vs=d(),H=s("h2"),ut=s("a"),ma=s("span"),_(zt.$$.fragment),Wl=d(),_a=s("span"),Kl=n("Generate dataset metadata"),qs=d(),T=s("p"),Zl=n("Adding dataset metadata is a great way to include information about your dataset. The metadata is stored in a "),ga=s("code"),tr=n("dataset_infos.json"),er=n(" file. It includes information like data file checksums, the number of examples required to confirm the dataset was correctly generated, and information about the dataset like its "),wa=s("code"),ar=n("features"),sr=n("."),ys=d(),ft=s("p"),or=n("Run the following command to generate your dataset metadata in "),va=s("code"),lr=n("dataset_infos.json"),rr=n(" and make sure your new dataset loading script works correctly:"),$s=d(),_(Ht.$$.fragment),Es=d(),ht=s("p"),nr=n("If your dataset loading script passed the test, you should now have a "),qa=s("code"),ir=n("dataset_infos.json"),pr=n(" file in your dataset folder."),bs=d(),M=s("h2"),ct=s("a"),ya=s("span"),_(Mt.$$.fragment),dr=d(),$a=s("span"),ur=n("Upload to the Hub"),js=d(),N=s("p"),fr=n("Once your script is ready, "),he=s("a"),hr=n("create a dataset card"),cr=n(" and "),ce=s("a"),mr=n("upload it to the Hub"),_r=n("."),ks=d(),me=s("p"),gr=n("Congratulations, you can now load your dataset from the Hub! \u{1F973}"),Ss=d(),_(Qt.$$.fragment),this.h()},l(t){const r=si('[data-svelte="svelte-1phssyn"]',document.head);h=o(r,"META",{name:!0,content:!0}),r.forEach(e),$=u(t),c=o(t,"H1",{class:!0});var Yt=l(c);m=o(Yt,"A",{id:!0,class:!0,href:!0});var Ea=l(m);k=o(Ea,"SPAN",{});var ba=l(k);g(E.$$.fragment,ba),ba.forEach(e),Ea.forEach(e),b=u(Yt),A=o(Yt,"SPAN",{});var ja=l(A);Ks=i(ja,"Create a dataset loading script"),ja.forEach(e),Yt.forEach(e),Aa=u(t),g(Q.$$.fragment,t),Da=u(t),Xt=o(t,"P",{});var $r=l(Xt);Zs=i($r,"Write a dataset script to load and share your own datasets. It is a Python file that defines the different configurations and splits of your dataset, as well as how to download and process the data."),$r.forEach(e),xa=u(t),Jt=o(t,"P",{});var Er=l(Jt);to=i(Er,"The script can download data files from any website, or from the same dataset repository."),Er.forEach(e),Oa=u(t),x=o(t,"P",{});var _e=l(x);eo=i(_e,"Any dataset script, for example "),$e=o(_e,"CODE",{});var br=l($e);ao=i(br,"my_dataset.py"),br.forEach(e),so=i(_e,", can be placed in a folder or a repository named "),Ee=o(_e,"CODE",{});var jr=l(Ee);oo=i(jr,"my_dataset"),jr.forEach(e),lo=i(_e," and be loaded with:"),_e.forEach(e),Ca=u(t),g(_t.$$.fragment,t),La=u(t),g(gt.$$.fragment,t),Ta=u(t),Wt=o(t,"P",{});var kr=l(Wt);ro=i(kr,"The following guide includes instructions for dataset scripts for how to:"),kr.forEach(e),Na=u(t),j=o(t,"UL",{});var P=l(j);be=o(P,"LI",{});var Sr=l(be);no=i(Sr,"Add dataset metadata."),Sr.forEach(e),io=u(P),je=o(P,"LI",{});var Ir=l(je);po=i(Ir,"Download data files."),Ir.forEach(e),uo=u(P),ke=o(P,"LI",{});var Ar=l(ke);fo=i(Ar,"Generate samples."),Ar.forEach(e),ho=u(P),Se=o(P,"LI",{});var Dr=l(Se);co=i(Dr,"Generate dataset metadata."),Dr.forEach(e),mo=u(P),Ie=o(P,"LI",{});var xr=l(Ie);_o=i(xr,"Upload a dataset to the Hub."),xr.forEach(e),P.forEach(e),Pa=u(t),Y=o(t,"P",{});var As=l(Y);go=i(As,"Open the "),wt=o(As,"A",{href:!0,rel:!0});var Or=l(wt);wo=i(Or,"SQuAD dataset loading script"),Or.forEach(e),vo=i(As," template to follow along on how to share a dataset."),As.forEach(e),Ga=u(t),g(X.$$.fragment,t),Ua=u(t),U=o(t,"H2",{class:!0});var Ds=l(U);J=o(Ds,"A",{id:!0,class:!0,href:!0});var Cr=l(J);Ae=o(Cr,"SPAN",{});var Lr=l(Ae);g(vt.$$.fragment,Lr),Lr.forEach(e),Cr.forEach(e),qo=u(Ds),De=o(Ds,"SPAN",{});var Tr=l(De);yo=i(Tr,"Add dataset attributes"),Tr.forEach(e),Ds.forEach(e),Ra=u(t),W=o(t,"P",{});var xs=l(W);$o=i(xs,"The first step is to add some information, or attributes, about your dataset in "),xe=o(xs,"CODE",{});var Nr=l(xe);Eo=i(Nr,"DatasetBuilder._info()"),Nr.forEach(e),bo=i(xs,". The most important attributes you should specify are:"),xs.forEach(e),Ba=u(t),K=o(t,"OL",{});var Os=l(K);Oe=o(Os,"LI",{});var Pr=l(Oe);Kt=o(Pr,"P",{});var wr=l(Kt);Ce=o(wr,"CODE",{});var Gr=l(Ce);jo=i(Gr,"DatasetInfo.description"),Gr.forEach(e),ko=i(wr," provides a concise description of your dataset. The description informs the user what\u2019s in the dataset, how it was collected, and how it can be used for a NLP task."),wr.forEach(e),Pr.forEach(e),So=u(Os),Le=o(Os,"LI",{});var Ur=l(Le);Z=o(Ur,"P",{});var ka=l(Z);Te=o(ka,"CODE",{});var Rr=l(Te);Io=i(Rr,"DatasetInfo.features"),Rr.forEach(e),Ao=i(ka," defines the name and type of each column in your dataset. This will also provide the structure for each example, so it is possible to create nested subfields in a column if you want. Take a look at "),Zt=o(ka,"A",{href:!0});var Br=l(Zt);Do=i(Br,"Features"),Br.forEach(e),xo=i(ka," for a full list of feature types you can use."),ka.forEach(e),Ur.forEach(e),Os.forEach(e),Va=u(t),g(qt.$$.fragment,t),Fa=u(t),R=o(t,"OL",{start:!0});var Cs=l(R);Ne=o(Cs,"LI",{});var Vr=l(Ne);te=o(Vr,"P",{});var vr=l(te);Pe=o(vr,"CODE",{});var Fr=l(Pe);Oo=i(Fr,"DatasetInfo.homepage"),Fr.forEach(e),Co=i(vr," contains the URL to the dataset homepage so users can find more details about the dataset."),vr.forEach(e),Vr.forEach(e),Lo=u(Cs),Ge=o(Cs,"LI",{});var zr=l(Ge);ee=o(zr,"P",{});var qr=l(ee);Ue=o(qr,"CODE",{});var Hr=l(Ue);To=i(Hr,"DatasetInfo.citation"),Hr.forEach(e),No=i(qr," contains a BibTeX citation for the dataset."),qr.forEach(e),zr.forEach(e),Cs.forEach(e),za=u(t),ae=o(t,"P",{});var Mr=l(ae);Po=i(Mr,"After you\u2019ve filled out all these fields in the template, it should look like the following example from the SQuAD loading script:"),Mr.forEach(e),Ha=u(t),g(yt.$$.fragment,t),Ma=u(t),B=o(t,"H3",{class:!0});var Ls=l(B);tt=o(Ls,"A",{id:!0,class:!0,href:!0});var Qr=l(tt);Re=o(Qr,"SPAN",{});var Yr=l(Re);g($t.$$.fragment,Yr),Yr.forEach(e),Qr.forEach(e),Go=u(Ls),Be=o(Ls,"SPAN",{});var Xr=l(Be);Uo=i(Xr,"Multiple configurations"),Xr.forEach(e),Ls.forEach(e),Qa=u(t),O=o(t,"P",{});var ge=l(O);Ro=i(ge,"In some cases, your dataset may have multiple configurations. For example, the "),Et=o(ge,"A",{href:!0,rel:!0});var Jr=l(Et);Bo=i(Jr,"SuperGLUE"),Jr.forEach(e),Vo=i(ge," dataset is a collection of 5 datasets designed to evaluate language understanding tasks. \u{1F917} Datasets provides "),se=o(ge,"A",{href:!0});var Wr=l(se);Fo=i(Wr,"BuilderConfig"),Wr.forEach(e),zo=i(ge," which allows you to create different configurations for the user to select from."),ge.forEach(e),Ya=u(t),et=o(t,"P",{});var Ts=l(et);Ho=i(Ts,"Let\u2019s study the "),bt=o(Ts,"A",{href:!0,rel:!0});var Kr=l(bt);Mo=i(Kr,"SuperGLUE loading script"),Kr.forEach(e),Qo=i(Ts," to see how you can define several configurations."),Ts.forEach(e),Xa=u(t),oe=o(t,"OL",{});var Zr=l(oe);jt=o(Zr,"LI",{});var Ns=l(jt);Yo=i(Ns,"Create a "),le=o(Ns,"A",{href:!0});var tn=l(le);Xo=i(tn,"BuilderConfig"),tn.forEach(e),Jo=i(Ns," subclass with attributes about your dataset. These attributes can be the features of your dataset, label classes, and a URL to the data files."),Ns.forEach(e),Zr.forEach(e),Ja=u(t),g(kt.$$.fragment,t),Wa=u(t),St=o(t,"OL",{start:!0});var en=l(St);It=o(en,"LI",{});var Ps=l(It);Wo=i(Ps,"Create instances of your config to specify the values of the attributes of each configuration. This gives you the flexibility to specify all the name and description of each configuration. These sub-class instances should be listed under "),Ve=o(Ps,"CODE",{});var an=l(Ve);Ko=i(an,"DatasetBuilder.BUILDER_CONFIGS"),an.forEach(e),Zo=i(Ps,":"),Ps.forEach(e),en.forEach(e),Ka=u(t),g(At.$$.fragment,t),Za=u(t),Dt=o(t,"OL",{start:!0});var sn=l(Dt);xt=o(sn,"LI",{});var Gs=l(xt);tl=i(Gs,"Now, users can load a specific configuration of the dataset with the configuration "),Fe=o(Gs,"CODE",{});var on=l(Fe);el=i(on,"name"),on.forEach(e),al=i(Gs,":"),Gs.forEach(e),sn.forEach(e),ts=u(t),g(Ot.$$.fragment,t),es=u(t),V=o(t,"H3",{class:!0});var Us=l(V);at=o(Us,"A",{id:!0,class:!0,href:!0});var ln=l(at);ze=o(ln,"SPAN",{});var rn=l(ze);g(Ct.$$.fragment,rn),rn.forEach(e),ln.forEach(e),sl=u(Us),He=o(Us,"SPAN",{});var nn=l(He);ol=i(nn,"Default configurations"),nn.forEach(e),Us.forEach(e),as=u(t),C=o(t,"P",{});var we=l(C);ll=i(we,"Users must specify a configuration name when they load a dataset with multiple configurations. Otherwise, \u{1F917} Datasets will raise a "),Me=o(we,"CODE",{});var pn=l(Me);rl=i(pn,"ValueError"),pn.forEach(e),nl=i(we,", and prompt the user to select a configuration name. You can avoid this by setting a default dataset configuration with the "),Qe=o(we,"CODE",{});var dn=l(Qe);il=i(dn,"DEFAULT_CONFIG_NAME"),dn.forEach(e),pl=i(we," attribute:"),we.forEach(e),ss=u(t),g(Lt.$$.fragment,t),os=u(t),g(st.$$.fragment,t),ls=u(t),F=o(t,"H2",{class:!0});var Rs=l(F);ot=o(Rs,"A",{id:!0,class:!0,href:!0});var un=l(ot);Ye=o(un,"SPAN",{});var fn=l(Ye);g(Tt.$$.fragment,fn),fn.forEach(e),un.forEach(e),dl=u(Rs),Xe=o(Rs,"SPAN",{});var hn=l(Xe);ul=i(hn,"Download data files and organize splits"),hn.forEach(e),Rs.forEach(e),rs=u(t),re=o(t,"P",{});var cn=l(re);fl=i(cn,"After you\u2019ve defined the attributes of your dataset, the next step is to download the data files and organize them according to their splits."),cn.forEach(e),ns=u(t),ne=o(t,"OL",{});var mn=l(ne);Je=o(mn,"LI",{});var _n=l(Je);hl=i(_n,"Create a dictionary of URLs in the loading script that point to the original SQuAD data files:"),_n.forEach(e),mn.forEach(e),is=u(t),g(Nt.$$.fragment,t),ps=u(t),g(lt.$$.fragment,t),ds=u(t),Pt=o(t,"OL",{start:!0});var gn=l(Pt);Gt=o(gn,"LI",{});var Bs=l(Gt);rt=o(Bs,"P",{});var Sa=l(rt);ie=o(Sa,"A",{href:!0});var wn=l(ie);cl=i(wn,"DownloadManager.download_and_extract()"),wn.forEach(e),ml=i(Sa," takes this dictionary and downloads the data files. Once the files are downloaded, use "),pe=o(Sa,"A",{href:!0});var vn=l(pe);_l=i(vn,"SplitGenerator"),vn.forEach(e),gl=i(Sa," to organize each split in the dataset. This is a simple class that contains:"),Sa.forEach(e),wl=u(Bs),Ut=o(Bs,"UL",{});var Vs=l(Ut);We=o(Vs,"LI",{});var qn=l(We);S=o(qn,"P",{});var G=l(S);vl=i(G,"The "),Ke=o(G,"CODE",{});var yn=l(Ke);ql=i(yn,"name"),yn.forEach(e),yl=i(G," of each split. You should use the standard split names: "),Ze=o(G,"CODE",{});var $n=l(Ze);$l=i($n,"Split.TRAIN"),$n.forEach(e),El=i(G,", "),ta=o(G,"CODE",{});var En=l(ta);bl=i(En,"Split.TEST"),En.forEach(e),jl=i(G,", and "),ea=o(G,"CODE",{});var bn=l(ea);kl=i(bn,"Split.VALIDATION"),bn.forEach(e),Sl=i(G,"."),G.forEach(e),qn.forEach(e),Il=u(Vs),aa=o(Vs,"LI",{});var jn=l(aa);de=o(jn,"P",{});var yr=l(de);sa=o(yr,"CODE",{});var kn=l(sa);Al=i(kn,"gen_kwargs"),kn.forEach(e),Dl=i(yr," provides the file paths to the data files to load for each split."),yr.forEach(e),jn.forEach(e),Vs.forEach(e),Bs.forEach(e),gn.forEach(e),us=u(t),nt=o(t,"P",{});var Fs=l(nt);xl=i(Fs,"Your "),oa=o(Fs,"CODE",{});var Sn=l(oa);Ol=i(Sn,"DatasetBuilder._split_generator()"),Sn.forEach(e),Cl=i(Fs," should look like this now:"),Fs.forEach(e),fs=u(t),g(Rt.$$.fragment,t),hs=u(t),z=o(t,"H2",{class:!0});var zs=l(z);it=o(zs,"A",{id:!0,class:!0,href:!0});var In=l(it);la=o(In,"SPAN",{});var An=l(la);g(Bt.$$.fragment,An),An.forEach(e),In.forEach(e),Ll=u(zs),ra=o(zs,"SPAN",{});var Dn=l(ra);Tl=i(Dn,"Generate samples"),Dn.forEach(e),zs.forEach(e),cs=u(t),ue=o(t,"P",{});var xn=l(ue);Nl=i(xn,"At this point, you have:"),xn.forEach(e),ms=u(t),L=o(t,"UL",{});var ve=l(L);na=o(ve,"LI",{});var On=l(na);Pl=i(On,"Added the dataset attributes."),On.forEach(e),Gl=u(ve),ia=o(ve,"LI",{});var Cn=l(ia);Ul=i(Cn,"Provided instructions for how to download the data files."),Cn.forEach(e),Rl=u(ve),pa=o(ve,"LI",{});var Ln=l(pa);Bl=i(Ln,"Organized the splits."),Ln.forEach(e),ve.forEach(e),_s=u(t),fe=o(t,"P",{});var Tn=l(fe);Vl=i(Tn,"The next step is to actually generate the samples in each split."),Tn.forEach(e),gs=u(t),pt=o(t,"OL",{});var Hs=l(pt);da=o(Hs,"LI",{});var Nn=l(da);dt=o(Nn,"P",{});var Ia=l(dt);ua=o(Ia,"CODE",{});var Pn=l(ua);Fl=i(Pn,"DatasetBuilder._generate_examples"),Pn.forEach(e),zl=i(Ia," takes the file path provided by "),fa=o(Ia,"CODE",{});var Gn=l(fa);Hl=i(Gn,"gen_kwargs"),Gn.forEach(e),Ml=i(Ia," to read and parse the data files. You need to write a function that loads the data files and extracts the columns."),Ia.forEach(e),Nn.forEach(e),Ql=u(Hs),ha=o(Hs,"LI",{});var Un=l(ha);Vt=o(Un,"P",{});var Ms=l(Vt);Yl=i(Ms,"Your function should yield a tuple of an "),ca=o(Ms,"CODE",{});var Rn=l(ca);Xl=i(Rn,"id_"),Rn.forEach(e),Jl=i(Ms,", and an example from the dataset."),Ms.forEach(e),Un.forEach(e),Hs.forEach(e),ws=u(t),g(Ft.$$.fragment,t),vs=u(t),H=o(t,"H2",{class:!0});var Qs=l(H);ut=o(Qs,"A",{id:!0,class:!0,href:!0});var Bn=l(ut);ma=o(Bn,"SPAN",{});var Vn=l(ma);g(zt.$$.fragment,Vn),Vn.forEach(e),Bn.forEach(e),Wl=u(Qs),_a=o(Qs,"SPAN",{});var Fn=l(_a);Kl=i(Fn,"Generate dataset metadata"),Fn.forEach(e),Qs.forEach(e),qs=u(t),T=o(t,"P",{});var qe=l(T);Zl=i(qe,"Adding dataset metadata is a great way to include information about your dataset. The metadata is stored in a "),ga=o(qe,"CODE",{});var zn=l(ga);tr=i(zn,"dataset_infos.json"),zn.forEach(e),er=i(qe," file. It includes information like data file checksums, the number of examples required to confirm the dataset was correctly generated, and information about the dataset like its "),wa=o(qe,"CODE",{});var Hn=l(wa);ar=i(Hn,"features"),Hn.forEach(e),sr=i(qe,"."),qe.forEach(e),ys=u(t),ft=o(t,"P",{});var Ys=l(ft);or=i(Ys,"Run the following command to generate your dataset metadata in "),va=o(Ys,"CODE",{});var Mn=l(va);lr=i(Mn,"dataset_infos.json"),Mn.forEach(e),rr=i(Ys," and make sure your new dataset loading script works correctly:"),Ys.forEach(e),$s=u(t),g(Ht.$$.fragment,t),Es=u(t),ht=o(t,"P",{});var Xs=l(ht);nr=i(Xs,"If your dataset loading script passed the test, you should now have a "),qa=o(Xs,"CODE",{});var Qn=l(qa);ir=i(Qn,"dataset_infos.json"),Qn.forEach(e),pr=i(Xs," file in your dataset folder."),Xs.forEach(e),bs=u(t),M=o(t,"H2",{class:!0});var Js=l(M);ct=o(Js,"A",{id:!0,class:!0,href:!0});var Yn=l(ct);ya=o(Yn,"SPAN",{});var Xn=l(ya);g(Mt.$$.fragment,Xn),Xn.forEach(e),Yn.forEach(e),dr=u(Js),$a=o(Js,"SPAN",{});var Jn=l($a);ur=i(Jn,"Upload to the Hub"),Jn.forEach(e),Js.forEach(e),js=u(t),N=o(t,"P",{});var ye=l(N);fr=i(ye,"Once your script is ready, "),he=o(ye,"A",{href:!0});var Wn=l(he);hr=i(Wn,"create a dataset card"),Wn.forEach(e),cr=i(ye," and "),ce=o(ye,"A",{href:!0});var Kn=l(ce);mr=i(Kn,"upload it to the Hub"),Kn.forEach(e),_r=i(ye,"."),ye.forEach(e),ks=u(t),me=o(t,"P",{});var Zn=l(me);gr=i(Zn,"Congratulations, you can now load your dataset from the Hub! \u{1F973}"),Zn.forEach(e),Ss=u(t),g(Qt.$$.fragment,t),this.h()},h(){f(h,"name","hf:doc:metadata"),f(h,"content",JSON.stringify(di)),f(m,"id","create-a-dataset-loading-script"),f(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(m,"href","#create-a-dataset-loading-script"),f(c,"class","relative group"),f(wt,"href","https://huggingface.co/datasets/squad/blob/main/squad.py"),f(wt,"rel","nofollow"),f(J,"id","add-dataset-attributes"),f(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(J,"href","#add-dataset-attributes"),f(U,"class","relative group"),f(Zt,"href","/docs/datasets/pr_4874/en/package_reference/main_classes#datasets.Features"),f(R,"start","3"),f(tt,"id","multiple-configurations"),f(tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(tt,"href","#multiple-configurations"),f(B,"class","relative group"),f(Et,"href","https://huggingface.co/datasets/super_glue"),f(Et,"rel","nofollow"),f(se,"href","/docs/datasets/pr_4874/en/package_reference/builder_classes#datasets.BuilderConfig"),f(bt,"href","https://github.com/huggingface/datasets/blob/main/datasets/super_glue/super_glue.py"),f(bt,"rel","nofollow"),f(le,"href","/docs/datasets/pr_4874/en/package_reference/builder_classes#datasets.BuilderConfig"),f(St,"start","2"),f(Dt,"start","3"),f(at,"id","default-configurations"),f(at,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(at,"href","#default-configurations"),f(V,"class","relative group"),f(ot,"id","download-data-files-and-organize-splits"),f(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ot,"href","#download-data-files-and-organize-splits"),f(F,"class","relative group"),f(ie,"href","/docs/datasets/pr_4874/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract"),f(pe,"href","/docs/datasets/pr_4874/en/package_reference/builder_classes#datasets.SplitGenerator"),f(Pt,"start","2"),f(it,"id","generate-samples"),f(it,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(it,"href","#generate-samples"),f(z,"class","relative group"),f(ut,"id","generate-dataset-metadata"),f(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ut,"href","#generate-dataset-metadata"),f(H,"class","relative group"),f(ct,"id","upload-to-the-hub"),f(ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ct,"href","#upload-to-the-hub"),f(M,"class","relative group"),f(he,"href","dataset_card"),f(ce,"href","share")},m(t,r){a(document.head,h),p(t,$,r),p(t,c,r),a(c,m),a(m,k),w(E,k,null),a(c,b),a(c,A),a(A,Ks),p(t,Aa,r),w(Q,t,r),p(t,Da,r),p(t,Xt,r),a(Xt,Zs),p(t,xa,r),p(t,Jt,r),a(Jt,to),p(t,Oa,r),p(t,x,r),a(x,eo),a(x,$e),a($e,ao),a(x,so),a(x,Ee),a(Ee,oo),a(x,lo),p(t,Ca,r),w(_t,t,r),p(t,La,r),w(gt,t,r),p(t,Ta,r),p(t,Wt,r),a(Wt,ro),p(t,Na,r),p(t,j,r),a(j,be),a(be,no),a(j,io),a(j,je),a(je,po),a(j,uo),a(j,ke),a(ke,fo),a(j,ho),a(j,Se),a(Se,co),a(j,mo),a(j,Ie),a(Ie,_o),p(t,Pa,r),p(t,Y,r),a(Y,go),a(Y,wt),a(wt,wo),a(Y,vo),p(t,Ga,r),w(X,t,r),p(t,Ua,r),p(t,U,r),a(U,J),a(J,Ae),w(vt,Ae,null),a(U,qo),a(U,De),a(De,yo),p(t,Ra,r),p(t,W,r),a(W,$o),a(W,xe),a(xe,Eo),a(W,bo),p(t,Ba,r),p(t,K,r),a(K,Oe),a(Oe,Kt),a(Kt,Ce),a(Ce,jo),a(Kt,ko),a(K,So),a(K,Le),a(Le,Z),a(Z,Te),a(Te,Io),a(Z,Ao),a(Z,Zt),a(Zt,Do),a(Z,xo),p(t,Va,r),w(qt,t,r),p(t,Fa,r),p(t,R,r),a(R,Ne),a(Ne,te),a(te,Pe),a(Pe,Oo),a(te,Co),a(R,Lo),a(R,Ge),a(Ge,ee),a(ee,Ue),a(Ue,To),a(ee,No),p(t,za,r),p(t,ae,r),a(ae,Po),p(t,Ha,r),w(yt,t,r),p(t,Ma,r),p(t,B,r),a(B,tt),a(tt,Re),w($t,Re,null),a(B,Go),a(B,Be),a(Be,Uo),p(t,Qa,r),p(t,O,r),a(O,Ro),a(O,Et),a(Et,Bo),a(O,Vo),a(O,se),a(se,Fo),a(O,zo),p(t,Ya,r),p(t,et,r),a(et,Ho),a(et,bt),a(bt,Mo),a(et,Qo),p(t,Xa,r),p(t,oe,r),a(oe,jt),a(jt,Yo),a(jt,le),a(le,Xo),a(jt,Jo),p(t,Ja,r),w(kt,t,r),p(t,Wa,r),p(t,St,r),a(St,It),a(It,Wo),a(It,Ve),a(Ve,Ko),a(It,Zo),p(t,Ka,r),w(At,t,r),p(t,Za,r),p(t,Dt,r),a(Dt,xt),a(xt,tl),a(xt,Fe),a(Fe,el),a(xt,al),p(t,ts,r),w(Ot,t,r),p(t,es,r),p(t,V,r),a(V,at),a(at,ze),w(Ct,ze,null),a(V,sl),a(V,He),a(He,ol),p(t,as,r),p(t,C,r),a(C,ll),a(C,Me),a(Me,rl),a(C,nl),a(C,Qe),a(Qe,il),a(C,pl),p(t,ss,r),w(Lt,t,r),p(t,os,r),w(st,t,r),p(t,ls,r),p(t,F,r),a(F,ot),a(ot,Ye),w(Tt,Ye,null),a(F,dl),a(F,Xe),a(Xe,ul),p(t,rs,r),p(t,re,r),a(re,fl),p(t,ns,r),p(t,ne,r),a(ne,Je),a(Je,hl),p(t,is,r),w(Nt,t,r),p(t,ps,r),w(lt,t,r),p(t,ds,r),p(t,Pt,r),a(Pt,Gt),a(Gt,rt),a(rt,ie),a(ie,cl),a(rt,ml),a(rt,pe),a(pe,_l),a(rt,gl),a(Gt,wl),a(Gt,Ut),a(Ut,We),a(We,S),a(S,vl),a(S,Ke),a(Ke,ql),a(S,yl),a(S,Ze),a(Ze,$l),a(S,El),a(S,ta),a(ta,bl),a(S,jl),a(S,ea),a(ea,kl),a(S,Sl),a(Ut,Il),a(Ut,aa),a(aa,de),a(de,sa),a(sa,Al),a(de,Dl),p(t,us,r),p(t,nt,r),a(nt,xl),a(nt,oa),a(oa,Ol),a(nt,Cl),p(t,fs,r),w(Rt,t,r),p(t,hs,r),p(t,z,r),a(z,it),a(it,la),w(Bt,la,null),a(z,Ll),a(z,ra),a(ra,Tl),p(t,cs,r),p(t,ue,r),a(ue,Nl),p(t,ms,r),p(t,L,r),a(L,na),a(na,Pl),a(L,Gl),a(L,ia),a(ia,Ul),a(L,Rl),a(L,pa),a(pa,Bl),p(t,_s,r),p(t,fe,r),a(fe,Vl),p(t,gs,r),p(t,pt,r),a(pt,da),a(da,dt),a(dt,ua),a(ua,Fl),a(dt,zl),a(dt,fa),a(fa,Hl),a(dt,Ml),a(pt,Ql),a(pt,ha),a(ha,Vt),a(Vt,Yl),a(Vt,ca),a(ca,Xl),a(Vt,Jl),p(t,ws,r),w(Ft,t,r),p(t,vs,r),p(t,H,r),a(H,ut),a(ut,ma),w(zt,ma,null),a(H,Wl),a(H,_a),a(_a,Kl),p(t,qs,r),p(t,T,r),a(T,Zl),a(T,ga),a(ga,tr),a(T,er),a(T,wa),a(wa,ar),a(T,sr),p(t,ys,r),p(t,ft,r),a(ft,or),a(ft,va),a(va,lr),a(ft,rr),p(t,$s,r),w(Ht,t,r),p(t,Es,r),p(t,ht,r),a(ht,nr),a(ht,qa),a(qa,ir),a(ht,pr),p(t,bs,r),p(t,M,r),a(M,ct),a(ct,ya),w(Mt,ya,null),a(M,dr),a(M,$a),a($a,ur),p(t,js,r),p(t,N,r),a(N,fr),a(N,he),a(he,hr),a(N,cr),a(N,ce),a(ce,mr),a(N,_r),p(t,ks,r),p(t,me,r),a(me,gr),p(t,Ss,r),w(Qt,t,r),Is=!0},p(t,[r]){const Yt={};r&2&&(Yt.$$scope={dirty:r,ctx:t}),Q.$set(Yt);const Ea={};r&2&&(Ea.$$scope={dirty:r,ctx:t}),X.$set(Ea);const ba={};r&2&&(ba.$$scope={dirty:r,ctx:t}),st.$set(ba);const ja={};r&2&&(ja.$$scope={dirty:r,ctx:t}),lt.$set(ja)},i(t){Is||(v(E.$$.fragment,t),v(Q.$$.fragment,t),v(_t.$$.fragment,t),v(gt.$$.fragment,t),v(X.$$.fragment,t),v(vt.$$.fragment,t),v(qt.$$.fragment,t),v(yt.$$.fragment,t),v($t.$$.fragment,t),v(kt.$$.fragment,t),v(At.$$.fragment,t),v(Ot.$$.fragment,t),v(Ct.$$.fragment,t),v(Lt.$$.fragment,t),v(st.$$.fragment,t),v(Tt.$$.fragment,t),v(Nt.$$.fragment,t),v(lt.$$.fragment,t),v(Rt.$$.fragment,t),v(Bt.$$.fragment,t),v(Ft.$$.fragment,t),v(zt.$$.fragment,t),v(Ht.$$.fragment,t),v(Mt.$$.fragment,t),v(Qt.$$.fragment,t),Is=!0)},o(t){q(E.$$.fragment,t),q(Q.$$.fragment,t),q(_t.$$.fragment,t),q(gt.$$.fragment,t),q(X.$$.fragment,t),q(vt.$$.fragment,t),q(qt.$$.fragment,t),q(yt.$$.fragment,t),q($t.$$.fragment,t),q(kt.$$.fragment,t),q(At.$$.fragment,t),q(Ot.$$.fragment,t),q(Ct.$$.fragment,t),q(Lt.$$.fragment,t),q(st.$$.fragment,t),q(Tt.$$.fragment,t),q(Nt.$$.fragment,t),q(lt.$$.fragment,t),q(Rt.$$.fragment,t),q(Bt.$$.fragment,t),q(Ft.$$.fragment,t),q(zt.$$.fragment,t),q(Ht.$$.fragment,t),q(Mt.$$.fragment,t),q(Qt.$$.fragment,t),Is=!1},d(t){e(h),t&&e($),t&&e(c),y(E),t&&e(Aa),y(Q,t),t&&e(Da),t&&e(Xt),t&&e(xa),t&&e(Jt),t&&e(Oa),t&&e(x),t&&e(Ca),y(_t,t),t&&e(La),y(gt,t),t&&e(Ta),t&&e(Wt),t&&e(Na),t&&e(j),t&&e(Pa),t&&e(Y),t&&e(Ga),y(X,t),t&&e(Ua),t&&e(U),y(vt),t&&e(Ra),t&&e(W),t&&e(Ba),t&&e(K),t&&e(Va),y(qt,t),t&&e(Fa),t&&e(R),t&&e(za),t&&e(ae),t&&e(Ha),y(yt,t),t&&e(Ma),t&&e(B),y($t),t&&e(Qa),t&&e(O),t&&e(Ya),t&&e(et),t&&e(Xa),t&&e(oe),t&&e(Ja),y(kt,t),t&&e(Wa),t&&e(St),t&&e(Ka),y(At,t),t&&e(Za),t&&e(Dt),t&&e(ts),y(Ot,t),t&&e(es),t&&e(V),y(Ct),t&&e(as),t&&e(C),t&&e(ss),y(Lt,t),t&&e(os),y(st,t),t&&e(ls),t&&e(F),y(Tt),t&&e(rs),t&&e(re),t&&e(ns),t&&e(ne),t&&e(is),y(Nt,t),t&&e(ps),y(lt,t),t&&e(ds),t&&e(Pt),t&&e(us),t&&e(nt),t&&e(fs),y(Rt,t),t&&e(hs),t&&e(z),y(Bt),t&&e(cs),t&&e(ue),t&&e(ms),t&&e(L),t&&e(_s),t&&e(fe),t&&e(gs),t&&e(pt),t&&e(ws),y(Ft,t),t&&e(vs),t&&e(H),y(zt),t&&e(qs),t&&e(T),t&&e(ys),t&&e(ft),t&&e($s),y(Ht,t),t&&e(Es),t&&e(ht),t&&e(bs),t&&e(M),y(Mt),t&&e(js),t&&e(N),t&&e(ks),t&&e(me),t&&e(Ss),y(Qt,t)}}}const di={local:"create-a-dataset-loading-script",sections:[{local:"add-dataset-attributes",sections:[{local:"multiple-configurations",title:"Multiple configurations"},{local:"default-configurations",title:"Default configurations"}],title:"Add dataset attributes"},{local:"download-data-files-and-organize-splits",title:"Download data files and organize splits"},{local:"generate-samples",title:"Generate samples"},{local:"generate-dataset-metadata",title:"Generate dataset metadata"},{local:"upload-to-the-hub",title:"Upload to the Hub"}],title:"Create a dataset loading script"};function ui(D){return oi(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _i extends ti{constructor(h){super();ei(this,h,ui,pi,ai,{})}}export{_i as default,di as metadata};
