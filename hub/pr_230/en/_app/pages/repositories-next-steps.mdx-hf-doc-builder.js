import{S as ii,i as si,s as li,e as r,k as f,w as c,t as l,N as ni,c as a,d as t,m as u,a as i,x as m,h as n,b as h,G as o,g as p,y as g,L as hi,q as d,o as y,B as w,v as pi}from"../chunks/vendor-hf-doc-builder.js";import{I as X}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as Le}from"../chunks/CodeBlock-hf-doc-builder.js";function fi(Qr){let A,_t,G,T,Ue,Z,vo,Ye,bo,Et,xe,$o,At,S,C,Me,ee,ko,We,_o,Gt,O,Eo,D,Je,Ao,Go,So,St,je,Po,Pt,P,B,ze,te,Lo,Ke,xo,Lt,b,jo,oe,Fo,Ho,re,No,Io,xt,L,R,Qe,ae,To,Ve,Co,jt,$,Oo,Xe,Do,Bo,ie,Ro,qo,Ft,q,Uo,se,Yo,Mo,Ht,x,U,Ze,le,Wo,et,Jo,Nt,k,zo,tt,Ko,Qo,ne,Vo,Xo,It,v,Zo,he,er,tr,ot,or,rr,pe,ar,ir,Tt,j,Y,rt,fe,sr,at,lr,Ct,Fe,nr,Ot,F,M,it,ue,hr,st,pr,Dt,_,fr,ce,ur,cr,He,mr,gr,Bt,H,W,lt,me,dr,nt,yr,Rt,J,wr,ht,vr,br,qt,N,I,$r,ge,kr,_r,z,pt,Er,Ar,Gr,Sr,de,Pr,Lr,Ut,E,xr,ft,jr,Fr,ut,Hr,Nr,Yt,K,ct,Q,Ir,mt,Tr,Cr,ye,Or,Dr,gt,dt,Br,Mt,we,Wt,ve,yt,Rr,Jt,be,zt,$e,wt,qr,Kt,ke,Qt,Ne,Ur,Vt,_e,Xt,Ie,Yr,Zt,Ee,eo,Ae,vt,Mr,to,Ge,oo,Se,bt,Wr,ro,Pe,ao,Te,Jr,io;return Z=new X({}),ee=new X({}),te=new X({}),ae=new X({}),le=new X({}),fe=new X({}),ue=new X({}),me=new X({}),we=new Le({props:{code:"git lfs clone https://huggingface.co/me/myfork.git",highlighted:'git lfs clone https:<span class="hljs-regexp">//</span>huggingface.co<span class="hljs-regexp">/me/my</span>fork.git'}}),be=new Le({props:{code:`cd myfork
git lfs install --skip-smudge --local # affects only this clone
git remote add upstream https://huggingface.co/friend/upstream.git
git fetch upstream`,highlighted:`cd myfork
git lfs install --skip-smudge --local <span class="hljs-comment"># affects only this clone</span>
git remote add upstream https:<span class="hljs-regexp">//</span>huggingface.co<span class="hljs-regexp">/friend/u</span>pstream.git
git fetch upstream`}}),ke=new Le({props:{code:"git lfs fetch --all upstream # this can take time depending on your download bandwidth",highlighted:'<span class="hljs-string">git</span> <span class="hljs-string">lfs</span> <span class="hljs-string">fetch</span> <span class="hljs-built_in">--all</span> <span class="hljs-string">upstream</span> <span class="hljs-comment"># this can take time depending on your download bandwidth</span>'}}),_e=new Le({props:{code:"git reset --hard upstream/main",highlighted:'git reset <span class="hljs-attr">--hard</span> upstream/<span class="hljs-selector-tag">main</span>'}}),Ee=new Le({props:{code:"git rebase upstream/main",highlighted:"git rebase upstream/main"}}),Ge=new Le({props:{code:`git lfs install --force --local # this reinstalls the LFS hooks
huggingface-cli lfs-enable-largefiles . # needed if some files are bigger than 5Gb`,highlighted:`<span class="hljs-string">git</span> <span class="hljs-string">lfs</span> <span class="hljs-string">install</span> <span class="hljs-built_in">--force</span> <span class="hljs-built_in">--local</span> <span class="hljs-comment"># this reinstalls the LFS hooks</span>
<span class="hljs-string">huggingface-cli</span> <span class="hljs-string">lfs-enable-largefiles</span> . <span class="hljs-comment"># needed if some files are bigger than 5Gb</span>`}}),Pe=new Le({props:{code:"git push --force origin main # this can take time depending on your upload bandwidth",highlighted:'git <span class="hljs-keyword">push</span> --<span class="hljs-literal">force</span> origin main <span class="hljs-comment"># this can take time depending on your upload bandwidth</span>'}}),{c(){A=r("meta"),_t=f(),G=r("h1"),T=r("a"),Ue=r("span"),c(Z.$$.fragment),vo=f(),Ye=r("span"),bo=l("Next Steps"),Et=f(),xe=r("p"),$o=l("These next sections highlight features and additional information that you may find useful to make the most out of the Git repositories on the Hugging Face Hub."),At=f(),S=r("h2"),C=r("a"),Me=r("span"),c(ee.$$.fragment),ko=f(),We=r("span"),_o=l("How to programmatically manage repositories"),Gt=f(),O=r("p"),Eo=l("Hugging Face supports accessing repos with Python via the "),D=r("a"),Je=r("code"),Ao=l("huggingface_hub"),Go=l(" library"),So=l(". The operations that we\u2019ve explored, such as downloading repositories and uploading files, are available through the library, as well as other useful functions!"),St=f(),je=r("p"),Po=l("If you prefer to use git directly, please read the sections below."),Pt=f(),P=r("h2"),B=r("a"),ze=r("span"),c(te.$$.fragment),Lo=f(),Ke=r("span"),xo=l("Learning more about Git"),Lt=f(),b=r("p"),jo=l("A good place to visit if you want to continue learning about Git is "),oe=r("a"),Fo=l("this Git tutorial"),Ho=l(". For even more background on Git, you can take a look at "),re=r("a"),No=l("GitHub\u2019s Git Guides"),Io=l("."),xt=f(),L=r("h2"),R=r("a"),Qe=r("span"),c(ae.$$.fragment),To=f(),Ve=r("span"),Co=l("How to use branches"),jt=f(),$=r("p"),Oo=l("To effectively use Git repos collaboratively and to work on features without releasing premature code you can use "),Xe=r("strong"),Do=l("branches"),Bo=l(". Branches allow you to separate your \u201Cwork in progress\u201D code from your \u201Cproduction-ready\u201D code, with the additional benefit of letting multiple people work on a project without frequently conflicting with each others\u2019 contributions. You can use branches to isolate experiments in their own branch, and even "),ie=r("a"),Ro=l("adopt team-wide practices for managing branches"),qo=l("."),Ft=f(),q=r("p"),Uo=l("To learn about Git branching, you can try out the "),se=r("a"),Yo=l("Learn Git Branching interactive tutorial"),Mo=l("."),Ht=f(),x=r("h2"),U=r("a"),Ze=r("span"),c(le.$$.fragment),Wo=f(),et=r("span"),Jo=l("Using tags"),Nt=f(),k=r("p"),zo=l("Git allows you to "),tt=r("em"),Ko=l("tag"),Qo=l(" commits so that you can easily note milestones in your project. As such, you can use tags to mark commits in your Hub repos! To learn about using tags, you can visit "),ne=r("a"),Vo=l("this DevConnected post"),Xo=l("."),It=f(),v=r("p"),Zo=l("Beyond making it easy to identify important commits in your repo\u2019s history, using Git tags also allows you to do A/B testing, "),he=r("a"),er=l("clone a repository at a specific tag"),tr=l(", and more! The "),ot=r("code"),or=l("huggingface_hub"),rr=l(" library also supports working with tags, such as "),pe=r("a"),ar=l("downloading files from a specific tagged commit"),ir=l("."),Tt=f(),j=r("h2"),Y=r("a"),rt=r("span"),c(fe.$$.fragment),sr=f(),at=r("span"),lr=l("How to duplicate or fork a repo (including LFS pointers)"),Ct=f(),Fe=r("p"),nr=l("If you\u2019d like to copy a repository, depending on whether you want to preserve the Git history there are two options."),Ot=f(),F=r("h3"),M=r("a"),it=r("span"),c(ue.$$.fragment),hr=f(),st=r("span"),pr=l("Duplicating without Git history"),Dt=f(),_=r("p"),fr=l("In many scenarios, if you want your own copy of a particular codebase you might not be concerned about the previous Git history. In this case, you can quickly duplicate a repo with the handy "),ce=r("a"),ur=l("Repo Duplicator"),cr=l("! You\u2019ll have to create a User Access Token, which you can read more about in the "),He=r("a"),mr=l("security documentation"),gr=l("."),Bt=f(),H=r("h3"),W=r("a"),lt=r("span"),c(me.$$.fragment),dr=f(),nt=r("span"),yr=l("Duplicating with the Git history (Fork)"),Rt=f(),J=r("p"),wr=l("A duplicate of a repository with the commit history preserved is called a "),ht=r("em"),vr=l("fork"),br=l(". You may choose to fork one of your own repos, but it also common to fork other people\u2019s projects if you would like to tinker with them."),qt=f(),N=r("p"),I=r("strong"),$r=l("Note that you will need to "),ge=r("a"),kr=l("install Git LFS"),_r=l(" and the "),z=r("a"),pt=r("code"),Er=l("huggingface_hub"),Ar=l(" CLI"),Gr=l(" to follow this process"),Sr=l(". When you want to fork or "),de=r("a"),Pr=l("rebase"),Lr=l(" a repository with LFS files you cannot use the usual Git approach that you might be familiar with since you need to be careful to not break the LFS pointers. Forking can take time depending on your bandwidth because you will have to fetch and re-upload all the LFS files in your fork."),Ut=f(),E=r("p"),xr=l("For example, say you have an upstream repository, "),ft=r("strong"),jr=l("upstream"),Fr=l(", and you just created your own repository on the Hub which is "),ut=r("strong"),Hr=l("myfork"),Nr=l(" in this example."),Yt=f(),K=r("ol"),ct=r("li"),Q=r("p"),Ir=l("Create a destination repository (e.g. "),mt=r("strong"),Tr=l("myfork"),Cr=l(") in "),ye=r("a"),Or=l("https://huggingface.co"),Dr=f(),gt=r("li"),dt=r("p"),Br=l("Clone your fork repository:"),Mt=f(),c(we.$$.fragment),Wt=f(),ve=r("ol"),yt=r("li"),Rr=l("Fetch non-LFS files:"),Jt=f(),c(be.$$.fragment),zt=f(),$e=r("ol"),wt=r("li"),qr=l("Fetch large files. This can take some time depending on your download bandwidth:"),Kt=f(),c(ke.$$.fragment),Qt=f(),Ne=r("p"),Ur=l("4.a. If you want to completely override the fork history (which should only have an initial commit), run:"),Vt=f(),c(_e.$$.fragment),Xt=f(),Ie=r("p"),Yr=l("4.b. If you want to rebase instead of overriding, run the following command and resolve any conflicts:"),Zt=f(),c(Ee.$$.fragment),eo=f(),Ae=r("ol"),vt=r("li"),Mr=l("Prepare your LFS files to push:"),to=f(),c(Ge.$$.fragment),oo=f(),Se=r("ol"),bt=r("li"),Wr=l("And finally push:"),ro=f(),c(Pe.$$.fragment),ao=f(),Te=r("p"),Jr=l("Now you have your own fork or rebased repo in the Hub!"),this.h()},l(e){const s=ni('[data-svelte="svelte-1phssyn"]',document.head);A=a(s,"META",{name:!0,content:!0}),s.forEach(t),_t=u(e),G=a(e,"H1",{class:!0});var so=i(G);T=a(so,"A",{id:!0,class:!0,href:!0});var Vr=i(T);Ue=a(Vr,"SPAN",{});var Xr=i(Ue);m(Z.$$.fragment,Xr),Xr.forEach(t),Vr.forEach(t),vo=u(so),Ye=a(so,"SPAN",{});var Zr=i(Ye);bo=n(Zr,"Next Steps"),Zr.forEach(t),so.forEach(t),Et=u(e),xe=a(e,"P",{});var ea=i(xe);$o=n(ea,"These next sections highlight features and additional information that you may find useful to make the most out of the Git repositories on the Hugging Face Hub."),ea.forEach(t),At=u(e),S=a(e,"H2",{class:!0});var lo=i(S);C=a(lo,"A",{id:!0,class:!0,href:!0});var ta=i(C);Me=a(ta,"SPAN",{});var oa=i(Me);m(ee.$$.fragment,oa),oa.forEach(t),ta.forEach(t),ko=u(lo),We=a(lo,"SPAN",{});var ra=i(We);_o=n(ra,"How to programmatically manage repositories"),ra.forEach(t),lo.forEach(t),Gt=u(e),O=a(e,"P",{});var no=i(O);Eo=n(no,"Hugging Face supports accessing repos with Python via the "),D=a(no,"A",{href:!0,rel:!0});var zr=i(D);Je=a(zr,"CODE",{});var aa=i(Je);Ao=n(aa,"huggingface_hub"),aa.forEach(t),Go=n(zr," library"),zr.forEach(t),So=n(no,". The operations that we\u2019ve explored, such as downloading repositories and uploading files, are available through the library, as well as other useful functions!"),no.forEach(t),St=u(e),je=a(e,"P",{});var ia=i(je);Po=n(ia,"If you prefer to use git directly, please read the sections below."),ia.forEach(t),Pt=u(e),P=a(e,"H2",{class:!0});var ho=i(P);B=a(ho,"A",{id:!0,class:!0,href:!0});var sa=i(B);ze=a(sa,"SPAN",{});var la=i(ze);m(te.$$.fragment,la),la.forEach(t),sa.forEach(t),Lo=u(ho),Ke=a(ho,"SPAN",{});var na=i(Ke);xo=n(na,"Learning more about Git"),na.forEach(t),ho.forEach(t),Lt=u(e),b=a(e,"P",{});var Ce=i(b);jo=n(Ce,"A good place to visit if you want to continue learning about Git is "),oe=a(Ce,"A",{href:!0,rel:!0});var ha=i(oe);Fo=n(ha,"this Git tutorial"),ha.forEach(t),Ho=n(Ce,". For even more background on Git, you can take a look at "),re=a(Ce,"A",{href:!0,rel:!0});var pa=i(re);No=n(pa,"GitHub\u2019s Git Guides"),pa.forEach(t),Io=n(Ce,"."),Ce.forEach(t),xt=u(e),L=a(e,"H2",{class:!0});var po=i(L);R=a(po,"A",{id:!0,class:!0,href:!0});var fa=i(R);Qe=a(fa,"SPAN",{});var ua=i(Qe);m(ae.$$.fragment,ua),ua.forEach(t),fa.forEach(t),To=u(po),Ve=a(po,"SPAN",{});var ca=i(Ve);Co=n(ca,"How to use branches"),ca.forEach(t),po.forEach(t),jt=u(e),$=a(e,"P",{});var Oe=i($);Oo=n(Oe,"To effectively use Git repos collaboratively and to work on features without releasing premature code you can use "),Xe=a(Oe,"STRONG",{});var ma=i(Xe);Do=n(ma,"branches"),ma.forEach(t),Bo=n(Oe,". Branches allow you to separate your \u201Cwork in progress\u201D code from your \u201Cproduction-ready\u201D code, with the additional benefit of letting multiple people work on a project without frequently conflicting with each others\u2019 contributions. You can use branches to isolate experiments in their own branch, and even "),ie=a(Oe,"A",{href:!0,rel:!0});var ga=i(ie);Ro=n(ga,"adopt team-wide practices for managing branches"),ga.forEach(t),qo=n(Oe,"."),Oe.forEach(t),Ft=u(e),q=a(e,"P",{});var fo=i(q);Uo=n(fo,"To learn about Git branching, you can try out the "),se=a(fo,"A",{href:!0,rel:!0});var da=i(se);Yo=n(da,"Learn Git Branching interactive tutorial"),da.forEach(t),Mo=n(fo,"."),fo.forEach(t),Ht=u(e),x=a(e,"H2",{class:!0});var uo=i(x);U=a(uo,"A",{id:!0,class:!0,href:!0});var ya=i(U);Ze=a(ya,"SPAN",{});var wa=i(Ze);m(le.$$.fragment,wa),wa.forEach(t),ya.forEach(t),Wo=u(uo),et=a(uo,"SPAN",{});var va=i(et);Jo=n(va,"Using tags"),va.forEach(t),uo.forEach(t),Nt=u(e),k=a(e,"P",{});var De=i(k);zo=n(De,"Git allows you to "),tt=a(De,"EM",{});var ba=i(tt);Ko=n(ba,"tag"),ba.forEach(t),Qo=n(De," commits so that you can easily note milestones in your project. As such, you can use tags to mark commits in your Hub repos! To learn about using tags, you can visit "),ne=a(De,"A",{href:!0,rel:!0});var $a=i(ne);Vo=n($a,"this DevConnected post"),$a.forEach(t),Xo=n(De,"."),De.forEach(t),It=u(e),v=a(e,"P",{});var V=i(v);Zo=n(V,"Beyond making it easy to identify important commits in your repo\u2019s history, using Git tags also allows you to do A/B testing, "),he=a(V,"A",{href:!0,rel:!0});var ka=i(he);er=n(ka,"clone a repository at a specific tag"),ka.forEach(t),tr=n(V,", and more! The "),ot=a(V,"CODE",{});var _a=i(ot);or=n(_a,"huggingface_hub"),_a.forEach(t),rr=n(V," library also supports working with tags, such as "),pe=a(V,"A",{href:!0,rel:!0});var Ea=i(pe);ar=n(Ea,"downloading files from a specific tagged commit"),Ea.forEach(t),ir=n(V,"."),V.forEach(t),Tt=u(e),j=a(e,"H2",{class:!0});var co=i(j);Y=a(co,"A",{id:!0,class:!0,href:!0});var Aa=i(Y);rt=a(Aa,"SPAN",{});var Ga=i(rt);m(fe.$$.fragment,Ga),Ga.forEach(t),Aa.forEach(t),sr=u(co),at=a(co,"SPAN",{});var Sa=i(at);lr=n(Sa,"How to duplicate or fork a repo (including LFS pointers)"),Sa.forEach(t),co.forEach(t),Ct=u(e),Fe=a(e,"P",{});var Pa=i(Fe);nr=n(Pa,"If you\u2019d like to copy a repository, depending on whether you want to preserve the Git history there are two options."),Pa.forEach(t),Ot=u(e),F=a(e,"H3",{class:!0});var mo=i(F);M=a(mo,"A",{id:!0,class:!0,href:!0});var La=i(M);it=a(La,"SPAN",{});var xa=i(it);m(ue.$$.fragment,xa),xa.forEach(t),La.forEach(t),hr=u(mo),st=a(mo,"SPAN",{});var ja=i(st);pr=n(ja,"Duplicating without Git history"),ja.forEach(t),mo.forEach(t),Dt=u(e),_=a(e,"P",{});var Be=i(_);fr=n(Be,"In many scenarios, if you want your own copy of a particular codebase you might not be concerned about the previous Git history. In this case, you can quickly duplicate a repo with the handy "),ce=a(Be,"A",{href:!0,rel:!0});var Fa=i(ce);ur=n(Fa,"Repo Duplicator"),Fa.forEach(t),cr=n(Be,"! You\u2019ll have to create a User Access Token, which you can read more about in the "),He=a(Be,"A",{href:!0});var Ha=i(He);mr=n(Ha,"security documentation"),Ha.forEach(t),gr=n(Be,"."),Be.forEach(t),Bt=u(e),H=a(e,"H3",{class:!0});var go=i(H);W=a(go,"A",{id:!0,class:!0,href:!0});var Na=i(W);lt=a(Na,"SPAN",{});var Ia=i(lt);m(me.$$.fragment,Ia),Ia.forEach(t),Na.forEach(t),dr=u(go),nt=a(go,"SPAN",{});var Ta=i(nt);yr=n(Ta,"Duplicating with the Git history (Fork)"),Ta.forEach(t),go.forEach(t),Rt=u(e),J=a(e,"P",{});var yo=i(J);wr=n(yo,"A duplicate of a repository with the commit history preserved is called a "),ht=a(yo,"EM",{});var Ca=i(ht);vr=n(Ca,"fork"),Ca.forEach(t),br=n(yo,". You may choose to fork one of your own repos, but it also common to fork other people\u2019s projects if you would like to tinker with them."),yo.forEach(t),qt=u(e),N=a(e,"P",{});var $t=i(N);I=a($t,"STRONG",{});var Re=i(I);$r=n(Re,"Note that you will need to "),ge=a(Re,"A",{href:!0,rel:!0});var Oa=i(ge);kr=n(Oa,"install Git LFS"),Oa.forEach(t),_r=n(Re," and the "),z=a(Re,"A",{href:!0,rel:!0});var Kr=i(z);pt=a(Kr,"CODE",{});var Da=i(pt);Er=n(Da,"huggingface_hub"),Da.forEach(t),Ar=n(Kr," CLI"),Kr.forEach(t),Gr=n(Re," to follow this process"),Re.forEach(t),Sr=n($t,". When you want to fork or "),de=a($t,"A",{href:!0,rel:!0});var Ba=i(de);Pr=n(Ba,"rebase"),Ba.forEach(t),Lr=n($t," a repository with LFS files you cannot use the usual Git approach that you might be familiar with since you need to be careful to not break the LFS pointers. Forking can take time depending on your bandwidth because you will have to fetch and re-upload all the LFS files in your fork."),$t.forEach(t),Ut=u(e),E=a(e,"P",{});var qe=i(E);xr=n(qe,"For example, say you have an upstream repository, "),ft=a(qe,"STRONG",{});var Ra=i(ft);jr=n(Ra,"upstream"),Ra.forEach(t),Fr=n(qe,", and you just created your own repository on the Hub which is "),ut=a(qe,"STRONG",{});var qa=i(ut);Hr=n(qa,"myfork"),qa.forEach(t),Nr=n(qe," in this example."),qe.forEach(t),Yt=u(e),K=a(e,"OL",{});var wo=i(K);ct=a(wo,"LI",{});var Ua=i(ct);Q=a(Ua,"P",{});var kt=i(Q);Ir=n(kt,"Create a destination repository (e.g. "),mt=a(kt,"STRONG",{});var Ya=i(mt);Tr=n(Ya,"myfork"),Ya.forEach(t),Cr=n(kt,") in "),ye=a(kt,"A",{href:!0,rel:!0});var Ma=i(ye);Or=n(Ma,"https://huggingface.co"),Ma.forEach(t),kt.forEach(t),Ua.forEach(t),Dr=u(wo),gt=a(wo,"LI",{});var Wa=i(gt);dt=a(Wa,"P",{});var Ja=i(dt);Br=n(Ja,"Clone your fork repository:"),Ja.forEach(t),Wa.forEach(t),wo.forEach(t),Mt=u(e),m(we.$$.fragment,e),Wt=u(e),ve=a(e,"OL",{start:!0});var za=i(ve);yt=a(za,"LI",{});var Ka=i(yt);Rr=n(Ka,"Fetch non-LFS files:"),Ka.forEach(t),za.forEach(t),Jt=u(e),m(be.$$.fragment,e),zt=u(e),$e=a(e,"OL",{start:!0});var Qa=i($e);wt=a(Qa,"LI",{});var Va=i(wt);qr=n(Va,"Fetch large files. This can take some time depending on your download bandwidth:"),Va.forEach(t),Qa.forEach(t),Kt=u(e),m(ke.$$.fragment,e),Qt=u(e),Ne=a(e,"P",{});var Xa=i(Ne);Ur=n(Xa,"4.a. If you want to completely override the fork history (which should only have an initial commit), run:"),Xa.forEach(t),Vt=u(e),m(_e.$$.fragment,e),Xt=u(e),Ie=a(e,"P",{});var Za=i(Ie);Yr=n(Za,"4.b. If you want to rebase instead of overriding, run the following command and resolve any conflicts:"),Za.forEach(t),Zt=u(e),m(Ee.$$.fragment,e),eo=u(e),Ae=a(e,"OL",{start:!0});var ei=i(Ae);vt=a(ei,"LI",{});var ti=i(vt);Mr=n(ti,"Prepare your LFS files to push:"),ti.forEach(t),ei.forEach(t),to=u(e),m(Ge.$$.fragment,e),oo=u(e),Se=a(e,"OL",{start:!0});var oi=i(Se);bt=a(oi,"LI",{});var ri=i(bt);Wr=n(ri,"And finally push:"),ri.forEach(t),oi.forEach(t),ro=u(e),m(Pe.$$.fragment,e),ao=u(e),Te=a(e,"P",{});var ai=i(Te);Jr=n(ai,"Now you have your own fork or rebased repo in the Hub!"),ai.forEach(t),this.h()},h(){h(A,"name","hf:doc:metadata"),h(A,"content",JSON.stringify(ui)),h(T,"id","next-steps"),h(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(T,"href","#next-steps"),h(G,"class","relative group"),h(C,"id","how-to-programmatically-manage-repositories"),h(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(C,"href","#how-to-programmatically-manage-repositories"),h(S,"class","relative group"),h(D,"href","https://huggingface.co/docs/huggingface_hub/index"),h(D,"rel","nofollow"),h(B,"id","learning-more-about-git"),h(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(B,"href","#learning-more-about-git"),h(P,"class","relative group"),h(oe,"href","https://learngitbranching.js.org/"),h(oe,"rel","nofollow"),h(re,"href","https://github.com/git-guides"),h(re,"rel","nofollow"),h(R,"id","how-to-use-branches"),h(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(R,"href","#how-to-use-branches"),h(L,"class","relative group"),h(ie,"href","https://ericmjl.github.io/essays-on-data-science/workflow/gitflow/"),h(ie,"rel","nofollow"),h(se,"href","https://learngitbranching.js.org/"),h(se,"rel","nofollow"),h(U,"id","using-tags"),h(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(U,"href","#using-tags"),h(x,"class","relative group"),h(ne,"href","https://devconnected.com/how-to-create-git-tags/"),h(ne,"rel","nofollow"),h(he,"href","https://www.techiedelight.com/clone-specific-tag-with-git/"),h(he,"rel","nofollow"),h(pe,"href","https://huggingface.co/docs/huggingface_hub/main/en/how-to-downstream#hfhuburl"),h(pe,"rel","nofollow"),h(Y,"id","how-to-duplicate-or-fork-a-repo-including-lfs-pointers"),h(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Y,"href","#how-to-duplicate-or-fork-a-repo-including-lfs-pointers"),h(j,"class","relative group"),h(M,"id","duplicating-without-git-history"),h(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(M,"href","#duplicating-without-git-history"),h(F,"class","relative group"),h(ce,"href","https://huggingface.co/spaces/osanseviero/repo_duplicator"),h(ce,"rel","nofollow"),h(He,"href","./security-tokens"),h(W,"id","duplicating-with-the-git-history-fork"),h(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(W,"href","#duplicating-with-the-git-history-fork"),h(H,"class","relative group"),h(ge,"href","https://git-lfs.github.com/"),h(ge,"rel","nofollow"),h(z,"href","https://huggingface.co/docs/huggingface_hub/index"),h(z,"rel","nofollow"),h(de,"href","https://git-scm.com/docs/git-rebase"),h(de,"rel","nofollow"),h(ye,"href","https://huggingface.co"),h(ye,"rel","nofollow"),h(ve,"start","3"),h($e,"start","4"),h(Ae,"start","5"),h(Se,"start","6")},m(e,s){o(document.head,A),p(e,_t,s),p(e,G,s),o(G,T),o(T,Ue),g(Z,Ue,null),o(G,vo),o(G,Ye),o(Ye,bo),p(e,Et,s),p(e,xe,s),o(xe,$o),p(e,At,s),p(e,S,s),o(S,C),o(C,Me),g(ee,Me,null),o(S,ko),o(S,We),o(We,_o),p(e,Gt,s),p(e,O,s),o(O,Eo),o(O,D),o(D,Je),o(Je,Ao),o(D,Go),o(O,So),p(e,St,s),p(e,je,s),o(je,Po),p(e,Pt,s),p(e,P,s),o(P,B),o(B,ze),g(te,ze,null),o(P,Lo),o(P,Ke),o(Ke,xo),p(e,Lt,s),p(e,b,s),o(b,jo),o(b,oe),o(oe,Fo),o(b,Ho),o(b,re),o(re,No),o(b,Io),p(e,xt,s),p(e,L,s),o(L,R),o(R,Qe),g(ae,Qe,null),o(L,To),o(L,Ve),o(Ve,Co),p(e,jt,s),p(e,$,s),o($,Oo),o($,Xe),o(Xe,Do),o($,Bo),o($,ie),o(ie,Ro),o($,qo),p(e,Ft,s),p(e,q,s),o(q,Uo),o(q,se),o(se,Yo),o(q,Mo),p(e,Ht,s),p(e,x,s),o(x,U),o(U,Ze),g(le,Ze,null),o(x,Wo),o(x,et),o(et,Jo),p(e,Nt,s),p(e,k,s),o(k,zo),o(k,tt),o(tt,Ko),o(k,Qo),o(k,ne),o(ne,Vo),o(k,Xo),p(e,It,s),p(e,v,s),o(v,Zo),o(v,he),o(he,er),o(v,tr),o(v,ot),o(ot,or),o(v,rr),o(v,pe),o(pe,ar),o(v,ir),p(e,Tt,s),p(e,j,s),o(j,Y),o(Y,rt),g(fe,rt,null),o(j,sr),o(j,at),o(at,lr),p(e,Ct,s),p(e,Fe,s),o(Fe,nr),p(e,Ot,s),p(e,F,s),o(F,M),o(M,it),g(ue,it,null),o(F,hr),o(F,st),o(st,pr),p(e,Dt,s),p(e,_,s),o(_,fr),o(_,ce),o(ce,ur),o(_,cr),o(_,He),o(He,mr),o(_,gr),p(e,Bt,s),p(e,H,s),o(H,W),o(W,lt),g(me,lt,null),o(H,dr),o(H,nt),o(nt,yr),p(e,Rt,s),p(e,J,s),o(J,wr),o(J,ht),o(ht,vr),o(J,br),p(e,qt,s),p(e,N,s),o(N,I),o(I,$r),o(I,ge),o(ge,kr),o(I,_r),o(I,z),o(z,pt),o(pt,Er),o(z,Ar),o(I,Gr),o(N,Sr),o(N,de),o(de,Pr),o(N,Lr),p(e,Ut,s),p(e,E,s),o(E,xr),o(E,ft),o(ft,jr),o(E,Fr),o(E,ut),o(ut,Hr),o(E,Nr),p(e,Yt,s),p(e,K,s),o(K,ct),o(ct,Q),o(Q,Ir),o(Q,mt),o(mt,Tr),o(Q,Cr),o(Q,ye),o(ye,Or),o(K,Dr),o(K,gt),o(gt,dt),o(dt,Br),p(e,Mt,s),g(we,e,s),p(e,Wt,s),p(e,ve,s),o(ve,yt),o(yt,Rr),p(e,Jt,s),g(be,e,s),p(e,zt,s),p(e,$e,s),o($e,wt),o(wt,qr),p(e,Kt,s),g(ke,e,s),p(e,Qt,s),p(e,Ne,s),o(Ne,Ur),p(e,Vt,s),g(_e,e,s),p(e,Xt,s),p(e,Ie,s),o(Ie,Yr),p(e,Zt,s),g(Ee,e,s),p(e,eo,s),p(e,Ae,s),o(Ae,vt),o(vt,Mr),p(e,to,s),g(Ge,e,s),p(e,oo,s),p(e,Se,s),o(Se,bt),o(bt,Wr),p(e,ro,s),g(Pe,e,s),p(e,ao,s),p(e,Te,s),o(Te,Jr),io=!0},p:hi,i(e){io||(d(Z.$$.fragment,e),d(ee.$$.fragment,e),d(te.$$.fragment,e),d(ae.$$.fragment,e),d(le.$$.fragment,e),d(fe.$$.fragment,e),d(ue.$$.fragment,e),d(me.$$.fragment,e),d(we.$$.fragment,e),d(be.$$.fragment,e),d(ke.$$.fragment,e),d(_e.$$.fragment,e),d(Ee.$$.fragment,e),d(Ge.$$.fragment,e),d(Pe.$$.fragment,e),io=!0)},o(e){y(Z.$$.fragment,e),y(ee.$$.fragment,e),y(te.$$.fragment,e),y(ae.$$.fragment,e),y(le.$$.fragment,e),y(fe.$$.fragment,e),y(ue.$$.fragment,e),y(me.$$.fragment,e),y(we.$$.fragment,e),y(be.$$.fragment,e),y(ke.$$.fragment,e),y(_e.$$.fragment,e),y(Ee.$$.fragment,e),y(Ge.$$.fragment,e),y(Pe.$$.fragment,e),io=!1},d(e){t(A),e&&t(_t),e&&t(G),w(Z),e&&t(Et),e&&t(xe),e&&t(At),e&&t(S),w(ee),e&&t(Gt),e&&t(O),e&&t(St),e&&t(je),e&&t(Pt),e&&t(P),w(te),e&&t(Lt),e&&t(b),e&&t(xt),e&&t(L),w(ae),e&&t(jt),e&&t($),e&&t(Ft),e&&t(q),e&&t(Ht),e&&t(x),w(le),e&&t(Nt),e&&t(k),e&&t(It),e&&t(v),e&&t(Tt),e&&t(j),w(fe),e&&t(Ct),e&&t(Fe),e&&t(Ot),e&&t(F),w(ue),e&&t(Dt),e&&t(_),e&&t(Bt),e&&t(H),w(me),e&&t(Rt),e&&t(J),e&&t(qt),e&&t(N),e&&t(Ut),e&&t(E),e&&t(Yt),e&&t(K),e&&t(Mt),w(we,e),e&&t(Wt),e&&t(ve),e&&t(Jt),w(be,e),e&&t(zt),e&&t($e),e&&t(Kt),w(ke,e),e&&t(Qt),e&&t(Ne),e&&t(Vt),w(_e,e),e&&t(Xt),e&&t(Ie),e&&t(Zt),w(Ee,e),e&&t(eo),e&&t(Ae),e&&t(to),w(Ge,e),e&&t(oo),e&&t(Se),e&&t(ro),w(Pe,e),e&&t(ao),e&&t(Te)}}}const ui={local:"next-steps",sections:[{local:"how-to-programmatically-manage-repositories",title:"How to programmatically manage repositories"},{local:"learning-more-about-git",title:"Learning more about Git"},{local:"how-to-use-branches",title:"How to use branches"},{local:"using-tags",title:"Using tags"},{local:"how-to-duplicate-or-fork-a-repo-including-lfs-pointers",sections:[{local:"duplicating-without-git-history",title:"Duplicating without Git history"},{local:"duplicating-with-the-git-history-fork",title:"Duplicating with the Git history (Fork)"}],title:"How to duplicate or fork a repo (including LFS pointers)"}],title:"Next Steps"};function ci(Qr){return pi(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class yi extends ii{constructor(A){super();si(this,A,ci,fi,li,{})}}export{yi as default,ui as metadata};
