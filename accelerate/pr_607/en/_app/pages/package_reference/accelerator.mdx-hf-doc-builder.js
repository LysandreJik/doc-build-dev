import{S as cg,i as sg,s as lg,e as a,k as l,w as u,t as c,M as ig,c as o,d as r,m as i,a as n,x as g,h as s,b as d,G as e,g as f,y as _,q as v,o as b,B as $,v as dg}from"../../chunks/vendor-hf-doc-builder.js";import{T as Of}from"../../chunks/Tip-hf-doc-builder.js";import{D as w}from"../../chunks/Docstring-hf-doc-builder.js";import{C as H}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I}from"../../chunks/IconCopyLink-hf-doc-builder.js";function pg(_e){let y,D;return{c(){y=a("p"),D=c("Step three is optional, but considered a best practice.")},l(E){y=o(E,"P",{});var x=n(y);D=s(x,"Step three is optional, but considered a best practice."),x.forEach(r)},m(E,x){f(E,y,x),e(y,D)},d(E){E&&r(y)}}}function hg(_e){let y,D;return{c(){y=a("p"),D=c("Step five is mandatory when using distributed evaluation")},l(E){y=o(E,"P",{});var x=n(y);D=s(x,"Step five is mandatory when using distributed evaluation"),x.forEach(r)},m(E,x){f(E,y,x),e(y,D)},d(E){E&&r(y)}}}function fg(_e){let y,D,E,x,F,T,Ot,Y,K,ve,S;return{c(){y=a("p"),D=c("Every "),E=a("code"),x=c("object"),F=c(" must have a "),T=a("code"),Ot=c("load_state_dict"),Y=c(" and "),K=a("code"),ve=c("state_dict"),S=c(" function to be stored.")},l(Q){y=o(Q,"P",{});var P=n(y);D=s(P,"Every "),E=o(P,"CODE",{});var Hr=n(E);x=s(Hr,"object"),Hr.forEach(r),F=s(P," must have a "),T=o(P,"CODE",{});var Fr=n(T);Ot=s(Fr,"load_state_dict"),Fr.forEach(r),Y=s(P," and "),K=o(P,"CODE",{});var It=n(K);ve=s(It,"state_dict"),It.forEach(r),S=s(P," function to be stored."),P.forEach(r)},m(Q,P){f(Q,y,P),e(y,D),e(y,E),e(E,x),e(y,F),e(y,T),e(T,Ot),e(y,Y),e(y,K),e(K,ve),e(y,S)},d(Q){Q&&r(y)}}}function mg(_e){let y,D,E,x,F,T,Ot,Y,K,ve,S,Q,P,Hr,Fr,It,B,be,xa,St,Ls,ka,Ns,Vn,Yr,js,Rn,q,X,Cs,Kr,zs,qs,Pa,Us,Gs,Vs,Lt,Rs,Qr,Ms,Ws,Hs,j,Fs,Da,Ys,Ks,Ta,Qs,Bs,Oa,Xs,Js,Mn,$e,Wn,J,ye,Zs,Ia,el,tl,Sa,rl,al,Br,ol,Xr,nl,Hn,we,Fn,Ee,cl,La,sl,ll,Yn,Z,Ae,Na,Nt,il,ja,dl,Kn,ee,xe,Ca,jt,pl,za,hl,Qn,te,qa,fl,ml,Jr,ul,gl,Bn,Ct,Xn,re,ke,Ua,zt,_l,Ga,vl,Jn,ae,Pe,Va,qt,bl,Ra,$l,Zn,De,yl,Ma,wl,El,ec,Ut,tc,Te,Al,Zr,xl,kl,rc,Gt,ac,oe,Oe,Wa,Vt,Pl,Ha,Dl,oc,Ie,Tl,Fa,Ol,Il,nc,Rt,cc,Se,Sl,ea,Ll,Nl,sc,Mt,lc,ne,Le,Ya,Wt,jl,Ka,Cl,ic,ta,zl,dc,Ht,pc,Ft,hc,ce,Ne,Qa,Yt,ql,Ba,Ul,fc,je,Gl,ra,Vl,Rl,mc,se,Ce,Xa,Kt,Ml,Ja,Wl,uc,ze,Hl,aa,Fl,Yl,gc,Qt,_c,U,Kl,oa,Ql,Bl,Za,Xl,Jl,vc,Bt,bc,le,qe,eo,Xt,Zl,to,ei,$c,O,ti,Ue,ri,ro,ai,oi,ni,ao,ci,si,Ge,li,oo,ii,di,pi,no,hi,yc,ie,Ve,co,Jt,fi,so,mi,wc,Re,ui,na,gi,_i,Ec,Zt,Ac,de,Me,lo,er,vi,io,bi,xc,h,tr,$i,po,yi,wi,ho,fo,Ei,Ai,A,We,mo,xi,ki,uo,Pi,Di,Ti,He,go,Oi,Ii,ca,Si,Li,Ni,Fe,_o,ji,Ci,vo,zi,qi,Ui,Ye,bo,Gi,Vi,$o,Ri,Mi,Wi,Ke,yo,Hi,Fi,wo,Yi,Ki,Qi,Qe,Eo,Bi,Xi,Ao,Ji,Zi,ed,Be,xo,td,rd,ko,ad,od,nd,Xe,Po,cd,sd,sa,ld,id,dd,Je,Do,pd,hd,To,fd,md,ud,Ze,Oo,gd,_d,Io,vd,bd,$d,et,rr,yd,So,wd,Ed,tt,ar,Ad,Lo,xd,kd,rt,or,Pd,pe,Dd,No,Td,Od,jo,Id,Sd,Ld,at,nr,Nd,cr,jd,Co,Cd,zd,qd,ot,sr,Ud,lr,Gd,zo,Vd,Rd,Md,nt,ir,Wd,dr,Hd,qo,Fd,Yd,Kd,ct,pr,Qd,Uo,Bd,Xd,st,hr,Jd,Go,Zd,ep,G,fr,tp,mr,rp,Vo,ap,op,np,Ro,cp,sp,lt,ur,lp,gr,ip,Mo,dp,pp,hp,it,_r,fp,C,mp,Wo,up,gp,Ho,_p,vp,Fo,bp,$p,yp,dt,vr,wp,br,Ep,Yo,Ap,xp,kp,pt,$r,Pp,Ko,Dp,Tp,V,yr,Op,Qo,Ip,Sp,Bo,Lp,Np,ht,wr,jp,he,Cp,Xo,zp,qp,Jo,Up,Gp,Vp,R,Er,Rp,Zo,Mp,Wp,en,Hp,Fp,M,Ar,Yp,xr,Kp,tn,Qp,Bp,Xp,kr,Jp,rn,Zp,eh,th,ft,Pr,rh,an,ah,oh,mt,Dr,nh,on,ch,sh,ut,Tr,lh,nn,ih,dh,gt,Or,ph,cn,hh,fh,_t,Ir,mh,sn,uh,gh,L,Sr,_h,Lr,vh,ln,bh,$h,yh,dn,wh,Eh,fe,la,pn,Ah,xh,kh,ia,hn,Ph,Dh,Th,da,fn,Oh,Ih,Sh,vt,Nr,Lh,jr,Nh,mn,jh,Ch,zh,W,Cr,qh,me,Uh,un,Gh,Vh,gn,Rh,Mh,Wh,_n,Hh,Fh,N,zr,Yh,z,Kh,vn,Qh,Bh,bn,Xh,Jh,$n,Zh,ef,tf,yn,rf,af,bt,of,$t,qr,nf,Ur,cf,wn,sf,lf,df,yt,Gr,pf,En,hf,ff,wt,Vr,mf,An,uf,gf,Et,Rr,_f,ue,vf,xn,bf,$f,pa,yf,wf,Ef,At,Mr,Af,kn,xf,kc;return T=new I({}),St=new I({}),$e=new Of({props:{$$slots:{default:[pg]},$$scope:{ctx:_e}}}),we=new Of({props:{warning:!0,$$slots:{default:[hg]},$$scope:{ctx:_e}}}),Nt=new I({}),jt=new I({}),Ct=new H({props:{code:`- print("My thing I want to print!")
+ accelerator.print("My thing I want to print!")`,highlighted:`<span class="hljs-deletion">- print(&quot;My thing I want to print!&quot;)</span>
<span class="hljs-addition">+ accelerator.print(&quot;My thing I want to print!&quot;)</span>`}}),zt=new I({}),qt=new I({}),Ut=new H({props:{code:`if accelerator.is_local_main_process:
    do_thing_once_per_server()`,highlighted:`<span class="hljs-keyword">if</span> accelerator.is_local_main_process:
    do_thing_once_per_server()`}}),Gt=new H({props:{code:`@accelerator.on_local_main_process
def do_my_thing():
    "Something done once per server"
    do_thing_once_per_server()`,highlighted:`<span class="hljs-meta">@accelerator.on_local_main_process</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done once per server&quot;</span>
    do_thing_once_per_server()`}}),Vt=new I({}),Rt=new H({props:{code:`if accelerator.is_main_process:
    do_thing_once()`,highlighted:`<span class="hljs-keyword">if</span> accelerator.is_main_process:
    do_thing_once()`}}),Mt=new H({props:{code:`@accelerator.on_main_process
def do_my_thing():
    "Something done once per server"
    do_thing_once()`,highlighted:`<span class="hljs-meta">@accelerator.on_main_process</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done once per server&quot;</span>
    do_thing_once()`}}),Wt=new I({}),Ht=new H({props:{code:`@accelerator.on_local_process(local_process_idx=0)
def do_my_thing():
    "Something done on process index 0 on each server"
    do_thing_on_index_zero_on_each_server()`,highlighted:`<span class="hljs-meta">@accelerator.on_local_process(<span class="hljs-params">local_process_idx=<span class="hljs-number">0</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done on process index 0 on each server&quot;</span>
    do_thing_on_index_zero_on_each_server()`}}),Ft=new H({props:{code:`@accelerator.on_process(process_index=0)
def do_my_thing():
    "Something done on process index 0"
    do_thing_on_index_zero()`,highlighted:`<span class="hljs-meta">@accelerator.on_process(<span class="hljs-params">process_index=<span class="hljs-number">0</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done on process index 0&quot;</span>
    do_thing_on_index_zero()`}}),Yt=new I({}),Kt=new I({}),Qt=new H({props:{code:`model = MyModel()
model = accelerator.prepare(model)
# Unwrap
model = accelerator.unwrap_model(model)`,highlighted:`model = MyModel()
model = accelerator.prepare(model)
<span class="hljs-comment"># Unwrap</span>
model = accelerator.unwrap_model(model)`}}),Bt=new H({props:{code:`  state_dict = model.state_dict()
- torch.save(state_dict, "my_state.pkl")
+ accelerator.save(state_dict, "my_state.pkl")`,highlighted:`  state_dict = model.state_dict()
<span class="hljs-deletion">- torch.save(state_dict, &quot;my_state.pkl&quot;)</span>
<span class="hljs-addition">+ accelerator.save(state_dict, &quot;my_state.pkl&quot;)</span>`}}),Xt=new I({}),Jt=new I({}),Zt=new H({props:{code:`- accelerator = Accelerator()
+ accelerator = Accelerator(gradient_accumulation_steps=2)

  for (input, label) in training_dataloader:
+     with accelerator.accumulate(model):
          predictions = model(input)
          loss = loss_function(predictions, labels)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()`,highlighted:`<span class="hljs-deletion">- accelerator = Accelerator()</span>
<span class="hljs-addition">+ accelerator = Accelerator(gradient_accumulation_steps=2)</span>

  for (input, label) in training_dataloader:
<span class="hljs-addition">+     with accelerator.accumulate(model):</span>
          predictions = model(input)
          loss = loss_function(predictions, labels)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()`}}),er=new I({}),tr=new w({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.dataclasses.PrecisionType, str] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"fsdp_plugin",val:": FullyShardedDataParallelPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.utils.dataclasses.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, default to 1) &#x2014;
The number of steps that should pass before gradients are accumulated. A number &gt; 1 should be combined with
<code>Accelerator.accumulate</code>.`,name:"gradient_accumulation_steps"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.fsdp_plugin",description:`<strong>fsdp_plugin</strong> (<code>FullyShardedDataParallelPlugin</code>, <em>optional</em>) &#x2014;
Tweak your FSDP related args using this argument. This argument is optional and can be configured directly
using <em>accelerate config</em>`,name:"fsdp_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <a href="/docs/accelerate/pr_607/en/package_reference/utilities#accelerate.utils.LoggerType">LoggerType</a> or <a href="/docs/accelerate/pr_607/en/package_reference/tracking#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all</code>&#x201D; is selected, will pick up all available trackers in the environment and intialize them. Can also
accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L80"}}),rr=new w({props:{name:"accumulate",anchor:"accelerate.Accelerator.accumulate",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.accumulate.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L487"}}),ar=new w({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1333"}}),or=new w({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L874"}}),nr=new w({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1250"}}),sr=new w({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L906"}}),ir=new w({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L923"}}),pr=new w({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1103"}}),hr=new w({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1238"}}),fr=new w({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L932",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),ur=new w({props:{name:"gather_for_metrics",anchor:"accelerate.Accelerator.gather_for_metrics",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather_for_metrics.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors for calculating metrics across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L950"}}),_r=new w({props:{name:"get_tracker",anchor:"accelerate.Accelerator.get_tracker",parameters:[{name:"name",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.get_tracker.name",description:`<strong>name</strong> (<code>str</code>) &#x2014;
The name of a tracker, corresponding to the <code>.name</code> property.`,name:"name"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1069"}}),vr=new w({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"},{name:"init_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"},{anchor:"accelerate.Accelerator.init_trackers.init_kwargs",description:`<strong>init_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>__init__</code> function. Should be
formatted like this:`,name:"init_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1035"}}),$r=new w({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1177"}}),yr=new w({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L446"}}),wr=new w({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"},{name:"log_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"},{anchor:"accelerate.Accelerator.log.log_kwargs",description:`<strong>log_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>log</code> function. Should be formatted
like this:`,name:"log_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1083"}}),Er=new w({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L437"}}),Ar=new w({props:{name:"no_sync",anchor:"accelerate.Accelerator.no_sync",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.no_sync.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L455"}}),Pr=new w({props:{name:"on_local_main_process",anchor:"accelerate.Accelerator.on_local_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L386"}}),Dr=new w({props:{name:"on_local_process",anchor:"accelerate.Accelerator.on_local_process",parameters:[{name:"local_process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L413"}}),Tr=new w({props:{name:"on_main_process",anchor:"accelerate.Accelerator.on_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L374"}}),Or=new w({props:{name:"on_process",anchor:"accelerate.Accelerator.on_process",parameters:[{name:"process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L398"}}),Ir=new w({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1000"}}),Sr=new w({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L567"}}),Nr=new w({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L505"}}),Cr=new w({props:{name:"reduce",anchor:"accelerate.Accelerator.reduce",parameters:[{name:"tensor",val:""},{name:"reduction",val:" = 'sum'"}],parametersDescription:[{anchor:"accelerate.Accelerator.reduce.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to reduce across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;sum&#x201D;) &#x2014;
A reduction type, can be one of &#x2018;sum&#x2019;, &#x2018;mean&#x2019;, or &#x2018;none&#x2019;. If &#x2018;none&#x2019;, will not perform any operation.`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L982",returnDescription:`
<p>The reduced tensor(s).</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),zr=new w({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1309"}}),bt=new Of({props:{$$slots:{default:[fg]},$$scope:{ctx:_e}}}),qr=new w({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1111"}}),Gr=new w({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1122"}}),Vr=new w({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L886"}}),Rr=new w({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1017"}}),Mr=new w({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_607/src/accelerate/accelerator.py#L1028"}}),{c(){y=a("meta"),D=l(),E=a("h1"),x=a("a"),F=a("span"),u(T.$$.fragment),Ot=l(),Y=a("span"),K=c("Accelerator"),ve=l(),S=a("p"),Q=c("The "),P=a("a"),Hr=c("Accelerator"),Fr=c(` is the main class provided by \u{1F917} Accelerate.
It serves at the main entrypoint for the API.`),It=l(),B=a("h2"),be=a("a"),xa=a("span"),u(St.$$.fragment),Ls=l(),ka=a("span"),Ns=c("Quick adaptation of your code"),Vn=l(),Yr=a("p"),js=c("To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:"),Rn=l(),q=a("ol"),X=a("li"),Cs=c("Initialize an "),Kr=a("a"),zs=c("Accelerator"),qs=c(" object (that we will call "),Pa=a("code"),Us=c("accelerator"),Gs=c(" throughout this page) as early as possible in your script."),Vs=l(),Lt=a("li"),Rs=c("Pass your dataloader(s), model(s), optimizer(s), and scheduler(s) to the "),Qr=a("a"),Ms=c("prepare()"),Ws=c(" method."),Hs=l(),j=a("li"),Fs=c("Remove all the "),Da=a("code"),Ys=c(".cuda()"),Ks=c(" or "),Ta=a("code"),Qs=c(".to(device)"),Bs=c(" from your code and let the "),Oa=a("code"),Xs=c("accelerator"),Js=c(" handle the device placement for you."),Mn=l(),u($e.$$.fragment),Wn=l(),J=a("ol"),ye=a("li"),Zs=c("Replace "),Ia=a("code"),el=c("loss.backward()"),tl=c(" in your code with "),Sa=a("code"),rl=c("accelerator.backward(loss)"),al=l(),Br=a("li"),ol=c("Gather your predictions and labels before storing them or using them for metric computation using "),Xr=a("a"),nl=c("gather()"),Hn=l(),u(we.$$.fragment),Fn=l(),Ee=a("p"),cl=c(`In most cases this is all that is needed. The next section lists a few more advanced use cases and nice features
you should search for and replace by the corresponding methods of your `),La=a("code"),sl=c("accelerator"),ll=c(":"),Yn=l(),Z=a("h2"),Ae=a("a"),Na=a("span"),u(Nt.$$.fragment),il=l(),ja=a("span"),dl=c("Advanced recommendations"),Kn=l(),ee=a("h3"),xe=a("a"),Ca=a("span"),u(jt.$$.fragment),pl=l(),za=a("span"),hl=c("Printing"),Qn=l(),te=a("p"),qa=a("code"),fl=c("print"),ml=c(" statements should be replaced by "),Jr=a("a"),ul=c("print()"),gl=c(" to be printed once per process"),Bn=l(),u(Ct.$$.fragment),Xn=l(),re=a("h3"),ke=a("a"),Ua=a("span"),u(zt.$$.fragment),_l=l(),Ga=a("span"),vl=c("Executing processes"),Jn=l(),ae=a("h4"),Pe=a("a"),Va=a("span"),u(qt.$$.fragment),bl=l(),Ra=a("span"),$l=c("Once on a single server"),Zn=l(),De=a("p"),yl=c("For statements that should be executed once per server, use "),Ma=a("code"),wl=c("is_local_main_process"),El=c(":"),ec=l(),u(Ut.$$.fragment),tc=l(),Te=a("p"),Al=c("A function can be wrapped using the "),Zr=a("a"),xl=c("on_local_main_process()"),kl=c(` function to achieve the same
behavior on a function\u2019s execution:`),rc=l(),u(Gt.$$.fragment),ac=l(),oe=a("h4"),Oe=a("a"),Wa=a("span"),u(Vt.$$.fragment),Pl=l(),Ha=a("span"),Dl=c("Only ever once across all servers"),oc=l(),Ie=a("p"),Tl=c("For statements that should only ever be executed once, use "),Fa=a("code"),Ol=c("is_main_process"),Il=c(":"),nc=l(),u(Rt.$$.fragment),cc=l(),Se=a("p"),Sl=c("A function can be wrapped using the "),ea=a("a"),Ll=c("on_main_process()"),Nl=c(` function to achieve the same
behavior on a function\u2019s execution:`),sc=l(),u(Mt.$$.fragment),lc=l(),ne=a("h4"),Le=a("a"),Ya=a("span"),u(Wt.$$.fragment),jl=l(),Ka=a("span"),Cl=c("On specific processes"),ic=l(),ta=a("p"),zl=c(`If a function should be ran on a specific overall or local process index, there are similar decorators
to achieve this:`),dc=l(),u(Ht.$$.fragment),pc=l(),u(Ft.$$.fragment),hc=l(),ce=a("h3"),Ne=a("a"),Qa=a("span"),u(Yt.$$.fragment),ql=l(),Ba=a("span"),Ul=c("Synchronicity control"),fc=l(),je=a("p"),Gl=c("Use "),ra=a("a"),Vl=c("wait_for_everyone()"),Rl=c(" to make sure all processes join that point before continuing. (Useful before a model save for instance)"),mc=l(),se=a("h3"),Ce=a("a"),Xa=a("span"),u(Kt.$$.fragment),Ml=l(),Ja=a("span"),Wl=c("Saving and loading"),uc=l(),ze=a("p"),Hl=c("Use "),aa=a("a"),Fl=c("unwrap_model()"),Yl=c(" before saving to remove all special model wrappers added during the distributed process."),gc=l(),u(Qt.$$.fragment),_c=l(),U=a("p"),Kl=c("Use "),oa=a("a"),Ql=c("save()"),Bl=c(" instead of "),Za=a("code"),Xl=c("torch.save"),Jl=c(":"),vc=l(),u(Bt.$$.fragment),bc=l(),le=a("h3"),qe=a("a"),eo=a("span"),u(Xt.$$.fragment),Zl=l(),to=a("span"),ei=c("Operations"),$c=l(),O=a("p"),ti=c("Use "),Ue=a("a"),ri=c("clip"),ro=a("em"),ai=c("grad_norm"),oi=c("()"),ni=c(" instead of "),ao=a("code"),ci=c("torch.nn.utils.clip_grad_norm_"),si=c(" and "),Ge=a("a"),li=c("clip"),oo=a("em"),ii=c("grad_value"),di=c("()"),pi=c(" instead of "),no=a("code"),hi=c("torch.nn.utils.clip_grad_value"),yc=l(),ie=a("h3"),Ve=a("a"),co=a("span"),u(Jt.$$.fragment),fi=l(),so=a("span"),mi=c("Gradient Accumulation"),wc=l(),Re=a("p"),ui=c("To perform gradient accumulation use "),na=a("a"),gi=c("accumulate()"),_i=c(` and specify a gradient_accumulation_steps.
This will also automatically ensure the gradients are synced or unsynced when on
multi-device training, check if the step should actually be performed, and auto-scale the loss:`),Ec=l(),u(Zt.$$.fragment),Ac=l(),de=a("h2"),Me=a("a"),lo=a("span"),u(er.$$.fragment),vi=l(),io=a("span"),bi=c("Overall API documentation:"),xc=l(),h=a("div"),u(tr.$$.fragment),$i=l(),po=a("p"),yi=c("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),wi=l(),ho=a("p"),fo=a("strong"),Ei=c("Attributes:"),Ai=l(),A=a("ul"),We=a("li"),mo=a("strong"),xi=c("device"),ki=c(" ("),uo=a("code"),Pi=c("torch.device"),Di=c(") \u2014 The device to use."),Ti=l(),He=a("li"),go=a("strong"),Oi=c("distributed_type"),Ii=c(" ("),ca=a("a"),Si=c("DistributedType"),Li=c(") \u2014 The distributed training configuration."),Ni=l(),Fe=a("li"),_o=a("strong"),ji=c("local_process_index"),Ci=c(" ("),vo=a("code"),zi=c("int"),qi=c(") \u2014 The process index on the current machine."),Ui=l(),Ye=a("li"),bo=a("strong"),Gi=c("mixed_precision"),Vi=c(" ("),$o=a("code"),Ri=c("str"),Mi=c(") \u2014 The configured mixed precision mode."),Wi=l(),Ke=a("li"),yo=a("strong"),Hi=c("num_processes"),Fi=c(" ("),wo=a("code"),Yi=c("int"),Ki=c(") \u2014 The total number of processes used for training."),Qi=l(),Qe=a("li"),Eo=a("strong"),Bi=c("optimizer_step_was_skipped"),Xi=c(" ("),Ao=a("code"),Ji=c("bool"),Zi=c(`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),ed=l(),Be=a("li"),xo=a("strong"),td=c("process_index"),rd=c(" ("),ko=a("code"),ad=c("int"),od=c(") \u2014 The overall index of the current process among all processes."),nd=l(),Xe=a("li"),Po=a("strong"),cd=c("state"),sd=c(" ("),sa=a("a"),ld=c("AcceleratorState"),id=c(") \u2014 The distributed setup state."),dd=l(),Je=a("li"),Do=a("strong"),pd=c("sync_gradients"),hd=c(" ("),To=a("code"),fd=c("bool"),md=c(") \u2014 Whether the gradients are currently being synced across all processes."),ud=l(),Ze=a("li"),Oo=a("strong"),gd=c("use_distributed"),_d=c(" ("),Io=a("code"),vd=c("bool"),bd=c(") \u2014 Whether the current configuration is for distributed training."),$d=l(),et=a("div"),u(rr.$$.fragment),yd=l(),So=a("p"),wd=c("A context manager that will lightly wrap around and perform gradient accumulation automatically"),Ed=l(),tt=a("div"),u(ar.$$.fragment),Ad=l(),Lo=a("p"),xd=c(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),kd=l(),rt=a("div"),u(or.$$.fragment),Pd=l(),pe=a("p"),Dd=c("Use "),No=a("code"),Td=c("accelerator.backward(loss)"),Od=c(" in lieu of "),jo=a("code"),Id=c("loss.backward()"),Sd=c("."),Ld=l(),at=a("div"),u(nr.$$.fragment),Nd=l(),cr=a("p"),jd=c("Alias for "),Co=a("code"),Cd=c("Accelerate.free_memory"),zd=c(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),qd=l(),ot=a("div"),u(sr.$$.fragment),Ud=l(),lr=a("p"),Gd=c("Should be used in place of "),zo=a("code"),Vd=c("torch.nn.utils.clip_grad_norm_"),Rd=c("."),Md=l(),nt=a("div"),u(ir.$$.fragment),Wd=l(),dr=a("p"),Hd=c("Should be used in place of "),qo=a("code"),Fd=c("torch.nn.utils.clip_grad_value_"),Yd=c("."),Kd=l(),ct=a("div"),u(pr.$$.fragment),Qd=l(),Uo=a("p"),Bd=c("Runs any special end training behaviors, such as stopping trackers on the main process only."),Xd=l(),st=a("div"),u(hr.$$.fragment),Jd=l(),Go=a("p"),Zd=c(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),ep=l(),G=a("div"),u(fr.$$.fragment),tp=l(),mr=a("p"),rp=c("Gather the values in "),Vo=a("em"),ap=c("tensor"),op=c(` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),np=l(),Ro=a("p"),cp=c(`Note:
This gather happens in all processes.`),sp=l(),lt=a("div"),u(ur.$$.fragment),lp=l(),gr=a("p"),ip=c("Gathers "),Mo=a("code"),dp=c("tensor"),pp=c(` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),hp=l(),it=a("div"),u(_r.$$.fragment),fp=l(),C=a("p"),mp=c("Returns a "),Wo=a("code"),up=c("tracker"),gp=c(" from "),Ho=a("code"),_p=c("self.trackers"),vp=c(" based on "),Fo=a("code"),bp=c("name"),$p=c(" on the main process only."),yp=l(),dt=a("div"),u(vr.$$.fragment),wp=l(),br=a("p"),Ep=c("Initializes a run for all trackers stored in "),Yo=a("code"),Ap=c("self.log_with"),xp=c(", potentially with starting configurations"),kp=l(),pt=a("div"),u($r.$$.fragment),Pp=l(),Ko=a("p"),Dp=c("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Tp=l(),V=a("div"),u(yr.$$.fragment),Op=l(),Qo=a("p"),Ip=c("Lets the local main process go inside a with block."),Sp=l(),Bo=a("p"),Lp=c("The other processes will enter the with block after the main process exits."),Np=l(),ht=a("div"),u(wr.$$.fragment),jp=l(),he=a("p"),Cp=c("Logs "),Xo=a("code"),zp=c("values"),qp=c(" to all stored trackers in "),Jo=a("code"),Up=c("self.trackers"),Gp=c(" on the main process only."),Vp=l(),R=a("div"),u(Er.$$.fragment),Rp=l(),Zo=a("p"),Mp=c("Lets the main process go first inside a with block."),Wp=l(),en=a("p"),Hp=c("The other processes will enter the with block after the main process exits."),Fp=l(),M=a("div"),u(Ar.$$.fragment),Yp=l(),xr=a("p"),Kp=c(`A context manager to disable gradient synchronizations across DDP processes by calling
`),tn=a("code"),Qp=c("torch.nn.parallel.DistributedDataParallel.no_sync"),Bp=c("."),Xp=l(),kr=a("p"),Jp=c("If "),rn=a("code"),Zp=c("model"),eh=c(" is not in DDP, this context manager does nothing"),th=l(),ft=a("div"),u(Pr.$$.fragment),rh=l(),an=a("p"),ah=c("A decorator that will run the decorated function on the local main process only."),oh=l(),mt=a("div"),u(Dr.$$.fragment),nh=l(),on=a("p"),ch=c("A decorator that will run the decorated function on a given local process index only."),sh=l(),ut=a("div"),u(Tr.$$.fragment),lh=l(),nn=a("p"),ih=c("A decorator that will run the decorated function on the main process only."),dh=l(),gt=a("div"),u(Or.$$.fragment),ph=l(),cn=a("p"),hh=c("A decorator that will run the decorated function on a given process index only."),fh=l(),_t=a("div"),u(Ir.$$.fragment),mh=l(),sn=a("p"),uh=c(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),gh=l(),L=a("div"),u(Sr.$$.fragment),_h=l(),Lr=a("p"),vh=c("Prepare all objects passed in "),ln=a("code"),bh=c("args"),$h=c(` for distributed training and mixed precision, then return them in the same
order.`),yh=l(),dn=a("p"),wh=c("Accepts the following type of objects:"),Eh=l(),fe=a("ul"),la=a("li"),pn=a("code"),Ah=c("torch.utils.data.DataLoader"),xh=c(": PyTorch Dataloader"),kh=l(),ia=a("li"),hn=a("code"),Ph=c("torch.nn.Module"),Dh=c(": PyTorch Module"),Th=l(),da=a("li"),fn=a("code"),Oh=c("torch.optim.Optimizer"),Ih=c(": PyTorch Optimizer"),Sh=l(),vt=a("div"),u(Nr.$$.fragment),Lh=l(),jr=a("p"),Nh=c("Use in replacement of "),mn=a("code"),jh=c("print()"),Ch=c(" to only print once per server."),zh=l(),W=a("div"),u(Cr.$$.fragment),qh=l(),me=a("p"),Uh=c("Reduce the values in "),un=a("em"),Gh=c("tensor"),Vh=c(" across all processes based on "),gn=a("em"),Rh=c("reduction"),Mh=c("."),Wh=l(),_n=a("p"),Hh=c(`Note:
All processes get the reduced value.`),Fh=l(),N=a("div"),u(zr.$$.fragment),Yh=l(),z=a("p"),Kh=c("Makes note of "),vn=a("code"),Qh=c("objects"),Bh=c(" and will save or load them in during "),bn=a("code"),Xh=c("save_state"),Jh=c(" or "),$n=a("code"),Zh=c("load_state"),ef=c("."),tf=l(),yn=a("p"),rf=c(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),af=l(),u(bt.$$.fragment),of=l(),$t=a("div"),u(qr.$$.fragment),nf=l(),Ur=a("p"),cf=c("Save the object passed to disk once per machine. Use in place of "),wn=a("code"),sf=c("torch.save"),lf=c("."),df=l(),yt=a("div"),u(Gr.$$.fragment),pf=l(),En=a("p"),hf=c("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),ff=l(),wt=a("div"),u(Vr.$$.fragment),mf=l(),An=a("p"),uf=c("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),gf=l(),Et=a("div"),u(Rr.$$.fragment),_f=l(),ue=a("p"),vf=c("Unwraps the "),xn=a("code"),bf=c("model"),$f=c(" from the additional layer possible added by "),pa=a("a"),yf=c("prepare()"),wf=c(`. Useful before saving
the model.`),Ef=l(),At=a("div"),u(Mr.$$.fragment),Af=l(),kn=a("p"),xf=c(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(t){const p=ig('[data-svelte="svelte-1phssyn"]',document.head);y=o(p,"META",{name:!0,content:!0}),p.forEach(r),D=i(t),E=o(t,"H1",{class:!0});var Wr=n(E);x=o(Wr,"A",{id:!0,class:!0,href:!0});var Pn=n(x);F=o(Pn,"SPAN",{});var Dn=n(F);g(T.$$.fragment,Dn),Dn.forEach(r),Pn.forEach(r),Ot=i(Wr),Y=o(Wr,"SPAN",{});var If=n(Y);K=s(If,"Accelerator"),If.forEach(r),Wr.forEach(r),ve=i(t),S=o(t,"P",{});var Pc=n(S);Q=s(Pc,"The "),P=o(Pc,"A",{href:!0});var Sf=n(P);Hr=s(Sf,"Accelerator"),Sf.forEach(r),Fr=s(Pc,` is the main class provided by \u{1F917} Accelerate.
It serves at the main entrypoint for the API.`),Pc.forEach(r),It=i(t),B=o(t,"H2",{class:!0});var Dc=n(B);be=o(Dc,"A",{id:!0,class:!0,href:!0});var Lf=n(be);xa=o(Lf,"SPAN",{});var Nf=n(xa);g(St.$$.fragment,Nf),Nf.forEach(r),Lf.forEach(r),Ls=i(Dc),ka=o(Dc,"SPAN",{});var jf=n(ka);Ns=s(jf,"Quick adaptation of your code"),jf.forEach(r),Dc.forEach(r),Vn=i(t),Yr=o(t,"P",{});var Cf=n(Yr);js=s(Cf,"To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:"),Cf.forEach(r),Rn=i(t),q=o(t,"OL",{});var ha=n(q);X=o(ha,"LI",{});var fa=n(X);Cs=s(fa,"Initialize an "),Kr=o(fa,"A",{href:!0});var zf=n(Kr);zs=s(zf,"Accelerator"),zf.forEach(r),qs=s(fa," object (that we will call "),Pa=o(fa,"CODE",{});var qf=n(Pa);Us=s(qf,"accelerator"),qf.forEach(r),Gs=s(fa," throughout this page) as early as possible in your script."),fa.forEach(r),Vs=i(ha),Lt=o(ha,"LI",{});var Tc=n(Lt);Rs=s(Tc,"Pass your dataloader(s), model(s), optimizer(s), and scheduler(s) to the "),Qr=o(Tc,"A",{href:!0});var Uf=n(Qr);Ms=s(Uf,"prepare()"),Uf.forEach(r),Ws=s(Tc," method."),Tc.forEach(r),Hs=i(ha),j=o(ha,"LI",{});var xt=n(j);Fs=s(xt,"Remove all the "),Da=o(xt,"CODE",{});var Gf=n(Da);Ys=s(Gf,".cuda()"),Gf.forEach(r),Ks=s(xt," or "),Ta=o(xt,"CODE",{});var Vf=n(Ta);Qs=s(Vf,".to(device)"),Vf.forEach(r),Bs=s(xt," from your code and let the "),Oa=o(xt,"CODE",{});var Rf=n(Oa);Xs=s(Rf,"accelerator"),Rf.forEach(r),Js=s(xt," handle the device placement for you."),xt.forEach(r),ha.forEach(r),Mn=i(t),g($e.$$.fragment,t),Wn=i(t),J=o(t,"OL",{start:!0});var Oc=n(J);ye=o(Oc,"LI",{});var Tn=n(ye);Zs=s(Tn,"Replace "),Ia=o(Tn,"CODE",{});var Mf=n(Ia);el=s(Mf,"loss.backward()"),Mf.forEach(r),tl=s(Tn," in your code with "),Sa=o(Tn,"CODE",{});var Wf=n(Sa);rl=s(Wf,"accelerator.backward(loss)"),Wf.forEach(r),Tn.forEach(r),al=i(Oc),Br=o(Oc,"LI",{});var kf=n(Br);ol=s(kf,"Gather your predictions and labels before storing them or using them for metric computation using "),Xr=o(kf,"A",{href:!0});var Hf=n(Xr);nl=s(Hf,"gather()"),Hf.forEach(r),kf.forEach(r),Oc.forEach(r),Hn=i(t),g(we.$$.fragment,t),Fn=i(t),Ee=o(t,"P",{});var Ic=n(Ee);cl=s(Ic,`In most cases this is all that is needed. The next section lists a few more advanced use cases and nice features
you should search for and replace by the corresponding methods of your `),La=o(Ic,"CODE",{});var Ff=n(La);sl=s(Ff,"accelerator"),Ff.forEach(r),ll=s(Ic,":"),Ic.forEach(r),Yn=i(t),Z=o(t,"H2",{class:!0});var Sc=n(Z);Ae=o(Sc,"A",{id:!0,class:!0,href:!0});var Yf=n(Ae);Na=o(Yf,"SPAN",{});var Kf=n(Na);g(Nt.$$.fragment,Kf),Kf.forEach(r),Yf.forEach(r),il=i(Sc),ja=o(Sc,"SPAN",{});var Qf=n(ja);dl=s(Qf,"Advanced recommendations"),Qf.forEach(r),Sc.forEach(r),Kn=i(t),ee=o(t,"H3",{class:!0});var Lc=n(ee);xe=o(Lc,"A",{id:!0,class:!0,href:!0});var Bf=n(xe);Ca=o(Bf,"SPAN",{});var Xf=n(Ca);g(jt.$$.fragment,Xf),Xf.forEach(r),Bf.forEach(r),pl=i(Lc),za=o(Lc,"SPAN",{});var Jf=n(za);hl=s(Jf,"Printing"),Jf.forEach(r),Lc.forEach(r),Qn=i(t),te=o(t,"P",{});var On=n(te);qa=o(On,"CODE",{});var Zf=n(qa);fl=s(Zf,"print"),Zf.forEach(r),ml=s(On," statements should be replaced by "),Jr=o(On,"A",{href:!0});var em=n(Jr);ul=s(em,"print()"),em.forEach(r),gl=s(On," to be printed once per process"),On.forEach(r),Bn=i(t),g(Ct.$$.fragment,t),Xn=i(t),re=o(t,"H3",{class:!0});var Nc=n(re);ke=o(Nc,"A",{id:!0,class:!0,href:!0});var tm=n(ke);Ua=o(tm,"SPAN",{});var rm=n(Ua);g(zt.$$.fragment,rm),rm.forEach(r),tm.forEach(r),_l=i(Nc),Ga=o(Nc,"SPAN",{});var am=n(Ga);vl=s(am,"Executing processes"),am.forEach(r),Nc.forEach(r),Jn=i(t),ae=o(t,"H4",{class:!0});var jc=n(ae);Pe=o(jc,"A",{id:!0,class:!0,href:!0});var om=n(Pe);Va=o(om,"SPAN",{});var nm=n(Va);g(qt.$$.fragment,nm),nm.forEach(r),om.forEach(r),bl=i(jc),Ra=o(jc,"SPAN",{});var cm=n(Ra);$l=s(cm,"Once on a single server"),cm.forEach(r),jc.forEach(r),Zn=i(t),De=o(t,"P",{});var Cc=n(De);yl=s(Cc,"For statements that should be executed once per server, use "),Ma=o(Cc,"CODE",{});var sm=n(Ma);wl=s(sm,"is_local_main_process"),sm.forEach(r),El=s(Cc,":"),Cc.forEach(r),ec=i(t),g(Ut.$$.fragment,t),tc=i(t),Te=o(t,"P",{});var zc=n(Te);Al=s(zc,"A function can be wrapped using the "),Zr=o(zc,"A",{href:!0});var lm=n(Zr);xl=s(lm,"on_local_main_process()"),lm.forEach(r),kl=s(zc,` function to achieve the same
behavior on a function\u2019s execution:`),zc.forEach(r),rc=i(t),g(Gt.$$.fragment,t),ac=i(t),oe=o(t,"H4",{class:!0});var qc=n(oe);Oe=o(qc,"A",{id:!0,class:!0,href:!0});var im=n(Oe);Wa=o(im,"SPAN",{});var dm=n(Wa);g(Vt.$$.fragment,dm),dm.forEach(r),im.forEach(r),Pl=i(qc),Ha=o(qc,"SPAN",{});var pm=n(Ha);Dl=s(pm,"Only ever once across all servers"),pm.forEach(r),qc.forEach(r),oc=i(t),Ie=o(t,"P",{});var Uc=n(Ie);Tl=s(Uc,"For statements that should only ever be executed once, use "),Fa=o(Uc,"CODE",{});var hm=n(Fa);Ol=s(hm,"is_main_process"),hm.forEach(r),Il=s(Uc,":"),Uc.forEach(r),nc=i(t),g(Rt.$$.fragment,t),cc=i(t),Se=o(t,"P",{});var Gc=n(Se);Sl=s(Gc,"A function can be wrapped using the "),ea=o(Gc,"A",{href:!0});var fm=n(ea);Ll=s(fm,"on_main_process()"),fm.forEach(r),Nl=s(Gc,` function to achieve the same
behavior on a function\u2019s execution:`),Gc.forEach(r),sc=i(t),g(Mt.$$.fragment,t),lc=i(t),ne=o(t,"H4",{class:!0});var Vc=n(ne);Le=o(Vc,"A",{id:!0,class:!0,href:!0});var mm=n(Le);Ya=o(mm,"SPAN",{});var um=n(Ya);g(Wt.$$.fragment,um),um.forEach(r),mm.forEach(r),jl=i(Vc),Ka=o(Vc,"SPAN",{});var gm=n(Ka);Cl=s(gm,"On specific processes"),gm.forEach(r),Vc.forEach(r),ic=i(t),ta=o(t,"P",{});var _m=n(ta);zl=s(_m,`If a function should be ran on a specific overall or local process index, there are similar decorators
to achieve this:`),_m.forEach(r),dc=i(t),g(Ht.$$.fragment,t),pc=i(t),g(Ft.$$.fragment,t),hc=i(t),ce=o(t,"H3",{class:!0});var Rc=n(ce);Ne=o(Rc,"A",{id:!0,class:!0,href:!0});var vm=n(Ne);Qa=o(vm,"SPAN",{});var bm=n(Qa);g(Yt.$$.fragment,bm),bm.forEach(r),vm.forEach(r),ql=i(Rc),Ba=o(Rc,"SPAN",{});var $m=n(Ba);Ul=s($m,"Synchronicity control"),$m.forEach(r),Rc.forEach(r),fc=i(t),je=o(t,"P",{});var Mc=n(je);Gl=s(Mc,"Use "),ra=o(Mc,"A",{href:!0});var ym=n(ra);Vl=s(ym,"wait_for_everyone()"),ym.forEach(r),Rl=s(Mc," to make sure all processes join that point before continuing. (Useful before a model save for instance)"),Mc.forEach(r),mc=i(t),se=o(t,"H3",{class:!0});var Wc=n(se);Ce=o(Wc,"A",{id:!0,class:!0,href:!0});var wm=n(Ce);Xa=o(wm,"SPAN",{});var Em=n(Xa);g(Kt.$$.fragment,Em),Em.forEach(r),wm.forEach(r),Ml=i(Wc),Ja=o(Wc,"SPAN",{});var Am=n(Ja);Wl=s(Am,"Saving and loading"),Am.forEach(r),Wc.forEach(r),uc=i(t),ze=o(t,"P",{});var Hc=n(ze);Hl=s(Hc,"Use "),aa=o(Hc,"A",{href:!0});var xm=n(aa);Fl=s(xm,"unwrap_model()"),xm.forEach(r),Yl=s(Hc," before saving to remove all special model wrappers added during the distributed process."),Hc.forEach(r),gc=i(t),g(Qt.$$.fragment,t),_c=i(t),U=o(t,"P",{});var ma=n(U);Kl=s(ma,"Use "),oa=o(ma,"A",{href:!0});var km=n(oa);Ql=s(km,"save()"),km.forEach(r),Bl=s(ma," instead of "),Za=o(ma,"CODE",{});var Pm=n(Za);Xl=s(Pm,"torch.save"),Pm.forEach(r),Jl=s(ma,":"),ma.forEach(r),vc=i(t),g(Bt.$$.fragment,t),bc=i(t),le=o(t,"H3",{class:!0});var Fc=n(le);qe=o(Fc,"A",{id:!0,class:!0,href:!0});var Dm=n(qe);eo=o(Dm,"SPAN",{});var Tm=n(eo);g(Xt.$$.fragment,Tm),Tm.forEach(r),Dm.forEach(r),Zl=i(Fc),to=o(Fc,"SPAN",{});var Om=n(to);ei=s(Om,"Operations"),Om.forEach(r),Fc.forEach(r),$c=i(t),O=o(t,"P",{});var ge=n(O);ti=s(ge,"Use "),Ue=o(ge,"A",{href:!0});var Yc=n(Ue);ri=s(Yc,"clip"),ro=o(Yc,"EM",{});var Im=n(ro);ai=s(Im,"grad_norm"),Im.forEach(r),oi=s(Yc,"()"),Yc.forEach(r),ni=s(ge," instead of "),ao=o(ge,"CODE",{});var Sm=n(ao);ci=s(Sm,"torch.nn.utils.clip_grad_norm_"),Sm.forEach(r),si=s(ge," and "),Ge=o(ge,"A",{href:!0});var Kc=n(Ge);li=s(Kc,"clip"),oo=o(Kc,"EM",{});var Lm=n(oo);ii=s(Lm,"grad_value"),Lm.forEach(r),di=s(Kc,"()"),Kc.forEach(r),pi=s(ge," instead of "),no=o(ge,"CODE",{});var Nm=n(no);hi=s(Nm,"torch.nn.utils.clip_grad_value"),Nm.forEach(r),ge.forEach(r),yc=i(t),ie=o(t,"H3",{class:!0});var Qc=n(ie);Ve=o(Qc,"A",{id:!0,class:!0,href:!0});var jm=n(Ve);co=o(jm,"SPAN",{});var Cm=n(co);g(Jt.$$.fragment,Cm),Cm.forEach(r),jm.forEach(r),fi=i(Qc),so=o(Qc,"SPAN",{});var zm=n(so);mi=s(zm,"Gradient Accumulation"),zm.forEach(r),Qc.forEach(r),wc=i(t),Re=o(t,"P",{});var Bc=n(Re);ui=s(Bc,"To perform gradient accumulation use "),na=o(Bc,"A",{href:!0});var qm=n(na);gi=s(qm,"accumulate()"),qm.forEach(r),_i=s(Bc,` and specify a gradient_accumulation_steps.
This will also automatically ensure the gradients are synced or unsynced when on
multi-device training, check if the step should actually be performed, and auto-scale the loss:`),Bc.forEach(r),Ec=i(t),g(Zt.$$.fragment,t),Ac=i(t),de=o(t,"H2",{class:!0});var Xc=n(de);Me=o(Xc,"A",{id:!0,class:!0,href:!0});var Um=n(Me);lo=o(Um,"SPAN",{});var Gm=n(lo);g(er.$$.fragment,Gm),Gm.forEach(r),Um.forEach(r),vi=i(Xc),io=o(Xc,"SPAN",{});var Vm=n(io);bi=s(Vm,"Overall API documentation:"),Vm.forEach(r),Xc.forEach(r),xc=i(t),h=o(t,"DIV",{class:!0});var m=n(h);g(tr.$$.fragment,m),$i=i(m),po=o(m,"P",{});var Rm=n(po);yi=s(Rm,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Rm.forEach(r),wi=i(m),ho=o(m,"P",{});var Mm=n(ho);fo=o(Mm,"STRONG",{});var Wm=n(fo);Ei=s(Wm,"Attributes:"),Wm.forEach(r),Mm.forEach(r),Ai=i(m),A=o(m,"UL",{});var k=n(A);We=o(k,"LI",{});var In=n(We);mo=o(In,"STRONG",{});var Hm=n(mo);xi=s(Hm,"device"),Hm.forEach(r),ki=s(In," ("),uo=o(In,"CODE",{});var Fm=n(uo);Pi=s(Fm,"torch.device"),Fm.forEach(r),Di=s(In,") \u2014 The device to use."),In.forEach(r),Ti=i(k),He=o(k,"LI",{});var Sn=n(He);go=o(Sn,"STRONG",{});var Ym=n(go);Oi=s(Ym,"distributed_type"),Ym.forEach(r),Ii=s(Sn," ("),ca=o(Sn,"A",{href:!0});var Km=n(ca);Si=s(Km,"DistributedType"),Km.forEach(r),Li=s(Sn,") \u2014 The distributed training configuration."),Sn.forEach(r),Ni=i(k),Fe=o(k,"LI",{});var Ln=n(Fe);_o=o(Ln,"STRONG",{});var Qm=n(_o);ji=s(Qm,"local_process_index"),Qm.forEach(r),Ci=s(Ln," ("),vo=o(Ln,"CODE",{});var Bm=n(vo);zi=s(Bm,"int"),Bm.forEach(r),qi=s(Ln,") \u2014 The process index on the current machine."),Ln.forEach(r),Ui=i(k),Ye=o(k,"LI",{});var Nn=n(Ye);bo=o(Nn,"STRONG",{});var Xm=n(bo);Gi=s(Xm,"mixed_precision"),Xm.forEach(r),Vi=s(Nn," ("),$o=o(Nn,"CODE",{});var Jm=n($o);Ri=s(Jm,"str"),Jm.forEach(r),Mi=s(Nn,") \u2014 The configured mixed precision mode."),Nn.forEach(r),Wi=i(k),Ke=o(k,"LI",{});var jn=n(Ke);yo=o(jn,"STRONG",{});var Zm=n(yo);Hi=s(Zm,"num_processes"),Zm.forEach(r),Fi=s(jn," ("),wo=o(jn,"CODE",{});var eu=n(wo);Yi=s(eu,"int"),eu.forEach(r),Ki=s(jn,") \u2014 The total number of processes used for training."),jn.forEach(r),Qi=i(k),Qe=o(k,"LI",{});var Cn=n(Qe);Eo=o(Cn,"STRONG",{});var tu=n(Eo);Bi=s(tu,"optimizer_step_was_skipped"),tu.forEach(r),Xi=s(Cn," ("),Ao=o(Cn,"CODE",{});var ru=n(Ao);Ji=s(ru,"bool"),ru.forEach(r),Zi=s(Cn,`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),Cn.forEach(r),ed=i(k),Be=o(k,"LI",{});var zn=n(Be);xo=o(zn,"STRONG",{});var au=n(xo);td=s(au,"process_index"),au.forEach(r),rd=s(zn," ("),ko=o(zn,"CODE",{});var ou=n(ko);ad=s(ou,"int"),ou.forEach(r),od=s(zn,") \u2014 The overall index of the current process among all processes."),zn.forEach(r),nd=i(k),Xe=o(k,"LI",{});var qn=n(Xe);Po=o(qn,"STRONG",{});var nu=n(Po);cd=s(nu,"state"),nu.forEach(r),sd=s(qn," ("),sa=o(qn,"A",{href:!0});var cu=n(sa);ld=s(cu,"AcceleratorState"),cu.forEach(r),id=s(qn,") \u2014 The distributed setup state."),qn.forEach(r),dd=i(k),Je=o(k,"LI",{});var Un=n(Je);Do=o(Un,"STRONG",{});var su=n(Do);pd=s(su,"sync_gradients"),su.forEach(r),hd=s(Un," ("),To=o(Un,"CODE",{});var lu=n(To);fd=s(lu,"bool"),lu.forEach(r),md=s(Un,") \u2014 Whether the gradients are currently being synced across all processes."),Un.forEach(r),ud=i(k),Ze=o(k,"LI",{});var Gn=n(Ze);Oo=o(Gn,"STRONG",{});var iu=n(Oo);gd=s(iu,"use_distributed"),iu.forEach(r),_d=s(Gn," ("),Io=o(Gn,"CODE",{});var du=n(Io);vd=s(du,"bool"),du.forEach(r),bd=s(Gn,") \u2014 Whether the current configuration is for distributed training."),Gn.forEach(r),k.forEach(r),$d=i(m),et=o(m,"DIV",{class:!0});var Jc=n(et);g(rr.$$.fragment,Jc),yd=i(Jc),So=o(Jc,"P",{});var pu=n(So);wd=s(pu,"A context manager that will lightly wrap around and perform gradient accumulation automatically"),pu.forEach(r),Jc.forEach(r),Ed=i(m),tt=o(m,"DIV",{class:!0});var Zc=n(tt);g(ar.$$.fragment,Zc),Ad=i(Zc),Lo=o(Zc,"P",{});var hu=n(Lo);xd=s(hu,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),hu.forEach(r),Zc.forEach(r),kd=i(m),rt=o(m,"DIV",{class:!0});var es=n(rt);g(or.$$.fragment,es),Pd=i(es),pe=o(es,"P",{});var ua=n(pe);Dd=s(ua,"Use "),No=o(ua,"CODE",{});var fu=n(No);Td=s(fu,"accelerator.backward(loss)"),fu.forEach(r),Od=s(ua," in lieu of "),jo=o(ua,"CODE",{});var mu=n(jo);Id=s(mu,"loss.backward()"),mu.forEach(r),Sd=s(ua,"."),ua.forEach(r),es.forEach(r),Ld=i(m),at=o(m,"DIV",{class:!0});var ts=n(at);g(nr.$$.fragment,ts),Nd=i(ts),cr=o(ts,"P",{});var rs=n(cr);jd=s(rs,"Alias for "),Co=o(rs,"CODE",{});var uu=n(Co);Cd=s(uu,"Accelerate.free_memory"),uu.forEach(r),zd=s(rs,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),rs.forEach(r),ts.forEach(r),qd=i(m),ot=o(m,"DIV",{class:!0});var as=n(ot);g(sr.$$.fragment,as),Ud=i(as),lr=o(as,"P",{});var os=n(lr);Gd=s(os,"Should be used in place of "),zo=o(os,"CODE",{});var gu=n(zo);Vd=s(gu,"torch.nn.utils.clip_grad_norm_"),gu.forEach(r),Rd=s(os,"."),os.forEach(r),as.forEach(r),Md=i(m),nt=o(m,"DIV",{class:!0});var ns=n(nt);g(ir.$$.fragment,ns),Wd=i(ns),dr=o(ns,"P",{});var cs=n(dr);Hd=s(cs,"Should be used in place of "),qo=o(cs,"CODE",{});var _u=n(qo);Fd=s(_u,"torch.nn.utils.clip_grad_value_"),_u.forEach(r),Yd=s(cs,"."),cs.forEach(r),ns.forEach(r),Kd=i(m),ct=o(m,"DIV",{class:!0});var ss=n(ct);g(pr.$$.fragment,ss),Qd=i(ss),Uo=o(ss,"P",{});var vu=n(Uo);Bd=s(vu,"Runs any special end training behaviors, such as stopping trackers on the main process only."),vu.forEach(r),ss.forEach(r),Xd=i(m),st=o(m,"DIV",{class:!0});var ls=n(st);g(hr.$$.fragment,ls),Jd=i(ls),Go=o(ls,"P",{});var bu=n(Go);Zd=s(bu,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),bu.forEach(r),ls.forEach(r),ep=i(m),G=o(m,"DIV",{class:!0});var ga=n(G);g(fr.$$.fragment,ga),tp=i(ga),mr=o(ga,"P",{});var is=n(mr);rp=s(is,"Gather the values in "),Vo=o(is,"EM",{});var $u=n(Vo);ap=s($u,"tensor"),$u.forEach(r),op=s(is,` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),is.forEach(r),np=i(ga),Ro=o(ga,"P",{});var yu=n(Ro);cp=s(yu,`Note:
This gather happens in all processes.`),yu.forEach(r),ga.forEach(r),sp=i(m),lt=o(m,"DIV",{class:!0});var ds=n(lt);g(ur.$$.fragment,ds),lp=i(ds),gr=o(ds,"P",{});var ps=n(gr);ip=s(ps,"Gathers "),Mo=o(ps,"CODE",{});var wu=n(Mo);dp=s(wu,"tensor"),wu.forEach(r),pp=s(ps,` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),ps.forEach(r),ds.forEach(r),hp=i(m),it=o(m,"DIV",{class:!0});var hs=n(it);g(_r.$$.fragment,hs),fp=i(hs),C=o(hs,"P",{});var kt=n(C);mp=s(kt,"Returns a "),Wo=o(kt,"CODE",{});var Eu=n(Wo);up=s(Eu,"tracker"),Eu.forEach(r),gp=s(kt," from "),Ho=o(kt,"CODE",{});var Au=n(Ho);_p=s(Au,"self.trackers"),Au.forEach(r),vp=s(kt," based on "),Fo=o(kt,"CODE",{});var xu=n(Fo);bp=s(xu,"name"),xu.forEach(r),$p=s(kt," on the main process only."),kt.forEach(r),hs.forEach(r),yp=i(m),dt=o(m,"DIV",{class:!0});var fs=n(dt);g(vr.$$.fragment,fs),wp=i(fs),br=o(fs,"P",{});var ms=n(br);Ep=s(ms,"Initializes a run for all trackers stored in "),Yo=o(ms,"CODE",{});var ku=n(Yo);Ap=s(ku,"self.log_with"),ku.forEach(r),xp=s(ms,", potentially with starting configurations"),ms.forEach(r),fs.forEach(r),kp=i(m),pt=o(m,"DIV",{class:!0});var us=n(pt);g($r.$$.fragment,us),Pp=i(us),Ko=o(us,"P",{});var Pu=n(Ko);Dp=s(Pu,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Pu.forEach(r),us.forEach(r),Tp=i(m),V=o(m,"DIV",{class:!0});var _a=n(V);g(yr.$$.fragment,_a),Op=i(_a),Qo=o(_a,"P",{});var Du=n(Qo);Ip=s(Du,"Lets the local main process go inside a with block."),Du.forEach(r),Sp=i(_a),Bo=o(_a,"P",{});var Tu=n(Bo);Lp=s(Tu,"The other processes will enter the with block after the main process exits."),Tu.forEach(r),_a.forEach(r),Np=i(m),ht=o(m,"DIV",{class:!0});var gs=n(ht);g(wr.$$.fragment,gs),jp=i(gs),he=o(gs,"P",{});var va=n(he);Cp=s(va,"Logs "),Xo=o(va,"CODE",{});var Ou=n(Xo);zp=s(Ou,"values"),Ou.forEach(r),qp=s(va," to all stored trackers in "),Jo=o(va,"CODE",{});var Iu=n(Jo);Up=s(Iu,"self.trackers"),Iu.forEach(r),Gp=s(va," on the main process only."),va.forEach(r),gs.forEach(r),Vp=i(m),R=o(m,"DIV",{class:!0});var ba=n(R);g(Er.$$.fragment,ba),Rp=i(ba),Zo=o(ba,"P",{});var Su=n(Zo);Mp=s(Su,"Lets the main process go first inside a with block."),Su.forEach(r),Wp=i(ba),en=o(ba,"P",{});var Lu=n(en);Hp=s(Lu,"The other processes will enter the with block after the main process exits."),Lu.forEach(r),ba.forEach(r),Fp=i(m),M=o(m,"DIV",{class:!0});var $a=n(M);g(Ar.$$.fragment,$a),Yp=i($a),xr=o($a,"P",{});var _s=n(xr);Kp=s(_s,`A context manager to disable gradient synchronizations across DDP processes by calling
`),tn=o(_s,"CODE",{});var Nu=n(tn);Qp=s(Nu,"torch.nn.parallel.DistributedDataParallel.no_sync"),Nu.forEach(r),Bp=s(_s,"."),_s.forEach(r),Xp=i($a),kr=o($a,"P",{});var vs=n(kr);Jp=s(vs,"If "),rn=o(vs,"CODE",{});var ju=n(rn);Zp=s(ju,"model"),ju.forEach(r),eh=s(vs," is not in DDP, this context manager does nothing"),vs.forEach(r),$a.forEach(r),th=i(m),ft=o(m,"DIV",{class:!0});var bs=n(ft);g(Pr.$$.fragment,bs),rh=i(bs),an=o(bs,"P",{});var Cu=n(an);ah=s(Cu,"A decorator that will run the decorated function on the local main process only."),Cu.forEach(r),bs.forEach(r),oh=i(m),mt=o(m,"DIV",{class:!0});var $s=n(mt);g(Dr.$$.fragment,$s),nh=i($s),on=o($s,"P",{});var zu=n(on);ch=s(zu,"A decorator that will run the decorated function on a given local process index only."),zu.forEach(r),$s.forEach(r),sh=i(m),ut=o(m,"DIV",{class:!0});var ys=n(ut);g(Tr.$$.fragment,ys),lh=i(ys),nn=o(ys,"P",{});var qu=n(nn);ih=s(qu,"A decorator that will run the decorated function on the main process only."),qu.forEach(r),ys.forEach(r),dh=i(m),gt=o(m,"DIV",{class:!0});var ws=n(gt);g(Or.$$.fragment,ws),ph=i(ws),cn=o(ws,"P",{});var Uu=n(cn);hh=s(Uu,"A decorator that will run the decorated function on a given process index only."),Uu.forEach(r),ws.forEach(r),fh=i(m),_t=o(m,"DIV",{class:!0});var Es=n(_t);g(Ir.$$.fragment,Es),mh=i(Es),sn=o(Es,"P",{});var Gu=n(sn);uh=s(Gu,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),Gu.forEach(r),Es.forEach(r),gh=i(m),L=o(m,"DIV",{class:!0});var Pt=n(L);g(Sr.$$.fragment,Pt),_h=i(Pt),Lr=o(Pt,"P",{});var As=n(Lr);vh=s(As,"Prepare all objects passed in "),ln=o(As,"CODE",{});var Vu=n(ln);bh=s(Vu,"args"),Vu.forEach(r),$h=s(As,` for distributed training and mixed precision, then return them in the same
order.`),As.forEach(r),yh=i(Pt),dn=o(Pt,"P",{});var Ru=n(dn);wh=s(Ru,"Accepts the following type of objects:"),Ru.forEach(r),Eh=i(Pt),fe=o(Pt,"UL",{});var ya=n(fe);la=o(ya,"LI",{});var Pf=n(la);pn=o(Pf,"CODE",{});var Mu=n(pn);Ah=s(Mu,"torch.utils.data.DataLoader"),Mu.forEach(r),xh=s(Pf,": PyTorch Dataloader"),Pf.forEach(r),kh=i(ya),ia=o(ya,"LI",{});var Df=n(ia);hn=o(Df,"CODE",{});var Wu=n(hn);Ph=s(Wu,"torch.nn.Module"),Wu.forEach(r),Dh=s(Df,": PyTorch Module"),Df.forEach(r),Th=i(ya),da=o(ya,"LI",{});var Tf=n(da);fn=o(Tf,"CODE",{});var Hu=n(fn);Oh=s(Hu,"torch.optim.Optimizer"),Hu.forEach(r),Ih=s(Tf,": PyTorch Optimizer"),Tf.forEach(r),ya.forEach(r),Pt.forEach(r),Sh=i(m),vt=o(m,"DIV",{class:!0});var xs=n(vt);g(Nr.$$.fragment,xs),Lh=i(xs),jr=o(xs,"P",{});var ks=n(jr);Nh=s(ks,"Use in replacement of "),mn=o(ks,"CODE",{});var Fu=n(mn);jh=s(Fu,"print()"),Fu.forEach(r),Ch=s(ks," to only print once per server."),ks.forEach(r),xs.forEach(r),zh=i(m),W=o(m,"DIV",{class:!0});var wa=n(W);g(Cr.$$.fragment,wa),qh=i(wa),me=o(wa,"P",{});var Ea=n(me);Uh=s(Ea,"Reduce the values in "),un=o(Ea,"EM",{});var Yu=n(un);Gh=s(Yu,"tensor"),Yu.forEach(r),Vh=s(Ea," across all processes based on "),gn=o(Ea,"EM",{});var Ku=n(gn);Rh=s(Ku,"reduction"),Ku.forEach(r),Mh=s(Ea,"."),Ea.forEach(r),Wh=i(wa),_n=o(wa,"P",{});var Qu=n(_n);Hh=s(Qu,`Note:
All processes get the reduced value.`),Qu.forEach(r),wa.forEach(r),Fh=i(m),N=o(m,"DIV",{class:!0});var Dt=n(N);g(zr.$$.fragment,Dt),Yh=i(Dt),z=o(Dt,"P",{});var Tt=n(z);Kh=s(Tt,"Makes note of "),vn=o(Tt,"CODE",{});var Bu=n(vn);Qh=s(Bu,"objects"),Bu.forEach(r),Bh=s(Tt," and will save or load them in during "),bn=o(Tt,"CODE",{});var Xu=n(bn);Xh=s(Xu,"save_state"),Xu.forEach(r),Jh=s(Tt," or "),$n=o(Tt,"CODE",{});var Ju=n($n);Zh=s(Ju,"load_state"),Ju.forEach(r),ef=s(Tt,"."),Tt.forEach(r),tf=i(Dt),yn=o(Dt,"P",{});var Zu=n(yn);rf=s(Zu,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Zu.forEach(r),af=i(Dt),g(bt.$$.fragment,Dt),Dt.forEach(r),of=i(m),$t=o(m,"DIV",{class:!0});var Ps=n($t);g(qr.$$.fragment,Ps),nf=i(Ps),Ur=o(Ps,"P",{});var Ds=n(Ur);cf=s(Ds,"Save the object passed to disk once per machine. Use in place of "),wn=o(Ds,"CODE",{});var eg=n(wn);sf=s(eg,"torch.save"),eg.forEach(r),lf=s(Ds,"."),Ds.forEach(r),Ps.forEach(r),df=i(m),yt=o(m,"DIV",{class:!0});var Ts=n(yt);g(Gr.$$.fragment,Ts),pf=i(Ts),En=o(Ts,"P",{});var tg=n(En);hf=s(tg,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),tg.forEach(r),Ts.forEach(r),ff=i(m),wt=o(m,"DIV",{class:!0});var Os=n(wt);g(Vr.$$.fragment,Os),mf=i(Os),An=o(Os,"P",{});var rg=n(An);uf=s(rg,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),rg.forEach(r),Os.forEach(r),gf=i(m),Et=o(m,"DIV",{class:!0});var Is=n(Et);g(Rr.$$.fragment,Is),_f=i(Is),ue=o(Is,"P",{});var Aa=n(ue);vf=s(Aa,"Unwraps the "),xn=o(Aa,"CODE",{});var ag=n(xn);bf=s(ag,"model"),ag.forEach(r),$f=s(Aa," from the additional layer possible added by "),pa=o(Aa,"A",{href:!0});var og=n(pa);yf=s(og,"prepare()"),og.forEach(r),wf=s(Aa,`. Useful before saving
the model.`),Aa.forEach(r),Is.forEach(r),Ef=i(m),At=o(m,"DIV",{class:!0});var Ss=n(At);g(Mr.$$.fragment,Ss),Af=i(Ss),kn=o(Ss,"P",{});var ng=n(kn);xf=s(ng,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),ng.forEach(r),Ss.forEach(r),m.forEach(r),this.h()},h(){d(y,"name","hf:doc:metadata"),d(y,"content",JSON.stringify(ug)),d(x,"id","accelerator"),d(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x,"href","#accelerator"),d(E,"class","relative group"),d(P,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator"),d(be,"id","quick-adaptation-of-your-code"),d(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(be,"href","#quick-adaptation-of-your-code"),d(B,"class","relative group"),d(Kr,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator"),d(Qr,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Xr,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.gather"),d(J,"start","4"),d(Ae,"id","advanced-recommendations"),d(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ae,"href","#advanced-recommendations"),d(Z,"class","relative group"),d(xe,"id","printing"),d(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xe,"href","#printing"),d(ee,"class","relative group"),d(Jr,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.print"),d(ke,"id","executing-processes"),d(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ke,"href","#executing-processes"),d(re,"class","relative group"),d(Pe,"id","once-on-a-single-server"),d(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pe,"href","#once-on-a-single-server"),d(ae,"class","relative group"),d(Zr,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.on_local_main_process"),d(Oe,"id","only-ever-once-across-all-servers"),d(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oe,"href","#only-ever-once-across-all-servers"),d(oe,"class","relative group"),d(ea,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.on_main_process"),d(Le,"id","on-specific-processes"),d(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Le,"href","#on-specific-processes"),d(ne,"class","relative group"),d(Ne,"id","synchronicity-control"),d(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ne,"href","#synchronicity-control"),d(ce,"class","relative group"),d(ra,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.wait_for_everyone"),d(Ce,"id","saving-and-loading"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#saving-and-loading"),d(se,"class","relative group"),d(aa,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.unwrap_model"),d(oa,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.save"),d(qe,"id","operations"),d(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qe,"href","#operations"),d(le,"class","relative group"),d(Ue,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.clip_grad_norm_"),d(Ge,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.clip_grad_value_"),d(Ve,"id","gradient-accumulation"),d(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ve,"href","#gradient-accumulation"),d(ie,"class","relative group"),d(na,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.accumulate"),d(Me,"id","accelerate.Accelerator"),d(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Me,"href","#accelerate.Accelerator"),d(de,"class","relative group"),d(ca,"href","/docs/accelerate/pr_607/en/package_reference/utilities#accelerate.DistributedType"),d(sa,"href","/docs/accelerate/pr_607/en/package_reference/state#accelerate.state.AcceleratorState"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pa,"href","/docs/accelerate/pr_607/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,p){e(document.head,y),f(t,D,p),f(t,E,p),e(E,x),e(x,F),_(T,F,null),e(E,Ot),e(E,Y),e(Y,K),f(t,ve,p),f(t,S,p),e(S,Q),e(S,P),e(P,Hr),e(S,Fr),f(t,It,p),f(t,B,p),e(B,be),e(be,xa),_(St,xa,null),e(B,Ls),e(B,ka),e(ka,Ns),f(t,Vn,p),f(t,Yr,p),e(Yr,js),f(t,Rn,p),f(t,q,p),e(q,X),e(X,Cs),e(X,Kr),e(Kr,zs),e(X,qs),e(X,Pa),e(Pa,Us),e(X,Gs),e(q,Vs),e(q,Lt),e(Lt,Rs),e(Lt,Qr),e(Qr,Ms),e(Lt,Ws),e(q,Hs),e(q,j),e(j,Fs),e(j,Da),e(Da,Ys),e(j,Ks),e(j,Ta),e(Ta,Qs),e(j,Bs),e(j,Oa),e(Oa,Xs),e(j,Js),f(t,Mn,p),_($e,t,p),f(t,Wn,p),f(t,J,p),e(J,ye),e(ye,Zs),e(ye,Ia),e(Ia,el),e(ye,tl),e(ye,Sa),e(Sa,rl),e(J,al),e(J,Br),e(Br,ol),e(Br,Xr),e(Xr,nl),f(t,Hn,p),_(we,t,p),f(t,Fn,p),f(t,Ee,p),e(Ee,cl),e(Ee,La),e(La,sl),e(Ee,ll),f(t,Yn,p),f(t,Z,p),e(Z,Ae),e(Ae,Na),_(Nt,Na,null),e(Z,il),e(Z,ja),e(ja,dl),f(t,Kn,p),f(t,ee,p),e(ee,xe),e(xe,Ca),_(jt,Ca,null),e(ee,pl),e(ee,za),e(za,hl),f(t,Qn,p),f(t,te,p),e(te,qa),e(qa,fl),e(te,ml),e(te,Jr),e(Jr,ul),e(te,gl),f(t,Bn,p),_(Ct,t,p),f(t,Xn,p),f(t,re,p),e(re,ke),e(ke,Ua),_(zt,Ua,null),e(re,_l),e(re,Ga),e(Ga,vl),f(t,Jn,p),f(t,ae,p),e(ae,Pe),e(Pe,Va),_(qt,Va,null),e(ae,bl),e(ae,Ra),e(Ra,$l),f(t,Zn,p),f(t,De,p),e(De,yl),e(De,Ma),e(Ma,wl),e(De,El),f(t,ec,p),_(Ut,t,p),f(t,tc,p),f(t,Te,p),e(Te,Al),e(Te,Zr),e(Zr,xl),e(Te,kl),f(t,rc,p),_(Gt,t,p),f(t,ac,p),f(t,oe,p),e(oe,Oe),e(Oe,Wa),_(Vt,Wa,null),e(oe,Pl),e(oe,Ha),e(Ha,Dl),f(t,oc,p),f(t,Ie,p),e(Ie,Tl),e(Ie,Fa),e(Fa,Ol),e(Ie,Il),f(t,nc,p),_(Rt,t,p),f(t,cc,p),f(t,Se,p),e(Se,Sl),e(Se,ea),e(ea,Ll),e(Se,Nl),f(t,sc,p),_(Mt,t,p),f(t,lc,p),f(t,ne,p),e(ne,Le),e(Le,Ya),_(Wt,Ya,null),e(ne,jl),e(ne,Ka),e(Ka,Cl),f(t,ic,p),f(t,ta,p),e(ta,zl),f(t,dc,p),_(Ht,t,p),f(t,pc,p),_(Ft,t,p),f(t,hc,p),f(t,ce,p),e(ce,Ne),e(Ne,Qa),_(Yt,Qa,null),e(ce,ql),e(ce,Ba),e(Ba,Ul),f(t,fc,p),f(t,je,p),e(je,Gl),e(je,ra),e(ra,Vl),e(je,Rl),f(t,mc,p),f(t,se,p),e(se,Ce),e(Ce,Xa),_(Kt,Xa,null),e(se,Ml),e(se,Ja),e(Ja,Wl),f(t,uc,p),f(t,ze,p),e(ze,Hl),e(ze,aa),e(aa,Fl),e(ze,Yl),f(t,gc,p),_(Qt,t,p),f(t,_c,p),f(t,U,p),e(U,Kl),e(U,oa),e(oa,Ql),e(U,Bl),e(U,Za),e(Za,Xl),e(U,Jl),f(t,vc,p),_(Bt,t,p),f(t,bc,p),f(t,le,p),e(le,qe),e(qe,eo),_(Xt,eo,null),e(le,Zl),e(le,to),e(to,ei),f(t,$c,p),f(t,O,p),e(O,ti),e(O,Ue),e(Ue,ri),e(Ue,ro),e(ro,ai),e(Ue,oi),e(O,ni),e(O,ao),e(ao,ci),e(O,si),e(O,Ge),e(Ge,li),e(Ge,oo),e(oo,ii),e(Ge,di),e(O,pi),e(O,no),e(no,hi),f(t,yc,p),f(t,ie,p),e(ie,Ve),e(Ve,co),_(Jt,co,null),e(ie,fi),e(ie,so),e(so,mi),f(t,wc,p),f(t,Re,p),e(Re,ui),e(Re,na),e(na,gi),e(Re,_i),f(t,Ec,p),_(Zt,t,p),f(t,Ac,p),f(t,de,p),e(de,Me),e(Me,lo),_(er,lo,null),e(de,vi),e(de,io),e(io,bi),f(t,xc,p),f(t,h,p),_(tr,h,null),e(h,$i),e(h,po),e(po,yi),e(h,wi),e(h,ho),e(ho,fo),e(fo,Ei),e(h,Ai),e(h,A),e(A,We),e(We,mo),e(mo,xi),e(We,ki),e(We,uo),e(uo,Pi),e(We,Di),e(A,Ti),e(A,He),e(He,go),e(go,Oi),e(He,Ii),e(He,ca),e(ca,Si),e(He,Li),e(A,Ni),e(A,Fe),e(Fe,_o),e(_o,ji),e(Fe,Ci),e(Fe,vo),e(vo,zi),e(Fe,qi),e(A,Ui),e(A,Ye),e(Ye,bo),e(bo,Gi),e(Ye,Vi),e(Ye,$o),e($o,Ri),e(Ye,Mi),e(A,Wi),e(A,Ke),e(Ke,yo),e(yo,Hi),e(Ke,Fi),e(Ke,wo),e(wo,Yi),e(Ke,Ki),e(A,Qi),e(A,Qe),e(Qe,Eo),e(Eo,Bi),e(Qe,Xi),e(Qe,Ao),e(Ao,Ji),e(Qe,Zi),e(A,ed),e(A,Be),e(Be,xo),e(xo,td),e(Be,rd),e(Be,ko),e(ko,ad),e(Be,od),e(A,nd),e(A,Xe),e(Xe,Po),e(Po,cd),e(Xe,sd),e(Xe,sa),e(sa,ld),e(Xe,id),e(A,dd),e(A,Je),e(Je,Do),e(Do,pd),e(Je,hd),e(Je,To),e(To,fd),e(Je,md),e(A,ud),e(A,Ze),e(Ze,Oo),e(Oo,gd),e(Ze,_d),e(Ze,Io),e(Io,vd),e(Ze,bd),e(h,$d),e(h,et),_(rr,et,null),e(et,yd),e(et,So),e(So,wd),e(h,Ed),e(h,tt),_(ar,tt,null),e(tt,Ad),e(tt,Lo),e(Lo,xd),e(h,kd),e(h,rt),_(or,rt,null),e(rt,Pd),e(rt,pe),e(pe,Dd),e(pe,No),e(No,Td),e(pe,Od),e(pe,jo),e(jo,Id),e(pe,Sd),e(h,Ld),e(h,at),_(nr,at,null),e(at,Nd),e(at,cr),e(cr,jd),e(cr,Co),e(Co,Cd),e(cr,zd),e(h,qd),e(h,ot),_(sr,ot,null),e(ot,Ud),e(ot,lr),e(lr,Gd),e(lr,zo),e(zo,Vd),e(lr,Rd),e(h,Md),e(h,nt),_(ir,nt,null),e(nt,Wd),e(nt,dr),e(dr,Hd),e(dr,qo),e(qo,Fd),e(dr,Yd),e(h,Kd),e(h,ct),_(pr,ct,null),e(ct,Qd),e(ct,Uo),e(Uo,Bd),e(h,Xd),e(h,st),_(hr,st,null),e(st,Jd),e(st,Go),e(Go,Zd),e(h,ep),e(h,G),_(fr,G,null),e(G,tp),e(G,mr),e(mr,rp),e(mr,Vo),e(Vo,ap),e(mr,op),e(G,np),e(G,Ro),e(Ro,cp),e(h,sp),e(h,lt),_(ur,lt,null),e(lt,lp),e(lt,gr),e(gr,ip),e(gr,Mo),e(Mo,dp),e(gr,pp),e(h,hp),e(h,it),_(_r,it,null),e(it,fp),e(it,C),e(C,mp),e(C,Wo),e(Wo,up),e(C,gp),e(C,Ho),e(Ho,_p),e(C,vp),e(C,Fo),e(Fo,bp),e(C,$p),e(h,yp),e(h,dt),_(vr,dt,null),e(dt,wp),e(dt,br),e(br,Ep),e(br,Yo),e(Yo,Ap),e(br,xp),e(h,kp),e(h,pt),_($r,pt,null),e(pt,Pp),e(pt,Ko),e(Ko,Dp),e(h,Tp),e(h,V),_(yr,V,null),e(V,Op),e(V,Qo),e(Qo,Ip),e(V,Sp),e(V,Bo),e(Bo,Lp),e(h,Np),e(h,ht),_(wr,ht,null),e(ht,jp),e(ht,he),e(he,Cp),e(he,Xo),e(Xo,zp),e(he,qp),e(he,Jo),e(Jo,Up),e(he,Gp),e(h,Vp),e(h,R),_(Er,R,null),e(R,Rp),e(R,Zo),e(Zo,Mp),e(R,Wp),e(R,en),e(en,Hp),e(h,Fp),e(h,M),_(Ar,M,null),e(M,Yp),e(M,xr),e(xr,Kp),e(xr,tn),e(tn,Qp),e(xr,Bp),e(M,Xp),e(M,kr),e(kr,Jp),e(kr,rn),e(rn,Zp),e(kr,eh),e(h,th),e(h,ft),_(Pr,ft,null),e(ft,rh),e(ft,an),e(an,ah),e(h,oh),e(h,mt),_(Dr,mt,null),e(mt,nh),e(mt,on),e(on,ch),e(h,sh),e(h,ut),_(Tr,ut,null),e(ut,lh),e(ut,nn),e(nn,ih),e(h,dh),e(h,gt),_(Or,gt,null),e(gt,ph),e(gt,cn),e(cn,hh),e(h,fh),e(h,_t),_(Ir,_t,null),e(_t,mh),e(_t,sn),e(sn,uh),e(h,gh),e(h,L),_(Sr,L,null),e(L,_h),e(L,Lr),e(Lr,vh),e(Lr,ln),e(ln,bh),e(Lr,$h),e(L,yh),e(L,dn),e(dn,wh),e(L,Eh),e(L,fe),e(fe,la),e(la,pn),e(pn,Ah),e(la,xh),e(fe,kh),e(fe,ia),e(ia,hn),e(hn,Ph),e(ia,Dh),e(fe,Th),e(fe,da),e(da,fn),e(fn,Oh),e(da,Ih),e(h,Sh),e(h,vt),_(Nr,vt,null),e(vt,Lh),e(vt,jr),e(jr,Nh),e(jr,mn),e(mn,jh),e(jr,Ch),e(h,zh),e(h,W),_(Cr,W,null),e(W,qh),e(W,me),e(me,Uh),e(me,un),e(un,Gh),e(me,Vh),e(me,gn),e(gn,Rh),e(me,Mh),e(W,Wh),e(W,_n),e(_n,Hh),e(h,Fh),e(h,N),_(zr,N,null),e(N,Yh),e(N,z),e(z,Kh),e(z,vn),e(vn,Qh),e(z,Bh),e(z,bn),e(bn,Xh),e(z,Jh),e(z,$n),e($n,Zh),e(z,ef),e(N,tf),e(N,yn),e(yn,rf),e(N,af),_(bt,N,null),e(h,of),e(h,$t),_(qr,$t,null),e($t,nf),e($t,Ur),e(Ur,cf),e(Ur,wn),e(wn,sf),e(Ur,lf),e(h,df),e(h,yt),_(Gr,yt,null),e(yt,pf),e(yt,En),e(En,hf),e(h,ff),e(h,wt),_(Vr,wt,null),e(wt,mf),e(wt,An),e(An,uf),e(h,gf),e(h,Et),_(Rr,Et,null),e(Et,_f),e(Et,ue),e(ue,vf),e(ue,xn),e(xn,bf),e(ue,$f),e(ue,pa),e(pa,yf),e(ue,wf),e(h,Ef),e(h,At),_(Mr,At,null),e(At,Af),e(At,kn),e(kn,xf),kc=!0},p(t,[p]){const Wr={};p&2&&(Wr.$$scope={dirty:p,ctx:t}),$e.$set(Wr);const Pn={};p&2&&(Pn.$$scope={dirty:p,ctx:t}),we.$set(Pn);const Dn={};p&2&&(Dn.$$scope={dirty:p,ctx:t}),bt.$set(Dn)},i(t){kc||(v(T.$$.fragment,t),v(St.$$.fragment,t),v($e.$$.fragment,t),v(we.$$.fragment,t),v(Nt.$$.fragment,t),v(jt.$$.fragment,t),v(Ct.$$.fragment,t),v(zt.$$.fragment,t),v(qt.$$.fragment,t),v(Ut.$$.fragment,t),v(Gt.$$.fragment,t),v(Vt.$$.fragment,t),v(Rt.$$.fragment,t),v(Mt.$$.fragment,t),v(Wt.$$.fragment,t),v(Ht.$$.fragment,t),v(Ft.$$.fragment,t),v(Yt.$$.fragment,t),v(Kt.$$.fragment,t),v(Qt.$$.fragment,t),v(Bt.$$.fragment,t),v(Xt.$$.fragment,t),v(Jt.$$.fragment,t),v(Zt.$$.fragment,t),v(er.$$.fragment,t),v(tr.$$.fragment,t),v(rr.$$.fragment,t),v(ar.$$.fragment,t),v(or.$$.fragment,t),v(nr.$$.fragment,t),v(sr.$$.fragment,t),v(ir.$$.fragment,t),v(pr.$$.fragment,t),v(hr.$$.fragment,t),v(fr.$$.fragment,t),v(ur.$$.fragment,t),v(_r.$$.fragment,t),v(vr.$$.fragment,t),v($r.$$.fragment,t),v(yr.$$.fragment,t),v(wr.$$.fragment,t),v(Er.$$.fragment,t),v(Ar.$$.fragment,t),v(Pr.$$.fragment,t),v(Dr.$$.fragment,t),v(Tr.$$.fragment,t),v(Or.$$.fragment,t),v(Ir.$$.fragment,t),v(Sr.$$.fragment,t),v(Nr.$$.fragment,t),v(Cr.$$.fragment,t),v(zr.$$.fragment,t),v(bt.$$.fragment,t),v(qr.$$.fragment,t),v(Gr.$$.fragment,t),v(Vr.$$.fragment,t),v(Rr.$$.fragment,t),v(Mr.$$.fragment,t),kc=!0)},o(t){b(T.$$.fragment,t),b(St.$$.fragment,t),b($e.$$.fragment,t),b(we.$$.fragment,t),b(Nt.$$.fragment,t),b(jt.$$.fragment,t),b(Ct.$$.fragment,t),b(zt.$$.fragment,t),b(qt.$$.fragment,t),b(Ut.$$.fragment,t),b(Gt.$$.fragment,t),b(Vt.$$.fragment,t),b(Rt.$$.fragment,t),b(Mt.$$.fragment,t),b(Wt.$$.fragment,t),b(Ht.$$.fragment,t),b(Ft.$$.fragment,t),b(Yt.$$.fragment,t),b(Kt.$$.fragment,t),b(Qt.$$.fragment,t),b(Bt.$$.fragment,t),b(Xt.$$.fragment,t),b(Jt.$$.fragment,t),b(Zt.$$.fragment,t),b(er.$$.fragment,t),b(tr.$$.fragment,t),b(rr.$$.fragment,t),b(ar.$$.fragment,t),b(or.$$.fragment,t),b(nr.$$.fragment,t),b(sr.$$.fragment,t),b(ir.$$.fragment,t),b(pr.$$.fragment,t),b(hr.$$.fragment,t),b(fr.$$.fragment,t),b(ur.$$.fragment,t),b(_r.$$.fragment,t),b(vr.$$.fragment,t),b($r.$$.fragment,t),b(yr.$$.fragment,t),b(wr.$$.fragment,t),b(Er.$$.fragment,t),b(Ar.$$.fragment,t),b(Pr.$$.fragment,t),b(Dr.$$.fragment,t),b(Tr.$$.fragment,t),b(Or.$$.fragment,t),b(Ir.$$.fragment,t),b(Sr.$$.fragment,t),b(Nr.$$.fragment,t),b(Cr.$$.fragment,t),b(zr.$$.fragment,t),b(bt.$$.fragment,t),b(qr.$$.fragment,t),b(Gr.$$.fragment,t),b(Vr.$$.fragment,t),b(Rr.$$.fragment,t),b(Mr.$$.fragment,t),kc=!1},d(t){r(y),t&&r(D),t&&r(E),$(T),t&&r(ve),t&&r(S),t&&r(It),t&&r(B),$(St),t&&r(Vn),t&&r(Yr),t&&r(Rn),t&&r(q),t&&r(Mn),$($e,t),t&&r(Wn),t&&r(J),t&&r(Hn),$(we,t),t&&r(Fn),t&&r(Ee),t&&r(Yn),t&&r(Z),$(Nt),t&&r(Kn),t&&r(ee),$(jt),t&&r(Qn),t&&r(te),t&&r(Bn),$(Ct,t),t&&r(Xn),t&&r(re),$(zt),t&&r(Jn),t&&r(ae),$(qt),t&&r(Zn),t&&r(De),t&&r(ec),$(Ut,t),t&&r(tc),t&&r(Te),t&&r(rc),$(Gt,t),t&&r(ac),t&&r(oe),$(Vt),t&&r(oc),t&&r(Ie),t&&r(nc),$(Rt,t),t&&r(cc),t&&r(Se),t&&r(sc),$(Mt,t),t&&r(lc),t&&r(ne),$(Wt),t&&r(ic),t&&r(ta),t&&r(dc),$(Ht,t),t&&r(pc),$(Ft,t),t&&r(hc),t&&r(ce),$(Yt),t&&r(fc),t&&r(je),t&&r(mc),t&&r(se),$(Kt),t&&r(uc),t&&r(ze),t&&r(gc),$(Qt,t),t&&r(_c),t&&r(U),t&&r(vc),$(Bt,t),t&&r(bc),t&&r(le),$(Xt),t&&r($c),t&&r(O),t&&r(yc),t&&r(ie),$(Jt),t&&r(wc),t&&r(Re),t&&r(Ec),$(Zt,t),t&&r(Ac),t&&r(de),$(er),t&&r(xc),t&&r(h),$(tr),$(rr),$(ar),$(or),$(nr),$(sr),$(ir),$(pr),$(hr),$(fr),$(ur),$(_r),$(vr),$($r),$(yr),$(wr),$(Er),$(Ar),$(Pr),$(Dr),$(Tr),$(Or),$(Ir),$(Sr),$(Nr),$(Cr),$(zr),$(bt),$(qr),$(Gr),$(Vr),$(Rr),$(Mr)}}}const ug={local:"accelerator",sections:[{local:"quick-adaptation-of-your-code",title:"Quick adaptation of your code"},{local:"advanced-recommendations",sections:[{local:"printing",title:"Printing"},{local:"executing-processes",sections:[{local:"once-on-a-single-server",title:"Once on a single server"},{local:"only-ever-once-across-all-servers",title:"Only ever once across all servers"},{local:"on-specific-processes",title:"On specific processes"}],title:"Executing processes"},{local:"synchronicity-control",title:"Synchronicity control"},{local:"saving-and-loading",title:"Saving and loading"},{local:"operations",title:"Operations"},{local:"gradient-accumulation",title:"Gradient Accumulation"}],title:"Advanced recommendations"},{local:"accelerate.Accelerator",title:"Overall API documentation:"}],title:"Accelerator"};function gg(_e){return dg(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class wg extends cg{constructor(y){super();sg(this,y,gg,mg,lg,{})}}export{wg as default,ug as metadata};
