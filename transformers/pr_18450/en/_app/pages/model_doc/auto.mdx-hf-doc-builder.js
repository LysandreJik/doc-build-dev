import{S as Xra,i as zra,s as Wra,e as a,k as l,w as F,t as o,M as Qra,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Ura,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as $ft}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Hra($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,cy,om,Oe,Qe,zi,Xn,fy,zn,Wn,my,Wi,Qn,gy,Qi,rm,ja;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),em=o("model_type"),ft=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),cy=o(")."),om=l(),Oe=a("p"),Qe=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),fy=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),my=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),gy=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),rm=o("NewModelConfig"),ja=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var aP=s(p);m=r(aP,"NewModelConfig"),aP.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var nP=s(Oi);em=r(nP,"model_type"),nP.forEach(t),ft=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var sP=s(Vi);Xi=r(sP,'"new-model"'),sP.forEach(t),cy=r(Ae,")."),Ae.forEach(t),om=i(Ue),Oe=n(Ue,"P",{});var Lo=s(Oe);Qe=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),fy=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var lP=s(zn);Wn=r(lP,"PreTrainedModel"),lP.forEach(t),my=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var tm=s(Wi);Qn=r(tm,"config_class"),tm.forEach(t),gy=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var iP=s(Qi);rm=r(iP,"NewModelConfig"),iP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,em),e(g,ft),e(g,Vi),e(Vi,Xi),e(g,cy),b(Ue,om,Ae),b(Ue,Oe,Ae),e(Oe,Qe),e(Oe,zi),e(zi,Xn),e(Oe,fy),e(Oe,zn),e(zn,Wn),e(Oe,my),e(Oe,Wi),e(Wi,Qn),e(Oe,gy),e(Oe,Qi),e(Qi,rm),e(Oe,ja)},d(Ue){Ue&&t(g),Ue&&t(om),Ue&&t(Oe)}}}function Jra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kra($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Zra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eta($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kaa($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,cy,om,Oe,Qe,zi,Xn,fy,zn,Wn,my,Wi,Qn,gy,Qi,rm,ja,Ue,Ae,aP,Ui,nP,sP,Lo,Da,lP,tm,iP,hKe,XQe,Hi,am,qse,hy,pKe,jse,_Ke,zQe,Un,uKe,Dse,bKe,vKe,Gse,FKe,TKe,WQe,py,QQe,dP,MKe,UQe,nm,HQe,Ji,sm,Ose,_y,EKe,Vse,CKe,JQe,yo,uy,wKe,by,AKe,cP,LKe,yKe,xKe,vy,$Ke,Xse,kKe,SKe,RKe,kr,Fy,PKe,zse,BKe,IKe,Yi,NKe,Wse,qKe,jKe,Qse,DKe,GKe,OKe,A,lm,Use,VKe,XKe,fP,zKe,WKe,QKe,im,Hse,UKe,HKe,mP,JKe,YKe,KKe,dm,Jse,ZKe,eZe,gP,oZe,rZe,tZe,cm,Yse,aZe,nZe,hP,sZe,lZe,iZe,fm,Kse,dZe,cZe,pP,fZe,mZe,gZe,mm,Zse,hZe,pZe,_P,_Ze,uZe,bZe,gm,ele,vZe,FZe,uP,TZe,MZe,EZe,hm,ole,CZe,wZe,bP,AZe,LZe,yZe,pm,rle,xZe,$Ze,vP,kZe,SZe,RZe,_m,tle,PZe,BZe,FP,IZe,NZe,qZe,um,ale,jZe,DZe,TP,GZe,OZe,VZe,bm,nle,XZe,zZe,MP,WZe,QZe,UZe,vm,sle,HZe,JZe,EP,YZe,KZe,ZZe,Fm,lle,eeo,oeo,CP,reo,teo,aeo,Tm,ile,neo,seo,wP,leo,ieo,deo,Mm,dle,ceo,feo,AP,meo,geo,heo,Em,cle,peo,_eo,LP,ueo,beo,veo,Cm,fle,Feo,Teo,yP,Meo,Eeo,Ceo,wm,mle,weo,Aeo,xP,Leo,yeo,xeo,Am,gle,$eo,keo,$P,Seo,Reo,Peo,Lm,hle,Beo,Ieo,kP,Neo,qeo,jeo,ym,ple,Deo,Geo,SP,Oeo,Veo,Xeo,xm,_le,zeo,Weo,RP,Qeo,Ueo,Heo,$m,ule,Jeo,Yeo,PP,Keo,Zeo,eoo,km,ble,ooo,roo,BP,too,aoo,noo,Sm,vle,soo,loo,IP,ioo,doo,coo,Rm,Fle,foo,moo,NP,goo,hoo,poo,Pm,Tle,_oo,uoo,qP,boo,voo,Foo,Bm,Mle,Too,Moo,jP,Eoo,Coo,woo,Im,Ele,Aoo,Loo,DP,yoo,xoo,$oo,Nm,Cle,koo,Soo,GP,Roo,Poo,Boo,qm,wle,Ioo,Noo,OP,qoo,joo,Doo,jm,Ale,Goo,Ooo,VP,Voo,Xoo,zoo,Dm,Lle,Woo,Qoo,XP,Uoo,Hoo,Joo,Gm,yle,Yoo,Koo,zP,Zoo,ero,oro,Om,xle,rro,tro,WP,aro,nro,sro,Vm,$le,lro,iro,QP,dro,cro,fro,Xm,kle,mro,gro,UP,hro,pro,_ro,zm,Sle,uro,bro,HP,vro,Fro,Tro,Wm,Rle,Mro,Ero,JP,Cro,wro,Aro,Qm,Ple,Lro,yro,YP,xro,$ro,kro,Um,Ble,Sro,Rro,KP,Pro,Bro,Iro,Hm,Ile,Nro,qro,ZP,jro,Dro,Gro,Jm,Nle,Oro,Vro,eB,Xro,zro,Wro,Ym,qle,Qro,Uro,oB,Hro,Jro,Yro,Km,jle,Kro,Zro,rB,eto,oto,rto,Zm,Dle,tto,ato,tB,nto,sto,lto,eg,Gle,ito,dto,aB,cto,fto,mto,og,Ole,gto,hto,nB,pto,_to,uto,rg,Vle,bto,vto,sB,Fto,Tto,Mto,tg,Xle,Eto,Cto,lB,wto,Ato,Lto,ag,zle,yto,xto,iB,$to,kto,Sto,ng,Wle,Rto,Pto,dB,Bto,Ito,Nto,sg,Qle,qto,jto,cB,Dto,Gto,Oto,lg,Ule,Vto,Xto,fB,zto,Wto,Qto,ig,Hle,Uto,Hto,mB,Jto,Yto,Kto,dg,Jle,Zto,eao,gB,oao,rao,tao,cg,Yle,aao,nao,hB,sao,lao,iao,fg,Kle,dao,cao,pB,fao,mao,gao,mg,Zle,hao,pao,_B,_ao,uao,bao,gg,eie,vao,Fao,uB,Tao,Mao,Eao,hg,oie,Cao,wao,bB,Aao,Lao,yao,pg,rie,xao,$ao,vB,kao,Sao,Rao,_g,tie,Pao,Bao,FB,Iao,Nao,qao,ug,aie,jao,Dao,TB,Gao,Oao,Vao,bg,nie,Xao,zao,MB,Wao,Qao,Uao,vg,sie,Hao,Jao,EB,Yao,Kao,Zao,Fg,lie,eno,ono,CB,rno,tno,ano,Tg,iie,nno,sno,wB,lno,ino,dno,Mg,die,cno,fno,AB,mno,gno,hno,Eg,cie,pno,_no,LB,uno,bno,vno,Cg,fie,Fno,Tno,yB,Mno,Eno,Cno,wg,mie,wno,Ano,xB,Lno,yno,xno,Ag,gie,$no,kno,$B,Sno,Rno,Pno,Lg,hie,Bno,Ino,kB,Nno,qno,jno,yg,pie,Dno,Gno,SB,Ono,Vno,Xno,xg,_ie,zno,Wno,RB,Qno,Uno,Hno,$g,uie,Jno,Yno,PB,Kno,Zno,eso,kg,bie,oso,rso,BB,tso,aso,nso,Sg,vie,sso,lso,IB,iso,dso,cso,Rg,Fie,fso,mso,NB,gso,hso,pso,Pg,Tie,_so,uso,qB,bso,vso,Fso,Bg,Mie,Tso,Mso,jB,Eso,Cso,wso,Ig,Eie,Aso,Lso,DB,yso,xso,$so,Ng,Cie,kso,Sso,GB,Rso,Pso,Bso,qg,wie,Iso,Nso,OB,qso,jso,Dso,jg,Aie,Gso,Oso,VB,Vso,Xso,zso,Dg,Lie,Wso,Qso,XB,Uso,Hso,Jso,Gg,yie,Yso,Kso,zB,Zso,elo,olo,Og,xie,rlo,tlo,WB,alo,nlo,slo,Vg,$ie,llo,ilo,QB,dlo,clo,flo,Xg,kie,mlo,glo,UB,hlo,plo,_lo,zg,Sie,ulo,blo,HB,vlo,Flo,Tlo,Wg,Rie,Mlo,Elo,JB,Clo,wlo,Alo,Qg,Pie,Llo,ylo,YB,xlo,$lo,klo,Ug,Bie,Slo,Rlo,KB,Plo,Blo,Ilo,Hg,Iie,Nlo,qlo,ZB,jlo,Dlo,Glo,Jg,Nie,Olo,Vlo,eI,Xlo,zlo,Wlo,Yg,qie,Qlo,Ulo,oI,Hlo,Jlo,Ylo,Kg,jie,Klo,Zlo,rI,eio,oio,rio,Zg,Die,tio,aio,tI,nio,sio,lio,eh,Gie,iio,dio,aI,cio,fio,mio,oh,Oie,gio,hio,nI,pio,_io,uio,rh,Vie,bio,vio,sI,Fio,Tio,Mio,th,Xie,Eio,Cio,lI,wio,Aio,Lio,ah,zie,yio,xio,iI,$io,kio,Sio,nh,Wie,Rio,Pio,dI,Bio,Iio,Nio,sh,Qie,qio,jio,cI,Dio,Gio,Oio,lh,Uie,Vio,Xio,fI,zio,Wio,Qio,ih,Hie,Uio,Hio,mI,Jio,Yio,Kio,dh,Jie,Zio,edo,gI,odo,rdo,tdo,ch,Yie,ado,ndo,hI,sdo,ldo,ido,fh,Kie,ddo,cdo,pI,fdo,mdo,gdo,mh,Zie,hdo,pdo,_I,_do,udo,bdo,gh,ede,vdo,Fdo,uI,Tdo,Mdo,Edo,hh,ode,Cdo,wdo,bI,Ado,Ldo,ydo,ph,rde,xdo,$do,vI,kdo,Sdo,Rdo,_h,tde,Pdo,Bdo,FI,Ido,Ndo,qdo,uh,ade,jdo,Ddo,TI,Gdo,Odo,Vdo,bh,nde,Xdo,zdo,MI,Wdo,Qdo,Udo,vh,sde,Hdo,Jdo,EI,Ydo,Kdo,Zdo,Fh,lde,eco,oco,CI,rco,tco,aco,Th,nco,Mh,Ty,sco,ide,lco,YQe,Ki,Eh,dde,My,ico,cde,dco,KQe,xo,Ey,cco,Cy,fco,wI,mco,gco,hco,wy,pco,fde,_co,uco,bco,Sr,Ay,vco,mde,Fco,Tco,Ga,Mco,gde,Eco,Cco,hde,wco,Aco,pde,Lco,yco,xco,k,Hn,_de,$co,kco,AI,Sco,Rco,LI,Pco,Bco,Ico,Jn,ude,Nco,qco,yI,jco,Dco,xI,Gco,Oco,Vco,Yn,bde,Xco,zco,$I,Wco,Qco,kI,Uco,Hco,Jco,Ch,vde,Yco,Kco,SI,Zco,efo,ofo,Kn,Fde,rfo,tfo,RI,afo,nfo,PI,sfo,lfo,ifo,wh,Tde,dfo,cfo,BI,ffo,mfo,gfo,Ah,Mde,hfo,pfo,II,_fo,ufo,bfo,Lh,Ede,vfo,Ffo,NI,Tfo,Mfo,Efo,Zn,Cde,Cfo,wfo,qI,Afo,Lfo,jI,yfo,xfo,$fo,es,wde,kfo,Sfo,DI,Rfo,Pfo,GI,Bfo,Ifo,Nfo,os,Ade,qfo,jfo,OI,Dfo,Gfo,VI,Ofo,Vfo,Xfo,yh,Lde,zfo,Wfo,XI,Qfo,Ufo,Hfo,xh,yde,Jfo,Yfo,zI,Kfo,Zfo,emo,$h,xde,omo,rmo,WI,tmo,amo,nmo,rs,$de,smo,lmo,QI,imo,dmo,UI,cmo,fmo,mmo,kh,kde,gmo,hmo,HI,pmo,_mo,umo,ts,Sde,bmo,vmo,JI,Fmo,Tmo,YI,Mmo,Emo,Cmo,as,Rde,wmo,Amo,KI,Lmo,ymo,ZI,xmo,$mo,kmo,ns,Pde,Smo,Rmo,eN,Pmo,Bmo,oN,Imo,Nmo,qmo,ss,Bde,jmo,Dmo,rN,Gmo,Omo,tN,Vmo,Xmo,zmo,Sh,Ide,Wmo,Qmo,aN,Umo,Hmo,Jmo,ls,Nde,Ymo,Kmo,nN,Zmo,ego,sN,ogo,rgo,tgo,is,qde,ago,ngo,lN,sgo,lgo,iN,igo,dgo,cgo,ds,jde,fgo,mgo,dN,ggo,hgo,cN,pgo,_go,ugo,cs,Dde,bgo,vgo,fN,Fgo,Tgo,mN,Mgo,Ego,Cgo,fs,Gde,wgo,Ago,gN,Lgo,ygo,hN,xgo,$go,kgo,ms,Ode,Sgo,Rgo,pN,Pgo,Bgo,_N,Igo,Ngo,qgo,Rh,Vde,jgo,Dgo,uN,Ggo,Ogo,Vgo,gs,Xde,Xgo,zgo,bN,Wgo,Qgo,vN,Ugo,Hgo,Jgo,Ph,zde,Ygo,Kgo,FN,Zgo,eho,oho,hs,Wde,rho,tho,TN,aho,nho,MN,sho,lho,iho,ps,Qde,dho,cho,EN,fho,mho,CN,gho,hho,pho,_s,Ude,_ho,uho,wN,bho,vho,AN,Fho,Tho,Mho,Bh,Hde,Eho,Cho,LN,who,Aho,Lho,us,Jde,yho,xho,yN,$ho,kho,xN,Sho,Rho,Pho,bs,Yde,Bho,Iho,$N,Nho,qho,kN,jho,Dho,Gho,vs,Kde,Oho,Vho,SN,Xho,zho,RN,Who,Qho,Uho,Ih,Zde,Hho,Jho,PN,Yho,Kho,Zho,Fs,ece,epo,opo,BN,rpo,tpo,IN,apo,npo,spo,Ts,oce,lpo,ipo,NN,dpo,cpo,qN,fpo,mpo,gpo,Ms,rce,hpo,ppo,jN,_po,upo,DN,bpo,vpo,Fpo,Es,tce,Tpo,Mpo,GN,Epo,Cpo,ON,wpo,Apo,Lpo,Cs,ace,ypo,xpo,VN,$po,kpo,XN,Spo,Rpo,Ppo,ws,nce,Bpo,Ipo,zN,Npo,qpo,WN,jpo,Dpo,Gpo,As,sce,Opo,Vpo,QN,Xpo,zpo,UN,Wpo,Qpo,Upo,Ls,lce,Hpo,Jpo,HN,Ypo,Kpo,JN,Zpo,e_o,o_o,Nh,ice,r_o,t_o,YN,a_o,n_o,s_o,ys,dce,l_o,i_o,KN,d_o,c_o,ZN,f_o,m_o,g_o,qh,cce,h_o,p_o,eq,__o,u_o,b_o,jh,fce,v_o,F_o,oq,T_o,M_o,E_o,xs,mce,C_o,w_o,rq,A_o,L_o,tq,y_o,x_o,$_o,$s,gce,k_o,S_o,aq,R_o,P_o,nq,B_o,I_o,N_o,ks,hce,q_o,j_o,sq,D_o,G_o,lq,O_o,V_o,X_o,Dh,pce,z_o,W_o,iq,Q_o,U_o,H_o,Ss,_ce,J_o,Y_o,dq,K_o,Z_o,cq,euo,ouo,ruo,Rs,uce,tuo,auo,fq,nuo,suo,mq,luo,iuo,duo,Ps,bce,cuo,fuo,gq,muo,guo,hq,huo,puo,_uo,Bs,vce,uuo,buo,pq,vuo,Fuo,_q,Tuo,Muo,Euo,Is,Fce,Cuo,wuo,uq,Auo,Luo,bq,yuo,xuo,$uo,Ns,Tce,kuo,Suo,vq,Ruo,Puo,Fq,Buo,Iuo,Nuo,qs,Mce,quo,juo,Tq,Duo,Guo,Mq,Ouo,Vuo,Xuo,js,Ece,zuo,Wuo,Eq,Quo,Uuo,Cq,Huo,Juo,Yuo,Gh,Cce,Kuo,Zuo,wq,e1o,o1o,r1o,Ds,wce,t1o,a1o,Aq,n1o,s1o,Lq,l1o,i1o,d1o,Gs,Ace,c1o,f1o,yq,m1o,g1o,xq,h1o,p1o,_1o,Oh,Lce,u1o,b1o,$q,v1o,F1o,T1o,Vh,yce,M1o,E1o,kq,C1o,w1o,A1o,Xh,xce,L1o,y1o,Sq,x1o,$1o,k1o,zh,$ce,S1o,R1o,Rq,P1o,B1o,I1o,Os,kce,N1o,q1o,Pq,j1o,D1o,Bq,G1o,O1o,V1o,Wh,Sce,X1o,z1o,Iq,W1o,Q1o,U1o,Vs,Rce,H1o,J1o,Nq,Y1o,K1o,qq,Z1o,e4o,o4o,Xs,Pce,r4o,t4o,jq,a4o,n4o,Dq,s4o,l4o,i4o,zs,Bce,d4o,c4o,Gq,f4o,m4o,Oq,g4o,h4o,p4o,Ws,Ice,_4o,u4o,Vq,b4o,v4o,Xq,F4o,T4o,M4o,Qs,Nce,E4o,C4o,zq,w4o,A4o,Wq,L4o,y4o,x4o,Us,qce,$4o,k4o,Qq,S4o,R4o,Uq,P4o,B4o,I4o,Qh,jce,N4o,q4o,Hq,j4o,D4o,G4o,Uh,Dce,O4o,V4o,Jq,X4o,z4o,W4o,Hs,Gce,Q4o,U4o,Yq,H4o,J4o,Kq,Y4o,K4o,Z4o,Js,Oce,e2o,o2o,Zq,r2o,t2o,ej,a2o,n2o,s2o,Ys,Vce,l2o,i2o,oj,d2o,c2o,rj,f2o,m2o,g2o,Hh,Xce,h2o,p2o,tj,_2o,u2o,b2o,Jh,zce,v2o,F2o,aj,T2o,M2o,E2o,Yh,Wce,C2o,w2o,nj,A2o,L2o,y2o,Ks,Qce,x2o,$2o,sj,k2o,S2o,lj,R2o,P2o,B2o,Zs,Uce,I2o,N2o,ij,q2o,j2o,dj,D2o,G2o,O2o,Kh,Hce,V2o,X2o,cj,z2o,W2o,Q2o,Zh,Jce,U2o,H2o,fj,J2o,Y2o,K2o,ep,Yce,Z2o,ebo,mj,obo,rbo,tbo,el,Kce,abo,nbo,gj,sbo,lbo,hj,ibo,dbo,cbo,op,Zce,fbo,mbo,pj,gbo,hbo,pbo,rp,efe,_bo,ubo,_j,bbo,vbo,Fbo,ol,ofe,Tbo,Mbo,uj,Ebo,Cbo,bj,wbo,Abo,Lbo,rl,rfe,ybo,xbo,vj,$bo,kbo,Fj,Sbo,Rbo,Pbo,tl,tfe,Bbo,Ibo,Tj,Nbo,qbo,Mj,jbo,Dbo,Gbo,al,afe,Obo,Vbo,Ej,Xbo,zbo,Cj,Wbo,Qbo,Ubo,tp,Hbo,ap,Ly,Jbo,nfe,Ybo,ZQe,Zi,np,sfe,yy,Kbo,lfe,Zbo,eUe,$o,xy,evo,$y,ovo,wj,rvo,tvo,avo,ky,nvo,ife,svo,lvo,ivo,He,Sy,dvo,dfe,cvo,fvo,Oa,mvo,cfe,gvo,hvo,ffe,pvo,_vo,mfe,uvo,bvo,vvo,Q,sp,gfe,Fvo,Tvo,Aj,Mvo,Evo,Cvo,lp,hfe,wvo,Avo,Lj,Lvo,yvo,xvo,ip,pfe,$vo,kvo,yj,Svo,Rvo,Pvo,dp,_fe,Bvo,Ivo,xj,Nvo,qvo,jvo,cp,ufe,Dvo,Gvo,$j,Ovo,Vvo,Xvo,fp,bfe,zvo,Wvo,kj,Qvo,Uvo,Hvo,mp,vfe,Jvo,Yvo,Sj,Kvo,Zvo,e5o,gp,Ffe,o5o,r5o,Rj,t5o,a5o,n5o,hp,Tfe,s5o,l5o,Pj,i5o,d5o,c5o,pp,Mfe,f5o,m5o,Bj,g5o,h5o,p5o,_p,Efe,_5o,u5o,Ij,b5o,v5o,F5o,up,Cfe,T5o,M5o,Nj,E5o,C5o,w5o,bp,wfe,A5o,L5o,qj,y5o,x5o,$5o,vp,Afe,k5o,S5o,jj,R5o,P5o,B5o,Fp,Lfe,I5o,N5o,Dj,q5o,j5o,D5o,Tp,yfe,G5o,O5o,Gj,V5o,X5o,z5o,Mp,xfe,W5o,Q5o,Oj,U5o,H5o,J5o,Ep,$fe,Y5o,K5o,Vj,Z5o,e0o,o0o,Cp,kfe,r0o,t0o,Xj,a0o,n0o,s0o,wp,Sfe,l0o,i0o,zj,d0o,c0o,f0o,Ap,Rfe,m0o,g0o,Wj,h0o,p0o,_0o,Lp,Pfe,u0o,b0o,Qj,v0o,F0o,T0o,yp,Bfe,M0o,E0o,Uj,C0o,w0o,A0o,xp,Ife,L0o,y0o,Hj,x0o,$0o,k0o,$p,Nfe,S0o,R0o,Jj,P0o,B0o,I0o,kp,qfe,N0o,q0o,Yj,j0o,D0o,G0o,Sp,jfe,O0o,V0o,Kj,X0o,z0o,W0o,Rp,Dfe,Q0o,U0o,Zj,H0o,J0o,Y0o,Pp,Gfe,K0o,Z0o,eD,eFo,oFo,rFo,Bp,Ofe,tFo,aFo,oD,nFo,sFo,lFo,Ip,Vfe,iFo,dFo,rD,cFo,fFo,mFo,Np,Xfe,gFo,hFo,tD,pFo,_Fo,uFo,qp,zfe,bFo,vFo,aD,FFo,TFo,MFo,jp,Wfe,EFo,CFo,nD,wFo,AFo,LFo,Dp,Qfe,yFo,xFo,sD,$Fo,kFo,SFo,Gp,Ufe,RFo,PFo,lD,BFo,IFo,NFo,Op,Hfe,qFo,jFo,iD,DFo,GFo,OFo,Vp,Jfe,VFo,XFo,dD,zFo,WFo,QFo,Xp,UFo,zp,HFo,Wp,Ry,JFo,Yfe,YFo,oUe,ed,Qp,Kfe,Py,KFo,Zfe,ZFo,rUe,ko,By,eTo,Iy,oTo,cD,rTo,tTo,aTo,Ny,nTo,eme,sTo,lTo,iTo,Je,qy,dTo,ome,cTo,fTo,od,mTo,rme,gTo,hTo,tme,pTo,_To,uTo,ie,Up,ame,bTo,vTo,fD,FTo,TTo,MTo,Hp,nme,ETo,CTo,mD,wTo,ATo,LTo,Jp,sme,yTo,xTo,gD,$To,kTo,STo,Yp,lme,RTo,PTo,hD,BTo,ITo,NTo,Kp,ime,qTo,jTo,pD,DTo,GTo,OTo,Zp,dme,VTo,XTo,_D,zTo,WTo,QTo,e_,cme,UTo,HTo,uD,JTo,YTo,KTo,o_,fme,ZTo,e8o,bD,o8o,r8o,t8o,r_,mme,a8o,n8o,vD,s8o,l8o,i8o,t_,gme,d8o,c8o,FD,f8o,m8o,g8o,a_,hme,h8o,p8o,TD,_8o,u8o,b8o,n_,pme,v8o,F8o,MD,T8o,M8o,E8o,s_,_me,C8o,w8o,ED,A8o,L8o,y8o,l_,ume,x8o,$8o,CD,k8o,S8o,R8o,i_,bme,P8o,B8o,wD,I8o,N8o,q8o,d_,vme,j8o,D8o,AD,G8o,O8o,V8o,c_,Fme,X8o,z8o,LD,W8o,Q8o,U8o,f_,Tme,H8o,J8o,yD,Y8o,K8o,Z8o,m_,Mme,eMo,oMo,xD,rMo,tMo,aMo,g_,Eme,nMo,sMo,$D,lMo,iMo,dMo,h_,cMo,p_,fMo,__,jy,mMo,Cme,gMo,tUe,rd,u_,wme,Dy,hMo,Ame,pMo,aUe,So,Gy,_Mo,td,uMo,kD,bMo,vMo,SD,FMo,TMo,MMo,Oy,EMo,Lme,CMo,wMo,AMo,mt,Vy,LMo,yme,yMo,xMo,ad,$Mo,xme,kMo,SMo,RD,RMo,PMo,BMo,b_,IMo,Ye,Xy,NMo,$me,qMo,jMo,Va,DMo,kme,GMo,OMo,Sme,VMo,XMo,Rme,zMo,WMo,QMo,y,v_,Pme,UMo,HMo,PD,JMo,YMo,KMo,F_,Bme,ZMo,eEo,BD,oEo,rEo,tEo,T_,Ime,aEo,nEo,ID,sEo,lEo,iEo,M_,Nme,dEo,cEo,ND,fEo,mEo,gEo,E_,qme,hEo,pEo,qD,_Eo,uEo,bEo,C_,jme,vEo,FEo,jD,TEo,MEo,EEo,w_,Dme,CEo,wEo,DD,AEo,LEo,yEo,A_,Gme,xEo,$Eo,GD,kEo,SEo,REo,L_,Ome,PEo,BEo,OD,IEo,NEo,qEo,y_,Vme,jEo,DEo,VD,GEo,OEo,VEo,x_,Xme,XEo,zEo,XD,WEo,QEo,UEo,$_,zme,HEo,JEo,zD,YEo,KEo,ZEo,k_,Wme,eCo,oCo,WD,rCo,tCo,aCo,S_,Qme,nCo,sCo,QD,lCo,iCo,dCo,R_,Ume,cCo,fCo,UD,mCo,gCo,hCo,P_,Hme,pCo,_Co,HD,uCo,bCo,vCo,B_,Jme,FCo,TCo,JD,MCo,ECo,CCo,I_,Yme,wCo,ACo,YD,LCo,yCo,xCo,N_,Kme,$Co,kCo,KD,SCo,RCo,PCo,q_,Zme,BCo,ICo,ZD,NCo,qCo,jCo,j_,ege,DCo,GCo,eG,OCo,VCo,XCo,D_,oge,zCo,WCo,oG,QCo,UCo,HCo,G_,rge,JCo,YCo,rG,KCo,ZCo,e3o,O_,tge,o3o,r3o,tG,t3o,a3o,n3o,V_,age,s3o,l3o,aG,i3o,d3o,c3o,X_,nge,f3o,m3o,nG,g3o,h3o,p3o,z_,sge,_3o,u3o,sG,b3o,v3o,F3o,W_,lge,T3o,M3o,lG,E3o,C3o,w3o,Q_,ige,A3o,L3o,iG,y3o,x3o,$3o,U_,dge,k3o,S3o,dG,R3o,P3o,B3o,H_,cge,I3o,N3o,cG,q3o,j3o,D3o,J_,fge,G3o,O3o,fG,V3o,X3o,z3o,Y_,mge,W3o,Q3o,mG,U3o,H3o,J3o,K_,gge,Y3o,K3o,gG,Z3o,ewo,owo,Z_,hge,rwo,two,hG,awo,nwo,swo,nl,pge,lwo,iwo,pG,dwo,cwo,_G,fwo,mwo,gwo,eu,_ge,hwo,pwo,uG,_wo,uwo,bwo,ou,uge,vwo,Fwo,bG,Two,Mwo,Ewo,ru,bge,Cwo,wwo,vG,Awo,Lwo,ywo,tu,vge,xwo,$wo,FG,kwo,Swo,Rwo,au,Fge,Pwo,Bwo,TG,Iwo,Nwo,qwo,nu,Tge,jwo,Dwo,MG,Gwo,Owo,Vwo,su,Mge,Xwo,zwo,EG,Wwo,Qwo,Uwo,lu,Ege,Hwo,Jwo,CG,Ywo,Kwo,Zwo,iu,Cge,e6o,o6o,wG,r6o,t6o,a6o,du,wge,n6o,s6o,AG,l6o,i6o,d6o,cu,Age,c6o,f6o,LG,m6o,g6o,h6o,fu,Lge,p6o,_6o,yG,u6o,b6o,v6o,mu,yge,F6o,T6o,xG,M6o,E6o,C6o,gu,xge,w6o,A6o,$G,L6o,y6o,x6o,hu,$ge,$6o,k6o,kG,S6o,R6o,P6o,pu,kge,B6o,I6o,SG,N6o,q6o,j6o,_u,Sge,D6o,G6o,RG,O6o,V6o,X6o,uu,Rge,z6o,W6o,PG,Q6o,U6o,H6o,bu,Pge,J6o,Y6o,BG,K6o,Z6o,eAo,vu,Bge,oAo,rAo,IG,tAo,aAo,nAo,Fu,Ige,sAo,lAo,NG,iAo,dAo,cAo,Tu,Nge,fAo,mAo,qG,gAo,hAo,pAo,Mu,qge,_Ao,uAo,jG,bAo,vAo,FAo,Eu,jge,TAo,MAo,DG,EAo,CAo,wAo,Cu,Dge,AAo,LAo,GG,yAo,xAo,$Ao,wu,Gge,kAo,SAo,OG,RAo,PAo,BAo,Au,Oge,IAo,NAo,VG,qAo,jAo,DAo,Lu,Vge,GAo,OAo,XG,VAo,XAo,zAo,yu,Xge,WAo,QAo,zG,UAo,HAo,JAo,xu,zge,YAo,KAo,WG,ZAo,e7o,o7o,$u,Wge,r7o,t7o,QG,a7o,n7o,s7o,ku,Qge,l7o,i7o,UG,d7o,c7o,f7o,Su,Uge,m7o,g7o,HG,h7o,p7o,_7o,Ru,Hge,u7o,b7o,JG,v7o,F7o,T7o,Pu,Jge,M7o,E7o,YG,C7o,w7o,A7o,Bu,Yge,L7o,y7o,KG,x7o,$7o,k7o,Iu,Kge,S7o,R7o,ZG,P7o,B7o,I7o,Nu,Zge,N7o,q7o,eO,j7o,D7o,G7o,qu,ehe,O7o,V7o,oO,X7o,z7o,W7o,ju,ohe,Q7o,U7o,rO,H7o,J7o,Y7o,Du,rhe,K7o,Z7o,tO,eLo,oLo,rLo,Gu,the,tLo,aLo,aO,nLo,sLo,lLo,Ou,ahe,iLo,dLo,nO,cLo,fLo,mLo,Vu,nhe,gLo,hLo,sO,pLo,_Lo,uLo,Xu,she,bLo,vLo,lO,FLo,TLo,MLo,zu,lhe,ELo,CLo,iO,wLo,ALo,LLo,Wu,ihe,yLo,xLo,dO,$Lo,kLo,SLo,Qu,dhe,RLo,PLo,cO,BLo,ILo,NLo,Uu,che,qLo,jLo,fO,DLo,GLo,OLo,Hu,fhe,VLo,XLo,mO,zLo,WLo,QLo,Ju,mhe,ULo,HLo,gO,JLo,YLo,KLo,Yu,ghe,ZLo,eyo,hO,oyo,ryo,tyo,Ku,hhe,ayo,nyo,pO,syo,lyo,iyo,Zu,phe,dyo,cyo,_O,fyo,myo,gyo,e1,_he,hyo,pyo,uO,_yo,uyo,byo,o1,uhe,vyo,Fyo,bO,Tyo,Myo,Eyo,r1,bhe,Cyo,wyo,vO,Ayo,Lyo,yyo,t1,vhe,xyo,$yo,FO,kyo,Syo,Ryo,a1,Fhe,Pyo,Byo,TO,Iyo,Nyo,qyo,n1,The,jyo,Dyo,MO,Gyo,Oyo,Vyo,s1,Mhe,Xyo,zyo,EO,Wyo,Qyo,Uyo,l1,Ehe,Hyo,Jyo,CO,Yyo,Kyo,Zyo,i1,Che,e9o,o9o,wO,r9o,t9o,a9o,d1,whe,n9o,s9o,AO,l9o,i9o,d9o,c1,Ahe,c9o,f9o,LO,m9o,g9o,h9o,f1,Lhe,p9o,_9o,yO,u9o,b9o,v9o,m1,yhe,F9o,T9o,xO,M9o,E9o,C9o,g1,xhe,w9o,A9o,$O,L9o,y9o,x9o,h1,$he,$9o,k9o,kO,S9o,R9o,P9o,p1,khe,B9o,I9o,SO,N9o,q9o,j9o,_1,She,D9o,G9o,RO,O9o,V9o,X9o,u1,Rhe,z9o,W9o,PO,Q9o,U9o,H9o,b1,Phe,J9o,Y9o,BO,K9o,Z9o,exo,v1,Bhe,oxo,rxo,IO,txo,axo,nxo,F1,Ihe,sxo,lxo,NO,ixo,dxo,cxo,T1,Nhe,fxo,mxo,qO,gxo,hxo,pxo,M1,qhe,_xo,uxo,jO,bxo,vxo,Fxo,E1,jhe,Txo,Mxo,DO,Exo,Cxo,wxo,C1,Dhe,Axo,Lxo,GO,yxo,xxo,$xo,w1,Ghe,kxo,Sxo,OO,Rxo,Pxo,Bxo,A1,Ixo,Ohe,Nxo,qxo,Vhe,jxo,Dxo,L1,nUe,nd,y1,Xhe,zy,Gxo,zhe,Oxo,sUe,Ro,Wy,Vxo,sd,Xxo,VO,zxo,Wxo,XO,Qxo,Uxo,Hxo,Qy,Jxo,Whe,Yxo,Kxo,Zxo,gt,Uy,e$o,Qhe,o$o,r$o,ld,t$o,Uhe,a$o,n$o,zO,s$o,l$o,i$o,x1,d$o,Ke,Hy,c$o,Hhe,f$o,m$o,Xa,g$o,Jhe,h$o,p$o,Yhe,_$o,u$o,Khe,b$o,v$o,F$o,G,$1,Zhe,T$o,M$o,WO,E$o,C$o,w$o,k1,epe,A$o,L$o,QO,y$o,x$o,$$o,S1,ope,k$o,S$o,UO,R$o,P$o,B$o,R1,rpe,I$o,N$o,HO,q$o,j$o,D$o,P1,tpe,G$o,O$o,JO,V$o,X$o,z$o,B1,ape,W$o,Q$o,YO,U$o,H$o,J$o,I1,npe,Y$o,K$o,KO,Z$o,eko,oko,N1,spe,rko,tko,ZO,ako,nko,sko,q1,lpe,lko,iko,eV,dko,cko,fko,j1,ipe,mko,gko,oV,hko,pko,_ko,D1,dpe,uko,bko,rV,vko,Fko,Tko,G1,cpe,Mko,Eko,tV,Cko,wko,Ako,O1,fpe,Lko,yko,aV,xko,$ko,kko,V1,mpe,Sko,Rko,nV,Pko,Bko,Iko,X1,gpe,Nko,qko,sV,jko,Dko,Gko,z1,hpe,Oko,Vko,lV,Xko,zko,Wko,W1,ppe,Qko,Uko,iV,Hko,Jko,Yko,Q1,_pe,Kko,Zko,dV,eSo,oSo,rSo,U1,upe,tSo,aSo,cV,nSo,sSo,lSo,H1,bpe,iSo,dSo,fV,cSo,fSo,mSo,J1,vpe,gSo,hSo,mV,pSo,_So,uSo,Y1,Fpe,bSo,vSo,gV,FSo,TSo,MSo,K1,Tpe,ESo,CSo,hV,wSo,ASo,LSo,Z1,Mpe,ySo,xSo,pV,$So,kSo,SSo,e4,Epe,RSo,PSo,_V,BSo,ISo,NSo,o4,Cpe,qSo,jSo,uV,DSo,GSo,OSo,r4,wpe,VSo,XSo,bV,zSo,WSo,QSo,t4,Ape,USo,HSo,vV,JSo,YSo,KSo,a4,Lpe,ZSo,eRo,FV,oRo,rRo,tRo,n4,ype,aRo,nRo,TV,sRo,lRo,iRo,s4,xpe,dRo,cRo,MV,fRo,mRo,gRo,l4,$pe,hRo,pRo,EV,_Ro,uRo,bRo,i4,kpe,vRo,FRo,CV,TRo,MRo,ERo,d4,Spe,CRo,wRo,wV,ARo,LRo,yRo,c4,Rpe,xRo,$Ro,AV,kRo,SRo,RRo,f4,Ppe,PRo,BRo,LV,IRo,NRo,qRo,m4,Bpe,jRo,DRo,yV,GRo,ORo,VRo,g4,Ipe,XRo,zRo,xV,WRo,QRo,URo,h4,Npe,HRo,JRo,$V,YRo,KRo,ZRo,p4,qpe,ePo,oPo,kV,rPo,tPo,aPo,_4,jpe,nPo,sPo,SV,lPo,iPo,dPo,u4,Dpe,cPo,fPo,RV,mPo,gPo,hPo,b4,Gpe,pPo,_Po,PV,uPo,bPo,vPo,v4,Ope,FPo,TPo,BV,MPo,EPo,CPo,F4,Vpe,wPo,APo,IV,LPo,yPo,xPo,T4,Xpe,$Po,kPo,NV,SPo,RPo,PPo,M4,zpe,BPo,IPo,qV,NPo,qPo,jPo,E4,DPo,Wpe,GPo,OPo,Qpe,VPo,XPo,C4,lUe,id,w4,Upe,Jy,zPo,Hpe,WPo,iUe,Po,Yy,QPo,dd,UPo,jV,HPo,JPo,DV,YPo,KPo,ZPo,Ky,eBo,Jpe,oBo,rBo,tBo,ht,Zy,aBo,Ype,nBo,sBo,cd,lBo,Kpe,iBo,dBo,GV,cBo,fBo,mBo,A4,gBo,Ze,e9,hBo,Zpe,pBo,_Bo,za,uBo,e_e,bBo,vBo,o_e,FBo,TBo,r_e,MBo,EBo,CBo,z,L4,t_e,wBo,ABo,OV,LBo,yBo,xBo,y4,a_e,$Bo,kBo,VV,SBo,RBo,PBo,x4,n_e,BBo,IBo,XV,NBo,qBo,jBo,$4,s_e,DBo,GBo,zV,OBo,VBo,XBo,k4,l_e,zBo,WBo,WV,QBo,UBo,HBo,S4,i_e,JBo,YBo,QV,KBo,ZBo,eIo,R4,d_e,oIo,rIo,UV,tIo,aIo,nIo,P4,c_e,sIo,lIo,HV,iIo,dIo,cIo,B4,f_e,fIo,mIo,JV,gIo,hIo,pIo,I4,m_e,_Io,uIo,YV,bIo,vIo,FIo,N4,g_e,TIo,MIo,KV,EIo,CIo,wIo,q4,h_e,AIo,LIo,ZV,yIo,xIo,$Io,j4,p_e,kIo,SIo,eX,RIo,PIo,BIo,D4,__e,IIo,NIo,oX,qIo,jIo,DIo,G4,u_e,GIo,OIo,rX,VIo,XIo,zIo,O4,b_e,WIo,QIo,tX,UIo,HIo,JIo,V4,v_e,YIo,KIo,aX,ZIo,eNo,oNo,X4,F_e,rNo,tNo,nX,aNo,nNo,sNo,z4,T_e,lNo,iNo,sX,dNo,cNo,fNo,W4,M_e,mNo,gNo,lX,hNo,pNo,_No,Q4,E_e,uNo,bNo,iX,vNo,FNo,TNo,U4,C_e,MNo,ENo,dX,CNo,wNo,ANo,H4,w_e,LNo,yNo,cX,xNo,$No,kNo,J4,A_e,SNo,RNo,fX,PNo,BNo,INo,Y4,L_e,NNo,qNo,mX,jNo,DNo,GNo,K4,y_e,ONo,VNo,gX,XNo,zNo,WNo,Z4,x_e,QNo,UNo,hX,HNo,JNo,YNo,e2,$_e,KNo,ZNo,pX,eqo,oqo,rqo,o2,k_e,tqo,aqo,_X,nqo,sqo,lqo,r2,S_e,iqo,dqo,uX,cqo,fqo,mqo,t2,R_e,gqo,hqo,bX,pqo,_qo,uqo,a2,P_e,bqo,vqo,vX,Fqo,Tqo,Mqo,n2,B_e,Eqo,Cqo,FX,wqo,Aqo,Lqo,s2,I_e,yqo,xqo,TX,$qo,kqo,Sqo,l2,N_e,Rqo,Pqo,MX,Bqo,Iqo,Nqo,i2,q_e,qqo,jqo,EX,Dqo,Gqo,Oqo,d2,j_e,Vqo,Xqo,CX,zqo,Wqo,Qqo,c2,D_e,Uqo,Hqo,wX,Jqo,Yqo,Kqo,f2,G_e,Zqo,ejo,AX,ojo,rjo,tjo,m2,O_e,ajo,njo,LX,sjo,ljo,ijo,g2,djo,V_e,cjo,fjo,X_e,mjo,gjo,h2,dUe,fd,p2,z_e,o9,hjo,W_e,pjo,cUe,Bo,r9,_jo,md,ujo,yX,bjo,vjo,xX,Fjo,Tjo,Mjo,t9,Ejo,Q_e,Cjo,wjo,Ajo,pt,a9,Ljo,U_e,yjo,xjo,gd,$jo,H_e,kjo,Sjo,$X,Rjo,Pjo,Bjo,_2,Ijo,eo,n9,Njo,J_e,qjo,jjo,Wa,Djo,Y_e,Gjo,Ojo,K_e,Vjo,Xjo,Z_e,zjo,Wjo,Qjo,U,u2,eue,Ujo,Hjo,kX,Jjo,Yjo,Kjo,b2,oue,Zjo,eDo,SX,oDo,rDo,tDo,v2,rue,aDo,nDo,RX,sDo,lDo,iDo,F2,tue,dDo,cDo,PX,fDo,mDo,gDo,T2,aue,hDo,pDo,BX,_Do,uDo,bDo,M2,nue,vDo,FDo,IX,TDo,MDo,EDo,E2,sue,CDo,wDo,NX,ADo,LDo,yDo,C2,lue,xDo,$Do,qX,kDo,SDo,RDo,w2,iue,PDo,BDo,jX,IDo,NDo,qDo,A2,due,jDo,DDo,DX,GDo,ODo,VDo,L2,cue,XDo,zDo,GX,WDo,QDo,UDo,y2,fue,HDo,JDo,OX,YDo,KDo,ZDo,x2,mue,eGo,oGo,VX,rGo,tGo,aGo,$2,gue,nGo,sGo,XX,lGo,iGo,dGo,k2,hue,cGo,fGo,zX,mGo,gGo,hGo,S2,pue,pGo,_Go,WX,uGo,bGo,vGo,R2,_ue,FGo,TGo,QX,MGo,EGo,CGo,P2,uue,wGo,AGo,UX,LGo,yGo,xGo,B2,bue,$Go,kGo,HX,SGo,RGo,PGo,I2,vue,BGo,IGo,JX,NGo,qGo,jGo,N2,Fue,DGo,GGo,YX,OGo,VGo,XGo,q2,Tue,zGo,WGo,KX,QGo,UGo,HGo,j2,Mue,JGo,YGo,ZX,KGo,ZGo,eOo,D2,Eue,oOo,rOo,ez,tOo,aOo,nOo,G2,Cue,sOo,lOo,oz,iOo,dOo,cOo,O2,wue,fOo,mOo,rz,gOo,hOo,pOo,V2,Aue,_Oo,uOo,tz,bOo,vOo,FOo,X2,Lue,TOo,MOo,az,EOo,COo,wOo,z2,yue,AOo,LOo,nz,yOo,xOo,$Oo,W2,xue,kOo,SOo,sz,ROo,POo,BOo,Q2,$ue,IOo,NOo,lz,qOo,jOo,DOo,U2,kue,GOo,OOo,iz,VOo,XOo,zOo,H2,Sue,WOo,QOo,dz,UOo,HOo,JOo,J2,Rue,YOo,KOo,Pue,ZOo,eVo,oVo,Y2,Bue,rVo,tVo,cz,aVo,nVo,sVo,K2,Iue,lVo,iVo,fz,dVo,cVo,fVo,Z2,Nue,mVo,gVo,mz,hVo,pVo,_Vo,eb,que,uVo,bVo,gz,vVo,FVo,TVo,ob,MVo,jue,EVo,CVo,Due,wVo,AVo,rb,fUe,hd,tb,Gue,s9,LVo,Oue,yVo,mUe,Io,l9,xVo,pd,$Vo,hz,kVo,SVo,pz,RVo,PVo,BVo,i9,IVo,Vue,NVo,qVo,jVo,_t,d9,DVo,Xue,GVo,OVo,_d,VVo,zue,XVo,zVo,_z,WVo,QVo,UVo,ab,HVo,oo,c9,JVo,Wue,YVo,KVo,Qa,ZVo,Que,eXo,oXo,Uue,rXo,tXo,Hue,aXo,nXo,sXo,me,nb,Jue,lXo,iXo,uz,dXo,cXo,fXo,sb,Yue,mXo,gXo,bz,hXo,pXo,_Xo,lb,Kue,uXo,bXo,vz,vXo,FXo,TXo,ib,Zue,MXo,EXo,Fz,CXo,wXo,AXo,db,e1e,LXo,yXo,Tz,xXo,$Xo,kXo,cb,o1e,SXo,RXo,Mz,PXo,BXo,IXo,fb,r1e,NXo,qXo,Ez,jXo,DXo,GXo,mb,t1e,OXo,VXo,Cz,XXo,zXo,WXo,gb,a1e,QXo,UXo,wz,HXo,JXo,YXo,hb,n1e,KXo,ZXo,Az,ezo,ozo,rzo,pb,s1e,tzo,azo,Lz,nzo,szo,lzo,_b,l1e,izo,dzo,yz,czo,fzo,mzo,ub,i1e,gzo,hzo,xz,pzo,_zo,uzo,bb,d1e,bzo,vzo,$z,Fzo,Tzo,Mzo,vb,c1e,Ezo,Czo,kz,wzo,Azo,Lzo,Fb,f1e,yzo,xzo,Sz,$zo,kzo,Szo,Tb,m1e,Rzo,Pzo,Rz,Bzo,Izo,Nzo,Mb,g1e,qzo,jzo,Pz,Dzo,Gzo,Ozo,Eb,h1e,Vzo,Xzo,Bz,zzo,Wzo,Qzo,Cb,Uzo,p1e,Hzo,Jzo,_1e,Yzo,Kzo,wb,gUe,ud,Ab,u1e,f9,Zzo,b1e,eWo,hUe,No,m9,oWo,bd,rWo,Iz,tWo,aWo,Nz,nWo,sWo,lWo,g9,iWo,v1e,dWo,cWo,fWo,ut,h9,mWo,F1e,gWo,hWo,vd,pWo,T1e,_Wo,uWo,qz,bWo,vWo,FWo,Lb,TWo,ro,p9,MWo,M1e,EWo,CWo,Ua,wWo,E1e,AWo,LWo,C1e,yWo,xWo,w1e,$Wo,kWo,SWo,N,yb,A1e,RWo,PWo,jz,BWo,IWo,NWo,xb,L1e,qWo,jWo,Dz,DWo,GWo,OWo,$b,y1e,VWo,XWo,Gz,zWo,WWo,QWo,kb,x1e,UWo,HWo,Oz,JWo,YWo,KWo,Sb,$1e,ZWo,eQo,Vz,oQo,rQo,tQo,Rb,k1e,aQo,nQo,Xz,sQo,lQo,iQo,Pb,S1e,dQo,cQo,zz,fQo,mQo,gQo,Bb,R1e,hQo,pQo,Wz,_Qo,uQo,bQo,Ib,P1e,vQo,FQo,Qz,TQo,MQo,EQo,Nb,B1e,CQo,wQo,Uz,AQo,LQo,yQo,qb,I1e,xQo,$Qo,Hz,kQo,SQo,RQo,jb,N1e,PQo,BQo,Jz,IQo,NQo,qQo,Db,q1e,jQo,DQo,Yz,GQo,OQo,VQo,Gb,j1e,XQo,zQo,Kz,WQo,QQo,UQo,Ob,D1e,HQo,JQo,Zz,YQo,KQo,ZQo,Vb,G1e,eUo,oUo,eW,rUo,tUo,aUo,Xb,O1e,nUo,sUo,oW,lUo,iUo,dUo,zb,V1e,cUo,fUo,rW,mUo,gUo,hUo,Wb,X1e,pUo,_Uo,tW,uUo,bUo,vUo,Qb,z1e,FUo,TUo,aW,MUo,EUo,CUo,Ub,W1e,wUo,AUo,nW,LUo,yUo,xUo,Hb,Q1e,$Uo,kUo,sW,SUo,RUo,PUo,Jb,U1e,BUo,IUo,lW,NUo,qUo,jUo,Yb,H1e,DUo,GUo,iW,OUo,VUo,XUo,Kb,J1e,zUo,WUo,dW,QUo,UUo,HUo,Zb,Y1e,JUo,YUo,cW,KUo,ZUo,eHo,ev,K1e,oHo,rHo,fW,tHo,aHo,nHo,ov,Z1e,sHo,lHo,mW,iHo,dHo,cHo,rv,e4e,fHo,mHo,gW,gHo,hHo,pHo,tv,o4e,_Ho,uHo,hW,bHo,vHo,FHo,av,r4e,THo,MHo,pW,EHo,CHo,wHo,nv,t4e,AHo,LHo,_W,yHo,xHo,$Ho,sv,a4e,kHo,SHo,uW,RHo,PHo,BHo,lv,n4e,IHo,NHo,bW,qHo,jHo,DHo,iv,s4e,GHo,OHo,vW,VHo,XHo,zHo,dv,l4e,WHo,QHo,FW,UHo,HHo,JHo,cv,i4e,YHo,KHo,TW,ZHo,eJo,oJo,fv,d4e,rJo,tJo,MW,aJo,nJo,sJo,mv,c4e,lJo,iJo,EW,dJo,cJo,fJo,gv,f4e,mJo,gJo,CW,hJo,pJo,_Jo,hv,m4e,uJo,bJo,wW,vJo,FJo,TJo,pv,g4e,MJo,EJo,AW,CJo,wJo,AJo,_v,h4e,LJo,yJo,LW,xJo,$Jo,kJo,uv,p4e,SJo,RJo,yW,PJo,BJo,IJo,bv,_4e,NJo,qJo,xW,jJo,DJo,GJo,vv,u4e,OJo,VJo,$W,XJo,zJo,WJo,Fv,b4e,QJo,UJo,kW,HJo,JJo,YJo,Tv,v4e,KJo,ZJo,SW,eYo,oYo,rYo,Mv,F4e,tYo,aYo,RW,nYo,sYo,lYo,Ev,T4e,iYo,dYo,PW,cYo,fYo,mYo,Cv,M4e,gYo,hYo,BW,pYo,_Yo,uYo,wv,E4e,bYo,vYo,IW,FYo,TYo,MYo,Av,EYo,C4e,CYo,wYo,w4e,AYo,LYo,Lv,pUe,Fd,yv,A4e,_9,yYo,L4e,xYo,_Ue,qo,u9,$Yo,Td,kYo,NW,SYo,RYo,qW,PYo,BYo,IYo,b9,NYo,y4e,qYo,jYo,DYo,bt,v9,GYo,x4e,OYo,VYo,Md,XYo,$4e,zYo,WYo,jW,QYo,UYo,HYo,xv,JYo,to,F9,YYo,k4e,KYo,ZYo,Ha,eKo,S4e,oKo,rKo,R4e,tKo,aKo,P4e,nKo,sKo,lKo,Z,$v,B4e,iKo,dKo,DW,cKo,fKo,mKo,kv,I4e,gKo,hKo,GW,pKo,_Ko,uKo,Sv,N4e,bKo,vKo,OW,FKo,TKo,MKo,Rv,q4e,EKo,CKo,VW,wKo,AKo,LKo,Pv,j4e,yKo,xKo,XW,$Ko,kKo,SKo,Bv,D4e,RKo,PKo,zW,BKo,IKo,NKo,Iv,G4e,qKo,jKo,WW,DKo,GKo,OKo,Nv,O4e,VKo,XKo,QW,zKo,WKo,QKo,qv,V4e,UKo,HKo,UW,JKo,YKo,KKo,jv,X4e,ZKo,eZo,HW,oZo,rZo,tZo,Dv,z4e,aZo,nZo,JW,sZo,lZo,iZo,Gv,W4e,dZo,cZo,YW,fZo,mZo,gZo,Ov,Q4e,hZo,pZo,KW,_Zo,uZo,bZo,Vv,U4e,vZo,FZo,ZW,TZo,MZo,EZo,Xv,H4e,CZo,wZo,eQ,AZo,LZo,yZo,zv,J4e,xZo,$Zo,oQ,kZo,SZo,RZo,Wv,Y4e,PZo,BZo,rQ,IZo,NZo,qZo,Qv,K4e,jZo,DZo,tQ,GZo,OZo,VZo,Uv,Z4e,XZo,zZo,aQ,WZo,QZo,UZo,Hv,e2e,HZo,JZo,nQ,YZo,KZo,ZZo,Jv,o2e,eer,oer,sQ,rer,ter,aer,Yv,r2e,ner,ser,lQ,ler,ier,der,Kv,t2e,cer,fer,iQ,mer,ger,her,Zv,a2e,per,_er,dQ,uer,ber,ver,e5,n2e,Fer,Ter,cQ,Mer,Eer,Cer,o5,s2e,wer,Aer,fQ,Ler,yer,xer,r5,l2e,$er,ker,mQ,Ser,Rer,Per,t5,i2e,Ber,Ier,gQ,Ner,qer,jer,a5,d2e,Der,Ger,hQ,Oer,Ver,Xer,n5,c2e,zer,Wer,pQ,Qer,Uer,Her,s5,f2e,Jer,Yer,_Q,Ker,Zer,eor,l5,oor,m2e,ror,tor,g2e,aor,nor,i5,uUe,Ed,d5,h2e,T9,sor,p2e,lor,bUe,jo,M9,ior,Cd,dor,uQ,cor,mor,bQ,gor,hor,por,E9,_or,_2e,uor,bor,vor,vt,C9,For,u2e,Tor,Mor,wd,Eor,b2e,Cor,wor,vQ,Aor,Lor,yor,c5,xor,ao,w9,$or,v2e,kor,Sor,Ja,Ror,F2e,Por,Bor,T2e,Ior,Nor,M2e,qor,jor,Dor,Do,f5,E2e,Gor,Oor,FQ,Vor,Xor,zor,m5,C2e,Wor,Qor,TQ,Uor,Hor,Jor,g5,w2e,Yor,Kor,MQ,Zor,err,orr,h5,A2e,rrr,trr,EQ,arr,nrr,srr,p5,L2e,lrr,irr,CQ,drr,crr,frr,_5,y2e,mrr,grr,wQ,hrr,prr,_rr,u5,urr,x2e,brr,vrr,$2e,Frr,Trr,b5,vUe,Ad,v5,k2e,A9,Mrr,S2e,Err,FUe,Go,L9,Crr,Ld,wrr,AQ,Arr,Lrr,LQ,yrr,xrr,$rr,y9,krr,R2e,Srr,Rrr,Prr,Ft,x9,Brr,P2e,Irr,Nrr,yd,qrr,B2e,jrr,Drr,yQ,Grr,Orr,Vrr,F5,Xrr,no,$9,zrr,I2e,Wrr,Qrr,Ya,Urr,N2e,Hrr,Jrr,q2e,Yrr,Krr,j2e,Zrr,etr,otr,H,T5,D2e,rtr,ttr,xQ,atr,ntr,str,M5,G2e,ltr,itr,$Q,dtr,ctr,ftr,E5,O2e,mtr,gtr,kQ,htr,ptr,_tr,C5,V2e,utr,btr,SQ,vtr,Ftr,Ttr,w5,X2e,Mtr,Etr,RQ,Ctr,wtr,Atr,A5,z2e,Ltr,ytr,PQ,xtr,$tr,ktr,L5,W2e,Str,Rtr,BQ,Ptr,Btr,Itr,y5,Q2e,Ntr,qtr,IQ,jtr,Dtr,Gtr,x5,U2e,Otr,Vtr,NQ,Xtr,ztr,Wtr,$5,H2e,Qtr,Utr,qQ,Htr,Jtr,Ytr,k5,J2e,Ktr,Ztr,jQ,ear,oar,rar,S5,Y2e,tar,aar,DQ,nar,sar,lar,R5,K2e,iar,dar,GQ,car,far,mar,P5,Z2e,gar,har,OQ,par,_ar,uar,B5,ebe,bar,Far,VQ,Tar,Mar,Ear,I5,obe,Car,war,XQ,Aar,Lar,yar,N5,rbe,xar,$ar,zQ,kar,Sar,Rar,q5,tbe,Par,Bar,WQ,Iar,Nar,qar,j5,abe,jar,Dar,QQ,Gar,Oar,Var,D5,nbe,Xar,zar,UQ,War,Qar,Uar,G5,sbe,Har,Jar,HQ,Yar,Kar,Zar,O5,lbe,enr,onr,JQ,rnr,tnr,anr,V5,ibe,nnr,snr,YQ,lnr,inr,dnr,X5,dbe,cnr,fnr,KQ,mnr,gnr,hnr,z5,cbe,pnr,_nr,ZQ,unr,bnr,vnr,W5,fbe,Fnr,Tnr,eU,Mnr,Enr,Cnr,Q5,mbe,wnr,Anr,oU,Lnr,ynr,xnr,U5,gbe,$nr,knr,rU,Snr,Rnr,Pnr,H5,hbe,Bnr,Inr,tU,Nnr,qnr,jnr,J5,pbe,Dnr,Gnr,aU,Onr,Vnr,Xnr,Y5,_be,znr,Wnr,nU,Qnr,Unr,Hnr,K5,ube,Jnr,Ynr,sU,Knr,Znr,esr,Z5,bbe,osr,rsr,lU,tsr,asr,nsr,e0,vbe,ssr,lsr,iU,isr,dsr,csr,o0,Fbe,fsr,msr,dU,gsr,hsr,psr,r0,Tbe,_sr,usr,cU,bsr,vsr,Fsr,t0,Mbe,Tsr,Msr,fU,Esr,Csr,wsr,a0,Asr,Ebe,Lsr,ysr,Cbe,xsr,$sr,n0,TUe,xd,s0,wbe,k9,ksr,Abe,Ssr,MUe,Oo,S9,Rsr,$d,Psr,mU,Bsr,Isr,gU,Nsr,qsr,jsr,R9,Dsr,Lbe,Gsr,Osr,Vsr,Tt,P9,Xsr,ybe,zsr,Wsr,kd,Qsr,xbe,Usr,Hsr,hU,Jsr,Ysr,Ksr,l0,Zsr,so,B9,elr,$be,olr,rlr,Ka,tlr,kbe,alr,nlr,Sbe,slr,llr,Rbe,ilr,dlr,clr,V,i0,Pbe,flr,mlr,pU,glr,hlr,plr,d0,Bbe,_lr,ulr,_U,blr,vlr,Flr,c0,Ibe,Tlr,Mlr,uU,Elr,Clr,wlr,f0,Nbe,Alr,Llr,bU,ylr,xlr,$lr,m0,qbe,klr,Slr,vU,Rlr,Plr,Blr,g0,jbe,Ilr,Nlr,FU,qlr,jlr,Dlr,h0,Dbe,Glr,Olr,TU,Vlr,Xlr,zlr,p0,Gbe,Wlr,Qlr,MU,Ulr,Hlr,Jlr,_0,Obe,Ylr,Klr,EU,Zlr,eir,oir,u0,Vbe,rir,tir,CU,air,nir,sir,b0,Xbe,lir,iir,wU,dir,cir,fir,v0,zbe,mir,gir,AU,hir,pir,_ir,F0,Wbe,uir,bir,LU,vir,Fir,Tir,T0,Qbe,Mir,Eir,yU,Cir,wir,Air,M0,Ube,Lir,yir,xU,xir,$ir,kir,E0,Hbe,Sir,Rir,$U,Pir,Bir,Iir,C0,Jbe,Nir,qir,kU,jir,Dir,Gir,w0,Ybe,Oir,Vir,SU,Xir,zir,Wir,A0,Kbe,Qir,Uir,RU,Hir,Jir,Yir,L0,Zbe,Kir,Zir,PU,edr,odr,rdr,y0,eve,tdr,adr,BU,ndr,sdr,ldr,x0,ove,idr,ddr,IU,cdr,fdr,mdr,$0,rve,gdr,hdr,NU,pdr,_dr,udr,k0,tve,bdr,vdr,qU,Fdr,Tdr,Mdr,S0,ave,Edr,Cdr,jU,wdr,Adr,Ldr,R0,nve,ydr,xdr,DU,$dr,kdr,Sdr,P0,sve,Rdr,Pdr,GU,Bdr,Idr,Ndr,B0,lve,qdr,jdr,OU,Ddr,Gdr,Odr,I0,ive,Vdr,Xdr,VU,zdr,Wdr,Qdr,N0,dve,Udr,Hdr,XU,Jdr,Ydr,Kdr,q0,cve,Zdr,ecr,zU,ocr,rcr,tcr,j0,fve,acr,ncr,WU,scr,lcr,icr,D0,mve,dcr,ccr,QU,fcr,mcr,gcr,G0,gve,hcr,pcr,UU,_cr,ucr,bcr,O0,hve,vcr,Fcr,HU,Tcr,Mcr,Ecr,V0,pve,Ccr,wcr,JU,Acr,Lcr,ycr,X0,_ve,xcr,$cr,YU,kcr,Scr,Rcr,z0,uve,Pcr,Bcr,KU,Icr,Ncr,qcr,W0,bve,jcr,Dcr,ZU,Gcr,Ocr,Vcr,Q0,vve,Xcr,zcr,eH,Wcr,Qcr,Ucr,U0,Fve,Hcr,Jcr,oH,Ycr,Kcr,Zcr,H0,Tve,efr,ofr,rH,rfr,tfr,afr,J0,Mve,nfr,sfr,tH,lfr,ifr,dfr,Y0,cfr,Eve,ffr,mfr,Cve,gfr,hfr,K0,EUe,Sd,Z0,wve,I9,pfr,Ave,_fr,CUe,Vo,N9,ufr,Rd,bfr,aH,vfr,Ffr,nH,Tfr,Mfr,Efr,q9,Cfr,Lve,wfr,Afr,Lfr,Mt,j9,yfr,yve,xfr,$fr,Pd,kfr,xve,Sfr,Rfr,sH,Pfr,Bfr,Ifr,eF,Nfr,lo,D9,qfr,$ve,jfr,Dfr,Za,Gfr,kve,Ofr,Vfr,Sve,Xfr,zfr,Rve,Wfr,Qfr,Ufr,Pve,oF,Bve,Hfr,Jfr,lH,Yfr,Kfr,Zfr,rF,emr,Ive,omr,rmr,Nve,tmr,amr,tF,wUe,Bd,aF,qve,G9,nmr,jve,smr,AUe,Xo,O9,lmr,Id,imr,iH,dmr,cmr,dH,fmr,mmr,gmr,V9,hmr,Dve,pmr,_mr,umr,Et,X9,bmr,Gve,vmr,Fmr,Nd,Tmr,Ove,Mmr,Emr,cH,Cmr,wmr,Amr,nF,Lmr,io,z9,ymr,Vve,xmr,$mr,en,kmr,Xve,Smr,Rmr,zve,Pmr,Bmr,Wve,Imr,Nmr,qmr,be,sF,Qve,jmr,Dmr,fH,Gmr,Omr,Vmr,lF,Uve,Xmr,zmr,mH,Wmr,Qmr,Umr,iF,Hve,Hmr,Jmr,gH,Ymr,Kmr,Zmr,dF,Jve,egr,ogr,hH,rgr,tgr,agr,sl,Yve,ngr,sgr,pH,lgr,igr,_H,dgr,cgr,fgr,cF,Kve,mgr,ggr,uH,hgr,pgr,_gr,ll,Zve,ugr,bgr,bH,vgr,Fgr,vH,Tgr,Mgr,Egr,fF,e5e,Cgr,wgr,FH,Agr,Lgr,ygr,Ct,o5e,xgr,$gr,TH,kgr,Sgr,MH,Rgr,Pgr,EH,Bgr,Igr,Ngr,mF,r5e,qgr,jgr,CH,Dgr,Ggr,Ogr,gF,t5e,Vgr,Xgr,wH,zgr,Wgr,Qgr,hF,a5e,Ugr,Hgr,AH,Jgr,Ygr,Kgr,pF,n5e,Zgr,ehr,LH,ohr,rhr,thr,_F,s5e,ahr,nhr,yH,shr,lhr,ihr,uF,l5e,dhr,chr,xH,fhr,mhr,ghr,bF,i5e,hhr,phr,$H,_hr,uhr,bhr,vF,d5e,vhr,Fhr,kH,Thr,Mhr,Ehr,FF,Chr,c5e,whr,Ahr,f5e,Lhr,yhr,TF,LUe,qd,MF,m5e,W9,xhr,g5e,$hr,yUe,zo,Q9,khr,jd,Shr,SH,Rhr,Phr,RH,Bhr,Ihr,Nhr,U9,qhr,h5e,jhr,Dhr,Ghr,wt,H9,Ohr,p5e,Vhr,Xhr,Dd,zhr,_5e,Whr,Qhr,PH,Uhr,Hhr,Jhr,EF,Yhr,co,J9,Khr,u5e,Zhr,epr,on,opr,b5e,rpr,tpr,v5e,apr,npr,F5e,spr,lpr,ipr,T5e,CF,M5e,dpr,cpr,BH,fpr,mpr,gpr,wF,hpr,E5e,ppr,_pr,C5e,upr,bpr,AF,xUe,Gd,LF,w5e,Y9,vpr,A5e,Fpr,$Ue,Wo,K9,Tpr,Od,Mpr,IH,Epr,Cpr,NH,wpr,Apr,Lpr,Z9,ypr,L5e,xpr,$pr,kpr,At,ex,Spr,y5e,Rpr,Ppr,Vd,Bpr,x5e,Ipr,Npr,qH,qpr,jpr,Dpr,yF,Gpr,fo,ox,Opr,$5e,Vpr,Xpr,rn,zpr,k5e,Wpr,Qpr,S5e,Upr,Hpr,R5e,Jpr,Ypr,Kpr,P5e,xF,B5e,Zpr,e_r,jH,o_r,r_r,t_r,$F,a_r,I5e,n_r,s_r,N5e,l_r,i_r,kF,kUe,Xd,SF,q5e,rx,d_r,j5e,c_r,SUe,Qo,tx,f_r,zd,m_r,DH,g_r,h_r,GH,p_r,__r,u_r,ax,b_r,D5e,v_r,F_r,T_r,Lt,nx,M_r,G5e,E_r,C_r,Wd,w_r,O5e,A_r,L_r,OH,y_r,x_r,$_r,RF,k_r,mo,sx,S_r,V5e,R_r,P_r,tn,B_r,X5e,I_r,N_r,z5e,q_r,j_r,W5e,D_r,G_r,O_r,Q5e,PF,U5e,V_r,X_r,VH,z_r,W_r,Q_r,BF,U_r,H5e,H_r,J_r,J5e,Y_r,K_r,IF,RUe,Qd,NF,Y5e,lx,Z_r,K5e,eur,PUe,Uo,ix,our,Ud,rur,XH,tur,aur,zH,nur,sur,lur,dx,iur,Z5e,dur,cur,fur,yt,cx,mur,e0e,gur,hur,Hd,pur,o0e,_ur,uur,WH,bur,vur,Fur,qF,Tur,go,fx,Mur,r0e,Eur,Cur,an,wur,t0e,Aur,Lur,a0e,yur,xur,n0e,$ur,kur,Sur,Pe,jF,s0e,Rur,Pur,QH,Bur,Iur,Nur,DF,l0e,qur,jur,UH,Dur,Gur,Our,GF,i0e,Vur,Xur,HH,zur,Wur,Qur,OF,d0e,Uur,Hur,JH,Jur,Yur,Kur,VF,c0e,Zur,e1r,YH,o1r,r1r,t1r,XF,f0e,a1r,n1r,KH,s1r,l1r,i1r,zF,m0e,d1r,c1r,ZH,f1r,m1r,g1r,WF,g0e,h1r,p1r,eJ,_1r,u1r,b1r,QF,h0e,v1r,F1r,oJ,T1r,M1r,E1r,UF,C1r,p0e,w1r,A1r,_0e,L1r,y1r,HF,BUe,Jd,JF,u0e,mx,x1r,b0e,$1r,IUe,Ho,gx,k1r,Yd,S1r,rJ,R1r,P1r,tJ,B1r,I1r,N1r,hx,q1r,v0e,j1r,D1r,G1r,xt,px,O1r,F0e,V1r,X1r,Kd,z1r,T0e,W1r,Q1r,aJ,U1r,H1r,J1r,YF,Y1r,ho,_x,K1r,M0e,Z1r,e4r,nn,o4r,E0e,r4r,t4r,C0e,a4r,n4r,w0e,s4r,l4r,i4r,st,KF,A0e,d4r,c4r,nJ,f4r,m4r,g4r,ZF,L0e,h4r,p4r,sJ,_4r,u4r,b4r,eT,y0e,v4r,F4r,lJ,T4r,M4r,E4r,oT,x0e,C4r,w4r,iJ,A4r,L4r,y4r,rT,$0e,x4r,$4r,dJ,k4r,S4r,R4r,tT,P4r,k0e,B4r,I4r,S0e,N4r,q4r,aT,NUe,Zd,nT,R0e,ux,j4r,P0e,D4r,qUe,Jo,bx,G4r,ec,O4r,cJ,V4r,X4r,fJ,z4r,W4r,Q4r,vx,U4r,B0e,H4r,J4r,Y4r,$t,Fx,K4r,I0e,Z4r,e2r,oc,o2r,N0e,r2r,t2r,mJ,a2r,n2r,s2r,sT,l2r,po,Tx,i2r,q0e,d2r,c2r,sn,f2r,j0e,m2r,g2r,D0e,h2r,p2r,G0e,_2r,u2r,b2r,Le,lT,O0e,v2r,F2r,gJ,T2r,M2r,E2r,iT,V0e,C2r,w2r,hJ,A2r,L2r,y2r,dT,X0e,x2r,$2r,pJ,k2r,S2r,R2r,cT,z0e,P2r,B2r,_J,I2r,N2r,q2r,fT,W0e,j2r,D2r,uJ,G2r,O2r,V2r,mT,Q0e,X2r,z2r,bJ,W2r,Q2r,U2r,gT,U0e,H2r,J2r,vJ,Y2r,K2r,Z2r,hT,H0e,ebr,obr,FJ,rbr,tbr,abr,pT,J0e,nbr,sbr,TJ,lbr,ibr,dbr,_T,Y0e,cbr,fbr,MJ,mbr,gbr,hbr,uT,pbr,K0e,_br,ubr,Z0e,bbr,vbr,bT,jUe,rc,vT,eFe,Mx,Fbr,oFe,Tbr,DUe,Yo,Ex,Mbr,tc,Ebr,EJ,Cbr,wbr,CJ,Abr,Lbr,ybr,Cx,xbr,rFe,$br,kbr,Sbr,kt,wx,Rbr,tFe,Pbr,Bbr,ac,Ibr,aFe,Nbr,qbr,wJ,jbr,Dbr,Gbr,FT,Obr,_o,Ax,Vbr,nFe,Xbr,zbr,ln,Wbr,sFe,Qbr,Ubr,lFe,Hbr,Jbr,iFe,Ybr,Kbr,Zbr,Lx,TT,dFe,evr,ovr,AJ,rvr,tvr,avr,MT,cFe,nvr,svr,LJ,lvr,ivr,dvr,ET,cvr,fFe,fvr,mvr,mFe,gvr,hvr,CT,GUe,nc,wT,gFe,yx,pvr,hFe,_vr,OUe,Ko,xx,uvr,sc,bvr,yJ,vvr,Fvr,xJ,Tvr,Mvr,Evr,$x,Cvr,pFe,wvr,Avr,Lvr,St,kx,yvr,_Fe,xvr,$vr,lc,kvr,uFe,Svr,Rvr,$J,Pvr,Bvr,Ivr,AT,Nvr,uo,Sx,qvr,bFe,jvr,Dvr,dn,Gvr,vFe,Ovr,Vvr,FFe,Xvr,zvr,TFe,Wvr,Qvr,Uvr,lt,LT,MFe,Hvr,Jvr,kJ,Yvr,Kvr,Zvr,yT,EFe,e5r,o5r,SJ,r5r,t5r,a5r,xT,CFe,n5r,s5r,RJ,l5r,i5r,d5r,$T,wFe,c5r,f5r,PJ,m5r,g5r,h5r,kT,AFe,p5r,_5r,BJ,u5r,b5r,v5r,ST,F5r,LFe,T5r,M5r,yFe,E5r,C5r,RT,VUe,ic,PT,xFe,Rx,w5r,$Fe,A5r,XUe,Zo,Px,L5r,dc,y5r,IJ,x5r,$5r,NJ,k5r,S5r,R5r,Bx,P5r,kFe,B5r,I5r,N5r,Rt,Ix,q5r,SFe,j5r,D5r,cc,G5r,RFe,O5r,V5r,qJ,X5r,z5r,W5r,BT,Q5r,bo,Nx,U5r,PFe,H5r,J5r,cn,Y5r,BFe,K5r,Z5r,IFe,e0r,o0r,NFe,r0r,t0r,a0r,fn,IT,qFe,n0r,s0r,jJ,l0r,i0r,d0r,NT,jFe,c0r,f0r,DJ,m0r,g0r,h0r,qT,DFe,p0r,_0r,GJ,u0r,b0r,v0r,jT,GFe,F0r,T0r,OJ,M0r,E0r,C0r,DT,w0r,OFe,A0r,L0r,VFe,y0r,x0r,GT,zUe,fc,OT,XFe,qx,$0r,zFe,k0r,WUe,er,jx,S0r,mc,R0r,VJ,P0r,B0r,XJ,I0r,N0r,q0r,Dx,j0r,WFe,D0r,G0r,O0r,Pt,Gx,V0r,QFe,X0r,z0r,gc,W0r,UFe,Q0r,U0r,zJ,H0r,J0r,Y0r,VT,K0r,vo,Ox,Z0r,HFe,eFr,oFr,mn,rFr,JFe,tFr,aFr,YFe,nFr,sFr,KFe,lFr,iFr,dFr,Vx,XT,ZFe,cFr,fFr,WJ,mFr,gFr,hFr,zT,eTe,pFr,_Fr,QJ,uFr,bFr,vFr,WT,FFr,oTe,TFr,MFr,rTe,EFr,CFr,QT,QUe,hc,UT,tTe,Xx,wFr,aTe,AFr,UUe,or,zx,LFr,pc,yFr,UJ,xFr,$Fr,HJ,kFr,SFr,RFr,Wx,PFr,nTe,BFr,IFr,NFr,Bt,Qx,qFr,sTe,jFr,DFr,_c,GFr,lTe,OFr,VFr,JJ,XFr,zFr,WFr,HT,QFr,Fo,Ux,UFr,iTe,HFr,JFr,gn,YFr,dTe,KFr,ZFr,cTe,eTr,oTr,fTe,rTr,tTr,aTr,mTe,JT,gTe,nTr,sTr,YJ,lTr,iTr,dTr,YT,cTr,hTe,fTr,mTr,pTe,gTr,hTr,KT,HUe,uc,ZT,_Te,Hx,pTr,uTe,_Tr,JUe,rr,Jx,uTr,bc,bTr,KJ,vTr,FTr,ZJ,TTr,MTr,ETr,Yx,CTr,bTe,wTr,ATr,LTr,It,Kx,yTr,vTe,xTr,$Tr,vc,kTr,FTe,STr,RTr,eY,PTr,BTr,ITr,e8,NTr,To,Zx,qTr,TTe,jTr,DTr,hn,GTr,MTe,OTr,VTr,ETe,XTr,zTr,CTe,WTr,QTr,UTr,it,o8,wTe,HTr,JTr,oY,YTr,KTr,ZTr,r8,ATe,e8r,o8r,rY,r8r,t8r,a8r,t8,LTe,n8r,s8r,tY,l8r,i8r,d8r,a8,yTe,c8r,f8r,aY,m8r,g8r,h8r,n8,xTe,p8r,_8r,nY,u8r,b8r,v8r,s8,F8r,$Te,T8r,M8r,kTe,E8r,C8r,l8,YUe,Fc,i8,STe,e$,w8r,RTe,A8r,KUe,tr,o$,L8r,Tc,y8r,sY,x8r,$8r,lY,k8r,S8r,R8r,r$,P8r,PTe,B8r,I8r,N8r,Nt,t$,q8r,BTe,j8r,D8r,Mc,G8r,ITe,O8r,V8r,iY,X8r,z8r,W8r,d8,Q8r,Mo,a$,U8r,NTe,H8r,J8r,pn,Y8r,qTe,K8r,Z8r,jTe,eMr,oMr,DTe,rMr,tMr,aMr,GTe,c8,OTe,nMr,sMr,dY,lMr,iMr,dMr,f8,cMr,VTe,fMr,mMr,XTe,gMr,hMr,m8,ZUe,Ec,g8,zTe,n$,pMr,WTe,_Mr,eHe,ar,s$,uMr,Cc,bMr,cY,vMr,FMr,fY,TMr,MMr,EMr,l$,CMr,QTe,wMr,AMr,LMr,qt,i$,yMr,UTe,xMr,$Mr,wc,kMr,HTe,SMr,RMr,mY,PMr,BMr,IMr,h8,NMr,Rr,d$,qMr,JTe,jMr,DMr,_n,GMr,YTe,OMr,VMr,KTe,XMr,zMr,ZTe,WMr,QMr,UMr,q,p8,e8e,HMr,JMr,gY,YMr,KMr,ZMr,_8,o8e,eEr,oEr,hY,rEr,tEr,aEr,u8,r8e,nEr,sEr,pY,lEr,iEr,dEr,b8,t8e,cEr,fEr,_Y,mEr,gEr,hEr,v8,a8e,pEr,_Er,uY,uEr,bEr,vEr,F8,n8e,FEr,TEr,bY,MEr,EEr,CEr,T8,s8e,wEr,AEr,vY,LEr,yEr,xEr,M8,l8e,$Er,kEr,FY,SEr,REr,PEr,E8,i8e,BEr,IEr,TY,NEr,qEr,jEr,C8,d8e,DEr,GEr,MY,OEr,VEr,XEr,w8,c8e,zEr,WEr,EY,QEr,UEr,HEr,A8,f8e,JEr,YEr,CY,KEr,ZEr,eCr,L8,m8e,oCr,rCr,wY,tCr,aCr,nCr,y8,g8e,sCr,lCr,AY,iCr,dCr,cCr,x8,h8e,fCr,mCr,LY,gCr,hCr,pCr,$8,p8e,_Cr,uCr,yY,bCr,vCr,FCr,k8,_8e,TCr,MCr,xY,ECr,CCr,wCr,S8,u8e,ACr,LCr,$Y,yCr,xCr,$Cr,il,b8e,kCr,SCr,kY,RCr,PCr,SY,BCr,ICr,NCr,R8,v8e,qCr,jCr,RY,DCr,GCr,OCr,P8,F8e,VCr,XCr,PY,zCr,WCr,QCr,B8,T8e,UCr,HCr,BY,JCr,YCr,KCr,I8,M8e,ZCr,e3r,IY,o3r,r3r,t3r,N8,E8e,a3r,n3r,NY,s3r,l3r,i3r,q8,C8e,d3r,c3r,qY,f3r,m3r,g3r,j8,w8e,h3r,p3r,jY,_3r,u3r,b3r,D8,A8e,v3r,F3r,DY,T3r,M3r,E3r,G8,L8e,C3r,w3r,GY,A3r,L3r,y3r,O8,y8e,x3r,$3r,OY,k3r,S3r,R3r,V8,x8e,P3r,B3r,VY,I3r,N3r,q3r,X8,$8e,j3r,D3r,XY,G3r,O3r,V3r,z8,k8e,X3r,z3r,zY,W3r,Q3r,U3r,W8,S8e,H3r,J3r,WY,Y3r,K3r,Z3r,Q8,R8e,ewr,owr,QY,rwr,twr,awr,U8,P8e,nwr,swr,UY,lwr,iwr,dwr,H8,B8e,cwr,fwr,HY,mwr,gwr,hwr,J8,I8e,pwr,_wr,JY,uwr,bwr,vwr,Y8,N8e,Fwr,Twr,YY,Mwr,Ewr,Cwr,K8,q8e,wwr,Awr,KY,Lwr,ywr,xwr,Z8,j8e,$wr,kwr,ZY,Swr,Rwr,Pwr,eM,D8e,Bwr,Iwr,eK,Nwr,qwr,jwr,oM,G8e,Dwr,Gwr,oK,Owr,Vwr,Xwr,rM,O8e,zwr,Wwr,rK,Qwr,Uwr,Hwr,tM,V8e,Jwr,Ywr,tK,Kwr,Zwr,e6r,aM,X8e,o6r,r6r,aK,t6r,a6r,n6r,nM,z8e,s6r,l6r,nK,i6r,d6r,c6r,sM,W8e,f6r,m6r,sK,g6r,h6r,p6r,lM,Q8e,_6r,u6r,lK,b6r,v6r,F6r,iM,U8e,T6r,M6r,iK,E6r,C6r,w6r,dM,H8e,A6r,L6r,dK,y6r,x6r,$6r,cM,J8e,k6r,S6r,cK,R6r,P6r,B6r,fM,Y8e,I6r,N6r,fK,q6r,j6r,D6r,mM,oHe,Ac,gM,K8e,c$,G6r,Z8e,O6r,rHe,nr,f$,V6r,Lc,X6r,mK,z6r,W6r,gK,Q6r,U6r,H6r,m$,J6r,eMe,Y6r,K6r,Z6r,jt,g$,eAr,oMe,oAr,rAr,yc,tAr,rMe,aAr,nAr,hK,sAr,lAr,iAr,hM,dAr,Pr,h$,cAr,tMe,fAr,mAr,un,gAr,aMe,hAr,pAr,nMe,_Ar,uAr,sMe,bAr,vAr,FAr,se,pM,lMe,TAr,MAr,pK,EAr,CAr,wAr,_M,iMe,AAr,LAr,_K,yAr,xAr,$Ar,uM,dMe,kAr,SAr,uK,RAr,PAr,BAr,bM,cMe,IAr,NAr,bK,qAr,jAr,DAr,vM,fMe,GAr,OAr,vK,VAr,XAr,zAr,FM,mMe,WAr,QAr,FK,UAr,HAr,JAr,TM,gMe,YAr,KAr,TK,ZAr,e7r,o7r,MM,hMe,r7r,t7r,MK,a7r,n7r,s7r,EM,pMe,l7r,i7r,EK,d7r,c7r,f7r,CM,_Me,m7r,g7r,CK,h7r,p7r,_7r,wM,uMe,u7r,b7r,wK,v7r,F7r,T7r,AM,bMe,M7r,E7r,AK,C7r,w7r,A7r,LM,vMe,L7r,y7r,LK,x7r,$7r,k7r,yM,FMe,S7r,R7r,yK,P7r,B7r,I7r,xM,TMe,N7r,q7r,xK,j7r,D7r,G7r,$M,MMe,O7r,V7r,$K,X7r,z7r,W7r,kM,EMe,Q7r,U7r,kK,H7r,J7r,Y7r,SM,CMe,K7r,Z7r,SK,eLr,oLr,rLr,RM,wMe,tLr,aLr,RK,nLr,sLr,lLr,PM,AMe,iLr,dLr,PK,cLr,fLr,mLr,BM,LMe,gLr,hLr,BK,pLr,_Lr,uLr,IM,yMe,bLr,vLr,IK,FLr,TLr,MLr,NM,xMe,ELr,CLr,NK,wLr,ALr,LLr,qM,tHe,xc,jM,$Me,p$,yLr,kMe,xLr,aHe,sr,_$,$Lr,$c,kLr,qK,SLr,RLr,jK,PLr,BLr,ILr,u$,NLr,SMe,qLr,jLr,DLr,Dt,b$,GLr,RMe,OLr,VLr,kc,XLr,PMe,zLr,WLr,DK,QLr,ULr,HLr,DM,JLr,Br,v$,YLr,BMe,KLr,ZLr,bn,eyr,IMe,oyr,ryr,NMe,tyr,ayr,qMe,nyr,syr,lyr,Me,GM,jMe,iyr,dyr,GK,cyr,fyr,myr,OM,DMe,gyr,hyr,OK,pyr,_yr,uyr,VM,GMe,byr,vyr,VK,Fyr,Tyr,Myr,XM,OMe,Eyr,Cyr,XK,wyr,Ayr,Lyr,zM,VMe,yyr,xyr,zK,$yr,kyr,Syr,WM,XMe,Ryr,Pyr,WK,Byr,Iyr,Nyr,QM,zMe,qyr,jyr,QK,Dyr,Gyr,Oyr,UM,WMe,Vyr,Xyr,UK,zyr,Wyr,Qyr,HM,QMe,Uyr,Hyr,HK,Jyr,Yyr,Kyr,JM,UMe,Zyr,e9r,JK,o9r,r9r,t9r,YM,HMe,a9r,n9r,YK,s9r,l9r,i9r,KM,JMe,d9r,c9r,KK,f9r,m9r,g9r,ZM,YMe,h9r,p9r,ZK,_9r,u9r,b9r,eE,nHe,Sc,oE,KMe,F$,v9r,ZMe,F9r,sHe,lr,T$,T9r,Rc,M9r,eZ,E9r,C9r,oZ,w9r,A9r,L9r,M$,y9r,eEe,x9r,$9r,k9r,Gt,E$,S9r,oEe,R9r,P9r,Pc,B9r,rEe,I9r,N9r,rZ,q9r,j9r,D9r,rE,G9r,Ir,C$,O9r,tEe,V9r,X9r,vn,z9r,aEe,W9r,Q9r,nEe,U9r,H9r,sEe,J9r,Y9r,K9r,Ve,tE,lEe,Z9r,exr,tZ,oxr,rxr,txr,aE,iEe,axr,nxr,aZ,sxr,lxr,ixr,dl,dEe,dxr,cxr,nZ,fxr,mxr,sZ,gxr,hxr,pxr,nE,cEe,_xr,uxr,lZ,bxr,vxr,Fxr,sE,fEe,Txr,Mxr,iZ,Exr,Cxr,wxr,lE,mEe,Axr,Lxr,dZ,yxr,xxr,$xr,iE,gEe,kxr,Sxr,cZ,Rxr,Pxr,Bxr,dE,hEe,Ixr,Nxr,fZ,qxr,jxr,Dxr,cE,lHe,Bc,fE,pEe,w$,Gxr,_Ee,Oxr,iHe,ir,A$,Vxr,Ic,Xxr,mZ,zxr,Wxr,gZ,Qxr,Uxr,Hxr,L$,Jxr,uEe,Yxr,Kxr,Zxr,Ot,y$,e$r,bEe,o$r,r$r,Nc,t$r,vEe,a$r,n$r,hZ,s$r,l$r,i$r,mE,d$r,Nr,x$,c$r,FEe,f$r,m$r,Fn,g$r,TEe,h$r,p$r,MEe,_$r,u$r,EEe,b$r,v$r,F$r,$$,gE,CEe,T$r,M$r,pZ,E$r,C$r,w$r,hE,wEe,A$r,L$r,_Z,y$r,x$r,$$r,pE,dHe,qc,_E,AEe,k$,k$r,LEe,S$r,cHe,dr,S$,R$r,jc,P$r,uZ,B$r,I$r,bZ,N$r,q$r,j$r,R$,D$r,yEe,G$r,O$r,V$r,Vt,P$,X$r,xEe,z$r,W$r,Dc,Q$r,$Ee,U$r,H$r,vZ,J$r,Y$r,K$r,uE,Z$r,qr,B$,ekr,kEe,okr,rkr,Tn,tkr,SEe,akr,nkr,REe,skr,lkr,PEe,ikr,dkr,ckr,de,bE,BEe,fkr,mkr,FZ,gkr,hkr,pkr,vE,IEe,_kr,ukr,TZ,bkr,vkr,Fkr,FE,NEe,Tkr,Mkr,MZ,Ekr,Ckr,wkr,TE,qEe,Akr,Lkr,EZ,ykr,xkr,$kr,ME,jEe,kkr,Skr,CZ,Rkr,Pkr,Bkr,EE,DEe,Ikr,Nkr,wZ,qkr,jkr,Dkr,CE,GEe,Gkr,Okr,AZ,Vkr,Xkr,zkr,wE,OEe,Wkr,Qkr,LZ,Ukr,Hkr,Jkr,AE,VEe,Ykr,Kkr,yZ,Zkr,eSr,oSr,LE,XEe,rSr,tSr,xZ,aSr,nSr,sSr,yE,zEe,lSr,iSr,$Z,dSr,cSr,fSr,xE,WEe,mSr,gSr,kZ,hSr,pSr,_Sr,$E,QEe,uSr,bSr,SZ,vSr,FSr,TSr,kE,UEe,MSr,ESr,RZ,CSr,wSr,ASr,SE,HEe,LSr,ySr,PZ,xSr,$Sr,kSr,RE,JEe,SSr,RSr,BZ,PSr,BSr,ISr,PE,YEe,NSr,qSr,IZ,jSr,DSr,GSr,BE,KEe,OSr,VSr,NZ,XSr,zSr,WSr,IE,ZEe,QSr,USr,qZ,HSr,JSr,YSr,NE,eCe,KSr,ZSr,jZ,eRr,oRr,rRr,qE,fHe,Gc,jE,oCe,I$,tRr,rCe,aRr,mHe,cr,N$,nRr,Oc,sRr,DZ,lRr,iRr,GZ,dRr,cRr,fRr,q$,mRr,tCe,gRr,hRr,pRr,Xt,j$,_Rr,aCe,uRr,bRr,Vc,vRr,nCe,FRr,TRr,OZ,MRr,ERr,CRr,DE,wRr,jr,D$,ARr,sCe,LRr,yRr,Mn,xRr,lCe,$Rr,kRr,iCe,SRr,RRr,dCe,PRr,BRr,IRr,ye,GE,cCe,NRr,qRr,VZ,jRr,DRr,GRr,OE,fCe,ORr,VRr,XZ,XRr,zRr,WRr,VE,mCe,QRr,URr,zZ,HRr,JRr,YRr,XE,gCe,KRr,ZRr,WZ,ePr,oPr,rPr,zE,hCe,tPr,aPr,QZ,nPr,sPr,lPr,WE,pCe,iPr,dPr,UZ,cPr,fPr,mPr,QE,_Ce,gPr,hPr,HZ,pPr,_Pr,uPr,UE,uCe,bPr,vPr,JZ,FPr,TPr,MPr,HE,bCe,EPr,CPr,YZ,wPr,APr,LPr,JE,vCe,yPr,xPr,KZ,$Pr,kPr,SPr,YE,gHe,Xc,KE,FCe,G$,RPr,TCe,PPr,hHe,fr,O$,BPr,zc,IPr,ZZ,NPr,qPr,eee,jPr,DPr,GPr,V$,OPr,MCe,VPr,XPr,zPr,zt,X$,WPr,ECe,QPr,UPr,Wc,HPr,CCe,JPr,YPr,oee,KPr,ZPr,eBr,ZE,oBr,Dr,z$,rBr,wCe,tBr,aBr,En,nBr,ACe,sBr,lBr,LCe,iBr,dBr,yCe,cBr,fBr,mBr,te,eC,xCe,gBr,hBr,ree,pBr,_Br,uBr,oC,$Ce,bBr,vBr,tee,FBr,TBr,MBr,rC,kCe,EBr,CBr,aee,wBr,ABr,LBr,tC,SCe,yBr,xBr,nee,$Br,kBr,SBr,aC,RCe,RBr,PBr,see,BBr,IBr,NBr,nC,PCe,qBr,jBr,lee,DBr,GBr,OBr,sC,BCe,VBr,XBr,iee,zBr,WBr,QBr,lC,ICe,UBr,HBr,dee,JBr,YBr,KBr,iC,NCe,ZBr,eIr,cee,oIr,rIr,tIr,dC,qCe,aIr,nIr,fee,sIr,lIr,iIr,cC,jCe,dIr,cIr,mee,fIr,mIr,gIr,fC,DCe,hIr,pIr,gee,_Ir,uIr,bIr,mC,GCe,vIr,FIr,hee,TIr,MIr,EIr,gC,OCe,CIr,wIr,pee,AIr,LIr,yIr,hC,VCe,xIr,$Ir,_ee,kIr,SIr,RIr,pC,XCe,PIr,BIr,uee,IIr,NIr,qIr,_C,zCe,jIr,DIr,bee,GIr,OIr,VIr,uC,WCe,XIr,zIr,vee,WIr,QIr,UIr,bC,QCe,HIr,JIr,Fee,YIr,KIr,ZIr,vC,UCe,eNr,oNr,Tee,rNr,tNr,aNr,FC,HCe,nNr,sNr,Mee,lNr,iNr,dNr,TC,JCe,cNr,fNr,Eee,mNr,gNr,hNr,MC,YCe,pNr,_Nr,Cee,uNr,bNr,vNr,EC,KCe,FNr,TNr,wee,MNr,ENr,CNr,CC,ZCe,wNr,ANr,Aee,LNr,yNr,xNr,wC,e3e,$Nr,kNr,Lee,SNr,RNr,PNr,AC,pHe,Qc,LC,o3e,W$,BNr,r3e,INr,_He,mr,Q$,NNr,Uc,qNr,yee,jNr,DNr,xee,GNr,ONr,VNr,U$,XNr,t3e,zNr,WNr,QNr,Wt,H$,UNr,a3e,HNr,JNr,Hc,YNr,n3e,KNr,ZNr,$ee,eqr,oqr,rqr,yC,tqr,Gr,J$,aqr,s3e,nqr,sqr,Cn,lqr,l3e,iqr,dqr,i3e,cqr,fqr,d3e,mqr,gqr,hqr,ve,xC,c3e,pqr,_qr,kee,uqr,bqr,vqr,$C,f3e,Fqr,Tqr,See,Mqr,Eqr,Cqr,kC,m3e,wqr,Aqr,Ree,Lqr,yqr,xqr,SC,g3e,$qr,kqr,Pee,Sqr,Rqr,Pqr,RC,h3e,Bqr,Iqr,Bee,Nqr,qqr,jqr,PC,p3e,Dqr,Gqr,Iee,Oqr,Vqr,Xqr,BC,_3e,zqr,Wqr,Nee,Qqr,Uqr,Hqr,IC,u3e,Jqr,Yqr,qee,Kqr,Zqr,ejr,NC,b3e,ojr,rjr,jee,tjr,ajr,njr,qC,v3e,sjr,ljr,Dee,ijr,djr,cjr,jC,F3e,fjr,mjr,Gee,gjr,hjr,pjr,DC,T3e,_jr,ujr,Oee,bjr,vjr,Fjr,GC,M3e,Tjr,Mjr,Vee,Ejr,Cjr,wjr,OC,E3e,Ajr,Ljr,Xee,yjr,xjr,$jr,VC,C3e,kjr,Sjr,zee,Rjr,Pjr,Bjr,XC,w3e,Ijr,Njr,Wee,qjr,jjr,Djr,zC,A3e,Gjr,Ojr,Qee,Vjr,Xjr,zjr,WC,uHe,Jc,QC,L3e,Y$,Wjr,y3e,Qjr,bHe,gr,K$,Ujr,Yc,Hjr,Uee,Jjr,Yjr,Hee,Kjr,Zjr,eDr,Z$,oDr,x3e,rDr,tDr,aDr,Qt,ek,nDr,$3e,sDr,lDr,Kc,iDr,k3e,dDr,cDr,Jee,fDr,mDr,gDr,UC,hDr,Or,ok,pDr,S3e,_Dr,uDr,wn,bDr,R3e,vDr,FDr,P3e,TDr,MDr,B3e,EDr,CDr,wDr,rk,HC,I3e,ADr,LDr,Yee,yDr,xDr,$Dr,JC,N3e,kDr,SDr,Kee,RDr,PDr,BDr,YC,vHe,Zc,KC,q3e,tk,IDr,j3e,NDr,FHe,hr,ak,qDr,ef,jDr,Zee,DDr,GDr,eoe,ODr,VDr,XDr,nk,zDr,D3e,WDr,QDr,UDr,Ut,sk,HDr,G3e,JDr,YDr,of,KDr,O3e,ZDr,eGr,ooe,oGr,rGr,tGr,ZC,aGr,Vr,lk,nGr,V3e,sGr,lGr,An,iGr,X3e,dGr,cGr,z3e,fGr,mGr,W3e,gGr,hGr,pGr,Q3e,e3,U3e,_Gr,uGr,roe,bGr,vGr,FGr,o3,THe,rf,r3,H3e,ik,TGr,J3e,MGr,MHe,pr,dk,EGr,tf,CGr,toe,wGr,AGr,aoe,LGr,yGr,xGr,ck,$Gr,Y3e,kGr,SGr,RGr,Ht,fk,PGr,K3e,BGr,IGr,af,NGr,Z3e,qGr,jGr,noe,DGr,GGr,OGr,t3,VGr,Xr,mk,XGr,ewe,zGr,WGr,Ln,QGr,owe,UGr,HGr,rwe,JGr,YGr,twe,KGr,ZGr,eOr,ce,a3,awe,oOr,rOr,soe,tOr,aOr,nOr,n3,nwe,sOr,lOr,loe,iOr,dOr,cOr,s3,swe,fOr,mOr,ioe,gOr,hOr,pOr,l3,lwe,_Or,uOr,doe,bOr,vOr,FOr,i3,iwe,TOr,MOr,coe,EOr,COr,wOr,d3,dwe,AOr,LOr,foe,yOr,xOr,$Or,c3,cwe,kOr,SOr,moe,ROr,POr,BOr,f3,fwe,IOr,NOr,goe,qOr,jOr,DOr,m3,mwe,GOr,OOr,hoe,VOr,XOr,zOr,g3,gwe,WOr,QOr,poe,UOr,HOr,JOr,h3,hwe,YOr,KOr,_oe,ZOr,eVr,oVr,p3,pwe,rVr,tVr,uoe,aVr,nVr,sVr,_3,_we,lVr,iVr,boe,dVr,cVr,fVr,u3,uwe,mVr,gVr,voe,hVr,pVr,_Vr,b3,bwe,uVr,bVr,Foe,vVr,FVr,TVr,v3,vwe,MVr,EVr,Toe,CVr,wVr,AVr,F3,Fwe,LVr,yVr,Moe,xVr,$Vr,kVr,T3,Twe,SVr,RVr,Eoe,PVr,BVr,IVr,M3,Mwe,NVr,qVr,Coe,jVr,DVr,GVr,E3,Ewe,OVr,VVr,woe,XVr,zVr,WVr,C3,EHe,nf,w3,Cwe,gk,QVr,wwe,UVr,CHe,_r,hk,HVr,sf,JVr,Aoe,YVr,KVr,Loe,ZVr,eXr,oXr,pk,rXr,Awe,tXr,aXr,nXr,Jt,_k,sXr,Lwe,lXr,iXr,lf,dXr,ywe,cXr,fXr,yoe,mXr,gXr,hXr,A3,pXr,zr,uk,_Xr,xwe,uXr,bXr,yn,vXr,$we,FXr,TXr,kwe,MXr,EXr,Swe,CXr,wXr,AXr,fe,L3,Rwe,LXr,yXr,xoe,xXr,$Xr,kXr,y3,Pwe,SXr,RXr,$oe,PXr,BXr,IXr,x3,Bwe,NXr,qXr,koe,jXr,DXr,GXr,$3,Iwe,OXr,VXr,Soe,XXr,zXr,WXr,k3,Nwe,QXr,UXr,Roe,HXr,JXr,YXr,S3,qwe,KXr,ZXr,Poe,ezr,ozr,rzr,R3,jwe,tzr,azr,Boe,nzr,szr,lzr,P3,Dwe,izr,dzr,Ioe,czr,fzr,mzr,B3,Gwe,gzr,hzr,Noe,pzr,_zr,uzr,I3,Owe,bzr,vzr,qoe,Fzr,Tzr,Mzr,N3,Vwe,Ezr,Czr,joe,wzr,Azr,Lzr,q3,Xwe,yzr,xzr,Doe,$zr,kzr,Szr,j3,zwe,Rzr,Pzr,Goe,Bzr,Izr,Nzr,D3,Wwe,qzr,jzr,Ooe,Dzr,Gzr,Ozr,G3,Qwe,Vzr,Xzr,Voe,zzr,Wzr,Qzr,O3,Uwe,Uzr,Hzr,Xoe,Jzr,Yzr,Kzr,V3,Hwe,Zzr,eWr,zoe,oWr,rWr,tWr,X3,Jwe,aWr,nWr,Woe,sWr,lWr,iWr,z3,Ywe,dWr,cWr,Qoe,fWr,mWr,gWr,W3,Kwe,hWr,pWr,Uoe,_Wr,uWr,bWr,Q3,wHe,df,U3,Zwe,bk,vWr,e6e,FWr,AHe,ur,vk,TWr,cf,MWr,Hoe,EWr,CWr,Joe,wWr,AWr,LWr,Fk,yWr,o6e,xWr,$Wr,kWr,Yt,Tk,SWr,r6e,RWr,PWr,ff,BWr,t6e,IWr,NWr,Yoe,qWr,jWr,DWr,H3,GWr,Wr,Mk,OWr,a6e,VWr,XWr,xn,zWr,n6e,WWr,QWr,s6e,UWr,HWr,l6e,JWr,YWr,KWr,i6e,J3,d6e,ZWr,eQr,Koe,oQr,rQr,tQr,Y3,LHe,mf,K3,c6e,Ek,aQr,f6e,nQr,yHe,br,Ck,sQr,gf,lQr,Zoe,iQr,dQr,ere,cQr,fQr,mQr,wk,gQr,m6e,hQr,pQr,_Qr,Kt,Ak,uQr,g6e,bQr,vQr,hf,FQr,h6e,TQr,MQr,ore,EQr,CQr,wQr,Z3,AQr,Qr,Lk,LQr,p6e,yQr,xQr,$n,$Qr,_6e,kQr,SQr,u6e,RQr,PQr,b6e,BQr,IQr,NQr,v6e,ew,F6e,qQr,jQr,rre,DQr,GQr,OQr,ow,xHe,pf,rw,T6e,yk,VQr,M6e,XQr,$He,vr,xk,zQr,_f,WQr,tre,QQr,UQr,are,HQr,JQr,YQr,$k,KQr,E6e,ZQr,eUr,oUr,Zt,kk,rUr,C6e,tUr,aUr,uf,nUr,w6e,sUr,lUr,nre,iUr,dUr,cUr,tw,fUr,Ur,Sk,mUr,A6e,gUr,hUr,kn,pUr,L6e,_Ur,uUr,y6e,bUr,vUr,x6e,FUr,TUr,MUr,re,aw,$6e,EUr,CUr,sre,wUr,AUr,LUr,nw,k6e,yUr,xUr,lre,$Ur,kUr,SUr,sw,S6e,RUr,PUr,ire,BUr,IUr,NUr,lw,R6e,qUr,jUr,dre,DUr,GUr,OUr,iw,P6e,VUr,XUr,cre,zUr,WUr,QUr,dw,B6e,UUr,HUr,fre,JUr,YUr,KUr,cw,I6e,ZUr,eHr,mre,oHr,rHr,tHr,fw,N6e,aHr,nHr,gre,sHr,lHr,iHr,mw,q6e,dHr,cHr,hre,fHr,mHr,gHr,gw,j6e,hHr,pHr,pre,_Hr,uHr,bHr,hw,D6e,vHr,FHr,_re,THr,MHr,EHr,pw,G6e,CHr,wHr,ure,AHr,LHr,yHr,_w,O6e,xHr,$Hr,bre,kHr,SHr,RHr,uw,V6e,PHr,BHr,vre,IHr,NHr,qHr,bw,X6e,jHr,DHr,Fre,GHr,OHr,VHr,vw,z6e,XHr,zHr,Tre,WHr,QHr,UHr,Fw,W6e,HHr,JHr,Mre,YHr,KHr,ZHr,Tw,Q6e,eJr,oJr,Ere,rJr,tJr,aJr,Mw,U6e,nJr,sJr,Cre,lJr,iJr,dJr,Ew,H6e,cJr,fJr,wre,mJr,gJr,hJr,Cw,J6e,pJr,_Jr,Are,uJr,bJr,vJr,ww,Y6e,FJr,TJr,Lre,MJr,EJr,CJr,Aw,K6e,wJr,AJr,yre,LJr,yJr,xJr,Lw,Z6e,$Jr,kJr,xre,SJr,RJr,PJr,yw,eAe,BJr,IJr,$re,NJr,qJr,jJr,xw,oAe,DJr,GJr,kre,OJr,VJr,XJr,$w,rAe,zJr,WJr,Sre,QJr,UJr,HJr,kw,kHe,bf,Sw,tAe,Rk,JJr,aAe,YJr,SHe,Fr,Pk,KJr,vf,ZJr,Rre,eYr,oYr,Pre,rYr,tYr,aYr,Bk,nYr,nAe,sYr,lYr,iYr,ea,Ik,dYr,sAe,cYr,fYr,Ff,mYr,lAe,gYr,hYr,Bre,pYr,_Yr,uYr,Rw,bYr,Hr,Nk,vYr,iAe,FYr,TYr,Sn,MYr,dAe,EYr,CYr,cAe,wYr,AYr,fAe,LYr,yYr,xYr,xe,Pw,mAe,$Yr,kYr,Ire,SYr,RYr,PYr,Bw,gAe,BYr,IYr,Nre,NYr,qYr,jYr,Iw,hAe,DYr,GYr,qre,OYr,VYr,XYr,Nw,pAe,zYr,WYr,jre,QYr,UYr,HYr,qw,_Ae,JYr,YYr,Dre,KYr,ZYr,eKr,jw,uAe,oKr,rKr,Gre,tKr,aKr,nKr,Dw,bAe,sKr,lKr,Ore,iKr,dKr,cKr,Gw,vAe,fKr,mKr,Vre,gKr,hKr,pKr,Ow,FAe,_Kr,uKr,Xre,bKr,vKr,FKr,Vw,TAe,TKr,MKr,zre,EKr,CKr,wKr,Xw,RHe,Tf,zw,MAe,qk,AKr,EAe,LKr,PHe,Tr,jk,yKr,Mf,xKr,Wre,$Kr,kKr,Qre,SKr,RKr,PKr,Dk,BKr,CAe,IKr,NKr,qKr,oa,Gk,jKr,wAe,DKr,GKr,Ef,OKr,AAe,VKr,XKr,Ure,zKr,WKr,QKr,Ww,UKr,Jr,Ok,HKr,LAe,JKr,YKr,Rn,KKr,yAe,ZKr,eZr,xAe,oZr,rZr,$Ae,tZr,aZr,nZr,Ee,Qw,kAe,sZr,lZr,Hre,iZr,dZr,cZr,Uw,SAe,fZr,mZr,Jre,gZr,hZr,pZr,Hw,RAe,_Zr,uZr,Yre,bZr,vZr,FZr,Jw,PAe,TZr,MZr,Kre,EZr,CZr,wZr,Yw,BAe,AZr,LZr,Zre,yZr,xZr,$Zr,Kw,IAe,kZr,SZr,ete,RZr,PZr,BZr,Zw,NAe,IZr,NZr,ote,qZr,jZr,DZr,e6,qAe,GZr,OZr,rte,VZr,XZr,zZr,o6,jAe,WZr,QZr,tte,UZr,HZr,JZr,r6,DAe,YZr,KZr,ate,ZZr,eet,oet,t6,GAe,ret,tet,nte,aet,net,set,a6,OAe,iet,det,ste,cet,fet,met,n6,VAe,get,het,lte,pet,_et,uet,s6,BHe,Cf,l6,XAe,Vk,bet,zAe,vet,IHe,Mr,Xk,Fet,wf,Tet,ite,Met,Eet,dte,Cet,wet,Aet,zk,Let,WAe,yet,xet,$et,ra,Wk,ket,QAe,Set,Ret,Af,Pet,UAe,Bet,Iet,cte,Net,qet,jet,i6,Det,Yr,Qk,Get,HAe,Oet,Vet,Pn,Xet,JAe,zet,Wet,YAe,Qet,Uet,KAe,Het,Jet,Yet,$e,d6,ZAe,Ket,Zet,fte,eot,oot,rot,c6,e7e,tot,aot,mte,not,sot,lot,f6,o7e,iot,dot,gte,cot,fot,mot,m6,r7e,got,hot,hte,pot,_ot,uot,g6,t7e,bot,vot,pte,Fot,Tot,Mot,h6,a7e,Eot,Cot,_te,wot,Aot,Lot,p6,n7e,yot,xot,ute,$ot,kot,Sot,_6,s7e,Rot,Pot,bte,Bot,Iot,Not,u6,l7e,qot,jot,vte,Dot,Got,Oot,b6,i7e,Vot,Xot,Fte,zot,Wot,Qot,v6,NHe,Lf,F6,d7e,Uk,Uot,c7e,Hot,qHe,Er,Hk,Jot,yf,Yot,Tte,Kot,Zot,Mte,ert,ort,rrt,Jk,trt,f7e,art,nrt,srt,ta,Yk,lrt,m7e,irt,drt,xf,crt,g7e,frt,mrt,Ete,grt,hrt,prt,T6,_rt,Kr,Kk,urt,h7e,brt,vrt,Bn,Frt,p7e,Trt,Mrt,_7e,Ert,Crt,u7e,wrt,Art,Lrt,ke,M6,b7e,yrt,xrt,Cte,$rt,krt,Srt,E6,v7e,Rrt,Prt,wte,Brt,Irt,Nrt,C6,F7e,qrt,jrt,Ate,Drt,Grt,Ort,w6,T7e,Vrt,Xrt,Lte,zrt,Wrt,Qrt,A6,M7e,Urt,Hrt,yte,Jrt,Yrt,Krt,L6,E7e,Zrt,ett,xte,ott,rtt,ttt,y6,C7e,att,ntt,$te,stt,ltt,itt,x6,w7e,dtt,ctt,kte,ftt,mtt,gtt,$6,A7e,htt,ptt,Ste,_tt,utt,btt,k6,L7e,vtt,Ftt,Rte,Ttt,Mtt,Ett,S6,jHe,$f,R6,y7e,Zk,Ctt,x7e,wtt,DHe,Cr,eS,Att,kf,Ltt,Pte,ytt,xtt,Bte,$tt,ktt,Stt,oS,Rtt,$7e,Ptt,Btt,Itt,aa,rS,Ntt,k7e,qtt,jtt,Sf,Dtt,S7e,Gtt,Ott,Ite,Vtt,Xtt,ztt,P6,Wtt,Zr,tS,Qtt,R7e,Utt,Htt,In,Jtt,P7e,Ytt,Ktt,B7e,Ztt,eat,I7e,oat,rat,tat,Se,B6,N7e,aat,nat,Nte,sat,lat,iat,I6,q7e,dat,cat,qte,fat,mat,gat,N6,j7e,hat,pat,jte,_at,uat,bat,q6,D7e,vat,Fat,Dte,Tat,Mat,Eat,j6,G7e,Cat,wat,Gte,Aat,Lat,yat,D6,O7e,xat,$at,Ote,kat,Sat,Rat,G6,V7e,Pat,Bat,Vte,Iat,Nat,qat,O6,X7e,jat,Dat,Xte,Gat,Oat,Vat,V6,z7e,Xat,zat,zte,Wat,Qat,Uat,X6,W7e,Hat,Jat,Wte,Yat,Kat,Zat,z6,GHe,Rf,W6,Q7e,aS,ent,U7e,ont,OHe,wr,nS,rnt,Pf,tnt,Qte,ant,nnt,Ute,snt,lnt,int,sS,dnt,H7e,cnt,fnt,mnt,na,lS,gnt,J7e,hnt,pnt,Bf,_nt,Y7e,unt,bnt,Hte,vnt,Fnt,Tnt,Q6,Mnt,et,iS,Ent,K7e,Cnt,wnt,Nn,Ant,Z7e,Lnt,ynt,eLe,xnt,$nt,oLe,knt,Snt,Rnt,Re,U6,rLe,Pnt,Bnt,Jte,Int,Nnt,qnt,H6,tLe,jnt,Dnt,Yte,Gnt,Ont,Vnt,J6,aLe,Xnt,znt,Kte,Wnt,Qnt,Unt,Y6,nLe,Hnt,Jnt,Zte,Ynt,Knt,Znt,K6,sLe,est,ost,eae,rst,tst,ast,Z6,lLe,nst,sst,oae,lst,ist,dst,eA,iLe,cst,fst,rae,mst,gst,hst,oA,dLe,pst,_st,tae,ust,bst,vst,rA,cLe,Fst,Tst,aae,Mst,Est,Cst,tA,fLe,wst,Ast,nae,Lst,yst,xst,aA,VHe,If,nA,mLe,dS,$st,gLe,kst,XHe,Ar,cS,Sst,Nf,Rst,sae,Pst,Bst,lae,Ist,Nst,qst,fS,jst,hLe,Dst,Gst,Ost,sa,mS,Vst,pLe,Xst,zst,qf,Wst,_Le,Qst,Ust,iae,Hst,Jst,Yst,sA,Kst,ot,gS,Zst,uLe,elt,olt,qn,rlt,bLe,tlt,alt,vLe,nlt,slt,FLe,llt,ilt,dlt,Xe,lA,TLe,clt,flt,dae,mlt,glt,hlt,iA,MLe,plt,_lt,cae,ult,blt,vlt,dA,ELe,Flt,Tlt,fae,Mlt,Elt,Clt,cA,CLe,wlt,Alt,mae,Llt,ylt,xlt,fA,wLe,$lt,klt,gae,Slt,Rlt,Plt,mA,ALe,Blt,Ilt,hae,Nlt,qlt,jlt,gA,LLe,Dlt,Glt,pae,Olt,Vlt,Xlt,hA,yLe,zlt,Wlt,_ae,Qlt,Ult,Hlt,pA,zHe,jf,_A,xLe,hS,Jlt,$Le,Ylt,WHe,Lr,pS,Klt,Df,Zlt,uae,eit,oit,bae,rit,tit,ait,_S,nit,kLe,sit,lit,iit,la,uS,dit,SLe,cit,fit,Gf,mit,RLe,git,hit,vae,pit,_it,uit,uA,bit,rt,bS,vit,PLe,Fit,Tit,jn,Mit,BLe,Eit,Cit,ILe,wit,Ait,NLe,Lit,yit,xit,ze,bA,qLe,$it,kit,Fae,Sit,Rit,Pit,vA,jLe,Bit,Iit,Tae,Nit,qit,jit,FA,DLe,Dit,Git,Mae,Oit,Vit,Xit,TA,GLe,zit,Wit,Eae,Qit,Uit,Hit,MA,OLe,Jit,Yit,Cae,Kit,Zit,edt,EA,VLe,odt,rdt,wae,tdt,adt,ndt,CA,XLe,sdt,ldt,Aae,idt,ddt,cdt,wA,zLe,fdt,mdt,Lae,gdt,hdt,pdt,AA,QHe,Of,LA,WLe,vS,_dt,QLe,udt,UHe,yr,FS,bdt,Vf,vdt,yae,Fdt,Tdt,xae,Mdt,Edt,Cdt,TS,wdt,ULe,Adt,Ldt,ydt,ia,MS,xdt,HLe,$dt,kdt,Xf,Sdt,JLe,Rdt,Pdt,$ae,Bdt,Idt,Ndt,yA,qdt,tt,ES,jdt,YLe,Ddt,Gdt,Dn,Odt,KLe,Vdt,Xdt,ZLe,zdt,Wdt,eye,Qdt,Udt,Hdt,oye,xA,rye,Jdt,Ydt,kae,Kdt,Zdt,ect,$A,HHe,zf,kA,tye,CS,oct,aye,rct,JHe,xr,wS,tct,Wf,act,Sae,nct,sct,Rae,lct,ict,dct,AS,cct,nye,fct,mct,gct,da,LS,hct,sye,pct,_ct,Qf,uct,lye,bct,vct,Pae,Fct,Tct,Mct,SA,Ect,at,yS,Cct,iye,wct,Act,Gn,Lct,dye,yct,xct,cye,$ct,kct,fye,Sct,Rct,Pct,xS,RA,mye,Bct,Ict,Bae,Nct,qct,jct,PA,gye,Dct,Gct,Iae,Oct,Vct,Xct,BA,YHe,Uf,IA,hye,$S,zct,pye,Wct,KHe,$r,kS,Qct,Hf,Uct,Nae,Hct,Jct,qae,Yct,Kct,Zct,SS,eft,_ye,oft,rft,tft,ca,RS,aft,uye,nft,sft,Jf,lft,bye,ift,dft,jae,cft,fft,mft,NA,gft,nt,PS,hft,vye,pft,_ft,On,uft,Fye,bft,vft,Tye,Fft,Tft,Mye,Mft,Eft,Cft,Eye,qA,Cye,wft,Aft,Dae,Lft,yft,xft,jA,ZHe;return d=new oe({}),ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),hy=new oe({}),py=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),nm=new $ft({props:{warning:!0,$$slots:{default:[Hra]},$$scope:{ctx:$}}}),_y=new oe({}),uy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/configuration_auto.py#L625"}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/configuration_auto.py#L648"}}),Th=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Jra]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/configuration_auto.py#L771"}}),My=new oe({}),Ey=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/tokenization_auto.py#L418"}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18450/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/tokenization_auto.py#L432"}}),tp=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Yra]},$$scope:{ctx:$}}}),Ly=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/tokenization_auto.py#L633"}}),yy=new oe({}),xy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18450/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),Xp=new $ft({props:{$$slots:{default:[Kra]},$$scope:{ctx:$}}}),zp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Zra]},$$scope:{ctx:$}}}),Ry=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),Py=new oe({}),By=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/processing_auto.py#L91"}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/processing_auto.py#L105"}}),h_=new $ft({props:{$$slots:{default:[eta]},$$scope:{ctx:$}}}),p_=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[ota]},$$scope:{ctx:$}}}),jy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/processing_auto.py#L258"}}),Dy=new oe({}),Gy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L808"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),b_=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[rta]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),L1=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[tta]},$$scope:{ctx:$}}}),zy=new oe({}),Wy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L815"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),x1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[ata]},$$scope:{ctx:$}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),C4=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[nta]},$$scope:{ctx:$}}}),Jy=new oe({}),Yy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L830"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),A4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[sta]},$$scope:{ctx:$}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lta]},$$scope:{ctx:$}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L837"}}),a9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),_2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[ita]},$$scope:{ctx:$}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),rb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dta]},$$scope:{ctx:$}}}),s9=new oe({}),l9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L844"}}),d9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),ab=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cta]},$$scope:{ctx:$}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[fta]},$$scope:{ctx:$}}}),f9=new oe({}),m9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L853"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),Lb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[mta]},$$scope:{ctx:$}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),Lv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gta]},$$scope:{ctx:$}}}),_9=new oe({}),u9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L898"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),xv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[hta]},$$scope:{ctx:$}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),i5=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pta]},$$scope:{ctx:$}}}),T9=new oe({}),M9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L905"}}),C9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_ta]},$$scope:{ctx:$}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uta]},$$scope:{ctx:$}}}),A9=new oe({}),L9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L891"}}),x9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[bta]},$$scope:{ctx:$}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vta]},$$scope:{ctx:$}}}),k9=new oe({}),S9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L862"}}),P9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Fta]},$$scope:{ctx:$}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),K0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Tta]},$$scope:{ctx:$}}}),I9=new oe({}),N9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L869"}}),j9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),eF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Mta]},$$scope:{ctx:$}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),tF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Eta]},$$scope:{ctx:$}}}),G9=new oe({}),O9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L914"}}),X9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18450/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),nF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Cta]},$$scope:{ctx:$}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[wta]},$$scope:{ctx:$}}}),W9=new oe({}),Q9=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L953"}}),H9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[Ata]},$$scope:{ctx:$}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[Lta]},$$scope:{ctx:$}}}),Y9=new oe({}),K9=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L960"}}),ex=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[yta]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xta]},$$scope:{ctx:$}}}),rx=new oe({}),tx=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L880"}}),nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[$ta]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[kta]},$$scope:{ctx:$}}}),lx=new oe({}),ix=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L967"}}),cx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),qF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Sta]},$$scope:{ctx:$}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Rta]},$$scope:{ctx:$}}}),mx=new oe({}),gx=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L990"}}),px=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Pta]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Bta]},$$scope:{ctx:$}}}),ux=new oe({}),bx=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L974"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Ita]},$$scope:{ctx:$}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Nta]},$$scope:{ctx:$}}}),Mx=new oe({}),Ex=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L981"}}),wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qta]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[jta]},$$scope:{ctx:$}}}),yx=new oe({}),xx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L999"}}),kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Dta]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Gta]},$$scope:{ctx:$}}}),Rx=new oe({}),Px=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L1006"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Ota]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Vta]},$$scope:{ctx:$}}}),qx=new oe({}),jx=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L946"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Xta]},$$scope:{ctx:$}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[zta]},$$scope:{ctx:$}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L921"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Wta]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Qta]},$$scope:{ctx:$}}}),Hx=new oe({}),Jx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L928"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),e8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Uta]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),l8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Hta]},$$scope:{ctx:$}}}),e$=new oe({}),o$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_auto.py#L937"}}),t$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),d8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Jta]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),m8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Yta]},$$scope:{ctx:$}}}),n$=new oe({}),s$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),i$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/owlvit#transformers.TFOwlViTModel">TFOwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),h8=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Kta]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Zta]},$$scope:{ctx:$}}}),c$=new oe({}),f$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),g$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[eaa]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[oaa]},$$scope:{ctx:$}}}),p$=new oe({}),_$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L439"}}),b$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[raa]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[taa]},$$scope:{ctx:$}}}),F$=new oe({}),T$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),E$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18450/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[aaa]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[naa]},$$scope:{ctx:$}}}),w$=new oe({}),A$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),y$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[saa]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[laa]},$$scope:{ctx:$}}}),k$=new oe({}),S$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),P$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[iaa]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[daa]},$$scope:{ctx:$}}}),I$=new oe({}),N$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),j$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[caa]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[faa]},$$scope:{ctx:$}}}),G$=new oe({}),O$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),X$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[maa]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gaa]},$$scope:{ctx:$}}}),W$=new oe({}),Q$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L532"}}),H$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[haa]},$$scope:{ctx:$}}}),J$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[paa]},$$scope:{ctx:$}}}),Y$=new oe({}),K$=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),ek=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_aa]},$$scope:{ctx:$}}}),ok=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uaa]},$$scope:{ctx:$}}}),tk=new oe({}),ak=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),sk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[baa]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vaa]},$$scope:{ctx:$}}}),ik=new oe({}),dk=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),fk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),t3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Faa]},$$scope:{ctx:$}}}),mk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Taa]},$$scope:{ctx:$}}}),gk=new oe({}),hk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L505"}}),_k=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Maa]},$$scope:{ctx:$}}}),uk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Eaa]},$$scope:{ctx:$}}}),bk=new oe({}),vk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),Tk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Caa]},$$scope:{ctx:$}}}),Mk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[waa]},$$scope:{ctx:$}}}),Ek=new oe({}),Ck=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_tf_auto.py#L548"}}),Ak=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),Z3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Aaa]},$$scope:{ctx:$}}}),Lk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Laa]},$$scope:{ctx:$}}}),yk=new oe({}),xk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),kk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[yaa]},$$scope:{ctx:$}}}),Sk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[xaa]},$$scope:{ctx:$}}}),Rk=new oe({}),Pk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[$aa]},$$scope:{ctx:$}}}),Nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),Xw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kaa]},$$scope:{ctx:$}}}),qk=new oe({}),jk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Saa]},$$scope:{ctx:$}}}),Ok=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),s6=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Raa]},$$scope:{ctx:$}}}),Vk=new oe({}),Xk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Wk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),i6=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Paa]},$$scope:{ctx:$}}}),Qk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),v6=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Baa]},$$scope:{ctx:$}}}),Uk=new oe({}),Hk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Yk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),T6=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Iaa]},$$scope:{ctx:$}}}),Kk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Naa]},$$scope:{ctx:$}}}),Zk=new oe({}),eS=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),rS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[qaa]},$$scope:{ctx:$}}}),tS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),z6=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jaa]},$$scope:{ctx:$}}}),aS=new oe({}),nS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),lS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),Q6=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Daa]},$$scope:{ctx:$}}}),iS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),aA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Gaa]},$$scope:{ctx:$}}}),dS=new oe({}),cS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),mS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Oaa]},$$scope:{ctx:$}}}),gS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),pA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Vaa]},$$scope:{ctx:$}}}),hS=new oe({}),pS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),uS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),uA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Xaa]},$$scope:{ctx:$}}}),bS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),AA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zaa]},$$scope:{ctx:$}}}),vS=new oe({}),FS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),MS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),yA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Waa]},$$scope:{ctx:$}}}),ES=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),$A=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Qaa]},$$scope:{ctx:$}}}),CS=new oe({}),wS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),LS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),SA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Uaa]},$$scope:{ctx:$}}}),yS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),BA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Haa]},$$scope:{ctx:$}}}),$S=new oe({}),kS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),RS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18450/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18450/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L389"}}),NA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Jaa]},$$scope:{ctx:$}}}),PS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18450/src/transformers/models/auto/auto_factory.py#L417"}}),jA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Yaa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),em=l(),ft=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),cy=o("from_pretrained()"),om=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),zi=o("Instantiating one of "),Xn=a("a"),fy=o("AutoConfig"),zn=o(", "),Wn=a("a"),my=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),gy=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),rm=l(),F(ja.$$.fragment),Ue=l(),Ae=a("p"),aP=o("will create a model that is an instance of "),Ui=a("a"),nP=o("BertModel"),sP=o("."),Lo=l(),Da=a("p"),lP=o("There is one class of "),tm=a("code"),iP=o("AutoModel"),hKe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),XQe=l(),Hi=a("h2"),am=a("a"),qse=a("span"),F(hy.$$.fragment),pKe=l(),jse=a("span"),_Ke=o("Extending the Auto Classes"),zQe=l(),Un=a("p"),uKe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dse=a("code"),bKe=o("NewModel"),vKe=o(", make sure you have a "),Gse=a("code"),FKe=o("NewModelConfig"),TKe=o(` then you can add those to the auto
classes like this:`),WQe=l(),F(py.$$.fragment),QQe=l(),dP=a("p"),MKe=o("You will then be able to use the auto classes like you would usually do!"),UQe=l(),F(nm.$$.fragment),HQe=l(),Ji=a("h2"),sm=a("a"),Ose=a("span"),F(_y.$$.fragment),EKe=l(),Vse=a("span"),CKe=o("AutoConfig"),JQe=l(),yo=a("div"),F(uy.$$.fragment),wKe=l(),by=a("p"),AKe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),cP=a("a"),LKe=o("from_pretrained()"),yKe=o(" class method."),xKe=l(),vy=a("p"),$Ke=o("This class cannot be instantiated directly using "),Xse=a("code"),kKe=o("__init__()"),SKe=o(" (throws an error)."),RKe=l(),kr=a("div"),F(Fy.$$.fragment),PKe=l(),zse=a("p"),BKe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),IKe=l(),Yi=a("p"),NKe=o("The configuration class to instantiate is selected based on the "),Wse=a("code"),qKe=o("model_type"),jKe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Qse=a("code"),DKe=o("pretrained_model_name_or_path"),GKe=o(":"),OKe=l(),A=a("ul"),lm=a("li"),Use=a("strong"),VKe=o("albert"),XKe=o(" \u2014 "),fP=a("a"),zKe=o("AlbertConfig"),WKe=o(" (ALBERT model)"),QKe=l(),im=a("li"),Hse=a("strong"),UKe=o("bart"),HKe=o(" \u2014 "),mP=a("a"),JKe=o("BartConfig"),YKe=o(" (BART model)"),KKe=l(),dm=a("li"),Jse=a("strong"),ZKe=o("beit"),eZe=o(" \u2014 "),gP=a("a"),oZe=o("BeitConfig"),rZe=o(" (BEiT model)"),tZe=l(),cm=a("li"),Yse=a("strong"),aZe=o("bert"),nZe=o(" \u2014 "),hP=a("a"),sZe=o("BertConfig"),lZe=o(" (BERT model)"),iZe=l(),fm=a("li"),Kse=a("strong"),dZe=o("bert-generation"),cZe=o(" \u2014 "),pP=a("a"),fZe=o("BertGenerationConfig"),mZe=o(" (Bert Generation model)"),gZe=l(),mm=a("li"),Zse=a("strong"),hZe=o("big_bird"),pZe=o(" \u2014 "),_P=a("a"),_Ze=o("BigBirdConfig"),uZe=o(" (BigBird model)"),bZe=l(),gm=a("li"),ele=a("strong"),vZe=o("bigbird_pegasus"),FZe=o(" \u2014 "),uP=a("a"),TZe=o("BigBirdPegasusConfig"),MZe=o(" (BigBird-Pegasus model)"),EZe=l(),hm=a("li"),ole=a("strong"),CZe=o("blenderbot"),wZe=o(" \u2014 "),bP=a("a"),AZe=o("BlenderbotConfig"),LZe=o(" (Blenderbot model)"),yZe=l(),pm=a("li"),rle=a("strong"),xZe=o("blenderbot-small"),$Ze=o(" \u2014 "),vP=a("a"),kZe=o("BlenderbotSmallConfig"),SZe=o(" (BlenderbotSmall model)"),RZe=l(),_m=a("li"),tle=a("strong"),PZe=o("bloom"),BZe=o(" \u2014 "),FP=a("a"),IZe=o("BloomConfig"),NZe=o(" (BLOOM model)"),qZe=l(),um=a("li"),ale=a("strong"),jZe=o("camembert"),DZe=o(" \u2014 "),TP=a("a"),GZe=o("CamembertConfig"),OZe=o(" (CamemBERT model)"),VZe=l(),bm=a("li"),nle=a("strong"),XZe=o("canine"),zZe=o(" \u2014 "),MP=a("a"),WZe=o("CanineConfig"),QZe=o(" (CANINE model)"),UZe=l(),vm=a("li"),sle=a("strong"),HZe=o("clip"),JZe=o(" \u2014 "),EP=a("a"),YZe=o("CLIPConfig"),KZe=o(" (CLIP model)"),ZZe=l(),Fm=a("li"),lle=a("strong"),eeo=o("codegen"),oeo=o(" \u2014 "),CP=a("a"),reo=o("CodeGenConfig"),teo=o(" (CodeGen model)"),aeo=l(),Tm=a("li"),ile=a("strong"),neo=o("convbert"),seo=o(" \u2014 "),wP=a("a"),leo=o("ConvBertConfig"),ieo=o(" (ConvBERT model)"),deo=l(),Mm=a("li"),dle=a("strong"),ceo=o("convnext"),feo=o(" \u2014 "),AP=a("a"),meo=o("ConvNextConfig"),geo=o(" (ConvNeXT model)"),heo=l(),Em=a("li"),cle=a("strong"),peo=o("ctrl"),_eo=o(" \u2014 "),LP=a("a"),ueo=o("CTRLConfig"),beo=o(" (CTRL model)"),veo=l(),Cm=a("li"),fle=a("strong"),Feo=o("cvt"),Teo=o(" \u2014 "),yP=a("a"),Meo=o("CvtConfig"),Eeo=o(" (CvT model)"),Ceo=l(),wm=a("li"),mle=a("strong"),weo=o("data2vec-audio"),Aeo=o(" \u2014 "),xP=a("a"),Leo=o("Data2VecAudioConfig"),yeo=o(" (Data2VecAudio model)"),xeo=l(),Am=a("li"),gle=a("strong"),$eo=o("data2vec-text"),keo=o(" \u2014 "),$P=a("a"),Seo=o("Data2VecTextConfig"),Reo=o(" (Data2VecText model)"),Peo=l(),Lm=a("li"),hle=a("strong"),Beo=o("data2vec-vision"),Ieo=o(" \u2014 "),kP=a("a"),Neo=o("Data2VecVisionConfig"),qeo=o(" (Data2VecVision model)"),jeo=l(),ym=a("li"),ple=a("strong"),Deo=o("deberta"),Geo=o(" \u2014 "),SP=a("a"),Oeo=o("DebertaConfig"),Veo=o(" (DeBERTa model)"),Xeo=l(),xm=a("li"),_le=a("strong"),zeo=o("deberta-v2"),Weo=o(" \u2014 "),RP=a("a"),Qeo=o("DebertaV2Config"),Ueo=o(" (DeBERTa-v2 model)"),Heo=l(),$m=a("li"),ule=a("strong"),Jeo=o("decision_transformer"),Yeo=o(" \u2014 "),PP=a("a"),Keo=o("DecisionTransformerConfig"),Zeo=o(" (Decision Transformer model)"),eoo=l(),km=a("li"),ble=a("strong"),ooo=o("deit"),roo=o(" \u2014 "),BP=a("a"),too=o("DeiTConfig"),aoo=o(" (DeiT model)"),noo=l(),Sm=a("li"),vle=a("strong"),soo=o("detr"),loo=o(" \u2014 "),IP=a("a"),ioo=o("DetrConfig"),doo=o(" (DETR model)"),coo=l(),Rm=a("li"),Fle=a("strong"),foo=o("distilbert"),moo=o(" \u2014 "),NP=a("a"),goo=o("DistilBertConfig"),hoo=o(" (DistilBERT model)"),poo=l(),Pm=a("li"),Tle=a("strong"),_oo=o("donut-swin"),uoo=o(" \u2014 "),qP=a("a"),boo=o("DonutSwinConfig"),voo=o(" (DonutSwin model)"),Foo=l(),Bm=a("li"),Mle=a("strong"),Too=o("dpr"),Moo=o(" \u2014 "),jP=a("a"),Eoo=o("DPRConfig"),Coo=o(" (DPR model)"),woo=l(),Im=a("li"),Ele=a("strong"),Aoo=o("dpt"),Loo=o(" \u2014 "),DP=a("a"),yoo=o("DPTConfig"),xoo=o(" (DPT model)"),$oo=l(),Nm=a("li"),Cle=a("strong"),koo=o("electra"),Soo=o(" \u2014 "),GP=a("a"),Roo=o("ElectraConfig"),Poo=o(" (ELECTRA model)"),Boo=l(),qm=a("li"),wle=a("strong"),Ioo=o("encoder-decoder"),Noo=o(" \u2014 "),OP=a("a"),qoo=o("EncoderDecoderConfig"),joo=o(" (Encoder decoder model)"),Doo=l(),jm=a("li"),Ale=a("strong"),Goo=o("flaubert"),Ooo=o(" \u2014 "),VP=a("a"),Voo=o("FlaubertConfig"),Xoo=o(" (FlauBERT model)"),zoo=l(),Dm=a("li"),Lle=a("strong"),Woo=o("flava"),Qoo=o(" \u2014 "),XP=a("a"),Uoo=o("FlavaConfig"),Hoo=o(" (FLAVA model)"),Joo=l(),Gm=a("li"),yle=a("strong"),Yoo=o("fnet"),Koo=o(" \u2014 "),zP=a("a"),Zoo=o("FNetConfig"),ero=o(" (FNet model)"),oro=l(),Om=a("li"),xle=a("strong"),rro=o("fsmt"),tro=o(" \u2014 "),WP=a("a"),aro=o("FSMTConfig"),nro=o(" (FairSeq Machine-Translation model)"),sro=l(),Vm=a("li"),$le=a("strong"),lro=o("funnel"),iro=o(" \u2014 "),QP=a("a"),dro=o("FunnelConfig"),cro=o(" (Funnel Transformer model)"),fro=l(),Xm=a("li"),kle=a("strong"),mro=o("glpn"),gro=o(" \u2014 "),UP=a("a"),hro=o("GLPNConfig"),pro=o(" (GLPN model)"),_ro=l(),zm=a("li"),Sle=a("strong"),uro=o("gpt2"),bro=o(" \u2014 "),HP=a("a"),vro=o("GPT2Config"),Fro=o(" (OpenAI GPT-2 model)"),Tro=l(),Wm=a("li"),Rle=a("strong"),Mro=o("gpt_neo"),Ero=o(" \u2014 "),JP=a("a"),Cro=o("GPTNeoConfig"),wro=o(" (GPT Neo model)"),Aro=l(),Qm=a("li"),Ple=a("strong"),Lro=o("gpt_neox"),yro=o(" \u2014 "),YP=a("a"),xro=o("GPTNeoXConfig"),$ro=o(" (GPT NeoX model)"),kro=l(),Um=a("li"),Ble=a("strong"),Sro=o("gptj"),Rro=o(" \u2014 "),KP=a("a"),Pro=o("GPTJConfig"),Bro=o(" (GPT-J model)"),Iro=l(),Hm=a("li"),Ile=a("strong"),Nro=o("groupvit"),qro=o(" \u2014 "),ZP=a("a"),jro=o("GroupViTConfig"),Dro=o(" (GroupViT model)"),Gro=l(),Jm=a("li"),Nle=a("strong"),Oro=o("hubert"),Vro=o(" \u2014 "),eB=a("a"),Xro=o("HubertConfig"),zro=o(" (Hubert model)"),Wro=l(),Ym=a("li"),qle=a("strong"),Qro=o("ibert"),Uro=o(" \u2014 "),oB=a("a"),Hro=o("IBertConfig"),Jro=o(" (I-BERT model)"),Yro=l(),Km=a("li"),jle=a("strong"),Kro=o("imagegpt"),Zro=o(" \u2014 "),rB=a("a"),eto=o("ImageGPTConfig"),oto=o(" (ImageGPT model)"),rto=l(),Zm=a("li"),Dle=a("strong"),tto=o("layoutlm"),ato=o(" \u2014 "),tB=a("a"),nto=o("LayoutLMConfig"),sto=o(" (LayoutLM model)"),lto=l(),eg=a("li"),Gle=a("strong"),ito=o("layoutlmv2"),dto=o(" \u2014 "),aB=a("a"),cto=o("LayoutLMv2Config"),fto=o(" (LayoutLMv2 model)"),mto=l(),og=a("li"),Ole=a("strong"),gto=o("layoutlmv3"),hto=o(" \u2014 "),nB=a("a"),pto=o("LayoutLMv3Config"),_to=o(" (LayoutLMv3 model)"),uto=l(),rg=a("li"),Vle=a("strong"),bto=o("led"),vto=o(" \u2014 "),sB=a("a"),Fto=o("LEDConfig"),Tto=o(" (LED model)"),Mto=l(),tg=a("li"),Xle=a("strong"),Eto=o("levit"),Cto=o(" \u2014 "),lB=a("a"),wto=o("LevitConfig"),Ato=o(" (LeViT model)"),Lto=l(),ag=a("li"),zle=a("strong"),yto=o("longformer"),xto=o(" \u2014 "),iB=a("a"),$to=o("LongformerConfig"),kto=o(" (Longformer model)"),Sto=l(),ng=a("li"),Wle=a("strong"),Rto=o("longt5"),Pto=o(" \u2014 "),dB=a("a"),Bto=o("LongT5Config"),Ito=o(" (LongT5 model)"),Nto=l(),sg=a("li"),Qle=a("strong"),qto=o("luke"),jto=o(" \u2014 "),cB=a("a"),Dto=o("LukeConfig"),Gto=o(" (LUKE model)"),Oto=l(),lg=a("li"),Ule=a("strong"),Vto=o("lxmert"),Xto=o(" \u2014 "),fB=a("a"),zto=o("LxmertConfig"),Wto=o(" (LXMERT model)"),Qto=l(),ig=a("li"),Hle=a("strong"),Uto=o("m2m_100"),Hto=o(" \u2014 "),mB=a("a"),Jto=o("M2M100Config"),Yto=o(" (M2M100 model)"),Kto=l(),dg=a("li"),Jle=a("strong"),Zto=o("marian"),eao=o(" \u2014 "),gB=a("a"),oao=o("MarianConfig"),rao=o(" (Marian model)"),tao=l(),cg=a("li"),Yle=a("strong"),aao=o("maskformer"),nao=o(" \u2014 "),hB=a("a"),sao=o("MaskFormerConfig"),lao=o(" (MaskFormer model)"),iao=l(),fg=a("li"),Kle=a("strong"),dao=o("mbart"),cao=o(" \u2014 "),pB=a("a"),fao=o("MBartConfig"),mao=o(" (mBART model)"),gao=l(),mg=a("li"),Zle=a("strong"),hao=o("mctct"),pao=o(" \u2014 "),_B=a("a"),_ao=o("MCTCTConfig"),uao=o(" (M-CTC-T model)"),bao=l(),gg=a("li"),eie=a("strong"),vao=o("megatron-bert"),Fao=o(" \u2014 "),uB=a("a"),Tao=o("MegatronBertConfig"),Mao=o(" (Megatron-BERT model)"),Eao=l(),hg=a("li"),oie=a("strong"),Cao=o("mobilebert"),wao=o(" \u2014 "),bB=a("a"),Aao=o("MobileBertConfig"),Lao=o(" (MobileBERT model)"),yao=l(),pg=a("li"),rie=a("strong"),xao=o("mobilevit"),$ao=o(" \u2014 "),vB=a("a"),kao=o("MobileViTConfig"),Sao=o(" (MobileViT model)"),Rao=l(),_g=a("li"),tie=a("strong"),Pao=o("mpnet"),Bao=o(" \u2014 "),FB=a("a"),Iao=o("MPNetConfig"),Nao=o(" (MPNet model)"),qao=l(),ug=a("li"),aie=a("strong"),jao=o("mt5"),Dao=o(" \u2014 "),TB=a("a"),Gao=o("MT5Config"),Oao=o(" (MT5 model)"),Vao=l(),bg=a("li"),nie=a("strong"),Xao=o("mvp"),zao=o(" \u2014 "),MB=a("a"),Wao=o("MvpConfig"),Qao=o(" (MVP model)"),Uao=l(),vg=a("li"),sie=a("strong"),Hao=o("nezha"),Jao=o(" \u2014 "),EB=a("a"),Yao=o("NezhaConfig"),Kao=o(" (Nezha model)"),Zao=l(),Fg=a("li"),lie=a("strong"),eno=o("nystromformer"),ono=o(" \u2014 "),CB=a("a"),rno=o("NystromformerConfig"),tno=o(" (Nystr\xF6mformer model)"),ano=l(),Tg=a("li"),iie=a("strong"),nno=o("openai-gpt"),sno=o(" \u2014 "),wB=a("a"),lno=o("OpenAIGPTConfig"),ino=o(" (OpenAI GPT model)"),dno=l(),Mg=a("li"),die=a("strong"),cno=o("opt"),fno=o(" \u2014 "),AB=a("a"),mno=o("OPTConfig"),gno=o(" (OPT model)"),hno=l(),Eg=a("li"),cie=a("strong"),pno=o("owlvit"),_no=o(" \u2014 "),LB=a("a"),uno=o("OwlViTConfig"),bno=o(" (OWL-ViT model)"),vno=l(),Cg=a("li"),fie=a("strong"),Fno=o("pegasus"),Tno=o(" \u2014 "),yB=a("a"),Mno=o("PegasusConfig"),Eno=o(" (Pegasus model)"),Cno=l(),wg=a("li"),mie=a("strong"),wno=o("perceiver"),Ano=o(" \u2014 "),xB=a("a"),Lno=o("PerceiverConfig"),yno=o(" (Perceiver model)"),xno=l(),Ag=a("li"),gie=a("strong"),$no=o("plbart"),kno=o(" \u2014 "),$B=a("a"),Sno=o("PLBartConfig"),Rno=o(" (PLBart model)"),Pno=l(),Lg=a("li"),hie=a("strong"),Bno=o("poolformer"),Ino=o(" \u2014 "),kB=a("a"),Nno=o("PoolFormerConfig"),qno=o(" (PoolFormer model)"),jno=l(),yg=a("li"),pie=a("strong"),Dno=o("prophetnet"),Gno=o(" \u2014 "),SB=a("a"),Ono=o("ProphetNetConfig"),Vno=o(" (ProphetNet model)"),Xno=l(),xg=a("li"),_ie=a("strong"),zno=o("qdqbert"),Wno=o(" \u2014 "),RB=a("a"),Qno=o("QDQBertConfig"),Uno=o(" (QDQBert model)"),Hno=l(),$g=a("li"),uie=a("strong"),Jno=o("rag"),Yno=o(" \u2014 "),PB=a("a"),Kno=o("RagConfig"),Zno=o(" (RAG model)"),eso=l(),kg=a("li"),bie=a("strong"),oso=o("realm"),rso=o(" \u2014 "),BB=a("a"),tso=o("RealmConfig"),aso=o(" (REALM model)"),nso=l(),Sg=a("li"),vie=a("strong"),sso=o("reformer"),lso=o(" \u2014 "),IB=a("a"),iso=o("ReformerConfig"),dso=o(" (Reformer model)"),cso=l(),Rg=a("li"),Fie=a("strong"),fso=o("regnet"),mso=o(" \u2014 "),NB=a("a"),gso=o("RegNetConfig"),hso=o(" (RegNet model)"),pso=l(),Pg=a("li"),Tie=a("strong"),_so=o("rembert"),uso=o(" \u2014 "),qB=a("a"),bso=o("RemBertConfig"),vso=o(" (RemBERT model)"),Fso=l(),Bg=a("li"),Mie=a("strong"),Tso=o("resnet"),Mso=o(" \u2014 "),jB=a("a"),Eso=o("ResNetConfig"),Cso=o(" (ResNet model)"),wso=l(),Ig=a("li"),Eie=a("strong"),Aso=o("retribert"),Lso=o(" \u2014 "),DB=a("a"),yso=o("RetriBertConfig"),xso=o(" (RetriBERT model)"),$so=l(),Ng=a("li"),Cie=a("strong"),kso=o("roberta"),Sso=o(" \u2014 "),GB=a("a"),Rso=o("RobertaConfig"),Pso=o(" (RoBERTa model)"),Bso=l(),qg=a("li"),wie=a("strong"),Iso=o("roformer"),Nso=o(" \u2014 "),OB=a("a"),qso=o("RoFormerConfig"),jso=o(" (RoFormer model)"),Dso=l(),jg=a("li"),Aie=a("strong"),Gso=o("segformer"),Oso=o(" \u2014 "),VB=a("a"),Vso=o("SegformerConfig"),Xso=o(" (SegFormer model)"),zso=l(),Dg=a("li"),Lie=a("strong"),Wso=o("sew"),Qso=o(" \u2014 "),XB=a("a"),Uso=o("SEWConfig"),Hso=o(" (SEW model)"),Jso=l(),Gg=a("li"),yie=a("strong"),Yso=o("sew-d"),Kso=o(" \u2014 "),zB=a("a"),Zso=o("SEWDConfig"),elo=o(" (SEW-D model)"),olo=l(),Og=a("li"),xie=a("strong"),rlo=o("speech-encoder-decoder"),tlo=o(" \u2014 "),WB=a("a"),alo=o("SpeechEncoderDecoderConfig"),nlo=o(" (Speech Encoder decoder model)"),slo=l(),Vg=a("li"),$ie=a("strong"),llo=o("speech_to_text"),ilo=o(" \u2014 "),QB=a("a"),dlo=o("Speech2TextConfig"),clo=o(" (Speech2Text model)"),flo=l(),Xg=a("li"),kie=a("strong"),mlo=o("speech_to_text_2"),glo=o(" \u2014 "),UB=a("a"),hlo=o("Speech2Text2Config"),plo=o(" (Speech2Text2 model)"),_lo=l(),zg=a("li"),Sie=a("strong"),ulo=o("splinter"),blo=o(" \u2014 "),HB=a("a"),vlo=o("SplinterConfig"),Flo=o(" (Splinter model)"),Tlo=l(),Wg=a("li"),Rie=a("strong"),Mlo=o("squeezebert"),Elo=o(" \u2014 "),JB=a("a"),Clo=o("SqueezeBertConfig"),wlo=o(" (SqueezeBERT model)"),Alo=l(),Qg=a("li"),Pie=a("strong"),Llo=o("swin"),ylo=o(" \u2014 "),YB=a("a"),xlo=o("SwinConfig"),$lo=o(" (Swin Transformer model)"),klo=l(),Ug=a("li"),Bie=a("strong"),Slo=o("swinv2"),Rlo=o(" \u2014 "),KB=a("a"),Plo=o("Swinv2Config"),Blo=o(" (Swin Transformer V2 model)"),Ilo=l(),Hg=a("li"),Iie=a("strong"),Nlo=o("t5"),qlo=o(" \u2014 "),ZB=a("a"),jlo=o("T5Config"),Dlo=o(" (T5 model)"),Glo=l(),Jg=a("li"),Nie=a("strong"),Olo=o("tapas"),Vlo=o(" \u2014 "),eI=a("a"),Xlo=o("TapasConfig"),zlo=o(" (TAPAS model)"),Wlo=l(),Yg=a("li"),qie=a("strong"),Qlo=o("trajectory_transformer"),Ulo=o(" \u2014 "),oI=a("a"),Hlo=o("TrajectoryTransformerConfig"),Jlo=o(" (Trajectory Transformer model)"),Ylo=l(),Kg=a("li"),jie=a("strong"),Klo=o("transfo-xl"),Zlo=o(" \u2014 "),rI=a("a"),eio=o("TransfoXLConfig"),oio=o(" (Transformer-XL model)"),rio=l(),Zg=a("li"),Die=a("strong"),tio=o("trocr"),aio=o(" \u2014 "),tI=a("a"),nio=o("TrOCRConfig"),sio=o(" (TrOCR model)"),lio=l(),eh=a("li"),Gie=a("strong"),iio=o("unispeech"),dio=o(" \u2014 "),aI=a("a"),cio=o("UniSpeechConfig"),fio=o(" (UniSpeech model)"),mio=l(),oh=a("li"),Oie=a("strong"),gio=o("unispeech-sat"),hio=o(" \u2014 "),nI=a("a"),pio=o("UniSpeechSatConfig"),_io=o(" (UniSpeechSat model)"),uio=l(),rh=a("li"),Vie=a("strong"),bio=o("van"),vio=o(" \u2014 "),sI=a("a"),Fio=o("VanConfig"),Tio=o(" (VAN model)"),Mio=l(),th=a("li"),Xie=a("strong"),Eio=o("videomae"),Cio=o(" \u2014 "),lI=a("a"),wio=o("VideoMAEConfig"),Aio=o(" (VideoMAE model)"),Lio=l(),ah=a("li"),zie=a("strong"),yio=o("vilt"),xio=o(" \u2014 "),iI=a("a"),$io=o("ViltConfig"),kio=o(" (ViLT model)"),Sio=l(),nh=a("li"),Wie=a("strong"),Rio=o("vision-encoder-decoder"),Pio=o(" \u2014 "),dI=a("a"),Bio=o("VisionEncoderDecoderConfig"),Iio=o(" (Vision Encoder decoder model)"),Nio=l(),sh=a("li"),Qie=a("strong"),qio=o("vision-text-dual-encoder"),jio=o(" \u2014 "),cI=a("a"),Dio=o("VisionTextDualEncoderConfig"),Gio=o(" (VisionTextDualEncoder model)"),Oio=l(),lh=a("li"),Uie=a("strong"),Vio=o("visual_bert"),Xio=o(" \u2014 "),fI=a("a"),zio=o("VisualBertConfig"),Wio=o(" (VisualBERT model)"),Qio=l(),ih=a("li"),Hie=a("strong"),Uio=o("vit"),Hio=o(" \u2014 "),mI=a("a"),Jio=o("ViTConfig"),Yio=o(" (ViT model)"),Kio=l(),dh=a("li"),Jie=a("strong"),Zio=o("vit_mae"),edo=o(" \u2014 "),gI=a("a"),odo=o("ViTMAEConfig"),rdo=o(" (ViTMAE model)"),tdo=l(),ch=a("li"),Yie=a("strong"),ado=o("wav2vec2"),ndo=o(" \u2014 "),hI=a("a"),sdo=o("Wav2Vec2Config"),ldo=o(" (Wav2Vec2 model)"),ido=l(),fh=a("li"),Kie=a("strong"),ddo=o("wav2vec2-conformer"),cdo=o(" \u2014 "),pI=a("a"),fdo=o("Wav2Vec2ConformerConfig"),mdo=o(" (Wav2Vec2-Conformer model)"),gdo=l(),mh=a("li"),Zie=a("strong"),hdo=o("wavlm"),pdo=o(" \u2014 "),_I=a("a"),_do=o("WavLMConfig"),udo=o(" (WavLM model)"),bdo=l(),gh=a("li"),ede=a("strong"),vdo=o("xglm"),Fdo=o(" \u2014 "),uI=a("a"),Tdo=o("XGLMConfig"),Mdo=o(" (XGLM model)"),Edo=l(),hh=a("li"),ode=a("strong"),Cdo=o("xlm"),wdo=o(" \u2014 "),bI=a("a"),Ado=o("XLMConfig"),Ldo=o(" (XLM model)"),ydo=l(),ph=a("li"),rde=a("strong"),xdo=o("xlm-prophetnet"),$do=o(" \u2014 "),vI=a("a"),kdo=o("XLMProphetNetConfig"),Sdo=o(" (XLM-ProphetNet model)"),Rdo=l(),_h=a("li"),tde=a("strong"),Pdo=o("xlm-roberta"),Bdo=o(" \u2014 "),FI=a("a"),Ido=o("XLMRobertaConfig"),Ndo=o(" (XLM-RoBERTa model)"),qdo=l(),uh=a("li"),ade=a("strong"),jdo=o("xlm-roberta-xl"),Ddo=o(" \u2014 "),TI=a("a"),Gdo=o("XLMRobertaXLConfig"),Odo=o(" (XLM-RoBERTa-XL model)"),Vdo=l(),bh=a("li"),nde=a("strong"),Xdo=o("xlnet"),zdo=o(" \u2014 "),MI=a("a"),Wdo=o("XLNetConfig"),Qdo=o(" (XLNet model)"),Udo=l(),vh=a("li"),sde=a("strong"),Hdo=o("yolos"),Jdo=o(" \u2014 "),EI=a("a"),Ydo=o("YolosConfig"),Kdo=o(" (YOLOS model)"),Zdo=l(),Fh=a("li"),lde=a("strong"),eco=o("yoso"),oco=o(" \u2014 "),CI=a("a"),rco=o("YosoConfig"),tco=o(" (YOSO model)"),aco=l(),F(Th.$$.fragment),nco=l(),Mh=a("div"),F(Ty.$$.fragment),sco=l(),ide=a("p"),lco=o("Register a new configuration for this class."),YQe=l(),Ki=a("h2"),Eh=a("a"),dde=a("span"),F(My.$$.fragment),ico=l(),cde=a("span"),dco=o("AutoTokenizer"),KQe=l(),xo=a("div"),F(Ey.$$.fragment),cco=l(),Cy=a("p"),fco=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wI=a("a"),mco=o("AutoTokenizer.from_pretrained()"),gco=o(" class method."),hco=l(),wy=a("p"),pco=o("This class cannot be instantiated directly using "),fde=a("code"),_co=o("__init__()"),uco=o(" (throws an error)."),bco=l(),Sr=a("div"),F(Ay.$$.fragment),vco=l(),mde=a("p"),Fco=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Tco=l(),Ga=a("p"),Mco=o("The tokenizer class to instantiate is selected based on the "),gde=a("code"),Eco=o("model_type"),Cco=o(` property of the config object (either
passed as an argument or loaded from `),hde=a("code"),wco=o("pretrained_model_name_or_path"),Aco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),Lco=o("pretrained_model_name_or_path"),yco=o(":"),xco=l(),k=a("ul"),Hn=a("li"),_de=a("strong"),$co=o("albert"),kco=o(" \u2014 "),AI=a("a"),Sco=o("AlbertTokenizer"),Rco=o(" or "),LI=a("a"),Pco=o("AlbertTokenizerFast"),Bco=o(" (ALBERT model)"),Ico=l(),Jn=a("li"),ude=a("strong"),Nco=o("bart"),qco=o(" \u2014 "),yI=a("a"),jco=o("BartTokenizer"),Dco=o(" or "),xI=a("a"),Gco=o("BartTokenizerFast"),Oco=o(" (BART model)"),Vco=l(),Yn=a("li"),bde=a("strong"),Xco=o("barthez"),zco=o(" \u2014 "),$I=a("a"),Wco=o("BarthezTokenizer"),Qco=o(" or "),kI=a("a"),Uco=o("BarthezTokenizerFast"),Hco=o(" (BARThez model)"),Jco=l(),Ch=a("li"),vde=a("strong"),Yco=o("bartpho"),Kco=o(" \u2014 "),SI=a("a"),Zco=o("BartphoTokenizer"),efo=o(" (BARTpho model)"),ofo=l(),Kn=a("li"),Fde=a("strong"),rfo=o("bert"),tfo=o(" \u2014 "),RI=a("a"),afo=o("BertTokenizer"),nfo=o(" or "),PI=a("a"),sfo=o("BertTokenizerFast"),lfo=o(" (BERT model)"),ifo=l(),wh=a("li"),Tde=a("strong"),dfo=o("bert-generation"),cfo=o(" \u2014 "),BI=a("a"),ffo=o("BertGenerationTokenizer"),mfo=o(" (Bert Generation model)"),gfo=l(),Ah=a("li"),Mde=a("strong"),hfo=o("bert-japanese"),pfo=o(" \u2014 "),II=a("a"),_fo=o("BertJapaneseTokenizer"),ufo=o(" (BertJapanese model)"),bfo=l(),Lh=a("li"),Ede=a("strong"),vfo=o("bertweet"),Ffo=o(" \u2014 "),NI=a("a"),Tfo=o("BertweetTokenizer"),Mfo=o(" (BERTweet model)"),Efo=l(),Zn=a("li"),Cde=a("strong"),Cfo=o("big_bird"),wfo=o(" \u2014 "),qI=a("a"),Afo=o("BigBirdTokenizer"),Lfo=o(" or "),jI=a("a"),yfo=o("BigBirdTokenizerFast"),xfo=o(" (BigBird model)"),$fo=l(),es=a("li"),wde=a("strong"),kfo=o("bigbird_pegasus"),Sfo=o(" \u2014 "),DI=a("a"),Rfo=o("PegasusTokenizer"),Pfo=o(" or "),GI=a("a"),Bfo=o("PegasusTokenizerFast"),Ifo=o(" (BigBird-Pegasus model)"),Nfo=l(),os=a("li"),Ade=a("strong"),qfo=o("blenderbot"),jfo=o(" \u2014 "),OI=a("a"),Dfo=o("BlenderbotTokenizer"),Gfo=o(" or "),VI=a("a"),Ofo=o("BlenderbotTokenizerFast"),Vfo=o(" (Blenderbot model)"),Xfo=l(),yh=a("li"),Lde=a("strong"),zfo=o("blenderbot-small"),Wfo=o(" \u2014 "),XI=a("a"),Qfo=o("BlenderbotSmallTokenizer"),Ufo=o(" (BlenderbotSmall model)"),Hfo=l(),xh=a("li"),yde=a("strong"),Jfo=o("bloom"),Yfo=o(" \u2014 "),zI=a("a"),Kfo=o("BloomTokenizerFast"),Zfo=o(" (BLOOM model)"),emo=l(),$h=a("li"),xde=a("strong"),omo=o("byt5"),rmo=o(" \u2014 "),WI=a("a"),tmo=o("ByT5Tokenizer"),amo=o(" (ByT5 model)"),nmo=l(),rs=a("li"),$de=a("strong"),smo=o("camembert"),lmo=o(" \u2014 "),QI=a("a"),imo=o("CamembertTokenizer"),dmo=o(" or "),UI=a("a"),cmo=o("CamembertTokenizerFast"),fmo=o(" (CamemBERT model)"),mmo=l(),kh=a("li"),kde=a("strong"),gmo=o("canine"),hmo=o(" \u2014 "),HI=a("a"),pmo=o("CanineTokenizer"),_mo=o(" (CANINE model)"),umo=l(),ts=a("li"),Sde=a("strong"),bmo=o("clip"),vmo=o(" \u2014 "),JI=a("a"),Fmo=o("CLIPTokenizer"),Tmo=o(" or "),YI=a("a"),Mmo=o("CLIPTokenizerFast"),Emo=o(" (CLIP model)"),Cmo=l(),as=a("li"),Rde=a("strong"),wmo=o("codegen"),Amo=o(" \u2014 "),KI=a("a"),Lmo=o("CodeGenTokenizer"),ymo=o(" or "),ZI=a("a"),xmo=o("CodeGenTokenizerFast"),$mo=o(" (CodeGen model)"),kmo=l(),ns=a("li"),Pde=a("strong"),Smo=o("convbert"),Rmo=o(" \u2014 "),eN=a("a"),Pmo=o("ConvBertTokenizer"),Bmo=o(" or "),oN=a("a"),Imo=o("ConvBertTokenizerFast"),Nmo=o(" (ConvBERT model)"),qmo=l(),ss=a("li"),Bde=a("strong"),jmo=o("cpm"),Dmo=o(" \u2014 "),rN=a("a"),Gmo=o("CpmTokenizer"),Omo=o(" or "),tN=a("a"),Vmo=o("CpmTokenizerFast"),Xmo=o(" (CPM model)"),zmo=l(),Sh=a("li"),Ide=a("strong"),Wmo=o("ctrl"),Qmo=o(" \u2014 "),aN=a("a"),Umo=o("CTRLTokenizer"),Hmo=o(" (CTRL model)"),Jmo=l(),ls=a("li"),Nde=a("strong"),Ymo=o("data2vec-text"),Kmo=o(" \u2014 "),nN=a("a"),Zmo=o("RobertaTokenizer"),ego=o(" or "),sN=a("a"),ogo=o("RobertaTokenizerFast"),rgo=o(" (Data2VecText model)"),tgo=l(),is=a("li"),qde=a("strong"),ago=o("deberta"),ngo=o(" \u2014 "),lN=a("a"),sgo=o("DebertaTokenizer"),lgo=o(" or "),iN=a("a"),igo=o("DebertaTokenizerFast"),dgo=o(" (DeBERTa model)"),cgo=l(),ds=a("li"),jde=a("strong"),fgo=o("deberta-v2"),mgo=o(" \u2014 "),dN=a("a"),ggo=o("DebertaV2Tokenizer"),hgo=o(" or "),cN=a("a"),pgo=o("DebertaV2TokenizerFast"),_go=o(" (DeBERTa-v2 model)"),ugo=l(),cs=a("li"),Dde=a("strong"),bgo=o("distilbert"),vgo=o(" \u2014 "),fN=a("a"),Fgo=o("DistilBertTokenizer"),Tgo=o(" or "),mN=a("a"),Mgo=o("DistilBertTokenizerFast"),Ego=o(" (DistilBERT model)"),Cgo=l(),fs=a("li"),Gde=a("strong"),wgo=o("dpr"),Ago=o(" \u2014 "),gN=a("a"),Lgo=o("DPRQuestionEncoderTokenizer"),ygo=o(" or "),hN=a("a"),xgo=o("DPRQuestionEncoderTokenizerFast"),$go=o(" (DPR model)"),kgo=l(),ms=a("li"),Ode=a("strong"),Sgo=o("electra"),Rgo=o(" \u2014 "),pN=a("a"),Pgo=o("ElectraTokenizer"),Bgo=o(" or "),_N=a("a"),Igo=o("ElectraTokenizerFast"),Ngo=o(" (ELECTRA model)"),qgo=l(),Rh=a("li"),Vde=a("strong"),jgo=o("flaubert"),Dgo=o(" \u2014 "),uN=a("a"),Ggo=o("FlaubertTokenizer"),Ogo=o(" (FlauBERT model)"),Vgo=l(),gs=a("li"),Xde=a("strong"),Xgo=o("fnet"),zgo=o(" \u2014 "),bN=a("a"),Wgo=o("FNetTokenizer"),Qgo=o(" or "),vN=a("a"),Ugo=o("FNetTokenizerFast"),Hgo=o(" (FNet model)"),Jgo=l(),Ph=a("li"),zde=a("strong"),Ygo=o("fsmt"),Kgo=o(" \u2014 "),FN=a("a"),Zgo=o("FSMTTokenizer"),eho=o(" (FairSeq Machine-Translation model)"),oho=l(),hs=a("li"),Wde=a("strong"),rho=o("funnel"),tho=o(" \u2014 "),TN=a("a"),aho=o("FunnelTokenizer"),nho=o(" or "),MN=a("a"),sho=o("FunnelTokenizerFast"),lho=o(" (Funnel Transformer model)"),iho=l(),ps=a("li"),Qde=a("strong"),dho=o("gpt2"),cho=o(" \u2014 "),EN=a("a"),fho=o("GPT2Tokenizer"),mho=o(" or "),CN=a("a"),gho=o("GPT2TokenizerFast"),hho=o(" (OpenAI GPT-2 model)"),pho=l(),_s=a("li"),Ude=a("strong"),_ho=o("gpt_neo"),uho=o(" \u2014 "),wN=a("a"),bho=o("GPT2Tokenizer"),vho=o(" or "),AN=a("a"),Fho=o("GPT2TokenizerFast"),Tho=o(" (GPT Neo model)"),Mho=l(),Bh=a("li"),Hde=a("strong"),Eho=o("gpt_neox"),Cho=o(" \u2014 "),LN=a("a"),who=o("GPTNeoXTokenizerFast"),Aho=o(" (GPT NeoX model)"),Lho=l(),us=a("li"),Jde=a("strong"),yho=o("gptj"),xho=o(" \u2014 "),yN=a("a"),$ho=o("GPT2Tokenizer"),kho=o(" or "),xN=a("a"),Sho=o("GPT2TokenizerFast"),Rho=o(" (GPT-J model)"),Pho=l(),bs=a("li"),Yde=a("strong"),Bho=o("groupvit"),Iho=o(" \u2014 "),$N=a("a"),Nho=o("CLIPTokenizer"),qho=o(" or "),kN=a("a"),jho=o("CLIPTokenizerFast"),Dho=o(" (GroupViT model)"),Gho=l(),vs=a("li"),Kde=a("strong"),Oho=o("herbert"),Vho=o(" \u2014 "),SN=a("a"),Xho=o("HerbertTokenizer"),zho=o(" or "),RN=a("a"),Who=o("HerbertTokenizerFast"),Qho=o(" (HerBERT model)"),Uho=l(),Ih=a("li"),Zde=a("strong"),Hho=o("hubert"),Jho=o(" \u2014 "),PN=a("a"),Yho=o("Wav2Vec2CTCTokenizer"),Kho=o(" (Hubert model)"),Zho=l(),Fs=a("li"),ece=a("strong"),epo=o("ibert"),opo=o(" \u2014 "),BN=a("a"),rpo=o("RobertaTokenizer"),tpo=o(" or "),IN=a("a"),apo=o("RobertaTokenizerFast"),npo=o(" (I-BERT model)"),spo=l(),Ts=a("li"),oce=a("strong"),lpo=o("layoutlm"),ipo=o(" \u2014 "),NN=a("a"),dpo=o("LayoutLMTokenizer"),cpo=o(" or "),qN=a("a"),fpo=o("LayoutLMTokenizerFast"),mpo=o(" (LayoutLM model)"),gpo=l(),Ms=a("li"),rce=a("strong"),hpo=o("layoutlmv2"),ppo=o(" \u2014 "),jN=a("a"),_po=o("LayoutLMv2Tokenizer"),upo=o(" or "),DN=a("a"),bpo=o("LayoutLMv2TokenizerFast"),vpo=o(" (LayoutLMv2 model)"),Fpo=l(),Es=a("li"),tce=a("strong"),Tpo=o("layoutlmv3"),Mpo=o(" \u2014 "),GN=a("a"),Epo=o("LayoutLMv3Tokenizer"),Cpo=o(" or "),ON=a("a"),wpo=o("LayoutLMv3TokenizerFast"),Apo=o(" (LayoutLMv3 model)"),Lpo=l(),Cs=a("li"),ace=a("strong"),ypo=o("layoutxlm"),xpo=o(" \u2014 "),VN=a("a"),$po=o("LayoutXLMTokenizer"),kpo=o(" or "),XN=a("a"),Spo=o("LayoutXLMTokenizerFast"),Rpo=o(" (LayoutXLM model)"),Ppo=l(),ws=a("li"),nce=a("strong"),Bpo=o("led"),Ipo=o(" \u2014 "),zN=a("a"),Npo=o("LEDTokenizer"),qpo=o(" or "),WN=a("a"),jpo=o("LEDTokenizerFast"),Dpo=o(" (LED model)"),Gpo=l(),As=a("li"),sce=a("strong"),Opo=o("longformer"),Vpo=o(" \u2014 "),QN=a("a"),Xpo=o("LongformerTokenizer"),zpo=o(" or "),UN=a("a"),Wpo=o("LongformerTokenizerFast"),Qpo=o(" (Longformer model)"),Upo=l(),Ls=a("li"),lce=a("strong"),Hpo=o("longt5"),Jpo=o(" \u2014 "),HN=a("a"),Ypo=o("T5Tokenizer"),Kpo=o(" or "),JN=a("a"),Zpo=o("T5TokenizerFast"),e_o=o(" (LongT5 model)"),o_o=l(),Nh=a("li"),ice=a("strong"),r_o=o("luke"),t_o=o(" \u2014 "),YN=a("a"),a_o=o("LukeTokenizer"),n_o=o(" (LUKE model)"),s_o=l(),ys=a("li"),dce=a("strong"),l_o=o("lxmert"),i_o=o(" \u2014 "),KN=a("a"),d_o=o("LxmertTokenizer"),c_o=o(" or "),ZN=a("a"),f_o=o("LxmertTokenizerFast"),m_o=o(" (LXMERT model)"),g_o=l(),qh=a("li"),cce=a("strong"),h_o=o("m2m_100"),p_o=o(" \u2014 "),eq=a("a"),__o=o("M2M100Tokenizer"),u_o=o(" (M2M100 model)"),b_o=l(),jh=a("li"),fce=a("strong"),v_o=o("marian"),F_o=o(" \u2014 "),oq=a("a"),T_o=o("MarianTokenizer"),M_o=o(" (Marian model)"),E_o=l(),xs=a("li"),mce=a("strong"),C_o=o("mbart"),w_o=o(" \u2014 "),rq=a("a"),A_o=o("MBartTokenizer"),L_o=o(" or "),tq=a("a"),y_o=o("MBartTokenizerFast"),x_o=o(" (mBART model)"),$_o=l(),$s=a("li"),gce=a("strong"),k_o=o("mbart50"),S_o=o(" \u2014 "),aq=a("a"),R_o=o("MBart50Tokenizer"),P_o=o(" or "),nq=a("a"),B_o=o("MBart50TokenizerFast"),I_o=o(" (mBART-50 model)"),N_o=l(),ks=a("li"),hce=a("strong"),q_o=o("megatron-bert"),j_o=o(" \u2014 "),sq=a("a"),D_o=o("BertTokenizer"),G_o=o(" or "),lq=a("a"),O_o=o("BertTokenizerFast"),V_o=o(" (Megatron-BERT model)"),X_o=l(),Dh=a("li"),pce=a("strong"),z_o=o("mluke"),W_o=o(" \u2014 "),iq=a("a"),Q_o=o("MLukeTokenizer"),U_o=o(" (mLUKE model)"),H_o=l(),Ss=a("li"),_ce=a("strong"),J_o=o("mobilebert"),Y_o=o(" \u2014 "),dq=a("a"),K_o=o("MobileBertTokenizer"),Z_o=o(" or "),cq=a("a"),euo=o("MobileBertTokenizerFast"),ouo=o(" (MobileBERT model)"),ruo=l(),Rs=a("li"),uce=a("strong"),tuo=o("mpnet"),auo=o(" \u2014 "),fq=a("a"),nuo=o("MPNetTokenizer"),suo=o(" or "),mq=a("a"),luo=o("MPNetTokenizerFast"),iuo=o(" (MPNet model)"),duo=l(),Ps=a("li"),bce=a("strong"),cuo=o("mt5"),fuo=o(" \u2014 "),gq=a("a"),muo=o("MT5Tokenizer"),guo=o(" or "),hq=a("a"),huo=o("MT5TokenizerFast"),puo=o(" (MT5 model)"),_uo=l(),Bs=a("li"),vce=a("strong"),uuo=o("mvp"),buo=o(" \u2014 "),pq=a("a"),vuo=o("MvpTokenizer"),Fuo=o(" or "),_q=a("a"),Tuo=o("MvpTokenizerFast"),Muo=o(" (MVP model)"),Euo=l(),Is=a("li"),Fce=a("strong"),Cuo=o("nezha"),wuo=o(" \u2014 "),uq=a("a"),Auo=o("BertTokenizer"),Luo=o(" or "),bq=a("a"),yuo=o("BertTokenizerFast"),xuo=o(" (Nezha model)"),$uo=l(),Ns=a("li"),Tce=a("strong"),kuo=o("nllb"),Suo=o(" \u2014 "),vq=a("a"),Ruo=o("NllbTokenizer"),Puo=o(" or "),Fq=a("a"),Buo=o("NllbTokenizerFast"),Iuo=o(" (NLLB model)"),Nuo=l(),qs=a("li"),Mce=a("strong"),quo=o("nystromformer"),juo=o(" \u2014 "),Tq=a("a"),Duo=o("AlbertTokenizer"),Guo=o(" or "),Mq=a("a"),Ouo=o("AlbertTokenizerFast"),Vuo=o(" (Nystr\xF6mformer model)"),Xuo=l(),js=a("li"),Ece=a("strong"),zuo=o("openai-gpt"),Wuo=o(" \u2014 "),Eq=a("a"),Quo=o("OpenAIGPTTokenizer"),Uuo=o(" or "),Cq=a("a"),Huo=o("OpenAIGPTTokenizerFast"),Juo=o(" (OpenAI GPT model)"),Yuo=l(),Gh=a("li"),Cce=a("strong"),Kuo=o("opt"),Zuo=o(" \u2014 "),wq=a("a"),e1o=o("GPT2Tokenizer"),o1o=o(" (OPT model)"),r1o=l(),Ds=a("li"),wce=a("strong"),t1o=o("owlvit"),a1o=o(" \u2014 "),Aq=a("a"),n1o=o("CLIPTokenizer"),s1o=o(" or "),Lq=a("a"),l1o=o("CLIPTokenizerFast"),i1o=o(" (OWL-ViT model)"),d1o=l(),Gs=a("li"),Ace=a("strong"),c1o=o("pegasus"),f1o=o(" \u2014 "),yq=a("a"),m1o=o("PegasusTokenizer"),g1o=o(" or "),xq=a("a"),h1o=o("PegasusTokenizerFast"),p1o=o(" (Pegasus model)"),_1o=l(),Oh=a("li"),Lce=a("strong"),u1o=o("perceiver"),b1o=o(" \u2014 "),$q=a("a"),v1o=o("PerceiverTokenizer"),F1o=o(" (Perceiver model)"),T1o=l(),Vh=a("li"),yce=a("strong"),M1o=o("phobert"),E1o=o(" \u2014 "),kq=a("a"),C1o=o("PhobertTokenizer"),w1o=o(" (PhoBERT model)"),A1o=l(),Xh=a("li"),xce=a("strong"),L1o=o("plbart"),y1o=o(" \u2014 "),Sq=a("a"),x1o=o("PLBartTokenizer"),$1o=o(" (PLBart model)"),k1o=l(),zh=a("li"),$ce=a("strong"),S1o=o("prophetnet"),R1o=o(" \u2014 "),Rq=a("a"),P1o=o("ProphetNetTokenizer"),B1o=o(" (ProphetNet model)"),I1o=l(),Os=a("li"),kce=a("strong"),N1o=o("qdqbert"),q1o=o(" \u2014 "),Pq=a("a"),j1o=o("BertTokenizer"),D1o=o(" or "),Bq=a("a"),G1o=o("BertTokenizerFast"),O1o=o(" (QDQBert model)"),V1o=l(),Wh=a("li"),Sce=a("strong"),X1o=o("rag"),z1o=o(" \u2014 "),Iq=a("a"),W1o=o("RagTokenizer"),Q1o=o(" (RAG model)"),U1o=l(),Vs=a("li"),Rce=a("strong"),H1o=o("realm"),J1o=o(" \u2014 "),Nq=a("a"),Y1o=o("RealmTokenizer"),K1o=o(" or "),qq=a("a"),Z1o=o("RealmTokenizerFast"),e4o=o(" (REALM model)"),o4o=l(),Xs=a("li"),Pce=a("strong"),r4o=o("reformer"),t4o=o(" \u2014 "),jq=a("a"),a4o=o("ReformerTokenizer"),n4o=o(" or "),Dq=a("a"),s4o=o("ReformerTokenizerFast"),l4o=o(" (Reformer model)"),i4o=l(),zs=a("li"),Bce=a("strong"),d4o=o("rembert"),c4o=o(" \u2014 "),Gq=a("a"),f4o=o("RemBertTokenizer"),m4o=o(" or "),Oq=a("a"),g4o=o("RemBertTokenizerFast"),h4o=o(" (RemBERT model)"),p4o=l(),Ws=a("li"),Ice=a("strong"),_4o=o("retribert"),u4o=o(" \u2014 "),Vq=a("a"),b4o=o("RetriBertTokenizer"),v4o=o(" or "),Xq=a("a"),F4o=o("RetriBertTokenizerFast"),T4o=o(" (RetriBERT model)"),M4o=l(),Qs=a("li"),Nce=a("strong"),E4o=o("roberta"),C4o=o(" \u2014 "),zq=a("a"),w4o=o("RobertaTokenizer"),A4o=o(" or "),Wq=a("a"),L4o=o("RobertaTokenizerFast"),y4o=o(" (RoBERTa model)"),x4o=l(),Us=a("li"),qce=a("strong"),$4o=o("roformer"),k4o=o(" \u2014 "),Qq=a("a"),S4o=o("RoFormerTokenizer"),R4o=o(" or "),Uq=a("a"),P4o=o("RoFormerTokenizerFast"),B4o=o(" (RoFormer model)"),I4o=l(),Qh=a("li"),jce=a("strong"),N4o=o("speech_to_text"),q4o=o(" \u2014 "),Hq=a("a"),j4o=o("Speech2TextTokenizer"),D4o=o(" (Speech2Text model)"),G4o=l(),Uh=a("li"),Dce=a("strong"),O4o=o("speech_to_text_2"),V4o=o(" \u2014 "),Jq=a("a"),X4o=o("Speech2Text2Tokenizer"),z4o=o(" (Speech2Text2 model)"),W4o=l(),Hs=a("li"),Gce=a("strong"),Q4o=o("splinter"),U4o=o(" \u2014 "),Yq=a("a"),H4o=o("SplinterTokenizer"),J4o=o(" or "),Kq=a("a"),Y4o=o("SplinterTokenizerFast"),K4o=o(" (Splinter model)"),Z4o=l(),Js=a("li"),Oce=a("strong"),e2o=o("squeezebert"),o2o=o(" \u2014 "),Zq=a("a"),r2o=o("SqueezeBertTokenizer"),t2o=o(" or "),ej=a("a"),a2o=o("SqueezeBertTokenizerFast"),n2o=o(" (SqueezeBERT model)"),s2o=l(),Ys=a("li"),Vce=a("strong"),l2o=o("t5"),i2o=o(" \u2014 "),oj=a("a"),d2o=o("T5Tokenizer"),c2o=o(" or "),rj=a("a"),f2o=o("T5TokenizerFast"),m2o=o(" (T5 model)"),g2o=l(),Hh=a("li"),Xce=a("strong"),h2o=o("tapas"),p2o=o(" \u2014 "),tj=a("a"),_2o=o("TapasTokenizer"),u2o=o(" (TAPAS model)"),b2o=l(),Jh=a("li"),zce=a("strong"),v2o=o("tapex"),F2o=o(" \u2014 "),aj=a("a"),T2o=o("TapexTokenizer"),M2o=o(" (TAPEX model)"),E2o=l(),Yh=a("li"),Wce=a("strong"),C2o=o("transfo-xl"),w2o=o(" \u2014 "),nj=a("a"),A2o=o("TransfoXLTokenizer"),L2o=o(" (Transformer-XL model)"),y2o=l(),Ks=a("li"),Qce=a("strong"),x2o=o("vilt"),$2o=o(" \u2014 "),sj=a("a"),k2o=o("BertTokenizer"),S2o=o(" or "),lj=a("a"),R2o=o("BertTokenizerFast"),P2o=o(" (ViLT model)"),B2o=l(),Zs=a("li"),Uce=a("strong"),I2o=o("visual_bert"),N2o=o(" \u2014 "),ij=a("a"),q2o=o("BertTokenizer"),j2o=o(" or "),dj=a("a"),D2o=o("BertTokenizerFast"),G2o=o(" (VisualBERT model)"),O2o=l(),Kh=a("li"),Hce=a("strong"),V2o=o("wav2vec2"),X2o=o(" \u2014 "),cj=a("a"),z2o=o("Wav2Vec2CTCTokenizer"),W2o=o(" (Wav2Vec2 model)"),Q2o=l(),Zh=a("li"),Jce=a("strong"),U2o=o("wav2vec2-conformer"),H2o=o(" \u2014 "),fj=a("a"),J2o=o("Wav2Vec2CTCTokenizer"),Y2o=o(" (Wav2Vec2-Conformer model)"),K2o=l(),ep=a("li"),Yce=a("strong"),Z2o=o("wav2vec2_phoneme"),ebo=o(" \u2014 "),mj=a("a"),obo=o("Wav2Vec2PhonemeCTCTokenizer"),rbo=o(" (Wav2Vec2Phoneme model)"),tbo=l(),el=a("li"),Kce=a("strong"),abo=o("xglm"),nbo=o(" \u2014 "),gj=a("a"),sbo=o("XGLMTokenizer"),lbo=o(" or "),hj=a("a"),ibo=o("XGLMTokenizerFast"),dbo=o(" (XGLM model)"),cbo=l(),op=a("li"),Zce=a("strong"),fbo=o("xlm"),mbo=o(" \u2014 "),pj=a("a"),gbo=o("XLMTokenizer"),hbo=o(" (XLM model)"),pbo=l(),rp=a("li"),efe=a("strong"),_bo=o("xlm-prophetnet"),ubo=o(" \u2014 "),_j=a("a"),bbo=o("XLMProphetNetTokenizer"),vbo=o(" (XLM-ProphetNet model)"),Fbo=l(),ol=a("li"),ofe=a("strong"),Tbo=o("xlm-roberta"),Mbo=o(" \u2014 "),uj=a("a"),Ebo=o("XLMRobertaTokenizer"),Cbo=o(" or "),bj=a("a"),wbo=o("XLMRobertaTokenizerFast"),Abo=o(" (XLM-RoBERTa model)"),Lbo=l(),rl=a("li"),rfe=a("strong"),ybo=o("xlm-roberta-xl"),xbo=o(" \u2014 "),vj=a("a"),$bo=o("RobertaTokenizer"),kbo=o(" or "),Fj=a("a"),Sbo=o("RobertaTokenizerFast"),Rbo=o(" (XLM-RoBERTa-XL model)"),Pbo=l(),tl=a("li"),tfe=a("strong"),Bbo=o("xlnet"),Ibo=o(" \u2014 "),Tj=a("a"),Nbo=o("XLNetTokenizer"),qbo=o(" or "),Mj=a("a"),jbo=o("XLNetTokenizerFast"),Dbo=o(" (XLNet model)"),Gbo=l(),al=a("li"),afe=a("strong"),Obo=o("yoso"),Vbo=o(" \u2014 "),Ej=a("a"),Xbo=o("AlbertTokenizer"),zbo=o(" or "),Cj=a("a"),Wbo=o("AlbertTokenizerFast"),Qbo=o(" (YOSO model)"),Ubo=l(),F(tp.$$.fragment),Hbo=l(),ap=a("div"),F(Ly.$$.fragment),Jbo=l(),nfe=a("p"),Ybo=o("Register a new tokenizer in this mapping."),ZQe=l(),Zi=a("h2"),np=a("a"),sfe=a("span"),F(yy.$$.fragment),Kbo=l(),lfe=a("span"),Zbo=o("AutoFeatureExtractor"),eUe=l(),$o=a("div"),F(xy.$$.fragment),evo=l(),$y=a("p"),ovo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),wj=a("a"),rvo=o("AutoFeatureExtractor.from_pretrained()"),tvo=o(" class method."),avo=l(),ky=a("p"),nvo=o("This class cannot be instantiated directly using "),ife=a("code"),svo=o("__init__()"),lvo=o(" (throws an error)."),ivo=l(),He=a("div"),F(Sy.$$.fragment),dvo=l(),dfe=a("p"),cvo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),fvo=l(),Oa=a("p"),mvo=o("The feature extractor class to instantiate is selected based on the "),cfe=a("code"),gvo=o("model_type"),hvo=o(` property of the config object
(either passed as an argument or loaded from `),ffe=a("code"),pvo=o("pretrained_model_name_or_path"),_vo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mfe=a("code"),uvo=o("pretrained_model_name_or_path"),bvo=o(":"),vvo=l(),Q=a("ul"),sp=a("li"),gfe=a("strong"),Fvo=o("beit"),Tvo=o(" \u2014 "),Aj=a("a"),Mvo=o("BeitFeatureExtractor"),Evo=o(" (BEiT model)"),Cvo=l(),lp=a("li"),hfe=a("strong"),wvo=o("clip"),Avo=o(" \u2014 "),Lj=a("a"),Lvo=o("CLIPFeatureExtractor"),yvo=o(" (CLIP model)"),xvo=l(),ip=a("li"),pfe=a("strong"),$vo=o("convnext"),kvo=o(" \u2014 "),yj=a("a"),Svo=o("ConvNextFeatureExtractor"),Rvo=o(" (ConvNeXT model)"),Pvo=l(),dp=a("li"),_fe=a("strong"),Bvo=o("cvt"),Ivo=o(" \u2014 "),xj=a("a"),Nvo=o("ConvNextFeatureExtractor"),qvo=o(" (CvT model)"),jvo=l(),cp=a("li"),ufe=a("strong"),Dvo=o("data2vec-audio"),Gvo=o(" \u2014 "),$j=a("a"),Ovo=o("Wav2Vec2FeatureExtractor"),Vvo=o(" (Data2VecAudio model)"),Xvo=l(),fp=a("li"),bfe=a("strong"),zvo=o("data2vec-vision"),Wvo=o(" \u2014 "),kj=a("a"),Qvo=o("BeitFeatureExtractor"),Uvo=o(" (Data2VecVision model)"),Hvo=l(),mp=a("li"),vfe=a("strong"),Jvo=o("deit"),Yvo=o(" \u2014 "),Sj=a("a"),Kvo=o("DeiTFeatureExtractor"),Zvo=o(" (DeiT model)"),e5o=l(),gp=a("li"),Ffe=a("strong"),o5o=o("detr"),r5o=o(" \u2014 "),Rj=a("a"),t5o=o("DetrFeatureExtractor"),a5o=o(" (DETR model)"),n5o=l(),hp=a("li"),Tfe=a("strong"),s5o=o("donut"),l5o=o(" \u2014 "),Pj=a("a"),i5o=o("DonutFeatureExtractor"),d5o=o(" (Donut model)"),c5o=l(),pp=a("li"),Mfe=a("strong"),f5o=o("dpt"),m5o=o(" \u2014 "),Bj=a("a"),g5o=o("DPTFeatureExtractor"),h5o=o(" (DPT model)"),p5o=l(),_p=a("li"),Efe=a("strong"),_5o=o("flava"),u5o=o(" \u2014 "),Ij=a("a"),b5o=o("FlavaFeatureExtractor"),v5o=o(" (FLAVA model)"),F5o=l(),up=a("li"),Cfe=a("strong"),T5o=o("glpn"),M5o=o(" \u2014 "),Nj=a("a"),E5o=o("GLPNFeatureExtractor"),C5o=o(" (GLPN model)"),w5o=l(),bp=a("li"),wfe=a("strong"),A5o=o("groupvit"),L5o=o(" \u2014 "),qj=a("a"),y5o=o("CLIPFeatureExtractor"),x5o=o(" (GroupViT model)"),$5o=l(),vp=a("li"),Afe=a("strong"),k5o=o("hubert"),S5o=o(" \u2014 "),jj=a("a"),R5o=o("Wav2Vec2FeatureExtractor"),P5o=o(" (Hubert model)"),B5o=l(),Fp=a("li"),Lfe=a("strong"),I5o=o("imagegpt"),N5o=o(" \u2014 "),Dj=a("a"),q5o=o("ImageGPTFeatureExtractor"),j5o=o(" (ImageGPT model)"),D5o=l(),Tp=a("li"),yfe=a("strong"),G5o=o("layoutlmv2"),O5o=o(" \u2014 "),Gj=a("a"),V5o=o("LayoutLMv2FeatureExtractor"),X5o=o(" (LayoutLMv2 model)"),z5o=l(),Mp=a("li"),xfe=a("strong"),W5o=o("layoutlmv3"),Q5o=o(" \u2014 "),Oj=a("a"),U5o=o("LayoutLMv3FeatureExtractor"),H5o=o(" (LayoutLMv3 model)"),J5o=l(),Ep=a("li"),$fe=a("strong"),Y5o=o("levit"),K5o=o(" \u2014 "),Vj=a("a"),Z5o=o("LevitFeatureExtractor"),e0o=o(" (LeViT model)"),o0o=l(),Cp=a("li"),kfe=a("strong"),r0o=o("maskformer"),t0o=o(" \u2014 "),Xj=a("a"),a0o=o("MaskFormerFeatureExtractor"),n0o=o(" (MaskFormer model)"),s0o=l(),wp=a("li"),Sfe=a("strong"),l0o=o("mctct"),i0o=o(" \u2014 "),zj=a("a"),d0o=o("MCTCTFeatureExtractor"),c0o=o(" (M-CTC-T model)"),f0o=l(),Ap=a("li"),Rfe=a("strong"),m0o=o("mobilevit"),g0o=o(" \u2014 "),Wj=a("a"),h0o=o("MobileViTFeatureExtractor"),p0o=o(" (MobileViT model)"),_0o=l(),Lp=a("li"),Pfe=a("strong"),u0o=o("owlvit"),b0o=o(" \u2014 "),Qj=a("a"),v0o=o("OwlViTFeatureExtractor"),F0o=o(" (OWL-ViT model)"),T0o=l(),yp=a("li"),Bfe=a("strong"),M0o=o("perceiver"),E0o=o(" \u2014 "),Uj=a("a"),C0o=o("PerceiverFeatureExtractor"),w0o=o(" (Perceiver model)"),A0o=l(),xp=a("li"),Ife=a("strong"),L0o=o("poolformer"),y0o=o(" \u2014 "),Hj=a("a"),x0o=o("PoolFormerFeatureExtractor"),$0o=o(" (PoolFormer model)"),k0o=l(),$p=a("li"),Nfe=a("strong"),S0o=o("regnet"),R0o=o(" \u2014 "),Jj=a("a"),P0o=o("ConvNextFeatureExtractor"),B0o=o(" (RegNet model)"),I0o=l(),kp=a("li"),qfe=a("strong"),N0o=o("resnet"),q0o=o(" \u2014 "),Yj=a("a"),j0o=o("ConvNextFeatureExtractor"),D0o=o(" (ResNet model)"),G0o=l(),Sp=a("li"),jfe=a("strong"),O0o=o("segformer"),V0o=o(" \u2014 "),Kj=a("a"),X0o=o("SegformerFeatureExtractor"),z0o=o(" (SegFormer model)"),W0o=l(),Rp=a("li"),Dfe=a("strong"),Q0o=o("speech_to_text"),U0o=o(" \u2014 "),Zj=a("a"),H0o=o("Speech2TextFeatureExtractor"),J0o=o(" (Speech2Text model)"),Y0o=l(),Pp=a("li"),Gfe=a("strong"),K0o=o("swin"),Z0o=o(" \u2014 "),eD=a("a"),eFo=o("ViTFeatureExtractor"),oFo=o(" (Swin Transformer model)"),rFo=l(),Bp=a("li"),Ofe=a("strong"),tFo=o("swinv2"),aFo=o(" \u2014 "),oD=a("a"),nFo=o("ViTFeatureExtractor"),sFo=o(" (Swin Transformer V2 model)"),lFo=l(),Ip=a("li"),Vfe=a("strong"),iFo=o("van"),dFo=o(" \u2014 "),rD=a("a"),cFo=o("ConvNextFeatureExtractor"),fFo=o(" (VAN model)"),mFo=l(),Np=a("li"),Xfe=a("strong"),gFo=o("videomae"),hFo=o(" \u2014 "),tD=a("a"),pFo=o("ViTFeatureExtractor"),_Fo=o(" (VideoMAE model)"),uFo=l(),qp=a("li"),zfe=a("strong"),bFo=o("vilt"),vFo=o(" \u2014 "),aD=a("a"),FFo=o("ViltFeatureExtractor"),TFo=o(" (ViLT model)"),MFo=l(),jp=a("li"),Wfe=a("strong"),EFo=o("vit"),CFo=o(" \u2014 "),nD=a("a"),wFo=o("ViTFeatureExtractor"),AFo=o(" (ViT model)"),LFo=l(),Dp=a("li"),Qfe=a("strong"),yFo=o("vit_mae"),xFo=o(" \u2014 "),sD=a("a"),$Fo=o("ViTFeatureExtractor"),kFo=o(" (ViTMAE model)"),SFo=l(),Gp=a("li"),Ufe=a("strong"),RFo=o("wav2vec2"),PFo=o(" \u2014 "),lD=a("a"),BFo=o("Wav2Vec2FeatureExtractor"),IFo=o(" (Wav2Vec2 model)"),NFo=l(),Op=a("li"),Hfe=a("strong"),qFo=o("wav2vec2-conformer"),jFo=o(" \u2014 "),iD=a("a"),DFo=o("Wav2Vec2FeatureExtractor"),GFo=o(" (Wav2Vec2-Conformer model)"),OFo=l(),Vp=a("li"),Jfe=a("strong"),VFo=o("yolos"),XFo=o(" \u2014 "),dD=a("a"),zFo=o("YolosFeatureExtractor"),WFo=o(" (YOLOS model)"),QFo=l(),F(Xp.$$.fragment),UFo=l(),F(zp.$$.fragment),HFo=l(),Wp=a("div"),F(Ry.$$.fragment),JFo=l(),Yfe=a("p"),YFo=o("Register a new feature extractor for this class."),oUe=l(),ed=a("h2"),Qp=a("a"),Kfe=a("span"),F(Py.$$.fragment),KFo=l(),Zfe=a("span"),ZFo=o("AutoProcessor"),rUe=l(),ko=a("div"),F(By.$$.fragment),eTo=l(),Iy=a("p"),oTo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cD=a("a"),rTo=o("AutoProcessor.from_pretrained()"),tTo=o(" class method."),aTo=l(),Ny=a("p"),nTo=o("This class cannot be instantiated directly using "),eme=a("code"),sTo=o("__init__()"),lTo=o(" (throws an error)."),iTo=l(),Je=a("div"),F(qy.$$.fragment),dTo=l(),ome=a("p"),cTo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),fTo=l(),od=a("p"),mTo=o("The processor class to instantiate is selected based on the "),rme=a("code"),gTo=o("model_type"),hTo=o(` property of the config object (either
passed as an argument or loaded from `),tme=a("code"),pTo=o("pretrained_model_name_or_path"),_To=o(" if possible):"),uTo=l(),ie=a("ul"),Up=a("li"),ame=a("strong"),bTo=o("clip"),vTo=o(" \u2014 "),fD=a("a"),FTo=o("CLIPProcessor"),TTo=o(" (CLIP model)"),MTo=l(),Hp=a("li"),nme=a("strong"),ETo=o("donut"),CTo=o(" \u2014 "),mD=a("a"),wTo=o("DonutProcessor"),ATo=o(" (Donut model)"),LTo=l(),Jp=a("li"),sme=a("strong"),yTo=o("flava"),xTo=o(" \u2014 "),gD=a("a"),$To=o("FlavaProcessor"),kTo=o(" (FLAVA model)"),STo=l(),Yp=a("li"),lme=a("strong"),RTo=o("groupvit"),PTo=o(" \u2014 "),hD=a("a"),BTo=o("CLIPProcessor"),ITo=o(" (GroupViT model)"),NTo=l(),Kp=a("li"),ime=a("strong"),qTo=o("layoutlmv2"),jTo=o(" \u2014 "),pD=a("a"),DTo=o("LayoutLMv2Processor"),GTo=o(" (LayoutLMv2 model)"),OTo=l(),Zp=a("li"),dme=a("strong"),VTo=o("layoutlmv3"),XTo=o(" \u2014 "),_D=a("a"),zTo=o("LayoutLMv3Processor"),WTo=o(" (LayoutLMv3 model)"),QTo=l(),e_=a("li"),cme=a("strong"),UTo=o("layoutxlm"),HTo=o(" \u2014 "),uD=a("a"),JTo=o("LayoutXLMProcessor"),YTo=o(" (LayoutXLM model)"),KTo=l(),o_=a("li"),fme=a("strong"),ZTo=o("owlvit"),e8o=o(" \u2014 "),bD=a("a"),o8o=o("OwlViTProcessor"),r8o=o(" (OWL-ViT model)"),t8o=l(),r_=a("li"),mme=a("strong"),a8o=o("sew"),n8o=o(" \u2014 "),vD=a("a"),s8o=o("Wav2Vec2Processor"),l8o=o(" (SEW model)"),i8o=l(),t_=a("li"),gme=a("strong"),d8o=o("sew-d"),c8o=o(" \u2014 "),FD=a("a"),f8o=o("Wav2Vec2Processor"),m8o=o(" (SEW-D model)"),g8o=l(),a_=a("li"),hme=a("strong"),h8o=o("speech_to_text"),p8o=o(" \u2014 "),TD=a("a"),_8o=o("Speech2TextProcessor"),u8o=o(" (Speech2Text model)"),b8o=l(),n_=a("li"),pme=a("strong"),v8o=o("speech_to_text_2"),F8o=o(" \u2014 "),MD=a("a"),T8o=o("Speech2Text2Processor"),M8o=o(" (Speech2Text2 model)"),E8o=l(),s_=a("li"),_me=a("strong"),C8o=o("trocr"),w8o=o(" \u2014 "),ED=a("a"),A8o=o("TrOCRProcessor"),L8o=o(" (TrOCR model)"),y8o=l(),l_=a("li"),ume=a("strong"),x8o=o("unispeech"),$8o=o(" \u2014 "),CD=a("a"),k8o=o("Wav2Vec2Processor"),S8o=o(" (UniSpeech model)"),R8o=l(),i_=a("li"),bme=a("strong"),P8o=o("unispeech-sat"),B8o=o(" \u2014 "),wD=a("a"),I8o=o("Wav2Vec2Processor"),N8o=o(" (UniSpeechSat model)"),q8o=l(),d_=a("li"),vme=a("strong"),j8o=o("vilt"),D8o=o(" \u2014 "),AD=a("a"),G8o=o("ViltProcessor"),O8o=o(" (ViLT model)"),V8o=l(),c_=a("li"),Fme=a("strong"),X8o=o("vision-text-dual-encoder"),z8o=o(" \u2014 "),LD=a("a"),W8o=o("VisionTextDualEncoderProcessor"),Q8o=o(" (VisionTextDualEncoder model)"),U8o=l(),f_=a("li"),Tme=a("strong"),H8o=o("wav2vec2"),J8o=o(" \u2014 "),yD=a("a"),Y8o=o("Wav2Vec2Processor"),K8o=o(" (Wav2Vec2 model)"),Z8o=l(),m_=a("li"),Mme=a("strong"),eMo=o("wav2vec2-conformer"),oMo=o(" \u2014 "),xD=a("a"),rMo=o("Wav2Vec2Processor"),tMo=o(" (Wav2Vec2-Conformer model)"),aMo=l(),g_=a("li"),Eme=a("strong"),nMo=o("wavlm"),sMo=o(" \u2014 "),$D=a("a"),lMo=o("Wav2Vec2Processor"),iMo=o(" (WavLM model)"),dMo=l(),F(h_.$$.fragment),cMo=l(),F(p_.$$.fragment),fMo=l(),__=a("div"),F(jy.$$.fragment),mMo=l(),Cme=a("p"),gMo=o("Register a new processor for this class."),tUe=l(),rd=a("h2"),u_=a("a"),wme=a("span"),F(Dy.$$.fragment),hMo=l(),Ame=a("span"),pMo=o("AutoModel"),aUe=l(),So=a("div"),F(Gy.$$.fragment),_Mo=l(),td=a("p"),uMo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kD=a("a"),bMo=o("from_pretrained()"),vMo=o(" class method or the "),SD=a("a"),FMo=o("from_config()"),TMo=o(` class
method.`),MMo=l(),Oy=a("p"),EMo=o("This class cannot be instantiated directly using "),Lme=a("code"),CMo=o("__init__()"),wMo=o(" (throws an error)."),AMo=l(),mt=a("div"),F(Vy.$$.fragment),LMo=l(),yme=a("p"),yMo=o("Instantiates one of the base model classes of the library from a configuration."),xMo=l(),ad=a("p"),$Mo=o(`Note:
Loading a model from its configuration file does `),xme=a("strong"),kMo=o("not"),SMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RD=a("a"),RMo=o("from_pretrained()"),PMo=o(" to load the model weights."),BMo=l(),F(b_.$$.fragment),IMo=l(),Ye=a("div"),F(Xy.$$.fragment),NMo=l(),$me=a("p"),qMo=o("Instantiate one of the base model classes of the library from a pretrained model."),jMo=l(),Va=a("p"),DMo=o("The model class to instantiate is selected based on the "),kme=a("code"),GMo=o("model_type"),OMo=o(` property of the config object (either
passed as an argument or loaded from `),Sme=a("code"),VMo=o("pretrained_model_name_or_path"),XMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=a("code"),zMo=o("pretrained_model_name_or_path"),WMo=o(":"),QMo=l(),y=a("ul"),v_=a("li"),Pme=a("strong"),UMo=o("albert"),HMo=o(" \u2014 "),PD=a("a"),JMo=o("AlbertModel"),YMo=o(" (ALBERT model)"),KMo=l(),F_=a("li"),Bme=a("strong"),ZMo=o("bart"),eEo=o(" \u2014 "),BD=a("a"),oEo=o("BartModel"),rEo=o(" (BART model)"),tEo=l(),T_=a("li"),Ime=a("strong"),aEo=o("beit"),nEo=o(" \u2014 "),ID=a("a"),sEo=o("BeitModel"),lEo=o(" (BEiT model)"),iEo=l(),M_=a("li"),Nme=a("strong"),dEo=o("bert"),cEo=o(" \u2014 "),ND=a("a"),fEo=o("BertModel"),mEo=o(" (BERT model)"),gEo=l(),E_=a("li"),qme=a("strong"),hEo=o("bert-generation"),pEo=o(" \u2014 "),qD=a("a"),_Eo=o("BertGenerationEncoder"),uEo=o(" (Bert Generation model)"),bEo=l(),C_=a("li"),jme=a("strong"),vEo=o("big_bird"),FEo=o(" \u2014 "),jD=a("a"),TEo=o("BigBirdModel"),MEo=o(" (BigBird model)"),EEo=l(),w_=a("li"),Dme=a("strong"),CEo=o("bigbird_pegasus"),wEo=o(" \u2014 "),DD=a("a"),AEo=o("BigBirdPegasusModel"),LEo=o(" (BigBird-Pegasus model)"),yEo=l(),A_=a("li"),Gme=a("strong"),xEo=o("blenderbot"),$Eo=o(" \u2014 "),GD=a("a"),kEo=o("BlenderbotModel"),SEo=o(" (Blenderbot model)"),REo=l(),L_=a("li"),Ome=a("strong"),PEo=o("blenderbot-small"),BEo=o(" \u2014 "),OD=a("a"),IEo=o("BlenderbotSmallModel"),NEo=o(" (BlenderbotSmall model)"),qEo=l(),y_=a("li"),Vme=a("strong"),jEo=o("bloom"),DEo=o(" \u2014 "),VD=a("a"),GEo=o("BloomModel"),OEo=o(" (BLOOM model)"),VEo=l(),x_=a("li"),Xme=a("strong"),XEo=o("camembert"),zEo=o(" \u2014 "),XD=a("a"),WEo=o("CamembertModel"),QEo=o(" (CamemBERT model)"),UEo=l(),$_=a("li"),zme=a("strong"),HEo=o("canine"),JEo=o(" \u2014 "),zD=a("a"),YEo=o("CanineModel"),KEo=o(" (CANINE model)"),ZEo=l(),k_=a("li"),Wme=a("strong"),eCo=o("clip"),oCo=o(" \u2014 "),WD=a("a"),rCo=o("CLIPModel"),tCo=o(" (CLIP model)"),aCo=l(),S_=a("li"),Qme=a("strong"),nCo=o("codegen"),sCo=o(" \u2014 "),QD=a("a"),lCo=o("CodeGenModel"),iCo=o(" (CodeGen model)"),dCo=l(),R_=a("li"),Ume=a("strong"),cCo=o("convbert"),fCo=o(" \u2014 "),UD=a("a"),mCo=o("ConvBertModel"),gCo=o(" (ConvBERT model)"),hCo=l(),P_=a("li"),Hme=a("strong"),pCo=o("convnext"),_Co=o(" \u2014 "),HD=a("a"),uCo=o("ConvNextModel"),bCo=o(" (ConvNeXT model)"),vCo=l(),B_=a("li"),Jme=a("strong"),FCo=o("ctrl"),TCo=o(" \u2014 "),JD=a("a"),MCo=o("CTRLModel"),ECo=o(" (CTRL model)"),CCo=l(),I_=a("li"),Yme=a("strong"),wCo=o("cvt"),ACo=o(" \u2014 "),YD=a("a"),LCo=o("CvtModel"),yCo=o(" (CvT model)"),xCo=l(),N_=a("li"),Kme=a("strong"),$Co=o("data2vec-audio"),kCo=o(" \u2014 "),KD=a("a"),SCo=o("Data2VecAudioModel"),RCo=o(" (Data2VecAudio model)"),PCo=l(),q_=a("li"),Zme=a("strong"),BCo=o("data2vec-text"),ICo=o(" \u2014 "),ZD=a("a"),NCo=o("Data2VecTextModel"),qCo=o(" (Data2VecText model)"),jCo=l(),j_=a("li"),ege=a("strong"),DCo=o("data2vec-vision"),GCo=o(" \u2014 "),eG=a("a"),OCo=o("Data2VecVisionModel"),VCo=o(" (Data2VecVision model)"),XCo=l(),D_=a("li"),oge=a("strong"),zCo=o("deberta"),WCo=o(" \u2014 "),oG=a("a"),QCo=o("DebertaModel"),UCo=o(" (DeBERTa model)"),HCo=l(),G_=a("li"),rge=a("strong"),JCo=o("deberta-v2"),YCo=o(" \u2014 "),rG=a("a"),KCo=o("DebertaV2Model"),ZCo=o(" (DeBERTa-v2 model)"),e3o=l(),O_=a("li"),tge=a("strong"),o3o=o("decision_transformer"),r3o=o(" \u2014 "),tG=a("a"),t3o=o("DecisionTransformerModel"),a3o=o(" (Decision Transformer model)"),n3o=l(),V_=a("li"),age=a("strong"),s3o=o("deit"),l3o=o(" \u2014 "),aG=a("a"),i3o=o("DeiTModel"),d3o=o(" (DeiT model)"),c3o=l(),X_=a("li"),nge=a("strong"),f3o=o("detr"),m3o=o(" \u2014 "),nG=a("a"),g3o=o("DetrModel"),h3o=o(" (DETR model)"),p3o=l(),z_=a("li"),sge=a("strong"),_3o=o("distilbert"),u3o=o(" \u2014 "),sG=a("a"),b3o=o("DistilBertModel"),v3o=o(" (DistilBERT model)"),F3o=l(),W_=a("li"),lge=a("strong"),T3o=o("donut-swin"),M3o=o(" \u2014 "),lG=a("a"),E3o=o("DonutSwinModel"),C3o=o(" (DonutSwin model)"),w3o=l(),Q_=a("li"),ige=a("strong"),A3o=o("dpr"),L3o=o(" \u2014 "),iG=a("a"),y3o=o("DPRQuestionEncoder"),x3o=o(" (DPR model)"),$3o=l(),U_=a("li"),dge=a("strong"),k3o=o("dpt"),S3o=o(" \u2014 "),dG=a("a"),R3o=o("DPTModel"),P3o=o(" (DPT model)"),B3o=l(),H_=a("li"),cge=a("strong"),I3o=o("electra"),N3o=o(" \u2014 "),cG=a("a"),q3o=o("ElectraModel"),j3o=o(" (ELECTRA model)"),D3o=l(),J_=a("li"),fge=a("strong"),G3o=o("flaubert"),O3o=o(" \u2014 "),fG=a("a"),V3o=o("FlaubertModel"),X3o=o(" (FlauBERT model)"),z3o=l(),Y_=a("li"),mge=a("strong"),W3o=o("flava"),Q3o=o(" \u2014 "),mG=a("a"),U3o=o("FlavaModel"),H3o=o(" (FLAVA model)"),J3o=l(),K_=a("li"),gge=a("strong"),Y3o=o("fnet"),K3o=o(" \u2014 "),gG=a("a"),Z3o=o("FNetModel"),ewo=o(" (FNet model)"),owo=l(),Z_=a("li"),hge=a("strong"),rwo=o("fsmt"),two=o(" \u2014 "),hG=a("a"),awo=o("FSMTModel"),nwo=o(" (FairSeq Machine-Translation model)"),swo=l(),nl=a("li"),pge=a("strong"),lwo=o("funnel"),iwo=o(" \u2014 "),pG=a("a"),dwo=o("FunnelModel"),cwo=o(" or "),_G=a("a"),fwo=o("FunnelBaseModel"),mwo=o(" (Funnel Transformer model)"),gwo=l(),eu=a("li"),_ge=a("strong"),hwo=o("glpn"),pwo=o(" \u2014 "),uG=a("a"),_wo=o("GLPNModel"),uwo=o(" (GLPN model)"),bwo=l(),ou=a("li"),uge=a("strong"),vwo=o("gpt2"),Fwo=o(" \u2014 "),bG=a("a"),Two=o("GPT2Model"),Mwo=o(" (OpenAI GPT-2 model)"),Ewo=l(),ru=a("li"),bge=a("strong"),Cwo=o("gpt_neo"),wwo=o(" \u2014 "),vG=a("a"),Awo=o("GPTNeoModel"),Lwo=o(" (GPT Neo model)"),ywo=l(),tu=a("li"),vge=a("strong"),xwo=o("gpt_neox"),$wo=o(" \u2014 "),FG=a("a"),kwo=o("GPTNeoXModel"),Swo=o(" (GPT NeoX model)"),Rwo=l(),au=a("li"),Fge=a("strong"),Pwo=o("gptj"),Bwo=o(" \u2014 "),TG=a("a"),Iwo=o("GPTJModel"),Nwo=o(" (GPT-J model)"),qwo=l(),nu=a("li"),Tge=a("strong"),jwo=o("groupvit"),Dwo=o(" \u2014 "),MG=a("a"),Gwo=o("GroupViTModel"),Owo=o(" (GroupViT model)"),Vwo=l(),su=a("li"),Mge=a("strong"),Xwo=o("hubert"),zwo=o(" \u2014 "),EG=a("a"),Wwo=o("HubertModel"),Qwo=o(" (Hubert model)"),Uwo=l(),lu=a("li"),Ege=a("strong"),Hwo=o("ibert"),Jwo=o(" \u2014 "),CG=a("a"),Ywo=o("IBertModel"),Kwo=o(" (I-BERT model)"),Zwo=l(),iu=a("li"),Cge=a("strong"),e6o=o("imagegpt"),o6o=o(" \u2014 "),wG=a("a"),r6o=o("ImageGPTModel"),t6o=o(" (ImageGPT model)"),a6o=l(),du=a("li"),wge=a("strong"),n6o=o("layoutlm"),s6o=o(" \u2014 "),AG=a("a"),l6o=o("LayoutLMModel"),i6o=o(" (LayoutLM model)"),d6o=l(),cu=a("li"),Age=a("strong"),c6o=o("layoutlmv2"),f6o=o(" \u2014 "),LG=a("a"),m6o=o("LayoutLMv2Model"),g6o=o(" (LayoutLMv2 model)"),h6o=l(),fu=a("li"),Lge=a("strong"),p6o=o("layoutlmv3"),_6o=o(" \u2014 "),yG=a("a"),u6o=o("LayoutLMv3Model"),b6o=o(" (LayoutLMv3 model)"),v6o=l(),mu=a("li"),yge=a("strong"),F6o=o("led"),T6o=o(" \u2014 "),xG=a("a"),M6o=o("LEDModel"),E6o=o(" (LED model)"),C6o=l(),gu=a("li"),xge=a("strong"),w6o=o("levit"),A6o=o(" \u2014 "),$G=a("a"),L6o=o("LevitModel"),y6o=o(" (LeViT model)"),x6o=l(),hu=a("li"),$ge=a("strong"),$6o=o("longformer"),k6o=o(" \u2014 "),kG=a("a"),S6o=o("LongformerModel"),R6o=o(" (Longformer model)"),P6o=l(),pu=a("li"),kge=a("strong"),B6o=o("longt5"),I6o=o(" \u2014 "),SG=a("a"),N6o=o("LongT5Model"),q6o=o(" (LongT5 model)"),j6o=l(),_u=a("li"),Sge=a("strong"),D6o=o("luke"),G6o=o(" \u2014 "),RG=a("a"),O6o=o("LukeModel"),V6o=o(" (LUKE model)"),X6o=l(),uu=a("li"),Rge=a("strong"),z6o=o("lxmert"),W6o=o(" \u2014 "),PG=a("a"),Q6o=o("LxmertModel"),U6o=o(" (LXMERT model)"),H6o=l(),bu=a("li"),Pge=a("strong"),J6o=o("m2m_100"),Y6o=o(" \u2014 "),BG=a("a"),K6o=o("M2M100Model"),Z6o=o(" (M2M100 model)"),eAo=l(),vu=a("li"),Bge=a("strong"),oAo=o("marian"),rAo=o(" \u2014 "),IG=a("a"),tAo=o("MarianModel"),aAo=o(" (Marian model)"),nAo=l(),Fu=a("li"),Ige=a("strong"),sAo=o("maskformer"),lAo=o(" \u2014 "),NG=a("a"),iAo=o("MaskFormerModel"),dAo=o(" (MaskFormer model)"),cAo=l(),Tu=a("li"),Nge=a("strong"),fAo=o("mbart"),mAo=o(" \u2014 "),qG=a("a"),gAo=o("MBartModel"),hAo=o(" (mBART model)"),pAo=l(),Mu=a("li"),qge=a("strong"),_Ao=o("mctct"),uAo=o(" \u2014 "),jG=a("a"),bAo=o("MCTCTModel"),vAo=o(" (M-CTC-T model)"),FAo=l(),Eu=a("li"),jge=a("strong"),TAo=o("megatron-bert"),MAo=o(" \u2014 "),DG=a("a"),EAo=o("MegatronBertModel"),CAo=o(" (Megatron-BERT model)"),wAo=l(),Cu=a("li"),Dge=a("strong"),AAo=o("mobilebert"),LAo=o(" \u2014 "),GG=a("a"),yAo=o("MobileBertModel"),xAo=o(" (MobileBERT model)"),$Ao=l(),wu=a("li"),Gge=a("strong"),kAo=o("mobilevit"),SAo=o(" \u2014 "),OG=a("a"),RAo=o("MobileViTModel"),PAo=o(" (MobileViT model)"),BAo=l(),Au=a("li"),Oge=a("strong"),IAo=o("mpnet"),NAo=o(" \u2014 "),VG=a("a"),qAo=o("MPNetModel"),jAo=o(" (MPNet model)"),DAo=l(),Lu=a("li"),Vge=a("strong"),GAo=o("mt5"),OAo=o(" \u2014 "),XG=a("a"),VAo=o("MT5Model"),XAo=o(" (MT5 model)"),zAo=l(),yu=a("li"),Xge=a("strong"),WAo=o("mvp"),QAo=o(" \u2014 "),zG=a("a"),UAo=o("MvpModel"),HAo=o(" (MVP model)"),JAo=l(),xu=a("li"),zge=a("strong"),YAo=o("nezha"),KAo=o(" \u2014 "),WG=a("a"),ZAo=o("NezhaModel"),e7o=o(" (Nezha model)"),o7o=l(),$u=a("li"),Wge=a("strong"),r7o=o("nllb"),t7o=o(" \u2014 "),QG=a("a"),a7o=o("M2M100Model"),n7o=o(" (NLLB model)"),s7o=l(),ku=a("li"),Qge=a("strong"),l7o=o("nystromformer"),i7o=o(" \u2014 "),UG=a("a"),d7o=o("NystromformerModel"),c7o=o(" (Nystr\xF6mformer model)"),f7o=l(),Su=a("li"),Uge=a("strong"),m7o=o("openai-gpt"),g7o=o(" \u2014 "),HG=a("a"),h7o=o("OpenAIGPTModel"),p7o=o(" (OpenAI GPT model)"),_7o=l(),Ru=a("li"),Hge=a("strong"),u7o=o("opt"),b7o=o(" \u2014 "),JG=a("a"),v7o=o("OPTModel"),F7o=o(" (OPT model)"),T7o=l(),Pu=a("li"),Jge=a("strong"),M7o=o("owlvit"),E7o=o(" \u2014 "),YG=a("a"),C7o=o("OwlViTModel"),w7o=o(" (OWL-ViT model)"),A7o=l(),Bu=a("li"),Yge=a("strong"),L7o=o("pegasus"),y7o=o(" \u2014 "),KG=a("a"),x7o=o("PegasusModel"),$7o=o(" (Pegasus model)"),k7o=l(),Iu=a("li"),Kge=a("strong"),S7o=o("perceiver"),R7o=o(" \u2014 "),ZG=a("a"),P7o=o("PerceiverModel"),B7o=o(" (Perceiver model)"),I7o=l(),Nu=a("li"),Zge=a("strong"),N7o=o("plbart"),q7o=o(" \u2014 "),eO=a("a"),j7o=o("PLBartModel"),D7o=o(" (PLBart model)"),G7o=l(),qu=a("li"),ehe=a("strong"),O7o=o("poolformer"),V7o=o(" \u2014 "),oO=a("a"),X7o=o("PoolFormerModel"),z7o=o(" (PoolFormer model)"),W7o=l(),ju=a("li"),ohe=a("strong"),Q7o=o("prophetnet"),U7o=o(" \u2014 "),rO=a("a"),H7o=o("ProphetNetModel"),J7o=o(" (ProphetNet model)"),Y7o=l(),Du=a("li"),rhe=a("strong"),K7o=o("qdqbert"),Z7o=o(" \u2014 "),tO=a("a"),eLo=o("QDQBertModel"),oLo=o(" (QDQBert model)"),rLo=l(),Gu=a("li"),the=a("strong"),tLo=o("reformer"),aLo=o(" \u2014 "),aO=a("a"),nLo=o("ReformerModel"),sLo=o(" (Reformer model)"),lLo=l(),Ou=a("li"),ahe=a("strong"),iLo=o("regnet"),dLo=o(" \u2014 "),nO=a("a"),cLo=o("RegNetModel"),fLo=o(" (RegNet model)"),mLo=l(),Vu=a("li"),nhe=a("strong"),gLo=o("rembert"),hLo=o(" \u2014 "),sO=a("a"),pLo=o("RemBertModel"),_Lo=o(" (RemBERT model)"),uLo=l(),Xu=a("li"),she=a("strong"),bLo=o("resnet"),vLo=o(" \u2014 "),lO=a("a"),FLo=o("ResNetModel"),TLo=o(" (ResNet model)"),MLo=l(),zu=a("li"),lhe=a("strong"),ELo=o("retribert"),CLo=o(" \u2014 "),iO=a("a"),wLo=o("RetriBertModel"),ALo=o(" (RetriBERT model)"),LLo=l(),Wu=a("li"),ihe=a("strong"),yLo=o("roberta"),xLo=o(" \u2014 "),dO=a("a"),$Lo=o("RobertaModel"),kLo=o(" (RoBERTa model)"),SLo=l(),Qu=a("li"),dhe=a("strong"),RLo=o("roformer"),PLo=o(" \u2014 "),cO=a("a"),BLo=o("RoFormerModel"),ILo=o(" (RoFormer model)"),NLo=l(),Uu=a("li"),che=a("strong"),qLo=o("segformer"),jLo=o(" \u2014 "),fO=a("a"),DLo=o("SegformerModel"),GLo=o(" (SegFormer model)"),OLo=l(),Hu=a("li"),fhe=a("strong"),VLo=o("sew"),XLo=o(" \u2014 "),mO=a("a"),zLo=o("SEWModel"),WLo=o(" (SEW model)"),QLo=l(),Ju=a("li"),mhe=a("strong"),ULo=o("sew-d"),HLo=o(" \u2014 "),gO=a("a"),JLo=o("SEWDModel"),YLo=o(" (SEW-D model)"),KLo=l(),Yu=a("li"),ghe=a("strong"),ZLo=o("speech_to_text"),eyo=o(" \u2014 "),hO=a("a"),oyo=o("Speech2TextModel"),ryo=o(" (Speech2Text model)"),tyo=l(),Ku=a("li"),hhe=a("strong"),ayo=o("splinter"),nyo=o(" \u2014 "),pO=a("a"),syo=o("SplinterModel"),lyo=o(" (Splinter model)"),iyo=l(),Zu=a("li"),phe=a("strong"),dyo=o("squeezebert"),cyo=o(" \u2014 "),_O=a("a"),fyo=o("SqueezeBertModel"),myo=o(" (SqueezeBERT model)"),gyo=l(),e1=a("li"),_he=a("strong"),hyo=o("swin"),pyo=o(" \u2014 "),uO=a("a"),_yo=o("SwinModel"),uyo=o(" (Swin Transformer model)"),byo=l(),o1=a("li"),uhe=a("strong"),vyo=o("swinv2"),Fyo=o(" \u2014 "),bO=a("a"),Tyo=o("Swinv2Model"),Myo=o(" (Swin Transformer V2 model)"),Eyo=l(),r1=a("li"),bhe=a("strong"),Cyo=o("t5"),wyo=o(" \u2014 "),vO=a("a"),Ayo=o("T5Model"),Lyo=o(" (T5 model)"),yyo=l(),t1=a("li"),vhe=a("strong"),xyo=o("tapas"),$yo=o(" \u2014 "),FO=a("a"),kyo=o("TapasModel"),Syo=o(" (TAPAS model)"),Ryo=l(),a1=a("li"),Fhe=a("strong"),Pyo=o("trajectory_transformer"),Byo=o(" \u2014 "),TO=a("a"),Iyo=o("TrajectoryTransformerModel"),Nyo=o(" (Trajectory Transformer model)"),qyo=l(),n1=a("li"),The=a("strong"),jyo=o("transfo-xl"),Dyo=o(" \u2014 "),MO=a("a"),Gyo=o("TransfoXLModel"),Oyo=o(" (Transformer-XL model)"),Vyo=l(),s1=a("li"),Mhe=a("strong"),Xyo=o("unispeech"),zyo=o(" \u2014 "),EO=a("a"),Wyo=o("UniSpeechModel"),Qyo=o(" (UniSpeech model)"),Uyo=l(),l1=a("li"),Ehe=a("strong"),Hyo=o("unispeech-sat"),Jyo=o(" \u2014 "),CO=a("a"),Yyo=o("UniSpeechSatModel"),Kyo=o(" (UniSpeechSat model)"),Zyo=l(),i1=a("li"),Che=a("strong"),e9o=o("van"),o9o=o(" \u2014 "),wO=a("a"),r9o=o("VanModel"),t9o=o(" (VAN model)"),a9o=l(),d1=a("li"),whe=a("strong"),n9o=o("videomae"),s9o=o(" \u2014 "),AO=a("a"),l9o=o("VideoMAEModel"),i9o=o(" (VideoMAE model)"),d9o=l(),c1=a("li"),Ahe=a("strong"),c9o=o("vilt"),f9o=o(" \u2014 "),LO=a("a"),m9o=o("ViltModel"),g9o=o(" (ViLT model)"),h9o=l(),f1=a("li"),Lhe=a("strong"),p9o=o("vision-text-dual-encoder"),_9o=o(" \u2014 "),yO=a("a"),u9o=o("VisionTextDualEncoderModel"),b9o=o(" (VisionTextDualEncoder model)"),v9o=l(),m1=a("li"),yhe=a("strong"),F9o=o("visual_bert"),T9o=o(" \u2014 "),xO=a("a"),M9o=o("VisualBertModel"),E9o=o(" (VisualBERT model)"),C9o=l(),g1=a("li"),xhe=a("strong"),w9o=o("vit"),A9o=o(" \u2014 "),$O=a("a"),L9o=o("ViTModel"),y9o=o(" (ViT model)"),x9o=l(),h1=a("li"),$he=a("strong"),$9o=o("vit_mae"),k9o=o(" \u2014 "),kO=a("a"),S9o=o("ViTMAEModel"),R9o=o(" (ViTMAE model)"),P9o=l(),p1=a("li"),khe=a("strong"),B9o=o("wav2vec2"),I9o=o(" \u2014 "),SO=a("a"),N9o=o("Wav2Vec2Model"),q9o=o(" (Wav2Vec2 model)"),j9o=l(),_1=a("li"),She=a("strong"),D9o=o("wav2vec2-conformer"),G9o=o(" \u2014 "),RO=a("a"),O9o=o("Wav2Vec2ConformerModel"),V9o=o(" (Wav2Vec2-Conformer model)"),X9o=l(),u1=a("li"),Rhe=a("strong"),z9o=o("wavlm"),W9o=o(" \u2014 "),PO=a("a"),Q9o=o("WavLMModel"),U9o=o(" (WavLM model)"),H9o=l(),b1=a("li"),Phe=a("strong"),J9o=o("xglm"),Y9o=o(" \u2014 "),BO=a("a"),K9o=o("XGLMModel"),Z9o=o(" (XGLM model)"),exo=l(),v1=a("li"),Bhe=a("strong"),oxo=o("xlm"),rxo=o(" \u2014 "),IO=a("a"),txo=o("XLMModel"),axo=o(" (XLM model)"),nxo=l(),F1=a("li"),Ihe=a("strong"),sxo=o("xlm-prophetnet"),lxo=o(" \u2014 "),NO=a("a"),ixo=o("XLMProphetNetModel"),dxo=o(" (XLM-ProphetNet model)"),cxo=l(),T1=a("li"),Nhe=a("strong"),fxo=o("xlm-roberta"),mxo=o(" \u2014 "),qO=a("a"),gxo=o("XLMRobertaModel"),hxo=o(" (XLM-RoBERTa model)"),pxo=l(),M1=a("li"),qhe=a("strong"),_xo=o("xlm-roberta-xl"),uxo=o(" \u2014 "),jO=a("a"),bxo=o("XLMRobertaXLModel"),vxo=o(" (XLM-RoBERTa-XL model)"),Fxo=l(),E1=a("li"),jhe=a("strong"),Txo=o("xlnet"),Mxo=o(" \u2014 "),DO=a("a"),Exo=o("XLNetModel"),Cxo=o(" (XLNet model)"),wxo=l(),C1=a("li"),Dhe=a("strong"),Axo=o("yolos"),Lxo=o(" \u2014 "),GO=a("a"),yxo=o("YolosModel"),xxo=o(" (YOLOS model)"),$xo=l(),w1=a("li"),Ghe=a("strong"),kxo=o("yoso"),Sxo=o(" \u2014 "),OO=a("a"),Rxo=o("YosoModel"),Pxo=o(" (YOSO model)"),Bxo=l(),A1=a("p"),Ixo=o("The model is set in evaluation mode by default using "),Ohe=a("code"),Nxo=o("model.eval()"),qxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vhe=a("code"),jxo=o("model.train()"),Dxo=l(),F(L1.$$.fragment),nUe=l(),nd=a("h2"),y1=a("a"),Xhe=a("span"),F(zy.$$.fragment),Gxo=l(),zhe=a("span"),Oxo=o("AutoModelForPreTraining"),sUe=l(),Ro=a("div"),F(Wy.$$.fragment),Vxo=l(),sd=a("p"),Xxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VO=a("a"),zxo=o("from_pretrained()"),Wxo=o(" class method or the "),XO=a("a"),Qxo=o("from_config()"),Uxo=o(` class
method.`),Hxo=l(),Qy=a("p"),Jxo=o("This class cannot be instantiated directly using "),Whe=a("code"),Yxo=o("__init__()"),Kxo=o(" (throws an error)."),Zxo=l(),gt=a("div"),F(Uy.$$.fragment),e$o=l(),Qhe=a("p"),o$o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),r$o=l(),ld=a("p"),t$o=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),a$o=o("not"),n$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zO=a("a"),s$o=o("from_pretrained()"),l$o=o(" to load the model weights."),i$o=l(),F(x1.$$.fragment),d$o=l(),Ke=a("div"),F(Hy.$$.fragment),c$o=l(),Hhe=a("p"),f$o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),m$o=l(),Xa=a("p"),g$o=o("The model class to instantiate is selected based on the "),Jhe=a("code"),h$o=o("model_type"),p$o=o(` property of the config object (either
passed as an argument or loaded from `),Yhe=a("code"),_$o=o("pretrained_model_name_or_path"),u$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=a("code"),b$o=o("pretrained_model_name_or_path"),v$o=o(":"),F$o=l(),G=a("ul"),$1=a("li"),Zhe=a("strong"),T$o=o("albert"),M$o=o(" \u2014 "),WO=a("a"),E$o=o("AlbertForPreTraining"),C$o=o(" (ALBERT model)"),w$o=l(),k1=a("li"),epe=a("strong"),A$o=o("bart"),L$o=o(" \u2014 "),QO=a("a"),y$o=o("BartForConditionalGeneration"),x$o=o(" (BART model)"),$$o=l(),S1=a("li"),ope=a("strong"),k$o=o("bert"),S$o=o(" \u2014 "),UO=a("a"),R$o=o("BertForPreTraining"),P$o=o(" (BERT model)"),B$o=l(),R1=a("li"),rpe=a("strong"),I$o=o("big_bird"),N$o=o(" \u2014 "),HO=a("a"),q$o=o("BigBirdForPreTraining"),j$o=o(" (BigBird model)"),D$o=l(),P1=a("li"),tpe=a("strong"),G$o=o("bloom"),O$o=o(" \u2014 "),JO=a("a"),V$o=o("BloomForCausalLM"),X$o=o(" (BLOOM model)"),z$o=l(),B1=a("li"),ape=a("strong"),W$o=o("camembert"),Q$o=o(" \u2014 "),YO=a("a"),U$o=o("CamembertForMaskedLM"),H$o=o(" (CamemBERT model)"),J$o=l(),I1=a("li"),npe=a("strong"),Y$o=o("ctrl"),K$o=o(" \u2014 "),KO=a("a"),Z$o=o("CTRLLMHeadModel"),eko=o(" (CTRL model)"),oko=l(),N1=a("li"),spe=a("strong"),rko=o("data2vec-text"),tko=o(" \u2014 "),ZO=a("a"),ako=o("Data2VecTextForMaskedLM"),nko=o(" (Data2VecText model)"),sko=l(),q1=a("li"),lpe=a("strong"),lko=o("deberta"),iko=o(" \u2014 "),eV=a("a"),dko=o("DebertaForMaskedLM"),cko=o(" (DeBERTa model)"),fko=l(),j1=a("li"),ipe=a("strong"),mko=o("deberta-v2"),gko=o(" \u2014 "),oV=a("a"),hko=o("DebertaV2ForMaskedLM"),pko=o(" (DeBERTa-v2 model)"),_ko=l(),D1=a("li"),dpe=a("strong"),uko=o("distilbert"),bko=o(" \u2014 "),rV=a("a"),vko=o("DistilBertForMaskedLM"),Fko=o(" (DistilBERT model)"),Tko=l(),G1=a("li"),cpe=a("strong"),Mko=o("electra"),Eko=o(" \u2014 "),tV=a("a"),Cko=o("ElectraForPreTraining"),wko=o(" (ELECTRA model)"),Ako=l(),O1=a("li"),fpe=a("strong"),Lko=o("flaubert"),yko=o(" \u2014 "),aV=a("a"),xko=o("FlaubertWithLMHeadModel"),$ko=o(" (FlauBERT model)"),kko=l(),V1=a("li"),mpe=a("strong"),Sko=o("flava"),Rko=o(" \u2014 "),nV=a("a"),Pko=o("FlavaForPreTraining"),Bko=o(" (FLAVA model)"),Iko=l(),X1=a("li"),gpe=a("strong"),Nko=o("fnet"),qko=o(" \u2014 "),sV=a("a"),jko=o("FNetForPreTraining"),Dko=o(" (FNet model)"),Gko=l(),z1=a("li"),hpe=a("strong"),Oko=o("fsmt"),Vko=o(" \u2014 "),lV=a("a"),Xko=o("FSMTForConditionalGeneration"),zko=o(" (FairSeq Machine-Translation model)"),Wko=l(),W1=a("li"),ppe=a("strong"),Qko=o("funnel"),Uko=o(" \u2014 "),iV=a("a"),Hko=o("FunnelForPreTraining"),Jko=o(" (Funnel Transformer model)"),Yko=l(),Q1=a("li"),_pe=a("strong"),Kko=o("gpt2"),Zko=o(" \u2014 "),dV=a("a"),eSo=o("GPT2LMHeadModel"),oSo=o(" (OpenAI GPT-2 model)"),rSo=l(),U1=a("li"),upe=a("strong"),tSo=o("ibert"),aSo=o(" \u2014 "),cV=a("a"),nSo=o("IBertForMaskedLM"),sSo=o(" (I-BERT model)"),lSo=l(),H1=a("li"),bpe=a("strong"),iSo=o("layoutlm"),dSo=o(" \u2014 "),fV=a("a"),cSo=o("LayoutLMForMaskedLM"),fSo=o(" (LayoutLM model)"),mSo=l(),J1=a("li"),vpe=a("strong"),gSo=o("longformer"),hSo=o(" \u2014 "),mV=a("a"),pSo=o("LongformerForMaskedLM"),_So=o(" (Longformer model)"),uSo=l(),Y1=a("li"),Fpe=a("strong"),bSo=o("luke"),vSo=o(" \u2014 "),gV=a("a"),FSo=o("LukeForMaskedLM"),TSo=o(" (LUKE model)"),MSo=l(),K1=a("li"),Tpe=a("strong"),ESo=o("lxmert"),CSo=o(" \u2014 "),hV=a("a"),wSo=o("LxmertForPreTraining"),ASo=o(" (LXMERT model)"),LSo=l(),Z1=a("li"),Mpe=a("strong"),ySo=o("megatron-bert"),xSo=o(" \u2014 "),pV=a("a"),$So=o("MegatronBertForPreTraining"),kSo=o(" (Megatron-BERT model)"),SSo=l(),e4=a("li"),Epe=a("strong"),RSo=o("mobilebert"),PSo=o(" \u2014 "),_V=a("a"),BSo=o("MobileBertForPreTraining"),ISo=o(" (MobileBERT model)"),NSo=l(),o4=a("li"),Cpe=a("strong"),qSo=o("mpnet"),jSo=o(" \u2014 "),uV=a("a"),DSo=o("MPNetForMaskedLM"),GSo=o(" (MPNet model)"),OSo=l(),r4=a("li"),wpe=a("strong"),VSo=o("mvp"),XSo=o(" \u2014 "),bV=a("a"),zSo=o("MvpForConditionalGeneration"),WSo=o(" (MVP model)"),QSo=l(),t4=a("li"),Ape=a("strong"),USo=o("nezha"),HSo=o(" \u2014 "),vV=a("a"),JSo=o("NezhaForPreTraining"),YSo=o(" (Nezha model)"),KSo=l(),a4=a("li"),Lpe=a("strong"),ZSo=o("openai-gpt"),eRo=o(" \u2014 "),FV=a("a"),oRo=o("OpenAIGPTLMHeadModel"),rRo=o(" (OpenAI GPT model)"),tRo=l(),n4=a("li"),ype=a("strong"),aRo=o("retribert"),nRo=o(" \u2014 "),TV=a("a"),sRo=o("RetriBertModel"),lRo=o(" (RetriBERT model)"),iRo=l(),s4=a("li"),xpe=a("strong"),dRo=o("roberta"),cRo=o(" \u2014 "),MV=a("a"),fRo=o("RobertaForMaskedLM"),mRo=o(" (RoBERTa model)"),gRo=l(),l4=a("li"),$pe=a("strong"),hRo=o("splinter"),pRo=o(" \u2014 "),EV=a("a"),_Ro=o("SplinterForPreTraining"),uRo=o(" (Splinter model)"),bRo=l(),i4=a("li"),kpe=a("strong"),vRo=o("squeezebert"),FRo=o(" \u2014 "),CV=a("a"),TRo=o("SqueezeBertForMaskedLM"),MRo=o(" (SqueezeBERT model)"),ERo=l(),d4=a("li"),Spe=a("strong"),CRo=o("t5"),wRo=o(" \u2014 "),wV=a("a"),ARo=o("T5ForConditionalGeneration"),LRo=o(" (T5 model)"),yRo=l(),c4=a("li"),Rpe=a("strong"),xRo=o("tapas"),$Ro=o(" \u2014 "),AV=a("a"),kRo=o("TapasForMaskedLM"),SRo=o(" (TAPAS model)"),RRo=l(),f4=a("li"),Ppe=a("strong"),PRo=o("transfo-xl"),BRo=o(" \u2014 "),LV=a("a"),IRo=o("TransfoXLLMHeadModel"),NRo=o(" (Transformer-XL model)"),qRo=l(),m4=a("li"),Bpe=a("strong"),jRo=o("unispeech"),DRo=o(" \u2014 "),yV=a("a"),GRo=o("UniSpeechForPreTraining"),ORo=o(" (UniSpeech model)"),VRo=l(),g4=a("li"),Ipe=a("strong"),XRo=o("unispeech-sat"),zRo=o(" \u2014 "),xV=a("a"),WRo=o("UniSpeechSatForPreTraining"),QRo=o(" (UniSpeechSat model)"),URo=l(),h4=a("li"),Npe=a("strong"),HRo=o("videomae"),JRo=o(" \u2014 "),$V=a("a"),YRo=o("VideoMAEForPreTraining"),KRo=o(" (VideoMAE model)"),ZRo=l(),p4=a("li"),qpe=a("strong"),ePo=o("visual_bert"),oPo=o(" \u2014 "),kV=a("a"),rPo=o("VisualBertForPreTraining"),tPo=o(" (VisualBERT model)"),aPo=l(),_4=a("li"),jpe=a("strong"),nPo=o("vit_mae"),sPo=o(" \u2014 "),SV=a("a"),lPo=o("ViTMAEForPreTraining"),iPo=o(" (ViTMAE model)"),dPo=l(),u4=a("li"),Dpe=a("strong"),cPo=o("wav2vec2"),fPo=o(" \u2014 "),RV=a("a"),mPo=o("Wav2Vec2ForPreTraining"),gPo=o(" (Wav2Vec2 model)"),hPo=l(),b4=a("li"),Gpe=a("strong"),pPo=o("wav2vec2-conformer"),_Po=o(" \u2014 "),PV=a("a"),uPo=o("Wav2Vec2ConformerForPreTraining"),bPo=o(" (Wav2Vec2-Conformer model)"),vPo=l(),v4=a("li"),Ope=a("strong"),FPo=o("xlm"),TPo=o(" \u2014 "),BV=a("a"),MPo=o("XLMWithLMHeadModel"),EPo=o(" (XLM model)"),CPo=l(),F4=a("li"),Vpe=a("strong"),wPo=o("xlm-roberta"),APo=o(" \u2014 "),IV=a("a"),LPo=o("XLMRobertaForMaskedLM"),yPo=o(" (XLM-RoBERTa model)"),xPo=l(),T4=a("li"),Xpe=a("strong"),$Po=o("xlm-roberta-xl"),kPo=o(" \u2014 "),NV=a("a"),SPo=o("XLMRobertaXLForMaskedLM"),RPo=o(" (XLM-RoBERTa-XL model)"),PPo=l(),M4=a("li"),zpe=a("strong"),BPo=o("xlnet"),IPo=o(" \u2014 "),qV=a("a"),NPo=o("XLNetLMHeadModel"),qPo=o(" (XLNet model)"),jPo=l(),E4=a("p"),DPo=o("The model is set in evaluation mode by default using "),Wpe=a("code"),GPo=o("model.eval()"),OPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=a("code"),VPo=o("model.train()"),XPo=l(),F(C4.$$.fragment),lUe=l(),id=a("h2"),w4=a("a"),Upe=a("span"),F(Jy.$$.fragment),zPo=l(),Hpe=a("span"),WPo=o("AutoModelForCausalLM"),iUe=l(),Po=a("div"),F(Yy.$$.fragment),QPo=l(),dd=a("p"),UPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jV=a("a"),HPo=o("from_pretrained()"),JPo=o(" class method or the "),DV=a("a"),YPo=o("from_config()"),KPo=o(` class
method.`),ZPo=l(),Ky=a("p"),eBo=o("This class cannot be instantiated directly using "),Jpe=a("code"),oBo=o("__init__()"),rBo=o(" (throws an error)."),tBo=l(),ht=a("div"),F(Zy.$$.fragment),aBo=l(),Ype=a("p"),nBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sBo=l(),cd=a("p"),lBo=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),iBo=o("not"),dBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),cBo=o("from_pretrained()"),fBo=o(" to load the model weights."),mBo=l(),F(A4.$$.fragment),gBo=l(),Ze=a("div"),F(e9.$$.fragment),hBo=l(),Zpe=a("p"),pBo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_Bo=l(),za=a("p"),uBo=o("The model class to instantiate is selected based on the "),e_e=a("code"),bBo=o("model_type"),vBo=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),FBo=o("pretrained_model_name_or_path"),TBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),MBo=o("pretrained_model_name_or_path"),EBo=o(":"),CBo=l(),z=a("ul"),L4=a("li"),t_e=a("strong"),wBo=o("bart"),ABo=o(" \u2014 "),OV=a("a"),LBo=o("BartForCausalLM"),yBo=o(" (BART model)"),xBo=l(),y4=a("li"),a_e=a("strong"),$Bo=o("bert"),kBo=o(" \u2014 "),VV=a("a"),SBo=o("BertLMHeadModel"),RBo=o(" (BERT model)"),PBo=l(),x4=a("li"),n_e=a("strong"),BBo=o("bert-generation"),IBo=o(" \u2014 "),XV=a("a"),NBo=o("BertGenerationDecoder"),qBo=o(" (Bert Generation model)"),jBo=l(),$4=a("li"),s_e=a("strong"),DBo=o("big_bird"),GBo=o(" \u2014 "),zV=a("a"),OBo=o("BigBirdForCausalLM"),VBo=o(" (BigBird model)"),XBo=l(),k4=a("li"),l_e=a("strong"),zBo=o("bigbird_pegasus"),WBo=o(" \u2014 "),WV=a("a"),QBo=o("BigBirdPegasusForCausalLM"),UBo=o(" (BigBird-Pegasus model)"),HBo=l(),S4=a("li"),i_e=a("strong"),JBo=o("blenderbot"),YBo=o(" \u2014 "),QV=a("a"),KBo=o("BlenderbotForCausalLM"),ZBo=o(" (Blenderbot model)"),eIo=l(),R4=a("li"),d_e=a("strong"),oIo=o("blenderbot-small"),rIo=o(" \u2014 "),UV=a("a"),tIo=o("BlenderbotSmallForCausalLM"),aIo=o(" (BlenderbotSmall model)"),nIo=l(),P4=a("li"),c_e=a("strong"),sIo=o("bloom"),lIo=o(" \u2014 "),HV=a("a"),iIo=o("BloomForCausalLM"),dIo=o(" (BLOOM model)"),cIo=l(),B4=a("li"),f_e=a("strong"),fIo=o("camembert"),mIo=o(" \u2014 "),JV=a("a"),gIo=o("CamembertForCausalLM"),hIo=o(" (CamemBERT model)"),pIo=l(),I4=a("li"),m_e=a("strong"),_Io=o("codegen"),uIo=o(" \u2014 "),YV=a("a"),bIo=o("CodeGenForCausalLM"),vIo=o(" (CodeGen model)"),FIo=l(),N4=a("li"),g_e=a("strong"),TIo=o("ctrl"),MIo=o(" \u2014 "),KV=a("a"),EIo=o("CTRLLMHeadModel"),CIo=o(" (CTRL model)"),wIo=l(),q4=a("li"),h_e=a("strong"),AIo=o("data2vec-text"),LIo=o(" \u2014 "),ZV=a("a"),yIo=o("Data2VecTextForCausalLM"),xIo=o(" (Data2VecText model)"),$Io=l(),j4=a("li"),p_e=a("strong"),kIo=o("electra"),SIo=o(" \u2014 "),eX=a("a"),RIo=o("ElectraForCausalLM"),PIo=o(" (ELECTRA model)"),BIo=l(),D4=a("li"),__e=a("strong"),IIo=o("gpt2"),NIo=o(" \u2014 "),oX=a("a"),qIo=o("GPT2LMHeadModel"),jIo=o(" (OpenAI GPT-2 model)"),DIo=l(),G4=a("li"),u_e=a("strong"),GIo=o("gpt_neo"),OIo=o(" \u2014 "),rX=a("a"),VIo=o("GPTNeoForCausalLM"),XIo=o(" (GPT Neo model)"),zIo=l(),O4=a("li"),b_e=a("strong"),WIo=o("gpt_neox"),QIo=o(" \u2014 "),tX=a("a"),UIo=o("GPTNeoXForCausalLM"),HIo=o(" (GPT NeoX model)"),JIo=l(),V4=a("li"),v_e=a("strong"),YIo=o("gptj"),KIo=o(" \u2014 "),aX=a("a"),ZIo=o("GPTJForCausalLM"),eNo=o(" (GPT-J model)"),oNo=l(),X4=a("li"),F_e=a("strong"),rNo=o("marian"),tNo=o(" \u2014 "),nX=a("a"),aNo=o("MarianForCausalLM"),nNo=o(" (Marian model)"),sNo=l(),z4=a("li"),T_e=a("strong"),lNo=o("mbart"),iNo=o(" \u2014 "),sX=a("a"),dNo=o("MBartForCausalLM"),cNo=o(" (mBART model)"),fNo=l(),W4=a("li"),M_e=a("strong"),mNo=o("megatron-bert"),gNo=o(" \u2014 "),lX=a("a"),hNo=o("MegatronBertForCausalLM"),pNo=o(" (Megatron-BERT model)"),_No=l(),Q4=a("li"),E_e=a("strong"),uNo=o("mvp"),bNo=o(" \u2014 "),iX=a("a"),vNo=o("MvpForCausalLM"),FNo=o(" (MVP model)"),TNo=l(),U4=a("li"),C_e=a("strong"),MNo=o("openai-gpt"),ENo=o(" \u2014 "),dX=a("a"),CNo=o("OpenAIGPTLMHeadModel"),wNo=o(" (OpenAI GPT model)"),ANo=l(),H4=a("li"),w_e=a("strong"),LNo=o("opt"),yNo=o(" \u2014 "),cX=a("a"),xNo=o("OPTForCausalLM"),$No=o(" (OPT model)"),kNo=l(),J4=a("li"),A_e=a("strong"),SNo=o("pegasus"),RNo=o(" \u2014 "),fX=a("a"),PNo=o("PegasusForCausalLM"),BNo=o(" (Pegasus model)"),INo=l(),Y4=a("li"),L_e=a("strong"),NNo=o("plbart"),qNo=o(" \u2014 "),mX=a("a"),jNo=o("PLBartForCausalLM"),DNo=o(" (PLBart model)"),GNo=l(),K4=a("li"),y_e=a("strong"),ONo=o("prophetnet"),VNo=o(" \u2014 "),gX=a("a"),XNo=o("ProphetNetForCausalLM"),zNo=o(" (ProphetNet model)"),WNo=l(),Z4=a("li"),x_e=a("strong"),QNo=o("qdqbert"),UNo=o(" \u2014 "),hX=a("a"),HNo=o("QDQBertLMHeadModel"),JNo=o(" (QDQBert model)"),YNo=l(),e2=a("li"),$_e=a("strong"),KNo=o("reformer"),ZNo=o(" \u2014 "),pX=a("a"),eqo=o("ReformerModelWithLMHead"),oqo=o(" (Reformer model)"),rqo=l(),o2=a("li"),k_e=a("strong"),tqo=o("rembert"),aqo=o(" \u2014 "),_X=a("a"),nqo=o("RemBertForCausalLM"),sqo=o(" (RemBERT model)"),lqo=l(),r2=a("li"),S_e=a("strong"),iqo=o("roberta"),dqo=o(" \u2014 "),uX=a("a"),cqo=o("RobertaForCausalLM"),fqo=o(" (RoBERTa model)"),mqo=l(),t2=a("li"),R_e=a("strong"),gqo=o("roformer"),hqo=o(" \u2014 "),bX=a("a"),pqo=o("RoFormerForCausalLM"),_qo=o(" (RoFormer model)"),uqo=l(),a2=a("li"),P_e=a("strong"),bqo=o("speech_to_text_2"),vqo=o(" \u2014 "),vX=a("a"),Fqo=o("Speech2Text2ForCausalLM"),Tqo=o(" (Speech2Text2 model)"),Mqo=l(),n2=a("li"),B_e=a("strong"),Eqo=o("transfo-xl"),Cqo=o(" \u2014 "),FX=a("a"),wqo=o("TransfoXLLMHeadModel"),Aqo=o(" (Transformer-XL model)"),Lqo=l(),s2=a("li"),I_e=a("strong"),yqo=o("trocr"),xqo=o(" \u2014 "),TX=a("a"),$qo=o("TrOCRForCausalLM"),kqo=o(" (TrOCR model)"),Sqo=l(),l2=a("li"),N_e=a("strong"),Rqo=o("xglm"),Pqo=o(" \u2014 "),MX=a("a"),Bqo=o("XGLMForCausalLM"),Iqo=o(" (XGLM model)"),Nqo=l(),i2=a("li"),q_e=a("strong"),qqo=o("xlm"),jqo=o(" \u2014 "),EX=a("a"),Dqo=o("XLMWithLMHeadModel"),Gqo=o(" (XLM model)"),Oqo=l(),d2=a("li"),j_e=a("strong"),Vqo=o("xlm-prophetnet"),Xqo=o(" \u2014 "),CX=a("a"),zqo=o("XLMProphetNetForCausalLM"),Wqo=o(" (XLM-ProphetNet model)"),Qqo=l(),c2=a("li"),D_e=a("strong"),Uqo=o("xlm-roberta"),Hqo=o(" \u2014 "),wX=a("a"),Jqo=o("XLMRobertaForCausalLM"),Yqo=o(" (XLM-RoBERTa model)"),Kqo=l(),f2=a("li"),G_e=a("strong"),Zqo=o("xlm-roberta-xl"),ejo=o(" \u2014 "),AX=a("a"),ojo=o("XLMRobertaXLForCausalLM"),rjo=o(" (XLM-RoBERTa-XL model)"),tjo=l(),m2=a("li"),O_e=a("strong"),ajo=o("xlnet"),njo=o(" \u2014 "),LX=a("a"),sjo=o("XLNetLMHeadModel"),ljo=o(" (XLNet model)"),ijo=l(),g2=a("p"),djo=o("The model is set in evaluation mode by default using "),V_e=a("code"),cjo=o("model.eval()"),fjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=a("code"),mjo=o("model.train()"),gjo=l(),F(h2.$$.fragment),dUe=l(),fd=a("h2"),p2=a("a"),z_e=a("span"),F(o9.$$.fragment),hjo=l(),W_e=a("span"),pjo=o("AutoModelForMaskedLM"),cUe=l(),Bo=a("div"),F(r9.$$.fragment),_jo=l(),md=a("p"),ujo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yX=a("a"),bjo=o("from_pretrained()"),vjo=o(" class method or the "),xX=a("a"),Fjo=o("from_config()"),Tjo=o(` class
method.`),Mjo=l(),t9=a("p"),Ejo=o("This class cannot be instantiated directly using "),Q_e=a("code"),Cjo=o("__init__()"),wjo=o(" (throws an error)."),Ajo=l(),pt=a("div"),F(a9.$$.fragment),Ljo=l(),U_e=a("p"),yjo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xjo=l(),gd=a("p"),$jo=o(`Note:
Loading a model from its configuration file does `),H_e=a("strong"),kjo=o("not"),Sjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),Rjo=o("from_pretrained()"),Pjo=o(" to load the model weights."),Bjo=l(),F(_2.$$.fragment),Ijo=l(),eo=a("div"),F(n9.$$.fragment),Njo=l(),J_e=a("p"),qjo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jjo=l(),Wa=a("p"),Djo=o("The model class to instantiate is selected based on the "),Y_e=a("code"),Gjo=o("model_type"),Ojo=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),Vjo=o("pretrained_model_name_or_path"),Xjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),zjo=o("pretrained_model_name_or_path"),Wjo=o(":"),Qjo=l(),U=a("ul"),u2=a("li"),eue=a("strong"),Ujo=o("albert"),Hjo=o(" \u2014 "),kX=a("a"),Jjo=o("AlbertForMaskedLM"),Yjo=o(" (ALBERT model)"),Kjo=l(),b2=a("li"),oue=a("strong"),Zjo=o("bart"),eDo=o(" \u2014 "),SX=a("a"),oDo=o("BartForConditionalGeneration"),rDo=o(" (BART model)"),tDo=l(),v2=a("li"),rue=a("strong"),aDo=o("bert"),nDo=o(" \u2014 "),RX=a("a"),sDo=o("BertForMaskedLM"),lDo=o(" (BERT model)"),iDo=l(),F2=a("li"),tue=a("strong"),dDo=o("big_bird"),cDo=o(" \u2014 "),PX=a("a"),fDo=o("BigBirdForMaskedLM"),mDo=o(" (BigBird model)"),gDo=l(),T2=a("li"),aue=a("strong"),hDo=o("camembert"),pDo=o(" \u2014 "),BX=a("a"),_Do=o("CamembertForMaskedLM"),uDo=o(" (CamemBERT model)"),bDo=l(),M2=a("li"),nue=a("strong"),vDo=o("convbert"),FDo=o(" \u2014 "),IX=a("a"),TDo=o("ConvBertForMaskedLM"),MDo=o(" (ConvBERT model)"),EDo=l(),E2=a("li"),sue=a("strong"),CDo=o("data2vec-text"),wDo=o(" \u2014 "),NX=a("a"),ADo=o("Data2VecTextForMaskedLM"),LDo=o(" (Data2VecText model)"),yDo=l(),C2=a("li"),lue=a("strong"),xDo=o("deberta"),$Do=o(" \u2014 "),qX=a("a"),kDo=o("DebertaForMaskedLM"),SDo=o(" (DeBERTa model)"),RDo=l(),w2=a("li"),iue=a("strong"),PDo=o("deberta-v2"),BDo=o(" \u2014 "),jX=a("a"),IDo=o("DebertaV2ForMaskedLM"),NDo=o(" (DeBERTa-v2 model)"),qDo=l(),A2=a("li"),due=a("strong"),jDo=o("distilbert"),DDo=o(" \u2014 "),DX=a("a"),GDo=o("DistilBertForMaskedLM"),ODo=o(" (DistilBERT model)"),VDo=l(),L2=a("li"),cue=a("strong"),XDo=o("electra"),zDo=o(" \u2014 "),GX=a("a"),WDo=o("ElectraForMaskedLM"),QDo=o(" (ELECTRA model)"),UDo=l(),y2=a("li"),fue=a("strong"),HDo=o("flaubert"),JDo=o(" \u2014 "),OX=a("a"),YDo=o("FlaubertWithLMHeadModel"),KDo=o(" (FlauBERT model)"),ZDo=l(),x2=a("li"),mue=a("strong"),eGo=o("fnet"),oGo=o(" \u2014 "),VX=a("a"),rGo=o("FNetForMaskedLM"),tGo=o(" (FNet model)"),aGo=l(),$2=a("li"),gue=a("strong"),nGo=o("funnel"),sGo=o(" \u2014 "),XX=a("a"),lGo=o("FunnelForMaskedLM"),iGo=o(" (Funnel Transformer model)"),dGo=l(),k2=a("li"),hue=a("strong"),cGo=o("ibert"),fGo=o(" \u2014 "),zX=a("a"),mGo=o("IBertForMaskedLM"),gGo=o(" (I-BERT model)"),hGo=l(),S2=a("li"),pue=a("strong"),pGo=o("layoutlm"),_Go=o(" \u2014 "),WX=a("a"),uGo=o("LayoutLMForMaskedLM"),bGo=o(" (LayoutLM model)"),vGo=l(),R2=a("li"),_ue=a("strong"),FGo=o("longformer"),TGo=o(" \u2014 "),QX=a("a"),MGo=o("LongformerForMaskedLM"),EGo=o(" (Longformer model)"),CGo=l(),P2=a("li"),uue=a("strong"),wGo=o("luke"),AGo=o(" \u2014 "),UX=a("a"),LGo=o("LukeForMaskedLM"),yGo=o(" (LUKE model)"),xGo=l(),B2=a("li"),bue=a("strong"),$Go=o("mbart"),kGo=o(" \u2014 "),HX=a("a"),SGo=o("MBartForConditionalGeneration"),RGo=o(" (mBART model)"),PGo=l(),I2=a("li"),vue=a("strong"),BGo=o("megatron-bert"),IGo=o(" \u2014 "),JX=a("a"),NGo=o("MegatronBertForMaskedLM"),qGo=o(" (Megatron-BERT model)"),jGo=l(),N2=a("li"),Fue=a("strong"),DGo=o("mobilebert"),GGo=o(" \u2014 "),YX=a("a"),OGo=o("MobileBertForMaskedLM"),VGo=o(" (MobileBERT model)"),XGo=l(),q2=a("li"),Tue=a("strong"),zGo=o("mpnet"),WGo=o(" \u2014 "),KX=a("a"),QGo=o("MPNetForMaskedLM"),UGo=o(" (MPNet model)"),HGo=l(),j2=a("li"),Mue=a("strong"),JGo=o("mvp"),YGo=o(" \u2014 "),ZX=a("a"),KGo=o("MvpForConditionalGeneration"),ZGo=o(" (MVP model)"),eOo=l(),D2=a("li"),Eue=a("strong"),oOo=o("nezha"),rOo=o(" \u2014 "),ez=a("a"),tOo=o("NezhaForMaskedLM"),aOo=o(" (Nezha model)"),nOo=l(),G2=a("li"),Cue=a("strong"),sOo=o("nystromformer"),lOo=o(" \u2014 "),oz=a("a"),iOo=o("NystromformerForMaskedLM"),dOo=o(" (Nystr\xF6mformer model)"),cOo=l(),O2=a("li"),wue=a("strong"),fOo=o("perceiver"),mOo=o(" \u2014 "),rz=a("a"),gOo=o("PerceiverForMaskedLM"),hOo=o(" (Perceiver model)"),pOo=l(),V2=a("li"),Aue=a("strong"),_Oo=o("qdqbert"),uOo=o(" \u2014 "),tz=a("a"),bOo=o("QDQBertForMaskedLM"),vOo=o(" (QDQBert model)"),FOo=l(),X2=a("li"),Lue=a("strong"),TOo=o("reformer"),MOo=o(" \u2014 "),az=a("a"),EOo=o("ReformerForMaskedLM"),COo=o(" (Reformer model)"),wOo=l(),z2=a("li"),yue=a("strong"),AOo=o("rembert"),LOo=o(" \u2014 "),nz=a("a"),yOo=o("RemBertForMaskedLM"),xOo=o(" (RemBERT model)"),$Oo=l(),W2=a("li"),xue=a("strong"),kOo=o("roberta"),SOo=o(" \u2014 "),sz=a("a"),ROo=o("RobertaForMaskedLM"),POo=o(" (RoBERTa model)"),BOo=l(),Q2=a("li"),$ue=a("strong"),IOo=o("roformer"),NOo=o(" \u2014 "),lz=a("a"),qOo=o("RoFormerForMaskedLM"),jOo=o(" (RoFormer model)"),DOo=l(),U2=a("li"),kue=a("strong"),GOo=o("squeezebert"),OOo=o(" \u2014 "),iz=a("a"),VOo=o("SqueezeBertForMaskedLM"),XOo=o(" (SqueezeBERT model)"),zOo=l(),H2=a("li"),Sue=a("strong"),WOo=o("tapas"),QOo=o(" \u2014 "),dz=a("a"),UOo=o("TapasForMaskedLM"),HOo=o(" (TAPAS model)"),JOo=l(),J2=a("li"),Rue=a("strong"),YOo=o("wav2vec2"),KOo=o(" \u2014 "),Pue=a("code"),ZOo=o("Wav2Vec2ForMaskedLM"),eVo=o(" (Wav2Vec2 model)"),oVo=l(),Y2=a("li"),Bue=a("strong"),rVo=o("xlm"),tVo=o(" \u2014 "),cz=a("a"),aVo=o("XLMWithLMHeadModel"),nVo=o(" (XLM model)"),sVo=l(),K2=a("li"),Iue=a("strong"),lVo=o("xlm-roberta"),iVo=o(" \u2014 "),fz=a("a"),dVo=o("XLMRobertaForMaskedLM"),cVo=o(" (XLM-RoBERTa model)"),fVo=l(),Z2=a("li"),Nue=a("strong"),mVo=o("xlm-roberta-xl"),gVo=o(" \u2014 "),mz=a("a"),hVo=o("XLMRobertaXLForMaskedLM"),pVo=o(" (XLM-RoBERTa-XL model)"),_Vo=l(),eb=a("li"),que=a("strong"),uVo=o("yoso"),bVo=o(" \u2014 "),gz=a("a"),vVo=o("YosoForMaskedLM"),FVo=o(" (YOSO model)"),TVo=l(),ob=a("p"),MVo=o("The model is set in evaluation mode by default using "),jue=a("code"),EVo=o("model.eval()"),CVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=a("code"),wVo=o("model.train()"),AVo=l(),F(rb.$$.fragment),fUe=l(),hd=a("h2"),tb=a("a"),Gue=a("span"),F(s9.$$.fragment),LVo=l(),Oue=a("span"),yVo=o("AutoModelForSeq2SeqLM"),mUe=l(),Io=a("div"),F(l9.$$.fragment),xVo=l(),pd=a("p"),$Vo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hz=a("a"),kVo=o("from_pretrained()"),SVo=o(" class method or the "),pz=a("a"),RVo=o("from_config()"),PVo=o(` class
method.`),BVo=l(),i9=a("p"),IVo=o("This class cannot be instantiated directly using "),Vue=a("code"),NVo=o("__init__()"),qVo=o(" (throws an error)."),jVo=l(),_t=a("div"),F(d9.$$.fragment),DVo=l(),Xue=a("p"),GVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),OVo=l(),_d=a("p"),VVo=o(`Note:
Loading a model from its configuration file does `),zue=a("strong"),XVo=o("not"),zVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),WVo=o("from_pretrained()"),QVo=o(" to load the model weights."),UVo=l(),F(ab.$$.fragment),HVo=l(),oo=a("div"),F(c9.$$.fragment),JVo=l(),Wue=a("p"),YVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KVo=l(),Qa=a("p"),ZVo=o("The model class to instantiate is selected based on the "),Que=a("code"),eXo=o("model_type"),oXo=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),rXo=o("pretrained_model_name_or_path"),tXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),aXo=o("pretrained_model_name_or_path"),nXo=o(":"),sXo=l(),me=a("ul"),nb=a("li"),Jue=a("strong"),lXo=o("bart"),iXo=o(" \u2014 "),uz=a("a"),dXo=o("BartForConditionalGeneration"),cXo=o(" (BART model)"),fXo=l(),sb=a("li"),Yue=a("strong"),mXo=o("bigbird_pegasus"),gXo=o(" \u2014 "),bz=a("a"),hXo=o("BigBirdPegasusForConditionalGeneration"),pXo=o(" (BigBird-Pegasus model)"),_Xo=l(),lb=a("li"),Kue=a("strong"),uXo=o("blenderbot"),bXo=o(" \u2014 "),vz=a("a"),vXo=o("BlenderbotForConditionalGeneration"),FXo=o(" (Blenderbot model)"),TXo=l(),ib=a("li"),Zue=a("strong"),MXo=o("blenderbot-small"),EXo=o(" \u2014 "),Fz=a("a"),CXo=o("BlenderbotSmallForConditionalGeneration"),wXo=o(" (BlenderbotSmall model)"),AXo=l(),db=a("li"),e1e=a("strong"),LXo=o("encoder-decoder"),yXo=o(" \u2014 "),Tz=a("a"),xXo=o("EncoderDecoderModel"),$Xo=o(" (Encoder decoder model)"),kXo=l(),cb=a("li"),o1e=a("strong"),SXo=o("fsmt"),RXo=o(" \u2014 "),Mz=a("a"),PXo=o("FSMTForConditionalGeneration"),BXo=o(" (FairSeq Machine-Translation model)"),IXo=l(),fb=a("li"),r1e=a("strong"),NXo=o("led"),qXo=o(" \u2014 "),Ez=a("a"),jXo=o("LEDForConditionalGeneration"),DXo=o(" (LED model)"),GXo=l(),mb=a("li"),t1e=a("strong"),OXo=o("longt5"),VXo=o(" \u2014 "),Cz=a("a"),XXo=o("LongT5ForConditionalGeneration"),zXo=o(" (LongT5 model)"),WXo=l(),gb=a("li"),a1e=a("strong"),QXo=o("m2m_100"),UXo=o(" \u2014 "),wz=a("a"),HXo=o("M2M100ForConditionalGeneration"),JXo=o(" (M2M100 model)"),YXo=l(),hb=a("li"),n1e=a("strong"),KXo=o("marian"),ZXo=o(" \u2014 "),Az=a("a"),ezo=o("MarianMTModel"),ozo=o(" (Marian model)"),rzo=l(),pb=a("li"),s1e=a("strong"),tzo=o("mbart"),azo=o(" \u2014 "),Lz=a("a"),nzo=o("MBartForConditionalGeneration"),szo=o(" (mBART model)"),lzo=l(),_b=a("li"),l1e=a("strong"),izo=o("mt5"),dzo=o(" \u2014 "),yz=a("a"),czo=o("MT5ForConditionalGeneration"),fzo=o(" (MT5 model)"),mzo=l(),ub=a("li"),i1e=a("strong"),gzo=o("mvp"),hzo=o(" \u2014 "),xz=a("a"),pzo=o("MvpForConditionalGeneration"),_zo=o(" (MVP model)"),uzo=l(),bb=a("li"),d1e=a("strong"),bzo=o("nllb"),vzo=o(" \u2014 "),$z=a("a"),Fzo=o("M2M100ForConditionalGeneration"),Tzo=o(" (NLLB model)"),Mzo=l(),vb=a("li"),c1e=a("strong"),Ezo=o("pegasus"),Czo=o(" \u2014 "),kz=a("a"),wzo=o("PegasusForConditionalGeneration"),Azo=o(" (Pegasus model)"),Lzo=l(),Fb=a("li"),f1e=a("strong"),yzo=o("plbart"),xzo=o(" \u2014 "),Sz=a("a"),$zo=o("PLBartForConditionalGeneration"),kzo=o(" (PLBart model)"),Szo=l(),Tb=a("li"),m1e=a("strong"),Rzo=o("prophetnet"),Pzo=o(" \u2014 "),Rz=a("a"),Bzo=o("ProphetNetForConditionalGeneration"),Izo=o(" (ProphetNet model)"),Nzo=l(),Mb=a("li"),g1e=a("strong"),qzo=o("t5"),jzo=o(" \u2014 "),Pz=a("a"),Dzo=o("T5ForConditionalGeneration"),Gzo=o(" (T5 model)"),Ozo=l(),Eb=a("li"),h1e=a("strong"),Vzo=o("xlm-prophetnet"),Xzo=o(" \u2014 "),Bz=a("a"),zzo=o("XLMProphetNetForConditionalGeneration"),Wzo=o(" (XLM-ProphetNet model)"),Qzo=l(),Cb=a("p"),Uzo=o("The model is set in evaluation mode by default using "),p1e=a("code"),Hzo=o("model.eval()"),Jzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_1e=a("code"),Yzo=o("model.train()"),Kzo=l(),F(wb.$$.fragment),gUe=l(),ud=a("h2"),Ab=a("a"),u1e=a("span"),F(f9.$$.fragment),Zzo=l(),b1e=a("span"),eWo=o("AutoModelForSequenceClassification"),hUe=l(),No=a("div"),F(m9.$$.fragment),oWo=l(),bd=a("p"),rWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Iz=a("a"),tWo=o("from_pretrained()"),aWo=o(" class method or the "),Nz=a("a"),nWo=o("from_config()"),sWo=o(` class
method.`),lWo=l(),g9=a("p"),iWo=o("This class cannot be instantiated directly using "),v1e=a("code"),dWo=o("__init__()"),cWo=o(" (throws an error)."),fWo=l(),ut=a("div"),F(h9.$$.fragment),mWo=l(),F1e=a("p"),gWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hWo=l(),vd=a("p"),pWo=o(`Note:
Loading a model from its configuration file does `),T1e=a("strong"),_Wo=o("not"),uWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),bWo=o("from_pretrained()"),vWo=o(" to load the model weights."),FWo=l(),F(Lb.$$.fragment),TWo=l(),ro=a("div"),F(p9.$$.fragment),MWo=l(),M1e=a("p"),EWo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CWo=l(),Ua=a("p"),wWo=o("The model class to instantiate is selected based on the "),E1e=a("code"),AWo=o("model_type"),LWo=o(` property of the config object (either
passed as an argument or loaded from `),C1e=a("code"),yWo=o("pretrained_model_name_or_path"),xWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=a("code"),$Wo=o("pretrained_model_name_or_path"),kWo=o(":"),SWo=l(),N=a("ul"),yb=a("li"),A1e=a("strong"),RWo=o("albert"),PWo=o(" \u2014 "),jz=a("a"),BWo=o("AlbertForSequenceClassification"),IWo=o(" (ALBERT model)"),NWo=l(),xb=a("li"),L1e=a("strong"),qWo=o("bart"),jWo=o(" \u2014 "),Dz=a("a"),DWo=o("BartForSequenceClassification"),GWo=o(" (BART model)"),OWo=l(),$b=a("li"),y1e=a("strong"),VWo=o("bert"),XWo=o(" \u2014 "),Gz=a("a"),zWo=o("BertForSequenceClassification"),WWo=o(" (BERT model)"),QWo=l(),kb=a("li"),x1e=a("strong"),UWo=o("big_bird"),HWo=o(" \u2014 "),Oz=a("a"),JWo=o("BigBirdForSequenceClassification"),YWo=o(" (BigBird model)"),KWo=l(),Sb=a("li"),$1e=a("strong"),ZWo=o("bigbird_pegasus"),eQo=o(" \u2014 "),Vz=a("a"),oQo=o("BigBirdPegasusForSequenceClassification"),rQo=o(" (BigBird-Pegasus model)"),tQo=l(),Rb=a("li"),k1e=a("strong"),aQo=o("bloom"),nQo=o(" \u2014 "),Xz=a("a"),sQo=o("BloomForSequenceClassification"),lQo=o(" (BLOOM model)"),iQo=l(),Pb=a("li"),S1e=a("strong"),dQo=o("camembert"),cQo=o(" \u2014 "),zz=a("a"),fQo=o("CamembertForSequenceClassification"),mQo=o(" (CamemBERT model)"),gQo=l(),Bb=a("li"),R1e=a("strong"),hQo=o("canine"),pQo=o(" \u2014 "),Wz=a("a"),_Qo=o("CanineForSequenceClassification"),uQo=o(" (CANINE model)"),bQo=l(),Ib=a("li"),P1e=a("strong"),vQo=o("convbert"),FQo=o(" \u2014 "),Qz=a("a"),TQo=o("ConvBertForSequenceClassification"),MQo=o(" (ConvBERT model)"),EQo=l(),Nb=a("li"),B1e=a("strong"),CQo=o("ctrl"),wQo=o(" \u2014 "),Uz=a("a"),AQo=o("CTRLForSequenceClassification"),LQo=o(" (CTRL model)"),yQo=l(),qb=a("li"),I1e=a("strong"),xQo=o("data2vec-text"),$Qo=o(" \u2014 "),Hz=a("a"),kQo=o("Data2VecTextForSequenceClassification"),SQo=o(" (Data2VecText model)"),RQo=l(),jb=a("li"),N1e=a("strong"),PQo=o("deberta"),BQo=o(" \u2014 "),Jz=a("a"),IQo=o("DebertaForSequenceClassification"),NQo=o(" (DeBERTa model)"),qQo=l(),Db=a("li"),q1e=a("strong"),jQo=o("deberta-v2"),DQo=o(" \u2014 "),Yz=a("a"),GQo=o("DebertaV2ForSequenceClassification"),OQo=o(" (DeBERTa-v2 model)"),VQo=l(),Gb=a("li"),j1e=a("strong"),XQo=o("distilbert"),zQo=o(" \u2014 "),Kz=a("a"),WQo=o("DistilBertForSequenceClassification"),QQo=o(" (DistilBERT model)"),UQo=l(),Ob=a("li"),D1e=a("strong"),HQo=o("electra"),JQo=o(" \u2014 "),Zz=a("a"),YQo=o("ElectraForSequenceClassification"),KQo=o(" (ELECTRA model)"),ZQo=l(),Vb=a("li"),G1e=a("strong"),eUo=o("flaubert"),oUo=o(" \u2014 "),eW=a("a"),rUo=o("FlaubertForSequenceClassification"),tUo=o(" (FlauBERT model)"),aUo=l(),Xb=a("li"),O1e=a("strong"),nUo=o("fnet"),sUo=o(" \u2014 "),oW=a("a"),lUo=o("FNetForSequenceClassification"),iUo=o(" (FNet model)"),dUo=l(),zb=a("li"),V1e=a("strong"),cUo=o("funnel"),fUo=o(" \u2014 "),rW=a("a"),mUo=o("FunnelForSequenceClassification"),gUo=o(" (Funnel Transformer model)"),hUo=l(),Wb=a("li"),X1e=a("strong"),pUo=o("gpt2"),_Uo=o(" \u2014 "),tW=a("a"),uUo=o("GPT2ForSequenceClassification"),bUo=o(" (OpenAI GPT-2 model)"),vUo=l(),Qb=a("li"),z1e=a("strong"),FUo=o("gpt_neo"),TUo=o(" \u2014 "),aW=a("a"),MUo=o("GPTNeoForSequenceClassification"),EUo=o(" (GPT Neo model)"),CUo=l(),Ub=a("li"),W1e=a("strong"),wUo=o("gptj"),AUo=o(" \u2014 "),nW=a("a"),LUo=o("GPTJForSequenceClassification"),yUo=o(" (GPT-J model)"),xUo=l(),Hb=a("li"),Q1e=a("strong"),$Uo=o("ibert"),kUo=o(" \u2014 "),sW=a("a"),SUo=o("IBertForSequenceClassification"),RUo=o(" (I-BERT model)"),PUo=l(),Jb=a("li"),U1e=a("strong"),BUo=o("layoutlm"),IUo=o(" \u2014 "),lW=a("a"),NUo=o("LayoutLMForSequenceClassification"),qUo=o(" (LayoutLM model)"),jUo=l(),Yb=a("li"),H1e=a("strong"),DUo=o("layoutlmv2"),GUo=o(" \u2014 "),iW=a("a"),OUo=o("LayoutLMv2ForSequenceClassification"),VUo=o(" (LayoutLMv2 model)"),XUo=l(),Kb=a("li"),J1e=a("strong"),zUo=o("layoutlmv3"),WUo=o(" \u2014 "),dW=a("a"),QUo=o("LayoutLMv3ForSequenceClassification"),UUo=o(" (LayoutLMv3 model)"),HUo=l(),Zb=a("li"),Y1e=a("strong"),JUo=o("led"),YUo=o(" \u2014 "),cW=a("a"),KUo=o("LEDForSequenceClassification"),ZUo=o(" (LED model)"),eHo=l(),ev=a("li"),K1e=a("strong"),oHo=o("longformer"),rHo=o(" \u2014 "),fW=a("a"),tHo=o("LongformerForSequenceClassification"),aHo=o(" (Longformer model)"),nHo=l(),ov=a("li"),Z1e=a("strong"),sHo=o("luke"),lHo=o(" \u2014 "),mW=a("a"),iHo=o("LukeForSequenceClassification"),dHo=o(" (LUKE model)"),cHo=l(),rv=a("li"),e4e=a("strong"),fHo=o("mbart"),mHo=o(" \u2014 "),gW=a("a"),gHo=o("MBartForSequenceClassification"),hHo=o(" (mBART model)"),pHo=l(),tv=a("li"),o4e=a("strong"),_Ho=o("megatron-bert"),uHo=o(" \u2014 "),hW=a("a"),bHo=o("MegatronBertForSequenceClassification"),vHo=o(" (Megatron-BERT model)"),FHo=l(),av=a("li"),r4e=a("strong"),THo=o("mobilebert"),MHo=o(" \u2014 "),pW=a("a"),EHo=o("MobileBertForSequenceClassification"),CHo=o(" (MobileBERT model)"),wHo=l(),nv=a("li"),t4e=a("strong"),AHo=o("mpnet"),LHo=o(" \u2014 "),_W=a("a"),yHo=o("MPNetForSequenceClassification"),xHo=o(" (MPNet model)"),$Ho=l(),sv=a("li"),a4e=a("strong"),kHo=o("mvp"),SHo=o(" \u2014 "),uW=a("a"),RHo=o("MvpForSequenceClassification"),PHo=o(" (MVP model)"),BHo=l(),lv=a("li"),n4e=a("strong"),IHo=o("nezha"),NHo=o(" \u2014 "),bW=a("a"),qHo=o("NezhaForSequenceClassification"),jHo=o(" (Nezha model)"),DHo=l(),iv=a("li"),s4e=a("strong"),GHo=o("nystromformer"),OHo=o(" \u2014 "),vW=a("a"),VHo=o("NystromformerForSequenceClassification"),XHo=o(" (Nystr\xF6mformer model)"),zHo=l(),dv=a("li"),l4e=a("strong"),WHo=o("openai-gpt"),QHo=o(" \u2014 "),FW=a("a"),UHo=o("OpenAIGPTForSequenceClassification"),HHo=o(" (OpenAI GPT model)"),JHo=l(),cv=a("li"),i4e=a("strong"),YHo=o("opt"),KHo=o(" \u2014 "),TW=a("a"),ZHo=o("OPTForSequenceClassification"),eJo=o(" (OPT model)"),oJo=l(),fv=a("li"),d4e=a("strong"),rJo=o("perceiver"),tJo=o(" \u2014 "),MW=a("a"),aJo=o("PerceiverForSequenceClassification"),nJo=o(" (Perceiver model)"),sJo=l(),mv=a("li"),c4e=a("strong"),lJo=o("plbart"),iJo=o(" \u2014 "),EW=a("a"),dJo=o("PLBartForSequenceClassification"),cJo=o(" (PLBart model)"),fJo=l(),gv=a("li"),f4e=a("strong"),mJo=o("qdqbert"),gJo=o(" \u2014 "),CW=a("a"),hJo=o("QDQBertForSequenceClassification"),pJo=o(" (QDQBert model)"),_Jo=l(),hv=a("li"),m4e=a("strong"),uJo=o("reformer"),bJo=o(" \u2014 "),wW=a("a"),vJo=o("ReformerForSequenceClassification"),FJo=o(" (Reformer model)"),TJo=l(),pv=a("li"),g4e=a("strong"),MJo=o("rembert"),EJo=o(" \u2014 "),AW=a("a"),CJo=o("RemBertForSequenceClassification"),wJo=o(" (RemBERT model)"),AJo=l(),_v=a("li"),h4e=a("strong"),LJo=o("roberta"),yJo=o(" \u2014 "),LW=a("a"),xJo=o("RobertaForSequenceClassification"),$Jo=o(" (RoBERTa model)"),kJo=l(),uv=a("li"),p4e=a("strong"),SJo=o("roformer"),RJo=o(" \u2014 "),yW=a("a"),PJo=o("RoFormerForSequenceClassification"),BJo=o(" (RoFormer model)"),IJo=l(),bv=a("li"),_4e=a("strong"),NJo=o("squeezebert"),qJo=o(" \u2014 "),xW=a("a"),jJo=o("SqueezeBertForSequenceClassification"),DJo=o(" (SqueezeBERT model)"),GJo=l(),vv=a("li"),u4e=a("strong"),OJo=o("tapas"),VJo=o(" \u2014 "),$W=a("a"),XJo=o("TapasForSequenceClassification"),zJo=o(" (TAPAS model)"),WJo=l(),Fv=a("li"),b4e=a("strong"),QJo=o("transfo-xl"),UJo=o(" \u2014 "),kW=a("a"),HJo=o("TransfoXLForSequenceClassification"),JJo=o(" (Transformer-XL model)"),YJo=l(),Tv=a("li"),v4e=a("strong"),KJo=o("xlm"),ZJo=o(" \u2014 "),SW=a("a"),eYo=o("XLMForSequenceClassification"),oYo=o(" (XLM model)"),rYo=l(),Mv=a("li"),F4e=a("strong"),tYo=o("xlm-roberta"),aYo=o(" \u2014 "),RW=a("a"),nYo=o("XLMRobertaForSequenceClassification"),sYo=o(" (XLM-RoBERTa model)"),lYo=l(),Ev=a("li"),T4e=a("strong"),iYo=o("xlm-roberta-xl"),dYo=o(" \u2014 "),PW=a("a"),cYo=o("XLMRobertaXLForSequenceClassification"),fYo=o(" (XLM-RoBERTa-XL model)"),mYo=l(),Cv=a("li"),M4e=a("strong"),gYo=o("xlnet"),hYo=o(" \u2014 "),BW=a("a"),pYo=o("XLNetForSequenceClassification"),_Yo=o(" (XLNet model)"),uYo=l(),wv=a("li"),E4e=a("strong"),bYo=o("yoso"),vYo=o(" \u2014 "),IW=a("a"),FYo=o("YosoForSequenceClassification"),TYo=o(" (YOSO model)"),MYo=l(),Av=a("p"),EYo=o("The model is set in evaluation mode by default using "),C4e=a("code"),CYo=o("model.eval()"),wYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w4e=a("code"),AYo=o("model.train()"),LYo=l(),F(Lv.$$.fragment),pUe=l(),Fd=a("h2"),yv=a("a"),A4e=a("span"),F(_9.$$.fragment),yYo=l(),L4e=a("span"),xYo=o("AutoModelForMultipleChoice"),_Ue=l(),qo=a("div"),F(u9.$$.fragment),$Yo=l(),Td=a("p"),kYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NW=a("a"),SYo=o("from_pretrained()"),RYo=o(" class method or the "),qW=a("a"),PYo=o("from_config()"),BYo=o(` class
method.`),IYo=l(),b9=a("p"),NYo=o("This class cannot be instantiated directly using "),y4e=a("code"),qYo=o("__init__()"),jYo=o(" (throws an error)."),DYo=l(),bt=a("div"),F(v9.$$.fragment),GYo=l(),x4e=a("p"),OYo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),VYo=l(),Md=a("p"),XYo=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),zYo=o("not"),WYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),QYo=o("from_pretrained()"),UYo=o(" to load the model weights."),HYo=l(),F(xv.$$.fragment),JYo=l(),to=a("div"),F(F9.$$.fragment),YYo=l(),k4e=a("p"),KYo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZYo=l(),Ha=a("p"),eKo=o("The model class to instantiate is selected based on the "),S4e=a("code"),oKo=o("model_type"),rKo=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),tKo=o("pretrained_model_name_or_path"),aKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),nKo=o("pretrained_model_name_or_path"),sKo=o(":"),lKo=l(),Z=a("ul"),$v=a("li"),B4e=a("strong"),iKo=o("albert"),dKo=o(" \u2014 "),DW=a("a"),cKo=o("AlbertForMultipleChoice"),fKo=o(" (ALBERT model)"),mKo=l(),kv=a("li"),I4e=a("strong"),gKo=o("bert"),hKo=o(" \u2014 "),GW=a("a"),pKo=o("BertForMultipleChoice"),_Ko=o(" (BERT model)"),uKo=l(),Sv=a("li"),N4e=a("strong"),bKo=o("big_bird"),vKo=o(" \u2014 "),OW=a("a"),FKo=o("BigBirdForMultipleChoice"),TKo=o(" (BigBird model)"),MKo=l(),Rv=a("li"),q4e=a("strong"),EKo=o("camembert"),CKo=o(" \u2014 "),VW=a("a"),wKo=o("CamembertForMultipleChoice"),AKo=o(" (CamemBERT model)"),LKo=l(),Pv=a("li"),j4e=a("strong"),yKo=o("canine"),xKo=o(" \u2014 "),XW=a("a"),$Ko=o("CanineForMultipleChoice"),kKo=o(" (CANINE model)"),SKo=l(),Bv=a("li"),D4e=a("strong"),RKo=o("convbert"),PKo=o(" \u2014 "),zW=a("a"),BKo=o("ConvBertForMultipleChoice"),IKo=o(" (ConvBERT model)"),NKo=l(),Iv=a("li"),G4e=a("strong"),qKo=o("data2vec-text"),jKo=o(" \u2014 "),WW=a("a"),DKo=o("Data2VecTextForMultipleChoice"),GKo=o(" (Data2VecText model)"),OKo=l(),Nv=a("li"),O4e=a("strong"),VKo=o("deberta-v2"),XKo=o(" \u2014 "),QW=a("a"),zKo=o("DebertaV2ForMultipleChoice"),WKo=o(" (DeBERTa-v2 model)"),QKo=l(),qv=a("li"),V4e=a("strong"),UKo=o("distilbert"),HKo=o(" \u2014 "),UW=a("a"),JKo=o("DistilBertForMultipleChoice"),YKo=o(" (DistilBERT model)"),KKo=l(),jv=a("li"),X4e=a("strong"),ZKo=o("electra"),eZo=o(" \u2014 "),HW=a("a"),oZo=o("ElectraForMultipleChoice"),rZo=o(" (ELECTRA model)"),tZo=l(),Dv=a("li"),z4e=a("strong"),aZo=o("flaubert"),nZo=o(" \u2014 "),JW=a("a"),sZo=o("FlaubertForMultipleChoice"),lZo=o(" (FlauBERT model)"),iZo=l(),Gv=a("li"),W4e=a("strong"),dZo=o("fnet"),cZo=o(" \u2014 "),YW=a("a"),fZo=o("FNetForMultipleChoice"),mZo=o(" (FNet model)"),gZo=l(),Ov=a("li"),Q4e=a("strong"),hZo=o("funnel"),pZo=o(" \u2014 "),KW=a("a"),_Zo=o("FunnelForMultipleChoice"),uZo=o(" (Funnel Transformer model)"),bZo=l(),Vv=a("li"),U4e=a("strong"),vZo=o("ibert"),FZo=o(" \u2014 "),ZW=a("a"),TZo=o("IBertForMultipleChoice"),MZo=o(" (I-BERT model)"),EZo=l(),Xv=a("li"),H4e=a("strong"),CZo=o("longformer"),wZo=o(" \u2014 "),eQ=a("a"),AZo=o("LongformerForMultipleChoice"),LZo=o(" (Longformer model)"),yZo=l(),zv=a("li"),J4e=a("strong"),xZo=o("luke"),$Zo=o(" \u2014 "),oQ=a("a"),kZo=o("LukeForMultipleChoice"),SZo=o(" (LUKE model)"),RZo=l(),Wv=a("li"),Y4e=a("strong"),PZo=o("megatron-bert"),BZo=o(" \u2014 "),rQ=a("a"),IZo=o("MegatronBertForMultipleChoice"),NZo=o(" (Megatron-BERT model)"),qZo=l(),Qv=a("li"),K4e=a("strong"),jZo=o("mobilebert"),DZo=o(" \u2014 "),tQ=a("a"),GZo=o("MobileBertForMultipleChoice"),OZo=o(" (MobileBERT model)"),VZo=l(),Uv=a("li"),Z4e=a("strong"),XZo=o("mpnet"),zZo=o(" \u2014 "),aQ=a("a"),WZo=o("MPNetForMultipleChoice"),QZo=o(" (MPNet model)"),UZo=l(),Hv=a("li"),e2e=a("strong"),HZo=o("nezha"),JZo=o(" \u2014 "),nQ=a("a"),YZo=o("NezhaForMultipleChoice"),KZo=o(" (Nezha model)"),ZZo=l(),Jv=a("li"),o2e=a("strong"),eer=o("nystromformer"),oer=o(" \u2014 "),sQ=a("a"),rer=o("NystromformerForMultipleChoice"),ter=o(" (Nystr\xF6mformer model)"),aer=l(),Yv=a("li"),r2e=a("strong"),ner=o("qdqbert"),ser=o(" \u2014 "),lQ=a("a"),ler=o("QDQBertForMultipleChoice"),ier=o(" (QDQBert model)"),der=l(),Kv=a("li"),t2e=a("strong"),cer=o("rembert"),fer=o(" \u2014 "),iQ=a("a"),mer=o("RemBertForMultipleChoice"),ger=o(" (RemBERT model)"),her=l(),Zv=a("li"),a2e=a("strong"),per=o("roberta"),_er=o(" \u2014 "),dQ=a("a"),uer=o("RobertaForMultipleChoice"),ber=o(" (RoBERTa model)"),ver=l(),e5=a("li"),n2e=a("strong"),Fer=o("roformer"),Ter=o(" \u2014 "),cQ=a("a"),Mer=o("RoFormerForMultipleChoice"),Eer=o(" (RoFormer model)"),Cer=l(),o5=a("li"),s2e=a("strong"),wer=o("squeezebert"),Aer=o(" \u2014 "),fQ=a("a"),Ler=o("SqueezeBertForMultipleChoice"),yer=o(" (SqueezeBERT model)"),xer=l(),r5=a("li"),l2e=a("strong"),$er=o("xlm"),ker=o(" \u2014 "),mQ=a("a"),Ser=o("XLMForMultipleChoice"),Rer=o(" (XLM model)"),Per=l(),t5=a("li"),i2e=a("strong"),Ber=o("xlm-roberta"),Ier=o(" \u2014 "),gQ=a("a"),Ner=o("XLMRobertaForMultipleChoice"),qer=o(" (XLM-RoBERTa model)"),jer=l(),a5=a("li"),d2e=a("strong"),Der=o("xlm-roberta-xl"),Ger=o(" \u2014 "),hQ=a("a"),Oer=o("XLMRobertaXLForMultipleChoice"),Ver=o(" (XLM-RoBERTa-XL model)"),Xer=l(),n5=a("li"),c2e=a("strong"),zer=o("xlnet"),Wer=o(" \u2014 "),pQ=a("a"),Qer=o("XLNetForMultipleChoice"),Uer=o(" (XLNet model)"),Her=l(),s5=a("li"),f2e=a("strong"),Jer=o("yoso"),Yer=o(" \u2014 "),_Q=a("a"),Ker=o("YosoForMultipleChoice"),Zer=o(" (YOSO model)"),eor=l(),l5=a("p"),oor=o("The model is set in evaluation mode by default using "),m2e=a("code"),ror=o("model.eval()"),tor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=a("code"),aor=o("model.train()"),nor=l(),F(i5.$$.fragment),uUe=l(),Ed=a("h2"),d5=a("a"),h2e=a("span"),F(T9.$$.fragment),sor=l(),p2e=a("span"),lor=o("AutoModelForNextSentencePrediction"),bUe=l(),jo=a("div"),F(M9.$$.fragment),ior=l(),Cd=a("p"),dor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uQ=a("a"),cor=o("from_pretrained()"),mor=o(" class method or the "),bQ=a("a"),gor=o("from_config()"),hor=o(` class
method.`),por=l(),E9=a("p"),_or=o("This class cannot be instantiated directly using "),_2e=a("code"),uor=o("__init__()"),bor=o(" (throws an error)."),vor=l(),vt=a("div"),F(C9.$$.fragment),For=l(),u2e=a("p"),Tor=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mor=l(),wd=a("p"),Eor=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),Cor=o("not"),wor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),Aor=o("from_pretrained()"),Lor=o(" to load the model weights."),yor=l(),F(c5.$$.fragment),xor=l(),ao=a("div"),F(w9.$$.fragment),$or=l(),v2e=a("p"),kor=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Sor=l(),Ja=a("p"),Ror=o("The model class to instantiate is selected based on the "),F2e=a("code"),Por=o("model_type"),Bor=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),Ior=o("pretrained_model_name_or_path"),Nor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=a("code"),qor=o("pretrained_model_name_or_path"),jor=o(":"),Dor=l(),Do=a("ul"),f5=a("li"),E2e=a("strong"),Gor=o("bert"),Oor=o(" \u2014 "),FQ=a("a"),Vor=o("BertForNextSentencePrediction"),Xor=o(" (BERT model)"),zor=l(),m5=a("li"),C2e=a("strong"),Wor=o("fnet"),Qor=o(" \u2014 "),TQ=a("a"),Uor=o("FNetForNextSentencePrediction"),Hor=o(" (FNet model)"),Jor=l(),g5=a("li"),w2e=a("strong"),Yor=o("megatron-bert"),Kor=o(" \u2014 "),MQ=a("a"),Zor=o("MegatronBertForNextSentencePrediction"),err=o(" (Megatron-BERT model)"),orr=l(),h5=a("li"),A2e=a("strong"),rrr=o("mobilebert"),trr=o(" \u2014 "),EQ=a("a"),arr=o("MobileBertForNextSentencePrediction"),nrr=o(" (MobileBERT model)"),srr=l(),p5=a("li"),L2e=a("strong"),lrr=o("nezha"),irr=o(" \u2014 "),CQ=a("a"),drr=o("NezhaForNextSentencePrediction"),crr=o(" (Nezha model)"),frr=l(),_5=a("li"),y2e=a("strong"),mrr=o("qdqbert"),grr=o(" \u2014 "),wQ=a("a"),hrr=o("QDQBertForNextSentencePrediction"),prr=o(" (QDQBert model)"),_rr=l(),u5=a("p"),urr=o("The model is set in evaluation mode by default using "),x2e=a("code"),brr=o("model.eval()"),vrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=a("code"),Frr=o("model.train()"),Trr=l(),F(b5.$$.fragment),vUe=l(),Ad=a("h2"),v5=a("a"),k2e=a("span"),F(A9.$$.fragment),Mrr=l(),S2e=a("span"),Err=o("AutoModelForTokenClassification"),FUe=l(),Go=a("div"),F(L9.$$.fragment),Crr=l(),Ld=a("p"),wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AQ=a("a"),Arr=o("from_pretrained()"),Lrr=o(" class method or the "),LQ=a("a"),yrr=o("from_config()"),xrr=o(` class
method.`),$rr=l(),y9=a("p"),krr=o("This class cannot be instantiated directly using "),R2e=a("code"),Srr=o("__init__()"),Rrr=o(" (throws an error)."),Prr=l(),Ft=a("div"),F(x9.$$.fragment),Brr=l(),P2e=a("p"),Irr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nrr=l(),yd=a("p"),qrr=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),jrr=o("not"),Drr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),Grr=o("from_pretrained()"),Orr=o(" to load the model weights."),Vrr=l(),F(F5.$$.fragment),Xrr=l(),no=a("div"),F($9.$$.fragment),zrr=l(),I2e=a("p"),Wrr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Qrr=l(),Ya=a("p"),Urr=o("The model class to instantiate is selected based on the "),N2e=a("code"),Hrr=o("model_type"),Jrr=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),Yrr=o("pretrained_model_name_or_path"),Krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=a("code"),Zrr=o("pretrained_model_name_or_path"),etr=o(":"),otr=l(),H=a("ul"),T5=a("li"),D2e=a("strong"),rtr=o("albert"),ttr=o(" \u2014 "),xQ=a("a"),atr=o("AlbertForTokenClassification"),ntr=o(" (ALBERT model)"),str=l(),M5=a("li"),G2e=a("strong"),ltr=o("bert"),itr=o(" \u2014 "),$Q=a("a"),dtr=o("BertForTokenClassification"),ctr=o(" (BERT model)"),ftr=l(),E5=a("li"),O2e=a("strong"),mtr=o("big_bird"),gtr=o(" \u2014 "),kQ=a("a"),htr=o("BigBirdForTokenClassification"),ptr=o(" (BigBird model)"),_tr=l(),C5=a("li"),V2e=a("strong"),utr=o("bloom"),btr=o(" \u2014 "),SQ=a("a"),vtr=o("BloomForTokenClassification"),Ftr=o(" (BLOOM model)"),Ttr=l(),w5=a("li"),X2e=a("strong"),Mtr=o("camembert"),Etr=o(" \u2014 "),RQ=a("a"),Ctr=o("CamembertForTokenClassification"),wtr=o(" (CamemBERT model)"),Atr=l(),A5=a("li"),z2e=a("strong"),Ltr=o("canine"),ytr=o(" \u2014 "),PQ=a("a"),xtr=o("CanineForTokenClassification"),$tr=o(" (CANINE model)"),ktr=l(),L5=a("li"),W2e=a("strong"),Str=o("convbert"),Rtr=o(" \u2014 "),BQ=a("a"),Ptr=o("ConvBertForTokenClassification"),Btr=o(" (ConvBERT model)"),Itr=l(),y5=a("li"),Q2e=a("strong"),Ntr=o("data2vec-text"),qtr=o(" \u2014 "),IQ=a("a"),jtr=o("Data2VecTextForTokenClassification"),Dtr=o(" (Data2VecText model)"),Gtr=l(),x5=a("li"),U2e=a("strong"),Otr=o("deberta"),Vtr=o(" \u2014 "),NQ=a("a"),Xtr=o("DebertaForTokenClassification"),ztr=o(" (DeBERTa model)"),Wtr=l(),$5=a("li"),H2e=a("strong"),Qtr=o("deberta-v2"),Utr=o(" \u2014 "),qQ=a("a"),Htr=o("DebertaV2ForTokenClassification"),Jtr=o(" (DeBERTa-v2 model)"),Ytr=l(),k5=a("li"),J2e=a("strong"),Ktr=o("distilbert"),Ztr=o(" \u2014 "),jQ=a("a"),ear=o("DistilBertForTokenClassification"),oar=o(" (DistilBERT model)"),rar=l(),S5=a("li"),Y2e=a("strong"),tar=o("electra"),aar=o(" \u2014 "),DQ=a("a"),nar=o("ElectraForTokenClassification"),sar=o(" (ELECTRA model)"),lar=l(),R5=a("li"),K2e=a("strong"),iar=o("flaubert"),dar=o(" \u2014 "),GQ=a("a"),car=o("FlaubertForTokenClassification"),far=o(" (FlauBERT model)"),mar=l(),P5=a("li"),Z2e=a("strong"),gar=o("fnet"),har=o(" \u2014 "),OQ=a("a"),par=o("FNetForTokenClassification"),_ar=o(" (FNet model)"),uar=l(),B5=a("li"),ebe=a("strong"),bar=o("funnel"),Far=o(" \u2014 "),VQ=a("a"),Tar=o("FunnelForTokenClassification"),Mar=o(" (Funnel Transformer model)"),Ear=l(),I5=a("li"),obe=a("strong"),Car=o("gpt2"),war=o(" \u2014 "),XQ=a("a"),Aar=o("GPT2ForTokenClassification"),Lar=o(" (OpenAI GPT-2 model)"),yar=l(),N5=a("li"),rbe=a("strong"),xar=o("ibert"),$ar=o(" \u2014 "),zQ=a("a"),kar=o("IBertForTokenClassification"),Sar=o(" (I-BERT model)"),Rar=l(),q5=a("li"),tbe=a("strong"),Par=o("layoutlm"),Bar=o(" \u2014 "),WQ=a("a"),Iar=o("LayoutLMForTokenClassification"),Nar=o(" (LayoutLM model)"),qar=l(),j5=a("li"),abe=a("strong"),jar=o("layoutlmv2"),Dar=o(" \u2014 "),QQ=a("a"),Gar=o("LayoutLMv2ForTokenClassification"),Oar=o(" (LayoutLMv2 model)"),Var=l(),D5=a("li"),nbe=a("strong"),Xar=o("layoutlmv3"),zar=o(" \u2014 "),UQ=a("a"),War=o("LayoutLMv3ForTokenClassification"),Qar=o(" (LayoutLMv3 model)"),Uar=l(),G5=a("li"),sbe=a("strong"),Har=o("longformer"),Jar=o(" \u2014 "),HQ=a("a"),Yar=o("LongformerForTokenClassification"),Kar=o(" (Longformer model)"),Zar=l(),O5=a("li"),lbe=a("strong"),enr=o("luke"),onr=o(" \u2014 "),JQ=a("a"),rnr=o("LukeForTokenClassification"),tnr=o(" (LUKE model)"),anr=l(),V5=a("li"),ibe=a("strong"),nnr=o("megatron-bert"),snr=o(" \u2014 "),YQ=a("a"),lnr=o("MegatronBertForTokenClassification"),inr=o(" (Megatron-BERT model)"),dnr=l(),X5=a("li"),dbe=a("strong"),cnr=o("mobilebert"),fnr=o(" \u2014 "),KQ=a("a"),mnr=o("MobileBertForTokenClassification"),gnr=o(" (MobileBERT model)"),hnr=l(),z5=a("li"),cbe=a("strong"),pnr=o("mpnet"),_nr=o(" \u2014 "),ZQ=a("a"),unr=o("MPNetForTokenClassification"),bnr=o(" (MPNet model)"),vnr=l(),W5=a("li"),fbe=a("strong"),Fnr=o("nezha"),Tnr=o(" \u2014 "),eU=a("a"),Mnr=o("NezhaForTokenClassification"),Enr=o(" (Nezha model)"),Cnr=l(),Q5=a("li"),mbe=a("strong"),wnr=o("nystromformer"),Anr=o(" \u2014 "),oU=a("a"),Lnr=o("NystromformerForTokenClassification"),ynr=o(" (Nystr\xF6mformer model)"),xnr=l(),U5=a("li"),gbe=a("strong"),$nr=o("qdqbert"),knr=o(" \u2014 "),rU=a("a"),Snr=o("QDQBertForTokenClassification"),Rnr=o(" (QDQBert model)"),Pnr=l(),H5=a("li"),hbe=a("strong"),Bnr=o("rembert"),Inr=o(" \u2014 "),tU=a("a"),Nnr=o("RemBertForTokenClassification"),qnr=o(" (RemBERT model)"),jnr=l(),J5=a("li"),pbe=a("strong"),Dnr=o("roberta"),Gnr=o(" \u2014 "),aU=a("a"),Onr=o("RobertaForTokenClassification"),Vnr=o(" (RoBERTa model)"),Xnr=l(),Y5=a("li"),_be=a("strong"),znr=o("roformer"),Wnr=o(" \u2014 "),nU=a("a"),Qnr=o("RoFormerForTokenClassification"),Unr=o(" (RoFormer model)"),Hnr=l(),K5=a("li"),ube=a("strong"),Jnr=o("squeezebert"),Ynr=o(" \u2014 "),sU=a("a"),Knr=o("SqueezeBertForTokenClassification"),Znr=o(" (SqueezeBERT model)"),esr=l(),Z5=a("li"),bbe=a("strong"),osr=o("xlm"),rsr=o(" \u2014 "),lU=a("a"),tsr=o("XLMForTokenClassification"),asr=o(" (XLM model)"),nsr=l(),e0=a("li"),vbe=a("strong"),ssr=o("xlm-roberta"),lsr=o(" \u2014 "),iU=a("a"),isr=o("XLMRobertaForTokenClassification"),dsr=o(" (XLM-RoBERTa model)"),csr=l(),o0=a("li"),Fbe=a("strong"),fsr=o("xlm-roberta-xl"),msr=o(" \u2014 "),dU=a("a"),gsr=o("XLMRobertaXLForTokenClassification"),hsr=o(" (XLM-RoBERTa-XL model)"),psr=l(),r0=a("li"),Tbe=a("strong"),_sr=o("xlnet"),usr=o(" \u2014 "),cU=a("a"),bsr=o("XLNetForTokenClassification"),vsr=o(" (XLNet model)"),Fsr=l(),t0=a("li"),Mbe=a("strong"),Tsr=o("yoso"),Msr=o(" \u2014 "),fU=a("a"),Esr=o("YosoForTokenClassification"),Csr=o(" (YOSO model)"),wsr=l(),a0=a("p"),Asr=o("The model is set in evaluation mode by default using "),Ebe=a("code"),Lsr=o("model.eval()"),ysr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=a("code"),xsr=o("model.train()"),$sr=l(),F(n0.$$.fragment),TUe=l(),xd=a("h2"),s0=a("a"),wbe=a("span"),F(k9.$$.fragment),ksr=l(),Abe=a("span"),Ssr=o("AutoModelForQuestionAnswering"),MUe=l(),Oo=a("div"),F(S9.$$.fragment),Rsr=l(),$d=a("p"),Psr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mU=a("a"),Bsr=o("from_pretrained()"),Isr=o(" class method or the "),gU=a("a"),Nsr=o("from_config()"),qsr=o(` class
method.`),jsr=l(),R9=a("p"),Dsr=o("This class cannot be instantiated directly using "),Lbe=a("code"),Gsr=o("__init__()"),Osr=o(" (throws an error)."),Vsr=l(),Tt=a("div"),F(P9.$$.fragment),Xsr=l(),ybe=a("p"),zsr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Wsr=l(),kd=a("p"),Qsr=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),Usr=o("not"),Hsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),Jsr=o("from_pretrained()"),Ysr=o(" to load the model weights."),Ksr=l(),F(l0.$$.fragment),Zsr=l(),so=a("div"),F(B9.$$.fragment),elr=l(),$be=a("p"),olr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rlr=l(),Ka=a("p"),tlr=o("The model class to instantiate is selected based on the "),kbe=a("code"),alr=o("model_type"),nlr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),slr=o("pretrained_model_name_or_path"),llr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),ilr=o("pretrained_model_name_or_path"),dlr=o(":"),clr=l(),V=a("ul"),i0=a("li"),Pbe=a("strong"),flr=o("albert"),mlr=o(" \u2014 "),pU=a("a"),glr=o("AlbertForQuestionAnswering"),hlr=o(" (ALBERT model)"),plr=l(),d0=a("li"),Bbe=a("strong"),_lr=o("bart"),ulr=o(" \u2014 "),_U=a("a"),blr=o("BartForQuestionAnswering"),vlr=o(" (BART model)"),Flr=l(),c0=a("li"),Ibe=a("strong"),Tlr=o("bert"),Mlr=o(" \u2014 "),uU=a("a"),Elr=o("BertForQuestionAnswering"),Clr=o(" (BERT model)"),wlr=l(),f0=a("li"),Nbe=a("strong"),Alr=o("big_bird"),Llr=o(" \u2014 "),bU=a("a"),ylr=o("BigBirdForQuestionAnswering"),xlr=o(" (BigBird model)"),$lr=l(),m0=a("li"),qbe=a("strong"),klr=o("bigbird_pegasus"),Slr=o(" \u2014 "),vU=a("a"),Rlr=o("BigBirdPegasusForQuestionAnswering"),Plr=o(" (BigBird-Pegasus model)"),Blr=l(),g0=a("li"),jbe=a("strong"),Ilr=o("camembert"),Nlr=o(" \u2014 "),FU=a("a"),qlr=o("CamembertForQuestionAnswering"),jlr=o(" (CamemBERT model)"),Dlr=l(),h0=a("li"),Dbe=a("strong"),Glr=o("canine"),Olr=o(" \u2014 "),TU=a("a"),Vlr=o("CanineForQuestionAnswering"),Xlr=o(" (CANINE model)"),zlr=l(),p0=a("li"),Gbe=a("strong"),Wlr=o("convbert"),Qlr=o(" \u2014 "),MU=a("a"),Ulr=o("ConvBertForQuestionAnswering"),Hlr=o(" (ConvBERT model)"),Jlr=l(),_0=a("li"),Obe=a("strong"),Ylr=o("data2vec-text"),Klr=o(" \u2014 "),EU=a("a"),Zlr=o("Data2VecTextForQuestionAnswering"),eir=o(" (Data2VecText model)"),oir=l(),u0=a("li"),Vbe=a("strong"),rir=o("deberta"),tir=o(" \u2014 "),CU=a("a"),air=o("DebertaForQuestionAnswering"),nir=o(" (DeBERTa model)"),sir=l(),b0=a("li"),Xbe=a("strong"),lir=o("deberta-v2"),iir=o(" \u2014 "),wU=a("a"),dir=o("DebertaV2ForQuestionAnswering"),cir=o(" (DeBERTa-v2 model)"),fir=l(),v0=a("li"),zbe=a("strong"),mir=o("distilbert"),gir=o(" \u2014 "),AU=a("a"),hir=o("DistilBertForQuestionAnswering"),pir=o(" (DistilBERT model)"),_ir=l(),F0=a("li"),Wbe=a("strong"),uir=o("electra"),bir=o(" \u2014 "),LU=a("a"),vir=o("ElectraForQuestionAnswering"),Fir=o(" (ELECTRA model)"),Tir=l(),T0=a("li"),Qbe=a("strong"),Mir=o("flaubert"),Eir=o(" \u2014 "),yU=a("a"),Cir=o("FlaubertForQuestionAnsweringSimple"),wir=o(" (FlauBERT model)"),Air=l(),M0=a("li"),Ube=a("strong"),Lir=o("fnet"),yir=o(" \u2014 "),xU=a("a"),xir=o("FNetForQuestionAnswering"),$ir=o(" (FNet model)"),kir=l(),E0=a("li"),Hbe=a("strong"),Sir=o("funnel"),Rir=o(" \u2014 "),$U=a("a"),Pir=o("FunnelForQuestionAnswering"),Bir=o(" (Funnel Transformer model)"),Iir=l(),C0=a("li"),Jbe=a("strong"),Nir=o("gptj"),qir=o(" \u2014 "),kU=a("a"),jir=o("GPTJForQuestionAnswering"),Dir=o(" (GPT-J model)"),Gir=l(),w0=a("li"),Ybe=a("strong"),Oir=o("ibert"),Vir=o(" \u2014 "),SU=a("a"),Xir=o("IBertForQuestionAnswering"),zir=o(" (I-BERT model)"),Wir=l(),A0=a("li"),Kbe=a("strong"),Qir=o("layoutlmv2"),Uir=o(" \u2014 "),RU=a("a"),Hir=o("LayoutLMv2ForQuestionAnswering"),Jir=o(" (LayoutLMv2 model)"),Yir=l(),L0=a("li"),Zbe=a("strong"),Kir=o("layoutlmv3"),Zir=o(" \u2014 "),PU=a("a"),edr=o("LayoutLMv3ForQuestionAnswering"),odr=o(" (LayoutLMv3 model)"),rdr=l(),y0=a("li"),eve=a("strong"),tdr=o("led"),adr=o(" \u2014 "),BU=a("a"),ndr=o("LEDForQuestionAnswering"),sdr=o(" (LED model)"),ldr=l(),x0=a("li"),ove=a("strong"),idr=o("longformer"),ddr=o(" \u2014 "),IU=a("a"),cdr=o("LongformerForQuestionAnswering"),fdr=o(" (Longformer model)"),mdr=l(),$0=a("li"),rve=a("strong"),gdr=o("luke"),hdr=o(" \u2014 "),NU=a("a"),pdr=o("LukeForQuestionAnswering"),_dr=o(" (LUKE model)"),udr=l(),k0=a("li"),tve=a("strong"),bdr=o("lxmert"),vdr=o(" \u2014 "),qU=a("a"),Fdr=o("LxmertForQuestionAnswering"),Tdr=o(" (LXMERT model)"),Mdr=l(),S0=a("li"),ave=a("strong"),Edr=o("mbart"),Cdr=o(" \u2014 "),jU=a("a"),wdr=o("MBartForQuestionAnswering"),Adr=o(" (mBART model)"),Ldr=l(),R0=a("li"),nve=a("strong"),ydr=o("megatron-bert"),xdr=o(" \u2014 "),DU=a("a"),$dr=o("MegatronBertForQuestionAnswering"),kdr=o(" (Megatron-BERT model)"),Sdr=l(),P0=a("li"),sve=a("strong"),Rdr=o("mobilebert"),Pdr=o(" \u2014 "),GU=a("a"),Bdr=o("MobileBertForQuestionAnswering"),Idr=o(" (MobileBERT model)"),Ndr=l(),B0=a("li"),lve=a("strong"),qdr=o("mpnet"),jdr=o(" \u2014 "),OU=a("a"),Ddr=o("MPNetForQuestionAnswering"),Gdr=o(" (MPNet model)"),Odr=l(),I0=a("li"),ive=a("strong"),Vdr=o("mvp"),Xdr=o(" \u2014 "),VU=a("a"),zdr=o("MvpForQuestionAnswering"),Wdr=o(" (MVP model)"),Qdr=l(),N0=a("li"),dve=a("strong"),Udr=o("nezha"),Hdr=o(" \u2014 "),XU=a("a"),Jdr=o("NezhaForQuestionAnswering"),Ydr=o(" (Nezha model)"),Kdr=l(),q0=a("li"),cve=a("strong"),Zdr=o("nystromformer"),ecr=o(" \u2014 "),zU=a("a"),ocr=o("NystromformerForQuestionAnswering"),rcr=o(" (Nystr\xF6mformer model)"),tcr=l(),j0=a("li"),fve=a("strong"),acr=o("qdqbert"),ncr=o(" \u2014 "),WU=a("a"),scr=o("QDQBertForQuestionAnswering"),lcr=o(" (QDQBert model)"),icr=l(),D0=a("li"),mve=a("strong"),dcr=o("reformer"),ccr=o(" \u2014 "),QU=a("a"),fcr=o("ReformerForQuestionAnswering"),mcr=o(" (Reformer model)"),gcr=l(),G0=a("li"),gve=a("strong"),hcr=o("rembert"),pcr=o(" \u2014 "),UU=a("a"),_cr=o("RemBertForQuestionAnswering"),ucr=o(" (RemBERT model)"),bcr=l(),O0=a("li"),hve=a("strong"),vcr=o("roberta"),Fcr=o(" \u2014 "),HU=a("a"),Tcr=o("RobertaForQuestionAnswering"),Mcr=o(" (RoBERTa model)"),Ecr=l(),V0=a("li"),pve=a("strong"),Ccr=o("roformer"),wcr=o(" \u2014 "),JU=a("a"),Acr=o("RoFormerForQuestionAnswering"),Lcr=o(" (RoFormer model)"),ycr=l(),X0=a("li"),_ve=a("strong"),xcr=o("splinter"),$cr=o(" \u2014 "),YU=a("a"),kcr=o("SplinterForQuestionAnswering"),Scr=o(" (Splinter model)"),Rcr=l(),z0=a("li"),uve=a("strong"),Pcr=o("squeezebert"),Bcr=o(" \u2014 "),KU=a("a"),Icr=o("SqueezeBertForQuestionAnswering"),Ncr=o(" (SqueezeBERT model)"),qcr=l(),W0=a("li"),bve=a("strong"),jcr=o("xlm"),Dcr=o(" \u2014 "),ZU=a("a"),Gcr=o("XLMForQuestionAnsweringSimple"),Ocr=o(" (XLM model)"),Vcr=l(),Q0=a("li"),vve=a("strong"),Xcr=o("xlm-roberta"),zcr=o(" \u2014 "),eH=a("a"),Wcr=o("XLMRobertaForQuestionAnswering"),Qcr=o(" (XLM-RoBERTa model)"),Ucr=l(),U0=a("li"),Fve=a("strong"),Hcr=o("xlm-roberta-xl"),Jcr=o(" \u2014 "),oH=a("a"),Ycr=o("XLMRobertaXLForQuestionAnswering"),Kcr=o(" (XLM-RoBERTa-XL model)"),Zcr=l(),H0=a("li"),Tve=a("strong"),efr=o("xlnet"),ofr=o(" \u2014 "),rH=a("a"),rfr=o("XLNetForQuestionAnsweringSimple"),tfr=o(" (XLNet model)"),afr=l(),J0=a("li"),Mve=a("strong"),nfr=o("yoso"),sfr=o(" \u2014 "),tH=a("a"),lfr=o("YosoForQuestionAnswering"),ifr=o(" (YOSO model)"),dfr=l(),Y0=a("p"),cfr=o("The model is set in evaluation mode by default using "),Eve=a("code"),ffr=o("model.eval()"),mfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=a("code"),gfr=o("model.train()"),hfr=l(),F(K0.$$.fragment),EUe=l(),Sd=a("h2"),Z0=a("a"),wve=a("span"),F(I9.$$.fragment),pfr=l(),Ave=a("span"),_fr=o("AutoModelForTableQuestionAnswering"),CUe=l(),Vo=a("div"),F(N9.$$.fragment),ufr=l(),Rd=a("p"),bfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aH=a("a"),vfr=o("from_pretrained()"),Ffr=o(" class method or the "),nH=a("a"),Tfr=o("from_config()"),Mfr=o(` class
method.`),Efr=l(),q9=a("p"),Cfr=o("This class cannot be instantiated directly using "),Lve=a("code"),wfr=o("__init__()"),Afr=o(" (throws an error)."),Lfr=l(),Mt=a("div"),F(j9.$$.fragment),yfr=l(),yve=a("p"),xfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$fr=l(),Pd=a("p"),kfr=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),Sfr=o("not"),Rfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),Pfr=o("from_pretrained()"),Bfr=o(" to load the model weights."),Ifr=l(),F(eF.$$.fragment),Nfr=l(),lo=a("div"),F(D9.$$.fragment),qfr=l(),$ve=a("p"),jfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Dfr=l(),Za=a("p"),Gfr=o("The model class to instantiate is selected based on the "),kve=a("code"),Ofr=o("model_type"),Vfr=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),Xfr=o("pretrained_model_name_or_path"),zfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),Wfr=o("pretrained_model_name_or_path"),Qfr=o(":"),Ufr=l(),Pve=a("ul"),oF=a("li"),Bve=a("strong"),Hfr=o("tapas"),Jfr=o(" \u2014 "),lH=a("a"),Yfr=o("TapasForQuestionAnswering"),Kfr=o(" (TAPAS model)"),Zfr=l(),rF=a("p"),emr=o("The model is set in evaluation mode by default using "),Ive=a("code"),omr=o("model.eval()"),rmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nve=a("code"),tmr=o("model.train()"),amr=l(),F(tF.$$.fragment),wUe=l(),Bd=a("h2"),aF=a("a"),qve=a("span"),F(G9.$$.fragment),nmr=l(),jve=a("span"),smr=o("AutoModelForImageClassification"),AUe=l(),Xo=a("div"),F(O9.$$.fragment),lmr=l(),Id=a("p"),imr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iH=a("a"),dmr=o("from_pretrained()"),cmr=o(" class method or the "),dH=a("a"),fmr=o("from_config()"),mmr=o(` class
method.`),gmr=l(),V9=a("p"),hmr=o("This class cannot be instantiated directly using "),Dve=a("code"),pmr=o("__init__()"),_mr=o(" (throws an error)."),umr=l(),Et=a("div"),F(X9.$$.fragment),bmr=l(),Gve=a("p"),vmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fmr=l(),Nd=a("p"),Tmr=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),Mmr=o("not"),Emr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),Cmr=o("from_pretrained()"),wmr=o(" to load the model weights."),Amr=l(),F(nF.$$.fragment),Lmr=l(),io=a("div"),F(z9.$$.fragment),ymr=l(),Vve=a("p"),xmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$mr=l(),en=a("p"),kmr=o("The model class to instantiate is selected based on the "),Xve=a("code"),Smr=o("model_type"),Rmr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),Pmr=o("pretrained_model_name_or_path"),Bmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),Imr=o("pretrained_model_name_or_path"),Nmr=o(":"),qmr=l(),be=a("ul"),sF=a("li"),Qve=a("strong"),jmr=o("beit"),Dmr=o(" \u2014 "),fH=a("a"),Gmr=o("BeitForImageClassification"),Omr=o(" (BEiT model)"),Vmr=l(),lF=a("li"),Uve=a("strong"),Xmr=o("convnext"),zmr=o(" \u2014 "),mH=a("a"),Wmr=o("ConvNextForImageClassification"),Qmr=o(" (ConvNeXT model)"),Umr=l(),iF=a("li"),Hve=a("strong"),Hmr=o("cvt"),Jmr=o(" \u2014 "),gH=a("a"),Ymr=o("CvtForImageClassification"),Kmr=o(" (CvT model)"),Zmr=l(),dF=a("li"),Jve=a("strong"),egr=o("data2vec-vision"),ogr=o(" \u2014 "),hH=a("a"),rgr=o("Data2VecVisionForImageClassification"),tgr=o(" (Data2VecVision model)"),agr=l(),sl=a("li"),Yve=a("strong"),ngr=o("deit"),sgr=o(" \u2014 "),pH=a("a"),lgr=o("DeiTForImageClassification"),igr=o(" or "),_H=a("a"),dgr=o("DeiTForImageClassificationWithTeacher"),cgr=o(" (DeiT model)"),fgr=l(),cF=a("li"),Kve=a("strong"),mgr=o("imagegpt"),ggr=o(" \u2014 "),uH=a("a"),hgr=o("ImageGPTForImageClassification"),pgr=o(" (ImageGPT model)"),_gr=l(),ll=a("li"),Zve=a("strong"),ugr=o("levit"),bgr=o(" \u2014 "),bH=a("a"),vgr=o("LevitForImageClassification"),Fgr=o(" or "),vH=a("a"),Tgr=o("LevitForImageClassificationWithTeacher"),Mgr=o(" (LeViT model)"),Egr=l(),fF=a("li"),e5e=a("strong"),Cgr=o("mobilevit"),wgr=o(" \u2014 "),FH=a("a"),Agr=o("MobileViTForImageClassification"),Lgr=o(" (MobileViT model)"),ygr=l(),Ct=a("li"),o5e=a("strong"),xgr=o("perceiver"),$gr=o(" \u2014 "),TH=a("a"),kgr=o("PerceiverForImageClassificationLearned"),Sgr=o(" or "),MH=a("a"),Rgr=o("PerceiverForImageClassificationFourier"),Pgr=o(" or "),EH=a("a"),Bgr=o("PerceiverForImageClassificationConvProcessing"),Igr=o(" (Perceiver model)"),Ngr=l(),mF=a("li"),r5e=a("strong"),qgr=o("poolformer"),jgr=o(" \u2014 "),CH=a("a"),Dgr=o("PoolFormerForImageClassification"),Ggr=o(" (PoolFormer model)"),Ogr=l(),gF=a("li"),t5e=a("strong"),Vgr=o("regnet"),Xgr=o(" \u2014 "),wH=a("a"),zgr=o("RegNetForImageClassification"),Wgr=o(" (RegNet model)"),Qgr=l(),hF=a("li"),a5e=a("strong"),Ugr=o("resnet"),Hgr=o(" \u2014 "),AH=a("a"),Jgr=o("ResNetForImageClassification"),Ygr=o(" (ResNet model)"),Kgr=l(),pF=a("li"),n5e=a("strong"),Zgr=o("segformer"),ehr=o(" \u2014 "),LH=a("a"),ohr=o("SegformerForImageClassification"),rhr=o(" (SegFormer model)"),thr=l(),_F=a("li"),s5e=a("strong"),ahr=o("swin"),nhr=o(" \u2014 "),yH=a("a"),shr=o("SwinForImageClassification"),lhr=o(" (Swin Transformer model)"),ihr=l(),uF=a("li"),l5e=a("strong"),dhr=o("swinv2"),chr=o(" \u2014 "),xH=a("a"),fhr=o("Swinv2ForImageClassification"),mhr=o(" (Swin Transformer V2 model)"),ghr=l(),bF=a("li"),i5e=a("strong"),hhr=o("van"),phr=o(" \u2014 "),$H=a("a"),_hr=o("VanForImageClassification"),uhr=o(" (VAN model)"),bhr=l(),vF=a("li"),d5e=a("strong"),vhr=o("vit"),Fhr=o(" \u2014 "),kH=a("a"),Thr=o("ViTForImageClassification"),Mhr=o(" (ViT model)"),Ehr=l(),FF=a("p"),Chr=o("The model is set in evaluation mode by default using "),c5e=a("code"),whr=o("model.eval()"),Ahr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f5e=a("code"),Lhr=o("model.train()"),yhr=l(),F(TF.$$.fragment),LUe=l(),qd=a("h2"),MF=a("a"),m5e=a("span"),F(W9.$$.fragment),xhr=l(),g5e=a("span"),$hr=o("AutoModelForVideoClassification"),yUe=l(),zo=a("div"),F(Q9.$$.fragment),khr=l(),jd=a("p"),Shr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),SH=a("a"),Rhr=o("from_pretrained()"),Phr=o(" class method or the "),RH=a("a"),Bhr=o("from_config()"),Ihr=o(` class
method.`),Nhr=l(),U9=a("p"),qhr=o("This class cannot be instantiated directly using "),h5e=a("code"),jhr=o("__init__()"),Dhr=o(" (throws an error)."),Ghr=l(),wt=a("div"),F(H9.$$.fragment),Ohr=l(),p5e=a("p"),Vhr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Xhr=l(),Dd=a("p"),zhr=o(`Note:
Loading a model from its configuration file does `),_5e=a("strong"),Whr=o("not"),Qhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),Uhr=o("from_pretrained()"),Hhr=o(" to load the model weights."),Jhr=l(),F(EF.$$.fragment),Yhr=l(),co=a("div"),F(J9.$$.fragment),Khr=l(),u5e=a("p"),Zhr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),epr=l(),on=a("p"),opr=o("The model class to instantiate is selected based on the "),b5e=a("code"),rpr=o("model_type"),tpr=o(` property of the config object (either
passed as an argument or loaded from `),v5e=a("code"),apr=o("pretrained_model_name_or_path"),npr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=a("code"),spr=o("pretrained_model_name_or_path"),lpr=o(":"),ipr=l(),T5e=a("ul"),CF=a("li"),M5e=a("strong"),dpr=o("videomae"),cpr=o(" \u2014 "),BH=a("a"),fpr=o("VideoMAEForVideoClassification"),mpr=o(" (VideoMAE model)"),gpr=l(),wF=a("p"),hpr=o("The model is set in evaluation mode by default using "),E5e=a("code"),ppr=o("model.eval()"),_pr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C5e=a("code"),upr=o("model.train()"),bpr=l(),F(AF.$$.fragment),xUe=l(),Gd=a("h2"),LF=a("a"),w5e=a("span"),F(Y9.$$.fragment),vpr=l(),A5e=a("span"),Fpr=o("AutoModelForVision2Seq"),$Ue=l(),Wo=a("div"),F(K9.$$.fragment),Tpr=l(),Od=a("p"),Mpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IH=a("a"),Epr=o("from_pretrained()"),Cpr=o(" class method or the "),NH=a("a"),wpr=o("from_config()"),Apr=o(` class
method.`),Lpr=l(),Z9=a("p"),ypr=o("This class cannot be instantiated directly using "),L5e=a("code"),xpr=o("__init__()"),$pr=o(" (throws an error)."),kpr=l(),At=a("div"),F(ex.$$.fragment),Spr=l(),y5e=a("p"),Rpr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ppr=l(),Vd=a("p"),Bpr=o(`Note:
Loading a model from its configuration file does `),x5e=a("strong"),Ipr=o("not"),Npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),qpr=o("from_pretrained()"),jpr=o(" to load the model weights."),Dpr=l(),F(yF.$$.fragment),Gpr=l(),fo=a("div"),F(ox.$$.fragment),Opr=l(),$5e=a("p"),Vpr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xpr=l(),rn=a("p"),zpr=o("The model class to instantiate is selected based on the "),k5e=a("code"),Wpr=o("model_type"),Qpr=o(` property of the config object (either
passed as an argument or loaded from `),S5e=a("code"),Upr=o("pretrained_model_name_or_path"),Hpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=a("code"),Jpr=o("pretrained_model_name_or_path"),Ypr=o(":"),Kpr=l(),P5e=a("ul"),xF=a("li"),B5e=a("strong"),Zpr=o("vision-encoder-decoder"),e_r=o(" \u2014 "),jH=a("a"),o_r=o("VisionEncoderDecoderModel"),r_r=o(" (Vision Encoder decoder model)"),t_r=l(),$F=a("p"),a_r=o("The model is set in evaluation mode by default using "),I5e=a("code"),n_r=o("model.eval()"),s_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N5e=a("code"),l_r=o("model.train()"),i_r=l(),F(kF.$$.fragment),kUe=l(),Xd=a("h2"),SF=a("a"),q5e=a("span"),F(rx.$$.fragment),d_r=l(),j5e=a("span"),c_r=o("AutoModelForVisualQuestionAnswering"),SUe=l(),Qo=a("div"),F(tx.$$.fragment),f_r=l(),zd=a("p"),m_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),DH=a("a"),g_r=o("from_pretrained()"),h_r=o(" class method or the "),GH=a("a"),p_r=o("from_config()"),__r=o(` class
method.`),u_r=l(),ax=a("p"),b_r=o("This class cannot be instantiated directly using "),D5e=a("code"),v_r=o("__init__()"),F_r=o(" (throws an error)."),T_r=l(),Lt=a("div"),F(nx.$$.fragment),M_r=l(),G5e=a("p"),E_r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),C_r=l(),Wd=a("p"),w_r=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),A_r=o("not"),L_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),y_r=o("from_pretrained()"),x_r=o(" to load the model weights."),$_r=l(),F(RF.$$.fragment),k_r=l(),mo=a("div"),F(sx.$$.fragment),S_r=l(),V5e=a("p"),R_r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),P_r=l(),tn=a("p"),B_r=o("The model class to instantiate is selected based on the "),X5e=a("code"),I_r=o("model_type"),N_r=o(` property of the config object (either
passed as an argument or loaded from `),z5e=a("code"),q_r=o("pretrained_model_name_or_path"),j_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),D_r=o("pretrained_model_name_or_path"),G_r=o(":"),O_r=l(),Q5e=a("ul"),PF=a("li"),U5e=a("strong"),V_r=o("vilt"),X_r=o(" \u2014 "),VH=a("a"),z_r=o("ViltForQuestionAnswering"),W_r=o(" (ViLT model)"),Q_r=l(),BF=a("p"),U_r=o("The model is set in evaluation mode by default using "),H5e=a("code"),H_r=o("model.eval()"),J_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J5e=a("code"),Y_r=o("model.train()"),K_r=l(),F(IF.$$.fragment),RUe=l(),Qd=a("h2"),NF=a("a"),Y5e=a("span"),F(lx.$$.fragment),Z_r=l(),K5e=a("span"),eur=o("AutoModelForAudioClassification"),PUe=l(),Uo=a("div"),F(ix.$$.fragment),our=l(),Ud=a("p"),rur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XH=a("a"),tur=o("from_pretrained()"),aur=o(" class method or the "),zH=a("a"),nur=o("from_config()"),sur=o(` class
method.`),lur=l(),dx=a("p"),iur=o("This class cannot be instantiated directly using "),Z5e=a("code"),dur=o("__init__()"),cur=o(" (throws an error)."),fur=l(),yt=a("div"),F(cx.$$.fragment),mur=l(),e0e=a("p"),gur=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),hur=l(),Hd=a("p"),pur=o(`Note:
Loading a model from its configuration file does `),o0e=a("strong"),_ur=o("not"),uur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),bur=o("from_pretrained()"),vur=o(" to load the model weights."),Fur=l(),F(qF.$$.fragment),Tur=l(),go=a("div"),F(fx.$$.fragment),Mur=l(),r0e=a("p"),Eur=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Cur=l(),an=a("p"),wur=o("The model class to instantiate is selected based on the "),t0e=a("code"),Aur=o("model_type"),Lur=o(` property of the config object (either
passed as an argument or loaded from `),a0e=a("code"),yur=o("pretrained_model_name_or_path"),xur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=a("code"),$ur=o("pretrained_model_name_or_path"),kur=o(":"),Sur=l(),Pe=a("ul"),jF=a("li"),s0e=a("strong"),Rur=o("data2vec-audio"),Pur=o(" \u2014 "),QH=a("a"),Bur=o("Data2VecAudioForSequenceClassification"),Iur=o(" (Data2VecAudio model)"),Nur=l(),DF=a("li"),l0e=a("strong"),qur=o("hubert"),jur=o(" \u2014 "),UH=a("a"),Dur=o("HubertForSequenceClassification"),Gur=o(" (Hubert model)"),Our=l(),GF=a("li"),i0e=a("strong"),Vur=o("sew"),Xur=o(" \u2014 "),HH=a("a"),zur=o("SEWForSequenceClassification"),Wur=o(" (SEW model)"),Qur=l(),OF=a("li"),d0e=a("strong"),Uur=o("sew-d"),Hur=o(" \u2014 "),JH=a("a"),Jur=o("SEWDForSequenceClassification"),Yur=o(" (SEW-D model)"),Kur=l(),VF=a("li"),c0e=a("strong"),Zur=o("unispeech"),e1r=o(" \u2014 "),YH=a("a"),o1r=o("UniSpeechForSequenceClassification"),r1r=o(" (UniSpeech model)"),t1r=l(),XF=a("li"),f0e=a("strong"),a1r=o("unispeech-sat"),n1r=o(" \u2014 "),KH=a("a"),s1r=o("UniSpeechSatForSequenceClassification"),l1r=o(" (UniSpeechSat model)"),i1r=l(),zF=a("li"),m0e=a("strong"),d1r=o("wav2vec2"),c1r=o(" \u2014 "),ZH=a("a"),f1r=o("Wav2Vec2ForSequenceClassification"),m1r=o(" (Wav2Vec2 model)"),g1r=l(),WF=a("li"),g0e=a("strong"),h1r=o("wav2vec2-conformer"),p1r=o(" \u2014 "),eJ=a("a"),_1r=o("Wav2Vec2ConformerForSequenceClassification"),u1r=o(" (Wav2Vec2-Conformer model)"),b1r=l(),QF=a("li"),h0e=a("strong"),v1r=o("wavlm"),F1r=o(" \u2014 "),oJ=a("a"),T1r=o("WavLMForSequenceClassification"),M1r=o(" (WavLM model)"),E1r=l(),UF=a("p"),C1r=o("The model is set in evaluation mode by default using "),p0e=a("code"),w1r=o("model.eval()"),A1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_0e=a("code"),L1r=o("model.train()"),y1r=l(),F(HF.$$.fragment),BUe=l(),Jd=a("h2"),JF=a("a"),u0e=a("span"),F(mx.$$.fragment),x1r=l(),b0e=a("span"),$1r=o("AutoModelForAudioFrameClassification"),IUe=l(),Ho=a("div"),F(gx.$$.fragment),k1r=l(),Yd=a("p"),S1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rJ=a("a"),R1r=o("from_pretrained()"),P1r=o(" class method or the "),tJ=a("a"),B1r=o("from_config()"),I1r=o(` class
method.`),N1r=l(),hx=a("p"),q1r=o("This class cannot be instantiated directly using "),v0e=a("code"),j1r=o("__init__()"),D1r=o(" (throws an error)."),G1r=l(),xt=a("div"),F(px.$$.fragment),O1r=l(),F0e=a("p"),V1r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),X1r=l(),Kd=a("p"),z1r=o(`Note:
Loading a model from its configuration file does `),T0e=a("strong"),W1r=o("not"),Q1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=a("a"),U1r=o("from_pretrained()"),H1r=o(" to load the model weights."),J1r=l(),F(YF.$$.fragment),Y1r=l(),ho=a("div"),F(_x.$$.fragment),K1r=l(),M0e=a("p"),Z1r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),e4r=l(),nn=a("p"),o4r=o("The model class to instantiate is selected based on the "),E0e=a("code"),r4r=o("model_type"),t4r=o(` property of the config object (either
passed as an argument or loaded from `),C0e=a("code"),a4r=o("pretrained_model_name_or_path"),n4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=a("code"),s4r=o("pretrained_model_name_or_path"),l4r=o(":"),i4r=l(),st=a("ul"),KF=a("li"),A0e=a("strong"),d4r=o("data2vec-audio"),c4r=o(" \u2014 "),nJ=a("a"),f4r=o("Data2VecAudioForAudioFrameClassification"),m4r=o(" (Data2VecAudio model)"),g4r=l(),ZF=a("li"),L0e=a("strong"),h4r=o("unispeech-sat"),p4r=o(" \u2014 "),sJ=a("a"),_4r=o("UniSpeechSatForAudioFrameClassification"),u4r=o(" (UniSpeechSat model)"),b4r=l(),eT=a("li"),y0e=a("strong"),v4r=o("wav2vec2"),F4r=o(" \u2014 "),lJ=a("a"),T4r=o("Wav2Vec2ForAudioFrameClassification"),M4r=o(" (Wav2Vec2 model)"),E4r=l(),oT=a("li"),x0e=a("strong"),C4r=o("wav2vec2-conformer"),w4r=o(" \u2014 "),iJ=a("a"),A4r=o("Wav2Vec2ConformerForAudioFrameClassification"),L4r=o(" (Wav2Vec2-Conformer model)"),y4r=l(),rT=a("li"),$0e=a("strong"),x4r=o("wavlm"),$4r=o(" \u2014 "),dJ=a("a"),k4r=o("WavLMForAudioFrameClassification"),S4r=o(" (WavLM model)"),R4r=l(),tT=a("p"),P4r=o("The model is set in evaluation mode by default using "),k0e=a("code"),B4r=o("model.eval()"),I4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S0e=a("code"),N4r=o("model.train()"),q4r=l(),F(aT.$$.fragment),NUe=l(),Zd=a("h2"),nT=a("a"),R0e=a("span"),F(ux.$$.fragment),j4r=l(),P0e=a("span"),D4r=o("AutoModelForCTC"),qUe=l(),Jo=a("div"),F(bx.$$.fragment),G4r=l(),ec=a("p"),O4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cJ=a("a"),V4r=o("from_pretrained()"),X4r=o(" class method or the "),fJ=a("a"),z4r=o("from_config()"),W4r=o(` class
method.`),Q4r=l(),vx=a("p"),U4r=o("This class cannot be instantiated directly using "),B0e=a("code"),H4r=o("__init__()"),J4r=o(" (throws an error)."),Y4r=l(),$t=a("div"),F(Fx.$$.fragment),K4r=l(),I0e=a("p"),Z4r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),e2r=l(),oc=a("p"),o2r=o(`Note:
Loading a model from its configuration file does `),N0e=a("strong"),r2r=o("not"),t2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),a2r=o("from_pretrained()"),n2r=o(" to load the model weights."),s2r=l(),F(sT.$$.fragment),l2r=l(),po=a("div"),F(Tx.$$.fragment),i2r=l(),q0e=a("p"),d2r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),c2r=l(),sn=a("p"),f2r=o("The model class to instantiate is selected based on the "),j0e=a("code"),m2r=o("model_type"),g2r=o(` property of the config object (either
passed as an argument or loaded from `),D0e=a("code"),h2r=o("pretrained_model_name_or_path"),p2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=a("code"),_2r=o("pretrained_model_name_or_path"),u2r=o(":"),b2r=l(),Le=a("ul"),lT=a("li"),O0e=a("strong"),v2r=o("data2vec-audio"),F2r=o(" \u2014 "),gJ=a("a"),T2r=o("Data2VecAudioForCTC"),M2r=o(" (Data2VecAudio model)"),E2r=l(),iT=a("li"),V0e=a("strong"),C2r=o("hubert"),w2r=o(" \u2014 "),hJ=a("a"),A2r=o("HubertForCTC"),L2r=o(" (Hubert model)"),y2r=l(),dT=a("li"),X0e=a("strong"),x2r=o("mctct"),$2r=o(" \u2014 "),pJ=a("a"),k2r=o("MCTCTForCTC"),S2r=o(" (M-CTC-T model)"),R2r=l(),cT=a("li"),z0e=a("strong"),P2r=o("sew"),B2r=o(" \u2014 "),_J=a("a"),I2r=o("SEWForCTC"),N2r=o(" (SEW model)"),q2r=l(),fT=a("li"),W0e=a("strong"),j2r=o("sew-d"),D2r=o(" \u2014 "),uJ=a("a"),G2r=o("SEWDForCTC"),O2r=o(" (SEW-D model)"),V2r=l(),mT=a("li"),Q0e=a("strong"),X2r=o("unispeech"),z2r=o(" \u2014 "),bJ=a("a"),W2r=o("UniSpeechForCTC"),Q2r=o(" (UniSpeech model)"),U2r=l(),gT=a("li"),U0e=a("strong"),H2r=o("unispeech-sat"),J2r=o(" \u2014 "),vJ=a("a"),Y2r=o("UniSpeechSatForCTC"),K2r=o(" (UniSpeechSat model)"),Z2r=l(),hT=a("li"),H0e=a("strong"),ebr=o("wav2vec2"),obr=o(" \u2014 "),FJ=a("a"),rbr=o("Wav2Vec2ForCTC"),tbr=o(" (Wav2Vec2 model)"),abr=l(),pT=a("li"),J0e=a("strong"),nbr=o("wav2vec2-conformer"),sbr=o(" \u2014 "),TJ=a("a"),lbr=o("Wav2Vec2ConformerForCTC"),ibr=o(" (Wav2Vec2-Conformer model)"),dbr=l(),_T=a("li"),Y0e=a("strong"),cbr=o("wavlm"),fbr=o(" \u2014 "),MJ=a("a"),mbr=o("WavLMForCTC"),gbr=o(" (WavLM model)"),hbr=l(),uT=a("p"),pbr=o("The model is set in evaluation mode by default using "),K0e=a("code"),_br=o("model.eval()"),ubr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z0e=a("code"),bbr=o("model.train()"),vbr=l(),F(bT.$$.fragment),jUe=l(),rc=a("h2"),vT=a("a"),eFe=a("span"),F(Mx.$$.fragment),Fbr=l(),oFe=a("span"),Tbr=o("AutoModelForSpeechSeq2Seq"),DUe=l(),Yo=a("div"),F(Ex.$$.fragment),Mbr=l(),tc=a("p"),Ebr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EJ=a("a"),Cbr=o("from_pretrained()"),wbr=o(" class method or the "),CJ=a("a"),Abr=o("from_config()"),Lbr=o(` class
method.`),ybr=l(),Cx=a("p"),xbr=o("This class cannot be instantiated directly using "),rFe=a("code"),$br=o("__init__()"),kbr=o(" (throws an error)."),Sbr=l(),kt=a("div"),F(wx.$$.fragment),Rbr=l(),tFe=a("p"),Pbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Bbr=l(),ac=a("p"),Ibr=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),Nbr=o("not"),qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),jbr=o("from_pretrained()"),Dbr=o(" to load the model weights."),Gbr=l(),F(FT.$$.fragment),Obr=l(),_o=a("div"),F(Ax.$$.fragment),Vbr=l(),nFe=a("p"),Xbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zbr=l(),ln=a("p"),Wbr=o("The model class to instantiate is selected based on the "),sFe=a("code"),Qbr=o("model_type"),Ubr=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),Hbr=o("pretrained_model_name_or_path"),Jbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(":"),Zbr=l(),Lx=a("ul"),TT=a("li"),dFe=a("strong"),evr=o("speech-encoder-decoder"),ovr=o(" \u2014 "),AJ=a("a"),rvr=o("SpeechEncoderDecoderModel"),tvr=o(" (Speech Encoder decoder model)"),avr=l(),MT=a("li"),cFe=a("strong"),nvr=o("speech_to_text"),svr=o(" \u2014 "),LJ=a("a"),lvr=o("Speech2TextForConditionalGeneration"),ivr=o(" (Speech2Text model)"),dvr=l(),ET=a("p"),cvr=o("The model is set in evaluation mode by default using "),fFe=a("code"),fvr=o("model.eval()"),mvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mFe=a("code"),gvr=o("model.train()"),hvr=l(),F(CT.$$.fragment),GUe=l(),nc=a("h2"),wT=a("a"),gFe=a("span"),F(yx.$$.fragment),pvr=l(),hFe=a("span"),_vr=o("AutoModelForAudioXVector"),OUe=l(),Ko=a("div"),F(xx.$$.fragment),uvr=l(),sc=a("p"),bvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yJ=a("a"),vvr=o("from_pretrained()"),Fvr=o(" class method or the "),xJ=a("a"),Tvr=o("from_config()"),Mvr=o(` class
method.`),Evr=l(),$x=a("p"),Cvr=o("This class cannot be instantiated directly using "),pFe=a("code"),wvr=o("__init__()"),Avr=o(" (throws an error)."),Lvr=l(),St=a("div"),F(kx.$$.fragment),yvr=l(),_Fe=a("p"),xvr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$vr=l(),lc=a("p"),kvr=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),Svr=o("not"),Rvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),Pvr=o("from_pretrained()"),Bvr=o(" to load the model weights."),Ivr=l(),F(AT.$$.fragment),Nvr=l(),uo=a("div"),F(Sx.$$.fragment),qvr=l(),bFe=a("p"),jvr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Dvr=l(),dn=a("p"),Gvr=o("The model class to instantiate is selected based on the "),vFe=a("code"),Ovr=o("model_type"),Vvr=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),Xvr=o("pretrained_model_name_or_path"),zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),Wvr=o("pretrained_model_name_or_path"),Qvr=o(":"),Uvr=l(),lt=a("ul"),LT=a("li"),MFe=a("strong"),Hvr=o("data2vec-audio"),Jvr=o(" \u2014 "),kJ=a("a"),Yvr=o("Data2VecAudioForXVector"),Kvr=o(" (Data2VecAudio model)"),Zvr=l(),yT=a("li"),EFe=a("strong"),e5r=o("unispeech-sat"),o5r=o(" \u2014 "),SJ=a("a"),r5r=o("UniSpeechSatForXVector"),t5r=o(" (UniSpeechSat model)"),a5r=l(),xT=a("li"),CFe=a("strong"),n5r=o("wav2vec2"),s5r=o(" \u2014 "),RJ=a("a"),l5r=o("Wav2Vec2ForXVector"),i5r=o(" (Wav2Vec2 model)"),d5r=l(),$T=a("li"),wFe=a("strong"),c5r=o("wav2vec2-conformer"),f5r=o(" \u2014 "),PJ=a("a"),m5r=o("Wav2Vec2ConformerForXVector"),g5r=o(" (Wav2Vec2-Conformer model)"),h5r=l(),kT=a("li"),AFe=a("strong"),p5r=o("wavlm"),_5r=o(" \u2014 "),BJ=a("a"),u5r=o("WavLMForXVector"),b5r=o(" (WavLM model)"),v5r=l(),ST=a("p"),F5r=o("The model is set in evaluation mode by default using "),LFe=a("code"),T5r=o("model.eval()"),M5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yFe=a("code"),E5r=o("model.train()"),C5r=l(),F(RT.$$.fragment),VUe=l(),ic=a("h2"),PT=a("a"),xFe=a("span"),F(Rx.$$.fragment),w5r=l(),$Fe=a("span"),A5r=o("AutoModelForMaskedImageModeling"),XUe=l(),Zo=a("div"),F(Px.$$.fragment),L5r=l(),dc=a("p"),y5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),IJ=a("a"),x5r=o("from_pretrained()"),$5r=o(" class method or the "),NJ=a("a"),k5r=o("from_config()"),S5r=o(` class
method.`),R5r=l(),Bx=a("p"),P5r=o("This class cannot be instantiated directly using "),kFe=a("code"),B5r=o("__init__()"),I5r=o(" (throws an error)."),N5r=l(),Rt=a("div"),F(Ix.$$.fragment),q5r=l(),SFe=a("p"),j5r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),D5r=l(),cc=a("p"),G5r=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),O5r=o("not"),V5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),X5r=o("from_pretrained()"),z5r=o(" to load the model weights."),W5r=l(),F(BT.$$.fragment),Q5r=l(),bo=a("div"),F(Nx.$$.fragment),U5r=l(),PFe=a("p"),H5r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),J5r=l(),cn=a("p"),Y5r=o("The model class to instantiate is selected based on the "),BFe=a("code"),K5r=o("model_type"),Z5r=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),e0r=o("pretrained_model_name_or_path"),o0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),r0r=o("pretrained_model_name_or_path"),t0r=o(":"),a0r=l(),fn=a("ul"),IT=a("li"),qFe=a("strong"),n0r=o("deit"),s0r=o(" \u2014 "),jJ=a("a"),l0r=o("DeiTForMaskedImageModeling"),i0r=o(" (DeiT model)"),d0r=l(),NT=a("li"),jFe=a("strong"),c0r=o("swin"),f0r=o(" \u2014 "),DJ=a("a"),m0r=o("SwinForMaskedImageModeling"),g0r=o(" (Swin Transformer model)"),h0r=l(),qT=a("li"),DFe=a("strong"),p0r=o("swinv2"),_0r=o(" \u2014 "),GJ=a("a"),u0r=o("Swinv2ForMaskedImageModeling"),b0r=o(" (Swin Transformer V2 model)"),v0r=l(),jT=a("li"),GFe=a("strong"),F0r=o("vit"),T0r=o(" \u2014 "),OJ=a("a"),M0r=o("ViTForMaskedImageModeling"),E0r=o(" (ViT model)"),C0r=l(),DT=a("p"),w0r=o("The model is set in evaluation mode by default using "),OFe=a("code"),A0r=o("model.eval()"),L0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=a("code"),y0r=o("model.train()"),x0r=l(),F(GT.$$.fragment),zUe=l(),fc=a("h2"),OT=a("a"),XFe=a("span"),F(qx.$$.fragment),$0r=l(),zFe=a("span"),k0r=o("AutoModelForObjectDetection"),WUe=l(),er=a("div"),F(jx.$$.fragment),S0r=l(),mc=a("p"),R0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),VJ=a("a"),P0r=o("from_pretrained()"),B0r=o(" class method or the "),XJ=a("a"),I0r=o("from_config()"),N0r=o(` class
method.`),q0r=l(),Dx=a("p"),j0r=o("This class cannot be instantiated directly using "),WFe=a("code"),D0r=o("__init__()"),G0r=o(" (throws an error)."),O0r=l(),Pt=a("div"),F(Gx.$$.fragment),V0r=l(),QFe=a("p"),X0r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),z0r=l(),gc=a("p"),W0r=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),Q0r=o("not"),U0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),H0r=o("from_pretrained()"),J0r=o(" to load the model weights."),Y0r=l(),F(VT.$$.fragment),K0r=l(),vo=a("div"),F(Ox.$$.fragment),Z0r=l(),HFe=a("p"),eFr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),oFr=l(),mn=a("p"),rFr=o("The model class to instantiate is selected based on the "),JFe=a("code"),tFr=o("model_type"),aFr=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),nFr=o("pretrained_model_name_or_path"),sFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),lFr=o("pretrained_model_name_or_path"),iFr=o(":"),dFr=l(),Vx=a("ul"),XT=a("li"),ZFe=a("strong"),cFr=o("detr"),fFr=o(" \u2014 "),WJ=a("a"),mFr=o("DetrForObjectDetection"),gFr=o(" (DETR model)"),hFr=l(),zT=a("li"),eTe=a("strong"),pFr=o("yolos"),_Fr=o(" \u2014 "),QJ=a("a"),uFr=o("YolosForObjectDetection"),bFr=o(" (YOLOS model)"),vFr=l(),WT=a("p"),FFr=o("The model is set in evaluation mode by default using "),oTe=a("code"),TFr=o("model.eval()"),MFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rTe=a("code"),EFr=o("model.train()"),CFr=l(),F(QT.$$.fragment),QUe=l(),hc=a("h2"),UT=a("a"),tTe=a("span"),F(Xx.$$.fragment),wFr=l(),aTe=a("span"),AFr=o("AutoModelForImageSegmentation"),UUe=l(),or=a("div"),F(zx.$$.fragment),LFr=l(),pc=a("p"),yFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UJ=a("a"),xFr=o("from_pretrained()"),$Fr=o(" class method or the "),HJ=a("a"),kFr=o("from_config()"),SFr=o(` class
method.`),RFr=l(),Wx=a("p"),PFr=o("This class cannot be instantiated directly using "),nTe=a("code"),BFr=o("__init__()"),IFr=o(" (throws an error)."),NFr=l(),Bt=a("div"),F(Qx.$$.fragment),qFr=l(),sTe=a("p"),jFr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),DFr=l(),_c=a("p"),GFr=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),OFr=o("not"),VFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),XFr=o("from_pretrained()"),zFr=o(" to load the model weights."),WFr=l(),F(HT.$$.fragment),QFr=l(),Fo=a("div"),F(Ux.$$.fragment),UFr=l(),iTe=a("p"),HFr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),JFr=l(),gn=a("p"),YFr=o("The model class to instantiate is selected based on the "),dTe=a("code"),KFr=o("model_type"),ZFr=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),eTr=o("pretrained_model_name_or_path"),oTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),rTr=o("pretrained_model_name_or_path"),tTr=o(":"),aTr=l(),mTe=a("ul"),JT=a("li"),gTe=a("strong"),nTr=o("detr"),sTr=o(" \u2014 "),YJ=a("a"),lTr=o("DetrForSegmentation"),iTr=o(" (DETR model)"),dTr=l(),YT=a("p"),cTr=o("The model is set in evaluation mode by default using "),hTe=a("code"),fTr=o("model.eval()"),mTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pTe=a("code"),gTr=o("model.train()"),hTr=l(),F(KT.$$.fragment),HUe=l(),uc=a("h2"),ZT=a("a"),_Te=a("span"),F(Hx.$$.fragment),pTr=l(),uTe=a("span"),_Tr=o("AutoModelForSemanticSegmentation"),JUe=l(),rr=a("div"),F(Jx.$$.fragment),uTr=l(),bc=a("p"),bTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),KJ=a("a"),vTr=o("from_pretrained()"),FTr=o(" class method or the "),ZJ=a("a"),TTr=o("from_config()"),MTr=o(` class
method.`),ETr=l(),Yx=a("p"),CTr=o("This class cannot be instantiated directly using "),bTe=a("code"),wTr=o("__init__()"),ATr=o(" (throws an error)."),LTr=l(),It=a("div"),F(Kx.$$.fragment),yTr=l(),vTe=a("p"),xTr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$Tr=l(),vc=a("p"),kTr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),STr=o("not"),RTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),PTr=o("from_pretrained()"),BTr=o(" to load the model weights."),ITr=l(),F(e8.$$.fragment),NTr=l(),To=a("div"),F(Zx.$$.fragment),qTr=l(),TTe=a("p"),jTr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),DTr=l(),hn=a("p"),GTr=o("The model class to instantiate is selected based on the "),MTe=a("code"),OTr=o("model_type"),VTr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),XTr=o("pretrained_model_name_or_path"),zTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),WTr=o("pretrained_model_name_or_path"),QTr=o(":"),UTr=l(),it=a("ul"),o8=a("li"),wTe=a("strong"),HTr=o("beit"),JTr=o(" \u2014 "),oY=a("a"),YTr=o("BeitForSemanticSegmentation"),KTr=o(" (BEiT model)"),ZTr=l(),r8=a("li"),ATe=a("strong"),e8r=o("data2vec-vision"),o8r=o(" \u2014 "),rY=a("a"),r8r=o("Data2VecVisionForSemanticSegmentation"),t8r=o(" (Data2VecVision model)"),a8r=l(),t8=a("li"),LTe=a("strong"),n8r=o("dpt"),s8r=o(" \u2014 "),tY=a("a"),l8r=o("DPTForSemanticSegmentation"),i8r=o(" (DPT model)"),d8r=l(),a8=a("li"),yTe=a("strong"),c8r=o("mobilevit"),f8r=o(" \u2014 "),aY=a("a"),m8r=o("MobileViTForSemanticSegmentation"),g8r=o(" (MobileViT model)"),h8r=l(),n8=a("li"),xTe=a("strong"),p8r=o("segformer"),_8r=o(" \u2014 "),nY=a("a"),u8r=o("SegformerForSemanticSegmentation"),b8r=o(" (SegFormer model)"),v8r=l(),s8=a("p"),F8r=o("The model is set in evaluation mode by default using "),$Te=a("code"),T8r=o("model.eval()"),M8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kTe=a("code"),E8r=o("model.train()"),C8r=l(),F(l8.$$.fragment),YUe=l(),Fc=a("h2"),i8=a("a"),STe=a("span"),F(e$.$$.fragment),w8r=l(),RTe=a("span"),A8r=o("AutoModelForInstanceSegmentation"),KUe=l(),tr=a("div"),F(o$.$$.fragment),L8r=l(),Tc=a("p"),y8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),sY=a("a"),x8r=o("from_pretrained()"),$8r=o(" class method or the "),lY=a("a"),k8r=o("from_config()"),S8r=o(` class
method.`),R8r=l(),r$=a("p"),P8r=o("This class cannot be instantiated directly using "),PTe=a("code"),B8r=o("__init__()"),I8r=o(" (throws an error)."),N8r=l(),Nt=a("div"),F(t$.$$.fragment),q8r=l(),BTe=a("p"),j8r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),D8r=l(),Mc=a("p"),G8r=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),O8r=o("not"),V8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),X8r=o("from_pretrained()"),z8r=o(" to load the model weights."),W8r=l(),F(d8.$$.fragment),Q8r=l(),Mo=a("div"),F(a$.$$.fragment),U8r=l(),NTe=a("p"),H8r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),J8r=l(),pn=a("p"),Y8r=o("The model class to instantiate is selected based on the "),qTe=a("code"),K8r=o("model_type"),Z8r=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),eMr=o("pretrained_model_name_or_path"),oMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),rMr=o("pretrained_model_name_or_path"),tMr=o(":"),aMr=l(),GTe=a("ul"),c8=a("li"),OTe=a("strong"),nMr=o("maskformer"),sMr=o(" \u2014 "),dY=a("a"),lMr=o("MaskFormerForInstanceSegmentation"),iMr=o(" (MaskFormer model)"),dMr=l(),f8=a("p"),cMr=o("The model is set in evaluation mode by default using "),VTe=a("code"),fMr=o("model.eval()"),mMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XTe=a("code"),gMr=o("model.train()"),hMr=l(),F(m8.$$.fragment),ZUe=l(),Ec=a("h2"),g8=a("a"),zTe=a("span"),F(n$.$$.fragment),pMr=l(),WTe=a("span"),_Mr=o("TFAutoModel"),eHe=l(),ar=a("div"),F(s$.$$.fragment),uMr=l(),Cc=a("p"),bMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cY=a("a"),vMr=o("from_pretrained()"),FMr=o(" class method or the "),fY=a("a"),TMr=o("from_config()"),MMr=o(` class
method.`),EMr=l(),l$=a("p"),CMr=o("This class cannot be instantiated directly using "),QTe=a("code"),wMr=o("__init__()"),AMr=o(" (throws an error)."),LMr=l(),qt=a("div"),F(i$.$$.fragment),yMr=l(),UTe=a("p"),xMr=o("Instantiates one of the base model classes of the library from a configuration."),$Mr=l(),wc=a("p"),kMr=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),SMr=o("not"),RMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),PMr=o("from_pretrained()"),BMr=o(" to load the model weights."),IMr=l(),F(h8.$$.fragment),NMr=l(),Rr=a("div"),F(d$.$$.fragment),qMr=l(),JTe=a("p"),jMr=o("Instantiate one of the base model classes of the library from a pretrained model."),DMr=l(),_n=a("p"),GMr=o("The model class to instantiate is selected based on the "),YTe=a("code"),OMr=o("model_type"),VMr=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),XMr=o("pretrained_model_name_or_path"),zMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),WMr=o("pretrained_model_name_or_path"),QMr=o(":"),UMr=l(),q=a("ul"),p8=a("li"),e8e=a("strong"),HMr=o("albert"),JMr=o(" \u2014 "),gY=a("a"),YMr=o("TFAlbertModel"),KMr=o(" (ALBERT model)"),ZMr=l(),_8=a("li"),o8e=a("strong"),eEr=o("bart"),oEr=o(" \u2014 "),hY=a("a"),rEr=o("TFBartModel"),tEr=o(" (BART model)"),aEr=l(),u8=a("li"),r8e=a("strong"),nEr=o("bert"),sEr=o(" \u2014 "),pY=a("a"),lEr=o("TFBertModel"),iEr=o(" (BERT model)"),dEr=l(),b8=a("li"),t8e=a("strong"),cEr=o("blenderbot"),fEr=o(" \u2014 "),_Y=a("a"),mEr=o("TFBlenderbotModel"),gEr=o(" (Blenderbot model)"),hEr=l(),v8=a("li"),a8e=a("strong"),pEr=o("blenderbot-small"),_Er=o(" \u2014 "),uY=a("a"),uEr=o("TFBlenderbotSmallModel"),bEr=o(" (BlenderbotSmall model)"),vEr=l(),F8=a("li"),n8e=a("strong"),FEr=o("camembert"),TEr=o(" \u2014 "),bY=a("a"),MEr=o("TFCamembertModel"),EEr=o(" (CamemBERT model)"),CEr=l(),T8=a("li"),s8e=a("strong"),wEr=o("clip"),AEr=o(" \u2014 "),vY=a("a"),LEr=o("TFCLIPModel"),yEr=o(" (CLIP model)"),xEr=l(),M8=a("li"),l8e=a("strong"),$Er=o("convbert"),kEr=o(" \u2014 "),FY=a("a"),SEr=o("TFConvBertModel"),REr=o(" (ConvBERT model)"),PEr=l(),E8=a("li"),i8e=a("strong"),BEr=o("convnext"),IEr=o(" \u2014 "),TY=a("a"),NEr=o("TFConvNextModel"),qEr=o(" (ConvNeXT model)"),jEr=l(),C8=a("li"),d8e=a("strong"),DEr=o("ctrl"),GEr=o(" \u2014 "),MY=a("a"),OEr=o("TFCTRLModel"),VEr=o(" (CTRL model)"),XEr=l(),w8=a("li"),c8e=a("strong"),zEr=o("data2vec-vision"),WEr=o(" \u2014 "),EY=a("a"),QEr=o("TFData2VecVisionModel"),UEr=o(" (Data2VecVision model)"),HEr=l(),A8=a("li"),f8e=a("strong"),JEr=o("deberta"),YEr=o(" \u2014 "),CY=a("a"),KEr=o("TFDebertaModel"),ZEr=o(" (DeBERTa model)"),eCr=l(),L8=a("li"),m8e=a("strong"),oCr=o("deberta-v2"),rCr=o(" \u2014 "),wY=a("a"),tCr=o("TFDebertaV2Model"),aCr=o(" (DeBERTa-v2 model)"),nCr=l(),y8=a("li"),g8e=a("strong"),sCr=o("deit"),lCr=o(" \u2014 "),AY=a("a"),iCr=o("TFDeiTModel"),dCr=o(" (DeiT model)"),cCr=l(),x8=a("li"),h8e=a("strong"),fCr=o("distilbert"),mCr=o(" \u2014 "),LY=a("a"),gCr=o("TFDistilBertModel"),hCr=o(" (DistilBERT model)"),pCr=l(),$8=a("li"),p8e=a("strong"),_Cr=o("dpr"),uCr=o(" \u2014 "),yY=a("a"),bCr=o("TFDPRQuestionEncoder"),vCr=o(" (DPR model)"),FCr=l(),k8=a("li"),_8e=a("strong"),TCr=o("electra"),MCr=o(" \u2014 "),xY=a("a"),ECr=o("TFElectraModel"),CCr=o(" (ELECTRA model)"),wCr=l(),S8=a("li"),u8e=a("strong"),ACr=o("flaubert"),LCr=o(" \u2014 "),$Y=a("a"),yCr=o("TFFlaubertModel"),xCr=o(" (FlauBERT model)"),$Cr=l(),il=a("li"),b8e=a("strong"),kCr=o("funnel"),SCr=o(" \u2014 "),kY=a("a"),RCr=o("TFFunnelModel"),PCr=o(" or "),SY=a("a"),BCr=o("TFFunnelBaseModel"),ICr=o(" (Funnel Transformer model)"),NCr=l(),R8=a("li"),v8e=a("strong"),qCr=o("gpt2"),jCr=o(" \u2014 "),RY=a("a"),DCr=o("TFGPT2Model"),GCr=o(" (OpenAI GPT-2 model)"),OCr=l(),P8=a("li"),F8e=a("strong"),VCr=o("gptj"),XCr=o(" \u2014 "),PY=a("a"),zCr=o("TFGPTJModel"),WCr=o(" (GPT-J model)"),QCr=l(),B8=a("li"),T8e=a("strong"),UCr=o("hubert"),HCr=o(" \u2014 "),BY=a("a"),JCr=o("TFHubertModel"),YCr=o(" (Hubert model)"),KCr=l(),I8=a("li"),M8e=a("strong"),ZCr=o("layoutlm"),e3r=o(" \u2014 "),IY=a("a"),o3r=o("TFLayoutLMModel"),r3r=o(" (LayoutLM model)"),t3r=l(),N8=a("li"),E8e=a("strong"),a3r=o("led"),n3r=o(" \u2014 "),NY=a("a"),s3r=o("TFLEDModel"),l3r=o(" (LED model)"),i3r=l(),q8=a("li"),C8e=a("strong"),d3r=o("longformer"),c3r=o(" \u2014 "),qY=a("a"),f3r=o("TFLongformerModel"),m3r=o(" (Longformer model)"),g3r=l(),j8=a("li"),w8e=a("strong"),h3r=o("lxmert"),p3r=o(" \u2014 "),jY=a("a"),_3r=o("TFLxmertModel"),u3r=o(" (LXMERT model)"),b3r=l(),D8=a("li"),A8e=a("strong"),v3r=o("marian"),F3r=o(" \u2014 "),DY=a("a"),T3r=o("TFMarianModel"),M3r=o(" (Marian model)"),E3r=l(),G8=a("li"),L8e=a("strong"),C3r=o("mbart"),w3r=o(" \u2014 "),GY=a("a"),A3r=o("TFMBartModel"),L3r=o(" (mBART model)"),y3r=l(),O8=a("li"),y8e=a("strong"),x3r=o("mobilebert"),$3r=o(" \u2014 "),OY=a("a"),k3r=o("TFMobileBertModel"),S3r=o(" (MobileBERT model)"),R3r=l(),V8=a("li"),x8e=a("strong"),P3r=o("mpnet"),B3r=o(" \u2014 "),VY=a("a"),I3r=o("TFMPNetModel"),N3r=o(" (MPNet model)"),q3r=l(),X8=a("li"),$8e=a("strong"),j3r=o("mt5"),D3r=o(" \u2014 "),XY=a("a"),G3r=o("TFMT5Model"),O3r=o(" (MT5 model)"),V3r=l(),z8=a("li"),k8e=a("strong"),X3r=o("openai-gpt"),z3r=o(" \u2014 "),zY=a("a"),W3r=o("TFOpenAIGPTModel"),Q3r=o(" (OpenAI GPT model)"),U3r=l(),W8=a("li"),S8e=a("strong"),H3r=o("opt"),J3r=o(" \u2014 "),WY=a("a"),Y3r=o("TFOPTModel"),K3r=o(" (OPT model)"),Z3r=l(),Q8=a("li"),R8e=a("strong"),ewr=o("owlvit"),owr=o(" \u2014 "),QY=a("a"),rwr=o("TFOwlViTModel"),twr=o(" (OWL-ViT model)"),awr=l(),U8=a("li"),P8e=a("strong"),nwr=o("pegasus"),swr=o(" \u2014 "),UY=a("a"),lwr=o("TFPegasusModel"),iwr=o(" (Pegasus model)"),dwr=l(),H8=a("li"),B8e=a("strong"),cwr=o("regnet"),fwr=o(" \u2014 "),HY=a("a"),mwr=o("TFRegNetModel"),gwr=o(" (RegNet model)"),hwr=l(),J8=a("li"),I8e=a("strong"),pwr=o("rembert"),_wr=o(" \u2014 "),JY=a("a"),uwr=o("TFRemBertModel"),bwr=o(" (RemBERT model)"),vwr=l(),Y8=a("li"),N8e=a("strong"),Fwr=o("resnet"),Twr=o(" \u2014 "),YY=a("a"),Mwr=o("TFResNetModel"),Ewr=o(" (ResNet model)"),Cwr=l(),K8=a("li"),q8e=a("strong"),wwr=o("roberta"),Awr=o(" \u2014 "),KY=a("a"),Lwr=o("TFRobertaModel"),ywr=o(" (RoBERTa model)"),xwr=l(),Z8=a("li"),j8e=a("strong"),$wr=o("roformer"),kwr=o(" \u2014 "),ZY=a("a"),Swr=o("TFRoFormerModel"),Rwr=o(" (RoFormer model)"),Pwr=l(),eM=a("li"),D8e=a("strong"),Bwr=o("segformer"),Iwr=o(" \u2014 "),eK=a("a"),Nwr=o("TFSegformerModel"),qwr=o(" (SegFormer model)"),jwr=l(),oM=a("li"),G8e=a("strong"),Dwr=o("speech_to_text"),Gwr=o(" \u2014 "),oK=a("a"),Owr=o("TFSpeech2TextModel"),Vwr=o(" (Speech2Text model)"),Xwr=l(),rM=a("li"),O8e=a("strong"),zwr=o("swin"),Wwr=o(" \u2014 "),rK=a("a"),Qwr=o("TFSwinModel"),Uwr=o(" (Swin Transformer model)"),Hwr=l(),tM=a("li"),V8e=a("strong"),Jwr=o("t5"),Ywr=o(" \u2014 "),tK=a("a"),Kwr=o("TFT5Model"),Zwr=o(" (T5 model)"),e6r=l(),aM=a("li"),X8e=a("strong"),o6r=o("tapas"),r6r=o(" \u2014 "),aK=a("a"),t6r=o("TFTapasModel"),a6r=o(" (TAPAS model)"),n6r=l(),nM=a("li"),z8e=a("strong"),s6r=o("transfo-xl"),l6r=o(" \u2014 "),nK=a("a"),i6r=o("TFTransfoXLModel"),d6r=o(" (Transformer-XL model)"),c6r=l(),sM=a("li"),W8e=a("strong"),f6r=o("vit"),m6r=o(" \u2014 "),sK=a("a"),g6r=o("TFViTModel"),h6r=o(" (ViT model)"),p6r=l(),lM=a("li"),Q8e=a("strong"),_6r=o("vit_mae"),u6r=o(" \u2014 "),lK=a("a"),b6r=o("TFViTMAEModel"),v6r=o(" (ViTMAE model)"),F6r=l(),iM=a("li"),U8e=a("strong"),T6r=o("wav2vec2"),M6r=o(" \u2014 "),iK=a("a"),E6r=o("TFWav2Vec2Model"),C6r=o(" (Wav2Vec2 model)"),w6r=l(),dM=a("li"),H8e=a("strong"),A6r=o("xlm"),L6r=o(" \u2014 "),dK=a("a"),y6r=o("TFXLMModel"),x6r=o(" (XLM model)"),$6r=l(),cM=a("li"),J8e=a("strong"),k6r=o("xlm-roberta"),S6r=o(" \u2014 "),cK=a("a"),R6r=o("TFXLMRobertaModel"),P6r=o(" (XLM-RoBERTa model)"),B6r=l(),fM=a("li"),Y8e=a("strong"),I6r=o("xlnet"),N6r=o(" \u2014 "),fK=a("a"),q6r=o("TFXLNetModel"),j6r=o(" (XLNet model)"),D6r=l(),F(mM.$$.fragment),oHe=l(),Ac=a("h2"),gM=a("a"),K8e=a("span"),F(c$.$$.fragment),G6r=l(),Z8e=a("span"),O6r=o("TFAutoModelForPreTraining"),rHe=l(),nr=a("div"),F(f$.$$.fragment),V6r=l(),Lc=a("p"),X6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mK=a("a"),z6r=o("from_pretrained()"),W6r=o(" class method or the "),gK=a("a"),Q6r=o("from_config()"),U6r=o(` class
method.`),H6r=l(),m$=a("p"),J6r=o("This class cannot be instantiated directly using "),eMe=a("code"),Y6r=o("__init__()"),K6r=o(" (throws an error)."),Z6r=l(),jt=a("div"),F(g$.$$.fragment),eAr=l(),oMe=a("p"),oAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rAr=l(),yc=a("p"),tAr=o(`Note:
Loading a model from its configuration file does `),rMe=a("strong"),aAr=o("not"),nAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),sAr=o("from_pretrained()"),lAr=o(" to load the model weights."),iAr=l(),F(hM.$$.fragment),dAr=l(),Pr=a("div"),F(h$.$$.fragment),cAr=l(),tMe=a("p"),fAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mAr=l(),un=a("p"),gAr=o("The model class to instantiate is selected based on the "),aMe=a("code"),hAr=o("model_type"),pAr=o(` property of the config object (either
passed as an argument or loaded from `),nMe=a("code"),_Ar=o("pretrained_model_name_or_path"),uAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=a("code"),bAr=o("pretrained_model_name_or_path"),vAr=o(":"),FAr=l(),se=a("ul"),pM=a("li"),lMe=a("strong"),TAr=o("albert"),MAr=o(" \u2014 "),pK=a("a"),EAr=o("TFAlbertForPreTraining"),CAr=o(" (ALBERT model)"),wAr=l(),_M=a("li"),iMe=a("strong"),AAr=o("bart"),LAr=o(" \u2014 "),_K=a("a"),yAr=o("TFBartForConditionalGeneration"),xAr=o(" (BART model)"),$Ar=l(),uM=a("li"),dMe=a("strong"),kAr=o("bert"),SAr=o(" \u2014 "),uK=a("a"),RAr=o("TFBertForPreTraining"),PAr=o(" (BERT model)"),BAr=l(),bM=a("li"),cMe=a("strong"),IAr=o("camembert"),NAr=o(" \u2014 "),bK=a("a"),qAr=o("TFCamembertForMaskedLM"),jAr=o(" (CamemBERT model)"),DAr=l(),vM=a("li"),fMe=a("strong"),GAr=o("ctrl"),OAr=o(" \u2014 "),vK=a("a"),VAr=o("TFCTRLLMHeadModel"),XAr=o(" (CTRL model)"),zAr=l(),FM=a("li"),mMe=a("strong"),WAr=o("distilbert"),QAr=o(" \u2014 "),FK=a("a"),UAr=o("TFDistilBertForMaskedLM"),HAr=o(" (DistilBERT model)"),JAr=l(),TM=a("li"),gMe=a("strong"),YAr=o("electra"),KAr=o(" \u2014 "),TK=a("a"),ZAr=o("TFElectraForPreTraining"),e7r=o(" (ELECTRA model)"),o7r=l(),MM=a("li"),hMe=a("strong"),r7r=o("flaubert"),t7r=o(" \u2014 "),MK=a("a"),a7r=o("TFFlaubertWithLMHeadModel"),n7r=o(" (FlauBERT model)"),s7r=l(),EM=a("li"),pMe=a("strong"),l7r=o("funnel"),i7r=o(" \u2014 "),EK=a("a"),d7r=o("TFFunnelForPreTraining"),c7r=o(" (Funnel Transformer model)"),f7r=l(),CM=a("li"),_Me=a("strong"),m7r=o("gpt2"),g7r=o(" \u2014 "),CK=a("a"),h7r=o("TFGPT2LMHeadModel"),p7r=o(" (OpenAI GPT-2 model)"),_7r=l(),wM=a("li"),uMe=a("strong"),u7r=o("layoutlm"),b7r=o(" \u2014 "),wK=a("a"),v7r=o("TFLayoutLMForMaskedLM"),F7r=o(" (LayoutLM model)"),T7r=l(),AM=a("li"),bMe=a("strong"),M7r=o("lxmert"),E7r=o(" \u2014 "),AK=a("a"),C7r=o("TFLxmertForPreTraining"),w7r=o(" (LXMERT model)"),A7r=l(),LM=a("li"),vMe=a("strong"),L7r=o("mobilebert"),y7r=o(" \u2014 "),LK=a("a"),x7r=o("TFMobileBertForPreTraining"),$7r=o(" (MobileBERT model)"),k7r=l(),yM=a("li"),FMe=a("strong"),S7r=o("mpnet"),R7r=o(" \u2014 "),yK=a("a"),P7r=o("TFMPNetForMaskedLM"),B7r=o(" (MPNet model)"),I7r=l(),xM=a("li"),TMe=a("strong"),N7r=o("openai-gpt"),q7r=o(" \u2014 "),xK=a("a"),j7r=o("TFOpenAIGPTLMHeadModel"),D7r=o(" (OpenAI GPT model)"),G7r=l(),$M=a("li"),MMe=a("strong"),O7r=o("roberta"),V7r=o(" \u2014 "),$K=a("a"),X7r=o("TFRobertaForMaskedLM"),z7r=o(" (RoBERTa model)"),W7r=l(),kM=a("li"),EMe=a("strong"),Q7r=o("t5"),U7r=o(" \u2014 "),kK=a("a"),H7r=o("TFT5ForConditionalGeneration"),J7r=o(" (T5 model)"),Y7r=l(),SM=a("li"),CMe=a("strong"),K7r=o("tapas"),Z7r=o(" \u2014 "),SK=a("a"),eLr=o("TFTapasForMaskedLM"),oLr=o(" (TAPAS model)"),rLr=l(),RM=a("li"),wMe=a("strong"),tLr=o("transfo-xl"),aLr=o(" \u2014 "),RK=a("a"),nLr=o("TFTransfoXLLMHeadModel"),sLr=o(" (Transformer-XL model)"),lLr=l(),PM=a("li"),AMe=a("strong"),iLr=o("vit_mae"),dLr=o(" \u2014 "),PK=a("a"),cLr=o("TFViTMAEForPreTraining"),fLr=o(" (ViTMAE model)"),mLr=l(),BM=a("li"),LMe=a("strong"),gLr=o("xlm"),hLr=o(" \u2014 "),BK=a("a"),pLr=o("TFXLMWithLMHeadModel"),_Lr=o(" (XLM model)"),uLr=l(),IM=a("li"),yMe=a("strong"),bLr=o("xlm-roberta"),vLr=o(" \u2014 "),IK=a("a"),FLr=o("TFXLMRobertaForMaskedLM"),TLr=o(" (XLM-RoBERTa model)"),MLr=l(),NM=a("li"),xMe=a("strong"),ELr=o("xlnet"),CLr=o(" \u2014 "),NK=a("a"),wLr=o("TFXLNetLMHeadModel"),ALr=o(" (XLNet model)"),LLr=l(),F(qM.$$.fragment),tHe=l(),xc=a("h2"),jM=a("a"),$Me=a("span"),F(p$.$$.fragment),yLr=l(),kMe=a("span"),xLr=o("TFAutoModelForCausalLM"),aHe=l(),sr=a("div"),F(_$.$$.fragment),$Lr=l(),$c=a("p"),kLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qK=a("a"),SLr=o("from_pretrained()"),RLr=o(" class method or the "),jK=a("a"),PLr=o("from_config()"),BLr=o(` class
method.`),ILr=l(),u$=a("p"),NLr=o("This class cannot be instantiated directly using "),SMe=a("code"),qLr=o("__init__()"),jLr=o(" (throws an error)."),DLr=l(),Dt=a("div"),F(b$.$$.fragment),GLr=l(),RMe=a("p"),OLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VLr=l(),kc=a("p"),XLr=o(`Note:
Loading a model from its configuration file does `),PMe=a("strong"),zLr=o("not"),WLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),QLr=o("from_pretrained()"),ULr=o(" to load the model weights."),HLr=l(),F(DM.$$.fragment),JLr=l(),Br=a("div"),F(v$.$$.fragment),YLr=l(),BMe=a("p"),KLr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZLr=l(),bn=a("p"),eyr=o("The model class to instantiate is selected based on the "),IMe=a("code"),oyr=o("model_type"),ryr=o(` property of the config object (either
passed as an argument or loaded from `),NMe=a("code"),tyr=o("pretrained_model_name_or_path"),ayr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=a("code"),nyr=o("pretrained_model_name_or_path"),syr=o(":"),lyr=l(),Me=a("ul"),GM=a("li"),jMe=a("strong"),iyr=o("bert"),dyr=o(" \u2014 "),GK=a("a"),cyr=o("TFBertLMHeadModel"),fyr=o(" (BERT model)"),myr=l(),OM=a("li"),DMe=a("strong"),gyr=o("camembert"),hyr=o(" \u2014 "),OK=a("a"),pyr=o("TFCamembertForCausalLM"),_yr=o(" (CamemBERT model)"),uyr=l(),VM=a("li"),GMe=a("strong"),byr=o("ctrl"),vyr=o(" \u2014 "),VK=a("a"),Fyr=o("TFCTRLLMHeadModel"),Tyr=o(" (CTRL model)"),Myr=l(),XM=a("li"),OMe=a("strong"),Eyr=o("gpt2"),Cyr=o(" \u2014 "),XK=a("a"),wyr=o("TFGPT2LMHeadModel"),Ayr=o(" (OpenAI GPT-2 model)"),Lyr=l(),zM=a("li"),VMe=a("strong"),yyr=o("gptj"),xyr=o(" \u2014 "),zK=a("a"),$yr=o("TFGPTJForCausalLM"),kyr=o(" (GPT-J model)"),Syr=l(),WM=a("li"),XMe=a("strong"),Ryr=o("openai-gpt"),Pyr=o(" \u2014 "),WK=a("a"),Byr=o("TFOpenAIGPTLMHeadModel"),Iyr=o(" (OpenAI GPT model)"),Nyr=l(),QM=a("li"),zMe=a("strong"),qyr=o("opt"),jyr=o(" \u2014 "),QK=a("a"),Dyr=o("TFOPTForCausalLM"),Gyr=o(" (OPT model)"),Oyr=l(),UM=a("li"),WMe=a("strong"),Vyr=o("rembert"),Xyr=o(" \u2014 "),UK=a("a"),zyr=o("TFRemBertForCausalLM"),Wyr=o(" (RemBERT model)"),Qyr=l(),HM=a("li"),QMe=a("strong"),Uyr=o("roberta"),Hyr=o(" \u2014 "),HK=a("a"),Jyr=o("TFRobertaForCausalLM"),Yyr=o(" (RoBERTa model)"),Kyr=l(),JM=a("li"),UMe=a("strong"),Zyr=o("roformer"),e9r=o(" \u2014 "),JK=a("a"),o9r=o("TFRoFormerForCausalLM"),r9r=o(" (RoFormer model)"),t9r=l(),YM=a("li"),HMe=a("strong"),a9r=o("transfo-xl"),n9r=o(" \u2014 "),YK=a("a"),s9r=o("TFTransfoXLLMHeadModel"),l9r=o(" (Transformer-XL model)"),i9r=l(),KM=a("li"),JMe=a("strong"),d9r=o("xlm"),c9r=o(" \u2014 "),KK=a("a"),f9r=o("TFXLMWithLMHeadModel"),m9r=o(" (XLM model)"),g9r=l(),ZM=a("li"),YMe=a("strong"),h9r=o("xlnet"),p9r=o(" \u2014 "),ZK=a("a"),_9r=o("TFXLNetLMHeadModel"),u9r=o(" (XLNet model)"),b9r=l(),F(eE.$$.fragment),nHe=l(),Sc=a("h2"),oE=a("a"),KMe=a("span"),F(F$.$$.fragment),v9r=l(),ZMe=a("span"),F9r=o("TFAutoModelForImageClassification"),sHe=l(),lr=a("div"),F(T$.$$.fragment),T9r=l(),Rc=a("p"),M9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eZ=a("a"),E9r=o("from_pretrained()"),C9r=o(" class method or the "),oZ=a("a"),w9r=o("from_config()"),A9r=o(` class
method.`),L9r=l(),M$=a("p"),y9r=o("This class cannot be instantiated directly using "),eEe=a("code"),x9r=o("__init__()"),$9r=o(" (throws an error)."),k9r=l(),Gt=a("div"),F(E$.$$.fragment),S9r=l(),oEe=a("p"),R9r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P9r=l(),Pc=a("p"),B9r=o(`Note:
Loading a model from its configuration file does `),rEe=a("strong"),I9r=o("not"),N9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),q9r=o("from_pretrained()"),j9r=o(" to load the model weights."),D9r=l(),F(rE.$$.fragment),G9r=l(),Ir=a("div"),F(C$.$$.fragment),O9r=l(),tEe=a("p"),V9r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),X9r=l(),vn=a("p"),z9r=o("The model class to instantiate is selected based on the "),aEe=a("code"),W9r=o("model_type"),Q9r=o(` property of the config object (either
passed as an argument or loaded from `),nEe=a("code"),U9r=o("pretrained_model_name_or_path"),H9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=a("code"),J9r=o("pretrained_model_name_or_path"),Y9r=o(":"),K9r=l(),Ve=a("ul"),tE=a("li"),lEe=a("strong"),Z9r=o("convnext"),exr=o(" \u2014 "),tZ=a("a"),oxr=o("TFConvNextForImageClassification"),rxr=o(" (ConvNeXT model)"),txr=l(),aE=a("li"),iEe=a("strong"),axr=o("data2vec-vision"),nxr=o(" \u2014 "),aZ=a("a"),sxr=o("TFData2VecVisionForImageClassification"),lxr=o(" (Data2VecVision model)"),ixr=l(),dl=a("li"),dEe=a("strong"),dxr=o("deit"),cxr=o(" \u2014 "),nZ=a("a"),fxr=o("TFDeiTForImageClassification"),mxr=o(" or "),sZ=a("a"),gxr=o("TFDeiTForImageClassificationWithTeacher"),hxr=o(" (DeiT model)"),pxr=l(),nE=a("li"),cEe=a("strong"),_xr=o("regnet"),uxr=o(" \u2014 "),lZ=a("a"),bxr=o("TFRegNetForImageClassification"),vxr=o(" (RegNet model)"),Fxr=l(),sE=a("li"),fEe=a("strong"),Txr=o("resnet"),Mxr=o(" \u2014 "),iZ=a("a"),Exr=o("TFResNetForImageClassification"),Cxr=o(" (ResNet model)"),wxr=l(),lE=a("li"),mEe=a("strong"),Axr=o("segformer"),Lxr=o(" \u2014 "),dZ=a("a"),yxr=o("TFSegformerForImageClassification"),xxr=o(" (SegFormer model)"),$xr=l(),iE=a("li"),gEe=a("strong"),kxr=o("swin"),Sxr=o(" \u2014 "),cZ=a("a"),Rxr=o("TFSwinForImageClassification"),Pxr=o(" (Swin Transformer model)"),Bxr=l(),dE=a("li"),hEe=a("strong"),Ixr=o("vit"),Nxr=o(" \u2014 "),fZ=a("a"),qxr=o("TFViTForImageClassification"),jxr=o(" (ViT model)"),Dxr=l(),F(cE.$$.fragment),lHe=l(),Bc=a("h2"),fE=a("a"),pEe=a("span"),F(w$.$$.fragment),Gxr=l(),_Ee=a("span"),Oxr=o("TFAutoModelForSemanticSegmentation"),iHe=l(),ir=a("div"),F(A$.$$.fragment),Vxr=l(),Ic=a("p"),Xxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),mZ=a("a"),zxr=o("from_pretrained()"),Wxr=o(" class method or the "),gZ=a("a"),Qxr=o("from_config()"),Uxr=o(` class
method.`),Hxr=l(),L$=a("p"),Jxr=o("This class cannot be instantiated directly using "),uEe=a("code"),Yxr=o("__init__()"),Kxr=o(" (throws an error)."),Zxr=l(),Ot=a("div"),F(y$.$$.fragment),e$r=l(),bEe=a("p"),o$r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),r$r=l(),Nc=a("p"),t$r=o(`Note:
Loading a model from its configuration file does `),vEe=a("strong"),a$r=o("not"),n$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hZ=a("a"),s$r=o("from_pretrained()"),l$r=o(" to load the model weights."),i$r=l(),F(mE.$$.fragment),d$r=l(),Nr=a("div"),F(x$.$$.fragment),c$r=l(),FEe=a("p"),f$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),m$r=l(),Fn=a("p"),g$r=o("The model class to instantiate is selected based on the "),TEe=a("code"),h$r=o("model_type"),p$r=o(` property of the config object (either
passed as an argument or loaded from `),MEe=a("code"),_$r=o("pretrained_model_name_or_path"),u$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=a("code"),b$r=o("pretrained_model_name_or_path"),v$r=o(":"),F$r=l(),$$=a("ul"),gE=a("li"),CEe=a("strong"),T$r=o("data2vec-vision"),M$r=o(" \u2014 "),pZ=a("a"),E$r=o("TFData2VecVisionForSemanticSegmentation"),C$r=o(" (Data2VecVision model)"),w$r=l(),hE=a("li"),wEe=a("strong"),A$r=o("segformer"),L$r=o(" \u2014 "),_Z=a("a"),y$r=o("TFSegformerForSemanticSegmentation"),x$r=o(" (SegFormer model)"),$$r=l(),F(pE.$$.fragment),dHe=l(),qc=a("h2"),_E=a("a"),AEe=a("span"),F(k$.$$.fragment),k$r=l(),LEe=a("span"),S$r=o("TFAutoModelForMaskedLM"),cHe=l(),dr=a("div"),F(S$.$$.fragment),R$r=l(),jc=a("p"),P$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uZ=a("a"),B$r=o("from_pretrained()"),I$r=o(" class method or the "),bZ=a("a"),N$r=o("from_config()"),q$r=o(` class
method.`),j$r=l(),R$=a("p"),D$r=o("This class cannot be instantiated directly using "),yEe=a("code"),G$r=o("__init__()"),O$r=o(" (throws an error)."),V$r=l(),Vt=a("div"),F(P$.$$.fragment),X$r=l(),xEe=a("p"),z$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),W$r=l(),Dc=a("p"),Q$r=o(`Note:
Loading a model from its configuration file does `),$Ee=a("strong"),U$r=o("not"),H$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=a("a"),J$r=o("from_pretrained()"),Y$r=o(" to load the model weights."),K$r=l(),F(uE.$$.fragment),Z$r=l(),qr=a("div"),F(B$.$$.fragment),ekr=l(),kEe=a("p"),okr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rkr=l(),Tn=a("p"),tkr=o("The model class to instantiate is selected based on the "),SEe=a("code"),akr=o("model_type"),nkr=o(` property of the config object (either
passed as an argument or loaded from `),REe=a("code"),skr=o("pretrained_model_name_or_path"),lkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=a("code"),ikr=o("pretrained_model_name_or_path"),dkr=o(":"),ckr=l(),de=a("ul"),bE=a("li"),BEe=a("strong"),fkr=o("albert"),mkr=o(" \u2014 "),FZ=a("a"),gkr=o("TFAlbertForMaskedLM"),hkr=o(" (ALBERT model)"),pkr=l(),vE=a("li"),IEe=a("strong"),_kr=o("bert"),ukr=o(" \u2014 "),TZ=a("a"),bkr=o("TFBertForMaskedLM"),vkr=o(" (BERT model)"),Fkr=l(),FE=a("li"),NEe=a("strong"),Tkr=o("camembert"),Mkr=o(" \u2014 "),MZ=a("a"),Ekr=o("TFCamembertForMaskedLM"),Ckr=o(" (CamemBERT model)"),wkr=l(),TE=a("li"),qEe=a("strong"),Akr=o("convbert"),Lkr=o(" \u2014 "),EZ=a("a"),ykr=o("TFConvBertForMaskedLM"),xkr=o(" (ConvBERT model)"),$kr=l(),ME=a("li"),jEe=a("strong"),kkr=o("deberta"),Skr=o(" \u2014 "),CZ=a("a"),Rkr=o("TFDebertaForMaskedLM"),Pkr=o(" (DeBERTa model)"),Bkr=l(),EE=a("li"),DEe=a("strong"),Ikr=o("deberta-v2"),Nkr=o(" \u2014 "),wZ=a("a"),qkr=o("TFDebertaV2ForMaskedLM"),jkr=o(" (DeBERTa-v2 model)"),Dkr=l(),CE=a("li"),GEe=a("strong"),Gkr=o("distilbert"),Okr=o(" \u2014 "),AZ=a("a"),Vkr=o("TFDistilBertForMaskedLM"),Xkr=o(" (DistilBERT model)"),zkr=l(),wE=a("li"),OEe=a("strong"),Wkr=o("electra"),Qkr=o(" \u2014 "),LZ=a("a"),Ukr=o("TFElectraForMaskedLM"),Hkr=o(" (ELECTRA model)"),Jkr=l(),AE=a("li"),VEe=a("strong"),Ykr=o("flaubert"),Kkr=o(" \u2014 "),yZ=a("a"),Zkr=o("TFFlaubertWithLMHeadModel"),eSr=o(" (FlauBERT model)"),oSr=l(),LE=a("li"),XEe=a("strong"),rSr=o("funnel"),tSr=o(" \u2014 "),xZ=a("a"),aSr=o("TFFunnelForMaskedLM"),nSr=o(" (Funnel Transformer model)"),sSr=l(),yE=a("li"),zEe=a("strong"),lSr=o("layoutlm"),iSr=o(" \u2014 "),$Z=a("a"),dSr=o("TFLayoutLMForMaskedLM"),cSr=o(" (LayoutLM model)"),fSr=l(),xE=a("li"),WEe=a("strong"),mSr=o("longformer"),gSr=o(" \u2014 "),kZ=a("a"),hSr=o("TFLongformerForMaskedLM"),pSr=o(" (Longformer model)"),_Sr=l(),$E=a("li"),QEe=a("strong"),uSr=o("mobilebert"),bSr=o(" \u2014 "),SZ=a("a"),vSr=o("TFMobileBertForMaskedLM"),FSr=o(" (MobileBERT model)"),TSr=l(),kE=a("li"),UEe=a("strong"),MSr=o("mpnet"),ESr=o(" \u2014 "),RZ=a("a"),CSr=o("TFMPNetForMaskedLM"),wSr=o(" (MPNet model)"),ASr=l(),SE=a("li"),HEe=a("strong"),LSr=o("rembert"),ySr=o(" \u2014 "),PZ=a("a"),xSr=o("TFRemBertForMaskedLM"),$Sr=o(" (RemBERT model)"),kSr=l(),RE=a("li"),JEe=a("strong"),SSr=o("roberta"),RSr=o(" \u2014 "),BZ=a("a"),PSr=o("TFRobertaForMaskedLM"),BSr=o(" (RoBERTa model)"),ISr=l(),PE=a("li"),YEe=a("strong"),NSr=o("roformer"),qSr=o(" \u2014 "),IZ=a("a"),jSr=o("TFRoFormerForMaskedLM"),DSr=o(" (RoFormer model)"),GSr=l(),BE=a("li"),KEe=a("strong"),OSr=o("tapas"),VSr=o(" \u2014 "),NZ=a("a"),XSr=o("TFTapasForMaskedLM"),zSr=o(" (TAPAS model)"),WSr=l(),IE=a("li"),ZEe=a("strong"),QSr=o("xlm"),USr=o(" \u2014 "),qZ=a("a"),HSr=o("TFXLMWithLMHeadModel"),JSr=o(" (XLM model)"),YSr=l(),NE=a("li"),eCe=a("strong"),KSr=o("xlm-roberta"),ZSr=o(" \u2014 "),jZ=a("a"),eRr=o("TFXLMRobertaForMaskedLM"),oRr=o(" (XLM-RoBERTa model)"),rRr=l(),F(qE.$$.fragment),fHe=l(),Gc=a("h2"),jE=a("a"),oCe=a("span"),F(I$.$$.fragment),tRr=l(),rCe=a("span"),aRr=o("TFAutoModelForSeq2SeqLM"),mHe=l(),cr=a("div"),F(N$.$$.fragment),nRr=l(),Oc=a("p"),sRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DZ=a("a"),lRr=o("from_pretrained()"),iRr=o(" class method or the "),GZ=a("a"),dRr=o("from_config()"),cRr=o(` class
method.`),fRr=l(),q$=a("p"),mRr=o("This class cannot be instantiated directly using "),tCe=a("code"),gRr=o("__init__()"),hRr=o(" (throws an error)."),pRr=l(),Xt=a("div"),F(j$.$$.fragment),_Rr=l(),aCe=a("p"),uRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bRr=l(),Vc=a("p"),vRr=o(`Note:
Loading a model from its configuration file does `),nCe=a("strong"),FRr=o("not"),TRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),MRr=o("from_pretrained()"),ERr=o(" to load the model weights."),CRr=l(),F(DE.$$.fragment),wRr=l(),jr=a("div"),F(D$.$$.fragment),ARr=l(),sCe=a("p"),LRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yRr=l(),Mn=a("p"),xRr=o("The model class to instantiate is selected based on the "),lCe=a("code"),$Rr=o("model_type"),kRr=o(` property of the config object (either
passed as an argument or loaded from `),iCe=a("code"),SRr=o("pretrained_model_name_or_path"),RRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=a("code"),PRr=o("pretrained_model_name_or_path"),BRr=o(":"),IRr=l(),ye=a("ul"),GE=a("li"),cCe=a("strong"),NRr=o("bart"),qRr=o(" \u2014 "),VZ=a("a"),jRr=o("TFBartForConditionalGeneration"),DRr=o(" (BART model)"),GRr=l(),OE=a("li"),fCe=a("strong"),ORr=o("blenderbot"),VRr=o(" \u2014 "),XZ=a("a"),XRr=o("TFBlenderbotForConditionalGeneration"),zRr=o(" (Blenderbot model)"),WRr=l(),VE=a("li"),mCe=a("strong"),QRr=o("blenderbot-small"),URr=o(" \u2014 "),zZ=a("a"),HRr=o("TFBlenderbotSmallForConditionalGeneration"),JRr=o(" (BlenderbotSmall model)"),YRr=l(),XE=a("li"),gCe=a("strong"),KRr=o("encoder-decoder"),ZRr=o(" \u2014 "),WZ=a("a"),ePr=o("TFEncoderDecoderModel"),oPr=o(" (Encoder decoder model)"),rPr=l(),zE=a("li"),hCe=a("strong"),tPr=o("led"),aPr=o(" \u2014 "),QZ=a("a"),nPr=o("TFLEDForConditionalGeneration"),sPr=o(" (LED model)"),lPr=l(),WE=a("li"),pCe=a("strong"),iPr=o("marian"),dPr=o(" \u2014 "),UZ=a("a"),cPr=o("TFMarianMTModel"),fPr=o(" (Marian model)"),mPr=l(),QE=a("li"),_Ce=a("strong"),gPr=o("mbart"),hPr=o(" \u2014 "),HZ=a("a"),pPr=o("TFMBartForConditionalGeneration"),_Pr=o(" (mBART model)"),uPr=l(),UE=a("li"),uCe=a("strong"),bPr=o("mt5"),vPr=o(" \u2014 "),JZ=a("a"),FPr=o("TFMT5ForConditionalGeneration"),TPr=o(" (MT5 model)"),MPr=l(),HE=a("li"),bCe=a("strong"),EPr=o("pegasus"),CPr=o(" \u2014 "),YZ=a("a"),wPr=o("TFPegasusForConditionalGeneration"),APr=o(" (Pegasus model)"),LPr=l(),JE=a("li"),vCe=a("strong"),yPr=o("t5"),xPr=o(" \u2014 "),KZ=a("a"),$Pr=o("TFT5ForConditionalGeneration"),kPr=o(" (T5 model)"),SPr=l(),F(YE.$$.fragment),gHe=l(),Xc=a("h2"),KE=a("a"),FCe=a("span"),F(G$.$$.fragment),RPr=l(),TCe=a("span"),PPr=o("TFAutoModelForSequenceClassification"),hHe=l(),fr=a("div"),F(O$.$$.fragment),BPr=l(),zc=a("p"),IPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZZ=a("a"),NPr=o("from_pretrained()"),qPr=o(" class method or the "),eee=a("a"),jPr=o("from_config()"),DPr=o(` class
method.`),GPr=l(),V$=a("p"),OPr=o("This class cannot be instantiated directly using "),MCe=a("code"),VPr=o("__init__()"),XPr=o(" (throws an error)."),zPr=l(),zt=a("div"),F(X$.$$.fragment),WPr=l(),ECe=a("p"),QPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UPr=l(),Wc=a("p"),HPr=o(`Note:
Loading a model from its configuration file does `),CCe=a("strong"),JPr=o("not"),YPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),KPr=o("from_pretrained()"),ZPr=o(" to load the model weights."),eBr=l(),F(ZE.$$.fragment),oBr=l(),Dr=a("div"),F(z$.$$.fragment),rBr=l(),wCe=a("p"),tBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aBr=l(),En=a("p"),nBr=o("The model class to instantiate is selected based on the "),ACe=a("code"),sBr=o("model_type"),lBr=o(` property of the config object (either
passed as an argument or loaded from `),LCe=a("code"),iBr=o("pretrained_model_name_or_path"),dBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=a("code"),cBr=o("pretrained_model_name_or_path"),fBr=o(":"),mBr=l(),te=a("ul"),eC=a("li"),xCe=a("strong"),gBr=o("albert"),hBr=o(" \u2014 "),ree=a("a"),pBr=o("TFAlbertForSequenceClassification"),_Br=o(" (ALBERT model)"),uBr=l(),oC=a("li"),$Ce=a("strong"),bBr=o("bert"),vBr=o(" \u2014 "),tee=a("a"),FBr=o("TFBertForSequenceClassification"),TBr=o(" (BERT model)"),MBr=l(),rC=a("li"),kCe=a("strong"),EBr=o("camembert"),CBr=o(" \u2014 "),aee=a("a"),wBr=o("TFCamembertForSequenceClassification"),ABr=o(" (CamemBERT model)"),LBr=l(),tC=a("li"),SCe=a("strong"),yBr=o("convbert"),xBr=o(" \u2014 "),nee=a("a"),$Br=o("TFConvBertForSequenceClassification"),kBr=o(" (ConvBERT model)"),SBr=l(),aC=a("li"),RCe=a("strong"),RBr=o("ctrl"),PBr=o(" \u2014 "),see=a("a"),BBr=o("TFCTRLForSequenceClassification"),IBr=o(" (CTRL model)"),NBr=l(),nC=a("li"),PCe=a("strong"),qBr=o("deberta"),jBr=o(" \u2014 "),lee=a("a"),DBr=o("TFDebertaForSequenceClassification"),GBr=o(" (DeBERTa model)"),OBr=l(),sC=a("li"),BCe=a("strong"),VBr=o("deberta-v2"),XBr=o(" \u2014 "),iee=a("a"),zBr=o("TFDebertaV2ForSequenceClassification"),WBr=o(" (DeBERTa-v2 model)"),QBr=l(),lC=a("li"),ICe=a("strong"),UBr=o("distilbert"),HBr=o(" \u2014 "),dee=a("a"),JBr=o("TFDistilBertForSequenceClassification"),YBr=o(" (DistilBERT model)"),KBr=l(),iC=a("li"),NCe=a("strong"),ZBr=o("electra"),eIr=o(" \u2014 "),cee=a("a"),oIr=o("TFElectraForSequenceClassification"),rIr=o(" (ELECTRA model)"),tIr=l(),dC=a("li"),qCe=a("strong"),aIr=o("flaubert"),nIr=o(" \u2014 "),fee=a("a"),sIr=o("TFFlaubertForSequenceClassification"),lIr=o(" (FlauBERT model)"),iIr=l(),cC=a("li"),jCe=a("strong"),dIr=o("funnel"),cIr=o(" \u2014 "),mee=a("a"),fIr=o("TFFunnelForSequenceClassification"),mIr=o(" (Funnel Transformer model)"),gIr=l(),fC=a("li"),DCe=a("strong"),hIr=o("gpt2"),pIr=o(" \u2014 "),gee=a("a"),_Ir=o("TFGPT2ForSequenceClassification"),uIr=o(" (OpenAI GPT-2 model)"),bIr=l(),mC=a("li"),GCe=a("strong"),vIr=o("gptj"),FIr=o(" \u2014 "),hee=a("a"),TIr=o("TFGPTJForSequenceClassification"),MIr=o(" (GPT-J model)"),EIr=l(),gC=a("li"),OCe=a("strong"),CIr=o("layoutlm"),wIr=o(" \u2014 "),pee=a("a"),AIr=o("TFLayoutLMForSequenceClassification"),LIr=o(" (LayoutLM model)"),yIr=l(),hC=a("li"),VCe=a("strong"),xIr=o("longformer"),$Ir=o(" \u2014 "),_ee=a("a"),kIr=o("TFLongformerForSequenceClassification"),SIr=o(" (Longformer model)"),RIr=l(),pC=a("li"),XCe=a("strong"),PIr=o("mobilebert"),BIr=o(" \u2014 "),uee=a("a"),IIr=o("TFMobileBertForSequenceClassification"),NIr=o(" (MobileBERT model)"),qIr=l(),_C=a("li"),zCe=a("strong"),jIr=o("mpnet"),DIr=o(" \u2014 "),bee=a("a"),GIr=o("TFMPNetForSequenceClassification"),OIr=o(" (MPNet model)"),VIr=l(),uC=a("li"),WCe=a("strong"),XIr=o("openai-gpt"),zIr=o(" \u2014 "),vee=a("a"),WIr=o("TFOpenAIGPTForSequenceClassification"),QIr=o(" (OpenAI GPT model)"),UIr=l(),bC=a("li"),QCe=a("strong"),HIr=o("rembert"),JIr=o(" \u2014 "),Fee=a("a"),YIr=o("TFRemBertForSequenceClassification"),KIr=o(" (RemBERT model)"),ZIr=l(),vC=a("li"),UCe=a("strong"),eNr=o("roberta"),oNr=o(" \u2014 "),Tee=a("a"),rNr=o("TFRobertaForSequenceClassification"),tNr=o(" (RoBERTa model)"),aNr=l(),FC=a("li"),HCe=a("strong"),nNr=o("roformer"),sNr=o(" \u2014 "),Mee=a("a"),lNr=o("TFRoFormerForSequenceClassification"),iNr=o(" (RoFormer model)"),dNr=l(),TC=a("li"),JCe=a("strong"),cNr=o("tapas"),fNr=o(" \u2014 "),Eee=a("a"),mNr=o("TFTapasForSequenceClassification"),gNr=o(" (TAPAS model)"),hNr=l(),MC=a("li"),YCe=a("strong"),pNr=o("transfo-xl"),_Nr=o(" \u2014 "),Cee=a("a"),uNr=o("TFTransfoXLForSequenceClassification"),bNr=o(" (Transformer-XL model)"),vNr=l(),EC=a("li"),KCe=a("strong"),FNr=o("xlm"),TNr=o(" \u2014 "),wee=a("a"),MNr=o("TFXLMForSequenceClassification"),ENr=o(" (XLM model)"),CNr=l(),CC=a("li"),ZCe=a("strong"),wNr=o("xlm-roberta"),ANr=o(" \u2014 "),Aee=a("a"),LNr=o("TFXLMRobertaForSequenceClassification"),yNr=o(" (XLM-RoBERTa model)"),xNr=l(),wC=a("li"),e3e=a("strong"),$Nr=o("xlnet"),kNr=o(" \u2014 "),Lee=a("a"),SNr=o("TFXLNetForSequenceClassification"),RNr=o(" (XLNet model)"),PNr=l(),F(AC.$$.fragment),pHe=l(),Qc=a("h2"),LC=a("a"),o3e=a("span"),F(W$.$$.fragment),BNr=l(),r3e=a("span"),INr=o("TFAutoModelForMultipleChoice"),_He=l(),mr=a("div"),F(Q$.$$.fragment),NNr=l(),Uc=a("p"),qNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yee=a("a"),jNr=o("from_pretrained()"),DNr=o(" class method or the "),xee=a("a"),GNr=o("from_config()"),ONr=o(` class
method.`),VNr=l(),U$=a("p"),XNr=o("This class cannot be instantiated directly using "),t3e=a("code"),zNr=o("__init__()"),WNr=o(" (throws an error)."),QNr=l(),Wt=a("div"),F(H$.$$.fragment),UNr=l(),a3e=a("p"),HNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JNr=l(),Hc=a("p"),YNr=o(`Note:
Loading a model from its configuration file does `),n3e=a("strong"),KNr=o("not"),ZNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=a("a"),eqr=o("from_pretrained()"),oqr=o(" to load the model weights."),rqr=l(),F(yC.$$.fragment),tqr=l(),Gr=a("div"),F(J$.$$.fragment),aqr=l(),s3e=a("p"),nqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sqr=l(),Cn=a("p"),lqr=o("The model class to instantiate is selected based on the "),l3e=a("code"),iqr=o("model_type"),dqr=o(` property of the config object (either
passed as an argument or loaded from `),i3e=a("code"),cqr=o("pretrained_model_name_or_path"),fqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=a("code"),mqr=o("pretrained_model_name_or_path"),gqr=o(":"),hqr=l(),ve=a("ul"),xC=a("li"),c3e=a("strong"),pqr=o("albert"),_qr=o(" \u2014 "),kee=a("a"),uqr=o("TFAlbertForMultipleChoice"),bqr=o(" (ALBERT model)"),vqr=l(),$C=a("li"),f3e=a("strong"),Fqr=o("bert"),Tqr=o(" \u2014 "),See=a("a"),Mqr=o("TFBertForMultipleChoice"),Eqr=o(" (BERT model)"),Cqr=l(),kC=a("li"),m3e=a("strong"),wqr=o("camembert"),Aqr=o(" \u2014 "),Ree=a("a"),Lqr=o("TFCamembertForMultipleChoice"),yqr=o(" (CamemBERT model)"),xqr=l(),SC=a("li"),g3e=a("strong"),$qr=o("convbert"),kqr=o(" \u2014 "),Pee=a("a"),Sqr=o("TFConvBertForMultipleChoice"),Rqr=o(" (ConvBERT model)"),Pqr=l(),RC=a("li"),h3e=a("strong"),Bqr=o("distilbert"),Iqr=o(" \u2014 "),Bee=a("a"),Nqr=o("TFDistilBertForMultipleChoice"),qqr=o(" (DistilBERT model)"),jqr=l(),PC=a("li"),p3e=a("strong"),Dqr=o("electra"),Gqr=o(" \u2014 "),Iee=a("a"),Oqr=o("TFElectraForMultipleChoice"),Vqr=o(" (ELECTRA model)"),Xqr=l(),BC=a("li"),_3e=a("strong"),zqr=o("flaubert"),Wqr=o(" \u2014 "),Nee=a("a"),Qqr=o("TFFlaubertForMultipleChoice"),Uqr=o(" (FlauBERT model)"),Hqr=l(),IC=a("li"),u3e=a("strong"),Jqr=o("funnel"),Yqr=o(" \u2014 "),qee=a("a"),Kqr=o("TFFunnelForMultipleChoice"),Zqr=o(" (Funnel Transformer model)"),ejr=l(),NC=a("li"),b3e=a("strong"),ojr=o("longformer"),rjr=o(" \u2014 "),jee=a("a"),tjr=o("TFLongformerForMultipleChoice"),ajr=o(" (Longformer model)"),njr=l(),qC=a("li"),v3e=a("strong"),sjr=o("mobilebert"),ljr=o(" \u2014 "),Dee=a("a"),ijr=o("TFMobileBertForMultipleChoice"),djr=o(" (MobileBERT model)"),cjr=l(),jC=a("li"),F3e=a("strong"),fjr=o("mpnet"),mjr=o(" \u2014 "),Gee=a("a"),gjr=o("TFMPNetForMultipleChoice"),hjr=o(" (MPNet model)"),pjr=l(),DC=a("li"),T3e=a("strong"),_jr=o("rembert"),ujr=o(" \u2014 "),Oee=a("a"),bjr=o("TFRemBertForMultipleChoice"),vjr=o(" (RemBERT model)"),Fjr=l(),GC=a("li"),M3e=a("strong"),Tjr=o("roberta"),Mjr=o(" \u2014 "),Vee=a("a"),Ejr=o("TFRobertaForMultipleChoice"),Cjr=o(" (RoBERTa model)"),wjr=l(),OC=a("li"),E3e=a("strong"),Ajr=o("roformer"),Ljr=o(" \u2014 "),Xee=a("a"),yjr=o("TFRoFormerForMultipleChoice"),xjr=o(" (RoFormer model)"),$jr=l(),VC=a("li"),C3e=a("strong"),kjr=o("xlm"),Sjr=o(" \u2014 "),zee=a("a"),Rjr=o("TFXLMForMultipleChoice"),Pjr=o(" (XLM model)"),Bjr=l(),XC=a("li"),w3e=a("strong"),Ijr=o("xlm-roberta"),Njr=o(" \u2014 "),Wee=a("a"),qjr=o("TFXLMRobertaForMultipleChoice"),jjr=o(" (XLM-RoBERTa model)"),Djr=l(),zC=a("li"),A3e=a("strong"),Gjr=o("xlnet"),Ojr=o(" \u2014 "),Qee=a("a"),Vjr=o("TFXLNetForMultipleChoice"),Xjr=o(" (XLNet model)"),zjr=l(),F(WC.$$.fragment),uHe=l(),Jc=a("h2"),QC=a("a"),L3e=a("span"),F(Y$.$$.fragment),Wjr=l(),y3e=a("span"),Qjr=o("TFAutoModelForNextSentencePrediction"),bHe=l(),gr=a("div"),F(K$.$$.fragment),Ujr=l(),Yc=a("p"),Hjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Uee=a("a"),Jjr=o("from_pretrained()"),Yjr=o(" class method or the "),Hee=a("a"),Kjr=o("from_config()"),Zjr=o(` class
method.`),eDr=l(),Z$=a("p"),oDr=o("This class cannot be instantiated directly using "),x3e=a("code"),rDr=o("__init__()"),tDr=o(" (throws an error)."),aDr=l(),Qt=a("div"),F(ek.$$.fragment),nDr=l(),$3e=a("p"),sDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lDr=l(),Kc=a("p"),iDr=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),dDr=o("not"),cDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jee=a("a"),fDr=o("from_pretrained()"),mDr=o(" to load the model weights."),gDr=l(),F(UC.$$.fragment),hDr=l(),Or=a("div"),F(ok.$$.fragment),pDr=l(),S3e=a("p"),_Dr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uDr=l(),wn=a("p"),bDr=o("The model class to instantiate is selected based on the "),R3e=a("code"),vDr=o("model_type"),FDr=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),TDr=o("pretrained_model_name_or_path"),MDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),EDr=o("pretrained_model_name_or_path"),CDr=o(":"),wDr=l(),rk=a("ul"),HC=a("li"),I3e=a("strong"),ADr=o("bert"),LDr=o(" \u2014 "),Yee=a("a"),yDr=o("TFBertForNextSentencePrediction"),xDr=o(" (BERT model)"),$Dr=l(),JC=a("li"),N3e=a("strong"),kDr=o("mobilebert"),SDr=o(" \u2014 "),Kee=a("a"),RDr=o("TFMobileBertForNextSentencePrediction"),PDr=o(" (MobileBERT model)"),BDr=l(),F(YC.$$.fragment),vHe=l(),Zc=a("h2"),KC=a("a"),q3e=a("span"),F(tk.$$.fragment),IDr=l(),j3e=a("span"),NDr=o("TFAutoModelForTableQuestionAnswering"),FHe=l(),hr=a("div"),F(ak.$$.fragment),qDr=l(),ef=a("p"),jDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Zee=a("a"),DDr=o("from_pretrained()"),GDr=o(" class method or the "),eoe=a("a"),ODr=o("from_config()"),VDr=o(` class
method.`),XDr=l(),nk=a("p"),zDr=o("This class cannot be instantiated directly using "),D3e=a("code"),WDr=o("__init__()"),QDr=o(" (throws an error)."),UDr=l(),Ut=a("div"),F(sk.$$.fragment),HDr=l(),G3e=a("p"),JDr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),YDr=l(),of=a("p"),KDr=o(`Note:
Loading a model from its configuration file does `),O3e=a("strong"),ZDr=o("not"),eGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=a("a"),oGr=o("from_pretrained()"),rGr=o(" to load the model weights."),tGr=l(),F(ZC.$$.fragment),aGr=l(),Vr=a("div"),F(lk.$$.fragment),nGr=l(),V3e=a("p"),sGr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lGr=l(),An=a("p"),iGr=o("The model class to instantiate is selected based on the "),X3e=a("code"),dGr=o("model_type"),cGr=o(` property of the config object (either
passed as an argument or loaded from `),z3e=a("code"),fGr=o("pretrained_model_name_or_path"),mGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=a("code"),gGr=o("pretrained_model_name_or_path"),hGr=o(":"),pGr=l(),Q3e=a("ul"),e3=a("li"),U3e=a("strong"),_Gr=o("tapas"),uGr=o(" \u2014 "),roe=a("a"),bGr=o("TFTapasForQuestionAnswering"),vGr=o(" (TAPAS model)"),FGr=l(),F(o3.$$.fragment),THe=l(),rf=a("h2"),r3=a("a"),H3e=a("span"),F(ik.$$.fragment),TGr=l(),J3e=a("span"),MGr=o("TFAutoModelForTokenClassification"),MHe=l(),pr=a("div"),F(dk.$$.fragment),EGr=l(),tf=a("p"),CGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),toe=a("a"),wGr=o("from_pretrained()"),AGr=o(" class method or the "),aoe=a("a"),LGr=o("from_config()"),yGr=o(` class
method.`),xGr=l(),ck=a("p"),$Gr=o("This class cannot be instantiated directly using "),Y3e=a("code"),kGr=o("__init__()"),SGr=o(" (throws an error)."),RGr=l(),Ht=a("div"),F(fk.$$.fragment),PGr=l(),K3e=a("p"),BGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IGr=l(),af=a("p"),NGr=o(`Note:
Loading a model from its configuration file does `),Z3e=a("strong"),qGr=o("not"),jGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=a("a"),DGr=o("from_pretrained()"),GGr=o(" to load the model weights."),OGr=l(),F(t3.$$.fragment),VGr=l(),Xr=a("div"),F(mk.$$.fragment),XGr=l(),ewe=a("p"),zGr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WGr=l(),Ln=a("p"),QGr=o("The model class to instantiate is selected based on the "),owe=a("code"),UGr=o("model_type"),HGr=o(` property of the config object (either
passed as an argument or loaded from `),rwe=a("code"),JGr=o("pretrained_model_name_or_path"),YGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),twe=a("code"),KGr=o("pretrained_model_name_or_path"),ZGr=o(":"),eOr=l(),ce=a("ul"),a3=a("li"),awe=a("strong"),oOr=o("albert"),rOr=o(" \u2014 "),soe=a("a"),tOr=o("TFAlbertForTokenClassification"),aOr=o(" (ALBERT model)"),nOr=l(),n3=a("li"),nwe=a("strong"),sOr=o("bert"),lOr=o(" \u2014 "),loe=a("a"),iOr=o("TFBertForTokenClassification"),dOr=o(" (BERT model)"),cOr=l(),s3=a("li"),swe=a("strong"),fOr=o("camembert"),mOr=o(" \u2014 "),ioe=a("a"),gOr=o("TFCamembertForTokenClassification"),hOr=o(" (CamemBERT model)"),pOr=l(),l3=a("li"),lwe=a("strong"),_Or=o("convbert"),uOr=o(" \u2014 "),doe=a("a"),bOr=o("TFConvBertForTokenClassification"),vOr=o(" (ConvBERT model)"),FOr=l(),i3=a("li"),iwe=a("strong"),TOr=o("deberta"),MOr=o(" \u2014 "),coe=a("a"),EOr=o("TFDebertaForTokenClassification"),COr=o(" (DeBERTa model)"),wOr=l(),d3=a("li"),dwe=a("strong"),AOr=o("deberta-v2"),LOr=o(" \u2014 "),foe=a("a"),yOr=o("TFDebertaV2ForTokenClassification"),xOr=o(" (DeBERTa-v2 model)"),$Or=l(),c3=a("li"),cwe=a("strong"),kOr=o("distilbert"),SOr=o(" \u2014 "),moe=a("a"),ROr=o("TFDistilBertForTokenClassification"),POr=o(" (DistilBERT model)"),BOr=l(),f3=a("li"),fwe=a("strong"),IOr=o("electra"),NOr=o(" \u2014 "),goe=a("a"),qOr=o("TFElectraForTokenClassification"),jOr=o(" (ELECTRA model)"),DOr=l(),m3=a("li"),mwe=a("strong"),GOr=o("flaubert"),OOr=o(" \u2014 "),hoe=a("a"),VOr=o("TFFlaubertForTokenClassification"),XOr=o(" (FlauBERT model)"),zOr=l(),g3=a("li"),gwe=a("strong"),WOr=o("funnel"),QOr=o(" \u2014 "),poe=a("a"),UOr=o("TFFunnelForTokenClassification"),HOr=o(" (Funnel Transformer model)"),JOr=l(),h3=a("li"),hwe=a("strong"),YOr=o("layoutlm"),KOr=o(" \u2014 "),_oe=a("a"),ZOr=o("TFLayoutLMForTokenClassification"),eVr=o(" (LayoutLM model)"),oVr=l(),p3=a("li"),pwe=a("strong"),rVr=o("longformer"),tVr=o(" \u2014 "),uoe=a("a"),aVr=o("TFLongformerForTokenClassification"),nVr=o(" (Longformer model)"),sVr=l(),_3=a("li"),_we=a("strong"),lVr=o("mobilebert"),iVr=o(" \u2014 "),boe=a("a"),dVr=o("TFMobileBertForTokenClassification"),cVr=o(" (MobileBERT model)"),fVr=l(),u3=a("li"),uwe=a("strong"),mVr=o("mpnet"),gVr=o(" \u2014 "),voe=a("a"),hVr=o("TFMPNetForTokenClassification"),pVr=o(" (MPNet model)"),_Vr=l(),b3=a("li"),bwe=a("strong"),uVr=o("rembert"),bVr=o(" \u2014 "),Foe=a("a"),vVr=o("TFRemBertForTokenClassification"),FVr=o(" (RemBERT model)"),TVr=l(),v3=a("li"),vwe=a("strong"),MVr=o("roberta"),EVr=o(" \u2014 "),Toe=a("a"),CVr=o("TFRobertaForTokenClassification"),wVr=o(" (RoBERTa model)"),AVr=l(),F3=a("li"),Fwe=a("strong"),LVr=o("roformer"),yVr=o(" \u2014 "),Moe=a("a"),xVr=o("TFRoFormerForTokenClassification"),$Vr=o(" (RoFormer model)"),kVr=l(),T3=a("li"),Twe=a("strong"),SVr=o("xlm"),RVr=o(" \u2014 "),Eoe=a("a"),PVr=o("TFXLMForTokenClassification"),BVr=o(" (XLM model)"),IVr=l(),M3=a("li"),Mwe=a("strong"),NVr=o("xlm-roberta"),qVr=o(" \u2014 "),Coe=a("a"),jVr=o("TFXLMRobertaForTokenClassification"),DVr=o(" (XLM-RoBERTa model)"),GVr=l(),E3=a("li"),Ewe=a("strong"),OVr=o("xlnet"),VVr=o(" \u2014 "),woe=a("a"),XVr=o("TFXLNetForTokenClassification"),zVr=o(" (XLNet model)"),WVr=l(),F(C3.$$.fragment),EHe=l(),nf=a("h2"),w3=a("a"),Cwe=a("span"),F(gk.$$.fragment),QVr=l(),wwe=a("span"),UVr=o("TFAutoModelForQuestionAnswering"),CHe=l(),_r=a("div"),F(hk.$$.fragment),HVr=l(),sf=a("p"),JVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Aoe=a("a"),YVr=o("from_pretrained()"),KVr=o(" class method or the "),Loe=a("a"),ZVr=o("from_config()"),eXr=o(` class
method.`),oXr=l(),pk=a("p"),rXr=o("This class cannot be instantiated directly using "),Awe=a("code"),tXr=o("__init__()"),aXr=o(" (throws an error)."),nXr=l(),Jt=a("div"),F(_k.$$.fragment),sXr=l(),Lwe=a("p"),lXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iXr=l(),lf=a("p"),dXr=o(`Note:
Loading a model from its configuration file does `),ywe=a("strong"),cXr=o("not"),fXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yoe=a("a"),mXr=o("from_pretrained()"),gXr=o(" to load the model weights."),hXr=l(),F(A3.$$.fragment),pXr=l(),zr=a("div"),F(uk.$$.fragment),_Xr=l(),xwe=a("p"),uXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bXr=l(),yn=a("p"),vXr=o("The model class to instantiate is selected based on the "),$we=a("code"),FXr=o("model_type"),TXr=o(` property of the config object (either
passed as an argument or loaded from `),kwe=a("code"),MXr=o("pretrained_model_name_or_path"),EXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Swe=a("code"),CXr=o("pretrained_model_name_or_path"),wXr=o(":"),AXr=l(),fe=a("ul"),L3=a("li"),Rwe=a("strong"),LXr=o("albert"),yXr=o(" \u2014 "),xoe=a("a"),xXr=o("TFAlbertForQuestionAnswering"),$Xr=o(" (ALBERT model)"),kXr=l(),y3=a("li"),Pwe=a("strong"),SXr=o("bert"),RXr=o(" \u2014 "),$oe=a("a"),PXr=o("TFBertForQuestionAnswering"),BXr=o(" (BERT model)"),IXr=l(),x3=a("li"),Bwe=a("strong"),NXr=o("camembert"),qXr=o(" \u2014 "),koe=a("a"),jXr=o("TFCamembertForQuestionAnswering"),DXr=o(" (CamemBERT model)"),GXr=l(),$3=a("li"),Iwe=a("strong"),OXr=o("convbert"),VXr=o(" \u2014 "),Soe=a("a"),XXr=o("TFConvBertForQuestionAnswering"),zXr=o(" (ConvBERT model)"),WXr=l(),k3=a("li"),Nwe=a("strong"),QXr=o("deberta"),UXr=o(" \u2014 "),Roe=a("a"),HXr=o("TFDebertaForQuestionAnswering"),JXr=o(" (DeBERTa model)"),YXr=l(),S3=a("li"),qwe=a("strong"),KXr=o("deberta-v2"),ZXr=o(" \u2014 "),Poe=a("a"),ezr=o("TFDebertaV2ForQuestionAnswering"),ozr=o(" (DeBERTa-v2 model)"),rzr=l(),R3=a("li"),jwe=a("strong"),tzr=o("distilbert"),azr=o(" \u2014 "),Boe=a("a"),nzr=o("TFDistilBertForQuestionAnswering"),szr=o(" (DistilBERT model)"),lzr=l(),P3=a("li"),Dwe=a("strong"),izr=o("electra"),dzr=o(" \u2014 "),Ioe=a("a"),czr=o("TFElectraForQuestionAnswering"),fzr=o(" (ELECTRA model)"),mzr=l(),B3=a("li"),Gwe=a("strong"),gzr=o("flaubert"),hzr=o(" \u2014 "),Noe=a("a"),pzr=o("TFFlaubertForQuestionAnsweringSimple"),_zr=o(" (FlauBERT model)"),uzr=l(),I3=a("li"),Owe=a("strong"),bzr=o("funnel"),vzr=o(" \u2014 "),qoe=a("a"),Fzr=o("TFFunnelForQuestionAnswering"),Tzr=o(" (Funnel Transformer model)"),Mzr=l(),N3=a("li"),Vwe=a("strong"),Ezr=o("gptj"),Czr=o(" \u2014 "),joe=a("a"),wzr=o("TFGPTJForQuestionAnswering"),Azr=o(" (GPT-J model)"),Lzr=l(),q3=a("li"),Xwe=a("strong"),yzr=o("longformer"),xzr=o(" \u2014 "),Doe=a("a"),$zr=o("TFLongformerForQuestionAnswering"),kzr=o(" (Longformer model)"),Szr=l(),j3=a("li"),zwe=a("strong"),Rzr=o("mobilebert"),Pzr=o(" \u2014 "),Goe=a("a"),Bzr=o("TFMobileBertForQuestionAnswering"),Izr=o(" (MobileBERT model)"),Nzr=l(),D3=a("li"),Wwe=a("strong"),qzr=o("mpnet"),jzr=o(" \u2014 "),Ooe=a("a"),Dzr=o("TFMPNetForQuestionAnswering"),Gzr=o(" (MPNet model)"),Ozr=l(),G3=a("li"),Qwe=a("strong"),Vzr=o("rembert"),Xzr=o(" \u2014 "),Voe=a("a"),zzr=o("TFRemBertForQuestionAnswering"),Wzr=o(" (RemBERT model)"),Qzr=l(),O3=a("li"),Uwe=a("strong"),Uzr=o("roberta"),Hzr=o(" \u2014 "),Xoe=a("a"),Jzr=o("TFRobertaForQuestionAnswering"),Yzr=o(" (RoBERTa model)"),Kzr=l(),V3=a("li"),Hwe=a("strong"),Zzr=o("roformer"),eWr=o(" \u2014 "),zoe=a("a"),oWr=o("TFRoFormerForQuestionAnswering"),rWr=o(" (RoFormer model)"),tWr=l(),X3=a("li"),Jwe=a("strong"),aWr=o("xlm"),nWr=o(" \u2014 "),Woe=a("a"),sWr=o("TFXLMForQuestionAnsweringSimple"),lWr=o(" (XLM model)"),iWr=l(),z3=a("li"),Ywe=a("strong"),dWr=o("xlm-roberta"),cWr=o(" \u2014 "),Qoe=a("a"),fWr=o("TFXLMRobertaForQuestionAnswering"),mWr=o(" (XLM-RoBERTa model)"),gWr=l(),W3=a("li"),Kwe=a("strong"),hWr=o("xlnet"),pWr=o(" \u2014 "),Uoe=a("a"),_Wr=o("TFXLNetForQuestionAnsweringSimple"),uWr=o(" (XLNet model)"),bWr=l(),F(Q3.$$.fragment),wHe=l(),df=a("h2"),U3=a("a"),Zwe=a("span"),F(bk.$$.fragment),vWr=l(),e6e=a("span"),FWr=o("TFAutoModelForVision2Seq"),AHe=l(),ur=a("div"),F(vk.$$.fragment),TWr=l(),cf=a("p"),MWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Hoe=a("a"),EWr=o("from_pretrained()"),CWr=o(" class method or the "),Joe=a("a"),wWr=o("from_config()"),AWr=o(` class
method.`),LWr=l(),Fk=a("p"),yWr=o("This class cannot be instantiated directly using "),o6e=a("code"),xWr=o("__init__()"),$Wr=o(" (throws an error)."),kWr=l(),Yt=a("div"),F(Tk.$$.fragment),SWr=l(),r6e=a("p"),RWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PWr=l(),ff=a("p"),BWr=o(`Note:
Loading a model from its configuration file does `),t6e=a("strong"),IWr=o("not"),NWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yoe=a("a"),qWr=o("from_pretrained()"),jWr=o(" to load the model weights."),DWr=l(),F(H3.$$.fragment),GWr=l(),Wr=a("div"),F(Mk.$$.fragment),OWr=l(),a6e=a("p"),VWr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XWr=l(),xn=a("p"),zWr=o("The model class to instantiate is selected based on the "),n6e=a("code"),WWr=o("model_type"),QWr=o(` property of the config object (either
passed as an argument or loaded from `),s6e=a("code"),UWr=o("pretrained_model_name_or_path"),HWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=a("code"),JWr=o("pretrained_model_name_or_path"),YWr=o(":"),KWr=l(),i6e=a("ul"),J3=a("li"),d6e=a("strong"),ZWr=o("vision-encoder-decoder"),eQr=o(" \u2014 "),Koe=a("a"),oQr=o("TFVisionEncoderDecoderModel"),rQr=o(" (Vision Encoder decoder model)"),tQr=l(),F(Y3.$$.fragment),LHe=l(),mf=a("h2"),K3=a("a"),c6e=a("span"),F(Ek.$$.fragment),aQr=l(),f6e=a("span"),nQr=o("TFAutoModelForSpeechSeq2Seq"),yHe=l(),br=a("div"),F(Ck.$$.fragment),sQr=l(),gf=a("p"),lQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Zoe=a("a"),iQr=o("from_pretrained()"),dQr=o(" class method or the "),ere=a("a"),cQr=o("from_config()"),fQr=o(` class
method.`),mQr=l(),wk=a("p"),gQr=o("This class cannot be instantiated directly using "),m6e=a("code"),hQr=o("__init__()"),pQr=o(" (throws an error)."),_Qr=l(),Kt=a("div"),F(Ak.$$.fragment),uQr=l(),g6e=a("p"),bQr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vQr=l(),hf=a("p"),FQr=o(`Note:
Loading a model from its configuration file does `),h6e=a("strong"),TQr=o("not"),MQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=a("a"),EQr=o("from_pretrained()"),CQr=o(" to load the model weights."),wQr=l(),F(Z3.$$.fragment),AQr=l(),Qr=a("div"),F(Lk.$$.fragment),LQr=l(),p6e=a("p"),yQr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xQr=l(),$n=a("p"),$Qr=o("The model class to instantiate is selected based on the "),_6e=a("code"),kQr=o("model_type"),SQr=o(` property of the config object (either
passed as an argument or loaded from `),u6e=a("code"),RQr=o("pretrained_model_name_or_path"),PQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=a("code"),BQr=o("pretrained_model_name_or_path"),IQr=o(":"),NQr=l(),v6e=a("ul"),ew=a("li"),F6e=a("strong"),qQr=o("speech_to_text"),jQr=o(" \u2014 "),rre=a("a"),DQr=o("TFSpeech2TextForConditionalGeneration"),GQr=o(" (Speech2Text model)"),OQr=l(),F(ow.$$.fragment),xHe=l(),pf=a("h2"),rw=a("a"),T6e=a("span"),F(yk.$$.fragment),VQr=l(),M6e=a("span"),XQr=o("FlaxAutoModel"),$He=l(),vr=a("div"),F(xk.$$.fragment),zQr=l(),_f=a("p"),WQr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tre=a("a"),QQr=o("from_pretrained()"),UQr=o(" class method or the "),are=a("a"),HQr=o("from_config()"),JQr=o(` class
method.`),YQr=l(),$k=a("p"),KQr=o("This class cannot be instantiated directly using "),E6e=a("code"),ZQr=o("__init__()"),eUr=o(" (throws an error)."),oUr=l(),Zt=a("div"),F(kk.$$.fragment),rUr=l(),C6e=a("p"),tUr=o("Instantiates one of the base model classes of the library from a configuration."),aUr=l(),uf=a("p"),nUr=o(`Note:
Loading a model from its configuration file does `),w6e=a("strong"),sUr=o("not"),lUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=a("a"),iUr=o("from_pretrained()"),dUr=o(" to load the model weights."),cUr=l(),F(tw.$$.fragment),fUr=l(),Ur=a("div"),F(Sk.$$.fragment),mUr=l(),A6e=a("p"),gUr=o("Instantiate one of the base model classes of the library from a pretrained model."),hUr=l(),kn=a("p"),pUr=o("The model class to instantiate is selected based on the "),L6e=a("code"),_Ur=o("model_type"),uUr=o(` property of the config object (either
passed as an argument or loaded from `),y6e=a("code"),bUr=o("pretrained_model_name_or_path"),vUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=a("code"),FUr=o("pretrained_model_name_or_path"),TUr=o(":"),MUr=l(),re=a("ul"),aw=a("li"),$6e=a("strong"),EUr=o("albert"),CUr=o(" \u2014 "),sre=a("a"),wUr=o("FlaxAlbertModel"),AUr=o(" (ALBERT model)"),LUr=l(),nw=a("li"),k6e=a("strong"),yUr=o("bart"),xUr=o(" \u2014 "),lre=a("a"),$Ur=o("FlaxBartModel"),kUr=o(" (BART model)"),SUr=l(),sw=a("li"),S6e=a("strong"),RUr=o("beit"),PUr=o(" \u2014 "),ire=a("a"),BUr=o("FlaxBeitModel"),IUr=o(" (BEiT model)"),NUr=l(),lw=a("li"),R6e=a("strong"),qUr=o("bert"),jUr=o(" \u2014 "),dre=a("a"),DUr=o("FlaxBertModel"),GUr=o(" (BERT model)"),OUr=l(),iw=a("li"),P6e=a("strong"),VUr=o("big_bird"),XUr=o(" \u2014 "),cre=a("a"),zUr=o("FlaxBigBirdModel"),WUr=o(" (BigBird model)"),QUr=l(),dw=a("li"),B6e=a("strong"),UUr=o("blenderbot"),HUr=o(" \u2014 "),fre=a("a"),JUr=o("FlaxBlenderbotModel"),YUr=o(" (Blenderbot model)"),KUr=l(),cw=a("li"),I6e=a("strong"),ZUr=o("blenderbot-small"),eHr=o(" \u2014 "),mre=a("a"),oHr=o("FlaxBlenderbotSmallModel"),rHr=o(" (BlenderbotSmall model)"),tHr=l(),fw=a("li"),N6e=a("strong"),aHr=o("clip"),nHr=o(" \u2014 "),gre=a("a"),sHr=o("FlaxCLIPModel"),lHr=o(" (CLIP model)"),iHr=l(),mw=a("li"),q6e=a("strong"),dHr=o("distilbert"),cHr=o(" \u2014 "),hre=a("a"),fHr=o("FlaxDistilBertModel"),mHr=o(" (DistilBERT model)"),gHr=l(),gw=a("li"),j6e=a("strong"),hHr=o("electra"),pHr=o(" \u2014 "),pre=a("a"),_Hr=o("FlaxElectraModel"),uHr=o(" (ELECTRA model)"),bHr=l(),hw=a("li"),D6e=a("strong"),vHr=o("gpt2"),FHr=o(" \u2014 "),_re=a("a"),THr=o("FlaxGPT2Model"),MHr=o(" (OpenAI GPT-2 model)"),EHr=l(),pw=a("li"),G6e=a("strong"),CHr=o("gpt_neo"),wHr=o(" \u2014 "),ure=a("a"),AHr=o("FlaxGPTNeoModel"),LHr=o(" (GPT Neo model)"),yHr=l(),_w=a("li"),O6e=a("strong"),xHr=o("gptj"),$Hr=o(" \u2014 "),bre=a("a"),kHr=o("FlaxGPTJModel"),SHr=o(" (GPT-J model)"),RHr=l(),uw=a("li"),V6e=a("strong"),PHr=o("longt5"),BHr=o(" \u2014 "),vre=a("a"),IHr=o("FlaxLongT5Model"),NHr=o(" (LongT5 model)"),qHr=l(),bw=a("li"),X6e=a("strong"),jHr=o("marian"),DHr=o(" \u2014 "),Fre=a("a"),GHr=o("FlaxMarianModel"),OHr=o(" (Marian model)"),VHr=l(),vw=a("li"),z6e=a("strong"),XHr=o("mbart"),zHr=o(" \u2014 "),Tre=a("a"),WHr=o("FlaxMBartModel"),QHr=o(" (mBART model)"),UHr=l(),Fw=a("li"),W6e=a("strong"),HHr=o("mt5"),JHr=o(" \u2014 "),Mre=a("a"),YHr=o("FlaxMT5Model"),KHr=o(" (MT5 model)"),ZHr=l(),Tw=a("li"),Q6e=a("strong"),eJr=o("opt"),oJr=o(" \u2014 "),Ere=a("a"),rJr=o("FlaxOPTModel"),tJr=o(" (OPT model)"),aJr=l(),Mw=a("li"),U6e=a("strong"),nJr=o("pegasus"),sJr=o(" \u2014 "),Cre=a("a"),lJr=o("FlaxPegasusModel"),iJr=o(" (Pegasus model)"),dJr=l(),Ew=a("li"),H6e=a("strong"),cJr=o("roberta"),fJr=o(" \u2014 "),wre=a("a"),mJr=o("FlaxRobertaModel"),gJr=o(" (RoBERTa model)"),hJr=l(),Cw=a("li"),J6e=a("strong"),pJr=o("roformer"),_Jr=o(" \u2014 "),Are=a("a"),uJr=o("FlaxRoFormerModel"),bJr=o(" (RoFormer model)"),vJr=l(),ww=a("li"),Y6e=a("strong"),FJr=o("t5"),TJr=o(" \u2014 "),Lre=a("a"),MJr=o("FlaxT5Model"),EJr=o(" (T5 model)"),CJr=l(),Aw=a("li"),K6e=a("strong"),wJr=o("vision-text-dual-encoder"),AJr=o(" \u2014 "),yre=a("a"),LJr=o("FlaxVisionTextDualEncoderModel"),yJr=o(" (VisionTextDualEncoder model)"),xJr=l(),Lw=a("li"),Z6e=a("strong"),$Jr=o("vit"),kJr=o(" \u2014 "),xre=a("a"),SJr=o("FlaxViTModel"),RJr=o(" (ViT model)"),PJr=l(),yw=a("li"),eAe=a("strong"),BJr=o("wav2vec2"),IJr=o(" \u2014 "),$re=a("a"),NJr=o("FlaxWav2Vec2Model"),qJr=o(" (Wav2Vec2 model)"),jJr=l(),xw=a("li"),oAe=a("strong"),DJr=o("xglm"),GJr=o(" \u2014 "),kre=a("a"),OJr=o("FlaxXGLMModel"),VJr=o(" (XGLM model)"),XJr=l(),$w=a("li"),rAe=a("strong"),zJr=o("xlm-roberta"),WJr=o(" \u2014 "),Sre=a("a"),QJr=o("FlaxXLMRobertaModel"),UJr=o(" (XLM-RoBERTa model)"),HJr=l(),F(kw.$$.fragment),kHe=l(),bf=a("h2"),Sw=a("a"),tAe=a("span"),F(Rk.$$.fragment),JJr=l(),aAe=a("span"),YJr=o("FlaxAutoModelForCausalLM"),SHe=l(),Fr=a("div"),F(Pk.$$.fragment),KJr=l(),vf=a("p"),ZJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Rre=a("a"),eYr=o("from_pretrained()"),oYr=o(" class method or the "),Pre=a("a"),rYr=o("from_config()"),tYr=o(` class
method.`),aYr=l(),Bk=a("p"),nYr=o("This class cannot be instantiated directly using "),nAe=a("code"),sYr=o("__init__()"),lYr=o(" (throws an error)."),iYr=l(),ea=a("div"),F(Ik.$$.fragment),dYr=l(),sAe=a("p"),cYr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fYr=l(),Ff=a("p"),mYr=o(`Note:
Loading a model from its configuration file does `),lAe=a("strong"),gYr=o("not"),hYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("a"),pYr=o("from_pretrained()"),_Yr=o(" to load the model weights."),uYr=l(),F(Rw.$$.fragment),bYr=l(),Hr=a("div"),F(Nk.$$.fragment),vYr=l(),iAe=a("p"),FYr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),TYr=l(),Sn=a("p"),MYr=o("The model class to instantiate is selected based on the "),dAe=a("code"),EYr=o("model_type"),CYr=o(` property of the config object (either
passed as an argument or loaded from `),cAe=a("code"),wYr=o("pretrained_model_name_or_path"),AYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fAe=a("code"),LYr=o("pretrained_model_name_or_path"),yYr=o(":"),xYr=l(),xe=a("ul"),Pw=a("li"),mAe=a("strong"),$Yr=o("bart"),kYr=o(" \u2014 "),Ire=a("a"),SYr=o("FlaxBartForCausalLM"),RYr=o(" (BART model)"),PYr=l(),Bw=a("li"),gAe=a("strong"),BYr=o("bert"),IYr=o(" \u2014 "),Nre=a("a"),NYr=o("FlaxBertForCausalLM"),qYr=o(" (BERT model)"),jYr=l(),Iw=a("li"),hAe=a("strong"),DYr=o("big_bird"),GYr=o(" \u2014 "),qre=a("a"),OYr=o("FlaxBigBirdForCausalLM"),VYr=o(" (BigBird model)"),XYr=l(),Nw=a("li"),pAe=a("strong"),zYr=o("electra"),WYr=o(" \u2014 "),jre=a("a"),QYr=o("FlaxElectraForCausalLM"),UYr=o(" (ELECTRA model)"),HYr=l(),qw=a("li"),_Ae=a("strong"),JYr=o("gpt2"),YYr=o(" \u2014 "),Dre=a("a"),KYr=o("FlaxGPT2LMHeadModel"),ZYr=o(" (OpenAI GPT-2 model)"),eKr=l(),jw=a("li"),uAe=a("strong"),oKr=o("gpt_neo"),rKr=o(" \u2014 "),Gre=a("a"),tKr=o("FlaxGPTNeoForCausalLM"),aKr=o(" (GPT Neo model)"),nKr=l(),Dw=a("li"),bAe=a("strong"),sKr=o("gptj"),lKr=o(" \u2014 "),Ore=a("a"),iKr=o("FlaxGPTJForCausalLM"),dKr=o(" (GPT-J model)"),cKr=l(),Gw=a("li"),vAe=a("strong"),fKr=o("opt"),mKr=o(" \u2014 "),Vre=a("a"),gKr=o("FlaxOPTForCausalLM"),hKr=o(" (OPT model)"),pKr=l(),Ow=a("li"),FAe=a("strong"),_Kr=o("roberta"),uKr=o(" \u2014 "),Xre=a("a"),bKr=o("FlaxRobertaForCausalLM"),vKr=o(" (RoBERTa model)"),FKr=l(),Vw=a("li"),TAe=a("strong"),TKr=o("xglm"),MKr=o(" \u2014 "),zre=a("a"),EKr=o("FlaxXGLMForCausalLM"),CKr=o(" (XGLM model)"),wKr=l(),F(Xw.$$.fragment),RHe=l(),Tf=a("h2"),zw=a("a"),MAe=a("span"),F(qk.$$.fragment),AKr=l(),EAe=a("span"),LKr=o("FlaxAutoModelForPreTraining"),PHe=l(),Tr=a("div"),F(jk.$$.fragment),yKr=l(),Mf=a("p"),xKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wre=a("a"),$Kr=o("from_pretrained()"),kKr=o(" class method or the "),Qre=a("a"),SKr=o("from_config()"),RKr=o(` class
method.`),PKr=l(),Dk=a("p"),BKr=o("This class cannot be instantiated directly using "),CAe=a("code"),IKr=o("__init__()"),NKr=o(" (throws an error)."),qKr=l(),oa=a("div"),F(Gk.$$.fragment),jKr=l(),wAe=a("p"),DKr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GKr=l(),Ef=a("p"),OKr=o(`Note:
Loading a model from its configuration file does `),AAe=a("strong"),VKr=o("not"),XKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ure=a("a"),zKr=o("from_pretrained()"),WKr=o(" to load the model weights."),QKr=l(),F(Ww.$$.fragment),UKr=l(),Jr=a("div"),F(Ok.$$.fragment),HKr=l(),LAe=a("p"),JKr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),YKr=l(),Rn=a("p"),KKr=o("The model class to instantiate is selected based on the "),yAe=a("code"),ZKr=o("model_type"),eZr=o(` property of the config object (either
passed as an argument or loaded from `),xAe=a("code"),oZr=o("pretrained_model_name_or_path"),rZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ae=a("code"),tZr=o("pretrained_model_name_or_path"),aZr=o(":"),nZr=l(),Ee=a("ul"),Qw=a("li"),kAe=a("strong"),sZr=o("albert"),lZr=o(" \u2014 "),Hre=a("a"),iZr=o("FlaxAlbertForPreTraining"),dZr=o(" (ALBERT model)"),cZr=l(),Uw=a("li"),SAe=a("strong"),fZr=o("bart"),mZr=o(" \u2014 "),Jre=a("a"),gZr=o("FlaxBartForConditionalGeneration"),hZr=o(" (BART model)"),pZr=l(),Hw=a("li"),RAe=a("strong"),_Zr=o("bert"),uZr=o(" \u2014 "),Yre=a("a"),bZr=o("FlaxBertForPreTraining"),vZr=o(" (BERT model)"),FZr=l(),Jw=a("li"),PAe=a("strong"),TZr=o("big_bird"),MZr=o(" \u2014 "),Kre=a("a"),EZr=o("FlaxBigBirdForPreTraining"),CZr=o(" (BigBird model)"),wZr=l(),Yw=a("li"),BAe=a("strong"),AZr=o("electra"),LZr=o(" \u2014 "),Zre=a("a"),yZr=o("FlaxElectraForPreTraining"),xZr=o(" (ELECTRA model)"),$Zr=l(),Kw=a("li"),IAe=a("strong"),kZr=o("longt5"),SZr=o(" \u2014 "),ete=a("a"),RZr=o("FlaxLongT5ForConditionalGeneration"),PZr=o(" (LongT5 model)"),BZr=l(),Zw=a("li"),NAe=a("strong"),IZr=o("mbart"),NZr=o(" \u2014 "),ote=a("a"),qZr=o("FlaxMBartForConditionalGeneration"),jZr=o(" (mBART model)"),DZr=l(),e6=a("li"),qAe=a("strong"),GZr=o("mt5"),OZr=o(" \u2014 "),rte=a("a"),VZr=o("FlaxMT5ForConditionalGeneration"),XZr=o(" (MT5 model)"),zZr=l(),o6=a("li"),jAe=a("strong"),WZr=o("roberta"),QZr=o(" \u2014 "),tte=a("a"),UZr=o("FlaxRobertaForMaskedLM"),HZr=o(" (RoBERTa model)"),JZr=l(),r6=a("li"),DAe=a("strong"),YZr=o("roformer"),KZr=o(" \u2014 "),ate=a("a"),ZZr=o("FlaxRoFormerForMaskedLM"),eet=o(" (RoFormer model)"),oet=l(),t6=a("li"),GAe=a("strong"),ret=o("t5"),tet=o(" \u2014 "),nte=a("a"),aet=o("FlaxT5ForConditionalGeneration"),net=o(" (T5 model)"),set=l(),a6=a("li"),OAe=a("strong"),iet=o("wav2vec2"),det=o(" \u2014 "),ste=a("a"),cet=o("FlaxWav2Vec2ForPreTraining"),fet=o(" (Wav2Vec2 model)"),met=l(),n6=a("li"),VAe=a("strong"),get=o("xlm-roberta"),het=o(" \u2014 "),lte=a("a"),pet=o("FlaxXLMRobertaForMaskedLM"),_et=o(" (XLM-RoBERTa model)"),uet=l(),F(s6.$$.fragment),BHe=l(),Cf=a("h2"),l6=a("a"),XAe=a("span"),F(Vk.$$.fragment),bet=l(),zAe=a("span"),vet=o("FlaxAutoModelForMaskedLM"),IHe=l(),Mr=a("div"),F(Xk.$$.fragment),Fet=l(),wf=a("p"),Tet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ite=a("a"),Met=o("from_pretrained()"),Eet=o(" class method or the "),dte=a("a"),Cet=o("from_config()"),wet=o(` class
method.`),Aet=l(),zk=a("p"),Let=o("This class cannot be instantiated directly using "),WAe=a("code"),yet=o("__init__()"),xet=o(" (throws an error)."),$et=l(),ra=a("div"),F(Wk.$$.fragment),ket=l(),QAe=a("p"),Set=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ret=l(),Af=a("p"),Pet=o(`Note:
Loading a model from its configuration file does `),UAe=a("strong"),Bet=o("not"),Iet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cte=a("a"),Net=o("from_pretrained()"),qet=o(" to load the model weights."),jet=l(),F(i6.$$.fragment),Det=l(),Yr=a("div"),F(Qk.$$.fragment),Get=l(),HAe=a("p"),Oet=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vet=l(),Pn=a("p"),Xet=o("The model class to instantiate is selected based on the "),JAe=a("code"),zet=o("model_type"),Wet=o(` property of the config object (either
passed as an argument or loaded from `),YAe=a("code"),Qet=o("pretrained_model_name_or_path"),Uet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KAe=a("code"),Het=o("pretrained_model_name_or_path"),Jet=o(":"),Yet=l(),$e=a("ul"),d6=a("li"),ZAe=a("strong"),Ket=o("albert"),Zet=o(" \u2014 "),fte=a("a"),eot=o("FlaxAlbertForMaskedLM"),oot=o(" (ALBERT model)"),rot=l(),c6=a("li"),e7e=a("strong"),tot=o("bart"),aot=o(" \u2014 "),mte=a("a"),not=o("FlaxBartForConditionalGeneration"),sot=o(" (BART model)"),lot=l(),f6=a("li"),o7e=a("strong"),iot=o("bert"),dot=o(" \u2014 "),gte=a("a"),cot=o("FlaxBertForMaskedLM"),fot=o(" (BERT model)"),mot=l(),m6=a("li"),r7e=a("strong"),got=o("big_bird"),hot=o(" \u2014 "),hte=a("a"),pot=o("FlaxBigBirdForMaskedLM"),_ot=o(" (BigBird model)"),uot=l(),g6=a("li"),t7e=a("strong"),bot=o("distilbert"),vot=o(" \u2014 "),pte=a("a"),Fot=o("FlaxDistilBertForMaskedLM"),Tot=o(" (DistilBERT model)"),Mot=l(),h6=a("li"),a7e=a("strong"),Eot=o("electra"),Cot=o(" \u2014 "),_te=a("a"),wot=o("FlaxElectraForMaskedLM"),Aot=o(" (ELECTRA model)"),Lot=l(),p6=a("li"),n7e=a("strong"),yot=o("mbart"),xot=o(" \u2014 "),ute=a("a"),$ot=o("FlaxMBartForConditionalGeneration"),kot=o(" (mBART model)"),Sot=l(),_6=a("li"),s7e=a("strong"),Rot=o("roberta"),Pot=o(" \u2014 "),bte=a("a"),Bot=o("FlaxRobertaForMaskedLM"),Iot=o(" (RoBERTa model)"),Not=l(),u6=a("li"),l7e=a("strong"),qot=o("roformer"),jot=o(" \u2014 "),vte=a("a"),Dot=o("FlaxRoFormerForMaskedLM"),Got=o(" (RoFormer model)"),Oot=l(),b6=a("li"),i7e=a("strong"),Vot=o("xlm-roberta"),Xot=o(" \u2014 "),Fte=a("a"),zot=o("FlaxXLMRobertaForMaskedLM"),Wot=o(" (XLM-RoBERTa model)"),Qot=l(),F(v6.$$.fragment),NHe=l(),Lf=a("h2"),F6=a("a"),d7e=a("span"),F(Uk.$$.fragment),Uot=l(),c7e=a("span"),Hot=o("FlaxAutoModelForSeq2SeqLM"),qHe=l(),Er=a("div"),F(Hk.$$.fragment),Jot=l(),yf=a("p"),Yot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Tte=a("a"),Kot=o("from_pretrained()"),Zot=o(" class method or the "),Mte=a("a"),ert=o("from_config()"),ort=o(` class
method.`),rrt=l(),Jk=a("p"),trt=o("This class cannot be instantiated directly using "),f7e=a("code"),art=o("__init__()"),nrt=o(" (throws an error)."),srt=l(),ta=a("div"),F(Yk.$$.fragment),lrt=l(),m7e=a("p"),irt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),drt=l(),xf=a("p"),crt=o(`Note:
Loading a model from its configuration file does `),g7e=a("strong"),frt=o("not"),mrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ete=a("a"),grt=o("from_pretrained()"),hrt=o(" to load the model weights."),prt=l(),F(T6.$$.fragment),_rt=l(),Kr=a("div"),F(Kk.$$.fragment),urt=l(),h7e=a("p"),brt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vrt=l(),Bn=a("p"),Frt=o("The model class to instantiate is selected based on the "),p7e=a("code"),Trt=o("model_type"),Mrt=o(` property of the config object (either
passed as an argument or loaded from `),_7e=a("code"),Ert=o("pretrained_model_name_or_path"),Crt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=a("code"),wrt=o("pretrained_model_name_or_path"),Art=o(":"),Lrt=l(),ke=a("ul"),M6=a("li"),b7e=a("strong"),yrt=o("bart"),xrt=o(" \u2014 "),Cte=a("a"),$rt=o("FlaxBartForConditionalGeneration"),krt=o(" (BART model)"),Srt=l(),E6=a("li"),v7e=a("strong"),Rrt=o("blenderbot"),Prt=o(" \u2014 "),wte=a("a"),Brt=o("FlaxBlenderbotForConditionalGeneration"),Irt=o(" (Blenderbot model)"),Nrt=l(),C6=a("li"),F7e=a("strong"),qrt=o("blenderbot-small"),jrt=o(" \u2014 "),Ate=a("a"),Drt=o("FlaxBlenderbotSmallForConditionalGeneration"),Grt=o(" (BlenderbotSmall model)"),Ort=l(),w6=a("li"),T7e=a("strong"),Vrt=o("encoder-decoder"),Xrt=o(" \u2014 "),Lte=a("a"),zrt=o("FlaxEncoderDecoderModel"),Wrt=o(" (Encoder decoder model)"),Qrt=l(),A6=a("li"),M7e=a("strong"),Urt=o("longt5"),Hrt=o(" \u2014 "),yte=a("a"),Jrt=o("FlaxLongT5ForConditionalGeneration"),Yrt=o(" (LongT5 model)"),Krt=l(),L6=a("li"),E7e=a("strong"),Zrt=o("marian"),ett=o(" \u2014 "),xte=a("a"),ott=o("FlaxMarianMTModel"),rtt=o(" (Marian model)"),ttt=l(),y6=a("li"),C7e=a("strong"),att=o("mbart"),ntt=o(" \u2014 "),$te=a("a"),stt=o("FlaxMBartForConditionalGeneration"),ltt=o(" (mBART model)"),itt=l(),x6=a("li"),w7e=a("strong"),dtt=o("mt5"),ctt=o(" \u2014 "),kte=a("a"),ftt=o("FlaxMT5ForConditionalGeneration"),mtt=o(" (MT5 model)"),gtt=l(),$6=a("li"),A7e=a("strong"),htt=o("pegasus"),ptt=o(" \u2014 "),Ste=a("a"),_tt=o("FlaxPegasusForConditionalGeneration"),utt=o(" (Pegasus model)"),btt=l(),k6=a("li"),L7e=a("strong"),vtt=o("t5"),Ftt=o(" \u2014 "),Rte=a("a"),Ttt=o("FlaxT5ForConditionalGeneration"),Mtt=o(" (T5 model)"),Ett=l(),F(S6.$$.fragment),jHe=l(),$f=a("h2"),R6=a("a"),y7e=a("span"),F(Zk.$$.fragment),Ctt=l(),x7e=a("span"),wtt=o("FlaxAutoModelForSequenceClassification"),DHe=l(),Cr=a("div"),F(eS.$$.fragment),Att=l(),kf=a("p"),Ltt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Pte=a("a"),ytt=o("from_pretrained()"),xtt=o(" class method or the "),Bte=a("a"),$tt=o("from_config()"),ktt=o(` class
method.`),Stt=l(),oS=a("p"),Rtt=o("This class cannot be instantiated directly using "),$7e=a("code"),Ptt=o("__init__()"),Btt=o(" (throws an error)."),Itt=l(),aa=a("div"),F(rS.$$.fragment),Ntt=l(),k7e=a("p"),qtt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jtt=l(),Sf=a("p"),Dtt=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),Gtt=o("not"),Ott=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ite=a("a"),Vtt=o("from_pretrained()"),Xtt=o(" to load the model weights."),ztt=l(),F(P6.$$.fragment),Wtt=l(),Zr=a("div"),F(tS.$$.fragment),Qtt=l(),R7e=a("p"),Utt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Htt=l(),In=a("p"),Jtt=o("The model class to instantiate is selected based on the "),P7e=a("code"),Ytt=o("model_type"),Ktt=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),Ztt=o("pretrained_model_name_or_path"),eat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),oat=o("pretrained_model_name_or_path"),rat=o(":"),tat=l(),Se=a("ul"),B6=a("li"),N7e=a("strong"),aat=o("albert"),nat=o(" \u2014 "),Nte=a("a"),sat=o("FlaxAlbertForSequenceClassification"),lat=o(" (ALBERT model)"),iat=l(),I6=a("li"),q7e=a("strong"),dat=o("bart"),cat=o(" \u2014 "),qte=a("a"),fat=o("FlaxBartForSequenceClassification"),mat=o(" (BART model)"),gat=l(),N6=a("li"),j7e=a("strong"),hat=o("bert"),pat=o(" \u2014 "),jte=a("a"),_at=o("FlaxBertForSequenceClassification"),uat=o(" (BERT model)"),bat=l(),q6=a("li"),D7e=a("strong"),vat=o("big_bird"),Fat=o(" \u2014 "),Dte=a("a"),Tat=o("FlaxBigBirdForSequenceClassification"),Mat=o(" (BigBird model)"),Eat=l(),j6=a("li"),G7e=a("strong"),Cat=o("distilbert"),wat=o(" \u2014 "),Gte=a("a"),Aat=o("FlaxDistilBertForSequenceClassification"),Lat=o(" (DistilBERT model)"),yat=l(),D6=a("li"),O7e=a("strong"),xat=o("electra"),$at=o(" \u2014 "),Ote=a("a"),kat=o("FlaxElectraForSequenceClassification"),Sat=o(" (ELECTRA model)"),Rat=l(),G6=a("li"),V7e=a("strong"),Pat=o("mbart"),Bat=o(" \u2014 "),Vte=a("a"),Iat=o("FlaxMBartForSequenceClassification"),Nat=o(" (mBART model)"),qat=l(),O6=a("li"),X7e=a("strong"),jat=o("roberta"),Dat=o(" \u2014 "),Xte=a("a"),Gat=o("FlaxRobertaForSequenceClassification"),Oat=o(" (RoBERTa model)"),Vat=l(),V6=a("li"),z7e=a("strong"),Xat=o("roformer"),zat=o(" \u2014 "),zte=a("a"),Wat=o("FlaxRoFormerForSequenceClassification"),Qat=o(" (RoFormer model)"),Uat=l(),X6=a("li"),W7e=a("strong"),Hat=o("xlm-roberta"),Jat=o(" \u2014 "),Wte=a("a"),Yat=o("FlaxXLMRobertaForSequenceClassification"),Kat=o(" (XLM-RoBERTa model)"),Zat=l(),F(z6.$$.fragment),GHe=l(),Rf=a("h2"),W6=a("a"),Q7e=a("span"),F(aS.$$.fragment),ent=l(),U7e=a("span"),ont=o("FlaxAutoModelForQuestionAnswering"),OHe=l(),wr=a("div"),F(nS.$$.fragment),rnt=l(),Pf=a("p"),tnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qte=a("a"),ant=o("from_pretrained()"),nnt=o(" class method or the "),Ute=a("a"),snt=o("from_config()"),lnt=o(` class
method.`),int=l(),sS=a("p"),dnt=o("This class cannot be instantiated directly using "),H7e=a("code"),cnt=o("__init__()"),fnt=o(" (throws an error)."),mnt=l(),na=a("div"),F(lS.$$.fragment),gnt=l(),J7e=a("p"),hnt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pnt=l(),Bf=a("p"),_nt=o(`Note:
Loading a model from its configuration file does `),Y7e=a("strong"),unt=o("not"),bnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hte=a("a"),vnt=o("from_pretrained()"),Fnt=o(" to load the model weights."),Tnt=l(),F(Q6.$$.fragment),Mnt=l(),et=a("div"),F(iS.$$.fragment),Ent=l(),K7e=a("p"),Cnt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wnt=l(),Nn=a("p"),Ant=o("The model class to instantiate is selected based on the "),Z7e=a("code"),Lnt=o("model_type"),ynt=o(` property of the config object (either
passed as an argument or loaded from `),eLe=a("code"),xnt=o("pretrained_model_name_or_path"),$nt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oLe=a("code"),knt=o("pretrained_model_name_or_path"),Snt=o(":"),Rnt=l(),Re=a("ul"),U6=a("li"),rLe=a("strong"),Pnt=o("albert"),Bnt=o(" \u2014 "),Jte=a("a"),Int=o("FlaxAlbertForQuestionAnswering"),Nnt=o(" (ALBERT model)"),qnt=l(),H6=a("li"),tLe=a("strong"),jnt=o("bart"),Dnt=o(" \u2014 "),Yte=a("a"),Gnt=o("FlaxBartForQuestionAnswering"),Ont=o(" (BART model)"),Vnt=l(),J6=a("li"),aLe=a("strong"),Xnt=o("bert"),znt=o(" \u2014 "),Kte=a("a"),Wnt=o("FlaxBertForQuestionAnswering"),Qnt=o(" (BERT model)"),Unt=l(),Y6=a("li"),nLe=a("strong"),Hnt=o("big_bird"),Jnt=o(" \u2014 "),Zte=a("a"),Ynt=o("FlaxBigBirdForQuestionAnswering"),Knt=o(" (BigBird model)"),Znt=l(),K6=a("li"),sLe=a("strong"),est=o("distilbert"),ost=o(" \u2014 "),eae=a("a"),rst=o("FlaxDistilBertForQuestionAnswering"),tst=o(" (DistilBERT model)"),ast=l(),Z6=a("li"),lLe=a("strong"),nst=o("electra"),sst=o(" \u2014 "),oae=a("a"),lst=o("FlaxElectraForQuestionAnswering"),ist=o(" (ELECTRA model)"),dst=l(),eA=a("li"),iLe=a("strong"),cst=o("mbart"),fst=o(" \u2014 "),rae=a("a"),mst=o("FlaxMBartForQuestionAnswering"),gst=o(" (mBART model)"),hst=l(),oA=a("li"),dLe=a("strong"),pst=o("roberta"),_st=o(" \u2014 "),tae=a("a"),ust=o("FlaxRobertaForQuestionAnswering"),bst=o(" (RoBERTa model)"),vst=l(),rA=a("li"),cLe=a("strong"),Fst=o("roformer"),Tst=o(" \u2014 "),aae=a("a"),Mst=o("FlaxRoFormerForQuestionAnswering"),Est=o(" (RoFormer model)"),Cst=l(),tA=a("li"),fLe=a("strong"),wst=o("xlm-roberta"),Ast=o(" \u2014 "),nae=a("a"),Lst=o("FlaxXLMRobertaForQuestionAnswering"),yst=o(" (XLM-RoBERTa model)"),xst=l(),F(aA.$$.fragment),VHe=l(),If=a("h2"),nA=a("a"),mLe=a("span"),F(dS.$$.fragment),$st=l(),gLe=a("span"),kst=o("FlaxAutoModelForTokenClassification"),XHe=l(),Ar=a("div"),F(cS.$$.fragment),Sst=l(),Nf=a("p"),Rst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sae=a("a"),Pst=o("from_pretrained()"),Bst=o(" class method or the "),lae=a("a"),Ist=o("from_config()"),Nst=o(` class
method.`),qst=l(),fS=a("p"),jst=o("This class cannot be instantiated directly using "),hLe=a("code"),Dst=o("__init__()"),Gst=o(" (throws an error)."),Ost=l(),sa=a("div"),F(mS.$$.fragment),Vst=l(),pLe=a("p"),Xst=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zst=l(),qf=a("p"),Wst=o(`Note:
Loading a model from its configuration file does `),_Le=a("strong"),Qst=o("not"),Ust=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iae=a("a"),Hst=o("from_pretrained()"),Jst=o(" to load the model weights."),Yst=l(),F(sA.$$.fragment),Kst=l(),ot=a("div"),F(gS.$$.fragment),Zst=l(),uLe=a("p"),elt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),olt=l(),qn=a("p"),rlt=o("The model class to instantiate is selected based on the "),bLe=a("code"),tlt=o("model_type"),alt=o(` property of the config object (either
passed as an argument or loaded from `),vLe=a("code"),nlt=o("pretrained_model_name_or_path"),slt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FLe=a("code"),llt=o("pretrained_model_name_or_path"),ilt=o(":"),dlt=l(),Xe=a("ul"),lA=a("li"),TLe=a("strong"),clt=o("albert"),flt=o(" \u2014 "),dae=a("a"),mlt=o("FlaxAlbertForTokenClassification"),glt=o(" (ALBERT model)"),hlt=l(),iA=a("li"),MLe=a("strong"),plt=o("bert"),_lt=o(" \u2014 "),cae=a("a"),ult=o("FlaxBertForTokenClassification"),blt=o(" (BERT model)"),vlt=l(),dA=a("li"),ELe=a("strong"),Flt=o("big_bird"),Tlt=o(" \u2014 "),fae=a("a"),Mlt=o("FlaxBigBirdForTokenClassification"),Elt=o(" (BigBird model)"),Clt=l(),cA=a("li"),CLe=a("strong"),wlt=o("distilbert"),Alt=o(" \u2014 "),mae=a("a"),Llt=o("FlaxDistilBertForTokenClassification"),ylt=o(" (DistilBERT model)"),xlt=l(),fA=a("li"),wLe=a("strong"),$lt=o("electra"),klt=o(" \u2014 "),gae=a("a"),Slt=o("FlaxElectraForTokenClassification"),Rlt=o(" (ELECTRA model)"),Plt=l(),mA=a("li"),ALe=a("strong"),Blt=o("roberta"),Ilt=o(" \u2014 "),hae=a("a"),Nlt=o("FlaxRobertaForTokenClassification"),qlt=o(" (RoBERTa model)"),jlt=l(),gA=a("li"),LLe=a("strong"),Dlt=o("roformer"),Glt=o(" \u2014 "),pae=a("a"),Olt=o("FlaxRoFormerForTokenClassification"),Vlt=o(" (RoFormer model)"),Xlt=l(),hA=a("li"),yLe=a("strong"),zlt=o("xlm-roberta"),Wlt=o(" \u2014 "),_ae=a("a"),Qlt=o("FlaxXLMRobertaForTokenClassification"),Ult=o(" (XLM-RoBERTa model)"),Hlt=l(),F(pA.$$.fragment),zHe=l(),jf=a("h2"),_A=a("a"),xLe=a("span"),F(hS.$$.fragment),Jlt=l(),$Le=a("span"),Ylt=o("FlaxAutoModelForMultipleChoice"),WHe=l(),Lr=a("div"),F(pS.$$.fragment),Klt=l(),Df=a("p"),Zlt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uae=a("a"),eit=o("from_pretrained()"),oit=o(" class method or the "),bae=a("a"),rit=o("from_config()"),tit=o(` class
method.`),ait=l(),_S=a("p"),nit=o("This class cannot be instantiated directly using "),kLe=a("code"),sit=o("__init__()"),lit=o(" (throws an error)."),iit=l(),la=a("div"),F(uS.$$.fragment),dit=l(),SLe=a("p"),cit=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fit=l(),Gf=a("p"),mit=o(`Note:
Loading a model from its configuration file does `),RLe=a("strong"),git=o("not"),hit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vae=a("a"),pit=o("from_pretrained()"),_it=o(" to load the model weights."),uit=l(),F(uA.$$.fragment),bit=l(),rt=a("div"),F(bS.$$.fragment),vit=l(),PLe=a("p"),Fit=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Tit=l(),jn=a("p"),Mit=o("The model class to instantiate is selected based on the "),BLe=a("code"),Eit=o("model_type"),Cit=o(` property of the config object (either
passed as an argument or loaded from `),ILe=a("code"),wit=o("pretrained_model_name_or_path"),Ait=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NLe=a("code"),Lit=o("pretrained_model_name_or_path"),yit=o(":"),xit=l(),ze=a("ul"),bA=a("li"),qLe=a("strong"),$it=o("albert"),kit=o(" \u2014 "),Fae=a("a"),Sit=o("FlaxAlbertForMultipleChoice"),Rit=o(" (ALBERT model)"),Pit=l(),vA=a("li"),jLe=a("strong"),Bit=o("bert"),Iit=o(" \u2014 "),Tae=a("a"),Nit=o("FlaxBertForMultipleChoice"),qit=o(" (BERT model)"),jit=l(),FA=a("li"),DLe=a("strong"),Dit=o("big_bird"),Git=o(" \u2014 "),Mae=a("a"),Oit=o("FlaxBigBirdForMultipleChoice"),Vit=o(" (BigBird model)"),Xit=l(),TA=a("li"),GLe=a("strong"),zit=o("distilbert"),Wit=o(" \u2014 "),Eae=a("a"),Qit=o("FlaxDistilBertForMultipleChoice"),Uit=o(" (DistilBERT model)"),Hit=l(),MA=a("li"),OLe=a("strong"),Jit=o("electra"),Yit=o(" \u2014 "),Cae=a("a"),Kit=o("FlaxElectraForMultipleChoice"),Zit=o(" (ELECTRA model)"),edt=l(),EA=a("li"),VLe=a("strong"),odt=o("roberta"),rdt=o(" \u2014 "),wae=a("a"),tdt=o("FlaxRobertaForMultipleChoice"),adt=o(" (RoBERTa model)"),ndt=l(),CA=a("li"),XLe=a("strong"),sdt=o("roformer"),ldt=o(" \u2014 "),Aae=a("a"),idt=o("FlaxRoFormerForMultipleChoice"),ddt=o(" (RoFormer model)"),cdt=l(),wA=a("li"),zLe=a("strong"),fdt=o("xlm-roberta"),mdt=o(" \u2014 "),Lae=a("a"),gdt=o("FlaxXLMRobertaForMultipleChoice"),hdt=o(" (XLM-RoBERTa model)"),pdt=l(),F(AA.$$.fragment),QHe=l(),Of=a("h2"),LA=a("a"),WLe=a("span"),F(vS.$$.fragment),_dt=l(),QLe=a("span"),udt=o("FlaxAutoModelForNextSentencePrediction"),UHe=l(),yr=a("div"),F(FS.$$.fragment),bdt=l(),Vf=a("p"),vdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yae=a("a"),Fdt=o("from_pretrained()"),Tdt=o(" class method or the "),xae=a("a"),Mdt=o("from_config()"),Edt=o(` class
method.`),Cdt=l(),TS=a("p"),wdt=o("This class cannot be instantiated directly using "),ULe=a("code"),Adt=o("__init__()"),Ldt=o(" (throws an error)."),ydt=l(),ia=a("div"),F(MS.$$.fragment),xdt=l(),HLe=a("p"),$dt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kdt=l(),Xf=a("p"),Sdt=o(`Note:
Loading a model from its configuration file does `),JLe=a("strong"),Rdt=o("not"),Pdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ae=a("a"),Bdt=o("from_pretrained()"),Idt=o(" to load the model weights."),Ndt=l(),F(yA.$$.fragment),qdt=l(),tt=a("div"),F(ES.$$.fragment),jdt=l(),YLe=a("p"),Ddt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Gdt=l(),Dn=a("p"),Odt=o("The model class to instantiate is selected based on the "),KLe=a("code"),Vdt=o("model_type"),Xdt=o(` property of the config object (either
passed as an argument or loaded from `),ZLe=a("code"),zdt=o("pretrained_model_name_or_path"),Wdt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eye=a("code"),Qdt=o("pretrained_model_name_or_path"),Udt=o(":"),Hdt=l(),oye=a("ul"),xA=a("li"),rye=a("strong"),Jdt=o("bert"),Ydt=o(" \u2014 "),kae=a("a"),Kdt=o("FlaxBertForNextSentencePrediction"),Zdt=o(" (BERT model)"),ect=l(),F($A.$$.fragment),HHe=l(),zf=a("h2"),kA=a("a"),tye=a("span"),F(CS.$$.fragment),oct=l(),aye=a("span"),rct=o("FlaxAutoModelForImageClassification"),JHe=l(),xr=a("div"),F(wS.$$.fragment),tct=l(),Wf=a("p"),act=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sae=a("a"),nct=o("from_pretrained()"),sct=o(" class method or the "),Rae=a("a"),lct=o("from_config()"),ict=o(` class
method.`),dct=l(),AS=a("p"),cct=o("This class cannot be instantiated directly using "),nye=a("code"),fct=o("__init__()"),mct=o(" (throws an error)."),gct=l(),da=a("div"),F(LS.$$.fragment),hct=l(),sye=a("p"),pct=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_ct=l(),Qf=a("p"),uct=o(`Note:
Loading a model from its configuration file does `),lye=a("strong"),bct=o("not"),vct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pae=a("a"),Fct=o("from_pretrained()"),Tct=o(" to load the model weights."),Mct=l(),F(SA.$$.fragment),Ect=l(),at=a("div"),F(yS.$$.fragment),Cct=l(),iye=a("p"),wct=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Act=l(),Gn=a("p"),Lct=o("The model class to instantiate is selected based on the "),dye=a("code"),yct=o("model_type"),xct=o(` property of the config object (either
passed as an argument or loaded from `),cye=a("code"),$ct=o("pretrained_model_name_or_path"),kct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fye=a("code"),Sct=o("pretrained_model_name_or_path"),Rct=o(":"),Pct=l(),xS=a("ul"),RA=a("li"),mye=a("strong"),Bct=o("beit"),Ict=o(" \u2014 "),Bae=a("a"),Nct=o("FlaxBeitForImageClassification"),qct=o(" (BEiT model)"),jct=l(),PA=a("li"),gye=a("strong"),Dct=o("vit"),Gct=o(" \u2014 "),Iae=a("a"),Oct=o("FlaxViTForImageClassification"),Vct=o(" (ViT model)"),Xct=l(),F(BA.$$.fragment),YHe=l(),Uf=a("h2"),IA=a("a"),hye=a("span"),F($S.$$.fragment),zct=l(),pye=a("span"),Wct=o("FlaxAutoModelForVision2Seq"),KHe=l(),$r=a("div"),F(kS.$$.fragment),Qct=l(),Hf=a("p"),Uct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Nae=a("a"),Hct=o("from_pretrained()"),Jct=o(" class method or the "),qae=a("a"),Yct=o("from_config()"),Kct=o(` class
method.`),Zct=l(),SS=a("p"),eft=o("This class cannot be instantiated directly using "),_ye=a("code"),oft=o("__init__()"),rft=o(" (throws an error)."),tft=l(),ca=a("div"),F(RS.$$.fragment),aft=l(),uye=a("p"),nft=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sft=l(),Jf=a("p"),lft=o(`Note:
Loading a model from its configuration file does `),bye=a("strong"),ift=o("not"),dft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=a("a"),cft=o("from_pretrained()"),fft=o(" to load the model weights."),mft=l(),F(NA.$$.fragment),gft=l(),nt=a("div"),F(PS.$$.fragment),hft=l(),vye=a("p"),pft=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_ft=l(),On=a("p"),uft=o("The model class to instantiate is selected based on the "),Fye=a("code"),bft=o("model_type"),vft=o(` property of the config object (either
passed as an argument or loaded from `),Tye=a("code"),Fft=o("pretrained_model_name_or_path"),Tft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mye=a("code"),Mft=o("pretrained_model_name_or_path"),Eft=o(":"),Cft=l(),Eye=a("ul"),qA=a("li"),Cye=a("strong"),wft=o("vision-encoder-decoder"),Aft=o(" \u2014 "),Dae=a("a"),Lft=o("FlaxVisionEncoderDecoderModel"),yft=o(" (Vision Encoder decoder model)"),xft=l(),F(jA.$$.fragment),this.h()},l(f){const u=Qra('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var BS=s(p);m=n(BS,"A",{id:!0,class:!0,href:!0});var wye=s(m);_=n(wye,"SPAN",{});var Aye=s(_);T(d.$$.fragment,Aye),Aye.forEach(t),wye.forEach(t),h=i(BS),Ao=n(BS,"SPAN",{});var Lye=s(Ao);Oi=r(Lye,"Auto Classes"),Lye.forEach(t),BS.forEach(t),em=i(f),ft=n(f,"P",{});var IS=s(ft);Vi=r(IS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(IS,"CODE",{});var yye=s(Xi);cy=r(yye,"from_pretrained()"),yye.forEach(t),om=r(IS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),IS.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Vn=s(Qe);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var xye=s(Xn);fy=r(xye,"AutoConfig"),xye.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var $ye=s(Wn);my=r($ye,"AutoModel"),$ye.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var kye=s(Qn);gy=r(kye,"AutoTokenizer"),kye.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),rm=i(f),T(ja.$$.fragment,f),Ue=i(f),Ae=n(f,"P",{});var NS=s(Ae);aP=r(NS,"will create a model that is an instance of "),Ui=n(NS,"A",{href:!0});var Sye=s(Ui);nP=r(Sye,"BertModel"),Sye.forEach(t),sP=r(NS,"."),NS.forEach(t),Lo=i(f),Da=n(f,"P",{});var qS=s(Da);lP=r(qS,"There is one class of "),tm=n(qS,"CODE",{});var Rye=s(tm);iP=r(Rye,"AutoModel"),Rye.forEach(t),hKe=r(qS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),qS.forEach(t),XQe=i(f),Hi=n(f,"H2",{class:!0});var jS=s(Hi);am=n(jS,"A",{id:!0,class:!0,href:!0});var Pye=s(am);qse=n(Pye,"SPAN",{});var Bye=s(qse);T(hy.$$.fragment,Bye),Bye.forEach(t),Pye.forEach(t),pKe=i(jS),jse=n(jS,"SPAN",{});var Iye=s(jse);_Ke=r(Iye,"Extending the Auto Classes"),Iye.forEach(t),jS.forEach(t),zQe=i(f),Un=n(f,"P",{});var Yf=s(Un);uKe=r(Yf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dse=n(Yf,"CODE",{});var Nye=s(Dse);bKe=r(Nye,"NewModel"),Nye.forEach(t),vKe=r(Yf,", make sure you have a "),Gse=n(Yf,"CODE",{});var qye=s(Gse);FKe=r(qye,"NewModelConfig"),qye.forEach(t),TKe=r(Yf,` then you can add those to the auto
classes like this:`),Yf.forEach(t),WQe=i(f),T(py.$$.fragment,f),QQe=i(f),dP=n(f,"P",{});var jye=s(dP);MKe=r(jye,"You will then be able to use the auto classes like you would usually do!"),jye.forEach(t),UQe=i(f),T(nm.$$.fragment,f),HQe=i(f),Ji=n(f,"H2",{class:!0});var DS=s(Ji);sm=n(DS,"A",{id:!0,class:!0,href:!0});var Dye=s(sm);Ose=n(Dye,"SPAN",{});var Gye=s(Ose);T(_y.$$.fragment,Gye),Gye.forEach(t),Dye.forEach(t),EKe=i(DS),Vse=n(DS,"SPAN",{});var Oye=s(Vse);CKe=r(Oye,"AutoConfig"),Oye.forEach(t),DS.forEach(t),JQe=i(f),yo=n(f,"DIV",{class:!0});var dt=s(yo);T(uy.$$.fragment,dt),wKe=i(dt),by=n(dt,"P",{});var GS=s(by);AKe=r(GS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),cP=n(GS,"A",{href:!0});var Vye=s(cP);LKe=r(Vye,"from_pretrained()"),Vye.forEach(t),yKe=r(GS," class method."),GS.forEach(t),xKe=i(dt),vy=n(dt,"P",{});var OS=s(vy);$Ke=r(OS,"This class cannot be instantiated directly using "),Xse=n(OS,"CODE",{});var Xye=s(Xse);kKe=r(Xye,"__init__()"),Xye.forEach(t),SKe=r(OS," (throws an error)."),OS.forEach(t),RKe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(Fy.$$.fragment,ct),PKe=i(ct),zse=n(ct,"P",{});var zye=s(zse);BKe=r(zye,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zye.forEach(t),IKe=i(ct),Yi=n(ct,"P",{});var Kf=s(Yi);NKe=r(Kf,"The configuration class to instantiate is selected based on the "),Wse=n(Kf,"CODE",{});var Wye=s(Wse);qKe=r(Wye,"model_type"),Wye.forEach(t),jKe=r(Kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Qse=n(Kf,"CODE",{});var Qye=s(Qse);DKe=r(Qye,"pretrained_model_name_or_path"),Qye.forEach(t),GKe=r(Kf,":"),Kf.forEach(t),OKe=i(ct),A=n(ct,"UL",{});var L=s(A);lm=n(L,"LI",{});var DA=s(lm);Use=n(DA,"STRONG",{});var Uye=s(Use);VKe=r(Uye,"albert"),Uye.forEach(t),XKe=r(DA," \u2014 "),fP=n(DA,"A",{href:!0});var Hye=s(fP);zKe=r(Hye,"AlbertConfig"),Hye.forEach(t),WKe=r(DA," (ALBERT model)"),DA.forEach(t),QKe=i(L),im=n(L,"LI",{});var GA=s(im);Hse=n(GA,"STRONG",{});var Jye=s(Hse);UKe=r(Jye,"bart"),Jye.forEach(t),HKe=r(GA," \u2014 "),mP=n(GA,"A",{href:!0});var Yye=s(mP);JKe=r(Yye,"BartConfig"),Yye.forEach(t),YKe=r(GA," (BART model)"),GA.forEach(t),KKe=i(L),dm=n(L,"LI",{});var OA=s(dm);Jse=n(OA,"STRONG",{});var Kye=s(Jse);ZKe=r(Kye,"beit"),Kye.forEach(t),eZe=r(OA," \u2014 "),gP=n(OA,"A",{href:!0});var Zye=s(gP);oZe=r(Zye,"BeitConfig"),Zye.forEach(t),rZe=r(OA," (BEiT model)"),OA.forEach(t),tZe=i(L),cm=n(L,"LI",{});var VA=s(cm);Yse=n(VA,"STRONG",{});var e9e=s(Yse);aZe=r(e9e,"bert"),e9e.forEach(t),nZe=r(VA," \u2014 "),hP=n(VA,"A",{href:!0});var o9e=s(hP);sZe=r(o9e,"BertConfig"),o9e.forEach(t),lZe=r(VA," (BERT model)"),VA.forEach(t),iZe=i(L),fm=n(L,"LI",{});var XA=s(fm);Kse=n(XA,"STRONG",{});var r9e=s(Kse);dZe=r(r9e,"bert-generation"),r9e.forEach(t),cZe=r(XA," \u2014 "),pP=n(XA,"A",{href:!0});var t9e=s(pP);fZe=r(t9e,"BertGenerationConfig"),t9e.forEach(t),mZe=r(XA," (Bert Generation model)"),XA.forEach(t),gZe=i(L),mm=n(L,"LI",{});var zA=s(mm);Zse=n(zA,"STRONG",{});var a9e=s(Zse);hZe=r(a9e,"big_bird"),a9e.forEach(t),pZe=r(zA," \u2014 "),_P=n(zA,"A",{href:!0});var n9e=s(_P);_Ze=r(n9e,"BigBirdConfig"),n9e.forEach(t),uZe=r(zA," (BigBird model)"),zA.forEach(t),bZe=i(L),gm=n(L,"LI",{});var WA=s(gm);ele=n(WA,"STRONG",{});var s9e=s(ele);vZe=r(s9e,"bigbird_pegasus"),s9e.forEach(t),FZe=r(WA," \u2014 "),uP=n(WA,"A",{href:!0});var l9e=s(uP);TZe=r(l9e,"BigBirdPegasusConfig"),l9e.forEach(t),MZe=r(WA," (BigBird-Pegasus model)"),WA.forEach(t),EZe=i(L),hm=n(L,"LI",{});var QA=s(hm);ole=n(QA,"STRONG",{});var i9e=s(ole);CZe=r(i9e,"blenderbot"),i9e.forEach(t),wZe=r(QA," \u2014 "),bP=n(QA,"A",{href:!0});var d9e=s(bP);AZe=r(d9e,"BlenderbotConfig"),d9e.forEach(t),LZe=r(QA," (Blenderbot model)"),QA.forEach(t),yZe=i(L),pm=n(L,"LI",{});var UA=s(pm);rle=n(UA,"STRONG",{});var c9e=s(rle);xZe=r(c9e,"blenderbot-small"),c9e.forEach(t),$Ze=r(UA," \u2014 "),vP=n(UA,"A",{href:!0});var f9e=s(vP);kZe=r(f9e,"BlenderbotSmallConfig"),f9e.forEach(t),SZe=r(UA," (BlenderbotSmall model)"),UA.forEach(t),RZe=i(L),_m=n(L,"LI",{});var HA=s(_m);tle=n(HA,"STRONG",{});var m9e=s(tle);PZe=r(m9e,"bloom"),m9e.forEach(t),BZe=r(HA," \u2014 "),FP=n(HA,"A",{href:!0});var g9e=s(FP);IZe=r(g9e,"BloomConfig"),g9e.forEach(t),NZe=r(HA," (BLOOM model)"),HA.forEach(t),qZe=i(L),um=n(L,"LI",{});var JA=s(um);ale=n(JA,"STRONG",{});var h9e=s(ale);jZe=r(h9e,"camembert"),h9e.forEach(t),DZe=r(JA," \u2014 "),TP=n(JA,"A",{href:!0});var p9e=s(TP);GZe=r(p9e,"CamembertConfig"),p9e.forEach(t),OZe=r(JA," (CamemBERT model)"),JA.forEach(t),VZe=i(L),bm=n(L,"LI",{});var YA=s(bm);nle=n(YA,"STRONG",{});var _9e=s(nle);XZe=r(_9e,"canine"),_9e.forEach(t),zZe=r(YA," \u2014 "),MP=n(YA,"A",{href:!0});var u9e=s(MP);WZe=r(u9e,"CanineConfig"),u9e.forEach(t),QZe=r(YA," (CANINE model)"),YA.forEach(t),UZe=i(L),vm=n(L,"LI",{});var KA=s(vm);sle=n(KA,"STRONG",{});var b9e=s(sle);HZe=r(b9e,"clip"),b9e.forEach(t),JZe=r(KA," \u2014 "),EP=n(KA,"A",{href:!0});var v9e=s(EP);YZe=r(v9e,"CLIPConfig"),v9e.forEach(t),KZe=r(KA," (CLIP model)"),KA.forEach(t),ZZe=i(L),Fm=n(L,"LI",{});var ZA=s(Fm);lle=n(ZA,"STRONG",{});var F9e=s(lle);eeo=r(F9e,"codegen"),F9e.forEach(t),oeo=r(ZA," \u2014 "),CP=n(ZA,"A",{href:!0});var T9e=s(CP);reo=r(T9e,"CodeGenConfig"),T9e.forEach(t),teo=r(ZA," (CodeGen model)"),ZA.forEach(t),aeo=i(L),Tm=n(L,"LI",{});var e7=s(Tm);ile=n(e7,"STRONG",{});var M9e=s(ile);neo=r(M9e,"convbert"),M9e.forEach(t),seo=r(e7," \u2014 "),wP=n(e7,"A",{href:!0});var E9e=s(wP);leo=r(E9e,"ConvBertConfig"),E9e.forEach(t),ieo=r(e7," (ConvBERT model)"),e7.forEach(t),deo=i(L),Mm=n(L,"LI",{});var o7=s(Mm);dle=n(o7,"STRONG",{});var C9e=s(dle);ceo=r(C9e,"convnext"),C9e.forEach(t),feo=r(o7," \u2014 "),AP=n(o7,"A",{href:!0});var w9e=s(AP);meo=r(w9e,"ConvNextConfig"),w9e.forEach(t),geo=r(o7," (ConvNeXT model)"),o7.forEach(t),heo=i(L),Em=n(L,"LI",{});var r7=s(Em);cle=n(r7,"STRONG",{});var A9e=s(cle);peo=r(A9e,"ctrl"),A9e.forEach(t),_eo=r(r7," \u2014 "),LP=n(r7,"A",{href:!0});var L9e=s(LP);ueo=r(L9e,"CTRLConfig"),L9e.forEach(t),beo=r(r7," (CTRL model)"),r7.forEach(t),veo=i(L),Cm=n(L,"LI",{});var t7=s(Cm);fle=n(t7,"STRONG",{});var y9e=s(fle);Feo=r(y9e,"cvt"),y9e.forEach(t),Teo=r(t7," \u2014 "),yP=n(t7,"A",{href:!0});var x9e=s(yP);Meo=r(x9e,"CvtConfig"),x9e.forEach(t),Eeo=r(t7," (CvT model)"),t7.forEach(t),Ceo=i(L),wm=n(L,"LI",{});var a7=s(wm);mle=n(a7,"STRONG",{});var $9e=s(mle);weo=r($9e,"data2vec-audio"),$9e.forEach(t),Aeo=r(a7," \u2014 "),xP=n(a7,"A",{href:!0});var k9e=s(xP);Leo=r(k9e,"Data2VecAudioConfig"),k9e.forEach(t),yeo=r(a7," (Data2VecAudio model)"),a7.forEach(t),xeo=i(L),Am=n(L,"LI",{});var n7=s(Am);gle=n(n7,"STRONG",{});var S9e=s(gle);$eo=r(S9e,"data2vec-text"),S9e.forEach(t),keo=r(n7," \u2014 "),$P=n(n7,"A",{href:!0});var R9e=s($P);Seo=r(R9e,"Data2VecTextConfig"),R9e.forEach(t),Reo=r(n7," (Data2VecText model)"),n7.forEach(t),Peo=i(L),Lm=n(L,"LI",{});var s7=s(Lm);hle=n(s7,"STRONG",{});var P9e=s(hle);Beo=r(P9e,"data2vec-vision"),P9e.forEach(t),Ieo=r(s7," \u2014 "),kP=n(s7,"A",{href:!0});var B9e=s(kP);Neo=r(B9e,"Data2VecVisionConfig"),B9e.forEach(t),qeo=r(s7," (Data2VecVision model)"),s7.forEach(t),jeo=i(L),ym=n(L,"LI",{});var l7=s(ym);ple=n(l7,"STRONG",{});var I9e=s(ple);Deo=r(I9e,"deberta"),I9e.forEach(t),Geo=r(l7," \u2014 "),SP=n(l7,"A",{href:!0});var N9e=s(SP);Oeo=r(N9e,"DebertaConfig"),N9e.forEach(t),Veo=r(l7," (DeBERTa model)"),l7.forEach(t),Xeo=i(L),xm=n(L,"LI",{});var i7=s(xm);_le=n(i7,"STRONG",{});var q9e=s(_le);zeo=r(q9e,"deberta-v2"),q9e.forEach(t),Weo=r(i7," \u2014 "),RP=n(i7,"A",{href:!0});var j9e=s(RP);Qeo=r(j9e,"DebertaV2Config"),j9e.forEach(t),Ueo=r(i7," (DeBERTa-v2 model)"),i7.forEach(t),Heo=i(L),$m=n(L,"LI",{});var d7=s($m);ule=n(d7,"STRONG",{});var D9e=s(ule);Jeo=r(D9e,"decision_transformer"),D9e.forEach(t),Yeo=r(d7," \u2014 "),PP=n(d7,"A",{href:!0});var G9e=s(PP);Keo=r(G9e,"DecisionTransformerConfig"),G9e.forEach(t),Zeo=r(d7," (Decision Transformer model)"),d7.forEach(t),eoo=i(L),km=n(L,"LI",{});var c7=s(km);ble=n(c7,"STRONG",{});var O9e=s(ble);ooo=r(O9e,"deit"),O9e.forEach(t),roo=r(c7," \u2014 "),BP=n(c7,"A",{href:!0});var kft=s(BP);too=r(kft,"DeiTConfig"),kft.forEach(t),aoo=r(c7," (DeiT model)"),c7.forEach(t),noo=i(L),Sm=n(L,"LI",{});var V9e=s(Sm);vle=n(V9e,"STRONG",{});var Sft=s(vle);soo=r(Sft,"detr"),Sft.forEach(t),loo=r(V9e," \u2014 "),IP=n(V9e,"A",{href:!0});var Rft=s(IP);ioo=r(Rft,"DetrConfig"),Rft.forEach(t),doo=r(V9e," (DETR model)"),V9e.forEach(t),coo=i(L),Rm=n(L,"LI",{});var X9e=s(Rm);Fle=n(X9e,"STRONG",{});var Pft=s(Fle);foo=r(Pft,"distilbert"),Pft.forEach(t),moo=r(X9e," \u2014 "),NP=n(X9e,"A",{href:!0});var Bft=s(NP);goo=r(Bft,"DistilBertConfig"),Bft.forEach(t),hoo=r(X9e," (DistilBERT model)"),X9e.forEach(t),poo=i(L),Pm=n(L,"LI",{});var z9e=s(Pm);Tle=n(z9e,"STRONG",{});var Ift=s(Tle);_oo=r(Ift,"donut-swin"),Ift.forEach(t),uoo=r(z9e," \u2014 "),qP=n(z9e,"A",{href:!0});var Nft=s(qP);boo=r(Nft,"DonutSwinConfig"),Nft.forEach(t),voo=r(z9e," (DonutSwin model)"),z9e.forEach(t),Foo=i(L),Bm=n(L,"LI",{});var W9e=s(Bm);Mle=n(W9e,"STRONG",{});var qft=s(Mle);Too=r(qft,"dpr"),qft.forEach(t),Moo=r(W9e," \u2014 "),jP=n(W9e,"A",{href:!0});var jft=s(jP);Eoo=r(jft,"DPRConfig"),jft.forEach(t),Coo=r(W9e," (DPR model)"),W9e.forEach(t),woo=i(L),Im=n(L,"LI",{});var Q9e=s(Im);Ele=n(Q9e,"STRONG",{});var Dft=s(Ele);Aoo=r(Dft,"dpt"),Dft.forEach(t),Loo=r(Q9e," \u2014 "),DP=n(Q9e,"A",{href:!0});var Gft=s(DP);yoo=r(Gft,"DPTConfig"),Gft.forEach(t),xoo=r(Q9e," (DPT model)"),Q9e.forEach(t),$oo=i(L),Nm=n(L,"LI",{});var U9e=s(Nm);Cle=n(U9e,"STRONG",{});var Oft=s(Cle);koo=r(Oft,"electra"),Oft.forEach(t),Soo=r(U9e," \u2014 "),GP=n(U9e,"A",{href:!0});var Vft=s(GP);Roo=r(Vft,"ElectraConfig"),Vft.forEach(t),Poo=r(U9e," (ELECTRA model)"),U9e.forEach(t),Boo=i(L),qm=n(L,"LI",{});var H9e=s(qm);wle=n(H9e,"STRONG",{});var Xft=s(wle);Ioo=r(Xft,"encoder-decoder"),Xft.forEach(t),Noo=r(H9e," \u2014 "),OP=n(H9e,"A",{href:!0});var zft=s(OP);qoo=r(zft,"EncoderDecoderConfig"),zft.forEach(t),joo=r(H9e," (Encoder decoder model)"),H9e.forEach(t),Doo=i(L),jm=n(L,"LI",{});var J9e=s(jm);Ale=n(J9e,"STRONG",{});var Wft=s(Ale);Goo=r(Wft,"flaubert"),Wft.forEach(t),Ooo=r(J9e," \u2014 "),VP=n(J9e,"A",{href:!0});var Qft=s(VP);Voo=r(Qft,"FlaubertConfig"),Qft.forEach(t),Xoo=r(J9e," (FlauBERT model)"),J9e.forEach(t),zoo=i(L),Dm=n(L,"LI",{});var Y9e=s(Dm);Lle=n(Y9e,"STRONG",{});var Uft=s(Lle);Woo=r(Uft,"flava"),Uft.forEach(t),Qoo=r(Y9e," \u2014 "),XP=n(Y9e,"A",{href:!0});var Hft=s(XP);Uoo=r(Hft,"FlavaConfig"),Hft.forEach(t),Hoo=r(Y9e," (FLAVA model)"),Y9e.forEach(t),Joo=i(L),Gm=n(L,"LI",{});var K9e=s(Gm);yle=n(K9e,"STRONG",{});var Jft=s(yle);Yoo=r(Jft,"fnet"),Jft.forEach(t),Koo=r(K9e," \u2014 "),zP=n(K9e,"A",{href:!0});var Yft=s(zP);Zoo=r(Yft,"FNetConfig"),Yft.forEach(t),ero=r(K9e," (FNet model)"),K9e.forEach(t),oro=i(L),Om=n(L,"LI",{});var Z9e=s(Om);xle=n(Z9e,"STRONG",{});var Kft=s(xle);rro=r(Kft,"fsmt"),Kft.forEach(t),tro=r(Z9e," \u2014 "),WP=n(Z9e,"A",{href:!0});var Zft=s(WP);aro=r(Zft,"FSMTConfig"),Zft.forEach(t),nro=r(Z9e," (FairSeq Machine-Translation model)"),Z9e.forEach(t),sro=i(L),Vm=n(L,"LI",{});var exe=s(Vm);$le=n(exe,"STRONG",{});var emt=s($le);lro=r(emt,"funnel"),emt.forEach(t),iro=r(exe," \u2014 "),QP=n(exe,"A",{href:!0});var omt=s(QP);dro=r(omt,"FunnelConfig"),omt.forEach(t),cro=r(exe," (Funnel Transformer model)"),exe.forEach(t),fro=i(L),Xm=n(L,"LI",{});var oxe=s(Xm);kle=n(oxe,"STRONG",{});var rmt=s(kle);mro=r(rmt,"glpn"),rmt.forEach(t),gro=r(oxe," \u2014 "),UP=n(oxe,"A",{href:!0});var tmt=s(UP);hro=r(tmt,"GLPNConfig"),tmt.forEach(t),pro=r(oxe," (GLPN model)"),oxe.forEach(t),_ro=i(L),zm=n(L,"LI",{});var rxe=s(zm);Sle=n(rxe,"STRONG",{});var amt=s(Sle);uro=r(amt,"gpt2"),amt.forEach(t),bro=r(rxe," \u2014 "),HP=n(rxe,"A",{href:!0});var nmt=s(HP);vro=r(nmt,"GPT2Config"),nmt.forEach(t),Fro=r(rxe," (OpenAI GPT-2 model)"),rxe.forEach(t),Tro=i(L),Wm=n(L,"LI",{});var txe=s(Wm);Rle=n(txe,"STRONG",{});var smt=s(Rle);Mro=r(smt,"gpt_neo"),smt.forEach(t),Ero=r(txe," \u2014 "),JP=n(txe,"A",{href:!0});var lmt=s(JP);Cro=r(lmt,"GPTNeoConfig"),lmt.forEach(t),wro=r(txe," (GPT Neo model)"),txe.forEach(t),Aro=i(L),Qm=n(L,"LI",{});var axe=s(Qm);Ple=n(axe,"STRONG",{});var imt=s(Ple);Lro=r(imt,"gpt_neox"),imt.forEach(t),yro=r(axe," \u2014 "),YP=n(axe,"A",{href:!0});var dmt=s(YP);xro=r(dmt,"GPTNeoXConfig"),dmt.forEach(t),$ro=r(axe," (GPT NeoX model)"),axe.forEach(t),kro=i(L),Um=n(L,"LI",{});var nxe=s(Um);Ble=n(nxe,"STRONG",{});var cmt=s(Ble);Sro=r(cmt,"gptj"),cmt.forEach(t),Rro=r(nxe," \u2014 "),KP=n(nxe,"A",{href:!0});var fmt=s(KP);Pro=r(fmt,"GPTJConfig"),fmt.forEach(t),Bro=r(nxe," (GPT-J model)"),nxe.forEach(t),Iro=i(L),Hm=n(L,"LI",{});var sxe=s(Hm);Ile=n(sxe,"STRONG",{});var mmt=s(Ile);Nro=r(mmt,"groupvit"),mmt.forEach(t),qro=r(sxe," \u2014 "),ZP=n(sxe,"A",{href:!0});var gmt=s(ZP);jro=r(gmt,"GroupViTConfig"),gmt.forEach(t),Dro=r(sxe," (GroupViT model)"),sxe.forEach(t),Gro=i(L),Jm=n(L,"LI",{});var lxe=s(Jm);Nle=n(lxe,"STRONG",{});var hmt=s(Nle);Oro=r(hmt,"hubert"),hmt.forEach(t),Vro=r(lxe," \u2014 "),eB=n(lxe,"A",{href:!0});var pmt=s(eB);Xro=r(pmt,"HubertConfig"),pmt.forEach(t),zro=r(lxe," (Hubert model)"),lxe.forEach(t),Wro=i(L),Ym=n(L,"LI",{});var ixe=s(Ym);qle=n(ixe,"STRONG",{});var _mt=s(qle);Qro=r(_mt,"ibert"),_mt.forEach(t),Uro=r(ixe," \u2014 "),oB=n(ixe,"A",{href:!0});var umt=s(oB);Hro=r(umt,"IBertConfig"),umt.forEach(t),Jro=r(ixe," (I-BERT model)"),ixe.forEach(t),Yro=i(L),Km=n(L,"LI",{});var dxe=s(Km);jle=n(dxe,"STRONG",{});var bmt=s(jle);Kro=r(bmt,"imagegpt"),bmt.forEach(t),Zro=r(dxe," \u2014 "),rB=n(dxe,"A",{href:!0});var vmt=s(rB);eto=r(vmt,"ImageGPTConfig"),vmt.forEach(t),oto=r(dxe," (ImageGPT model)"),dxe.forEach(t),rto=i(L),Zm=n(L,"LI",{});var cxe=s(Zm);Dle=n(cxe,"STRONG",{});var Fmt=s(Dle);tto=r(Fmt,"layoutlm"),Fmt.forEach(t),ato=r(cxe," \u2014 "),tB=n(cxe,"A",{href:!0});var Tmt=s(tB);nto=r(Tmt,"LayoutLMConfig"),Tmt.forEach(t),sto=r(cxe," (LayoutLM model)"),cxe.forEach(t),lto=i(L),eg=n(L,"LI",{});var fxe=s(eg);Gle=n(fxe,"STRONG",{});var Mmt=s(Gle);ito=r(Mmt,"layoutlmv2"),Mmt.forEach(t),dto=r(fxe," \u2014 "),aB=n(fxe,"A",{href:!0});var Emt=s(aB);cto=r(Emt,"LayoutLMv2Config"),Emt.forEach(t),fto=r(fxe," (LayoutLMv2 model)"),fxe.forEach(t),mto=i(L),og=n(L,"LI",{});var mxe=s(og);Ole=n(mxe,"STRONG",{});var Cmt=s(Ole);gto=r(Cmt,"layoutlmv3"),Cmt.forEach(t),hto=r(mxe," \u2014 "),nB=n(mxe,"A",{href:!0});var wmt=s(nB);pto=r(wmt,"LayoutLMv3Config"),wmt.forEach(t),_to=r(mxe," (LayoutLMv3 model)"),mxe.forEach(t),uto=i(L),rg=n(L,"LI",{});var gxe=s(rg);Vle=n(gxe,"STRONG",{});var Amt=s(Vle);bto=r(Amt,"led"),Amt.forEach(t),vto=r(gxe," \u2014 "),sB=n(gxe,"A",{href:!0});var Lmt=s(sB);Fto=r(Lmt,"LEDConfig"),Lmt.forEach(t),Tto=r(gxe," (LED model)"),gxe.forEach(t),Mto=i(L),tg=n(L,"LI",{});var hxe=s(tg);Xle=n(hxe,"STRONG",{});var ymt=s(Xle);Eto=r(ymt,"levit"),ymt.forEach(t),Cto=r(hxe," \u2014 "),lB=n(hxe,"A",{href:!0});var xmt=s(lB);wto=r(xmt,"LevitConfig"),xmt.forEach(t),Ato=r(hxe," (LeViT model)"),hxe.forEach(t),Lto=i(L),ag=n(L,"LI",{});var pxe=s(ag);zle=n(pxe,"STRONG",{});var $mt=s(zle);yto=r($mt,"longformer"),$mt.forEach(t),xto=r(pxe," \u2014 "),iB=n(pxe,"A",{href:!0});var kmt=s(iB);$to=r(kmt,"LongformerConfig"),kmt.forEach(t),kto=r(pxe," (Longformer model)"),pxe.forEach(t),Sto=i(L),ng=n(L,"LI",{});var _xe=s(ng);Wle=n(_xe,"STRONG",{});var Smt=s(Wle);Rto=r(Smt,"longt5"),Smt.forEach(t),Pto=r(_xe," \u2014 "),dB=n(_xe,"A",{href:!0});var Rmt=s(dB);Bto=r(Rmt,"LongT5Config"),Rmt.forEach(t),Ito=r(_xe," (LongT5 model)"),_xe.forEach(t),Nto=i(L),sg=n(L,"LI",{});var uxe=s(sg);Qle=n(uxe,"STRONG",{});var Pmt=s(Qle);qto=r(Pmt,"luke"),Pmt.forEach(t),jto=r(uxe," \u2014 "),cB=n(uxe,"A",{href:!0});var Bmt=s(cB);Dto=r(Bmt,"LukeConfig"),Bmt.forEach(t),Gto=r(uxe," (LUKE model)"),uxe.forEach(t),Oto=i(L),lg=n(L,"LI",{});var bxe=s(lg);Ule=n(bxe,"STRONG",{});var Imt=s(Ule);Vto=r(Imt,"lxmert"),Imt.forEach(t),Xto=r(bxe," \u2014 "),fB=n(bxe,"A",{href:!0});var Nmt=s(fB);zto=r(Nmt,"LxmertConfig"),Nmt.forEach(t),Wto=r(bxe," (LXMERT model)"),bxe.forEach(t),Qto=i(L),ig=n(L,"LI",{});var vxe=s(ig);Hle=n(vxe,"STRONG",{});var qmt=s(Hle);Uto=r(qmt,"m2m_100"),qmt.forEach(t),Hto=r(vxe," \u2014 "),mB=n(vxe,"A",{href:!0});var jmt=s(mB);Jto=r(jmt,"M2M100Config"),jmt.forEach(t),Yto=r(vxe," (M2M100 model)"),vxe.forEach(t),Kto=i(L),dg=n(L,"LI",{});var Fxe=s(dg);Jle=n(Fxe,"STRONG",{});var Dmt=s(Jle);Zto=r(Dmt,"marian"),Dmt.forEach(t),eao=r(Fxe," \u2014 "),gB=n(Fxe,"A",{href:!0});var Gmt=s(gB);oao=r(Gmt,"MarianConfig"),Gmt.forEach(t),rao=r(Fxe," (Marian model)"),Fxe.forEach(t),tao=i(L),cg=n(L,"LI",{});var Txe=s(cg);Yle=n(Txe,"STRONG",{});var Omt=s(Yle);aao=r(Omt,"maskformer"),Omt.forEach(t),nao=r(Txe," \u2014 "),hB=n(Txe,"A",{href:!0});var Vmt=s(hB);sao=r(Vmt,"MaskFormerConfig"),Vmt.forEach(t),lao=r(Txe," (MaskFormer model)"),Txe.forEach(t),iao=i(L),fg=n(L,"LI",{});var Mxe=s(fg);Kle=n(Mxe,"STRONG",{});var Xmt=s(Kle);dao=r(Xmt,"mbart"),Xmt.forEach(t),cao=r(Mxe," \u2014 "),pB=n(Mxe,"A",{href:!0});var zmt=s(pB);fao=r(zmt,"MBartConfig"),zmt.forEach(t),mao=r(Mxe," (mBART model)"),Mxe.forEach(t),gao=i(L),mg=n(L,"LI",{});var Exe=s(mg);Zle=n(Exe,"STRONG",{});var Wmt=s(Zle);hao=r(Wmt,"mctct"),Wmt.forEach(t),pao=r(Exe," \u2014 "),_B=n(Exe,"A",{href:!0});var Qmt=s(_B);_ao=r(Qmt,"MCTCTConfig"),Qmt.forEach(t),uao=r(Exe," (M-CTC-T model)"),Exe.forEach(t),bao=i(L),gg=n(L,"LI",{});var Cxe=s(gg);eie=n(Cxe,"STRONG",{});var Umt=s(eie);vao=r(Umt,"megatron-bert"),Umt.forEach(t),Fao=r(Cxe," \u2014 "),uB=n(Cxe,"A",{href:!0});var Hmt=s(uB);Tao=r(Hmt,"MegatronBertConfig"),Hmt.forEach(t),Mao=r(Cxe," (Megatron-BERT model)"),Cxe.forEach(t),Eao=i(L),hg=n(L,"LI",{});var wxe=s(hg);oie=n(wxe,"STRONG",{});var Jmt=s(oie);Cao=r(Jmt,"mobilebert"),Jmt.forEach(t),wao=r(wxe," \u2014 "),bB=n(wxe,"A",{href:!0});var Ymt=s(bB);Aao=r(Ymt,"MobileBertConfig"),Ymt.forEach(t),Lao=r(wxe," (MobileBERT model)"),wxe.forEach(t),yao=i(L),pg=n(L,"LI",{});var Axe=s(pg);rie=n(Axe,"STRONG",{});var Kmt=s(rie);xao=r(Kmt,"mobilevit"),Kmt.forEach(t),$ao=r(Axe," \u2014 "),vB=n(Axe,"A",{href:!0});var Zmt=s(vB);kao=r(Zmt,"MobileViTConfig"),Zmt.forEach(t),Sao=r(Axe," (MobileViT model)"),Axe.forEach(t),Rao=i(L),_g=n(L,"LI",{});var Lxe=s(_g);tie=n(Lxe,"STRONG",{});var egt=s(tie);Pao=r(egt,"mpnet"),egt.forEach(t),Bao=r(Lxe," \u2014 "),FB=n(Lxe,"A",{href:!0});var ogt=s(FB);Iao=r(ogt,"MPNetConfig"),ogt.forEach(t),Nao=r(Lxe," (MPNet model)"),Lxe.forEach(t),qao=i(L),ug=n(L,"LI",{});var yxe=s(ug);aie=n(yxe,"STRONG",{});var rgt=s(aie);jao=r(rgt,"mt5"),rgt.forEach(t),Dao=r(yxe," \u2014 "),TB=n(yxe,"A",{href:!0});var tgt=s(TB);Gao=r(tgt,"MT5Config"),tgt.forEach(t),Oao=r(yxe," (MT5 model)"),yxe.forEach(t),Vao=i(L),bg=n(L,"LI",{});var xxe=s(bg);nie=n(xxe,"STRONG",{});var agt=s(nie);Xao=r(agt,"mvp"),agt.forEach(t),zao=r(xxe," \u2014 "),MB=n(xxe,"A",{href:!0});var ngt=s(MB);Wao=r(ngt,"MvpConfig"),ngt.forEach(t),Qao=r(xxe," (MVP model)"),xxe.forEach(t),Uao=i(L),vg=n(L,"LI",{});var $xe=s(vg);sie=n($xe,"STRONG",{});var sgt=s(sie);Hao=r(sgt,"nezha"),sgt.forEach(t),Jao=r($xe," \u2014 "),EB=n($xe,"A",{href:!0});var lgt=s(EB);Yao=r(lgt,"NezhaConfig"),lgt.forEach(t),Kao=r($xe," (Nezha model)"),$xe.forEach(t),Zao=i(L),Fg=n(L,"LI",{});var kxe=s(Fg);lie=n(kxe,"STRONG",{});var igt=s(lie);eno=r(igt,"nystromformer"),igt.forEach(t),ono=r(kxe," \u2014 "),CB=n(kxe,"A",{href:!0});var dgt=s(CB);rno=r(dgt,"NystromformerConfig"),dgt.forEach(t),tno=r(kxe," (Nystr\xF6mformer model)"),kxe.forEach(t),ano=i(L),Tg=n(L,"LI",{});var Sxe=s(Tg);iie=n(Sxe,"STRONG",{});var cgt=s(iie);nno=r(cgt,"openai-gpt"),cgt.forEach(t),sno=r(Sxe," \u2014 "),wB=n(Sxe,"A",{href:!0});var fgt=s(wB);lno=r(fgt,"OpenAIGPTConfig"),fgt.forEach(t),ino=r(Sxe," (OpenAI GPT model)"),Sxe.forEach(t),dno=i(L),Mg=n(L,"LI",{});var Rxe=s(Mg);die=n(Rxe,"STRONG",{});var mgt=s(die);cno=r(mgt,"opt"),mgt.forEach(t),fno=r(Rxe," \u2014 "),AB=n(Rxe,"A",{href:!0});var ggt=s(AB);mno=r(ggt,"OPTConfig"),ggt.forEach(t),gno=r(Rxe," (OPT model)"),Rxe.forEach(t),hno=i(L),Eg=n(L,"LI",{});var Pxe=s(Eg);cie=n(Pxe,"STRONG",{});var hgt=s(cie);pno=r(hgt,"owlvit"),hgt.forEach(t),_no=r(Pxe," \u2014 "),LB=n(Pxe,"A",{href:!0});var pgt=s(LB);uno=r(pgt,"OwlViTConfig"),pgt.forEach(t),bno=r(Pxe," (OWL-ViT model)"),Pxe.forEach(t),vno=i(L),Cg=n(L,"LI",{});var Bxe=s(Cg);fie=n(Bxe,"STRONG",{});var _gt=s(fie);Fno=r(_gt,"pegasus"),_gt.forEach(t),Tno=r(Bxe," \u2014 "),yB=n(Bxe,"A",{href:!0});var ugt=s(yB);Mno=r(ugt,"PegasusConfig"),ugt.forEach(t),Eno=r(Bxe," (Pegasus model)"),Bxe.forEach(t),Cno=i(L),wg=n(L,"LI",{});var Ixe=s(wg);mie=n(Ixe,"STRONG",{});var bgt=s(mie);wno=r(bgt,"perceiver"),bgt.forEach(t),Ano=r(Ixe," \u2014 "),xB=n(Ixe,"A",{href:!0});var vgt=s(xB);Lno=r(vgt,"PerceiverConfig"),vgt.forEach(t),yno=r(Ixe," (Perceiver model)"),Ixe.forEach(t),xno=i(L),Ag=n(L,"LI",{});var Nxe=s(Ag);gie=n(Nxe,"STRONG",{});var Fgt=s(gie);$no=r(Fgt,"plbart"),Fgt.forEach(t),kno=r(Nxe," \u2014 "),$B=n(Nxe,"A",{href:!0});var Tgt=s($B);Sno=r(Tgt,"PLBartConfig"),Tgt.forEach(t),Rno=r(Nxe," (PLBart model)"),Nxe.forEach(t),Pno=i(L),Lg=n(L,"LI",{});var qxe=s(Lg);hie=n(qxe,"STRONG",{});var Mgt=s(hie);Bno=r(Mgt,"poolformer"),Mgt.forEach(t),Ino=r(qxe," \u2014 "),kB=n(qxe,"A",{href:!0});var Egt=s(kB);Nno=r(Egt,"PoolFormerConfig"),Egt.forEach(t),qno=r(qxe," (PoolFormer model)"),qxe.forEach(t),jno=i(L),yg=n(L,"LI",{});var jxe=s(yg);pie=n(jxe,"STRONG",{});var Cgt=s(pie);Dno=r(Cgt,"prophetnet"),Cgt.forEach(t),Gno=r(jxe," \u2014 "),SB=n(jxe,"A",{href:!0});var wgt=s(SB);Ono=r(wgt,"ProphetNetConfig"),wgt.forEach(t),Vno=r(jxe," (ProphetNet model)"),jxe.forEach(t),Xno=i(L),xg=n(L,"LI",{});var Dxe=s(xg);_ie=n(Dxe,"STRONG",{});var Agt=s(_ie);zno=r(Agt,"qdqbert"),Agt.forEach(t),Wno=r(Dxe," \u2014 "),RB=n(Dxe,"A",{href:!0});var Lgt=s(RB);Qno=r(Lgt,"QDQBertConfig"),Lgt.forEach(t),Uno=r(Dxe," (QDQBert model)"),Dxe.forEach(t),Hno=i(L),$g=n(L,"LI",{});var Gxe=s($g);uie=n(Gxe,"STRONG",{});var ygt=s(uie);Jno=r(ygt,"rag"),ygt.forEach(t),Yno=r(Gxe," \u2014 "),PB=n(Gxe,"A",{href:!0});var xgt=s(PB);Kno=r(xgt,"RagConfig"),xgt.forEach(t),Zno=r(Gxe," (RAG model)"),Gxe.forEach(t),eso=i(L),kg=n(L,"LI",{});var Oxe=s(kg);bie=n(Oxe,"STRONG",{});var $gt=s(bie);oso=r($gt,"realm"),$gt.forEach(t),rso=r(Oxe," \u2014 "),BB=n(Oxe,"A",{href:!0});var kgt=s(BB);tso=r(kgt,"RealmConfig"),kgt.forEach(t),aso=r(Oxe," (REALM model)"),Oxe.forEach(t),nso=i(L),Sg=n(L,"LI",{});var Vxe=s(Sg);vie=n(Vxe,"STRONG",{});var Sgt=s(vie);sso=r(Sgt,"reformer"),Sgt.forEach(t),lso=r(Vxe," \u2014 "),IB=n(Vxe,"A",{href:!0});var Rgt=s(IB);iso=r(Rgt,"ReformerConfig"),Rgt.forEach(t),dso=r(Vxe," (Reformer model)"),Vxe.forEach(t),cso=i(L),Rg=n(L,"LI",{});var Xxe=s(Rg);Fie=n(Xxe,"STRONG",{});var Pgt=s(Fie);fso=r(Pgt,"regnet"),Pgt.forEach(t),mso=r(Xxe," \u2014 "),NB=n(Xxe,"A",{href:!0});var Bgt=s(NB);gso=r(Bgt,"RegNetConfig"),Bgt.forEach(t),hso=r(Xxe," (RegNet model)"),Xxe.forEach(t),pso=i(L),Pg=n(L,"LI",{});var zxe=s(Pg);Tie=n(zxe,"STRONG",{});var Igt=s(Tie);_so=r(Igt,"rembert"),Igt.forEach(t),uso=r(zxe," \u2014 "),qB=n(zxe,"A",{href:!0});var Ngt=s(qB);bso=r(Ngt,"RemBertConfig"),Ngt.forEach(t),vso=r(zxe," (RemBERT model)"),zxe.forEach(t),Fso=i(L),Bg=n(L,"LI",{});var Wxe=s(Bg);Mie=n(Wxe,"STRONG",{});var qgt=s(Mie);Tso=r(qgt,"resnet"),qgt.forEach(t),Mso=r(Wxe," \u2014 "),jB=n(Wxe,"A",{href:!0});var jgt=s(jB);Eso=r(jgt,"ResNetConfig"),jgt.forEach(t),Cso=r(Wxe," (ResNet model)"),Wxe.forEach(t),wso=i(L),Ig=n(L,"LI",{});var Qxe=s(Ig);Eie=n(Qxe,"STRONG",{});var Dgt=s(Eie);Aso=r(Dgt,"retribert"),Dgt.forEach(t),Lso=r(Qxe," \u2014 "),DB=n(Qxe,"A",{href:!0});var Ggt=s(DB);yso=r(Ggt,"RetriBertConfig"),Ggt.forEach(t),xso=r(Qxe," (RetriBERT model)"),Qxe.forEach(t),$so=i(L),Ng=n(L,"LI",{});var Uxe=s(Ng);Cie=n(Uxe,"STRONG",{});var Ogt=s(Cie);kso=r(Ogt,"roberta"),Ogt.forEach(t),Sso=r(Uxe," \u2014 "),GB=n(Uxe,"A",{href:!0});var Vgt=s(GB);Rso=r(Vgt,"RobertaConfig"),Vgt.forEach(t),Pso=r(Uxe," (RoBERTa model)"),Uxe.forEach(t),Bso=i(L),qg=n(L,"LI",{});var Hxe=s(qg);wie=n(Hxe,"STRONG",{});var Xgt=s(wie);Iso=r(Xgt,"roformer"),Xgt.forEach(t),Nso=r(Hxe," \u2014 "),OB=n(Hxe,"A",{href:!0});var zgt=s(OB);qso=r(zgt,"RoFormerConfig"),zgt.forEach(t),jso=r(Hxe," (RoFormer model)"),Hxe.forEach(t),Dso=i(L),jg=n(L,"LI",{});var Jxe=s(jg);Aie=n(Jxe,"STRONG",{});var Wgt=s(Aie);Gso=r(Wgt,"segformer"),Wgt.forEach(t),Oso=r(Jxe," \u2014 "),VB=n(Jxe,"A",{href:!0});var Qgt=s(VB);Vso=r(Qgt,"SegformerConfig"),Qgt.forEach(t),Xso=r(Jxe," (SegFormer model)"),Jxe.forEach(t),zso=i(L),Dg=n(L,"LI",{});var Yxe=s(Dg);Lie=n(Yxe,"STRONG",{});var Ugt=s(Lie);Wso=r(Ugt,"sew"),Ugt.forEach(t),Qso=r(Yxe," \u2014 "),XB=n(Yxe,"A",{href:!0});var Hgt=s(XB);Uso=r(Hgt,"SEWConfig"),Hgt.forEach(t),Hso=r(Yxe," (SEW model)"),Yxe.forEach(t),Jso=i(L),Gg=n(L,"LI",{});var Kxe=s(Gg);yie=n(Kxe,"STRONG",{});var Jgt=s(yie);Yso=r(Jgt,"sew-d"),Jgt.forEach(t),Kso=r(Kxe," \u2014 "),zB=n(Kxe,"A",{href:!0});var Ygt=s(zB);Zso=r(Ygt,"SEWDConfig"),Ygt.forEach(t),elo=r(Kxe," (SEW-D model)"),Kxe.forEach(t),olo=i(L),Og=n(L,"LI",{});var Zxe=s(Og);xie=n(Zxe,"STRONG",{});var Kgt=s(xie);rlo=r(Kgt,"speech-encoder-decoder"),Kgt.forEach(t),tlo=r(Zxe," \u2014 "),WB=n(Zxe,"A",{href:!0});var Zgt=s(WB);alo=r(Zgt,"SpeechEncoderDecoderConfig"),Zgt.forEach(t),nlo=r(Zxe," (Speech Encoder decoder model)"),Zxe.forEach(t),slo=i(L),Vg=n(L,"LI",{});var e$e=s(Vg);$ie=n(e$e,"STRONG",{});var eht=s($ie);llo=r(eht,"speech_to_text"),eht.forEach(t),ilo=r(e$e," \u2014 "),QB=n(e$e,"A",{href:!0});var oht=s(QB);dlo=r(oht,"Speech2TextConfig"),oht.forEach(t),clo=r(e$e," (Speech2Text model)"),e$e.forEach(t),flo=i(L),Xg=n(L,"LI",{});var o$e=s(Xg);kie=n(o$e,"STRONG",{});var rht=s(kie);mlo=r(rht,"speech_to_text_2"),rht.forEach(t),glo=r(o$e," \u2014 "),UB=n(o$e,"A",{href:!0});var tht=s(UB);hlo=r(tht,"Speech2Text2Config"),tht.forEach(t),plo=r(o$e," (Speech2Text2 model)"),o$e.forEach(t),_lo=i(L),zg=n(L,"LI",{});var r$e=s(zg);Sie=n(r$e,"STRONG",{});var aht=s(Sie);ulo=r(aht,"splinter"),aht.forEach(t),blo=r(r$e," \u2014 "),HB=n(r$e,"A",{href:!0});var nht=s(HB);vlo=r(nht,"SplinterConfig"),nht.forEach(t),Flo=r(r$e," (Splinter model)"),r$e.forEach(t),Tlo=i(L),Wg=n(L,"LI",{});var t$e=s(Wg);Rie=n(t$e,"STRONG",{});var sht=s(Rie);Mlo=r(sht,"squeezebert"),sht.forEach(t),Elo=r(t$e," \u2014 "),JB=n(t$e,"A",{href:!0});var lht=s(JB);Clo=r(lht,"SqueezeBertConfig"),lht.forEach(t),wlo=r(t$e," (SqueezeBERT model)"),t$e.forEach(t),Alo=i(L),Qg=n(L,"LI",{});var a$e=s(Qg);Pie=n(a$e,"STRONG",{});var iht=s(Pie);Llo=r(iht,"swin"),iht.forEach(t),ylo=r(a$e," \u2014 "),YB=n(a$e,"A",{href:!0});var dht=s(YB);xlo=r(dht,"SwinConfig"),dht.forEach(t),$lo=r(a$e," (Swin Transformer model)"),a$e.forEach(t),klo=i(L),Ug=n(L,"LI",{});var n$e=s(Ug);Bie=n(n$e,"STRONG",{});var cht=s(Bie);Slo=r(cht,"swinv2"),cht.forEach(t),Rlo=r(n$e," \u2014 "),KB=n(n$e,"A",{href:!0});var fht=s(KB);Plo=r(fht,"Swinv2Config"),fht.forEach(t),Blo=r(n$e," (Swin Transformer V2 model)"),n$e.forEach(t),Ilo=i(L),Hg=n(L,"LI",{});var s$e=s(Hg);Iie=n(s$e,"STRONG",{});var mht=s(Iie);Nlo=r(mht,"t5"),mht.forEach(t),qlo=r(s$e," \u2014 "),ZB=n(s$e,"A",{href:!0});var ght=s(ZB);jlo=r(ght,"T5Config"),ght.forEach(t),Dlo=r(s$e," (T5 model)"),s$e.forEach(t),Glo=i(L),Jg=n(L,"LI",{});var l$e=s(Jg);Nie=n(l$e,"STRONG",{});var hht=s(Nie);Olo=r(hht,"tapas"),hht.forEach(t),Vlo=r(l$e," \u2014 "),eI=n(l$e,"A",{href:!0});var pht=s(eI);Xlo=r(pht,"TapasConfig"),pht.forEach(t),zlo=r(l$e," (TAPAS model)"),l$e.forEach(t),Wlo=i(L),Yg=n(L,"LI",{});var i$e=s(Yg);qie=n(i$e,"STRONG",{});var _ht=s(qie);Qlo=r(_ht,"trajectory_transformer"),_ht.forEach(t),Ulo=r(i$e," \u2014 "),oI=n(i$e,"A",{href:!0});var uht=s(oI);Hlo=r(uht,"TrajectoryTransformerConfig"),uht.forEach(t),Jlo=r(i$e," (Trajectory Transformer model)"),i$e.forEach(t),Ylo=i(L),Kg=n(L,"LI",{});var d$e=s(Kg);jie=n(d$e,"STRONG",{});var bht=s(jie);Klo=r(bht,"transfo-xl"),bht.forEach(t),Zlo=r(d$e," \u2014 "),rI=n(d$e,"A",{href:!0});var vht=s(rI);eio=r(vht,"TransfoXLConfig"),vht.forEach(t),oio=r(d$e," (Transformer-XL model)"),d$e.forEach(t),rio=i(L),Zg=n(L,"LI",{});var c$e=s(Zg);Die=n(c$e,"STRONG",{});var Fht=s(Die);tio=r(Fht,"trocr"),Fht.forEach(t),aio=r(c$e," \u2014 "),tI=n(c$e,"A",{href:!0});var Tht=s(tI);nio=r(Tht,"TrOCRConfig"),Tht.forEach(t),sio=r(c$e," (TrOCR model)"),c$e.forEach(t),lio=i(L),eh=n(L,"LI",{});var f$e=s(eh);Gie=n(f$e,"STRONG",{});var Mht=s(Gie);iio=r(Mht,"unispeech"),Mht.forEach(t),dio=r(f$e," \u2014 "),aI=n(f$e,"A",{href:!0});var Eht=s(aI);cio=r(Eht,"UniSpeechConfig"),Eht.forEach(t),fio=r(f$e," (UniSpeech model)"),f$e.forEach(t),mio=i(L),oh=n(L,"LI",{});var m$e=s(oh);Oie=n(m$e,"STRONG",{});var Cht=s(Oie);gio=r(Cht,"unispeech-sat"),Cht.forEach(t),hio=r(m$e," \u2014 "),nI=n(m$e,"A",{href:!0});var wht=s(nI);pio=r(wht,"UniSpeechSatConfig"),wht.forEach(t),_io=r(m$e," (UniSpeechSat model)"),m$e.forEach(t),uio=i(L),rh=n(L,"LI",{});var g$e=s(rh);Vie=n(g$e,"STRONG",{});var Aht=s(Vie);bio=r(Aht,"van"),Aht.forEach(t),vio=r(g$e," \u2014 "),sI=n(g$e,"A",{href:!0});var Lht=s(sI);Fio=r(Lht,"VanConfig"),Lht.forEach(t),Tio=r(g$e," (VAN model)"),g$e.forEach(t),Mio=i(L),th=n(L,"LI",{});var h$e=s(th);Xie=n(h$e,"STRONG",{});var yht=s(Xie);Eio=r(yht,"videomae"),yht.forEach(t),Cio=r(h$e," \u2014 "),lI=n(h$e,"A",{href:!0});var xht=s(lI);wio=r(xht,"VideoMAEConfig"),xht.forEach(t),Aio=r(h$e," (VideoMAE model)"),h$e.forEach(t),Lio=i(L),ah=n(L,"LI",{});var p$e=s(ah);zie=n(p$e,"STRONG",{});var $ht=s(zie);yio=r($ht,"vilt"),$ht.forEach(t),xio=r(p$e," \u2014 "),iI=n(p$e,"A",{href:!0});var kht=s(iI);$io=r(kht,"ViltConfig"),kht.forEach(t),kio=r(p$e," (ViLT model)"),p$e.forEach(t),Sio=i(L),nh=n(L,"LI",{});var _$e=s(nh);Wie=n(_$e,"STRONG",{});var Sht=s(Wie);Rio=r(Sht,"vision-encoder-decoder"),Sht.forEach(t),Pio=r(_$e," \u2014 "),dI=n(_$e,"A",{href:!0});var Rht=s(dI);Bio=r(Rht,"VisionEncoderDecoderConfig"),Rht.forEach(t),Iio=r(_$e," (Vision Encoder decoder model)"),_$e.forEach(t),Nio=i(L),sh=n(L,"LI",{});var u$e=s(sh);Qie=n(u$e,"STRONG",{});var Pht=s(Qie);qio=r(Pht,"vision-text-dual-encoder"),Pht.forEach(t),jio=r(u$e," \u2014 "),cI=n(u$e,"A",{href:!0});var Bht=s(cI);Dio=r(Bht,"VisionTextDualEncoderConfig"),Bht.forEach(t),Gio=r(u$e," (VisionTextDualEncoder model)"),u$e.forEach(t),Oio=i(L),lh=n(L,"LI",{});var b$e=s(lh);Uie=n(b$e,"STRONG",{});var Iht=s(Uie);Vio=r(Iht,"visual_bert"),Iht.forEach(t),Xio=r(b$e," \u2014 "),fI=n(b$e,"A",{href:!0});var Nht=s(fI);zio=r(Nht,"VisualBertConfig"),Nht.forEach(t),Wio=r(b$e," (VisualBERT model)"),b$e.forEach(t),Qio=i(L),ih=n(L,"LI",{});var v$e=s(ih);Hie=n(v$e,"STRONG",{});var qht=s(Hie);Uio=r(qht,"vit"),qht.forEach(t),Hio=r(v$e," \u2014 "),mI=n(v$e,"A",{href:!0});var jht=s(mI);Jio=r(jht,"ViTConfig"),jht.forEach(t),Yio=r(v$e," (ViT model)"),v$e.forEach(t),Kio=i(L),dh=n(L,"LI",{});var F$e=s(dh);Jie=n(F$e,"STRONG",{});var Dht=s(Jie);Zio=r(Dht,"vit_mae"),Dht.forEach(t),edo=r(F$e," \u2014 "),gI=n(F$e,"A",{href:!0});var Ght=s(gI);odo=r(Ght,"ViTMAEConfig"),Ght.forEach(t),rdo=r(F$e," (ViTMAE model)"),F$e.forEach(t),tdo=i(L),ch=n(L,"LI",{});var T$e=s(ch);Yie=n(T$e,"STRONG",{});var Oht=s(Yie);ado=r(Oht,"wav2vec2"),Oht.forEach(t),ndo=r(T$e," \u2014 "),hI=n(T$e,"A",{href:!0});var Vht=s(hI);sdo=r(Vht,"Wav2Vec2Config"),Vht.forEach(t),ldo=r(T$e," (Wav2Vec2 model)"),T$e.forEach(t),ido=i(L),fh=n(L,"LI",{});var M$e=s(fh);Kie=n(M$e,"STRONG",{});var Xht=s(Kie);ddo=r(Xht,"wav2vec2-conformer"),Xht.forEach(t),cdo=r(M$e," \u2014 "),pI=n(M$e,"A",{href:!0});var zht=s(pI);fdo=r(zht,"Wav2Vec2ConformerConfig"),zht.forEach(t),mdo=r(M$e," (Wav2Vec2-Conformer model)"),M$e.forEach(t),gdo=i(L),mh=n(L,"LI",{});var E$e=s(mh);Zie=n(E$e,"STRONG",{});var Wht=s(Zie);hdo=r(Wht,"wavlm"),Wht.forEach(t),pdo=r(E$e," \u2014 "),_I=n(E$e,"A",{href:!0});var Qht=s(_I);_do=r(Qht,"WavLMConfig"),Qht.forEach(t),udo=r(E$e," (WavLM model)"),E$e.forEach(t),bdo=i(L),gh=n(L,"LI",{});var C$e=s(gh);ede=n(C$e,"STRONG",{});var Uht=s(ede);vdo=r(Uht,"xglm"),Uht.forEach(t),Fdo=r(C$e," \u2014 "),uI=n(C$e,"A",{href:!0});var Hht=s(uI);Tdo=r(Hht,"XGLMConfig"),Hht.forEach(t),Mdo=r(C$e," (XGLM model)"),C$e.forEach(t),Edo=i(L),hh=n(L,"LI",{});var w$e=s(hh);ode=n(w$e,"STRONG",{});var Jht=s(ode);Cdo=r(Jht,"xlm"),Jht.forEach(t),wdo=r(w$e," \u2014 "),bI=n(w$e,"A",{href:!0});var Yht=s(bI);Ado=r(Yht,"XLMConfig"),Yht.forEach(t),Ldo=r(w$e," (XLM model)"),w$e.forEach(t),ydo=i(L),ph=n(L,"LI",{});var A$e=s(ph);rde=n(A$e,"STRONG",{});var Kht=s(rde);xdo=r(Kht,"xlm-prophetnet"),Kht.forEach(t),$do=r(A$e," \u2014 "),vI=n(A$e,"A",{href:!0});var Zht=s(vI);kdo=r(Zht,"XLMProphetNetConfig"),Zht.forEach(t),Sdo=r(A$e," (XLM-ProphetNet model)"),A$e.forEach(t),Rdo=i(L),_h=n(L,"LI",{});var L$e=s(_h);tde=n(L$e,"STRONG",{});var ept=s(tde);Pdo=r(ept,"xlm-roberta"),ept.forEach(t),Bdo=r(L$e," \u2014 "),FI=n(L$e,"A",{href:!0});var opt=s(FI);Ido=r(opt,"XLMRobertaConfig"),opt.forEach(t),Ndo=r(L$e," (XLM-RoBERTa model)"),L$e.forEach(t),qdo=i(L),uh=n(L,"LI",{});var y$e=s(uh);ade=n(y$e,"STRONG",{});var rpt=s(ade);jdo=r(rpt,"xlm-roberta-xl"),rpt.forEach(t),Ddo=r(y$e," \u2014 "),TI=n(y$e,"A",{href:!0});var tpt=s(TI);Gdo=r(tpt,"XLMRobertaXLConfig"),tpt.forEach(t),Odo=r(y$e," (XLM-RoBERTa-XL model)"),y$e.forEach(t),Vdo=i(L),bh=n(L,"LI",{});var x$e=s(bh);nde=n(x$e,"STRONG",{});var apt=s(nde);Xdo=r(apt,"xlnet"),apt.forEach(t),zdo=r(x$e," \u2014 "),MI=n(x$e,"A",{href:!0});var npt=s(MI);Wdo=r(npt,"XLNetConfig"),npt.forEach(t),Qdo=r(x$e," (XLNet model)"),x$e.forEach(t),Udo=i(L),vh=n(L,"LI",{});var $$e=s(vh);sde=n($$e,"STRONG",{});var spt=s(sde);Hdo=r(spt,"yolos"),spt.forEach(t),Jdo=r($$e," \u2014 "),EI=n($$e,"A",{href:!0});var lpt=s(EI);Ydo=r(lpt,"YolosConfig"),lpt.forEach(t),Kdo=r($$e," (YOLOS model)"),$$e.forEach(t),Zdo=i(L),Fh=n(L,"LI",{});var k$e=s(Fh);lde=n(k$e,"STRONG",{});var ipt=s(lde);eco=r(ipt,"yoso"),ipt.forEach(t),oco=r(k$e," \u2014 "),CI=n(k$e,"A",{href:!0});var dpt=s(CI);rco=r(dpt,"YosoConfig"),dpt.forEach(t),tco=r(k$e," (YOSO model)"),k$e.forEach(t),L.forEach(t),aco=i(ct),T(Th.$$.fragment,ct),ct.forEach(t),nco=i(dt),Mh=n(dt,"DIV",{class:!0});var eJe=s(Mh);T(Ty.$$.fragment,eJe),sco=i(eJe),ide=n(eJe,"P",{});var cpt=s(ide);lco=r(cpt,"Register a new configuration for this class."),cpt.forEach(t),eJe.forEach(t),dt.forEach(t),YQe=i(f),Ki=n(f,"H2",{class:!0});var oJe=s(Ki);Eh=n(oJe,"A",{id:!0,class:!0,href:!0});var fpt=s(Eh);dde=n(fpt,"SPAN",{});var mpt=s(dde);T(My.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),ico=i(oJe),cde=n(oJe,"SPAN",{});var gpt=s(cde);dco=r(gpt,"AutoTokenizer"),gpt.forEach(t),oJe.forEach(t),KQe=i(f),xo=n(f,"DIV",{class:!0});var cl=s(xo);T(Ey.$$.fragment,cl),cco=i(cl),Cy=n(cl,"P",{});var rJe=s(Cy);fco=r(rJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wI=n(rJe,"A",{href:!0});var hpt=s(wI);mco=r(hpt,"AutoTokenizer.from_pretrained()"),hpt.forEach(t),gco=r(rJe," class method."),rJe.forEach(t),hco=i(cl),wy=n(cl,"P",{});var tJe=s(wy);pco=r(tJe,"This class cannot be instantiated directly using "),fde=n(tJe,"CODE",{});var ppt=s(fde);_co=r(ppt,"__init__()"),ppt.forEach(t),uco=r(tJe," (throws an error)."),tJe.forEach(t),bco=i(cl),Sr=n(cl,"DIV",{class:!0});var fl=s(Sr);T(Ay.$$.fragment,fl),vco=i(fl),mde=n(fl,"P",{});var _pt=s(mde);Fco=r(_pt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_pt.forEach(t),Tco=i(fl),Ga=n(fl,"P",{});var f7=s(Ga);Mco=r(f7,"The tokenizer class to instantiate is selected based on the "),gde=n(f7,"CODE",{});var upt=s(gde);Eco=r(upt,"model_type"),upt.forEach(t),Cco=r(f7,` property of the config object (either
passed as an argument or loaded from `),hde=n(f7,"CODE",{});var bpt=s(hde);wco=r(bpt,"pretrained_model_name_or_path"),bpt.forEach(t),Aco=r(f7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=n(f7,"CODE",{});var vpt=s(pde);Lco=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),yco=r(f7,":"),f7.forEach(t),xco=i(fl),k=n(fl,"UL",{});var S=s(k);Hn=n(S,"LI",{});var VS=s(Hn);_de=n(VS,"STRONG",{});var Fpt=s(_de);$co=r(Fpt,"albert"),Fpt.forEach(t),kco=r(VS," \u2014 "),AI=n(VS,"A",{href:!0});var Tpt=s(AI);Sco=r(Tpt,"AlbertTokenizer"),Tpt.forEach(t),Rco=r(VS," or "),LI=n(VS,"A",{href:!0});var Mpt=s(LI);Pco=r(Mpt,"AlbertTokenizerFast"),Mpt.forEach(t),Bco=r(VS," (ALBERT model)"),VS.forEach(t),Ico=i(S),Jn=n(S,"LI",{});var XS=s(Jn);ude=n(XS,"STRONG",{});var Ept=s(ude);Nco=r(Ept,"bart"),Ept.forEach(t),qco=r(XS," \u2014 "),yI=n(XS,"A",{href:!0});var Cpt=s(yI);jco=r(Cpt,"BartTokenizer"),Cpt.forEach(t),Dco=r(XS," or "),xI=n(XS,"A",{href:!0});var wpt=s(xI);Gco=r(wpt,"BartTokenizerFast"),wpt.forEach(t),Oco=r(XS," (BART model)"),XS.forEach(t),Vco=i(S),Yn=n(S,"LI",{});var zS=s(Yn);bde=n(zS,"STRONG",{});var Apt=s(bde);Xco=r(Apt,"barthez"),Apt.forEach(t),zco=r(zS," \u2014 "),$I=n(zS,"A",{href:!0});var Lpt=s($I);Wco=r(Lpt,"BarthezTokenizer"),Lpt.forEach(t),Qco=r(zS," or "),kI=n(zS,"A",{href:!0});var ypt=s(kI);Uco=r(ypt,"BarthezTokenizerFast"),ypt.forEach(t),Hco=r(zS," (BARThez model)"),zS.forEach(t),Jco=i(S),Ch=n(S,"LI",{});var S$e=s(Ch);vde=n(S$e,"STRONG",{});var xpt=s(vde);Yco=r(xpt,"bartpho"),xpt.forEach(t),Kco=r(S$e," \u2014 "),SI=n(S$e,"A",{href:!0});var $pt=s(SI);Zco=r($pt,"BartphoTokenizer"),$pt.forEach(t),efo=r(S$e," (BARTpho model)"),S$e.forEach(t),ofo=i(S),Kn=n(S,"LI",{});var WS=s(Kn);Fde=n(WS,"STRONG",{});var kpt=s(Fde);rfo=r(kpt,"bert"),kpt.forEach(t),tfo=r(WS," \u2014 "),RI=n(WS,"A",{href:!0});var Spt=s(RI);afo=r(Spt,"BertTokenizer"),Spt.forEach(t),nfo=r(WS," or "),PI=n(WS,"A",{href:!0});var Rpt=s(PI);sfo=r(Rpt,"BertTokenizerFast"),Rpt.forEach(t),lfo=r(WS," (BERT model)"),WS.forEach(t),ifo=i(S),wh=n(S,"LI",{});var R$e=s(wh);Tde=n(R$e,"STRONG",{});var Ppt=s(Tde);dfo=r(Ppt,"bert-generation"),Ppt.forEach(t),cfo=r(R$e," \u2014 "),BI=n(R$e,"A",{href:!0});var Bpt=s(BI);ffo=r(Bpt,"BertGenerationTokenizer"),Bpt.forEach(t),mfo=r(R$e," (Bert Generation model)"),R$e.forEach(t),gfo=i(S),Ah=n(S,"LI",{});var P$e=s(Ah);Mde=n(P$e,"STRONG",{});var Ipt=s(Mde);hfo=r(Ipt,"bert-japanese"),Ipt.forEach(t),pfo=r(P$e," \u2014 "),II=n(P$e,"A",{href:!0});var Npt=s(II);_fo=r(Npt,"BertJapaneseTokenizer"),Npt.forEach(t),ufo=r(P$e," (BertJapanese model)"),P$e.forEach(t),bfo=i(S),Lh=n(S,"LI",{});var B$e=s(Lh);Ede=n(B$e,"STRONG",{});var qpt=s(Ede);vfo=r(qpt,"bertweet"),qpt.forEach(t),Ffo=r(B$e," \u2014 "),NI=n(B$e,"A",{href:!0});var jpt=s(NI);Tfo=r(jpt,"BertweetTokenizer"),jpt.forEach(t),Mfo=r(B$e," (BERTweet model)"),B$e.forEach(t),Efo=i(S),Zn=n(S,"LI",{});var QS=s(Zn);Cde=n(QS,"STRONG",{});var Dpt=s(Cde);Cfo=r(Dpt,"big_bird"),Dpt.forEach(t),wfo=r(QS," \u2014 "),qI=n(QS,"A",{href:!0});var Gpt=s(qI);Afo=r(Gpt,"BigBirdTokenizer"),Gpt.forEach(t),Lfo=r(QS," or "),jI=n(QS,"A",{href:!0});var Opt=s(jI);yfo=r(Opt,"BigBirdTokenizerFast"),Opt.forEach(t),xfo=r(QS," (BigBird model)"),QS.forEach(t),$fo=i(S),es=n(S,"LI",{});var US=s(es);wde=n(US,"STRONG",{});var Vpt=s(wde);kfo=r(Vpt,"bigbird_pegasus"),Vpt.forEach(t),Sfo=r(US," \u2014 "),DI=n(US,"A",{href:!0});var Xpt=s(DI);Rfo=r(Xpt,"PegasusTokenizer"),Xpt.forEach(t),Pfo=r(US," or "),GI=n(US,"A",{href:!0});var zpt=s(GI);Bfo=r(zpt,"PegasusTokenizerFast"),zpt.forEach(t),Ifo=r(US," (BigBird-Pegasus model)"),US.forEach(t),Nfo=i(S),os=n(S,"LI",{});var HS=s(os);Ade=n(HS,"STRONG",{});var Wpt=s(Ade);qfo=r(Wpt,"blenderbot"),Wpt.forEach(t),jfo=r(HS," \u2014 "),OI=n(HS,"A",{href:!0});var Qpt=s(OI);Dfo=r(Qpt,"BlenderbotTokenizer"),Qpt.forEach(t),Gfo=r(HS," or "),VI=n(HS,"A",{href:!0});var Upt=s(VI);Ofo=r(Upt,"BlenderbotTokenizerFast"),Upt.forEach(t),Vfo=r(HS," (Blenderbot model)"),HS.forEach(t),Xfo=i(S),yh=n(S,"LI",{});var I$e=s(yh);Lde=n(I$e,"STRONG",{});var Hpt=s(Lde);zfo=r(Hpt,"blenderbot-small"),Hpt.forEach(t),Wfo=r(I$e," \u2014 "),XI=n(I$e,"A",{href:!0});var Jpt=s(XI);Qfo=r(Jpt,"BlenderbotSmallTokenizer"),Jpt.forEach(t),Ufo=r(I$e," (BlenderbotSmall model)"),I$e.forEach(t),Hfo=i(S),xh=n(S,"LI",{});var N$e=s(xh);yde=n(N$e,"STRONG",{});var Ypt=s(yde);Jfo=r(Ypt,"bloom"),Ypt.forEach(t),Yfo=r(N$e," \u2014 "),zI=n(N$e,"A",{href:!0});var Kpt=s(zI);Kfo=r(Kpt,"BloomTokenizerFast"),Kpt.forEach(t),Zfo=r(N$e," (BLOOM model)"),N$e.forEach(t),emo=i(S),$h=n(S,"LI",{});var q$e=s($h);xde=n(q$e,"STRONG",{});var Zpt=s(xde);omo=r(Zpt,"byt5"),Zpt.forEach(t),rmo=r(q$e," \u2014 "),WI=n(q$e,"A",{href:!0});var e_t=s(WI);tmo=r(e_t,"ByT5Tokenizer"),e_t.forEach(t),amo=r(q$e," (ByT5 model)"),q$e.forEach(t),nmo=i(S),rs=n(S,"LI",{});var JS=s(rs);$de=n(JS,"STRONG",{});var o_t=s($de);smo=r(o_t,"camembert"),o_t.forEach(t),lmo=r(JS," \u2014 "),QI=n(JS,"A",{href:!0});var r_t=s(QI);imo=r(r_t,"CamembertTokenizer"),r_t.forEach(t),dmo=r(JS," or "),UI=n(JS,"A",{href:!0});var t_t=s(UI);cmo=r(t_t,"CamembertTokenizerFast"),t_t.forEach(t),fmo=r(JS," (CamemBERT model)"),JS.forEach(t),mmo=i(S),kh=n(S,"LI",{});var j$e=s(kh);kde=n(j$e,"STRONG",{});var a_t=s(kde);gmo=r(a_t,"canine"),a_t.forEach(t),hmo=r(j$e," \u2014 "),HI=n(j$e,"A",{href:!0});var n_t=s(HI);pmo=r(n_t,"CanineTokenizer"),n_t.forEach(t),_mo=r(j$e," (CANINE model)"),j$e.forEach(t),umo=i(S),ts=n(S,"LI",{});var YS=s(ts);Sde=n(YS,"STRONG",{});var s_t=s(Sde);bmo=r(s_t,"clip"),s_t.forEach(t),vmo=r(YS," \u2014 "),JI=n(YS,"A",{href:!0});var l_t=s(JI);Fmo=r(l_t,"CLIPTokenizer"),l_t.forEach(t),Tmo=r(YS," or "),YI=n(YS,"A",{href:!0});var i_t=s(YI);Mmo=r(i_t,"CLIPTokenizerFast"),i_t.forEach(t),Emo=r(YS," (CLIP model)"),YS.forEach(t),Cmo=i(S),as=n(S,"LI",{});var KS=s(as);Rde=n(KS,"STRONG",{});var d_t=s(Rde);wmo=r(d_t,"codegen"),d_t.forEach(t),Amo=r(KS," \u2014 "),KI=n(KS,"A",{href:!0});var c_t=s(KI);Lmo=r(c_t,"CodeGenTokenizer"),c_t.forEach(t),ymo=r(KS," or "),ZI=n(KS,"A",{href:!0});var f_t=s(ZI);xmo=r(f_t,"CodeGenTokenizerFast"),f_t.forEach(t),$mo=r(KS," (CodeGen model)"),KS.forEach(t),kmo=i(S),ns=n(S,"LI",{});var ZS=s(ns);Pde=n(ZS,"STRONG",{});var m_t=s(Pde);Smo=r(m_t,"convbert"),m_t.forEach(t),Rmo=r(ZS," \u2014 "),eN=n(ZS,"A",{href:!0});var g_t=s(eN);Pmo=r(g_t,"ConvBertTokenizer"),g_t.forEach(t),Bmo=r(ZS," or "),oN=n(ZS,"A",{href:!0});var h_t=s(oN);Imo=r(h_t,"ConvBertTokenizerFast"),h_t.forEach(t),Nmo=r(ZS," (ConvBERT model)"),ZS.forEach(t),qmo=i(S),ss=n(S,"LI",{});var eR=s(ss);Bde=n(eR,"STRONG",{});var p_t=s(Bde);jmo=r(p_t,"cpm"),p_t.forEach(t),Dmo=r(eR," \u2014 "),rN=n(eR,"A",{href:!0});var __t=s(rN);Gmo=r(__t,"CpmTokenizer"),__t.forEach(t),Omo=r(eR," or "),tN=n(eR,"A",{href:!0});var u_t=s(tN);Vmo=r(u_t,"CpmTokenizerFast"),u_t.forEach(t),Xmo=r(eR," (CPM model)"),eR.forEach(t),zmo=i(S),Sh=n(S,"LI",{});var D$e=s(Sh);Ide=n(D$e,"STRONG",{});var b_t=s(Ide);Wmo=r(b_t,"ctrl"),b_t.forEach(t),Qmo=r(D$e," \u2014 "),aN=n(D$e,"A",{href:!0});var v_t=s(aN);Umo=r(v_t,"CTRLTokenizer"),v_t.forEach(t),Hmo=r(D$e," (CTRL model)"),D$e.forEach(t),Jmo=i(S),ls=n(S,"LI",{});var oR=s(ls);Nde=n(oR,"STRONG",{});var F_t=s(Nde);Ymo=r(F_t,"data2vec-text"),F_t.forEach(t),Kmo=r(oR," \u2014 "),nN=n(oR,"A",{href:!0});var T_t=s(nN);Zmo=r(T_t,"RobertaTokenizer"),T_t.forEach(t),ego=r(oR," or "),sN=n(oR,"A",{href:!0});var M_t=s(sN);ogo=r(M_t,"RobertaTokenizerFast"),M_t.forEach(t),rgo=r(oR," (Data2VecText model)"),oR.forEach(t),tgo=i(S),is=n(S,"LI",{});var rR=s(is);qde=n(rR,"STRONG",{});var E_t=s(qde);ago=r(E_t,"deberta"),E_t.forEach(t),ngo=r(rR," \u2014 "),lN=n(rR,"A",{href:!0});var C_t=s(lN);sgo=r(C_t,"DebertaTokenizer"),C_t.forEach(t),lgo=r(rR," or "),iN=n(rR,"A",{href:!0});var w_t=s(iN);igo=r(w_t,"DebertaTokenizerFast"),w_t.forEach(t),dgo=r(rR," (DeBERTa model)"),rR.forEach(t),cgo=i(S),ds=n(S,"LI",{});var tR=s(ds);jde=n(tR,"STRONG",{});var A_t=s(jde);fgo=r(A_t,"deberta-v2"),A_t.forEach(t),mgo=r(tR," \u2014 "),dN=n(tR,"A",{href:!0});var L_t=s(dN);ggo=r(L_t,"DebertaV2Tokenizer"),L_t.forEach(t),hgo=r(tR," or "),cN=n(tR,"A",{href:!0});var y_t=s(cN);pgo=r(y_t,"DebertaV2TokenizerFast"),y_t.forEach(t),_go=r(tR," (DeBERTa-v2 model)"),tR.forEach(t),ugo=i(S),cs=n(S,"LI",{});var aR=s(cs);Dde=n(aR,"STRONG",{});var x_t=s(Dde);bgo=r(x_t,"distilbert"),x_t.forEach(t),vgo=r(aR," \u2014 "),fN=n(aR,"A",{href:!0});var $_t=s(fN);Fgo=r($_t,"DistilBertTokenizer"),$_t.forEach(t),Tgo=r(aR," or "),mN=n(aR,"A",{href:!0});var k_t=s(mN);Mgo=r(k_t,"DistilBertTokenizerFast"),k_t.forEach(t),Ego=r(aR," (DistilBERT model)"),aR.forEach(t),Cgo=i(S),fs=n(S,"LI",{});var nR=s(fs);Gde=n(nR,"STRONG",{});var S_t=s(Gde);wgo=r(S_t,"dpr"),S_t.forEach(t),Ago=r(nR," \u2014 "),gN=n(nR,"A",{href:!0});var R_t=s(gN);Lgo=r(R_t,"DPRQuestionEncoderTokenizer"),R_t.forEach(t),ygo=r(nR," or "),hN=n(nR,"A",{href:!0});var P_t=s(hN);xgo=r(P_t,"DPRQuestionEncoderTokenizerFast"),P_t.forEach(t),$go=r(nR," (DPR model)"),nR.forEach(t),kgo=i(S),ms=n(S,"LI",{});var sR=s(ms);Ode=n(sR,"STRONG",{});var B_t=s(Ode);Sgo=r(B_t,"electra"),B_t.forEach(t),Rgo=r(sR," \u2014 "),pN=n(sR,"A",{href:!0});var I_t=s(pN);Pgo=r(I_t,"ElectraTokenizer"),I_t.forEach(t),Bgo=r(sR," or "),_N=n(sR,"A",{href:!0});var N_t=s(_N);Igo=r(N_t,"ElectraTokenizerFast"),N_t.forEach(t),Ngo=r(sR," (ELECTRA model)"),sR.forEach(t),qgo=i(S),Rh=n(S,"LI",{});var G$e=s(Rh);Vde=n(G$e,"STRONG",{});var q_t=s(Vde);jgo=r(q_t,"flaubert"),q_t.forEach(t),Dgo=r(G$e," \u2014 "),uN=n(G$e,"A",{href:!0});var j_t=s(uN);Ggo=r(j_t,"FlaubertTokenizer"),j_t.forEach(t),Ogo=r(G$e," (FlauBERT model)"),G$e.forEach(t),Vgo=i(S),gs=n(S,"LI",{});var lR=s(gs);Xde=n(lR,"STRONG",{});var D_t=s(Xde);Xgo=r(D_t,"fnet"),D_t.forEach(t),zgo=r(lR," \u2014 "),bN=n(lR,"A",{href:!0});var G_t=s(bN);Wgo=r(G_t,"FNetTokenizer"),G_t.forEach(t),Qgo=r(lR," or "),vN=n(lR,"A",{href:!0});var O_t=s(vN);Ugo=r(O_t,"FNetTokenizerFast"),O_t.forEach(t),Hgo=r(lR," (FNet model)"),lR.forEach(t),Jgo=i(S),Ph=n(S,"LI",{});var O$e=s(Ph);zde=n(O$e,"STRONG",{});var V_t=s(zde);Ygo=r(V_t,"fsmt"),V_t.forEach(t),Kgo=r(O$e," \u2014 "),FN=n(O$e,"A",{href:!0});var X_t=s(FN);Zgo=r(X_t,"FSMTTokenizer"),X_t.forEach(t),eho=r(O$e," (FairSeq Machine-Translation model)"),O$e.forEach(t),oho=i(S),hs=n(S,"LI",{});var iR=s(hs);Wde=n(iR,"STRONG",{});var z_t=s(Wde);rho=r(z_t,"funnel"),z_t.forEach(t),tho=r(iR," \u2014 "),TN=n(iR,"A",{href:!0});var W_t=s(TN);aho=r(W_t,"FunnelTokenizer"),W_t.forEach(t),nho=r(iR," or "),MN=n(iR,"A",{href:!0});var Q_t=s(MN);sho=r(Q_t,"FunnelTokenizerFast"),Q_t.forEach(t),lho=r(iR," (Funnel Transformer model)"),iR.forEach(t),iho=i(S),ps=n(S,"LI",{});var dR=s(ps);Qde=n(dR,"STRONG",{});var U_t=s(Qde);dho=r(U_t,"gpt2"),U_t.forEach(t),cho=r(dR," \u2014 "),EN=n(dR,"A",{href:!0});var H_t=s(EN);fho=r(H_t,"GPT2Tokenizer"),H_t.forEach(t),mho=r(dR," or "),CN=n(dR,"A",{href:!0});var J_t=s(CN);gho=r(J_t,"GPT2TokenizerFast"),J_t.forEach(t),hho=r(dR," (OpenAI GPT-2 model)"),dR.forEach(t),pho=i(S),_s=n(S,"LI",{});var cR=s(_s);Ude=n(cR,"STRONG",{});var Y_t=s(Ude);_ho=r(Y_t,"gpt_neo"),Y_t.forEach(t),uho=r(cR," \u2014 "),wN=n(cR,"A",{href:!0});var K_t=s(wN);bho=r(K_t,"GPT2Tokenizer"),K_t.forEach(t),vho=r(cR," or "),AN=n(cR,"A",{href:!0});var Z_t=s(AN);Fho=r(Z_t,"GPT2TokenizerFast"),Z_t.forEach(t),Tho=r(cR," (GPT Neo model)"),cR.forEach(t),Mho=i(S),Bh=n(S,"LI",{});var V$e=s(Bh);Hde=n(V$e,"STRONG",{});var eut=s(Hde);Eho=r(eut,"gpt_neox"),eut.forEach(t),Cho=r(V$e," \u2014 "),LN=n(V$e,"A",{href:!0});var out=s(LN);who=r(out,"GPTNeoXTokenizerFast"),out.forEach(t),Aho=r(V$e," (GPT NeoX model)"),V$e.forEach(t),Lho=i(S),us=n(S,"LI",{});var fR=s(us);Jde=n(fR,"STRONG",{});var rut=s(Jde);yho=r(rut,"gptj"),rut.forEach(t),xho=r(fR," \u2014 "),yN=n(fR,"A",{href:!0});var tut=s(yN);$ho=r(tut,"GPT2Tokenizer"),tut.forEach(t),kho=r(fR," or "),xN=n(fR,"A",{href:!0});var aut=s(xN);Sho=r(aut,"GPT2TokenizerFast"),aut.forEach(t),Rho=r(fR," (GPT-J model)"),fR.forEach(t),Pho=i(S),bs=n(S,"LI",{});var mR=s(bs);Yde=n(mR,"STRONG",{});var nut=s(Yde);Bho=r(nut,"groupvit"),nut.forEach(t),Iho=r(mR," \u2014 "),$N=n(mR,"A",{href:!0});var sut=s($N);Nho=r(sut,"CLIPTokenizer"),sut.forEach(t),qho=r(mR," or "),kN=n(mR,"A",{href:!0});var lut=s(kN);jho=r(lut,"CLIPTokenizerFast"),lut.forEach(t),Dho=r(mR," (GroupViT model)"),mR.forEach(t),Gho=i(S),vs=n(S,"LI",{});var gR=s(vs);Kde=n(gR,"STRONG",{});var iut=s(Kde);Oho=r(iut,"herbert"),iut.forEach(t),Vho=r(gR," \u2014 "),SN=n(gR,"A",{href:!0});var dut=s(SN);Xho=r(dut,"HerbertTokenizer"),dut.forEach(t),zho=r(gR," or "),RN=n(gR,"A",{href:!0});var cut=s(RN);Who=r(cut,"HerbertTokenizerFast"),cut.forEach(t),Qho=r(gR," (HerBERT model)"),gR.forEach(t),Uho=i(S),Ih=n(S,"LI",{});var X$e=s(Ih);Zde=n(X$e,"STRONG",{});var fut=s(Zde);Hho=r(fut,"hubert"),fut.forEach(t),Jho=r(X$e," \u2014 "),PN=n(X$e,"A",{href:!0});var mut=s(PN);Yho=r(mut,"Wav2Vec2CTCTokenizer"),mut.forEach(t),Kho=r(X$e," (Hubert model)"),X$e.forEach(t),Zho=i(S),Fs=n(S,"LI",{});var hR=s(Fs);ece=n(hR,"STRONG",{});var gut=s(ece);epo=r(gut,"ibert"),gut.forEach(t),opo=r(hR," \u2014 "),BN=n(hR,"A",{href:!0});var hut=s(BN);rpo=r(hut,"RobertaTokenizer"),hut.forEach(t),tpo=r(hR," or "),IN=n(hR,"A",{href:!0});var put=s(IN);apo=r(put,"RobertaTokenizerFast"),put.forEach(t),npo=r(hR," (I-BERT model)"),hR.forEach(t),spo=i(S),Ts=n(S,"LI",{});var pR=s(Ts);oce=n(pR,"STRONG",{});var _ut=s(oce);lpo=r(_ut,"layoutlm"),_ut.forEach(t),ipo=r(pR," \u2014 "),NN=n(pR,"A",{href:!0});var uut=s(NN);dpo=r(uut,"LayoutLMTokenizer"),uut.forEach(t),cpo=r(pR," or "),qN=n(pR,"A",{href:!0});var but=s(qN);fpo=r(but,"LayoutLMTokenizerFast"),but.forEach(t),mpo=r(pR," (LayoutLM model)"),pR.forEach(t),gpo=i(S),Ms=n(S,"LI",{});var _R=s(Ms);rce=n(_R,"STRONG",{});var vut=s(rce);hpo=r(vut,"layoutlmv2"),vut.forEach(t),ppo=r(_R," \u2014 "),jN=n(_R,"A",{href:!0});var Fut=s(jN);_po=r(Fut,"LayoutLMv2Tokenizer"),Fut.forEach(t),upo=r(_R," or "),DN=n(_R,"A",{href:!0});var Tut=s(DN);bpo=r(Tut,"LayoutLMv2TokenizerFast"),Tut.forEach(t),vpo=r(_R," (LayoutLMv2 model)"),_R.forEach(t),Fpo=i(S),Es=n(S,"LI",{});var uR=s(Es);tce=n(uR,"STRONG",{});var Mut=s(tce);Tpo=r(Mut,"layoutlmv3"),Mut.forEach(t),Mpo=r(uR," \u2014 "),GN=n(uR,"A",{href:!0});var Eut=s(GN);Epo=r(Eut,"LayoutLMv3Tokenizer"),Eut.forEach(t),Cpo=r(uR," or "),ON=n(uR,"A",{href:!0});var Cut=s(ON);wpo=r(Cut,"LayoutLMv3TokenizerFast"),Cut.forEach(t),Apo=r(uR," (LayoutLMv3 model)"),uR.forEach(t),Lpo=i(S),Cs=n(S,"LI",{});var bR=s(Cs);ace=n(bR,"STRONG",{});var wut=s(ace);ypo=r(wut,"layoutxlm"),wut.forEach(t),xpo=r(bR," \u2014 "),VN=n(bR,"A",{href:!0});var Aut=s(VN);$po=r(Aut,"LayoutXLMTokenizer"),Aut.forEach(t),kpo=r(bR," or "),XN=n(bR,"A",{href:!0});var Lut=s(XN);Spo=r(Lut,"LayoutXLMTokenizerFast"),Lut.forEach(t),Rpo=r(bR," (LayoutXLM model)"),bR.forEach(t),Ppo=i(S),ws=n(S,"LI",{});var vR=s(ws);nce=n(vR,"STRONG",{});var yut=s(nce);Bpo=r(yut,"led"),yut.forEach(t),Ipo=r(vR," \u2014 "),zN=n(vR,"A",{href:!0});var xut=s(zN);Npo=r(xut,"LEDTokenizer"),xut.forEach(t),qpo=r(vR," or "),WN=n(vR,"A",{href:!0});var $ut=s(WN);jpo=r($ut,"LEDTokenizerFast"),$ut.forEach(t),Dpo=r(vR," (LED model)"),vR.forEach(t),Gpo=i(S),As=n(S,"LI",{});var FR=s(As);sce=n(FR,"STRONG",{});var kut=s(sce);Opo=r(kut,"longformer"),kut.forEach(t),Vpo=r(FR," \u2014 "),QN=n(FR,"A",{href:!0});var Sut=s(QN);Xpo=r(Sut,"LongformerTokenizer"),Sut.forEach(t),zpo=r(FR," or "),UN=n(FR,"A",{href:!0});var Rut=s(UN);Wpo=r(Rut,"LongformerTokenizerFast"),Rut.forEach(t),Qpo=r(FR," (Longformer model)"),FR.forEach(t),Upo=i(S),Ls=n(S,"LI",{});var TR=s(Ls);lce=n(TR,"STRONG",{});var Put=s(lce);Hpo=r(Put,"longt5"),Put.forEach(t),Jpo=r(TR," \u2014 "),HN=n(TR,"A",{href:!0});var But=s(HN);Ypo=r(But,"T5Tokenizer"),But.forEach(t),Kpo=r(TR," or "),JN=n(TR,"A",{href:!0});var Iut=s(JN);Zpo=r(Iut,"T5TokenizerFast"),Iut.forEach(t),e_o=r(TR," (LongT5 model)"),TR.forEach(t),o_o=i(S),Nh=n(S,"LI",{});var z$e=s(Nh);ice=n(z$e,"STRONG",{});var Nut=s(ice);r_o=r(Nut,"luke"),Nut.forEach(t),t_o=r(z$e," \u2014 "),YN=n(z$e,"A",{href:!0});var qut=s(YN);a_o=r(qut,"LukeTokenizer"),qut.forEach(t),n_o=r(z$e," (LUKE model)"),z$e.forEach(t),s_o=i(S),ys=n(S,"LI",{});var MR=s(ys);dce=n(MR,"STRONG",{});var jut=s(dce);l_o=r(jut,"lxmert"),jut.forEach(t),i_o=r(MR," \u2014 "),KN=n(MR,"A",{href:!0});var Dut=s(KN);d_o=r(Dut,"LxmertTokenizer"),Dut.forEach(t),c_o=r(MR," or "),ZN=n(MR,"A",{href:!0});var Gut=s(ZN);f_o=r(Gut,"LxmertTokenizerFast"),Gut.forEach(t),m_o=r(MR," (LXMERT model)"),MR.forEach(t),g_o=i(S),qh=n(S,"LI",{});var W$e=s(qh);cce=n(W$e,"STRONG",{});var Out=s(cce);h_o=r(Out,"m2m_100"),Out.forEach(t),p_o=r(W$e," \u2014 "),eq=n(W$e,"A",{href:!0});var Vut=s(eq);__o=r(Vut,"M2M100Tokenizer"),Vut.forEach(t),u_o=r(W$e," (M2M100 model)"),W$e.forEach(t),b_o=i(S),jh=n(S,"LI",{});var Q$e=s(jh);fce=n(Q$e,"STRONG",{});var Xut=s(fce);v_o=r(Xut,"marian"),Xut.forEach(t),F_o=r(Q$e," \u2014 "),oq=n(Q$e,"A",{href:!0});var zut=s(oq);T_o=r(zut,"MarianTokenizer"),zut.forEach(t),M_o=r(Q$e," (Marian model)"),Q$e.forEach(t),E_o=i(S),xs=n(S,"LI",{});var ER=s(xs);mce=n(ER,"STRONG",{});var Wut=s(mce);C_o=r(Wut,"mbart"),Wut.forEach(t),w_o=r(ER," \u2014 "),rq=n(ER,"A",{href:!0});var Qut=s(rq);A_o=r(Qut,"MBartTokenizer"),Qut.forEach(t),L_o=r(ER," or "),tq=n(ER,"A",{href:!0});var Uut=s(tq);y_o=r(Uut,"MBartTokenizerFast"),Uut.forEach(t),x_o=r(ER," (mBART model)"),ER.forEach(t),$_o=i(S),$s=n(S,"LI",{});var CR=s($s);gce=n(CR,"STRONG",{});var Hut=s(gce);k_o=r(Hut,"mbart50"),Hut.forEach(t),S_o=r(CR," \u2014 "),aq=n(CR,"A",{href:!0});var Jut=s(aq);R_o=r(Jut,"MBart50Tokenizer"),Jut.forEach(t),P_o=r(CR," or "),nq=n(CR,"A",{href:!0});var Yut=s(nq);B_o=r(Yut,"MBart50TokenizerFast"),Yut.forEach(t),I_o=r(CR," (mBART-50 model)"),CR.forEach(t),N_o=i(S),ks=n(S,"LI",{});var wR=s(ks);hce=n(wR,"STRONG",{});var Kut=s(hce);q_o=r(Kut,"megatron-bert"),Kut.forEach(t),j_o=r(wR," \u2014 "),sq=n(wR,"A",{href:!0});var Zut=s(sq);D_o=r(Zut,"BertTokenizer"),Zut.forEach(t),G_o=r(wR," or "),lq=n(wR,"A",{href:!0});var e1t=s(lq);O_o=r(e1t,"BertTokenizerFast"),e1t.forEach(t),V_o=r(wR," (Megatron-BERT model)"),wR.forEach(t),X_o=i(S),Dh=n(S,"LI",{});var U$e=s(Dh);pce=n(U$e,"STRONG",{});var o1t=s(pce);z_o=r(o1t,"mluke"),o1t.forEach(t),W_o=r(U$e," \u2014 "),iq=n(U$e,"A",{href:!0});var r1t=s(iq);Q_o=r(r1t,"MLukeTokenizer"),r1t.forEach(t),U_o=r(U$e," (mLUKE model)"),U$e.forEach(t),H_o=i(S),Ss=n(S,"LI",{});var AR=s(Ss);_ce=n(AR,"STRONG",{});var t1t=s(_ce);J_o=r(t1t,"mobilebert"),t1t.forEach(t),Y_o=r(AR," \u2014 "),dq=n(AR,"A",{href:!0});var a1t=s(dq);K_o=r(a1t,"MobileBertTokenizer"),a1t.forEach(t),Z_o=r(AR," or "),cq=n(AR,"A",{href:!0});var n1t=s(cq);euo=r(n1t,"MobileBertTokenizerFast"),n1t.forEach(t),ouo=r(AR," (MobileBERT model)"),AR.forEach(t),ruo=i(S),Rs=n(S,"LI",{});var LR=s(Rs);uce=n(LR,"STRONG",{});var s1t=s(uce);tuo=r(s1t,"mpnet"),s1t.forEach(t),auo=r(LR," \u2014 "),fq=n(LR,"A",{href:!0});var l1t=s(fq);nuo=r(l1t,"MPNetTokenizer"),l1t.forEach(t),suo=r(LR," or "),mq=n(LR,"A",{href:!0});var i1t=s(mq);luo=r(i1t,"MPNetTokenizerFast"),i1t.forEach(t),iuo=r(LR," (MPNet model)"),LR.forEach(t),duo=i(S),Ps=n(S,"LI",{});var yR=s(Ps);bce=n(yR,"STRONG",{});var d1t=s(bce);cuo=r(d1t,"mt5"),d1t.forEach(t),fuo=r(yR," \u2014 "),gq=n(yR,"A",{href:!0});var c1t=s(gq);muo=r(c1t,"MT5Tokenizer"),c1t.forEach(t),guo=r(yR," or "),hq=n(yR,"A",{href:!0});var f1t=s(hq);huo=r(f1t,"MT5TokenizerFast"),f1t.forEach(t),puo=r(yR," (MT5 model)"),yR.forEach(t),_uo=i(S),Bs=n(S,"LI",{});var xR=s(Bs);vce=n(xR,"STRONG",{});var m1t=s(vce);uuo=r(m1t,"mvp"),m1t.forEach(t),buo=r(xR," \u2014 "),pq=n(xR,"A",{href:!0});var g1t=s(pq);vuo=r(g1t,"MvpTokenizer"),g1t.forEach(t),Fuo=r(xR," or "),_q=n(xR,"A",{href:!0});var h1t=s(_q);Tuo=r(h1t,"MvpTokenizerFast"),h1t.forEach(t),Muo=r(xR," (MVP model)"),xR.forEach(t),Euo=i(S),Is=n(S,"LI",{});var $R=s(Is);Fce=n($R,"STRONG",{});var p1t=s(Fce);Cuo=r(p1t,"nezha"),p1t.forEach(t),wuo=r($R," \u2014 "),uq=n($R,"A",{href:!0});var _1t=s(uq);Auo=r(_1t,"BertTokenizer"),_1t.forEach(t),Luo=r($R," or "),bq=n($R,"A",{href:!0});var u1t=s(bq);yuo=r(u1t,"BertTokenizerFast"),u1t.forEach(t),xuo=r($R," (Nezha model)"),$R.forEach(t),$uo=i(S),Ns=n(S,"LI",{});var kR=s(Ns);Tce=n(kR,"STRONG",{});var b1t=s(Tce);kuo=r(b1t,"nllb"),b1t.forEach(t),Suo=r(kR," \u2014 "),vq=n(kR,"A",{href:!0});var v1t=s(vq);Ruo=r(v1t,"NllbTokenizer"),v1t.forEach(t),Puo=r(kR," or "),Fq=n(kR,"A",{href:!0});var F1t=s(Fq);Buo=r(F1t,"NllbTokenizerFast"),F1t.forEach(t),Iuo=r(kR," (NLLB model)"),kR.forEach(t),Nuo=i(S),qs=n(S,"LI",{});var SR=s(qs);Mce=n(SR,"STRONG",{});var T1t=s(Mce);quo=r(T1t,"nystromformer"),T1t.forEach(t),juo=r(SR," \u2014 "),Tq=n(SR,"A",{href:!0});var M1t=s(Tq);Duo=r(M1t,"AlbertTokenizer"),M1t.forEach(t),Guo=r(SR," or "),Mq=n(SR,"A",{href:!0});var E1t=s(Mq);Ouo=r(E1t,"AlbertTokenizerFast"),E1t.forEach(t),Vuo=r(SR," (Nystr\xF6mformer model)"),SR.forEach(t),Xuo=i(S),js=n(S,"LI",{});var RR=s(js);Ece=n(RR,"STRONG",{});var C1t=s(Ece);zuo=r(C1t,"openai-gpt"),C1t.forEach(t),Wuo=r(RR," \u2014 "),Eq=n(RR,"A",{href:!0});var w1t=s(Eq);Quo=r(w1t,"OpenAIGPTTokenizer"),w1t.forEach(t),Uuo=r(RR," or "),Cq=n(RR,"A",{href:!0});var A1t=s(Cq);Huo=r(A1t,"OpenAIGPTTokenizerFast"),A1t.forEach(t),Juo=r(RR," (OpenAI GPT model)"),RR.forEach(t),Yuo=i(S),Gh=n(S,"LI",{});var H$e=s(Gh);Cce=n(H$e,"STRONG",{});var L1t=s(Cce);Kuo=r(L1t,"opt"),L1t.forEach(t),Zuo=r(H$e," \u2014 "),wq=n(H$e,"A",{href:!0});var y1t=s(wq);e1o=r(y1t,"GPT2Tokenizer"),y1t.forEach(t),o1o=r(H$e," (OPT model)"),H$e.forEach(t),r1o=i(S),Ds=n(S,"LI",{});var PR=s(Ds);wce=n(PR,"STRONG",{});var x1t=s(wce);t1o=r(x1t,"owlvit"),x1t.forEach(t),a1o=r(PR," \u2014 "),Aq=n(PR,"A",{href:!0});var $1t=s(Aq);n1o=r($1t,"CLIPTokenizer"),$1t.forEach(t),s1o=r(PR," or "),Lq=n(PR,"A",{href:!0});var k1t=s(Lq);l1o=r(k1t,"CLIPTokenizerFast"),k1t.forEach(t),i1o=r(PR," (OWL-ViT model)"),PR.forEach(t),d1o=i(S),Gs=n(S,"LI",{});var BR=s(Gs);Ace=n(BR,"STRONG",{});var S1t=s(Ace);c1o=r(S1t,"pegasus"),S1t.forEach(t),f1o=r(BR," \u2014 "),yq=n(BR,"A",{href:!0});var R1t=s(yq);m1o=r(R1t,"PegasusTokenizer"),R1t.forEach(t),g1o=r(BR," or "),xq=n(BR,"A",{href:!0});var P1t=s(xq);h1o=r(P1t,"PegasusTokenizerFast"),P1t.forEach(t),p1o=r(BR," (Pegasus model)"),BR.forEach(t),_1o=i(S),Oh=n(S,"LI",{});var J$e=s(Oh);Lce=n(J$e,"STRONG",{});var B1t=s(Lce);u1o=r(B1t,"perceiver"),B1t.forEach(t),b1o=r(J$e," \u2014 "),$q=n(J$e,"A",{href:!0});var I1t=s($q);v1o=r(I1t,"PerceiverTokenizer"),I1t.forEach(t),F1o=r(J$e," (Perceiver model)"),J$e.forEach(t),T1o=i(S),Vh=n(S,"LI",{});var Y$e=s(Vh);yce=n(Y$e,"STRONG",{});var N1t=s(yce);M1o=r(N1t,"phobert"),N1t.forEach(t),E1o=r(Y$e," \u2014 "),kq=n(Y$e,"A",{href:!0});var q1t=s(kq);C1o=r(q1t,"PhobertTokenizer"),q1t.forEach(t),w1o=r(Y$e," (PhoBERT model)"),Y$e.forEach(t),A1o=i(S),Xh=n(S,"LI",{});var K$e=s(Xh);xce=n(K$e,"STRONG",{});var j1t=s(xce);L1o=r(j1t,"plbart"),j1t.forEach(t),y1o=r(K$e," \u2014 "),Sq=n(K$e,"A",{href:!0});var D1t=s(Sq);x1o=r(D1t,"PLBartTokenizer"),D1t.forEach(t),$1o=r(K$e," (PLBart model)"),K$e.forEach(t),k1o=i(S),zh=n(S,"LI",{});var Z$e=s(zh);$ce=n(Z$e,"STRONG",{});var G1t=s($ce);S1o=r(G1t,"prophetnet"),G1t.forEach(t),R1o=r(Z$e," \u2014 "),Rq=n(Z$e,"A",{href:!0});var O1t=s(Rq);P1o=r(O1t,"ProphetNetTokenizer"),O1t.forEach(t),B1o=r(Z$e," (ProphetNet model)"),Z$e.forEach(t),I1o=i(S),Os=n(S,"LI",{});var IR=s(Os);kce=n(IR,"STRONG",{});var V1t=s(kce);N1o=r(V1t,"qdqbert"),V1t.forEach(t),q1o=r(IR," \u2014 "),Pq=n(IR,"A",{href:!0});var X1t=s(Pq);j1o=r(X1t,"BertTokenizer"),X1t.forEach(t),D1o=r(IR," or "),Bq=n(IR,"A",{href:!0});var z1t=s(Bq);G1o=r(z1t,"BertTokenizerFast"),z1t.forEach(t),O1o=r(IR," (QDQBert model)"),IR.forEach(t),V1o=i(S),Wh=n(S,"LI",{});var eke=s(Wh);Sce=n(eke,"STRONG",{});var W1t=s(Sce);X1o=r(W1t,"rag"),W1t.forEach(t),z1o=r(eke," \u2014 "),Iq=n(eke,"A",{href:!0});var Q1t=s(Iq);W1o=r(Q1t,"RagTokenizer"),Q1t.forEach(t),Q1o=r(eke," (RAG model)"),eke.forEach(t),U1o=i(S),Vs=n(S,"LI",{});var NR=s(Vs);Rce=n(NR,"STRONG",{});var U1t=s(Rce);H1o=r(U1t,"realm"),U1t.forEach(t),J1o=r(NR," \u2014 "),Nq=n(NR,"A",{href:!0});var H1t=s(Nq);Y1o=r(H1t,"RealmTokenizer"),H1t.forEach(t),K1o=r(NR," or "),qq=n(NR,"A",{href:!0});var J1t=s(qq);Z1o=r(J1t,"RealmTokenizerFast"),J1t.forEach(t),e4o=r(NR," (REALM model)"),NR.forEach(t),o4o=i(S),Xs=n(S,"LI",{});var qR=s(Xs);Pce=n(qR,"STRONG",{});var Y1t=s(Pce);r4o=r(Y1t,"reformer"),Y1t.forEach(t),t4o=r(qR," \u2014 "),jq=n(qR,"A",{href:!0});var K1t=s(jq);a4o=r(K1t,"ReformerTokenizer"),K1t.forEach(t),n4o=r(qR," or "),Dq=n(qR,"A",{href:!0});var Z1t=s(Dq);s4o=r(Z1t,"ReformerTokenizerFast"),Z1t.forEach(t),l4o=r(qR," (Reformer model)"),qR.forEach(t),i4o=i(S),zs=n(S,"LI",{});var jR=s(zs);Bce=n(jR,"STRONG",{});var e4t=s(Bce);d4o=r(e4t,"rembert"),e4t.forEach(t),c4o=r(jR," \u2014 "),Gq=n(jR,"A",{href:!0});var o4t=s(Gq);f4o=r(o4t,"RemBertTokenizer"),o4t.forEach(t),m4o=r(jR," or "),Oq=n(jR,"A",{href:!0});var r4t=s(Oq);g4o=r(r4t,"RemBertTokenizerFast"),r4t.forEach(t),h4o=r(jR," (RemBERT model)"),jR.forEach(t),p4o=i(S),Ws=n(S,"LI",{});var DR=s(Ws);Ice=n(DR,"STRONG",{});var t4t=s(Ice);_4o=r(t4t,"retribert"),t4t.forEach(t),u4o=r(DR," \u2014 "),Vq=n(DR,"A",{href:!0});var a4t=s(Vq);b4o=r(a4t,"RetriBertTokenizer"),a4t.forEach(t),v4o=r(DR," or "),Xq=n(DR,"A",{href:!0});var n4t=s(Xq);F4o=r(n4t,"RetriBertTokenizerFast"),n4t.forEach(t),T4o=r(DR," (RetriBERT model)"),DR.forEach(t),M4o=i(S),Qs=n(S,"LI",{});var GR=s(Qs);Nce=n(GR,"STRONG",{});var s4t=s(Nce);E4o=r(s4t,"roberta"),s4t.forEach(t),C4o=r(GR," \u2014 "),zq=n(GR,"A",{href:!0});var l4t=s(zq);w4o=r(l4t,"RobertaTokenizer"),l4t.forEach(t),A4o=r(GR," or "),Wq=n(GR,"A",{href:!0});var i4t=s(Wq);L4o=r(i4t,"RobertaTokenizerFast"),i4t.forEach(t),y4o=r(GR," (RoBERTa model)"),GR.forEach(t),x4o=i(S),Us=n(S,"LI",{});var OR=s(Us);qce=n(OR,"STRONG",{});var d4t=s(qce);$4o=r(d4t,"roformer"),d4t.forEach(t),k4o=r(OR," \u2014 "),Qq=n(OR,"A",{href:!0});var c4t=s(Qq);S4o=r(c4t,"RoFormerTokenizer"),c4t.forEach(t),R4o=r(OR," or "),Uq=n(OR,"A",{href:!0});var f4t=s(Uq);P4o=r(f4t,"RoFormerTokenizerFast"),f4t.forEach(t),B4o=r(OR," (RoFormer model)"),OR.forEach(t),I4o=i(S),Qh=n(S,"LI",{});var oke=s(Qh);jce=n(oke,"STRONG",{});var m4t=s(jce);N4o=r(m4t,"speech_to_text"),m4t.forEach(t),q4o=r(oke," \u2014 "),Hq=n(oke,"A",{href:!0});var g4t=s(Hq);j4o=r(g4t,"Speech2TextTokenizer"),g4t.forEach(t),D4o=r(oke," (Speech2Text model)"),oke.forEach(t),G4o=i(S),Uh=n(S,"LI",{});var rke=s(Uh);Dce=n(rke,"STRONG",{});var h4t=s(Dce);O4o=r(h4t,"speech_to_text_2"),h4t.forEach(t),V4o=r(rke," \u2014 "),Jq=n(rke,"A",{href:!0});var p4t=s(Jq);X4o=r(p4t,"Speech2Text2Tokenizer"),p4t.forEach(t),z4o=r(rke," (Speech2Text2 model)"),rke.forEach(t),W4o=i(S),Hs=n(S,"LI",{});var VR=s(Hs);Gce=n(VR,"STRONG",{});var _4t=s(Gce);Q4o=r(_4t,"splinter"),_4t.forEach(t),U4o=r(VR," \u2014 "),Yq=n(VR,"A",{href:!0});var u4t=s(Yq);H4o=r(u4t,"SplinterTokenizer"),u4t.forEach(t),J4o=r(VR," or "),Kq=n(VR,"A",{href:!0});var b4t=s(Kq);Y4o=r(b4t,"SplinterTokenizerFast"),b4t.forEach(t),K4o=r(VR," (Splinter model)"),VR.forEach(t),Z4o=i(S),Js=n(S,"LI",{});var XR=s(Js);Oce=n(XR,"STRONG",{});var v4t=s(Oce);e2o=r(v4t,"squeezebert"),v4t.forEach(t),o2o=r(XR," \u2014 "),Zq=n(XR,"A",{href:!0});var F4t=s(Zq);r2o=r(F4t,"SqueezeBertTokenizer"),F4t.forEach(t),t2o=r(XR," or "),ej=n(XR,"A",{href:!0});var T4t=s(ej);a2o=r(T4t,"SqueezeBertTokenizerFast"),T4t.forEach(t),n2o=r(XR," (SqueezeBERT model)"),XR.forEach(t),s2o=i(S),Ys=n(S,"LI",{});var zR=s(Ys);Vce=n(zR,"STRONG",{});var M4t=s(Vce);l2o=r(M4t,"t5"),M4t.forEach(t),i2o=r(zR," \u2014 "),oj=n(zR,"A",{href:!0});var E4t=s(oj);d2o=r(E4t,"T5Tokenizer"),E4t.forEach(t),c2o=r(zR," or "),rj=n(zR,"A",{href:!0});var C4t=s(rj);f2o=r(C4t,"T5TokenizerFast"),C4t.forEach(t),m2o=r(zR," (T5 model)"),zR.forEach(t),g2o=i(S),Hh=n(S,"LI",{});var tke=s(Hh);Xce=n(tke,"STRONG",{});var w4t=s(Xce);h2o=r(w4t,"tapas"),w4t.forEach(t),p2o=r(tke," \u2014 "),tj=n(tke,"A",{href:!0});var A4t=s(tj);_2o=r(A4t,"TapasTokenizer"),A4t.forEach(t),u2o=r(tke," (TAPAS model)"),tke.forEach(t),b2o=i(S),Jh=n(S,"LI",{});var ake=s(Jh);zce=n(ake,"STRONG",{});var L4t=s(zce);v2o=r(L4t,"tapex"),L4t.forEach(t),F2o=r(ake," \u2014 "),aj=n(ake,"A",{href:!0});var y4t=s(aj);T2o=r(y4t,"TapexTokenizer"),y4t.forEach(t),M2o=r(ake," (TAPEX model)"),ake.forEach(t),E2o=i(S),Yh=n(S,"LI",{});var nke=s(Yh);Wce=n(nke,"STRONG",{});var x4t=s(Wce);C2o=r(x4t,"transfo-xl"),x4t.forEach(t),w2o=r(nke," \u2014 "),nj=n(nke,"A",{href:!0});var $4t=s(nj);A2o=r($4t,"TransfoXLTokenizer"),$4t.forEach(t),L2o=r(nke," (Transformer-XL model)"),nke.forEach(t),y2o=i(S),Ks=n(S,"LI",{});var WR=s(Ks);Qce=n(WR,"STRONG",{});var k4t=s(Qce);x2o=r(k4t,"vilt"),k4t.forEach(t),$2o=r(WR," \u2014 "),sj=n(WR,"A",{href:!0});var S4t=s(sj);k2o=r(S4t,"BertTokenizer"),S4t.forEach(t),S2o=r(WR," or "),lj=n(WR,"A",{href:!0});var R4t=s(lj);R2o=r(R4t,"BertTokenizerFast"),R4t.forEach(t),P2o=r(WR," (ViLT model)"),WR.forEach(t),B2o=i(S),Zs=n(S,"LI",{});var QR=s(Zs);Uce=n(QR,"STRONG",{});var P4t=s(Uce);I2o=r(P4t,"visual_bert"),P4t.forEach(t),N2o=r(QR," \u2014 "),ij=n(QR,"A",{href:!0});var B4t=s(ij);q2o=r(B4t,"BertTokenizer"),B4t.forEach(t),j2o=r(QR," or "),dj=n(QR,"A",{href:!0});var I4t=s(dj);D2o=r(I4t,"BertTokenizerFast"),I4t.forEach(t),G2o=r(QR," (VisualBERT model)"),QR.forEach(t),O2o=i(S),Kh=n(S,"LI",{});var ske=s(Kh);Hce=n(ske,"STRONG",{});var N4t=s(Hce);V2o=r(N4t,"wav2vec2"),N4t.forEach(t),X2o=r(ske," \u2014 "),cj=n(ske,"A",{href:!0});var q4t=s(cj);z2o=r(q4t,"Wav2Vec2CTCTokenizer"),q4t.forEach(t),W2o=r(ske," (Wav2Vec2 model)"),ske.forEach(t),Q2o=i(S),Zh=n(S,"LI",{});var lke=s(Zh);Jce=n(lke,"STRONG",{});var j4t=s(Jce);U2o=r(j4t,"wav2vec2-conformer"),j4t.forEach(t),H2o=r(lke," \u2014 "),fj=n(lke,"A",{href:!0});var D4t=s(fj);J2o=r(D4t,"Wav2Vec2CTCTokenizer"),D4t.forEach(t),Y2o=r(lke," (Wav2Vec2-Conformer model)"),lke.forEach(t),K2o=i(S),ep=n(S,"LI",{});var ike=s(ep);Yce=n(ike,"STRONG",{});var G4t=s(Yce);Z2o=r(G4t,"wav2vec2_phoneme"),G4t.forEach(t),ebo=r(ike," \u2014 "),mj=n(ike,"A",{href:!0});var O4t=s(mj);obo=r(O4t,"Wav2Vec2PhonemeCTCTokenizer"),O4t.forEach(t),rbo=r(ike," (Wav2Vec2Phoneme model)"),ike.forEach(t),tbo=i(S),el=n(S,"LI",{});var UR=s(el);Kce=n(UR,"STRONG",{});var V4t=s(Kce);abo=r(V4t,"xglm"),V4t.forEach(t),nbo=r(UR," \u2014 "),gj=n(UR,"A",{href:!0});var X4t=s(gj);sbo=r(X4t,"XGLMTokenizer"),X4t.forEach(t),lbo=r(UR," or "),hj=n(UR,"A",{href:!0});var z4t=s(hj);ibo=r(z4t,"XGLMTokenizerFast"),z4t.forEach(t),dbo=r(UR," (XGLM model)"),UR.forEach(t),cbo=i(S),op=n(S,"LI",{});var dke=s(op);Zce=n(dke,"STRONG",{});var W4t=s(Zce);fbo=r(W4t,"xlm"),W4t.forEach(t),mbo=r(dke," \u2014 "),pj=n(dke,"A",{href:!0});var Q4t=s(pj);gbo=r(Q4t,"XLMTokenizer"),Q4t.forEach(t),hbo=r(dke," (XLM model)"),dke.forEach(t),pbo=i(S),rp=n(S,"LI",{});var cke=s(rp);efe=n(cke,"STRONG",{});var U4t=s(efe);_bo=r(U4t,"xlm-prophetnet"),U4t.forEach(t),ubo=r(cke," \u2014 "),_j=n(cke,"A",{href:!0});var H4t=s(_j);bbo=r(H4t,"XLMProphetNetTokenizer"),H4t.forEach(t),vbo=r(cke," (XLM-ProphetNet model)"),cke.forEach(t),Fbo=i(S),ol=n(S,"LI",{});var HR=s(ol);ofe=n(HR,"STRONG",{});var J4t=s(ofe);Tbo=r(J4t,"xlm-roberta"),J4t.forEach(t),Mbo=r(HR," \u2014 "),uj=n(HR,"A",{href:!0});var Y4t=s(uj);Ebo=r(Y4t,"XLMRobertaTokenizer"),Y4t.forEach(t),Cbo=r(HR," or "),bj=n(HR,"A",{href:!0});var K4t=s(bj);wbo=r(K4t,"XLMRobertaTokenizerFast"),K4t.forEach(t),Abo=r(HR," (XLM-RoBERTa model)"),HR.forEach(t),Lbo=i(S),rl=n(S,"LI",{});var JR=s(rl);rfe=n(JR,"STRONG",{});var Z4t=s(rfe);ybo=r(Z4t,"xlm-roberta-xl"),Z4t.forEach(t),xbo=r(JR," \u2014 "),vj=n(JR,"A",{href:!0});var e2t=s(vj);$bo=r(e2t,"RobertaTokenizer"),e2t.forEach(t),kbo=r(JR," or "),Fj=n(JR,"A",{href:!0});var o2t=s(Fj);Sbo=r(o2t,"RobertaTokenizerFast"),o2t.forEach(t),Rbo=r(JR," (XLM-RoBERTa-XL model)"),JR.forEach(t),Pbo=i(S),tl=n(S,"LI",{});var YR=s(tl);tfe=n(YR,"STRONG",{});var r2t=s(tfe);Bbo=r(r2t,"xlnet"),r2t.forEach(t),Ibo=r(YR," \u2014 "),Tj=n(YR,"A",{href:!0});var t2t=s(Tj);Nbo=r(t2t,"XLNetTokenizer"),t2t.forEach(t),qbo=r(YR," or "),Mj=n(YR,"A",{href:!0});var a2t=s(Mj);jbo=r(a2t,"XLNetTokenizerFast"),a2t.forEach(t),Dbo=r(YR," (XLNet model)"),YR.forEach(t),Gbo=i(S),al=n(S,"LI",{});var KR=s(al);afe=n(KR,"STRONG",{});var n2t=s(afe);Obo=r(n2t,"yoso"),n2t.forEach(t),Vbo=r(KR," \u2014 "),Ej=n(KR,"A",{href:!0});var s2t=s(Ej);Xbo=r(s2t,"AlbertTokenizer"),s2t.forEach(t),zbo=r(KR," or "),Cj=n(KR,"A",{href:!0});var l2t=s(Cj);Wbo=r(l2t,"AlbertTokenizerFast"),l2t.forEach(t),Qbo=r(KR," (YOSO model)"),KR.forEach(t),S.forEach(t),Ubo=i(fl),T(tp.$$.fragment,fl),fl.forEach(t),Hbo=i(cl),ap=n(cl,"DIV",{class:!0});var aJe=s(ap);T(Ly.$$.fragment,aJe),Jbo=i(aJe),nfe=n(aJe,"P",{});var i2t=s(nfe);Ybo=r(i2t,"Register a new tokenizer in this mapping."),i2t.forEach(t),aJe.forEach(t),cl.forEach(t),ZQe=i(f),Zi=n(f,"H2",{class:!0});var nJe=s(Zi);np=n(nJe,"A",{id:!0,class:!0,href:!0});var d2t=s(np);sfe=n(d2t,"SPAN",{});var c2t=s(sfe);T(yy.$$.fragment,c2t),c2t.forEach(t),d2t.forEach(t),Kbo=i(nJe),lfe=n(nJe,"SPAN",{});var f2t=s(lfe);Zbo=r(f2t,"AutoFeatureExtractor"),f2t.forEach(t),nJe.forEach(t),eUe=i(f),$o=n(f,"DIV",{class:!0});var ml=s($o);T(xy.$$.fragment,ml),evo=i(ml),$y=n(ml,"P",{});var sJe=s($y);ovo=r(sJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),wj=n(sJe,"A",{href:!0});var m2t=s(wj);rvo=r(m2t,"AutoFeatureExtractor.from_pretrained()"),m2t.forEach(t),tvo=r(sJe," class method."),sJe.forEach(t),avo=i(ml),ky=n(ml,"P",{});var lJe=s(ky);nvo=r(lJe,"This class cannot be instantiated directly using "),ife=n(lJe,"CODE",{});var g2t=s(ife);svo=r(g2t,"__init__()"),g2t.forEach(t),lvo=r(lJe," (throws an error)."),lJe.forEach(t),ivo=i(ml),He=n(ml,"DIV",{class:!0});var fa=s(He);T(Sy.$$.fragment,fa),dvo=i(fa),dfe=n(fa,"P",{});var h2t=s(dfe);cvo=r(h2t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),h2t.forEach(t),fvo=i(fa),Oa=n(fa,"P",{});var m7=s(Oa);mvo=r(m7,"The feature extractor class to instantiate is selected based on the "),cfe=n(m7,"CODE",{});var p2t=s(cfe);gvo=r(p2t,"model_type"),p2t.forEach(t),hvo=r(m7,` property of the config object
(either passed as an argument or loaded from `),ffe=n(m7,"CODE",{});var _2t=s(ffe);pvo=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),_vo=r(m7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mfe=n(m7,"CODE",{});var u2t=s(mfe);uvo=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),bvo=r(m7,":"),m7.forEach(t),vvo=i(fa),Q=n(fa,"UL",{});var J=s(Q);sp=n(J,"LI",{});var fke=s(sp);gfe=n(fke,"STRONG",{});var b2t=s(gfe);Fvo=r(b2t,"beit"),b2t.forEach(t),Tvo=r(fke," \u2014 "),Aj=n(fke,"A",{href:!0});var v2t=s(Aj);Mvo=r(v2t,"BeitFeatureExtractor"),v2t.forEach(t),Evo=r(fke," (BEiT model)"),fke.forEach(t),Cvo=i(J),lp=n(J,"LI",{});var mke=s(lp);hfe=n(mke,"STRONG",{});var F2t=s(hfe);wvo=r(F2t,"clip"),F2t.forEach(t),Avo=r(mke," \u2014 "),Lj=n(mke,"A",{href:!0});var T2t=s(Lj);Lvo=r(T2t,"CLIPFeatureExtractor"),T2t.forEach(t),yvo=r(mke," (CLIP model)"),mke.forEach(t),xvo=i(J),ip=n(J,"LI",{});var gke=s(ip);pfe=n(gke,"STRONG",{});var M2t=s(pfe);$vo=r(M2t,"convnext"),M2t.forEach(t),kvo=r(gke," \u2014 "),yj=n(gke,"A",{href:!0});var E2t=s(yj);Svo=r(E2t,"ConvNextFeatureExtractor"),E2t.forEach(t),Rvo=r(gke," (ConvNeXT model)"),gke.forEach(t),Pvo=i(J),dp=n(J,"LI",{});var hke=s(dp);_fe=n(hke,"STRONG",{});var C2t=s(_fe);Bvo=r(C2t,"cvt"),C2t.forEach(t),Ivo=r(hke," \u2014 "),xj=n(hke,"A",{href:!0});var w2t=s(xj);Nvo=r(w2t,"ConvNextFeatureExtractor"),w2t.forEach(t),qvo=r(hke," (CvT model)"),hke.forEach(t),jvo=i(J),cp=n(J,"LI",{});var pke=s(cp);ufe=n(pke,"STRONG",{});var A2t=s(ufe);Dvo=r(A2t,"data2vec-audio"),A2t.forEach(t),Gvo=r(pke," \u2014 "),$j=n(pke,"A",{href:!0});var L2t=s($j);Ovo=r(L2t,"Wav2Vec2FeatureExtractor"),L2t.forEach(t),Vvo=r(pke," (Data2VecAudio model)"),pke.forEach(t),Xvo=i(J),fp=n(J,"LI",{});var _ke=s(fp);bfe=n(_ke,"STRONG",{});var y2t=s(bfe);zvo=r(y2t,"data2vec-vision"),y2t.forEach(t),Wvo=r(_ke," \u2014 "),kj=n(_ke,"A",{href:!0});var x2t=s(kj);Qvo=r(x2t,"BeitFeatureExtractor"),x2t.forEach(t),Uvo=r(_ke," (Data2VecVision model)"),_ke.forEach(t),Hvo=i(J),mp=n(J,"LI",{});var uke=s(mp);vfe=n(uke,"STRONG",{});var $2t=s(vfe);Jvo=r($2t,"deit"),$2t.forEach(t),Yvo=r(uke," \u2014 "),Sj=n(uke,"A",{href:!0});var k2t=s(Sj);Kvo=r(k2t,"DeiTFeatureExtractor"),k2t.forEach(t),Zvo=r(uke," (DeiT model)"),uke.forEach(t),e5o=i(J),gp=n(J,"LI",{});var bke=s(gp);Ffe=n(bke,"STRONG",{});var S2t=s(Ffe);o5o=r(S2t,"detr"),S2t.forEach(t),r5o=r(bke," \u2014 "),Rj=n(bke,"A",{href:!0});var R2t=s(Rj);t5o=r(R2t,"DetrFeatureExtractor"),R2t.forEach(t),a5o=r(bke," (DETR model)"),bke.forEach(t),n5o=i(J),hp=n(J,"LI",{});var vke=s(hp);Tfe=n(vke,"STRONG",{});var P2t=s(Tfe);s5o=r(P2t,"donut"),P2t.forEach(t),l5o=r(vke," \u2014 "),Pj=n(vke,"A",{href:!0});var B2t=s(Pj);i5o=r(B2t,"DonutFeatureExtractor"),B2t.forEach(t),d5o=r(vke," (Donut model)"),vke.forEach(t),c5o=i(J),pp=n(J,"LI",{});var Fke=s(pp);Mfe=n(Fke,"STRONG",{});var I2t=s(Mfe);f5o=r(I2t,"dpt"),I2t.forEach(t),m5o=r(Fke," \u2014 "),Bj=n(Fke,"A",{href:!0});var N2t=s(Bj);g5o=r(N2t,"DPTFeatureExtractor"),N2t.forEach(t),h5o=r(Fke," (DPT model)"),Fke.forEach(t),p5o=i(J),_p=n(J,"LI",{});var Tke=s(_p);Efe=n(Tke,"STRONG",{});var q2t=s(Efe);_5o=r(q2t,"flava"),q2t.forEach(t),u5o=r(Tke," \u2014 "),Ij=n(Tke,"A",{href:!0});var j2t=s(Ij);b5o=r(j2t,"FlavaFeatureExtractor"),j2t.forEach(t),v5o=r(Tke," (FLAVA model)"),Tke.forEach(t),F5o=i(J),up=n(J,"LI",{});var Mke=s(up);Cfe=n(Mke,"STRONG",{});var D2t=s(Cfe);T5o=r(D2t,"glpn"),D2t.forEach(t),M5o=r(Mke," \u2014 "),Nj=n(Mke,"A",{href:!0});var G2t=s(Nj);E5o=r(G2t,"GLPNFeatureExtractor"),G2t.forEach(t),C5o=r(Mke," (GLPN model)"),Mke.forEach(t),w5o=i(J),bp=n(J,"LI",{});var Eke=s(bp);wfe=n(Eke,"STRONG",{});var O2t=s(wfe);A5o=r(O2t,"groupvit"),O2t.forEach(t),L5o=r(Eke," \u2014 "),qj=n(Eke,"A",{href:!0});var V2t=s(qj);y5o=r(V2t,"CLIPFeatureExtractor"),V2t.forEach(t),x5o=r(Eke," (GroupViT model)"),Eke.forEach(t),$5o=i(J),vp=n(J,"LI",{});var Cke=s(vp);Afe=n(Cke,"STRONG",{});var X2t=s(Afe);k5o=r(X2t,"hubert"),X2t.forEach(t),S5o=r(Cke," \u2014 "),jj=n(Cke,"A",{href:!0});var z2t=s(jj);R5o=r(z2t,"Wav2Vec2FeatureExtractor"),z2t.forEach(t),P5o=r(Cke," (Hubert model)"),Cke.forEach(t),B5o=i(J),Fp=n(J,"LI",{});var wke=s(Fp);Lfe=n(wke,"STRONG",{});var W2t=s(Lfe);I5o=r(W2t,"imagegpt"),W2t.forEach(t),N5o=r(wke," \u2014 "),Dj=n(wke,"A",{href:!0});var Q2t=s(Dj);q5o=r(Q2t,"ImageGPTFeatureExtractor"),Q2t.forEach(t),j5o=r(wke," (ImageGPT model)"),wke.forEach(t),D5o=i(J),Tp=n(J,"LI",{});var Ake=s(Tp);yfe=n(Ake,"STRONG",{});var U2t=s(yfe);G5o=r(U2t,"layoutlmv2"),U2t.forEach(t),O5o=r(Ake," \u2014 "),Gj=n(Ake,"A",{href:!0});var H2t=s(Gj);V5o=r(H2t,"LayoutLMv2FeatureExtractor"),H2t.forEach(t),X5o=r(Ake," (LayoutLMv2 model)"),Ake.forEach(t),z5o=i(J),Mp=n(J,"LI",{});var Lke=s(Mp);xfe=n(Lke,"STRONG",{});var J2t=s(xfe);W5o=r(J2t,"layoutlmv3"),J2t.forEach(t),Q5o=r(Lke," \u2014 "),Oj=n(Lke,"A",{href:!0});var Y2t=s(Oj);U5o=r(Y2t,"LayoutLMv3FeatureExtractor"),Y2t.forEach(t),H5o=r(Lke," (LayoutLMv3 model)"),Lke.forEach(t),J5o=i(J),Ep=n(J,"LI",{});var yke=s(Ep);$fe=n(yke,"STRONG",{});var K2t=s($fe);Y5o=r(K2t,"levit"),K2t.forEach(t),K5o=r(yke," \u2014 "),Vj=n(yke,"A",{href:!0});var Z2t=s(Vj);Z5o=r(Z2t,"LevitFeatureExtractor"),Z2t.forEach(t),e0o=r(yke," (LeViT model)"),yke.forEach(t),o0o=i(J),Cp=n(J,"LI",{});var xke=s(Cp);kfe=n(xke,"STRONG",{});var ebt=s(kfe);r0o=r(ebt,"maskformer"),ebt.forEach(t),t0o=r(xke," \u2014 "),Xj=n(xke,"A",{href:!0});var obt=s(Xj);a0o=r(obt,"MaskFormerFeatureExtractor"),obt.forEach(t),n0o=r(xke," (MaskFormer model)"),xke.forEach(t),s0o=i(J),wp=n(J,"LI",{});var $ke=s(wp);Sfe=n($ke,"STRONG",{});var rbt=s(Sfe);l0o=r(rbt,"mctct"),rbt.forEach(t),i0o=r($ke," \u2014 "),zj=n($ke,"A",{href:!0});var tbt=s(zj);d0o=r(tbt,"MCTCTFeatureExtractor"),tbt.forEach(t),c0o=r($ke," (M-CTC-T model)"),$ke.forEach(t),f0o=i(J),Ap=n(J,"LI",{});var kke=s(Ap);Rfe=n(kke,"STRONG",{});var abt=s(Rfe);m0o=r(abt,"mobilevit"),abt.forEach(t),g0o=r(kke," \u2014 "),Wj=n(kke,"A",{href:!0});var nbt=s(Wj);h0o=r(nbt,"MobileViTFeatureExtractor"),nbt.forEach(t),p0o=r(kke," (MobileViT model)"),kke.forEach(t),_0o=i(J),Lp=n(J,"LI",{});var Ske=s(Lp);Pfe=n(Ske,"STRONG",{});var sbt=s(Pfe);u0o=r(sbt,"owlvit"),sbt.forEach(t),b0o=r(Ske," \u2014 "),Qj=n(Ske,"A",{href:!0});var lbt=s(Qj);v0o=r(lbt,"OwlViTFeatureExtractor"),lbt.forEach(t),F0o=r(Ske," (OWL-ViT model)"),Ske.forEach(t),T0o=i(J),yp=n(J,"LI",{});var Rke=s(yp);Bfe=n(Rke,"STRONG",{});var ibt=s(Bfe);M0o=r(ibt,"perceiver"),ibt.forEach(t),E0o=r(Rke," \u2014 "),Uj=n(Rke,"A",{href:!0});var dbt=s(Uj);C0o=r(dbt,"PerceiverFeatureExtractor"),dbt.forEach(t),w0o=r(Rke," (Perceiver model)"),Rke.forEach(t),A0o=i(J),xp=n(J,"LI",{});var Pke=s(xp);Ife=n(Pke,"STRONG",{});var cbt=s(Ife);L0o=r(cbt,"poolformer"),cbt.forEach(t),y0o=r(Pke," \u2014 "),Hj=n(Pke,"A",{href:!0});var fbt=s(Hj);x0o=r(fbt,"PoolFormerFeatureExtractor"),fbt.forEach(t),$0o=r(Pke," (PoolFormer model)"),Pke.forEach(t),k0o=i(J),$p=n(J,"LI",{});var Bke=s($p);Nfe=n(Bke,"STRONG",{});var mbt=s(Nfe);S0o=r(mbt,"regnet"),mbt.forEach(t),R0o=r(Bke," \u2014 "),Jj=n(Bke,"A",{href:!0});var gbt=s(Jj);P0o=r(gbt,"ConvNextFeatureExtractor"),gbt.forEach(t),B0o=r(Bke," (RegNet model)"),Bke.forEach(t),I0o=i(J),kp=n(J,"LI",{});var Ike=s(kp);qfe=n(Ike,"STRONG",{});var hbt=s(qfe);N0o=r(hbt,"resnet"),hbt.forEach(t),q0o=r(Ike," \u2014 "),Yj=n(Ike,"A",{href:!0});var pbt=s(Yj);j0o=r(pbt,"ConvNextFeatureExtractor"),pbt.forEach(t),D0o=r(Ike," (ResNet model)"),Ike.forEach(t),G0o=i(J),Sp=n(J,"LI",{});var Nke=s(Sp);jfe=n(Nke,"STRONG",{});var _bt=s(jfe);O0o=r(_bt,"segformer"),_bt.forEach(t),V0o=r(Nke," \u2014 "),Kj=n(Nke,"A",{href:!0});var ubt=s(Kj);X0o=r(ubt,"SegformerFeatureExtractor"),ubt.forEach(t),z0o=r(Nke," (SegFormer model)"),Nke.forEach(t),W0o=i(J),Rp=n(J,"LI",{});var qke=s(Rp);Dfe=n(qke,"STRONG",{});var bbt=s(Dfe);Q0o=r(bbt,"speech_to_text"),bbt.forEach(t),U0o=r(qke," \u2014 "),Zj=n(qke,"A",{href:!0});var vbt=s(Zj);H0o=r(vbt,"Speech2TextFeatureExtractor"),vbt.forEach(t),J0o=r(qke," (Speech2Text model)"),qke.forEach(t),Y0o=i(J),Pp=n(J,"LI",{});var jke=s(Pp);Gfe=n(jke,"STRONG",{});var Fbt=s(Gfe);K0o=r(Fbt,"swin"),Fbt.forEach(t),Z0o=r(jke," \u2014 "),eD=n(jke,"A",{href:!0});var Tbt=s(eD);eFo=r(Tbt,"ViTFeatureExtractor"),Tbt.forEach(t),oFo=r(jke," (Swin Transformer model)"),jke.forEach(t),rFo=i(J),Bp=n(J,"LI",{});var Dke=s(Bp);Ofe=n(Dke,"STRONG",{});var Mbt=s(Ofe);tFo=r(Mbt,"swinv2"),Mbt.forEach(t),aFo=r(Dke," \u2014 "),oD=n(Dke,"A",{href:!0});var Ebt=s(oD);nFo=r(Ebt,"ViTFeatureExtractor"),Ebt.forEach(t),sFo=r(Dke," (Swin Transformer V2 model)"),Dke.forEach(t),lFo=i(J),Ip=n(J,"LI",{});var Gke=s(Ip);Vfe=n(Gke,"STRONG",{});var Cbt=s(Vfe);iFo=r(Cbt,"van"),Cbt.forEach(t),dFo=r(Gke," \u2014 "),rD=n(Gke,"A",{href:!0});var wbt=s(rD);cFo=r(wbt,"ConvNextFeatureExtractor"),wbt.forEach(t),fFo=r(Gke," (VAN model)"),Gke.forEach(t),mFo=i(J),Np=n(J,"LI",{});var Oke=s(Np);Xfe=n(Oke,"STRONG",{});var Abt=s(Xfe);gFo=r(Abt,"videomae"),Abt.forEach(t),hFo=r(Oke," \u2014 "),tD=n(Oke,"A",{href:!0});var Lbt=s(tD);pFo=r(Lbt,"ViTFeatureExtractor"),Lbt.forEach(t),_Fo=r(Oke," (VideoMAE model)"),Oke.forEach(t),uFo=i(J),qp=n(J,"LI",{});var Vke=s(qp);zfe=n(Vke,"STRONG",{});var ybt=s(zfe);bFo=r(ybt,"vilt"),ybt.forEach(t),vFo=r(Vke," \u2014 "),aD=n(Vke,"A",{href:!0});var xbt=s(aD);FFo=r(xbt,"ViltFeatureExtractor"),xbt.forEach(t),TFo=r(Vke," (ViLT model)"),Vke.forEach(t),MFo=i(J),jp=n(J,"LI",{});var Xke=s(jp);Wfe=n(Xke,"STRONG",{});var $bt=s(Wfe);EFo=r($bt,"vit"),$bt.forEach(t),CFo=r(Xke," \u2014 "),nD=n(Xke,"A",{href:!0});var kbt=s(nD);wFo=r(kbt,"ViTFeatureExtractor"),kbt.forEach(t),AFo=r(Xke," (ViT model)"),Xke.forEach(t),LFo=i(J),Dp=n(J,"LI",{});var zke=s(Dp);Qfe=n(zke,"STRONG",{});var Sbt=s(Qfe);yFo=r(Sbt,"vit_mae"),Sbt.forEach(t),xFo=r(zke," \u2014 "),sD=n(zke,"A",{href:!0});var Rbt=s(sD);$Fo=r(Rbt,"ViTFeatureExtractor"),Rbt.forEach(t),kFo=r(zke," (ViTMAE model)"),zke.forEach(t),SFo=i(J),Gp=n(J,"LI",{});var Wke=s(Gp);Ufe=n(Wke,"STRONG",{});var Pbt=s(Ufe);RFo=r(Pbt,"wav2vec2"),Pbt.forEach(t),PFo=r(Wke," \u2014 "),lD=n(Wke,"A",{href:!0});var Bbt=s(lD);BFo=r(Bbt,"Wav2Vec2FeatureExtractor"),Bbt.forEach(t),IFo=r(Wke," (Wav2Vec2 model)"),Wke.forEach(t),NFo=i(J),Op=n(J,"LI",{});var Qke=s(Op);Hfe=n(Qke,"STRONG",{});var Ibt=s(Hfe);qFo=r(Ibt,"wav2vec2-conformer"),Ibt.forEach(t),jFo=r(Qke," \u2014 "),iD=n(Qke,"A",{href:!0});var Nbt=s(iD);DFo=r(Nbt,"Wav2Vec2FeatureExtractor"),Nbt.forEach(t),GFo=r(Qke," (Wav2Vec2-Conformer model)"),Qke.forEach(t),OFo=i(J),Vp=n(J,"LI",{});var Uke=s(Vp);Jfe=n(Uke,"STRONG",{});var qbt=s(Jfe);VFo=r(qbt,"yolos"),qbt.forEach(t),XFo=r(Uke," \u2014 "),dD=n(Uke,"A",{href:!0});var jbt=s(dD);zFo=r(jbt,"YolosFeatureExtractor"),jbt.forEach(t),WFo=r(Uke," (YOLOS model)"),Uke.forEach(t),J.forEach(t),QFo=i(fa),T(Xp.$$.fragment,fa),UFo=i(fa),T(zp.$$.fragment,fa),fa.forEach(t),HFo=i(ml),Wp=n(ml,"DIV",{class:!0});var iJe=s(Wp);T(Ry.$$.fragment,iJe),JFo=i(iJe),Yfe=n(iJe,"P",{});var Dbt=s(Yfe);YFo=r(Dbt,"Register a new feature extractor for this class."),Dbt.forEach(t),iJe.forEach(t),ml.forEach(t),oUe=i(f),ed=n(f,"H2",{class:!0});var dJe=s(ed);Qp=n(dJe,"A",{id:!0,class:!0,href:!0});var Gbt=s(Qp);Kfe=n(Gbt,"SPAN",{});var Obt=s(Kfe);T(Py.$$.fragment,Obt),Obt.forEach(t),Gbt.forEach(t),KFo=i(dJe),Zfe=n(dJe,"SPAN",{});var Vbt=s(Zfe);ZFo=r(Vbt,"AutoProcessor"),Vbt.forEach(t),dJe.forEach(t),rUe=i(f),ko=n(f,"DIV",{class:!0});var gl=s(ko);T(By.$$.fragment,gl),eTo=i(gl),Iy=n(gl,"P",{});var cJe=s(Iy);oTo=r(cJe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cD=n(cJe,"A",{href:!0});var Xbt=s(cD);rTo=r(Xbt,"AutoProcessor.from_pretrained()"),Xbt.forEach(t),tTo=r(cJe," class method."),cJe.forEach(t),aTo=i(gl),Ny=n(gl,"P",{});var fJe=s(Ny);nTo=r(fJe,"This class cannot be instantiated directly using "),eme=n(fJe,"CODE",{});var zbt=s(eme);sTo=r(zbt,"__init__()"),zbt.forEach(t),lTo=r(fJe," (throws an error)."),fJe.forEach(t),iTo=i(gl),Je=n(gl,"DIV",{class:!0});var ma=s(Je);T(qy.$$.fragment,ma),dTo=i(ma),ome=n(ma,"P",{});var Wbt=s(ome);cTo=r(Wbt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Wbt.forEach(t),fTo=i(ma),od=n(ma,"P",{});var Gae=s(od);mTo=r(Gae,"The processor class to instantiate is selected based on the "),rme=n(Gae,"CODE",{});var Qbt=s(rme);gTo=r(Qbt,"model_type"),Qbt.forEach(t),hTo=r(Gae,` property of the config object (either
passed as an argument or loaded from `),tme=n(Gae,"CODE",{});var Ubt=s(tme);pTo=r(Ubt,"pretrained_model_name_or_path"),Ubt.forEach(t),_To=r(Gae," if possible):"),Gae.forEach(t),uTo=i(ma),ie=n(ma,"UL",{});var ge=s(ie);Up=n(ge,"LI",{});var Hke=s(Up);ame=n(Hke,"STRONG",{});var Hbt=s(ame);bTo=r(Hbt,"clip"),Hbt.forEach(t),vTo=r(Hke," \u2014 "),fD=n(Hke,"A",{href:!0});var Jbt=s(fD);FTo=r(Jbt,"CLIPProcessor"),Jbt.forEach(t),TTo=r(Hke," (CLIP model)"),Hke.forEach(t),MTo=i(ge),Hp=n(ge,"LI",{});var Jke=s(Hp);nme=n(Jke,"STRONG",{});var Ybt=s(nme);ETo=r(Ybt,"donut"),Ybt.forEach(t),CTo=r(Jke," \u2014 "),mD=n(Jke,"A",{href:!0});var Kbt=s(mD);wTo=r(Kbt,"DonutProcessor"),Kbt.forEach(t),ATo=r(Jke," (Donut model)"),Jke.forEach(t),LTo=i(ge),Jp=n(ge,"LI",{});var Yke=s(Jp);sme=n(Yke,"STRONG",{});var Zbt=s(sme);yTo=r(Zbt,"flava"),Zbt.forEach(t),xTo=r(Yke," \u2014 "),gD=n(Yke,"A",{href:!0});var evt=s(gD);$To=r(evt,"FlavaProcessor"),evt.forEach(t),kTo=r(Yke," (FLAVA model)"),Yke.forEach(t),STo=i(ge),Yp=n(ge,"LI",{});var Kke=s(Yp);lme=n(Kke,"STRONG",{});var ovt=s(lme);RTo=r(ovt,"groupvit"),ovt.forEach(t),PTo=r(Kke," \u2014 "),hD=n(Kke,"A",{href:!0});var rvt=s(hD);BTo=r(rvt,"CLIPProcessor"),rvt.forEach(t),ITo=r(Kke," (GroupViT model)"),Kke.forEach(t),NTo=i(ge),Kp=n(ge,"LI",{});var Zke=s(Kp);ime=n(Zke,"STRONG",{});var tvt=s(ime);qTo=r(tvt,"layoutlmv2"),tvt.forEach(t),jTo=r(Zke," \u2014 "),pD=n(Zke,"A",{href:!0});var avt=s(pD);DTo=r(avt,"LayoutLMv2Processor"),avt.forEach(t),GTo=r(Zke," (LayoutLMv2 model)"),Zke.forEach(t),OTo=i(ge),Zp=n(ge,"LI",{});var eSe=s(Zp);dme=n(eSe,"STRONG",{});var nvt=s(dme);VTo=r(nvt,"layoutlmv3"),nvt.forEach(t),XTo=r(eSe," \u2014 "),_D=n(eSe,"A",{href:!0});var svt=s(_D);zTo=r(svt,"LayoutLMv3Processor"),svt.forEach(t),WTo=r(eSe," (LayoutLMv3 model)"),eSe.forEach(t),QTo=i(ge),e_=n(ge,"LI",{});var oSe=s(e_);cme=n(oSe,"STRONG",{});var lvt=s(cme);UTo=r(lvt,"layoutxlm"),lvt.forEach(t),HTo=r(oSe," \u2014 "),uD=n(oSe,"A",{href:!0});var ivt=s(uD);JTo=r(ivt,"LayoutXLMProcessor"),ivt.forEach(t),YTo=r(oSe," (LayoutXLM model)"),oSe.forEach(t),KTo=i(ge),o_=n(ge,"LI",{});var rSe=s(o_);fme=n(rSe,"STRONG",{});var dvt=s(fme);ZTo=r(dvt,"owlvit"),dvt.forEach(t),e8o=r(rSe," \u2014 "),bD=n(rSe,"A",{href:!0});var cvt=s(bD);o8o=r(cvt,"OwlViTProcessor"),cvt.forEach(t),r8o=r(rSe," (OWL-ViT model)"),rSe.forEach(t),t8o=i(ge),r_=n(ge,"LI",{});var tSe=s(r_);mme=n(tSe,"STRONG",{});var fvt=s(mme);a8o=r(fvt,"sew"),fvt.forEach(t),n8o=r(tSe," \u2014 "),vD=n(tSe,"A",{href:!0});var mvt=s(vD);s8o=r(mvt,"Wav2Vec2Processor"),mvt.forEach(t),l8o=r(tSe," (SEW model)"),tSe.forEach(t),i8o=i(ge),t_=n(ge,"LI",{});var aSe=s(t_);gme=n(aSe,"STRONG",{});var gvt=s(gme);d8o=r(gvt,"sew-d"),gvt.forEach(t),c8o=r(aSe," \u2014 "),FD=n(aSe,"A",{href:!0});var hvt=s(FD);f8o=r(hvt,"Wav2Vec2Processor"),hvt.forEach(t),m8o=r(aSe," (SEW-D model)"),aSe.forEach(t),g8o=i(ge),a_=n(ge,"LI",{});var nSe=s(a_);hme=n(nSe,"STRONG",{});var pvt=s(hme);h8o=r(pvt,"speech_to_text"),pvt.forEach(t),p8o=r(nSe," \u2014 "),TD=n(nSe,"A",{href:!0});var _vt=s(TD);_8o=r(_vt,"Speech2TextProcessor"),_vt.forEach(t),u8o=r(nSe," (Speech2Text model)"),nSe.forEach(t),b8o=i(ge),n_=n(ge,"LI",{});var sSe=s(n_);pme=n(sSe,"STRONG",{});var uvt=s(pme);v8o=r(uvt,"speech_to_text_2"),uvt.forEach(t),F8o=r(sSe," \u2014 "),MD=n(sSe,"A",{href:!0});var bvt=s(MD);T8o=r(bvt,"Speech2Text2Processor"),bvt.forEach(t),M8o=r(sSe," (Speech2Text2 model)"),sSe.forEach(t),E8o=i(ge),s_=n(ge,"LI",{});var lSe=s(s_);_me=n(lSe,"STRONG",{});var vvt=s(_me);C8o=r(vvt,"trocr"),vvt.forEach(t),w8o=r(lSe," \u2014 "),ED=n(lSe,"A",{href:!0});var Fvt=s(ED);A8o=r(Fvt,"TrOCRProcessor"),Fvt.forEach(t),L8o=r(lSe," (TrOCR model)"),lSe.forEach(t),y8o=i(ge),l_=n(ge,"LI",{});var iSe=s(l_);ume=n(iSe,"STRONG",{});var Tvt=s(ume);x8o=r(Tvt,"unispeech"),Tvt.forEach(t),$8o=r(iSe," \u2014 "),CD=n(iSe,"A",{href:!0});var Mvt=s(CD);k8o=r(Mvt,"Wav2Vec2Processor"),Mvt.forEach(t),S8o=r(iSe," (UniSpeech model)"),iSe.forEach(t),R8o=i(ge),i_=n(ge,"LI",{});var dSe=s(i_);bme=n(dSe,"STRONG",{});var Evt=s(bme);P8o=r(Evt,"unispeech-sat"),Evt.forEach(t),B8o=r(dSe," \u2014 "),wD=n(dSe,"A",{href:!0});var Cvt=s(wD);I8o=r(Cvt,"Wav2Vec2Processor"),Cvt.forEach(t),N8o=r(dSe," (UniSpeechSat model)"),dSe.forEach(t),q8o=i(ge),d_=n(ge,"LI",{});var cSe=s(d_);vme=n(cSe,"STRONG",{});var wvt=s(vme);j8o=r(wvt,"vilt"),wvt.forEach(t),D8o=r(cSe," \u2014 "),AD=n(cSe,"A",{href:!0});var Avt=s(AD);G8o=r(Avt,"ViltProcessor"),Avt.forEach(t),O8o=r(cSe," (ViLT model)"),cSe.forEach(t),V8o=i(ge),c_=n(ge,"LI",{});var fSe=s(c_);Fme=n(fSe,"STRONG",{});var Lvt=s(Fme);X8o=r(Lvt,"vision-text-dual-encoder"),Lvt.forEach(t),z8o=r(fSe," \u2014 "),LD=n(fSe,"A",{href:!0});var yvt=s(LD);W8o=r(yvt,"VisionTextDualEncoderProcessor"),yvt.forEach(t),Q8o=r(fSe," (VisionTextDualEncoder model)"),fSe.forEach(t),U8o=i(ge),f_=n(ge,"LI",{});var mSe=s(f_);Tme=n(mSe,"STRONG",{});var xvt=s(Tme);H8o=r(xvt,"wav2vec2"),xvt.forEach(t),J8o=r(mSe," \u2014 "),yD=n(mSe,"A",{href:!0});var $vt=s(yD);Y8o=r($vt,"Wav2Vec2Processor"),$vt.forEach(t),K8o=r(mSe," (Wav2Vec2 model)"),mSe.forEach(t),Z8o=i(ge),m_=n(ge,"LI",{});var gSe=s(m_);Mme=n(gSe,"STRONG",{});var kvt=s(Mme);eMo=r(kvt,"wav2vec2-conformer"),kvt.forEach(t),oMo=r(gSe," \u2014 "),xD=n(gSe,"A",{href:!0});var Svt=s(xD);rMo=r(Svt,"Wav2Vec2Processor"),Svt.forEach(t),tMo=r(gSe," (Wav2Vec2-Conformer model)"),gSe.forEach(t),aMo=i(ge),g_=n(ge,"LI",{});var hSe=s(g_);Eme=n(hSe,"STRONG",{});var Rvt=s(Eme);nMo=r(Rvt,"wavlm"),Rvt.forEach(t),sMo=r(hSe," \u2014 "),$D=n(hSe,"A",{href:!0});var Pvt=s($D);lMo=r(Pvt,"Wav2Vec2Processor"),Pvt.forEach(t),iMo=r(hSe," (WavLM model)"),hSe.forEach(t),ge.forEach(t),dMo=i(ma),T(h_.$$.fragment,ma),cMo=i(ma),T(p_.$$.fragment,ma),ma.forEach(t),fMo=i(gl),__=n(gl,"DIV",{class:!0});var mJe=s(__);T(jy.$$.fragment,mJe),mMo=i(mJe),Cme=n(mJe,"P",{});var Bvt=s(Cme);gMo=r(Bvt,"Register a new processor for this class."),Bvt.forEach(t),mJe.forEach(t),gl.forEach(t),tUe=i(f),rd=n(f,"H2",{class:!0});var gJe=s(rd);u_=n(gJe,"A",{id:!0,class:!0,href:!0});var Ivt=s(u_);wme=n(Ivt,"SPAN",{});var Nvt=s(wme);T(Dy.$$.fragment,Nvt),Nvt.forEach(t),Ivt.forEach(t),hMo=i(gJe),Ame=n(gJe,"SPAN",{});var qvt=s(Ame);pMo=r(qvt,"AutoModel"),qvt.forEach(t),gJe.forEach(t),aUe=i(f),So=n(f,"DIV",{class:!0});var hl=s(So);T(Gy.$$.fragment,hl),_Mo=i(hl),td=n(hl,"P",{});var Oae=s(td);uMo=r(Oae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kD=n(Oae,"A",{href:!0});var jvt=s(kD);bMo=r(jvt,"from_pretrained()"),jvt.forEach(t),vMo=r(Oae," class method or the "),SD=n(Oae,"A",{href:!0});var Dvt=s(SD);FMo=r(Dvt,"from_config()"),Dvt.forEach(t),TMo=r(Oae,` class
method.`),Oae.forEach(t),MMo=i(hl),Oy=n(hl,"P",{});var hJe=s(Oy);EMo=r(hJe,"This class cannot be instantiated directly using "),Lme=n(hJe,"CODE",{});var Gvt=s(Lme);CMo=r(Gvt,"__init__()"),Gvt.forEach(t),wMo=r(hJe," (throws an error)."),hJe.forEach(t),AMo=i(hl),mt=n(hl,"DIV",{class:!0});var g7=s(mt);T(Vy.$$.fragment,g7),LMo=i(g7),yme=n(g7,"P",{});var Ovt=s(yme);yMo=r(Ovt,"Instantiates one of the base model classes of the library from a configuration."),Ovt.forEach(t),xMo=i(g7),ad=n(g7,"P",{});var Vae=s(ad);$Mo=r(Vae,`Note:
Loading a model from its configuration file does `),xme=n(Vae,"STRONG",{});var Vvt=s(xme);kMo=r(Vvt,"not"),Vvt.forEach(t),SMo=r(Vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),RD=n(Vae,"A",{href:!0});var Xvt=s(RD);RMo=r(Xvt,"from_pretrained()"),Xvt.forEach(t),PMo=r(Vae," to load the model weights."),Vae.forEach(t),BMo=i(g7),T(b_.$$.fragment,g7),g7.forEach(t),IMo=i(hl),Ye=n(hl,"DIV",{class:!0});var ga=s(Ye);T(Xy.$$.fragment,ga),NMo=i(ga),$me=n(ga,"P",{});var zvt=s($me);qMo=r(zvt,"Instantiate one of the base model classes of the library from a pretrained model."),zvt.forEach(t),jMo=i(ga),Va=n(ga,"P",{});var h7=s(Va);DMo=r(h7,"The model class to instantiate is selected based on the "),kme=n(h7,"CODE",{});var Wvt=s(kme);GMo=r(Wvt,"model_type"),Wvt.forEach(t),OMo=r(h7,` property of the config object (either
passed as an argument or loaded from `),Sme=n(h7,"CODE",{});var Qvt=s(Sme);VMo=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),XMo=r(h7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=n(h7,"CODE",{});var Uvt=s(Rme);zMo=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),WMo=r(h7,":"),h7.forEach(t),QMo=i(ga),y=n(ga,"UL",{});var x=s(y);v_=n(x,"LI",{});var pSe=s(v_);Pme=n(pSe,"STRONG",{});var Hvt=s(Pme);UMo=r(Hvt,"albert"),Hvt.forEach(t),HMo=r(pSe," \u2014 "),PD=n(pSe,"A",{href:!0});var Jvt=s(PD);JMo=r(Jvt,"AlbertModel"),Jvt.forEach(t),YMo=r(pSe," (ALBERT model)"),pSe.forEach(t),KMo=i(x),F_=n(x,"LI",{});var _Se=s(F_);Bme=n(_Se,"STRONG",{});var Yvt=s(Bme);ZMo=r(Yvt,"bart"),Yvt.forEach(t),eEo=r(_Se," \u2014 "),BD=n(_Se,"A",{href:!0});var Kvt=s(BD);oEo=r(Kvt,"BartModel"),Kvt.forEach(t),rEo=r(_Se," (BART model)"),_Se.forEach(t),tEo=i(x),T_=n(x,"LI",{});var uSe=s(T_);Ime=n(uSe,"STRONG",{});var Zvt=s(Ime);aEo=r(Zvt,"beit"),Zvt.forEach(t),nEo=r(uSe," \u2014 "),ID=n(uSe,"A",{href:!0});var e5t=s(ID);sEo=r(e5t,"BeitModel"),e5t.forEach(t),lEo=r(uSe," (BEiT model)"),uSe.forEach(t),iEo=i(x),M_=n(x,"LI",{});var bSe=s(M_);Nme=n(bSe,"STRONG",{});var o5t=s(Nme);dEo=r(o5t,"bert"),o5t.forEach(t),cEo=r(bSe," \u2014 "),ND=n(bSe,"A",{href:!0});var r5t=s(ND);fEo=r(r5t,"BertModel"),r5t.forEach(t),mEo=r(bSe," (BERT model)"),bSe.forEach(t),gEo=i(x),E_=n(x,"LI",{});var vSe=s(E_);qme=n(vSe,"STRONG",{});var t5t=s(qme);hEo=r(t5t,"bert-generation"),t5t.forEach(t),pEo=r(vSe," \u2014 "),qD=n(vSe,"A",{href:!0});var a5t=s(qD);_Eo=r(a5t,"BertGenerationEncoder"),a5t.forEach(t),uEo=r(vSe," (Bert Generation model)"),vSe.forEach(t),bEo=i(x),C_=n(x,"LI",{});var FSe=s(C_);jme=n(FSe,"STRONG",{});var n5t=s(jme);vEo=r(n5t,"big_bird"),n5t.forEach(t),FEo=r(FSe," \u2014 "),jD=n(FSe,"A",{href:!0});var s5t=s(jD);TEo=r(s5t,"BigBirdModel"),s5t.forEach(t),MEo=r(FSe," (BigBird model)"),FSe.forEach(t),EEo=i(x),w_=n(x,"LI",{});var TSe=s(w_);Dme=n(TSe,"STRONG",{});var l5t=s(Dme);CEo=r(l5t,"bigbird_pegasus"),l5t.forEach(t),wEo=r(TSe," \u2014 "),DD=n(TSe,"A",{href:!0});var i5t=s(DD);AEo=r(i5t,"BigBirdPegasusModel"),i5t.forEach(t),LEo=r(TSe," (BigBird-Pegasus model)"),TSe.forEach(t),yEo=i(x),A_=n(x,"LI",{});var MSe=s(A_);Gme=n(MSe,"STRONG",{});var d5t=s(Gme);xEo=r(d5t,"blenderbot"),d5t.forEach(t),$Eo=r(MSe," \u2014 "),GD=n(MSe,"A",{href:!0});var c5t=s(GD);kEo=r(c5t,"BlenderbotModel"),c5t.forEach(t),SEo=r(MSe," (Blenderbot model)"),MSe.forEach(t),REo=i(x),L_=n(x,"LI",{});var ESe=s(L_);Ome=n(ESe,"STRONG",{});var f5t=s(Ome);PEo=r(f5t,"blenderbot-small"),f5t.forEach(t),BEo=r(ESe," \u2014 "),OD=n(ESe,"A",{href:!0});var m5t=s(OD);IEo=r(m5t,"BlenderbotSmallModel"),m5t.forEach(t),NEo=r(ESe," (BlenderbotSmall model)"),ESe.forEach(t),qEo=i(x),y_=n(x,"LI",{});var CSe=s(y_);Vme=n(CSe,"STRONG",{});var g5t=s(Vme);jEo=r(g5t,"bloom"),g5t.forEach(t),DEo=r(CSe," \u2014 "),VD=n(CSe,"A",{href:!0});var h5t=s(VD);GEo=r(h5t,"BloomModel"),h5t.forEach(t),OEo=r(CSe," (BLOOM model)"),CSe.forEach(t),VEo=i(x),x_=n(x,"LI",{});var wSe=s(x_);Xme=n(wSe,"STRONG",{});var p5t=s(Xme);XEo=r(p5t,"camembert"),p5t.forEach(t),zEo=r(wSe," \u2014 "),XD=n(wSe,"A",{href:!0});var _5t=s(XD);WEo=r(_5t,"CamembertModel"),_5t.forEach(t),QEo=r(wSe," (CamemBERT model)"),wSe.forEach(t),UEo=i(x),$_=n(x,"LI",{});var ASe=s($_);zme=n(ASe,"STRONG",{});var u5t=s(zme);HEo=r(u5t,"canine"),u5t.forEach(t),JEo=r(ASe," \u2014 "),zD=n(ASe,"A",{href:!0});var b5t=s(zD);YEo=r(b5t,"CanineModel"),b5t.forEach(t),KEo=r(ASe," (CANINE model)"),ASe.forEach(t),ZEo=i(x),k_=n(x,"LI",{});var LSe=s(k_);Wme=n(LSe,"STRONG",{});var v5t=s(Wme);eCo=r(v5t,"clip"),v5t.forEach(t),oCo=r(LSe," \u2014 "),WD=n(LSe,"A",{href:!0});var F5t=s(WD);rCo=r(F5t,"CLIPModel"),F5t.forEach(t),tCo=r(LSe," (CLIP model)"),LSe.forEach(t),aCo=i(x),S_=n(x,"LI",{});var ySe=s(S_);Qme=n(ySe,"STRONG",{});var T5t=s(Qme);nCo=r(T5t,"codegen"),T5t.forEach(t),sCo=r(ySe," \u2014 "),QD=n(ySe,"A",{href:!0});var M5t=s(QD);lCo=r(M5t,"CodeGenModel"),M5t.forEach(t),iCo=r(ySe," (CodeGen model)"),ySe.forEach(t),dCo=i(x),R_=n(x,"LI",{});var xSe=s(R_);Ume=n(xSe,"STRONG",{});var E5t=s(Ume);cCo=r(E5t,"convbert"),E5t.forEach(t),fCo=r(xSe," \u2014 "),UD=n(xSe,"A",{href:!0});var C5t=s(UD);mCo=r(C5t,"ConvBertModel"),C5t.forEach(t),gCo=r(xSe," (ConvBERT model)"),xSe.forEach(t),hCo=i(x),P_=n(x,"LI",{});var $Se=s(P_);Hme=n($Se,"STRONG",{});var w5t=s(Hme);pCo=r(w5t,"convnext"),w5t.forEach(t),_Co=r($Se," \u2014 "),HD=n($Se,"A",{href:!0});var A5t=s(HD);uCo=r(A5t,"ConvNextModel"),A5t.forEach(t),bCo=r($Se," (ConvNeXT model)"),$Se.forEach(t),vCo=i(x),B_=n(x,"LI",{});var kSe=s(B_);Jme=n(kSe,"STRONG",{});var L5t=s(Jme);FCo=r(L5t,"ctrl"),L5t.forEach(t),TCo=r(kSe," \u2014 "),JD=n(kSe,"A",{href:!0});var y5t=s(JD);MCo=r(y5t,"CTRLModel"),y5t.forEach(t),ECo=r(kSe," (CTRL model)"),kSe.forEach(t),CCo=i(x),I_=n(x,"LI",{});var SSe=s(I_);Yme=n(SSe,"STRONG",{});var x5t=s(Yme);wCo=r(x5t,"cvt"),x5t.forEach(t),ACo=r(SSe," \u2014 "),YD=n(SSe,"A",{href:!0});var $5t=s(YD);LCo=r($5t,"CvtModel"),$5t.forEach(t),yCo=r(SSe," (CvT model)"),SSe.forEach(t),xCo=i(x),N_=n(x,"LI",{});var RSe=s(N_);Kme=n(RSe,"STRONG",{});var k5t=s(Kme);$Co=r(k5t,"data2vec-audio"),k5t.forEach(t),kCo=r(RSe," \u2014 "),KD=n(RSe,"A",{href:!0});var S5t=s(KD);SCo=r(S5t,"Data2VecAudioModel"),S5t.forEach(t),RCo=r(RSe," (Data2VecAudio model)"),RSe.forEach(t),PCo=i(x),q_=n(x,"LI",{});var PSe=s(q_);Zme=n(PSe,"STRONG",{});var R5t=s(Zme);BCo=r(R5t,"data2vec-text"),R5t.forEach(t),ICo=r(PSe," \u2014 "),ZD=n(PSe,"A",{href:!0});var P5t=s(ZD);NCo=r(P5t,"Data2VecTextModel"),P5t.forEach(t),qCo=r(PSe," (Data2VecText model)"),PSe.forEach(t),jCo=i(x),j_=n(x,"LI",{});var BSe=s(j_);ege=n(BSe,"STRONG",{});var B5t=s(ege);DCo=r(B5t,"data2vec-vision"),B5t.forEach(t),GCo=r(BSe," \u2014 "),eG=n(BSe,"A",{href:!0});var I5t=s(eG);OCo=r(I5t,"Data2VecVisionModel"),I5t.forEach(t),VCo=r(BSe," (Data2VecVision model)"),BSe.forEach(t),XCo=i(x),D_=n(x,"LI",{});var ISe=s(D_);oge=n(ISe,"STRONG",{});var N5t=s(oge);zCo=r(N5t,"deberta"),N5t.forEach(t),WCo=r(ISe," \u2014 "),oG=n(ISe,"A",{href:!0});var q5t=s(oG);QCo=r(q5t,"DebertaModel"),q5t.forEach(t),UCo=r(ISe," (DeBERTa model)"),ISe.forEach(t),HCo=i(x),G_=n(x,"LI",{});var NSe=s(G_);rge=n(NSe,"STRONG",{});var j5t=s(rge);JCo=r(j5t,"deberta-v2"),j5t.forEach(t),YCo=r(NSe," \u2014 "),rG=n(NSe,"A",{href:!0});var D5t=s(rG);KCo=r(D5t,"DebertaV2Model"),D5t.forEach(t),ZCo=r(NSe," (DeBERTa-v2 model)"),NSe.forEach(t),e3o=i(x),O_=n(x,"LI",{});var qSe=s(O_);tge=n(qSe,"STRONG",{});var G5t=s(tge);o3o=r(G5t,"decision_transformer"),G5t.forEach(t),r3o=r(qSe," \u2014 "),tG=n(qSe,"A",{href:!0});var O5t=s(tG);t3o=r(O5t,"DecisionTransformerModel"),O5t.forEach(t),a3o=r(qSe," (Decision Transformer model)"),qSe.forEach(t),n3o=i(x),V_=n(x,"LI",{});var jSe=s(V_);age=n(jSe,"STRONG",{});var V5t=s(age);s3o=r(V5t,"deit"),V5t.forEach(t),l3o=r(jSe," \u2014 "),aG=n(jSe,"A",{href:!0});var X5t=s(aG);i3o=r(X5t,"DeiTModel"),X5t.forEach(t),d3o=r(jSe," (DeiT model)"),jSe.forEach(t),c3o=i(x),X_=n(x,"LI",{});var DSe=s(X_);nge=n(DSe,"STRONG",{});var z5t=s(nge);f3o=r(z5t,"detr"),z5t.forEach(t),m3o=r(DSe," \u2014 "),nG=n(DSe,"A",{href:!0});var W5t=s(nG);g3o=r(W5t,"DetrModel"),W5t.forEach(t),h3o=r(DSe," (DETR model)"),DSe.forEach(t),p3o=i(x),z_=n(x,"LI",{});var GSe=s(z_);sge=n(GSe,"STRONG",{});var Q5t=s(sge);_3o=r(Q5t,"distilbert"),Q5t.forEach(t),u3o=r(GSe," \u2014 "),sG=n(GSe,"A",{href:!0});var U5t=s(sG);b3o=r(U5t,"DistilBertModel"),U5t.forEach(t),v3o=r(GSe," (DistilBERT model)"),GSe.forEach(t),F3o=i(x),W_=n(x,"LI",{});var OSe=s(W_);lge=n(OSe,"STRONG",{});var H5t=s(lge);T3o=r(H5t,"donut-swin"),H5t.forEach(t),M3o=r(OSe," \u2014 "),lG=n(OSe,"A",{href:!0});var J5t=s(lG);E3o=r(J5t,"DonutSwinModel"),J5t.forEach(t),C3o=r(OSe," (DonutSwin model)"),OSe.forEach(t),w3o=i(x),Q_=n(x,"LI",{});var VSe=s(Q_);ige=n(VSe,"STRONG",{});var Y5t=s(ige);A3o=r(Y5t,"dpr"),Y5t.forEach(t),L3o=r(VSe," \u2014 "),iG=n(VSe,"A",{href:!0});var K5t=s(iG);y3o=r(K5t,"DPRQuestionEncoder"),K5t.forEach(t),x3o=r(VSe," (DPR model)"),VSe.forEach(t),$3o=i(x),U_=n(x,"LI",{});var XSe=s(U_);dge=n(XSe,"STRONG",{});var Z5t=s(dge);k3o=r(Z5t,"dpt"),Z5t.forEach(t),S3o=r(XSe," \u2014 "),dG=n(XSe,"A",{href:!0});var e0t=s(dG);R3o=r(e0t,"DPTModel"),e0t.forEach(t),P3o=r(XSe," (DPT model)"),XSe.forEach(t),B3o=i(x),H_=n(x,"LI",{});var zSe=s(H_);cge=n(zSe,"STRONG",{});var o0t=s(cge);I3o=r(o0t,"electra"),o0t.forEach(t),N3o=r(zSe," \u2014 "),cG=n(zSe,"A",{href:!0});var r0t=s(cG);q3o=r(r0t,"ElectraModel"),r0t.forEach(t),j3o=r(zSe," (ELECTRA model)"),zSe.forEach(t),D3o=i(x),J_=n(x,"LI",{});var WSe=s(J_);fge=n(WSe,"STRONG",{});var t0t=s(fge);G3o=r(t0t,"flaubert"),t0t.forEach(t),O3o=r(WSe," \u2014 "),fG=n(WSe,"A",{href:!0});var a0t=s(fG);V3o=r(a0t,"FlaubertModel"),a0t.forEach(t),X3o=r(WSe," (FlauBERT model)"),WSe.forEach(t),z3o=i(x),Y_=n(x,"LI",{});var QSe=s(Y_);mge=n(QSe,"STRONG",{});var n0t=s(mge);W3o=r(n0t,"flava"),n0t.forEach(t),Q3o=r(QSe," \u2014 "),mG=n(QSe,"A",{href:!0});var s0t=s(mG);U3o=r(s0t,"FlavaModel"),s0t.forEach(t),H3o=r(QSe," (FLAVA model)"),QSe.forEach(t),J3o=i(x),K_=n(x,"LI",{});var USe=s(K_);gge=n(USe,"STRONG",{});var l0t=s(gge);Y3o=r(l0t,"fnet"),l0t.forEach(t),K3o=r(USe," \u2014 "),gG=n(USe,"A",{href:!0});var i0t=s(gG);Z3o=r(i0t,"FNetModel"),i0t.forEach(t),ewo=r(USe," (FNet model)"),USe.forEach(t),owo=i(x),Z_=n(x,"LI",{});var HSe=s(Z_);hge=n(HSe,"STRONG",{});var d0t=s(hge);rwo=r(d0t,"fsmt"),d0t.forEach(t),two=r(HSe," \u2014 "),hG=n(HSe,"A",{href:!0});var c0t=s(hG);awo=r(c0t,"FSMTModel"),c0t.forEach(t),nwo=r(HSe," (FairSeq Machine-Translation model)"),HSe.forEach(t),swo=i(x),nl=n(x,"LI",{});var ZR=s(nl);pge=n(ZR,"STRONG",{});var f0t=s(pge);lwo=r(f0t,"funnel"),f0t.forEach(t),iwo=r(ZR," \u2014 "),pG=n(ZR,"A",{href:!0});var m0t=s(pG);dwo=r(m0t,"FunnelModel"),m0t.forEach(t),cwo=r(ZR," or "),_G=n(ZR,"A",{href:!0});var g0t=s(_G);fwo=r(g0t,"FunnelBaseModel"),g0t.forEach(t),mwo=r(ZR," (Funnel Transformer model)"),ZR.forEach(t),gwo=i(x),eu=n(x,"LI",{});var JSe=s(eu);_ge=n(JSe,"STRONG",{});var h0t=s(_ge);hwo=r(h0t,"glpn"),h0t.forEach(t),pwo=r(JSe," \u2014 "),uG=n(JSe,"A",{href:!0});var p0t=s(uG);_wo=r(p0t,"GLPNModel"),p0t.forEach(t),uwo=r(JSe," (GLPN model)"),JSe.forEach(t),bwo=i(x),ou=n(x,"LI",{});var YSe=s(ou);uge=n(YSe,"STRONG",{});var _0t=s(uge);vwo=r(_0t,"gpt2"),_0t.forEach(t),Fwo=r(YSe," \u2014 "),bG=n(YSe,"A",{href:!0});var u0t=s(bG);Two=r(u0t,"GPT2Model"),u0t.forEach(t),Mwo=r(YSe," (OpenAI GPT-2 model)"),YSe.forEach(t),Ewo=i(x),ru=n(x,"LI",{});var KSe=s(ru);bge=n(KSe,"STRONG",{});var b0t=s(bge);Cwo=r(b0t,"gpt_neo"),b0t.forEach(t),wwo=r(KSe," \u2014 "),vG=n(KSe,"A",{href:!0});var v0t=s(vG);Awo=r(v0t,"GPTNeoModel"),v0t.forEach(t),Lwo=r(KSe," (GPT Neo model)"),KSe.forEach(t),ywo=i(x),tu=n(x,"LI",{});var ZSe=s(tu);vge=n(ZSe,"STRONG",{});var F0t=s(vge);xwo=r(F0t,"gpt_neox"),F0t.forEach(t),$wo=r(ZSe," \u2014 "),FG=n(ZSe,"A",{href:!0});var T0t=s(FG);kwo=r(T0t,"GPTNeoXModel"),T0t.forEach(t),Swo=r(ZSe," (GPT NeoX model)"),ZSe.forEach(t),Rwo=i(x),au=n(x,"LI",{});var eRe=s(au);Fge=n(eRe,"STRONG",{});var M0t=s(Fge);Pwo=r(M0t,"gptj"),M0t.forEach(t),Bwo=r(eRe," \u2014 "),TG=n(eRe,"A",{href:!0});var E0t=s(TG);Iwo=r(E0t,"GPTJModel"),E0t.forEach(t),Nwo=r(eRe," (GPT-J model)"),eRe.forEach(t),qwo=i(x),nu=n(x,"LI",{});var oRe=s(nu);Tge=n(oRe,"STRONG",{});var C0t=s(Tge);jwo=r(C0t,"groupvit"),C0t.forEach(t),Dwo=r(oRe," \u2014 "),MG=n(oRe,"A",{href:!0});var w0t=s(MG);Gwo=r(w0t,"GroupViTModel"),w0t.forEach(t),Owo=r(oRe," (GroupViT model)"),oRe.forEach(t),Vwo=i(x),su=n(x,"LI",{});var rRe=s(su);Mge=n(rRe,"STRONG",{});var A0t=s(Mge);Xwo=r(A0t,"hubert"),A0t.forEach(t),zwo=r(rRe," \u2014 "),EG=n(rRe,"A",{href:!0});var L0t=s(EG);Wwo=r(L0t,"HubertModel"),L0t.forEach(t),Qwo=r(rRe," (Hubert model)"),rRe.forEach(t),Uwo=i(x),lu=n(x,"LI",{});var tRe=s(lu);Ege=n(tRe,"STRONG",{});var y0t=s(Ege);Hwo=r(y0t,"ibert"),y0t.forEach(t),Jwo=r(tRe," \u2014 "),CG=n(tRe,"A",{href:!0});var x0t=s(CG);Ywo=r(x0t,"IBertModel"),x0t.forEach(t),Kwo=r(tRe," (I-BERT model)"),tRe.forEach(t),Zwo=i(x),iu=n(x,"LI",{});var aRe=s(iu);Cge=n(aRe,"STRONG",{});var $0t=s(Cge);e6o=r($0t,"imagegpt"),$0t.forEach(t),o6o=r(aRe," \u2014 "),wG=n(aRe,"A",{href:!0});var k0t=s(wG);r6o=r(k0t,"ImageGPTModel"),k0t.forEach(t),t6o=r(aRe," (ImageGPT model)"),aRe.forEach(t),a6o=i(x),du=n(x,"LI",{});var nRe=s(du);wge=n(nRe,"STRONG",{});var S0t=s(wge);n6o=r(S0t,"layoutlm"),S0t.forEach(t),s6o=r(nRe," \u2014 "),AG=n(nRe,"A",{href:!0});var R0t=s(AG);l6o=r(R0t,"LayoutLMModel"),R0t.forEach(t),i6o=r(nRe," (LayoutLM model)"),nRe.forEach(t),d6o=i(x),cu=n(x,"LI",{});var sRe=s(cu);Age=n(sRe,"STRONG",{});var P0t=s(Age);c6o=r(P0t,"layoutlmv2"),P0t.forEach(t),f6o=r(sRe," \u2014 "),LG=n(sRe,"A",{href:!0});var B0t=s(LG);m6o=r(B0t,"LayoutLMv2Model"),B0t.forEach(t),g6o=r(sRe," (LayoutLMv2 model)"),sRe.forEach(t),h6o=i(x),fu=n(x,"LI",{});var lRe=s(fu);Lge=n(lRe,"STRONG",{});var I0t=s(Lge);p6o=r(I0t,"layoutlmv3"),I0t.forEach(t),_6o=r(lRe," \u2014 "),yG=n(lRe,"A",{href:!0});var N0t=s(yG);u6o=r(N0t,"LayoutLMv3Model"),N0t.forEach(t),b6o=r(lRe," (LayoutLMv3 model)"),lRe.forEach(t),v6o=i(x),mu=n(x,"LI",{});var iRe=s(mu);yge=n(iRe,"STRONG",{});var q0t=s(yge);F6o=r(q0t,"led"),q0t.forEach(t),T6o=r(iRe," \u2014 "),xG=n(iRe,"A",{href:!0});var j0t=s(xG);M6o=r(j0t,"LEDModel"),j0t.forEach(t),E6o=r(iRe," (LED model)"),iRe.forEach(t),C6o=i(x),gu=n(x,"LI",{});var dRe=s(gu);xge=n(dRe,"STRONG",{});var D0t=s(xge);w6o=r(D0t,"levit"),D0t.forEach(t),A6o=r(dRe," \u2014 "),$G=n(dRe,"A",{href:!0});var G0t=s($G);L6o=r(G0t,"LevitModel"),G0t.forEach(t),y6o=r(dRe," (LeViT model)"),dRe.forEach(t),x6o=i(x),hu=n(x,"LI",{});var cRe=s(hu);$ge=n(cRe,"STRONG",{});var O0t=s($ge);$6o=r(O0t,"longformer"),O0t.forEach(t),k6o=r(cRe," \u2014 "),kG=n(cRe,"A",{href:!0});var V0t=s(kG);S6o=r(V0t,"LongformerModel"),V0t.forEach(t),R6o=r(cRe," (Longformer model)"),cRe.forEach(t),P6o=i(x),pu=n(x,"LI",{});var fRe=s(pu);kge=n(fRe,"STRONG",{});var X0t=s(kge);B6o=r(X0t,"longt5"),X0t.forEach(t),I6o=r(fRe," \u2014 "),SG=n(fRe,"A",{href:!0});var z0t=s(SG);N6o=r(z0t,"LongT5Model"),z0t.forEach(t),q6o=r(fRe," (LongT5 model)"),fRe.forEach(t),j6o=i(x),_u=n(x,"LI",{});var mRe=s(_u);Sge=n(mRe,"STRONG",{});var W0t=s(Sge);D6o=r(W0t,"luke"),W0t.forEach(t),G6o=r(mRe," \u2014 "),RG=n(mRe,"A",{href:!0});var Q0t=s(RG);O6o=r(Q0t,"LukeModel"),Q0t.forEach(t),V6o=r(mRe," (LUKE model)"),mRe.forEach(t),X6o=i(x),uu=n(x,"LI",{});var gRe=s(uu);Rge=n(gRe,"STRONG",{});var U0t=s(Rge);z6o=r(U0t,"lxmert"),U0t.forEach(t),W6o=r(gRe," \u2014 "),PG=n(gRe,"A",{href:!0});var H0t=s(PG);Q6o=r(H0t,"LxmertModel"),H0t.forEach(t),U6o=r(gRe," (LXMERT model)"),gRe.forEach(t),H6o=i(x),bu=n(x,"LI",{});var hRe=s(bu);Pge=n(hRe,"STRONG",{});var J0t=s(Pge);J6o=r(J0t,"m2m_100"),J0t.forEach(t),Y6o=r(hRe," \u2014 "),BG=n(hRe,"A",{href:!0});var Y0t=s(BG);K6o=r(Y0t,"M2M100Model"),Y0t.forEach(t),Z6o=r(hRe," (M2M100 model)"),hRe.forEach(t),eAo=i(x),vu=n(x,"LI",{});var pRe=s(vu);Bge=n(pRe,"STRONG",{});var K0t=s(Bge);oAo=r(K0t,"marian"),K0t.forEach(t),rAo=r(pRe," \u2014 "),IG=n(pRe,"A",{href:!0});var Z0t=s(IG);tAo=r(Z0t,"MarianModel"),Z0t.forEach(t),aAo=r(pRe," (Marian model)"),pRe.forEach(t),nAo=i(x),Fu=n(x,"LI",{});var _Re=s(Fu);Ige=n(_Re,"STRONG",{});var eFt=s(Ige);sAo=r(eFt,"maskformer"),eFt.forEach(t),lAo=r(_Re," \u2014 "),NG=n(_Re,"A",{href:!0});var oFt=s(NG);iAo=r(oFt,"MaskFormerModel"),oFt.forEach(t),dAo=r(_Re," (MaskFormer model)"),_Re.forEach(t),cAo=i(x),Tu=n(x,"LI",{});var uRe=s(Tu);Nge=n(uRe,"STRONG",{});var rFt=s(Nge);fAo=r(rFt,"mbart"),rFt.forEach(t),mAo=r(uRe," \u2014 "),qG=n(uRe,"A",{href:!0});var tFt=s(qG);gAo=r(tFt,"MBartModel"),tFt.forEach(t),hAo=r(uRe," (mBART model)"),uRe.forEach(t),pAo=i(x),Mu=n(x,"LI",{});var bRe=s(Mu);qge=n(bRe,"STRONG",{});var aFt=s(qge);_Ao=r(aFt,"mctct"),aFt.forEach(t),uAo=r(bRe," \u2014 "),jG=n(bRe,"A",{href:!0});var nFt=s(jG);bAo=r(nFt,"MCTCTModel"),nFt.forEach(t),vAo=r(bRe," (M-CTC-T model)"),bRe.forEach(t),FAo=i(x),Eu=n(x,"LI",{});var vRe=s(Eu);jge=n(vRe,"STRONG",{});var sFt=s(jge);TAo=r(sFt,"megatron-bert"),sFt.forEach(t),MAo=r(vRe," \u2014 "),DG=n(vRe,"A",{href:!0});var lFt=s(DG);EAo=r(lFt,"MegatronBertModel"),lFt.forEach(t),CAo=r(vRe," (Megatron-BERT model)"),vRe.forEach(t),wAo=i(x),Cu=n(x,"LI",{});var FRe=s(Cu);Dge=n(FRe,"STRONG",{});var iFt=s(Dge);AAo=r(iFt,"mobilebert"),iFt.forEach(t),LAo=r(FRe," \u2014 "),GG=n(FRe,"A",{href:!0});var dFt=s(GG);yAo=r(dFt,"MobileBertModel"),dFt.forEach(t),xAo=r(FRe," (MobileBERT model)"),FRe.forEach(t),$Ao=i(x),wu=n(x,"LI",{});var TRe=s(wu);Gge=n(TRe,"STRONG",{});var cFt=s(Gge);kAo=r(cFt,"mobilevit"),cFt.forEach(t),SAo=r(TRe," \u2014 "),OG=n(TRe,"A",{href:!0});var fFt=s(OG);RAo=r(fFt,"MobileViTModel"),fFt.forEach(t),PAo=r(TRe," (MobileViT model)"),TRe.forEach(t),BAo=i(x),Au=n(x,"LI",{});var MRe=s(Au);Oge=n(MRe,"STRONG",{});var mFt=s(Oge);IAo=r(mFt,"mpnet"),mFt.forEach(t),NAo=r(MRe," \u2014 "),VG=n(MRe,"A",{href:!0});var gFt=s(VG);qAo=r(gFt,"MPNetModel"),gFt.forEach(t),jAo=r(MRe," (MPNet model)"),MRe.forEach(t),DAo=i(x),Lu=n(x,"LI",{});var ERe=s(Lu);Vge=n(ERe,"STRONG",{});var hFt=s(Vge);GAo=r(hFt,"mt5"),hFt.forEach(t),OAo=r(ERe," \u2014 "),XG=n(ERe,"A",{href:!0});var pFt=s(XG);VAo=r(pFt,"MT5Model"),pFt.forEach(t),XAo=r(ERe," (MT5 model)"),ERe.forEach(t),zAo=i(x),yu=n(x,"LI",{});var CRe=s(yu);Xge=n(CRe,"STRONG",{});var _Ft=s(Xge);WAo=r(_Ft,"mvp"),_Ft.forEach(t),QAo=r(CRe," \u2014 "),zG=n(CRe,"A",{href:!0});var uFt=s(zG);UAo=r(uFt,"MvpModel"),uFt.forEach(t),HAo=r(CRe," (MVP model)"),CRe.forEach(t),JAo=i(x),xu=n(x,"LI",{});var wRe=s(xu);zge=n(wRe,"STRONG",{});var bFt=s(zge);YAo=r(bFt,"nezha"),bFt.forEach(t),KAo=r(wRe," \u2014 "),WG=n(wRe,"A",{href:!0});var vFt=s(WG);ZAo=r(vFt,"NezhaModel"),vFt.forEach(t),e7o=r(wRe," (Nezha model)"),wRe.forEach(t),o7o=i(x),$u=n(x,"LI",{});var ARe=s($u);Wge=n(ARe,"STRONG",{});var FFt=s(Wge);r7o=r(FFt,"nllb"),FFt.forEach(t),t7o=r(ARe," \u2014 "),QG=n(ARe,"A",{href:!0});var TFt=s(QG);a7o=r(TFt,"M2M100Model"),TFt.forEach(t),n7o=r(ARe," (NLLB model)"),ARe.forEach(t),s7o=i(x),ku=n(x,"LI",{});var LRe=s(ku);Qge=n(LRe,"STRONG",{});var MFt=s(Qge);l7o=r(MFt,"nystromformer"),MFt.forEach(t),i7o=r(LRe," \u2014 "),UG=n(LRe,"A",{href:!0});var EFt=s(UG);d7o=r(EFt,"NystromformerModel"),EFt.forEach(t),c7o=r(LRe," (Nystr\xF6mformer model)"),LRe.forEach(t),f7o=i(x),Su=n(x,"LI",{});var yRe=s(Su);Uge=n(yRe,"STRONG",{});var CFt=s(Uge);m7o=r(CFt,"openai-gpt"),CFt.forEach(t),g7o=r(yRe," \u2014 "),HG=n(yRe,"A",{href:!0});var wFt=s(HG);h7o=r(wFt,"OpenAIGPTModel"),wFt.forEach(t),p7o=r(yRe," (OpenAI GPT model)"),yRe.forEach(t),_7o=i(x),Ru=n(x,"LI",{});var xRe=s(Ru);Hge=n(xRe,"STRONG",{});var AFt=s(Hge);u7o=r(AFt,"opt"),AFt.forEach(t),b7o=r(xRe," \u2014 "),JG=n(xRe,"A",{href:!0});var LFt=s(JG);v7o=r(LFt,"OPTModel"),LFt.forEach(t),F7o=r(xRe," (OPT model)"),xRe.forEach(t),T7o=i(x),Pu=n(x,"LI",{});var $Re=s(Pu);Jge=n($Re,"STRONG",{});var yFt=s(Jge);M7o=r(yFt,"owlvit"),yFt.forEach(t),E7o=r($Re," \u2014 "),YG=n($Re,"A",{href:!0});var xFt=s(YG);C7o=r(xFt,"OwlViTModel"),xFt.forEach(t),w7o=r($Re," (OWL-ViT model)"),$Re.forEach(t),A7o=i(x),Bu=n(x,"LI",{});var kRe=s(Bu);Yge=n(kRe,"STRONG",{});var $Ft=s(Yge);L7o=r($Ft,"pegasus"),$Ft.forEach(t),y7o=r(kRe," \u2014 "),KG=n(kRe,"A",{href:!0});var kFt=s(KG);x7o=r(kFt,"PegasusModel"),kFt.forEach(t),$7o=r(kRe," (Pegasus model)"),kRe.forEach(t),k7o=i(x),Iu=n(x,"LI",{});var SRe=s(Iu);Kge=n(SRe,"STRONG",{});var SFt=s(Kge);S7o=r(SFt,"perceiver"),SFt.forEach(t),R7o=r(SRe," \u2014 "),ZG=n(SRe,"A",{href:!0});var RFt=s(ZG);P7o=r(RFt,"PerceiverModel"),RFt.forEach(t),B7o=r(SRe," (Perceiver model)"),SRe.forEach(t),I7o=i(x),Nu=n(x,"LI",{});var RRe=s(Nu);Zge=n(RRe,"STRONG",{});var PFt=s(Zge);N7o=r(PFt,"plbart"),PFt.forEach(t),q7o=r(RRe," \u2014 "),eO=n(RRe,"A",{href:!0});var BFt=s(eO);j7o=r(BFt,"PLBartModel"),BFt.forEach(t),D7o=r(RRe," (PLBart model)"),RRe.forEach(t),G7o=i(x),qu=n(x,"LI",{});var PRe=s(qu);ehe=n(PRe,"STRONG",{});var IFt=s(ehe);O7o=r(IFt,"poolformer"),IFt.forEach(t),V7o=r(PRe," \u2014 "),oO=n(PRe,"A",{href:!0});var NFt=s(oO);X7o=r(NFt,"PoolFormerModel"),NFt.forEach(t),z7o=r(PRe," (PoolFormer model)"),PRe.forEach(t),W7o=i(x),ju=n(x,"LI",{});var BRe=s(ju);ohe=n(BRe,"STRONG",{});var qFt=s(ohe);Q7o=r(qFt,"prophetnet"),qFt.forEach(t),U7o=r(BRe," \u2014 "),rO=n(BRe,"A",{href:!0});var jFt=s(rO);H7o=r(jFt,"ProphetNetModel"),jFt.forEach(t),J7o=r(BRe," (ProphetNet model)"),BRe.forEach(t),Y7o=i(x),Du=n(x,"LI",{});var IRe=s(Du);rhe=n(IRe,"STRONG",{});var DFt=s(rhe);K7o=r(DFt,"qdqbert"),DFt.forEach(t),Z7o=r(IRe," \u2014 "),tO=n(IRe,"A",{href:!0});var GFt=s(tO);eLo=r(GFt,"QDQBertModel"),GFt.forEach(t),oLo=r(IRe," (QDQBert model)"),IRe.forEach(t),rLo=i(x),Gu=n(x,"LI",{});var NRe=s(Gu);the=n(NRe,"STRONG",{});var OFt=s(the);tLo=r(OFt,"reformer"),OFt.forEach(t),aLo=r(NRe," \u2014 "),aO=n(NRe,"A",{href:!0});var VFt=s(aO);nLo=r(VFt,"ReformerModel"),VFt.forEach(t),sLo=r(NRe," (Reformer model)"),NRe.forEach(t),lLo=i(x),Ou=n(x,"LI",{});var qRe=s(Ou);ahe=n(qRe,"STRONG",{});var XFt=s(ahe);iLo=r(XFt,"regnet"),XFt.forEach(t),dLo=r(qRe," \u2014 "),nO=n(qRe,"A",{href:!0});var zFt=s(nO);cLo=r(zFt,"RegNetModel"),zFt.forEach(t),fLo=r(qRe," (RegNet model)"),qRe.forEach(t),mLo=i(x),Vu=n(x,"LI",{});var jRe=s(Vu);nhe=n(jRe,"STRONG",{});var WFt=s(nhe);gLo=r(WFt,"rembert"),WFt.forEach(t),hLo=r(jRe," \u2014 "),sO=n(jRe,"A",{href:!0});var QFt=s(sO);pLo=r(QFt,"RemBertModel"),QFt.forEach(t),_Lo=r(jRe," (RemBERT model)"),jRe.forEach(t),uLo=i(x),Xu=n(x,"LI",{});var DRe=s(Xu);she=n(DRe,"STRONG",{});var UFt=s(she);bLo=r(UFt,"resnet"),UFt.forEach(t),vLo=r(DRe," \u2014 "),lO=n(DRe,"A",{href:!0});var HFt=s(lO);FLo=r(HFt,"ResNetModel"),HFt.forEach(t),TLo=r(DRe," (ResNet model)"),DRe.forEach(t),MLo=i(x),zu=n(x,"LI",{});var GRe=s(zu);lhe=n(GRe,"STRONG",{});var JFt=s(lhe);ELo=r(JFt,"retribert"),JFt.forEach(t),CLo=r(GRe," \u2014 "),iO=n(GRe,"A",{href:!0});var YFt=s(iO);wLo=r(YFt,"RetriBertModel"),YFt.forEach(t),ALo=r(GRe," (RetriBERT model)"),GRe.forEach(t),LLo=i(x),Wu=n(x,"LI",{});var ORe=s(Wu);ihe=n(ORe,"STRONG",{});var KFt=s(ihe);yLo=r(KFt,"roberta"),KFt.forEach(t),xLo=r(ORe," \u2014 "),dO=n(ORe,"A",{href:!0});var ZFt=s(dO);$Lo=r(ZFt,"RobertaModel"),ZFt.forEach(t),kLo=r(ORe," (RoBERTa model)"),ORe.forEach(t),SLo=i(x),Qu=n(x,"LI",{});var VRe=s(Qu);dhe=n(VRe,"STRONG",{});var eTt=s(dhe);RLo=r(eTt,"roformer"),eTt.forEach(t),PLo=r(VRe," \u2014 "),cO=n(VRe,"A",{href:!0});var oTt=s(cO);BLo=r(oTt,"RoFormerModel"),oTt.forEach(t),ILo=r(VRe," (RoFormer model)"),VRe.forEach(t),NLo=i(x),Uu=n(x,"LI",{});var XRe=s(Uu);che=n(XRe,"STRONG",{});var rTt=s(che);qLo=r(rTt,"segformer"),rTt.forEach(t),jLo=r(XRe," \u2014 "),fO=n(XRe,"A",{href:!0});var tTt=s(fO);DLo=r(tTt,"SegformerModel"),tTt.forEach(t),GLo=r(XRe," (SegFormer model)"),XRe.forEach(t),OLo=i(x),Hu=n(x,"LI",{});var zRe=s(Hu);fhe=n(zRe,"STRONG",{});var aTt=s(fhe);VLo=r(aTt,"sew"),aTt.forEach(t),XLo=r(zRe," \u2014 "),mO=n(zRe,"A",{href:!0});var nTt=s(mO);zLo=r(nTt,"SEWModel"),nTt.forEach(t),WLo=r(zRe," (SEW model)"),zRe.forEach(t),QLo=i(x),Ju=n(x,"LI",{});var WRe=s(Ju);mhe=n(WRe,"STRONG",{});var sTt=s(mhe);ULo=r(sTt,"sew-d"),sTt.forEach(t),HLo=r(WRe," \u2014 "),gO=n(WRe,"A",{href:!0});var lTt=s(gO);JLo=r(lTt,"SEWDModel"),lTt.forEach(t),YLo=r(WRe," (SEW-D model)"),WRe.forEach(t),KLo=i(x),Yu=n(x,"LI",{});var QRe=s(Yu);ghe=n(QRe,"STRONG",{});var iTt=s(ghe);ZLo=r(iTt,"speech_to_text"),iTt.forEach(t),eyo=r(QRe," \u2014 "),hO=n(QRe,"A",{href:!0});var dTt=s(hO);oyo=r(dTt,"Speech2TextModel"),dTt.forEach(t),ryo=r(QRe," (Speech2Text model)"),QRe.forEach(t),tyo=i(x),Ku=n(x,"LI",{});var URe=s(Ku);hhe=n(URe,"STRONG",{});var cTt=s(hhe);ayo=r(cTt,"splinter"),cTt.forEach(t),nyo=r(URe," \u2014 "),pO=n(URe,"A",{href:!0});var fTt=s(pO);syo=r(fTt,"SplinterModel"),fTt.forEach(t),lyo=r(URe," (Splinter model)"),URe.forEach(t),iyo=i(x),Zu=n(x,"LI",{});var HRe=s(Zu);phe=n(HRe,"STRONG",{});var mTt=s(phe);dyo=r(mTt,"squeezebert"),mTt.forEach(t),cyo=r(HRe," \u2014 "),_O=n(HRe,"A",{href:!0});var gTt=s(_O);fyo=r(gTt,"SqueezeBertModel"),gTt.forEach(t),myo=r(HRe," (SqueezeBERT model)"),HRe.forEach(t),gyo=i(x),e1=n(x,"LI",{});var JRe=s(e1);_he=n(JRe,"STRONG",{});var hTt=s(_he);hyo=r(hTt,"swin"),hTt.forEach(t),pyo=r(JRe," \u2014 "),uO=n(JRe,"A",{href:!0});var pTt=s(uO);_yo=r(pTt,"SwinModel"),pTt.forEach(t),uyo=r(JRe," (Swin Transformer model)"),JRe.forEach(t),byo=i(x),o1=n(x,"LI",{});var YRe=s(o1);uhe=n(YRe,"STRONG",{});var _Tt=s(uhe);vyo=r(_Tt,"swinv2"),_Tt.forEach(t),Fyo=r(YRe," \u2014 "),bO=n(YRe,"A",{href:!0});var uTt=s(bO);Tyo=r(uTt,"Swinv2Model"),uTt.forEach(t),Myo=r(YRe," (Swin Transformer V2 model)"),YRe.forEach(t),Eyo=i(x),r1=n(x,"LI",{});var KRe=s(r1);bhe=n(KRe,"STRONG",{});var bTt=s(bhe);Cyo=r(bTt,"t5"),bTt.forEach(t),wyo=r(KRe," \u2014 "),vO=n(KRe,"A",{href:!0});var vTt=s(vO);Ayo=r(vTt,"T5Model"),vTt.forEach(t),Lyo=r(KRe," (T5 model)"),KRe.forEach(t),yyo=i(x),t1=n(x,"LI",{});var ZRe=s(t1);vhe=n(ZRe,"STRONG",{});var FTt=s(vhe);xyo=r(FTt,"tapas"),FTt.forEach(t),$yo=r(ZRe," \u2014 "),FO=n(ZRe,"A",{href:!0});var TTt=s(FO);kyo=r(TTt,"TapasModel"),TTt.forEach(t),Syo=r(ZRe," (TAPAS model)"),ZRe.forEach(t),Ryo=i(x),a1=n(x,"LI",{});var ePe=s(a1);Fhe=n(ePe,"STRONG",{});var MTt=s(Fhe);Pyo=r(MTt,"trajectory_transformer"),MTt.forEach(t),Byo=r(ePe," \u2014 "),TO=n(ePe,"A",{href:!0});var ETt=s(TO);Iyo=r(ETt,"TrajectoryTransformerModel"),ETt.forEach(t),Nyo=r(ePe," (Trajectory Transformer model)"),ePe.forEach(t),qyo=i(x),n1=n(x,"LI",{});var oPe=s(n1);The=n(oPe,"STRONG",{});var CTt=s(The);jyo=r(CTt,"transfo-xl"),CTt.forEach(t),Dyo=r(oPe," \u2014 "),MO=n(oPe,"A",{href:!0});var wTt=s(MO);Gyo=r(wTt,"TransfoXLModel"),wTt.forEach(t),Oyo=r(oPe," (Transformer-XL model)"),oPe.forEach(t),Vyo=i(x),s1=n(x,"LI",{});var rPe=s(s1);Mhe=n(rPe,"STRONG",{});var ATt=s(Mhe);Xyo=r(ATt,"unispeech"),ATt.forEach(t),zyo=r(rPe," \u2014 "),EO=n(rPe,"A",{href:!0});var LTt=s(EO);Wyo=r(LTt,"UniSpeechModel"),LTt.forEach(t),Qyo=r(rPe," (UniSpeech model)"),rPe.forEach(t),Uyo=i(x),l1=n(x,"LI",{});var tPe=s(l1);Ehe=n(tPe,"STRONG",{});var yTt=s(Ehe);Hyo=r(yTt,"unispeech-sat"),yTt.forEach(t),Jyo=r(tPe," \u2014 "),CO=n(tPe,"A",{href:!0});var xTt=s(CO);Yyo=r(xTt,"UniSpeechSatModel"),xTt.forEach(t),Kyo=r(tPe," (UniSpeechSat model)"),tPe.forEach(t),Zyo=i(x),i1=n(x,"LI",{});var aPe=s(i1);Che=n(aPe,"STRONG",{});var $Tt=s(Che);e9o=r($Tt,"van"),$Tt.forEach(t),o9o=r(aPe," \u2014 "),wO=n(aPe,"A",{href:!0});var kTt=s(wO);r9o=r(kTt,"VanModel"),kTt.forEach(t),t9o=r(aPe," (VAN model)"),aPe.forEach(t),a9o=i(x),d1=n(x,"LI",{});var nPe=s(d1);whe=n(nPe,"STRONG",{});var STt=s(whe);n9o=r(STt,"videomae"),STt.forEach(t),s9o=r(nPe," \u2014 "),AO=n(nPe,"A",{href:!0});var RTt=s(AO);l9o=r(RTt,"VideoMAEModel"),RTt.forEach(t),i9o=r(nPe," (VideoMAE model)"),nPe.forEach(t),d9o=i(x),c1=n(x,"LI",{});var sPe=s(c1);Ahe=n(sPe,"STRONG",{});var PTt=s(Ahe);c9o=r(PTt,"vilt"),PTt.forEach(t),f9o=r(sPe," \u2014 "),LO=n(sPe,"A",{href:!0});var BTt=s(LO);m9o=r(BTt,"ViltModel"),BTt.forEach(t),g9o=r(sPe," (ViLT model)"),sPe.forEach(t),h9o=i(x),f1=n(x,"LI",{});var lPe=s(f1);Lhe=n(lPe,"STRONG",{});var ITt=s(Lhe);p9o=r(ITt,"vision-text-dual-encoder"),ITt.forEach(t),_9o=r(lPe," \u2014 "),yO=n(lPe,"A",{href:!0});var NTt=s(yO);u9o=r(NTt,"VisionTextDualEncoderModel"),NTt.forEach(t),b9o=r(lPe," (VisionTextDualEncoder model)"),lPe.forEach(t),v9o=i(x),m1=n(x,"LI",{});var iPe=s(m1);yhe=n(iPe,"STRONG",{});var qTt=s(yhe);F9o=r(qTt,"visual_bert"),qTt.forEach(t),T9o=r(iPe," \u2014 "),xO=n(iPe,"A",{href:!0});var jTt=s(xO);M9o=r(jTt,"VisualBertModel"),jTt.forEach(t),E9o=r(iPe," (VisualBERT model)"),iPe.forEach(t),C9o=i(x),g1=n(x,"LI",{});var dPe=s(g1);xhe=n(dPe,"STRONG",{});var DTt=s(xhe);w9o=r(DTt,"vit"),DTt.forEach(t),A9o=r(dPe," \u2014 "),$O=n(dPe,"A",{href:!0});var GTt=s($O);L9o=r(GTt,"ViTModel"),GTt.forEach(t),y9o=r(dPe," (ViT model)"),dPe.forEach(t),x9o=i(x),h1=n(x,"LI",{});var cPe=s(h1);$he=n(cPe,"STRONG",{});var OTt=s($he);$9o=r(OTt,"vit_mae"),OTt.forEach(t),k9o=r(cPe," \u2014 "),kO=n(cPe,"A",{href:!0});var VTt=s(kO);S9o=r(VTt,"ViTMAEModel"),VTt.forEach(t),R9o=r(cPe," (ViTMAE model)"),cPe.forEach(t),P9o=i(x),p1=n(x,"LI",{});var fPe=s(p1);khe=n(fPe,"STRONG",{});var XTt=s(khe);B9o=r(XTt,"wav2vec2"),XTt.forEach(t),I9o=r(fPe," \u2014 "),SO=n(fPe,"A",{href:!0});var zTt=s(SO);N9o=r(zTt,"Wav2Vec2Model"),zTt.forEach(t),q9o=r(fPe," (Wav2Vec2 model)"),fPe.forEach(t),j9o=i(x),_1=n(x,"LI",{});var mPe=s(_1);She=n(mPe,"STRONG",{});var WTt=s(She);D9o=r(WTt,"wav2vec2-conformer"),WTt.forEach(t),G9o=r(mPe," \u2014 "),RO=n(mPe,"A",{href:!0});var QTt=s(RO);O9o=r(QTt,"Wav2Vec2ConformerModel"),QTt.forEach(t),V9o=r(mPe," (Wav2Vec2-Conformer model)"),mPe.forEach(t),X9o=i(x),u1=n(x,"LI",{});var gPe=s(u1);Rhe=n(gPe,"STRONG",{});var UTt=s(Rhe);z9o=r(UTt,"wavlm"),UTt.forEach(t),W9o=r(gPe," \u2014 "),PO=n(gPe,"A",{href:!0});var HTt=s(PO);Q9o=r(HTt,"WavLMModel"),HTt.forEach(t),U9o=r(gPe," (WavLM model)"),gPe.forEach(t),H9o=i(x),b1=n(x,"LI",{});var hPe=s(b1);Phe=n(hPe,"STRONG",{});var JTt=s(Phe);J9o=r(JTt,"xglm"),JTt.forEach(t),Y9o=r(hPe," \u2014 "),BO=n(hPe,"A",{href:!0});var YTt=s(BO);K9o=r(YTt,"XGLMModel"),YTt.forEach(t),Z9o=r(hPe," (XGLM model)"),hPe.forEach(t),exo=i(x),v1=n(x,"LI",{});var pPe=s(v1);Bhe=n(pPe,"STRONG",{});var KTt=s(Bhe);oxo=r(KTt,"xlm"),KTt.forEach(t),rxo=r(pPe," \u2014 "),IO=n(pPe,"A",{href:!0});var ZTt=s(IO);txo=r(ZTt,"XLMModel"),ZTt.forEach(t),axo=r(pPe," (XLM model)"),pPe.forEach(t),nxo=i(x),F1=n(x,"LI",{});var _Pe=s(F1);Ihe=n(_Pe,"STRONG",{});var e8t=s(Ihe);sxo=r(e8t,"xlm-prophetnet"),e8t.forEach(t),lxo=r(_Pe," \u2014 "),NO=n(_Pe,"A",{href:!0});var o8t=s(NO);ixo=r(o8t,"XLMProphetNetModel"),o8t.forEach(t),dxo=r(_Pe," (XLM-ProphetNet model)"),_Pe.forEach(t),cxo=i(x),T1=n(x,"LI",{});var uPe=s(T1);Nhe=n(uPe,"STRONG",{});var r8t=s(Nhe);fxo=r(r8t,"xlm-roberta"),r8t.forEach(t),mxo=r(uPe," \u2014 "),qO=n(uPe,"A",{href:!0});var t8t=s(qO);gxo=r(t8t,"XLMRobertaModel"),t8t.forEach(t),hxo=r(uPe," (XLM-RoBERTa model)"),uPe.forEach(t),pxo=i(x),M1=n(x,"LI",{});var bPe=s(M1);qhe=n(bPe,"STRONG",{});var a8t=s(qhe);_xo=r(a8t,"xlm-roberta-xl"),a8t.forEach(t),uxo=r(bPe," \u2014 "),jO=n(bPe,"A",{href:!0});var n8t=s(jO);bxo=r(n8t,"XLMRobertaXLModel"),n8t.forEach(t),vxo=r(bPe," (XLM-RoBERTa-XL model)"),bPe.forEach(t),Fxo=i(x),E1=n(x,"LI",{});var vPe=s(E1);jhe=n(vPe,"STRONG",{});var s8t=s(jhe);Txo=r(s8t,"xlnet"),s8t.forEach(t),Mxo=r(vPe," \u2014 "),DO=n(vPe,"A",{href:!0});var l8t=s(DO);Exo=r(l8t,"XLNetModel"),l8t.forEach(t),Cxo=r(vPe," (XLNet model)"),vPe.forEach(t),wxo=i(x),C1=n(x,"LI",{});var FPe=s(C1);Dhe=n(FPe,"STRONG",{});var i8t=s(Dhe);Axo=r(i8t,"yolos"),i8t.forEach(t),Lxo=r(FPe," \u2014 "),GO=n(FPe,"A",{href:!0});var d8t=s(GO);yxo=r(d8t,"YolosModel"),d8t.forEach(t),xxo=r(FPe," (YOLOS model)"),FPe.forEach(t),$xo=i(x),w1=n(x,"LI",{});var TPe=s(w1);Ghe=n(TPe,"STRONG",{});var c8t=s(Ghe);kxo=r(c8t,"yoso"),c8t.forEach(t),Sxo=r(TPe," \u2014 "),OO=n(TPe,"A",{href:!0});var f8t=s(OO);Rxo=r(f8t,"YosoModel"),f8t.forEach(t),Pxo=r(TPe," (YOSO model)"),TPe.forEach(t),x.forEach(t),Bxo=i(ga),A1=n(ga,"P",{});var MPe=s(A1);Ixo=r(MPe,"The model is set in evaluation mode by default using "),Ohe=n(MPe,"CODE",{});var m8t=s(Ohe);Nxo=r(m8t,"model.eval()"),m8t.forEach(t),qxo=r(MPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vhe=n(MPe,"CODE",{});var g8t=s(Vhe);jxo=r(g8t,"model.train()"),g8t.forEach(t),MPe.forEach(t),Dxo=i(ga),T(L1.$$.fragment,ga),ga.forEach(t),hl.forEach(t),nUe=i(f),nd=n(f,"H2",{class:!0});var pJe=s(nd);y1=n(pJe,"A",{id:!0,class:!0,href:!0});var h8t=s(y1);Xhe=n(h8t,"SPAN",{});var p8t=s(Xhe);T(zy.$$.fragment,p8t),p8t.forEach(t),h8t.forEach(t),Gxo=i(pJe),zhe=n(pJe,"SPAN",{});var _8t=s(zhe);Oxo=r(_8t,"AutoModelForPreTraining"),_8t.forEach(t),pJe.forEach(t),sUe=i(f),Ro=n(f,"DIV",{class:!0});var pl=s(Ro);T(Wy.$$.fragment,pl),Vxo=i(pl),sd=n(pl,"P",{});var Xae=s(sd);Xxo=r(Xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VO=n(Xae,"A",{href:!0});var u8t=s(VO);zxo=r(u8t,"from_pretrained()"),u8t.forEach(t),Wxo=r(Xae," class method or the "),XO=n(Xae,"A",{href:!0});var b8t=s(XO);Qxo=r(b8t,"from_config()"),b8t.forEach(t),Uxo=r(Xae,` class
method.`),Xae.forEach(t),Hxo=i(pl),Qy=n(pl,"P",{});var _Je=s(Qy);Jxo=r(_Je,"This class cannot be instantiated directly using "),Whe=n(_Je,"CODE",{});var v8t=s(Whe);Yxo=r(v8t,"__init__()"),v8t.forEach(t),Kxo=r(_Je," (throws an error)."),_Je.forEach(t),Zxo=i(pl),gt=n(pl,"DIV",{class:!0});var p7=s(gt);T(Uy.$$.fragment,p7),e$o=i(p7),Qhe=n(p7,"P",{});var F8t=s(Qhe);o$o=r(F8t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),F8t.forEach(t),r$o=i(p7),ld=n(p7,"P",{});var zae=s(ld);t$o=r(zae,`Note:
Loading a model from its configuration file does `),Uhe=n(zae,"STRONG",{});var T8t=s(Uhe);a$o=r(T8t,"not"),T8t.forEach(t),n$o=r(zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),zO=n(zae,"A",{href:!0});var M8t=s(zO);s$o=r(M8t,"from_pretrained()"),M8t.forEach(t),l$o=r(zae," to load the model weights."),zae.forEach(t),i$o=i(p7),T(x1.$$.fragment,p7),p7.forEach(t),d$o=i(pl),Ke=n(pl,"DIV",{class:!0});var ha=s(Ke);T(Hy.$$.fragment,ha),c$o=i(ha),Hhe=n(ha,"P",{});var E8t=s(Hhe);f$o=r(E8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),E8t.forEach(t),m$o=i(ha),Xa=n(ha,"P",{});var _7=s(Xa);g$o=r(_7,"The model class to instantiate is selected based on the "),Jhe=n(_7,"CODE",{});var C8t=s(Jhe);h$o=r(C8t,"model_type"),C8t.forEach(t),p$o=r(_7,` property of the config object (either
passed as an argument or loaded from `),Yhe=n(_7,"CODE",{});var w8t=s(Yhe);_$o=r(w8t,"pretrained_model_name_or_path"),w8t.forEach(t),u$o=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=n(_7,"CODE",{});var A8t=s(Khe);b$o=r(A8t,"pretrained_model_name_or_path"),A8t.forEach(t),v$o=r(_7,":"),_7.forEach(t),F$o=i(ha),G=n(ha,"UL",{});var O=s(G);$1=n(O,"LI",{});var EPe=s($1);Zhe=n(EPe,"STRONG",{});var L8t=s(Zhe);T$o=r(L8t,"albert"),L8t.forEach(t),M$o=r(EPe," \u2014 "),WO=n(EPe,"A",{href:!0});var y8t=s(WO);E$o=r(y8t,"AlbertForPreTraining"),y8t.forEach(t),C$o=r(EPe," (ALBERT model)"),EPe.forEach(t),w$o=i(O),k1=n(O,"LI",{});var CPe=s(k1);epe=n(CPe,"STRONG",{});var x8t=s(epe);A$o=r(x8t,"bart"),x8t.forEach(t),L$o=r(CPe," \u2014 "),QO=n(CPe,"A",{href:!0});var $8t=s(QO);y$o=r($8t,"BartForConditionalGeneration"),$8t.forEach(t),x$o=r(CPe," (BART model)"),CPe.forEach(t),$$o=i(O),S1=n(O,"LI",{});var wPe=s(S1);ope=n(wPe,"STRONG",{});var k8t=s(ope);k$o=r(k8t,"bert"),k8t.forEach(t),S$o=r(wPe," \u2014 "),UO=n(wPe,"A",{href:!0});var S8t=s(UO);R$o=r(S8t,"BertForPreTraining"),S8t.forEach(t),P$o=r(wPe," (BERT model)"),wPe.forEach(t),B$o=i(O),R1=n(O,"LI",{});var APe=s(R1);rpe=n(APe,"STRONG",{});var R8t=s(rpe);I$o=r(R8t,"big_bird"),R8t.forEach(t),N$o=r(APe," \u2014 "),HO=n(APe,"A",{href:!0});var P8t=s(HO);q$o=r(P8t,"BigBirdForPreTraining"),P8t.forEach(t),j$o=r(APe," (BigBird model)"),APe.forEach(t),D$o=i(O),P1=n(O,"LI",{});var LPe=s(P1);tpe=n(LPe,"STRONG",{});var B8t=s(tpe);G$o=r(B8t,"bloom"),B8t.forEach(t),O$o=r(LPe," \u2014 "),JO=n(LPe,"A",{href:!0});var I8t=s(JO);V$o=r(I8t,"BloomForCausalLM"),I8t.forEach(t),X$o=r(LPe," (BLOOM model)"),LPe.forEach(t),z$o=i(O),B1=n(O,"LI",{});var yPe=s(B1);ape=n(yPe,"STRONG",{});var N8t=s(ape);W$o=r(N8t,"camembert"),N8t.forEach(t),Q$o=r(yPe," \u2014 "),YO=n(yPe,"A",{href:!0});var q8t=s(YO);U$o=r(q8t,"CamembertForMaskedLM"),q8t.forEach(t),H$o=r(yPe," (CamemBERT model)"),yPe.forEach(t),J$o=i(O),I1=n(O,"LI",{});var xPe=s(I1);npe=n(xPe,"STRONG",{});var j8t=s(npe);Y$o=r(j8t,"ctrl"),j8t.forEach(t),K$o=r(xPe," \u2014 "),KO=n(xPe,"A",{href:!0});var D8t=s(KO);Z$o=r(D8t,"CTRLLMHeadModel"),D8t.forEach(t),eko=r(xPe," (CTRL model)"),xPe.forEach(t),oko=i(O),N1=n(O,"LI",{});var $Pe=s(N1);spe=n($Pe,"STRONG",{});var G8t=s(spe);rko=r(G8t,"data2vec-text"),G8t.forEach(t),tko=r($Pe," \u2014 "),ZO=n($Pe,"A",{href:!0});var O8t=s(ZO);ako=r(O8t,"Data2VecTextForMaskedLM"),O8t.forEach(t),nko=r($Pe," (Data2VecText model)"),$Pe.forEach(t),sko=i(O),q1=n(O,"LI",{});var kPe=s(q1);lpe=n(kPe,"STRONG",{});var V8t=s(lpe);lko=r(V8t,"deberta"),V8t.forEach(t),iko=r(kPe," \u2014 "),eV=n(kPe,"A",{href:!0});var X8t=s(eV);dko=r(X8t,"DebertaForMaskedLM"),X8t.forEach(t),cko=r(kPe," (DeBERTa model)"),kPe.forEach(t),fko=i(O),j1=n(O,"LI",{});var SPe=s(j1);ipe=n(SPe,"STRONG",{});var z8t=s(ipe);mko=r(z8t,"deberta-v2"),z8t.forEach(t),gko=r(SPe," \u2014 "),oV=n(SPe,"A",{href:!0});var W8t=s(oV);hko=r(W8t,"DebertaV2ForMaskedLM"),W8t.forEach(t),pko=r(SPe," (DeBERTa-v2 model)"),SPe.forEach(t),_ko=i(O),D1=n(O,"LI",{});var RPe=s(D1);dpe=n(RPe,"STRONG",{});var Q8t=s(dpe);uko=r(Q8t,"distilbert"),Q8t.forEach(t),bko=r(RPe," \u2014 "),rV=n(RPe,"A",{href:!0});var U8t=s(rV);vko=r(U8t,"DistilBertForMaskedLM"),U8t.forEach(t),Fko=r(RPe," (DistilBERT model)"),RPe.forEach(t),Tko=i(O),G1=n(O,"LI",{});var PPe=s(G1);cpe=n(PPe,"STRONG",{});var H8t=s(cpe);Mko=r(H8t,"electra"),H8t.forEach(t),Eko=r(PPe," \u2014 "),tV=n(PPe,"A",{href:!0});var J8t=s(tV);Cko=r(J8t,"ElectraForPreTraining"),J8t.forEach(t),wko=r(PPe," (ELECTRA model)"),PPe.forEach(t),Ako=i(O),O1=n(O,"LI",{});var BPe=s(O1);fpe=n(BPe,"STRONG",{});var Y8t=s(fpe);Lko=r(Y8t,"flaubert"),Y8t.forEach(t),yko=r(BPe," \u2014 "),aV=n(BPe,"A",{href:!0});var K8t=s(aV);xko=r(K8t,"FlaubertWithLMHeadModel"),K8t.forEach(t),$ko=r(BPe," (FlauBERT model)"),BPe.forEach(t),kko=i(O),V1=n(O,"LI",{});var IPe=s(V1);mpe=n(IPe,"STRONG",{});var Z8t=s(mpe);Sko=r(Z8t,"flava"),Z8t.forEach(t),Rko=r(IPe," \u2014 "),nV=n(IPe,"A",{href:!0});var eMt=s(nV);Pko=r(eMt,"FlavaForPreTraining"),eMt.forEach(t),Bko=r(IPe," (FLAVA model)"),IPe.forEach(t),Iko=i(O),X1=n(O,"LI",{});var NPe=s(X1);gpe=n(NPe,"STRONG",{});var oMt=s(gpe);Nko=r(oMt,"fnet"),oMt.forEach(t),qko=r(NPe," \u2014 "),sV=n(NPe,"A",{href:!0});var rMt=s(sV);jko=r(rMt,"FNetForPreTraining"),rMt.forEach(t),Dko=r(NPe," (FNet model)"),NPe.forEach(t),Gko=i(O),z1=n(O,"LI",{});var qPe=s(z1);hpe=n(qPe,"STRONG",{});var tMt=s(hpe);Oko=r(tMt,"fsmt"),tMt.forEach(t),Vko=r(qPe," \u2014 "),lV=n(qPe,"A",{href:!0});var aMt=s(lV);Xko=r(aMt,"FSMTForConditionalGeneration"),aMt.forEach(t),zko=r(qPe," (FairSeq Machine-Translation model)"),qPe.forEach(t),Wko=i(O),W1=n(O,"LI",{});var jPe=s(W1);ppe=n(jPe,"STRONG",{});var nMt=s(ppe);Qko=r(nMt,"funnel"),nMt.forEach(t),Uko=r(jPe," \u2014 "),iV=n(jPe,"A",{href:!0});var sMt=s(iV);Hko=r(sMt,"FunnelForPreTraining"),sMt.forEach(t),Jko=r(jPe," (Funnel Transformer model)"),jPe.forEach(t),Yko=i(O),Q1=n(O,"LI",{});var DPe=s(Q1);_pe=n(DPe,"STRONG",{});var lMt=s(_pe);Kko=r(lMt,"gpt2"),lMt.forEach(t),Zko=r(DPe," \u2014 "),dV=n(DPe,"A",{href:!0});var iMt=s(dV);eSo=r(iMt,"GPT2LMHeadModel"),iMt.forEach(t),oSo=r(DPe," (OpenAI GPT-2 model)"),DPe.forEach(t),rSo=i(O),U1=n(O,"LI",{});var GPe=s(U1);upe=n(GPe,"STRONG",{});var dMt=s(upe);tSo=r(dMt,"ibert"),dMt.forEach(t),aSo=r(GPe," \u2014 "),cV=n(GPe,"A",{href:!0});var cMt=s(cV);nSo=r(cMt,"IBertForMaskedLM"),cMt.forEach(t),sSo=r(GPe," (I-BERT model)"),GPe.forEach(t),lSo=i(O),H1=n(O,"LI",{});var OPe=s(H1);bpe=n(OPe,"STRONG",{});var fMt=s(bpe);iSo=r(fMt,"layoutlm"),fMt.forEach(t),dSo=r(OPe," \u2014 "),fV=n(OPe,"A",{href:!0});var mMt=s(fV);cSo=r(mMt,"LayoutLMForMaskedLM"),mMt.forEach(t),fSo=r(OPe," (LayoutLM model)"),OPe.forEach(t),mSo=i(O),J1=n(O,"LI",{});var VPe=s(J1);vpe=n(VPe,"STRONG",{});var gMt=s(vpe);gSo=r(gMt,"longformer"),gMt.forEach(t),hSo=r(VPe," \u2014 "),mV=n(VPe,"A",{href:!0});var hMt=s(mV);pSo=r(hMt,"LongformerForMaskedLM"),hMt.forEach(t),_So=r(VPe," (Longformer model)"),VPe.forEach(t),uSo=i(O),Y1=n(O,"LI",{});var XPe=s(Y1);Fpe=n(XPe,"STRONG",{});var pMt=s(Fpe);bSo=r(pMt,"luke"),pMt.forEach(t),vSo=r(XPe," \u2014 "),gV=n(XPe,"A",{href:!0});var _Mt=s(gV);FSo=r(_Mt,"LukeForMaskedLM"),_Mt.forEach(t),TSo=r(XPe," (LUKE model)"),XPe.forEach(t),MSo=i(O),K1=n(O,"LI",{});var zPe=s(K1);Tpe=n(zPe,"STRONG",{});var uMt=s(Tpe);ESo=r(uMt,"lxmert"),uMt.forEach(t),CSo=r(zPe," \u2014 "),hV=n(zPe,"A",{href:!0});var bMt=s(hV);wSo=r(bMt,"LxmertForPreTraining"),bMt.forEach(t),ASo=r(zPe," (LXMERT model)"),zPe.forEach(t),LSo=i(O),Z1=n(O,"LI",{});var WPe=s(Z1);Mpe=n(WPe,"STRONG",{});var vMt=s(Mpe);ySo=r(vMt,"megatron-bert"),vMt.forEach(t),xSo=r(WPe," \u2014 "),pV=n(WPe,"A",{href:!0});var FMt=s(pV);$So=r(FMt,"MegatronBertForPreTraining"),FMt.forEach(t),kSo=r(WPe," (Megatron-BERT model)"),WPe.forEach(t),SSo=i(O),e4=n(O,"LI",{});var QPe=s(e4);Epe=n(QPe,"STRONG",{});var TMt=s(Epe);RSo=r(TMt,"mobilebert"),TMt.forEach(t),PSo=r(QPe," \u2014 "),_V=n(QPe,"A",{href:!0});var MMt=s(_V);BSo=r(MMt,"MobileBertForPreTraining"),MMt.forEach(t),ISo=r(QPe," (MobileBERT model)"),QPe.forEach(t),NSo=i(O),o4=n(O,"LI",{});var UPe=s(o4);Cpe=n(UPe,"STRONG",{});var EMt=s(Cpe);qSo=r(EMt,"mpnet"),EMt.forEach(t),jSo=r(UPe," \u2014 "),uV=n(UPe,"A",{href:!0});var CMt=s(uV);DSo=r(CMt,"MPNetForMaskedLM"),CMt.forEach(t),GSo=r(UPe," (MPNet model)"),UPe.forEach(t),OSo=i(O),r4=n(O,"LI",{});var HPe=s(r4);wpe=n(HPe,"STRONG",{});var wMt=s(wpe);VSo=r(wMt,"mvp"),wMt.forEach(t),XSo=r(HPe," \u2014 "),bV=n(HPe,"A",{href:!0});var AMt=s(bV);zSo=r(AMt,"MvpForConditionalGeneration"),AMt.forEach(t),WSo=r(HPe," (MVP model)"),HPe.forEach(t),QSo=i(O),t4=n(O,"LI",{});var JPe=s(t4);Ape=n(JPe,"STRONG",{});var LMt=s(Ape);USo=r(LMt,"nezha"),LMt.forEach(t),HSo=r(JPe," \u2014 "),vV=n(JPe,"A",{href:!0});var yMt=s(vV);JSo=r(yMt,"NezhaForPreTraining"),yMt.forEach(t),YSo=r(JPe," (Nezha model)"),JPe.forEach(t),KSo=i(O),a4=n(O,"LI",{});var YPe=s(a4);Lpe=n(YPe,"STRONG",{});var xMt=s(Lpe);ZSo=r(xMt,"openai-gpt"),xMt.forEach(t),eRo=r(YPe," \u2014 "),FV=n(YPe,"A",{href:!0});var $Mt=s(FV);oRo=r($Mt,"OpenAIGPTLMHeadModel"),$Mt.forEach(t),rRo=r(YPe," (OpenAI GPT model)"),YPe.forEach(t),tRo=i(O),n4=n(O,"LI",{});var KPe=s(n4);ype=n(KPe,"STRONG",{});var kMt=s(ype);aRo=r(kMt,"retribert"),kMt.forEach(t),nRo=r(KPe," \u2014 "),TV=n(KPe,"A",{href:!0});var SMt=s(TV);sRo=r(SMt,"RetriBertModel"),SMt.forEach(t),lRo=r(KPe," (RetriBERT model)"),KPe.forEach(t),iRo=i(O),s4=n(O,"LI",{});var ZPe=s(s4);xpe=n(ZPe,"STRONG",{});var RMt=s(xpe);dRo=r(RMt,"roberta"),RMt.forEach(t),cRo=r(ZPe," \u2014 "),MV=n(ZPe,"A",{href:!0});var PMt=s(MV);fRo=r(PMt,"RobertaForMaskedLM"),PMt.forEach(t),mRo=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),gRo=i(O),l4=n(O,"LI",{});var eBe=s(l4);$pe=n(eBe,"STRONG",{});var BMt=s($pe);hRo=r(BMt,"splinter"),BMt.forEach(t),pRo=r(eBe," \u2014 "),EV=n(eBe,"A",{href:!0});var IMt=s(EV);_Ro=r(IMt,"SplinterForPreTraining"),IMt.forEach(t),uRo=r(eBe," (Splinter model)"),eBe.forEach(t),bRo=i(O),i4=n(O,"LI",{});var oBe=s(i4);kpe=n(oBe,"STRONG",{});var NMt=s(kpe);vRo=r(NMt,"squeezebert"),NMt.forEach(t),FRo=r(oBe," \u2014 "),CV=n(oBe,"A",{href:!0});var qMt=s(CV);TRo=r(qMt,"SqueezeBertForMaskedLM"),qMt.forEach(t),MRo=r(oBe," (SqueezeBERT model)"),oBe.forEach(t),ERo=i(O),d4=n(O,"LI",{});var rBe=s(d4);Spe=n(rBe,"STRONG",{});var jMt=s(Spe);CRo=r(jMt,"t5"),jMt.forEach(t),wRo=r(rBe," \u2014 "),wV=n(rBe,"A",{href:!0});var DMt=s(wV);ARo=r(DMt,"T5ForConditionalGeneration"),DMt.forEach(t),LRo=r(rBe," (T5 model)"),rBe.forEach(t),yRo=i(O),c4=n(O,"LI",{});var tBe=s(c4);Rpe=n(tBe,"STRONG",{});var GMt=s(Rpe);xRo=r(GMt,"tapas"),GMt.forEach(t),$Ro=r(tBe," \u2014 "),AV=n(tBe,"A",{href:!0});var OMt=s(AV);kRo=r(OMt,"TapasForMaskedLM"),OMt.forEach(t),SRo=r(tBe," (TAPAS model)"),tBe.forEach(t),RRo=i(O),f4=n(O,"LI",{});var aBe=s(f4);Ppe=n(aBe,"STRONG",{});var VMt=s(Ppe);PRo=r(VMt,"transfo-xl"),VMt.forEach(t),BRo=r(aBe," \u2014 "),LV=n(aBe,"A",{href:!0});var XMt=s(LV);IRo=r(XMt,"TransfoXLLMHeadModel"),XMt.forEach(t),NRo=r(aBe," (Transformer-XL model)"),aBe.forEach(t),qRo=i(O),m4=n(O,"LI",{});var nBe=s(m4);Bpe=n(nBe,"STRONG",{});var zMt=s(Bpe);jRo=r(zMt,"unispeech"),zMt.forEach(t),DRo=r(nBe," \u2014 "),yV=n(nBe,"A",{href:!0});var WMt=s(yV);GRo=r(WMt,"UniSpeechForPreTraining"),WMt.forEach(t),ORo=r(nBe," (UniSpeech model)"),nBe.forEach(t),VRo=i(O),g4=n(O,"LI",{});var sBe=s(g4);Ipe=n(sBe,"STRONG",{});var QMt=s(Ipe);XRo=r(QMt,"unispeech-sat"),QMt.forEach(t),zRo=r(sBe," \u2014 "),xV=n(sBe,"A",{href:!0});var UMt=s(xV);WRo=r(UMt,"UniSpeechSatForPreTraining"),UMt.forEach(t),QRo=r(sBe," (UniSpeechSat model)"),sBe.forEach(t),URo=i(O),h4=n(O,"LI",{});var lBe=s(h4);Npe=n(lBe,"STRONG",{});var HMt=s(Npe);HRo=r(HMt,"videomae"),HMt.forEach(t),JRo=r(lBe," \u2014 "),$V=n(lBe,"A",{href:!0});var JMt=s($V);YRo=r(JMt,"VideoMAEForPreTraining"),JMt.forEach(t),KRo=r(lBe," (VideoMAE model)"),lBe.forEach(t),ZRo=i(O),p4=n(O,"LI",{});var iBe=s(p4);qpe=n(iBe,"STRONG",{});var YMt=s(qpe);ePo=r(YMt,"visual_bert"),YMt.forEach(t),oPo=r(iBe," \u2014 "),kV=n(iBe,"A",{href:!0});var KMt=s(kV);rPo=r(KMt,"VisualBertForPreTraining"),KMt.forEach(t),tPo=r(iBe," (VisualBERT model)"),iBe.forEach(t),aPo=i(O),_4=n(O,"LI",{});var dBe=s(_4);jpe=n(dBe,"STRONG",{});var ZMt=s(jpe);nPo=r(ZMt,"vit_mae"),ZMt.forEach(t),sPo=r(dBe," \u2014 "),SV=n(dBe,"A",{href:!0});var eEt=s(SV);lPo=r(eEt,"ViTMAEForPreTraining"),eEt.forEach(t),iPo=r(dBe," (ViTMAE model)"),dBe.forEach(t),dPo=i(O),u4=n(O,"LI",{});var cBe=s(u4);Dpe=n(cBe,"STRONG",{});var oEt=s(Dpe);cPo=r(oEt,"wav2vec2"),oEt.forEach(t),fPo=r(cBe," \u2014 "),RV=n(cBe,"A",{href:!0});var rEt=s(RV);mPo=r(rEt,"Wav2Vec2ForPreTraining"),rEt.forEach(t),gPo=r(cBe," (Wav2Vec2 model)"),cBe.forEach(t),hPo=i(O),b4=n(O,"LI",{});var fBe=s(b4);Gpe=n(fBe,"STRONG",{});var tEt=s(Gpe);pPo=r(tEt,"wav2vec2-conformer"),tEt.forEach(t),_Po=r(fBe," \u2014 "),PV=n(fBe,"A",{href:!0});var aEt=s(PV);uPo=r(aEt,"Wav2Vec2ConformerForPreTraining"),aEt.forEach(t),bPo=r(fBe," (Wav2Vec2-Conformer model)"),fBe.forEach(t),vPo=i(O),v4=n(O,"LI",{});var mBe=s(v4);Ope=n(mBe,"STRONG",{});var nEt=s(Ope);FPo=r(nEt,"xlm"),nEt.forEach(t),TPo=r(mBe," \u2014 "),BV=n(mBe,"A",{href:!0});var sEt=s(BV);MPo=r(sEt,"XLMWithLMHeadModel"),sEt.forEach(t),EPo=r(mBe," (XLM model)"),mBe.forEach(t),CPo=i(O),F4=n(O,"LI",{});var gBe=s(F4);Vpe=n(gBe,"STRONG",{});var lEt=s(Vpe);wPo=r(lEt,"xlm-roberta"),lEt.forEach(t),APo=r(gBe," \u2014 "),IV=n(gBe,"A",{href:!0});var iEt=s(IV);LPo=r(iEt,"XLMRobertaForMaskedLM"),iEt.forEach(t),yPo=r(gBe," (XLM-RoBERTa model)"),gBe.forEach(t),xPo=i(O),T4=n(O,"LI",{});var hBe=s(T4);Xpe=n(hBe,"STRONG",{});var dEt=s(Xpe);$Po=r(dEt,"xlm-roberta-xl"),dEt.forEach(t),kPo=r(hBe," \u2014 "),NV=n(hBe,"A",{href:!0});var cEt=s(NV);SPo=r(cEt,"XLMRobertaXLForMaskedLM"),cEt.forEach(t),RPo=r(hBe," (XLM-RoBERTa-XL model)"),hBe.forEach(t),PPo=i(O),M4=n(O,"LI",{});var pBe=s(M4);zpe=n(pBe,"STRONG",{});var fEt=s(zpe);BPo=r(fEt,"xlnet"),fEt.forEach(t),IPo=r(pBe," \u2014 "),qV=n(pBe,"A",{href:!0});var mEt=s(qV);NPo=r(mEt,"XLNetLMHeadModel"),mEt.forEach(t),qPo=r(pBe," (XLNet model)"),pBe.forEach(t),O.forEach(t),jPo=i(ha),E4=n(ha,"P",{});var _Be=s(E4);DPo=r(_Be,"The model is set in evaluation mode by default using "),Wpe=n(_Be,"CODE",{});var gEt=s(Wpe);GPo=r(gEt,"model.eval()"),gEt.forEach(t),OPo=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=n(_Be,"CODE",{});var hEt=s(Qpe);VPo=r(hEt,"model.train()"),hEt.forEach(t),_Be.forEach(t),XPo=i(ha),T(C4.$$.fragment,ha),ha.forEach(t),pl.forEach(t),lUe=i(f),id=n(f,"H2",{class:!0});var uJe=s(id);w4=n(uJe,"A",{id:!0,class:!0,href:!0});var pEt=s(w4);Upe=n(pEt,"SPAN",{});var _Et=s(Upe);T(Jy.$$.fragment,_Et),_Et.forEach(t),pEt.forEach(t),zPo=i(uJe),Hpe=n(uJe,"SPAN",{});var uEt=s(Hpe);WPo=r(uEt,"AutoModelForCausalLM"),uEt.forEach(t),uJe.forEach(t),iUe=i(f),Po=n(f,"DIV",{class:!0});var _l=s(Po);T(Yy.$$.fragment,_l),QPo=i(_l),dd=n(_l,"P",{});var Wae=s(dd);UPo=r(Wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jV=n(Wae,"A",{href:!0});var bEt=s(jV);HPo=r(bEt,"from_pretrained()"),bEt.forEach(t),JPo=r(Wae," class method or the "),DV=n(Wae,"A",{href:!0});var vEt=s(DV);YPo=r(vEt,"from_config()"),vEt.forEach(t),KPo=r(Wae,` class
method.`),Wae.forEach(t),ZPo=i(_l),Ky=n(_l,"P",{});var bJe=s(Ky);eBo=r(bJe,"This class cannot be instantiated directly using "),Jpe=n(bJe,"CODE",{});var FEt=s(Jpe);oBo=r(FEt,"__init__()"),FEt.forEach(t),rBo=r(bJe," (throws an error)."),bJe.forEach(t),tBo=i(_l),ht=n(_l,"DIV",{class:!0});var u7=s(ht);T(Zy.$$.fragment,u7),aBo=i(u7),Ype=n(u7,"P",{});var TEt=s(Ype);nBo=r(TEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TEt.forEach(t),sBo=i(u7),cd=n(u7,"P",{});var Qae=s(cd);lBo=r(Qae,`Note:
Loading a model from its configuration file does `),Kpe=n(Qae,"STRONG",{});var MEt=s(Kpe);iBo=r(MEt,"not"),MEt.forEach(t),dBo=r(Qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(Qae,"A",{href:!0});var EEt=s(GV);cBo=r(EEt,"from_pretrained()"),EEt.forEach(t),fBo=r(Qae," to load the model weights."),Qae.forEach(t),mBo=i(u7),T(A4.$$.fragment,u7),u7.forEach(t),gBo=i(_l),Ze=n(_l,"DIV",{class:!0});var pa=s(Ze);T(e9.$$.fragment,pa),hBo=i(pa),Zpe=n(pa,"P",{});var CEt=s(Zpe);pBo=r(CEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),CEt.forEach(t),_Bo=i(pa),za=n(pa,"P",{});var b7=s(za);uBo=r(b7,"The model class to instantiate is selected based on the "),e_e=n(b7,"CODE",{});var wEt=s(e_e);bBo=r(wEt,"model_type"),wEt.forEach(t),vBo=r(b7,` property of the config object (either
passed as an argument or loaded from `),o_e=n(b7,"CODE",{});var AEt=s(o_e);FBo=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),TBo=r(b7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(b7,"CODE",{});var LEt=s(r_e);MBo=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),EBo=r(b7,":"),b7.forEach(t),CBo=i(pa),z=n(pa,"UL",{});var W=s(z);L4=n(W,"LI",{});var uBe=s(L4);t_e=n(uBe,"STRONG",{});var yEt=s(t_e);wBo=r(yEt,"bart"),yEt.forEach(t),ABo=r(uBe," \u2014 "),OV=n(uBe,"A",{href:!0});var xEt=s(OV);LBo=r(xEt,"BartForCausalLM"),xEt.forEach(t),yBo=r(uBe," (BART model)"),uBe.forEach(t),xBo=i(W),y4=n(W,"LI",{});var bBe=s(y4);a_e=n(bBe,"STRONG",{});var $Et=s(a_e);$Bo=r($Et,"bert"),$Et.forEach(t),kBo=r(bBe," \u2014 "),VV=n(bBe,"A",{href:!0});var kEt=s(VV);SBo=r(kEt,"BertLMHeadModel"),kEt.forEach(t),RBo=r(bBe," (BERT model)"),bBe.forEach(t),PBo=i(W),x4=n(W,"LI",{});var vBe=s(x4);n_e=n(vBe,"STRONG",{});var SEt=s(n_e);BBo=r(SEt,"bert-generation"),SEt.forEach(t),IBo=r(vBe," \u2014 "),XV=n(vBe,"A",{href:!0});var REt=s(XV);NBo=r(REt,"BertGenerationDecoder"),REt.forEach(t),qBo=r(vBe," (Bert Generation model)"),vBe.forEach(t),jBo=i(W),$4=n(W,"LI",{});var FBe=s($4);s_e=n(FBe,"STRONG",{});var PEt=s(s_e);DBo=r(PEt,"big_bird"),PEt.forEach(t),GBo=r(FBe," \u2014 "),zV=n(FBe,"A",{href:!0});var BEt=s(zV);OBo=r(BEt,"BigBirdForCausalLM"),BEt.forEach(t),VBo=r(FBe," (BigBird model)"),FBe.forEach(t),XBo=i(W),k4=n(W,"LI",{});var TBe=s(k4);l_e=n(TBe,"STRONG",{});var IEt=s(l_e);zBo=r(IEt,"bigbird_pegasus"),IEt.forEach(t),WBo=r(TBe," \u2014 "),WV=n(TBe,"A",{href:!0});var NEt=s(WV);QBo=r(NEt,"BigBirdPegasusForCausalLM"),NEt.forEach(t),UBo=r(TBe," (BigBird-Pegasus model)"),TBe.forEach(t),HBo=i(W),S4=n(W,"LI",{});var MBe=s(S4);i_e=n(MBe,"STRONG",{});var qEt=s(i_e);JBo=r(qEt,"blenderbot"),qEt.forEach(t),YBo=r(MBe," \u2014 "),QV=n(MBe,"A",{href:!0});var jEt=s(QV);KBo=r(jEt,"BlenderbotForCausalLM"),jEt.forEach(t),ZBo=r(MBe," (Blenderbot model)"),MBe.forEach(t),eIo=i(W),R4=n(W,"LI",{});var EBe=s(R4);d_e=n(EBe,"STRONG",{});var DEt=s(d_e);oIo=r(DEt,"blenderbot-small"),DEt.forEach(t),rIo=r(EBe," \u2014 "),UV=n(EBe,"A",{href:!0});var GEt=s(UV);tIo=r(GEt,"BlenderbotSmallForCausalLM"),GEt.forEach(t),aIo=r(EBe," (BlenderbotSmall model)"),EBe.forEach(t),nIo=i(W),P4=n(W,"LI",{});var CBe=s(P4);c_e=n(CBe,"STRONG",{});var OEt=s(c_e);sIo=r(OEt,"bloom"),OEt.forEach(t),lIo=r(CBe," \u2014 "),HV=n(CBe,"A",{href:!0});var VEt=s(HV);iIo=r(VEt,"BloomForCausalLM"),VEt.forEach(t),dIo=r(CBe," (BLOOM model)"),CBe.forEach(t),cIo=i(W),B4=n(W,"LI",{});var wBe=s(B4);f_e=n(wBe,"STRONG",{});var XEt=s(f_e);fIo=r(XEt,"camembert"),XEt.forEach(t),mIo=r(wBe," \u2014 "),JV=n(wBe,"A",{href:!0});var zEt=s(JV);gIo=r(zEt,"CamembertForCausalLM"),zEt.forEach(t),hIo=r(wBe," (CamemBERT model)"),wBe.forEach(t),pIo=i(W),I4=n(W,"LI",{});var ABe=s(I4);m_e=n(ABe,"STRONG",{});var WEt=s(m_e);_Io=r(WEt,"codegen"),WEt.forEach(t),uIo=r(ABe," \u2014 "),YV=n(ABe,"A",{href:!0});var QEt=s(YV);bIo=r(QEt,"CodeGenForCausalLM"),QEt.forEach(t),vIo=r(ABe," (CodeGen model)"),ABe.forEach(t),FIo=i(W),N4=n(W,"LI",{});var LBe=s(N4);g_e=n(LBe,"STRONG",{});var UEt=s(g_e);TIo=r(UEt,"ctrl"),UEt.forEach(t),MIo=r(LBe," \u2014 "),KV=n(LBe,"A",{href:!0});var HEt=s(KV);EIo=r(HEt,"CTRLLMHeadModel"),HEt.forEach(t),CIo=r(LBe," (CTRL model)"),LBe.forEach(t),wIo=i(W),q4=n(W,"LI",{});var yBe=s(q4);h_e=n(yBe,"STRONG",{});var JEt=s(h_e);AIo=r(JEt,"data2vec-text"),JEt.forEach(t),LIo=r(yBe," \u2014 "),ZV=n(yBe,"A",{href:!0});var YEt=s(ZV);yIo=r(YEt,"Data2VecTextForCausalLM"),YEt.forEach(t),xIo=r(yBe," (Data2VecText model)"),yBe.forEach(t),$Io=i(W),j4=n(W,"LI",{});var xBe=s(j4);p_e=n(xBe,"STRONG",{});var KEt=s(p_e);kIo=r(KEt,"electra"),KEt.forEach(t),SIo=r(xBe," \u2014 "),eX=n(xBe,"A",{href:!0});var ZEt=s(eX);RIo=r(ZEt,"ElectraForCausalLM"),ZEt.forEach(t),PIo=r(xBe," (ELECTRA model)"),xBe.forEach(t),BIo=i(W),D4=n(W,"LI",{});var $Be=s(D4);__e=n($Be,"STRONG",{});var eCt=s(__e);IIo=r(eCt,"gpt2"),eCt.forEach(t),NIo=r($Be," \u2014 "),oX=n($Be,"A",{href:!0});var oCt=s(oX);qIo=r(oCt,"GPT2LMHeadModel"),oCt.forEach(t),jIo=r($Be," (OpenAI GPT-2 model)"),$Be.forEach(t),DIo=i(W),G4=n(W,"LI",{});var kBe=s(G4);u_e=n(kBe,"STRONG",{});var rCt=s(u_e);GIo=r(rCt,"gpt_neo"),rCt.forEach(t),OIo=r(kBe," \u2014 "),rX=n(kBe,"A",{href:!0});var tCt=s(rX);VIo=r(tCt,"GPTNeoForCausalLM"),tCt.forEach(t),XIo=r(kBe," (GPT Neo model)"),kBe.forEach(t),zIo=i(W),O4=n(W,"LI",{});var SBe=s(O4);b_e=n(SBe,"STRONG",{});var aCt=s(b_e);WIo=r(aCt,"gpt_neox"),aCt.forEach(t),QIo=r(SBe," \u2014 "),tX=n(SBe,"A",{href:!0});var nCt=s(tX);UIo=r(nCt,"GPTNeoXForCausalLM"),nCt.forEach(t),HIo=r(SBe," (GPT NeoX model)"),SBe.forEach(t),JIo=i(W),V4=n(W,"LI",{});var RBe=s(V4);v_e=n(RBe,"STRONG",{});var sCt=s(v_e);YIo=r(sCt,"gptj"),sCt.forEach(t),KIo=r(RBe," \u2014 "),aX=n(RBe,"A",{href:!0});var lCt=s(aX);ZIo=r(lCt,"GPTJForCausalLM"),lCt.forEach(t),eNo=r(RBe," (GPT-J model)"),RBe.forEach(t),oNo=i(W),X4=n(W,"LI",{});var PBe=s(X4);F_e=n(PBe,"STRONG",{});var iCt=s(F_e);rNo=r(iCt,"marian"),iCt.forEach(t),tNo=r(PBe," \u2014 "),nX=n(PBe,"A",{href:!0});var dCt=s(nX);aNo=r(dCt,"MarianForCausalLM"),dCt.forEach(t),nNo=r(PBe," (Marian model)"),PBe.forEach(t),sNo=i(W),z4=n(W,"LI",{});var BBe=s(z4);T_e=n(BBe,"STRONG",{});var cCt=s(T_e);lNo=r(cCt,"mbart"),cCt.forEach(t),iNo=r(BBe," \u2014 "),sX=n(BBe,"A",{href:!0});var fCt=s(sX);dNo=r(fCt,"MBartForCausalLM"),fCt.forEach(t),cNo=r(BBe," (mBART model)"),BBe.forEach(t),fNo=i(W),W4=n(W,"LI",{});var IBe=s(W4);M_e=n(IBe,"STRONG",{});var mCt=s(M_e);mNo=r(mCt,"megatron-bert"),mCt.forEach(t),gNo=r(IBe," \u2014 "),lX=n(IBe,"A",{href:!0});var gCt=s(lX);hNo=r(gCt,"MegatronBertForCausalLM"),gCt.forEach(t),pNo=r(IBe," (Megatron-BERT model)"),IBe.forEach(t),_No=i(W),Q4=n(W,"LI",{});var NBe=s(Q4);E_e=n(NBe,"STRONG",{});var hCt=s(E_e);uNo=r(hCt,"mvp"),hCt.forEach(t),bNo=r(NBe," \u2014 "),iX=n(NBe,"A",{href:!0});var pCt=s(iX);vNo=r(pCt,"MvpForCausalLM"),pCt.forEach(t),FNo=r(NBe," (MVP model)"),NBe.forEach(t),TNo=i(W),U4=n(W,"LI",{});var qBe=s(U4);C_e=n(qBe,"STRONG",{});var _Ct=s(C_e);MNo=r(_Ct,"openai-gpt"),_Ct.forEach(t),ENo=r(qBe," \u2014 "),dX=n(qBe,"A",{href:!0});var uCt=s(dX);CNo=r(uCt,"OpenAIGPTLMHeadModel"),uCt.forEach(t),wNo=r(qBe," (OpenAI GPT model)"),qBe.forEach(t),ANo=i(W),H4=n(W,"LI",{});var jBe=s(H4);w_e=n(jBe,"STRONG",{});var bCt=s(w_e);LNo=r(bCt,"opt"),bCt.forEach(t),yNo=r(jBe," \u2014 "),cX=n(jBe,"A",{href:!0});var vCt=s(cX);xNo=r(vCt,"OPTForCausalLM"),vCt.forEach(t),$No=r(jBe," (OPT model)"),jBe.forEach(t),kNo=i(W),J4=n(W,"LI",{});var DBe=s(J4);A_e=n(DBe,"STRONG",{});var FCt=s(A_e);SNo=r(FCt,"pegasus"),FCt.forEach(t),RNo=r(DBe," \u2014 "),fX=n(DBe,"A",{href:!0});var TCt=s(fX);PNo=r(TCt,"PegasusForCausalLM"),TCt.forEach(t),BNo=r(DBe," (Pegasus model)"),DBe.forEach(t),INo=i(W),Y4=n(W,"LI",{});var GBe=s(Y4);L_e=n(GBe,"STRONG",{});var MCt=s(L_e);NNo=r(MCt,"plbart"),MCt.forEach(t),qNo=r(GBe," \u2014 "),mX=n(GBe,"A",{href:!0});var ECt=s(mX);jNo=r(ECt,"PLBartForCausalLM"),ECt.forEach(t),DNo=r(GBe," (PLBart model)"),GBe.forEach(t),GNo=i(W),K4=n(W,"LI",{});var OBe=s(K4);y_e=n(OBe,"STRONG",{});var CCt=s(y_e);ONo=r(CCt,"prophetnet"),CCt.forEach(t),VNo=r(OBe," \u2014 "),gX=n(OBe,"A",{href:!0});var wCt=s(gX);XNo=r(wCt,"ProphetNetForCausalLM"),wCt.forEach(t),zNo=r(OBe," (ProphetNet model)"),OBe.forEach(t),WNo=i(W),Z4=n(W,"LI",{});var VBe=s(Z4);x_e=n(VBe,"STRONG",{});var ACt=s(x_e);QNo=r(ACt,"qdqbert"),ACt.forEach(t),UNo=r(VBe," \u2014 "),hX=n(VBe,"A",{href:!0});var LCt=s(hX);HNo=r(LCt,"QDQBertLMHeadModel"),LCt.forEach(t),JNo=r(VBe," (QDQBert model)"),VBe.forEach(t),YNo=i(W),e2=n(W,"LI",{});var XBe=s(e2);$_e=n(XBe,"STRONG",{});var yCt=s($_e);KNo=r(yCt,"reformer"),yCt.forEach(t),ZNo=r(XBe," \u2014 "),pX=n(XBe,"A",{href:!0});var xCt=s(pX);eqo=r(xCt,"ReformerModelWithLMHead"),xCt.forEach(t),oqo=r(XBe," (Reformer model)"),XBe.forEach(t),rqo=i(W),o2=n(W,"LI",{});var zBe=s(o2);k_e=n(zBe,"STRONG",{});var $Ct=s(k_e);tqo=r($Ct,"rembert"),$Ct.forEach(t),aqo=r(zBe," \u2014 "),_X=n(zBe,"A",{href:!0});var kCt=s(_X);nqo=r(kCt,"RemBertForCausalLM"),kCt.forEach(t),sqo=r(zBe," (RemBERT model)"),zBe.forEach(t),lqo=i(W),r2=n(W,"LI",{});var WBe=s(r2);S_e=n(WBe,"STRONG",{});var SCt=s(S_e);iqo=r(SCt,"roberta"),SCt.forEach(t),dqo=r(WBe," \u2014 "),uX=n(WBe,"A",{href:!0});var RCt=s(uX);cqo=r(RCt,"RobertaForCausalLM"),RCt.forEach(t),fqo=r(WBe," (RoBERTa model)"),WBe.forEach(t),mqo=i(W),t2=n(W,"LI",{});var QBe=s(t2);R_e=n(QBe,"STRONG",{});var PCt=s(R_e);gqo=r(PCt,"roformer"),PCt.forEach(t),hqo=r(QBe," \u2014 "),bX=n(QBe,"A",{href:!0});var BCt=s(bX);pqo=r(BCt,"RoFormerForCausalLM"),BCt.forEach(t),_qo=r(QBe," (RoFormer model)"),QBe.forEach(t),uqo=i(W),a2=n(W,"LI",{});var UBe=s(a2);P_e=n(UBe,"STRONG",{});var ICt=s(P_e);bqo=r(ICt,"speech_to_text_2"),ICt.forEach(t),vqo=r(UBe," \u2014 "),vX=n(UBe,"A",{href:!0});var NCt=s(vX);Fqo=r(NCt,"Speech2Text2ForCausalLM"),NCt.forEach(t),Tqo=r(UBe," (Speech2Text2 model)"),UBe.forEach(t),Mqo=i(W),n2=n(W,"LI",{});var HBe=s(n2);B_e=n(HBe,"STRONG",{});var qCt=s(B_e);Eqo=r(qCt,"transfo-xl"),qCt.forEach(t),Cqo=r(HBe," \u2014 "),FX=n(HBe,"A",{href:!0});var jCt=s(FX);wqo=r(jCt,"TransfoXLLMHeadModel"),jCt.forEach(t),Aqo=r(HBe," (Transformer-XL model)"),HBe.forEach(t),Lqo=i(W),s2=n(W,"LI",{});var JBe=s(s2);I_e=n(JBe,"STRONG",{});var DCt=s(I_e);yqo=r(DCt,"trocr"),DCt.forEach(t),xqo=r(JBe," \u2014 "),TX=n(JBe,"A",{href:!0});var GCt=s(TX);$qo=r(GCt,"TrOCRForCausalLM"),GCt.forEach(t),kqo=r(JBe," (TrOCR model)"),JBe.forEach(t),Sqo=i(W),l2=n(W,"LI",{});var YBe=s(l2);N_e=n(YBe,"STRONG",{});var OCt=s(N_e);Rqo=r(OCt,"xglm"),OCt.forEach(t),Pqo=r(YBe," \u2014 "),MX=n(YBe,"A",{href:!0});var VCt=s(MX);Bqo=r(VCt,"XGLMForCausalLM"),VCt.forEach(t),Iqo=r(YBe," (XGLM model)"),YBe.forEach(t),Nqo=i(W),i2=n(W,"LI",{});var KBe=s(i2);q_e=n(KBe,"STRONG",{});var XCt=s(q_e);qqo=r(XCt,"xlm"),XCt.forEach(t),jqo=r(KBe," \u2014 "),EX=n(KBe,"A",{href:!0});var zCt=s(EX);Dqo=r(zCt,"XLMWithLMHeadModel"),zCt.forEach(t),Gqo=r(KBe," (XLM model)"),KBe.forEach(t),Oqo=i(W),d2=n(W,"LI",{});var ZBe=s(d2);j_e=n(ZBe,"STRONG",{});var WCt=s(j_e);Vqo=r(WCt,"xlm-prophetnet"),WCt.forEach(t),Xqo=r(ZBe," \u2014 "),CX=n(ZBe,"A",{href:!0});var QCt=s(CX);zqo=r(QCt,"XLMProphetNetForCausalLM"),QCt.forEach(t),Wqo=r(ZBe," (XLM-ProphetNet model)"),ZBe.forEach(t),Qqo=i(W),c2=n(W,"LI",{});var eIe=s(c2);D_e=n(eIe,"STRONG",{});var UCt=s(D_e);Uqo=r(UCt,"xlm-roberta"),UCt.forEach(t),Hqo=r(eIe," \u2014 "),wX=n(eIe,"A",{href:!0});var HCt=s(wX);Jqo=r(HCt,"XLMRobertaForCausalLM"),HCt.forEach(t),Yqo=r(eIe," (XLM-RoBERTa model)"),eIe.forEach(t),Kqo=i(W),f2=n(W,"LI",{});var oIe=s(f2);G_e=n(oIe,"STRONG",{});var JCt=s(G_e);Zqo=r(JCt,"xlm-roberta-xl"),JCt.forEach(t),ejo=r(oIe," \u2014 "),AX=n(oIe,"A",{href:!0});var YCt=s(AX);ojo=r(YCt,"XLMRobertaXLForCausalLM"),YCt.forEach(t),rjo=r(oIe," (XLM-RoBERTa-XL model)"),oIe.forEach(t),tjo=i(W),m2=n(W,"LI",{});var rIe=s(m2);O_e=n(rIe,"STRONG",{});var KCt=s(O_e);ajo=r(KCt,"xlnet"),KCt.forEach(t),njo=r(rIe," \u2014 "),LX=n(rIe,"A",{href:!0});var ZCt=s(LX);sjo=r(ZCt,"XLNetLMHeadModel"),ZCt.forEach(t),ljo=r(rIe," (XLNet model)"),rIe.forEach(t),W.forEach(t),ijo=i(pa),g2=n(pa,"P",{});var tIe=s(g2);djo=r(tIe,"The model is set in evaluation mode by default using "),V_e=n(tIe,"CODE",{});var e3t=s(V_e);cjo=r(e3t,"model.eval()"),e3t.forEach(t),fjo=r(tIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=n(tIe,"CODE",{});var o3t=s(X_e);mjo=r(o3t,"model.train()"),o3t.forEach(t),tIe.forEach(t),gjo=i(pa),T(h2.$$.fragment,pa),pa.forEach(t),_l.forEach(t),dUe=i(f),fd=n(f,"H2",{class:!0});var vJe=s(fd);p2=n(vJe,"A",{id:!0,class:!0,href:!0});var r3t=s(p2);z_e=n(r3t,"SPAN",{});var t3t=s(z_e);T(o9.$$.fragment,t3t),t3t.forEach(t),r3t.forEach(t),hjo=i(vJe),W_e=n(vJe,"SPAN",{});var a3t=s(W_e);pjo=r(a3t,"AutoModelForMaskedLM"),a3t.forEach(t),vJe.forEach(t),cUe=i(f),Bo=n(f,"DIV",{class:!0});var ul=s(Bo);T(r9.$$.fragment,ul),_jo=i(ul),md=n(ul,"P",{});var Uae=s(md);ujo=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yX=n(Uae,"A",{href:!0});var n3t=s(yX);bjo=r(n3t,"from_pretrained()"),n3t.forEach(t),vjo=r(Uae," class method or the "),xX=n(Uae,"A",{href:!0});var s3t=s(xX);Fjo=r(s3t,"from_config()"),s3t.forEach(t),Tjo=r(Uae,` class
method.`),Uae.forEach(t),Mjo=i(ul),t9=n(ul,"P",{});var FJe=s(t9);Ejo=r(FJe,"This class cannot be instantiated directly using "),Q_e=n(FJe,"CODE",{});var l3t=s(Q_e);Cjo=r(l3t,"__init__()"),l3t.forEach(t),wjo=r(FJe," (throws an error)."),FJe.forEach(t),Ajo=i(ul),pt=n(ul,"DIV",{class:!0});var v7=s(pt);T(a9.$$.fragment,v7),Ljo=i(v7),U_e=n(v7,"P",{});var i3t=s(U_e);yjo=r(i3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),i3t.forEach(t),xjo=i(v7),gd=n(v7,"P",{});var Hae=s(gd);$jo=r(Hae,`Note:
Loading a model from its configuration file does `),H_e=n(Hae,"STRONG",{});var d3t=s(H_e);kjo=r(d3t,"not"),d3t.forEach(t),Sjo=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(Hae,"A",{href:!0});var c3t=s($X);Rjo=r(c3t,"from_pretrained()"),c3t.forEach(t),Pjo=r(Hae," to load the model weights."),Hae.forEach(t),Bjo=i(v7),T(_2.$$.fragment,v7),v7.forEach(t),Ijo=i(ul),eo=n(ul,"DIV",{class:!0});var _a=s(eo);T(n9.$$.fragment,_a),Njo=i(_a),J_e=n(_a,"P",{});var f3t=s(J_e);qjo=r(f3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),f3t.forEach(t),jjo=i(_a),Wa=n(_a,"P",{});var F7=s(Wa);Djo=r(F7,"The model class to instantiate is selected based on the "),Y_e=n(F7,"CODE",{});var m3t=s(Y_e);Gjo=r(m3t,"model_type"),m3t.forEach(t),Ojo=r(F7,` property of the config object (either
passed as an argument or loaded from `),K_e=n(F7,"CODE",{});var g3t=s(K_e);Vjo=r(g3t,"pretrained_model_name_or_path"),g3t.forEach(t),Xjo=r(F7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(F7,"CODE",{});var h3t=s(Z_e);zjo=r(h3t,"pretrained_model_name_or_path"),h3t.forEach(t),Wjo=r(F7,":"),F7.forEach(t),Qjo=i(_a),U=n(_a,"UL",{});var Y=s(U);u2=n(Y,"LI",{});var aIe=s(u2);eue=n(aIe,"STRONG",{});var p3t=s(eue);Ujo=r(p3t,"albert"),p3t.forEach(t),Hjo=r(aIe," \u2014 "),kX=n(aIe,"A",{href:!0});var _3t=s(kX);Jjo=r(_3t,"AlbertForMaskedLM"),_3t.forEach(t),Yjo=r(aIe," (ALBERT model)"),aIe.forEach(t),Kjo=i(Y),b2=n(Y,"LI",{});var nIe=s(b2);oue=n(nIe,"STRONG",{});var u3t=s(oue);Zjo=r(u3t,"bart"),u3t.forEach(t),eDo=r(nIe," \u2014 "),SX=n(nIe,"A",{href:!0});var b3t=s(SX);oDo=r(b3t,"BartForConditionalGeneration"),b3t.forEach(t),rDo=r(nIe," (BART model)"),nIe.forEach(t),tDo=i(Y),v2=n(Y,"LI",{});var sIe=s(v2);rue=n(sIe,"STRONG",{});var v3t=s(rue);aDo=r(v3t,"bert"),v3t.forEach(t),nDo=r(sIe," \u2014 "),RX=n(sIe,"A",{href:!0});var F3t=s(RX);sDo=r(F3t,"BertForMaskedLM"),F3t.forEach(t),lDo=r(sIe," (BERT model)"),sIe.forEach(t),iDo=i(Y),F2=n(Y,"LI",{});var lIe=s(F2);tue=n(lIe,"STRONG",{});var T3t=s(tue);dDo=r(T3t,"big_bird"),T3t.forEach(t),cDo=r(lIe," \u2014 "),PX=n(lIe,"A",{href:!0});var M3t=s(PX);fDo=r(M3t,"BigBirdForMaskedLM"),M3t.forEach(t),mDo=r(lIe," (BigBird model)"),lIe.forEach(t),gDo=i(Y),T2=n(Y,"LI",{});var iIe=s(T2);aue=n(iIe,"STRONG",{});var E3t=s(aue);hDo=r(E3t,"camembert"),E3t.forEach(t),pDo=r(iIe," \u2014 "),BX=n(iIe,"A",{href:!0});var C3t=s(BX);_Do=r(C3t,"CamembertForMaskedLM"),C3t.forEach(t),uDo=r(iIe," (CamemBERT model)"),iIe.forEach(t),bDo=i(Y),M2=n(Y,"LI",{});var dIe=s(M2);nue=n(dIe,"STRONG",{});var w3t=s(nue);vDo=r(w3t,"convbert"),w3t.forEach(t),FDo=r(dIe," \u2014 "),IX=n(dIe,"A",{href:!0});var A3t=s(IX);TDo=r(A3t,"ConvBertForMaskedLM"),A3t.forEach(t),MDo=r(dIe," (ConvBERT model)"),dIe.forEach(t),EDo=i(Y),E2=n(Y,"LI",{});var cIe=s(E2);sue=n(cIe,"STRONG",{});var L3t=s(sue);CDo=r(L3t,"data2vec-text"),L3t.forEach(t),wDo=r(cIe," \u2014 "),NX=n(cIe,"A",{href:!0});var y3t=s(NX);ADo=r(y3t,"Data2VecTextForMaskedLM"),y3t.forEach(t),LDo=r(cIe," (Data2VecText model)"),cIe.forEach(t),yDo=i(Y),C2=n(Y,"LI",{});var fIe=s(C2);lue=n(fIe,"STRONG",{});var x3t=s(lue);xDo=r(x3t,"deberta"),x3t.forEach(t),$Do=r(fIe," \u2014 "),qX=n(fIe,"A",{href:!0});var $3t=s(qX);kDo=r($3t,"DebertaForMaskedLM"),$3t.forEach(t),SDo=r(fIe," (DeBERTa model)"),fIe.forEach(t),RDo=i(Y),w2=n(Y,"LI",{});var mIe=s(w2);iue=n(mIe,"STRONG",{});var k3t=s(iue);PDo=r(k3t,"deberta-v2"),k3t.forEach(t),BDo=r(mIe," \u2014 "),jX=n(mIe,"A",{href:!0});var S3t=s(jX);IDo=r(S3t,"DebertaV2ForMaskedLM"),S3t.forEach(t),NDo=r(mIe," (DeBERTa-v2 model)"),mIe.forEach(t),qDo=i(Y),A2=n(Y,"LI",{});var gIe=s(A2);due=n(gIe,"STRONG",{});var R3t=s(due);jDo=r(R3t,"distilbert"),R3t.forEach(t),DDo=r(gIe," \u2014 "),DX=n(gIe,"A",{href:!0});var P3t=s(DX);GDo=r(P3t,"DistilBertForMaskedLM"),P3t.forEach(t),ODo=r(gIe," (DistilBERT model)"),gIe.forEach(t),VDo=i(Y),L2=n(Y,"LI",{});var hIe=s(L2);cue=n(hIe,"STRONG",{});var B3t=s(cue);XDo=r(B3t,"electra"),B3t.forEach(t),zDo=r(hIe," \u2014 "),GX=n(hIe,"A",{href:!0});var I3t=s(GX);WDo=r(I3t,"ElectraForMaskedLM"),I3t.forEach(t),QDo=r(hIe," (ELECTRA model)"),hIe.forEach(t),UDo=i(Y),y2=n(Y,"LI",{});var pIe=s(y2);fue=n(pIe,"STRONG",{});var N3t=s(fue);HDo=r(N3t,"flaubert"),N3t.forEach(t),JDo=r(pIe," \u2014 "),OX=n(pIe,"A",{href:!0});var q3t=s(OX);YDo=r(q3t,"FlaubertWithLMHeadModel"),q3t.forEach(t),KDo=r(pIe," (FlauBERT model)"),pIe.forEach(t),ZDo=i(Y),x2=n(Y,"LI",{});var _Ie=s(x2);mue=n(_Ie,"STRONG",{});var j3t=s(mue);eGo=r(j3t,"fnet"),j3t.forEach(t),oGo=r(_Ie," \u2014 "),VX=n(_Ie,"A",{href:!0});var D3t=s(VX);rGo=r(D3t,"FNetForMaskedLM"),D3t.forEach(t),tGo=r(_Ie," (FNet model)"),_Ie.forEach(t),aGo=i(Y),$2=n(Y,"LI",{});var uIe=s($2);gue=n(uIe,"STRONG",{});var G3t=s(gue);nGo=r(G3t,"funnel"),G3t.forEach(t),sGo=r(uIe," \u2014 "),XX=n(uIe,"A",{href:!0});var O3t=s(XX);lGo=r(O3t,"FunnelForMaskedLM"),O3t.forEach(t),iGo=r(uIe," (Funnel Transformer model)"),uIe.forEach(t),dGo=i(Y),k2=n(Y,"LI",{});var bIe=s(k2);hue=n(bIe,"STRONG",{});var V3t=s(hue);cGo=r(V3t,"ibert"),V3t.forEach(t),fGo=r(bIe," \u2014 "),zX=n(bIe,"A",{href:!0});var X3t=s(zX);mGo=r(X3t,"IBertForMaskedLM"),X3t.forEach(t),gGo=r(bIe," (I-BERT model)"),bIe.forEach(t),hGo=i(Y),S2=n(Y,"LI",{});var vIe=s(S2);pue=n(vIe,"STRONG",{});var z3t=s(pue);pGo=r(z3t,"layoutlm"),z3t.forEach(t),_Go=r(vIe," \u2014 "),WX=n(vIe,"A",{href:!0});var W3t=s(WX);uGo=r(W3t,"LayoutLMForMaskedLM"),W3t.forEach(t),bGo=r(vIe," (LayoutLM model)"),vIe.forEach(t),vGo=i(Y),R2=n(Y,"LI",{});var FIe=s(R2);_ue=n(FIe,"STRONG",{});var Q3t=s(_ue);FGo=r(Q3t,"longformer"),Q3t.forEach(t),TGo=r(FIe," \u2014 "),QX=n(FIe,"A",{href:!0});var U3t=s(QX);MGo=r(U3t,"LongformerForMaskedLM"),U3t.forEach(t),EGo=r(FIe," (Longformer model)"),FIe.forEach(t),CGo=i(Y),P2=n(Y,"LI",{});var TIe=s(P2);uue=n(TIe,"STRONG",{});var H3t=s(uue);wGo=r(H3t,"luke"),H3t.forEach(t),AGo=r(TIe," \u2014 "),UX=n(TIe,"A",{href:!0});var J3t=s(UX);LGo=r(J3t,"LukeForMaskedLM"),J3t.forEach(t),yGo=r(TIe," (LUKE model)"),TIe.forEach(t),xGo=i(Y),B2=n(Y,"LI",{});var MIe=s(B2);bue=n(MIe,"STRONG",{});var Y3t=s(bue);$Go=r(Y3t,"mbart"),Y3t.forEach(t),kGo=r(MIe," \u2014 "),HX=n(MIe,"A",{href:!0});var K3t=s(HX);SGo=r(K3t,"MBartForConditionalGeneration"),K3t.forEach(t),RGo=r(MIe," (mBART model)"),MIe.forEach(t),PGo=i(Y),I2=n(Y,"LI",{});var EIe=s(I2);vue=n(EIe,"STRONG",{});var Z3t=s(vue);BGo=r(Z3t,"megatron-bert"),Z3t.forEach(t),IGo=r(EIe," \u2014 "),JX=n(EIe,"A",{href:!0});var ewt=s(JX);NGo=r(ewt,"MegatronBertForMaskedLM"),ewt.forEach(t),qGo=r(EIe," (Megatron-BERT model)"),EIe.forEach(t),jGo=i(Y),N2=n(Y,"LI",{});var CIe=s(N2);Fue=n(CIe,"STRONG",{});var owt=s(Fue);DGo=r(owt,"mobilebert"),owt.forEach(t),GGo=r(CIe," \u2014 "),YX=n(CIe,"A",{href:!0});var rwt=s(YX);OGo=r(rwt,"MobileBertForMaskedLM"),rwt.forEach(t),VGo=r(CIe," (MobileBERT model)"),CIe.forEach(t),XGo=i(Y),q2=n(Y,"LI",{});var wIe=s(q2);Tue=n(wIe,"STRONG",{});var twt=s(Tue);zGo=r(twt,"mpnet"),twt.forEach(t),WGo=r(wIe," \u2014 "),KX=n(wIe,"A",{href:!0});var awt=s(KX);QGo=r(awt,"MPNetForMaskedLM"),awt.forEach(t),UGo=r(wIe," (MPNet model)"),wIe.forEach(t),HGo=i(Y),j2=n(Y,"LI",{});var AIe=s(j2);Mue=n(AIe,"STRONG",{});var nwt=s(Mue);JGo=r(nwt,"mvp"),nwt.forEach(t),YGo=r(AIe," \u2014 "),ZX=n(AIe,"A",{href:!0});var swt=s(ZX);KGo=r(swt,"MvpForConditionalGeneration"),swt.forEach(t),ZGo=r(AIe," (MVP model)"),AIe.forEach(t),eOo=i(Y),D2=n(Y,"LI",{});var LIe=s(D2);Eue=n(LIe,"STRONG",{});var lwt=s(Eue);oOo=r(lwt,"nezha"),lwt.forEach(t),rOo=r(LIe," \u2014 "),ez=n(LIe,"A",{href:!0});var iwt=s(ez);tOo=r(iwt,"NezhaForMaskedLM"),iwt.forEach(t),aOo=r(LIe," (Nezha model)"),LIe.forEach(t),nOo=i(Y),G2=n(Y,"LI",{});var yIe=s(G2);Cue=n(yIe,"STRONG",{});var dwt=s(Cue);sOo=r(dwt,"nystromformer"),dwt.forEach(t),lOo=r(yIe," \u2014 "),oz=n(yIe,"A",{href:!0});var cwt=s(oz);iOo=r(cwt,"NystromformerForMaskedLM"),cwt.forEach(t),dOo=r(yIe," (Nystr\xF6mformer model)"),yIe.forEach(t),cOo=i(Y),O2=n(Y,"LI",{});var xIe=s(O2);wue=n(xIe,"STRONG",{});var fwt=s(wue);fOo=r(fwt,"perceiver"),fwt.forEach(t),mOo=r(xIe," \u2014 "),rz=n(xIe,"A",{href:!0});var mwt=s(rz);gOo=r(mwt,"PerceiverForMaskedLM"),mwt.forEach(t),hOo=r(xIe," (Perceiver model)"),xIe.forEach(t),pOo=i(Y),V2=n(Y,"LI",{});var $Ie=s(V2);Aue=n($Ie,"STRONG",{});var gwt=s(Aue);_Oo=r(gwt,"qdqbert"),gwt.forEach(t),uOo=r($Ie," \u2014 "),tz=n($Ie,"A",{href:!0});var hwt=s(tz);bOo=r(hwt,"QDQBertForMaskedLM"),hwt.forEach(t),vOo=r($Ie," (QDQBert model)"),$Ie.forEach(t),FOo=i(Y),X2=n(Y,"LI",{});var kIe=s(X2);Lue=n(kIe,"STRONG",{});var pwt=s(Lue);TOo=r(pwt,"reformer"),pwt.forEach(t),MOo=r(kIe," \u2014 "),az=n(kIe,"A",{href:!0});var _wt=s(az);EOo=r(_wt,"ReformerForMaskedLM"),_wt.forEach(t),COo=r(kIe," (Reformer model)"),kIe.forEach(t),wOo=i(Y),z2=n(Y,"LI",{});var SIe=s(z2);yue=n(SIe,"STRONG",{});var uwt=s(yue);AOo=r(uwt,"rembert"),uwt.forEach(t),LOo=r(SIe," \u2014 "),nz=n(SIe,"A",{href:!0});var bwt=s(nz);yOo=r(bwt,"RemBertForMaskedLM"),bwt.forEach(t),xOo=r(SIe," (RemBERT model)"),SIe.forEach(t),$Oo=i(Y),W2=n(Y,"LI",{});var RIe=s(W2);xue=n(RIe,"STRONG",{});var vwt=s(xue);kOo=r(vwt,"roberta"),vwt.forEach(t),SOo=r(RIe," \u2014 "),sz=n(RIe,"A",{href:!0});var Fwt=s(sz);ROo=r(Fwt,"RobertaForMaskedLM"),Fwt.forEach(t),POo=r(RIe," (RoBERTa model)"),RIe.forEach(t),BOo=i(Y),Q2=n(Y,"LI",{});var PIe=s(Q2);$ue=n(PIe,"STRONG",{});var Twt=s($ue);IOo=r(Twt,"roformer"),Twt.forEach(t),NOo=r(PIe," \u2014 "),lz=n(PIe,"A",{href:!0});var Mwt=s(lz);qOo=r(Mwt,"RoFormerForMaskedLM"),Mwt.forEach(t),jOo=r(PIe," (RoFormer model)"),PIe.forEach(t),DOo=i(Y),U2=n(Y,"LI",{});var BIe=s(U2);kue=n(BIe,"STRONG",{});var Ewt=s(kue);GOo=r(Ewt,"squeezebert"),Ewt.forEach(t),OOo=r(BIe," \u2014 "),iz=n(BIe,"A",{href:!0});var Cwt=s(iz);VOo=r(Cwt,"SqueezeBertForMaskedLM"),Cwt.forEach(t),XOo=r(BIe," (SqueezeBERT model)"),BIe.forEach(t),zOo=i(Y),H2=n(Y,"LI",{});var IIe=s(H2);Sue=n(IIe,"STRONG",{});var wwt=s(Sue);WOo=r(wwt,"tapas"),wwt.forEach(t),QOo=r(IIe," \u2014 "),dz=n(IIe,"A",{href:!0});var Awt=s(dz);UOo=r(Awt,"TapasForMaskedLM"),Awt.forEach(t),HOo=r(IIe," (TAPAS model)"),IIe.forEach(t),JOo=i(Y),J2=n(Y,"LI",{});var NIe=s(J2);Rue=n(NIe,"STRONG",{});var Lwt=s(Rue);YOo=r(Lwt,"wav2vec2"),Lwt.forEach(t),KOo=r(NIe," \u2014 "),Pue=n(NIe,"CODE",{});var ywt=s(Pue);ZOo=r(ywt,"Wav2Vec2ForMaskedLM"),ywt.forEach(t),eVo=r(NIe," (Wav2Vec2 model)"),NIe.forEach(t),oVo=i(Y),Y2=n(Y,"LI",{});var qIe=s(Y2);Bue=n(qIe,"STRONG",{});var xwt=s(Bue);rVo=r(xwt,"xlm"),xwt.forEach(t),tVo=r(qIe," \u2014 "),cz=n(qIe,"A",{href:!0});var $wt=s(cz);aVo=r($wt,"XLMWithLMHeadModel"),$wt.forEach(t),nVo=r(qIe," (XLM model)"),qIe.forEach(t),sVo=i(Y),K2=n(Y,"LI",{});var jIe=s(K2);Iue=n(jIe,"STRONG",{});var kwt=s(Iue);lVo=r(kwt,"xlm-roberta"),kwt.forEach(t),iVo=r(jIe," \u2014 "),fz=n(jIe,"A",{href:!0});var Swt=s(fz);dVo=r(Swt,"XLMRobertaForMaskedLM"),Swt.forEach(t),cVo=r(jIe," (XLM-RoBERTa model)"),jIe.forEach(t),fVo=i(Y),Z2=n(Y,"LI",{});var DIe=s(Z2);Nue=n(DIe,"STRONG",{});var Rwt=s(Nue);mVo=r(Rwt,"xlm-roberta-xl"),Rwt.forEach(t),gVo=r(DIe," \u2014 "),mz=n(DIe,"A",{href:!0});var Pwt=s(mz);hVo=r(Pwt,"XLMRobertaXLForMaskedLM"),Pwt.forEach(t),pVo=r(DIe," (XLM-RoBERTa-XL model)"),DIe.forEach(t),_Vo=i(Y),eb=n(Y,"LI",{});var GIe=s(eb);que=n(GIe,"STRONG",{});var Bwt=s(que);uVo=r(Bwt,"yoso"),Bwt.forEach(t),bVo=r(GIe," \u2014 "),gz=n(GIe,"A",{href:!0});var Iwt=s(gz);vVo=r(Iwt,"YosoForMaskedLM"),Iwt.forEach(t),FVo=r(GIe," (YOSO model)"),GIe.forEach(t),Y.forEach(t),TVo=i(_a),ob=n(_a,"P",{});var OIe=s(ob);MVo=r(OIe,"The model is set in evaluation mode by default using "),jue=n(OIe,"CODE",{});var Nwt=s(jue);EVo=r(Nwt,"model.eval()"),Nwt.forEach(t),CVo=r(OIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=n(OIe,"CODE",{});var qwt=s(Due);wVo=r(qwt,"model.train()"),qwt.forEach(t),OIe.forEach(t),AVo=i(_a),T(rb.$$.fragment,_a),_a.forEach(t),ul.forEach(t),fUe=i(f),hd=n(f,"H2",{class:!0});var TJe=s(hd);tb=n(TJe,"A",{id:!0,class:!0,href:!0});var jwt=s(tb);Gue=n(jwt,"SPAN",{});var Dwt=s(Gue);T(s9.$$.fragment,Dwt),Dwt.forEach(t),jwt.forEach(t),LVo=i(TJe),Oue=n(TJe,"SPAN",{});var Gwt=s(Oue);yVo=r(Gwt,"AutoModelForSeq2SeqLM"),Gwt.forEach(t),TJe.forEach(t),mUe=i(f),Io=n(f,"DIV",{class:!0});var bl=s(Io);T(l9.$$.fragment,bl),xVo=i(bl),pd=n(bl,"P",{});var Jae=s(pd);$Vo=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hz=n(Jae,"A",{href:!0});var Owt=s(hz);kVo=r(Owt,"from_pretrained()"),Owt.forEach(t),SVo=r(Jae," class method or the "),pz=n(Jae,"A",{href:!0});var Vwt=s(pz);RVo=r(Vwt,"from_config()"),Vwt.forEach(t),PVo=r(Jae,` class
method.`),Jae.forEach(t),BVo=i(bl),i9=n(bl,"P",{});var MJe=s(i9);IVo=r(MJe,"This class cannot be instantiated directly using "),Vue=n(MJe,"CODE",{});var Xwt=s(Vue);NVo=r(Xwt,"__init__()"),Xwt.forEach(t),qVo=r(MJe," (throws an error)."),MJe.forEach(t),jVo=i(bl),_t=n(bl,"DIV",{class:!0});var T7=s(_t);T(d9.$$.fragment,T7),DVo=i(T7),Xue=n(T7,"P",{});var zwt=s(Xue);GVo=r(zwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zwt.forEach(t),OVo=i(T7),_d=n(T7,"P",{});var Yae=s(_d);VVo=r(Yae,`Note:
Loading a model from its configuration file does `),zue=n(Yae,"STRONG",{});var Wwt=s(zue);XVo=r(Wwt,"not"),Wwt.forEach(t),zVo=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(Yae,"A",{href:!0});var Qwt=s(_z);WVo=r(Qwt,"from_pretrained()"),Qwt.forEach(t),QVo=r(Yae," to load the model weights."),Yae.forEach(t),UVo=i(T7),T(ab.$$.fragment,T7),T7.forEach(t),HVo=i(bl),oo=n(bl,"DIV",{class:!0});var ua=s(oo);T(c9.$$.fragment,ua),JVo=i(ua),Wue=n(ua,"P",{});var Uwt=s(Wue);YVo=r(Uwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Uwt.forEach(t),KVo=i(ua),Qa=n(ua,"P",{});var M7=s(Qa);ZVo=r(M7,"The model class to instantiate is selected based on the "),Que=n(M7,"CODE",{});var Hwt=s(Que);eXo=r(Hwt,"model_type"),Hwt.forEach(t),oXo=r(M7,` property of the config object (either
passed as an argument or loaded from `),Uue=n(M7,"CODE",{});var Jwt=s(Uue);rXo=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),tXo=r(M7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(M7,"CODE",{});var Ywt=s(Hue);aXo=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),nXo=r(M7,":"),M7.forEach(t),sXo=i(ua),me=n(ua,"UL",{});var ue=s(me);nb=n(ue,"LI",{});var VIe=s(nb);Jue=n(VIe,"STRONG",{});var Kwt=s(Jue);lXo=r(Kwt,"bart"),Kwt.forEach(t),iXo=r(VIe," \u2014 "),uz=n(VIe,"A",{href:!0});var Zwt=s(uz);dXo=r(Zwt,"BartForConditionalGeneration"),Zwt.forEach(t),cXo=r(VIe," (BART model)"),VIe.forEach(t),fXo=i(ue),sb=n(ue,"LI",{});var XIe=s(sb);Yue=n(XIe,"STRONG",{});var e6t=s(Yue);mXo=r(e6t,"bigbird_pegasus"),e6t.forEach(t),gXo=r(XIe," \u2014 "),bz=n(XIe,"A",{href:!0});var o6t=s(bz);hXo=r(o6t,"BigBirdPegasusForConditionalGeneration"),o6t.forEach(t),pXo=r(XIe," (BigBird-Pegasus model)"),XIe.forEach(t),_Xo=i(ue),lb=n(ue,"LI",{});var zIe=s(lb);Kue=n(zIe,"STRONG",{});var r6t=s(Kue);uXo=r(r6t,"blenderbot"),r6t.forEach(t),bXo=r(zIe," \u2014 "),vz=n(zIe,"A",{href:!0});var t6t=s(vz);vXo=r(t6t,"BlenderbotForConditionalGeneration"),t6t.forEach(t),FXo=r(zIe," (Blenderbot model)"),zIe.forEach(t),TXo=i(ue),ib=n(ue,"LI",{});var WIe=s(ib);Zue=n(WIe,"STRONG",{});var a6t=s(Zue);MXo=r(a6t,"blenderbot-small"),a6t.forEach(t),EXo=r(WIe," \u2014 "),Fz=n(WIe,"A",{href:!0});var n6t=s(Fz);CXo=r(n6t,"BlenderbotSmallForConditionalGeneration"),n6t.forEach(t),wXo=r(WIe," (BlenderbotSmall model)"),WIe.forEach(t),AXo=i(ue),db=n(ue,"LI",{});var QIe=s(db);e1e=n(QIe,"STRONG",{});var s6t=s(e1e);LXo=r(s6t,"encoder-decoder"),s6t.forEach(t),yXo=r(QIe," \u2014 "),Tz=n(QIe,"A",{href:!0});var l6t=s(Tz);xXo=r(l6t,"EncoderDecoderModel"),l6t.forEach(t),$Xo=r(QIe," (Encoder decoder model)"),QIe.forEach(t),kXo=i(ue),cb=n(ue,"LI",{});var UIe=s(cb);o1e=n(UIe,"STRONG",{});var i6t=s(o1e);SXo=r(i6t,"fsmt"),i6t.forEach(t),RXo=r(UIe," \u2014 "),Mz=n(UIe,"A",{href:!0});var d6t=s(Mz);PXo=r(d6t,"FSMTForConditionalGeneration"),d6t.forEach(t),BXo=r(UIe," (FairSeq Machine-Translation model)"),UIe.forEach(t),IXo=i(ue),fb=n(ue,"LI",{});var HIe=s(fb);r1e=n(HIe,"STRONG",{});var c6t=s(r1e);NXo=r(c6t,"led"),c6t.forEach(t),qXo=r(HIe," \u2014 "),Ez=n(HIe,"A",{href:!0});var f6t=s(Ez);jXo=r(f6t,"LEDForConditionalGeneration"),f6t.forEach(t),DXo=r(HIe," (LED model)"),HIe.forEach(t),GXo=i(ue),mb=n(ue,"LI",{});var JIe=s(mb);t1e=n(JIe,"STRONG",{});var m6t=s(t1e);OXo=r(m6t,"longt5"),m6t.forEach(t),VXo=r(JIe," \u2014 "),Cz=n(JIe,"A",{href:!0});var g6t=s(Cz);XXo=r(g6t,"LongT5ForConditionalGeneration"),g6t.forEach(t),zXo=r(JIe," (LongT5 model)"),JIe.forEach(t),WXo=i(ue),gb=n(ue,"LI",{});var YIe=s(gb);a1e=n(YIe,"STRONG",{});var h6t=s(a1e);QXo=r(h6t,"m2m_100"),h6t.forEach(t),UXo=r(YIe," \u2014 "),wz=n(YIe,"A",{href:!0});var p6t=s(wz);HXo=r(p6t,"M2M100ForConditionalGeneration"),p6t.forEach(t),JXo=r(YIe," (M2M100 model)"),YIe.forEach(t),YXo=i(ue),hb=n(ue,"LI",{});var KIe=s(hb);n1e=n(KIe,"STRONG",{});var _6t=s(n1e);KXo=r(_6t,"marian"),_6t.forEach(t),ZXo=r(KIe," \u2014 "),Az=n(KIe,"A",{href:!0});var u6t=s(Az);ezo=r(u6t,"MarianMTModel"),u6t.forEach(t),ozo=r(KIe," (Marian model)"),KIe.forEach(t),rzo=i(ue),pb=n(ue,"LI",{});var ZIe=s(pb);s1e=n(ZIe,"STRONG",{});var b6t=s(s1e);tzo=r(b6t,"mbart"),b6t.forEach(t),azo=r(ZIe," \u2014 "),Lz=n(ZIe,"A",{href:!0});var v6t=s(Lz);nzo=r(v6t,"MBartForConditionalGeneration"),v6t.forEach(t),szo=r(ZIe," (mBART model)"),ZIe.forEach(t),lzo=i(ue),_b=n(ue,"LI",{});var eNe=s(_b);l1e=n(eNe,"STRONG",{});var F6t=s(l1e);izo=r(F6t,"mt5"),F6t.forEach(t),dzo=r(eNe," \u2014 "),yz=n(eNe,"A",{href:!0});var T6t=s(yz);czo=r(T6t,"MT5ForConditionalGeneration"),T6t.forEach(t),fzo=r(eNe," (MT5 model)"),eNe.forEach(t),mzo=i(ue),ub=n(ue,"LI",{});var oNe=s(ub);i1e=n(oNe,"STRONG",{});var M6t=s(i1e);gzo=r(M6t,"mvp"),M6t.forEach(t),hzo=r(oNe," \u2014 "),xz=n(oNe,"A",{href:!0});var E6t=s(xz);pzo=r(E6t,"MvpForConditionalGeneration"),E6t.forEach(t),_zo=r(oNe," (MVP model)"),oNe.forEach(t),uzo=i(ue),bb=n(ue,"LI",{});var rNe=s(bb);d1e=n(rNe,"STRONG",{});var C6t=s(d1e);bzo=r(C6t,"nllb"),C6t.forEach(t),vzo=r(rNe," \u2014 "),$z=n(rNe,"A",{href:!0});var w6t=s($z);Fzo=r(w6t,"M2M100ForConditionalGeneration"),w6t.forEach(t),Tzo=r(rNe," (NLLB model)"),rNe.forEach(t),Mzo=i(ue),vb=n(ue,"LI",{});var tNe=s(vb);c1e=n(tNe,"STRONG",{});var A6t=s(c1e);Ezo=r(A6t,"pegasus"),A6t.forEach(t),Czo=r(tNe," \u2014 "),kz=n(tNe,"A",{href:!0});var L6t=s(kz);wzo=r(L6t,"PegasusForConditionalGeneration"),L6t.forEach(t),Azo=r(tNe," (Pegasus model)"),tNe.forEach(t),Lzo=i(ue),Fb=n(ue,"LI",{});var aNe=s(Fb);f1e=n(aNe,"STRONG",{});var y6t=s(f1e);yzo=r(y6t,"plbart"),y6t.forEach(t),xzo=r(aNe," \u2014 "),Sz=n(aNe,"A",{href:!0});var x6t=s(Sz);$zo=r(x6t,"PLBartForConditionalGeneration"),x6t.forEach(t),kzo=r(aNe," (PLBart model)"),aNe.forEach(t),Szo=i(ue),Tb=n(ue,"LI",{});var nNe=s(Tb);m1e=n(nNe,"STRONG",{});var $6t=s(m1e);Rzo=r($6t,"prophetnet"),$6t.forEach(t),Pzo=r(nNe," \u2014 "),Rz=n(nNe,"A",{href:!0});var k6t=s(Rz);Bzo=r(k6t,"ProphetNetForConditionalGeneration"),k6t.forEach(t),Izo=r(nNe," (ProphetNet model)"),nNe.forEach(t),Nzo=i(ue),Mb=n(ue,"LI",{});var sNe=s(Mb);g1e=n(sNe,"STRONG",{});var S6t=s(g1e);qzo=r(S6t,"t5"),S6t.forEach(t),jzo=r(sNe," \u2014 "),Pz=n(sNe,"A",{href:!0});var R6t=s(Pz);Dzo=r(R6t,"T5ForConditionalGeneration"),R6t.forEach(t),Gzo=r(sNe," (T5 model)"),sNe.forEach(t),Ozo=i(ue),Eb=n(ue,"LI",{});var lNe=s(Eb);h1e=n(lNe,"STRONG",{});var P6t=s(h1e);Vzo=r(P6t,"xlm-prophetnet"),P6t.forEach(t),Xzo=r(lNe," \u2014 "),Bz=n(lNe,"A",{href:!0});var B6t=s(Bz);zzo=r(B6t,"XLMProphetNetForConditionalGeneration"),B6t.forEach(t),Wzo=r(lNe," (XLM-ProphetNet model)"),lNe.forEach(t),ue.forEach(t),Qzo=i(ua),Cb=n(ua,"P",{});var iNe=s(Cb);Uzo=r(iNe,"The model is set in evaluation mode by default using "),p1e=n(iNe,"CODE",{});var I6t=s(p1e);Hzo=r(I6t,"model.eval()"),I6t.forEach(t),Jzo=r(iNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_1e=n(iNe,"CODE",{});var N6t=s(_1e);Yzo=r(N6t,"model.train()"),N6t.forEach(t),iNe.forEach(t),Kzo=i(ua),T(wb.$$.fragment,ua),ua.forEach(t),bl.forEach(t),gUe=i(f),ud=n(f,"H2",{class:!0});var EJe=s(ud);Ab=n(EJe,"A",{id:!0,class:!0,href:!0});var q6t=s(Ab);u1e=n(q6t,"SPAN",{});var j6t=s(u1e);T(f9.$$.fragment,j6t),j6t.forEach(t),q6t.forEach(t),Zzo=i(EJe),b1e=n(EJe,"SPAN",{});var D6t=s(b1e);eWo=r(D6t,"AutoModelForSequenceClassification"),D6t.forEach(t),EJe.forEach(t),hUe=i(f),No=n(f,"DIV",{class:!0});var vl=s(No);T(m9.$$.fragment,vl),oWo=i(vl),bd=n(vl,"P",{});var Kae=s(bd);rWo=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Iz=n(Kae,"A",{href:!0});var G6t=s(Iz);tWo=r(G6t,"from_pretrained()"),G6t.forEach(t),aWo=r(Kae," class method or the "),Nz=n(Kae,"A",{href:!0});var O6t=s(Nz);nWo=r(O6t,"from_config()"),O6t.forEach(t),sWo=r(Kae,` class
method.`),Kae.forEach(t),lWo=i(vl),g9=n(vl,"P",{});var CJe=s(g9);iWo=r(CJe,"This class cannot be instantiated directly using "),v1e=n(CJe,"CODE",{});var V6t=s(v1e);dWo=r(V6t,"__init__()"),V6t.forEach(t),cWo=r(CJe," (throws an error)."),CJe.forEach(t),fWo=i(vl),ut=n(vl,"DIV",{class:!0});var E7=s(ut);T(h9.$$.fragment,E7),mWo=i(E7),F1e=n(E7,"P",{});var X6t=s(F1e);gWo=r(X6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X6t.forEach(t),hWo=i(E7),vd=n(E7,"P",{});var Zae=s(vd);pWo=r(Zae,`Note:
Loading a model from its configuration file does `),T1e=n(Zae,"STRONG",{});var z6t=s(T1e);_Wo=r(z6t,"not"),z6t.forEach(t),uWo=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(Zae,"A",{href:!0});var W6t=s(qz);bWo=r(W6t,"from_pretrained()"),W6t.forEach(t),vWo=r(Zae," to load the model weights."),Zae.forEach(t),FWo=i(E7),T(Lb.$$.fragment,E7),E7.forEach(t),TWo=i(vl),ro=n(vl,"DIV",{class:!0});var ba=s(ro);T(p9.$$.fragment,ba),MWo=i(ba),M1e=n(ba,"P",{});var Q6t=s(M1e);EWo=r(Q6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q6t.forEach(t),CWo=i(ba),Ua=n(ba,"P",{});var C7=s(Ua);wWo=r(C7,"The model class to instantiate is selected based on the "),E1e=n(C7,"CODE",{});var U6t=s(E1e);AWo=r(U6t,"model_type"),U6t.forEach(t),LWo=r(C7,` property of the config object (either
passed as an argument or loaded from `),C1e=n(C7,"CODE",{});var H6t=s(C1e);yWo=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),xWo=r(C7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=n(C7,"CODE",{});var J6t=s(w1e);$Wo=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),kWo=r(C7,":"),C7.forEach(t),SWo=i(ba),N=n(ba,"UL",{});var j=s(N);yb=n(j,"LI",{});var dNe=s(yb);A1e=n(dNe,"STRONG",{});var Y6t=s(A1e);RWo=r(Y6t,"albert"),Y6t.forEach(t),PWo=r(dNe," \u2014 "),jz=n(dNe,"A",{href:!0});var K6t=s(jz);BWo=r(K6t,"AlbertForSequenceClassification"),K6t.forEach(t),IWo=r(dNe," (ALBERT model)"),dNe.forEach(t),NWo=i(j),xb=n(j,"LI",{});var cNe=s(xb);L1e=n(cNe,"STRONG",{});var Z6t=s(L1e);qWo=r(Z6t,"bart"),Z6t.forEach(t),jWo=r(cNe," \u2014 "),Dz=n(cNe,"A",{href:!0});var eAt=s(Dz);DWo=r(eAt,"BartForSequenceClassification"),eAt.forEach(t),GWo=r(cNe," (BART model)"),cNe.forEach(t),OWo=i(j),$b=n(j,"LI",{});var fNe=s($b);y1e=n(fNe,"STRONG",{});var oAt=s(y1e);VWo=r(oAt,"bert"),oAt.forEach(t),XWo=r(fNe," \u2014 "),Gz=n(fNe,"A",{href:!0});var rAt=s(Gz);zWo=r(rAt,"BertForSequenceClassification"),rAt.forEach(t),WWo=r(fNe," (BERT model)"),fNe.forEach(t),QWo=i(j),kb=n(j,"LI",{});var mNe=s(kb);x1e=n(mNe,"STRONG",{});var tAt=s(x1e);UWo=r(tAt,"big_bird"),tAt.forEach(t),HWo=r(mNe," \u2014 "),Oz=n(mNe,"A",{href:!0});var aAt=s(Oz);JWo=r(aAt,"BigBirdForSequenceClassification"),aAt.forEach(t),YWo=r(mNe," (BigBird model)"),mNe.forEach(t),KWo=i(j),Sb=n(j,"LI",{});var gNe=s(Sb);$1e=n(gNe,"STRONG",{});var nAt=s($1e);ZWo=r(nAt,"bigbird_pegasus"),nAt.forEach(t),eQo=r(gNe," \u2014 "),Vz=n(gNe,"A",{href:!0});var sAt=s(Vz);oQo=r(sAt,"BigBirdPegasusForSequenceClassification"),sAt.forEach(t),rQo=r(gNe," (BigBird-Pegasus model)"),gNe.forEach(t),tQo=i(j),Rb=n(j,"LI",{});var hNe=s(Rb);k1e=n(hNe,"STRONG",{});var lAt=s(k1e);aQo=r(lAt,"bloom"),lAt.forEach(t),nQo=r(hNe," \u2014 "),Xz=n(hNe,"A",{href:!0});var iAt=s(Xz);sQo=r(iAt,"BloomForSequenceClassification"),iAt.forEach(t),lQo=r(hNe," (BLOOM model)"),hNe.forEach(t),iQo=i(j),Pb=n(j,"LI",{});var pNe=s(Pb);S1e=n(pNe,"STRONG",{});var dAt=s(S1e);dQo=r(dAt,"camembert"),dAt.forEach(t),cQo=r(pNe," \u2014 "),zz=n(pNe,"A",{href:!0});var cAt=s(zz);fQo=r(cAt,"CamembertForSequenceClassification"),cAt.forEach(t),mQo=r(pNe," (CamemBERT model)"),pNe.forEach(t),gQo=i(j),Bb=n(j,"LI",{});var _Ne=s(Bb);R1e=n(_Ne,"STRONG",{});var fAt=s(R1e);hQo=r(fAt,"canine"),fAt.forEach(t),pQo=r(_Ne," \u2014 "),Wz=n(_Ne,"A",{href:!0});var mAt=s(Wz);_Qo=r(mAt,"CanineForSequenceClassification"),mAt.forEach(t),uQo=r(_Ne," (CANINE model)"),_Ne.forEach(t),bQo=i(j),Ib=n(j,"LI",{});var uNe=s(Ib);P1e=n(uNe,"STRONG",{});var gAt=s(P1e);vQo=r(gAt,"convbert"),gAt.forEach(t),FQo=r(uNe," \u2014 "),Qz=n(uNe,"A",{href:!0});var hAt=s(Qz);TQo=r(hAt,"ConvBertForSequenceClassification"),hAt.forEach(t),MQo=r(uNe," (ConvBERT model)"),uNe.forEach(t),EQo=i(j),Nb=n(j,"LI",{});var bNe=s(Nb);B1e=n(bNe,"STRONG",{});var pAt=s(B1e);CQo=r(pAt,"ctrl"),pAt.forEach(t),wQo=r(bNe," \u2014 "),Uz=n(bNe,"A",{href:!0});var _At=s(Uz);AQo=r(_At,"CTRLForSequenceClassification"),_At.forEach(t),LQo=r(bNe," (CTRL model)"),bNe.forEach(t),yQo=i(j),qb=n(j,"LI",{});var vNe=s(qb);I1e=n(vNe,"STRONG",{});var uAt=s(I1e);xQo=r(uAt,"data2vec-text"),uAt.forEach(t),$Qo=r(vNe," \u2014 "),Hz=n(vNe,"A",{href:!0});var bAt=s(Hz);kQo=r(bAt,"Data2VecTextForSequenceClassification"),bAt.forEach(t),SQo=r(vNe," (Data2VecText model)"),vNe.forEach(t),RQo=i(j),jb=n(j,"LI",{});var FNe=s(jb);N1e=n(FNe,"STRONG",{});var vAt=s(N1e);PQo=r(vAt,"deberta"),vAt.forEach(t),BQo=r(FNe," \u2014 "),Jz=n(FNe,"A",{href:!0});var FAt=s(Jz);IQo=r(FAt,"DebertaForSequenceClassification"),FAt.forEach(t),NQo=r(FNe," (DeBERTa model)"),FNe.forEach(t),qQo=i(j),Db=n(j,"LI",{});var TNe=s(Db);q1e=n(TNe,"STRONG",{});var TAt=s(q1e);jQo=r(TAt,"deberta-v2"),TAt.forEach(t),DQo=r(TNe," \u2014 "),Yz=n(TNe,"A",{href:!0});var MAt=s(Yz);GQo=r(MAt,"DebertaV2ForSequenceClassification"),MAt.forEach(t),OQo=r(TNe," (DeBERTa-v2 model)"),TNe.forEach(t),VQo=i(j),Gb=n(j,"LI",{});var MNe=s(Gb);j1e=n(MNe,"STRONG",{});var EAt=s(j1e);XQo=r(EAt,"distilbert"),EAt.forEach(t),zQo=r(MNe," \u2014 "),Kz=n(MNe,"A",{href:!0});var CAt=s(Kz);WQo=r(CAt,"DistilBertForSequenceClassification"),CAt.forEach(t),QQo=r(MNe," (DistilBERT model)"),MNe.forEach(t),UQo=i(j),Ob=n(j,"LI",{});var ENe=s(Ob);D1e=n(ENe,"STRONG",{});var wAt=s(D1e);HQo=r(wAt,"electra"),wAt.forEach(t),JQo=r(ENe," \u2014 "),Zz=n(ENe,"A",{href:!0});var AAt=s(Zz);YQo=r(AAt,"ElectraForSequenceClassification"),AAt.forEach(t),KQo=r(ENe," (ELECTRA model)"),ENe.forEach(t),ZQo=i(j),Vb=n(j,"LI",{});var CNe=s(Vb);G1e=n(CNe,"STRONG",{});var LAt=s(G1e);eUo=r(LAt,"flaubert"),LAt.forEach(t),oUo=r(CNe," \u2014 "),eW=n(CNe,"A",{href:!0});var yAt=s(eW);rUo=r(yAt,"FlaubertForSequenceClassification"),yAt.forEach(t),tUo=r(CNe," (FlauBERT model)"),CNe.forEach(t),aUo=i(j),Xb=n(j,"LI",{});var wNe=s(Xb);O1e=n(wNe,"STRONG",{});var xAt=s(O1e);nUo=r(xAt,"fnet"),xAt.forEach(t),sUo=r(wNe," \u2014 "),oW=n(wNe,"A",{href:!0});var $At=s(oW);lUo=r($At,"FNetForSequenceClassification"),$At.forEach(t),iUo=r(wNe," (FNet model)"),wNe.forEach(t),dUo=i(j),zb=n(j,"LI",{});var ANe=s(zb);V1e=n(ANe,"STRONG",{});var kAt=s(V1e);cUo=r(kAt,"funnel"),kAt.forEach(t),fUo=r(ANe," \u2014 "),rW=n(ANe,"A",{href:!0});var SAt=s(rW);mUo=r(SAt,"FunnelForSequenceClassification"),SAt.forEach(t),gUo=r(ANe," (Funnel Transformer model)"),ANe.forEach(t),hUo=i(j),Wb=n(j,"LI",{});var LNe=s(Wb);X1e=n(LNe,"STRONG",{});var RAt=s(X1e);pUo=r(RAt,"gpt2"),RAt.forEach(t),_Uo=r(LNe," \u2014 "),tW=n(LNe,"A",{href:!0});var PAt=s(tW);uUo=r(PAt,"GPT2ForSequenceClassification"),PAt.forEach(t),bUo=r(LNe," (OpenAI GPT-2 model)"),LNe.forEach(t),vUo=i(j),Qb=n(j,"LI",{});var yNe=s(Qb);z1e=n(yNe,"STRONG",{});var BAt=s(z1e);FUo=r(BAt,"gpt_neo"),BAt.forEach(t),TUo=r(yNe," \u2014 "),aW=n(yNe,"A",{href:!0});var IAt=s(aW);MUo=r(IAt,"GPTNeoForSequenceClassification"),IAt.forEach(t),EUo=r(yNe," (GPT Neo model)"),yNe.forEach(t),CUo=i(j),Ub=n(j,"LI",{});var xNe=s(Ub);W1e=n(xNe,"STRONG",{});var NAt=s(W1e);wUo=r(NAt,"gptj"),NAt.forEach(t),AUo=r(xNe," \u2014 "),nW=n(xNe,"A",{href:!0});var qAt=s(nW);LUo=r(qAt,"GPTJForSequenceClassification"),qAt.forEach(t),yUo=r(xNe," (GPT-J model)"),xNe.forEach(t),xUo=i(j),Hb=n(j,"LI",{});var $Ne=s(Hb);Q1e=n($Ne,"STRONG",{});var jAt=s(Q1e);$Uo=r(jAt,"ibert"),jAt.forEach(t),kUo=r($Ne," \u2014 "),sW=n($Ne,"A",{href:!0});var DAt=s(sW);SUo=r(DAt,"IBertForSequenceClassification"),DAt.forEach(t),RUo=r($Ne," (I-BERT model)"),$Ne.forEach(t),PUo=i(j),Jb=n(j,"LI",{});var kNe=s(Jb);U1e=n(kNe,"STRONG",{});var GAt=s(U1e);BUo=r(GAt,"layoutlm"),GAt.forEach(t),IUo=r(kNe," \u2014 "),lW=n(kNe,"A",{href:!0});var OAt=s(lW);NUo=r(OAt,"LayoutLMForSequenceClassification"),OAt.forEach(t),qUo=r(kNe," (LayoutLM model)"),kNe.forEach(t),jUo=i(j),Yb=n(j,"LI",{});var SNe=s(Yb);H1e=n(SNe,"STRONG",{});var VAt=s(H1e);DUo=r(VAt,"layoutlmv2"),VAt.forEach(t),GUo=r(SNe," \u2014 "),iW=n(SNe,"A",{href:!0});var XAt=s(iW);OUo=r(XAt,"LayoutLMv2ForSequenceClassification"),XAt.forEach(t),VUo=r(SNe," (LayoutLMv2 model)"),SNe.forEach(t),XUo=i(j),Kb=n(j,"LI",{});var RNe=s(Kb);J1e=n(RNe,"STRONG",{});var zAt=s(J1e);zUo=r(zAt,"layoutlmv3"),zAt.forEach(t),WUo=r(RNe," \u2014 "),dW=n(RNe,"A",{href:!0});var WAt=s(dW);QUo=r(WAt,"LayoutLMv3ForSequenceClassification"),WAt.forEach(t),UUo=r(RNe," (LayoutLMv3 model)"),RNe.forEach(t),HUo=i(j),Zb=n(j,"LI",{});var PNe=s(Zb);Y1e=n(PNe,"STRONG",{});var QAt=s(Y1e);JUo=r(QAt,"led"),QAt.forEach(t),YUo=r(PNe," \u2014 "),cW=n(PNe,"A",{href:!0});var UAt=s(cW);KUo=r(UAt,"LEDForSequenceClassification"),UAt.forEach(t),ZUo=r(PNe," (LED model)"),PNe.forEach(t),eHo=i(j),ev=n(j,"LI",{});var BNe=s(ev);K1e=n(BNe,"STRONG",{});var HAt=s(K1e);oHo=r(HAt,"longformer"),HAt.forEach(t),rHo=r(BNe," \u2014 "),fW=n(BNe,"A",{href:!0});var JAt=s(fW);tHo=r(JAt,"LongformerForSequenceClassification"),JAt.forEach(t),aHo=r(BNe," (Longformer model)"),BNe.forEach(t),nHo=i(j),ov=n(j,"LI",{});var INe=s(ov);Z1e=n(INe,"STRONG",{});var YAt=s(Z1e);sHo=r(YAt,"luke"),YAt.forEach(t),lHo=r(INe," \u2014 "),mW=n(INe,"A",{href:!0});var KAt=s(mW);iHo=r(KAt,"LukeForSequenceClassification"),KAt.forEach(t),dHo=r(INe," (LUKE model)"),INe.forEach(t),cHo=i(j),rv=n(j,"LI",{});var NNe=s(rv);e4e=n(NNe,"STRONG",{});var ZAt=s(e4e);fHo=r(ZAt,"mbart"),ZAt.forEach(t),mHo=r(NNe," \u2014 "),gW=n(NNe,"A",{href:!0});var e7t=s(gW);gHo=r(e7t,"MBartForSequenceClassification"),e7t.forEach(t),hHo=r(NNe," (mBART model)"),NNe.forEach(t),pHo=i(j),tv=n(j,"LI",{});var qNe=s(tv);o4e=n(qNe,"STRONG",{});var o7t=s(o4e);_Ho=r(o7t,"megatron-bert"),o7t.forEach(t),uHo=r(qNe," \u2014 "),hW=n(qNe,"A",{href:!0});var r7t=s(hW);bHo=r(r7t,"MegatronBertForSequenceClassification"),r7t.forEach(t),vHo=r(qNe," (Megatron-BERT model)"),qNe.forEach(t),FHo=i(j),av=n(j,"LI",{});var jNe=s(av);r4e=n(jNe,"STRONG",{});var t7t=s(r4e);THo=r(t7t,"mobilebert"),t7t.forEach(t),MHo=r(jNe," \u2014 "),pW=n(jNe,"A",{href:!0});var a7t=s(pW);EHo=r(a7t,"MobileBertForSequenceClassification"),a7t.forEach(t),CHo=r(jNe," (MobileBERT model)"),jNe.forEach(t),wHo=i(j),nv=n(j,"LI",{});var DNe=s(nv);t4e=n(DNe,"STRONG",{});var n7t=s(t4e);AHo=r(n7t,"mpnet"),n7t.forEach(t),LHo=r(DNe," \u2014 "),_W=n(DNe,"A",{href:!0});var s7t=s(_W);yHo=r(s7t,"MPNetForSequenceClassification"),s7t.forEach(t),xHo=r(DNe," (MPNet model)"),DNe.forEach(t),$Ho=i(j),sv=n(j,"LI",{});var GNe=s(sv);a4e=n(GNe,"STRONG",{});var l7t=s(a4e);kHo=r(l7t,"mvp"),l7t.forEach(t),SHo=r(GNe," \u2014 "),uW=n(GNe,"A",{href:!0});var i7t=s(uW);RHo=r(i7t,"MvpForSequenceClassification"),i7t.forEach(t),PHo=r(GNe," (MVP model)"),GNe.forEach(t),BHo=i(j),lv=n(j,"LI",{});var ONe=s(lv);n4e=n(ONe,"STRONG",{});var d7t=s(n4e);IHo=r(d7t,"nezha"),d7t.forEach(t),NHo=r(ONe," \u2014 "),bW=n(ONe,"A",{href:!0});var c7t=s(bW);qHo=r(c7t,"NezhaForSequenceClassification"),c7t.forEach(t),jHo=r(ONe," (Nezha model)"),ONe.forEach(t),DHo=i(j),iv=n(j,"LI",{});var VNe=s(iv);s4e=n(VNe,"STRONG",{});var f7t=s(s4e);GHo=r(f7t,"nystromformer"),f7t.forEach(t),OHo=r(VNe," \u2014 "),vW=n(VNe,"A",{href:!0});var m7t=s(vW);VHo=r(m7t,"NystromformerForSequenceClassification"),m7t.forEach(t),XHo=r(VNe," (Nystr\xF6mformer model)"),VNe.forEach(t),zHo=i(j),dv=n(j,"LI",{});var XNe=s(dv);l4e=n(XNe,"STRONG",{});var g7t=s(l4e);WHo=r(g7t,"openai-gpt"),g7t.forEach(t),QHo=r(XNe," \u2014 "),FW=n(XNe,"A",{href:!0});var h7t=s(FW);UHo=r(h7t,"OpenAIGPTForSequenceClassification"),h7t.forEach(t),HHo=r(XNe," (OpenAI GPT model)"),XNe.forEach(t),JHo=i(j),cv=n(j,"LI",{});var zNe=s(cv);i4e=n(zNe,"STRONG",{});var p7t=s(i4e);YHo=r(p7t,"opt"),p7t.forEach(t),KHo=r(zNe," \u2014 "),TW=n(zNe,"A",{href:!0});var _7t=s(TW);ZHo=r(_7t,"OPTForSequenceClassification"),_7t.forEach(t),eJo=r(zNe," (OPT model)"),zNe.forEach(t),oJo=i(j),fv=n(j,"LI",{});var WNe=s(fv);d4e=n(WNe,"STRONG",{});var u7t=s(d4e);rJo=r(u7t,"perceiver"),u7t.forEach(t),tJo=r(WNe," \u2014 "),MW=n(WNe,"A",{href:!0});var b7t=s(MW);aJo=r(b7t,"PerceiverForSequenceClassification"),b7t.forEach(t),nJo=r(WNe," (Perceiver model)"),WNe.forEach(t),sJo=i(j),mv=n(j,"LI",{});var QNe=s(mv);c4e=n(QNe,"STRONG",{});var v7t=s(c4e);lJo=r(v7t,"plbart"),v7t.forEach(t),iJo=r(QNe," \u2014 "),EW=n(QNe,"A",{href:!0});var F7t=s(EW);dJo=r(F7t,"PLBartForSequenceClassification"),F7t.forEach(t),cJo=r(QNe," (PLBart model)"),QNe.forEach(t),fJo=i(j),gv=n(j,"LI",{});var UNe=s(gv);f4e=n(UNe,"STRONG",{});var T7t=s(f4e);mJo=r(T7t,"qdqbert"),T7t.forEach(t),gJo=r(UNe," \u2014 "),CW=n(UNe,"A",{href:!0});var M7t=s(CW);hJo=r(M7t,"QDQBertForSequenceClassification"),M7t.forEach(t),pJo=r(UNe," (QDQBert model)"),UNe.forEach(t),_Jo=i(j),hv=n(j,"LI",{});var HNe=s(hv);m4e=n(HNe,"STRONG",{});var E7t=s(m4e);uJo=r(E7t,"reformer"),E7t.forEach(t),bJo=r(HNe," \u2014 "),wW=n(HNe,"A",{href:!0});var C7t=s(wW);vJo=r(C7t,"ReformerForSequenceClassification"),C7t.forEach(t),FJo=r(HNe," (Reformer model)"),HNe.forEach(t),TJo=i(j),pv=n(j,"LI",{});var JNe=s(pv);g4e=n(JNe,"STRONG",{});var w7t=s(g4e);MJo=r(w7t,"rembert"),w7t.forEach(t),EJo=r(JNe," \u2014 "),AW=n(JNe,"A",{href:!0});var A7t=s(AW);CJo=r(A7t,"RemBertForSequenceClassification"),A7t.forEach(t),wJo=r(JNe," (RemBERT model)"),JNe.forEach(t),AJo=i(j),_v=n(j,"LI",{});var YNe=s(_v);h4e=n(YNe,"STRONG",{});var L7t=s(h4e);LJo=r(L7t,"roberta"),L7t.forEach(t),yJo=r(YNe," \u2014 "),LW=n(YNe,"A",{href:!0});var y7t=s(LW);xJo=r(y7t,"RobertaForSequenceClassification"),y7t.forEach(t),$Jo=r(YNe," (RoBERTa model)"),YNe.forEach(t),kJo=i(j),uv=n(j,"LI",{});var KNe=s(uv);p4e=n(KNe,"STRONG",{});var x7t=s(p4e);SJo=r(x7t,"roformer"),x7t.forEach(t),RJo=r(KNe," \u2014 "),yW=n(KNe,"A",{href:!0});var $7t=s(yW);PJo=r($7t,"RoFormerForSequenceClassification"),$7t.forEach(t),BJo=r(KNe," (RoFormer model)"),KNe.forEach(t),IJo=i(j),bv=n(j,"LI",{});var ZNe=s(bv);_4e=n(ZNe,"STRONG",{});var k7t=s(_4e);NJo=r(k7t,"squeezebert"),k7t.forEach(t),qJo=r(ZNe," \u2014 "),xW=n(ZNe,"A",{href:!0});var S7t=s(xW);jJo=r(S7t,"SqueezeBertForSequenceClassification"),S7t.forEach(t),DJo=r(ZNe," (SqueezeBERT model)"),ZNe.forEach(t),GJo=i(j),vv=n(j,"LI",{});var eqe=s(vv);u4e=n(eqe,"STRONG",{});var R7t=s(u4e);OJo=r(R7t,"tapas"),R7t.forEach(t),VJo=r(eqe," \u2014 "),$W=n(eqe,"A",{href:!0});var P7t=s($W);XJo=r(P7t,"TapasForSequenceClassification"),P7t.forEach(t),zJo=r(eqe," (TAPAS model)"),eqe.forEach(t),WJo=i(j),Fv=n(j,"LI",{});var oqe=s(Fv);b4e=n(oqe,"STRONG",{});var B7t=s(b4e);QJo=r(B7t,"transfo-xl"),B7t.forEach(t),UJo=r(oqe," \u2014 "),kW=n(oqe,"A",{href:!0});var I7t=s(kW);HJo=r(I7t,"TransfoXLForSequenceClassification"),I7t.forEach(t),JJo=r(oqe," (Transformer-XL model)"),oqe.forEach(t),YJo=i(j),Tv=n(j,"LI",{});var rqe=s(Tv);v4e=n(rqe,"STRONG",{});var N7t=s(v4e);KJo=r(N7t,"xlm"),N7t.forEach(t),ZJo=r(rqe," \u2014 "),SW=n(rqe,"A",{href:!0});var q7t=s(SW);eYo=r(q7t,"XLMForSequenceClassification"),q7t.forEach(t),oYo=r(rqe," (XLM model)"),rqe.forEach(t),rYo=i(j),Mv=n(j,"LI",{});var tqe=s(Mv);F4e=n(tqe,"STRONG",{});var j7t=s(F4e);tYo=r(j7t,"xlm-roberta"),j7t.forEach(t),aYo=r(tqe," \u2014 "),RW=n(tqe,"A",{href:!0});var D7t=s(RW);nYo=r(D7t,"XLMRobertaForSequenceClassification"),D7t.forEach(t),sYo=r(tqe," (XLM-RoBERTa model)"),tqe.forEach(t),lYo=i(j),Ev=n(j,"LI",{});var aqe=s(Ev);T4e=n(aqe,"STRONG",{});var G7t=s(T4e);iYo=r(G7t,"xlm-roberta-xl"),G7t.forEach(t),dYo=r(aqe," \u2014 "),PW=n(aqe,"A",{href:!0});var O7t=s(PW);cYo=r(O7t,"XLMRobertaXLForSequenceClassification"),O7t.forEach(t),fYo=r(aqe," (XLM-RoBERTa-XL model)"),aqe.forEach(t),mYo=i(j),Cv=n(j,"LI",{});var nqe=s(Cv);M4e=n(nqe,"STRONG",{});var V7t=s(M4e);gYo=r(V7t,"xlnet"),V7t.forEach(t),hYo=r(nqe," \u2014 "),BW=n(nqe,"A",{href:!0});var X7t=s(BW);pYo=r(X7t,"XLNetForSequenceClassification"),X7t.forEach(t),_Yo=r(nqe," (XLNet model)"),nqe.forEach(t),uYo=i(j),wv=n(j,"LI",{});var sqe=s(wv);E4e=n(sqe,"STRONG",{});var z7t=s(E4e);bYo=r(z7t,"yoso"),z7t.forEach(t),vYo=r(sqe," \u2014 "),IW=n(sqe,"A",{href:!0});var W7t=s(IW);FYo=r(W7t,"YosoForSequenceClassification"),W7t.forEach(t),TYo=r(sqe," (YOSO model)"),sqe.forEach(t),j.forEach(t),MYo=i(ba),Av=n(ba,"P",{});var lqe=s(Av);EYo=r(lqe,"The model is set in evaluation mode by default using "),C4e=n(lqe,"CODE",{});var Q7t=s(C4e);CYo=r(Q7t,"model.eval()"),Q7t.forEach(t),wYo=r(lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w4e=n(lqe,"CODE",{});var U7t=s(w4e);AYo=r(U7t,"model.train()"),U7t.forEach(t),lqe.forEach(t),LYo=i(ba),T(Lv.$$.fragment,ba),ba.forEach(t),vl.forEach(t),pUe=i(f),Fd=n(f,"H2",{class:!0});var wJe=s(Fd);yv=n(wJe,"A",{id:!0,class:!0,href:!0});var H7t=s(yv);A4e=n(H7t,"SPAN",{});var J7t=s(A4e);T(_9.$$.fragment,J7t),J7t.forEach(t),H7t.forEach(t),yYo=i(wJe),L4e=n(wJe,"SPAN",{});var Y7t=s(L4e);xYo=r(Y7t,"AutoModelForMultipleChoice"),Y7t.forEach(t),wJe.forEach(t),_Ue=i(f),qo=n(f,"DIV",{class:!0});var Fl=s(qo);T(u9.$$.fragment,Fl),$Yo=i(Fl),Td=n(Fl,"P",{});var ene=s(Td);kYo=r(ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NW=n(ene,"A",{href:!0});var K7t=s(NW);SYo=r(K7t,"from_pretrained()"),K7t.forEach(t),RYo=r(ene," class method or the "),qW=n(ene,"A",{href:!0});var Z7t=s(qW);PYo=r(Z7t,"from_config()"),Z7t.forEach(t),BYo=r(ene,` class
method.`),ene.forEach(t),IYo=i(Fl),b9=n(Fl,"P",{});var AJe=s(b9);NYo=r(AJe,"This class cannot be instantiated directly using "),y4e=n(AJe,"CODE",{});var eLt=s(y4e);qYo=r(eLt,"__init__()"),eLt.forEach(t),jYo=r(AJe," (throws an error)."),AJe.forEach(t),DYo=i(Fl),bt=n(Fl,"DIV",{class:!0});var w7=s(bt);T(v9.$$.fragment,w7),GYo=i(w7),x4e=n(w7,"P",{});var oLt=s(x4e);OYo=r(oLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oLt.forEach(t),VYo=i(w7),Md=n(w7,"P",{});var one=s(Md);XYo=r(one,`Note:
Loading a model from its configuration file does `),$4e=n(one,"STRONG",{});var rLt=s($4e);zYo=r(rLt,"not"),rLt.forEach(t),WYo=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(one,"A",{href:!0});var tLt=s(jW);QYo=r(tLt,"from_pretrained()"),tLt.forEach(t),UYo=r(one," to load the model weights."),one.forEach(t),HYo=i(w7),T(xv.$$.fragment,w7),w7.forEach(t),JYo=i(Fl),to=n(Fl,"DIV",{class:!0});var va=s(to);T(F9.$$.fragment,va),YYo=i(va),k4e=n(va,"P",{});var aLt=s(k4e);KYo=r(aLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aLt.forEach(t),ZYo=i(va),Ha=n(va,"P",{});var A7=s(Ha);eKo=r(A7,"The model class to instantiate is selected based on the "),S4e=n(A7,"CODE",{});var nLt=s(S4e);oKo=r(nLt,"model_type"),nLt.forEach(t),rKo=r(A7,` property of the config object (either
passed as an argument or loaded from `),R4e=n(A7,"CODE",{});var sLt=s(R4e);tKo=r(sLt,"pretrained_model_name_or_path"),sLt.forEach(t),aKo=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(A7,"CODE",{});var lLt=s(P4e);nKo=r(lLt,"pretrained_model_name_or_path"),lLt.forEach(t),sKo=r(A7,":"),A7.forEach(t),lKo=i(va),Z=n(va,"UL",{});var ee=s(Z);$v=n(ee,"LI",{});var iqe=s($v);B4e=n(iqe,"STRONG",{});var iLt=s(B4e);iKo=r(iLt,"albert"),iLt.forEach(t),dKo=r(iqe," \u2014 "),DW=n(iqe,"A",{href:!0});var dLt=s(DW);cKo=r(dLt,"AlbertForMultipleChoice"),dLt.forEach(t),fKo=r(iqe," (ALBERT model)"),iqe.forEach(t),mKo=i(ee),kv=n(ee,"LI",{});var dqe=s(kv);I4e=n(dqe,"STRONG",{});var cLt=s(I4e);gKo=r(cLt,"bert"),cLt.forEach(t),hKo=r(dqe," \u2014 "),GW=n(dqe,"A",{href:!0});var fLt=s(GW);pKo=r(fLt,"BertForMultipleChoice"),fLt.forEach(t),_Ko=r(dqe," (BERT model)"),dqe.forEach(t),uKo=i(ee),Sv=n(ee,"LI",{});var cqe=s(Sv);N4e=n(cqe,"STRONG",{});var mLt=s(N4e);bKo=r(mLt,"big_bird"),mLt.forEach(t),vKo=r(cqe," \u2014 "),OW=n(cqe,"A",{href:!0});var gLt=s(OW);FKo=r(gLt,"BigBirdForMultipleChoice"),gLt.forEach(t),TKo=r(cqe," (BigBird model)"),cqe.forEach(t),MKo=i(ee),Rv=n(ee,"LI",{});var fqe=s(Rv);q4e=n(fqe,"STRONG",{});var hLt=s(q4e);EKo=r(hLt,"camembert"),hLt.forEach(t),CKo=r(fqe," \u2014 "),VW=n(fqe,"A",{href:!0});var pLt=s(VW);wKo=r(pLt,"CamembertForMultipleChoice"),pLt.forEach(t),AKo=r(fqe," (CamemBERT model)"),fqe.forEach(t),LKo=i(ee),Pv=n(ee,"LI",{});var mqe=s(Pv);j4e=n(mqe,"STRONG",{});var _Lt=s(j4e);yKo=r(_Lt,"canine"),_Lt.forEach(t),xKo=r(mqe," \u2014 "),XW=n(mqe,"A",{href:!0});var uLt=s(XW);$Ko=r(uLt,"CanineForMultipleChoice"),uLt.forEach(t),kKo=r(mqe," (CANINE model)"),mqe.forEach(t),SKo=i(ee),Bv=n(ee,"LI",{});var gqe=s(Bv);D4e=n(gqe,"STRONG",{});var bLt=s(D4e);RKo=r(bLt,"convbert"),bLt.forEach(t),PKo=r(gqe," \u2014 "),zW=n(gqe,"A",{href:!0});var vLt=s(zW);BKo=r(vLt,"ConvBertForMultipleChoice"),vLt.forEach(t),IKo=r(gqe," (ConvBERT model)"),gqe.forEach(t),NKo=i(ee),Iv=n(ee,"LI",{});var hqe=s(Iv);G4e=n(hqe,"STRONG",{});var FLt=s(G4e);qKo=r(FLt,"data2vec-text"),FLt.forEach(t),jKo=r(hqe," \u2014 "),WW=n(hqe,"A",{href:!0});var TLt=s(WW);DKo=r(TLt,"Data2VecTextForMultipleChoice"),TLt.forEach(t),GKo=r(hqe," (Data2VecText model)"),hqe.forEach(t),OKo=i(ee),Nv=n(ee,"LI",{});var pqe=s(Nv);O4e=n(pqe,"STRONG",{});var MLt=s(O4e);VKo=r(MLt,"deberta-v2"),MLt.forEach(t),XKo=r(pqe," \u2014 "),QW=n(pqe,"A",{href:!0});var ELt=s(QW);zKo=r(ELt,"DebertaV2ForMultipleChoice"),ELt.forEach(t),WKo=r(pqe," (DeBERTa-v2 model)"),pqe.forEach(t),QKo=i(ee),qv=n(ee,"LI",{});var _qe=s(qv);V4e=n(_qe,"STRONG",{});var CLt=s(V4e);UKo=r(CLt,"distilbert"),CLt.forEach(t),HKo=r(_qe," \u2014 "),UW=n(_qe,"A",{href:!0});var wLt=s(UW);JKo=r(wLt,"DistilBertForMultipleChoice"),wLt.forEach(t),YKo=r(_qe," (DistilBERT model)"),_qe.forEach(t),KKo=i(ee),jv=n(ee,"LI",{});var uqe=s(jv);X4e=n(uqe,"STRONG",{});var ALt=s(X4e);ZKo=r(ALt,"electra"),ALt.forEach(t),eZo=r(uqe," \u2014 "),HW=n(uqe,"A",{href:!0});var LLt=s(HW);oZo=r(LLt,"ElectraForMultipleChoice"),LLt.forEach(t),rZo=r(uqe," (ELECTRA model)"),uqe.forEach(t),tZo=i(ee),Dv=n(ee,"LI",{});var bqe=s(Dv);z4e=n(bqe,"STRONG",{});var yLt=s(z4e);aZo=r(yLt,"flaubert"),yLt.forEach(t),nZo=r(bqe," \u2014 "),JW=n(bqe,"A",{href:!0});var xLt=s(JW);sZo=r(xLt,"FlaubertForMultipleChoice"),xLt.forEach(t),lZo=r(bqe," (FlauBERT model)"),bqe.forEach(t),iZo=i(ee),Gv=n(ee,"LI",{});var vqe=s(Gv);W4e=n(vqe,"STRONG",{});var $Lt=s(W4e);dZo=r($Lt,"fnet"),$Lt.forEach(t),cZo=r(vqe," \u2014 "),YW=n(vqe,"A",{href:!0});var kLt=s(YW);fZo=r(kLt,"FNetForMultipleChoice"),kLt.forEach(t),mZo=r(vqe," (FNet model)"),vqe.forEach(t),gZo=i(ee),Ov=n(ee,"LI",{});var Fqe=s(Ov);Q4e=n(Fqe,"STRONG",{});var SLt=s(Q4e);hZo=r(SLt,"funnel"),SLt.forEach(t),pZo=r(Fqe," \u2014 "),KW=n(Fqe,"A",{href:!0});var RLt=s(KW);_Zo=r(RLt,"FunnelForMultipleChoice"),RLt.forEach(t),uZo=r(Fqe," (Funnel Transformer model)"),Fqe.forEach(t),bZo=i(ee),Vv=n(ee,"LI",{});var Tqe=s(Vv);U4e=n(Tqe,"STRONG",{});var PLt=s(U4e);vZo=r(PLt,"ibert"),PLt.forEach(t),FZo=r(Tqe," \u2014 "),ZW=n(Tqe,"A",{href:!0});var BLt=s(ZW);TZo=r(BLt,"IBertForMultipleChoice"),BLt.forEach(t),MZo=r(Tqe," (I-BERT model)"),Tqe.forEach(t),EZo=i(ee),Xv=n(ee,"LI",{});var Mqe=s(Xv);H4e=n(Mqe,"STRONG",{});var ILt=s(H4e);CZo=r(ILt,"longformer"),ILt.forEach(t),wZo=r(Mqe," \u2014 "),eQ=n(Mqe,"A",{href:!0});var NLt=s(eQ);AZo=r(NLt,"LongformerForMultipleChoice"),NLt.forEach(t),LZo=r(Mqe," (Longformer model)"),Mqe.forEach(t),yZo=i(ee),zv=n(ee,"LI",{});var Eqe=s(zv);J4e=n(Eqe,"STRONG",{});var qLt=s(J4e);xZo=r(qLt,"luke"),qLt.forEach(t),$Zo=r(Eqe," \u2014 "),oQ=n(Eqe,"A",{href:!0});var jLt=s(oQ);kZo=r(jLt,"LukeForMultipleChoice"),jLt.forEach(t),SZo=r(Eqe," (LUKE model)"),Eqe.forEach(t),RZo=i(ee),Wv=n(ee,"LI",{});var Cqe=s(Wv);Y4e=n(Cqe,"STRONG",{});var DLt=s(Y4e);PZo=r(DLt,"megatron-bert"),DLt.forEach(t),BZo=r(Cqe," \u2014 "),rQ=n(Cqe,"A",{href:!0});var GLt=s(rQ);IZo=r(GLt,"MegatronBertForMultipleChoice"),GLt.forEach(t),NZo=r(Cqe," (Megatron-BERT model)"),Cqe.forEach(t),qZo=i(ee),Qv=n(ee,"LI",{});var wqe=s(Qv);K4e=n(wqe,"STRONG",{});var OLt=s(K4e);jZo=r(OLt,"mobilebert"),OLt.forEach(t),DZo=r(wqe," \u2014 "),tQ=n(wqe,"A",{href:!0});var VLt=s(tQ);GZo=r(VLt,"MobileBertForMultipleChoice"),VLt.forEach(t),OZo=r(wqe," (MobileBERT model)"),wqe.forEach(t),VZo=i(ee),Uv=n(ee,"LI",{});var Aqe=s(Uv);Z4e=n(Aqe,"STRONG",{});var XLt=s(Z4e);XZo=r(XLt,"mpnet"),XLt.forEach(t),zZo=r(Aqe," \u2014 "),aQ=n(Aqe,"A",{href:!0});var zLt=s(aQ);WZo=r(zLt,"MPNetForMultipleChoice"),zLt.forEach(t),QZo=r(Aqe," (MPNet model)"),Aqe.forEach(t),UZo=i(ee),Hv=n(ee,"LI",{});var Lqe=s(Hv);e2e=n(Lqe,"STRONG",{});var WLt=s(e2e);HZo=r(WLt,"nezha"),WLt.forEach(t),JZo=r(Lqe," \u2014 "),nQ=n(Lqe,"A",{href:!0});var QLt=s(nQ);YZo=r(QLt,"NezhaForMultipleChoice"),QLt.forEach(t),KZo=r(Lqe," (Nezha model)"),Lqe.forEach(t),ZZo=i(ee),Jv=n(ee,"LI",{});var yqe=s(Jv);o2e=n(yqe,"STRONG",{});var ULt=s(o2e);eer=r(ULt,"nystromformer"),ULt.forEach(t),oer=r(yqe," \u2014 "),sQ=n(yqe,"A",{href:!0});var HLt=s(sQ);rer=r(HLt,"NystromformerForMultipleChoice"),HLt.forEach(t),ter=r(yqe," (Nystr\xF6mformer model)"),yqe.forEach(t),aer=i(ee),Yv=n(ee,"LI",{});var xqe=s(Yv);r2e=n(xqe,"STRONG",{});var JLt=s(r2e);ner=r(JLt,"qdqbert"),JLt.forEach(t),ser=r(xqe," \u2014 "),lQ=n(xqe,"A",{href:!0});var YLt=s(lQ);ler=r(YLt,"QDQBertForMultipleChoice"),YLt.forEach(t),ier=r(xqe," (QDQBert model)"),xqe.forEach(t),der=i(ee),Kv=n(ee,"LI",{});var $qe=s(Kv);t2e=n($qe,"STRONG",{});var KLt=s(t2e);cer=r(KLt,"rembert"),KLt.forEach(t),fer=r($qe," \u2014 "),iQ=n($qe,"A",{href:!0});var ZLt=s(iQ);mer=r(ZLt,"RemBertForMultipleChoice"),ZLt.forEach(t),ger=r($qe," (RemBERT model)"),$qe.forEach(t),her=i(ee),Zv=n(ee,"LI",{});var kqe=s(Zv);a2e=n(kqe,"STRONG",{});var eyt=s(a2e);per=r(eyt,"roberta"),eyt.forEach(t),_er=r(kqe," \u2014 "),dQ=n(kqe,"A",{href:!0});var oyt=s(dQ);uer=r(oyt,"RobertaForMultipleChoice"),oyt.forEach(t),ber=r(kqe," (RoBERTa model)"),kqe.forEach(t),ver=i(ee),e5=n(ee,"LI",{});var Sqe=s(e5);n2e=n(Sqe,"STRONG",{});var ryt=s(n2e);Fer=r(ryt,"roformer"),ryt.forEach(t),Ter=r(Sqe," \u2014 "),cQ=n(Sqe,"A",{href:!0});var tyt=s(cQ);Mer=r(tyt,"RoFormerForMultipleChoice"),tyt.forEach(t),Eer=r(Sqe," (RoFormer model)"),Sqe.forEach(t),Cer=i(ee),o5=n(ee,"LI",{});var Rqe=s(o5);s2e=n(Rqe,"STRONG",{});var ayt=s(s2e);wer=r(ayt,"squeezebert"),ayt.forEach(t),Aer=r(Rqe," \u2014 "),fQ=n(Rqe,"A",{href:!0});var nyt=s(fQ);Ler=r(nyt,"SqueezeBertForMultipleChoice"),nyt.forEach(t),yer=r(Rqe," (SqueezeBERT model)"),Rqe.forEach(t),xer=i(ee),r5=n(ee,"LI",{});var Pqe=s(r5);l2e=n(Pqe,"STRONG",{});var syt=s(l2e);$er=r(syt,"xlm"),syt.forEach(t),ker=r(Pqe," \u2014 "),mQ=n(Pqe,"A",{href:!0});var lyt=s(mQ);Ser=r(lyt,"XLMForMultipleChoice"),lyt.forEach(t),Rer=r(Pqe," (XLM model)"),Pqe.forEach(t),Per=i(ee),t5=n(ee,"LI",{});var Bqe=s(t5);i2e=n(Bqe,"STRONG",{});var iyt=s(i2e);Ber=r(iyt,"xlm-roberta"),iyt.forEach(t),Ier=r(Bqe," \u2014 "),gQ=n(Bqe,"A",{href:!0});var dyt=s(gQ);Ner=r(dyt,"XLMRobertaForMultipleChoice"),dyt.forEach(t),qer=r(Bqe," (XLM-RoBERTa model)"),Bqe.forEach(t),jer=i(ee),a5=n(ee,"LI",{});var Iqe=s(a5);d2e=n(Iqe,"STRONG",{});var cyt=s(d2e);Der=r(cyt,"xlm-roberta-xl"),cyt.forEach(t),Ger=r(Iqe," \u2014 "),hQ=n(Iqe,"A",{href:!0});var fyt=s(hQ);Oer=r(fyt,"XLMRobertaXLForMultipleChoice"),fyt.forEach(t),Ver=r(Iqe," (XLM-RoBERTa-XL model)"),Iqe.forEach(t),Xer=i(ee),n5=n(ee,"LI",{});var Nqe=s(n5);c2e=n(Nqe,"STRONG",{});var myt=s(c2e);zer=r(myt,"xlnet"),myt.forEach(t),Wer=r(Nqe," \u2014 "),pQ=n(Nqe,"A",{href:!0});var gyt=s(pQ);Qer=r(gyt,"XLNetForMultipleChoice"),gyt.forEach(t),Uer=r(Nqe," (XLNet model)"),Nqe.forEach(t),Her=i(ee),s5=n(ee,"LI",{});var qqe=s(s5);f2e=n(qqe,"STRONG",{});var hyt=s(f2e);Jer=r(hyt,"yoso"),hyt.forEach(t),Yer=r(qqe," \u2014 "),_Q=n(qqe,"A",{href:!0});var pyt=s(_Q);Ker=r(pyt,"YosoForMultipleChoice"),pyt.forEach(t),Zer=r(qqe," (YOSO model)"),qqe.forEach(t),ee.forEach(t),eor=i(va),l5=n(va,"P",{});var jqe=s(l5);oor=r(jqe,"The model is set in evaluation mode by default using "),m2e=n(jqe,"CODE",{});var _yt=s(m2e);ror=r(_yt,"model.eval()"),_yt.forEach(t),tor=r(jqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=n(jqe,"CODE",{});var uyt=s(g2e);aor=r(uyt,"model.train()"),uyt.forEach(t),jqe.forEach(t),nor=i(va),T(i5.$$.fragment,va),va.forEach(t),Fl.forEach(t),uUe=i(f),Ed=n(f,"H2",{class:!0});var LJe=s(Ed);d5=n(LJe,"A",{id:!0,class:!0,href:!0});var byt=s(d5);h2e=n(byt,"SPAN",{});var vyt=s(h2e);T(T9.$$.fragment,vyt),vyt.forEach(t),byt.forEach(t),sor=i(LJe),p2e=n(LJe,"SPAN",{});var Fyt=s(p2e);lor=r(Fyt,"AutoModelForNextSentencePrediction"),Fyt.forEach(t),LJe.forEach(t),bUe=i(f),jo=n(f,"DIV",{class:!0});var Tl=s(jo);T(M9.$$.fragment,Tl),ior=i(Tl),Cd=n(Tl,"P",{});var rne=s(Cd);dor=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uQ=n(rne,"A",{href:!0});var Tyt=s(uQ);cor=r(Tyt,"from_pretrained()"),Tyt.forEach(t),mor=r(rne," class method or the "),bQ=n(rne,"A",{href:!0});var Myt=s(bQ);gor=r(Myt,"from_config()"),Myt.forEach(t),hor=r(rne,` class
method.`),rne.forEach(t),por=i(Tl),E9=n(Tl,"P",{});var yJe=s(E9);_or=r(yJe,"This class cannot be instantiated directly using "),_2e=n(yJe,"CODE",{});var Eyt=s(_2e);uor=r(Eyt,"__init__()"),Eyt.forEach(t),bor=r(yJe," (throws an error)."),yJe.forEach(t),vor=i(Tl),vt=n(Tl,"DIV",{class:!0});var L7=s(vt);T(C9.$$.fragment,L7),For=i(L7),u2e=n(L7,"P",{});var Cyt=s(u2e);Tor=r(Cyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Cyt.forEach(t),Mor=i(L7),wd=n(L7,"P",{});var tne=s(wd);Eor=r(tne,`Note:
Loading a model from its configuration file does `),b2e=n(tne,"STRONG",{});var wyt=s(b2e);Cor=r(wyt,"not"),wyt.forEach(t),wor=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(tne,"A",{href:!0});var Ayt=s(vQ);Aor=r(Ayt,"from_pretrained()"),Ayt.forEach(t),Lor=r(tne," to load the model weights."),tne.forEach(t),yor=i(L7),T(c5.$$.fragment,L7),L7.forEach(t),xor=i(Tl),ao=n(Tl,"DIV",{class:!0});var Fa=s(ao);T(w9.$$.fragment,Fa),$or=i(Fa),v2e=n(Fa,"P",{});var Lyt=s(v2e);kor=r(Lyt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Lyt.forEach(t),Sor=i(Fa),Ja=n(Fa,"P",{});var y7=s(Ja);Ror=r(y7,"The model class to instantiate is selected based on the "),F2e=n(y7,"CODE",{});var yyt=s(F2e);Por=r(yyt,"model_type"),yyt.forEach(t),Bor=r(y7,` property of the config object (either
passed as an argument or loaded from `),T2e=n(y7,"CODE",{});var xyt=s(T2e);Ior=r(xyt,"pretrained_model_name_or_path"),xyt.forEach(t),Nor=r(y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=n(y7,"CODE",{});var $yt=s(M2e);qor=r($yt,"pretrained_model_name_or_path"),$yt.forEach(t),jor=r(y7,":"),y7.forEach(t),Dor=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);f5=n(Ta,"LI",{});var Dqe=s(f5);E2e=n(Dqe,"STRONG",{});var kyt=s(E2e);Gor=r(kyt,"bert"),kyt.forEach(t),Oor=r(Dqe," \u2014 "),FQ=n(Dqe,"A",{href:!0});var Syt=s(FQ);Vor=r(Syt,"BertForNextSentencePrediction"),Syt.forEach(t),Xor=r(Dqe," (BERT model)"),Dqe.forEach(t),zor=i(Ta),m5=n(Ta,"LI",{});var Gqe=s(m5);C2e=n(Gqe,"STRONG",{});var Ryt=s(C2e);Wor=r(Ryt,"fnet"),Ryt.forEach(t),Qor=r(Gqe," \u2014 "),TQ=n(Gqe,"A",{href:!0});var Pyt=s(TQ);Uor=r(Pyt,"FNetForNextSentencePrediction"),Pyt.forEach(t),Hor=r(Gqe," (FNet model)"),Gqe.forEach(t),Jor=i(Ta),g5=n(Ta,"LI",{});var Oqe=s(g5);w2e=n(Oqe,"STRONG",{});var Byt=s(w2e);Yor=r(Byt,"megatron-bert"),Byt.forEach(t),Kor=r(Oqe," \u2014 "),MQ=n(Oqe,"A",{href:!0});var Iyt=s(MQ);Zor=r(Iyt,"MegatronBertForNextSentencePrediction"),Iyt.forEach(t),err=r(Oqe," (Megatron-BERT model)"),Oqe.forEach(t),orr=i(Ta),h5=n(Ta,"LI",{});var Vqe=s(h5);A2e=n(Vqe,"STRONG",{});var Nyt=s(A2e);rrr=r(Nyt,"mobilebert"),Nyt.forEach(t),trr=r(Vqe," \u2014 "),EQ=n(Vqe,"A",{href:!0});var qyt=s(EQ);arr=r(qyt,"MobileBertForNextSentencePrediction"),qyt.forEach(t),nrr=r(Vqe," (MobileBERT model)"),Vqe.forEach(t),srr=i(Ta),p5=n(Ta,"LI",{});var Xqe=s(p5);L2e=n(Xqe,"STRONG",{});var jyt=s(L2e);lrr=r(jyt,"nezha"),jyt.forEach(t),irr=r(Xqe," \u2014 "),CQ=n(Xqe,"A",{href:!0});var Dyt=s(CQ);drr=r(Dyt,"NezhaForNextSentencePrediction"),Dyt.forEach(t),crr=r(Xqe," (Nezha model)"),Xqe.forEach(t),frr=i(Ta),_5=n(Ta,"LI",{});var zqe=s(_5);y2e=n(zqe,"STRONG",{});var Gyt=s(y2e);mrr=r(Gyt,"qdqbert"),Gyt.forEach(t),grr=r(zqe," \u2014 "),wQ=n(zqe,"A",{href:!0});var Oyt=s(wQ);hrr=r(Oyt,"QDQBertForNextSentencePrediction"),Oyt.forEach(t),prr=r(zqe," (QDQBert model)"),zqe.forEach(t),Ta.forEach(t),_rr=i(Fa),u5=n(Fa,"P",{});var Wqe=s(u5);urr=r(Wqe,"The model is set in evaluation mode by default using "),x2e=n(Wqe,"CODE",{});var Vyt=s(x2e);brr=r(Vyt,"model.eval()"),Vyt.forEach(t),vrr=r(Wqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=n(Wqe,"CODE",{});var Xyt=s($2e);Frr=r(Xyt,"model.train()"),Xyt.forEach(t),Wqe.forEach(t),Trr=i(Fa),T(b5.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),vUe=i(f),Ad=n(f,"H2",{class:!0});var xJe=s(Ad);v5=n(xJe,"A",{id:!0,class:!0,href:!0});var zyt=s(v5);k2e=n(zyt,"SPAN",{});var Wyt=s(k2e);T(A9.$$.fragment,Wyt),Wyt.forEach(t),zyt.forEach(t),Mrr=i(xJe),S2e=n(xJe,"SPAN",{});var Qyt=s(S2e);Err=r(Qyt,"AutoModelForTokenClassification"),Qyt.forEach(t),xJe.forEach(t),FUe=i(f),Go=n(f,"DIV",{class:!0});var Ml=s(Go);T(L9.$$.fragment,Ml),Crr=i(Ml),Ld=n(Ml,"P",{});var ane=s(Ld);wrr=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AQ=n(ane,"A",{href:!0});var Uyt=s(AQ);Arr=r(Uyt,"from_pretrained()"),Uyt.forEach(t),Lrr=r(ane," class method or the "),LQ=n(ane,"A",{href:!0});var Hyt=s(LQ);yrr=r(Hyt,"from_config()"),Hyt.forEach(t),xrr=r(ane,` class
method.`),ane.forEach(t),$rr=i(Ml),y9=n(Ml,"P",{});var $Je=s(y9);krr=r($Je,"This class cannot be instantiated directly using "),R2e=n($Je,"CODE",{});var Jyt=s(R2e);Srr=r(Jyt,"__init__()"),Jyt.forEach(t),Rrr=r($Je," (throws an error)."),$Je.forEach(t),Prr=i(Ml),Ft=n(Ml,"DIV",{class:!0});var x7=s(Ft);T(x9.$$.fragment,x7),Brr=i(x7),P2e=n(x7,"P",{});var Yyt=s(P2e);Irr=r(Yyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yyt.forEach(t),Nrr=i(x7),yd=n(x7,"P",{});var nne=s(yd);qrr=r(nne,`Note:
Loading a model from its configuration file does `),B2e=n(nne,"STRONG",{});var Kyt=s(B2e);jrr=r(Kyt,"not"),Kyt.forEach(t),Drr=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(nne,"A",{href:!0});var Zyt=s(yQ);Grr=r(Zyt,"from_pretrained()"),Zyt.forEach(t),Orr=r(nne," to load the model weights."),nne.forEach(t),Vrr=i(x7),T(F5.$$.fragment,x7),x7.forEach(t),Xrr=i(Ml),no=n(Ml,"DIV",{class:!0});var Ma=s(no);T($9.$$.fragment,Ma),zrr=i(Ma),I2e=n(Ma,"P",{});var e9t=s(I2e);Wrr=r(e9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),e9t.forEach(t),Qrr=i(Ma),Ya=n(Ma,"P",{});var $7=s(Ya);Urr=r($7,"The model class to instantiate is selected based on the "),N2e=n($7,"CODE",{});var o9t=s(N2e);Hrr=r(o9t,"model_type"),o9t.forEach(t),Jrr=r($7,` property of the config object (either
passed as an argument or loaded from `),q2e=n($7,"CODE",{});var r9t=s(q2e);Yrr=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),Krr=r($7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=n($7,"CODE",{});var t9t=s(j2e);Zrr=r(t9t,"pretrained_model_name_or_path"),t9t.forEach(t),etr=r($7,":"),$7.forEach(t),otr=i(Ma),H=n(Ma,"UL",{});var K=s(H);T5=n(K,"LI",{});var Qqe=s(T5);D2e=n(Qqe,"STRONG",{});var a9t=s(D2e);rtr=r(a9t,"albert"),a9t.forEach(t),ttr=r(Qqe," \u2014 "),xQ=n(Qqe,"A",{href:!0});var n9t=s(xQ);atr=r(n9t,"AlbertForTokenClassification"),n9t.forEach(t),ntr=r(Qqe," (ALBERT model)"),Qqe.forEach(t),str=i(K),M5=n(K,"LI",{});var Uqe=s(M5);G2e=n(Uqe,"STRONG",{});var s9t=s(G2e);ltr=r(s9t,"bert"),s9t.forEach(t),itr=r(Uqe," \u2014 "),$Q=n(Uqe,"A",{href:!0});var l9t=s($Q);dtr=r(l9t,"BertForTokenClassification"),l9t.forEach(t),ctr=r(Uqe," (BERT model)"),Uqe.forEach(t),ftr=i(K),E5=n(K,"LI",{});var Hqe=s(E5);O2e=n(Hqe,"STRONG",{});var i9t=s(O2e);mtr=r(i9t,"big_bird"),i9t.forEach(t),gtr=r(Hqe," \u2014 "),kQ=n(Hqe,"A",{href:!0});var d9t=s(kQ);htr=r(d9t,"BigBirdForTokenClassification"),d9t.forEach(t),ptr=r(Hqe," (BigBird model)"),Hqe.forEach(t),_tr=i(K),C5=n(K,"LI",{});var Jqe=s(C5);V2e=n(Jqe,"STRONG",{});var c9t=s(V2e);utr=r(c9t,"bloom"),c9t.forEach(t),btr=r(Jqe," \u2014 "),SQ=n(Jqe,"A",{href:!0});var f9t=s(SQ);vtr=r(f9t,"BloomForTokenClassification"),f9t.forEach(t),Ftr=r(Jqe," (BLOOM model)"),Jqe.forEach(t),Ttr=i(K),w5=n(K,"LI",{});var Yqe=s(w5);X2e=n(Yqe,"STRONG",{});var m9t=s(X2e);Mtr=r(m9t,"camembert"),m9t.forEach(t),Etr=r(Yqe," \u2014 "),RQ=n(Yqe,"A",{href:!0});var g9t=s(RQ);Ctr=r(g9t,"CamembertForTokenClassification"),g9t.forEach(t),wtr=r(Yqe," (CamemBERT model)"),Yqe.forEach(t),Atr=i(K),A5=n(K,"LI",{});var Kqe=s(A5);z2e=n(Kqe,"STRONG",{});var h9t=s(z2e);Ltr=r(h9t,"canine"),h9t.forEach(t),ytr=r(Kqe," \u2014 "),PQ=n(Kqe,"A",{href:!0});var p9t=s(PQ);xtr=r(p9t,"CanineForTokenClassification"),p9t.forEach(t),$tr=r(Kqe," (CANINE model)"),Kqe.forEach(t),ktr=i(K),L5=n(K,"LI",{});var Zqe=s(L5);W2e=n(Zqe,"STRONG",{});var _9t=s(W2e);Str=r(_9t,"convbert"),_9t.forEach(t),Rtr=r(Zqe," \u2014 "),BQ=n(Zqe,"A",{href:!0});var u9t=s(BQ);Ptr=r(u9t,"ConvBertForTokenClassification"),u9t.forEach(t),Btr=r(Zqe," (ConvBERT model)"),Zqe.forEach(t),Itr=i(K),y5=n(K,"LI",{});var eje=s(y5);Q2e=n(eje,"STRONG",{});var b9t=s(Q2e);Ntr=r(b9t,"data2vec-text"),b9t.forEach(t),qtr=r(eje," \u2014 "),IQ=n(eje,"A",{href:!0});var v9t=s(IQ);jtr=r(v9t,"Data2VecTextForTokenClassification"),v9t.forEach(t),Dtr=r(eje," (Data2VecText model)"),eje.forEach(t),Gtr=i(K),x5=n(K,"LI",{});var oje=s(x5);U2e=n(oje,"STRONG",{});var F9t=s(U2e);Otr=r(F9t,"deberta"),F9t.forEach(t),Vtr=r(oje," \u2014 "),NQ=n(oje,"A",{href:!0});var T9t=s(NQ);Xtr=r(T9t,"DebertaForTokenClassification"),T9t.forEach(t),ztr=r(oje," (DeBERTa model)"),oje.forEach(t),Wtr=i(K),$5=n(K,"LI",{});var rje=s($5);H2e=n(rje,"STRONG",{});var M9t=s(H2e);Qtr=r(M9t,"deberta-v2"),M9t.forEach(t),Utr=r(rje," \u2014 "),qQ=n(rje,"A",{href:!0});var E9t=s(qQ);Htr=r(E9t,"DebertaV2ForTokenClassification"),E9t.forEach(t),Jtr=r(rje," (DeBERTa-v2 model)"),rje.forEach(t),Ytr=i(K),k5=n(K,"LI",{});var tje=s(k5);J2e=n(tje,"STRONG",{});var C9t=s(J2e);Ktr=r(C9t,"distilbert"),C9t.forEach(t),Ztr=r(tje," \u2014 "),jQ=n(tje,"A",{href:!0});var w9t=s(jQ);ear=r(w9t,"DistilBertForTokenClassification"),w9t.forEach(t),oar=r(tje," (DistilBERT model)"),tje.forEach(t),rar=i(K),S5=n(K,"LI",{});var aje=s(S5);Y2e=n(aje,"STRONG",{});var A9t=s(Y2e);tar=r(A9t,"electra"),A9t.forEach(t),aar=r(aje," \u2014 "),DQ=n(aje,"A",{href:!0});var L9t=s(DQ);nar=r(L9t,"ElectraForTokenClassification"),L9t.forEach(t),sar=r(aje," (ELECTRA model)"),aje.forEach(t),lar=i(K),R5=n(K,"LI",{});var nje=s(R5);K2e=n(nje,"STRONG",{});var y9t=s(K2e);iar=r(y9t,"flaubert"),y9t.forEach(t),dar=r(nje," \u2014 "),GQ=n(nje,"A",{href:!0});var x9t=s(GQ);car=r(x9t,"FlaubertForTokenClassification"),x9t.forEach(t),far=r(nje," (FlauBERT model)"),nje.forEach(t),mar=i(K),P5=n(K,"LI",{});var sje=s(P5);Z2e=n(sje,"STRONG",{});var $9t=s(Z2e);gar=r($9t,"fnet"),$9t.forEach(t),har=r(sje," \u2014 "),OQ=n(sje,"A",{href:!0});var k9t=s(OQ);par=r(k9t,"FNetForTokenClassification"),k9t.forEach(t),_ar=r(sje," (FNet model)"),sje.forEach(t),uar=i(K),B5=n(K,"LI",{});var lje=s(B5);ebe=n(lje,"STRONG",{});var S9t=s(ebe);bar=r(S9t,"funnel"),S9t.forEach(t),Far=r(lje," \u2014 "),VQ=n(lje,"A",{href:!0});var R9t=s(VQ);Tar=r(R9t,"FunnelForTokenClassification"),R9t.forEach(t),Mar=r(lje," (Funnel Transformer model)"),lje.forEach(t),Ear=i(K),I5=n(K,"LI",{});var ije=s(I5);obe=n(ije,"STRONG",{});var P9t=s(obe);Car=r(P9t,"gpt2"),P9t.forEach(t),war=r(ije," \u2014 "),XQ=n(ije,"A",{href:!0});var B9t=s(XQ);Aar=r(B9t,"GPT2ForTokenClassification"),B9t.forEach(t),Lar=r(ije," (OpenAI GPT-2 model)"),ije.forEach(t),yar=i(K),N5=n(K,"LI",{});var dje=s(N5);rbe=n(dje,"STRONG",{});var I9t=s(rbe);xar=r(I9t,"ibert"),I9t.forEach(t),$ar=r(dje," \u2014 "),zQ=n(dje,"A",{href:!0});var N9t=s(zQ);kar=r(N9t,"IBertForTokenClassification"),N9t.forEach(t),Sar=r(dje," (I-BERT model)"),dje.forEach(t),Rar=i(K),q5=n(K,"LI",{});var cje=s(q5);tbe=n(cje,"STRONG",{});var q9t=s(tbe);Par=r(q9t,"layoutlm"),q9t.forEach(t),Bar=r(cje," \u2014 "),WQ=n(cje,"A",{href:!0});var j9t=s(WQ);Iar=r(j9t,"LayoutLMForTokenClassification"),j9t.forEach(t),Nar=r(cje," (LayoutLM model)"),cje.forEach(t),qar=i(K),j5=n(K,"LI",{});var fje=s(j5);abe=n(fje,"STRONG",{});var D9t=s(abe);jar=r(D9t,"layoutlmv2"),D9t.forEach(t),Dar=r(fje," \u2014 "),QQ=n(fje,"A",{href:!0});var G9t=s(QQ);Gar=r(G9t,"LayoutLMv2ForTokenClassification"),G9t.forEach(t),Oar=r(fje," (LayoutLMv2 model)"),fje.forEach(t),Var=i(K),D5=n(K,"LI",{});var mje=s(D5);nbe=n(mje,"STRONG",{});var O9t=s(nbe);Xar=r(O9t,"layoutlmv3"),O9t.forEach(t),zar=r(mje," \u2014 "),UQ=n(mje,"A",{href:!0});var V9t=s(UQ);War=r(V9t,"LayoutLMv3ForTokenClassification"),V9t.forEach(t),Qar=r(mje," (LayoutLMv3 model)"),mje.forEach(t),Uar=i(K),G5=n(K,"LI",{});var gje=s(G5);sbe=n(gje,"STRONG",{});var X9t=s(sbe);Har=r(X9t,"longformer"),X9t.forEach(t),Jar=r(gje," \u2014 "),HQ=n(gje,"A",{href:!0});var z9t=s(HQ);Yar=r(z9t,"LongformerForTokenClassification"),z9t.forEach(t),Kar=r(gje," (Longformer model)"),gje.forEach(t),Zar=i(K),O5=n(K,"LI",{});var hje=s(O5);lbe=n(hje,"STRONG",{});var W9t=s(lbe);enr=r(W9t,"luke"),W9t.forEach(t),onr=r(hje," \u2014 "),JQ=n(hje,"A",{href:!0});var Q9t=s(JQ);rnr=r(Q9t,"LukeForTokenClassification"),Q9t.forEach(t),tnr=r(hje," (LUKE model)"),hje.forEach(t),anr=i(K),V5=n(K,"LI",{});var pje=s(V5);ibe=n(pje,"STRONG",{});var U9t=s(ibe);nnr=r(U9t,"megatron-bert"),U9t.forEach(t),snr=r(pje," \u2014 "),YQ=n(pje,"A",{href:!0});var H9t=s(YQ);lnr=r(H9t,"MegatronBertForTokenClassification"),H9t.forEach(t),inr=r(pje," (Megatron-BERT model)"),pje.forEach(t),dnr=i(K),X5=n(K,"LI",{});var _je=s(X5);dbe=n(_je,"STRONG",{});var J9t=s(dbe);cnr=r(J9t,"mobilebert"),J9t.forEach(t),fnr=r(_je," \u2014 "),KQ=n(_je,"A",{href:!0});var Y9t=s(KQ);mnr=r(Y9t,"MobileBertForTokenClassification"),Y9t.forEach(t),gnr=r(_je," (MobileBERT model)"),_je.forEach(t),hnr=i(K),z5=n(K,"LI",{});var uje=s(z5);cbe=n(uje,"STRONG",{});var K9t=s(cbe);pnr=r(K9t,"mpnet"),K9t.forEach(t),_nr=r(uje," \u2014 "),ZQ=n(uje,"A",{href:!0});var Z9t=s(ZQ);unr=r(Z9t,"MPNetForTokenClassification"),Z9t.forEach(t),bnr=r(uje," (MPNet model)"),uje.forEach(t),vnr=i(K),W5=n(K,"LI",{});var bje=s(W5);fbe=n(bje,"STRONG",{});var ext=s(fbe);Fnr=r(ext,"nezha"),ext.forEach(t),Tnr=r(bje," \u2014 "),eU=n(bje,"A",{href:!0});var oxt=s(eU);Mnr=r(oxt,"NezhaForTokenClassification"),oxt.forEach(t),Enr=r(bje," (Nezha model)"),bje.forEach(t),Cnr=i(K),Q5=n(K,"LI",{});var vje=s(Q5);mbe=n(vje,"STRONG",{});var rxt=s(mbe);wnr=r(rxt,"nystromformer"),rxt.forEach(t),Anr=r(vje," \u2014 "),oU=n(vje,"A",{href:!0});var txt=s(oU);Lnr=r(txt,"NystromformerForTokenClassification"),txt.forEach(t),ynr=r(vje," (Nystr\xF6mformer model)"),vje.forEach(t),xnr=i(K),U5=n(K,"LI",{});var Fje=s(U5);gbe=n(Fje,"STRONG",{});var axt=s(gbe);$nr=r(axt,"qdqbert"),axt.forEach(t),knr=r(Fje," \u2014 "),rU=n(Fje,"A",{href:!0});var nxt=s(rU);Snr=r(nxt,"QDQBertForTokenClassification"),nxt.forEach(t),Rnr=r(Fje," (QDQBert model)"),Fje.forEach(t),Pnr=i(K),H5=n(K,"LI",{});var Tje=s(H5);hbe=n(Tje,"STRONG",{});var sxt=s(hbe);Bnr=r(sxt,"rembert"),sxt.forEach(t),Inr=r(Tje," \u2014 "),tU=n(Tje,"A",{href:!0});var lxt=s(tU);Nnr=r(lxt,"RemBertForTokenClassification"),lxt.forEach(t),qnr=r(Tje," (RemBERT model)"),Tje.forEach(t),jnr=i(K),J5=n(K,"LI",{});var Mje=s(J5);pbe=n(Mje,"STRONG",{});var ixt=s(pbe);Dnr=r(ixt,"roberta"),ixt.forEach(t),Gnr=r(Mje," \u2014 "),aU=n(Mje,"A",{href:!0});var dxt=s(aU);Onr=r(dxt,"RobertaForTokenClassification"),dxt.forEach(t),Vnr=r(Mje," (RoBERTa model)"),Mje.forEach(t),Xnr=i(K),Y5=n(K,"LI",{});var Eje=s(Y5);_be=n(Eje,"STRONG",{});var cxt=s(_be);znr=r(cxt,"roformer"),cxt.forEach(t),Wnr=r(Eje," \u2014 "),nU=n(Eje,"A",{href:!0});var fxt=s(nU);Qnr=r(fxt,"RoFormerForTokenClassification"),fxt.forEach(t),Unr=r(Eje," (RoFormer model)"),Eje.forEach(t),Hnr=i(K),K5=n(K,"LI",{});var Cje=s(K5);ube=n(Cje,"STRONG",{});var mxt=s(ube);Jnr=r(mxt,"squeezebert"),mxt.forEach(t),Ynr=r(Cje," \u2014 "),sU=n(Cje,"A",{href:!0});var gxt=s(sU);Knr=r(gxt,"SqueezeBertForTokenClassification"),gxt.forEach(t),Znr=r(Cje," (SqueezeBERT model)"),Cje.forEach(t),esr=i(K),Z5=n(K,"LI",{});var wje=s(Z5);bbe=n(wje,"STRONG",{});var hxt=s(bbe);osr=r(hxt,"xlm"),hxt.forEach(t),rsr=r(wje," \u2014 "),lU=n(wje,"A",{href:!0});var pxt=s(lU);tsr=r(pxt,"XLMForTokenClassification"),pxt.forEach(t),asr=r(wje," (XLM model)"),wje.forEach(t),nsr=i(K),e0=n(K,"LI",{});var Aje=s(e0);vbe=n(Aje,"STRONG",{});var _xt=s(vbe);ssr=r(_xt,"xlm-roberta"),_xt.forEach(t),lsr=r(Aje," \u2014 "),iU=n(Aje,"A",{href:!0});var uxt=s(iU);isr=r(uxt,"XLMRobertaForTokenClassification"),uxt.forEach(t),dsr=r(Aje," (XLM-RoBERTa model)"),Aje.forEach(t),csr=i(K),o0=n(K,"LI",{});var Lje=s(o0);Fbe=n(Lje,"STRONG",{});var bxt=s(Fbe);fsr=r(bxt,"xlm-roberta-xl"),bxt.forEach(t),msr=r(Lje," \u2014 "),dU=n(Lje,"A",{href:!0});var vxt=s(dU);gsr=r(vxt,"XLMRobertaXLForTokenClassification"),vxt.forEach(t),hsr=r(Lje," (XLM-RoBERTa-XL model)"),Lje.forEach(t),psr=i(K),r0=n(K,"LI",{});var yje=s(r0);Tbe=n(yje,"STRONG",{});var Fxt=s(Tbe);_sr=r(Fxt,"xlnet"),Fxt.forEach(t),usr=r(yje," \u2014 "),cU=n(yje,"A",{href:!0});var Txt=s(cU);bsr=r(Txt,"XLNetForTokenClassification"),Txt.forEach(t),vsr=r(yje," (XLNet model)"),yje.forEach(t),Fsr=i(K),t0=n(K,"LI",{});var xje=s(t0);Mbe=n(xje,"STRONG",{});var Mxt=s(Mbe);Tsr=r(Mxt,"yoso"),Mxt.forEach(t),Msr=r(xje," \u2014 "),fU=n(xje,"A",{href:!0});var Ext=s(fU);Esr=r(Ext,"YosoForTokenClassification"),Ext.forEach(t),Csr=r(xje," (YOSO model)"),xje.forEach(t),K.forEach(t),wsr=i(Ma),a0=n(Ma,"P",{});var $je=s(a0);Asr=r($je,"The model is set in evaluation mode by default using "),Ebe=n($je,"CODE",{});var Cxt=s(Ebe);Lsr=r(Cxt,"model.eval()"),Cxt.forEach(t),ysr=r($je,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=n($je,"CODE",{});var wxt=s(Cbe);xsr=r(wxt,"model.train()"),wxt.forEach(t),$je.forEach(t),$sr=i(Ma),T(n0.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),TUe=i(f),xd=n(f,"H2",{class:!0});var kJe=s(xd);s0=n(kJe,"A",{id:!0,class:!0,href:!0});var Axt=s(s0);wbe=n(Axt,"SPAN",{});var Lxt=s(wbe);T(k9.$$.fragment,Lxt),Lxt.forEach(t),Axt.forEach(t),ksr=i(kJe),Abe=n(kJe,"SPAN",{});var yxt=s(Abe);Ssr=r(yxt,"AutoModelForQuestionAnswering"),yxt.forEach(t),kJe.forEach(t),MUe=i(f),Oo=n(f,"DIV",{class:!0});var El=s(Oo);T(S9.$$.fragment,El),Rsr=i(El),$d=n(El,"P",{});var sne=s($d);Psr=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mU=n(sne,"A",{href:!0});var xxt=s(mU);Bsr=r(xxt,"from_pretrained()"),xxt.forEach(t),Isr=r(sne," class method or the "),gU=n(sne,"A",{href:!0});var $xt=s(gU);Nsr=r($xt,"from_config()"),$xt.forEach(t),qsr=r(sne,` class
method.`),sne.forEach(t),jsr=i(El),R9=n(El,"P",{});var SJe=s(R9);Dsr=r(SJe,"This class cannot be instantiated directly using "),Lbe=n(SJe,"CODE",{});var kxt=s(Lbe);Gsr=r(kxt,"__init__()"),kxt.forEach(t),Osr=r(SJe," (throws an error)."),SJe.forEach(t),Vsr=i(El),Tt=n(El,"DIV",{class:!0});var k7=s(Tt);T(P9.$$.fragment,k7),Xsr=i(k7),ybe=n(k7,"P",{});var Sxt=s(ybe);zsr=r(Sxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Sxt.forEach(t),Wsr=i(k7),kd=n(k7,"P",{});var lne=s(kd);Qsr=r(lne,`Note:
Loading a model from its configuration file does `),xbe=n(lne,"STRONG",{});var Rxt=s(xbe);Usr=r(Rxt,"not"),Rxt.forEach(t),Hsr=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(lne,"A",{href:!0});var Pxt=s(hU);Jsr=r(Pxt,"from_pretrained()"),Pxt.forEach(t),Ysr=r(lne," to load the model weights."),lne.forEach(t),Ksr=i(k7),T(l0.$$.fragment,k7),k7.forEach(t),Zsr=i(El),so=n(El,"DIV",{class:!0});var Ea=s(so);T(B9.$$.fragment,Ea),elr=i(Ea),$be=n(Ea,"P",{});var Bxt=s($be);olr=r(Bxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Bxt.forEach(t),rlr=i(Ea),Ka=n(Ea,"P",{});var S7=s(Ka);tlr=r(S7,"The model class to instantiate is selected based on the "),kbe=n(S7,"CODE",{});var Ixt=s(kbe);alr=r(Ixt,"model_type"),Ixt.forEach(t),nlr=r(S7,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(S7,"CODE",{});var Nxt=s(Sbe);slr=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),llr=r(S7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(S7,"CODE",{});var qxt=s(Rbe);ilr=r(qxt,"pretrained_model_name_or_path"),qxt.forEach(t),dlr=r(S7,":"),S7.forEach(t),clr=i(Ea),V=n(Ea,"UL",{});var X=s(V);i0=n(X,"LI",{});var kje=s(i0);Pbe=n(kje,"STRONG",{});var jxt=s(Pbe);flr=r(jxt,"albert"),jxt.forEach(t),mlr=r(kje," \u2014 "),pU=n(kje,"A",{href:!0});var Dxt=s(pU);glr=r(Dxt,"AlbertForQuestionAnswering"),Dxt.forEach(t),hlr=r(kje," (ALBERT model)"),kje.forEach(t),plr=i(X),d0=n(X,"LI",{});var Sje=s(d0);Bbe=n(Sje,"STRONG",{});var Gxt=s(Bbe);_lr=r(Gxt,"bart"),Gxt.forEach(t),ulr=r(Sje," \u2014 "),_U=n(Sje,"A",{href:!0});var Oxt=s(_U);blr=r(Oxt,"BartForQuestionAnswering"),Oxt.forEach(t),vlr=r(Sje," (BART model)"),Sje.forEach(t),Flr=i(X),c0=n(X,"LI",{});var Rje=s(c0);Ibe=n(Rje,"STRONG",{});var Vxt=s(Ibe);Tlr=r(Vxt,"bert"),Vxt.forEach(t),Mlr=r(Rje," \u2014 "),uU=n(Rje,"A",{href:!0});var Xxt=s(uU);Elr=r(Xxt,"BertForQuestionAnswering"),Xxt.forEach(t),Clr=r(Rje," (BERT model)"),Rje.forEach(t),wlr=i(X),f0=n(X,"LI",{});var Pje=s(f0);Nbe=n(Pje,"STRONG",{});var zxt=s(Nbe);Alr=r(zxt,"big_bird"),zxt.forEach(t),Llr=r(Pje," \u2014 "),bU=n(Pje,"A",{href:!0});var Wxt=s(bU);ylr=r(Wxt,"BigBirdForQuestionAnswering"),Wxt.forEach(t),xlr=r(Pje," (BigBird model)"),Pje.forEach(t),$lr=i(X),m0=n(X,"LI",{});var Bje=s(m0);qbe=n(Bje,"STRONG",{});var Qxt=s(qbe);klr=r(Qxt,"bigbird_pegasus"),Qxt.forEach(t),Slr=r(Bje," \u2014 "),vU=n(Bje,"A",{href:!0});var Uxt=s(vU);Rlr=r(Uxt,"BigBirdPegasusForQuestionAnswering"),Uxt.forEach(t),Plr=r(Bje," (BigBird-Pegasus model)"),Bje.forEach(t),Blr=i(X),g0=n(X,"LI",{});var Ije=s(g0);jbe=n(Ije,"STRONG",{});var Hxt=s(jbe);Ilr=r(Hxt,"camembert"),Hxt.forEach(t),Nlr=r(Ije," \u2014 "),FU=n(Ije,"A",{href:!0});var Jxt=s(FU);qlr=r(Jxt,"CamembertForQuestionAnswering"),Jxt.forEach(t),jlr=r(Ije," (CamemBERT model)"),Ije.forEach(t),Dlr=i(X),h0=n(X,"LI",{});var Nje=s(h0);Dbe=n(Nje,"STRONG",{});var Yxt=s(Dbe);Glr=r(Yxt,"canine"),Yxt.forEach(t),Olr=r(Nje," \u2014 "),TU=n(Nje,"A",{href:!0});var Kxt=s(TU);Vlr=r(Kxt,"CanineForQuestionAnswering"),Kxt.forEach(t),Xlr=r(Nje," (CANINE model)"),Nje.forEach(t),zlr=i(X),p0=n(X,"LI",{});var qje=s(p0);Gbe=n(qje,"STRONG",{});var Zxt=s(Gbe);Wlr=r(Zxt,"convbert"),Zxt.forEach(t),Qlr=r(qje," \u2014 "),MU=n(qje,"A",{href:!0});var e$t=s(MU);Ulr=r(e$t,"ConvBertForQuestionAnswering"),e$t.forEach(t),Hlr=r(qje," (ConvBERT model)"),qje.forEach(t),Jlr=i(X),_0=n(X,"LI",{});var jje=s(_0);Obe=n(jje,"STRONG",{});var o$t=s(Obe);Ylr=r(o$t,"data2vec-text"),o$t.forEach(t),Klr=r(jje," \u2014 "),EU=n(jje,"A",{href:!0});var r$t=s(EU);Zlr=r(r$t,"Data2VecTextForQuestionAnswering"),r$t.forEach(t),eir=r(jje," (Data2VecText model)"),jje.forEach(t),oir=i(X),u0=n(X,"LI",{});var Dje=s(u0);Vbe=n(Dje,"STRONG",{});var t$t=s(Vbe);rir=r(t$t,"deberta"),t$t.forEach(t),tir=r(Dje," \u2014 "),CU=n(Dje,"A",{href:!0});var a$t=s(CU);air=r(a$t,"DebertaForQuestionAnswering"),a$t.forEach(t),nir=r(Dje," (DeBERTa model)"),Dje.forEach(t),sir=i(X),b0=n(X,"LI",{});var Gje=s(b0);Xbe=n(Gje,"STRONG",{});var n$t=s(Xbe);lir=r(n$t,"deberta-v2"),n$t.forEach(t),iir=r(Gje," \u2014 "),wU=n(Gje,"A",{href:!0});var s$t=s(wU);dir=r(s$t,"DebertaV2ForQuestionAnswering"),s$t.forEach(t),cir=r(Gje," (DeBERTa-v2 model)"),Gje.forEach(t),fir=i(X),v0=n(X,"LI",{});var Oje=s(v0);zbe=n(Oje,"STRONG",{});var l$t=s(zbe);mir=r(l$t,"distilbert"),l$t.forEach(t),gir=r(Oje," \u2014 "),AU=n(Oje,"A",{href:!0});var i$t=s(AU);hir=r(i$t,"DistilBertForQuestionAnswering"),i$t.forEach(t),pir=r(Oje," (DistilBERT model)"),Oje.forEach(t),_ir=i(X),F0=n(X,"LI",{});var Vje=s(F0);Wbe=n(Vje,"STRONG",{});var d$t=s(Wbe);uir=r(d$t,"electra"),d$t.forEach(t),bir=r(Vje," \u2014 "),LU=n(Vje,"A",{href:!0});var c$t=s(LU);vir=r(c$t,"ElectraForQuestionAnswering"),c$t.forEach(t),Fir=r(Vje," (ELECTRA model)"),Vje.forEach(t),Tir=i(X),T0=n(X,"LI",{});var Xje=s(T0);Qbe=n(Xje,"STRONG",{});var f$t=s(Qbe);Mir=r(f$t,"flaubert"),f$t.forEach(t),Eir=r(Xje," \u2014 "),yU=n(Xje,"A",{href:!0});var m$t=s(yU);Cir=r(m$t,"FlaubertForQuestionAnsweringSimple"),m$t.forEach(t),wir=r(Xje," (FlauBERT model)"),Xje.forEach(t),Air=i(X),M0=n(X,"LI",{});var zje=s(M0);Ube=n(zje,"STRONG",{});var g$t=s(Ube);Lir=r(g$t,"fnet"),g$t.forEach(t),yir=r(zje," \u2014 "),xU=n(zje,"A",{href:!0});var h$t=s(xU);xir=r(h$t,"FNetForQuestionAnswering"),h$t.forEach(t),$ir=r(zje," (FNet model)"),zje.forEach(t),kir=i(X),E0=n(X,"LI",{});var Wje=s(E0);Hbe=n(Wje,"STRONG",{});var p$t=s(Hbe);Sir=r(p$t,"funnel"),p$t.forEach(t),Rir=r(Wje," \u2014 "),$U=n(Wje,"A",{href:!0});var _$t=s($U);Pir=r(_$t,"FunnelForQuestionAnswering"),_$t.forEach(t),Bir=r(Wje," (Funnel Transformer model)"),Wje.forEach(t),Iir=i(X),C0=n(X,"LI",{});var Qje=s(C0);Jbe=n(Qje,"STRONG",{});var u$t=s(Jbe);Nir=r(u$t,"gptj"),u$t.forEach(t),qir=r(Qje," \u2014 "),kU=n(Qje,"A",{href:!0});var b$t=s(kU);jir=r(b$t,"GPTJForQuestionAnswering"),b$t.forEach(t),Dir=r(Qje," (GPT-J model)"),Qje.forEach(t),Gir=i(X),w0=n(X,"LI",{});var Uje=s(w0);Ybe=n(Uje,"STRONG",{});var v$t=s(Ybe);Oir=r(v$t,"ibert"),v$t.forEach(t),Vir=r(Uje," \u2014 "),SU=n(Uje,"A",{href:!0});var F$t=s(SU);Xir=r(F$t,"IBertForQuestionAnswering"),F$t.forEach(t),zir=r(Uje," (I-BERT model)"),Uje.forEach(t),Wir=i(X),A0=n(X,"LI",{});var Hje=s(A0);Kbe=n(Hje,"STRONG",{});var T$t=s(Kbe);Qir=r(T$t,"layoutlmv2"),T$t.forEach(t),Uir=r(Hje," \u2014 "),RU=n(Hje,"A",{href:!0});var M$t=s(RU);Hir=r(M$t,"LayoutLMv2ForQuestionAnswering"),M$t.forEach(t),Jir=r(Hje," (LayoutLMv2 model)"),Hje.forEach(t),Yir=i(X),L0=n(X,"LI",{});var Jje=s(L0);Zbe=n(Jje,"STRONG",{});var E$t=s(Zbe);Kir=r(E$t,"layoutlmv3"),E$t.forEach(t),Zir=r(Jje," \u2014 "),PU=n(Jje,"A",{href:!0});var C$t=s(PU);edr=r(C$t,"LayoutLMv3ForQuestionAnswering"),C$t.forEach(t),odr=r(Jje," (LayoutLMv3 model)"),Jje.forEach(t),rdr=i(X),y0=n(X,"LI",{});var Yje=s(y0);eve=n(Yje,"STRONG",{});var w$t=s(eve);tdr=r(w$t,"led"),w$t.forEach(t),adr=r(Yje," \u2014 "),BU=n(Yje,"A",{href:!0});var A$t=s(BU);ndr=r(A$t,"LEDForQuestionAnswering"),A$t.forEach(t),sdr=r(Yje," (LED model)"),Yje.forEach(t),ldr=i(X),x0=n(X,"LI",{});var Kje=s(x0);ove=n(Kje,"STRONG",{});var L$t=s(ove);idr=r(L$t,"longformer"),L$t.forEach(t),ddr=r(Kje," \u2014 "),IU=n(Kje,"A",{href:!0});var y$t=s(IU);cdr=r(y$t,"LongformerForQuestionAnswering"),y$t.forEach(t),fdr=r(Kje," (Longformer model)"),Kje.forEach(t),mdr=i(X),$0=n(X,"LI",{});var Zje=s($0);rve=n(Zje,"STRONG",{});var x$t=s(rve);gdr=r(x$t,"luke"),x$t.forEach(t),hdr=r(Zje," \u2014 "),NU=n(Zje,"A",{href:!0});var $$t=s(NU);pdr=r($$t,"LukeForQuestionAnswering"),$$t.forEach(t),_dr=r(Zje," (LUKE model)"),Zje.forEach(t),udr=i(X),k0=n(X,"LI",{});var eDe=s(k0);tve=n(eDe,"STRONG",{});var k$t=s(tve);bdr=r(k$t,"lxmert"),k$t.forEach(t),vdr=r(eDe," \u2014 "),qU=n(eDe,"A",{href:!0});var S$t=s(qU);Fdr=r(S$t,"LxmertForQuestionAnswering"),S$t.forEach(t),Tdr=r(eDe," (LXMERT model)"),eDe.forEach(t),Mdr=i(X),S0=n(X,"LI",{});var oDe=s(S0);ave=n(oDe,"STRONG",{});var R$t=s(ave);Edr=r(R$t,"mbart"),R$t.forEach(t),Cdr=r(oDe," \u2014 "),jU=n(oDe,"A",{href:!0});var P$t=s(jU);wdr=r(P$t,"MBartForQuestionAnswering"),P$t.forEach(t),Adr=r(oDe," (mBART model)"),oDe.forEach(t),Ldr=i(X),R0=n(X,"LI",{});var rDe=s(R0);nve=n(rDe,"STRONG",{});var B$t=s(nve);ydr=r(B$t,"megatron-bert"),B$t.forEach(t),xdr=r(rDe," \u2014 "),DU=n(rDe,"A",{href:!0});var I$t=s(DU);$dr=r(I$t,"MegatronBertForQuestionAnswering"),I$t.forEach(t),kdr=r(rDe," (Megatron-BERT model)"),rDe.forEach(t),Sdr=i(X),P0=n(X,"LI",{});var tDe=s(P0);sve=n(tDe,"STRONG",{});var N$t=s(sve);Rdr=r(N$t,"mobilebert"),N$t.forEach(t),Pdr=r(tDe," \u2014 "),GU=n(tDe,"A",{href:!0});var q$t=s(GU);Bdr=r(q$t,"MobileBertForQuestionAnswering"),q$t.forEach(t),Idr=r(tDe," (MobileBERT model)"),tDe.forEach(t),Ndr=i(X),B0=n(X,"LI",{});var aDe=s(B0);lve=n(aDe,"STRONG",{});var j$t=s(lve);qdr=r(j$t,"mpnet"),j$t.forEach(t),jdr=r(aDe," \u2014 "),OU=n(aDe,"A",{href:!0});var D$t=s(OU);Ddr=r(D$t,"MPNetForQuestionAnswering"),D$t.forEach(t),Gdr=r(aDe," (MPNet model)"),aDe.forEach(t),Odr=i(X),I0=n(X,"LI",{});var nDe=s(I0);ive=n(nDe,"STRONG",{});var G$t=s(ive);Vdr=r(G$t,"mvp"),G$t.forEach(t),Xdr=r(nDe," \u2014 "),VU=n(nDe,"A",{href:!0});var O$t=s(VU);zdr=r(O$t,"MvpForQuestionAnswering"),O$t.forEach(t),Wdr=r(nDe," (MVP model)"),nDe.forEach(t),Qdr=i(X),N0=n(X,"LI",{});var sDe=s(N0);dve=n(sDe,"STRONG",{});var V$t=s(dve);Udr=r(V$t,"nezha"),V$t.forEach(t),Hdr=r(sDe," \u2014 "),XU=n(sDe,"A",{href:!0});var X$t=s(XU);Jdr=r(X$t,"NezhaForQuestionAnswering"),X$t.forEach(t),Ydr=r(sDe," (Nezha model)"),sDe.forEach(t),Kdr=i(X),q0=n(X,"LI",{});var lDe=s(q0);cve=n(lDe,"STRONG",{});var z$t=s(cve);Zdr=r(z$t,"nystromformer"),z$t.forEach(t),ecr=r(lDe," \u2014 "),zU=n(lDe,"A",{href:!0});var W$t=s(zU);ocr=r(W$t,"NystromformerForQuestionAnswering"),W$t.forEach(t),rcr=r(lDe," (Nystr\xF6mformer model)"),lDe.forEach(t),tcr=i(X),j0=n(X,"LI",{});var iDe=s(j0);fve=n(iDe,"STRONG",{});var Q$t=s(fve);acr=r(Q$t,"qdqbert"),Q$t.forEach(t),ncr=r(iDe," \u2014 "),WU=n(iDe,"A",{href:!0});var U$t=s(WU);scr=r(U$t,"QDQBertForQuestionAnswering"),U$t.forEach(t),lcr=r(iDe," (QDQBert model)"),iDe.forEach(t),icr=i(X),D0=n(X,"LI",{});var dDe=s(D0);mve=n(dDe,"STRONG",{});var H$t=s(mve);dcr=r(H$t,"reformer"),H$t.forEach(t),ccr=r(dDe," \u2014 "),QU=n(dDe,"A",{href:!0});var J$t=s(QU);fcr=r(J$t,"ReformerForQuestionAnswering"),J$t.forEach(t),mcr=r(dDe," (Reformer model)"),dDe.forEach(t),gcr=i(X),G0=n(X,"LI",{});var cDe=s(G0);gve=n(cDe,"STRONG",{});var Y$t=s(gve);hcr=r(Y$t,"rembert"),Y$t.forEach(t),pcr=r(cDe," \u2014 "),UU=n(cDe,"A",{href:!0});var K$t=s(UU);_cr=r(K$t,"RemBertForQuestionAnswering"),K$t.forEach(t),ucr=r(cDe," (RemBERT model)"),cDe.forEach(t),bcr=i(X),O0=n(X,"LI",{});var fDe=s(O0);hve=n(fDe,"STRONG",{});var Z$t=s(hve);vcr=r(Z$t,"roberta"),Z$t.forEach(t),Fcr=r(fDe," \u2014 "),HU=n(fDe,"A",{href:!0});var ekt=s(HU);Tcr=r(ekt,"RobertaForQuestionAnswering"),ekt.forEach(t),Mcr=r(fDe," (RoBERTa model)"),fDe.forEach(t),Ecr=i(X),V0=n(X,"LI",{});var mDe=s(V0);pve=n(mDe,"STRONG",{});var okt=s(pve);Ccr=r(okt,"roformer"),okt.forEach(t),wcr=r(mDe," \u2014 "),JU=n(mDe,"A",{href:!0});var rkt=s(JU);Acr=r(rkt,"RoFormerForQuestionAnswering"),rkt.forEach(t),Lcr=r(mDe," (RoFormer model)"),mDe.forEach(t),ycr=i(X),X0=n(X,"LI",{});var gDe=s(X0);_ve=n(gDe,"STRONG",{});var tkt=s(_ve);xcr=r(tkt,"splinter"),tkt.forEach(t),$cr=r(gDe," \u2014 "),YU=n(gDe,"A",{href:!0});var akt=s(YU);kcr=r(akt,"SplinterForQuestionAnswering"),akt.forEach(t),Scr=r(gDe," (Splinter model)"),gDe.forEach(t),Rcr=i(X),z0=n(X,"LI",{});var hDe=s(z0);uve=n(hDe,"STRONG",{});var nkt=s(uve);Pcr=r(nkt,"squeezebert"),nkt.forEach(t),Bcr=r(hDe," \u2014 "),KU=n(hDe,"A",{href:!0});var skt=s(KU);Icr=r(skt,"SqueezeBertForQuestionAnswering"),skt.forEach(t),Ncr=r(hDe," (SqueezeBERT model)"),hDe.forEach(t),qcr=i(X),W0=n(X,"LI",{});var pDe=s(W0);bve=n(pDe,"STRONG",{});var lkt=s(bve);jcr=r(lkt,"xlm"),lkt.forEach(t),Dcr=r(pDe," \u2014 "),ZU=n(pDe,"A",{href:!0});var ikt=s(ZU);Gcr=r(ikt,"XLMForQuestionAnsweringSimple"),ikt.forEach(t),Ocr=r(pDe," (XLM model)"),pDe.forEach(t),Vcr=i(X),Q0=n(X,"LI",{});var _De=s(Q0);vve=n(_De,"STRONG",{});var dkt=s(vve);Xcr=r(dkt,"xlm-roberta"),dkt.forEach(t),zcr=r(_De," \u2014 "),eH=n(_De,"A",{href:!0});var ckt=s(eH);Wcr=r(ckt,"XLMRobertaForQuestionAnswering"),ckt.forEach(t),Qcr=r(_De," (XLM-RoBERTa model)"),_De.forEach(t),Ucr=i(X),U0=n(X,"LI",{});var uDe=s(U0);Fve=n(uDe,"STRONG",{});var fkt=s(Fve);Hcr=r(fkt,"xlm-roberta-xl"),fkt.forEach(t),Jcr=r(uDe," \u2014 "),oH=n(uDe,"A",{href:!0});var mkt=s(oH);Ycr=r(mkt,"XLMRobertaXLForQuestionAnswering"),mkt.forEach(t),Kcr=r(uDe," (XLM-RoBERTa-XL model)"),uDe.forEach(t),Zcr=i(X),H0=n(X,"LI",{});var bDe=s(H0);Tve=n(bDe,"STRONG",{});var gkt=s(Tve);efr=r(gkt,"xlnet"),gkt.forEach(t),ofr=r(bDe," \u2014 "),rH=n(bDe,"A",{href:!0});var hkt=s(rH);rfr=r(hkt,"XLNetForQuestionAnsweringSimple"),hkt.forEach(t),tfr=r(bDe," (XLNet model)"),bDe.forEach(t),afr=i(X),J0=n(X,"LI",{});var vDe=s(J0);Mve=n(vDe,"STRONG",{});var pkt=s(Mve);nfr=r(pkt,"yoso"),pkt.forEach(t),sfr=r(vDe," \u2014 "),tH=n(vDe,"A",{href:!0});var _kt=s(tH);lfr=r(_kt,"YosoForQuestionAnswering"),_kt.forEach(t),ifr=r(vDe," (YOSO model)"),vDe.forEach(t),X.forEach(t),dfr=i(Ea),Y0=n(Ea,"P",{});var FDe=s(Y0);cfr=r(FDe,"The model is set in evaluation mode by default using "),Eve=n(FDe,"CODE",{});var ukt=s(Eve);ffr=r(ukt,"model.eval()"),ukt.forEach(t),mfr=r(FDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=n(FDe,"CODE",{});var bkt=s(Cve);gfr=r(bkt,"model.train()"),bkt.forEach(t),FDe.forEach(t),hfr=i(Ea),T(K0.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),EUe=i(f),Sd=n(f,"H2",{class:!0});var RJe=s(Sd);Z0=n(RJe,"A",{id:!0,class:!0,href:!0});var vkt=s(Z0);wve=n(vkt,"SPAN",{});var Fkt=s(wve);T(I9.$$.fragment,Fkt),Fkt.forEach(t),vkt.forEach(t),pfr=i(RJe),Ave=n(RJe,"SPAN",{});var Tkt=s(Ave);_fr=r(Tkt,"AutoModelForTableQuestionAnswering"),Tkt.forEach(t),RJe.forEach(t),CUe=i(f),Vo=n(f,"DIV",{class:!0});var Cl=s(Vo);T(N9.$$.fragment,Cl),ufr=i(Cl),Rd=n(Cl,"P",{});var ine=s(Rd);bfr=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aH=n(ine,"A",{href:!0});var Mkt=s(aH);vfr=r(Mkt,"from_pretrained()"),Mkt.forEach(t),Ffr=r(ine," class method or the "),nH=n(ine,"A",{href:!0});var Ekt=s(nH);Tfr=r(Ekt,"from_config()"),Ekt.forEach(t),Mfr=r(ine,` class
method.`),ine.forEach(t),Efr=i(Cl),q9=n(Cl,"P",{});var PJe=s(q9);Cfr=r(PJe,"This class cannot be instantiated directly using "),Lve=n(PJe,"CODE",{});var Ckt=s(Lve);wfr=r(Ckt,"__init__()"),Ckt.forEach(t),Afr=r(PJe," (throws an error)."),PJe.forEach(t),Lfr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var R7=s(Mt);T(j9.$$.fragment,R7),yfr=i(R7),yve=n(R7,"P",{});var wkt=s(yve);xfr=r(wkt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wkt.forEach(t),$fr=i(R7),Pd=n(R7,"P",{});var dne=s(Pd);kfr=r(dne,`Note:
Loading a model from its configuration file does `),xve=n(dne,"STRONG",{});var Akt=s(xve);Sfr=r(Akt,"not"),Akt.forEach(t),Rfr=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(dne,"A",{href:!0});var Lkt=s(sH);Pfr=r(Lkt,"from_pretrained()"),Lkt.forEach(t),Bfr=r(dne," to load the model weights."),dne.forEach(t),Ifr=i(R7),T(eF.$$.fragment,R7),R7.forEach(t),Nfr=i(Cl),lo=n(Cl,"DIV",{class:!0});var Ca=s(lo);T(D9.$$.fragment,Ca),qfr=i(Ca),$ve=n(Ca,"P",{});var ykt=s($ve);jfr=r(ykt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ykt.forEach(t),Dfr=i(Ca),Za=n(Ca,"P",{});var P7=s(Za);Gfr=r(P7,"The model class to instantiate is selected based on the "),kve=n(P7,"CODE",{});var xkt=s(kve);Ofr=r(xkt,"model_type"),xkt.forEach(t),Vfr=r(P7,` property of the config object (either
passed as an argument or loaded from `),Sve=n(P7,"CODE",{});var $kt=s(Sve);Xfr=r($kt,"pretrained_model_name_or_path"),$kt.forEach(t),zfr=r(P7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(P7,"CODE",{});var kkt=s(Rve);Wfr=r(kkt,"pretrained_model_name_or_path"),kkt.forEach(t),Qfr=r(P7,":"),P7.forEach(t),Ufr=i(Ca),Pve=n(Ca,"UL",{});var Skt=s(Pve);oF=n(Skt,"LI",{});var TDe=s(oF);Bve=n(TDe,"STRONG",{});var Rkt=s(Bve);Hfr=r(Rkt,"tapas"),Rkt.forEach(t),Jfr=r(TDe," \u2014 "),lH=n(TDe,"A",{href:!0});var Pkt=s(lH);Yfr=r(Pkt,"TapasForQuestionAnswering"),Pkt.forEach(t),Kfr=r(TDe," (TAPAS model)"),TDe.forEach(t),Skt.forEach(t),Zfr=i(Ca),rF=n(Ca,"P",{});var MDe=s(rF);emr=r(MDe,"The model is set in evaluation mode by default using "),Ive=n(MDe,"CODE",{});var Bkt=s(Ive);omr=r(Bkt,"model.eval()"),Bkt.forEach(t),rmr=r(MDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nve=n(MDe,"CODE",{});var Ikt=s(Nve);tmr=r(Ikt,"model.train()"),Ikt.forEach(t),MDe.forEach(t),amr=i(Ca),T(tF.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),wUe=i(f),Bd=n(f,"H2",{class:!0});var BJe=s(Bd);aF=n(BJe,"A",{id:!0,class:!0,href:!0});var Nkt=s(aF);qve=n(Nkt,"SPAN",{});var qkt=s(qve);T(G9.$$.fragment,qkt),qkt.forEach(t),Nkt.forEach(t),nmr=i(BJe),jve=n(BJe,"SPAN",{});var jkt=s(jve);smr=r(jkt,"AutoModelForImageClassification"),jkt.forEach(t),BJe.forEach(t),AUe=i(f),Xo=n(f,"DIV",{class:!0});var wl=s(Xo);T(O9.$$.fragment,wl),lmr=i(wl),Id=n(wl,"P",{});var cne=s(Id);imr=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iH=n(cne,"A",{href:!0});var Dkt=s(iH);dmr=r(Dkt,"from_pretrained()"),Dkt.forEach(t),cmr=r(cne," class method or the "),dH=n(cne,"A",{href:!0});var Gkt=s(dH);fmr=r(Gkt,"from_config()"),Gkt.forEach(t),mmr=r(cne,` class
method.`),cne.forEach(t),gmr=i(wl),V9=n(wl,"P",{});var IJe=s(V9);hmr=r(IJe,"This class cannot be instantiated directly using "),Dve=n(IJe,"CODE",{});var Okt=s(Dve);pmr=r(Okt,"__init__()"),Okt.forEach(t),_mr=r(IJe," (throws an error)."),IJe.forEach(t),umr=i(wl),Et=n(wl,"DIV",{class:!0});var B7=s(Et);T(X9.$$.fragment,B7),bmr=i(B7),Gve=n(B7,"P",{});var Vkt=s(Gve);vmr=r(Vkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Vkt.forEach(t),Fmr=i(B7),Nd=n(B7,"P",{});var fne=s(Nd);Tmr=r(fne,`Note:
Loading a model from its configuration file does `),Ove=n(fne,"STRONG",{});var Xkt=s(Ove);Mmr=r(Xkt,"not"),Xkt.forEach(t),Emr=r(fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(fne,"A",{href:!0});var zkt=s(cH);Cmr=r(zkt,"from_pretrained()"),zkt.forEach(t),wmr=r(fne," to load the model weights."),fne.forEach(t),Amr=i(B7),T(nF.$$.fragment,B7),B7.forEach(t),Lmr=i(wl),io=n(wl,"DIV",{class:!0});var wa=s(io);T(z9.$$.fragment,wa),ymr=i(wa),Vve=n(wa,"P",{});var Wkt=s(Vve);xmr=r(Wkt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wkt.forEach(t),$mr=i(wa),en=n(wa,"P",{});var I7=s(en);kmr=r(I7,"The model class to instantiate is selected based on the "),Xve=n(I7,"CODE",{});var Qkt=s(Xve);Smr=r(Qkt,"model_type"),Qkt.forEach(t),Rmr=r(I7,` property of the config object (either
passed as an argument or loaded from `),zve=n(I7,"CODE",{});var Ukt=s(zve);Pmr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),Bmr=r(I7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(I7,"CODE",{});var Hkt=s(Wve);Imr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),Nmr=r(I7,":"),I7.forEach(t),qmr=i(wa),be=n(wa,"UL",{});var Fe=s(be);sF=n(Fe,"LI",{});var EDe=s(sF);Qve=n(EDe,"STRONG",{});var Jkt=s(Qve);jmr=r(Jkt,"beit"),Jkt.forEach(t),Dmr=r(EDe," \u2014 "),fH=n(EDe,"A",{href:!0});var Ykt=s(fH);Gmr=r(Ykt,"BeitForImageClassification"),Ykt.forEach(t),Omr=r(EDe," (BEiT model)"),EDe.forEach(t),Vmr=i(Fe),lF=n(Fe,"LI",{});var CDe=s(lF);Uve=n(CDe,"STRONG",{});var Kkt=s(Uve);Xmr=r(Kkt,"convnext"),Kkt.forEach(t),zmr=r(CDe," \u2014 "),mH=n(CDe,"A",{href:!0});var Zkt=s(mH);Wmr=r(Zkt,"ConvNextForImageClassification"),Zkt.forEach(t),Qmr=r(CDe," (ConvNeXT model)"),CDe.forEach(t),Umr=i(Fe),iF=n(Fe,"LI",{});var wDe=s(iF);Hve=n(wDe,"STRONG",{});var eSt=s(Hve);Hmr=r(eSt,"cvt"),eSt.forEach(t),Jmr=r(wDe," \u2014 "),gH=n(wDe,"A",{href:!0});var oSt=s(gH);Ymr=r(oSt,"CvtForImageClassification"),oSt.forEach(t),Kmr=r(wDe," (CvT model)"),wDe.forEach(t),Zmr=i(Fe),dF=n(Fe,"LI",{});var ADe=s(dF);Jve=n(ADe,"STRONG",{});var rSt=s(Jve);egr=r(rSt,"data2vec-vision"),rSt.forEach(t),ogr=r(ADe," \u2014 "),hH=n(ADe,"A",{href:!0});var tSt=s(hH);rgr=r(tSt,"Data2VecVisionForImageClassification"),tSt.forEach(t),tgr=r(ADe," (Data2VecVision model)"),ADe.forEach(t),agr=i(Fe),sl=n(Fe,"LI",{});var eP=s(sl);Yve=n(eP,"STRONG",{});var aSt=s(Yve);ngr=r(aSt,"deit"),aSt.forEach(t),sgr=r(eP," \u2014 "),pH=n(eP,"A",{href:!0});var nSt=s(pH);lgr=r(nSt,"DeiTForImageClassification"),nSt.forEach(t),igr=r(eP," or "),_H=n(eP,"A",{href:!0});var sSt=s(_H);dgr=r(sSt,"DeiTForImageClassificationWithTeacher"),sSt.forEach(t),cgr=r(eP," (DeiT model)"),eP.forEach(t),fgr=i(Fe),cF=n(Fe,"LI",{});var LDe=s(cF);Kve=n(LDe,"STRONG",{});var lSt=s(Kve);mgr=r(lSt,"imagegpt"),lSt.forEach(t),ggr=r(LDe," \u2014 "),uH=n(LDe,"A",{href:!0});var iSt=s(uH);hgr=r(iSt,"ImageGPTForImageClassification"),iSt.forEach(t),pgr=r(LDe," (ImageGPT model)"),LDe.forEach(t),_gr=i(Fe),ll=n(Fe,"LI",{});var oP=s(ll);Zve=n(oP,"STRONG",{});var dSt=s(Zve);ugr=r(dSt,"levit"),dSt.forEach(t),bgr=r(oP," \u2014 "),bH=n(oP,"A",{href:!0});var cSt=s(bH);vgr=r(cSt,"LevitForImageClassification"),cSt.forEach(t),Fgr=r(oP," or "),vH=n(oP,"A",{href:!0});var fSt=s(vH);Tgr=r(fSt,"LevitForImageClassificationWithTeacher"),fSt.forEach(t),Mgr=r(oP," (LeViT model)"),oP.forEach(t),Egr=i(Fe),fF=n(Fe,"LI",{});var yDe=s(fF);e5e=n(yDe,"STRONG",{});var mSt=s(e5e);Cgr=r(mSt,"mobilevit"),mSt.forEach(t),wgr=r(yDe," \u2014 "),FH=n(yDe,"A",{href:!0});var gSt=s(FH);Agr=r(gSt,"MobileViTForImageClassification"),gSt.forEach(t),Lgr=r(yDe," (MobileViT model)"),yDe.forEach(t),ygr=i(Fe),Ct=n(Fe,"LI",{});var Zf=s(Ct);o5e=n(Zf,"STRONG",{});var hSt=s(o5e);xgr=r(hSt,"perceiver"),hSt.forEach(t),$gr=r(Zf," \u2014 "),TH=n(Zf,"A",{href:!0});var pSt=s(TH);kgr=r(pSt,"PerceiverForImageClassificationLearned"),pSt.forEach(t),Sgr=r(Zf," or "),MH=n(Zf,"A",{href:!0});var _St=s(MH);Rgr=r(_St,"PerceiverForImageClassificationFourier"),_St.forEach(t),Pgr=r(Zf," or "),EH=n(Zf,"A",{href:!0});var uSt=s(EH);Bgr=r(uSt,"PerceiverForImageClassificationConvProcessing"),uSt.forEach(t),Igr=r(Zf," (Perceiver model)"),Zf.forEach(t),Ngr=i(Fe),mF=n(Fe,"LI",{});var xDe=s(mF);r5e=n(xDe,"STRONG",{});var bSt=s(r5e);qgr=r(bSt,"poolformer"),bSt.forEach(t),jgr=r(xDe," \u2014 "),CH=n(xDe,"A",{href:!0});var vSt=s(CH);Dgr=r(vSt,"PoolFormerForImageClassification"),vSt.forEach(t),Ggr=r(xDe," (PoolFormer model)"),xDe.forEach(t),Ogr=i(Fe),gF=n(Fe,"LI",{});var $De=s(gF);t5e=n($De,"STRONG",{});var FSt=s(t5e);Vgr=r(FSt,"regnet"),FSt.forEach(t),Xgr=r($De," \u2014 "),wH=n($De,"A",{href:!0});var TSt=s(wH);zgr=r(TSt,"RegNetForImageClassification"),TSt.forEach(t),Wgr=r($De," (RegNet model)"),$De.forEach(t),Qgr=i(Fe),hF=n(Fe,"LI",{});var kDe=s(hF);a5e=n(kDe,"STRONG",{});var MSt=s(a5e);Ugr=r(MSt,"resnet"),MSt.forEach(t),Hgr=r(kDe," \u2014 "),AH=n(kDe,"A",{href:!0});var ESt=s(AH);Jgr=r(ESt,"ResNetForImageClassification"),ESt.forEach(t),Ygr=r(kDe," (ResNet model)"),kDe.forEach(t),Kgr=i(Fe),pF=n(Fe,"LI",{});var SDe=s(pF);n5e=n(SDe,"STRONG",{});var CSt=s(n5e);Zgr=r(CSt,"segformer"),CSt.forEach(t),ehr=r(SDe," \u2014 "),LH=n(SDe,"A",{href:!0});var wSt=s(LH);ohr=r(wSt,"SegformerForImageClassification"),wSt.forEach(t),rhr=r(SDe," (SegFormer model)"),SDe.forEach(t),thr=i(Fe),_F=n(Fe,"LI",{});var RDe=s(_F);s5e=n(RDe,"STRONG",{});var ASt=s(s5e);ahr=r(ASt,"swin"),ASt.forEach(t),nhr=r(RDe," \u2014 "),yH=n(RDe,"A",{href:!0});var LSt=s(yH);shr=r(LSt,"SwinForImageClassification"),LSt.forEach(t),lhr=r(RDe," (Swin Transformer model)"),RDe.forEach(t),ihr=i(Fe),uF=n(Fe,"LI",{});var PDe=s(uF);l5e=n(PDe,"STRONG",{});var ySt=s(l5e);dhr=r(ySt,"swinv2"),ySt.forEach(t),chr=r(PDe," \u2014 "),xH=n(PDe,"A",{href:!0});var xSt=s(xH);fhr=r(xSt,"Swinv2ForImageClassification"),xSt.forEach(t),mhr=r(PDe," (Swin Transformer V2 model)"),PDe.forEach(t),ghr=i(Fe),bF=n(Fe,"LI",{});var BDe=s(bF);i5e=n(BDe,"STRONG",{});var $St=s(i5e);hhr=r($St,"van"),$St.forEach(t),phr=r(BDe," \u2014 "),$H=n(BDe,"A",{href:!0});var kSt=s($H);_hr=r(kSt,"VanForImageClassification"),kSt.forEach(t),uhr=r(BDe," (VAN model)"),BDe.forEach(t),bhr=i(Fe),vF=n(Fe,"LI",{});var IDe=s(vF);d5e=n(IDe,"STRONG",{});var SSt=s(d5e);vhr=r(SSt,"vit"),SSt.forEach(t),Fhr=r(IDe," \u2014 "),kH=n(IDe,"A",{href:!0});var RSt=s(kH);Thr=r(RSt,"ViTForImageClassification"),RSt.forEach(t),Mhr=r(IDe," (ViT model)"),IDe.forEach(t),Fe.forEach(t),Ehr=i(wa),FF=n(wa,"P",{});var NDe=s(FF);Chr=r(NDe,"The model is set in evaluation mode by default using "),c5e=n(NDe,"CODE",{});var PSt=s(c5e);whr=r(PSt,"model.eval()"),PSt.forEach(t),Ahr=r(NDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f5e=n(NDe,"CODE",{});var BSt=s(f5e);Lhr=r(BSt,"model.train()"),BSt.forEach(t),NDe.forEach(t),yhr=i(wa),T(TF.$$.fragment,wa),wa.forEach(t),wl.forEach(t),LUe=i(f),qd=n(f,"H2",{class:!0});var NJe=s(qd);MF=n(NJe,"A",{id:!0,class:!0,href:!0});var ISt=s(MF);m5e=n(ISt,"SPAN",{});var NSt=s(m5e);T(W9.$$.fragment,NSt),NSt.forEach(t),ISt.forEach(t),xhr=i(NJe),g5e=n(NJe,"SPAN",{});var qSt=s(g5e);$hr=r(qSt,"AutoModelForVideoClassification"),qSt.forEach(t),NJe.forEach(t),yUe=i(f),zo=n(f,"DIV",{class:!0});var Al=s(zo);T(Q9.$$.fragment,Al),khr=i(Al),jd=n(Al,"P",{});var mne=s(jd);Shr=r(mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),SH=n(mne,"A",{href:!0});var jSt=s(SH);Rhr=r(jSt,"from_pretrained()"),jSt.forEach(t),Phr=r(mne," class method or the "),RH=n(mne,"A",{href:!0});var DSt=s(RH);Bhr=r(DSt,"from_config()"),DSt.forEach(t),Ihr=r(mne,` class
method.`),mne.forEach(t),Nhr=i(Al),U9=n(Al,"P",{});var qJe=s(U9);qhr=r(qJe,"This class cannot be instantiated directly using "),h5e=n(qJe,"CODE",{});var GSt=s(h5e);jhr=r(GSt,"__init__()"),GSt.forEach(t),Dhr=r(qJe," (throws an error)."),qJe.forEach(t),Ghr=i(Al),wt=n(Al,"DIV",{class:!0});var N7=s(wt);T(H9.$$.fragment,N7),Ohr=i(N7),p5e=n(N7,"P",{});var OSt=s(p5e);Vhr=r(OSt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),OSt.forEach(t),Xhr=i(N7),Dd=n(N7,"P",{});var gne=s(Dd);zhr=r(gne,`Note:
Loading a model from its configuration file does `),_5e=n(gne,"STRONG",{});var VSt=s(_5e);Whr=r(VSt,"not"),VSt.forEach(t),Qhr=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(gne,"A",{href:!0});var XSt=s(PH);Uhr=r(XSt,"from_pretrained()"),XSt.forEach(t),Hhr=r(gne," to load the model weights."),gne.forEach(t),Jhr=i(N7),T(EF.$$.fragment,N7),N7.forEach(t),Yhr=i(Al),co=n(Al,"DIV",{class:!0});var Aa=s(co);T(J9.$$.fragment,Aa),Khr=i(Aa),u5e=n(Aa,"P",{});var zSt=s(u5e);Zhr=r(zSt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),zSt.forEach(t),epr=i(Aa),on=n(Aa,"P",{});var q7=s(on);opr=r(q7,"The model class to instantiate is selected based on the "),b5e=n(q7,"CODE",{});var WSt=s(b5e);rpr=r(WSt,"model_type"),WSt.forEach(t),tpr=r(q7,` property of the config object (either
passed as an argument or loaded from `),v5e=n(q7,"CODE",{});var QSt=s(v5e);apr=r(QSt,"pretrained_model_name_or_path"),QSt.forEach(t),npr=r(q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=n(q7,"CODE",{});var USt=s(F5e);spr=r(USt,"pretrained_model_name_or_path"),USt.forEach(t),lpr=r(q7,":"),q7.forEach(t),ipr=i(Aa),T5e=n(Aa,"UL",{});var HSt=s(T5e);CF=n(HSt,"LI",{});var qDe=s(CF);M5e=n(qDe,"STRONG",{});var JSt=s(M5e);dpr=r(JSt,"videomae"),JSt.forEach(t),cpr=r(qDe," \u2014 "),BH=n(qDe,"A",{href:!0});var YSt=s(BH);fpr=r(YSt,"VideoMAEForVideoClassification"),YSt.forEach(t),mpr=r(qDe," (VideoMAE model)"),qDe.forEach(t),HSt.forEach(t),gpr=i(Aa),wF=n(Aa,"P",{});var jDe=s(wF);hpr=r(jDe,"The model is set in evaluation mode by default using "),E5e=n(jDe,"CODE",{});var KSt=s(E5e);ppr=r(KSt,"model.eval()"),KSt.forEach(t),_pr=r(jDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C5e=n(jDe,"CODE",{});var ZSt=s(C5e);upr=r(ZSt,"model.train()"),ZSt.forEach(t),jDe.forEach(t),bpr=i(Aa),T(AF.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),xUe=i(f),Gd=n(f,"H2",{class:!0});var jJe=s(Gd);LF=n(jJe,"A",{id:!0,class:!0,href:!0});var eRt=s(LF);w5e=n(eRt,"SPAN",{});var oRt=s(w5e);T(Y9.$$.fragment,oRt),oRt.forEach(t),eRt.forEach(t),vpr=i(jJe),A5e=n(jJe,"SPAN",{});var rRt=s(A5e);Fpr=r(rRt,"AutoModelForVision2Seq"),rRt.forEach(t),jJe.forEach(t),$Ue=i(f),Wo=n(f,"DIV",{class:!0});var Ll=s(Wo);T(K9.$$.fragment,Ll),Tpr=i(Ll),Od=n(Ll,"P",{});var hne=s(Od);Mpr=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IH=n(hne,"A",{href:!0});var tRt=s(IH);Epr=r(tRt,"from_pretrained()"),tRt.forEach(t),Cpr=r(hne," class method or the "),NH=n(hne,"A",{href:!0});var aRt=s(NH);wpr=r(aRt,"from_config()"),aRt.forEach(t),Apr=r(hne,` class
method.`),hne.forEach(t),Lpr=i(Ll),Z9=n(Ll,"P",{});var DJe=s(Z9);ypr=r(DJe,"This class cannot be instantiated directly using "),L5e=n(DJe,"CODE",{});var nRt=s(L5e);xpr=r(nRt,"__init__()"),nRt.forEach(t),$pr=r(DJe," (throws an error)."),DJe.forEach(t),kpr=i(Ll),At=n(Ll,"DIV",{class:!0});var j7=s(At);T(ex.$$.fragment,j7),Spr=i(j7),y5e=n(j7,"P",{});var sRt=s(y5e);Rpr=r(sRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sRt.forEach(t),Ppr=i(j7),Vd=n(j7,"P",{});var pne=s(Vd);Bpr=r(pne,`Note:
Loading a model from its configuration file does `),x5e=n(pne,"STRONG",{});var lRt=s(x5e);Ipr=r(lRt,"not"),lRt.forEach(t),Npr=r(pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(pne,"A",{href:!0});var iRt=s(qH);qpr=r(iRt,"from_pretrained()"),iRt.forEach(t),jpr=r(pne," to load the model weights."),pne.forEach(t),Dpr=i(j7),T(yF.$$.fragment,j7),j7.forEach(t),Gpr=i(Ll),fo=n(Ll,"DIV",{class:!0});var La=s(fo);T(ox.$$.fragment,La),Opr=i(La),$5e=n(La,"P",{});var dRt=s($5e);Vpr=r(dRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dRt.forEach(t),Xpr=i(La),rn=n(La,"P",{});var D7=s(rn);zpr=r(D7,"The model class to instantiate is selected based on the "),k5e=n(D7,"CODE",{});var cRt=s(k5e);Wpr=r(cRt,"model_type"),cRt.forEach(t),Qpr=r(D7,` property of the config object (either
passed as an argument or loaded from `),S5e=n(D7,"CODE",{});var fRt=s(S5e);Upr=r(fRt,"pretrained_model_name_or_path"),fRt.forEach(t),Hpr=r(D7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=n(D7,"CODE",{});var mRt=s(R5e);Jpr=r(mRt,"pretrained_model_name_or_path"),mRt.forEach(t),Ypr=r(D7,":"),D7.forEach(t),Kpr=i(La),P5e=n(La,"UL",{});var gRt=s(P5e);xF=n(gRt,"LI",{});var DDe=s(xF);B5e=n(DDe,"STRONG",{});var hRt=s(B5e);Zpr=r(hRt,"vision-encoder-decoder"),hRt.forEach(t),e_r=r(DDe," \u2014 "),jH=n(DDe,"A",{href:!0});var pRt=s(jH);o_r=r(pRt,"VisionEncoderDecoderModel"),pRt.forEach(t),r_r=r(DDe," (Vision Encoder decoder model)"),DDe.forEach(t),gRt.forEach(t),t_r=i(La),$F=n(La,"P",{});var GDe=s($F);a_r=r(GDe,"The model is set in evaluation mode by default using "),I5e=n(GDe,"CODE",{});var _Rt=s(I5e);n_r=r(_Rt,"model.eval()"),_Rt.forEach(t),s_r=r(GDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N5e=n(GDe,"CODE",{});var uRt=s(N5e);l_r=r(uRt,"model.train()"),uRt.forEach(t),GDe.forEach(t),i_r=i(La),T(kF.$$.fragment,La),La.forEach(t),Ll.forEach(t),kUe=i(f),Xd=n(f,"H2",{class:!0});var GJe=s(Xd);SF=n(GJe,"A",{id:!0,class:!0,href:!0});var bRt=s(SF);q5e=n(bRt,"SPAN",{});var vRt=s(q5e);T(rx.$$.fragment,vRt),vRt.forEach(t),bRt.forEach(t),d_r=i(GJe),j5e=n(GJe,"SPAN",{});var FRt=s(j5e);c_r=r(FRt,"AutoModelForVisualQuestionAnswering"),FRt.forEach(t),GJe.forEach(t),SUe=i(f),Qo=n(f,"DIV",{class:!0});var yl=s(Qo);T(tx.$$.fragment,yl),f_r=i(yl),zd=n(yl,"P",{});var _ne=s(zd);m_r=r(_ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),DH=n(_ne,"A",{href:!0});var TRt=s(DH);g_r=r(TRt,"from_pretrained()"),TRt.forEach(t),h_r=r(_ne," class method or the "),GH=n(_ne,"A",{href:!0});var MRt=s(GH);p_r=r(MRt,"from_config()"),MRt.forEach(t),__r=r(_ne,` class
method.`),_ne.forEach(t),u_r=i(yl),ax=n(yl,"P",{});var OJe=s(ax);b_r=r(OJe,"This class cannot be instantiated directly using "),D5e=n(OJe,"CODE",{});var ERt=s(D5e);v_r=r(ERt,"__init__()"),ERt.forEach(t),F_r=r(OJe," (throws an error)."),OJe.forEach(t),T_r=i(yl),Lt=n(yl,"DIV",{class:!0});var G7=s(Lt);T(nx.$$.fragment,G7),M_r=i(G7),G5e=n(G7,"P",{});var CRt=s(G5e);E_r=r(CRt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),CRt.forEach(t),C_r=i(G7),Wd=n(G7,"P",{});var une=s(Wd);w_r=r(une,`Note:
Loading a model from its configuration file does `),O5e=n(une,"STRONG",{});var wRt=s(O5e);A_r=r(wRt,"not"),wRt.forEach(t),L_r=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(une,"A",{href:!0});var ARt=s(OH);y_r=r(ARt,"from_pretrained()"),ARt.forEach(t),x_r=r(une," to load the model weights."),une.forEach(t),$_r=i(G7),T(RF.$$.fragment,G7),G7.forEach(t),k_r=i(yl),mo=n(yl,"DIV",{class:!0});var ya=s(mo);T(sx.$$.fragment,ya),S_r=i(ya),V5e=n(ya,"P",{});var LRt=s(V5e);R_r=r(LRt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),LRt.forEach(t),P_r=i(ya),tn=n(ya,"P",{});var O7=s(tn);B_r=r(O7,"The model class to instantiate is selected based on the "),X5e=n(O7,"CODE",{});var yRt=s(X5e);I_r=r(yRt,"model_type"),yRt.forEach(t),N_r=r(O7,` property of the config object (either
passed as an argument or loaded from `),z5e=n(O7,"CODE",{});var xRt=s(z5e);q_r=r(xRt,"pretrained_model_name_or_path"),xRt.forEach(t),j_r=r(O7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(O7,"CODE",{});var $Rt=s(W5e);D_r=r($Rt,"pretrained_model_name_or_path"),$Rt.forEach(t),G_r=r(O7,":"),O7.forEach(t),O_r=i(ya),Q5e=n(ya,"UL",{});var kRt=s(Q5e);PF=n(kRt,"LI",{});var ODe=s(PF);U5e=n(ODe,"STRONG",{});var SRt=s(U5e);V_r=r(SRt,"vilt"),SRt.forEach(t),X_r=r(ODe," \u2014 "),VH=n(ODe,"A",{href:!0});var RRt=s(VH);z_r=r(RRt,"ViltForQuestionAnswering"),RRt.forEach(t),W_r=r(ODe," (ViLT model)"),ODe.forEach(t),kRt.forEach(t),Q_r=i(ya),BF=n(ya,"P",{});var VDe=s(BF);U_r=r(VDe,"The model is set in evaluation mode by default using "),H5e=n(VDe,"CODE",{});var PRt=s(H5e);H_r=r(PRt,"model.eval()"),PRt.forEach(t),J_r=r(VDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J5e=n(VDe,"CODE",{});var BRt=s(J5e);Y_r=r(BRt,"model.train()"),BRt.forEach(t),VDe.forEach(t),K_r=i(ya),T(IF.$$.fragment,ya),ya.forEach(t),yl.forEach(t),RUe=i(f),Qd=n(f,"H2",{class:!0});var VJe=s(Qd);NF=n(VJe,"A",{id:!0,class:!0,href:!0});var IRt=s(NF);Y5e=n(IRt,"SPAN",{});var NRt=s(Y5e);T(lx.$$.fragment,NRt),NRt.forEach(t),IRt.forEach(t),Z_r=i(VJe),K5e=n(VJe,"SPAN",{});var qRt=s(K5e);eur=r(qRt,"AutoModelForAudioClassification"),qRt.forEach(t),VJe.forEach(t),PUe=i(f),Uo=n(f,"DIV",{class:!0});var xl=s(Uo);T(ix.$$.fragment,xl),our=i(xl),Ud=n(xl,"P",{});var bne=s(Ud);rur=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XH=n(bne,"A",{href:!0});var jRt=s(XH);tur=r(jRt,"from_pretrained()"),jRt.forEach(t),aur=r(bne," class method or the "),zH=n(bne,"A",{href:!0});var DRt=s(zH);nur=r(DRt,"from_config()"),DRt.forEach(t),sur=r(bne,` class
method.`),bne.forEach(t),lur=i(xl),dx=n(xl,"P",{});var XJe=s(dx);iur=r(XJe,"This class cannot be instantiated directly using "),Z5e=n(XJe,"CODE",{});var GRt=s(Z5e);dur=r(GRt,"__init__()"),GRt.forEach(t),cur=r(XJe," (throws an error)."),XJe.forEach(t),fur=i(xl),yt=n(xl,"DIV",{class:!0});var V7=s(yt);T(cx.$$.fragment,V7),mur=i(V7),e0e=n(V7,"P",{});var ORt=s(e0e);gur=r(ORt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ORt.forEach(t),hur=i(V7),Hd=n(V7,"P",{});var vne=s(Hd);pur=r(vne,`Note:
Loading a model from its configuration file does `),o0e=n(vne,"STRONG",{});var VRt=s(o0e);_ur=r(VRt,"not"),VRt.forEach(t),uur=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(vne,"A",{href:!0});var XRt=s(WH);bur=r(XRt,"from_pretrained()"),XRt.forEach(t),vur=r(vne," to load the model weights."),vne.forEach(t),Fur=i(V7),T(qF.$$.fragment,V7),V7.forEach(t),Tur=i(xl),go=n(xl,"DIV",{class:!0});var xa=s(go);T(fx.$$.fragment,xa),Mur=i(xa),r0e=n(xa,"P",{});var zRt=s(r0e);Eur=r(zRt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zRt.forEach(t),Cur=i(xa),an=n(xa,"P",{});var X7=s(an);wur=r(X7,"The model class to instantiate is selected based on the "),t0e=n(X7,"CODE",{});var WRt=s(t0e);Aur=r(WRt,"model_type"),WRt.forEach(t),Lur=r(X7,` property of the config object (either
passed as an argument or loaded from `),a0e=n(X7,"CODE",{});var QRt=s(a0e);yur=r(QRt,"pretrained_model_name_or_path"),QRt.forEach(t),xur=r(X7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=n(X7,"CODE",{});var URt=s(n0e);$ur=r(URt,"pretrained_model_name_or_path"),URt.forEach(t),kur=r(X7,":"),X7.forEach(t),Sur=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);jF=n(We,"LI",{});var XDe=s(jF);s0e=n(XDe,"STRONG",{});var HRt=s(s0e);Rur=r(HRt,"data2vec-audio"),HRt.forEach(t),Pur=r(XDe," \u2014 "),QH=n(XDe,"A",{href:!0});var JRt=s(QH);Bur=r(JRt,"Data2VecAudioForSequenceClassification"),JRt.forEach(t),Iur=r(XDe," (Data2VecAudio model)"),XDe.forEach(t),Nur=i(We),DF=n(We,"LI",{});var zDe=s(DF);l0e=n(zDe,"STRONG",{});var YRt=s(l0e);qur=r(YRt,"hubert"),YRt.forEach(t),jur=r(zDe," \u2014 "),UH=n(zDe,"A",{href:!0});var KRt=s(UH);Dur=r(KRt,"HubertForSequenceClassification"),KRt.forEach(t),Gur=r(zDe," (Hubert model)"),zDe.forEach(t),Our=i(We),GF=n(We,"LI",{});var WDe=s(GF);i0e=n(WDe,"STRONG",{});var ZRt=s(i0e);Vur=r(ZRt,"sew"),ZRt.forEach(t),Xur=r(WDe," \u2014 "),HH=n(WDe,"A",{href:!0});var ePt=s(HH);zur=r(ePt,"SEWForSequenceClassification"),ePt.forEach(t),Wur=r(WDe," (SEW model)"),WDe.forEach(t),Qur=i(We),OF=n(We,"LI",{});var QDe=s(OF);d0e=n(QDe,"STRONG",{});var oPt=s(d0e);Uur=r(oPt,"sew-d"),oPt.forEach(t),Hur=r(QDe," \u2014 "),JH=n(QDe,"A",{href:!0});var rPt=s(JH);Jur=r(rPt,"SEWDForSequenceClassification"),rPt.forEach(t),Yur=r(QDe," (SEW-D model)"),QDe.forEach(t),Kur=i(We),VF=n(We,"LI",{});var UDe=s(VF);c0e=n(UDe,"STRONG",{});var tPt=s(c0e);Zur=r(tPt,"unispeech"),tPt.forEach(t),e1r=r(UDe," \u2014 "),YH=n(UDe,"A",{href:!0});var aPt=s(YH);o1r=r(aPt,"UniSpeechForSequenceClassification"),aPt.forEach(t),r1r=r(UDe," (UniSpeech model)"),UDe.forEach(t),t1r=i(We),XF=n(We,"LI",{});var HDe=s(XF);f0e=n(HDe,"STRONG",{});var nPt=s(f0e);a1r=r(nPt,"unispeech-sat"),nPt.forEach(t),n1r=r(HDe," \u2014 "),KH=n(HDe,"A",{href:!0});var sPt=s(KH);s1r=r(sPt,"UniSpeechSatForSequenceClassification"),sPt.forEach(t),l1r=r(HDe," (UniSpeechSat model)"),HDe.forEach(t),i1r=i(We),zF=n(We,"LI",{});var JDe=s(zF);m0e=n(JDe,"STRONG",{});var lPt=s(m0e);d1r=r(lPt,"wav2vec2"),lPt.forEach(t),c1r=r(JDe," \u2014 "),ZH=n(JDe,"A",{href:!0});var iPt=s(ZH);f1r=r(iPt,"Wav2Vec2ForSequenceClassification"),iPt.forEach(t),m1r=r(JDe," (Wav2Vec2 model)"),JDe.forEach(t),g1r=i(We),WF=n(We,"LI",{});var YDe=s(WF);g0e=n(YDe,"STRONG",{});var dPt=s(g0e);h1r=r(dPt,"wav2vec2-conformer"),dPt.forEach(t),p1r=r(YDe," \u2014 "),eJ=n(YDe,"A",{href:!0});var cPt=s(eJ);_1r=r(cPt,"Wav2Vec2ConformerForSequenceClassification"),cPt.forEach(t),u1r=r(YDe," (Wav2Vec2-Conformer model)"),YDe.forEach(t),b1r=i(We),QF=n(We,"LI",{});var KDe=s(QF);h0e=n(KDe,"STRONG",{});var fPt=s(h0e);v1r=r(fPt,"wavlm"),fPt.forEach(t),F1r=r(KDe," \u2014 "),oJ=n(KDe,"A",{href:!0});var mPt=s(oJ);T1r=r(mPt,"WavLMForSequenceClassification"),mPt.forEach(t),M1r=r(KDe," (WavLM model)"),KDe.forEach(t),We.forEach(t),E1r=i(xa),UF=n(xa,"P",{});var ZDe=s(UF);C1r=r(ZDe,"The model is set in evaluation mode by default using "),p0e=n(ZDe,"CODE",{});var gPt=s(p0e);w1r=r(gPt,"model.eval()"),gPt.forEach(t),A1r=r(ZDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_0e=n(ZDe,"CODE",{});var hPt=s(_0e);L1r=r(hPt,"model.train()"),hPt.forEach(t),ZDe.forEach(t),y1r=i(xa),T(HF.$$.fragment,xa),xa.forEach(t),xl.forEach(t),BUe=i(f),Jd=n(f,"H2",{class:!0});var zJe=s(Jd);JF=n(zJe,"A",{id:!0,class:!0,href:!0});var pPt=s(JF);u0e=n(pPt,"SPAN",{});var _Pt=s(u0e);T(mx.$$.fragment,_Pt),_Pt.forEach(t),pPt.forEach(t),x1r=i(zJe),b0e=n(zJe,"SPAN",{});var uPt=s(b0e);$1r=r(uPt,"AutoModelForAudioFrameClassification"),uPt.forEach(t),zJe.forEach(t),IUe=i(f),Ho=n(f,"DIV",{class:!0});var $l=s(Ho);T(gx.$$.fragment,$l),k1r=i($l),Yd=n($l,"P",{});var Fne=s(Yd);S1r=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rJ=n(Fne,"A",{href:!0});var bPt=s(rJ);R1r=r(bPt,"from_pretrained()"),bPt.forEach(t),P1r=r(Fne," class method or the "),tJ=n(Fne,"A",{href:!0});var vPt=s(tJ);B1r=r(vPt,"from_config()"),vPt.forEach(t),I1r=r(Fne,` class
method.`),Fne.forEach(t),N1r=i($l),hx=n($l,"P",{});var WJe=s(hx);q1r=r(WJe,"This class cannot be instantiated directly using "),v0e=n(WJe,"CODE",{});var FPt=s(v0e);j1r=r(FPt,"__init__()"),FPt.forEach(t),D1r=r(WJe," (throws an error)."),WJe.forEach(t),G1r=i($l),xt=n($l,"DIV",{class:!0});var z7=s(xt);T(px.$$.fragment,z7),O1r=i(z7),F0e=n(z7,"P",{});var TPt=s(F0e);V1r=r(TPt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),TPt.forEach(t),X1r=i(z7),Kd=n(z7,"P",{});var Tne=s(Kd);z1r=r(Tne,`Note:
Loading a model from its configuration file does `),T0e=n(Tne,"STRONG",{});var MPt=s(T0e);W1r=r(MPt,"not"),MPt.forEach(t),Q1r=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=n(Tne,"A",{href:!0});var EPt=s(aJ);U1r=r(EPt,"from_pretrained()"),EPt.forEach(t),H1r=r(Tne," to load the model weights."),Tne.forEach(t),J1r=i(z7),T(YF.$$.fragment,z7),z7.forEach(t),Y1r=i($l),ho=n($l,"DIV",{class:!0});var $a=s(ho);T(_x.$$.fragment,$a),K1r=i($a),M0e=n($a,"P",{});var CPt=s(M0e);Z1r=r(CPt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),CPt.forEach(t),e4r=i($a),nn=n($a,"P",{});var W7=s(nn);o4r=r(W7,"The model class to instantiate is selected based on the "),E0e=n(W7,"CODE",{});var wPt=s(E0e);r4r=r(wPt,"model_type"),wPt.forEach(t),t4r=r(W7,` property of the config object (either
passed as an argument or loaded from `),C0e=n(W7,"CODE",{});var APt=s(C0e);a4r=r(APt,"pretrained_model_name_or_path"),APt.forEach(t),n4r=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=n(W7,"CODE",{});var LPt=s(w0e);s4r=r(LPt,"pretrained_model_name_or_path"),LPt.forEach(t),l4r=r(W7,":"),W7.forEach(t),i4r=i($a),st=n($a,"UL",{});var kl=s(st);KF=n(kl,"LI",{});var eGe=s(KF);A0e=n(eGe,"STRONG",{});var yPt=s(A0e);d4r=r(yPt,"data2vec-audio"),yPt.forEach(t),c4r=r(eGe," \u2014 "),nJ=n(eGe,"A",{href:!0});var xPt=s(nJ);f4r=r(xPt,"Data2VecAudioForAudioFrameClassification"),xPt.forEach(t),m4r=r(eGe," (Data2VecAudio model)"),eGe.forEach(t),g4r=i(kl),ZF=n(kl,"LI",{});var oGe=s(ZF);L0e=n(oGe,"STRONG",{});var $Pt=s(L0e);h4r=r($Pt,"unispeech-sat"),$Pt.forEach(t),p4r=r(oGe," \u2014 "),sJ=n(oGe,"A",{href:!0});var kPt=s(sJ);_4r=r(kPt,"UniSpeechSatForAudioFrameClassification"),kPt.forEach(t),u4r=r(oGe," (UniSpeechSat model)"),oGe.forEach(t),b4r=i(kl),eT=n(kl,"LI",{});var rGe=s(eT);y0e=n(rGe,"STRONG",{});var SPt=s(y0e);v4r=r(SPt,"wav2vec2"),SPt.forEach(t),F4r=r(rGe," \u2014 "),lJ=n(rGe,"A",{href:!0});var RPt=s(lJ);T4r=r(RPt,"Wav2Vec2ForAudioFrameClassification"),RPt.forEach(t),M4r=r(rGe," (Wav2Vec2 model)"),rGe.forEach(t),E4r=i(kl),oT=n(kl,"LI",{});var tGe=s(oT);x0e=n(tGe,"STRONG",{});var PPt=s(x0e);C4r=r(PPt,"wav2vec2-conformer"),PPt.forEach(t),w4r=r(tGe," \u2014 "),iJ=n(tGe,"A",{href:!0});var BPt=s(iJ);A4r=r(BPt,"Wav2Vec2ConformerForAudioFrameClassification"),BPt.forEach(t),L4r=r(tGe," (Wav2Vec2-Conformer model)"),tGe.forEach(t),y4r=i(kl),rT=n(kl,"LI",{});var aGe=s(rT);$0e=n(aGe,"STRONG",{});var IPt=s($0e);x4r=r(IPt,"wavlm"),IPt.forEach(t),$4r=r(aGe," \u2014 "),dJ=n(aGe,"A",{href:!0});var NPt=s(dJ);k4r=r(NPt,"WavLMForAudioFrameClassification"),NPt.forEach(t),S4r=r(aGe," (WavLM model)"),aGe.forEach(t),kl.forEach(t),R4r=i($a),tT=n($a,"P",{});var nGe=s(tT);P4r=r(nGe,"The model is set in evaluation mode by default using "),k0e=n(nGe,"CODE",{});var qPt=s(k0e);B4r=r(qPt,"model.eval()"),qPt.forEach(t),I4r=r(nGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S0e=n(nGe,"CODE",{});var jPt=s(S0e);N4r=r(jPt,"model.train()"),jPt.forEach(t),nGe.forEach(t),q4r=i($a),T(aT.$$.fragment,$a),$a.forEach(t),$l.forEach(t),NUe=i(f),Zd=n(f,"H2",{class:!0});var QJe=s(Zd);nT=n(QJe,"A",{id:!0,class:!0,href:!0});var DPt=s(nT);R0e=n(DPt,"SPAN",{});var GPt=s(R0e);T(ux.$$.fragment,GPt),GPt.forEach(t),DPt.forEach(t),j4r=i(QJe),P0e=n(QJe,"SPAN",{});var OPt=s(P0e);D4r=r(OPt,"AutoModelForCTC"),OPt.forEach(t),QJe.forEach(t),qUe=i(f),Jo=n(f,"DIV",{class:!0});var Sl=s(Jo);T(bx.$$.fragment,Sl),G4r=i(Sl),ec=n(Sl,"P",{});var Mne=s(ec);O4r=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cJ=n(Mne,"A",{href:!0});var VPt=s(cJ);V4r=r(VPt,"from_pretrained()"),VPt.forEach(t),X4r=r(Mne," class method or the "),fJ=n(Mne,"A",{href:!0});var XPt=s(fJ);z4r=r(XPt,"from_config()"),XPt.forEach(t),W4r=r(Mne,` class
method.`),Mne.forEach(t),Q4r=i(Sl),vx=n(Sl,"P",{});var UJe=s(vx);U4r=r(UJe,"This class cannot be instantiated directly using "),B0e=n(UJe,"CODE",{});var zPt=s(B0e);H4r=r(zPt,"__init__()"),zPt.forEach(t),J4r=r(UJe," (throws an error)."),UJe.forEach(t),Y4r=i(Sl),$t=n(Sl,"DIV",{class:!0});var Q7=s($t);T(Fx.$$.fragment,Q7),K4r=i(Q7),I0e=n(Q7,"P",{});var WPt=s(I0e);Z4r=r(WPt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),WPt.forEach(t),e2r=i(Q7),oc=n(Q7,"P",{});var Ene=s(oc);o2r=r(Ene,`Note:
Loading a model from its configuration file does `),N0e=n(Ene,"STRONG",{});var QPt=s(N0e);r2r=r(QPt,"not"),QPt.forEach(t),t2r=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(Ene,"A",{href:!0});var UPt=s(mJ);a2r=r(UPt,"from_pretrained()"),UPt.forEach(t),n2r=r(Ene," to load the model weights."),Ene.forEach(t),s2r=i(Q7),T(sT.$$.fragment,Q7),Q7.forEach(t),l2r=i(Sl),po=n(Sl,"DIV",{class:!0});var ka=s(po);T(Tx.$$.fragment,ka),i2r=i(ka),q0e=n(ka,"P",{});var HPt=s(q0e);d2r=r(HPt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),HPt.forEach(t),c2r=i(ka),sn=n(ka,"P",{});var U7=s(sn);f2r=r(U7,"The model class to instantiate is selected based on the "),j0e=n(U7,"CODE",{});var JPt=s(j0e);m2r=r(JPt,"model_type"),JPt.forEach(t),g2r=r(U7,` property of the config object (either
passed as an argument or loaded from `),D0e=n(U7,"CODE",{});var YPt=s(D0e);h2r=r(YPt,"pretrained_model_name_or_path"),YPt.forEach(t),p2r=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=n(U7,"CODE",{});var KPt=s(G0e);_2r=r(KPt,"pretrained_model_name_or_path"),KPt.forEach(t),u2r=r(U7,":"),U7.forEach(t),b2r=i(ka),Le=n(ka,"UL",{});var Be=s(Le);lT=n(Be,"LI",{});var sGe=s(lT);O0e=n(sGe,"STRONG",{});var ZPt=s(O0e);v2r=r(ZPt,"data2vec-audio"),ZPt.forEach(t),F2r=r(sGe," \u2014 "),gJ=n(sGe,"A",{href:!0});var eBt=s(gJ);T2r=r(eBt,"Data2VecAudioForCTC"),eBt.forEach(t),M2r=r(sGe," (Data2VecAudio model)"),sGe.forEach(t),E2r=i(Be),iT=n(Be,"LI",{});var lGe=s(iT);V0e=n(lGe,"STRONG",{});var oBt=s(V0e);C2r=r(oBt,"hubert"),oBt.forEach(t),w2r=r(lGe," \u2014 "),hJ=n(lGe,"A",{href:!0});var rBt=s(hJ);A2r=r(rBt,"HubertForCTC"),rBt.forEach(t),L2r=r(lGe," (Hubert model)"),lGe.forEach(t),y2r=i(Be),dT=n(Be,"LI",{});var iGe=s(dT);X0e=n(iGe,"STRONG",{});var tBt=s(X0e);x2r=r(tBt,"mctct"),tBt.forEach(t),$2r=r(iGe," \u2014 "),pJ=n(iGe,"A",{href:!0});var aBt=s(pJ);k2r=r(aBt,"MCTCTForCTC"),aBt.forEach(t),S2r=r(iGe," (M-CTC-T model)"),iGe.forEach(t),R2r=i(Be),cT=n(Be,"LI",{});var dGe=s(cT);z0e=n(dGe,"STRONG",{});var nBt=s(z0e);P2r=r(nBt,"sew"),nBt.forEach(t),B2r=r(dGe," \u2014 "),_J=n(dGe,"A",{href:!0});var sBt=s(_J);I2r=r(sBt,"SEWForCTC"),sBt.forEach(t),N2r=r(dGe," (SEW model)"),dGe.forEach(t),q2r=i(Be),fT=n(Be,"LI",{});var cGe=s(fT);W0e=n(cGe,"STRONG",{});var lBt=s(W0e);j2r=r(lBt,"sew-d"),lBt.forEach(t),D2r=r(cGe," \u2014 "),uJ=n(cGe,"A",{href:!0});var iBt=s(uJ);G2r=r(iBt,"SEWDForCTC"),iBt.forEach(t),O2r=r(cGe," (SEW-D model)"),cGe.forEach(t),V2r=i(Be),mT=n(Be,"LI",{});var fGe=s(mT);Q0e=n(fGe,"STRONG",{});var dBt=s(Q0e);X2r=r(dBt,"unispeech"),dBt.forEach(t),z2r=r(fGe," \u2014 "),bJ=n(fGe,"A",{href:!0});var cBt=s(bJ);W2r=r(cBt,"UniSpeechForCTC"),cBt.forEach(t),Q2r=r(fGe," (UniSpeech model)"),fGe.forEach(t),U2r=i(Be),gT=n(Be,"LI",{});var mGe=s(gT);U0e=n(mGe,"STRONG",{});var fBt=s(U0e);H2r=r(fBt,"unispeech-sat"),fBt.forEach(t),J2r=r(mGe," \u2014 "),vJ=n(mGe,"A",{href:!0});var mBt=s(vJ);Y2r=r(mBt,"UniSpeechSatForCTC"),mBt.forEach(t),K2r=r(mGe," (UniSpeechSat model)"),mGe.forEach(t),Z2r=i(Be),hT=n(Be,"LI",{});var gGe=s(hT);H0e=n(gGe,"STRONG",{});var gBt=s(H0e);ebr=r(gBt,"wav2vec2"),gBt.forEach(t),obr=r(gGe," \u2014 "),FJ=n(gGe,"A",{href:!0});var hBt=s(FJ);rbr=r(hBt,"Wav2Vec2ForCTC"),hBt.forEach(t),tbr=r(gGe," (Wav2Vec2 model)"),gGe.forEach(t),abr=i(Be),pT=n(Be,"LI",{});var hGe=s(pT);J0e=n(hGe,"STRONG",{});var pBt=s(J0e);nbr=r(pBt,"wav2vec2-conformer"),pBt.forEach(t),sbr=r(hGe," \u2014 "),TJ=n(hGe,"A",{href:!0});var _Bt=s(TJ);lbr=r(_Bt,"Wav2Vec2ConformerForCTC"),_Bt.forEach(t),ibr=r(hGe," (Wav2Vec2-Conformer model)"),hGe.forEach(t),dbr=i(Be),_T=n(Be,"LI",{});var pGe=s(_T);Y0e=n(pGe,"STRONG",{});var uBt=s(Y0e);cbr=r(uBt,"wavlm"),uBt.forEach(t),fbr=r(pGe," \u2014 "),MJ=n(pGe,"A",{href:!0});var bBt=s(MJ);mbr=r(bBt,"WavLMForCTC"),bBt.forEach(t),gbr=r(pGe," (WavLM model)"),pGe.forEach(t),Be.forEach(t),hbr=i(ka),uT=n(ka,"P",{});var _Ge=s(uT);pbr=r(_Ge,"The model is set in evaluation mode by default using "),K0e=n(_Ge,"CODE",{});var vBt=s(K0e);_br=r(vBt,"model.eval()"),vBt.forEach(t),ubr=r(_Ge,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z0e=n(_Ge,"CODE",{});var FBt=s(Z0e);bbr=r(FBt,"model.train()"),FBt.forEach(t),_Ge.forEach(t),vbr=i(ka),T(bT.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),jUe=i(f),rc=n(f,"H2",{class:!0});var HJe=s(rc);vT=n(HJe,"A",{id:!0,class:!0,href:!0});var TBt=s(vT);eFe=n(TBt,"SPAN",{});var MBt=s(eFe);T(Mx.$$.fragment,MBt),MBt.forEach(t),TBt.forEach(t),Fbr=i(HJe),oFe=n(HJe,"SPAN",{});var EBt=s(oFe);Tbr=r(EBt,"AutoModelForSpeechSeq2Seq"),EBt.forEach(t),HJe.forEach(t),DUe=i(f),Yo=n(f,"DIV",{class:!0});var Rl=s(Yo);T(Ex.$$.fragment,Rl),Mbr=i(Rl),tc=n(Rl,"P",{});var Cne=s(tc);Ebr=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EJ=n(Cne,"A",{href:!0});var CBt=s(EJ);Cbr=r(CBt,"from_pretrained()"),CBt.forEach(t),wbr=r(Cne," class method or the "),CJ=n(Cne,"A",{href:!0});var wBt=s(CJ);Abr=r(wBt,"from_config()"),wBt.forEach(t),Lbr=r(Cne,` class
method.`),Cne.forEach(t),ybr=i(Rl),Cx=n(Rl,"P",{});var JJe=s(Cx);xbr=r(JJe,"This class cannot be instantiated directly using "),rFe=n(JJe,"CODE",{});var ABt=s(rFe);$br=r(ABt,"__init__()"),ABt.forEach(t),kbr=r(JJe," (throws an error)."),JJe.forEach(t),Sbr=i(Rl),kt=n(Rl,"DIV",{class:!0});var H7=s(kt);T(wx.$$.fragment,H7),Rbr=i(H7),tFe=n(H7,"P",{});var LBt=s(tFe);Pbr=r(LBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LBt.forEach(t),Bbr=i(H7),ac=n(H7,"P",{});var wne=s(ac);Ibr=r(wne,`Note:
Loading a model from its configuration file does `),aFe=n(wne,"STRONG",{});var yBt=s(aFe);Nbr=r(yBt,"not"),yBt.forEach(t),qbr=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(wne,"A",{href:!0});var xBt=s(wJ);jbr=r(xBt,"from_pretrained()"),xBt.forEach(t),Dbr=r(wne," to load the model weights."),wne.forEach(t),Gbr=i(H7),T(FT.$$.fragment,H7),H7.forEach(t),Obr=i(Rl),_o=n(Rl,"DIV",{class:!0});var Sa=s(_o);T(Ax.$$.fragment,Sa),Vbr=i(Sa),nFe=n(Sa,"P",{});var $Bt=s(nFe);Xbr=r($Bt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$Bt.forEach(t),zbr=i(Sa),ln=n(Sa,"P",{});var J7=s(ln);Wbr=r(J7,"The model class to instantiate is selected based on the "),sFe=n(J7,"CODE",{});var kBt=s(sFe);Qbr=r(kBt,"model_type"),kBt.forEach(t),Ubr=r(J7,` property of the config object (either
passed as an argument or loaded from `),lFe=n(J7,"CODE",{});var SBt=s(lFe);Hbr=r(SBt,"pretrained_model_name_or_path"),SBt.forEach(t),Jbr=r(J7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(J7,"CODE",{});var RBt=s(iFe);Ybr=r(RBt,"pretrained_model_name_or_path"),RBt.forEach(t),Kbr=r(J7,":"),J7.forEach(t),Zbr=i(Sa),Lx=n(Sa,"UL",{});var YJe=s(Lx);TT=n(YJe,"LI",{});var uGe=s(TT);dFe=n(uGe,"STRONG",{});var PBt=s(dFe);evr=r(PBt,"speech-encoder-decoder"),PBt.forEach(t),ovr=r(uGe," \u2014 "),AJ=n(uGe,"A",{href:!0});var BBt=s(AJ);rvr=r(BBt,"SpeechEncoderDecoderModel"),BBt.forEach(t),tvr=r(uGe," (Speech Encoder decoder model)"),uGe.forEach(t),avr=i(YJe),MT=n(YJe,"LI",{});var bGe=s(MT);cFe=n(bGe,"STRONG",{});var IBt=s(cFe);nvr=r(IBt,"speech_to_text"),IBt.forEach(t),svr=r(bGe," \u2014 "),LJ=n(bGe,"A",{href:!0});var NBt=s(LJ);lvr=r(NBt,"Speech2TextForConditionalGeneration"),NBt.forEach(t),ivr=r(bGe," (Speech2Text model)"),bGe.forEach(t),YJe.forEach(t),dvr=i(Sa),ET=n(Sa,"P",{});var vGe=s(ET);cvr=r(vGe,"The model is set in evaluation mode by default using "),fFe=n(vGe,"CODE",{});var qBt=s(fFe);fvr=r(qBt,"model.eval()"),qBt.forEach(t),mvr=r(vGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mFe=n(vGe,"CODE",{});var jBt=s(mFe);gvr=r(jBt,"model.train()"),jBt.forEach(t),vGe.forEach(t),hvr=i(Sa),T(CT.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),GUe=i(f),nc=n(f,"H2",{class:!0});var KJe=s(nc);wT=n(KJe,"A",{id:!0,class:!0,href:!0});var DBt=s(wT);gFe=n(DBt,"SPAN",{});var GBt=s(gFe);T(yx.$$.fragment,GBt),GBt.forEach(t),DBt.forEach(t),pvr=i(KJe),hFe=n(KJe,"SPAN",{});var OBt=s(hFe);_vr=r(OBt,"AutoModelForAudioXVector"),OBt.forEach(t),KJe.forEach(t),OUe=i(f),Ko=n(f,"DIV",{class:!0});var Pl=s(Ko);T(xx.$$.fragment,Pl),uvr=i(Pl),sc=n(Pl,"P",{});var Ane=s(sc);bvr=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yJ=n(Ane,"A",{href:!0});var VBt=s(yJ);vvr=r(VBt,"from_pretrained()"),VBt.forEach(t),Fvr=r(Ane," class method or the "),xJ=n(Ane,"A",{href:!0});var XBt=s(xJ);Tvr=r(XBt,"from_config()"),XBt.forEach(t),Mvr=r(Ane,` class
method.`),Ane.forEach(t),Evr=i(Pl),$x=n(Pl,"P",{});var ZJe=s($x);Cvr=r(ZJe,"This class cannot be instantiated directly using "),pFe=n(ZJe,"CODE",{});var zBt=s(pFe);wvr=r(zBt,"__init__()"),zBt.forEach(t),Avr=r(ZJe," (throws an error)."),ZJe.forEach(t),Lvr=i(Pl),St=n(Pl,"DIV",{class:!0});var Y7=s(St);T(kx.$$.fragment,Y7),yvr=i(Y7),_Fe=n(Y7,"P",{});var WBt=s(_Fe);xvr=r(WBt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),WBt.forEach(t),$vr=i(Y7),lc=n(Y7,"P",{});var Lne=s(lc);kvr=r(Lne,`Note:
Loading a model from its configuration file does `),uFe=n(Lne,"STRONG",{});var QBt=s(uFe);Svr=r(QBt,"not"),QBt.forEach(t),Rvr=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(Lne,"A",{href:!0});var UBt=s($J);Pvr=r(UBt,"from_pretrained()"),UBt.forEach(t),Bvr=r(Lne," to load the model weights."),Lne.forEach(t),Ivr=i(Y7),T(AT.$$.fragment,Y7),Y7.forEach(t),Nvr=i(Pl),uo=n(Pl,"DIV",{class:!0});var Ra=s(uo);T(Sx.$$.fragment,Ra),qvr=i(Ra),bFe=n(Ra,"P",{});var HBt=s(bFe);jvr=r(HBt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),HBt.forEach(t),Dvr=i(Ra),dn=n(Ra,"P",{});var K7=s(dn);Gvr=r(K7,"The model class to instantiate is selected based on the "),vFe=n(K7,"CODE",{});var JBt=s(vFe);Ovr=r(JBt,"model_type"),JBt.forEach(t),Vvr=r(K7,` property of the config object (either
passed as an argument or loaded from `),FFe=n(K7,"CODE",{});var YBt=s(FFe);Xvr=r(YBt,"pretrained_model_name_or_path"),YBt.forEach(t),zvr=r(K7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(K7,"CODE",{});var KBt=s(TFe);Wvr=r(KBt,"pretrained_model_name_or_path"),KBt.forEach(t),Qvr=r(K7,":"),K7.forEach(t),Uvr=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);LT=n(Bl,"LI",{});var FGe=s(LT);MFe=n(FGe,"STRONG",{});var ZBt=s(MFe);Hvr=r(ZBt,"data2vec-audio"),ZBt.forEach(t),Jvr=r(FGe," \u2014 "),kJ=n(FGe,"A",{href:!0});var eIt=s(kJ);Yvr=r(eIt,"Data2VecAudioForXVector"),eIt.forEach(t),Kvr=r(FGe," (Data2VecAudio model)"),FGe.forEach(t),Zvr=i(Bl),yT=n(Bl,"LI",{});var TGe=s(yT);EFe=n(TGe,"STRONG",{});var oIt=s(EFe);e5r=r(oIt,"unispeech-sat"),oIt.forEach(t),o5r=r(TGe," \u2014 "),SJ=n(TGe,"A",{href:!0});var rIt=s(SJ);r5r=r(rIt,"UniSpeechSatForXVector"),rIt.forEach(t),t5r=r(TGe," (UniSpeechSat model)"),TGe.forEach(t),a5r=i(Bl),xT=n(Bl,"LI",{});var MGe=s(xT);CFe=n(MGe,"STRONG",{});var tIt=s(CFe);n5r=r(tIt,"wav2vec2"),tIt.forEach(t),s5r=r(MGe," \u2014 "),RJ=n(MGe,"A",{href:!0});var aIt=s(RJ);l5r=r(aIt,"Wav2Vec2ForXVector"),aIt.forEach(t),i5r=r(MGe," (Wav2Vec2 model)"),MGe.forEach(t),d5r=i(Bl),$T=n(Bl,"LI",{});var EGe=s($T);wFe=n(EGe,"STRONG",{});var nIt=s(wFe);c5r=r(nIt,"wav2vec2-conformer"),nIt.forEach(t),f5r=r(EGe," \u2014 "),PJ=n(EGe,"A",{href:!0});var sIt=s(PJ);m5r=r(sIt,"Wav2Vec2ConformerForXVector"),sIt.forEach(t),g5r=r(EGe," (Wav2Vec2-Conformer model)"),EGe.forEach(t),h5r=i(Bl),kT=n(Bl,"LI",{});var CGe=s(kT);AFe=n(CGe,"STRONG",{});var lIt=s(AFe);p5r=r(lIt,"wavlm"),lIt.forEach(t),_5r=r(CGe," \u2014 "),BJ=n(CGe,"A",{href:!0});var iIt=s(BJ);u5r=r(iIt,"WavLMForXVector"),iIt.forEach(t),b5r=r(CGe," (WavLM model)"),CGe.forEach(t),Bl.forEach(t),v5r=i(Ra),ST=n(Ra,"P",{});var wGe=s(ST);F5r=r(wGe,"The model is set in evaluation mode by default using "),LFe=n(wGe,"CODE",{});var dIt=s(LFe);T5r=r(dIt,"model.eval()"),dIt.forEach(t),M5r=r(wGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yFe=n(wGe,"CODE",{});var cIt=s(yFe);E5r=r(cIt,"model.train()"),cIt.forEach(t),wGe.forEach(t),C5r=i(Ra),T(RT.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),VUe=i(f),ic=n(f,"H2",{class:!0});var eYe=s(ic);PT=n(eYe,"A",{id:!0,class:!0,href:!0});var fIt=s(PT);xFe=n(fIt,"SPAN",{});var mIt=s(xFe);T(Rx.$$.fragment,mIt),mIt.forEach(t),fIt.forEach(t),w5r=i(eYe),$Fe=n(eYe,"SPAN",{});var gIt=s($Fe);A5r=r(gIt,"AutoModelForMaskedImageModeling"),gIt.forEach(t),eYe.forEach(t),XUe=i(f),Zo=n(f,"DIV",{class:!0});var Il=s(Zo);T(Px.$$.fragment,Il),L5r=i(Il),dc=n(Il,"P",{});var yne=s(dc);y5r=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),IJ=n(yne,"A",{href:!0});var hIt=s(IJ);x5r=r(hIt,"from_pretrained()"),hIt.forEach(t),$5r=r(yne," class method or the "),NJ=n(yne,"A",{href:!0});var pIt=s(NJ);k5r=r(pIt,"from_config()"),pIt.forEach(t),S5r=r(yne,` class
method.`),yne.forEach(t),R5r=i(Il),Bx=n(Il,"P",{});var oYe=s(Bx);P5r=r(oYe,"This class cannot be instantiated directly using "),kFe=n(oYe,"CODE",{});var _It=s(kFe);B5r=r(_It,"__init__()"),_It.forEach(t),I5r=r(oYe," (throws an error)."),oYe.forEach(t),N5r=i(Il),Rt=n(Il,"DIV",{class:!0});var Z7=s(Rt);T(Ix.$$.fragment,Z7),q5r=i(Z7),SFe=n(Z7,"P",{});var uIt=s(SFe);j5r=r(uIt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),uIt.forEach(t),D5r=i(Z7),cc=n(Z7,"P",{});var xne=s(cc);G5r=r(xne,`Note:
Loading a model from its configuration file does `),RFe=n(xne,"STRONG",{});var bIt=s(RFe);O5r=r(bIt,"not"),bIt.forEach(t),V5r=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(xne,"A",{href:!0});var vIt=s(qJ);X5r=r(vIt,"from_pretrained()"),vIt.forEach(t),z5r=r(xne," to load the model weights."),xne.forEach(t),W5r=i(Z7),T(BT.$$.fragment,Z7),Z7.forEach(t),Q5r=i(Il),bo=n(Il,"DIV",{class:!0});var Pa=s(bo);T(Nx.$$.fragment,Pa),U5r=i(Pa),PFe=n(Pa,"P",{});var FIt=s(PFe);H5r=r(FIt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),FIt.forEach(t),J5r=i(Pa),cn=n(Pa,"P",{});var eL=s(cn);Y5r=r(eL,"The model class to instantiate is selected based on the "),BFe=n(eL,"CODE",{});var TIt=s(BFe);K5r=r(TIt,"model_type"),TIt.forEach(t),Z5r=r(eL,` property of the config object (either
passed as an argument or loaded from `),IFe=n(eL,"CODE",{});var MIt=s(IFe);e0r=r(MIt,"pretrained_model_name_or_path"),MIt.forEach(t),o0r=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(eL,"CODE",{});var EIt=s(NFe);r0r=r(EIt,"pretrained_model_name_or_path"),EIt.forEach(t),t0r=r(eL,":"),eL.forEach(t),a0r=i(Pa),fn=n(Pa,"UL",{});var oL=s(fn);IT=n(oL,"LI",{});var AGe=s(IT);qFe=n(AGe,"STRONG",{});var CIt=s(qFe);n0r=r(CIt,"deit"),CIt.forEach(t),s0r=r(AGe," \u2014 "),jJ=n(AGe,"A",{href:!0});var wIt=s(jJ);l0r=r(wIt,"DeiTForMaskedImageModeling"),wIt.forEach(t),i0r=r(AGe," (DeiT model)"),AGe.forEach(t),d0r=i(oL),NT=n(oL,"LI",{});var LGe=s(NT);jFe=n(LGe,"STRONG",{});var AIt=s(jFe);c0r=r(AIt,"swin"),AIt.forEach(t),f0r=r(LGe," \u2014 "),DJ=n(LGe,"A",{href:!0});var LIt=s(DJ);m0r=r(LIt,"SwinForMaskedImageModeling"),LIt.forEach(t),g0r=r(LGe," (Swin Transformer model)"),LGe.forEach(t),h0r=i(oL),qT=n(oL,"LI",{});var yGe=s(qT);DFe=n(yGe,"STRONG",{});var yIt=s(DFe);p0r=r(yIt,"swinv2"),yIt.forEach(t),_0r=r(yGe," \u2014 "),GJ=n(yGe,"A",{href:!0});var xIt=s(GJ);u0r=r(xIt,"Swinv2ForMaskedImageModeling"),xIt.forEach(t),b0r=r(yGe," (Swin Transformer V2 model)"),yGe.forEach(t),v0r=i(oL),jT=n(oL,"LI",{});var xGe=s(jT);GFe=n(xGe,"STRONG",{});var $It=s(GFe);F0r=r($It,"vit"),$It.forEach(t),T0r=r(xGe," \u2014 "),OJ=n(xGe,"A",{href:!0});var kIt=s(OJ);M0r=r(kIt,"ViTForMaskedImageModeling"),kIt.forEach(t),E0r=r(xGe," (ViT model)"),xGe.forEach(t),oL.forEach(t),C0r=i(Pa),DT=n(Pa,"P",{});var $Ge=s(DT);w0r=r($Ge,"The model is set in evaluation mode by default using "),OFe=n($Ge,"CODE",{});var SIt=s(OFe);A0r=r(SIt,"model.eval()"),SIt.forEach(t),L0r=r($Ge,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=n($Ge,"CODE",{});var RIt=s(VFe);y0r=r(RIt,"model.train()"),RIt.forEach(t),$Ge.forEach(t),x0r=i(Pa),T(GT.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),zUe=i(f),fc=n(f,"H2",{class:!0});var rYe=s(fc);OT=n(rYe,"A",{id:!0,class:!0,href:!0});var PIt=s(OT);XFe=n(PIt,"SPAN",{});var BIt=s(XFe);T(qx.$$.fragment,BIt),BIt.forEach(t),PIt.forEach(t),$0r=i(rYe),zFe=n(rYe,"SPAN",{});var IIt=s(zFe);k0r=r(IIt,"AutoModelForObjectDetection"),IIt.forEach(t),rYe.forEach(t),WUe=i(f),er=n(f,"DIV",{class:!0});var Nl=s(er);T(jx.$$.fragment,Nl),S0r=i(Nl),mc=n(Nl,"P",{});var $ne=s(mc);R0r=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),VJ=n($ne,"A",{href:!0});var NIt=s(VJ);P0r=r(NIt,"from_pretrained()"),NIt.forEach(t),B0r=r($ne," class method or the "),XJ=n($ne,"A",{href:!0});var qIt=s(XJ);I0r=r(qIt,"from_config()"),qIt.forEach(t),N0r=r($ne,` class
method.`),$ne.forEach(t),q0r=i(Nl),Dx=n(Nl,"P",{});var tYe=s(Dx);j0r=r(tYe,"This class cannot be instantiated directly using "),WFe=n(tYe,"CODE",{});var jIt=s(WFe);D0r=r(jIt,"__init__()"),jIt.forEach(t),G0r=r(tYe," (throws an error)."),tYe.forEach(t),O0r=i(Nl),Pt=n(Nl,"DIV",{class:!0});var rL=s(Pt);T(Gx.$$.fragment,rL),V0r=i(rL),QFe=n(rL,"P",{});var DIt=s(QFe);X0r=r(DIt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),DIt.forEach(t),z0r=i(rL),gc=n(rL,"P",{});var kne=s(gc);W0r=r(kne,`Note:
Loading a model from its configuration file does `),UFe=n(kne,"STRONG",{});var GIt=s(UFe);Q0r=r(GIt,"not"),GIt.forEach(t),U0r=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(kne,"A",{href:!0});var OIt=s(zJ);H0r=r(OIt,"from_pretrained()"),OIt.forEach(t),J0r=r(kne," to load the model weights."),kne.forEach(t),Y0r=i(rL),T(VT.$$.fragment,rL),rL.forEach(t),K0r=i(Nl),vo=n(Nl,"DIV",{class:!0});var Ba=s(vo);T(Ox.$$.fragment,Ba),Z0r=i(Ba),HFe=n(Ba,"P",{});var VIt=s(HFe);eFr=r(VIt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),VIt.forEach(t),oFr=i(Ba),mn=n(Ba,"P",{});var tL=s(mn);rFr=r(tL,"The model class to instantiate is selected based on the "),JFe=n(tL,"CODE",{});var XIt=s(JFe);tFr=r(XIt,"model_type"),XIt.forEach(t),aFr=r(tL,` property of the config object (either
passed as an argument or loaded from `),YFe=n(tL,"CODE",{});var zIt=s(YFe);nFr=r(zIt,"pretrained_model_name_or_path"),zIt.forEach(t),sFr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(tL,"CODE",{});var WIt=s(KFe);lFr=r(WIt,"pretrained_model_name_or_path"),WIt.forEach(t),iFr=r(tL,":"),tL.forEach(t),dFr=i(Ba),Vx=n(Ba,"UL",{});var aYe=s(Vx);XT=n(aYe,"LI",{});var kGe=s(XT);ZFe=n(kGe,"STRONG",{});var QIt=s(ZFe);cFr=r(QIt,"detr"),QIt.forEach(t),fFr=r(kGe," \u2014 "),WJ=n(kGe,"A",{href:!0});var UIt=s(WJ);mFr=r(UIt,"DetrForObjectDetection"),UIt.forEach(t),gFr=r(kGe," (DETR model)"),kGe.forEach(t),hFr=i(aYe),zT=n(aYe,"LI",{});var SGe=s(zT);eTe=n(SGe,"STRONG",{});var HIt=s(eTe);pFr=r(HIt,"yolos"),HIt.forEach(t),_Fr=r(SGe," \u2014 "),QJ=n(SGe,"A",{href:!0});var JIt=s(QJ);uFr=r(JIt,"YolosForObjectDetection"),JIt.forEach(t),bFr=r(SGe," (YOLOS model)"),SGe.forEach(t),aYe.forEach(t),vFr=i(Ba),WT=n(Ba,"P",{});var RGe=s(WT);FFr=r(RGe,"The model is set in evaluation mode by default using "),oTe=n(RGe,"CODE",{});var YIt=s(oTe);TFr=r(YIt,"model.eval()"),YIt.forEach(t),MFr=r(RGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rTe=n(RGe,"CODE",{});var KIt=s(rTe);EFr=r(KIt,"model.train()"),KIt.forEach(t),RGe.forEach(t),CFr=i(Ba),T(QT.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),QUe=i(f),hc=n(f,"H2",{class:!0});var nYe=s(hc);UT=n(nYe,"A",{id:!0,class:!0,href:!0});var ZIt=s(UT);tTe=n(ZIt,"SPAN",{});var eNt=s(tTe);T(Xx.$$.fragment,eNt),eNt.forEach(t),ZIt.forEach(t),wFr=i(nYe),aTe=n(nYe,"SPAN",{});var oNt=s(aTe);AFr=r(oNt,"AutoModelForImageSegmentation"),oNt.forEach(t),nYe.forEach(t),UUe=i(f),or=n(f,"DIV",{class:!0});var ql=s(or);T(zx.$$.fragment,ql),LFr=i(ql),pc=n(ql,"P",{});var Sne=s(pc);yFr=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UJ=n(Sne,"A",{href:!0});var rNt=s(UJ);xFr=r(rNt,"from_pretrained()"),rNt.forEach(t),$Fr=r(Sne," class method or the "),HJ=n(Sne,"A",{href:!0});var tNt=s(HJ);kFr=r(tNt,"from_config()"),tNt.forEach(t),SFr=r(Sne,` class
method.`),Sne.forEach(t),RFr=i(ql),Wx=n(ql,"P",{});var sYe=s(Wx);PFr=r(sYe,"This class cannot be instantiated directly using "),nTe=n(sYe,"CODE",{});var aNt=s(nTe);BFr=r(aNt,"__init__()"),aNt.forEach(t),IFr=r(sYe," (throws an error)."),sYe.forEach(t),NFr=i(ql),Bt=n(ql,"DIV",{class:!0});var aL=s(Bt);T(Qx.$$.fragment,aL),qFr=i(aL),sTe=n(aL,"P",{});var nNt=s(sTe);jFr=r(nNt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),nNt.forEach(t),DFr=i(aL),_c=n(aL,"P",{});var Rne=s(_c);GFr=r(Rne,`Note:
Loading a model from its configuration file does `),lTe=n(Rne,"STRONG",{});var sNt=s(lTe);OFr=r(sNt,"not"),sNt.forEach(t),VFr=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(Rne,"A",{href:!0});var lNt=s(JJ);XFr=r(lNt,"from_pretrained()"),lNt.forEach(t),zFr=r(Rne," to load the model weights."),Rne.forEach(t),WFr=i(aL),T(HT.$$.fragment,aL),aL.forEach(t),QFr=i(ql),Fo=n(ql,"DIV",{class:!0});var Ia=s(Fo);T(Ux.$$.fragment,Ia),UFr=i(Ia),iTe=n(Ia,"P",{});var iNt=s(iTe);HFr=r(iNt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),iNt.forEach(t),JFr=i(Ia),gn=n(Ia,"P",{});var nL=s(gn);YFr=r(nL,"The model class to instantiate is selected based on the "),dTe=n(nL,"CODE",{});var dNt=s(dTe);KFr=r(dNt,"model_type"),dNt.forEach(t),ZFr=r(nL,` property of the config object (either
passed as an argument or loaded from `),cTe=n(nL,"CODE",{});var cNt=s(cTe);eTr=r(cNt,"pretrained_model_name_or_path"),cNt.forEach(t),oTr=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(nL,"CODE",{});var fNt=s(fTe);rTr=r(fNt,"pretrained_model_name_or_path"),fNt.forEach(t),tTr=r(nL,":"),nL.forEach(t),aTr=i(Ia),mTe=n(Ia,"UL",{});var mNt=s(mTe);JT=n(mNt,"LI",{});var PGe=s(JT);gTe=n(PGe,"STRONG",{});var gNt=s(gTe);nTr=r(gNt,"detr"),gNt.forEach(t),sTr=r(PGe," \u2014 "),YJ=n(PGe,"A",{href:!0});var hNt=s(YJ);lTr=r(hNt,"DetrForSegmentation"),hNt.forEach(t),iTr=r(PGe," (DETR model)"),PGe.forEach(t),mNt.forEach(t),dTr=i(Ia),YT=n(Ia,"P",{});var BGe=s(YT);cTr=r(BGe,"The model is set in evaluation mode by default using "),hTe=n(BGe,"CODE",{});var pNt=s(hTe);fTr=r(pNt,"model.eval()"),pNt.forEach(t),mTr=r(BGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pTe=n(BGe,"CODE",{});var _Nt=s(pTe);gTr=r(_Nt,"model.train()"),_Nt.forEach(t),BGe.forEach(t),hTr=i(Ia),T(KT.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),HUe=i(f),uc=n(f,"H2",{class:!0});var lYe=s(uc);ZT=n(lYe,"A",{id:!0,class:!0,href:!0});var uNt=s(ZT);_Te=n(uNt,"SPAN",{});var bNt=s(_Te);T(Hx.$$.fragment,bNt),bNt.forEach(t),uNt.forEach(t),pTr=i(lYe),uTe=n(lYe,"SPAN",{});var vNt=s(uTe);_Tr=r(vNt,"AutoModelForSemanticSegmentation"),vNt.forEach(t),lYe.forEach(t),JUe=i(f),rr=n(f,"DIV",{class:!0});var jl=s(rr);T(Jx.$$.fragment,jl),uTr=i(jl),bc=n(jl,"P",{});var Pne=s(bc);bTr=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),KJ=n(Pne,"A",{href:!0});var FNt=s(KJ);vTr=r(FNt,"from_pretrained()"),FNt.forEach(t),FTr=r(Pne," class method or the "),ZJ=n(Pne,"A",{href:!0});var TNt=s(ZJ);TTr=r(TNt,"from_config()"),TNt.forEach(t),MTr=r(Pne,` class
method.`),Pne.forEach(t),ETr=i(jl),Yx=n(jl,"P",{});var iYe=s(Yx);CTr=r(iYe,"This class cannot be instantiated directly using "),bTe=n(iYe,"CODE",{});var MNt=s(bTe);wTr=r(MNt,"__init__()"),MNt.forEach(t),ATr=r(iYe," (throws an error)."),iYe.forEach(t),LTr=i(jl),It=n(jl,"DIV",{class:!0});var sL=s(It);T(Kx.$$.fragment,sL),yTr=i(sL),vTe=n(sL,"P",{});var ENt=s(vTe);xTr=r(ENt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ENt.forEach(t),$Tr=i(sL),vc=n(sL,"P",{});var Bne=s(vc);kTr=r(Bne,`Note:
Loading a model from its configuration file does `),FTe=n(Bne,"STRONG",{});var CNt=s(FTe);STr=r(CNt,"not"),CNt.forEach(t),RTr=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(Bne,"A",{href:!0});var wNt=s(eY);PTr=r(wNt,"from_pretrained()"),wNt.forEach(t),BTr=r(Bne," to load the model weights."),Bne.forEach(t),ITr=i(sL),T(e8.$$.fragment,sL),sL.forEach(t),NTr=i(jl),To=n(jl,"DIV",{class:!0});var Na=s(To);T(Zx.$$.fragment,Na),qTr=i(Na),TTe=n(Na,"P",{});var ANt=s(TTe);jTr=r(ANt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ANt.forEach(t),DTr=i(Na),hn=n(Na,"P",{});var lL=s(hn);GTr=r(lL,"The model class to instantiate is selected based on the "),MTe=n(lL,"CODE",{});var LNt=s(MTe);OTr=r(LNt,"model_type"),LNt.forEach(t),VTr=r(lL,` property of the config object (either
passed as an argument or loaded from `),ETe=n(lL,"CODE",{});var yNt=s(ETe);XTr=r(yNt,"pretrained_model_name_or_path"),yNt.forEach(t),zTr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(lL,"CODE",{});var xNt=s(CTe);WTr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),QTr=r(lL,":"),lL.forEach(t),UTr=i(Na),it=n(Na,"UL",{});var Dl=s(it);o8=n(Dl,"LI",{});var IGe=s(o8);wTe=n(IGe,"STRONG",{});var $Nt=s(wTe);HTr=r($Nt,"beit"),$Nt.forEach(t),JTr=r(IGe," \u2014 "),oY=n(IGe,"A",{href:!0});var kNt=s(oY);YTr=r(kNt,"BeitForSemanticSegmentation"),kNt.forEach(t),KTr=r(IGe," (BEiT model)"),IGe.forEach(t),ZTr=i(Dl),r8=n(Dl,"LI",{});var NGe=s(r8);ATe=n(NGe,"STRONG",{});var SNt=s(ATe);e8r=r(SNt,"data2vec-vision"),SNt.forEach(t),o8r=r(NGe," \u2014 "),rY=n(NGe,"A",{href:!0});var RNt=s(rY);r8r=r(RNt,"Data2VecVisionForSemanticSegmentation"),RNt.forEach(t),t8r=r(NGe," (Data2VecVision model)"),NGe.forEach(t),a8r=i(Dl),t8=n(Dl,"LI",{});var qGe=s(t8);LTe=n(qGe,"STRONG",{});var PNt=s(LTe);n8r=r(PNt,"dpt"),PNt.forEach(t),s8r=r(qGe," \u2014 "),tY=n(qGe,"A",{href:!0});var BNt=s(tY);l8r=r(BNt,"DPTForSemanticSegmentation"),BNt.forEach(t),i8r=r(qGe," (DPT model)"),qGe.forEach(t),d8r=i(Dl),a8=n(Dl,"LI",{});var jGe=s(a8);yTe=n(jGe,"STRONG",{});var INt=s(yTe);c8r=r(INt,"mobilevit"),INt.forEach(t),f8r=r(jGe," \u2014 "),aY=n(jGe,"A",{href:!0});var NNt=s(aY);m8r=r(NNt,"MobileViTForSemanticSegmentation"),NNt.forEach(t),g8r=r(jGe," (MobileViT model)"),jGe.forEach(t),h8r=i(Dl),n8=n(Dl,"LI",{});var DGe=s(n8);xTe=n(DGe,"STRONG",{});var qNt=s(xTe);p8r=r(qNt,"segformer"),qNt.forEach(t),_8r=r(DGe," \u2014 "),nY=n(DGe,"A",{href:!0});var jNt=s(nY);u8r=r(jNt,"SegformerForSemanticSegmentation"),jNt.forEach(t),b8r=r(DGe," (SegFormer model)"),DGe.forEach(t),Dl.forEach(t),v8r=i(Na),s8=n(Na,"P",{});var GGe=s(s8);F8r=r(GGe,"The model is set in evaluation mode by default using "),$Te=n(GGe,"CODE",{});var DNt=s($Te);T8r=r(DNt,"model.eval()"),DNt.forEach(t),M8r=r(GGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kTe=n(GGe,"CODE",{});var GNt=s(kTe);E8r=r(GNt,"model.train()"),GNt.forEach(t),GGe.forEach(t),C8r=i(Na),T(l8.$$.fragment,Na),Na.forEach(t),jl.forEach(t),YUe=i(f),Fc=n(f,"H2",{class:!0});var dYe=s(Fc);i8=n(dYe,"A",{id:!0,class:!0,href:!0});var ONt=s(i8);STe=n(ONt,"SPAN",{});var VNt=s(STe);T(e$.$$.fragment,VNt),VNt.forEach(t),ONt.forEach(t),w8r=i(dYe),RTe=n(dYe,"SPAN",{});var XNt=s(RTe);A8r=r(XNt,"AutoModelForInstanceSegmentation"),XNt.forEach(t),dYe.forEach(t),KUe=i(f),tr=n(f,"DIV",{class:!0});var Gl=s(tr);T(o$.$$.fragment,Gl),L8r=i(Gl),Tc=n(Gl,"P",{});var Ine=s(Tc);y8r=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),sY=n(Ine,"A",{href:!0});var zNt=s(sY);x8r=r(zNt,"from_pretrained()"),zNt.forEach(t),$8r=r(Ine," class method or the "),lY=n(Ine,"A",{href:!0});var WNt=s(lY);k8r=r(WNt,"from_config()"),WNt.forEach(t),S8r=r(Ine,` class
method.`),Ine.forEach(t),R8r=i(Gl),r$=n(Gl,"P",{});var cYe=s(r$);P8r=r(cYe,"This class cannot be instantiated directly using "),PTe=n(cYe,"CODE",{});var QNt=s(PTe);B8r=r(QNt,"__init__()"),QNt.forEach(t),I8r=r(cYe," (throws an error)."),cYe.forEach(t),N8r=i(Gl),Nt=n(Gl,"DIV",{class:!0});var iL=s(Nt);T(t$.$$.fragment,iL),q8r=i(iL),BTe=n(iL,"P",{});var UNt=s(BTe);j8r=r(UNt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),UNt.forEach(t),D8r=i(iL),Mc=n(iL,"P",{});var Nne=s(Mc);G8r=r(Nne,`Note:
Loading a model from its configuration file does `),ITe=n(Nne,"STRONG",{});var HNt=s(ITe);O8r=r(HNt,"not"),HNt.forEach(t),V8r=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(Nne,"A",{href:!0});var JNt=s(iY);X8r=r(JNt,"from_pretrained()"),JNt.forEach(t),z8r=r(Nne," to load the model weights."),Nne.forEach(t),W8r=i(iL),T(d8.$$.fragment,iL),iL.forEach(t),Q8r=i(Gl),Mo=n(Gl,"DIV",{class:!0});var qa=s(Mo);T(a$.$$.fragment,qa),U8r=i(qa),NTe=n(qa,"P",{});var YNt=s(NTe);H8r=r(YNt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),YNt.forEach(t),J8r=i(qa),pn=n(qa,"P",{});var dL=s(pn);Y8r=r(dL,"The model class to instantiate is selected based on the "),qTe=n(dL,"CODE",{});var KNt=s(qTe);K8r=r(KNt,"model_type"),KNt.forEach(t),Z8r=r(dL,` property of the config object (either
passed as an argument or loaded from `),jTe=n(dL,"CODE",{});var ZNt=s(jTe);eMr=r(ZNt,"pretrained_model_name_or_path"),ZNt.forEach(t),oMr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(dL,"CODE",{});var eqt=s(DTe);rMr=r(eqt,"pretrained_model_name_or_path"),eqt.forEach(t),tMr=r(dL,":"),dL.forEach(t),aMr=i(qa),GTe=n(qa,"UL",{});var oqt=s(GTe);c8=n(oqt,"LI",{});var OGe=s(c8);OTe=n(OGe,"STRONG",{});var rqt=s(OTe);nMr=r(rqt,"maskformer"),rqt.forEach(t),sMr=r(OGe," \u2014 "),dY=n(OGe,"A",{href:!0});var tqt=s(dY);lMr=r(tqt,"MaskFormerForInstanceSegmentation"),tqt.forEach(t),iMr=r(OGe," (MaskFormer model)"),OGe.forEach(t),oqt.forEach(t),dMr=i(qa),f8=n(qa,"P",{});var VGe=s(f8);cMr=r(VGe,"The model is set in evaluation mode by default using "),VTe=n(VGe,"CODE",{});var aqt=s(VTe);fMr=r(aqt,"model.eval()"),aqt.forEach(t),mMr=r(VGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XTe=n(VGe,"CODE",{});var nqt=s(XTe);gMr=r(nqt,"model.train()"),nqt.forEach(t),VGe.forEach(t),hMr=i(qa),T(m8.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),ZUe=i(f),Ec=n(f,"H2",{class:!0});var fYe=s(Ec);g8=n(fYe,"A",{id:!0,class:!0,href:!0});var sqt=s(g8);zTe=n(sqt,"SPAN",{});var lqt=s(zTe);T(n$.$$.fragment,lqt),lqt.forEach(t),sqt.forEach(t),pMr=i(fYe),WTe=n(fYe,"SPAN",{});var iqt=s(WTe);_Mr=r(iqt,"TFAutoModel"),iqt.forEach(t),fYe.forEach(t),eHe=i(f),ar=n(f,"DIV",{class:!0});var Ol=s(ar);T(s$.$$.fragment,Ol),uMr=i(Ol),Cc=n(Ol,"P",{});var qne=s(Cc);bMr=r(qne,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cY=n(qne,"A",{href:!0});var dqt=s(cY);vMr=r(dqt,"from_pretrained()"),dqt.forEach(t),FMr=r(qne," class method or the "),fY=n(qne,"A",{href:!0});var cqt=s(fY);TMr=r(cqt,"from_config()"),cqt.forEach(t),MMr=r(qne,` class
method.`),qne.forEach(t),EMr=i(Ol),l$=n(Ol,"P",{});var mYe=s(l$);CMr=r(mYe,"This class cannot be instantiated directly using "),QTe=n(mYe,"CODE",{});var fqt=s(QTe);wMr=r(fqt,"__init__()"),fqt.forEach(t),AMr=r(mYe," (throws an error)."),mYe.forEach(t),LMr=i(Ol),qt=n(Ol,"DIV",{class:!0});var cL=s(qt);T(i$.$$.fragment,cL),yMr=i(cL),UTe=n(cL,"P",{});var mqt=s(UTe);xMr=r(mqt,"Instantiates one of the base model classes of the library from a configuration."),mqt.forEach(t),$Mr=i(cL),wc=n(cL,"P",{});var jne=s(wc);kMr=r(jne,`Note:
Loading a model from its configuration file does `),HTe=n(jne,"STRONG",{});var gqt=s(HTe);SMr=r(gqt,"not"),gqt.forEach(t),RMr=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(jne,"A",{href:!0});var hqt=s(mY);PMr=r(hqt,"from_pretrained()"),hqt.forEach(t),BMr=r(jne," to load the model weights."),jne.forEach(t),IMr=i(cL),T(h8.$$.fragment,cL),cL.forEach(t),NMr=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(d$.$$.fragment,Vl),qMr=i(Vl),JTe=n(Vl,"P",{});var pqt=s(JTe);jMr=r(pqt,"Instantiate one of the base model classes of the library from a pretrained model."),pqt.forEach(t),DMr=i(Vl),_n=n(Vl,"P",{});var fL=s(_n);GMr=r(fL,"The model class to instantiate is selected based on the "),YTe=n(fL,"CODE",{});var _qt=s(YTe);OMr=r(_qt,"model_type"),_qt.forEach(t),VMr=r(fL,` property of the config object (either
passed as an argument or loaded from `),KTe=n(fL,"CODE",{});var uqt=s(KTe);XMr=r(uqt,"pretrained_model_name_or_path"),uqt.forEach(t),zMr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n(fL,"CODE",{});var bqt=s(ZTe);WMr=r(bqt,"pretrained_model_name_or_path"),bqt.forEach(t),QMr=r(fL,":"),fL.forEach(t),UMr=i(Vl),q=n(Vl,"UL",{});var D=s(q);p8=n(D,"LI",{});var XGe=s(p8);e8e=n(XGe,"STRONG",{});var vqt=s(e8e);HMr=r(vqt,"albert"),vqt.forEach(t),JMr=r(XGe," \u2014 "),gY=n(XGe,"A",{href:!0});var Fqt=s(gY);YMr=r(Fqt,"TFAlbertModel"),Fqt.forEach(t),KMr=r(XGe," (ALBERT model)"),XGe.forEach(t),ZMr=i(D),_8=n(D,"LI",{});var zGe=s(_8);o8e=n(zGe,"STRONG",{});var Tqt=s(o8e);eEr=r(Tqt,"bart"),Tqt.forEach(t),oEr=r(zGe," \u2014 "),hY=n(zGe,"A",{href:!0});var Mqt=s(hY);rEr=r(Mqt,"TFBartModel"),Mqt.forEach(t),tEr=r(zGe," (BART model)"),zGe.forEach(t),aEr=i(D),u8=n(D,"LI",{});var WGe=s(u8);r8e=n(WGe,"STRONG",{});var Eqt=s(r8e);nEr=r(Eqt,"bert"),Eqt.forEach(t),sEr=r(WGe," \u2014 "),pY=n(WGe,"A",{href:!0});var Cqt=s(pY);lEr=r(Cqt,"TFBertModel"),Cqt.forEach(t),iEr=r(WGe," (BERT model)"),WGe.forEach(t),dEr=i(D),b8=n(D,"LI",{});var QGe=s(b8);t8e=n(QGe,"STRONG",{});var wqt=s(t8e);cEr=r(wqt,"blenderbot"),wqt.forEach(t),fEr=r(QGe," \u2014 "),_Y=n(QGe,"A",{href:!0});var Aqt=s(_Y);mEr=r(Aqt,"TFBlenderbotModel"),Aqt.forEach(t),gEr=r(QGe," (Blenderbot model)"),QGe.forEach(t),hEr=i(D),v8=n(D,"LI",{});var UGe=s(v8);a8e=n(UGe,"STRONG",{});var Lqt=s(a8e);pEr=r(Lqt,"blenderbot-small"),Lqt.forEach(t),_Er=r(UGe," \u2014 "),uY=n(UGe,"A",{href:!0});var yqt=s(uY);uEr=r(yqt,"TFBlenderbotSmallModel"),yqt.forEach(t),bEr=r(UGe," (BlenderbotSmall model)"),UGe.forEach(t),vEr=i(D),F8=n(D,"LI",{});var HGe=s(F8);n8e=n(HGe,"STRONG",{});var xqt=s(n8e);FEr=r(xqt,"camembert"),xqt.forEach(t),TEr=r(HGe," \u2014 "),bY=n(HGe,"A",{href:!0});var $qt=s(bY);MEr=r($qt,"TFCamembertModel"),$qt.forEach(t),EEr=r(HGe," (CamemBERT model)"),HGe.forEach(t),CEr=i(D),T8=n(D,"LI",{});var JGe=s(T8);s8e=n(JGe,"STRONG",{});var kqt=s(s8e);wEr=r(kqt,"clip"),kqt.forEach(t),AEr=r(JGe," \u2014 "),vY=n(JGe,"A",{href:!0});var Sqt=s(vY);LEr=r(Sqt,"TFCLIPModel"),Sqt.forEach(t),yEr=r(JGe," (CLIP model)"),JGe.forEach(t),xEr=i(D),M8=n(D,"LI",{});var YGe=s(M8);l8e=n(YGe,"STRONG",{});var Rqt=s(l8e);$Er=r(Rqt,"convbert"),Rqt.forEach(t),kEr=r(YGe," \u2014 "),FY=n(YGe,"A",{href:!0});var Pqt=s(FY);SEr=r(Pqt,"TFConvBertModel"),Pqt.forEach(t),REr=r(YGe," (ConvBERT model)"),YGe.forEach(t),PEr=i(D),E8=n(D,"LI",{});var KGe=s(E8);i8e=n(KGe,"STRONG",{});var Bqt=s(i8e);BEr=r(Bqt,"convnext"),Bqt.forEach(t),IEr=r(KGe," \u2014 "),TY=n(KGe,"A",{href:!0});var Iqt=s(TY);NEr=r(Iqt,"TFConvNextModel"),Iqt.forEach(t),qEr=r(KGe," (ConvNeXT model)"),KGe.forEach(t),jEr=i(D),C8=n(D,"LI",{});var ZGe=s(C8);d8e=n(ZGe,"STRONG",{});var Nqt=s(d8e);DEr=r(Nqt,"ctrl"),Nqt.forEach(t),GEr=r(ZGe," \u2014 "),MY=n(ZGe,"A",{href:!0});var qqt=s(MY);OEr=r(qqt,"TFCTRLModel"),qqt.forEach(t),VEr=r(ZGe," (CTRL model)"),ZGe.forEach(t),XEr=i(D),w8=n(D,"LI",{});var eOe=s(w8);c8e=n(eOe,"STRONG",{});var jqt=s(c8e);zEr=r(jqt,"data2vec-vision"),jqt.forEach(t),WEr=r(eOe," \u2014 "),EY=n(eOe,"A",{href:!0});var Dqt=s(EY);QEr=r(Dqt,"TFData2VecVisionModel"),Dqt.forEach(t),UEr=r(eOe," (Data2VecVision model)"),eOe.forEach(t),HEr=i(D),A8=n(D,"LI",{});var oOe=s(A8);f8e=n(oOe,"STRONG",{});var Gqt=s(f8e);JEr=r(Gqt,"deberta"),Gqt.forEach(t),YEr=r(oOe," \u2014 "),CY=n(oOe,"A",{href:!0});var Oqt=s(CY);KEr=r(Oqt,"TFDebertaModel"),Oqt.forEach(t),ZEr=r(oOe," (DeBERTa model)"),oOe.forEach(t),eCr=i(D),L8=n(D,"LI",{});var rOe=s(L8);m8e=n(rOe,"STRONG",{});var Vqt=s(m8e);oCr=r(Vqt,"deberta-v2"),Vqt.forEach(t),rCr=r(rOe," \u2014 "),wY=n(rOe,"A",{href:!0});var Xqt=s(wY);tCr=r(Xqt,"TFDebertaV2Model"),Xqt.forEach(t),aCr=r(rOe," (DeBERTa-v2 model)"),rOe.forEach(t),nCr=i(D),y8=n(D,"LI",{});var tOe=s(y8);g8e=n(tOe,"STRONG",{});var zqt=s(g8e);sCr=r(zqt,"deit"),zqt.forEach(t),lCr=r(tOe," \u2014 "),AY=n(tOe,"A",{href:!0});var Wqt=s(AY);iCr=r(Wqt,"TFDeiTModel"),Wqt.forEach(t),dCr=r(tOe," (DeiT model)"),tOe.forEach(t),cCr=i(D),x8=n(D,"LI",{});var aOe=s(x8);h8e=n(aOe,"STRONG",{});var Qqt=s(h8e);fCr=r(Qqt,"distilbert"),Qqt.forEach(t),mCr=r(aOe," \u2014 "),LY=n(aOe,"A",{href:!0});var Uqt=s(LY);gCr=r(Uqt,"TFDistilBertModel"),Uqt.forEach(t),hCr=r(aOe," (DistilBERT model)"),aOe.forEach(t),pCr=i(D),$8=n(D,"LI",{});var nOe=s($8);p8e=n(nOe,"STRONG",{});var Hqt=s(p8e);_Cr=r(Hqt,"dpr"),Hqt.forEach(t),uCr=r(nOe," \u2014 "),yY=n(nOe,"A",{href:!0});var Jqt=s(yY);bCr=r(Jqt,"TFDPRQuestionEncoder"),Jqt.forEach(t),vCr=r(nOe," (DPR model)"),nOe.forEach(t),FCr=i(D),k8=n(D,"LI",{});var sOe=s(k8);_8e=n(sOe,"STRONG",{});var Yqt=s(_8e);TCr=r(Yqt,"electra"),Yqt.forEach(t),MCr=r(sOe," \u2014 "),xY=n(sOe,"A",{href:!0});var Kqt=s(xY);ECr=r(Kqt,"TFElectraModel"),Kqt.forEach(t),CCr=r(sOe," (ELECTRA model)"),sOe.forEach(t),wCr=i(D),S8=n(D,"LI",{});var lOe=s(S8);u8e=n(lOe,"STRONG",{});var Zqt=s(u8e);ACr=r(Zqt,"flaubert"),Zqt.forEach(t),LCr=r(lOe," \u2014 "),$Y=n(lOe,"A",{href:!0});var ejt=s($Y);yCr=r(ejt,"TFFlaubertModel"),ejt.forEach(t),xCr=r(lOe," (FlauBERT model)"),lOe.forEach(t),$Cr=i(D),il=n(D,"LI",{});var rP=s(il);b8e=n(rP,"STRONG",{});var ojt=s(b8e);kCr=r(ojt,"funnel"),ojt.forEach(t),SCr=r(rP," \u2014 "),kY=n(rP,"A",{href:!0});var rjt=s(kY);RCr=r(rjt,"TFFunnelModel"),rjt.forEach(t),PCr=r(rP," or "),SY=n(rP,"A",{href:!0});var tjt=s(SY);BCr=r(tjt,"TFFunnelBaseModel"),tjt.forEach(t),ICr=r(rP," (Funnel Transformer model)"),rP.forEach(t),NCr=i(D),R8=n(D,"LI",{});var iOe=s(R8);v8e=n(iOe,"STRONG",{});var ajt=s(v8e);qCr=r(ajt,"gpt2"),ajt.forEach(t),jCr=r(iOe," \u2014 "),RY=n(iOe,"A",{href:!0});var njt=s(RY);DCr=r(njt,"TFGPT2Model"),njt.forEach(t),GCr=r(iOe," (OpenAI GPT-2 model)"),iOe.forEach(t),OCr=i(D),P8=n(D,"LI",{});var dOe=s(P8);F8e=n(dOe,"STRONG",{});var sjt=s(F8e);VCr=r(sjt,"gptj"),sjt.forEach(t),XCr=r(dOe," \u2014 "),PY=n(dOe,"A",{href:!0});var ljt=s(PY);zCr=r(ljt,"TFGPTJModel"),ljt.forEach(t),WCr=r(dOe," (GPT-J model)"),dOe.forEach(t),QCr=i(D),B8=n(D,"LI",{});var cOe=s(B8);T8e=n(cOe,"STRONG",{});var ijt=s(T8e);UCr=r(ijt,"hubert"),ijt.forEach(t),HCr=r(cOe," \u2014 "),BY=n(cOe,"A",{href:!0});var djt=s(BY);JCr=r(djt,"TFHubertModel"),djt.forEach(t),YCr=r(cOe," (Hubert model)"),cOe.forEach(t),KCr=i(D),I8=n(D,"LI",{});var fOe=s(I8);M8e=n(fOe,"STRONG",{});var cjt=s(M8e);ZCr=r(cjt,"layoutlm"),cjt.forEach(t),e3r=r(fOe," \u2014 "),IY=n(fOe,"A",{href:!0});var fjt=s(IY);o3r=r(fjt,"TFLayoutLMModel"),fjt.forEach(t),r3r=r(fOe," (LayoutLM model)"),fOe.forEach(t),t3r=i(D),N8=n(D,"LI",{});var mOe=s(N8);E8e=n(mOe,"STRONG",{});var mjt=s(E8e);a3r=r(mjt,"led"),mjt.forEach(t),n3r=r(mOe," \u2014 "),NY=n(mOe,"A",{href:!0});var gjt=s(NY);s3r=r(gjt,"TFLEDModel"),gjt.forEach(t),l3r=r(mOe," (LED model)"),mOe.forEach(t),i3r=i(D),q8=n(D,"LI",{});var gOe=s(q8);C8e=n(gOe,"STRONG",{});var hjt=s(C8e);d3r=r(hjt,"longformer"),hjt.forEach(t),c3r=r(gOe," \u2014 "),qY=n(gOe,"A",{href:!0});var pjt=s(qY);f3r=r(pjt,"TFLongformerModel"),pjt.forEach(t),m3r=r(gOe," (Longformer model)"),gOe.forEach(t),g3r=i(D),j8=n(D,"LI",{});var hOe=s(j8);w8e=n(hOe,"STRONG",{});var _jt=s(w8e);h3r=r(_jt,"lxmert"),_jt.forEach(t),p3r=r(hOe," \u2014 "),jY=n(hOe,"A",{href:!0});var ujt=s(jY);_3r=r(ujt,"TFLxmertModel"),ujt.forEach(t),u3r=r(hOe," (LXMERT model)"),hOe.forEach(t),b3r=i(D),D8=n(D,"LI",{});var pOe=s(D8);A8e=n(pOe,"STRONG",{});var bjt=s(A8e);v3r=r(bjt,"marian"),bjt.forEach(t),F3r=r(pOe," \u2014 "),DY=n(pOe,"A",{href:!0});var vjt=s(DY);T3r=r(vjt,"TFMarianModel"),vjt.forEach(t),M3r=r(pOe," (Marian model)"),pOe.forEach(t),E3r=i(D),G8=n(D,"LI",{});var _Oe=s(G8);L8e=n(_Oe,"STRONG",{});var Fjt=s(L8e);C3r=r(Fjt,"mbart"),Fjt.forEach(t),w3r=r(_Oe," \u2014 "),GY=n(_Oe,"A",{href:!0});var Tjt=s(GY);A3r=r(Tjt,"TFMBartModel"),Tjt.forEach(t),L3r=r(_Oe," (mBART model)"),_Oe.forEach(t),y3r=i(D),O8=n(D,"LI",{});var uOe=s(O8);y8e=n(uOe,"STRONG",{});var Mjt=s(y8e);x3r=r(Mjt,"mobilebert"),Mjt.forEach(t),$3r=r(uOe," \u2014 "),OY=n(uOe,"A",{href:!0});var Ejt=s(OY);k3r=r(Ejt,"TFMobileBertModel"),Ejt.forEach(t),S3r=r(uOe," (MobileBERT model)"),uOe.forEach(t),R3r=i(D),V8=n(D,"LI",{});var bOe=s(V8);x8e=n(bOe,"STRONG",{});var Cjt=s(x8e);P3r=r(Cjt,"mpnet"),Cjt.forEach(t),B3r=r(bOe," \u2014 "),VY=n(bOe,"A",{href:!0});var wjt=s(VY);I3r=r(wjt,"TFMPNetModel"),wjt.forEach(t),N3r=r(bOe," (MPNet model)"),bOe.forEach(t),q3r=i(D),X8=n(D,"LI",{});var vOe=s(X8);$8e=n(vOe,"STRONG",{});var Ajt=s($8e);j3r=r(Ajt,"mt5"),Ajt.forEach(t),D3r=r(vOe," \u2014 "),XY=n(vOe,"A",{href:!0});var Ljt=s(XY);G3r=r(Ljt,"TFMT5Model"),Ljt.forEach(t),O3r=r(vOe," (MT5 model)"),vOe.forEach(t),V3r=i(D),z8=n(D,"LI",{});var FOe=s(z8);k8e=n(FOe,"STRONG",{});var yjt=s(k8e);X3r=r(yjt,"openai-gpt"),yjt.forEach(t),z3r=r(FOe," \u2014 "),zY=n(FOe,"A",{href:!0});var xjt=s(zY);W3r=r(xjt,"TFOpenAIGPTModel"),xjt.forEach(t),Q3r=r(FOe," (OpenAI GPT model)"),FOe.forEach(t),U3r=i(D),W8=n(D,"LI",{});var TOe=s(W8);S8e=n(TOe,"STRONG",{});var $jt=s(S8e);H3r=r($jt,"opt"),$jt.forEach(t),J3r=r(TOe," \u2014 "),WY=n(TOe,"A",{href:!0});var kjt=s(WY);Y3r=r(kjt,"TFOPTModel"),kjt.forEach(t),K3r=r(TOe," (OPT model)"),TOe.forEach(t),Z3r=i(D),Q8=n(D,"LI",{});var MOe=s(Q8);R8e=n(MOe,"STRONG",{});var Sjt=s(R8e);ewr=r(Sjt,"owlvit"),Sjt.forEach(t),owr=r(MOe," \u2014 "),QY=n(MOe,"A",{href:!0});var Rjt=s(QY);rwr=r(Rjt,"TFOwlViTModel"),Rjt.forEach(t),twr=r(MOe," (OWL-ViT model)"),MOe.forEach(t),awr=i(D),U8=n(D,"LI",{});var EOe=s(U8);P8e=n(EOe,"STRONG",{});var Pjt=s(P8e);nwr=r(Pjt,"pegasus"),Pjt.forEach(t),swr=r(EOe," \u2014 "),UY=n(EOe,"A",{href:!0});var Bjt=s(UY);lwr=r(Bjt,"TFPegasusModel"),Bjt.forEach(t),iwr=r(EOe," (Pegasus model)"),EOe.forEach(t),dwr=i(D),H8=n(D,"LI",{});var COe=s(H8);B8e=n(COe,"STRONG",{});var Ijt=s(B8e);cwr=r(Ijt,"regnet"),Ijt.forEach(t),fwr=r(COe," \u2014 "),HY=n(COe,"A",{href:!0});var Njt=s(HY);mwr=r(Njt,"TFRegNetModel"),Njt.forEach(t),gwr=r(COe," (RegNet model)"),COe.forEach(t),hwr=i(D),J8=n(D,"LI",{});var wOe=s(J8);I8e=n(wOe,"STRONG",{});var qjt=s(I8e);pwr=r(qjt,"rembert"),qjt.forEach(t),_wr=r(wOe," \u2014 "),JY=n(wOe,"A",{href:!0});var jjt=s(JY);uwr=r(jjt,"TFRemBertModel"),jjt.forEach(t),bwr=r(wOe," (RemBERT model)"),wOe.forEach(t),vwr=i(D),Y8=n(D,"LI",{});var AOe=s(Y8);N8e=n(AOe,"STRONG",{});var Djt=s(N8e);Fwr=r(Djt,"resnet"),Djt.forEach(t),Twr=r(AOe," \u2014 "),YY=n(AOe,"A",{href:!0});var Gjt=s(YY);Mwr=r(Gjt,"TFResNetModel"),Gjt.forEach(t),Ewr=r(AOe," (ResNet model)"),AOe.forEach(t),Cwr=i(D),K8=n(D,"LI",{});var LOe=s(K8);q8e=n(LOe,"STRONG",{});var Ojt=s(q8e);wwr=r(Ojt,"roberta"),Ojt.forEach(t),Awr=r(LOe," \u2014 "),KY=n(LOe,"A",{href:!0});var Vjt=s(KY);Lwr=r(Vjt,"TFRobertaModel"),Vjt.forEach(t),ywr=r(LOe," (RoBERTa model)"),LOe.forEach(t),xwr=i(D),Z8=n(D,"LI",{});var yOe=s(Z8);j8e=n(yOe,"STRONG",{});var Xjt=s(j8e);$wr=r(Xjt,"roformer"),Xjt.forEach(t),kwr=r(yOe," \u2014 "),ZY=n(yOe,"A",{href:!0});var zjt=s(ZY);Swr=r(zjt,"TFRoFormerModel"),zjt.forEach(t),Rwr=r(yOe," (RoFormer model)"),yOe.forEach(t),Pwr=i(D),eM=n(D,"LI",{});var xOe=s(eM);D8e=n(xOe,"STRONG",{});var Wjt=s(D8e);Bwr=r(Wjt,"segformer"),Wjt.forEach(t),Iwr=r(xOe," \u2014 "),eK=n(xOe,"A",{href:!0});var Qjt=s(eK);Nwr=r(Qjt,"TFSegformerModel"),Qjt.forEach(t),qwr=r(xOe," (SegFormer model)"),xOe.forEach(t),jwr=i(D),oM=n(D,"LI",{});var $Oe=s(oM);G8e=n($Oe,"STRONG",{});var Ujt=s(G8e);Dwr=r(Ujt,"speech_to_text"),Ujt.forEach(t),Gwr=r($Oe," \u2014 "),oK=n($Oe,"A",{href:!0});var Hjt=s(oK);Owr=r(Hjt,"TFSpeech2TextModel"),Hjt.forEach(t),Vwr=r($Oe," (Speech2Text model)"),$Oe.forEach(t),Xwr=i(D),rM=n(D,"LI",{});var kOe=s(rM);O8e=n(kOe,"STRONG",{});var Jjt=s(O8e);zwr=r(Jjt,"swin"),Jjt.forEach(t),Wwr=r(kOe," \u2014 "),rK=n(kOe,"A",{href:!0});var Yjt=s(rK);Qwr=r(Yjt,"TFSwinModel"),Yjt.forEach(t),Uwr=r(kOe," (Swin Transformer model)"),kOe.forEach(t),Hwr=i(D),tM=n(D,"LI",{});var SOe=s(tM);V8e=n(SOe,"STRONG",{});var Kjt=s(V8e);Jwr=r(Kjt,"t5"),Kjt.forEach(t),Ywr=r(SOe," \u2014 "),tK=n(SOe,"A",{href:!0});var Zjt=s(tK);Kwr=r(Zjt,"TFT5Model"),Zjt.forEach(t),Zwr=r(SOe," (T5 model)"),SOe.forEach(t),e6r=i(D),aM=n(D,"LI",{});var ROe=s(aM);X8e=n(ROe,"STRONG",{});var eDt=s(X8e);o6r=r(eDt,"tapas"),eDt.forEach(t),r6r=r(ROe," \u2014 "),aK=n(ROe,"A",{href:!0});var oDt=s(aK);t6r=r(oDt,"TFTapasModel"),oDt.forEach(t),a6r=r(ROe," (TAPAS model)"),ROe.forEach(t),n6r=i(D),nM=n(D,"LI",{});var POe=s(nM);z8e=n(POe,"STRONG",{});var rDt=s(z8e);s6r=r(rDt,"transfo-xl"),rDt.forEach(t),l6r=r(POe," \u2014 "),nK=n(POe,"A",{href:!0});var tDt=s(nK);i6r=r(tDt,"TFTransfoXLModel"),tDt.forEach(t),d6r=r(POe," (Transformer-XL model)"),POe.forEach(t),c6r=i(D),sM=n(D,"LI",{});var BOe=s(sM);W8e=n(BOe,"STRONG",{});var aDt=s(W8e);f6r=r(aDt,"vit"),aDt.forEach(t),m6r=r(BOe," \u2014 "),sK=n(BOe,"A",{href:!0});var nDt=s(sK);g6r=r(nDt,"TFViTModel"),nDt.forEach(t),h6r=r(BOe," (ViT model)"),BOe.forEach(t),p6r=i(D),lM=n(D,"LI",{});var IOe=s(lM);Q8e=n(IOe,"STRONG",{});var sDt=s(Q8e);_6r=r(sDt,"vit_mae"),sDt.forEach(t),u6r=r(IOe," \u2014 "),lK=n(IOe,"A",{href:!0});var lDt=s(lK);b6r=r(lDt,"TFViTMAEModel"),lDt.forEach(t),v6r=r(IOe," (ViTMAE model)"),IOe.forEach(t),F6r=i(D),iM=n(D,"LI",{});var NOe=s(iM);U8e=n(NOe,"STRONG",{});var iDt=s(U8e);T6r=r(iDt,"wav2vec2"),iDt.forEach(t),M6r=r(NOe," \u2014 "),iK=n(NOe,"A",{href:!0});var dDt=s(iK);E6r=r(dDt,"TFWav2Vec2Model"),dDt.forEach(t),C6r=r(NOe," (Wav2Vec2 model)"),NOe.forEach(t),w6r=i(D),dM=n(D,"LI",{});var qOe=s(dM);H8e=n(qOe,"STRONG",{});var cDt=s(H8e);A6r=r(cDt,"xlm"),cDt.forEach(t),L6r=r(qOe," \u2014 "),dK=n(qOe,"A",{href:!0});var fDt=s(dK);y6r=r(fDt,"TFXLMModel"),fDt.forEach(t),x6r=r(qOe," (XLM model)"),qOe.forEach(t),$6r=i(D),cM=n(D,"LI",{});var jOe=s(cM);J8e=n(jOe,"STRONG",{});var mDt=s(J8e);k6r=r(mDt,"xlm-roberta"),mDt.forEach(t),S6r=r(jOe," \u2014 "),cK=n(jOe,"A",{href:!0});var gDt=s(cK);R6r=r(gDt,"TFXLMRobertaModel"),gDt.forEach(t),P6r=r(jOe," (XLM-RoBERTa model)"),jOe.forEach(t),B6r=i(D),fM=n(D,"LI",{});var DOe=s(fM);Y8e=n(DOe,"STRONG",{});var hDt=s(Y8e);I6r=r(hDt,"xlnet"),hDt.forEach(t),N6r=r(DOe," \u2014 "),fK=n(DOe,"A",{href:!0});var pDt=s(fK);q6r=r(pDt,"TFXLNetModel"),pDt.forEach(t),j6r=r(DOe," (XLNet model)"),DOe.forEach(t),D.forEach(t),D6r=i(Vl),T(mM.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),oHe=i(f),Ac=n(f,"H2",{class:!0});var gYe=s(Ac);gM=n(gYe,"A",{id:!0,class:!0,href:!0});var _Dt=s(gM);K8e=n(_Dt,"SPAN",{});var uDt=s(K8e);T(c$.$$.fragment,uDt),uDt.forEach(t),_Dt.forEach(t),G6r=i(gYe),Z8e=n(gYe,"SPAN",{});var bDt=s(Z8e);O6r=r(bDt,"TFAutoModelForPreTraining"),bDt.forEach(t),gYe.forEach(t),rHe=i(f),nr=n(f,"DIV",{class:!0});var Xl=s(nr);T(f$.$$.fragment,Xl),V6r=i(Xl),Lc=n(Xl,"P",{});var Dne=s(Lc);X6r=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mK=n(Dne,"A",{href:!0});var vDt=s(mK);z6r=r(vDt,"from_pretrained()"),vDt.forEach(t),W6r=r(Dne," class method or the "),gK=n(Dne,"A",{href:!0});var FDt=s(gK);Q6r=r(FDt,"from_config()"),FDt.forEach(t),U6r=r(Dne,` class
method.`),Dne.forEach(t),H6r=i(Xl),m$=n(Xl,"P",{});var hYe=s(m$);J6r=r(hYe,"This class cannot be instantiated directly using "),eMe=n(hYe,"CODE",{});var TDt=s(eMe);Y6r=r(TDt,"__init__()"),TDt.forEach(t),K6r=r(hYe," (throws an error)."),hYe.forEach(t),Z6r=i(Xl),jt=n(Xl,"DIV",{class:!0});var mL=s(jt);T(g$.$$.fragment,mL),eAr=i(mL),oMe=n(mL,"P",{});var MDt=s(oMe);oAr=r(MDt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MDt.forEach(t),rAr=i(mL),yc=n(mL,"P",{});var Gne=s(yc);tAr=r(Gne,`Note:
Loading a model from its configuration file does `),rMe=n(Gne,"STRONG",{});var EDt=s(rMe);aAr=r(EDt,"not"),EDt.forEach(t),nAr=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Gne,"A",{href:!0});var CDt=s(hK);sAr=r(CDt,"from_pretrained()"),CDt.forEach(t),lAr=r(Gne," to load the model weights."),Gne.forEach(t),iAr=i(mL),T(hM.$$.fragment,mL),mL.forEach(t),dAr=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(h$.$$.fragment,zl),cAr=i(zl),tMe=n(zl,"P",{});var wDt=s(tMe);fAr=r(wDt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wDt.forEach(t),mAr=i(zl),un=n(zl,"P",{});var gL=s(un);gAr=r(gL,"The model class to instantiate is selected based on the "),aMe=n(gL,"CODE",{});var ADt=s(aMe);hAr=r(ADt,"model_type"),ADt.forEach(t),pAr=r(gL,` property of the config object (either
passed as an argument or loaded from `),nMe=n(gL,"CODE",{});var LDt=s(nMe);_Ar=r(LDt,"pretrained_model_name_or_path"),LDt.forEach(t),uAr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=n(gL,"CODE",{});var yDt=s(sMe);bAr=r(yDt,"pretrained_model_name_or_path"),yDt.forEach(t),vAr=r(gL,":"),gL.forEach(t),FAr=i(zl),se=n(zl,"UL",{});var le=s(se);pM=n(le,"LI",{});var GOe=s(pM);lMe=n(GOe,"STRONG",{});var xDt=s(lMe);TAr=r(xDt,"albert"),xDt.forEach(t),MAr=r(GOe," \u2014 "),pK=n(GOe,"A",{href:!0});var $Dt=s(pK);EAr=r($Dt,"TFAlbertForPreTraining"),$Dt.forEach(t),CAr=r(GOe," (ALBERT model)"),GOe.forEach(t),wAr=i(le),_M=n(le,"LI",{});var OOe=s(_M);iMe=n(OOe,"STRONG",{});var kDt=s(iMe);AAr=r(kDt,"bart"),kDt.forEach(t),LAr=r(OOe," \u2014 "),_K=n(OOe,"A",{href:!0});var SDt=s(_K);yAr=r(SDt,"TFBartForConditionalGeneration"),SDt.forEach(t),xAr=r(OOe," (BART model)"),OOe.forEach(t),$Ar=i(le),uM=n(le,"LI",{});var VOe=s(uM);dMe=n(VOe,"STRONG",{});var RDt=s(dMe);kAr=r(RDt,"bert"),RDt.forEach(t),SAr=r(VOe," \u2014 "),uK=n(VOe,"A",{href:!0});var PDt=s(uK);RAr=r(PDt,"TFBertForPreTraining"),PDt.forEach(t),PAr=r(VOe," (BERT model)"),VOe.forEach(t),BAr=i(le),bM=n(le,"LI",{});var XOe=s(bM);cMe=n(XOe,"STRONG",{});var BDt=s(cMe);IAr=r(BDt,"camembert"),BDt.forEach(t),NAr=r(XOe," \u2014 "),bK=n(XOe,"A",{href:!0});var IDt=s(bK);qAr=r(IDt,"TFCamembertForMaskedLM"),IDt.forEach(t),jAr=r(XOe," (CamemBERT model)"),XOe.forEach(t),DAr=i(le),vM=n(le,"LI",{});var zOe=s(vM);fMe=n(zOe,"STRONG",{});var NDt=s(fMe);GAr=r(NDt,"ctrl"),NDt.forEach(t),OAr=r(zOe," \u2014 "),vK=n(zOe,"A",{href:!0});var qDt=s(vK);VAr=r(qDt,"TFCTRLLMHeadModel"),qDt.forEach(t),XAr=r(zOe," (CTRL model)"),zOe.forEach(t),zAr=i(le),FM=n(le,"LI",{});var WOe=s(FM);mMe=n(WOe,"STRONG",{});var jDt=s(mMe);WAr=r(jDt,"distilbert"),jDt.forEach(t),QAr=r(WOe," \u2014 "),FK=n(WOe,"A",{href:!0});var DDt=s(FK);UAr=r(DDt,"TFDistilBertForMaskedLM"),DDt.forEach(t),HAr=r(WOe," (DistilBERT model)"),WOe.forEach(t),JAr=i(le),TM=n(le,"LI",{});var QOe=s(TM);gMe=n(QOe,"STRONG",{});var GDt=s(gMe);YAr=r(GDt,"electra"),GDt.forEach(t),KAr=r(QOe," \u2014 "),TK=n(QOe,"A",{href:!0});var ODt=s(TK);ZAr=r(ODt,"TFElectraForPreTraining"),ODt.forEach(t),e7r=r(QOe," (ELECTRA model)"),QOe.forEach(t),o7r=i(le),MM=n(le,"LI",{});var UOe=s(MM);hMe=n(UOe,"STRONG",{});var VDt=s(hMe);r7r=r(VDt,"flaubert"),VDt.forEach(t),t7r=r(UOe," \u2014 "),MK=n(UOe,"A",{href:!0});var XDt=s(MK);a7r=r(XDt,"TFFlaubertWithLMHeadModel"),XDt.forEach(t),n7r=r(UOe," (FlauBERT model)"),UOe.forEach(t),s7r=i(le),EM=n(le,"LI",{});var HOe=s(EM);pMe=n(HOe,"STRONG",{});var zDt=s(pMe);l7r=r(zDt,"funnel"),zDt.forEach(t),i7r=r(HOe," \u2014 "),EK=n(HOe,"A",{href:!0});var WDt=s(EK);d7r=r(WDt,"TFFunnelForPreTraining"),WDt.forEach(t),c7r=r(HOe," (Funnel Transformer model)"),HOe.forEach(t),f7r=i(le),CM=n(le,"LI",{});var JOe=s(CM);_Me=n(JOe,"STRONG",{});var QDt=s(_Me);m7r=r(QDt,"gpt2"),QDt.forEach(t),g7r=r(JOe," \u2014 "),CK=n(JOe,"A",{href:!0});var UDt=s(CK);h7r=r(UDt,"TFGPT2LMHeadModel"),UDt.forEach(t),p7r=r(JOe," (OpenAI GPT-2 model)"),JOe.forEach(t),_7r=i(le),wM=n(le,"LI",{});var YOe=s(wM);uMe=n(YOe,"STRONG",{});var HDt=s(uMe);u7r=r(HDt,"layoutlm"),HDt.forEach(t),b7r=r(YOe," \u2014 "),wK=n(YOe,"A",{href:!0});var JDt=s(wK);v7r=r(JDt,"TFLayoutLMForMaskedLM"),JDt.forEach(t),F7r=r(YOe," (LayoutLM model)"),YOe.forEach(t),T7r=i(le),AM=n(le,"LI",{});var KOe=s(AM);bMe=n(KOe,"STRONG",{});var YDt=s(bMe);M7r=r(YDt,"lxmert"),YDt.forEach(t),E7r=r(KOe," \u2014 "),AK=n(KOe,"A",{href:!0});var KDt=s(AK);C7r=r(KDt,"TFLxmertForPreTraining"),KDt.forEach(t),w7r=r(KOe," (LXMERT model)"),KOe.forEach(t),A7r=i(le),LM=n(le,"LI",{});var ZOe=s(LM);vMe=n(ZOe,"STRONG",{});var ZDt=s(vMe);L7r=r(ZDt,"mobilebert"),ZDt.forEach(t),y7r=r(ZOe," \u2014 "),LK=n(ZOe,"A",{href:!0});var eGt=s(LK);x7r=r(eGt,"TFMobileBertForPreTraining"),eGt.forEach(t),$7r=r(ZOe," (MobileBERT model)"),ZOe.forEach(t),k7r=i(le),yM=n(le,"LI",{});var eVe=s(yM);FMe=n(eVe,"STRONG",{});var oGt=s(FMe);S7r=r(oGt,"mpnet"),oGt.forEach(t),R7r=r(eVe," \u2014 "),yK=n(eVe,"A",{href:!0});var rGt=s(yK);P7r=r(rGt,"TFMPNetForMaskedLM"),rGt.forEach(t),B7r=r(eVe," (MPNet model)"),eVe.forEach(t),I7r=i(le),xM=n(le,"LI",{});var oVe=s(xM);TMe=n(oVe,"STRONG",{});var tGt=s(TMe);N7r=r(tGt,"openai-gpt"),tGt.forEach(t),q7r=r(oVe," \u2014 "),xK=n(oVe,"A",{href:!0});var aGt=s(xK);j7r=r(aGt,"TFOpenAIGPTLMHeadModel"),aGt.forEach(t),D7r=r(oVe," (OpenAI GPT model)"),oVe.forEach(t),G7r=i(le),$M=n(le,"LI",{});var rVe=s($M);MMe=n(rVe,"STRONG",{});var nGt=s(MMe);O7r=r(nGt,"roberta"),nGt.forEach(t),V7r=r(rVe," \u2014 "),$K=n(rVe,"A",{href:!0});var sGt=s($K);X7r=r(sGt,"TFRobertaForMaskedLM"),sGt.forEach(t),z7r=r(rVe," (RoBERTa model)"),rVe.forEach(t),W7r=i(le),kM=n(le,"LI",{});var tVe=s(kM);EMe=n(tVe,"STRONG",{});var lGt=s(EMe);Q7r=r(lGt,"t5"),lGt.forEach(t),U7r=r(tVe," \u2014 "),kK=n(tVe,"A",{href:!0});var iGt=s(kK);H7r=r(iGt,"TFT5ForConditionalGeneration"),iGt.forEach(t),J7r=r(tVe," (T5 model)"),tVe.forEach(t),Y7r=i(le),SM=n(le,"LI",{});var aVe=s(SM);CMe=n(aVe,"STRONG",{});var dGt=s(CMe);K7r=r(dGt,"tapas"),dGt.forEach(t),Z7r=r(aVe," \u2014 "),SK=n(aVe,"A",{href:!0});var cGt=s(SK);eLr=r(cGt,"TFTapasForMaskedLM"),cGt.forEach(t),oLr=r(aVe," (TAPAS model)"),aVe.forEach(t),rLr=i(le),RM=n(le,"LI",{});var nVe=s(RM);wMe=n(nVe,"STRONG",{});var fGt=s(wMe);tLr=r(fGt,"transfo-xl"),fGt.forEach(t),aLr=r(nVe," \u2014 "),RK=n(nVe,"A",{href:!0});var mGt=s(RK);nLr=r(mGt,"TFTransfoXLLMHeadModel"),mGt.forEach(t),sLr=r(nVe," (Transformer-XL model)"),nVe.forEach(t),lLr=i(le),PM=n(le,"LI",{});var sVe=s(PM);AMe=n(sVe,"STRONG",{});var gGt=s(AMe);iLr=r(gGt,"vit_mae"),gGt.forEach(t),dLr=r(sVe," \u2014 "),PK=n(sVe,"A",{href:!0});var hGt=s(PK);cLr=r(hGt,"TFViTMAEForPreTraining"),hGt.forEach(t),fLr=r(sVe," (ViTMAE model)"),sVe.forEach(t),mLr=i(le),BM=n(le,"LI",{});var lVe=s(BM);LMe=n(lVe,"STRONG",{});var pGt=s(LMe);gLr=r(pGt,"xlm"),pGt.forEach(t),hLr=r(lVe," \u2014 "),BK=n(lVe,"A",{href:!0});var _Gt=s(BK);pLr=r(_Gt,"TFXLMWithLMHeadModel"),_Gt.forEach(t),_Lr=r(lVe," (XLM model)"),lVe.forEach(t),uLr=i(le),IM=n(le,"LI",{});var iVe=s(IM);yMe=n(iVe,"STRONG",{});var uGt=s(yMe);bLr=r(uGt,"xlm-roberta"),uGt.forEach(t),vLr=r(iVe," \u2014 "),IK=n(iVe,"A",{href:!0});var bGt=s(IK);FLr=r(bGt,"TFXLMRobertaForMaskedLM"),bGt.forEach(t),TLr=r(iVe," (XLM-RoBERTa model)"),iVe.forEach(t),MLr=i(le),NM=n(le,"LI",{});var dVe=s(NM);xMe=n(dVe,"STRONG",{});var vGt=s(xMe);ELr=r(vGt,"xlnet"),vGt.forEach(t),CLr=r(dVe," \u2014 "),NK=n(dVe,"A",{href:!0});var FGt=s(NK);wLr=r(FGt,"TFXLNetLMHeadModel"),FGt.forEach(t),ALr=r(dVe," (XLNet model)"),dVe.forEach(t),le.forEach(t),LLr=i(zl),T(qM.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),tHe=i(f),xc=n(f,"H2",{class:!0});var pYe=s(xc);jM=n(pYe,"A",{id:!0,class:!0,href:!0});var TGt=s(jM);$Me=n(TGt,"SPAN",{});var MGt=s($Me);T(p$.$$.fragment,MGt),MGt.forEach(t),TGt.forEach(t),yLr=i(pYe),kMe=n(pYe,"SPAN",{});var EGt=s(kMe);xLr=r(EGt,"TFAutoModelForCausalLM"),EGt.forEach(t),pYe.forEach(t),aHe=i(f),sr=n(f,"DIV",{class:!0});var Wl=s(sr);T(_$.$$.fragment,Wl),$Lr=i(Wl),$c=n(Wl,"P",{});var One=s($c);kLr=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qK=n(One,"A",{href:!0});var CGt=s(qK);SLr=r(CGt,"from_pretrained()"),CGt.forEach(t),RLr=r(One," class method or the "),jK=n(One,"A",{href:!0});var wGt=s(jK);PLr=r(wGt,"from_config()"),wGt.forEach(t),BLr=r(One,` class
method.`),One.forEach(t),ILr=i(Wl),u$=n(Wl,"P",{});var _Ye=s(u$);NLr=r(_Ye,"This class cannot be instantiated directly using "),SMe=n(_Ye,"CODE",{});var AGt=s(SMe);qLr=r(AGt,"__init__()"),AGt.forEach(t),jLr=r(_Ye," (throws an error)."),_Ye.forEach(t),DLr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var hL=s(Dt);T(b$.$$.fragment,hL),GLr=i(hL),RMe=n(hL,"P",{});var LGt=s(RMe);OLr=r(LGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),LGt.forEach(t),VLr=i(hL),kc=n(hL,"P",{});var Vne=s(kc);XLr=r(Vne,`Note:
Loading a model from its configuration file does `),PMe=n(Vne,"STRONG",{});var yGt=s(PMe);zLr=r(yGt,"not"),yGt.forEach(t),WLr=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(Vne,"A",{href:!0});var xGt=s(DK);QLr=r(xGt,"from_pretrained()"),xGt.forEach(t),ULr=r(Vne," to load the model weights."),Vne.forEach(t),HLr=i(hL),T(DM.$$.fragment,hL),hL.forEach(t),JLr=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(v$.$$.fragment,Ql),YLr=i(Ql),BMe=n(Ql,"P",{});var $Gt=s(BMe);KLr=r($Gt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Gt.forEach(t),ZLr=i(Ql),bn=n(Ql,"P",{});var pL=s(bn);eyr=r(pL,"The model class to instantiate is selected based on the "),IMe=n(pL,"CODE",{});var kGt=s(IMe);oyr=r(kGt,"model_type"),kGt.forEach(t),ryr=r(pL,` property of the config object (either
passed as an argument or loaded from `),NMe=n(pL,"CODE",{});var SGt=s(NMe);tyr=r(SGt,"pretrained_model_name_or_path"),SGt.forEach(t),ayr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=n(pL,"CODE",{});var RGt=s(qMe);nyr=r(RGt,"pretrained_model_name_or_path"),RGt.forEach(t),syr=r(pL,":"),pL.forEach(t),lyr=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);GM=n(Ce,"LI",{});var cVe=s(GM);jMe=n(cVe,"STRONG",{});var PGt=s(jMe);iyr=r(PGt,"bert"),PGt.forEach(t),dyr=r(cVe," \u2014 "),GK=n(cVe,"A",{href:!0});var BGt=s(GK);cyr=r(BGt,"TFBertLMHeadModel"),BGt.forEach(t),fyr=r(cVe," (BERT model)"),cVe.forEach(t),myr=i(Ce),OM=n(Ce,"LI",{});var fVe=s(OM);DMe=n(fVe,"STRONG",{});var IGt=s(DMe);gyr=r(IGt,"camembert"),IGt.forEach(t),hyr=r(fVe," \u2014 "),OK=n(fVe,"A",{href:!0});var NGt=s(OK);pyr=r(NGt,"TFCamembertForCausalLM"),NGt.forEach(t),_yr=r(fVe," (CamemBERT model)"),fVe.forEach(t),uyr=i(Ce),VM=n(Ce,"LI",{});var mVe=s(VM);GMe=n(mVe,"STRONG",{});var qGt=s(GMe);byr=r(qGt,"ctrl"),qGt.forEach(t),vyr=r(mVe," \u2014 "),VK=n(mVe,"A",{href:!0});var jGt=s(VK);Fyr=r(jGt,"TFCTRLLMHeadModel"),jGt.forEach(t),Tyr=r(mVe," (CTRL model)"),mVe.forEach(t),Myr=i(Ce),XM=n(Ce,"LI",{});var gVe=s(XM);OMe=n(gVe,"STRONG",{});var DGt=s(OMe);Eyr=r(DGt,"gpt2"),DGt.forEach(t),Cyr=r(gVe," \u2014 "),XK=n(gVe,"A",{href:!0});var GGt=s(XK);wyr=r(GGt,"TFGPT2LMHeadModel"),GGt.forEach(t),Ayr=r(gVe," (OpenAI GPT-2 model)"),gVe.forEach(t),Lyr=i(Ce),zM=n(Ce,"LI",{});var hVe=s(zM);VMe=n(hVe,"STRONG",{});var OGt=s(VMe);yyr=r(OGt,"gptj"),OGt.forEach(t),xyr=r(hVe," \u2014 "),zK=n(hVe,"A",{href:!0});var VGt=s(zK);$yr=r(VGt,"TFGPTJForCausalLM"),VGt.forEach(t),kyr=r(hVe," (GPT-J model)"),hVe.forEach(t),Syr=i(Ce),WM=n(Ce,"LI",{});var pVe=s(WM);XMe=n(pVe,"STRONG",{});var XGt=s(XMe);Ryr=r(XGt,"openai-gpt"),XGt.forEach(t),Pyr=r(pVe," \u2014 "),WK=n(pVe,"A",{href:!0});var zGt=s(WK);Byr=r(zGt,"TFOpenAIGPTLMHeadModel"),zGt.forEach(t),Iyr=r(pVe," (OpenAI GPT model)"),pVe.forEach(t),Nyr=i(Ce),QM=n(Ce,"LI",{});var _Ve=s(QM);zMe=n(_Ve,"STRONG",{});var WGt=s(zMe);qyr=r(WGt,"opt"),WGt.forEach(t),jyr=r(_Ve," \u2014 "),QK=n(_Ve,"A",{href:!0});var QGt=s(QK);Dyr=r(QGt,"TFOPTForCausalLM"),QGt.forEach(t),Gyr=r(_Ve," (OPT model)"),_Ve.forEach(t),Oyr=i(Ce),UM=n(Ce,"LI",{});var uVe=s(UM);WMe=n(uVe,"STRONG",{});var UGt=s(WMe);Vyr=r(UGt,"rembert"),UGt.forEach(t),Xyr=r(uVe," \u2014 "),UK=n(uVe,"A",{href:!0});var HGt=s(UK);zyr=r(HGt,"TFRemBertForCausalLM"),HGt.forEach(t),Wyr=r(uVe," (RemBERT model)"),uVe.forEach(t),Qyr=i(Ce),HM=n(Ce,"LI",{});var bVe=s(HM);QMe=n(bVe,"STRONG",{});var JGt=s(QMe);Uyr=r(JGt,"roberta"),JGt.forEach(t),Hyr=r(bVe," \u2014 "),HK=n(bVe,"A",{href:!0});var YGt=s(HK);Jyr=r(YGt,"TFRobertaForCausalLM"),YGt.forEach(t),Yyr=r(bVe," (RoBERTa model)"),bVe.forEach(t),Kyr=i(Ce),JM=n(Ce,"LI",{});var vVe=s(JM);UMe=n(vVe,"STRONG",{});var KGt=s(UMe);Zyr=r(KGt,"roformer"),KGt.forEach(t),e9r=r(vVe," \u2014 "),JK=n(vVe,"A",{href:!0});var ZGt=s(JK);o9r=r(ZGt,"TFRoFormerForCausalLM"),ZGt.forEach(t),r9r=r(vVe," (RoFormer model)"),vVe.forEach(t),t9r=i(Ce),YM=n(Ce,"LI",{});var FVe=s(YM);HMe=n(FVe,"STRONG",{});var eOt=s(HMe);a9r=r(eOt,"transfo-xl"),eOt.forEach(t),n9r=r(FVe," \u2014 "),YK=n(FVe,"A",{href:!0});var oOt=s(YK);s9r=r(oOt,"TFTransfoXLLMHeadModel"),oOt.forEach(t),l9r=r(FVe," (Transformer-XL model)"),FVe.forEach(t),i9r=i(Ce),KM=n(Ce,"LI",{});var TVe=s(KM);JMe=n(TVe,"STRONG",{});var rOt=s(JMe);d9r=r(rOt,"xlm"),rOt.forEach(t),c9r=r(TVe," \u2014 "),KK=n(TVe,"A",{href:!0});var tOt=s(KK);f9r=r(tOt,"TFXLMWithLMHeadModel"),tOt.forEach(t),m9r=r(TVe," (XLM model)"),TVe.forEach(t),g9r=i(Ce),ZM=n(Ce,"LI",{});var MVe=s(ZM);YMe=n(MVe,"STRONG",{});var aOt=s(YMe);h9r=r(aOt,"xlnet"),aOt.forEach(t),p9r=r(MVe," \u2014 "),ZK=n(MVe,"A",{href:!0});var nOt=s(ZK);_9r=r(nOt,"TFXLNetLMHeadModel"),nOt.forEach(t),u9r=r(MVe," (XLNet model)"),MVe.forEach(t),Ce.forEach(t),b9r=i(Ql),T(eE.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),nHe=i(f),Sc=n(f,"H2",{class:!0});var uYe=s(Sc);oE=n(uYe,"A",{id:!0,class:!0,href:!0});var sOt=s(oE);KMe=n(sOt,"SPAN",{});var lOt=s(KMe);T(F$.$$.fragment,lOt),lOt.forEach(t),sOt.forEach(t),v9r=i(uYe),ZMe=n(uYe,"SPAN",{});var iOt=s(ZMe);F9r=r(iOt,"TFAutoModelForImageClassification"),iOt.forEach(t),uYe.forEach(t),sHe=i(f),lr=n(f,"DIV",{class:!0});var Ul=s(lr);T(T$.$$.fragment,Ul),T9r=i(Ul),Rc=n(Ul,"P",{});var Xne=s(Rc);M9r=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eZ=n(Xne,"A",{href:!0});var dOt=s(eZ);E9r=r(dOt,"from_pretrained()"),dOt.forEach(t),C9r=r(Xne," class method or the "),oZ=n(Xne,"A",{href:!0});var cOt=s(oZ);w9r=r(cOt,"from_config()"),cOt.forEach(t),A9r=r(Xne,` class
method.`),Xne.forEach(t),L9r=i(Ul),M$=n(Ul,"P",{});var bYe=s(M$);y9r=r(bYe,"This class cannot be instantiated directly using "),eEe=n(bYe,"CODE",{});var fOt=s(eEe);x9r=r(fOt,"__init__()"),fOt.forEach(t),$9r=r(bYe," (throws an error)."),bYe.forEach(t),k9r=i(Ul),Gt=n(Ul,"DIV",{class:!0});var _L=s(Gt);T(E$.$$.fragment,_L),S9r=i(_L),oEe=n(_L,"P",{});var mOt=s(oEe);R9r=r(mOt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mOt.forEach(t),P9r=i(_L),Pc=n(_L,"P",{});var zne=s(Pc);B9r=r(zne,`Note:
Loading a model from its configuration file does `),rEe=n(zne,"STRONG",{});var gOt=s(rEe);I9r=r(gOt,"not"),gOt.forEach(t),N9r=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(zne,"A",{href:!0});var hOt=s(rZ);q9r=r(hOt,"from_pretrained()"),hOt.forEach(t),j9r=r(zne," to load the model weights."),zne.forEach(t),D9r=i(_L),T(rE.$$.fragment,_L),_L.forEach(t),G9r=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(C$.$$.fragment,Hl),O9r=i(Hl),tEe=n(Hl,"P",{});var pOt=s(tEe);V9r=r(pOt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pOt.forEach(t),X9r=i(Hl),vn=n(Hl,"P",{});var uL=s(vn);z9r=r(uL,"The model class to instantiate is selected based on the "),aEe=n(uL,"CODE",{});var _Ot=s(aEe);W9r=r(_Ot,"model_type"),_Ot.forEach(t),Q9r=r(uL,` property of the config object (either
passed as an argument or loaded from `),nEe=n(uL,"CODE",{});var uOt=s(nEe);U9r=r(uOt,"pretrained_model_name_or_path"),uOt.forEach(t),H9r=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=n(uL,"CODE",{});var bOt=s(sEe);J9r=r(bOt,"pretrained_model_name_or_path"),bOt.forEach(t),Y9r=r(uL,":"),uL.forEach(t),K9r=i(Hl),Ve=n(Hl,"UL",{});var Eo=s(Ve);tE=n(Eo,"LI",{});var EVe=s(tE);lEe=n(EVe,"STRONG",{});var vOt=s(lEe);Z9r=r(vOt,"convnext"),vOt.forEach(t),exr=r(EVe," \u2014 "),tZ=n(EVe,"A",{href:!0});var FOt=s(tZ);oxr=r(FOt,"TFConvNextForImageClassification"),FOt.forEach(t),rxr=r(EVe," (ConvNeXT model)"),EVe.forEach(t),txr=i(Eo),aE=n(Eo,"LI",{});var CVe=s(aE);iEe=n(CVe,"STRONG",{});var TOt=s(iEe);axr=r(TOt,"data2vec-vision"),TOt.forEach(t),nxr=r(CVe," \u2014 "),aZ=n(CVe,"A",{href:!0});var MOt=s(aZ);sxr=r(MOt,"TFData2VecVisionForImageClassification"),MOt.forEach(t),lxr=r(CVe," (Data2VecVision model)"),CVe.forEach(t),ixr=i(Eo),dl=n(Eo,"LI",{});var tP=s(dl);dEe=n(tP,"STRONG",{});var EOt=s(dEe);dxr=r(EOt,"deit"),EOt.forEach(t),cxr=r(tP," \u2014 "),nZ=n(tP,"A",{href:!0});var COt=s(nZ);fxr=r(COt,"TFDeiTForImageClassification"),COt.forEach(t),mxr=r(tP," or "),sZ=n(tP,"A",{href:!0});var wOt=s(sZ);gxr=r(wOt,"TFDeiTForImageClassificationWithTeacher"),wOt.forEach(t),hxr=r(tP," (DeiT model)"),tP.forEach(t),pxr=i(Eo),nE=n(Eo,"LI",{});var wVe=s(nE);cEe=n(wVe,"STRONG",{});var AOt=s(cEe);_xr=r(AOt,"regnet"),AOt.forEach(t),uxr=r(wVe," \u2014 "),lZ=n(wVe,"A",{href:!0});var LOt=s(lZ);bxr=r(LOt,"TFRegNetForImageClassification"),LOt.forEach(t),vxr=r(wVe," (RegNet model)"),wVe.forEach(t),Fxr=i(Eo),sE=n(Eo,"LI",{});var AVe=s(sE);fEe=n(AVe,"STRONG",{});var yOt=s(fEe);Txr=r(yOt,"resnet"),yOt.forEach(t),Mxr=r(AVe," \u2014 "),iZ=n(AVe,"A",{href:!0});var xOt=s(iZ);Exr=r(xOt,"TFResNetForImageClassification"),xOt.forEach(t),Cxr=r(AVe," (ResNet model)"),AVe.forEach(t),wxr=i(Eo),lE=n(Eo,"LI",{});var LVe=s(lE);mEe=n(LVe,"STRONG",{});var $Ot=s(mEe);Axr=r($Ot,"segformer"),$Ot.forEach(t),Lxr=r(LVe," \u2014 "),dZ=n(LVe,"A",{href:!0});var kOt=s(dZ);yxr=r(kOt,"TFSegformerForImageClassification"),kOt.forEach(t),xxr=r(LVe," (SegFormer model)"),LVe.forEach(t),$xr=i(Eo),iE=n(Eo,"LI",{});var yVe=s(iE);gEe=n(yVe,"STRONG",{});var SOt=s(gEe);kxr=r(SOt,"swin"),SOt.forEach(t),Sxr=r(yVe," \u2014 "),cZ=n(yVe,"A",{href:!0});var ROt=s(cZ);Rxr=r(ROt,"TFSwinForImageClassification"),ROt.forEach(t),Pxr=r(yVe," (Swin Transformer model)"),yVe.forEach(t),Bxr=i(Eo),dE=n(Eo,"LI",{});var xVe=s(dE);hEe=n(xVe,"STRONG",{});var POt=s(hEe);Ixr=r(POt,"vit"),POt.forEach(t),Nxr=r(xVe," \u2014 "),fZ=n(xVe,"A",{href:!0});var BOt=s(fZ);qxr=r(BOt,"TFViTForImageClassification"),BOt.forEach(t),jxr=r(xVe," (ViT model)"),xVe.forEach(t),Eo.forEach(t),Dxr=i(Hl),T(cE.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),lHe=i(f),Bc=n(f,"H2",{class:!0});var vYe=s(Bc);fE=n(vYe,"A",{id:!0,class:!0,href:!0});var IOt=s(fE);pEe=n(IOt,"SPAN",{});var NOt=s(pEe);T(w$.$$.fragment,NOt),NOt.forEach(t),IOt.forEach(t),Gxr=i(vYe),_Ee=n(vYe,"SPAN",{});var qOt=s(_Ee);Oxr=r(qOt,"TFAutoModelForSemanticSegmentation"),qOt.forEach(t),vYe.forEach(t),iHe=i(f),ir=n(f,"DIV",{class:!0});var Jl=s(ir);T(A$.$$.fragment,Jl),Vxr=i(Jl),Ic=n(Jl,"P",{});var Wne=s(Ic);Xxr=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),mZ=n(Wne,"A",{href:!0});var jOt=s(mZ);zxr=r(jOt,"from_pretrained()"),jOt.forEach(t),Wxr=r(Wne," class method or the "),gZ=n(Wne,"A",{href:!0});var DOt=s(gZ);Qxr=r(DOt,"from_config()"),DOt.forEach(t),Uxr=r(Wne,` class
method.`),Wne.forEach(t),Hxr=i(Jl),L$=n(Jl,"P",{});var FYe=s(L$);Jxr=r(FYe,"This class cannot be instantiated directly using "),uEe=n(FYe,"CODE",{});var GOt=s(uEe);Yxr=r(GOt,"__init__()"),GOt.forEach(t),Kxr=r(FYe," (throws an error)."),FYe.forEach(t),Zxr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var bL=s(Ot);T(y$.$$.fragment,bL),e$r=i(bL),bEe=n(bL,"P",{});var OOt=s(bEe);o$r=r(OOt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),OOt.forEach(t),r$r=i(bL),Nc=n(bL,"P",{});var Qne=s(Nc);t$r=r(Qne,`Note:
Loading a model from its configuration file does `),vEe=n(Qne,"STRONG",{});var VOt=s(vEe);a$r=r(VOt,"not"),VOt.forEach(t),n$r=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),hZ=n(Qne,"A",{href:!0});var XOt=s(hZ);s$r=r(XOt,"from_pretrained()"),XOt.forEach(t),l$r=r(Qne," to load the model weights."),Qne.forEach(t),i$r=i(bL),T(mE.$$.fragment,bL),bL.forEach(t),d$r=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T(x$.$$.fragment,Yl),c$r=i(Yl),FEe=n(Yl,"P",{});var zOt=s(FEe);f$r=r(zOt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zOt.forEach(t),m$r=i(Yl),Fn=n(Yl,"P",{});var vL=s(Fn);g$r=r(vL,"The model class to instantiate is selected based on the "),TEe=n(vL,"CODE",{});var WOt=s(TEe);h$r=r(WOt,"model_type"),WOt.forEach(t),p$r=r(vL,` property of the config object (either
passed as an argument or loaded from `),MEe=n(vL,"CODE",{});var QOt=s(MEe);_$r=r(QOt,"pretrained_model_name_or_path"),QOt.forEach(t),u$r=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=n(vL,"CODE",{});var UOt=s(EEe);b$r=r(UOt,"pretrained_model_name_or_path"),UOt.forEach(t),v$r=r(vL,":"),vL.forEach(t),F$r=i(Yl),$$=n(Yl,"UL",{});var TYe=s($$);gE=n(TYe,"LI",{});var $Ve=s(gE);CEe=n($Ve,"STRONG",{});var HOt=s(CEe);T$r=r(HOt,"data2vec-vision"),HOt.forEach(t),M$r=r($Ve," \u2014 "),pZ=n($Ve,"A",{href:!0});var JOt=s(pZ);E$r=r(JOt,"TFData2VecVisionForSemanticSegmentation"),JOt.forEach(t),C$r=r($Ve," (Data2VecVision model)"),$Ve.forEach(t),w$r=i(TYe),hE=n(TYe,"LI",{});var kVe=s(hE);wEe=n(kVe,"STRONG",{});var YOt=s(wEe);A$r=r(YOt,"segformer"),YOt.forEach(t),L$r=r(kVe," \u2014 "),_Z=n(kVe,"A",{href:!0});var KOt=s(_Z);y$r=r(KOt,"TFSegformerForSemanticSegmentation"),KOt.forEach(t),x$r=r(kVe," (SegFormer model)"),kVe.forEach(t),TYe.forEach(t),$$r=i(Yl),T(pE.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),dHe=i(f),qc=n(f,"H2",{class:!0});var MYe=s(qc);_E=n(MYe,"A",{id:!0,class:!0,href:!0});var ZOt=s(_E);AEe=n(ZOt,"SPAN",{});var eVt=s(AEe);T(k$.$$.fragment,eVt),eVt.forEach(t),ZOt.forEach(t),k$r=i(MYe),LEe=n(MYe,"SPAN",{});var oVt=s(LEe);S$r=r(oVt,"TFAutoModelForMaskedLM"),oVt.forEach(t),MYe.forEach(t),cHe=i(f),dr=n(f,"DIV",{class:!0});var Kl=s(dr);T(S$.$$.fragment,Kl),R$r=i(Kl),jc=n(Kl,"P",{});var Une=s(jc);P$r=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uZ=n(Une,"A",{href:!0});var rVt=s(uZ);B$r=r(rVt,"from_pretrained()"),rVt.forEach(t),I$r=r(Une," class method or the "),bZ=n(Une,"A",{href:!0});var tVt=s(bZ);N$r=r(tVt,"from_config()"),tVt.forEach(t),q$r=r(Une,` class
method.`),Une.forEach(t),j$r=i(Kl),R$=n(Kl,"P",{});var EYe=s(R$);D$r=r(EYe,"This class cannot be instantiated directly using "),yEe=n(EYe,"CODE",{});var aVt=s(yEe);G$r=r(aVt,"__init__()"),aVt.forEach(t),O$r=r(EYe," (throws an error)."),EYe.forEach(t),V$r=i(Kl),Vt=n(Kl,"DIV",{class:!0});var FL=s(Vt);T(P$.$$.fragment,FL),X$r=i(FL),xEe=n(FL,"P",{});var nVt=s(xEe);z$r=r(nVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nVt.forEach(t),W$r=i(FL),Dc=n(FL,"P",{});var Hne=s(Dc);Q$r=r(Hne,`Note:
Loading a model from its configuration file does `),$Ee=n(Hne,"STRONG",{});var sVt=s($Ee);U$r=r(sVt,"not"),sVt.forEach(t),H$r=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=n(Hne,"A",{href:!0});var lVt=s(vZ);J$r=r(lVt,"from_pretrained()"),lVt.forEach(t),Y$r=r(Hne," to load the model weights."),Hne.forEach(t),K$r=i(FL),T(uE.$$.fragment,FL),FL.forEach(t),Z$r=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T(B$.$$.fragment,Zl),ekr=i(Zl),kEe=n(Zl,"P",{});var iVt=s(kEe);okr=r(iVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iVt.forEach(t),rkr=i(Zl),Tn=n(Zl,"P",{});var TL=s(Tn);tkr=r(TL,"The model class to instantiate is selected based on the "),SEe=n(TL,"CODE",{});var dVt=s(SEe);akr=r(dVt,"model_type"),dVt.forEach(t),nkr=r(TL,` property of the config object (either
passed as an argument or loaded from `),REe=n(TL,"CODE",{});var cVt=s(REe);skr=r(cVt,"pretrained_model_name_or_path"),cVt.forEach(t),lkr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=n(TL,"CODE",{});var fVt=s(PEe);ikr=r(fVt,"pretrained_model_name_or_path"),fVt.forEach(t),dkr=r(TL,":"),TL.forEach(t),ckr=i(Zl),de=n(Zl,"UL",{});var he=s(de);bE=n(he,"LI",{});var SVe=s(bE);BEe=n(SVe,"STRONG",{});var mVt=s(BEe);fkr=r(mVt,"albert"),mVt.forEach(t),mkr=r(SVe," \u2014 "),FZ=n(SVe,"A",{href:!0});var gVt=s(FZ);gkr=r(gVt,"TFAlbertForMaskedLM"),gVt.forEach(t),hkr=r(SVe," (ALBERT model)"),SVe.forEach(t),pkr=i(he),vE=n(he,"LI",{});var RVe=s(vE);IEe=n(RVe,"STRONG",{});var hVt=s(IEe);_kr=r(hVt,"bert"),hVt.forEach(t),ukr=r(RVe," \u2014 "),TZ=n(RVe,"A",{href:!0});var pVt=s(TZ);bkr=r(pVt,"TFBertForMaskedLM"),pVt.forEach(t),vkr=r(RVe," (BERT model)"),RVe.forEach(t),Fkr=i(he),FE=n(he,"LI",{});var PVe=s(FE);NEe=n(PVe,"STRONG",{});var _Vt=s(NEe);Tkr=r(_Vt,"camembert"),_Vt.forEach(t),Mkr=r(PVe," \u2014 "),MZ=n(PVe,"A",{href:!0});var uVt=s(MZ);Ekr=r(uVt,"TFCamembertForMaskedLM"),uVt.forEach(t),Ckr=r(PVe," (CamemBERT model)"),PVe.forEach(t),wkr=i(he),TE=n(he,"LI",{});var BVe=s(TE);qEe=n(BVe,"STRONG",{});var bVt=s(qEe);Akr=r(bVt,"convbert"),bVt.forEach(t),Lkr=r(BVe," \u2014 "),EZ=n(BVe,"A",{href:!0});var vVt=s(EZ);ykr=r(vVt,"TFConvBertForMaskedLM"),vVt.forEach(t),xkr=r(BVe," (ConvBERT model)"),BVe.forEach(t),$kr=i(he),ME=n(he,"LI",{});var IVe=s(ME);jEe=n(IVe,"STRONG",{});var FVt=s(jEe);kkr=r(FVt,"deberta"),FVt.forEach(t),Skr=r(IVe," \u2014 "),CZ=n(IVe,"A",{href:!0});var TVt=s(CZ);Rkr=r(TVt,"TFDebertaForMaskedLM"),TVt.forEach(t),Pkr=r(IVe," (DeBERTa model)"),IVe.forEach(t),Bkr=i(he),EE=n(he,"LI",{});var NVe=s(EE);DEe=n(NVe,"STRONG",{});var MVt=s(DEe);Ikr=r(MVt,"deberta-v2"),MVt.forEach(t),Nkr=r(NVe," \u2014 "),wZ=n(NVe,"A",{href:!0});var EVt=s(wZ);qkr=r(EVt,"TFDebertaV2ForMaskedLM"),EVt.forEach(t),jkr=r(NVe," (DeBERTa-v2 model)"),NVe.forEach(t),Dkr=i(he),CE=n(he,"LI",{});var qVe=s(CE);GEe=n(qVe,"STRONG",{});var CVt=s(GEe);Gkr=r(CVt,"distilbert"),CVt.forEach(t),Okr=r(qVe," \u2014 "),AZ=n(qVe,"A",{href:!0});var wVt=s(AZ);Vkr=r(wVt,"TFDistilBertForMaskedLM"),wVt.forEach(t),Xkr=r(qVe," (DistilBERT model)"),qVe.forEach(t),zkr=i(he),wE=n(he,"LI",{});var jVe=s(wE);OEe=n(jVe,"STRONG",{});var AVt=s(OEe);Wkr=r(AVt,"electra"),AVt.forEach(t),Qkr=r(jVe," \u2014 "),LZ=n(jVe,"A",{href:!0});var LVt=s(LZ);Ukr=r(LVt,"TFElectraForMaskedLM"),LVt.forEach(t),Hkr=r(jVe," (ELECTRA model)"),jVe.forEach(t),Jkr=i(he),AE=n(he,"LI",{});var DVe=s(AE);VEe=n(DVe,"STRONG",{});var yVt=s(VEe);Ykr=r(yVt,"flaubert"),yVt.forEach(t),Kkr=r(DVe," \u2014 "),yZ=n(DVe,"A",{href:!0});var xVt=s(yZ);Zkr=r(xVt,"TFFlaubertWithLMHeadModel"),xVt.forEach(t),eSr=r(DVe," (FlauBERT model)"),DVe.forEach(t),oSr=i(he),LE=n(he,"LI",{});var GVe=s(LE);XEe=n(GVe,"STRONG",{});var $Vt=s(XEe);rSr=r($Vt,"funnel"),$Vt.forEach(t),tSr=r(GVe," \u2014 "),xZ=n(GVe,"A",{href:!0});var kVt=s(xZ);aSr=r(kVt,"TFFunnelForMaskedLM"),kVt.forEach(t),nSr=r(GVe," (Funnel Transformer model)"),GVe.forEach(t),sSr=i(he),yE=n(he,"LI",{});var OVe=s(yE);zEe=n(OVe,"STRONG",{});var SVt=s(zEe);lSr=r(SVt,"layoutlm"),SVt.forEach(t),iSr=r(OVe," \u2014 "),$Z=n(OVe,"A",{href:!0});var RVt=s($Z);dSr=r(RVt,"TFLayoutLMForMaskedLM"),RVt.forEach(t),cSr=r(OVe," (LayoutLM model)"),OVe.forEach(t),fSr=i(he),xE=n(he,"LI",{});var VVe=s(xE);WEe=n(VVe,"STRONG",{});var PVt=s(WEe);mSr=r(PVt,"longformer"),PVt.forEach(t),gSr=r(VVe," \u2014 "),kZ=n(VVe,"A",{href:!0});var BVt=s(kZ);hSr=r(BVt,"TFLongformerForMaskedLM"),BVt.forEach(t),pSr=r(VVe," (Longformer model)"),VVe.forEach(t),_Sr=i(he),$E=n(he,"LI",{});var XVe=s($E);QEe=n(XVe,"STRONG",{});var IVt=s(QEe);uSr=r(IVt,"mobilebert"),IVt.forEach(t),bSr=r(XVe," \u2014 "),SZ=n(XVe,"A",{href:!0});var NVt=s(SZ);vSr=r(NVt,"TFMobileBertForMaskedLM"),NVt.forEach(t),FSr=r(XVe," (MobileBERT model)"),XVe.forEach(t),TSr=i(he),kE=n(he,"LI",{});var zVe=s(kE);UEe=n(zVe,"STRONG",{});var qVt=s(UEe);MSr=r(qVt,"mpnet"),qVt.forEach(t),ESr=r(zVe," \u2014 "),RZ=n(zVe,"A",{href:!0});var jVt=s(RZ);CSr=r(jVt,"TFMPNetForMaskedLM"),jVt.forEach(t),wSr=r(zVe," (MPNet model)"),zVe.forEach(t),ASr=i(he),SE=n(he,"LI",{});var WVe=s(SE);HEe=n(WVe,"STRONG",{});var DVt=s(HEe);LSr=r(DVt,"rembert"),DVt.forEach(t),ySr=r(WVe," \u2014 "),PZ=n(WVe,"A",{href:!0});var GVt=s(PZ);xSr=r(GVt,"TFRemBertForMaskedLM"),GVt.forEach(t),$Sr=r(WVe," (RemBERT model)"),WVe.forEach(t),kSr=i(he),RE=n(he,"LI",{});var QVe=s(RE);JEe=n(QVe,"STRONG",{});var OVt=s(JEe);SSr=r(OVt,"roberta"),OVt.forEach(t),RSr=r(QVe," \u2014 "),BZ=n(QVe,"A",{href:!0});var VVt=s(BZ);PSr=r(VVt,"TFRobertaForMaskedLM"),VVt.forEach(t),BSr=r(QVe," (RoBERTa model)"),QVe.forEach(t),ISr=i(he),PE=n(he,"LI",{});var UVe=s(PE);YEe=n(UVe,"STRONG",{});var XVt=s(YEe);NSr=r(XVt,"roformer"),XVt.forEach(t),qSr=r(UVe," \u2014 "),IZ=n(UVe,"A",{href:!0});var zVt=s(IZ);jSr=r(zVt,"TFRoFormerForMaskedLM"),zVt.forEach(t),DSr=r(UVe," (RoFormer model)"),UVe.forEach(t),GSr=i(he),BE=n(he,"LI",{});var HVe=s(BE);KEe=n(HVe,"STRONG",{});var WVt=s(KEe);OSr=r(WVt,"tapas"),WVt.forEach(t),VSr=r(HVe," \u2014 "),NZ=n(HVe,"A",{href:!0});var QVt=s(NZ);XSr=r(QVt,"TFTapasForMaskedLM"),QVt.forEach(t),zSr=r(HVe," (TAPAS model)"),HVe.forEach(t),WSr=i(he),IE=n(he,"LI",{});var JVe=s(IE);ZEe=n(JVe,"STRONG",{});var UVt=s(ZEe);QSr=r(UVt,"xlm"),UVt.forEach(t),USr=r(JVe," \u2014 "),qZ=n(JVe,"A",{href:!0});var HVt=s(qZ);HSr=r(HVt,"TFXLMWithLMHeadModel"),HVt.forEach(t),JSr=r(JVe," (XLM model)"),JVe.forEach(t),YSr=i(he),NE=n(he,"LI",{});var YVe=s(NE);eCe=n(YVe,"STRONG",{});var JVt=s(eCe);KSr=r(JVt,"xlm-roberta"),JVt.forEach(t),ZSr=r(YVe," \u2014 "),jZ=n(YVe,"A",{href:!0});var YVt=s(jZ);eRr=r(YVt,"TFXLMRobertaForMaskedLM"),YVt.forEach(t),oRr=r(YVe," (XLM-RoBERTa model)"),YVe.forEach(t),he.forEach(t),rRr=i(Zl),T(qE.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),fHe=i(f),Gc=n(f,"H2",{class:!0});var CYe=s(Gc);jE=n(CYe,"A",{id:!0,class:!0,href:!0});var KVt=s(jE);oCe=n(KVt,"SPAN",{});var ZVt=s(oCe);T(I$.$$.fragment,ZVt),ZVt.forEach(t),KVt.forEach(t),tRr=i(CYe),rCe=n(CYe,"SPAN",{});var eXt=s(rCe);aRr=r(eXt,"TFAutoModelForSeq2SeqLM"),eXt.forEach(t),CYe.forEach(t),mHe=i(f),cr=n(f,"DIV",{class:!0});var ei=s(cr);T(N$.$$.fragment,ei),nRr=i(ei),Oc=n(ei,"P",{});var Jne=s(Oc);sRr=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DZ=n(Jne,"A",{href:!0});var oXt=s(DZ);lRr=r(oXt,"from_pretrained()"),oXt.forEach(t),iRr=r(Jne," class method or the "),GZ=n(Jne,"A",{href:!0});var rXt=s(GZ);dRr=r(rXt,"from_config()"),rXt.forEach(t),cRr=r(Jne,` class
method.`),Jne.forEach(t),fRr=i(ei),q$=n(ei,"P",{});var wYe=s(q$);mRr=r(wYe,"This class cannot be instantiated directly using "),tCe=n(wYe,"CODE",{});var tXt=s(tCe);gRr=r(tXt,"__init__()"),tXt.forEach(t),hRr=r(wYe," (throws an error)."),wYe.forEach(t),pRr=i(ei),Xt=n(ei,"DIV",{class:!0});var ML=s(Xt);T(j$.$$.fragment,ML),_Rr=i(ML),aCe=n(ML,"P",{});var aXt=s(aCe);uRr=r(aXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aXt.forEach(t),bRr=i(ML),Vc=n(ML,"P",{});var Yne=s(Vc);vRr=r(Yne,`Note:
Loading a model from its configuration file does `),nCe=n(Yne,"STRONG",{});var nXt=s(nCe);FRr=r(nXt,"not"),nXt.forEach(t),TRr=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Yne,"A",{href:!0});var sXt=s(OZ);MRr=r(sXt,"from_pretrained()"),sXt.forEach(t),ERr=r(Yne," to load the model weights."),Yne.forEach(t),CRr=i(ML),T(DE.$$.fragment,ML),ML.forEach(t),wRr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(D$.$$.fragment,oi),ARr=i(oi),sCe=n(oi,"P",{});var lXt=s(sCe);LRr=r(lXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lXt.forEach(t),yRr=i(oi),Mn=n(oi,"P",{});var EL=s(Mn);xRr=r(EL,"The model class to instantiate is selected based on the "),lCe=n(EL,"CODE",{});var iXt=s(lCe);$Rr=r(iXt,"model_type"),iXt.forEach(t),kRr=r(EL,` property of the config object (either
passed as an argument or loaded from `),iCe=n(EL,"CODE",{});var dXt=s(iCe);SRr=r(dXt,"pretrained_model_name_or_path"),dXt.forEach(t),RRr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=n(EL,"CODE",{});var cXt=s(dCe);PRr=r(cXt,"pretrained_model_name_or_path"),cXt.forEach(t),BRr=r(EL,":"),EL.forEach(t),IRr=i(oi),ye=n(oi,"UL",{});var Ie=s(ye);GE=n(Ie,"LI",{});var KVe=s(GE);cCe=n(KVe,"STRONG",{});var fXt=s(cCe);NRr=r(fXt,"bart"),fXt.forEach(t),qRr=r(KVe," \u2014 "),VZ=n(KVe,"A",{href:!0});var mXt=s(VZ);jRr=r(mXt,"TFBartForConditionalGeneration"),mXt.forEach(t),DRr=r(KVe," (BART model)"),KVe.forEach(t),GRr=i(Ie),OE=n(Ie,"LI",{});var ZVe=s(OE);fCe=n(ZVe,"STRONG",{});var gXt=s(fCe);ORr=r(gXt,"blenderbot"),gXt.forEach(t),VRr=r(ZVe," \u2014 "),XZ=n(ZVe,"A",{href:!0});var hXt=s(XZ);XRr=r(hXt,"TFBlenderbotForConditionalGeneration"),hXt.forEach(t),zRr=r(ZVe," (Blenderbot model)"),ZVe.forEach(t),WRr=i(Ie),VE=n(Ie,"LI",{});var eXe=s(VE);mCe=n(eXe,"STRONG",{});var pXt=s(mCe);QRr=r(pXt,"blenderbot-small"),pXt.forEach(t),URr=r(eXe," \u2014 "),zZ=n(eXe,"A",{href:!0});var _Xt=s(zZ);HRr=r(_Xt,"TFBlenderbotSmallForConditionalGeneration"),_Xt.forEach(t),JRr=r(eXe," (BlenderbotSmall model)"),eXe.forEach(t),YRr=i(Ie),XE=n(Ie,"LI",{});var oXe=s(XE);gCe=n(oXe,"STRONG",{});var uXt=s(gCe);KRr=r(uXt,"encoder-decoder"),uXt.forEach(t),ZRr=r(oXe," \u2014 "),WZ=n(oXe,"A",{href:!0});var bXt=s(WZ);ePr=r(bXt,"TFEncoderDecoderModel"),bXt.forEach(t),oPr=r(oXe," (Encoder decoder model)"),oXe.forEach(t),rPr=i(Ie),zE=n(Ie,"LI",{});var rXe=s(zE);hCe=n(rXe,"STRONG",{});var vXt=s(hCe);tPr=r(vXt,"led"),vXt.forEach(t),aPr=r(rXe," \u2014 "),QZ=n(rXe,"A",{href:!0});var FXt=s(QZ);nPr=r(FXt,"TFLEDForConditionalGeneration"),FXt.forEach(t),sPr=r(rXe," (LED model)"),rXe.forEach(t),lPr=i(Ie),WE=n(Ie,"LI",{});var tXe=s(WE);pCe=n(tXe,"STRONG",{});var TXt=s(pCe);iPr=r(TXt,"marian"),TXt.forEach(t),dPr=r(tXe," \u2014 "),UZ=n(tXe,"A",{href:!0});var MXt=s(UZ);cPr=r(MXt,"TFMarianMTModel"),MXt.forEach(t),fPr=r(tXe," (Marian model)"),tXe.forEach(t),mPr=i(Ie),QE=n(Ie,"LI",{});var aXe=s(QE);_Ce=n(aXe,"STRONG",{});var EXt=s(_Ce);gPr=r(EXt,"mbart"),EXt.forEach(t),hPr=r(aXe," \u2014 "),HZ=n(aXe,"A",{href:!0});var CXt=s(HZ);pPr=r(CXt,"TFMBartForConditionalGeneration"),CXt.forEach(t),_Pr=r(aXe," (mBART model)"),aXe.forEach(t),uPr=i(Ie),UE=n(Ie,"LI",{});var nXe=s(UE);uCe=n(nXe,"STRONG",{});var wXt=s(uCe);bPr=r(wXt,"mt5"),wXt.forEach(t),vPr=r(nXe," \u2014 "),JZ=n(nXe,"A",{href:!0});var AXt=s(JZ);FPr=r(AXt,"TFMT5ForConditionalGeneration"),AXt.forEach(t),TPr=r(nXe," (MT5 model)"),nXe.forEach(t),MPr=i(Ie),HE=n(Ie,"LI",{});var sXe=s(HE);bCe=n(sXe,"STRONG",{});var LXt=s(bCe);EPr=r(LXt,"pegasus"),LXt.forEach(t),CPr=r(sXe," \u2014 "),YZ=n(sXe,"A",{href:!0});var yXt=s(YZ);wPr=r(yXt,"TFPegasusForConditionalGeneration"),yXt.forEach(t),APr=r(sXe," (Pegasus model)"),sXe.forEach(t),LPr=i(Ie),JE=n(Ie,"LI",{});var lXe=s(JE);vCe=n(lXe,"STRONG",{});var xXt=s(vCe);yPr=r(xXt,"t5"),xXt.forEach(t),xPr=r(lXe," \u2014 "),KZ=n(lXe,"A",{href:!0});var $Xt=s(KZ);$Pr=r($Xt,"TFT5ForConditionalGeneration"),$Xt.forEach(t),kPr=r(lXe," (T5 model)"),lXe.forEach(t),Ie.forEach(t),SPr=i(oi),T(YE.$$.fragment,oi),oi.forEach(t),ei.forEach(t),gHe=i(f),Xc=n(f,"H2",{class:!0});var AYe=s(Xc);KE=n(AYe,"A",{id:!0,class:!0,href:!0});var kXt=s(KE);FCe=n(kXt,"SPAN",{});var SXt=s(FCe);T(G$.$$.fragment,SXt),SXt.forEach(t),kXt.forEach(t),RPr=i(AYe),TCe=n(AYe,"SPAN",{});var RXt=s(TCe);PPr=r(RXt,"TFAutoModelForSequenceClassification"),RXt.forEach(t),AYe.forEach(t),hHe=i(f),fr=n(f,"DIV",{class:!0});var ri=s(fr);T(O$.$$.fragment,ri),BPr=i(ri),zc=n(ri,"P",{});var Kne=s(zc);IPr=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZZ=n(Kne,"A",{href:!0});var PXt=s(ZZ);NPr=r(PXt,"from_pretrained()"),PXt.forEach(t),qPr=r(Kne," class method or the "),eee=n(Kne,"A",{href:!0});var BXt=s(eee);jPr=r(BXt,"from_config()"),BXt.forEach(t),DPr=r(Kne,` class
method.`),Kne.forEach(t),GPr=i(ri),V$=n(ri,"P",{});var LYe=s(V$);OPr=r(LYe,"This class cannot be instantiated directly using "),MCe=n(LYe,"CODE",{});var IXt=s(MCe);VPr=r(IXt,"__init__()"),IXt.forEach(t),XPr=r(LYe," (throws an error)."),LYe.forEach(t),zPr=i(ri),zt=n(ri,"DIV",{class:!0});var CL=s(zt);T(X$.$$.fragment,CL),WPr=i(CL),ECe=n(CL,"P",{});var NXt=s(ECe);QPr=r(NXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),NXt.forEach(t),UPr=i(CL),Wc=n(CL,"P",{});var Zne=s(Wc);HPr=r(Zne,`Note:
Loading a model from its configuration file does `),CCe=n(Zne,"STRONG",{});var qXt=s(CCe);JPr=r(qXt,"not"),qXt.forEach(t),YPr=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(Zne,"A",{href:!0});var jXt=s(oee);KPr=r(jXt,"from_pretrained()"),jXt.forEach(t),ZPr=r(Zne," to load the model weights."),Zne.forEach(t),eBr=i(CL),T(ZE.$$.fragment,CL),CL.forEach(t),oBr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(z$.$$.fragment,ti),rBr=i(ti),wCe=n(ti,"P",{});var DXt=s(wCe);tBr=r(DXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DXt.forEach(t),aBr=i(ti),En=n(ti,"P",{});var wL=s(En);nBr=r(wL,"The model class to instantiate is selected based on the "),ACe=n(wL,"CODE",{});var GXt=s(ACe);sBr=r(GXt,"model_type"),GXt.forEach(t),lBr=r(wL,` property of the config object (either
passed as an argument or loaded from `),LCe=n(wL,"CODE",{});var OXt=s(LCe);iBr=r(OXt,"pretrained_model_name_or_path"),OXt.forEach(t),dBr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=n(wL,"CODE",{});var VXt=s(yCe);cBr=r(VXt,"pretrained_model_name_or_path"),VXt.forEach(t),fBr=r(wL,":"),wL.forEach(t),mBr=i(ti),te=n(ti,"UL",{});var ne=s(te);eC=n(ne,"LI",{});var iXe=s(eC);xCe=n(iXe,"STRONG",{});var XXt=s(xCe);gBr=r(XXt,"albert"),XXt.forEach(t),hBr=r(iXe," \u2014 "),ree=n(iXe,"A",{href:!0});var zXt=s(ree);pBr=r(zXt,"TFAlbertForSequenceClassification"),zXt.forEach(t),_Br=r(iXe," (ALBERT model)"),iXe.forEach(t),uBr=i(ne),oC=n(ne,"LI",{});var dXe=s(oC);$Ce=n(dXe,"STRONG",{});var WXt=s($Ce);bBr=r(WXt,"bert"),WXt.forEach(t),vBr=r(dXe," \u2014 "),tee=n(dXe,"A",{href:!0});var QXt=s(tee);FBr=r(QXt,"TFBertForSequenceClassification"),QXt.forEach(t),TBr=r(dXe," (BERT model)"),dXe.forEach(t),MBr=i(ne),rC=n(ne,"LI",{});var cXe=s(rC);kCe=n(cXe,"STRONG",{});var UXt=s(kCe);EBr=r(UXt,"camembert"),UXt.forEach(t),CBr=r(cXe," \u2014 "),aee=n(cXe,"A",{href:!0});var HXt=s(aee);wBr=r(HXt,"TFCamembertForSequenceClassification"),HXt.forEach(t),ABr=r(cXe," (CamemBERT model)"),cXe.forEach(t),LBr=i(ne),tC=n(ne,"LI",{});var fXe=s(tC);SCe=n(fXe,"STRONG",{});var JXt=s(SCe);yBr=r(JXt,"convbert"),JXt.forEach(t),xBr=r(fXe," \u2014 "),nee=n(fXe,"A",{href:!0});var YXt=s(nee);$Br=r(YXt,"TFConvBertForSequenceClassification"),YXt.forEach(t),kBr=r(fXe," (ConvBERT model)"),fXe.forEach(t),SBr=i(ne),aC=n(ne,"LI",{});var mXe=s(aC);RCe=n(mXe,"STRONG",{});var KXt=s(RCe);RBr=r(KXt,"ctrl"),KXt.forEach(t),PBr=r(mXe," \u2014 "),see=n(mXe,"A",{href:!0});var ZXt=s(see);BBr=r(ZXt,"TFCTRLForSequenceClassification"),ZXt.forEach(t),IBr=r(mXe," (CTRL model)"),mXe.forEach(t),NBr=i(ne),nC=n(ne,"LI",{});var gXe=s(nC);PCe=n(gXe,"STRONG",{});var ezt=s(PCe);qBr=r(ezt,"deberta"),ezt.forEach(t),jBr=r(gXe," \u2014 "),lee=n(gXe,"A",{href:!0});var ozt=s(lee);DBr=r(ozt,"TFDebertaForSequenceClassification"),ozt.forEach(t),GBr=r(gXe," (DeBERTa model)"),gXe.forEach(t),OBr=i(ne),sC=n(ne,"LI",{});var hXe=s(sC);BCe=n(hXe,"STRONG",{});var rzt=s(BCe);VBr=r(rzt,"deberta-v2"),rzt.forEach(t),XBr=r(hXe," \u2014 "),iee=n(hXe,"A",{href:!0});var tzt=s(iee);zBr=r(tzt,"TFDebertaV2ForSequenceClassification"),tzt.forEach(t),WBr=r(hXe," (DeBERTa-v2 model)"),hXe.forEach(t),QBr=i(ne),lC=n(ne,"LI",{});var pXe=s(lC);ICe=n(pXe,"STRONG",{});var azt=s(ICe);UBr=r(azt,"distilbert"),azt.forEach(t),HBr=r(pXe," \u2014 "),dee=n(pXe,"A",{href:!0});var nzt=s(dee);JBr=r(nzt,"TFDistilBertForSequenceClassification"),nzt.forEach(t),YBr=r(pXe," (DistilBERT model)"),pXe.forEach(t),KBr=i(ne),iC=n(ne,"LI",{});var _Xe=s(iC);NCe=n(_Xe,"STRONG",{});var szt=s(NCe);ZBr=r(szt,"electra"),szt.forEach(t),eIr=r(_Xe," \u2014 "),cee=n(_Xe,"A",{href:!0});var lzt=s(cee);oIr=r(lzt,"TFElectraForSequenceClassification"),lzt.forEach(t),rIr=r(_Xe," (ELECTRA model)"),_Xe.forEach(t),tIr=i(ne),dC=n(ne,"LI",{});var uXe=s(dC);qCe=n(uXe,"STRONG",{});var izt=s(qCe);aIr=r(izt,"flaubert"),izt.forEach(t),nIr=r(uXe," \u2014 "),fee=n(uXe,"A",{href:!0});var dzt=s(fee);sIr=r(dzt,"TFFlaubertForSequenceClassification"),dzt.forEach(t),lIr=r(uXe," (FlauBERT model)"),uXe.forEach(t),iIr=i(ne),cC=n(ne,"LI",{});var bXe=s(cC);jCe=n(bXe,"STRONG",{});var czt=s(jCe);dIr=r(czt,"funnel"),czt.forEach(t),cIr=r(bXe," \u2014 "),mee=n(bXe,"A",{href:!0});var fzt=s(mee);fIr=r(fzt,"TFFunnelForSequenceClassification"),fzt.forEach(t),mIr=r(bXe," (Funnel Transformer model)"),bXe.forEach(t),gIr=i(ne),fC=n(ne,"LI",{});var vXe=s(fC);DCe=n(vXe,"STRONG",{});var mzt=s(DCe);hIr=r(mzt,"gpt2"),mzt.forEach(t),pIr=r(vXe," \u2014 "),gee=n(vXe,"A",{href:!0});var gzt=s(gee);_Ir=r(gzt,"TFGPT2ForSequenceClassification"),gzt.forEach(t),uIr=r(vXe," (OpenAI GPT-2 model)"),vXe.forEach(t),bIr=i(ne),mC=n(ne,"LI",{});var FXe=s(mC);GCe=n(FXe,"STRONG",{});var hzt=s(GCe);vIr=r(hzt,"gptj"),hzt.forEach(t),FIr=r(FXe," \u2014 "),hee=n(FXe,"A",{href:!0});var pzt=s(hee);TIr=r(pzt,"TFGPTJForSequenceClassification"),pzt.forEach(t),MIr=r(FXe," (GPT-J model)"),FXe.forEach(t),EIr=i(ne),gC=n(ne,"LI",{});var TXe=s(gC);OCe=n(TXe,"STRONG",{});var _zt=s(OCe);CIr=r(_zt,"layoutlm"),_zt.forEach(t),wIr=r(TXe," \u2014 "),pee=n(TXe,"A",{href:!0});var uzt=s(pee);AIr=r(uzt,"TFLayoutLMForSequenceClassification"),uzt.forEach(t),LIr=r(TXe," (LayoutLM model)"),TXe.forEach(t),yIr=i(ne),hC=n(ne,"LI",{});var MXe=s(hC);VCe=n(MXe,"STRONG",{});var bzt=s(VCe);xIr=r(bzt,"longformer"),bzt.forEach(t),$Ir=r(MXe," \u2014 "),_ee=n(MXe,"A",{href:!0});var vzt=s(_ee);kIr=r(vzt,"TFLongformerForSequenceClassification"),vzt.forEach(t),SIr=r(MXe," (Longformer model)"),MXe.forEach(t),RIr=i(ne),pC=n(ne,"LI",{});var EXe=s(pC);XCe=n(EXe,"STRONG",{});var Fzt=s(XCe);PIr=r(Fzt,"mobilebert"),Fzt.forEach(t),BIr=r(EXe," \u2014 "),uee=n(EXe,"A",{href:!0});var Tzt=s(uee);IIr=r(Tzt,"TFMobileBertForSequenceClassification"),Tzt.forEach(t),NIr=r(EXe," (MobileBERT model)"),EXe.forEach(t),qIr=i(ne),_C=n(ne,"LI",{});var CXe=s(_C);zCe=n(CXe,"STRONG",{});var Mzt=s(zCe);jIr=r(Mzt,"mpnet"),Mzt.forEach(t),DIr=r(CXe," \u2014 "),bee=n(CXe,"A",{href:!0});var Ezt=s(bee);GIr=r(Ezt,"TFMPNetForSequenceClassification"),Ezt.forEach(t),OIr=r(CXe," (MPNet model)"),CXe.forEach(t),VIr=i(ne),uC=n(ne,"LI",{});var wXe=s(uC);WCe=n(wXe,"STRONG",{});var Czt=s(WCe);XIr=r(Czt,"openai-gpt"),Czt.forEach(t),zIr=r(wXe," \u2014 "),vee=n(wXe,"A",{href:!0});var wzt=s(vee);WIr=r(wzt,"TFOpenAIGPTForSequenceClassification"),wzt.forEach(t),QIr=r(wXe," (OpenAI GPT model)"),wXe.forEach(t),UIr=i(ne),bC=n(ne,"LI",{});var AXe=s(bC);QCe=n(AXe,"STRONG",{});var Azt=s(QCe);HIr=r(Azt,"rembert"),Azt.forEach(t),JIr=r(AXe," \u2014 "),Fee=n(AXe,"A",{href:!0});var Lzt=s(Fee);YIr=r(Lzt,"TFRemBertForSequenceClassification"),Lzt.forEach(t),KIr=r(AXe," (RemBERT model)"),AXe.forEach(t),ZIr=i(ne),vC=n(ne,"LI",{});var LXe=s(vC);UCe=n(LXe,"STRONG",{});var yzt=s(UCe);eNr=r(yzt,"roberta"),yzt.forEach(t),oNr=r(LXe," \u2014 "),Tee=n(LXe,"A",{href:!0});var xzt=s(Tee);rNr=r(xzt,"TFRobertaForSequenceClassification"),xzt.forEach(t),tNr=r(LXe," (RoBERTa model)"),LXe.forEach(t),aNr=i(ne),FC=n(ne,"LI",{});var yXe=s(FC);HCe=n(yXe,"STRONG",{});var $zt=s(HCe);nNr=r($zt,"roformer"),$zt.forEach(t),sNr=r(yXe," \u2014 "),Mee=n(yXe,"A",{href:!0});var kzt=s(Mee);lNr=r(kzt,"TFRoFormerForSequenceClassification"),kzt.forEach(t),iNr=r(yXe," (RoFormer model)"),yXe.forEach(t),dNr=i(ne),TC=n(ne,"LI",{});var xXe=s(TC);JCe=n(xXe,"STRONG",{});var Szt=s(JCe);cNr=r(Szt,"tapas"),Szt.forEach(t),fNr=r(xXe," \u2014 "),Eee=n(xXe,"A",{href:!0});var Rzt=s(Eee);mNr=r(Rzt,"TFTapasForSequenceClassification"),Rzt.forEach(t),gNr=r(xXe," (TAPAS model)"),xXe.forEach(t),hNr=i(ne),MC=n(ne,"LI",{});var $Xe=s(MC);YCe=n($Xe,"STRONG",{});var Pzt=s(YCe);pNr=r(Pzt,"transfo-xl"),Pzt.forEach(t),_Nr=r($Xe," \u2014 "),Cee=n($Xe,"A",{href:!0});var Bzt=s(Cee);uNr=r(Bzt,"TFTransfoXLForSequenceClassification"),Bzt.forEach(t),bNr=r($Xe," (Transformer-XL model)"),$Xe.forEach(t),vNr=i(ne),EC=n(ne,"LI",{});var kXe=s(EC);KCe=n(kXe,"STRONG",{});var Izt=s(KCe);FNr=r(Izt,"xlm"),Izt.forEach(t),TNr=r(kXe," \u2014 "),wee=n(kXe,"A",{href:!0});var Nzt=s(wee);MNr=r(Nzt,"TFXLMForSequenceClassification"),Nzt.forEach(t),ENr=r(kXe," (XLM model)"),kXe.forEach(t),CNr=i(ne),CC=n(ne,"LI",{});var SXe=s(CC);ZCe=n(SXe,"STRONG",{});var qzt=s(ZCe);wNr=r(qzt,"xlm-roberta"),qzt.forEach(t),ANr=r(SXe," \u2014 "),Aee=n(SXe,"A",{href:!0});var jzt=s(Aee);LNr=r(jzt,"TFXLMRobertaForSequenceClassification"),jzt.forEach(t),yNr=r(SXe," (XLM-RoBERTa model)"),SXe.forEach(t),xNr=i(ne),wC=n(ne,"LI",{});var RXe=s(wC);e3e=n(RXe,"STRONG",{});var Dzt=s(e3e);$Nr=r(Dzt,"xlnet"),Dzt.forEach(t),kNr=r(RXe," \u2014 "),Lee=n(RXe,"A",{href:!0});var Gzt=s(Lee);SNr=r(Gzt,"TFXLNetForSequenceClassification"),Gzt.forEach(t),RNr=r(RXe," (XLNet model)"),RXe.forEach(t),ne.forEach(t),PNr=i(ti),T(AC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),pHe=i(f),Qc=n(f,"H2",{class:!0});var yYe=s(Qc);LC=n(yYe,"A",{id:!0,class:!0,href:!0});var Ozt=s(LC);o3e=n(Ozt,"SPAN",{});var Vzt=s(o3e);T(W$.$$.fragment,Vzt),Vzt.forEach(t),Ozt.forEach(t),BNr=i(yYe),r3e=n(yYe,"SPAN",{});var Xzt=s(r3e);INr=r(Xzt,"TFAutoModelForMultipleChoice"),Xzt.forEach(t),yYe.forEach(t),_He=i(f),mr=n(f,"DIV",{class:!0});var ai=s(mr);T(Q$.$$.fragment,ai),NNr=i(ai),Uc=n(ai,"P",{});var ese=s(Uc);qNr=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yee=n(ese,"A",{href:!0});var zzt=s(yee);jNr=r(zzt,"from_pretrained()"),zzt.forEach(t),DNr=r(ese," class method or the "),xee=n(ese,"A",{href:!0});var Wzt=s(xee);GNr=r(Wzt,"from_config()"),Wzt.forEach(t),ONr=r(ese,` class
method.`),ese.forEach(t),VNr=i(ai),U$=n(ai,"P",{});var xYe=s(U$);XNr=r(xYe,"This class cannot be instantiated directly using "),t3e=n(xYe,"CODE",{});var Qzt=s(t3e);zNr=r(Qzt,"__init__()"),Qzt.forEach(t),WNr=r(xYe," (throws an error)."),xYe.forEach(t),QNr=i(ai),Wt=n(ai,"DIV",{class:!0});var AL=s(Wt);T(H$.$$.fragment,AL),UNr=i(AL),a3e=n(AL,"P",{});var Uzt=s(a3e);HNr=r(Uzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Uzt.forEach(t),JNr=i(AL),Hc=n(AL,"P",{});var ose=s(Hc);YNr=r(ose,`Note:
Loading a model from its configuration file does `),n3e=n(ose,"STRONG",{});var Hzt=s(n3e);KNr=r(Hzt,"not"),Hzt.forEach(t),ZNr=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=n(ose,"A",{href:!0});var Jzt=s($ee);eqr=r(Jzt,"from_pretrained()"),Jzt.forEach(t),oqr=r(ose," to load the model weights."),ose.forEach(t),rqr=i(AL),T(yC.$$.fragment,AL),AL.forEach(t),tqr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(J$.$$.fragment,ni),aqr=i(ni),s3e=n(ni,"P",{});var Yzt=s(s3e);nqr=r(Yzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Yzt.forEach(t),sqr=i(ni),Cn=n(ni,"P",{});var LL=s(Cn);lqr=r(LL,"The model class to instantiate is selected based on the "),l3e=n(LL,"CODE",{});var Kzt=s(l3e);iqr=r(Kzt,"model_type"),Kzt.forEach(t),dqr=r(LL,` property of the config object (either
passed as an argument or loaded from `),i3e=n(LL,"CODE",{});var Zzt=s(i3e);cqr=r(Zzt,"pretrained_model_name_or_path"),Zzt.forEach(t),fqr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=n(LL,"CODE",{});var eWt=s(d3e);mqr=r(eWt,"pretrained_model_name_or_path"),eWt.forEach(t),gqr=r(LL,":"),LL.forEach(t),hqr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);xC=n(Te,"LI",{});var PXe=s(xC);c3e=n(PXe,"STRONG",{});var oWt=s(c3e);pqr=r(oWt,"albert"),oWt.forEach(t),_qr=r(PXe," \u2014 "),kee=n(PXe,"A",{href:!0});var rWt=s(kee);uqr=r(rWt,"TFAlbertForMultipleChoice"),rWt.forEach(t),bqr=r(PXe," (ALBERT model)"),PXe.forEach(t),vqr=i(Te),$C=n(Te,"LI",{});var BXe=s($C);f3e=n(BXe,"STRONG",{});var tWt=s(f3e);Fqr=r(tWt,"bert"),tWt.forEach(t),Tqr=r(BXe," \u2014 "),See=n(BXe,"A",{href:!0});var aWt=s(See);Mqr=r(aWt,"TFBertForMultipleChoice"),aWt.forEach(t),Eqr=r(BXe," (BERT model)"),BXe.forEach(t),Cqr=i(Te),kC=n(Te,"LI",{});var IXe=s(kC);m3e=n(IXe,"STRONG",{});var nWt=s(m3e);wqr=r(nWt,"camembert"),nWt.forEach(t),Aqr=r(IXe," \u2014 "),Ree=n(IXe,"A",{href:!0});var sWt=s(Ree);Lqr=r(sWt,"TFCamembertForMultipleChoice"),sWt.forEach(t),yqr=r(IXe," (CamemBERT model)"),IXe.forEach(t),xqr=i(Te),SC=n(Te,"LI",{});var NXe=s(SC);g3e=n(NXe,"STRONG",{});var lWt=s(g3e);$qr=r(lWt,"convbert"),lWt.forEach(t),kqr=r(NXe," \u2014 "),Pee=n(NXe,"A",{href:!0});var iWt=s(Pee);Sqr=r(iWt,"TFConvBertForMultipleChoice"),iWt.forEach(t),Rqr=r(NXe," (ConvBERT model)"),NXe.forEach(t),Pqr=i(Te),RC=n(Te,"LI",{});var qXe=s(RC);h3e=n(qXe,"STRONG",{});var dWt=s(h3e);Bqr=r(dWt,"distilbert"),dWt.forEach(t),Iqr=r(qXe," \u2014 "),Bee=n(qXe,"A",{href:!0});var cWt=s(Bee);Nqr=r(cWt,"TFDistilBertForMultipleChoice"),cWt.forEach(t),qqr=r(qXe," (DistilBERT model)"),qXe.forEach(t),jqr=i(Te),PC=n(Te,"LI",{});var jXe=s(PC);p3e=n(jXe,"STRONG",{});var fWt=s(p3e);Dqr=r(fWt,"electra"),fWt.forEach(t),Gqr=r(jXe," \u2014 "),Iee=n(jXe,"A",{href:!0});var mWt=s(Iee);Oqr=r(mWt,"TFElectraForMultipleChoice"),mWt.forEach(t),Vqr=r(jXe," (ELECTRA model)"),jXe.forEach(t),Xqr=i(Te),BC=n(Te,"LI",{});var DXe=s(BC);_3e=n(DXe,"STRONG",{});var gWt=s(_3e);zqr=r(gWt,"flaubert"),gWt.forEach(t),Wqr=r(DXe," \u2014 "),Nee=n(DXe,"A",{href:!0});var hWt=s(Nee);Qqr=r(hWt,"TFFlaubertForMultipleChoice"),hWt.forEach(t),Uqr=r(DXe," (FlauBERT model)"),DXe.forEach(t),Hqr=i(Te),IC=n(Te,"LI",{});var GXe=s(IC);u3e=n(GXe,"STRONG",{});var pWt=s(u3e);Jqr=r(pWt,"funnel"),pWt.forEach(t),Yqr=r(GXe," \u2014 "),qee=n(GXe,"A",{href:!0});var _Wt=s(qee);Kqr=r(_Wt,"TFFunnelForMultipleChoice"),_Wt.forEach(t),Zqr=r(GXe," (Funnel Transformer model)"),GXe.forEach(t),ejr=i(Te),NC=n(Te,"LI",{});var OXe=s(NC);b3e=n(OXe,"STRONG",{});var uWt=s(b3e);ojr=r(uWt,"longformer"),uWt.forEach(t),rjr=r(OXe," \u2014 "),jee=n(OXe,"A",{href:!0});var bWt=s(jee);tjr=r(bWt,"TFLongformerForMultipleChoice"),bWt.forEach(t),ajr=r(OXe," (Longformer model)"),OXe.forEach(t),njr=i(Te),qC=n(Te,"LI",{});var VXe=s(qC);v3e=n(VXe,"STRONG",{});var vWt=s(v3e);sjr=r(vWt,"mobilebert"),vWt.forEach(t),ljr=r(VXe," \u2014 "),Dee=n(VXe,"A",{href:!0});var FWt=s(Dee);ijr=r(FWt,"TFMobileBertForMultipleChoice"),FWt.forEach(t),djr=r(VXe," (MobileBERT model)"),VXe.forEach(t),cjr=i(Te),jC=n(Te,"LI",{});var XXe=s(jC);F3e=n(XXe,"STRONG",{});var TWt=s(F3e);fjr=r(TWt,"mpnet"),TWt.forEach(t),mjr=r(XXe," \u2014 "),Gee=n(XXe,"A",{href:!0});var MWt=s(Gee);gjr=r(MWt,"TFMPNetForMultipleChoice"),MWt.forEach(t),hjr=r(XXe," (MPNet model)"),XXe.forEach(t),pjr=i(Te),DC=n(Te,"LI",{});var zXe=s(DC);T3e=n(zXe,"STRONG",{});var EWt=s(T3e);_jr=r(EWt,"rembert"),EWt.forEach(t),ujr=r(zXe," \u2014 "),Oee=n(zXe,"A",{href:!0});var CWt=s(Oee);bjr=r(CWt,"TFRemBertForMultipleChoice"),CWt.forEach(t),vjr=r(zXe," (RemBERT model)"),zXe.forEach(t),Fjr=i(Te),GC=n(Te,"LI",{});var WXe=s(GC);M3e=n(WXe,"STRONG",{});var wWt=s(M3e);Tjr=r(wWt,"roberta"),wWt.forEach(t),Mjr=r(WXe," \u2014 "),Vee=n(WXe,"A",{href:!0});var AWt=s(Vee);Ejr=r(AWt,"TFRobertaForMultipleChoice"),AWt.forEach(t),Cjr=r(WXe," (RoBERTa model)"),WXe.forEach(t),wjr=i(Te),OC=n(Te,"LI",{});var QXe=s(OC);E3e=n(QXe,"STRONG",{});var LWt=s(E3e);Ajr=r(LWt,"roformer"),LWt.forEach(t),Ljr=r(QXe," \u2014 "),Xee=n(QXe,"A",{href:!0});var yWt=s(Xee);yjr=r(yWt,"TFRoFormerForMultipleChoice"),yWt.forEach(t),xjr=r(QXe," (RoFormer model)"),QXe.forEach(t),$jr=i(Te),VC=n(Te,"LI",{});var UXe=s(VC);C3e=n(UXe,"STRONG",{});var xWt=s(C3e);kjr=r(xWt,"xlm"),xWt.forEach(t),Sjr=r(UXe," \u2014 "),zee=n(UXe,"A",{href:!0});var $Wt=s(zee);Rjr=r($Wt,"TFXLMForMultipleChoice"),$Wt.forEach(t),Pjr=r(UXe," (XLM model)"),UXe.forEach(t),Bjr=i(Te),XC=n(Te,"LI",{});var HXe=s(XC);w3e=n(HXe,"STRONG",{});var kWt=s(w3e);Ijr=r(kWt,"xlm-roberta"),kWt.forEach(t),Njr=r(HXe," \u2014 "),Wee=n(HXe,"A",{href:!0});var SWt=s(Wee);qjr=r(SWt,"TFXLMRobertaForMultipleChoice"),SWt.forEach(t),jjr=r(HXe," (XLM-RoBERTa model)"),HXe.forEach(t),Djr=i(Te),zC=n(Te,"LI",{});var JXe=s(zC);A3e=n(JXe,"STRONG",{});var RWt=s(A3e);Gjr=r(RWt,"xlnet"),RWt.forEach(t),Ojr=r(JXe," \u2014 "),Qee=n(JXe,"A",{href:!0});var PWt=s(Qee);Vjr=r(PWt,"TFXLNetForMultipleChoice"),PWt.forEach(t),Xjr=r(JXe," (XLNet model)"),JXe.forEach(t),Te.forEach(t),zjr=i(ni),T(WC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),uHe=i(f),Jc=n(f,"H2",{class:!0});var $Ye=s(Jc);QC=n($Ye,"A",{id:!0,class:!0,href:!0});var BWt=s(QC);L3e=n(BWt,"SPAN",{});var IWt=s(L3e);T(Y$.$$.fragment,IWt),IWt.forEach(t),BWt.forEach(t),Wjr=i($Ye),y3e=n($Ye,"SPAN",{});var NWt=s(y3e);Qjr=r(NWt,"TFAutoModelForNextSentencePrediction"),NWt.forEach(t),$Ye.forEach(t),bHe=i(f),gr=n(f,"DIV",{class:!0});var si=s(gr);T(K$.$$.fragment,si),Ujr=i(si),Yc=n(si,"P",{});var rse=s(Yc);Hjr=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Uee=n(rse,"A",{href:!0});var qWt=s(Uee);Jjr=r(qWt,"from_pretrained()"),qWt.forEach(t),Yjr=r(rse," class method or the "),Hee=n(rse,"A",{href:!0});var jWt=s(Hee);Kjr=r(jWt,"from_config()"),jWt.forEach(t),Zjr=r(rse,` class
method.`),rse.forEach(t),eDr=i(si),Z$=n(si,"P",{});var kYe=s(Z$);oDr=r(kYe,"This class cannot be instantiated directly using "),x3e=n(kYe,"CODE",{});var DWt=s(x3e);rDr=r(DWt,"__init__()"),DWt.forEach(t),tDr=r(kYe," (throws an error)."),kYe.forEach(t),aDr=i(si),Qt=n(si,"DIV",{class:!0});var yL=s(Qt);T(ek.$$.fragment,yL),nDr=i(yL),$3e=n(yL,"P",{});var GWt=s($3e);sDr=r(GWt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GWt.forEach(t),lDr=i(yL),Kc=n(yL,"P",{});var tse=s(Kc);iDr=r(tse,`Note:
Loading a model from its configuration file does `),k3e=n(tse,"STRONG",{});var OWt=s(k3e);dDr=r(OWt,"not"),OWt.forEach(t),cDr=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jee=n(tse,"A",{href:!0});var VWt=s(Jee);fDr=r(VWt,"from_pretrained()"),VWt.forEach(t),mDr=r(tse," to load the model weights."),tse.forEach(t),gDr=i(yL),T(UC.$$.fragment,yL),yL.forEach(t),hDr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(ok.$$.fragment,li),pDr=i(li),S3e=n(li,"P",{});var XWt=s(S3e);_Dr=r(XWt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XWt.forEach(t),uDr=i(li),wn=n(li,"P",{});var xL=s(wn);bDr=r(xL,"The model class to instantiate is selected based on the "),R3e=n(xL,"CODE",{});var zWt=s(R3e);vDr=r(zWt,"model_type"),zWt.forEach(t),FDr=r(xL,` property of the config object (either
passed as an argument or loaded from `),P3e=n(xL,"CODE",{});var WWt=s(P3e);TDr=r(WWt,"pretrained_model_name_or_path"),WWt.forEach(t),MDr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(xL,"CODE",{});var QWt=s(B3e);EDr=r(QWt,"pretrained_model_name_or_path"),QWt.forEach(t),CDr=r(xL,":"),xL.forEach(t),wDr=i(li),rk=n(li,"UL",{});var SYe=s(rk);HC=n(SYe,"LI",{});var YXe=s(HC);I3e=n(YXe,"STRONG",{});var UWt=s(I3e);ADr=r(UWt,"bert"),UWt.forEach(t),LDr=r(YXe," \u2014 "),Yee=n(YXe,"A",{href:!0});var HWt=s(Yee);yDr=r(HWt,"TFBertForNextSentencePrediction"),HWt.forEach(t),xDr=r(YXe," (BERT model)"),YXe.forEach(t),$Dr=i(SYe),JC=n(SYe,"LI",{});var KXe=s(JC);N3e=n(KXe,"STRONG",{});var JWt=s(N3e);kDr=r(JWt,"mobilebert"),JWt.forEach(t),SDr=r(KXe," \u2014 "),Kee=n(KXe,"A",{href:!0});var YWt=s(Kee);RDr=r(YWt,"TFMobileBertForNextSentencePrediction"),YWt.forEach(t),PDr=r(KXe," (MobileBERT model)"),KXe.forEach(t),SYe.forEach(t),BDr=i(li),T(YC.$$.fragment,li),li.forEach(t),si.forEach(t),vHe=i(f),Zc=n(f,"H2",{class:!0});var RYe=s(Zc);KC=n(RYe,"A",{id:!0,class:!0,href:!0});var KWt=s(KC);q3e=n(KWt,"SPAN",{});var ZWt=s(q3e);T(tk.$$.fragment,ZWt),ZWt.forEach(t),KWt.forEach(t),IDr=i(RYe),j3e=n(RYe,"SPAN",{});var eQt=s(j3e);NDr=r(eQt,"TFAutoModelForTableQuestionAnswering"),eQt.forEach(t),RYe.forEach(t),FHe=i(f),hr=n(f,"DIV",{class:!0});var ii=s(hr);T(ak.$$.fragment,ii),qDr=i(ii),ef=n(ii,"P",{});var ase=s(ef);jDr=r(ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Zee=n(ase,"A",{href:!0});var oQt=s(Zee);DDr=r(oQt,"from_pretrained()"),oQt.forEach(t),GDr=r(ase," class method or the "),eoe=n(ase,"A",{href:!0});var rQt=s(eoe);ODr=r(rQt,"from_config()"),rQt.forEach(t),VDr=r(ase,` class
method.`),ase.forEach(t),XDr=i(ii),nk=n(ii,"P",{});var PYe=s(nk);zDr=r(PYe,"This class cannot be instantiated directly using "),D3e=n(PYe,"CODE",{});var tQt=s(D3e);WDr=r(tQt,"__init__()"),tQt.forEach(t),QDr=r(PYe," (throws an error)."),PYe.forEach(t),UDr=i(ii),Ut=n(ii,"DIV",{class:!0});var $L=s(Ut);T(sk.$$.fragment,$L),HDr=i($L),G3e=n($L,"P",{});var aQt=s(G3e);JDr=r(aQt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),aQt.forEach(t),YDr=i($L),of=n($L,"P",{});var nse=s(of);KDr=r(nse,`Note:
Loading a model from its configuration file does `),O3e=n(nse,"STRONG",{});var nQt=s(O3e);ZDr=r(nQt,"not"),nQt.forEach(t),eGr=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=n(nse,"A",{href:!0});var sQt=s(ooe);oGr=r(sQt,"from_pretrained()"),sQt.forEach(t),rGr=r(nse," to load the model weights."),nse.forEach(t),tGr=i($L),T(ZC.$$.fragment,$L),$L.forEach(t),aGr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(lk.$$.fragment,di),nGr=i(di),V3e=n(di,"P",{});var lQt=s(V3e);sGr=r(lQt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lQt.forEach(t),lGr=i(di),An=n(di,"P",{});var kL=s(An);iGr=r(kL,"The model class to instantiate is selected based on the "),X3e=n(kL,"CODE",{});var iQt=s(X3e);dGr=r(iQt,"model_type"),iQt.forEach(t),cGr=r(kL,` property of the config object (either
passed as an argument or loaded from `),z3e=n(kL,"CODE",{});var dQt=s(z3e);fGr=r(dQt,"pretrained_model_name_or_path"),dQt.forEach(t),mGr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=n(kL,"CODE",{});var cQt=s(W3e);gGr=r(cQt,"pretrained_model_name_or_path"),cQt.forEach(t),hGr=r(kL,":"),kL.forEach(t),pGr=i(di),Q3e=n(di,"UL",{});var fQt=s(Q3e);e3=n(fQt,"LI",{});var ZXe=s(e3);U3e=n(ZXe,"STRONG",{});var mQt=s(U3e);_Gr=r(mQt,"tapas"),mQt.forEach(t),uGr=r(ZXe," \u2014 "),roe=n(ZXe,"A",{href:!0});var gQt=s(roe);bGr=r(gQt,"TFTapasForQuestionAnswering"),gQt.forEach(t),vGr=r(ZXe," (TAPAS model)"),ZXe.forEach(t),fQt.forEach(t),FGr=i(di),T(o3.$$.fragment,di),di.forEach(t),ii.forEach(t),THe=i(f),rf=n(f,"H2",{class:!0});var BYe=s(rf);r3=n(BYe,"A",{id:!0,class:!0,href:!0});var hQt=s(r3);H3e=n(hQt,"SPAN",{});var pQt=s(H3e);T(ik.$$.fragment,pQt),pQt.forEach(t),hQt.forEach(t),TGr=i(BYe),J3e=n(BYe,"SPAN",{});var _Qt=s(J3e);MGr=r(_Qt,"TFAutoModelForTokenClassification"),_Qt.forEach(t),BYe.forEach(t),MHe=i(f),pr=n(f,"DIV",{class:!0});var ci=s(pr);T(dk.$$.fragment,ci),EGr=i(ci),tf=n(ci,"P",{});var sse=s(tf);CGr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),toe=n(sse,"A",{href:!0});var uQt=s(toe);wGr=r(uQt,"from_pretrained()"),uQt.forEach(t),AGr=r(sse," class method or the "),aoe=n(sse,"A",{href:!0});var bQt=s(aoe);LGr=r(bQt,"from_config()"),bQt.forEach(t),yGr=r(sse,` class
method.`),sse.forEach(t),xGr=i(ci),ck=n(ci,"P",{});var IYe=s(ck);$Gr=r(IYe,"This class cannot be instantiated directly using "),Y3e=n(IYe,"CODE",{});var vQt=s(Y3e);kGr=r(vQt,"__init__()"),vQt.forEach(t),SGr=r(IYe," (throws an error)."),IYe.forEach(t),RGr=i(ci),Ht=n(ci,"DIV",{class:!0});var SL=s(Ht);T(fk.$$.fragment,SL),PGr=i(SL),K3e=n(SL,"P",{});var FQt=s(K3e);BGr=r(FQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FQt.forEach(t),IGr=i(SL),af=n(SL,"P",{});var lse=s(af);NGr=r(lse,`Note:
Loading a model from its configuration file does `),Z3e=n(lse,"STRONG",{});var TQt=s(Z3e);qGr=r(TQt,"not"),TQt.forEach(t),jGr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=n(lse,"A",{href:!0});var MQt=s(noe);DGr=r(MQt,"from_pretrained()"),MQt.forEach(t),GGr=r(lse," to load the model weights."),lse.forEach(t),OGr=i(SL),T(t3.$$.fragment,SL),SL.forEach(t),VGr=i(ci),Xr=n(ci,"DIV",{class:!0});var fi=s(Xr);T(mk.$$.fragment,fi),XGr=i(fi),ewe=n(fi,"P",{});var EQt=s(ewe);zGr=r(EQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EQt.forEach(t),WGr=i(fi),Ln=n(fi,"P",{});var RL=s(Ln);QGr=r(RL,"The model class to instantiate is selected based on the "),owe=n(RL,"CODE",{});var CQt=s(owe);UGr=r(CQt,"model_type"),CQt.forEach(t),HGr=r(RL,` property of the config object (either
passed as an argument or loaded from `),rwe=n(RL,"CODE",{});var wQt=s(rwe);JGr=r(wQt,"pretrained_model_name_or_path"),wQt.forEach(t),YGr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),twe=n(RL,"CODE",{});var AQt=s(twe);KGr=r(AQt,"pretrained_model_name_or_path"),AQt.forEach(t),ZGr=r(RL,":"),RL.forEach(t),eOr=i(fi),ce=n(fi,"UL",{});var pe=s(ce);a3=n(pe,"LI",{});var eze=s(a3);awe=n(eze,"STRONG",{});var LQt=s(awe);oOr=r(LQt,"albert"),LQt.forEach(t),rOr=r(eze," \u2014 "),soe=n(eze,"A",{href:!0});var yQt=s(soe);tOr=r(yQt,"TFAlbertForTokenClassification"),yQt.forEach(t),aOr=r(eze," (ALBERT model)"),eze.forEach(t),nOr=i(pe),n3=n(pe,"LI",{});var oze=s(n3);nwe=n(oze,"STRONG",{});var xQt=s(nwe);sOr=r(xQt,"bert"),xQt.forEach(t),lOr=r(oze," \u2014 "),loe=n(oze,"A",{href:!0});var $Qt=s(loe);iOr=r($Qt,"TFBertForTokenClassification"),$Qt.forEach(t),dOr=r(oze," (BERT model)"),oze.forEach(t),cOr=i(pe),s3=n(pe,"LI",{});var rze=s(s3);swe=n(rze,"STRONG",{});var kQt=s(swe);fOr=r(kQt,"camembert"),kQt.forEach(t),mOr=r(rze," \u2014 "),ioe=n(rze,"A",{href:!0});var SQt=s(ioe);gOr=r(SQt,"TFCamembertForTokenClassification"),SQt.forEach(t),hOr=r(rze," (CamemBERT model)"),rze.forEach(t),pOr=i(pe),l3=n(pe,"LI",{});var tze=s(l3);lwe=n(tze,"STRONG",{});var RQt=s(lwe);_Or=r(RQt,"convbert"),RQt.forEach(t),uOr=r(tze," \u2014 "),doe=n(tze,"A",{href:!0});var PQt=s(doe);bOr=r(PQt,"TFConvBertForTokenClassification"),PQt.forEach(t),vOr=r(tze," (ConvBERT model)"),tze.forEach(t),FOr=i(pe),i3=n(pe,"LI",{});var aze=s(i3);iwe=n(aze,"STRONG",{});var BQt=s(iwe);TOr=r(BQt,"deberta"),BQt.forEach(t),MOr=r(aze," \u2014 "),coe=n(aze,"A",{href:!0});var IQt=s(coe);EOr=r(IQt,"TFDebertaForTokenClassification"),IQt.forEach(t),COr=r(aze," (DeBERTa model)"),aze.forEach(t),wOr=i(pe),d3=n(pe,"LI",{});var nze=s(d3);dwe=n(nze,"STRONG",{});var NQt=s(dwe);AOr=r(NQt,"deberta-v2"),NQt.forEach(t),LOr=r(nze," \u2014 "),foe=n(nze,"A",{href:!0});var qQt=s(foe);yOr=r(qQt,"TFDebertaV2ForTokenClassification"),qQt.forEach(t),xOr=r(nze," (DeBERTa-v2 model)"),nze.forEach(t),$Or=i(pe),c3=n(pe,"LI",{});var sze=s(c3);cwe=n(sze,"STRONG",{});var jQt=s(cwe);kOr=r(jQt,"distilbert"),jQt.forEach(t),SOr=r(sze," \u2014 "),moe=n(sze,"A",{href:!0});var DQt=s(moe);ROr=r(DQt,"TFDistilBertForTokenClassification"),DQt.forEach(t),POr=r(sze," (DistilBERT model)"),sze.forEach(t),BOr=i(pe),f3=n(pe,"LI",{});var lze=s(f3);fwe=n(lze,"STRONG",{});var GQt=s(fwe);IOr=r(GQt,"electra"),GQt.forEach(t),NOr=r(lze," \u2014 "),goe=n(lze,"A",{href:!0});var OQt=s(goe);qOr=r(OQt,"TFElectraForTokenClassification"),OQt.forEach(t),jOr=r(lze," (ELECTRA model)"),lze.forEach(t),DOr=i(pe),m3=n(pe,"LI",{});var ize=s(m3);mwe=n(ize,"STRONG",{});var VQt=s(mwe);GOr=r(VQt,"flaubert"),VQt.forEach(t),OOr=r(ize," \u2014 "),hoe=n(ize,"A",{href:!0});var XQt=s(hoe);VOr=r(XQt,"TFFlaubertForTokenClassification"),XQt.forEach(t),XOr=r(ize," (FlauBERT model)"),ize.forEach(t),zOr=i(pe),g3=n(pe,"LI",{});var dze=s(g3);gwe=n(dze,"STRONG",{});var zQt=s(gwe);WOr=r(zQt,"funnel"),zQt.forEach(t),QOr=r(dze," \u2014 "),poe=n(dze,"A",{href:!0});var WQt=s(poe);UOr=r(WQt,"TFFunnelForTokenClassification"),WQt.forEach(t),HOr=r(dze," (Funnel Transformer model)"),dze.forEach(t),JOr=i(pe),h3=n(pe,"LI",{});var cze=s(h3);hwe=n(cze,"STRONG",{});var QQt=s(hwe);YOr=r(QQt,"layoutlm"),QQt.forEach(t),KOr=r(cze," \u2014 "),_oe=n(cze,"A",{href:!0});var UQt=s(_oe);ZOr=r(UQt,"TFLayoutLMForTokenClassification"),UQt.forEach(t),eVr=r(cze," (LayoutLM model)"),cze.forEach(t),oVr=i(pe),p3=n(pe,"LI",{});var fze=s(p3);pwe=n(fze,"STRONG",{});var HQt=s(pwe);rVr=r(HQt,"longformer"),HQt.forEach(t),tVr=r(fze," \u2014 "),uoe=n(fze,"A",{href:!0});var JQt=s(uoe);aVr=r(JQt,"TFLongformerForTokenClassification"),JQt.forEach(t),nVr=r(fze," (Longformer model)"),fze.forEach(t),sVr=i(pe),_3=n(pe,"LI",{});var mze=s(_3);_we=n(mze,"STRONG",{});var YQt=s(_we);lVr=r(YQt,"mobilebert"),YQt.forEach(t),iVr=r(mze," \u2014 "),boe=n(mze,"A",{href:!0});var KQt=s(boe);dVr=r(KQt,"TFMobileBertForTokenClassification"),KQt.forEach(t),cVr=r(mze," (MobileBERT model)"),mze.forEach(t),fVr=i(pe),u3=n(pe,"LI",{});var gze=s(u3);uwe=n(gze,"STRONG",{});var ZQt=s(uwe);mVr=r(ZQt,"mpnet"),ZQt.forEach(t),gVr=r(gze," \u2014 "),voe=n(gze,"A",{href:!0});var eUt=s(voe);hVr=r(eUt,"TFMPNetForTokenClassification"),eUt.forEach(t),pVr=r(gze," (MPNet model)"),gze.forEach(t),_Vr=i(pe),b3=n(pe,"LI",{});var hze=s(b3);bwe=n(hze,"STRONG",{});var oUt=s(bwe);uVr=r(oUt,"rembert"),oUt.forEach(t),bVr=r(hze," \u2014 "),Foe=n(hze,"A",{href:!0});var rUt=s(Foe);vVr=r(rUt,"TFRemBertForTokenClassification"),rUt.forEach(t),FVr=r(hze," (RemBERT model)"),hze.forEach(t),TVr=i(pe),v3=n(pe,"LI",{});var pze=s(v3);vwe=n(pze,"STRONG",{});var tUt=s(vwe);MVr=r(tUt,"roberta"),tUt.forEach(t),EVr=r(pze," \u2014 "),Toe=n(pze,"A",{href:!0});var aUt=s(Toe);CVr=r(aUt,"TFRobertaForTokenClassification"),aUt.forEach(t),wVr=r(pze," (RoBERTa model)"),pze.forEach(t),AVr=i(pe),F3=n(pe,"LI",{});var _ze=s(F3);Fwe=n(_ze,"STRONG",{});var nUt=s(Fwe);LVr=r(nUt,"roformer"),nUt.forEach(t),yVr=r(_ze," \u2014 "),Moe=n(_ze,"A",{href:!0});var sUt=s(Moe);xVr=r(sUt,"TFRoFormerForTokenClassification"),sUt.forEach(t),$Vr=r(_ze," (RoFormer model)"),_ze.forEach(t),kVr=i(pe),T3=n(pe,"LI",{});var uze=s(T3);Twe=n(uze,"STRONG",{});var lUt=s(Twe);SVr=r(lUt,"xlm"),lUt.forEach(t),RVr=r(uze," \u2014 "),Eoe=n(uze,"A",{href:!0});var iUt=s(Eoe);PVr=r(iUt,"TFXLMForTokenClassification"),iUt.forEach(t),BVr=r(uze," (XLM model)"),uze.forEach(t),IVr=i(pe),M3=n(pe,"LI",{});var bze=s(M3);Mwe=n(bze,"STRONG",{});var dUt=s(Mwe);NVr=r(dUt,"xlm-roberta"),dUt.forEach(t),qVr=r(bze," \u2014 "),Coe=n(bze,"A",{href:!0});var cUt=s(Coe);jVr=r(cUt,"TFXLMRobertaForTokenClassification"),cUt.forEach(t),DVr=r(bze," (XLM-RoBERTa model)"),bze.forEach(t),GVr=i(pe),E3=n(pe,"LI",{});var vze=s(E3);Ewe=n(vze,"STRONG",{});var fUt=s(Ewe);OVr=r(fUt,"xlnet"),fUt.forEach(t),VVr=r(vze," \u2014 "),woe=n(vze,"A",{href:!0});var mUt=s(woe);XVr=r(mUt,"TFXLNetForTokenClassification"),mUt.forEach(t),zVr=r(vze," (XLNet model)"),vze.forEach(t),pe.forEach(t),WVr=i(fi),T(C3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),EHe=i(f),nf=n(f,"H2",{class:!0});var NYe=s(nf);w3=n(NYe,"A",{id:!0,class:!0,href:!0});var gUt=s(w3);Cwe=n(gUt,"SPAN",{});var hUt=s(Cwe);T(gk.$$.fragment,hUt),hUt.forEach(t),gUt.forEach(t),QVr=i(NYe),wwe=n(NYe,"SPAN",{});var pUt=s(wwe);UVr=r(pUt,"TFAutoModelForQuestionAnswering"),pUt.forEach(t),NYe.forEach(t),CHe=i(f),_r=n(f,"DIV",{class:!0});var mi=s(_r);T(hk.$$.fragment,mi),HVr=i(mi),sf=n(mi,"P",{});var ise=s(sf);JVr=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Aoe=n(ise,"A",{href:!0});var _Ut=s(Aoe);YVr=r(_Ut,"from_pretrained()"),_Ut.forEach(t),KVr=r(ise," class method or the "),Loe=n(ise,"A",{href:!0});var uUt=s(Loe);ZVr=r(uUt,"from_config()"),uUt.forEach(t),eXr=r(ise,` class
method.`),ise.forEach(t),oXr=i(mi),pk=n(mi,"P",{});var qYe=s(pk);rXr=r(qYe,"This class cannot be instantiated directly using "),Awe=n(qYe,"CODE",{});var bUt=s(Awe);tXr=r(bUt,"__init__()"),bUt.forEach(t),aXr=r(qYe," (throws an error)."),qYe.forEach(t),nXr=i(mi),Jt=n(mi,"DIV",{class:!0});var PL=s(Jt);T(_k.$$.fragment,PL),sXr=i(PL),Lwe=n(PL,"P",{});var vUt=s(Lwe);lXr=r(vUt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vUt.forEach(t),iXr=i(PL),lf=n(PL,"P",{});var dse=s(lf);dXr=r(dse,`Note:
Loading a model from its configuration file does `),ywe=n(dse,"STRONG",{});var FUt=s(ywe);cXr=r(FUt,"not"),FUt.forEach(t),fXr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),yoe=n(dse,"A",{href:!0});var TUt=s(yoe);mXr=r(TUt,"from_pretrained()"),TUt.forEach(t),gXr=r(dse," to load the model weights."),dse.forEach(t),hXr=i(PL),T(A3.$$.fragment,PL),PL.forEach(t),pXr=i(mi),zr=n(mi,"DIV",{class:!0});var gi=s(zr);T(uk.$$.fragment,gi),_Xr=i(gi),xwe=n(gi,"P",{});var MUt=s(xwe);uXr=r(MUt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MUt.forEach(t),bXr=i(gi),yn=n(gi,"P",{});var BL=s(yn);vXr=r(BL,"The model class to instantiate is selected based on the "),$we=n(BL,"CODE",{});var EUt=s($we);FXr=r(EUt,"model_type"),EUt.forEach(t),TXr=r(BL,` property of the config object (either
passed as an argument or loaded from `),kwe=n(BL,"CODE",{});var CUt=s(kwe);MXr=r(CUt,"pretrained_model_name_or_path"),CUt.forEach(t),EXr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Swe=n(BL,"CODE",{});var wUt=s(Swe);CXr=r(wUt,"pretrained_model_name_or_path"),wUt.forEach(t),wXr=r(BL,":"),BL.forEach(t),AXr=i(gi),fe=n(gi,"UL",{});var _e=s(fe);L3=n(_e,"LI",{});var Fze=s(L3);Rwe=n(Fze,"STRONG",{});var AUt=s(Rwe);LXr=r(AUt,"albert"),AUt.forEach(t),yXr=r(Fze," \u2014 "),xoe=n(Fze,"A",{href:!0});var LUt=s(xoe);xXr=r(LUt,"TFAlbertForQuestionAnswering"),LUt.forEach(t),$Xr=r(Fze," (ALBERT model)"),Fze.forEach(t),kXr=i(_e),y3=n(_e,"LI",{});var Tze=s(y3);Pwe=n(Tze,"STRONG",{});var yUt=s(Pwe);SXr=r(yUt,"bert"),yUt.forEach(t),RXr=r(Tze," \u2014 "),$oe=n(Tze,"A",{href:!0});var xUt=s($oe);PXr=r(xUt,"TFBertForQuestionAnswering"),xUt.forEach(t),BXr=r(Tze," (BERT model)"),Tze.forEach(t),IXr=i(_e),x3=n(_e,"LI",{});var Mze=s(x3);Bwe=n(Mze,"STRONG",{});var $Ut=s(Bwe);NXr=r($Ut,"camembert"),$Ut.forEach(t),qXr=r(Mze," \u2014 "),koe=n(Mze,"A",{href:!0});var kUt=s(koe);jXr=r(kUt,"TFCamembertForQuestionAnswering"),kUt.forEach(t),DXr=r(Mze," (CamemBERT model)"),Mze.forEach(t),GXr=i(_e),$3=n(_e,"LI",{});var Eze=s($3);Iwe=n(Eze,"STRONG",{});var SUt=s(Iwe);OXr=r(SUt,"convbert"),SUt.forEach(t),VXr=r(Eze," \u2014 "),Soe=n(Eze,"A",{href:!0});var RUt=s(Soe);XXr=r(RUt,"TFConvBertForQuestionAnswering"),RUt.forEach(t),zXr=r(Eze," (ConvBERT model)"),Eze.forEach(t),WXr=i(_e),k3=n(_e,"LI",{});var Cze=s(k3);Nwe=n(Cze,"STRONG",{});var PUt=s(Nwe);QXr=r(PUt,"deberta"),PUt.forEach(t),UXr=r(Cze," \u2014 "),Roe=n(Cze,"A",{href:!0});var BUt=s(Roe);HXr=r(BUt,"TFDebertaForQuestionAnswering"),BUt.forEach(t),JXr=r(Cze," (DeBERTa model)"),Cze.forEach(t),YXr=i(_e),S3=n(_e,"LI",{});var wze=s(S3);qwe=n(wze,"STRONG",{});var IUt=s(qwe);KXr=r(IUt,"deberta-v2"),IUt.forEach(t),ZXr=r(wze," \u2014 "),Poe=n(wze,"A",{href:!0});var NUt=s(Poe);ezr=r(NUt,"TFDebertaV2ForQuestionAnswering"),NUt.forEach(t),ozr=r(wze," (DeBERTa-v2 model)"),wze.forEach(t),rzr=i(_e),R3=n(_e,"LI",{});var Aze=s(R3);jwe=n(Aze,"STRONG",{});var qUt=s(jwe);tzr=r(qUt,"distilbert"),qUt.forEach(t),azr=r(Aze," \u2014 "),Boe=n(Aze,"A",{href:!0});var jUt=s(Boe);nzr=r(jUt,"TFDistilBertForQuestionAnswering"),jUt.forEach(t),szr=r(Aze," (DistilBERT model)"),Aze.forEach(t),lzr=i(_e),P3=n(_e,"LI",{});var Lze=s(P3);Dwe=n(Lze,"STRONG",{});var DUt=s(Dwe);izr=r(DUt,"electra"),DUt.forEach(t),dzr=r(Lze," \u2014 "),Ioe=n(Lze,"A",{href:!0});var GUt=s(Ioe);czr=r(GUt,"TFElectraForQuestionAnswering"),GUt.forEach(t),fzr=r(Lze," (ELECTRA model)"),Lze.forEach(t),mzr=i(_e),B3=n(_e,"LI",{});var yze=s(B3);Gwe=n(yze,"STRONG",{});var OUt=s(Gwe);gzr=r(OUt,"flaubert"),OUt.forEach(t),hzr=r(yze," \u2014 "),Noe=n(yze,"A",{href:!0});var VUt=s(Noe);pzr=r(VUt,"TFFlaubertForQuestionAnsweringSimple"),VUt.forEach(t),_zr=r(yze," (FlauBERT model)"),yze.forEach(t),uzr=i(_e),I3=n(_e,"LI",{});var xze=s(I3);Owe=n(xze,"STRONG",{});var XUt=s(Owe);bzr=r(XUt,"funnel"),XUt.forEach(t),vzr=r(xze," \u2014 "),qoe=n(xze,"A",{href:!0});var zUt=s(qoe);Fzr=r(zUt,"TFFunnelForQuestionAnswering"),zUt.forEach(t),Tzr=r(xze," (Funnel Transformer model)"),xze.forEach(t),Mzr=i(_e),N3=n(_e,"LI",{});var $ze=s(N3);Vwe=n($ze,"STRONG",{});var WUt=s(Vwe);Ezr=r(WUt,"gptj"),WUt.forEach(t),Czr=r($ze," \u2014 "),joe=n($ze,"A",{href:!0});var QUt=s(joe);wzr=r(QUt,"TFGPTJForQuestionAnswering"),QUt.forEach(t),Azr=r($ze," (GPT-J model)"),$ze.forEach(t),Lzr=i(_e),q3=n(_e,"LI",{});var kze=s(q3);Xwe=n(kze,"STRONG",{});var UUt=s(Xwe);yzr=r(UUt,"longformer"),UUt.forEach(t),xzr=r(kze," \u2014 "),Doe=n(kze,"A",{href:!0});var HUt=s(Doe);$zr=r(HUt,"TFLongformerForQuestionAnswering"),HUt.forEach(t),kzr=r(kze," (Longformer model)"),kze.forEach(t),Szr=i(_e),j3=n(_e,"LI",{});var Sze=s(j3);zwe=n(Sze,"STRONG",{});var JUt=s(zwe);Rzr=r(JUt,"mobilebert"),JUt.forEach(t),Pzr=r(Sze," \u2014 "),Goe=n(Sze,"A",{href:!0});var YUt=s(Goe);Bzr=r(YUt,"TFMobileBertForQuestionAnswering"),YUt.forEach(t),Izr=r(Sze," (MobileBERT model)"),Sze.forEach(t),Nzr=i(_e),D3=n(_e,"LI",{});var Rze=s(D3);Wwe=n(Rze,"STRONG",{});var KUt=s(Wwe);qzr=r(KUt,"mpnet"),KUt.forEach(t),jzr=r(Rze," \u2014 "),Ooe=n(Rze,"A",{href:!0});var ZUt=s(Ooe);Dzr=r(ZUt,"TFMPNetForQuestionAnswering"),ZUt.forEach(t),Gzr=r(Rze," (MPNet model)"),Rze.forEach(t),Ozr=i(_e),G3=n(_e,"LI",{});var Pze=s(G3);Qwe=n(Pze,"STRONG",{});var eHt=s(Qwe);Vzr=r(eHt,"rembert"),eHt.forEach(t),Xzr=r(Pze," \u2014 "),Voe=n(Pze,"A",{href:!0});var oHt=s(Voe);zzr=r(oHt,"TFRemBertForQuestionAnswering"),oHt.forEach(t),Wzr=r(Pze," (RemBERT model)"),Pze.forEach(t),Qzr=i(_e),O3=n(_e,"LI",{});var Bze=s(O3);Uwe=n(Bze,"STRONG",{});var rHt=s(Uwe);Uzr=r(rHt,"roberta"),rHt.forEach(t),Hzr=r(Bze," \u2014 "),Xoe=n(Bze,"A",{href:!0});var tHt=s(Xoe);Jzr=r(tHt,"TFRobertaForQuestionAnswering"),tHt.forEach(t),Yzr=r(Bze," (RoBERTa model)"),Bze.forEach(t),Kzr=i(_e),V3=n(_e,"LI",{});var Ize=s(V3);Hwe=n(Ize,"STRONG",{});var aHt=s(Hwe);Zzr=r(aHt,"roformer"),aHt.forEach(t),eWr=r(Ize," \u2014 "),zoe=n(Ize,"A",{href:!0});var nHt=s(zoe);oWr=r(nHt,"TFRoFormerForQuestionAnswering"),nHt.forEach(t),rWr=r(Ize," (RoFormer model)"),Ize.forEach(t),tWr=i(_e),X3=n(_e,"LI",{});var Nze=s(X3);Jwe=n(Nze,"STRONG",{});var sHt=s(Jwe);aWr=r(sHt,"xlm"),sHt.forEach(t),nWr=r(Nze," \u2014 "),Woe=n(Nze,"A",{href:!0});var lHt=s(Woe);sWr=r(lHt,"TFXLMForQuestionAnsweringSimple"),lHt.forEach(t),lWr=r(Nze," (XLM model)"),Nze.forEach(t),iWr=i(_e),z3=n(_e,"LI",{});var qze=s(z3);Ywe=n(qze,"STRONG",{});var iHt=s(Ywe);dWr=r(iHt,"xlm-roberta"),iHt.forEach(t),cWr=r(qze," \u2014 "),Qoe=n(qze,"A",{href:!0});var dHt=s(Qoe);fWr=r(dHt,"TFXLMRobertaForQuestionAnswering"),dHt.forEach(t),mWr=r(qze," (XLM-RoBERTa model)"),qze.forEach(t),gWr=i(_e),W3=n(_e,"LI",{});var jze=s(W3);Kwe=n(jze,"STRONG",{});var cHt=s(Kwe);hWr=r(cHt,"xlnet"),cHt.forEach(t),pWr=r(jze," \u2014 "),Uoe=n(jze,"A",{href:!0});var fHt=s(Uoe);_Wr=r(fHt,"TFXLNetForQuestionAnsweringSimple"),fHt.forEach(t),uWr=r(jze," (XLNet model)"),jze.forEach(t),_e.forEach(t),bWr=i(gi),T(Q3.$$.fragment,gi),gi.forEach(t),mi.forEach(t),wHe=i(f),df=n(f,"H2",{class:!0});var jYe=s(df);U3=n(jYe,"A",{id:!0,class:!0,href:!0});var mHt=s(U3);Zwe=n(mHt,"SPAN",{});var gHt=s(Zwe);T(bk.$$.fragment,gHt),gHt.forEach(t),mHt.forEach(t),vWr=i(jYe),e6e=n(jYe,"SPAN",{});var hHt=s(e6e);FWr=r(hHt,"TFAutoModelForVision2Seq"),hHt.forEach(t),jYe.forEach(t),AHe=i(f),ur=n(f,"DIV",{class:!0});var hi=s(ur);T(vk.$$.fragment,hi),TWr=i(hi),cf=n(hi,"P",{});var cse=s(cf);MWr=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Hoe=n(cse,"A",{href:!0});var pHt=s(Hoe);EWr=r(pHt,"from_pretrained()"),pHt.forEach(t),CWr=r(cse," class method or the "),Joe=n(cse,"A",{href:!0});var _Ht=s(Joe);wWr=r(_Ht,"from_config()"),_Ht.forEach(t),AWr=r(cse,` class
method.`),cse.forEach(t),LWr=i(hi),Fk=n(hi,"P",{});var DYe=s(Fk);yWr=r(DYe,"This class cannot be instantiated directly using "),o6e=n(DYe,"CODE",{});var uHt=s(o6e);xWr=r(uHt,"__init__()"),uHt.forEach(t),$Wr=r(DYe," (throws an error)."),DYe.forEach(t),kWr=i(hi),Yt=n(hi,"DIV",{class:!0});var IL=s(Yt);T(Tk.$$.fragment,IL),SWr=i(IL),r6e=n(IL,"P",{});var bHt=s(r6e);RWr=r(bHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bHt.forEach(t),PWr=i(IL),ff=n(IL,"P",{});var fse=s(ff);BWr=r(fse,`Note:
Loading a model from its configuration file does `),t6e=n(fse,"STRONG",{});var vHt=s(t6e);IWr=r(vHt,"not"),vHt.forEach(t),NWr=r(fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yoe=n(fse,"A",{href:!0});var FHt=s(Yoe);qWr=r(FHt,"from_pretrained()"),FHt.forEach(t),jWr=r(fse," to load the model weights."),fse.forEach(t),DWr=i(IL),T(H3.$$.fragment,IL),IL.forEach(t),GWr=i(hi),Wr=n(hi,"DIV",{class:!0});var pi=s(Wr);T(Mk.$$.fragment,pi),OWr=i(pi),a6e=n(pi,"P",{});var THt=s(a6e);VWr=r(THt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),THt.forEach(t),XWr=i(pi),xn=n(pi,"P",{});var NL=s(xn);zWr=r(NL,"The model class to instantiate is selected based on the "),n6e=n(NL,"CODE",{});var MHt=s(n6e);WWr=r(MHt,"model_type"),MHt.forEach(t),QWr=r(NL,` property of the config object (either
passed as an argument or loaded from `),s6e=n(NL,"CODE",{});var EHt=s(s6e);UWr=r(EHt,"pretrained_model_name_or_path"),EHt.forEach(t),HWr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=n(NL,"CODE",{});var CHt=s(l6e);JWr=r(CHt,"pretrained_model_name_or_path"),CHt.forEach(t),YWr=r(NL,":"),NL.forEach(t),KWr=i(pi),i6e=n(pi,"UL",{});var wHt=s(i6e);J3=n(wHt,"LI",{});var Dze=s(J3);d6e=n(Dze,"STRONG",{});var AHt=s(d6e);ZWr=r(AHt,"vision-encoder-decoder"),AHt.forEach(t),eQr=r(Dze," \u2014 "),Koe=n(Dze,"A",{href:!0});var LHt=s(Koe);oQr=r(LHt,"TFVisionEncoderDecoderModel"),LHt.forEach(t),rQr=r(Dze," (Vision Encoder decoder model)"),Dze.forEach(t),wHt.forEach(t),tQr=i(pi),T(Y3.$$.fragment,pi),pi.forEach(t),hi.forEach(t),LHe=i(f),mf=n(f,"H2",{class:!0});var GYe=s(mf);K3=n(GYe,"A",{id:!0,class:!0,href:!0});var yHt=s(K3);c6e=n(yHt,"SPAN",{});var xHt=s(c6e);T(Ek.$$.fragment,xHt),xHt.forEach(t),yHt.forEach(t),aQr=i(GYe),f6e=n(GYe,"SPAN",{});var $Ht=s(f6e);nQr=r($Ht,"TFAutoModelForSpeechSeq2Seq"),$Ht.forEach(t),GYe.forEach(t),yHe=i(f),br=n(f,"DIV",{class:!0});var _i=s(br);T(Ck.$$.fragment,_i),sQr=i(_i),gf=n(_i,"P",{});var mse=s(gf);lQr=r(mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Zoe=n(mse,"A",{href:!0});var kHt=s(Zoe);iQr=r(kHt,"from_pretrained()"),kHt.forEach(t),dQr=r(mse," class method or the "),ere=n(mse,"A",{href:!0});var SHt=s(ere);cQr=r(SHt,"from_config()"),SHt.forEach(t),fQr=r(mse,` class
method.`),mse.forEach(t),mQr=i(_i),wk=n(_i,"P",{});var OYe=s(wk);gQr=r(OYe,"This class cannot be instantiated directly using "),m6e=n(OYe,"CODE",{});var RHt=s(m6e);hQr=r(RHt,"__init__()"),RHt.forEach(t),pQr=r(OYe," (throws an error)."),OYe.forEach(t),_Qr=i(_i),Kt=n(_i,"DIV",{class:!0});var qL=s(Kt);T(Ak.$$.fragment,qL),uQr=i(qL),g6e=n(qL,"P",{});var PHt=s(g6e);bQr=r(PHt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),PHt.forEach(t),vQr=i(qL),hf=n(qL,"P",{});var gse=s(hf);FQr=r(gse,`Note:
Loading a model from its configuration file does `),h6e=n(gse,"STRONG",{});var BHt=s(h6e);TQr=r(BHt,"not"),BHt.forEach(t),MQr=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=n(gse,"A",{href:!0});var IHt=s(ore);EQr=r(IHt,"from_pretrained()"),IHt.forEach(t),CQr=r(gse," to load the model weights."),gse.forEach(t),wQr=i(qL),T(Z3.$$.fragment,qL),qL.forEach(t),AQr=i(_i),Qr=n(_i,"DIV",{class:!0});var ui=s(Qr);T(Lk.$$.fragment,ui),LQr=i(ui),p6e=n(ui,"P",{});var NHt=s(p6e);yQr=r(NHt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),NHt.forEach(t),xQr=i(ui),$n=n(ui,"P",{});var jL=s($n);$Qr=r(jL,"The model class to instantiate is selected based on the "),_6e=n(jL,"CODE",{});var qHt=s(_6e);kQr=r(qHt,"model_type"),qHt.forEach(t),SQr=r(jL,` property of the config object (either
passed as an argument or loaded from `),u6e=n(jL,"CODE",{});var jHt=s(u6e);RQr=r(jHt,"pretrained_model_name_or_path"),jHt.forEach(t),PQr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=n(jL,"CODE",{});var DHt=s(b6e);BQr=r(DHt,"pretrained_model_name_or_path"),DHt.forEach(t),IQr=r(jL,":"),jL.forEach(t),NQr=i(ui),v6e=n(ui,"UL",{});var GHt=s(v6e);ew=n(GHt,"LI",{});var Gze=s(ew);F6e=n(Gze,"STRONG",{});var OHt=s(F6e);qQr=r(OHt,"speech_to_text"),OHt.forEach(t),jQr=r(Gze," \u2014 "),rre=n(Gze,"A",{href:!0});var VHt=s(rre);DQr=r(VHt,"TFSpeech2TextForConditionalGeneration"),VHt.forEach(t),GQr=r(Gze," (Speech2Text model)"),Gze.forEach(t),GHt.forEach(t),OQr=i(ui),T(ow.$$.fragment,ui),ui.forEach(t),_i.forEach(t),xHe=i(f),pf=n(f,"H2",{class:!0});var VYe=s(pf);rw=n(VYe,"A",{id:!0,class:!0,href:!0});var XHt=s(rw);T6e=n(XHt,"SPAN",{});var zHt=s(T6e);T(yk.$$.fragment,zHt),zHt.forEach(t),XHt.forEach(t),VQr=i(VYe),M6e=n(VYe,"SPAN",{});var WHt=s(M6e);XQr=r(WHt,"FlaxAutoModel"),WHt.forEach(t),VYe.forEach(t),$He=i(f),vr=n(f,"DIV",{class:!0});var bi=s(vr);T(xk.$$.fragment,bi),zQr=i(bi),_f=n(bi,"P",{});var hse=s(_f);WQr=r(hse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tre=n(hse,"A",{href:!0});var QHt=s(tre);QQr=r(QHt,"from_pretrained()"),QHt.forEach(t),UQr=r(hse," class method or the "),are=n(hse,"A",{href:!0});var UHt=s(are);HQr=r(UHt,"from_config()"),UHt.forEach(t),JQr=r(hse,` class
method.`),hse.forEach(t),YQr=i(bi),$k=n(bi,"P",{});var XYe=s($k);KQr=r(XYe,"This class cannot be instantiated directly using "),E6e=n(XYe,"CODE",{});var HHt=s(E6e);ZQr=r(HHt,"__init__()"),HHt.forEach(t),eUr=r(XYe," (throws an error)."),XYe.forEach(t),oUr=i(bi),Zt=n(bi,"DIV",{class:!0});var DL=s(Zt);T(kk.$$.fragment,DL),rUr=i(DL),C6e=n(DL,"P",{});var JHt=s(C6e);tUr=r(JHt,"Instantiates one of the base model classes of the library from a configuration."),JHt.forEach(t),aUr=i(DL),uf=n(DL,"P",{});var pse=s(uf);nUr=r(pse,`Note:
Loading a model from its configuration file does `),w6e=n(pse,"STRONG",{});var YHt=s(w6e);sUr=r(YHt,"not"),YHt.forEach(t),lUr=r(pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=n(pse,"A",{href:!0});var KHt=s(nre);iUr=r(KHt,"from_pretrained()"),KHt.forEach(t),dUr=r(pse," to load the model weights."),pse.forEach(t),cUr=i(DL),T(tw.$$.fragment,DL),DL.forEach(t),fUr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(Sk.$$.fragment,vi),mUr=i(vi),A6e=n(vi,"P",{});var ZHt=s(A6e);gUr=r(ZHt,"Instantiate one of the base model classes of the library from a pretrained model."),ZHt.forEach(t),hUr=i(vi),kn=n(vi,"P",{});var GL=s(kn);pUr=r(GL,"The model class to instantiate is selected based on the "),L6e=n(GL,"CODE",{});var eJt=s(L6e);_Ur=r(eJt,"model_type"),eJt.forEach(t),uUr=r(GL,` property of the config object (either
passed as an argument or loaded from `),y6e=n(GL,"CODE",{});var oJt=s(y6e);bUr=r(oJt,"pretrained_model_name_or_path"),oJt.forEach(t),vUr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=n(GL,"CODE",{});var rJt=s(x6e);FUr=r(rJt,"pretrained_model_name_or_path"),rJt.forEach(t),TUr=r(GL,":"),GL.forEach(t),MUr=i(vi),re=n(vi,"UL",{});var ae=s(re);aw=n(ae,"LI",{});var Oze=s(aw);$6e=n(Oze,"STRONG",{});var tJt=s($6e);EUr=r(tJt,"albert"),tJt.forEach(t),CUr=r(Oze," \u2014 "),sre=n(Oze,"A",{href:!0});var aJt=s(sre);wUr=r(aJt,"FlaxAlbertModel"),aJt.forEach(t),AUr=r(Oze," (ALBERT model)"),Oze.forEach(t),LUr=i(ae),nw=n(ae,"LI",{});var Vze=s(nw);k6e=n(Vze,"STRONG",{});var nJt=s(k6e);yUr=r(nJt,"bart"),nJt.forEach(t),xUr=r(Vze," \u2014 "),lre=n(Vze,"A",{href:!0});var sJt=s(lre);$Ur=r(sJt,"FlaxBartModel"),sJt.forEach(t),kUr=r(Vze," (BART model)"),Vze.forEach(t),SUr=i(ae),sw=n(ae,"LI",{});var Xze=s(sw);S6e=n(Xze,"STRONG",{});var lJt=s(S6e);RUr=r(lJt,"beit"),lJt.forEach(t),PUr=r(Xze," \u2014 "),ire=n(Xze,"A",{href:!0});var iJt=s(ire);BUr=r(iJt,"FlaxBeitModel"),iJt.forEach(t),IUr=r(Xze," (BEiT model)"),Xze.forEach(t),NUr=i(ae),lw=n(ae,"LI",{});var zze=s(lw);R6e=n(zze,"STRONG",{});var dJt=s(R6e);qUr=r(dJt,"bert"),dJt.forEach(t),jUr=r(zze," \u2014 "),dre=n(zze,"A",{href:!0});var cJt=s(dre);DUr=r(cJt,"FlaxBertModel"),cJt.forEach(t),GUr=r(zze," (BERT model)"),zze.forEach(t),OUr=i(ae),iw=n(ae,"LI",{});var Wze=s(iw);P6e=n(Wze,"STRONG",{});var fJt=s(P6e);VUr=r(fJt,"big_bird"),fJt.forEach(t),XUr=r(Wze," \u2014 "),cre=n(Wze,"A",{href:!0});var mJt=s(cre);zUr=r(mJt,"FlaxBigBirdModel"),mJt.forEach(t),WUr=r(Wze," (BigBird model)"),Wze.forEach(t),QUr=i(ae),dw=n(ae,"LI",{});var Qze=s(dw);B6e=n(Qze,"STRONG",{});var gJt=s(B6e);UUr=r(gJt,"blenderbot"),gJt.forEach(t),HUr=r(Qze," \u2014 "),fre=n(Qze,"A",{href:!0});var hJt=s(fre);JUr=r(hJt,"FlaxBlenderbotModel"),hJt.forEach(t),YUr=r(Qze," (Blenderbot model)"),Qze.forEach(t),KUr=i(ae),cw=n(ae,"LI",{});var Uze=s(cw);I6e=n(Uze,"STRONG",{});var pJt=s(I6e);ZUr=r(pJt,"blenderbot-small"),pJt.forEach(t),eHr=r(Uze," \u2014 "),mre=n(Uze,"A",{href:!0});var _Jt=s(mre);oHr=r(_Jt,"FlaxBlenderbotSmallModel"),_Jt.forEach(t),rHr=r(Uze," (BlenderbotSmall model)"),Uze.forEach(t),tHr=i(ae),fw=n(ae,"LI",{});var Hze=s(fw);N6e=n(Hze,"STRONG",{});var uJt=s(N6e);aHr=r(uJt,"clip"),uJt.forEach(t),nHr=r(Hze," \u2014 "),gre=n(Hze,"A",{href:!0});var bJt=s(gre);sHr=r(bJt,"FlaxCLIPModel"),bJt.forEach(t),lHr=r(Hze," (CLIP model)"),Hze.forEach(t),iHr=i(ae),mw=n(ae,"LI",{});var Jze=s(mw);q6e=n(Jze,"STRONG",{});var vJt=s(q6e);dHr=r(vJt,"distilbert"),vJt.forEach(t),cHr=r(Jze," \u2014 "),hre=n(Jze,"A",{href:!0});var FJt=s(hre);fHr=r(FJt,"FlaxDistilBertModel"),FJt.forEach(t),mHr=r(Jze," (DistilBERT model)"),Jze.forEach(t),gHr=i(ae),gw=n(ae,"LI",{});var Yze=s(gw);j6e=n(Yze,"STRONG",{});var TJt=s(j6e);hHr=r(TJt,"electra"),TJt.forEach(t),pHr=r(Yze," \u2014 "),pre=n(Yze,"A",{href:!0});var MJt=s(pre);_Hr=r(MJt,"FlaxElectraModel"),MJt.forEach(t),uHr=r(Yze," (ELECTRA model)"),Yze.forEach(t),bHr=i(ae),hw=n(ae,"LI",{});var Kze=s(hw);D6e=n(Kze,"STRONG",{});var EJt=s(D6e);vHr=r(EJt,"gpt2"),EJt.forEach(t),FHr=r(Kze," \u2014 "),_re=n(Kze,"A",{href:!0});var CJt=s(_re);THr=r(CJt,"FlaxGPT2Model"),CJt.forEach(t),MHr=r(Kze," (OpenAI GPT-2 model)"),Kze.forEach(t),EHr=i(ae),pw=n(ae,"LI",{});var Zze=s(pw);G6e=n(Zze,"STRONG",{});var wJt=s(G6e);CHr=r(wJt,"gpt_neo"),wJt.forEach(t),wHr=r(Zze," \u2014 "),ure=n(Zze,"A",{href:!0});var AJt=s(ure);AHr=r(AJt,"FlaxGPTNeoModel"),AJt.forEach(t),LHr=r(Zze," (GPT Neo model)"),Zze.forEach(t),yHr=i(ae),_w=n(ae,"LI",{});var eWe=s(_w);O6e=n(eWe,"STRONG",{});var LJt=s(O6e);xHr=r(LJt,"gptj"),LJt.forEach(t),$Hr=r(eWe," \u2014 "),bre=n(eWe,"A",{href:!0});var yJt=s(bre);kHr=r(yJt,"FlaxGPTJModel"),yJt.forEach(t),SHr=r(eWe," (GPT-J model)"),eWe.forEach(t),RHr=i(ae),uw=n(ae,"LI",{});var oWe=s(uw);V6e=n(oWe,"STRONG",{});var xJt=s(V6e);PHr=r(xJt,"longt5"),xJt.forEach(t),BHr=r(oWe," \u2014 "),vre=n(oWe,"A",{href:!0});var $Jt=s(vre);IHr=r($Jt,"FlaxLongT5Model"),$Jt.forEach(t),NHr=r(oWe," (LongT5 model)"),oWe.forEach(t),qHr=i(ae),bw=n(ae,"LI",{});var rWe=s(bw);X6e=n(rWe,"STRONG",{});var kJt=s(X6e);jHr=r(kJt,"marian"),kJt.forEach(t),DHr=r(rWe," \u2014 "),Fre=n(rWe,"A",{href:!0});var SJt=s(Fre);GHr=r(SJt,"FlaxMarianModel"),SJt.forEach(t),OHr=r(rWe," (Marian model)"),rWe.forEach(t),VHr=i(ae),vw=n(ae,"LI",{});var tWe=s(vw);z6e=n(tWe,"STRONG",{});var RJt=s(z6e);XHr=r(RJt,"mbart"),RJt.forEach(t),zHr=r(tWe," \u2014 "),Tre=n(tWe,"A",{href:!0});var PJt=s(Tre);WHr=r(PJt,"FlaxMBartModel"),PJt.forEach(t),QHr=r(tWe," (mBART model)"),tWe.forEach(t),UHr=i(ae),Fw=n(ae,"LI",{});var aWe=s(Fw);W6e=n(aWe,"STRONG",{});var BJt=s(W6e);HHr=r(BJt,"mt5"),BJt.forEach(t),JHr=r(aWe," \u2014 "),Mre=n(aWe,"A",{href:!0});var IJt=s(Mre);YHr=r(IJt,"FlaxMT5Model"),IJt.forEach(t),KHr=r(aWe," (MT5 model)"),aWe.forEach(t),ZHr=i(ae),Tw=n(ae,"LI",{});var nWe=s(Tw);Q6e=n(nWe,"STRONG",{});var NJt=s(Q6e);eJr=r(NJt,"opt"),NJt.forEach(t),oJr=r(nWe," \u2014 "),Ere=n(nWe,"A",{href:!0});var qJt=s(Ere);rJr=r(qJt,"FlaxOPTModel"),qJt.forEach(t),tJr=r(nWe," (OPT model)"),nWe.forEach(t),aJr=i(ae),Mw=n(ae,"LI",{});var sWe=s(Mw);U6e=n(sWe,"STRONG",{});var jJt=s(U6e);nJr=r(jJt,"pegasus"),jJt.forEach(t),sJr=r(sWe," \u2014 "),Cre=n(sWe,"A",{href:!0});var DJt=s(Cre);lJr=r(DJt,"FlaxPegasusModel"),DJt.forEach(t),iJr=r(sWe," (Pegasus model)"),sWe.forEach(t),dJr=i(ae),Ew=n(ae,"LI",{});var lWe=s(Ew);H6e=n(lWe,"STRONG",{});var GJt=s(H6e);cJr=r(GJt,"roberta"),GJt.forEach(t),fJr=r(lWe," \u2014 "),wre=n(lWe,"A",{href:!0});var OJt=s(wre);mJr=r(OJt,"FlaxRobertaModel"),OJt.forEach(t),gJr=r(lWe," (RoBERTa model)"),lWe.forEach(t),hJr=i(ae),Cw=n(ae,"LI",{});var iWe=s(Cw);J6e=n(iWe,"STRONG",{});var VJt=s(J6e);pJr=r(VJt,"roformer"),VJt.forEach(t),_Jr=r(iWe," \u2014 "),Are=n(iWe,"A",{href:!0});var XJt=s(Are);uJr=r(XJt,"FlaxRoFormerModel"),XJt.forEach(t),bJr=r(iWe," (RoFormer model)"),iWe.forEach(t),vJr=i(ae),ww=n(ae,"LI",{});var dWe=s(ww);Y6e=n(dWe,"STRONG",{});var zJt=s(Y6e);FJr=r(zJt,"t5"),zJt.forEach(t),TJr=r(dWe," \u2014 "),Lre=n(dWe,"A",{href:!0});var WJt=s(Lre);MJr=r(WJt,"FlaxT5Model"),WJt.forEach(t),EJr=r(dWe," (T5 model)"),dWe.forEach(t),CJr=i(ae),Aw=n(ae,"LI",{});var cWe=s(Aw);K6e=n(cWe,"STRONG",{});var QJt=s(K6e);wJr=r(QJt,"vision-text-dual-encoder"),QJt.forEach(t),AJr=r(cWe," \u2014 "),yre=n(cWe,"A",{href:!0});var UJt=s(yre);LJr=r(UJt,"FlaxVisionTextDualEncoderModel"),UJt.forEach(t),yJr=r(cWe," (VisionTextDualEncoder model)"),cWe.forEach(t),xJr=i(ae),Lw=n(ae,"LI",{});var fWe=s(Lw);Z6e=n(fWe,"STRONG",{});var HJt=s(Z6e);$Jr=r(HJt,"vit"),HJt.forEach(t),kJr=r(fWe," \u2014 "),xre=n(fWe,"A",{href:!0});var JJt=s(xre);SJr=r(JJt,"FlaxViTModel"),JJt.forEach(t),RJr=r(fWe," (ViT model)"),fWe.forEach(t),PJr=i(ae),yw=n(ae,"LI",{});var mWe=s(yw);eAe=n(mWe,"STRONG",{});var YJt=s(eAe);BJr=r(YJt,"wav2vec2"),YJt.forEach(t),IJr=r(mWe," \u2014 "),$re=n(mWe,"A",{href:!0});var KJt=s($re);NJr=r(KJt,"FlaxWav2Vec2Model"),KJt.forEach(t),qJr=r(mWe," (Wav2Vec2 model)"),mWe.forEach(t),jJr=i(ae),xw=n(ae,"LI",{});var gWe=s(xw);oAe=n(gWe,"STRONG",{});var ZJt=s(oAe);DJr=r(ZJt,"xglm"),ZJt.forEach(t),GJr=r(gWe," \u2014 "),kre=n(gWe,"A",{href:!0});var eYt=s(kre);OJr=r(eYt,"FlaxXGLMModel"),eYt.forEach(t),VJr=r(gWe," (XGLM model)"),gWe.forEach(t),XJr=i(ae),$w=n(ae,"LI",{});var hWe=s($w);rAe=n(hWe,"STRONG",{});var oYt=s(rAe);zJr=r(oYt,"xlm-roberta"),oYt.forEach(t),WJr=r(hWe," \u2014 "),Sre=n(hWe,"A",{href:!0});var rYt=s(Sre);QJr=r(rYt,"FlaxXLMRobertaModel"),rYt.forEach(t),UJr=r(hWe," (XLM-RoBERTa model)"),hWe.forEach(t),ae.forEach(t),HJr=i(vi),T(kw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),kHe=i(f),bf=n(f,"H2",{class:!0});var zYe=s(bf);Sw=n(zYe,"A",{id:!0,class:!0,href:!0});var tYt=s(Sw);tAe=n(tYt,"SPAN",{});var aYt=s(tAe);T(Rk.$$.fragment,aYt),aYt.forEach(t),tYt.forEach(t),JJr=i(zYe),aAe=n(zYe,"SPAN",{});var nYt=s(aAe);YJr=r(nYt,"FlaxAutoModelForCausalLM"),nYt.forEach(t),zYe.forEach(t),SHe=i(f),Fr=n(f,"DIV",{class:!0});var Fi=s(Fr);T(Pk.$$.fragment,Fi),KJr=i(Fi),vf=n(Fi,"P",{});var _se=s(vf);ZJr=r(_se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Rre=n(_se,"A",{href:!0});var sYt=s(Rre);eYr=r(sYt,"from_pretrained()"),sYt.forEach(t),oYr=r(_se," class method or the "),Pre=n(_se,"A",{href:!0});var lYt=s(Pre);rYr=r(lYt,"from_config()"),lYt.forEach(t),tYr=r(_se,` class
method.`),_se.forEach(t),aYr=i(Fi),Bk=n(Fi,"P",{});var WYe=s(Bk);nYr=r(WYe,"This class cannot be instantiated directly using "),nAe=n(WYe,"CODE",{});var iYt=s(nAe);sYr=r(iYt,"__init__()"),iYt.forEach(t),lYr=r(WYe," (throws an error)."),WYe.forEach(t),iYr=i(Fi),ea=n(Fi,"DIV",{class:!0});var OL=s(ea);T(Ik.$$.fragment,OL),dYr=i(OL),sAe=n(OL,"P",{});var dYt=s(sAe);cYr=r(dYt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dYt.forEach(t),fYr=i(OL),Ff=n(OL,"P",{});var use=s(Ff);mYr=r(use,`Note:
Loading a model from its configuration file does `),lAe=n(use,"STRONG",{});var cYt=s(lAe);gYr=r(cYt,"not"),cYt.forEach(t),hYr=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=n(use,"A",{href:!0});var fYt=s(Bre);pYr=r(fYt,"from_pretrained()"),fYt.forEach(t),_Yr=r(use," to load the model weights."),use.forEach(t),uYr=i(OL),T(Rw.$$.fragment,OL),OL.forEach(t),bYr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(Nk.$$.fragment,Ti),vYr=i(Ti),iAe=n(Ti,"P",{});var mYt=s(iAe);FYr=r(mYt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mYt.forEach(t),TYr=i(Ti),Sn=n(Ti,"P",{});var VL=s(Sn);MYr=r(VL,"The model class to instantiate is selected based on the "),dAe=n(VL,"CODE",{});var gYt=s(dAe);EYr=r(gYt,"model_type"),gYt.forEach(t),CYr=r(VL,` property of the config object (either
passed as an argument or loaded from `),cAe=n(VL,"CODE",{});var hYt=s(cAe);wYr=r(hYt,"pretrained_model_name_or_path"),hYt.forEach(t),AYr=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fAe=n(VL,"CODE",{});var pYt=s(fAe);LYr=r(pYt,"pretrained_model_name_or_path"),pYt.forEach(t),yYr=r(VL,":"),VL.forEach(t),xYr=i(Ti),xe=n(Ti,"UL",{});var Ne=s(xe);Pw=n(Ne,"LI",{});var pWe=s(Pw);mAe=n(pWe,"STRONG",{});var _Yt=s(mAe);$Yr=r(_Yt,"bart"),_Yt.forEach(t),kYr=r(pWe," \u2014 "),Ire=n(pWe,"A",{href:!0});var uYt=s(Ire);SYr=r(uYt,"FlaxBartForCausalLM"),uYt.forEach(t),RYr=r(pWe," (BART model)"),pWe.forEach(t),PYr=i(Ne),Bw=n(Ne,"LI",{});var _We=s(Bw);gAe=n(_We,"STRONG",{});var bYt=s(gAe);BYr=r(bYt,"bert"),bYt.forEach(t),IYr=r(_We," \u2014 "),Nre=n(_We,"A",{href:!0});var vYt=s(Nre);NYr=r(vYt,"FlaxBertForCausalLM"),vYt.forEach(t),qYr=r(_We," (BERT model)"),_We.forEach(t),jYr=i(Ne),Iw=n(Ne,"LI",{});var uWe=s(Iw);hAe=n(uWe,"STRONG",{});var FYt=s(hAe);DYr=r(FYt,"big_bird"),FYt.forEach(t),GYr=r(uWe," \u2014 "),qre=n(uWe,"A",{href:!0});var TYt=s(qre);OYr=r(TYt,"FlaxBigBirdForCausalLM"),TYt.forEach(t),VYr=r(uWe," (BigBird model)"),uWe.forEach(t),XYr=i(Ne),Nw=n(Ne,"LI",{});var bWe=s(Nw);pAe=n(bWe,"STRONG",{});var MYt=s(pAe);zYr=r(MYt,"electra"),MYt.forEach(t),WYr=r(bWe," \u2014 "),jre=n(bWe,"A",{href:!0});var EYt=s(jre);QYr=r(EYt,"FlaxElectraForCausalLM"),EYt.forEach(t),UYr=r(bWe," (ELECTRA model)"),bWe.forEach(t),HYr=i(Ne),qw=n(Ne,"LI",{});var vWe=s(qw);_Ae=n(vWe,"STRONG",{});var CYt=s(_Ae);JYr=r(CYt,"gpt2"),CYt.forEach(t),YYr=r(vWe," \u2014 "),Dre=n(vWe,"A",{href:!0});var wYt=s(Dre);KYr=r(wYt,"FlaxGPT2LMHeadModel"),wYt.forEach(t),ZYr=r(vWe," (OpenAI GPT-2 model)"),vWe.forEach(t),eKr=i(Ne),jw=n(Ne,"LI",{});var FWe=s(jw);uAe=n(FWe,"STRONG",{});var AYt=s(uAe);oKr=r(AYt,"gpt_neo"),AYt.forEach(t),rKr=r(FWe," \u2014 "),Gre=n(FWe,"A",{href:!0});var LYt=s(Gre);tKr=r(LYt,"FlaxGPTNeoForCausalLM"),LYt.forEach(t),aKr=r(FWe," (GPT Neo model)"),FWe.forEach(t),nKr=i(Ne),Dw=n(Ne,"LI",{});var TWe=s(Dw);bAe=n(TWe,"STRONG",{});var yYt=s(bAe);sKr=r(yYt,"gptj"),yYt.forEach(t),lKr=r(TWe," \u2014 "),Ore=n(TWe,"A",{href:!0});var xYt=s(Ore);iKr=r(xYt,"FlaxGPTJForCausalLM"),xYt.forEach(t),dKr=r(TWe," (GPT-J model)"),TWe.forEach(t),cKr=i(Ne),Gw=n(Ne,"LI",{});var MWe=s(Gw);vAe=n(MWe,"STRONG",{});var $Yt=s(vAe);fKr=r($Yt,"opt"),$Yt.forEach(t),mKr=r(MWe," \u2014 "),Vre=n(MWe,"A",{href:!0});var kYt=s(Vre);gKr=r(kYt,"FlaxOPTForCausalLM"),kYt.forEach(t),hKr=r(MWe," (OPT model)"),MWe.forEach(t),pKr=i(Ne),Ow=n(Ne,"LI",{});var EWe=s(Ow);FAe=n(EWe,"STRONG",{});var SYt=s(FAe);_Kr=r(SYt,"roberta"),SYt.forEach(t),uKr=r(EWe," \u2014 "),Xre=n(EWe,"A",{href:!0});var RYt=s(Xre);bKr=r(RYt,"FlaxRobertaForCausalLM"),RYt.forEach(t),vKr=r(EWe," (RoBERTa model)"),EWe.forEach(t),FKr=i(Ne),Vw=n(Ne,"LI",{});var CWe=s(Vw);TAe=n(CWe,"STRONG",{});var PYt=s(TAe);TKr=r(PYt,"xglm"),PYt.forEach(t),MKr=r(CWe," \u2014 "),zre=n(CWe,"A",{href:!0});var BYt=s(zre);EKr=r(BYt,"FlaxXGLMForCausalLM"),BYt.forEach(t),CKr=r(CWe," (XGLM model)"),CWe.forEach(t),Ne.forEach(t),wKr=i(Ti),T(Xw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),RHe=i(f),Tf=n(f,"H2",{class:!0});var QYe=s(Tf);zw=n(QYe,"A",{id:!0,class:!0,href:!0});var IYt=s(zw);MAe=n(IYt,"SPAN",{});var NYt=s(MAe);T(qk.$$.fragment,NYt),NYt.forEach(t),IYt.forEach(t),AKr=i(QYe),EAe=n(QYe,"SPAN",{});var qYt=s(EAe);LKr=r(qYt,"FlaxAutoModelForPreTraining"),qYt.forEach(t),QYe.forEach(t),PHe=i(f),Tr=n(f,"DIV",{class:!0});var Mi=s(Tr);T(jk.$$.fragment,Mi),yKr=i(Mi),Mf=n(Mi,"P",{});var bse=s(Mf);xKr=r(bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wre=n(bse,"A",{href:!0});var jYt=s(Wre);$Kr=r(jYt,"from_pretrained()"),jYt.forEach(t),kKr=r(bse," class method or the "),Qre=n(bse,"A",{href:!0});var DYt=s(Qre);SKr=r(DYt,"from_config()"),DYt.forEach(t),RKr=r(bse,` class
method.`),bse.forEach(t),PKr=i(Mi),Dk=n(Mi,"P",{});var UYe=s(Dk);BKr=r(UYe,"This class cannot be instantiated directly using "),CAe=n(UYe,"CODE",{});var GYt=s(CAe);IKr=r(GYt,"__init__()"),GYt.forEach(t),NKr=r(UYe," (throws an error)."),UYe.forEach(t),qKr=i(Mi),oa=n(Mi,"DIV",{class:!0});var XL=s(oa);T(Gk.$$.fragment,XL),jKr=i(XL),wAe=n(XL,"P",{});var OYt=s(wAe);DKr=r(OYt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),OYt.forEach(t),GKr=i(XL),Ef=n(XL,"P",{});var vse=s(Ef);OKr=r(vse,`Note:
Loading a model from its configuration file does `),AAe=n(vse,"STRONG",{});var VYt=s(AAe);VKr=r(VYt,"not"),VYt.forEach(t),XKr=r(vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ure=n(vse,"A",{href:!0});var XYt=s(Ure);zKr=r(XYt,"from_pretrained()"),XYt.forEach(t),WKr=r(vse," to load the model weights."),vse.forEach(t),QKr=i(XL),T(Ww.$$.fragment,XL),XL.forEach(t),UKr=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(Ok.$$.fragment,Ei),HKr=i(Ei),LAe=n(Ei,"P",{});var zYt=s(LAe);JKr=r(zYt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zYt.forEach(t),YKr=i(Ei),Rn=n(Ei,"P",{});var zL=s(Rn);KKr=r(zL,"The model class to instantiate is selected based on the "),yAe=n(zL,"CODE",{});var WYt=s(yAe);ZKr=r(WYt,"model_type"),WYt.forEach(t),eZr=r(zL,` property of the config object (either
passed as an argument or loaded from `),xAe=n(zL,"CODE",{});var QYt=s(xAe);oZr=r(QYt,"pretrained_model_name_or_path"),QYt.forEach(t),rZr=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ae=n(zL,"CODE",{});var UYt=s($Ae);tZr=r(UYt,"pretrained_model_name_or_path"),UYt.forEach(t),aZr=r(zL,":"),zL.forEach(t),nZr=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);Qw=n(we,"LI",{});var wWe=s(Qw);kAe=n(wWe,"STRONG",{});var HYt=s(kAe);sZr=r(HYt,"albert"),HYt.forEach(t),lZr=r(wWe," \u2014 "),Hre=n(wWe,"A",{href:!0});var JYt=s(Hre);iZr=r(JYt,"FlaxAlbertForPreTraining"),JYt.forEach(t),dZr=r(wWe," (ALBERT model)"),wWe.forEach(t),cZr=i(we),Uw=n(we,"LI",{});var AWe=s(Uw);SAe=n(AWe,"STRONG",{});var YYt=s(SAe);fZr=r(YYt,"bart"),YYt.forEach(t),mZr=r(AWe," \u2014 "),Jre=n(AWe,"A",{href:!0});var KYt=s(Jre);gZr=r(KYt,"FlaxBartForConditionalGeneration"),KYt.forEach(t),hZr=r(AWe," (BART model)"),AWe.forEach(t),pZr=i(we),Hw=n(we,"LI",{});var LWe=s(Hw);RAe=n(LWe,"STRONG",{});var ZYt=s(RAe);_Zr=r(ZYt,"bert"),ZYt.forEach(t),uZr=r(LWe," \u2014 "),Yre=n(LWe,"A",{href:!0});var eKt=s(Yre);bZr=r(eKt,"FlaxBertForPreTraining"),eKt.forEach(t),vZr=r(LWe," (BERT model)"),LWe.forEach(t),FZr=i(we),Jw=n(we,"LI",{});var yWe=s(Jw);PAe=n(yWe,"STRONG",{});var oKt=s(PAe);TZr=r(oKt,"big_bird"),oKt.forEach(t),MZr=r(yWe," \u2014 "),Kre=n(yWe,"A",{href:!0});var rKt=s(Kre);EZr=r(rKt,"FlaxBigBirdForPreTraining"),rKt.forEach(t),CZr=r(yWe," (BigBird model)"),yWe.forEach(t),wZr=i(we),Yw=n(we,"LI",{});var xWe=s(Yw);BAe=n(xWe,"STRONG",{});var tKt=s(BAe);AZr=r(tKt,"electra"),tKt.forEach(t),LZr=r(xWe," \u2014 "),Zre=n(xWe,"A",{href:!0});var aKt=s(Zre);yZr=r(aKt,"FlaxElectraForPreTraining"),aKt.forEach(t),xZr=r(xWe," (ELECTRA model)"),xWe.forEach(t),$Zr=i(we),Kw=n(we,"LI",{});var $We=s(Kw);IAe=n($We,"STRONG",{});var nKt=s(IAe);kZr=r(nKt,"longt5"),nKt.forEach(t),SZr=r($We," \u2014 "),ete=n($We,"A",{href:!0});var sKt=s(ete);RZr=r(sKt,"FlaxLongT5ForConditionalGeneration"),sKt.forEach(t),PZr=r($We," (LongT5 model)"),$We.forEach(t),BZr=i(we),Zw=n(we,"LI",{});var kWe=s(Zw);NAe=n(kWe,"STRONG",{});var lKt=s(NAe);IZr=r(lKt,"mbart"),lKt.forEach(t),NZr=r(kWe," \u2014 "),ote=n(kWe,"A",{href:!0});var iKt=s(ote);qZr=r(iKt,"FlaxMBartForConditionalGeneration"),iKt.forEach(t),jZr=r(kWe," (mBART model)"),kWe.forEach(t),DZr=i(we),e6=n(we,"LI",{});var SWe=s(e6);qAe=n(SWe,"STRONG",{});var dKt=s(qAe);GZr=r(dKt,"mt5"),dKt.forEach(t),OZr=r(SWe," \u2014 "),rte=n(SWe,"A",{href:!0});var cKt=s(rte);VZr=r(cKt,"FlaxMT5ForConditionalGeneration"),cKt.forEach(t),XZr=r(SWe," (MT5 model)"),SWe.forEach(t),zZr=i(we),o6=n(we,"LI",{});var RWe=s(o6);jAe=n(RWe,"STRONG",{});var fKt=s(jAe);WZr=r(fKt,"roberta"),fKt.forEach(t),QZr=r(RWe," \u2014 "),tte=n(RWe,"A",{href:!0});var mKt=s(tte);UZr=r(mKt,"FlaxRobertaForMaskedLM"),mKt.forEach(t),HZr=r(RWe," (RoBERTa model)"),RWe.forEach(t),JZr=i(we),r6=n(we,"LI",{});var PWe=s(r6);DAe=n(PWe,"STRONG",{});var gKt=s(DAe);YZr=r(gKt,"roformer"),gKt.forEach(t),KZr=r(PWe," \u2014 "),ate=n(PWe,"A",{href:!0});var hKt=s(ate);ZZr=r(hKt,"FlaxRoFormerForMaskedLM"),hKt.forEach(t),eet=r(PWe," (RoFormer model)"),PWe.forEach(t),oet=i(we),t6=n(we,"LI",{});var BWe=s(t6);GAe=n(BWe,"STRONG",{});var pKt=s(GAe);ret=r(pKt,"t5"),pKt.forEach(t),tet=r(BWe," \u2014 "),nte=n(BWe,"A",{href:!0});var _Kt=s(nte);aet=r(_Kt,"FlaxT5ForConditionalGeneration"),_Kt.forEach(t),net=r(BWe," (T5 model)"),BWe.forEach(t),set=i(we),a6=n(we,"LI",{});var IWe=s(a6);OAe=n(IWe,"STRONG",{});var uKt=s(OAe);iet=r(uKt,"wav2vec2"),uKt.forEach(t),det=r(IWe," \u2014 "),ste=n(IWe,"A",{href:!0});var bKt=s(ste);cet=r(bKt,"FlaxWav2Vec2ForPreTraining"),bKt.forEach(t),fet=r(IWe," (Wav2Vec2 model)"),IWe.forEach(t),met=i(we),n6=n(we,"LI",{});var NWe=s(n6);VAe=n(NWe,"STRONG",{});var vKt=s(VAe);get=r(vKt,"xlm-roberta"),vKt.forEach(t),het=r(NWe," \u2014 "),lte=n(NWe,"A",{href:!0});var FKt=s(lte);pet=r(FKt,"FlaxXLMRobertaForMaskedLM"),FKt.forEach(t),_et=r(NWe," (XLM-RoBERTa model)"),NWe.forEach(t),we.forEach(t),uet=i(Ei),T(s6.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),BHe=i(f),Cf=n(f,"H2",{class:!0});var HYe=s(Cf);l6=n(HYe,"A",{id:!0,class:!0,href:!0});var TKt=s(l6);XAe=n(TKt,"SPAN",{});var MKt=s(XAe);T(Vk.$$.fragment,MKt),MKt.forEach(t),TKt.forEach(t),bet=i(HYe),zAe=n(HYe,"SPAN",{});var EKt=s(zAe);vet=r(EKt,"FlaxAutoModelForMaskedLM"),EKt.forEach(t),HYe.forEach(t),IHe=i(f),Mr=n(f,"DIV",{class:!0});var Ci=s(Mr);T(Xk.$$.fragment,Ci),Fet=i(Ci),wf=n(Ci,"P",{});var Fse=s(wf);Tet=r(Fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ite=n(Fse,"A",{href:!0});var CKt=s(ite);Met=r(CKt,"from_pretrained()"),CKt.forEach(t),Eet=r(Fse," class method or the "),dte=n(Fse,"A",{href:!0});var wKt=s(dte);Cet=r(wKt,"from_config()"),wKt.forEach(t),wet=r(Fse,` class
method.`),Fse.forEach(t),Aet=i(Ci),zk=n(Ci,"P",{});var JYe=s(zk);Let=r(JYe,"This class cannot be instantiated directly using "),WAe=n(JYe,"CODE",{});var AKt=s(WAe);yet=r(AKt,"__init__()"),AKt.forEach(t),xet=r(JYe," (throws an error)."),JYe.forEach(t),$et=i(Ci),ra=n(Ci,"DIV",{class:!0});var WL=s(ra);T(Wk.$$.fragment,WL),ket=i(WL),QAe=n(WL,"P",{});var LKt=s(QAe);Set=r(LKt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LKt.forEach(t),Ret=i(WL),Af=n(WL,"P",{});var Tse=s(Af);Pet=r(Tse,`Note:
Loading a model from its configuration file does `),UAe=n(Tse,"STRONG",{});var yKt=s(UAe);Bet=r(yKt,"not"),yKt.forEach(t),Iet=r(Tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),cte=n(Tse,"A",{href:!0});var xKt=s(cte);Net=r(xKt,"from_pretrained()"),xKt.forEach(t),qet=r(Tse," to load the model weights."),Tse.forEach(t),jet=i(WL),T(i6.$$.fragment,WL),WL.forEach(t),Det=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(Qk.$$.fragment,wi),Get=i(wi),HAe=n(wi,"P",{});var $Kt=s(HAe);Oet=r($Kt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Kt.forEach(t),Vet=i(wi),Pn=n(wi,"P",{});var QL=s(Pn);Xet=r(QL,"The model class to instantiate is selected based on the "),JAe=n(QL,"CODE",{});var kKt=s(JAe);zet=r(kKt,"model_type"),kKt.forEach(t),Wet=r(QL,` property of the config object (either
passed as an argument or loaded from `),YAe=n(QL,"CODE",{});var SKt=s(YAe);Qet=r(SKt,"pretrained_model_name_or_path"),SKt.forEach(t),Uet=r(QL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KAe=n(QL,"CODE",{});var RKt=s(KAe);Het=r(RKt,"pretrained_model_name_or_path"),RKt.forEach(t),Jet=r(QL,":"),QL.forEach(t),Yet=i(wi),$e=n(wi,"UL",{});var qe=s($e);d6=n(qe,"LI",{});var qWe=s(d6);ZAe=n(qWe,"STRONG",{});var PKt=s(ZAe);Ket=r(PKt,"albert"),PKt.forEach(t),Zet=r(qWe," \u2014 "),fte=n(qWe,"A",{href:!0});var BKt=s(fte);eot=r(BKt,"FlaxAlbertForMaskedLM"),BKt.forEach(t),oot=r(qWe," (ALBERT model)"),qWe.forEach(t),rot=i(qe),c6=n(qe,"LI",{});var jWe=s(c6);e7e=n(jWe,"STRONG",{});var IKt=s(e7e);tot=r(IKt,"bart"),IKt.forEach(t),aot=r(jWe," \u2014 "),mte=n(jWe,"A",{href:!0});var NKt=s(mte);not=r(NKt,"FlaxBartForConditionalGeneration"),NKt.forEach(t),sot=r(jWe," (BART model)"),jWe.forEach(t),lot=i(qe),f6=n(qe,"LI",{});var DWe=s(f6);o7e=n(DWe,"STRONG",{});var qKt=s(o7e);iot=r(qKt,"bert"),qKt.forEach(t),dot=r(DWe," \u2014 "),gte=n(DWe,"A",{href:!0});var jKt=s(gte);cot=r(jKt,"FlaxBertForMaskedLM"),jKt.forEach(t),fot=r(DWe," (BERT model)"),DWe.forEach(t),mot=i(qe),m6=n(qe,"LI",{});var GWe=s(m6);r7e=n(GWe,"STRONG",{});var DKt=s(r7e);got=r(DKt,"big_bird"),DKt.forEach(t),hot=r(GWe," \u2014 "),hte=n(GWe,"A",{href:!0});var GKt=s(hte);pot=r(GKt,"FlaxBigBirdForMaskedLM"),GKt.forEach(t),_ot=r(GWe," (BigBird model)"),GWe.forEach(t),uot=i(qe),g6=n(qe,"LI",{});var OWe=s(g6);t7e=n(OWe,"STRONG",{});var OKt=s(t7e);bot=r(OKt,"distilbert"),OKt.forEach(t),vot=r(OWe," \u2014 "),pte=n(OWe,"A",{href:!0});var VKt=s(pte);Fot=r(VKt,"FlaxDistilBertForMaskedLM"),VKt.forEach(t),Tot=r(OWe," (DistilBERT model)"),OWe.forEach(t),Mot=i(qe),h6=n(qe,"LI",{});var VWe=s(h6);a7e=n(VWe,"STRONG",{});var XKt=s(a7e);Eot=r(XKt,"electra"),XKt.forEach(t),Cot=r(VWe," \u2014 "),_te=n(VWe,"A",{href:!0});var zKt=s(_te);wot=r(zKt,"FlaxElectraForMaskedLM"),zKt.forEach(t),Aot=r(VWe," (ELECTRA model)"),VWe.forEach(t),Lot=i(qe),p6=n(qe,"LI",{});var XWe=s(p6);n7e=n(XWe,"STRONG",{});var WKt=s(n7e);yot=r(WKt,"mbart"),WKt.forEach(t),xot=r(XWe," \u2014 "),ute=n(XWe,"A",{href:!0});var QKt=s(ute);$ot=r(QKt,"FlaxMBartForConditionalGeneration"),QKt.forEach(t),kot=r(XWe," (mBART model)"),XWe.forEach(t),Sot=i(qe),_6=n(qe,"LI",{});var zWe=s(_6);s7e=n(zWe,"STRONG",{});var UKt=s(s7e);Rot=r(UKt,"roberta"),UKt.forEach(t),Pot=r(zWe," \u2014 "),bte=n(zWe,"A",{href:!0});var HKt=s(bte);Bot=r(HKt,"FlaxRobertaForMaskedLM"),HKt.forEach(t),Iot=r(zWe," (RoBERTa model)"),zWe.forEach(t),Not=i(qe),u6=n(qe,"LI",{});var WWe=s(u6);l7e=n(WWe,"STRONG",{});var JKt=s(l7e);qot=r(JKt,"roformer"),JKt.forEach(t),jot=r(WWe," \u2014 "),vte=n(WWe,"A",{href:!0});var YKt=s(vte);Dot=r(YKt,"FlaxRoFormerForMaskedLM"),YKt.forEach(t),Got=r(WWe," (RoFormer model)"),WWe.forEach(t),Oot=i(qe),b6=n(qe,"LI",{});var QWe=s(b6);i7e=n(QWe,"STRONG",{});var KKt=s(i7e);Vot=r(KKt,"xlm-roberta"),KKt.forEach(t),Xot=r(QWe," \u2014 "),Fte=n(QWe,"A",{href:!0});var ZKt=s(Fte);zot=r(ZKt,"FlaxXLMRobertaForMaskedLM"),ZKt.forEach(t),Wot=r(QWe," (XLM-RoBERTa model)"),QWe.forEach(t),qe.forEach(t),Qot=i(wi),T(v6.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),NHe=i(f),Lf=n(f,"H2",{class:!0});var YYe=s(Lf);F6=n(YYe,"A",{id:!0,class:!0,href:!0});var eZt=s(F6);d7e=n(eZt,"SPAN",{});var oZt=s(d7e);T(Uk.$$.fragment,oZt),oZt.forEach(t),eZt.forEach(t),Uot=i(YYe),c7e=n(YYe,"SPAN",{});var rZt=s(c7e);Hot=r(rZt,"FlaxAutoModelForSeq2SeqLM"),rZt.forEach(t),YYe.forEach(t),qHe=i(f),Er=n(f,"DIV",{class:!0});var Ai=s(Er);T(Hk.$$.fragment,Ai),Jot=i(Ai),yf=n(Ai,"P",{});var Mse=s(yf);Yot=r(Mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Tte=n(Mse,"A",{href:!0});var tZt=s(Tte);Kot=r(tZt,"from_pretrained()"),tZt.forEach(t),Zot=r(Mse," class method or the "),Mte=n(Mse,"A",{href:!0});var aZt=s(Mte);ert=r(aZt,"from_config()"),aZt.forEach(t),ort=r(Mse,` class
method.`),Mse.forEach(t),rrt=i(Ai),Jk=n(Ai,"P",{});var KYe=s(Jk);trt=r(KYe,"This class cannot be instantiated directly using "),f7e=n(KYe,"CODE",{});var nZt=s(f7e);art=r(nZt,"__init__()"),nZt.forEach(t),nrt=r(KYe," (throws an error)."),KYe.forEach(t),srt=i(Ai),ta=n(Ai,"DIV",{class:!0});var UL=s(ta);T(Yk.$$.fragment,UL),lrt=i(UL),m7e=n(UL,"P",{});var sZt=s(m7e);irt=r(sZt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sZt.forEach(t),drt=i(UL),xf=n(UL,"P",{});var Ese=s(xf);crt=r(Ese,`Note:
Loading a model from its configuration file does `),g7e=n(Ese,"STRONG",{});var lZt=s(g7e);frt=r(lZt,"not"),lZt.forEach(t),mrt=r(Ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ete=n(Ese,"A",{href:!0});var iZt=s(Ete);grt=r(iZt,"from_pretrained()"),iZt.forEach(t),hrt=r(Ese," to load the model weights."),Ese.forEach(t),prt=i(UL),T(T6.$$.fragment,UL),UL.forEach(t),_rt=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(Kk.$$.fragment,Li),urt=i(Li),h7e=n(Li,"P",{});var dZt=s(h7e);brt=r(dZt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dZt.forEach(t),vrt=i(Li),Bn=n(Li,"P",{});var HL=s(Bn);Frt=r(HL,"The model class to instantiate is selected based on the "),p7e=n(HL,"CODE",{});var cZt=s(p7e);Trt=r(cZt,"model_type"),cZt.forEach(t),Mrt=r(HL,` property of the config object (either
passed as an argument or loaded from `),_7e=n(HL,"CODE",{});var fZt=s(_7e);Ert=r(fZt,"pretrained_model_name_or_path"),fZt.forEach(t),Crt=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=n(HL,"CODE",{});var mZt=s(u7e);wrt=r(mZt,"pretrained_model_name_or_path"),mZt.forEach(t),Art=r(HL,":"),HL.forEach(t),Lrt=i(Li),ke=n(Li,"UL",{});var je=s(ke);M6=n(je,"LI",{});var UWe=s(M6);b7e=n(UWe,"STRONG",{});var gZt=s(b7e);yrt=r(gZt,"bart"),gZt.forEach(t),xrt=r(UWe," \u2014 "),Cte=n(UWe,"A",{href:!0});var hZt=s(Cte);$rt=r(hZt,"FlaxBartForConditionalGeneration"),hZt.forEach(t),krt=r(UWe," (BART model)"),UWe.forEach(t),Srt=i(je),E6=n(je,"LI",{});var HWe=s(E6);v7e=n(HWe,"STRONG",{});var pZt=s(v7e);Rrt=r(pZt,"blenderbot"),pZt.forEach(t),Prt=r(HWe," \u2014 "),wte=n(HWe,"A",{href:!0});var _Zt=s(wte);Brt=r(_Zt,"FlaxBlenderbotForConditionalGeneration"),_Zt.forEach(t),Irt=r(HWe," (Blenderbot model)"),HWe.forEach(t),Nrt=i(je),C6=n(je,"LI",{});var JWe=s(C6);F7e=n(JWe,"STRONG",{});var uZt=s(F7e);qrt=r(uZt,"blenderbot-small"),uZt.forEach(t),jrt=r(JWe," \u2014 "),Ate=n(JWe,"A",{href:!0});var bZt=s(Ate);Drt=r(bZt,"FlaxBlenderbotSmallForConditionalGeneration"),bZt.forEach(t),Grt=r(JWe," (BlenderbotSmall model)"),JWe.forEach(t),Ort=i(je),w6=n(je,"LI",{});var YWe=s(w6);T7e=n(YWe,"STRONG",{});var vZt=s(T7e);Vrt=r(vZt,"encoder-decoder"),vZt.forEach(t),Xrt=r(YWe," \u2014 "),Lte=n(YWe,"A",{href:!0});var FZt=s(Lte);zrt=r(FZt,"FlaxEncoderDecoderModel"),FZt.forEach(t),Wrt=r(YWe," (Encoder decoder model)"),YWe.forEach(t),Qrt=i(je),A6=n(je,"LI",{});var KWe=s(A6);M7e=n(KWe,"STRONG",{});var TZt=s(M7e);Urt=r(TZt,"longt5"),TZt.forEach(t),Hrt=r(KWe," \u2014 "),yte=n(KWe,"A",{href:!0});var MZt=s(yte);Jrt=r(MZt,"FlaxLongT5ForConditionalGeneration"),MZt.forEach(t),Yrt=r(KWe," (LongT5 model)"),KWe.forEach(t),Krt=i(je),L6=n(je,"LI",{});var ZWe=s(L6);E7e=n(ZWe,"STRONG",{});var EZt=s(E7e);Zrt=r(EZt,"marian"),EZt.forEach(t),ett=r(ZWe," \u2014 "),xte=n(ZWe,"A",{href:!0});var CZt=s(xte);ott=r(CZt,"FlaxMarianMTModel"),CZt.forEach(t),rtt=r(ZWe," (Marian model)"),ZWe.forEach(t),ttt=i(je),y6=n(je,"LI",{});var eQe=s(y6);C7e=n(eQe,"STRONG",{});var wZt=s(C7e);att=r(wZt,"mbart"),wZt.forEach(t),ntt=r(eQe," \u2014 "),$te=n(eQe,"A",{href:!0});var AZt=s($te);stt=r(AZt,"FlaxMBartForConditionalGeneration"),AZt.forEach(t),ltt=r(eQe," (mBART model)"),eQe.forEach(t),itt=i(je),x6=n(je,"LI",{});var oQe=s(x6);w7e=n(oQe,"STRONG",{});var LZt=s(w7e);dtt=r(LZt,"mt5"),LZt.forEach(t),ctt=r(oQe," \u2014 "),kte=n(oQe,"A",{href:!0});var yZt=s(kte);ftt=r(yZt,"FlaxMT5ForConditionalGeneration"),yZt.forEach(t),mtt=r(oQe," (MT5 model)"),oQe.forEach(t),gtt=i(je),$6=n(je,"LI",{});var rQe=s($6);A7e=n(rQe,"STRONG",{});var xZt=s(A7e);htt=r(xZt,"pegasus"),xZt.forEach(t),ptt=r(rQe," \u2014 "),Ste=n(rQe,"A",{href:!0});var $Zt=s(Ste);_tt=r($Zt,"FlaxPegasusForConditionalGeneration"),$Zt.forEach(t),utt=r(rQe," (Pegasus model)"),rQe.forEach(t),btt=i(je),k6=n(je,"LI",{});var tQe=s(k6);L7e=n(tQe,"STRONG",{});var kZt=s(L7e);vtt=r(kZt,"t5"),kZt.forEach(t),Ftt=r(tQe," \u2014 "),Rte=n(tQe,"A",{href:!0});var SZt=s(Rte);Ttt=r(SZt,"FlaxT5ForConditionalGeneration"),SZt.forEach(t),Mtt=r(tQe," (T5 model)"),tQe.forEach(t),je.forEach(t),Ett=i(Li),T(S6.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),jHe=i(f),$f=n(f,"H2",{class:!0});var ZYe=s($f);R6=n(ZYe,"A",{id:!0,class:!0,href:!0});var RZt=s(R6);y7e=n(RZt,"SPAN",{});var PZt=s(y7e);T(Zk.$$.fragment,PZt),PZt.forEach(t),RZt.forEach(t),Ctt=i(ZYe),x7e=n(ZYe,"SPAN",{});var BZt=s(x7e);wtt=r(BZt,"FlaxAutoModelForSequenceClassification"),BZt.forEach(t),ZYe.forEach(t),DHe=i(f),Cr=n(f,"DIV",{class:!0});var yi=s(Cr);T(eS.$$.fragment,yi),Att=i(yi),kf=n(yi,"P",{});var Cse=s(kf);Ltt=r(Cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Pte=n(Cse,"A",{href:!0});var IZt=s(Pte);ytt=r(IZt,"from_pretrained()"),IZt.forEach(t),xtt=r(Cse," class method or the "),Bte=n(Cse,"A",{href:!0});var NZt=s(Bte);$tt=r(NZt,"from_config()"),NZt.forEach(t),ktt=r(Cse,` class
method.`),Cse.forEach(t),Stt=i(yi),oS=n(yi,"P",{});var eKe=s(oS);Rtt=r(eKe,"This class cannot be instantiated directly using "),$7e=n(eKe,"CODE",{});var qZt=s($7e);Ptt=r(qZt,"__init__()"),qZt.forEach(t),Btt=r(eKe," (throws an error)."),eKe.forEach(t),Itt=i(yi),aa=n(yi,"DIV",{class:!0});var JL=s(aa);T(rS.$$.fragment,JL),Ntt=i(JL),k7e=n(JL,"P",{});var jZt=s(k7e);qtt=r(jZt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jZt.forEach(t),jtt=i(JL),Sf=n(JL,"P",{});var wse=s(Sf);Dtt=r(wse,`Note:
Loading a model from its configuration file does `),S7e=n(wse,"STRONG",{});var DZt=s(S7e);Gtt=r(DZt,"not"),DZt.forEach(t),Ott=r(wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ite=n(wse,"A",{href:!0});var GZt=s(Ite);Vtt=r(GZt,"from_pretrained()"),GZt.forEach(t),Xtt=r(wse," to load the model weights."),wse.forEach(t),ztt=i(JL),T(P6.$$.fragment,JL),JL.forEach(t),Wtt=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(tS.$$.fragment,xi),Qtt=i(xi),R7e=n(xi,"P",{});var OZt=s(R7e);Utt=r(OZt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OZt.forEach(t),Htt=i(xi),In=n(xi,"P",{});var YL=s(In);Jtt=r(YL,"The model class to instantiate is selected based on the "),P7e=n(YL,"CODE",{});var VZt=s(P7e);Ytt=r(VZt,"model_type"),VZt.forEach(t),Ktt=r(YL,` property of the config object (either
passed as an argument or loaded from `),B7e=n(YL,"CODE",{});var XZt=s(B7e);Ztt=r(XZt,"pretrained_model_name_or_path"),XZt.forEach(t),eat=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(YL,"CODE",{});var zZt=s(I7e);oat=r(zZt,"pretrained_model_name_or_path"),zZt.forEach(t),rat=r(YL,":"),YL.forEach(t),tat=i(xi),Se=n(xi,"UL",{});var De=s(Se);B6=n(De,"LI",{});var aQe=s(B6);N7e=n(aQe,"STRONG",{});var WZt=s(N7e);aat=r(WZt,"albert"),WZt.forEach(t),nat=r(aQe," \u2014 "),Nte=n(aQe,"A",{href:!0});var QZt=s(Nte);sat=r(QZt,"FlaxAlbertForSequenceClassification"),QZt.forEach(t),lat=r(aQe," (ALBERT model)"),aQe.forEach(t),iat=i(De),I6=n(De,"LI",{});var nQe=s(I6);q7e=n(nQe,"STRONG",{});var UZt=s(q7e);dat=r(UZt,"bart"),UZt.forEach(t),cat=r(nQe," \u2014 "),qte=n(nQe,"A",{href:!0});var HZt=s(qte);fat=r(HZt,"FlaxBartForSequenceClassification"),HZt.forEach(t),mat=r(nQe," (BART model)"),nQe.forEach(t),gat=i(De),N6=n(De,"LI",{});var sQe=s(N6);j7e=n(sQe,"STRONG",{});var JZt=s(j7e);hat=r(JZt,"bert"),JZt.forEach(t),pat=r(sQe," \u2014 "),jte=n(sQe,"A",{href:!0});var YZt=s(jte);_at=r(YZt,"FlaxBertForSequenceClassification"),YZt.forEach(t),uat=r(sQe," (BERT model)"),sQe.forEach(t),bat=i(De),q6=n(De,"LI",{});var lQe=s(q6);D7e=n(lQe,"STRONG",{});var KZt=s(D7e);vat=r(KZt,"big_bird"),KZt.forEach(t),Fat=r(lQe," \u2014 "),Dte=n(lQe,"A",{href:!0});var ZZt=s(Dte);Tat=r(ZZt,"FlaxBigBirdForSequenceClassification"),ZZt.forEach(t),Mat=r(lQe," (BigBird model)"),lQe.forEach(t),Eat=i(De),j6=n(De,"LI",{});var iQe=s(j6);G7e=n(iQe,"STRONG",{});var eea=s(G7e);Cat=r(eea,"distilbert"),eea.forEach(t),wat=r(iQe," \u2014 "),Gte=n(iQe,"A",{href:!0});var oea=s(Gte);Aat=r(oea,"FlaxDistilBertForSequenceClassification"),oea.forEach(t),Lat=r(iQe," (DistilBERT model)"),iQe.forEach(t),yat=i(De),D6=n(De,"LI",{});var dQe=s(D6);O7e=n(dQe,"STRONG",{});var rea=s(O7e);xat=r(rea,"electra"),rea.forEach(t),$at=r(dQe," \u2014 "),Ote=n(dQe,"A",{href:!0});var tea=s(Ote);kat=r(tea,"FlaxElectraForSequenceClassification"),tea.forEach(t),Sat=r(dQe," (ELECTRA model)"),dQe.forEach(t),Rat=i(De),G6=n(De,"LI",{});var cQe=s(G6);V7e=n(cQe,"STRONG",{});var aea=s(V7e);Pat=r(aea,"mbart"),aea.forEach(t),Bat=r(cQe," \u2014 "),Vte=n(cQe,"A",{href:!0});var nea=s(Vte);Iat=r(nea,"FlaxMBartForSequenceClassification"),nea.forEach(t),Nat=r(cQe," (mBART model)"),cQe.forEach(t),qat=i(De),O6=n(De,"LI",{});var fQe=s(O6);X7e=n(fQe,"STRONG",{});var sea=s(X7e);jat=r(sea,"roberta"),sea.forEach(t),Dat=r(fQe," \u2014 "),Xte=n(fQe,"A",{href:!0});var lea=s(Xte);Gat=r(lea,"FlaxRobertaForSequenceClassification"),lea.forEach(t),Oat=r(fQe," (RoBERTa model)"),fQe.forEach(t),Vat=i(De),V6=n(De,"LI",{});var mQe=s(V6);z7e=n(mQe,"STRONG",{});var iea=s(z7e);Xat=r(iea,"roformer"),iea.forEach(t),zat=r(mQe," \u2014 "),zte=n(mQe,"A",{href:!0});var dea=s(zte);Wat=r(dea,"FlaxRoFormerForSequenceClassification"),dea.forEach(t),Qat=r(mQe," (RoFormer model)"),mQe.forEach(t),Uat=i(De),X6=n(De,"LI",{});var gQe=s(X6);W7e=n(gQe,"STRONG",{});var cea=s(W7e);Hat=r(cea,"xlm-roberta"),cea.forEach(t),Jat=r(gQe," \u2014 "),Wte=n(gQe,"A",{href:!0});var fea=s(Wte);Yat=r(fea,"FlaxXLMRobertaForSequenceClassification"),fea.forEach(t),Kat=r(gQe," (XLM-RoBERTa model)"),gQe.forEach(t),De.forEach(t),Zat=i(xi),T(z6.$$.fragment,xi),xi.forEach(t),yi.forEach(t),GHe=i(f),Rf=n(f,"H2",{class:!0});var oKe=s(Rf);W6=n(oKe,"A",{id:!0,class:!0,href:!0});var mea=s(W6);Q7e=n(mea,"SPAN",{});var gea=s(Q7e);T(aS.$$.fragment,gea),gea.forEach(t),mea.forEach(t),ent=i(oKe),U7e=n(oKe,"SPAN",{});var hea=s(U7e);ont=r(hea,"FlaxAutoModelForQuestionAnswering"),hea.forEach(t),oKe.forEach(t),OHe=i(f),wr=n(f,"DIV",{class:!0});var $i=s(wr);T(nS.$$.fragment,$i),rnt=i($i),Pf=n($i,"P",{});var Ase=s(Pf);tnt=r(Ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qte=n(Ase,"A",{href:!0});var pea=s(Qte);ant=r(pea,"from_pretrained()"),pea.forEach(t),nnt=r(Ase," class method or the "),Ute=n(Ase,"A",{href:!0});var _ea=s(Ute);snt=r(_ea,"from_config()"),_ea.forEach(t),lnt=r(Ase,` class
method.`),Ase.forEach(t),int=i($i),sS=n($i,"P",{});var rKe=s(sS);dnt=r(rKe,"This class cannot be instantiated directly using "),H7e=n(rKe,"CODE",{});var uea=s(H7e);cnt=r(uea,"__init__()"),uea.forEach(t),fnt=r(rKe," (throws an error)."),rKe.forEach(t),mnt=i($i),na=n($i,"DIV",{class:!0});var KL=s(na);T(lS.$$.fragment,KL),gnt=i(KL),J7e=n(KL,"P",{});var bea=s(J7e);hnt=r(bea,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bea.forEach(t),pnt=i(KL),Bf=n(KL,"P",{});var Lse=s(Bf);_nt=r(Lse,`Note:
Loading a model from its configuration file does `),Y7e=n(Lse,"STRONG",{});var vea=s(Y7e);unt=r(vea,"not"),vea.forEach(t),bnt=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hte=n(Lse,"A",{href:!0});var Fea=s(Hte);vnt=r(Fea,"from_pretrained()"),Fea.forEach(t),Fnt=r(Lse," to load the model weights."),Lse.forEach(t),Tnt=i(KL),T(Q6.$$.fragment,KL),KL.forEach(t),Mnt=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(iS.$$.fragment,ki),Ent=i(ki),K7e=n(ki,"P",{});var Tea=s(K7e);Cnt=r(Tea,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Tea.forEach(t),wnt=i(ki),Nn=n(ki,"P",{});var ZL=s(Nn);Ant=r(ZL,"The model class to instantiate is selected based on the "),Z7e=n(ZL,"CODE",{});var Mea=s(Z7e);Lnt=r(Mea,"model_type"),Mea.forEach(t),ynt=r(ZL,` property of the config object (either
passed as an argument or loaded from `),eLe=n(ZL,"CODE",{});var Eea=s(eLe);xnt=r(Eea,"pretrained_model_name_or_path"),Eea.forEach(t),$nt=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oLe=n(ZL,"CODE",{});var Cea=s(oLe);knt=r(Cea,"pretrained_model_name_or_path"),Cea.forEach(t),Snt=r(ZL,":"),ZL.forEach(t),Rnt=i(ki),Re=n(ki,"UL",{});var Ge=s(Re);U6=n(Ge,"LI",{});var hQe=s(U6);rLe=n(hQe,"STRONG",{});var wea=s(rLe);Pnt=r(wea,"albert"),wea.forEach(t),Bnt=r(hQe," \u2014 "),Jte=n(hQe,"A",{href:!0});var Aea=s(Jte);Int=r(Aea,"FlaxAlbertForQuestionAnswering"),Aea.forEach(t),Nnt=r(hQe," (ALBERT model)"),hQe.forEach(t),qnt=i(Ge),H6=n(Ge,"LI",{});var pQe=s(H6);tLe=n(pQe,"STRONG",{});var Lea=s(tLe);jnt=r(Lea,"bart"),Lea.forEach(t),Dnt=r(pQe," \u2014 "),Yte=n(pQe,"A",{href:!0});var yea=s(Yte);Gnt=r(yea,"FlaxBartForQuestionAnswering"),yea.forEach(t),Ont=r(pQe," (BART model)"),pQe.forEach(t),Vnt=i(Ge),J6=n(Ge,"LI",{});var _Qe=s(J6);aLe=n(_Qe,"STRONG",{});var xea=s(aLe);Xnt=r(xea,"bert"),xea.forEach(t),znt=r(_Qe," \u2014 "),Kte=n(_Qe,"A",{href:!0});var $ea=s(Kte);Wnt=r($ea,"FlaxBertForQuestionAnswering"),$ea.forEach(t),Qnt=r(_Qe," (BERT model)"),_Qe.forEach(t),Unt=i(Ge),Y6=n(Ge,"LI",{});var uQe=s(Y6);nLe=n(uQe,"STRONG",{});var kea=s(nLe);Hnt=r(kea,"big_bird"),kea.forEach(t),Jnt=r(uQe," \u2014 "),Zte=n(uQe,"A",{href:!0});var Sea=s(Zte);Ynt=r(Sea,"FlaxBigBirdForQuestionAnswering"),Sea.forEach(t),Knt=r(uQe," (BigBird model)"),uQe.forEach(t),Znt=i(Ge),K6=n(Ge,"LI",{});var bQe=s(K6);sLe=n(bQe,"STRONG",{});var Rea=s(sLe);est=r(Rea,"distilbert"),Rea.forEach(t),ost=r(bQe," \u2014 "),eae=n(bQe,"A",{href:!0});var Pea=s(eae);rst=r(Pea,"FlaxDistilBertForQuestionAnswering"),Pea.forEach(t),tst=r(bQe," (DistilBERT model)"),bQe.forEach(t),ast=i(Ge),Z6=n(Ge,"LI",{});var vQe=s(Z6);lLe=n(vQe,"STRONG",{});var Bea=s(lLe);nst=r(Bea,"electra"),Bea.forEach(t),sst=r(vQe," \u2014 "),oae=n(vQe,"A",{href:!0});var Iea=s(oae);lst=r(Iea,"FlaxElectraForQuestionAnswering"),Iea.forEach(t),ist=r(vQe," (ELECTRA model)"),vQe.forEach(t),dst=i(Ge),eA=n(Ge,"LI",{});var FQe=s(eA);iLe=n(FQe,"STRONG",{});var Nea=s(iLe);cst=r(Nea,"mbart"),Nea.forEach(t),fst=r(FQe," \u2014 "),rae=n(FQe,"A",{href:!0});var qea=s(rae);mst=r(qea,"FlaxMBartForQuestionAnswering"),qea.forEach(t),gst=r(FQe," (mBART model)"),FQe.forEach(t),hst=i(Ge),oA=n(Ge,"LI",{});var TQe=s(oA);dLe=n(TQe,"STRONG",{});var jea=s(dLe);pst=r(jea,"roberta"),jea.forEach(t),_st=r(TQe," \u2014 "),tae=n(TQe,"A",{href:!0});var Dea=s(tae);ust=r(Dea,"FlaxRobertaForQuestionAnswering"),Dea.forEach(t),bst=r(TQe," (RoBERTa model)"),TQe.forEach(t),vst=i(Ge),rA=n(Ge,"LI",{});var MQe=s(rA);cLe=n(MQe,"STRONG",{});var Gea=s(cLe);Fst=r(Gea,"roformer"),Gea.forEach(t),Tst=r(MQe," \u2014 "),aae=n(MQe,"A",{href:!0});var Oea=s(aae);Mst=r(Oea,"FlaxRoFormerForQuestionAnswering"),Oea.forEach(t),Est=r(MQe," (RoFormer model)"),MQe.forEach(t),Cst=i(Ge),tA=n(Ge,"LI",{});var EQe=s(tA);fLe=n(EQe,"STRONG",{});var Vea=s(fLe);wst=r(Vea,"xlm-roberta"),Vea.forEach(t),Ast=r(EQe," \u2014 "),nae=n(EQe,"A",{href:!0});var Xea=s(nae);Lst=r(Xea,"FlaxXLMRobertaForQuestionAnswering"),Xea.forEach(t),yst=r(EQe," (XLM-RoBERTa model)"),EQe.forEach(t),Ge.forEach(t),xst=i(ki),T(aA.$$.fragment,ki),ki.forEach(t),$i.forEach(t),VHe=i(f),If=n(f,"H2",{class:!0});var tKe=s(If);nA=n(tKe,"A",{id:!0,class:!0,href:!0});var zea=s(nA);mLe=n(zea,"SPAN",{});var Wea=s(mLe);T(dS.$$.fragment,Wea),Wea.forEach(t),zea.forEach(t),$st=i(tKe),gLe=n(tKe,"SPAN",{});var Qea=s(gLe);kst=r(Qea,"FlaxAutoModelForTokenClassification"),Qea.forEach(t),tKe.forEach(t),XHe=i(f),Ar=n(f,"DIV",{class:!0});var Si=s(Ar);T(cS.$$.fragment,Si),Sst=i(Si),Nf=n(Si,"P",{});var yse=s(Nf);Rst=r(yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sae=n(yse,"A",{href:!0});var Uea=s(sae);Pst=r(Uea,"from_pretrained()"),Uea.forEach(t),Bst=r(yse," class method or the "),lae=n(yse,"A",{href:!0});var Hea=s(lae);Ist=r(Hea,"from_config()"),Hea.forEach(t),Nst=r(yse,` class
method.`),yse.forEach(t),qst=i(Si),fS=n(Si,"P",{});var aKe=s(fS);jst=r(aKe,"This class cannot be instantiated directly using "),hLe=n(aKe,"CODE",{});var Jea=s(hLe);Dst=r(Jea,"__init__()"),Jea.forEach(t),Gst=r(aKe," (throws an error)."),aKe.forEach(t),Ost=i(Si),sa=n(Si,"DIV",{class:!0});var ey=s(sa);T(mS.$$.fragment,ey),Vst=i(ey),pLe=n(ey,"P",{});var Yea=s(pLe);Xst=r(Yea,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yea.forEach(t),zst=i(ey),qf=n(ey,"P",{});var xse=s(qf);Wst=r(xse,`Note:
Loading a model from its configuration file does `),_Le=n(xse,"STRONG",{});var Kea=s(_Le);Qst=r(Kea,"not"),Kea.forEach(t),Ust=r(xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),iae=n(xse,"A",{href:!0});var Zea=s(iae);Hst=r(Zea,"from_pretrained()"),Zea.forEach(t),Jst=r(xse," to load the model weights."),xse.forEach(t),Yst=i(ey),T(sA.$$.fragment,ey),ey.forEach(t),Kst=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(gS.$$.fragment,Ri),Zst=i(Ri),uLe=n(Ri,"P",{});var eoa=s(uLe);elt=r(eoa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eoa.forEach(t),olt=i(Ri),qn=n(Ri,"P",{});var oy=s(qn);rlt=r(oy,"The model class to instantiate is selected based on the "),bLe=n(oy,"CODE",{});var ooa=s(bLe);tlt=r(ooa,"model_type"),ooa.forEach(t),alt=r(oy,` property of the config object (either
passed as an argument or loaded from `),vLe=n(oy,"CODE",{});var roa=s(vLe);nlt=r(roa,"pretrained_model_name_or_path"),roa.forEach(t),slt=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FLe=n(oy,"CODE",{});var toa=s(FLe);llt=r(toa,"pretrained_model_name_or_path"),toa.forEach(t),ilt=r(oy,":"),oy.forEach(t),dlt=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);lA=n(Co,"LI",{});var CQe=s(lA);TLe=n(CQe,"STRONG",{});var aoa=s(TLe);clt=r(aoa,"albert"),aoa.forEach(t),flt=r(CQe," \u2014 "),dae=n(CQe,"A",{href:!0});var noa=s(dae);mlt=r(noa,"FlaxAlbertForTokenClassification"),noa.forEach(t),glt=r(CQe," (ALBERT model)"),CQe.forEach(t),hlt=i(Co),iA=n(Co,"LI",{});var wQe=s(iA);MLe=n(wQe,"STRONG",{});var soa=s(MLe);plt=r(soa,"bert"),soa.forEach(t),_lt=r(wQe," \u2014 "),cae=n(wQe,"A",{href:!0});var loa=s(cae);ult=r(loa,"FlaxBertForTokenClassification"),loa.forEach(t),blt=r(wQe," (BERT model)"),wQe.forEach(t),vlt=i(Co),dA=n(Co,"LI",{});var AQe=s(dA);ELe=n(AQe,"STRONG",{});var ioa=s(ELe);Flt=r(ioa,"big_bird"),ioa.forEach(t),Tlt=r(AQe," \u2014 "),fae=n(AQe,"A",{href:!0});var doa=s(fae);Mlt=r(doa,"FlaxBigBirdForTokenClassification"),doa.forEach(t),Elt=r(AQe," (BigBird model)"),AQe.forEach(t),Clt=i(Co),cA=n(Co,"LI",{});var LQe=s(cA);CLe=n(LQe,"STRONG",{});var coa=s(CLe);wlt=r(coa,"distilbert"),coa.forEach(t),Alt=r(LQe," \u2014 "),mae=n(LQe,"A",{href:!0});var foa=s(mae);Llt=r(foa,"FlaxDistilBertForTokenClassification"),foa.forEach(t),ylt=r(LQe," (DistilBERT model)"),LQe.forEach(t),xlt=i(Co),fA=n(Co,"LI",{});var yQe=s(fA);wLe=n(yQe,"STRONG",{});var moa=s(wLe);$lt=r(moa,"electra"),moa.forEach(t),klt=r(yQe," \u2014 "),gae=n(yQe,"A",{href:!0});var goa=s(gae);Slt=r(goa,"FlaxElectraForTokenClassification"),goa.forEach(t),Rlt=r(yQe," (ELECTRA model)"),yQe.forEach(t),Plt=i(Co),mA=n(Co,"LI",{});var xQe=s(mA);ALe=n(xQe,"STRONG",{});var hoa=s(ALe);Blt=r(hoa,"roberta"),hoa.forEach(t),Ilt=r(xQe," \u2014 "),hae=n(xQe,"A",{href:!0});var poa=s(hae);Nlt=r(poa,"FlaxRobertaForTokenClassification"),poa.forEach(t),qlt=r(xQe," (RoBERTa model)"),xQe.forEach(t),jlt=i(Co),gA=n(Co,"LI",{});var $Qe=s(gA);LLe=n($Qe,"STRONG",{});var _oa=s(LLe);Dlt=r(_oa,"roformer"),_oa.forEach(t),Glt=r($Qe," \u2014 "),pae=n($Qe,"A",{href:!0});var uoa=s(pae);Olt=r(uoa,"FlaxRoFormerForTokenClassification"),uoa.forEach(t),Vlt=r($Qe," (RoFormer model)"),$Qe.forEach(t),Xlt=i(Co),hA=n(Co,"LI",{});var kQe=s(hA);yLe=n(kQe,"STRONG",{});var boa=s(yLe);zlt=r(boa,"xlm-roberta"),boa.forEach(t),Wlt=r(kQe," \u2014 "),_ae=n(kQe,"A",{href:!0});var voa=s(_ae);Qlt=r(voa,"FlaxXLMRobertaForTokenClassification"),voa.forEach(t),Ult=r(kQe," (XLM-RoBERTa model)"),kQe.forEach(t),Co.forEach(t),Hlt=i(Ri),T(pA.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),zHe=i(f),jf=n(f,"H2",{class:!0});var nKe=s(jf);_A=n(nKe,"A",{id:!0,class:!0,href:!0});var Foa=s(_A);xLe=n(Foa,"SPAN",{});var Toa=s(xLe);T(hS.$$.fragment,Toa),Toa.forEach(t),Foa.forEach(t),Jlt=i(nKe),$Le=n(nKe,"SPAN",{});var Moa=s($Le);Ylt=r(Moa,"FlaxAutoModelForMultipleChoice"),Moa.forEach(t),nKe.forEach(t),WHe=i(f),Lr=n(f,"DIV",{class:!0});var Pi=s(Lr);T(pS.$$.fragment,Pi),Klt=i(Pi),Df=n(Pi,"P",{});var $se=s(Df);Zlt=r($se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uae=n($se,"A",{href:!0});var Eoa=s(uae);eit=r(Eoa,"from_pretrained()"),Eoa.forEach(t),oit=r($se," class method or the "),bae=n($se,"A",{href:!0});var Coa=s(bae);rit=r(Coa,"from_config()"),Coa.forEach(t),tit=r($se,` class
method.`),$se.forEach(t),ait=i(Pi),_S=n(Pi,"P",{});var sKe=s(_S);nit=r(sKe,"This class cannot be instantiated directly using "),kLe=n(sKe,"CODE",{});var woa=s(kLe);sit=r(woa,"__init__()"),woa.forEach(t),lit=r(sKe," (throws an error)."),sKe.forEach(t),iit=i(Pi),la=n(Pi,"DIV",{class:!0});var ry=s(la);T(uS.$$.fragment,ry),dit=i(ry),SLe=n(ry,"P",{});var Aoa=s(SLe);cit=r(Aoa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Aoa.forEach(t),fit=i(ry),Gf=n(ry,"P",{});var kse=s(Gf);mit=r(kse,`Note:
Loading a model from its configuration file does `),RLe=n(kse,"STRONG",{});var Loa=s(RLe);git=r(Loa,"not"),Loa.forEach(t),hit=r(kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),vae=n(kse,"A",{href:!0});var yoa=s(vae);pit=r(yoa,"from_pretrained()"),yoa.forEach(t),_it=r(kse," to load the model weights."),kse.forEach(t),uit=i(ry),T(uA.$$.fragment,ry),ry.forEach(t),bit=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(bS.$$.fragment,Bi),vit=i(Bi),PLe=n(Bi,"P",{});var xoa=s(PLe);Fit=r(xoa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xoa.forEach(t),Tit=i(Bi),jn=n(Bi,"P",{});var ty=s(jn);Mit=r(ty,"The model class to instantiate is selected based on the "),BLe=n(ty,"CODE",{});var $oa=s(BLe);Eit=r($oa,"model_type"),$oa.forEach(t),Cit=r(ty,` property of the config object (either
passed as an argument or loaded from `),ILe=n(ty,"CODE",{});var koa=s(ILe);wit=r(koa,"pretrained_model_name_or_path"),koa.forEach(t),Ait=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NLe=n(ty,"CODE",{});var Soa=s(NLe);Lit=r(Soa,"pretrained_model_name_or_path"),Soa.forEach(t),yit=r(ty,":"),ty.forEach(t),xit=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);bA=n(wo,"LI",{});var SQe=s(bA);qLe=n(SQe,"STRONG",{});var Roa=s(qLe);$it=r(Roa,"albert"),Roa.forEach(t),kit=r(SQe," \u2014 "),Fae=n(SQe,"A",{href:!0});var Poa=s(Fae);Sit=r(Poa,"FlaxAlbertForMultipleChoice"),Poa.forEach(t),Rit=r(SQe," (ALBERT model)"),SQe.forEach(t),Pit=i(wo),vA=n(wo,"LI",{});var RQe=s(vA);jLe=n(RQe,"STRONG",{});var Boa=s(jLe);Bit=r(Boa,"bert"),Boa.forEach(t),Iit=r(RQe," \u2014 "),Tae=n(RQe,"A",{href:!0});var Ioa=s(Tae);Nit=r(Ioa,"FlaxBertForMultipleChoice"),Ioa.forEach(t),qit=r(RQe," (BERT model)"),RQe.forEach(t),jit=i(wo),FA=n(wo,"LI",{});var PQe=s(FA);DLe=n(PQe,"STRONG",{});var Noa=s(DLe);Dit=r(Noa,"big_bird"),Noa.forEach(t),Git=r(PQe," \u2014 "),Mae=n(PQe,"A",{href:!0});var qoa=s(Mae);Oit=r(qoa,"FlaxBigBirdForMultipleChoice"),qoa.forEach(t),Vit=r(PQe," (BigBird model)"),PQe.forEach(t),Xit=i(wo),TA=n(wo,"LI",{});var BQe=s(TA);GLe=n(BQe,"STRONG",{});var joa=s(GLe);zit=r(joa,"distilbert"),joa.forEach(t),Wit=r(BQe," \u2014 "),Eae=n(BQe,"A",{href:!0});var Doa=s(Eae);Qit=r(Doa,"FlaxDistilBertForMultipleChoice"),Doa.forEach(t),Uit=r(BQe," (DistilBERT model)"),BQe.forEach(t),Hit=i(wo),MA=n(wo,"LI",{});var IQe=s(MA);OLe=n(IQe,"STRONG",{});var Goa=s(OLe);Jit=r(Goa,"electra"),Goa.forEach(t),Yit=r(IQe," \u2014 "),Cae=n(IQe,"A",{href:!0});var Ooa=s(Cae);Kit=r(Ooa,"FlaxElectraForMultipleChoice"),Ooa.forEach(t),Zit=r(IQe," (ELECTRA model)"),IQe.forEach(t),edt=i(wo),EA=n(wo,"LI",{});var NQe=s(EA);VLe=n(NQe,"STRONG",{});var Voa=s(VLe);odt=r(Voa,"roberta"),Voa.forEach(t),rdt=r(NQe," \u2014 "),wae=n(NQe,"A",{href:!0});var Xoa=s(wae);tdt=r(Xoa,"FlaxRobertaForMultipleChoice"),Xoa.forEach(t),adt=r(NQe," (RoBERTa model)"),NQe.forEach(t),ndt=i(wo),CA=n(wo,"LI",{});var qQe=s(CA);XLe=n(qQe,"STRONG",{});var zoa=s(XLe);sdt=r(zoa,"roformer"),zoa.forEach(t),ldt=r(qQe," \u2014 "),Aae=n(qQe,"A",{href:!0});var Woa=s(Aae);idt=r(Woa,"FlaxRoFormerForMultipleChoice"),Woa.forEach(t),ddt=r(qQe," (RoFormer model)"),qQe.forEach(t),cdt=i(wo),wA=n(wo,"LI",{});var jQe=s(wA);zLe=n(jQe,"STRONG",{});var Qoa=s(zLe);fdt=r(Qoa,"xlm-roberta"),Qoa.forEach(t),mdt=r(jQe," \u2014 "),Lae=n(jQe,"A",{href:!0});var Uoa=s(Lae);gdt=r(Uoa,"FlaxXLMRobertaForMultipleChoice"),Uoa.forEach(t),hdt=r(jQe," (XLM-RoBERTa model)"),jQe.forEach(t),wo.forEach(t),pdt=i(Bi),T(AA.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),QHe=i(f),Of=n(f,"H2",{class:!0});var lKe=s(Of);LA=n(lKe,"A",{id:!0,class:!0,href:!0});var Hoa=s(LA);WLe=n(Hoa,"SPAN",{});var Joa=s(WLe);T(vS.$$.fragment,Joa),Joa.forEach(t),Hoa.forEach(t),_dt=i(lKe),QLe=n(lKe,"SPAN",{});var Yoa=s(QLe);udt=r(Yoa,"FlaxAutoModelForNextSentencePrediction"),Yoa.forEach(t),lKe.forEach(t),UHe=i(f),yr=n(f,"DIV",{class:!0});var Ii=s(yr);T(FS.$$.fragment,Ii),bdt=i(Ii),Vf=n(Ii,"P",{});var Sse=s(Vf);vdt=r(Sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yae=n(Sse,"A",{href:!0});var Koa=s(yae);Fdt=r(Koa,"from_pretrained()"),Koa.forEach(t),Tdt=r(Sse," class method or the "),xae=n(Sse,"A",{href:!0});var Zoa=s(xae);Mdt=r(Zoa,"from_config()"),Zoa.forEach(t),Edt=r(Sse,` class
method.`),Sse.forEach(t),Cdt=i(Ii),TS=n(Ii,"P",{});var iKe=s(TS);wdt=r(iKe,"This class cannot be instantiated directly using "),ULe=n(iKe,"CODE",{});var era=s(ULe);Adt=r(era,"__init__()"),era.forEach(t),Ldt=r(iKe," (throws an error)."),iKe.forEach(t),ydt=i(Ii),ia=n(Ii,"DIV",{class:!0});var ay=s(ia);T(MS.$$.fragment,ay),xdt=i(ay),HLe=n(ay,"P",{});var ora=s(HLe);$dt=r(ora,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ora.forEach(t),kdt=i(ay),Xf=n(ay,"P",{});var Rse=s(Xf);Sdt=r(Rse,`Note:
Loading a model from its configuration file does `),JLe=n(Rse,"STRONG",{});var rra=s(JLe);Rdt=r(rra,"not"),rra.forEach(t),Pdt=r(Rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ae=n(Rse,"A",{href:!0});var tra=s($ae);Bdt=r(tra,"from_pretrained()"),tra.forEach(t),Idt=r(Rse," to load the model weights."),Rse.forEach(t),Ndt=i(ay),T(yA.$$.fragment,ay),ay.forEach(t),qdt=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(ES.$$.fragment,Ni),jdt=i(Ni),YLe=n(Ni,"P",{});var ara=s(YLe);Ddt=r(ara,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ara.forEach(t),Gdt=i(Ni),Dn=n(Ni,"P",{});var ny=s(Dn);Odt=r(ny,"The model class to instantiate is selected based on the "),KLe=n(ny,"CODE",{});var nra=s(KLe);Vdt=r(nra,"model_type"),nra.forEach(t),Xdt=r(ny,` property of the config object (either
passed as an argument or loaded from `),ZLe=n(ny,"CODE",{});var sra=s(ZLe);zdt=r(sra,"pretrained_model_name_or_path"),sra.forEach(t),Wdt=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eye=n(ny,"CODE",{});var lra=s(eye);Qdt=r(lra,"pretrained_model_name_or_path"),lra.forEach(t),Udt=r(ny,":"),ny.forEach(t),Hdt=i(Ni),oye=n(Ni,"UL",{});var ira=s(oye);xA=n(ira,"LI",{});var DQe=s(xA);rye=n(DQe,"STRONG",{});var dra=s(rye);Jdt=r(dra,"bert"),dra.forEach(t),Ydt=r(DQe," \u2014 "),kae=n(DQe,"A",{href:!0});var cra=s(kae);Kdt=r(cra,"FlaxBertForNextSentencePrediction"),cra.forEach(t),Zdt=r(DQe," (BERT model)"),DQe.forEach(t),ira.forEach(t),ect=i(Ni),T($A.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),HHe=i(f),zf=n(f,"H2",{class:!0});var dKe=s(zf);kA=n(dKe,"A",{id:!0,class:!0,href:!0});var fra=s(kA);tye=n(fra,"SPAN",{});var mra=s(tye);T(CS.$$.fragment,mra),mra.forEach(t),fra.forEach(t),oct=i(dKe),aye=n(dKe,"SPAN",{});var gra=s(aye);rct=r(gra,"FlaxAutoModelForImageClassification"),gra.forEach(t),dKe.forEach(t),JHe=i(f),xr=n(f,"DIV",{class:!0});var qi=s(xr);T(wS.$$.fragment,qi),tct=i(qi),Wf=n(qi,"P",{});var Pse=s(Wf);act=r(Pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sae=n(Pse,"A",{href:!0});var hra=s(Sae);nct=r(hra,"from_pretrained()"),hra.forEach(t),sct=r(Pse," class method or the "),Rae=n(Pse,"A",{href:!0});var pra=s(Rae);lct=r(pra,"from_config()"),pra.forEach(t),ict=r(Pse,` class
method.`),Pse.forEach(t),dct=i(qi),AS=n(qi,"P",{});var cKe=s(AS);cct=r(cKe,"This class cannot be instantiated directly using "),nye=n(cKe,"CODE",{});var _ra=s(nye);fct=r(_ra,"__init__()"),_ra.forEach(t),mct=r(cKe," (throws an error)."),cKe.forEach(t),gct=i(qi),da=n(qi,"DIV",{class:!0});var sy=s(da);T(LS.$$.fragment,sy),hct=i(sy),sye=n(sy,"P",{});var ura=s(sye);pct=r(ura,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ura.forEach(t),_ct=i(sy),Qf=n(sy,"P",{});var Bse=s(Qf);uct=r(Bse,`Note:
Loading a model from its configuration file does `),lye=n(Bse,"STRONG",{});var bra=s(lye);bct=r(bra,"not"),bra.forEach(t),vct=r(Bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pae=n(Bse,"A",{href:!0});var vra=s(Pae);Fct=r(vra,"from_pretrained()"),vra.forEach(t),Tct=r(Bse," to load the model weights."),Bse.forEach(t),Mct=i(sy),T(SA.$$.fragment,sy),sy.forEach(t),Ect=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T(yS.$$.fragment,ji),Cct=i(ji),iye=n(ji,"P",{});var Fra=s(iye);wct=r(Fra,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fra.forEach(t),Act=i(ji),Gn=n(ji,"P",{});var ly=s(Gn);Lct=r(ly,"The model class to instantiate is selected based on the "),dye=n(ly,"CODE",{});var Tra=s(dye);yct=r(Tra,"model_type"),Tra.forEach(t),xct=r(ly,` property of the config object (either
passed as an argument or loaded from `),cye=n(ly,"CODE",{});var Mra=s(cye);$ct=r(Mra,"pretrained_model_name_or_path"),Mra.forEach(t),kct=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fye=n(ly,"CODE",{});var Era=s(fye);Sct=r(Era,"pretrained_model_name_or_path"),Era.forEach(t),Rct=r(ly,":"),ly.forEach(t),Pct=i(ji),xS=n(ji,"UL",{});var fKe=s(xS);RA=n(fKe,"LI",{});var GQe=s(RA);mye=n(GQe,"STRONG",{});var Cra=s(mye);Bct=r(Cra,"beit"),Cra.forEach(t),Ict=r(GQe," \u2014 "),Bae=n(GQe,"A",{href:!0});var wra=s(Bae);Nct=r(wra,"FlaxBeitForImageClassification"),wra.forEach(t),qct=r(GQe," (BEiT model)"),GQe.forEach(t),jct=i(fKe),PA=n(fKe,"LI",{});var OQe=s(PA);gye=n(OQe,"STRONG",{});var Ara=s(gye);Dct=r(Ara,"vit"),Ara.forEach(t),Gct=r(OQe," \u2014 "),Iae=n(OQe,"A",{href:!0});var Lra=s(Iae);Oct=r(Lra,"FlaxViTForImageClassification"),Lra.forEach(t),Vct=r(OQe," (ViT model)"),OQe.forEach(t),fKe.forEach(t),Xct=i(ji),T(BA.$$.fragment,ji),ji.forEach(t),qi.forEach(t),YHe=i(f),Uf=n(f,"H2",{class:!0});var mKe=s(Uf);IA=n(mKe,"A",{id:!0,class:!0,href:!0});var yra=s(IA);hye=n(yra,"SPAN",{});var xra=s(hye);T($S.$$.fragment,xra),xra.forEach(t),yra.forEach(t),zct=i(mKe),pye=n(mKe,"SPAN",{});var $ra=s(pye);Wct=r($ra,"FlaxAutoModelForVision2Seq"),$ra.forEach(t),mKe.forEach(t),KHe=i(f),$r=n(f,"DIV",{class:!0});var Di=s($r);T(kS.$$.fragment,Di),Qct=i(Di),Hf=n(Di,"P",{});var Ise=s(Hf);Uct=r(Ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Nae=n(Ise,"A",{href:!0});var kra=s(Nae);Hct=r(kra,"from_pretrained()"),kra.forEach(t),Jct=r(Ise," class method or the "),qae=n(Ise,"A",{href:!0});var Sra=s(qae);Yct=r(Sra,"from_config()"),Sra.forEach(t),Kct=r(Ise,` class
method.`),Ise.forEach(t),Zct=i(Di),SS=n(Di,"P",{});var gKe=s(SS);eft=r(gKe,"This class cannot be instantiated directly using "),_ye=n(gKe,"CODE",{});var Rra=s(_ye);oft=r(Rra,"__init__()"),Rra.forEach(t),rft=r(gKe," (throws an error)."),gKe.forEach(t),tft=i(Di),ca=n(Di,"DIV",{class:!0});var iy=s(ca);T(RS.$$.fragment,iy),aft=i(iy),uye=n(iy,"P",{});var Pra=s(uye);nft=r(Pra,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pra.forEach(t),sft=i(iy),Jf=n(iy,"P",{});var Nse=s(Jf);lft=r(Nse,`Note:
Loading a model from its configuration file does `),bye=n(Nse,"STRONG",{});var Bra=s(bye);ift=r(Bra,"not"),Bra.forEach(t),dft=r(Nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=n(Nse,"A",{href:!0});var Ira=s(jae);cft=r(Ira,"from_pretrained()"),Ira.forEach(t),fft=r(Nse," to load the model weights."),Nse.forEach(t),mft=i(iy),T(NA.$$.fragment,iy),iy.forEach(t),gft=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(PS.$$.fragment,Gi),hft=i(Gi),vye=n(Gi,"P",{});var Nra=s(vye);pft=r(Nra,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nra.forEach(t),_ft=i(Gi),On=n(Gi,"P",{});var dy=s(On);uft=r(dy,"The model class to instantiate is selected based on the "),Fye=n(dy,"CODE",{});var qra=s(Fye);bft=r(qra,"model_type"),qra.forEach(t),vft=r(dy,` property of the config object (either
passed as an argument or loaded from `),Tye=n(dy,"CODE",{});var jra=s(Tye);Fft=r(jra,"pretrained_model_name_or_path"),jra.forEach(t),Tft=r(dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mye=n(dy,"CODE",{});var Dra=s(Mye);Mft=r(Dra,"pretrained_model_name_or_path"),Dra.forEach(t),Eft=r(dy,":"),dy.forEach(t),Cft=i(Gi),Eye=n(Gi,"UL",{});var Gra=s(Eye);qA=n(Gra,"LI",{});var VQe=s(qA);Cye=n(VQe,"STRONG",{});var Ora=s(Cye);wft=r(Ora,"vision-encoder-decoder"),Ora.forEach(t),Aft=r(VQe," \u2014 "),Dae=n(VQe,"A",{href:!0});var Vra=s(Dae);Lft=r(Vra,"FlaxVisionEncoderDecoderModel"),Vra.forEach(t),yft=r(VQe," (Vision Encoder decoder model)"),VQe.forEach(t),Gra.forEach(t),xft=i(Gi),T(jA.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Zaa)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Xn,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertModel"),c(am,"id","extending-the-auto-classes"),c(am,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(am,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(sm,"id","transformers.AutoConfig"),c(sm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sm,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(cP,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(fP,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertConfig"),c(mP,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartConfig"),c(gP,"href","/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitConfig"),c(hP,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertConfig"),c(pP,"href","/docs/transformers/pr_18450/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(_P,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdConfig"),c(uP,"href","/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(bP,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(vP,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(FP,"href","/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomConfig"),c(TP,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertConfig"),c(MP,"href","/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineConfig"),c(EP,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPConfig"),c(CP,"href","/docs/transformers/pr_18450/en/model_doc/codegen#transformers.CodeGenConfig"),c(wP,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertConfig"),c(AP,"href","/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextConfig"),c(LP,"href","/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLConfig"),c(yP,"href","/docs/transformers/pr_18450/en/model_doc/cvt#transformers.CvtConfig"),c(xP,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c($P,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(kP,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(SP,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaConfig"),c(RP,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(PP,"href","/docs/transformers/pr_18450/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(BP,"href","/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTConfig"),c(IP,"href","/docs/transformers/pr_18450/en/model_doc/detr#transformers.DetrConfig"),c(NP,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertConfig"),c(qP,"href","/docs/transformers/pr_18450/en/model_doc/donut#transformers.DonutSwinConfig"),c(jP,"href","/docs/transformers/pr_18450/en/model_doc/dpr#transformers.DPRConfig"),c(DP,"href","/docs/transformers/pr_18450/en/model_doc/dpt#transformers.DPTConfig"),c(GP,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraConfig"),c(OP,"href","/docs/transformers/pr_18450/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(VP,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertConfig"),c(XP,"href","/docs/transformers/pr_18450/en/model_doc/flava#transformers.FlavaConfig"),c(zP,"href","/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetConfig"),c(WP,"href","/docs/transformers/pr_18450/en/model_doc/fsmt#transformers.FSMTConfig"),c(QP,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelConfig"),c(UP,"href","/docs/transformers/pr_18450/en/model_doc/glpn#transformers.GLPNConfig"),c(HP,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Config"),c(JP,"href","/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(YP,"href","/docs/transformers/pr_18450/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(KP,"href","/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJConfig"),c(ZP,"href","/docs/transformers/pr_18450/en/model_doc/groupvit#transformers.GroupViTConfig"),c(eB,"href","/docs/transformers/pr_18450/en/model_doc/hubert#transformers.HubertConfig"),c(oB,"href","/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertConfig"),c(rB,"href","/docs/transformers/pr_18450/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(tB,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(aB,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(nB,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(sB,"href","/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDConfig"),c(lB,"href","/docs/transformers/pr_18450/en/model_doc/levit#transformers.LevitConfig"),c(iB,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerConfig"),c(dB,"href","/docs/transformers/pr_18450/en/model_doc/longt5#transformers.LongT5Config"),c(cB,"href","/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeConfig"),c(fB,"href","/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertConfig"),c(mB,"href","/docs/transformers/pr_18450/en/model_doc/m2m_100#transformers.M2M100Config"),c(gB,"href","/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianConfig"),c(hB,"href","/docs/transformers/pr_18450/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(pB,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartConfig"),c(_B,"href","/docs/transformers/pr_18450/en/model_doc/mctct#transformers.MCTCTConfig"),c(uB,"href","/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(bB,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(vB,"href","/docs/transformers/pr_18450/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(FB,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetConfig"),c(TB,"href","/docs/transformers/pr_18450/en/model_doc/mt5#transformers.MT5Config"),c(MB,"href","/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpConfig"),c(EB,"href","/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaConfig"),c(CB,"href","/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(wB,"href","/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(AB,"href","/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTConfig"),c(LB,"href","/docs/transformers/pr_18450/en/model_doc/owlvit#transformers.OwlViTConfig"),c(yB,"href","/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusConfig"),c(xB,"href","/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverConfig"),c($B,"href","/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartConfig"),c(kB,"href","/docs/transformers/pr_18450/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(SB,"href","/docs/transformers/pr_18450/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(RB,"href","/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(PB,"href","/docs/transformers/pr_18450/en/model_doc/rag#transformers.RagConfig"),c(BB,"href","/docs/transformers/pr_18450/en/model_doc/realm#transformers.RealmConfig"),c(IB,"href","/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerConfig"),c(NB,"href","/docs/transformers/pr_18450/en/model_doc/regnet#transformers.RegNetConfig"),c(qB,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertConfig"),c(jB,"href","/docs/transformers/pr_18450/en/model_doc/resnet#transformers.ResNetConfig"),c(DB,"href","/docs/transformers/pr_18450/en/model_doc/retribert#transformers.RetriBertConfig"),c(GB,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaConfig"),c(OB,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerConfig"),c(VB,"href","/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerConfig"),c(XB,"href","/docs/transformers/pr_18450/en/model_doc/sew#transformers.SEWConfig"),c(zB,"href","/docs/transformers/pr_18450/en/model_doc/sew-d#transformers.SEWDConfig"),c(WB,"href","/docs/transformers/pr_18450/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(QB,"href","/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(UB,"href","/docs/transformers/pr_18450/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(HB,"href","/docs/transformers/pr_18450/en/model_doc/splinter#transformers.SplinterConfig"),c(JB,"href","/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(YB,"href","/docs/transformers/pr_18450/en/model_doc/swin#transformers.SwinConfig"),c(KB,"href","/docs/transformers/pr_18450/en/model_doc/swinv2#transformers.Swinv2Config"),c(ZB,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Config"),c(eI,"href","/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasConfig"),c(oI,"href","/docs/transformers/pr_18450/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(rI,"href","/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(tI,"href","/docs/transformers/pr_18450/en/model_doc/trocr#transformers.TrOCRConfig"),c(aI,"href","/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(nI,"href","/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(sI,"href","/docs/transformers/pr_18450/en/model_doc/van#transformers.VanConfig"),c(lI,"href","/docs/transformers/pr_18450/en/model_doc/videomae#transformers.VideoMAEConfig"),c(iI,"href","/docs/transformers/pr_18450/en/model_doc/vilt#transformers.ViltConfig"),c(dI,"href","/docs/transformers/pr_18450/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(cI,"href","/docs/transformers/pr_18450/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(fI,"href","/docs/transformers/pr_18450/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(mI,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTConfig"),c(gI,"href","/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(hI,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(pI,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(_I,"href","/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMConfig"),c(uI,"href","/docs/transformers/pr_18450/en/model_doc/xglm#transformers.XGLMConfig"),c(bI,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMConfig"),c(vI,"href","/docs/transformers/pr_18450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(FI,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(TI,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(MI,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetConfig"),c(EI,"href","/docs/transformers/pr_18450/en/model_doc/yolos#transformers.YolosConfig"),c(CI,"href","/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoTokenizer"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c(wI,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(AI,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertTokenizer"),c(LI,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yI,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartTokenizer"),c(xI,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartTokenizerFast"),c($I,"href","/docs/transformers/pr_18450/en/model_doc/barthez#transformers.BarthezTokenizer"),c(kI,"href","/docs/transformers/pr_18450/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(SI,"href","/docs/transformers/pr_18450/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(RI,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/pr_18450/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(II,"href","/docs/transformers/pr_18450/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(NI,"href","/docs/transformers/pr_18450/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(qI,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(jI,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(DI,"href","/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(GI,"href","/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(OI,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(VI,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(XI,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(zI,"href","/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(WI,"href","/docs/transformers/pr_18450/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(QI,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertTokenizer"),c(UI,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(HI,"href","/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineTokenizer"),c(JI,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPTokenizer"),c(YI,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(KI,"href","/docs/transformers/pr_18450/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(ZI,"href","/docs/transformers/pr_18450/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(eN,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(oN,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(rN,"href","/docs/transformers/pr_18450/en/model_doc/cpm#transformers.CpmTokenizer"),c(tN,"href","/docs/transformers/pr_18450/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(aN,"href","/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(nN,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sN,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lN,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaTokenizer"),c(iN,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(dN,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(cN,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(fN,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(mN,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(gN,"href","/docs/transformers/pr_18450/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(hN,"href","/docs/transformers/pr_18450/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(pN,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraTokenizer"),c(_N,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(uN,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(bN,"href","/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetTokenizer"),c(vN,"href","/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(FN,"href","/docs/transformers/pr_18450/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(TN,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelTokenizer"),c(MN,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(EN,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CN,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wN,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AN,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LN,"href","/docs/transformers/pr_18450/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(yN,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xN,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($N,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPTokenizer"),c(kN,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(SN,"href","/docs/transformers/pr_18450/en/model_doc/herbert#transformers.HerbertTokenizer"),c(RN,"href","/docs/transformers/pr_18450/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(PN,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BN,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IN,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NN,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(qN,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(jN,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(DN,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(GN,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(ON,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(VN,"href","/docs/transformers/pr_18450/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(XN,"href","/docs/transformers/pr_18450/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(zN,"href","/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDTokenizer"),c(WN,"href","/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDTokenizerFast"),c(QN,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerTokenizer"),c(UN,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(HN,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Tokenizer"),c(JN,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5TokenizerFast"),c(YN,"href","/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeTokenizer"),c(KN,"href","/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(ZN,"href","/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(eq,"href","/docs/transformers/pr_18450/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(oq,"href","/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianTokenizer"),c(rq,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartTokenizer"),c(tq,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(aq,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(nq,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(sq,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertTokenizer"),c(lq,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertTokenizerFast"),c(iq,"href","/docs/transformers/pr_18450/en/model_doc/mluke#transformers.MLukeTokenizer"),c(dq,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(cq,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(fq,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(mq,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(gq,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Tokenizer"),c(hq,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5TokenizerFast"),c(pq,"href","/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpTokenizer"),c(_q,"href","/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(uq,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertTokenizer"),c(bq,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertTokenizerFast"),c(vq,"href","/docs/transformers/pr_18450/en/model_doc/nllb#transformers.NllbTokenizer"),c(Fq,"href","/docs/transformers/pr_18450/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Tq,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertTokenizer"),c(Mq,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Eq,"href","/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Cq,"href","/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(wq,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Aq,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPTokenizer"),c(Lq,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(yq,"href","/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(xq,"href","/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c($q,"href","/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(kq,"href","/docs/transformers/pr_18450/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Sq,"href","/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Rq,"href","/docs/transformers/pr_18450/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Pq,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertTokenizer"),c(Bq,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertTokenizerFast"),c(Iq,"href","/docs/transformers/pr_18450/en/model_doc/rag#transformers.RagTokenizer"),c(Nq,"href","/docs/transformers/pr_18450/en/model_doc/realm#transformers.RealmTokenizer"),c(qq,"href","/docs/transformers/pr_18450/en/model_doc/realm#transformers.RealmTokenizerFast"),c(jq,"href","/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Dq,"href","/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Gq,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Oq,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Vq,"href","/docs/transformers/pr_18450/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Xq,"href","/docs/transformers/pr_18450/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(zq,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Wq,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Qq,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Uq,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Hq,"href","/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Jq,"href","/docs/transformers/pr_18450/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Yq,"href","/docs/transformers/pr_18450/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Kq,"href","/docs/transformers/pr_18450/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Zq,"href","/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(ej,"href","/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(oj,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Tokenizer"),c(rj,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5TokenizerFast"),c(tj,"href","/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasTokenizer"),c(aj,"href","/docs/transformers/pr_18450/en/model_doc/tapex#transformers.TapexTokenizer"),c(nj,"href","/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(sj,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertTokenizer"),c(lj,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertTokenizerFast"),c(ij,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertTokenizer"),c(dj,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertTokenizerFast"),c(cj,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fj,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mj,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(gj,"href","/docs/transformers/pr_18450/en/model_doc/xglm#transformers.XGLMTokenizer"),c(hj,"href","/docs/transformers/pr_18450/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(pj,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMTokenizer"),c(_j,"href","/docs/transformers/pr_18450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(uj,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(bj,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(vj,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Fj,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Tj,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Mj,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Ej,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertTokenizer"),c(Cj,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoFeatureExtractor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c(wj,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Aj,"href","/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Lj,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(yj,"href","/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xj,"href","/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($j,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kj,"href","/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Sj,"href","/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Rj,"href","/docs/transformers/pr_18450/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Pj,"href","/docs/transformers/pr_18450/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(Bj,"href","/docs/transformers/pr_18450/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(Ij,"href","/docs/transformers/pr_18450/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(Nj,"href","/docs/transformers/pr_18450/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(qj,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(jj,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Dj,"href","/docs/transformers/pr_18450/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Gj,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Oj,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Vj,"href","/docs/transformers/pr_18450/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Xj,"href","/docs/transformers/pr_18450/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(zj,"href","/docs/transformers/pr_18450/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Wj,"href","/docs/transformers/pr_18450/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Qj,"href","/docs/transformers/pr_18450/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Uj,"href","/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Hj,"href","/docs/transformers/pr_18450/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Jj,"href","/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(eD,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oD,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(rD,"href","/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tD,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aD,"href","/docs/transformers/pr_18450/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(nD,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sD,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lD,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iD,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dD,"href","/docs/transformers/pr_18450/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qp,"id","transformers.AutoProcessor"),c(Qp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qp,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(cD,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(fD,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPProcessor"),c(mD,"href","/docs/transformers/pr_18450/en/model_doc/donut#transformers.DonutProcessor"),c(gD,"href","/docs/transformers/pr_18450/en/model_doc/flava#transformers.FlavaProcessor"),c(hD,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPProcessor"),c(pD,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(_D,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(uD,"href","/docs/transformers/pr_18450/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(bD,"href","/docs/transformers/pr_18450/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(vD,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FD,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TD,"href","/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(MD,"href","/docs/transformers/pr_18450/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(ED,"href","/docs/transformers/pr_18450/en/model_doc/trocr#transformers.TrOCRProcessor"),c(CD,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wD,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AD,"href","/docs/transformers/pr_18450/en/model_doc/vilt#transformers.ViltProcessor"),c(LD,"href","/docs/transformers/pr_18450/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(yD,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xD,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($D,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(__,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u_,"id","transformers.AutoModel"),c(u_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u_,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c(kD,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SD,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RD,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PD,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertModel"),c(BD,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartModel"),c(ID,"href","/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitModel"),c(ND,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertModel"),c(qD,"href","/docs/transformers/pr_18450/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(jD,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdModel"),c(DD,"href","/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(GD,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(OD,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(VD,"href","/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomModel"),c(XD,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertModel"),c(zD,"href","/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineModel"),c(WD,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.CLIPModel"),c(QD,"href","/docs/transformers/pr_18450/en/model_doc/codegen#transformers.CodeGenModel"),c(UD,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertModel"),c(HD,"href","/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextModel"),c(JD,"href","/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLModel"),c(YD,"href","/docs/transformers/pr_18450/en/model_doc/cvt#transformers.CvtModel"),c(KD,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(ZD,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(eG,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(oG,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaModel"),c(rG,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(tG,"href","/docs/transformers/pr_18450/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(aG,"href","/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTModel"),c(nG,"href","/docs/transformers/pr_18450/en/model_doc/detr#transformers.DetrModel"),c(sG,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertModel"),c(lG,"href","/docs/transformers/pr_18450/en/model_doc/donut#transformers.DonutSwinModel"),c(iG,"href","/docs/transformers/pr_18450/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(dG,"href","/docs/transformers/pr_18450/en/model_doc/dpt#transformers.DPTModel"),c(cG,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraModel"),c(fG,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertModel"),c(mG,"href","/docs/transformers/pr_18450/en/model_doc/flava#transformers.FlavaModel"),c(gG,"href","/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetModel"),c(hG,"href","/docs/transformers/pr_18450/en/model_doc/fsmt#transformers.FSMTModel"),c(pG,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelModel"),c(_G,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelBaseModel"),c(uG,"href","/docs/transformers/pr_18450/en/model_doc/glpn#transformers.GLPNModel"),c(bG,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2Model"),c(vG,"href","/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(FG,"href","/docs/transformers/pr_18450/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(TG,"href","/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJModel"),c(MG,"href","/docs/transformers/pr_18450/en/model_doc/groupvit#transformers.GroupViTModel"),c(EG,"href","/docs/transformers/pr_18450/en/model_doc/hubert#transformers.HubertModel"),c(CG,"href","/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertModel"),c(wG,"href","/docs/transformers/pr_18450/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(AG,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(LG,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(yG,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(xG,"href","/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDModel"),c($G,"href","/docs/transformers/pr_18450/en/model_doc/levit#transformers.LevitModel"),c(kG,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerModel"),c(SG,"href","/docs/transformers/pr_18450/en/model_doc/longt5#transformers.LongT5Model"),c(RG,"href","/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeModel"),c(PG,"href","/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertModel"),c(BG,"href","/docs/transformers/pr_18450/en/model_doc/m2m_100#transformers.M2M100Model"),c(IG,"href","/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianModel"),c(NG,"href","/docs/transformers/pr_18450/en/model_doc/maskformer#transformers.MaskFormerModel"),c(qG,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartModel"),c(jG,"href","/docs/transformers/pr_18450/en/model_doc/mctct#transformers.MCTCTModel"),c(DG,"href","/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(GG,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertModel"),c(OG,"href","/docs/transformers/pr_18450/en/model_doc/mobilevit#transformers.MobileViTModel"),c(VG,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetModel"),c(XG,"href","/docs/transformers/pr_18450/en/model_doc/mt5#transformers.MT5Model"),c(zG,"href","/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpModel"),c(WG,"href","/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaModel"),c(QG,"href","/docs/transformers/pr_18450/en/model_doc/m2m_100#transformers.M2M100Model"),c(UG,"href","/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerModel"),c(HG,"href","/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(JG,"href","/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTModel"),c(YG,"href","/docs/transformers/pr_18450/en/model_doc/owlvit#transformers.OwlViTModel"),c(KG,"href","/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusModel"),c(ZG,"href","/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverModel"),c(eO,"href","/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartModel"),c(oO,"href","/docs/transformers/pr_18450/en/model_doc/poolformer#transformers.PoolFormerModel"),c(rO,"href","/docs/transformers/pr_18450/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(tO,"href","/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertModel"),c(aO,"href","/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerModel"),c(nO,"href","/docs/transformers/pr_18450/en/model_doc/regnet#transformers.RegNetModel"),c(sO,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertModel"),c(lO,"href","/docs/transformers/pr_18450/en/model_doc/resnet#transformers.ResNetModel"),c(iO,"href","/docs/transformers/pr_18450/en/model_doc/retribert#transformers.RetriBertModel"),c(dO,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaModel"),c(cO,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerModel"),c(fO,"href","/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerModel"),c(mO,"href","/docs/transformers/pr_18450/en/model_doc/sew#transformers.SEWModel"),c(gO,"href","/docs/transformers/pr_18450/en/model_doc/sew-d#transformers.SEWDModel"),c(hO,"href","/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(pO,"href","/docs/transformers/pr_18450/en/model_doc/splinter#transformers.SplinterModel"),c(_O,"href","/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(uO,"href","/docs/transformers/pr_18450/en/model_doc/swin#transformers.SwinModel"),c(bO,"href","/docs/transformers/pr_18450/en/model_doc/swinv2#transformers.Swinv2Model"),c(vO,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5Model"),c(FO,"href","/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasModel"),c(TO,"href","/docs/transformers/pr_18450/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(MO,"href","/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(EO,"href","/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechModel"),c(CO,"href","/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(wO,"href","/docs/transformers/pr_18450/en/model_doc/van#transformers.VanModel"),c(AO,"href","/docs/transformers/pr_18450/en/model_doc/videomae#transformers.VideoMAEModel"),c(LO,"href","/docs/transformers/pr_18450/en/model_doc/vilt#transformers.ViltModel"),c(yO,"href","/docs/transformers/pr_18450/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(xO,"href","/docs/transformers/pr_18450/en/model_doc/visual_bert#transformers.VisualBertModel"),c($O,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTModel"),c(kO,"href","/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(SO,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(RO,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(PO,"href","/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMModel"),c(BO,"href","/docs/transformers/pr_18450/en/model_doc/xglm#transformers.XGLMModel"),c(IO,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMModel"),c(NO,"href","/docs/transformers/pr_18450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(qO,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(jO,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(DO,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetModel"),c(GO,"href","/docs/transformers/pr_18450/en/model_doc/yolos#transformers.YolosModel"),c(OO,"href","/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y1,"id","transformers.AutoModelForPreTraining"),c(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y1,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(VO,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XO,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zO,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WO,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertForPreTraining"),c(QO,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForPreTraining"),c(HO,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(JO,"href","/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomForCausalLM"),c(YO,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(KO,"href","/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ZO,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(eV,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(oV,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(rV,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(tV,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForPreTraining"),c(aV,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(nV,"href","/docs/transformers/pr_18450/en/model_doc/flava#transformers.FlavaForPreTraining"),c(sV,"href","/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForPreTraining"),c(lV,"href","/docs/transformers/pr_18450/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(iV,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(dV,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(cV,"href","/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(fV,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(mV,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(gV,"href","/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeForMaskedLM"),c(hV,"href","/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(pV,"href","/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(_V,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(uV,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bV,"href","/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(vV,"href","/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(FV,"href","/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(TV,"href","/docs/transformers/pr_18450/en/model_doc/retribert#transformers.RetriBertModel"),c(MV,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(EV,"href","/docs/transformers/pr_18450/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(CV,"href","/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(wV,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(AV,"href","/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(LV,"href","/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(yV,"href","/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(xV,"href","/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c($V,"href","/docs/transformers/pr_18450/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(kV,"href","/docs/transformers/pr_18450/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(SV,"href","/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(RV,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(PV,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(BV,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(IV,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(NV,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(qV,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w4,"id","transformers.AutoModelForCausalLM"),c(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w4,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c(jV,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartForCausalLM"),c(VV,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertLMHeadModel"),c(XV,"href","/docs/transformers/pr_18450/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(zV,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(WV,"href","/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(QV,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(UV,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(HV,"href","/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomForCausalLM"),c(JV,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(YV,"href","/docs/transformers/pr_18450/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(KV,"href","/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ZV,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(eX,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForCausalLM"),c(oX,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(rX,"href","/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(tX,"href","/docs/transformers/pr_18450/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(aX,"href","/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(nX,"href","/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianForCausalLM"),c(sX,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartForCausalLM"),c(lX,"href","/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(iX,"href","/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpForCausalLM"),c(dX,"href","/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(cX,"href","/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTForCausalLM"),c(fX,"href","/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(mX,"href","/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(gX,"href","/docs/transformers/pr_18450/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(hX,"href","/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(pX,"href","/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(_X,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(uX,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(bX,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(vX,"href","/docs/transformers/pr_18450/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(FX,"href","/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(TX,"href","/docs/transformers/pr_18450/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(MX,"href","/docs/transformers/pr_18450/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(EX,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(CX,"href","/docs/transformers/pr_18450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(wX,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(AX,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(LX,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForMaskedLM"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForMaskedLM"),c(fd,"class","relative group"),c(yX,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(SX,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(RX,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForMaskedLM"),c(PX,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(BX,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(IX,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(NX,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qX,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(jX,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(DX,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(GX,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(OX,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(VX,"href","/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(XX,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(zX,"href","/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(WX,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(QX,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(UX,"href","/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeForMaskedLM"),c(HX,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(JX,"href","/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(YX,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(KX,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ZX,"href","/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(ez,"href","/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(oz,"href","/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(rz,"href","/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(tz,"href","/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(az,"href","/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(nz,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(sz,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(lz,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(iz,"href","/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(dz,"href","/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(cz,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(fz,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(mz,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(gz,"href","/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tb,"id","transformers.AutoModelForSeq2SeqLM"),c(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tb,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(hz,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bz,"href","/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(vz,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Tz,"href","/docs/transformers/pr_18450/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Mz,"href","/docs/transformers/pr_18450/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Ez,"href","/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Cz,"href","/docs/transformers/pr_18450/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(wz,"href","/docs/transformers/pr_18450/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Az,"href","/docs/transformers/pr_18450/en/model_doc/marian#transformers.MarianMTModel"),c(Lz,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yz,"href","/docs/transformers/pr_18450/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(xz,"href","/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c($z,"href","/docs/transformers/pr_18450/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(kz,"href","/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Sz,"href","/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Rz,"href","/docs/transformers/pr_18450/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Bz,"href","/docs/transformers/pr_18450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForSequenceClassification"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForSequenceClassification"),c(ud,"class","relative group"),c(Iz,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Dz,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Gz,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Oz,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Vz,"href","/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Xz,"href","/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(zz,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Wz,"href","/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Qz,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Uz,"href","/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Hz,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Jz,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Yz,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Kz,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Zz,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(eW,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(oW,"href","/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(rW,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(tW,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(aW,"href","/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(nW,"href","/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(sW,"href","/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(lW,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(iW,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(dW,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(cW,"href","/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDForSequenceClassification"),c(fW,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(mW,"href","/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(gW,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(hW,"href","/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(pW,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(_W,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(uW,"href","/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(bW,"href","/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(vW,"href","/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(FW,"href","/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(TW,"href","/docs/transformers/pr_18450/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(MW,"href","/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(EW,"href","/docs/transformers/pr_18450/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(CW,"href","/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(wW,"href","/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(AW,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(LW,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(yW,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(xW,"href","/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c($W,"href","/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(kW,"href","/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(SW,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(RW,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(PW,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(BW,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(IW,"href","/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForMultipleChoice"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(NW,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(GW,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForMultipleChoice"),c(OW,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(VW,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(XW,"href","/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(zW,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(WW,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(QW,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(UW,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(HW,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(JW,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(YW,"href","/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(KW,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(eQ,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(oQ,"href","/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(rQ,"href","/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(tQ,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(aQ,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(nQ,"href","/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(sQ,"href","/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(lQ,"href","/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(iQ,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(dQ,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(cQ,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(fQ,"href","/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(mQ,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(gQ,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(hQ,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(pQ,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(_Q,"href","/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d5,"id","transformers.AutoModelForNextSentencePrediction"),c(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d5,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(uQ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(TQ,"href","/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(MQ,"href","/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(EQ,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(CQ,"href","/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(wQ,"href","/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.AutoModelForTokenClassification"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(AQ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertForTokenClassification"),c($Q,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForTokenClassification"),c(kQ,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(SQ,"href","/docs/transformers/pr_18450/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(RQ,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(PQ,"href","/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineForTokenClassification"),c(BQ,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(IQ,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(NQ,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(qQ,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(jQ,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(DQ,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(GQ,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(OQ,"href","/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(VQ,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(XQ,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(zQ,"href","/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(WQ,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(QQ,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(UQ,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(HQ,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(JQ,"href","/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeForTokenClassification"),c(YQ,"href","/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(KQ,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(ZQ,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(eU,"href","/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(oU,"href","/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(rU,"href","/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(tU,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(aU,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(nU,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(sU,"href","/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(lU,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(iU,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(dU,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(cU,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(fU,"href","/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.AutoModelForQuestionAnswering"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(mU,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gU,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hU,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pU,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_18450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_18450/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(xU,"href","/docs/transformers/pr_18450/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c($U,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_18450/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_18450/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_18450/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_18450/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_18450/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_18450/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_18450/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_18450/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_18450/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_18450/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_18450/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_18450/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_18450/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(eH,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(tH,"href","/docs/transformers/pr_18450/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z0,"id","transformers.AutoModelForTableQuestionAnswering"),c(Z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z0,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(aH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aF,"id","transformers.AutoModelForImageClassification"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(iH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitForImageClassification"),c(mH,"href","/docs/transformers/pr_18450/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(gH,"href","/docs/transformers/pr_18450/en/model_doc/cvt#transformers.CvtForImageClassification"),c(hH,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(pH,"href","/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTForImageClassification"),c(_H,"href","/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(uH,"href","/docs/transformers/pr_18450/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(bH,"href","/docs/transformers/pr_18450/en/model_doc/levit#transformers.LevitForImageClassification"),c(vH,"href","/docs/transformers/pr_18450/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(FH,"href","/docs/transformers/pr_18450/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(TH,"href","/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(MH,"href","/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(EH,"href","/docs/transformers/pr_18450/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(CH,"href","/docs/transformers/pr_18450/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(wH,"href","/docs/transformers/pr_18450/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(AH,"href","/docs/transformers/pr_18450/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(LH,"href","/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(yH,"href","/docs/transformers/pr_18450/en/model_doc/swin#transformers.SwinForImageClassification"),c(xH,"href","/docs/transformers/pr_18450/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c($H,"href","/docs/transformers/pr_18450/en/model_doc/van#transformers.VanForImageClassification"),c(kH,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForVideoClassification"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(SH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/pr_18450/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForVision2Seq"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(IH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_18450/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForVisualQuestionAnswering"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(DH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/pr_18450/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NF,"id","transformers.AutoModelForAudioClassification"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(XH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(UH,"href","/docs/transformers/pr_18450/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(HH,"href","/docs/transformers/pr_18450/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(JH,"href","/docs/transformers/pr_18450/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(YH,"href","/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(KH,"href","/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForAudioFrameClassification"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(rJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nJ,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(sJ,"href","/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(lJ,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(iJ,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(dJ,"href","/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForCTC"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(cJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(hJ,"href","/docs/transformers/pr_18450/en/model_doc/hubert#transformers.HubertForCTC"),c(pJ,"href","/docs/transformers/pr_18450/en/model_doc/mctct#transformers.MCTCTForCTC"),c(_J,"href","/docs/transformers/pr_18450/en/model_doc/sew#transformers.SEWForCTC"),c(uJ,"href","/docs/transformers/pr_18450/en/model_doc/sew-d#transformers.SEWDForCTC"),c(bJ,"href","/docs/transformers/pr_18450/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(vJ,"href","/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(FJ,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(TJ,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(MJ,"href","/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMForCTC"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(EJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/pr_18450/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(LJ,"href","/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.AutoModelForAudioXVector"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c(yJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(SJ,"href","/docs/transformers/pr_18450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(RJ,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(PJ,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(BJ,"href","/docs/transformers/pr_18450/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForMaskedImageModeling"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(IJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jJ,"href","/docs/transformers/pr_18450/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(DJ,"href","/docs/transformers/pr_18450/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(GJ,"href","/docs/transformers/pr_18450/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(OJ,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForObjectDetection"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForObjectDetection"),c(fc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_18450/en/model_doc/detr#transformers.DetrForObjectDetection"),c(QJ,"href","/docs/transformers/pr_18450/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.AutoModelForImageSegmentation"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/pr_18450/en/model_doc/detr#transformers.DetrForSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.AutoModelForSemanticSegmentation"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForSemanticSegmentation"),c(uc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_18450/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(rY,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(tY,"href","/docs/transformers/pr_18450/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(aY,"href","/docs/transformers/pr_18450/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(nY,"href","/docs/transformers/pr_18450/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i8,"id","transformers.AutoModelForInstanceSegmentation"),c(i8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i8,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(sY,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/pr_18450/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g8,"id","transformers.TFAutoModel"),c(g8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g8,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(cY,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertModel"),c(hY,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.TFBartModel"),c(pY,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertModel"),c(_Y,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(uY,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(bY,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertModel"),c(vY,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.TFCLIPModel"),c(FY,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.TFConvBertModel"),c(TY,"href","/docs/transformers/pr_18450/en/model_doc/convnext#transformers.TFConvNextModel"),c(MY,"href","/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.TFCTRLModel"),c(EY,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(CY,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.TFDebertaModel"),c(wY,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(AY,"href","/docs/transformers/pr_18450/en/model_doc/deit#transformers.TFDeiTModel"),c(LY,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(yY,"href","/docs/transformers/pr_18450/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(xY,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraModel"),c($Y,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(kY,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelModel"),c(SY,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(RY,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.TFGPT2Model"),c(PY,"href","/docs/transformers/pr_18450/en/model_doc/gptj#transformers.TFGPTJModel"),c(BY,"href","/docs/transformers/pr_18450/en/model_doc/hubert#transformers.TFHubertModel"),c(IY,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(NY,"href","/docs/transformers/pr_18450/en/model_doc/led#transformers.TFLEDModel"),c(qY,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.TFLongformerModel"),c(jY,"href","/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.TFLxmertModel"),c(DY,"href","/docs/transformers/pr_18450/en/model_doc/marian#transformers.TFMarianModel"),c(GY,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.TFMBartModel"),c(OY,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(VY,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetModel"),c(XY,"href","/docs/transformers/pr_18450/en/model_doc/mt5#transformers.TFMT5Model"),c(zY,"href","/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(WY,"href","/docs/transformers/pr_18450/en/model_doc/opt#transformers.TFOPTModel"),c(QY,"href","/docs/transformers/pr_18450/en/model_doc/owlvit#transformers.TFOwlViTModel"),c(UY,"href","/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.TFPegasusModel"),c(HY,"href","/docs/transformers/pr_18450/en/model_doc/regnet#transformers.TFRegNetModel"),c(JY,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertModel"),c(YY,"href","/docs/transformers/pr_18450/en/model_doc/resnet#transformers.TFResNetModel"),c(KY,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaModel"),c(ZY,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerModel"),c(eK,"href","/docs/transformers/pr_18450/en/model_doc/segformer#transformers.TFSegformerModel"),c(oK,"href","/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(rK,"href","/docs/transformers/pr_18450/en/model_doc/swin#transformers.TFSwinModel"),c(tK,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.TFT5Model"),c(aK,"href","/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TFTapasModel"),c(nK,"href","/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(sK,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.TFViTModel"),c(lK,"href","/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(iK,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(dK,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMModel"),c(cK,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(fK,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModelForPreTraining"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(mK,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(_K,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(uK,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForPreTraining"),c(bK,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(vK,"href","/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(FK,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(TK,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(MK,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(EK,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(CK,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(wK,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(AK,"href","/docs/transformers/pr_18450/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(LK,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(yK,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(xK,"href","/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c($K,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(kK,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(SK,"href","/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(RK,"href","/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(PK,"href","/docs/transformers/pr_18450/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(BK,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(IK,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(NK,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForCausalLM"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(qK,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(OK,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(VK,"href","/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(XK,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(zK,"href","/docs/transformers/pr_18450/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(WK,"href","/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(QK,"href","/docs/transformers/pr_18450/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(UK,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(HK,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(JK,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(YK,"href","/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(KK,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZK,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForImageClassification"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(eZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/pr_18450/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(aZ,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(nZ,"href","/docs/transformers/pr_18450/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(sZ,"href","/docs/transformers/pr_18450/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(lZ,"href","/docs/transformers/pr_18450/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(iZ,"href","/docs/transformers/pr_18450/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(dZ,"href","/docs/transformers/pr_18450/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(cZ,"href","/docs/transformers/pr_18450/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(fZ,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForSemanticSegmentation"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c(mZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pZ,"href","/docs/transformers/pr_18450/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(_Z,"href","/docs/transformers/pr_18450/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_E,"id","transformers.TFAutoModelForMaskedLM"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.TFAutoModelForMaskedLM"),c(qc,"class","relative group"),c(uZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FZ,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(TZ,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(MZ,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(EZ,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(CZ,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(wZ,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(AZ,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(LZ,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(yZ,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(xZ,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c($Z,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kZ,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(SZ,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(RZ,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(PZ,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(BZ,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(IZ,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(NZ,"href","/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(qZ,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jZ,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(DZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(zZ,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_18450/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(QZ,"href","/docs/transformers/pr_18450/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_18450/en/model_doc/marian#transformers.TFMarianMTModel"),c(HZ,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_18450/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(YZ,"href","/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(KZ,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.TFAutoModelForSequenceClassification"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(ZZ,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(tee,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(aee,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(nee,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(see,"href","/docs/transformers/pr_18450/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(lee,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(iee,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(dee,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(cee,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(fee,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(mee,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(gee,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(hee,"href","/docs/transformers/pr_18450/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(pee,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(uee,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(bee,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(vee,"href","/docs/transformers/pr_18450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Fee,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Tee,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Mee,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Eee,"href","/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Cee,"href","/docs/transformers/pr_18450/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(wee,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Aee,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Lee,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.TFAutoModelForMultipleChoice"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Qc,"class","relative group"),c(yee,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xee,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($ee,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kee,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(See,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Ree,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(qee,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(jee,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(zee,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Wee,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Qee,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Jc,"class","relative group"),c(Uee,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jee,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yee,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Kee,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Zc,"class","relative group"),c(Zee,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eoe,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ooe,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(roe,"href","/docs/transformers/pr_18450/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r3,"id","transformers.TFAutoModelForTokenClassification"),c(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r3,"href","#transformers.TFAutoModelForTokenClassification"),c(rf,"class","relative group"),c(toe,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aoe,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(noe,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(soe,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(loe,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(ioe,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(doe,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(coe,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(foe,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(moe,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(goe,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(hoe,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(poe,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(_oe,"href","/docs/transformers/pr_18450/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(uoe,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(boe,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(voe,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Foe,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Toe,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Moe,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Eoe,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Coe,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(woe,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.TFAutoModelForQuestionAnswering"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(Aoe,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Loe,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yoe,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xoe,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c($oe,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(koe,"href","/docs/transformers/pr_18450/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Soe,"href","/docs/transformers/pr_18450/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Roe,"href","/docs/transformers/pr_18450/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_18450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_18450/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(qoe,"href","/docs/transformers/pr_18450/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_18450/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_18450/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_18450/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_18450/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_18450/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_18450/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Qoe,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_18450/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.TFAutoModelForVision2Seq"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.TFAutoModelForVision2Seq"),c(df,"class","relative group"),c(Hoe,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Joe,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yoe,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Koe,"href","/docs/transformers/pr_18450/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(K3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(mf,"class","relative group"),c(Zoe,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ere,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ore,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rre,"href","/docs/transformers/pr_18450/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModel"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModel"),c(pf,"class","relative group"),c(tre,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(are,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nre,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sre,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertModel"),c(lre,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartModel"),c(ire,"href","/docs/transformers/pr_18450/en/model_doc/beit#transformers.FlaxBeitModel"),c(dre,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertModel"),c(cre,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(fre,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(mre,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(gre,"href","/docs/transformers/pr_18450/en/model_doc/clip#transformers.FlaxCLIPModel"),c(hre,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(pre,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraModel"),c(_re,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(ure,"href","/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(bre,"href","/docs/transformers/pr_18450/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(vre,"href","/docs/transformers/pr_18450/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Fre,"href","/docs/transformers/pr_18450/en/model_doc/marian#transformers.FlaxMarianModel"),c(Tre,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Mre,"href","/docs/transformers/pr_18450/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Ere,"href","/docs/transformers/pr_18450/en/model_doc/opt#transformers.FlaxOPTModel"),c(Cre,"href","/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(wre,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Are,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Lre,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.FlaxT5Model"),c(yre,"href","/docs/transformers/pr_18450/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(xre,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.FlaxViTModel"),c($re,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(kre,"href","/docs/transformers/pr_18450/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Sre,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sw,"id","transformers.FlaxAutoModelForCausalLM"),c(Sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sw,"href","#transformers.FlaxAutoModelForCausalLM"),c(bf,"class","relative group"),c(Rre,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pre,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bre,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ire,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Nre,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(qre,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(jre,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Dre,"href","/docs/transformers/pr_18450/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Gre,"href","/docs/transformers/pr_18450/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Ore,"href","/docs/transformers/pr_18450/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Vre,"href","/docs/transformers/pr_18450/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Xre,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(zre,"href","/docs/transformers/pr_18450/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zw,"id","transformers.FlaxAutoModelForPreTraining"),c(zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Tf,"class","relative group"),c(Wre,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qre,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ure,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hre,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Jre,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Yre,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Kre,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Zre,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ete,"href","/docs/transformers/pr_18450/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(ote,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rte,"href","/docs/transformers/pr_18450/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(tte,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ate,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(nte,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ste,"href","/docs/transformers/pr_18450/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(lte,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l6,"id","transformers.FlaxAutoModelForMaskedLM"),c(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l6,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Cf,"class","relative group"),c(ite,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dte,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cte,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fte,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(mte,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gte,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(hte,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(pte,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(_te,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(ute,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bte,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(vte,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Fte,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F6,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F6,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lf,"class","relative group"),c(Tte,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mte,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ete,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cte,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(wte,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Ate,"href","/docs/transformers/pr_18450/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Lte,"href","/docs/transformers/pr_18450/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(yte,"href","/docs/transformers/pr_18450/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(xte,"href","/docs/transformers/pr_18450/en/model_doc/marian#transformers.FlaxMarianMTModel"),c($te,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(kte,"href","/docs/transformers/pr_18450/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Ste,"href","/docs/transformers/pr_18450/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Rte,"href","/docs/transformers/pr_18450/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R6,"id","transformers.FlaxAutoModelForSequenceClassification"),c(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R6,"href","#transformers.FlaxAutoModelForSequenceClassification"),c($f,"class","relative group"),c(Pte,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bte,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ite,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nte,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(qte,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(jte,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Dte,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Gte,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Ote,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Vte,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Xte,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(zte,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Wte,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W6,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(W6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W6,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Rf,"class","relative group"),c(Qte,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ute,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hte,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jte,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Yte,"href","/docs/transformers/pr_18450/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Kte,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Zte,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(eae,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(oae,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(rae,"href","/docs/transformers/pr_18450/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(tae,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(aae,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(nae,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nA,"id","transformers.FlaxAutoModelForTokenClassification"),c(nA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(If,"class","relative group"),c(sae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dae,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(cae,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(fae,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(mae,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(gae,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(hae,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(pae,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(_ae,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_A,"id","transformers.FlaxAutoModelForMultipleChoice"),c(_A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_A,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(jf,"class","relative group"),c(uae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fae,"href","/docs/transformers/pr_18450/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Tae,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Mae,"href","/docs/transformers/pr_18450/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Eae,"href","/docs/transformers/pr_18450/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Cae,"href","/docs/transformers/pr_18450/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(wae,"href","/docs/transformers/pr_18450/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Aae,"href","/docs/transformers/pr_18450/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Lae,"href","/docs/transformers/pr_18450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(LA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Of,"class","relative group"),c(yae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($ae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kae,"href","/docs/transformers/pr_18450/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kA,"id","transformers.FlaxAutoModelForImageClassification"),c(kA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kA,"href","#transformers.FlaxAutoModelForImageClassification"),c(zf,"class","relative group"),c(Sae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bae,"href","/docs/transformers/pr_18450/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Iae,"href","/docs/transformers/pr_18450/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IA,"id","transformers.FlaxAutoModelForVision2Seq"),c(IA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uf,"class","relative group"),c(Nae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jae,"href","/docs/transformers/pr_18450/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dae,"href","/docs/transformers/pr_18450/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Ao),e(Ao,Oi),b(f,em,u),b(f,ft,u),e(ft,Vi),e(ft,Xi),e(Xi,cy),e(ft,om),b(f,Oe,u),b(f,Qe,u),e(Qe,zi),e(Qe,Xn),e(Xn,fy),e(Qe,zn),e(Qe,Wn),e(Wn,my),e(Qe,Wi),e(Qe,Qn),e(Qn,gy),e(Qe,Qi),b(f,rm,u),M(ja,f,u),b(f,Ue,u),b(f,Ae,u),e(Ae,aP),e(Ae,Ui),e(Ui,nP),e(Ae,sP),b(f,Lo,u),b(f,Da,u),e(Da,lP),e(Da,tm),e(tm,iP),e(Da,hKe),b(f,XQe,u),b(f,Hi,u),e(Hi,am),e(am,qse),M(hy,qse,null),e(Hi,pKe),e(Hi,jse),e(jse,_Ke),b(f,zQe,u),b(f,Un,u),e(Un,uKe),e(Un,Dse),e(Dse,bKe),e(Un,vKe),e(Un,Gse),e(Gse,FKe),e(Un,TKe),b(f,WQe,u),M(py,f,u),b(f,QQe,u),b(f,dP,u),e(dP,MKe),b(f,UQe,u),M(nm,f,u),b(f,HQe,u),b(f,Ji,u),e(Ji,sm),e(sm,Ose),M(_y,Ose,null),e(Ji,EKe),e(Ji,Vse),e(Vse,CKe),b(f,JQe,u),b(f,yo,u),M(uy,yo,null),e(yo,wKe),e(yo,by),e(by,AKe),e(by,cP),e(cP,LKe),e(by,yKe),e(yo,xKe),e(yo,vy),e(vy,$Ke),e(vy,Xse),e(Xse,kKe),e(vy,SKe),e(yo,RKe),e(yo,kr),M(Fy,kr,null),e(kr,PKe),e(kr,zse),e(zse,BKe),e(kr,IKe),e(kr,Yi),e(Yi,NKe),e(Yi,Wse),e(Wse,qKe),e(Yi,jKe),e(Yi,Qse),e(Qse,DKe),e(Yi,GKe),e(kr,OKe),e(kr,A),e(A,lm),e(lm,Use),e(Use,VKe),e(lm,XKe),e(lm,fP),e(fP,zKe),e(lm,WKe),e(A,QKe),e(A,im),e(im,Hse),e(Hse,UKe),e(im,HKe),e(im,mP),e(mP,JKe),e(im,YKe),e(A,KKe),e(A,dm),e(dm,Jse),e(Jse,ZKe),e(dm,eZe),e(dm,gP),e(gP,oZe),e(dm,rZe),e(A,tZe),e(A,cm),e(cm,Yse),e(Yse,aZe),e(cm,nZe),e(cm,hP),e(hP,sZe),e(cm,lZe),e(A,iZe),e(A,fm),e(fm,Kse),e(Kse,dZe),e(fm,cZe),e(fm,pP),e(pP,fZe),e(fm,mZe),e(A,gZe),e(A,mm),e(mm,Zse),e(Zse,hZe),e(mm,pZe),e(mm,_P),e(_P,_Ze),e(mm,uZe),e(A,bZe),e(A,gm),e(gm,ele),e(ele,vZe),e(gm,FZe),e(gm,uP),e(uP,TZe),e(gm,MZe),e(A,EZe),e(A,hm),e(hm,ole),e(ole,CZe),e(hm,wZe),e(hm,bP),e(bP,AZe),e(hm,LZe),e(A,yZe),e(A,pm),e(pm,rle),e(rle,xZe),e(pm,$Ze),e(pm,vP),e(vP,kZe),e(pm,SZe),e(A,RZe),e(A,_m),e(_m,tle),e(tle,PZe),e(_m,BZe),e(_m,FP),e(FP,IZe),e(_m,NZe),e(A,qZe),e(A,um),e(um,ale),e(ale,jZe),e(um,DZe),e(um,TP),e(TP,GZe),e(um,OZe),e(A,VZe),e(A,bm),e(bm,nle),e(nle,XZe),e(bm,zZe),e(bm,MP),e(MP,WZe),e(bm,QZe),e(A,UZe),e(A,vm),e(vm,sle),e(sle,HZe),e(vm,JZe),e(vm,EP),e(EP,YZe),e(vm,KZe),e(A,ZZe),e(A,Fm),e(Fm,lle),e(lle,eeo),e(Fm,oeo),e(Fm,CP),e(CP,reo),e(Fm,teo),e(A,aeo),e(A,Tm),e(Tm,ile),e(ile,neo),e(Tm,seo),e(Tm,wP),e(wP,leo),e(Tm,ieo),e(A,deo),e(A,Mm),e(Mm,dle),e(dle,ceo),e(Mm,feo),e(Mm,AP),e(AP,meo),e(Mm,geo),e(A,heo),e(A,Em),e(Em,cle),e(cle,peo),e(Em,_eo),e(Em,LP),e(LP,ueo),e(Em,beo),e(A,veo),e(A,Cm),e(Cm,fle),e(fle,Feo),e(Cm,Teo),e(Cm,yP),e(yP,Meo),e(Cm,Eeo),e(A,Ceo),e(A,wm),e(wm,mle),e(mle,weo),e(wm,Aeo),e(wm,xP),e(xP,Leo),e(wm,yeo),e(A,xeo),e(A,Am),e(Am,gle),e(gle,$eo),e(Am,keo),e(Am,$P),e($P,Seo),e(Am,Reo),e(A,Peo),e(A,Lm),e(Lm,hle),e(hle,Beo),e(Lm,Ieo),e(Lm,kP),e(kP,Neo),e(Lm,qeo),e(A,jeo),e(A,ym),e(ym,ple),e(ple,Deo),e(ym,Geo),e(ym,SP),e(SP,Oeo),e(ym,Veo),e(A,Xeo),e(A,xm),e(xm,_le),e(_le,zeo),e(xm,Weo),e(xm,RP),e(RP,Qeo),e(xm,Ueo),e(A,Heo),e(A,$m),e($m,ule),e(ule,Jeo),e($m,Yeo),e($m,PP),e(PP,Keo),e($m,Zeo),e(A,eoo),e(A,km),e(km,ble),e(ble,ooo),e(km,roo),e(km,BP),e(BP,too),e(km,aoo),e(A,noo),e(A,Sm),e(Sm,vle),e(vle,soo),e(Sm,loo),e(Sm,IP),e(IP,ioo),e(Sm,doo),e(A,coo),e(A,Rm),e(Rm,Fle),e(Fle,foo),e(Rm,moo),e(Rm,NP),e(NP,goo),e(Rm,hoo),e(A,poo),e(A,Pm),e(Pm,Tle),e(Tle,_oo),e(Pm,uoo),e(Pm,qP),e(qP,boo),e(Pm,voo),e(A,Foo),e(A,Bm),e(Bm,Mle),e(Mle,Too),e(Bm,Moo),e(Bm,jP),e(jP,Eoo),e(Bm,Coo),e(A,woo),e(A,Im),e(Im,Ele),e(Ele,Aoo),e(Im,Loo),e(Im,DP),e(DP,yoo),e(Im,xoo),e(A,$oo),e(A,Nm),e(Nm,Cle),e(Cle,koo),e(Nm,Soo),e(Nm,GP),e(GP,Roo),e(Nm,Poo),e(A,Boo),e(A,qm),e(qm,wle),e(wle,Ioo),e(qm,Noo),e(qm,OP),e(OP,qoo),e(qm,joo),e(A,Doo),e(A,jm),e(jm,Ale),e(Ale,Goo),e(jm,Ooo),e(jm,VP),e(VP,Voo),e(jm,Xoo),e(A,zoo),e(A,Dm),e(Dm,Lle),e(Lle,Woo),e(Dm,Qoo),e(Dm,XP),e(XP,Uoo),e(Dm,Hoo),e(A,Joo),e(A,Gm),e(Gm,yle),e(yle,Yoo),e(Gm,Koo),e(Gm,zP),e(zP,Zoo),e(Gm,ero),e(A,oro),e(A,Om),e(Om,xle),e(xle,rro),e(Om,tro),e(Om,WP),e(WP,aro),e(Om,nro),e(A,sro),e(A,Vm),e(Vm,$le),e($le,lro),e(Vm,iro),e(Vm,QP),e(QP,dro),e(Vm,cro),e(A,fro),e(A,Xm),e(Xm,kle),e(kle,mro),e(Xm,gro),e(Xm,UP),e(UP,hro),e(Xm,pro),e(A,_ro),e(A,zm),e(zm,Sle),e(Sle,uro),e(zm,bro),e(zm,HP),e(HP,vro),e(zm,Fro),e(A,Tro),e(A,Wm),e(Wm,Rle),e(Rle,Mro),e(Wm,Ero),e(Wm,JP),e(JP,Cro),e(Wm,wro),e(A,Aro),e(A,Qm),e(Qm,Ple),e(Ple,Lro),e(Qm,yro),e(Qm,YP),e(YP,xro),e(Qm,$ro),e(A,kro),e(A,Um),e(Um,Ble),e(Ble,Sro),e(Um,Rro),e(Um,KP),e(KP,Pro),e(Um,Bro),e(A,Iro),e(A,Hm),e(Hm,Ile),e(Ile,Nro),e(Hm,qro),e(Hm,ZP),e(ZP,jro),e(Hm,Dro),e(A,Gro),e(A,Jm),e(Jm,Nle),e(Nle,Oro),e(Jm,Vro),e(Jm,eB),e(eB,Xro),e(Jm,zro),e(A,Wro),e(A,Ym),e(Ym,qle),e(qle,Qro),e(Ym,Uro),e(Ym,oB),e(oB,Hro),e(Ym,Jro),e(A,Yro),e(A,Km),e(Km,jle),e(jle,Kro),e(Km,Zro),e(Km,rB),e(rB,eto),e(Km,oto),e(A,rto),e(A,Zm),e(Zm,Dle),e(Dle,tto),e(Zm,ato),e(Zm,tB),e(tB,nto),e(Zm,sto),e(A,lto),e(A,eg),e(eg,Gle),e(Gle,ito),e(eg,dto),e(eg,aB),e(aB,cto),e(eg,fto),e(A,mto),e(A,og),e(og,Ole),e(Ole,gto),e(og,hto),e(og,nB),e(nB,pto),e(og,_to),e(A,uto),e(A,rg),e(rg,Vle),e(Vle,bto),e(rg,vto),e(rg,sB),e(sB,Fto),e(rg,Tto),e(A,Mto),e(A,tg),e(tg,Xle),e(Xle,Eto),e(tg,Cto),e(tg,lB),e(lB,wto),e(tg,Ato),e(A,Lto),e(A,ag),e(ag,zle),e(zle,yto),e(ag,xto),e(ag,iB),e(iB,$to),e(ag,kto),e(A,Sto),e(A,ng),e(ng,Wle),e(Wle,Rto),e(ng,Pto),e(ng,dB),e(dB,Bto),e(ng,Ito),e(A,Nto),e(A,sg),e(sg,Qle),e(Qle,qto),e(sg,jto),e(sg,cB),e(cB,Dto),e(sg,Gto),e(A,Oto),e(A,lg),e(lg,Ule),e(Ule,Vto),e(lg,Xto),e(lg,fB),e(fB,zto),e(lg,Wto),e(A,Qto),e(A,ig),e(ig,Hle),e(Hle,Uto),e(ig,Hto),e(ig,mB),e(mB,Jto),e(ig,Yto),e(A,Kto),e(A,dg),e(dg,Jle),e(Jle,Zto),e(dg,eao),e(dg,gB),e(gB,oao),e(dg,rao),e(A,tao),e(A,cg),e(cg,Yle),e(Yle,aao),e(cg,nao),e(cg,hB),e(hB,sao),e(cg,lao),e(A,iao),e(A,fg),e(fg,Kle),e(Kle,dao),e(fg,cao),e(fg,pB),e(pB,fao),e(fg,mao),e(A,gao),e(A,mg),e(mg,Zle),e(Zle,hao),e(mg,pao),e(mg,_B),e(_B,_ao),e(mg,uao),e(A,bao),e(A,gg),e(gg,eie),e(eie,vao),e(gg,Fao),e(gg,uB),e(uB,Tao),e(gg,Mao),e(A,Eao),e(A,hg),e(hg,oie),e(oie,Cao),e(hg,wao),e(hg,bB),e(bB,Aao),e(hg,Lao),e(A,yao),e(A,pg),e(pg,rie),e(rie,xao),e(pg,$ao),e(pg,vB),e(vB,kao),e(pg,Sao),e(A,Rao),e(A,_g),e(_g,tie),e(tie,Pao),e(_g,Bao),e(_g,FB),e(FB,Iao),e(_g,Nao),e(A,qao),e(A,ug),e(ug,aie),e(aie,jao),e(ug,Dao),e(ug,TB),e(TB,Gao),e(ug,Oao),e(A,Vao),e(A,bg),e(bg,nie),e(nie,Xao),e(bg,zao),e(bg,MB),e(MB,Wao),e(bg,Qao),e(A,Uao),e(A,vg),e(vg,sie),e(sie,Hao),e(vg,Jao),e(vg,EB),e(EB,Yao),e(vg,Kao),e(A,Zao),e(A,Fg),e(Fg,lie),e(lie,eno),e(Fg,ono),e(Fg,CB),e(CB,rno),e(Fg,tno),e(A,ano),e(A,Tg),e(Tg,iie),e(iie,nno),e(Tg,sno),e(Tg,wB),e(wB,lno),e(Tg,ino),e(A,dno),e(A,Mg),e(Mg,die),e(die,cno),e(Mg,fno),e(Mg,AB),e(AB,mno),e(Mg,gno),e(A,hno),e(A,Eg),e(Eg,cie),e(cie,pno),e(Eg,_no),e(Eg,LB),e(LB,uno),e(Eg,bno),e(A,vno),e(A,Cg),e(Cg,fie),e(fie,Fno),e(Cg,Tno),e(Cg,yB),e(yB,Mno),e(Cg,Eno),e(A,Cno),e(A,wg),e(wg,mie),e(mie,wno),e(wg,Ano),e(wg,xB),e(xB,Lno),e(wg,yno),e(A,xno),e(A,Ag),e(Ag,gie),e(gie,$no),e(Ag,kno),e(Ag,$B),e($B,Sno),e(Ag,Rno),e(A,Pno),e(A,Lg),e(Lg,hie),e(hie,Bno),e(Lg,Ino),e(Lg,kB),e(kB,Nno),e(Lg,qno),e(A,jno),e(A,yg),e(yg,pie),e(pie,Dno),e(yg,Gno),e(yg,SB),e(SB,Ono),e(yg,Vno),e(A,Xno),e(A,xg),e(xg,_ie),e(_ie,zno),e(xg,Wno),e(xg,RB),e(RB,Qno),e(xg,Uno),e(A,Hno),e(A,$g),e($g,uie),e(uie,Jno),e($g,Yno),e($g,PB),e(PB,Kno),e($g,Zno),e(A,eso),e(A,kg),e(kg,bie),e(bie,oso),e(kg,rso),e(kg,BB),e(BB,tso),e(kg,aso),e(A,nso),e(A,Sg),e(Sg,vie),e(vie,sso),e(Sg,lso),e(Sg,IB),e(IB,iso),e(Sg,dso),e(A,cso),e(A,Rg),e(Rg,Fie),e(Fie,fso),e(Rg,mso),e(Rg,NB),e(NB,gso),e(Rg,hso),e(A,pso),e(A,Pg),e(Pg,Tie),e(Tie,_so),e(Pg,uso),e(Pg,qB),e(qB,bso),e(Pg,vso),e(A,Fso),e(A,Bg),e(Bg,Mie),e(Mie,Tso),e(Bg,Mso),e(Bg,jB),e(jB,Eso),e(Bg,Cso),e(A,wso),e(A,Ig),e(Ig,Eie),e(Eie,Aso),e(Ig,Lso),e(Ig,DB),e(DB,yso),e(Ig,xso),e(A,$so),e(A,Ng),e(Ng,Cie),e(Cie,kso),e(Ng,Sso),e(Ng,GB),e(GB,Rso),e(Ng,Pso),e(A,Bso),e(A,qg),e(qg,wie),e(wie,Iso),e(qg,Nso),e(qg,OB),e(OB,qso),e(qg,jso),e(A,Dso),e(A,jg),e(jg,Aie),e(Aie,Gso),e(jg,Oso),e(jg,VB),e(VB,Vso),e(jg,Xso),e(A,zso),e(A,Dg),e(Dg,Lie),e(Lie,Wso),e(Dg,Qso),e(Dg,XB),e(XB,Uso),e(Dg,Hso),e(A,Jso),e(A,Gg),e(Gg,yie),e(yie,Yso),e(Gg,Kso),e(Gg,zB),e(zB,Zso),e(Gg,elo),e(A,olo),e(A,Og),e(Og,xie),e(xie,rlo),e(Og,tlo),e(Og,WB),e(WB,alo),e(Og,nlo),e(A,slo),e(A,Vg),e(Vg,$ie),e($ie,llo),e(Vg,ilo),e(Vg,QB),e(QB,dlo),e(Vg,clo),e(A,flo),e(A,Xg),e(Xg,kie),e(kie,mlo),e(Xg,glo),e(Xg,UB),e(UB,hlo),e(Xg,plo),e(A,_lo),e(A,zg),e(zg,Sie),e(Sie,ulo),e(zg,blo),e(zg,HB),e(HB,vlo),e(zg,Flo),e(A,Tlo),e(A,Wg),e(Wg,Rie),e(Rie,Mlo),e(Wg,Elo),e(Wg,JB),e(JB,Clo),e(Wg,wlo),e(A,Alo),e(A,Qg),e(Qg,Pie),e(Pie,Llo),e(Qg,ylo),e(Qg,YB),e(YB,xlo),e(Qg,$lo),e(A,klo),e(A,Ug),e(Ug,Bie),e(Bie,Slo),e(Ug,Rlo),e(Ug,KB),e(KB,Plo),e(Ug,Blo),e(A,Ilo),e(A,Hg),e(Hg,Iie),e(Iie,Nlo),e(Hg,qlo),e(Hg,ZB),e(ZB,jlo),e(Hg,Dlo),e(A,Glo),e(A,Jg),e(Jg,Nie),e(Nie,Olo),e(Jg,Vlo),e(Jg,eI),e(eI,Xlo),e(Jg,zlo),e(A,Wlo),e(A,Yg),e(Yg,qie),e(qie,Qlo),e(Yg,Ulo),e(Yg,oI),e(oI,Hlo),e(Yg,Jlo),e(A,Ylo),e(A,Kg),e(Kg,jie),e(jie,Klo),e(Kg,Zlo),e(Kg,rI),e(rI,eio),e(Kg,oio),e(A,rio),e(A,Zg),e(Zg,Die),e(Die,tio),e(Zg,aio),e(Zg,tI),e(tI,nio),e(Zg,sio),e(A,lio),e(A,eh),e(eh,Gie),e(Gie,iio),e(eh,dio),e(eh,aI),e(aI,cio),e(eh,fio),e(A,mio),e(A,oh),e(oh,Oie),e(Oie,gio),e(oh,hio),e(oh,nI),e(nI,pio),e(oh,_io),e(A,uio),e(A,rh),e(rh,Vie),e(Vie,bio),e(rh,vio),e(rh,sI),e(sI,Fio),e(rh,Tio),e(A,Mio),e(A,th),e(th,Xie),e(Xie,Eio),e(th,Cio),e(th,lI),e(lI,wio),e(th,Aio),e(A,Lio),e(A,ah),e(ah,zie),e(zie,yio),e(ah,xio),e(ah,iI),e(iI,$io),e(ah,kio),e(A,Sio),e(A,nh),e(nh,Wie),e(Wie,Rio),e(nh,Pio),e(nh,dI),e(dI,Bio),e(nh,Iio),e(A,Nio),e(A,sh),e(sh,Qie),e(Qie,qio),e(sh,jio),e(sh,cI),e(cI,Dio),e(sh,Gio),e(A,Oio),e(A,lh),e(lh,Uie),e(Uie,Vio),e(lh,Xio),e(lh,fI),e(fI,zio),e(lh,Wio),e(A,Qio),e(A,ih),e(ih,Hie),e(Hie,Uio),e(ih,Hio),e(ih,mI),e(mI,Jio),e(ih,Yio),e(A,Kio),e(A,dh),e(dh,Jie),e(Jie,Zio),e(dh,edo),e(dh,gI),e(gI,odo),e(dh,rdo),e(A,tdo),e(A,ch),e(ch,Yie),e(Yie,ado),e(ch,ndo),e(ch,hI),e(hI,sdo),e(ch,ldo),e(A,ido),e(A,fh),e(fh,Kie),e(Kie,ddo),e(fh,cdo),e(fh,pI),e(pI,fdo),e(fh,mdo),e(A,gdo),e(A,mh),e(mh,Zie),e(Zie,hdo),e(mh,pdo),e(mh,_I),e(_I,_do),e(mh,udo),e(A,bdo),e(A,gh),e(gh,ede),e(ede,vdo),e(gh,Fdo),e(gh,uI),e(uI,Tdo),e(gh,Mdo),e(A,Edo),e(A,hh),e(hh,ode),e(ode,Cdo),e(hh,wdo),e(hh,bI),e(bI,Ado),e(hh,Ldo),e(A,ydo),e(A,ph),e(ph,rde),e(rde,xdo),e(ph,$do),e(ph,vI),e(vI,kdo),e(ph,Sdo),e(A,Rdo),e(A,_h),e(_h,tde),e(tde,Pdo),e(_h,Bdo),e(_h,FI),e(FI,Ido),e(_h,Ndo),e(A,qdo),e(A,uh),e(uh,ade),e(ade,jdo),e(uh,Ddo),e(uh,TI),e(TI,Gdo),e(uh,Odo),e(A,Vdo),e(A,bh),e(bh,nde),e(nde,Xdo),e(bh,zdo),e(bh,MI),e(MI,Wdo),e(bh,Qdo),e(A,Udo),e(A,vh),e(vh,sde),e(sde,Hdo),e(vh,Jdo),e(vh,EI),e(EI,Ydo),e(vh,Kdo),e(A,Zdo),e(A,Fh),e(Fh,lde),e(lde,eco),e(Fh,oco),e(Fh,CI),e(CI,rco),e(Fh,tco),e(kr,aco),M(Th,kr,null),e(yo,nco),e(yo,Mh),M(Ty,Mh,null),e(Mh,sco),e(Mh,ide),e(ide,lco),b(f,YQe,u),b(f,Ki,u),e(Ki,Eh),e(Eh,dde),M(My,dde,null),e(Ki,ico),e(Ki,cde),e(cde,dco),b(f,KQe,u),b(f,xo,u),M(Ey,xo,null),e(xo,cco),e(xo,Cy),e(Cy,fco),e(Cy,wI),e(wI,mco),e(Cy,gco),e(xo,hco),e(xo,wy),e(wy,pco),e(wy,fde),e(fde,_co),e(wy,uco),e(xo,bco),e(xo,Sr),M(Ay,Sr,null),e(Sr,vco),e(Sr,mde),e(mde,Fco),e(Sr,Tco),e(Sr,Ga),e(Ga,Mco),e(Ga,gde),e(gde,Eco),e(Ga,Cco),e(Ga,hde),e(hde,wco),e(Ga,Aco),e(Ga,pde),e(pde,Lco),e(Ga,yco),e(Sr,xco),e(Sr,k),e(k,Hn),e(Hn,_de),e(_de,$co),e(Hn,kco),e(Hn,AI),e(AI,Sco),e(Hn,Rco),e(Hn,LI),e(LI,Pco),e(Hn,Bco),e(k,Ico),e(k,Jn),e(Jn,ude),e(ude,Nco),e(Jn,qco),e(Jn,yI),e(yI,jco),e(Jn,Dco),e(Jn,xI),e(xI,Gco),e(Jn,Oco),e(k,Vco),e(k,Yn),e(Yn,bde),e(bde,Xco),e(Yn,zco),e(Yn,$I),e($I,Wco),e(Yn,Qco),e(Yn,kI),e(kI,Uco),e(Yn,Hco),e(k,Jco),e(k,Ch),e(Ch,vde),e(vde,Yco),e(Ch,Kco),e(Ch,SI),e(SI,Zco),e(Ch,efo),e(k,ofo),e(k,Kn),e(Kn,Fde),e(Fde,rfo),e(Kn,tfo),e(Kn,RI),e(RI,afo),e(Kn,nfo),e(Kn,PI),e(PI,sfo),e(Kn,lfo),e(k,ifo),e(k,wh),e(wh,Tde),e(Tde,dfo),e(wh,cfo),e(wh,BI),e(BI,ffo),e(wh,mfo),e(k,gfo),e(k,Ah),e(Ah,Mde),e(Mde,hfo),e(Ah,pfo),e(Ah,II),e(II,_fo),e(Ah,ufo),e(k,bfo),e(k,Lh),e(Lh,Ede),e(Ede,vfo),e(Lh,Ffo),e(Lh,NI),e(NI,Tfo),e(Lh,Mfo),e(k,Efo),e(k,Zn),e(Zn,Cde),e(Cde,Cfo),e(Zn,wfo),e(Zn,qI),e(qI,Afo),e(Zn,Lfo),e(Zn,jI),e(jI,yfo),e(Zn,xfo),e(k,$fo),e(k,es),e(es,wde),e(wde,kfo),e(es,Sfo),e(es,DI),e(DI,Rfo),e(es,Pfo),e(es,GI),e(GI,Bfo),e(es,Ifo),e(k,Nfo),e(k,os),e(os,Ade),e(Ade,qfo),e(os,jfo),e(os,OI),e(OI,Dfo),e(os,Gfo),e(os,VI),e(VI,Ofo),e(os,Vfo),e(k,Xfo),e(k,yh),e(yh,Lde),e(Lde,zfo),e(yh,Wfo),e(yh,XI),e(XI,Qfo),e(yh,Ufo),e(k,Hfo),e(k,xh),e(xh,yde),e(yde,Jfo),e(xh,Yfo),e(xh,zI),e(zI,Kfo),e(xh,Zfo),e(k,emo),e(k,$h),e($h,xde),e(xde,omo),e($h,rmo),e($h,WI),e(WI,tmo),e($h,amo),e(k,nmo),e(k,rs),e(rs,$de),e($de,smo),e(rs,lmo),e(rs,QI),e(QI,imo),e(rs,dmo),e(rs,UI),e(UI,cmo),e(rs,fmo),e(k,mmo),e(k,kh),e(kh,kde),e(kde,gmo),e(kh,hmo),e(kh,HI),e(HI,pmo),e(kh,_mo),e(k,umo),e(k,ts),e(ts,Sde),e(Sde,bmo),e(ts,vmo),e(ts,JI),e(JI,Fmo),e(ts,Tmo),e(ts,YI),e(YI,Mmo),e(ts,Emo),e(k,Cmo),e(k,as),e(as,Rde),e(Rde,wmo),e(as,Amo),e(as,KI),e(KI,Lmo),e(as,ymo),e(as,ZI),e(ZI,xmo),e(as,$mo),e(k,kmo),e(k,ns),e(ns,Pde),e(Pde,Smo),e(ns,Rmo),e(ns,eN),e(eN,Pmo),e(ns,Bmo),e(ns,oN),e(oN,Imo),e(ns,Nmo),e(k,qmo),e(k,ss),e(ss,Bde),e(Bde,jmo),e(ss,Dmo),e(ss,rN),e(rN,Gmo),e(ss,Omo),e(ss,tN),e(tN,Vmo),e(ss,Xmo),e(k,zmo),e(k,Sh),e(Sh,Ide),e(Ide,Wmo),e(Sh,Qmo),e(Sh,aN),e(aN,Umo),e(Sh,Hmo),e(k,Jmo),e(k,ls),e(ls,Nde),e(Nde,Ymo),e(ls,Kmo),e(ls,nN),e(nN,Zmo),e(ls,ego),e(ls,sN),e(sN,ogo),e(ls,rgo),e(k,tgo),e(k,is),e(is,qde),e(qde,ago),e(is,ngo),e(is,lN),e(lN,sgo),e(is,lgo),e(is,iN),e(iN,igo),e(is,dgo),e(k,cgo),e(k,ds),e(ds,jde),e(jde,fgo),e(ds,mgo),e(ds,dN),e(dN,ggo),e(ds,hgo),e(ds,cN),e(cN,pgo),e(ds,_go),e(k,ugo),e(k,cs),e(cs,Dde),e(Dde,bgo),e(cs,vgo),e(cs,fN),e(fN,Fgo),e(cs,Tgo),e(cs,mN),e(mN,Mgo),e(cs,Ego),e(k,Cgo),e(k,fs),e(fs,Gde),e(Gde,wgo),e(fs,Ago),e(fs,gN),e(gN,Lgo),e(fs,ygo),e(fs,hN),e(hN,xgo),e(fs,$go),e(k,kgo),e(k,ms),e(ms,Ode),e(Ode,Sgo),e(ms,Rgo),e(ms,pN),e(pN,Pgo),e(ms,Bgo),e(ms,_N),e(_N,Igo),e(ms,Ngo),e(k,qgo),e(k,Rh),e(Rh,Vde),e(Vde,jgo),e(Rh,Dgo),e(Rh,uN),e(uN,Ggo),e(Rh,Ogo),e(k,Vgo),e(k,gs),e(gs,Xde),e(Xde,Xgo),e(gs,zgo),e(gs,bN),e(bN,Wgo),e(gs,Qgo),e(gs,vN),e(vN,Ugo),e(gs,Hgo),e(k,Jgo),e(k,Ph),e(Ph,zde),e(zde,Ygo),e(Ph,Kgo),e(Ph,FN),e(FN,Zgo),e(Ph,eho),e(k,oho),e(k,hs),e(hs,Wde),e(Wde,rho),e(hs,tho),e(hs,TN),e(TN,aho),e(hs,nho),e(hs,MN),e(MN,sho),e(hs,lho),e(k,iho),e(k,ps),e(ps,Qde),e(Qde,dho),e(ps,cho),e(ps,EN),e(EN,fho),e(ps,mho),e(ps,CN),e(CN,gho),e(ps,hho),e(k,pho),e(k,_s),e(_s,Ude),e(Ude,_ho),e(_s,uho),e(_s,wN),e(wN,bho),e(_s,vho),e(_s,AN),e(AN,Fho),e(_s,Tho),e(k,Mho),e(k,Bh),e(Bh,Hde),e(Hde,Eho),e(Bh,Cho),e(Bh,LN),e(LN,who),e(Bh,Aho),e(k,Lho),e(k,us),e(us,Jde),e(Jde,yho),e(us,xho),e(us,yN),e(yN,$ho),e(us,kho),e(us,xN),e(xN,Sho),e(us,Rho),e(k,Pho),e(k,bs),e(bs,Yde),e(Yde,Bho),e(bs,Iho),e(bs,$N),e($N,Nho),e(bs,qho),e(bs,kN),e(kN,jho),e(bs,Dho),e(k,Gho),e(k,vs),e(vs,Kde),e(Kde,Oho),e(vs,Vho),e(vs,SN),e(SN,Xho),e(vs,zho),e(vs,RN),e(RN,Who),e(vs,Qho),e(k,Uho),e(k,Ih),e(Ih,Zde),e(Zde,Hho),e(Ih,Jho),e(Ih,PN),e(PN,Yho),e(Ih,Kho),e(k,Zho),e(k,Fs),e(Fs,ece),e(ece,epo),e(Fs,opo),e(Fs,BN),e(BN,rpo),e(Fs,tpo),e(Fs,IN),e(IN,apo),e(Fs,npo),e(k,spo),e(k,Ts),e(Ts,oce),e(oce,lpo),e(Ts,ipo),e(Ts,NN),e(NN,dpo),e(Ts,cpo),e(Ts,qN),e(qN,fpo),e(Ts,mpo),e(k,gpo),e(k,Ms),e(Ms,rce),e(rce,hpo),e(Ms,ppo),e(Ms,jN),e(jN,_po),e(Ms,upo),e(Ms,DN),e(DN,bpo),e(Ms,vpo),e(k,Fpo),e(k,Es),e(Es,tce),e(tce,Tpo),e(Es,Mpo),e(Es,GN),e(GN,Epo),e(Es,Cpo),e(Es,ON),e(ON,wpo),e(Es,Apo),e(k,Lpo),e(k,Cs),e(Cs,ace),e(ace,ypo),e(Cs,xpo),e(Cs,VN),e(VN,$po),e(Cs,kpo),e(Cs,XN),e(XN,Spo),e(Cs,Rpo),e(k,Ppo),e(k,ws),e(ws,nce),e(nce,Bpo),e(ws,Ipo),e(ws,zN),e(zN,Npo),e(ws,qpo),e(ws,WN),e(WN,jpo),e(ws,Dpo),e(k,Gpo),e(k,As),e(As,sce),e(sce,Opo),e(As,Vpo),e(As,QN),e(QN,Xpo),e(As,zpo),e(As,UN),e(UN,Wpo),e(As,Qpo),e(k,Upo),e(k,Ls),e(Ls,lce),e(lce,Hpo),e(Ls,Jpo),e(Ls,HN),e(HN,Ypo),e(Ls,Kpo),e(Ls,JN),e(JN,Zpo),e(Ls,e_o),e(k,o_o),e(k,Nh),e(Nh,ice),e(ice,r_o),e(Nh,t_o),e(Nh,YN),e(YN,a_o),e(Nh,n_o),e(k,s_o),e(k,ys),e(ys,dce),e(dce,l_o),e(ys,i_o),e(ys,KN),e(KN,d_o),e(ys,c_o),e(ys,ZN),e(ZN,f_o),e(ys,m_o),e(k,g_o),e(k,qh),e(qh,cce),e(cce,h_o),e(qh,p_o),e(qh,eq),e(eq,__o),e(qh,u_o),e(k,b_o),e(k,jh),e(jh,fce),e(fce,v_o),e(jh,F_o),e(jh,oq),e(oq,T_o),e(jh,M_o),e(k,E_o),e(k,xs),e(xs,mce),e(mce,C_o),e(xs,w_o),e(xs,rq),e(rq,A_o),e(xs,L_o),e(xs,tq),e(tq,y_o),e(xs,x_o),e(k,$_o),e(k,$s),e($s,gce),e(gce,k_o),e($s,S_o),e($s,aq),e(aq,R_o),e($s,P_o),e($s,nq),e(nq,B_o),e($s,I_o),e(k,N_o),e(k,ks),e(ks,hce),e(hce,q_o),e(ks,j_o),e(ks,sq),e(sq,D_o),e(ks,G_o),e(ks,lq),e(lq,O_o),e(ks,V_o),e(k,X_o),e(k,Dh),e(Dh,pce),e(pce,z_o),e(Dh,W_o),e(Dh,iq),e(iq,Q_o),e(Dh,U_o),e(k,H_o),e(k,Ss),e(Ss,_ce),e(_ce,J_o),e(Ss,Y_o),e(Ss,dq),e(dq,K_o),e(Ss,Z_o),e(Ss,cq),e(cq,euo),e(Ss,ouo),e(k,ruo),e(k,Rs),e(Rs,uce),e(uce,tuo),e(Rs,auo),e(Rs,fq),e(fq,nuo),e(Rs,suo),e(Rs,mq),e(mq,luo),e(Rs,iuo),e(k,duo),e(k,Ps),e(Ps,bce),e(bce,cuo),e(Ps,fuo),e(Ps,gq),e(gq,muo),e(Ps,guo),e(Ps,hq),e(hq,huo),e(Ps,puo),e(k,_uo),e(k,Bs),e(Bs,vce),e(vce,uuo),e(Bs,buo),e(Bs,pq),e(pq,vuo),e(Bs,Fuo),e(Bs,_q),e(_q,Tuo),e(Bs,Muo),e(k,Euo),e(k,Is),e(Is,Fce),e(Fce,Cuo),e(Is,wuo),e(Is,uq),e(uq,Auo),e(Is,Luo),e(Is,bq),e(bq,yuo),e(Is,xuo),e(k,$uo),e(k,Ns),e(Ns,Tce),e(Tce,kuo),e(Ns,Suo),e(Ns,vq),e(vq,Ruo),e(Ns,Puo),e(Ns,Fq),e(Fq,Buo),e(Ns,Iuo),e(k,Nuo),e(k,qs),e(qs,Mce),e(Mce,quo),e(qs,juo),e(qs,Tq),e(Tq,Duo),e(qs,Guo),e(qs,Mq),e(Mq,Ouo),e(qs,Vuo),e(k,Xuo),e(k,js),e(js,Ece),e(Ece,zuo),e(js,Wuo),e(js,Eq),e(Eq,Quo),e(js,Uuo),e(js,Cq),e(Cq,Huo),e(js,Juo),e(k,Yuo),e(k,Gh),e(Gh,Cce),e(Cce,Kuo),e(Gh,Zuo),e(Gh,wq),e(wq,e1o),e(Gh,o1o),e(k,r1o),e(k,Ds),e(Ds,wce),e(wce,t1o),e(Ds,a1o),e(Ds,Aq),e(Aq,n1o),e(Ds,s1o),e(Ds,Lq),e(Lq,l1o),e(Ds,i1o),e(k,d1o),e(k,Gs),e(Gs,Ace),e(Ace,c1o),e(Gs,f1o),e(Gs,yq),e(yq,m1o),e(Gs,g1o),e(Gs,xq),e(xq,h1o),e(Gs,p1o),e(k,_1o),e(k,Oh),e(Oh,Lce),e(Lce,u1o),e(Oh,b1o),e(Oh,$q),e($q,v1o),e(Oh,F1o),e(k,T1o),e(k,Vh),e(Vh,yce),e(yce,M1o),e(Vh,E1o),e(Vh,kq),e(kq,C1o),e(Vh,w1o),e(k,A1o),e(k,Xh),e(Xh,xce),e(xce,L1o),e(Xh,y1o),e(Xh,Sq),e(Sq,x1o),e(Xh,$1o),e(k,k1o),e(k,zh),e(zh,$ce),e($ce,S1o),e(zh,R1o),e(zh,Rq),e(Rq,P1o),e(zh,B1o),e(k,I1o),e(k,Os),e(Os,kce),e(kce,N1o),e(Os,q1o),e(Os,Pq),e(Pq,j1o),e(Os,D1o),e(Os,Bq),e(Bq,G1o),e(Os,O1o),e(k,V1o),e(k,Wh),e(Wh,Sce),e(Sce,X1o),e(Wh,z1o),e(Wh,Iq),e(Iq,W1o),e(Wh,Q1o),e(k,U1o),e(k,Vs),e(Vs,Rce),e(Rce,H1o),e(Vs,J1o),e(Vs,Nq),e(Nq,Y1o),e(Vs,K1o),e(Vs,qq),e(qq,Z1o),e(Vs,e4o),e(k,o4o),e(k,Xs),e(Xs,Pce),e(Pce,r4o),e(Xs,t4o),e(Xs,jq),e(jq,a4o),e(Xs,n4o),e(Xs,Dq),e(Dq,s4o),e(Xs,l4o),e(k,i4o),e(k,zs),e(zs,Bce),e(Bce,d4o),e(zs,c4o),e(zs,Gq),e(Gq,f4o),e(zs,m4o),e(zs,Oq),e(Oq,g4o),e(zs,h4o),e(k,p4o),e(k,Ws),e(Ws,Ice),e(Ice,_4o),e(Ws,u4o),e(Ws,Vq),e(Vq,b4o),e(Ws,v4o),e(Ws,Xq),e(Xq,F4o),e(Ws,T4o),e(k,M4o),e(k,Qs),e(Qs,Nce),e(Nce,E4o),e(Qs,C4o),e(Qs,zq),e(zq,w4o),e(Qs,A4o),e(Qs,Wq),e(Wq,L4o),e(Qs,y4o),e(k,x4o),e(k,Us),e(Us,qce),e(qce,$4o),e(Us,k4o),e(Us,Qq),e(Qq,S4o),e(Us,R4o),e(Us,Uq),e(Uq,P4o),e(Us,B4o),e(k,I4o),e(k,Qh),e(Qh,jce),e(jce,N4o),e(Qh,q4o),e(Qh,Hq),e(Hq,j4o),e(Qh,D4o),e(k,G4o),e(k,Uh),e(Uh,Dce),e(Dce,O4o),e(Uh,V4o),e(Uh,Jq),e(Jq,X4o),e(Uh,z4o),e(k,W4o),e(k,Hs),e(Hs,Gce),e(Gce,Q4o),e(Hs,U4o),e(Hs,Yq),e(Yq,H4o),e(Hs,J4o),e(Hs,Kq),e(Kq,Y4o),e(Hs,K4o),e(k,Z4o),e(k,Js),e(Js,Oce),e(Oce,e2o),e(Js,o2o),e(Js,Zq),e(Zq,r2o),e(Js,t2o),e(Js,ej),e(ej,a2o),e(Js,n2o),e(k,s2o),e(k,Ys),e(Ys,Vce),e(Vce,l2o),e(Ys,i2o),e(Ys,oj),e(oj,d2o),e(Ys,c2o),e(Ys,rj),e(rj,f2o),e(Ys,m2o),e(k,g2o),e(k,Hh),e(Hh,Xce),e(Xce,h2o),e(Hh,p2o),e(Hh,tj),e(tj,_2o),e(Hh,u2o),e(k,b2o),e(k,Jh),e(Jh,zce),e(zce,v2o),e(Jh,F2o),e(Jh,aj),e(aj,T2o),e(Jh,M2o),e(k,E2o),e(k,Yh),e(Yh,Wce),e(Wce,C2o),e(Yh,w2o),e(Yh,nj),e(nj,A2o),e(Yh,L2o),e(k,y2o),e(k,Ks),e(Ks,Qce),e(Qce,x2o),e(Ks,$2o),e(Ks,sj),e(sj,k2o),e(Ks,S2o),e(Ks,lj),e(lj,R2o),e(Ks,P2o),e(k,B2o),e(k,Zs),e(Zs,Uce),e(Uce,I2o),e(Zs,N2o),e(Zs,ij),e(ij,q2o),e(Zs,j2o),e(Zs,dj),e(dj,D2o),e(Zs,G2o),e(k,O2o),e(k,Kh),e(Kh,Hce),e(Hce,V2o),e(Kh,X2o),e(Kh,cj),e(cj,z2o),e(Kh,W2o),e(k,Q2o),e(k,Zh),e(Zh,Jce),e(Jce,U2o),e(Zh,H2o),e(Zh,fj),e(fj,J2o),e(Zh,Y2o),e(k,K2o),e(k,ep),e(ep,Yce),e(Yce,Z2o),e(ep,ebo),e(ep,mj),e(mj,obo),e(ep,rbo),e(k,tbo),e(k,el),e(el,Kce),e(Kce,abo),e(el,nbo),e(el,gj),e(gj,sbo),e(el,lbo),e(el,hj),e(hj,ibo),e(el,dbo),e(k,cbo),e(k,op),e(op,Zce),e(Zce,fbo),e(op,mbo),e(op,pj),e(pj,gbo),e(op,hbo),e(k,pbo),e(k,rp),e(rp,efe),e(efe,_bo),e(rp,ubo),e(rp,_j),e(_j,bbo),e(rp,vbo),e(k,Fbo),e(k,ol),e(ol,ofe),e(ofe,Tbo),e(ol,Mbo),e(ol,uj),e(uj,Ebo),e(ol,Cbo),e(ol,bj),e(bj,wbo),e(ol,Abo),e(k,Lbo),e(k,rl),e(rl,rfe),e(rfe,ybo),e(rl,xbo),e(rl,vj),e(vj,$bo),e(rl,kbo),e(rl,Fj),e(Fj,Sbo),e(rl,Rbo),e(k,Pbo),e(k,tl),e(tl,tfe),e(tfe,Bbo),e(tl,Ibo),e(tl,Tj),e(Tj,Nbo),e(tl,qbo),e(tl,Mj),e(Mj,jbo),e(tl,Dbo),e(k,Gbo),e(k,al),e(al,afe),e(afe,Obo),e(al,Vbo),e(al,Ej),e(Ej,Xbo),e(al,zbo),e(al,Cj),e(Cj,Wbo),e(al,Qbo),e(Sr,Ubo),M(tp,Sr,null),e(xo,Hbo),e(xo,ap),M(Ly,ap,null),e(ap,Jbo),e(ap,nfe),e(nfe,Ybo),b(f,ZQe,u),b(f,Zi,u),e(Zi,np),e(np,sfe),M(yy,sfe,null),e(Zi,Kbo),e(Zi,lfe),e(lfe,Zbo),b(f,eUe,u),b(f,$o,u),M(xy,$o,null),e($o,evo),e($o,$y),e($y,ovo),e($y,wj),e(wj,rvo),e($y,tvo),e($o,avo),e($o,ky),e(ky,nvo),e(ky,ife),e(ife,svo),e(ky,lvo),e($o,ivo),e($o,He),M(Sy,He,null),e(He,dvo),e(He,dfe),e(dfe,cvo),e(He,fvo),e(He,Oa),e(Oa,mvo),e(Oa,cfe),e(cfe,gvo),e(Oa,hvo),e(Oa,ffe),e(ffe,pvo),e(Oa,_vo),e(Oa,mfe),e(mfe,uvo),e(Oa,bvo),e(He,vvo),e(He,Q),e(Q,sp),e(sp,gfe),e(gfe,Fvo),e(sp,Tvo),e(sp,Aj),e(Aj,Mvo),e(sp,Evo),e(Q,Cvo),e(Q,lp),e(lp,hfe),e(hfe,wvo),e(lp,Avo),e(lp,Lj),e(Lj,Lvo),e(lp,yvo),e(Q,xvo),e(Q,ip),e(ip,pfe),e(pfe,$vo),e(ip,kvo),e(ip,yj),e(yj,Svo),e(ip,Rvo),e(Q,Pvo),e(Q,dp),e(dp,_fe),e(_fe,Bvo),e(dp,Ivo),e(dp,xj),e(xj,Nvo),e(dp,qvo),e(Q,jvo),e(Q,cp),e(cp,ufe),e(ufe,Dvo),e(cp,Gvo),e(cp,$j),e($j,Ovo),e(cp,Vvo),e(Q,Xvo),e(Q,fp),e(fp,bfe),e(bfe,zvo),e(fp,Wvo),e(fp,kj),e(kj,Qvo),e(fp,Uvo),e(Q,Hvo),e(Q,mp),e(mp,vfe),e(vfe,Jvo),e(mp,Yvo),e(mp,Sj),e(Sj,Kvo),e(mp,Zvo),e(Q,e5o),e(Q,gp),e(gp,Ffe),e(Ffe,o5o),e(gp,r5o),e(gp,Rj),e(Rj,t5o),e(gp,a5o),e(Q,n5o),e(Q,hp),e(hp,Tfe),e(Tfe,s5o),e(hp,l5o),e(hp,Pj),e(Pj,i5o),e(hp,d5o),e(Q,c5o),e(Q,pp),e(pp,Mfe),e(Mfe,f5o),e(pp,m5o),e(pp,Bj),e(Bj,g5o),e(pp,h5o),e(Q,p5o),e(Q,_p),e(_p,Efe),e(Efe,_5o),e(_p,u5o),e(_p,Ij),e(Ij,b5o),e(_p,v5o),e(Q,F5o),e(Q,up),e(up,Cfe),e(Cfe,T5o),e(up,M5o),e(up,Nj),e(Nj,E5o),e(up,C5o),e(Q,w5o),e(Q,bp),e(bp,wfe),e(wfe,A5o),e(bp,L5o),e(bp,qj),e(qj,y5o),e(bp,x5o),e(Q,$5o),e(Q,vp),e(vp,Afe),e(Afe,k5o),e(vp,S5o),e(vp,jj),e(jj,R5o),e(vp,P5o),e(Q,B5o),e(Q,Fp),e(Fp,Lfe),e(Lfe,I5o),e(Fp,N5o),e(Fp,Dj),e(Dj,q5o),e(Fp,j5o),e(Q,D5o),e(Q,Tp),e(Tp,yfe),e(yfe,G5o),e(Tp,O5o),e(Tp,Gj),e(Gj,V5o),e(Tp,X5o),e(Q,z5o),e(Q,Mp),e(Mp,xfe),e(xfe,W5o),e(Mp,Q5o),e(Mp,Oj),e(Oj,U5o),e(Mp,H5o),e(Q,J5o),e(Q,Ep),e(Ep,$fe),e($fe,Y5o),e(Ep,K5o),e(Ep,Vj),e(Vj,Z5o),e(Ep,e0o),e(Q,o0o),e(Q,Cp),e(Cp,kfe),e(kfe,r0o),e(Cp,t0o),e(Cp,Xj),e(Xj,a0o),e(Cp,n0o),e(Q,s0o),e(Q,wp),e(wp,Sfe),e(Sfe,l0o),e(wp,i0o),e(wp,zj),e(zj,d0o),e(wp,c0o),e(Q,f0o),e(Q,Ap),e(Ap,Rfe),e(Rfe,m0o),e(Ap,g0o),e(Ap,Wj),e(Wj,h0o),e(Ap,p0o),e(Q,_0o),e(Q,Lp),e(Lp,Pfe),e(Pfe,u0o),e(Lp,b0o),e(Lp,Qj),e(Qj,v0o),e(Lp,F0o),e(Q,T0o),e(Q,yp),e(yp,Bfe),e(Bfe,M0o),e(yp,E0o),e(yp,Uj),e(Uj,C0o),e(yp,w0o),e(Q,A0o),e(Q,xp),e(xp,Ife),e(Ife,L0o),e(xp,y0o),e(xp,Hj),e(Hj,x0o),e(xp,$0o),e(Q,k0o),e(Q,$p),e($p,Nfe),e(Nfe,S0o),e($p,R0o),e($p,Jj),e(Jj,P0o),e($p,B0o),e(Q,I0o),e(Q,kp),e(kp,qfe),e(qfe,N0o),e(kp,q0o),e(kp,Yj),e(Yj,j0o),e(kp,D0o),e(Q,G0o),e(Q,Sp),e(Sp,jfe),e(jfe,O0o),e(Sp,V0o),e(Sp,Kj),e(Kj,X0o),e(Sp,z0o),e(Q,W0o),e(Q,Rp),e(Rp,Dfe),e(Dfe,Q0o),e(Rp,U0o),e(Rp,Zj),e(Zj,H0o),e(Rp,J0o),e(Q,Y0o),e(Q,Pp),e(Pp,Gfe),e(Gfe,K0o),e(Pp,Z0o),e(Pp,eD),e(eD,eFo),e(Pp,oFo),e(Q,rFo),e(Q,Bp),e(Bp,Ofe),e(Ofe,tFo),e(Bp,aFo),e(Bp,oD),e(oD,nFo),e(Bp,sFo),e(Q,lFo),e(Q,Ip),e(Ip,Vfe),e(Vfe,iFo),e(Ip,dFo),e(Ip,rD),e(rD,cFo),e(Ip,fFo),e(Q,mFo),e(Q,Np),e(Np,Xfe),e(Xfe,gFo),e(Np,hFo),e(Np,tD),e(tD,pFo),e(Np,_Fo),e(Q,uFo),e(Q,qp),e(qp,zfe),e(zfe,bFo),e(qp,vFo),e(qp,aD),e(aD,FFo),e(qp,TFo),e(Q,MFo),e(Q,jp),e(jp,Wfe),e(Wfe,EFo),e(jp,CFo),e(jp,nD),e(nD,wFo),e(jp,AFo),e(Q,LFo),e(Q,Dp),e(Dp,Qfe),e(Qfe,yFo),e(Dp,xFo),e(Dp,sD),e(sD,$Fo),e(Dp,kFo),e(Q,SFo),e(Q,Gp),e(Gp,Ufe),e(Ufe,RFo),e(Gp,PFo),e(Gp,lD),e(lD,BFo),e(Gp,IFo),e(Q,NFo),e(Q,Op),e(Op,Hfe),e(Hfe,qFo),e(Op,jFo),e(Op,iD),e(iD,DFo),e(Op,GFo),e(Q,OFo),e(Q,Vp),e(Vp,Jfe),e(Jfe,VFo),e(Vp,XFo),e(Vp,dD),e(dD,zFo),e(Vp,WFo),e(He,QFo),M(Xp,He,null),e(He,UFo),M(zp,He,null),e($o,HFo),e($o,Wp),M(Ry,Wp,null),e(Wp,JFo),e(Wp,Yfe),e(Yfe,YFo),b(f,oUe,u),b(f,ed,u),e(ed,Qp),e(Qp,Kfe),M(Py,Kfe,null),e(ed,KFo),e(ed,Zfe),e(Zfe,ZFo),b(f,rUe,u),b(f,ko,u),M(By,ko,null),e(ko,eTo),e(ko,Iy),e(Iy,oTo),e(Iy,cD),e(cD,rTo),e(Iy,tTo),e(ko,aTo),e(ko,Ny),e(Ny,nTo),e(Ny,eme),e(eme,sTo),e(Ny,lTo),e(ko,iTo),e(ko,Je),M(qy,Je,null),e(Je,dTo),e(Je,ome),e(ome,cTo),e(Je,fTo),e(Je,od),e(od,mTo),e(od,rme),e(rme,gTo),e(od,hTo),e(od,tme),e(tme,pTo),e(od,_To),e(Je,uTo),e(Je,ie),e(ie,Up),e(Up,ame),e(ame,bTo),e(Up,vTo),e(Up,fD),e(fD,FTo),e(Up,TTo),e(ie,MTo),e(ie,Hp),e(Hp,nme),e(nme,ETo),e(Hp,CTo),e(Hp,mD),e(mD,wTo),e(Hp,ATo),e(ie,LTo),e(ie,Jp),e(Jp,sme),e(sme,yTo),e(Jp,xTo),e(Jp,gD),e(gD,$To),e(Jp,kTo),e(ie,STo),e(ie,Yp),e(Yp,lme),e(lme,RTo),e(Yp,PTo),e(Yp,hD),e(hD,BTo),e(Yp,ITo),e(ie,NTo),e(ie,Kp),e(Kp,ime),e(ime,qTo),e(Kp,jTo),e(Kp,pD),e(pD,DTo),e(Kp,GTo),e(ie,OTo),e(ie,Zp),e(Zp,dme),e(dme,VTo),e(Zp,XTo),e(Zp,_D),e(_D,zTo),e(Zp,WTo),e(ie,QTo),e(ie,e_),e(e_,cme),e(cme,UTo),e(e_,HTo),e(e_,uD),e(uD,JTo),e(e_,YTo),e(ie,KTo),e(ie,o_),e(o_,fme),e(fme,ZTo),e(o_,e8o),e(o_,bD),e(bD,o8o),e(o_,r8o),e(ie,t8o),e(ie,r_),e(r_,mme),e(mme,a8o),e(r_,n8o),e(r_,vD),e(vD,s8o),e(r_,l8o),e(ie,i8o),e(ie,t_),e(t_,gme),e(gme,d8o),e(t_,c8o),e(t_,FD),e(FD,f8o),e(t_,m8o),e(ie,g8o),e(ie,a_),e(a_,hme),e(hme,h8o),e(a_,p8o),e(a_,TD),e(TD,_8o),e(a_,u8o),e(ie,b8o),e(ie,n_),e(n_,pme),e(pme,v8o),e(n_,F8o),e(n_,MD),e(MD,T8o),e(n_,M8o),e(ie,E8o),e(ie,s_),e(s_,_me),e(_me,C8o),e(s_,w8o),e(s_,ED),e(ED,A8o),e(s_,L8o),e(ie,y8o),e(ie,l_),e(l_,ume),e(ume,x8o),e(l_,$8o),e(l_,CD),e(CD,k8o),e(l_,S8o),e(ie,R8o),e(ie,i_),e(i_,bme),e(bme,P8o),e(i_,B8o),e(i_,wD),e(wD,I8o),e(i_,N8o),e(ie,q8o),e(ie,d_),e(d_,vme),e(vme,j8o),e(d_,D8o),e(d_,AD),e(AD,G8o),e(d_,O8o),e(ie,V8o),e(ie,c_),e(c_,Fme),e(Fme,X8o),e(c_,z8o),e(c_,LD),e(LD,W8o),e(c_,Q8o),e(ie,U8o),e(ie,f_),e(f_,Tme),e(Tme,H8o),e(f_,J8o),e(f_,yD),e(yD,Y8o),e(f_,K8o),e(ie,Z8o),e(ie,m_),e(m_,Mme),e(Mme,eMo),e(m_,oMo),e(m_,xD),e(xD,rMo),e(m_,tMo),e(ie,aMo),e(ie,g_),e(g_,Eme),e(Eme,nMo),e(g_,sMo),e(g_,$D),e($D,lMo),e(g_,iMo),e(Je,dMo),M(h_,Je,null),e(Je,cMo),M(p_,Je,null),e(ko,fMo),e(ko,__),M(jy,__,null),e(__,mMo),e(__,Cme),e(Cme,gMo),b(f,tUe,u),b(f,rd,u),e(rd,u_),e(u_,wme),M(Dy,wme,null),e(rd,hMo),e(rd,Ame),e(Ame,pMo),b(f,aUe,u),b(f,So,u),M(Gy,So,null),e(So,_Mo),e(So,td),e(td,uMo),e(td,kD),e(kD,bMo),e(td,vMo),e(td,SD),e(SD,FMo),e(td,TMo),e(So,MMo),e(So,Oy),e(Oy,EMo),e(Oy,Lme),e(Lme,CMo),e(Oy,wMo),e(So,AMo),e(So,mt),M(Vy,mt,null),e(mt,LMo),e(mt,yme),e(yme,yMo),e(mt,xMo),e(mt,ad),e(ad,$Mo),e(ad,xme),e(xme,kMo),e(ad,SMo),e(ad,RD),e(RD,RMo),e(ad,PMo),e(mt,BMo),M(b_,mt,null),e(So,IMo),e(So,Ye),M(Xy,Ye,null),e(Ye,NMo),e(Ye,$me),e($me,qMo),e(Ye,jMo),e(Ye,Va),e(Va,DMo),e(Va,kme),e(kme,GMo),e(Va,OMo),e(Va,Sme),e(Sme,VMo),e(Va,XMo),e(Va,Rme),e(Rme,zMo),e(Va,WMo),e(Ye,QMo),e(Ye,y),e(y,v_),e(v_,Pme),e(Pme,UMo),e(v_,HMo),e(v_,PD),e(PD,JMo),e(v_,YMo),e(y,KMo),e(y,F_),e(F_,Bme),e(Bme,ZMo),e(F_,eEo),e(F_,BD),e(BD,oEo),e(F_,rEo),e(y,tEo),e(y,T_),e(T_,Ime),e(Ime,aEo),e(T_,nEo),e(T_,ID),e(ID,sEo),e(T_,lEo),e(y,iEo),e(y,M_),e(M_,Nme),e(Nme,dEo),e(M_,cEo),e(M_,ND),e(ND,fEo),e(M_,mEo),e(y,gEo),e(y,E_),e(E_,qme),e(qme,hEo),e(E_,pEo),e(E_,qD),e(qD,_Eo),e(E_,uEo),e(y,bEo),e(y,C_),e(C_,jme),e(jme,vEo),e(C_,FEo),e(C_,jD),e(jD,TEo),e(C_,MEo),e(y,EEo),e(y,w_),e(w_,Dme),e(Dme,CEo),e(w_,wEo),e(w_,DD),e(DD,AEo),e(w_,LEo),e(y,yEo),e(y,A_),e(A_,Gme),e(Gme,xEo),e(A_,$Eo),e(A_,GD),e(GD,kEo),e(A_,SEo),e(y,REo),e(y,L_),e(L_,Ome),e(Ome,PEo),e(L_,BEo),e(L_,OD),e(OD,IEo),e(L_,NEo),e(y,qEo),e(y,y_),e(y_,Vme),e(Vme,jEo),e(y_,DEo),e(y_,VD),e(VD,GEo),e(y_,OEo),e(y,VEo),e(y,x_),e(x_,Xme),e(Xme,XEo),e(x_,zEo),e(x_,XD),e(XD,WEo),e(x_,QEo),e(y,UEo),e(y,$_),e($_,zme),e(zme,HEo),e($_,JEo),e($_,zD),e(zD,YEo),e($_,KEo),e(y,ZEo),e(y,k_),e(k_,Wme),e(Wme,eCo),e(k_,oCo),e(k_,WD),e(WD,rCo),e(k_,tCo),e(y,aCo),e(y,S_),e(S_,Qme),e(Qme,nCo),e(S_,sCo),e(S_,QD),e(QD,lCo),e(S_,iCo),e(y,dCo),e(y,R_),e(R_,Ume),e(Ume,cCo),e(R_,fCo),e(R_,UD),e(UD,mCo),e(R_,gCo),e(y,hCo),e(y,P_),e(P_,Hme),e(Hme,pCo),e(P_,_Co),e(P_,HD),e(HD,uCo),e(P_,bCo),e(y,vCo),e(y,B_),e(B_,Jme),e(Jme,FCo),e(B_,TCo),e(B_,JD),e(JD,MCo),e(B_,ECo),e(y,CCo),e(y,I_),e(I_,Yme),e(Yme,wCo),e(I_,ACo),e(I_,YD),e(YD,LCo),e(I_,yCo),e(y,xCo),e(y,N_),e(N_,Kme),e(Kme,$Co),e(N_,kCo),e(N_,KD),e(KD,SCo),e(N_,RCo),e(y,PCo),e(y,q_),e(q_,Zme),e(Zme,BCo),e(q_,ICo),e(q_,ZD),e(ZD,NCo),e(q_,qCo),e(y,jCo),e(y,j_),e(j_,ege),e(ege,DCo),e(j_,GCo),e(j_,eG),e(eG,OCo),e(j_,VCo),e(y,XCo),e(y,D_),e(D_,oge),e(oge,zCo),e(D_,WCo),e(D_,oG),e(oG,QCo),e(D_,UCo),e(y,HCo),e(y,G_),e(G_,rge),e(rge,JCo),e(G_,YCo),e(G_,rG),e(rG,KCo),e(G_,ZCo),e(y,e3o),e(y,O_),e(O_,tge),e(tge,o3o),e(O_,r3o),e(O_,tG),e(tG,t3o),e(O_,a3o),e(y,n3o),e(y,V_),e(V_,age),e(age,s3o),e(V_,l3o),e(V_,aG),e(aG,i3o),e(V_,d3o),e(y,c3o),e(y,X_),e(X_,nge),e(nge,f3o),e(X_,m3o),e(X_,nG),e(nG,g3o),e(X_,h3o),e(y,p3o),e(y,z_),e(z_,sge),e(sge,_3o),e(z_,u3o),e(z_,sG),e(sG,b3o),e(z_,v3o),e(y,F3o),e(y,W_),e(W_,lge),e(lge,T3o),e(W_,M3o),e(W_,lG),e(lG,E3o),e(W_,C3o),e(y,w3o),e(y,Q_),e(Q_,ige),e(ige,A3o),e(Q_,L3o),e(Q_,iG),e(iG,y3o),e(Q_,x3o),e(y,$3o),e(y,U_),e(U_,dge),e(dge,k3o),e(U_,S3o),e(U_,dG),e(dG,R3o),e(U_,P3o),e(y,B3o),e(y,H_),e(H_,cge),e(cge,I3o),e(H_,N3o),e(H_,cG),e(cG,q3o),e(H_,j3o),e(y,D3o),e(y,J_),e(J_,fge),e(fge,G3o),e(J_,O3o),e(J_,fG),e(fG,V3o),e(J_,X3o),e(y,z3o),e(y,Y_),e(Y_,mge),e(mge,W3o),e(Y_,Q3o),e(Y_,mG),e(mG,U3o),e(Y_,H3o),e(y,J3o),e(y,K_),e(K_,gge),e(gge,Y3o),e(K_,K3o),e(K_,gG),e(gG,Z3o),e(K_,ewo),e(y,owo),e(y,Z_),e(Z_,hge),e(hge,rwo),e(Z_,two),e(Z_,hG),e(hG,awo),e(Z_,nwo),e(y,swo),e(y,nl),e(nl,pge),e(pge,lwo),e(nl,iwo),e(nl,pG),e(pG,dwo),e(nl,cwo),e(nl,_G),e(_G,fwo),e(nl,mwo),e(y,gwo),e(y,eu),e(eu,_ge),e(_ge,hwo),e(eu,pwo),e(eu,uG),e(uG,_wo),e(eu,uwo),e(y,bwo),e(y,ou),e(ou,uge),e(uge,vwo),e(ou,Fwo),e(ou,bG),e(bG,Two),e(ou,Mwo),e(y,Ewo),e(y,ru),e(ru,bge),e(bge,Cwo),e(ru,wwo),e(ru,vG),e(vG,Awo),e(ru,Lwo),e(y,ywo),e(y,tu),e(tu,vge),e(vge,xwo),e(tu,$wo),e(tu,FG),e(FG,kwo),e(tu,Swo),e(y,Rwo),e(y,au),e(au,Fge),e(Fge,Pwo),e(au,Bwo),e(au,TG),e(TG,Iwo),e(au,Nwo),e(y,qwo),e(y,nu),e(nu,Tge),e(Tge,jwo),e(nu,Dwo),e(nu,MG),e(MG,Gwo),e(nu,Owo),e(y,Vwo),e(y,su),e(su,Mge),e(Mge,Xwo),e(su,zwo),e(su,EG),e(EG,Wwo),e(su,Qwo),e(y,Uwo),e(y,lu),e(lu,Ege),e(Ege,Hwo),e(lu,Jwo),e(lu,CG),e(CG,Ywo),e(lu,Kwo),e(y,Zwo),e(y,iu),e(iu,Cge),e(Cge,e6o),e(iu,o6o),e(iu,wG),e(wG,r6o),e(iu,t6o),e(y,a6o),e(y,du),e(du,wge),e(wge,n6o),e(du,s6o),e(du,AG),e(AG,l6o),e(du,i6o),e(y,d6o),e(y,cu),e(cu,Age),e(Age,c6o),e(cu,f6o),e(cu,LG),e(LG,m6o),e(cu,g6o),e(y,h6o),e(y,fu),e(fu,Lge),e(Lge,p6o),e(fu,_6o),e(fu,yG),e(yG,u6o),e(fu,b6o),e(y,v6o),e(y,mu),e(mu,yge),e(yge,F6o),e(mu,T6o),e(mu,xG),e(xG,M6o),e(mu,E6o),e(y,C6o),e(y,gu),e(gu,xge),e(xge,w6o),e(gu,A6o),e(gu,$G),e($G,L6o),e(gu,y6o),e(y,x6o),e(y,hu),e(hu,$ge),e($ge,$6o),e(hu,k6o),e(hu,kG),e(kG,S6o),e(hu,R6o),e(y,P6o),e(y,pu),e(pu,kge),e(kge,B6o),e(pu,I6o),e(pu,SG),e(SG,N6o),e(pu,q6o),e(y,j6o),e(y,_u),e(_u,Sge),e(Sge,D6o),e(_u,G6o),e(_u,RG),e(RG,O6o),e(_u,V6o),e(y,X6o),e(y,uu),e(uu,Rge),e(Rge,z6o),e(uu,W6o),e(uu,PG),e(PG,Q6o),e(uu,U6o),e(y,H6o),e(y,bu),e(bu,Pge),e(Pge,J6o),e(bu,Y6o),e(bu,BG),e(BG,K6o),e(bu,Z6o),e(y,eAo),e(y,vu),e(vu,Bge),e(Bge,oAo),e(vu,rAo),e(vu,IG),e(IG,tAo),e(vu,aAo),e(y,nAo),e(y,Fu),e(Fu,Ige),e(Ige,sAo),e(Fu,lAo),e(Fu,NG),e(NG,iAo),e(Fu,dAo),e(y,cAo),e(y,Tu),e(Tu,Nge),e(Nge,fAo),e(Tu,mAo),e(Tu,qG),e(qG,gAo),e(Tu,hAo),e(y,pAo),e(y,Mu),e(Mu,qge),e(qge,_Ao),e(Mu,uAo),e(Mu,jG),e(jG,bAo),e(Mu,vAo),e(y,FAo),e(y,Eu),e(Eu,jge),e(jge,TAo),e(Eu,MAo),e(Eu,DG),e(DG,EAo),e(Eu,CAo),e(y,wAo),e(y,Cu),e(Cu,Dge),e(Dge,AAo),e(Cu,LAo),e(Cu,GG),e(GG,yAo),e(Cu,xAo),e(y,$Ao),e(y,wu),e(wu,Gge),e(Gge,kAo),e(wu,SAo),e(wu,OG),e(OG,RAo),e(wu,PAo),e(y,BAo),e(y,Au),e(Au,Oge),e(Oge,IAo),e(Au,NAo),e(Au,VG),e(VG,qAo),e(Au,jAo),e(y,DAo),e(y,Lu),e(Lu,Vge),e(Vge,GAo),e(Lu,OAo),e(Lu,XG),e(XG,VAo),e(Lu,XAo),e(y,zAo),e(y,yu),e(yu,Xge),e(Xge,WAo),e(yu,QAo),e(yu,zG),e(zG,UAo),e(yu,HAo),e(y,JAo),e(y,xu),e(xu,zge),e(zge,YAo),e(xu,KAo),e(xu,WG),e(WG,ZAo),e(xu,e7o),e(y,o7o),e(y,$u),e($u,Wge),e(Wge,r7o),e($u,t7o),e($u,QG),e(QG,a7o),e($u,n7o),e(y,s7o),e(y,ku),e(ku,Qge),e(Qge,l7o),e(ku,i7o),e(ku,UG),e(UG,d7o),e(ku,c7o),e(y,f7o),e(y,Su),e(Su,Uge),e(Uge,m7o),e(Su,g7o),e(Su,HG),e(HG,h7o),e(Su,p7o),e(y,_7o),e(y,Ru),e(Ru,Hge),e(Hge,u7o),e(Ru,b7o),e(Ru,JG),e(JG,v7o),e(Ru,F7o),e(y,T7o),e(y,Pu),e(Pu,Jge),e(Jge,M7o),e(Pu,E7o),e(Pu,YG),e(YG,C7o),e(Pu,w7o),e(y,A7o),e(y,Bu),e(Bu,Yge),e(Yge,L7o),e(Bu,y7o),e(Bu,KG),e(KG,x7o),e(Bu,$7o),e(y,k7o),e(y,Iu),e(Iu,Kge),e(Kge,S7o),e(Iu,R7o),e(Iu,ZG),e(ZG,P7o),e(Iu,B7o),e(y,I7o),e(y,Nu),e(Nu,Zge),e(Zge,N7o),e(Nu,q7o),e(Nu,eO),e(eO,j7o),e(Nu,D7o),e(y,G7o),e(y,qu),e(qu,ehe),e(ehe,O7o),e(qu,V7o),e(qu,oO),e(oO,X7o),e(qu,z7o),e(y,W7o),e(y,ju),e(ju,ohe),e(ohe,Q7o),e(ju,U7o),e(ju,rO),e(rO,H7o),e(ju,J7o),e(y,Y7o),e(y,Du),e(Du,rhe),e(rhe,K7o),e(Du,Z7o),e(Du,tO),e(tO,eLo),e(Du,oLo),e(y,rLo),e(y,Gu),e(Gu,the),e(the,tLo),e(Gu,aLo),e(Gu,aO),e(aO,nLo),e(Gu,sLo),e(y,lLo),e(y,Ou),e(Ou,ahe),e(ahe,iLo),e(Ou,dLo),e(Ou,nO),e(nO,cLo),e(Ou,fLo),e(y,mLo),e(y,Vu),e(Vu,nhe),e(nhe,gLo),e(Vu,hLo),e(Vu,sO),e(sO,pLo),e(Vu,_Lo),e(y,uLo),e(y,Xu),e(Xu,she),e(she,bLo),e(Xu,vLo),e(Xu,lO),e(lO,FLo),e(Xu,TLo),e(y,MLo),e(y,zu),e(zu,lhe),e(lhe,ELo),e(zu,CLo),e(zu,iO),e(iO,wLo),e(zu,ALo),e(y,LLo),e(y,Wu),e(Wu,ihe),e(ihe,yLo),e(Wu,xLo),e(Wu,dO),e(dO,$Lo),e(Wu,kLo),e(y,SLo),e(y,Qu),e(Qu,dhe),e(dhe,RLo),e(Qu,PLo),e(Qu,cO),e(cO,BLo),e(Qu,ILo),e(y,NLo),e(y,Uu),e(Uu,che),e(che,qLo),e(Uu,jLo),e(Uu,fO),e(fO,DLo),e(Uu,GLo),e(y,OLo),e(y,Hu),e(Hu,fhe),e(fhe,VLo),e(Hu,XLo),e(Hu,mO),e(mO,zLo),e(Hu,WLo),e(y,QLo),e(y,Ju),e(Ju,mhe),e(mhe,ULo),e(Ju,HLo),e(Ju,gO),e(gO,JLo),e(Ju,YLo),e(y,KLo),e(y,Yu),e(Yu,ghe),e(ghe,ZLo),e(Yu,eyo),e(Yu,hO),e(hO,oyo),e(Yu,ryo),e(y,tyo),e(y,Ku),e(Ku,hhe),e(hhe,ayo),e(Ku,nyo),e(Ku,pO),e(pO,syo),e(Ku,lyo),e(y,iyo),e(y,Zu),e(Zu,phe),e(phe,dyo),e(Zu,cyo),e(Zu,_O),e(_O,fyo),e(Zu,myo),e(y,gyo),e(y,e1),e(e1,_he),e(_he,hyo),e(e1,pyo),e(e1,uO),e(uO,_yo),e(e1,uyo),e(y,byo),e(y,o1),e(o1,uhe),e(uhe,vyo),e(o1,Fyo),e(o1,bO),e(bO,Tyo),e(o1,Myo),e(y,Eyo),e(y,r1),e(r1,bhe),e(bhe,Cyo),e(r1,wyo),e(r1,vO),e(vO,Ayo),e(r1,Lyo),e(y,yyo),e(y,t1),e(t1,vhe),e(vhe,xyo),e(t1,$yo),e(t1,FO),e(FO,kyo),e(t1,Syo),e(y,Ryo),e(y,a1),e(a1,Fhe),e(Fhe,Pyo),e(a1,Byo),e(a1,TO),e(TO,Iyo),e(a1,Nyo),e(y,qyo),e(y,n1),e(n1,The),e(The,jyo),e(n1,Dyo),e(n1,MO),e(MO,Gyo),e(n1,Oyo),e(y,Vyo),e(y,s1),e(s1,Mhe),e(Mhe,Xyo),e(s1,zyo),e(s1,EO),e(EO,Wyo),e(s1,Qyo),e(y,Uyo),e(y,l1),e(l1,Ehe),e(Ehe,Hyo),e(l1,Jyo),e(l1,CO),e(CO,Yyo),e(l1,Kyo),e(y,Zyo),e(y,i1),e(i1,Che),e(Che,e9o),e(i1,o9o),e(i1,wO),e(wO,r9o),e(i1,t9o),e(y,a9o),e(y,d1),e(d1,whe),e(whe,n9o),e(d1,s9o),e(d1,AO),e(AO,l9o),e(d1,i9o),e(y,d9o),e(y,c1),e(c1,Ahe),e(Ahe,c9o),e(c1,f9o),e(c1,LO),e(LO,m9o),e(c1,g9o),e(y,h9o),e(y,f1),e(f1,Lhe),e(Lhe,p9o),e(f1,_9o),e(f1,yO),e(yO,u9o),e(f1,b9o),e(y,v9o),e(y,m1),e(m1,yhe),e(yhe,F9o),e(m1,T9o),e(m1,xO),e(xO,M9o),e(m1,E9o),e(y,C9o),e(y,g1),e(g1,xhe),e(xhe,w9o),e(g1,A9o),e(g1,$O),e($O,L9o),e(g1,y9o),e(y,x9o),e(y,h1),e(h1,$he),e($he,$9o),e(h1,k9o),e(h1,kO),e(kO,S9o),e(h1,R9o),e(y,P9o),e(y,p1),e(p1,khe),e(khe,B9o),e(p1,I9o),e(p1,SO),e(SO,N9o),e(p1,q9o),e(y,j9o),e(y,_1),e(_1,She),e(She,D9o),e(_1,G9o),e(_1,RO),e(RO,O9o),e(_1,V9o),e(y,X9o),e(y,u1),e(u1,Rhe),e(Rhe,z9o),e(u1,W9o),e(u1,PO),e(PO,Q9o),e(u1,U9o),e(y,H9o),e(y,b1),e(b1,Phe),e(Phe,J9o),e(b1,Y9o),e(b1,BO),e(BO,K9o),e(b1,Z9o),e(y,exo),e(y,v1),e(v1,Bhe),e(Bhe,oxo),e(v1,rxo),e(v1,IO),e(IO,txo),e(v1,axo),e(y,nxo),e(y,F1),e(F1,Ihe),e(Ihe,sxo),e(F1,lxo),e(F1,NO),e(NO,ixo),e(F1,dxo),e(y,cxo),e(y,T1),e(T1,Nhe),e(Nhe,fxo),e(T1,mxo),e(T1,qO),e(qO,gxo),e(T1,hxo),e(y,pxo),e(y,M1),e(M1,qhe),e(qhe,_xo),e(M1,uxo),e(M1,jO),e(jO,bxo),e(M1,vxo),e(y,Fxo),e(y,E1),e(E1,jhe),e(jhe,Txo),e(E1,Mxo),e(E1,DO),e(DO,Exo),e(E1,Cxo),e(y,wxo),e(y,C1),e(C1,Dhe),e(Dhe,Axo),e(C1,Lxo),e(C1,GO),e(GO,yxo),e(C1,xxo),e(y,$xo),e(y,w1),e(w1,Ghe),e(Ghe,kxo),e(w1,Sxo),e(w1,OO),e(OO,Rxo),e(w1,Pxo),e(Ye,Bxo),e(Ye,A1),e(A1,Ixo),e(A1,Ohe),e(Ohe,Nxo),e(A1,qxo),e(A1,Vhe),e(Vhe,jxo),e(Ye,Dxo),M(L1,Ye,null),b(f,nUe,u),b(f,nd,u),e(nd,y1),e(y1,Xhe),M(zy,Xhe,null),e(nd,Gxo),e(nd,zhe),e(zhe,Oxo),b(f,sUe,u),b(f,Ro,u),M(Wy,Ro,null),e(Ro,Vxo),e(Ro,sd),e(sd,Xxo),e(sd,VO),e(VO,zxo),e(sd,Wxo),e(sd,XO),e(XO,Qxo),e(sd,Uxo),e(Ro,Hxo),e(Ro,Qy),e(Qy,Jxo),e(Qy,Whe),e(Whe,Yxo),e(Qy,Kxo),e(Ro,Zxo),e(Ro,gt),M(Uy,gt,null),e(gt,e$o),e(gt,Qhe),e(Qhe,o$o),e(gt,r$o),e(gt,ld),e(ld,t$o),e(ld,Uhe),e(Uhe,a$o),e(ld,n$o),e(ld,zO),e(zO,s$o),e(ld,l$o),e(gt,i$o),M(x1,gt,null),e(Ro,d$o),e(Ro,Ke),M(Hy,Ke,null),e(Ke,c$o),e(Ke,Hhe),e(Hhe,f$o),e(Ke,m$o),e(Ke,Xa),e(Xa,g$o),e(Xa,Jhe),e(Jhe,h$o),e(Xa,p$o),e(Xa,Yhe),e(Yhe,_$o),e(Xa,u$o),e(Xa,Khe),e(Khe,b$o),e(Xa,v$o),e(Ke,F$o),e(Ke,G),e(G,$1),e($1,Zhe),e(Zhe,T$o),e($1,M$o),e($1,WO),e(WO,E$o),e($1,C$o),e(G,w$o),e(G,k1),e(k1,epe),e(epe,A$o),e(k1,L$o),e(k1,QO),e(QO,y$o),e(k1,x$o),e(G,$$o),e(G,S1),e(S1,ope),e(ope,k$o),e(S1,S$o),e(S1,UO),e(UO,R$o),e(S1,P$o),e(G,B$o),e(G,R1),e(R1,rpe),e(rpe,I$o),e(R1,N$o),e(R1,HO),e(HO,q$o),e(R1,j$o),e(G,D$o),e(G,P1),e(P1,tpe),e(tpe,G$o),e(P1,O$o),e(P1,JO),e(JO,V$o),e(P1,X$o),e(G,z$o),e(G,B1),e(B1,ape),e(ape,W$o),e(B1,Q$o),e(B1,YO),e(YO,U$o),e(B1,H$o),e(G,J$o),e(G,I1),e(I1,npe),e(npe,Y$o),e(I1,K$o),e(I1,KO),e(KO,Z$o),e(I1,eko),e(G,oko),e(G,N1),e(N1,spe),e(spe,rko),e(N1,tko),e(N1,ZO),e(ZO,ako),e(N1,nko),e(G,sko),e(G,q1),e(q1,lpe),e(lpe,lko),e(q1,iko),e(q1,eV),e(eV,dko),e(q1,cko),e(G,fko),e(G,j1),e(j1,ipe),e(ipe,mko),e(j1,gko),e(j1,oV),e(oV,hko),e(j1,pko),e(G,_ko),e(G,D1),e(D1,dpe),e(dpe,uko),e(D1,bko),e(D1,rV),e(rV,vko),e(D1,Fko),e(G,Tko),e(G,G1),e(G1,cpe),e(cpe,Mko),e(G1,Eko),e(G1,tV),e(tV,Cko),e(G1,wko),e(G,Ako),e(G,O1),e(O1,fpe),e(fpe,Lko),e(O1,yko),e(O1,aV),e(aV,xko),e(O1,$ko),e(G,kko),e(G,V1),e(V1,mpe),e(mpe,Sko),e(V1,Rko),e(V1,nV),e(nV,Pko),e(V1,Bko),e(G,Iko),e(G,X1),e(X1,gpe),e(gpe,Nko),e(X1,qko),e(X1,sV),e(sV,jko),e(X1,Dko),e(G,Gko),e(G,z1),e(z1,hpe),e(hpe,Oko),e(z1,Vko),e(z1,lV),e(lV,Xko),e(z1,zko),e(G,Wko),e(G,W1),e(W1,ppe),e(ppe,Qko),e(W1,Uko),e(W1,iV),e(iV,Hko),e(W1,Jko),e(G,Yko),e(G,Q1),e(Q1,_pe),e(_pe,Kko),e(Q1,Zko),e(Q1,dV),e(dV,eSo),e(Q1,oSo),e(G,rSo),e(G,U1),e(U1,upe),e(upe,tSo),e(U1,aSo),e(U1,cV),e(cV,nSo),e(U1,sSo),e(G,lSo),e(G,H1),e(H1,bpe),e(bpe,iSo),e(H1,dSo),e(H1,fV),e(fV,cSo),e(H1,fSo),e(G,mSo),e(G,J1),e(J1,vpe),e(vpe,gSo),e(J1,hSo),e(J1,mV),e(mV,pSo),e(J1,_So),e(G,uSo),e(G,Y1),e(Y1,Fpe),e(Fpe,bSo),e(Y1,vSo),e(Y1,gV),e(gV,FSo),e(Y1,TSo),e(G,MSo),e(G,K1),e(K1,Tpe),e(Tpe,ESo),e(K1,CSo),e(K1,hV),e(hV,wSo),e(K1,ASo),e(G,LSo),e(G,Z1),e(Z1,Mpe),e(Mpe,ySo),e(Z1,xSo),e(Z1,pV),e(pV,$So),e(Z1,kSo),e(G,SSo),e(G,e4),e(e4,Epe),e(Epe,RSo),e(e4,PSo),e(e4,_V),e(_V,BSo),e(e4,ISo),e(G,NSo),e(G,o4),e(o4,Cpe),e(Cpe,qSo),e(o4,jSo),e(o4,uV),e(uV,DSo),e(o4,GSo),e(G,OSo),e(G,r4),e(r4,wpe),e(wpe,VSo),e(r4,XSo),e(r4,bV),e(bV,zSo),e(r4,WSo),e(G,QSo),e(G,t4),e(t4,Ape),e(Ape,USo),e(t4,HSo),e(t4,vV),e(vV,JSo),e(t4,YSo),e(G,KSo),e(G,a4),e(a4,Lpe),e(Lpe,ZSo),e(a4,eRo),e(a4,FV),e(FV,oRo),e(a4,rRo),e(G,tRo),e(G,n4),e(n4,ype),e(ype,aRo),e(n4,nRo),e(n4,TV),e(TV,sRo),e(n4,lRo),e(G,iRo),e(G,s4),e(s4,xpe),e(xpe,dRo),e(s4,cRo),e(s4,MV),e(MV,fRo),e(s4,mRo),e(G,gRo),e(G,l4),e(l4,$pe),e($pe,hRo),e(l4,pRo),e(l4,EV),e(EV,_Ro),e(l4,uRo),e(G,bRo),e(G,i4),e(i4,kpe),e(kpe,vRo),e(i4,FRo),e(i4,CV),e(CV,TRo),e(i4,MRo),e(G,ERo),e(G,d4),e(d4,Spe),e(Spe,CRo),e(d4,wRo),e(d4,wV),e(wV,ARo),e(d4,LRo),e(G,yRo),e(G,c4),e(c4,Rpe),e(Rpe,xRo),e(c4,$Ro),e(c4,AV),e(AV,kRo),e(c4,SRo),e(G,RRo),e(G,f4),e(f4,Ppe),e(Ppe,PRo),e(f4,BRo),e(f4,LV),e(LV,IRo),e(f4,NRo),e(G,qRo),e(G,m4),e(m4,Bpe),e(Bpe,jRo),e(m4,DRo),e(m4,yV),e(yV,GRo),e(m4,ORo),e(G,VRo),e(G,g4),e(g4,Ipe),e(Ipe,XRo),e(g4,zRo),e(g4,xV),e(xV,WRo),e(g4,QRo),e(G,URo),e(G,h4),e(h4,Npe),e(Npe,HRo),e(h4,JRo),e(h4,$V),e($V,YRo),e(h4,KRo),e(G,ZRo),e(G,p4),e(p4,qpe),e(qpe,ePo),e(p4,oPo),e(p4,kV),e(kV,rPo),e(p4,tPo),e(G,aPo),e(G,_4),e(_4,jpe),e(jpe,nPo),e(_4,sPo),e(_4,SV),e(SV,lPo),e(_4,iPo),e(G,dPo),e(G,u4),e(u4,Dpe),e(Dpe,cPo),e(u4,fPo),e(u4,RV),e(RV,mPo),e(u4,gPo),e(G,hPo),e(G,b4),e(b4,Gpe),e(Gpe,pPo),e(b4,_Po),e(b4,PV),e(PV,uPo),e(b4,bPo),e(G,vPo),e(G,v4),e(v4,Ope),e(Ope,FPo),e(v4,TPo),e(v4,BV),e(BV,MPo),e(v4,EPo),e(G,CPo),e(G,F4),e(F4,Vpe),e(Vpe,wPo),e(F4,APo),e(F4,IV),e(IV,LPo),e(F4,yPo),e(G,xPo),e(G,T4),e(T4,Xpe),e(Xpe,$Po),e(T4,kPo),e(T4,NV),e(NV,SPo),e(T4,RPo),e(G,PPo),e(G,M4),e(M4,zpe),e(zpe,BPo),e(M4,IPo),e(M4,qV),e(qV,NPo),e(M4,qPo),e(Ke,jPo),e(Ke,E4),e(E4,DPo),e(E4,Wpe),e(Wpe,GPo),e(E4,OPo),e(E4,Qpe),e(Qpe,VPo),e(Ke,XPo),M(C4,Ke,null),b(f,lUe,u),b(f,id,u),e(id,w4),e(w4,Upe),M(Jy,Upe,null),e(id,zPo),e(id,Hpe),e(Hpe,WPo),b(f,iUe,u),b(f,Po,u),M(Yy,Po,null),e(Po,QPo),e(Po,dd),e(dd,UPo),e(dd,jV),e(jV,HPo),e(dd,JPo),e(dd,DV),e(DV,YPo),e(dd,KPo),e(Po,ZPo),e(Po,Ky),e(Ky,eBo),e(Ky,Jpe),e(Jpe,oBo),e(Ky,rBo),e(Po,tBo),e(Po,ht),M(Zy,ht,null),e(ht,aBo),e(ht,Ype),e(Ype,nBo),e(ht,sBo),e(ht,cd),e(cd,lBo),e(cd,Kpe),e(Kpe,iBo),e(cd,dBo),e(cd,GV),e(GV,cBo),e(cd,fBo),e(ht,mBo),M(A4,ht,null),e(Po,gBo),e(Po,Ze),M(e9,Ze,null),e(Ze,hBo),e(Ze,Zpe),e(Zpe,pBo),e(Ze,_Bo),e(Ze,za),e(za,uBo),e(za,e_e),e(e_e,bBo),e(za,vBo),e(za,o_e),e(o_e,FBo),e(za,TBo),e(za,r_e),e(r_e,MBo),e(za,EBo),e(Ze,CBo),e(Ze,z),e(z,L4),e(L4,t_e),e(t_e,wBo),e(L4,ABo),e(L4,OV),e(OV,LBo),e(L4,yBo),e(z,xBo),e(z,y4),e(y4,a_e),e(a_e,$Bo),e(y4,kBo),e(y4,VV),e(VV,SBo),e(y4,RBo),e(z,PBo),e(z,x4),e(x4,n_e),e(n_e,BBo),e(x4,IBo),e(x4,XV),e(XV,NBo),e(x4,qBo),e(z,jBo),e(z,$4),e($4,s_e),e(s_e,DBo),e($4,GBo),e($4,zV),e(zV,OBo),e($4,VBo),e(z,XBo),e(z,k4),e(k4,l_e),e(l_e,zBo),e(k4,WBo),e(k4,WV),e(WV,QBo),e(k4,UBo),e(z,HBo),e(z,S4),e(S4,i_e),e(i_e,JBo),e(S4,YBo),e(S4,QV),e(QV,KBo),e(S4,ZBo),e(z,eIo),e(z,R4),e(R4,d_e),e(d_e,oIo),e(R4,rIo),e(R4,UV),e(UV,tIo),e(R4,aIo),e(z,nIo),e(z,P4),e(P4,c_e),e(c_e,sIo),e(P4,lIo),e(P4,HV),e(HV,iIo),e(P4,dIo),e(z,cIo),e(z,B4),e(B4,f_e),e(f_e,fIo),e(B4,mIo),e(B4,JV),e(JV,gIo),e(B4,hIo),e(z,pIo),e(z,I4),e(I4,m_e),e(m_e,_Io),e(I4,uIo),e(I4,YV),e(YV,bIo),e(I4,vIo),e(z,FIo),e(z,N4),e(N4,g_e),e(g_e,TIo),e(N4,MIo),e(N4,KV),e(KV,EIo),e(N4,CIo),e(z,wIo),e(z,q4),e(q4,h_e),e(h_e,AIo),e(q4,LIo),e(q4,ZV),e(ZV,yIo),e(q4,xIo),e(z,$Io),e(z,j4),e(j4,p_e),e(p_e,kIo),e(j4,SIo),e(j4,eX),e(eX,RIo),e(j4,PIo),e(z,BIo),e(z,D4),e(D4,__e),e(__e,IIo),e(D4,NIo),e(D4,oX),e(oX,qIo),e(D4,jIo),e(z,DIo),e(z,G4),e(G4,u_e),e(u_e,GIo),e(G4,OIo),e(G4,rX),e(rX,VIo),e(G4,XIo),e(z,zIo),e(z,O4),e(O4,b_e),e(b_e,WIo),e(O4,QIo),e(O4,tX),e(tX,UIo),e(O4,HIo),e(z,JIo),e(z,V4),e(V4,v_e),e(v_e,YIo),e(V4,KIo),e(V4,aX),e(aX,ZIo),e(V4,eNo),e(z,oNo),e(z,X4),e(X4,F_e),e(F_e,rNo),e(X4,tNo),e(X4,nX),e(nX,aNo),e(X4,nNo),e(z,sNo),e(z,z4),e(z4,T_e),e(T_e,lNo),e(z4,iNo),e(z4,sX),e(sX,dNo),e(z4,cNo),e(z,fNo),e(z,W4),e(W4,M_e),e(M_e,mNo),e(W4,gNo),e(W4,lX),e(lX,hNo),e(W4,pNo),e(z,_No),e(z,Q4),e(Q4,E_e),e(E_e,uNo),e(Q4,bNo),e(Q4,iX),e(iX,vNo),e(Q4,FNo),e(z,TNo),e(z,U4),e(U4,C_e),e(C_e,MNo),e(U4,ENo),e(U4,dX),e(dX,CNo),e(U4,wNo),e(z,ANo),e(z,H4),e(H4,w_e),e(w_e,LNo),e(H4,yNo),e(H4,cX),e(cX,xNo),e(H4,$No),e(z,kNo),e(z,J4),e(J4,A_e),e(A_e,SNo),e(J4,RNo),e(J4,fX),e(fX,PNo),e(J4,BNo),e(z,INo),e(z,Y4),e(Y4,L_e),e(L_e,NNo),e(Y4,qNo),e(Y4,mX),e(mX,jNo),e(Y4,DNo),e(z,GNo),e(z,K4),e(K4,y_e),e(y_e,ONo),e(K4,VNo),e(K4,gX),e(gX,XNo),e(K4,zNo),e(z,WNo),e(z,Z4),e(Z4,x_e),e(x_e,QNo),e(Z4,UNo),e(Z4,hX),e(hX,HNo),e(Z4,JNo),e(z,YNo),e(z,e2),e(e2,$_e),e($_e,KNo),e(e2,ZNo),e(e2,pX),e(pX,eqo),e(e2,oqo),e(z,rqo),e(z,o2),e(o2,k_e),e(k_e,tqo),e(o2,aqo),e(o2,_X),e(_X,nqo),e(o2,sqo),e(z,lqo),e(z,r2),e(r2,S_e),e(S_e,iqo),e(r2,dqo),e(r2,uX),e(uX,cqo),e(r2,fqo),e(z,mqo),e(z,t2),e(t2,R_e),e(R_e,gqo),e(t2,hqo),e(t2,bX),e(bX,pqo),e(t2,_qo),e(z,uqo),e(z,a2),e(a2,P_e),e(P_e,bqo),e(a2,vqo),e(a2,vX),e(vX,Fqo),e(a2,Tqo),e(z,Mqo),e(z,n2),e(n2,B_e),e(B_e,Eqo),e(n2,Cqo),e(n2,FX),e(FX,wqo),e(n2,Aqo),e(z,Lqo),e(z,s2),e(s2,I_e),e(I_e,yqo),e(s2,xqo),e(s2,TX),e(TX,$qo),e(s2,kqo),e(z,Sqo),e(z,l2),e(l2,N_e),e(N_e,Rqo),e(l2,Pqo),e(l2,MX),e(MX,Bqo),e(l2,Iqo),e(z,Nqo),e(z,i2),e(i2,q_e),e(q_e,qqo),e(i2,jqo),e(i2,EX),e(EX,Dqo),e(i2,Gqo),e(z,Oqo),e(z,d2),e(d2,j_e),e(j_e,Vqo),e(d2,Xqo),e(d2,CX),e(CX,zqo),e(d2,Wqo),e(z,Qqo),e(z,c2),e(c2,D_e),e(D_e,Uqo),e(c2,Hqo),e(c2,wX),e(wX,Jqo),e(c2,Yqo),e(z,Kqo),e(z,f2),e(f2,G_e),e(G_e,Zqo),e(f2,ejo),e(f2,AX),e(AX,ojo),e(f2,rjo),e(z,tjo),e(z,m2),e(m2,O_e),e(O_e,ajo),e(m2,njo),e(m2,LX),e(LX,sjo),e(m2,ljo),e(Ze,ijo),e(Ze,g2),e(g2,djo),e(g2,V_e),e(V_e,cjo),e(g2,fjo),e(g2,X_e),e(X_e,mjo),e(Ze,gjo),M(h2,Ze,null),b(f,dUe,u),b(f,fd,u),e(fd,p2),e(p2,z_e),M(o9,z_e,null),e(fd,hjo),e(fd,W_e),e(W_e,pjo),b(f,cUe,u),b(f,Bo,u),M(r9,Bo,null),e(Bo,_jo),e(Bo,md),e(md,ujo),e(md,yX),e(yX,bjo),e(md,vjo),e(md,xX),e(xX,Fjo),e(md,Tjo),e(Bo,Mjo),e(Bo,t9),e(t9,Ejo),e(t9,Q_e),e(Q_e,Cjo),e(t9,wjo),e(Bo,Ajo),e(Bo,pt),M(a9,pt,null),e(pt,Ljo),e(pt,U_e),e(U_e,yjo),e(pt,xjo),e(pt,gd),e(gd,$jo),e(gd,H_e),e(H_e,kjo),e(gd,Sjo),e(gd,$X),e($X,Rjo),e(gd,Pjo),e(pt,Bjo),M(_2,pt,null),e(Bo,Ijo),e(Bo,eo),M(n9,eo,null),e(eo,Njo),e(eo,J_e),e(J_e,qjo),e(eo,jjo),e(eo,Wa),e(Wa,Djo),e(Wa,Y_e),e(Y_e,Gjo),e(Wa,Ojo),e(Wa,K_e),e(K_e,Vjo),e(Wa,Xjo),e(Wa,Z_e),e(Z_e,zjo),e(Wa,Wjo),e(eo,Qjo),e(eo,U),e(U,u2),e(u2,eue),e(eue,Ujo),e(u2,Hjo),e(u2,kX),e(kX,Jjo),e(u2,Yjo),e(U,Kjo),e(U,b2),e(b2,oue),e(oue,Zjo),e(b2,eDo),e(b2,SX),e(SX,oDo),e(b2,rDo),e(U,tDo),e(U,v2),e(v2,rue),e(rue,aDo),e(v2,nDo),e(v2,RX),e(RX,sDo),e(v2,lDo),e(U,iDo),e(U,F2),e(F2,tue),e(tue,dDo),e(F2,cDo),e(F2,PX),e(PX,fDo),e(F2,mDo),e(U,gDo),e(U,T2),e(T2,aue),e(aue,hDo),e(T2,pDo),e(T2,BX),e(BX,_Do),e(T2,uDo),e(U,bDo),e(U,M2),e(M2,nue),e(nue,vDo),e(M2,FDo),e(M2,IX),e(IX,TDo),e(M2,MDo),e(U,EDo),e(U,E2),e(E2,sue),e(sue,CDo),e(E2,wDo),e(E2,NX),e(NX,ADo),e(E2,LDo),e(U,yDo),e(U,C2),e(C2,lue),e(lue,xDo),e(C2,$Do),e(C2,qX),e(qX,kDo),e(C2,SDo),e(U,RDo),e(U,w2),e(w2,iue),e(iue,PDo),e(w2,BDo),e(w2,jX),e(jX,IDo),e(w2,NDo),e(U,qDo),e(U,A2),e(A2,due),e(due,jDo),e(A2,DDo),e(A2,DX),e(DX,GDo),e(A2,ODo),e(U,VDo),e(U,L2),e(L2,cue),e(cue,XDo),e(L2,zDo),e(L2,GX),e(GX,WDo),e(L2,QDo),e(U,UDo),e(U,y2),e(y2,fue),e(fue,HDo),e(y2,JDo),e(y2,OX),e(OX,YDo),e(y2,KDo),e(U,ZDo),e(U,x2),e(x2,mue),e(mue,eGo),e(x2,oGo),e(x2,VX),e(VX,rGo),e(x2,tGo),e(U,aGo),e(U,$2),e($2,gue),e(gue,nGo),e($2,sGo),e($2,XX),e(XX,lGo),e($2,iGo),e(U,dGo),e(U,k2),e(k2,hue),e(hue,cGo),e(k2,fGo),e(k2,zX),e(zX,mGo),e(k2,gGo),e(U,hGo),e(U,S2),e(S2,pue),e(pue,pGo),e(S2,_Go),e(S2,WX),e(WX,uGo),e(S2,bGo),e(U,vGo),e(U,R2),e(R2,_ue),e(_ue,FGo),e(R2,TGo),e(R2,QX),e(QX,MGo),e(R2,EGo),e(U,CGo),e(U,P2),e(P2,uue),e(uue,wGo),e(P2,AGo),e(P2,UX),e(UX,LGo),e(P2,yGo),e(U,xGo),e(U,B2),e(B2,bue),e(bue,$Go),e(B2,kGo),e(B2,HX),e(HX,SGo),e(B2,RGo),e(U,PGo),e(U,I2),e(I2,vue),e(vue,BGo),e(I2,IGo),e(I2,JX),e(JX,NGo),e(I2,qGo),e(U,jGo),e(U,N2),e(N2,Fue),e(Fue,DGo),e(N2,GGo),e(N2,YX),e(YX,OGo),e(N2,VGo),e(U,XGo),e(U,q2),e(q2,Tue),e(Tue,zGo),e(q2,WGo),e(q2,KX),e(KX,QGo),e(q2,UGo),e(U,HGo),e(U,j2),e(j2,Mue),e(Mue,JGo),e(j2,YGo),e(j2,ZX),e(ZX,KGo),e(j2,ZGo),e(U,eOo),e(U,D2),e(D2,Eue),e(Eue,oOo),e(D2,rOo),e(D2,ez),e(ez,tOo),e(D2,aOo),e(U,nOo),e(U,G2),e(G2,Cue),e(Cue,sOo),e(G2,lOo),e(G2,oz),e(oz,iOo),e(G2,dOo),e(U,cOo),e(U,O2),e(O2,wue),e(wue,fOo),e(O2,mOo),e(O2,rz),e(rz,gOo),e(O2,hOo),e(U,pOo),e(U,V2),e(V2,Aue),e(Aue,_Oo),e(V2,uOo),e(V2,tz),e(tz,bOo),e(V2,vOo),e(U,FOo),e(U,X2),e(X2,Lue),e(Lue,TOo),e(X2,MOo),e(X2,az),e(az,EOo),e(X2,COo),e(U,wOo),e(U,z2),e(z2,yue),e(yue,AOo),e(z2,LOo),e(z2,nz),e(nz,yOo),e(z2,xOo),e(U,$Oo),e(U,W2),e(W2,xue),e(xue,kOo),e(W2,SOo),e(W2,sz),e(sz,ROo),e(W2,POo),e(U,BOo),e(U,Q2),e(Q2,$ue),e($ue,IOo),e(Q2,NOo),e(Q2,lz),e(lz,qOo),e(Q2,jOo),e(U,DOo),e(U,U2),e(U2,kue),e(kue,GOo),e(U2,OOo),e(U2,iz),e(iz,VOo),e(U2,XOo),e(U,zOo),e(U,H2),e(H2,Sue),e(Sue,WOo),e(H2,QOo),e(H2,dz),e(dz,UOo),e(H2,HOo),e(U,JOo),e(U,J2),e(J2,Rue),e(Rue,YOo),e(J2,KOo),e(J2,Pue),e(Pue,ZOo),e(J2,eVo),e(U,oVo),e(U,Y2),e(Y2,Bue),e(Bue,rVo),e(Y2,tVo),e(Y2,cz),e(cz,aVo),e(Y2,nVo),e(U,sVo),e(U,K2),e(K2,Iue),e(Iue,lVo),e(K2,iVo),e(K2,fz),e(fz,dVo),e(K2,cVo),e(U,fVo),e(U,Z2),e(Z2,Nue),e(Nue,mVo),e(Z2,gVo),e(Z2,mz),e(mz,hVo),e(Z2,pVo),e(U,_Vo),e(U,eb),e(eb,que),e(que,uVo),e(eb,bVo),e(eb,gz),e(gz,vVo),e(eb,FVo),e(eo,TVo),e(eo,ob),e(ob,MVo),e(ob,jue),e(jue,EVo),e(ob,CVo),e(ob,Due),e(Due,wVo),e(eo,AVo),M(rb,eo,null),b(f,fUe,u),b(f,hd,u),e(hd,tb),e(tb,Gue),M(s9,Gue,null),e(hd,LVo),e(hd,Oue),e(Oue,yVo),b(f,mUe,u),b(f,Io,u),M(l9,Io,null),e(Io,xVo),e(Io,pd),e(pd,$Vo),e(pd,hz),e(hz,kVo),e(pd,SVo),e(pd,pz),e(pz,RVo),e(pd,PVo),e(Io,BVo),e(Io,i9),e(i9,IVo),e(i9,Vue),e(Vue,NVo),e(i9,qVo),e(Io,jVo),e(Io,_t),M(d9,_t,null),e(_t,DVo),e(_t,Xue),e(Xue,GVo),e(_t,OVo),e(_t,_d),e(_d,VVo),e(_d,zue),e(zue,XVo),e(_d,zVo),e(_d,_z),e(_z,WVo),e(_d,QVo),e(_t,UVo),M(ab,_t,null),e(Io,HVo),e(Io,oo),M(c9,oo,null),e(oo,JVo),e(oo,Wue),e(Wue,YVo),e(oo,KVo),e(oo,Qa),e(Qa,ZVo),e(Qa,Que),e(Que,eXo),e(Qa,oXo),e(Qa,Uue),e(Uue,rXo),e(Qa,tXo),e(Qa,Hue),e(Hue,aXo),e(Qa,nXo),e(oo,sXo),e(oo,me),e(me,nb),e(nb,Jue),e(Jue,lXo),e(nb,iXo),e(nb,uz),e(uz,dXo),e(nb,cXo),e(me,fXo),e(me,sb),e(sb,Yue),e(Yue,mXo),e(sb,gXo),e(sb,bz),e(bz,hXo),e(sb,pXo),e(me,_Xo),e(me,lb),e(lb,Kue),e(Kue,uXo),e(lb,bXo),e(lb,vz),e(vz,vXo),e(lb,FXo),e(me,TXo),e(me,ib),e(ib,Zue),e(Zue,MXo),e(ib,EXo),e(ib,Fz),e(Fz,CXo),e(ib,wXo),e(me,AXo),e(me,db),e(db,e1e),e(e1e,LXo),e(db,yXo),e(db,Tz),e(Tz,xXo),e(db,$Xo),e(me,kXo),e(me,cb),e(cb,o1e),e(o1e,SXo),e(cb,RXo),e(cb,Mz),e(Mz,PXo),e(cb,BXo),e(me,IXo),e(me,fb),e(fb,r1e),e(r1e,NXo),e(fb,qXo),e(fb,Ez),e(Ez,jXo),e(fb,DXo),e(me,GXo),e(me,mb),e(mb,t1e),e(t1e,OXo),e(mb,VXo),e(mb,Cz),e(Cz,XXo),e(mb,zXo),e(me,WXo),e(me,gb),e(gb,a1e),e(a1e,QXo),e(gb,UXo),e(gb,wz),e(wz,HXo),e(gb,JXo),e(me,YXo),e(me,hb),e(hb,n1e),e(n1e,KXo),e(hb,ZXo),e(hb,Az),e(Az,ezo),e(hb,ozo),e(me,rzo),e(me,pb),e(pb,s1e),e(s1e,tzo),e(pb,azo),e(pb,Lz),e(Lz,nzo),e(pb,szo),e(me,lzo),e(me,_b),e(_b,l1e),e(l1e,izo),e(_b,dzo),e(_b,yz),e(yz,czo),e(_b,fzo),e(me,mzo),e(me,ub),e(ub,i1e),e(i1e,gzo),e(ub,hzo),e(ub,xz),e(xz,pzo),e(ub,_zo),e(me,uzo),e(me,bb),e(bb,d1e),e(d1e,bzo),e(bb,vzo),e(bb,$z),e($z,Fzo),e(bb,Tzo),e(me,Mzo),e(me,vb),e(vb,c1e),e(c1e,Ezo),e(vb,Czo),e(vb,kz),e(kz,wzo),e(vb,Azo),e(me,Lzo),e(me,Fb),e(Fb,f1e),e(f1e,yzo),e(Fb,xzo),e(Fb,Sz),e(Sz,$zo),e(Fb,kzo),e(me,Szo),e(me,Tb),e(Tb,m1e),e(m1e,Rzo),e(Tb,Pzo),e(Tb,Rz),e(Rz,Bzo),e(Tb,Izo),e(me,Nzo),e(me,Mb),e(Mb,g1e),e(g1e,qzo),e(Mb,jzo),e(Mb,Pz),e(Pz,Dzo),e(Mb,Gzo),e(me,Ozo),e(me,Eb),e(Eb,h1e),e(h1e,Vzo),e(Eb,Xzo),e(Eb,Bz),e(Bz,zzo),e(Eb,Wzo),e(oo,Qzo),e(oo,Cb),e(Cb,Uzo),e(Cb,p1e),e(p1e,Hzo),e(Cb,Jzo),e(Cb,_1e),e(_1e,Yzo),e(oo,Kzo),M(wb,oo,null),b(f,gUe,u),b(f,ud,u),e(ud,Ab),e(Ab,u1e),M(f9,u1e,null),e(ud,Zzo),e(ud,b1e),e(b1e,eWo),b(f,hUe,u),b(f,No,u),M(m9,No,null),e(No,oWo),e(No,bd),e(bd,rWo),e(bd,Iz),e(Iz,tWo),e(bd,aWo),e(bd,Nz),e(Nz,nWo),e(bd,sWo),e(No,lWo),e(No,g9),e(g9,iWo),e(g9,v1e),e(v1e,dWo),e(g9,cWo),e(No,fWo),e(No,ut),M(h9,ut,null),e(ut,mWo),e(ut,F1e),e(F1e,gWo),e(ut,hWo),e(ut,vd),e(vd,pWo),e(vd,T1e),e(T1e,_Wo),e(vd,uWo),e(vd,qz),e(qz,bWo),e(vd,vWo),e(ut,FWo),M(Lb,ut,null),e(No,TWo),e(No,ro),M(p9,ro,null),e(ro,MWo),e(ro,M1e),e(M1e,EWo),e(ro,CWo),e(ro,Ua),e(Ua,wWo),e(Ua,E1e),e(E1e,AWo),e(Ua,LWo),e(Ua,C1e),e(C1e,yWo),e(Ua,xWo),e(Ua,w1e),e(w1e,$Wo),e(Ua,kWo),e(ro,SWo),e(ro,N),e(N,yb),e(yb,A1e),e(A1e,RWo),e(yb,PWo),e(yb,jz),e(jz,BWo),e(yb,IWo),e(N,NWo),e(N,xb),e(xb,L1e),e(L1e,qWo),e(xb,jWo),e(xb,Dz),e(Dz,DWo),e(xb,GWo),e(N,OWo),e(N,$b),e($b,y1e),e(y1e,VWo),e($b,XWo),e($b,Gz),e(Gz,zWo),e($b,WWo),e(N,QWo),e(N,kb),e(kb,x1e),e(x1e,UWo),e(kb,HWo),e(kb,Oz),e(Oz,JWo),e(kb,YWo),e(N,KWo),e(N,Sb),e(Sb,$1e),e($1e,ZWo),e(Sb,eQo),e(Sb,Vz),e(Vz,oQo),e(Sb,rQo),e(N,tQo),e(N,Rb),e(Rb,k1e),e(k1e,aQo),e(Rb,nQo),e(Rb,Xz),e(Xz,sQo),e(Rb,lQo),e(N,iQo),e(N,Pb),e(Pb,S1e),e(S1e,dQo),e(Pb,cQo),e(Pb,zz),e(zz,fQo),e(Pb,mQo),e(N,gQo),e(N,Bb),e(Bb,R1e),e(R1e,hQo),e(Bb,pQo),e(Bb,Wz),e(Wz,_Qo),e(Bb,uQo),e(N,bQo),e(N,Ib),e(Ib,P1e),e(P1e,vQo),e(Ib,FQo),e(Ib,Qz),e(Qz,TQo),e(Ib,MQo),e(N,EQo),e(N,Nb),e(Nb,B1e),e(B1e,CQo),e(Nb,wQo),e(Nb,Uz),e(Uz,AQo),e(Nb,LQo),e(N,yQo),e(N,qb),e(qb,I1e),e(I1e,xQo),e(qb,$Qo),e(qb,Hz),e(Hz,kQo),e(qb,SQo),e(N,RQo),e(N,jb),e(jb,N1e),e(N1e,PQo),e(jb,BQo),e(jb,Jz),e(Jz,IQo),e(jb,NQo),e(N,qQo),e(N,Db),e(Db,q1e),e(q1e,jQo),e(Db,DQo),e(Db,Yz),e(Yz,GQo),e(Db,OQo),e(N,VQo),e(N,Gb),e(Gb,j1e),e(j1e,XQo),e(Gb,zQo),e(Gb,Kz),e(Kz,WQo),e(Gb,QQo),e(N,UQo),e(N,Ob),e(Ob,D1e),e(D1e,HQo),e(Ob,JQo),e(Ob,Zz),e(Zz,YQo),e(Ob,KQo),e(N,ZQo),e(N,Vb),e(Vb,G1e),e(G1e,eUo),e(Vb,oUo),e(Vb,eW),e(eW,rUo),e(Vb,tUo),e(N,aUo),e(N,Xb),e(Xb,O1e),e(O1e,nUo),e(Xb,sUo),e(Xb,oW),e(oW,lUo),e(Xb,iUo),e(N,dUo),e(N,zb),e(zb,V1e),e(V1e,cUo),e(zb,fUo),e(zb,rW),e(rW,mUo),e(zb,gUo),e(N,hUo),e(N,Wb),e(Wb,X1e),e(X1e,pUo),e(Wb,_Uo),e(Wb,tW),e(tW,uUo),e(Wb,bUo),e(N,vUo),e(N,Qb),e(Qb,z1e),e(z1e,FUo),e(Qb,TUo),e(Qb,aW),e(aW,MUo),e(Qb,EUo),e(N,CUo),e(N,Ub),e(Ub,W1e),e(W1e,wUo),e(Ub,AUo),e(Ub,nW),e(nW,LUo),e(Ub,yUo),e(N,xUo),e(N,Hb),e(Hb,Q1e),e(Q1e,$Uo),e(Hb,kUo),e(Hb,sW),e(sW,SUo),e(Hb,RUo),e(N,PUo),e(N,Jb),e(Jb,U1e),e(U1e,BUo),e(Jb,IUo),e(Jb,lW),e(lW,NUo),e(Jb,qUo),e(N,jUo),e(N,Yb),e(Yb,H1e),e(H1e,DUo),e(Yb,GUo),e(Yb,iW),e(iW,OUo),e(Yb,VUo),e(N,XUo),e(N,Kb),e(Kb,J1e),e(J1e,zUo),e(Kb,WUo),e(Kb,dW),e(dW,QUo),e(Kb,UUo),e(N,HUo),e(N,Zb),e(Zb,Y1e),e(Y1e,JUo),e(Zb,YUo),e(Zb,cW),e(cW,KUo),e(Zb,ZUo),e(N,eHo),e(N,ev),e(ev,K1e),e(K1e,oHo),e(ev,rHo),e(ev,fW),e(fW,tHo),e(ev,aHo),e(N,nHo),e(N,ov),e(ov,Z1e),e(Z1e,sHo),e(ov,lHo),e(ov,mW),e(mW,iHo),e(ov,dHo),e(N,cHo),e(N,rv),e(rv,e4e),e(e4e,fHo),e(rv,mHo),e(rv,gW),e(gW,gHo),e(rv,hHo),e(N,pHo),e(N,tv),e(tv,o4e),e(o4e,_Ho),e(tv,uHo),e(tv,hW),e(hW,bHo),e(tv,vHo),e(N,FHo),e(N,av),e(av,r4e),e(r4e,THo),e(av,MHo),e(av,pW),e(pW,EHo),e(av,CHo),e(N,wHo),e(N,nv),e(nv,t4e),e(t4e,AHo),e(nv,LHo),e(nv,_W),e(_W,yHo),e(nv,xHo),e(N,$Ho),e(N,sv),e(sv,a4e),e(a4e,kHo),e(sv,SHo),e(sv,uW),e(uW,RHo),e(sv,PHo),e(N,BHo),e(N,lv),e(lv,n4e),e(n4e,IHo),e(lv,NHo),e(lv,bW),e(bW,qHo),e(lv,jHo),e(N,DHo),e(N,iv),e(iv,s4e),e(s4e,GHo),e(iv,OHo),e(iv,vW),e(vW,VHo),e(iv,XHo),e(N,zHo),e(N,dv),e(dv,l4e),e(l4e,WHo),e(dv,QHo),e(dv,FW),e(FW,UHo),e(dv,HHo),e(N,JHo),e(N,cv),e(cv,i4e),e(i4e,YHo),e(cv,KHo),e(cv,TW),e(TW,ZHo),e(cv,eJo),e(N,oJo),e(N,fv),e(fv,d4e),e(d4e,rJo),e(fv,tJo),e(fv,MW),e(MW,aJo),e(fv,nJo),e(N,sJo),e(N,mv),e(mv,c4e),e(c4e,lJo),e(mv,iJo),e(mv,EW),e(EW,dJo),e(mv,cJo),e(N,fJo),e(N,gv),e(gv,f4e),e(f4e,mJo),e(gv,gJo),e(gv,CW),e(CW,hJo),e(gv,pJo),e(N,_Jo),e(N,hv),e(hv,m4e),e(m4e,uJo),e(hv,bJo),e(hv,wW),e(wW,vJo),e(hv,FJo),e(N,TJo),e(N,pv),e(pv,g4e),e(g4e,MJo),e(pv,EJo),e(pv,AW),e(AW,CJo),e(pv,wJo),e(N,AJo),e(N,_v),e(_v,h4e),e(h4e,LJo),e(_v,yJo),e(_v,LW),e(LW,xJo),e(_v,$Jo),e(N,kJo),e(N,uv),e(uv,p4e),e(p4e,SJo),e(uv,RJo),e(uv,yW),e(yW,PJo),e(uv,BJo),e(N,IJo),e(N,bv),e(bv,_4e),e(_4e,NJo),e(bv,qJo),e(bv,xW),e(xW,jJo),e(bv,DJo),e(N,GJo),e(N,vv),e(vv,u4e),e(u4e,OJo),e(vv,VJo),e(vv,$W),e($W,XJo),e(vv,zJo),e(N,WJo),e(N,Fv),e(Fv,b4e),e(b4e,QJo),e(Fv,UJo),e(Fv,kW),e(kW,HJo),e(Fv,JJo),e(N,YJo),e(N,Tv),e(Tv,v4e),e(v4e,KJo),e(Tv,ZJo),e(Tv,SW),e(SW,eYo),e(Tv,oYo),e(N,rYo),e(N,Mv),e(Mv,F4e),e(F4e,tYo),e(Mv,aYo),e(Mv,RW),e(RW,nYo),e(Mv,sYo),e(N,lYo),e(N,Ev),e(Ev,T4e),e(T4e,iYo),e(Ev,dYo),e(Ev,PW),e(PW,cYo),e(Ev,fYo),e(N,mYo),e(N,Cv),e(Cv,M4e),e(M4e,gYo),e(Cv,hYo),e(Cv,BW),e(BW,pYo),e(Cv,_Yo),e(N,uYo),e(N,wv),e(wv,E4e),e(E4e,bYo),e(wv,vYo),e(wv,IW),e(IW,FYo),e(wv,TYo),e(ro,MYo),e(ro,Av),e(Av,EYo),e(Av,C4e),e(C4e,CYo),e(Av,wYo),e(Av,w4e),e(w4e,AYo),e(ro,LYo),M(Lv,ro,null),b(f,pUe,u),b(f,Fd,u),e(Fd,yv),e(yv,A4e),M(_9,A4e,null),e(Fd,yYo),e(Fd,L4e),e(L4e,xYo),b(f,_Ue,u),b(f,qo,u),M(u9,qo,null),e(qo,$Yo),e(qo,Td),e(Td,kYo),e(Td,NW),e(NW,SYo),e(Td,RYo),e(Td,qW),e(qW,PYo),e(Td,BYo),e(qo,IYo),e(qo,b9),e(b9,NYo),e(b9,y4e),e(y4e,qYo),e(b9,jYo),e(qo,DYo),e(qo,bt),M(v9,bt,null),e(bt,GYo),e(bt,x4e),e(x4e,OYo),e(bt,VYo),e(bt,Md),e(Md,XYo),e(Md,$4e),e($4e,zYo),e(Md,WYo),e(Md,jW),e(jW,QYo),e(Md,UYo),e(bt,HYo),M(xv,bt,null),e(qo,JYo),e(qo,to),M(F9,to,null),e(to,YYo),e(to,k4e),e(k4e,KYo),e(to,ZYo),e(to,Ha),e(Ha,eKo),e(Ha,S4e),e(S4e,oKo),e(Ha,rKo),e(Ha,R4e),e(R4e,tKo),e(Ha,aKo),e(Ha,P4e),e(P4e,nKo),e(Ha,sKo),e(to,lKo),e(to,Z),e(Z,$v),e($v,B4e),e(B4e,iKo),e($v,dKo),e($v,DW),e(DW,cKo),e($v,fKo),e(Z,mKo),e(Z,kv),e(kv,I4e),e(I4e,gKo),e(kv,hKo),e(kv,GW),e(GW,pKo),e(kv,_Ko),e(Z,uKo),e(Z,Sv),e(Sv,N4e),e(N4e,bKo),e(Sv,vKo),e(Sv,OW),e(OW,FKo),e(Sv,TKo),e(Z,MKo),e(Z,Rv),e(Rv,q4e),e(q4e,EKo),e(Rv,CKo),e(Rv,VW),e(VW,wKo),e(Rv,AKo),e(Z,LKo),e(Z,Pv),e(Pv,j4e),e(j4e,yKo),e(Pv,xKo),e(Pv,XW),e(XW,$Ko),e(Pv,kKo),e(Z,SKo),e(Z,Bv),e(Bv,D4e),e(D4e,RKo),e(Bv,PKo),e(Bv,zW),e(zW,BKo),e(Bv,IKo),e(Z,NKo),e(Z,Iv),e(Iv,G4e),e(G4e,qKo),e(Iv,jKo),e(Iv,WW),e(WW,DKo),e(Iv,GKo),e(Z,OKo),e(Z,Nv),e(Nv,O4e),e(O4e,VKo),e(Nv,XKo),e(Nv,QW),e(QW,zKo),e(Nv,WKo),e(Z,QKo),e(Z,qv),e(qv,V4e),e(V4e,UKo),e(qv,HKo),e(qv,UW),e(UW,JKo),e(qv,YKo),e(Z,KKo),e(Z,jv),e(jv,X4e),e(X4e,ZKo),e(jv,eZo),e(jv,HW),e(HW,oZo),e(jv,rZo),e(Z,tZo),e(Z,Dv),e(Dv,z4e),e(z4e,aZo),e(Dv,nZo),e(Dv,JW),e(JW,sZo),e(Dv,lZo),e(Z,iZo),e(Z,Gv),e(Gv,W4e),e(W4e,dZo),e(Gv,cZo),e(Gv,YW),e(YW,fZo),e(Gv,mZo),e(Z,gZo),e(Z,Ov),e(Ov,Q4e),e(Q4e,hZo),e(Ov,pZo),e(Ov,KW),e(KW,_Zo),e(Ov,uZo),e(Z,bZo),e(Z,Vv),e(Vv,U4e),e(U4e,vZo),e(Vv,FZo),e(Vv,ZW),e(ZW,TZo),e(Vv,MZo),e(Z,EZo),e(Z,Xv),e(Xv,H4e),e(H4e,CZo),e(Xv,wZo),e(Xv,eQ),e(eQ,AZo),e(Xv,LZo),e(Z,yZo),e(Z,zv),e(zv,J4e),e(J4e,xZo),e(zv,$Zo),e(zv,oQ),e(oQ,kZo),e(zv,SZo),e(Z,RZo),e(Z,Wv),e(Wv,Y4e),e(Y4e,PZo),e(Wv,BZo),e(Wv,rQ),e(rQ,IZo),e(Wv,NZo),e(Z,qZo),e(Z,Qv),e(Qv,K4e),e(K4e,jZo),e(Qv,DZo),e(Qv,tQ),e(tQ,GZo),e(Qv,OZo),e(Z,VZo),e(Z,Uv),e(Uv,Z4e),e(Z4e,XZo),e(Uv,zZo),e(Uv,aQ),e(aQ,WZo),e(Uv,QZo),e(Z,UZo),e(Z,Hv),e(Hv,e2e),e(e2e,HZo),e(Hv,JZo),e(Hv,nQ),e(nQ,YZo),e(Hv,KZo),e(Z,ZZo),e(Z,Jv),e(Jv,o2e),e(o2e,eer),e(Jv,oer),e(Jv,sQ),e(sQ,rer),e(Jv,ter),e(Z,aer),e(Z,Yv),e(Yv,r2e),e(r2e,ner),e(Yv,ser),e(Yv,lQ),e(lQ,ler),e(Yv,ier),e(Z,der),e(Z,Kv),e(Kv,t2e),e(t2e,cer),e(Kv,fer),e(Kv,iQ),e(iQ,mer),e(Kv,ger),e(Z,her),e(Z,Zv),e(Zv,a2e),e(a2e,per),e(Zv,_er),e(Zv,dQ),e(dQ,uer),e(Zv,ber),e(Z,ver),e(Z,e5),e(e5,n2e),e(n2e,Fer),e(e5,Ter),e(e5,cQ),e(cQ,Mer),e(e5,Eer),e(Z,Cer),e(Z,o5),e(o5,s2e),e(s2e,wer),e(o5,Aer),e(o5,fQ),e(fQ,Ler),e(o5,yer),e(Z,xer),e(Z,r5),e(r5,l2e),e(l2e,$er),e(r5,ker),e(r5,mQ),e(mQ,Ser),e(r5,Rer),e(Z,Per),e(Z,t5),e(t5,i2e),e(i2e,Ber),e(t5,Ier),e(t5,gQ),e(gQ,Ner),e(t5,qer),e(Z,jer),e(Z,a5),e(a5,d2e),e(d2e,Der),e(a5,Ger),e(a5,hQ),e(hQ,Oer),e(a5,Ver),e(Z,Xer),e(Z,n5),e(n5,c2e),e(c2e,zer),e(n5,Wer),e(n5,pQ),e(pQ,Qer),e(n5,Uer),e(Z,Her),e(Z,s5),e(s5,f2e),e(f2e,Jer),e(s5,Yer),e(s5,_Q),e(_Q,Ker),e(s5,Zer),e(to,eor),e(to,l5),e(l5,oor),e(l5,m2e),e(m2e,ror),e(l5,tor),e(l5,g2e),e(g2e,aor),e(to,nor),M(i5,to,null),b(f,uUe,u),b(f,Ed,u),e(Ed,d5),e(d5,h2e),M(T9,h2e,null),e(Ed,sor),e(Ed,p2e),e(p2e,lor),b(f,bUe,u),b(f,jo,u),M(M9,jo,null),e(jo,ior),e(jo,Cd),e(Cd,dor),e(Cd,uQ),e(uQ,cor),e(Cd,mor),e(Cd,bQ),e(bQ,gor),e(Cd,hor),e(jo,por),e(jo,E9),e(E9,_or),e(E9,_2e),e(_2e,uor),e(E9,bor),e(jo,vor),e(jo,vt),M(C9,vt,null),e(vt,For),e(vt,u2e),e(u2e,Tor),e(vt,Mor),e(vt,wd),e(wd,Eor),e(wd,b2e),e(b2e,Cor),e(wd,wor),e(wd,vQ),e(vQ,Aor),e(wd,Lor),e(vt,yor),M(c5,vt,null),e(jo,xor),e(jo,ao),M(w9,ao,null),e(ao,$or),e(ao,v2e),e(v2e,kor),e(ao,Sor),e(ao,Ja),e(Ja,Ror),e(Ja,F2e),e(F2e,Por),e(Ja,Bor),e(Ja,T2e),e(T2e,Ior),e(Ja,Nor),e(Ja,M2e),e(M2e,qor),e(Ja,jor),e(ao,Dor),e(ao,Do),e(Do,f5),e(f5,E2e),e(E2e,Gor),e(f5,Oor),e(f5,FQ),e(FQ,Vor),e(f5,Xor),e(Do,zor),e(Do,m5),e(m5,C2e),e(C2e,Wor),e(m5,Qor),e(m5,TQ),e(TQ,Uor),e(m5,Hor),e(Do,Jor),e(Do,g5),e(g5,w2e),e(w2e,Yor),e(g5,Kor),e(g5,MQ),e(MQ,Zor),e(g5,err),e(Do,orr),e(Do,h5),e(h5,A2e),e(A2e,rrr),e(h5,trr),e(h5,EQ),e(EQ,arr),e(h5,nrr),e(Do,srr),e(Do,p5),e(p5,L2e),e(L2e,lrr),e(p5,irr),e(p5,CQ),e(CQ,drr),e(p5,crr),e(Do,frr),e(Do,_5),e(_5,y2e),e(y2e,mrr),e(_5,grr),e(_5,wQ),e(wQ,hrr),e(_5,prr),e(ao,_rr),e(ao,u5),e(u5,urr),e(u5,x2e),e(x2e,brr),e(u5,vrr),e(u5,$2e),e($2e,Frr),e(ao,Trr),M(b5,ao,null),b(f,vUe,u),b(f,Ad,u),e(Ad,v5),e(v5,k2e),M(A9,k2e,null),e(Ad,Mrr),e(Ad,S2e),e(S2e,Err),b(f,FUe,u),b(f,Go,u),M(L9,Go,null),e(Go,Crr),e(Go,Ld),e(Ld,wrr),e(Ld,AQ),e(AQ,Arr),e(Ld,Lrr),e(Ld,LQ),e(LQ,yrr),e(Ld,xrr),e(Go,$rr),e(Go,y9),e(y9,krr),e(y9,R2e),e(R2e,Srr),e(y9,Rrr),e(Go,Prr),e(Go,Ft),M(x9,Ft,null),e(Ft,Brr),e(Ft,P2e),e(P2e,Irr),e(Ft,Nrr),e(Ft,yd),e(yd,qrr),e(yd,B2e),e(B2e,jrr),e(yd,Drr),e(yd,yQ),e(yQ,Grr),e(yd,Orr),e(Ft,Vrr),M(F5,Ft,null),e(Go,Xrr),e(Go,no),M($9,no,null),e(no,zrr),e(no,I2e),e(I2e,Wrr),e(no,Qrr),e(no,Ya),e(Ya,Urr),e(Ya,N2e),e(N2e,Hrr),e(Ya,Jrr),e(Ya,q2e),e(q2e,Yrr),e(Ya,Krr),e(Ya,j2e),e(j2e,Zrr),e(Ya,etr),e(no,otr),e(no,H),e(H,T5),e(T5,D2e),e(D2e,rtr),e(T5,ttr),e(T5,xQ),e(xQ,atr),e(T5,ntr),e(H,str),e(H,M5),e(M5,G2e),e(G2e,ltr),e(M5,itr),e(M5,$Q),e($Q,dtr),e(M5,ctr),e(H,ftr),e(H,E5),e(E5,O2e),e(O2e,mtr),e(E5,gtr),e(E5,kQ),e(kQ,htr),e(E5,ptr),e(H,_tr),e(H,C5),e(C5,V2e),e(V2e,utr),e(C5,btr),e(C5,SQ),e(SQ,vtr),e(C5,Ftr),e(H,Ttr),e(H,w5),e(w5,X2e),e(X2e,Mtr),e(w5,Etr),e(w5,RQ),e(RQ,Ctr),e(w5,wtr),e(H,Atr),e(H,A5),e(A5,z2e),e(z2e,Ltr),e(A5,ytr),e(A5,PQ),e(PQ,xtr),e(A5,$tr),e(H,ktr),e(H,L5),e(L5,W2e),e(W2e,Str),e(L5,Rtr),e(L5,BQ),e(BQ,Ptr),e(L5,Btr),e(H,Itr),e(H,y5),e(y5,Q2e),e(Q2e,Ntr),e(y5,qtr),e(y5,IQ),e(IQ,jtr),e(y5,Dtr),e(H,Gtr),e(H,x5),e(x5,U2e),e(U2e,Otr),e(x5,Vtr),e(x5,NQ),e(NQ,Xtr),e(x5,ztr),e(H,Wtr),e(H,$5),e($5,H2e),e(H2e,Qtr),e($5,Utr),e($5,qQ),e(qQ,Htr),e($5,Jtr),e(H,Ytr),e(H,k5),e(k5,J2e),e(J2e,Ktr),e(k5,Ztr),e(k5,jQ),e(jQ,ear),e(k5,oar),e(H,rar),e(H,S5),e(S5,Y2e),e(Y2e,tar),e(S5,aar),e(S5,DQ),e(DQ,nar),e(S5,sar),e(H,lar),e(H,R5),e(R5,K2e),e(K2e,iar),e(R5,dar),e(R5,GQ),e(GQ,car),e(R5,far),e(H,mar),e(H,P5),e(P5,Z2e),e(Z2e,gar),e(P5,har),e(P5,OQ),e(OQ,par),e(P5,_ar),e(H,uar),e(H,B5),e(B5,ebe),e(ebe,bar),e(B5,Far),e(B5,VQ),e(VQ,Tar),e(B5,Mar),e(H,Ear),e(H,I5),e(I5,obe),e(obe,Car),e(I5,war),e(I5,XQ),e(XQ,Aar),e(I5,Lar),e(H,yar),e(H,N5),e(N5,rbe),e(rbe,xar),e(N5,$ar),e(N5,zQ),e(zQ,kar),e(N5,Sar),e(H,Rar),e(H,q5),e(q5,tbe),e(tbe,Par),e(q5,Bar),e(q5,WQ),e(WQ,Iar),e(q5,Nar),e(H,qar),e(H,j5),e(j5,abe),e(abe,jar),e(j5,Dar),e(j5,QQ),e(QQ,Gar),e(j5,Oar),e(H,Var),e(H,D5),e(D5,nbe),e(nbe,Xar),e(D5,zar),e(D5,UQ),e(UQ,War),e(D5,Qar),e(H,Uar),e(H,G5),e(G5,sbe),e(sbe,Har),e(G5,Jar),e(G5,HQ),e(HQ,Yar),e(G5,Kar),e(H,Zar),e(H,O5),e(O5,lbe),e(lbe,enr),e(O5,onr),e(O5,JQ),e(JQ,rnr),e(O5,tnr),e(H,anr),e(H,V5),e(V5,ibe),e(ibe,nnr),e(V5,snr),e(V5,YQ),e(YQ,lnr),e(V5,inr),e(H,dnr),e(H,X5),e(X5,dbe),e(dbe,cnr),e(X5,fnr),e(X5,KQ),e(KQ,mnr),e(X5,gnr),e(H,hnr),e(H,z5),e(z5,cbe),e(cbe,pnr),e(z5,_nr),e(z5,ZQ),e(ZQ,unr),e(z5,bnr),e(H,vnr),e(H,W5),e(W5,fbe),e(fbe,Fnr),e(W5,Tnr),e(W5,eU),e(eU,Mnr),e(W5,Enr),e(H,Cnr),e(H,Q5),e(Q5,mbe),e(mbe,wnr),e(Q5,Anr),e(Q5,oU),e(oU,Lnr),e(Q5,ynr),e(H,xnr),e(H,U5),e(U5,gbe),e(gbe,$nr),e(U5,knr),e(U5,rU),e(rU,Snr),e(U5,Rnr),e(H,Pnr),e(H,H5),e(H5,hbe),e(hbe,Bnr),e(H5,Inr),e(H5,tU),e(tU,Nnr),e(H5,qnr),e(H,jnr),e(H,J5),e(J5,pbe),e(pbe,Dnr),e(J5,Gnr),e(J5,aU),e(aU,Onr),e(J5,Vnr),e(H,Xnr),e(H,Y5),e(Y5,_be),e(_be,znr),e(Y5,Wnr),e(Y5,nU),e(nU,Qnr),e(Y5,Unr),e(H,Hnr),e(H,K5),e(K5,ube),e(ube,Jnr),e(K5,Ynr),e(K5,sU),e(sU,Knr),e(K5,Znr),e(H,esr),e(H,Z5),e(Z5,bbe),e(bbe,osr),e(Z5,rsr),e(Z5,lU),e(lU,tsr),e(Z5,asr),e(H,nsr),e(H,e0),e(e0,vbe),e(vbe,ssr),e(e0,lsr),e(e0,iU),e(iU,isr),e(e0,dsr),e(H,csr),e(H,o0),e(o0,Fbe),e(Fbe,fsr),e(o0,msr),e(o0,dU),e(dU,gsr),e(o0,hsr),e(H,psr),e(H,r0),e(r0,Tbe),e(Tbe,_sr),e(r0,usr),e(r0,cU),e(cU,bsr),e(r0,vsr),e(H,Fsr),e(H,t0),e(t0,Mbe),e(Mbe,Tsr),e(t0,Msr),e(t0,fU),e(fU,Esr),e(t0,Csr),e(no,wsr),e(no,a0),e(a0,Asr),e(a0,Ebe),e(Ebe,Lsr),e(a0,ysr),e(a0,Cbe),e(Cbe,xsr),e(no,$sr),M(n0,no,null),b(f,TUe,u),b(f,xd,u),e(xd,s0),e(s0,wbe),M(k9,wbe,null),e(xd,ksr),e(xd,Abe),e(Abe,Ssr),b(f,MUe,u),b(f,Oo,u),M(S9,Oo,null),e(Oo,Rsr),e(Oo,$d),e($d,Psr),e($d,mU),e(mU,Bsr),e($d,Isr),e($d,gU),e(gU,Nsr),e($d,qsr),e(Oo,jsr),e(Oo,R9),e(R9,Dsr),e(R9,Lbe),e(Lbe,Gsr),e(R9,Osr),e(Oo,Vsr),e(Oo,Tt),M(P9,Tt,null),e(Tt,Xsr),e(Tt,ybe),e(ybe,zsr),e(Tt,Wsr),e(Tt,kd),e(kd,Qsr),e(kd,xbe),e(xbe,Usr),e(kd,Hsr),e(kd,hU),e(hU,Jsr),e(kd,Ysr),e(Tt,Ksr),M(l0,Tt,null),e(Oo,Zsr),e(Oo,so),M(B9,so,null),e(so,elr),e(so,$be),e($be,olr),e(so,rlr),e(so,Ka),e(Ka,tlr),e(Ka,kbe),e(kbe,alr),e(Ka,nlr),e(Ka,Sbe),e(Sbe,slr),e(Ka,llr),e(Ka,Rbe),e(Rbe,ilr),e(Ka,dlr),e(so,clr),e(so,V),e(V,i0),e(i0,Pbe),e(Pbe,flr),e(i0,mlr),e(i0,pU),e(pU,glr),e(i0,hlr),e(V,plr),e(V,d0),e(d0,Bbe),e(Bbe,_lr),e(d0,ulr),e(d0,_U),e(_U,blr),e(d0,vlr),e(V,Flr),e(V,c0),e(c0,Ibe),e(Ibe,Tlr),e(c0,Mlr),e(c0,uU),e(uU,Elr),e(c0,Clr),e(V,wlr),e(V,f0),e(f0,Nbe),e(Nbe,Alr),e(f0,Llr),e(f0,bU),e(bU,ylr),e(f0,xlr),e(V,$lr),e(V,m0),e(m0,qbe),e(qbe,klr),e(m0,Slr),e(m0,vU),e(vU,Rlr),e(m0,Plr),e(V,Blr),e(V,g0),e(g0,jbe),e(jbe,Ilr),e(g0,Nlr),e(g0,FU),e(FU,qlr),e(g0,jlr),e(V,Dlr),e(V,h0),e(h0,Dbe),e(Dbe,Glr),e(h0,Olr),e(h0,TU),e(TU,Vlr),e(h0,Xlr),e(V,zlr),e(V,p0),e(p0,Gbe),e(Gbe,Wlr),e(p0,Qlr),e(p0,MU),e(MU,Ulr),e(p0,Hlr),e(V,Jlr),e(V,_0),e(_0,Obe),e(Obe,Ylr),e(_0,Klr),e(_0,EU),e(EU,Zlr),e(_0,eir),e(V,oir),e(V,u0),e(u0,Vbe),e(Vbe,rir),e(u0,tir),e(u0,CU),e(CU,air),e(u0,nir),e(V,sir),e(V,b0),e(b0,Xbe),e(Xbe,lir),e(b0,iir),e(b0,wU),e(wU,dir),e(b0,cir),e(V,fir),e(V,v0),e(v0,zbe),e(zbe,mir),e(v0,gir),e(v0,AU),e(AU,hir),e(v0,pir),e(V,_ir),e(V,F0),e(F0,Wbe),e(Wbe,uir),e(F0,bir),e(F0,LU),e(LU,vir),e(F0,Fir),e(V,Tir),e(V,T0),e(T0,Qbe),e(Qbe,Mir),e(T0,Eir),e(T0,yU),e(yU,Cir),e(T0,wir),e(V,Air),e(V,M0),e(M0,Ube),e(Ube,Lir),e(M0,yir),e(M0,xU),e(xU,xir),e(M0,$ir),e(V,kir),e(V,E0),e(E0,Hbe),e(Hbe,Sir),e(E0,Rir),e(E0,$U),e($U,Pir),e(E0,Bir),e(V,Iir),e(V,C0),e(C0,Jbe),e(Jbe,Nir),e(C0,qir),e(C0,kU),e(kU,jir),e(C0,Dir),e(V,Gir),e(V,w0),e(w0,Ybe),e(Ybe,Oir),e(w0,Vir),e(w0,SU),e(SU,Xir),e(w0,zir),e(V,Wir),e(V,A0),e(A0,Kbe),e(Kbe,Qir),e(A0,Uir),e(A0,RU),e(RU,Hir),e(A0,Jir),e(V,Yir),e(V,L0),e(L0,Zbe),e(Zbe,Kir),e(L0,Zir),e(L0,PU),e(PU,edr),e(L0,odr),e(V,rdr),e(V,y0),e(y0,eve),e(eve,tdr),e(y0,adr),e(y0,BU),e(BU,ndr),e(y0,sdr),e(V,ldr),e(V,x0),e(x0,ove),e(ove,idr),e(x0,ddr),e(x0,IU),e(IU,cdr),e(x0,fdr),e(V,mdr),e(V,$0),e($0,rve),e(rve,gdr),e($0,hdr),e($0,NU),e(NU,pdr),e($0,_dr),e(V,udr),e(V,k0),e(k0,tve),e(tve,bdr),e(k0,vdr),e(k0,qU),e(qU,Fdr),e(k0,Tdr),e(V,Mdr),e(V,S0),e(S0,ave),e(ave,Edr),e(S0,Cdr),e(S0,jU),e(jU,wdr),e(S0,Adr),e(V,Ldr),e(V,R0),e(R0,nve),e(nve,ydr),e(R0,xdr),e(R0,DU),e(DU,$dr),e(R0,kdr),e(V,Sdr),e(V,P0),e(P0,sve),e(sve,Rdr),e(P0,Pdr),e(P0,GU),e(GU,Bdr),e(P0,Idr),e(V,Ndr),e(V,B0),e(B0,lve),e(lve,qdr),e(B0,jdr),e(B0,OU),e(OU,Ddr),e(B0,Gdr),e(V,Odr),e(V,I0),e(I0,ive),e(ive,Vdr),e(I0,Xdr),e(I0,VU),e(VU,zdr),e(I0,Wdr),e(V,Qdr),e(V,N0),e(N0,dve),e(dve,Udr),e(N0,Hdr),e(N0,XU),e(XU,Jdr),e(N0,Ydr),e(V,Kdr),e(V,q0),e(q0,cve),e(cve,Zdr),e(q0,ecr),e(q0,zU),e(zU,ocr),e(q0,rcr),e(V,tcr),e(V,j0),e(j0,fve),e(fve,acr),e(j0,ncr),e(j0,WU),e(WU,scr),e(j0,lcr),e(V,icr),e(V,D0),e(D0,mve),e(mve,dcr),e(D0,ccr),e(D0,QU),e(QU,fcr),e(D0,mcr),e(V,gcr),e(V,G0),e(G0,gve),e(gve,hcr),e(G0,pcr),e(G0,UU),e(UU,_cr),e(G0,ucr),e(V,bcr),e(V,O0),e(O0,hve),e(hve,vcr),e(O0,Fcr),e(O0,HU),e(HU,Tcr),e(O0,Mcr),e(V,Ecr),e(V,V0),e(V0,pve),e(pve,Ccr),e(V0,wcr),e(V0,JU),e(JU,Acr),e(V0,Lcr),e(V,ycr),e(V,X0),e(X0,_ve),e(_ve,xcr),e(X0,$cr),e(X0,YU),e(YU,kcr),e(X0,Scr),e(V,Rcr),e(V,z0),e(z0,uve),e(uve,Pcr),e(z0,Bcr),e(z0,KU),e(KU,Icr),e(z0,Ncr),e(V,qcr),e(V,W0),e(W0,bve),e(bve,jcr),e(W0,Dcr),e(W0,ZU),e(ZU,Gcr),e(W0,Ocr),e(V,Vcr),e(V,Q0),e(Q0,vve),e(vve,Xcr),e(Q0,zcr),e(Q0,eH),e(eH,Wcr),e(Q0,Qcr),e(V,Ucr),e(V,U0),e(U0,Fve),e(Fve,Hcr),e(U0,Jcr),e(U0,oH),e(oH,Ycr),e(U0,Kcr),e(V,Zcr),e(V,H0),e(H0,Tve),e(Tve,efr),e(H0,ofr),e(H0,rH),e(rH,rfr),e(H0,tfr),e(V,afr),e(V,J0),e(J0,Mve),e(Mve,nfr),e(J0,sfr),e(J0,tH),e(tH,lfr),e(J0,ifr),e(so,dfr),e(so,Y0),e(Y0,cfr),e(Y0,Eve),e(Eve,ffr),e(Y0,mfr),e(Y0,Cve),e(Cve,gfr),e(so,hfr),M(K0,so,null),b(f,EUe,u),b(f,Sd,u),e(Sd,Z0),e(Z0,wve),M(I9,wve,null),e(Sd,pfr),e(Sd,Ave),e(Ave,_fr),b(f,CUe,u),b(f,Vo,u),M(N9,Vo,null),e(Vo,ufr),e(Vo,Rd),e(Rd,bfr),e(Rd,aH),e(aH,vfr),e(Rd,Ffr),e(Rd,nH),e(nH,Tfr),e(Rd,Mfr),e(Vo,Efr),e(Vo,q9),e(q9,Cfr),e(q9,Lve),e(Lve,wfr),e(q9,Afr),e(Vo,Lfr),e(Vo,Mt),M(j9,Mt,null),e(Mt,yfr),e(Mt,yve),e(yve,xfr),e(Mt,$fr),e(Mt,Pd),e(Pd,kfr),e(Pd,xve),e(xve,Sfr),e(Pd,Rfr),e(Pd,sH),e(sH,Pfr),e(Pd,Bfr),e(Mt,Ifr),M(eF,Mt,null),e(Vo,Nfr),e(Vo,lo),M(D9,lo,null),e(lo,qfr),e(lo,$ve),e($ve,jfr),e(lo,Dfr),e(lo,Za),e(Za,Gfr),e(Za,kve),e(kve,Ofr),e(Za,Vfr),e(Za,Sve),e(Sve,Xfr),e(Za,zfr),e(Za,Rve),e(Rve,Wfr),e(Za,Qfr),e(lo,Ufr),e(lo,Pve),e(Pve,oF),e(oF,Bve),e(Bve,Hfr),e(oF,Jfr),e(oF,lH),e(lH,Yfr),e(oF,Kfr),e(lo,Zfr),e(lo,rF),e(rF,emr),e(rF,Ive),e(Ive,omr),e(rF,rmr),e(rF,Nve),e(Nve,tmr),e(lo,amr),M(tF,lo,null),b(f,wUe,u),b(f,Bd,u),e(Bd,aF),e(aF,qve),M(G9,qve,null),e(Bd,nmr),e(Bd,jve),e(jve,smr),b(f,AUe,u),b(f,Xo,u),M(O9,Xo,null),e(Xo,lmr),e(Xo,Id),e(Id,imr),e(Id,iH),e(iH,dmr),e(Id,cmr),e(Id,dH),e(dH,fmr),e(Id,mmr),e(Xo,gmr),e(Xo,V9),e(V9,hmr),e(V9,Dve),e(Dve,pmr),e(V9,_mr),e(Xo,umr),e(Xo,Et),M(X9,Et,null),e(Et,bmr),e(Et,Gve),e(Gve,vmr),e(Et,Fmr),e(Et,Nd),e(Nd,Tmr),e(Nd,Ove),e(Ove,Mmr),e(Nd,Emr),e(Nd,cH),e(cH,Cmr),e(Nd,wmr),e(Et,Amr),M(nF,Et,null),e(Xo,Lmr),e(Xo,io),M(z9,io,null),e(io,ymr),e(io,Vve),e(Vve,xmr),e(io,$mr),e(io,en),e(en,kmr),e(en,Xve),e(Xve,Smr),e(en,Rmr),e(en,zve),e(zve,Pmr),e(en,Bmr),e(en,Wve),e(Wve,Imr),e(en,Nmr),e(io,qmr),e(io,be),e(be,sF),e(sF,Qve),e(Qve,jmr),e(sF,Dmr),e(sF,fH),e(fH,Gmr),e(sF,Omr),e(be,Vmr),e(be,lF),e(lF,Uve),e(Uve,Xmr),e(lF,zmr),e(lF,mH),e(mH,Wmr),e(lF,Qmr),e(be,Umr),e(be,iF),e(iF,Hve),e(Hve,Hmr),e(iF,Jmr),e(iF,gH),e(gH,Ymr),e(iF,Kmr),e(be,Zmr),e(be,dF),e(dF,Jve),e(Jve,egr),e(dF,ogr),e(dF,hH),e(hH,rgr),e(dF,tgr),e(be,agr),e(be,sl),e(sl,Yve),e(Yve,ngr),e(sl,sgr),e(sl,pH),e(pH,lgr),e(sl,igr),e(sl,_H),e(_H,dgr),e(sl,cgr),e(be,fgr),e(be,cF),e(cF,Kve),e(Kve,mgr),e(cF,ggr),e(cF,uH),e(uH,hgr),e(cF,pgr),e(be,_gr),e(be,ll),e(ll,Zve),e(Zve,ugr),e(ll,bgr),e(ll,bH),e(bH,vgr),e(ll,Fgr),e(ll,vH),e(vH,Tgr),e(ll,Mgr),e(be,Egr),e(be,fF),e(fF,e5e),e(e5e,Cgr),e(fF,wgr),e(fF,FH),e(FH,Agr),e(fF,Lgr),e(be,ygr),e(be,Ct),e(Ct,o5e),e(o5e,xgr),e(Ct,$gr),e(Ct,TH),e(TH,kgr),e(Ct,Sgr),e(Ct,MH),e(MH,Rgr),e(Ct,Pgr),e(Ct,EH),e(EH,Bgr),e(Ct,Igr),e(be,Ngr),e(be,mF),e(mF,r5e),e(r5e,qgr),e(mF,jgr),e(mF,CH),e(CH,Dgr),e(mF,Ggr),e(be,Ogr),e(be,gF),e(gF,t5e),e(t5e,Vgr),e(gF,Xgr),e(gF,wH),e(wH,zgr),e(gF,Wgr),e(be,Qgr),e(be,hF),e(hF,a5e),e(a5e,Ugr),e(hF,Hgr),e(hF,AH),e(AH,Jgr),e(hF,Ygr),e(be,Kgr),e(be,pF),e(pF,n5e),e(n5e,Zgr),e(pF,ehr),e(pF,LH),e(LH,ohr),e(pF,rhr),e(be,thr),e(be,_F),e(_F,s5e),e(s5e,ahr),e(_F,nhr),e(_F,yH),e(yH,shr),e(_F,lhr),e(be,ihr),e(be,uF),e(uF,l5e),e(l5e,dhr),e(uF,chr),e(uF,xH),e(xH,fhr),e(uF,mhr),e(be,ghr),e(be,bF),e(bF,i5e),e(i5e,hhr),e(bF,phr),e(bF,$H),e($H,_hr),e(bF,uhr),e(be,bhr),e(be,vF),e(vF,d5e),e(d5e,vhr),e(vF,Fhr),e(vF,kH),e(kH,Thr),e(vF,Mhr),e(io,Ehr),e(io,FF),e(FF,Chr),e(FF,c5e),e(c5e,whr),e(FF,Ahr),e(FF,f5e),e(f5e,Lhr),e(io,yhr),M(TF,io,null),b(f,LUe,u),b(f,qd,u),e(qd,MF),e(MF,m5e),M(W9,m5e,null),e(qd,xhr),e(qd,g5e),e(g5e,$hr),b(f,yUe,u),b(f,zo,u),M(Q9,zo,null),e(zo,khr),e(zo,jd),e(jd,Shr),e(jd,SH),e(SH,Rhr),e(jd,Phr),e(jd,RH),e(RH,Bhr),e(jd,Ihr),e(zo,Nhr),e(zo,U9),e(U9,qhr),e(U9,h5e),e(h5e,jhr),e(U9,Dhr),e(zo,Ghr),e(zo,wt),M(H9,wt,null),e(wt,Ohr),e(wt,p5e),e(p5e,Vhr),e(wt,Xhr),e(wt,Dd),e(Dd,zhr),e(Dd,_5e),e(_5e,Whr),e(Dd,Qhr),e(Dd,PH),e(PH,Uhr),e(Dd,Hhr),e(wt,Jhr),M(EF,wt,null),e(zo,Yhr),e(zo,co),M(J9,co,null),e(co,Khr),e(co,u5e),e(u5e,Zhr),e(co,epr),e(co,on),e(on,opr),e(on,b5e),e(b5e,rpr),e(on,tpr),e(on,v5e),e(v5e,apr),e(on,npr),e(on,F5e),e(F5e,spr),e(on,lpr),e(co,ipr),e(co,T5e),e(T5e,CF),e(CF,M5e),e(M5e,dpr),e(CF,cpr),e(CF,BH),e(BH,fpr),e(CF,mpr),e(co,gpr),e(co,wF),e(wF,hpr),e(wF,E5e),e(E5e,ppr),e(wF,_pr),e(wF,C5e),e(C5e,upr),e(co,bpr),M(AF,co,null),b(f,xUe,u),b(f,Gd,u),e(Gd,LF),e(LF,w5e),M(Y9,w5e,null),e(Gd,vpr),e(Gd,A5e),e(A5e,Fpr),b(f,$Ue,u),b(f,Wo,u),M(K9,Wo,null),e(Wo,Tpr),e(Wo,Od),e(Od,Mpr),e(Od,IH),e(IH,Epr),e(Od,Cpr),e(Od,NH),e(NH,wpr),e(Od,Apr),e(Wo,Lpr),e(Wo,Z9),e(Z9,ypr),e(Z9,L5e),e(L5e,xpr),e(Z9,$pr),e(Wo,kpr),e(Wo,At),M(ex,At,null),e(At,Spr),e(At,y5e),e(y5e,Rpr),e(At,Ppr),e(At,Vd),e(Vd,Bpr),e(Vd,x5e),e(x5e,Ipr),e(Vd,Npr),e(Vd,qH),e(qH,qpr),e(Vd,jpr),e(At,Dpr),M(yF,At,null),e(Wo,Gpr),e(Wo,fo),M(ox,fo,null),e(fo,Opr),e(fo,$5e),e($5e,Vpr),e(fo,Xpr),e(fo,rn),e(rn,zpr),e(rn,k5e),e(k5e,Wpr),e(rn,Qpr),e(rn,S5e),e(S5e,Upr),e(rn,Hpr),e(rn,R5e),e(R5e,Jpr),e(rn,Ypr),e(fo,Kpr),e(fo,P5e),e(P5e,xF),e(xF,B5e),e(B5e,Zpr),e(xF,e_r),e(xF,jH),e(jH,o_r),e(xF,r_r),e(fo,t_r),e(fo,$F),e($F,a_r),e($F,I5e),e(I5e,n_r),e($F,s_r),e($F,N5e),e(N5e,l_r),e(fo,i_r),M(kF,fo,null),b(f,kUe,u),b(f,Xd,u),e(Xd,SF),e(SF,q5e),M(rx,q5e,null),e(Xd,d_r),e(Xd,j5e),e(j5e,c_r),b(f,SUe,u),b(f,Qo,u),M(tx,Qo,null),e(Qo,f_r),e(Qo,zd),e(zd,m_r),e(zd,DH),e(DH,g_r),e(zd,h_r),e(zd,GH),e(GH,p_r),e(zd,__r),e(Qo,u_r),e(Qo,ax),e(ax,b_r),e(ax,D5e),e(D5e,v_r),e(ax,F_r),e(Qo,T_r),e(Qo,Lt),M(nx,Lt,null),e(Lt,M_r),e(Lt,G5e),e(G5e,E_r),e(Lt,C_r),e(Lt,Wd),e(Wd,w_r),e(Wd,O5e),e(O5e,A_r),e(Wd,L_r),e(Wd,OH),e(OH,y_r),e(Wd,x_r),e(Lt,$_r),M(RF,Lt,null),e(Qo,k_r),e(Qo,mo),M(sx,mo,null),e(mo,S_r),e(mo,V5e),e(V5e,R_r),e(mo,P_r),e(mo,tn),e(tn,B_r),e(tn,X5e),e(X5e,I_r),e(tn,N_r),e(tn,z5e),e(z5e,q_r),e(tn,j_r),e(tn,W5e),e(W5e,D_r),e(tn,G_r),e(mo,O_r),e(mo,Q5e),e(Q5e,PF),e(PF,U5e),e(U5e,V_r),e(PF,X_r),e(PF,VH),e(VH,z_r),e(PF,W_r),e(mo,Q_r),e(mo,BF),e(BF,U_r),e(BF,H5e),e(H5e,H_r),e(BF,J_r),e(BF,J5e),e(J5e,Y_r),e(mo,K_r),M(IF,mo,null),b(f,RUe,u),b(f,Qd,u),e(Qd,NF),e(NF,Y5e),M(lx,Y5e,null),e(Qd,Z_r),e(Qd,K5e),e(K5e,eur),b(f,PUe,u),b(f,Uo,u),M(ix,Uo,null),e(Uo,our),e(Uo,Ud),e(Ud,rur),e(Ud,XH),e(XH,tur),e(Ud,aur),e(Ud,zH),e(zH,nur),e(Ud,sur),e(Uo,lur),e(Uo,dx),e(dx,iur),e(dx,Z5e),e(Z5e,dur),e(dx,cur),e(Uo,fur),e(Uo,yt),M(cx,yt,null),e(yt,mur),e(yt,e0e),e(e0e,gur),e(yt,hur),e(yt,Hd),e(Hd,pur),e(Hd,o0e),e(o0e,_ur),e(Hd,uur),e(Hd,WH),e(WH,bur),e(Hd,vur),e(yt,Fur),M(qF,yt,null),e(Uo,Tur),e(Uo,go),M(fx,go,null),e(go,Mur),e(go,r0e),e(r0e,Eur),e(go,Cur),e(go,an),e(an,wur),e(an,t0e),e(t0e,Aur),e(an,Lur),e(an,a0e),e(a0e,yur),e(an,xur),e(an,n0e),e(n0e,$ur),e(an,kur),e(go,Sur),e(go,Pe),e(Pe,jF),e(jF,s0e),e(s0e,Rur),e(jF,Pur),e(jF,QH),e(QH,Bur),e(jF,Iur),e(Pe,Nur),e(Pe,DF),e(DF,l0e),e(l0e,qur),e(DF,jur),e(DF,UH),e(UH,Dur),e(DF,Gur),e(Pe,Our),e(Pe,GF),e(GF,i0e),e(i0e,Vur),e(GF,Xur),e(GF,HH),e(HH,zur),e(GF,Wur),e(Pe,Qur),e(Pe,OF),e(OF,d0e),e(d0e,Uur),e(OF,Hur),e(OF,JH),e(JH,Jur),e(OF,Yur),e(Pe,Kur),e(Pe,VF),e(VF,c0e),e(c0e,Zur),e(VF,e1r),e(VF,YH),e(YH,o1r),e(VF,r1r),e(Pe,t1r),e(Pe,XF),e(XF,f0e),e(f0e,a1r),e(XF,n1r),e(XF,KH),e(KH,s1r),e(XF,l1r),e(Pe,i1r),e(Pe,zF),e(zF,m0e),e(m0e,d1r),e(zF,c1r),e(zF,ZH),e(ZH,f1r),e(zF,m1r),e(Pe,g1r),e(Pe,WF),e(WF,g0e),e(g0e,h1r),e(WF,p1r),e(WF,eJ),e(eJ,_1r),e(WF,u1r),e(Pe,b1r),e(Pe,QF),e(QF,h0e),e(h0e,v1r),e(QF,F1r),e(QF,oJ),e(oJ,T1r),e(QF,M1r),e(go,E1r),e(go,UF),e(UF,C1r),e(UF,p0e),e(p0e,w1r),e(UF,A1r),e(UF,_0e),e(_0e,L1r),e(go,y1r),M(HF,go,null),b(f,BUe,u),b(f,Jd,u),e(Jd,JF),e(JF,u0e),M(mx,u0e,null),e(Jd,x1r),e(Jd,b0e),e(b0e,$1r),b(f,IUe,u),b(f,Ho,u),M(gx,Ho,null),e(Ho,k1r),e(Ho,Yd),e(Yd,S1r),e(Yd,rJ),e(rJ,R1r),e(Yd,P1r),e(Yd,tJ),e(tJ,B1r),e(Yd,I1r),e(Ho,N1r),e(Ho,hx),e(hx,q1r),e(hx,v0e),e(v0e,j1r),e(hx,D1r),e(Ho,G1r),e(Ho,xt),M(px,xt,null),e(xt,O1r),e(xt,F0e),e(F0e,V1r),e(xt,X1r),e(xt,Kd),e(Kd,z1r),e(Kd,T0e),e(T0e,W1r),e(Kd,Q1r),e(Kd,aJ),e(aJ,U1r),e(Kd,H1r),e(xt,J1r),M(YF,xt,null),e(Ho,Y1r),e(Ho,ho),M(_x,ho,null),e(ho,K1r),e(ho,M0e),e(M0e,Z1r),e(ho,e4r),e(ho,nn),e(nn,o4r),e(nn,E0e),e(E0e,r4r),e(nn,t4r),e(nn,C0e),e(C0e,a4r),e(nn,n4r),e(nn,w0e),e(w0e,s4r),e(nn,l4r),e(ho,i4r),e(ho,st),e(st,KF),e(KF,A0e),e(A0e,d4r),e(KF,c4r),e(KF,nJ),e(nJ,f4r),e(KF,m4r),e(st,g4r),e(st,ZF),e(ZF,L0e),e(L0e,h4r),e(ZF,p4r),e(ZF,sJ),e(sJ,_4r),e(ZF,u4r),e(st,b4r),e(st,eT),e(eT,y0e),e(y0e,v4r),e(eT,F4r),e(eT,lJ),e(lJ,T4r),e(eT,M4r),e(st,E4r),e(st,oT),e(oT,x0e),e(x0e,C4r),e(oT,w4r),e(oT,iJ),e(iJ,A4r),e(oT,L4r),e(st,y4r),e(st,rT),e(rT,$0e),e($0e,x4r),e(rT,$4r),e(rT,dJ),e(dJ,k4r),e(rT,S4r),e(ho,R4r),e(ho,tT),e(tT,P4r),e(tT,k0e),e(k0e,B4r),e(tT,I4r),e(tT,S0e),e(S0e,N4r),e(ho,q4r),M(aT,ho,null),b(f,NUe,u),b(f,Zd,u),e(Zd,nT),e(nT,R0e),M(ux,R0e,null),e(Zd,j4r),e(Zd,P0e),e(P0e,D4r),b(f,qUe,u),b(f,Jo,u),M(bx,Jo,null),e(Jo,G4r),e(Jo,ec),e(ec,O4r),e(ec,cJ),e(cJ,V4r),e(ec,X4r),e(ec,fJ),e(fJ,z4r),e(ec,W4r),e(Jo,Q4r),e(Jo,vx),e(vx,U4r),e(vx,B0e),e(B0e,H4r),e(vx,J4r),e(Jo,Y4r),e(Jo,$t),M(Fx,$t,null),e($t,K4r),e($t,I0e),e(I0e,Z4r),e($t,e2r),e($t,oc),e(oc,o2r),e(oc,N0e),e(N0e,r2r),e(oc,t2r),e(oc,mJ),e(mJ,a2r),e(oc,n2r),e($t,s2r),M(sT,$t,null),e(Jo,l2r),e(Jo,po),M(Tx,po,null),e(po,i2r),e(po,q0e),e(q0e,d2r),e(po,c2r),e(po,sn),e(sn,f2r),e(sn,j0e),e(j0e,m2r),e(sn,g2r),e(sn,D0e),e(D0e,h2r),e(sn,p2r),e(sn,G0e),e(G0e,_2r),e(sn,u2r),e(po,b2r),e(po,Le),e(Le,lT),e(lT,O0e),e(O0e,v2r),e(lT,F2r),e(lT,gJ),e(gJ,T2r),e(lT,M2r),e(Le,E2r),e(Le,iT),e(iT,V0e),e(V0e,C2r),e(iT,w2r),e(iT,hJ),e(hJ,A2r),e(iT,L2r),e(Le,y2r),e(Le,dT),e(dT,X0e),e(X0e,x2r),e(dT,$2r),e(dT,pJ),e(pJ,k2r),e(dT,S2r),e(Le,R2r),e(Le,cT),e(cT,z0e),e(z0e,P2r),e(cT,B2r),e(cT,_J),e(_J,I2r),e(cT,N2r),e(Le,q2r),e(Le,fT),e(fT,W0e),e(W0e,j2r),e(fT,D2r),e(fT,uJ),e(uJ,G2r),e(fT,O2r),e(Le,V2r),e(Le,mT),e(mT,Q0e),e(Q0e,X2r),e(mT,z2r),e(mT,bJ),e(bJ,W2r),e(mT,Q2r),e(Le,U2r),e(Le,gT),e(gT,U0e),e(U0e,H2r),e(gT,J2r),e(gT,vJ),e(vJ,Y2r),e(gT,K2r),e(Le,Z2r),e(Le,hT),e(hT,H0e),e(H0e,ebr),e(hT,obr),e(hT,FJ),e(FJ,rbr),e(hT,tbr),e(Le,abr),e(Le,pT),e(pT,J0e),e(J0e,nbr),e(pT,sbr),e(pT,TJ),e(TJ,lbr),e(pT,ibr),e(Le,dbr),e(Le,_T),e(_T,Y0e),e(Y0e,cbr),e(_T,fbr),e(_T,MJ),e(MJ,mbr),e(_T,gbr),e(po,hbr),e(po,uT),e(uT,pbr),e(uT,K0e),e(K0e,_br),e(uT,ubr),e(uT,Z0e),e(Z0e,bbr),e(po,vbr),M(bT,po,null),b(f,jUe,u),b(f,rc,u),e(rc,vT),e(vT,eFe),M(Mx,eFe,null),e(rc,Fbr),e(rc,oFe),e(oFe,Tbr),b(f,DUe,u),b(f,Yo,u),M(Ex,Yo,null),e(Yo,Mbr),e(Yo,tc),e(tc,Ebr),e(tc,EJ),e(EJ,Cbr),e(tc,wbr),e(tc,CJ),e(CJ,Abr),e(tc,Lbr),e(Yo,ybr),e(Yo,Cx),e(Cx,xbr),e(Cx,rFe),e(rFe,$br),e(Cx,kbr),e(Yo,Sbr),e(Yo,kt),M(wx,kt,null),e(kt,Rbr),e(kt,tFe),e(tFe,Pbr),e(kt,Bbr),e(kt,ac),e(ac,Ibr),e(ac,aFe),e(aFe,Nbr),e(ac,qbr),e(ac,wJ),e(wJ,jbr),e(ac,Dbr),e(kt,Gbr),M(FT,kt,null),e(Yo,Obr),e(Yo,_o),M(Ax,_o,null),e(_o,Vbr),e(_o,nFe),e(nFe,Xbr),e(_o,zbr),e(_o,ln),e(ln,Wbr),e(ln,sFe),e(sFe,Qbr),e(ln,Ubr),e(ln,lFe),e(lFe,Hbr),e(ln,Jbr),e(ln,iFe),e(iFe,Ybr),e(ln,Kbr),e(_o,Zbr),e(_o,Lx),e(Lx,TT),e(TT,dFe),e(dFe,evr),e(TT,ovr),e(TT,AJ),e(AJ,rvr),e(TT,tvr),e(Lx,avr),e(Lx,MT),e(MT,cFe),e(cFe,nvr),e(MT,svr),e(MT,LJ),e(LJ,lvr),e(MT,ivr),e(_o,dvr),e(_o,ET),e(ET,cvr),e(ET,fFe),e(fFe,fvr),e(ET,mvr),e(ET,mFe),e(mFe,gvr),e(_o,hvr),M(CT,_o,null),b(f,GUe,u),b(f,nc,u),e(nc,wT),e(wT,gFe),M(yx,gFe,null),e(nc,pvr),e(nc,hFe),e(hFe,_vr),b(f,OUe,u),b(f,Ko,u),M(xx,Ko,null),e(Ko,uvr),e(Ko,sc),e(sc,bvr),e(sc,yJ),e(yJ,vvr),e(sc,Fvr),e(sc,xJ),e(xJ,Tvr),e(sc,Mvr),e(Ko,Evr),e(Ko,$x),e($x,Cvr),e($x,pFe),e(pFe,wvr),e($x,Avr),e(Ko,Lvr),e(Ko,St),M(kx,St,null),e(St,yvr),e(St,_Fe),e(_Fe,xvr),e(St,$vr),e(St,lc),e(lc,kvr),e(lc,uFe),e(uFe,Svr),e(lc,Rvr),e(lc,$J),e($J,Pvr),e(lc,Bvr),e(St,Ivr),M(AT,St,null),e(Ko,Nvr),e(Ko,uo),M(Sx,uo,null),e(uo,qvr),e(uo,bFe),e(bFe,jvr),e(uo,Dvr),e(uo,dn),e(dn,Gvr),e(dn,vFe),e(vFe,Ovr),e(dn,Vvr),e(dn,FFe),e(FFe,Xvr),e(dn,zvr),e(dn,TFe),e(TFe,Wvr),e(dn,Qvr),e(uo,Uvr),e(uo,lt),e(lt,LT),e(LT,MFe),e(MFe,Hvr),e(LT,Jvr),e(LT,kJ),e(kJ,Yvr),e(LT,Kvr),e(lt,Zvr),e(lt,yT),e(yT,EFe),e(EFe,e5r),e(yT,o5r),e(yT,SJ),e(SJ,r5r),e(yT,t5r),e(lt,a5r),e(lt,xT),e(xT,CFe),e(CFe,n5r),e(xT,s5r),e(xT,RJ),e(RJ,l5r),e(xT,i5r),e(lt,d5r),e(lt,$T),e($T,wFe),e(wFe,c5r),e($T,f5r),e($T,PJ),e(PJ,m5r),e($T,g5r),e(lt,h5r),e(lt,kT),e(kT,AFe),e(AFe,p5r),e(kT,_5r),e(kT,BJ),e(BJ,u5r),e(kT,b5r),e(uo,v5r),e(uo,ST),e(ST,F5r),e(ST,LFe),e(LFe,T5r),e(ST,M5r),e(ST,yFe),e(yFe,E5r),e(uo,C5r),M(RT,uo,null),b(f,VUe,u),b(f,ic,u),e(ic,PT),e(PT,xFe),M(Rx,xFe,null),e(ic,w5r),e(ic,$Fe),e($Fe,A5r),b(f,XUe,u),b(f,Zo,u),M(Px,Zo,null),e(Zo,L5r),e(Zo,dc),e(dc,y5r),e(dc,IJ),e(IJ,x5r),e(dc,$5r),e(dc,NJ),e(NJ,k5r),e(dc,S5r),e(Zo,R5r),e(Zo,Bx),e(Bx,P5r),e(Bx,kFe),e(kFe,B5r),e(Bx,I5r),e(Zo,N5r),e(Zo,Rt),M(Ix,Rt,null),e(Rt,q5r),e(Rt,SFe),e(SFe,j5r),e(Rt,D5r),e(Rt,cc),e(cc,G5r),e(cc,RFe),e(RFe,O5r),e(cc,V5r),e(cc,qJ),e(qJ,X5r),e(cc,z5r),e(Rt,W5r),M(BT,Rt,null),e(Zo,Q5r),e(Zo,bo),M(Nx,bo,null),e(bo,U5r),e(bo,PFe),e(PFe,H5r),e(bo,J5r),e(bo,cn),e(cn,Y5r),e(cn,BFe),e(BFe,K5r),e(cn,Z5r),e(cn,IFe),e(IFe,e0r),e(cn,o0r),e(cn,NFe),e(NFe,r0r),e(cn,t0r),e(bo,a0r),e(bo,fn),e(fn,IT),e(IT,qFe),e(qFe,n0r),e(IT,s0r),e(IT,jJ),e(jJ,l0r),e(IT,i0r),e(fn,d0r),e(fn,NT),e(NT,jFe),e(jFe,c0r),e(NT,f0r),e(NT,DJ),e(DJ,m0r),e(NT,g0r),e(fn,h0r),e(fn,qT),e(qT,DFe),e(DFe,p0r),e(qT,_0r),e(qT,GJ),e(GJ,u0r),e(qT,b0r),e(fn,v0r),e(fn,jT),e(jT,GFe),e(GFe,F0r),e(jT,T0r),e(jT,OJ),e(OJ,M0r),e(jT,E0r),e(bo,C0r),e(bo,DT),e(DT,w0r),e(DT,OFe),e(OFe,A0r),e(DT,L0r),e(DT,VFe),e(VFe,y0r),e(bo,x0r),M(GT,bo,null),b(f,zUe,u),b(f,fc,u),e(fc,OT),e(OT,XFe),M(qx,XFe,null),e(fc,$0r),e(fc,zFe),e(zFe,k0r),b(f,WUe,u),b(f,er,u),M(jx,er,null),e(er,S0r),e(er,mc),e(mc,R0r),e(mc,VJ),e(VJ,P0r),e(mc,B0r),e(mc,XJ),e(XJ,I0r),e(mc,N0r),e(er,q0r),e(er,Dx),e(Dx,j0r),e(Dx,WFe),e(WFe,D0r),e(Dx,G0r),e(er,O0r),e(er,Pt),M(Gx,Pt,null),e(Pt,V0r),e(Pt,QFe),e(QFe,X0r),e(Pt,z0r),e(Pt,gc),e(gc,W0r),e(gc,UFe),e(UFe,Q0r),e(gc,U0r),e(gc,zJ),e(zJ,H0r),e(gc,J0r),e(Pt,Y0r),M(VT,Pt,null),e(er,K0r),e(er,vo),M(Ox,vo,null),e(vo,Z0r),e(vo,HFe),e(HFe,eFr),e(vo,oFr),e(vo,mn),e(mn,rFr),e(mn,JFe),e(JFe,tFr),e(mn,aFr),e(mn,YFe),e(YFe,nFr),e(mn,sFr),e(mn,KFe),e(KFe,lFr),e(mn,iFr),e(vo,dFr),e(vo,Vx),e(Vx,XT),e(XT,ZFe),e(ZFe,cFr),e(XT,fFr),e(XT,WJ),e(WJ,mFr),e(XT,gFr),e(Vx,hFr),e(Vx,zT),e(zT,eTe),e(eTe,pFr),e(zT,_Fr),e(zT,QJ),e(QJ,uFr),e(zT,bFr),e(vo,vFr),e(vo,WT),e(WT,FFr),e(WT,oTe),e(oTe,TFr),e(WT,MFr),e(WT,rTe),e(rTe,EFr),e(vo,CFr),M(QT,vo,null),b(f,QUe,u),b(f,hc,u),e(hc,UT),e(UT,tTe),M(Xx,tTe,null),e(hc,wFr),e(hc,aTe),e(aTe,AFr),b(f,UUe,u),b(f,or,u),M(zx,or,null),e(or,LFr),e(or,pc),e(pc,yFr),e(pc,UJ),e(UJ,xFr),e(pc,$Fr),e(pc,HJ),e(HJ,kFr),e(pc,SFr),e(or,RFr),e(or,Wx),e(Wx,PFr),e(Wx,nTe),e(nTe,BFr),e(Wx,IFr),e(or,NFr),e(or,Bt),M(Qx,Bt,null),e(Bt,qFr),e(Bt,sTe),e(sTe,jFr),e(Bt,DFr),e(Bt,_c),e(_c,GFr),e(_c,lTe),e(lTe,OFr),e(_c,VFr),e(_c,JJ),e(JJ,XFr),e(_c,zFr),e(Bt,WFr),M(HT,Bt,null),e(or,QFr),e(or,Fo),M(Ux,Fo,null),e(Fo,UFr),e(Fo,iTe),e(iTe,HFr),e(Fo,JFr),e(Fo,gn),e(gn,YFr),e(gn,dTe),e(dTe,KFr),e(gn,ZFr),e(gn,cTe),e(cTe,eTr),e(gn,oTr),e(gn,fTe),e(fTe,rTr),e(gn,tTr),e(Fo,aTr),e(Fo,mTe),e(mTe,JT),e(JT,gTe),e(gTe,nTr),e(JT,sTr),e(JT,YJ),e(YJ,lTr),e(JT,iTr),e(Fo,dTr),e(Fo,YT),e(YT,cTr),e(YT,hTe),e(hTe,fTr),e(YT,mTr),e(YT,pTe),e(pTe,gTr),e(Fo,hTr),M(KT,Fo,null),b(f,HUe,u),b(f,uc,u),e(uc,ZT),e(ZT,_Te),M(Hx,_Te,null),e(uc,pTr),e(uc,uTe),e(uTe,_Tr),b(f,JUe,u),b(f,rr,u),M(Jx,rr,null),e(rr,uTr),e(rr,bc),e(bc,bTr),e(bc,KJ),e(KJ,vTr),e(bc,FTr),e(bc,ZJ),e(ZJ,TTr),e(bc,MTr),e(rr,ETr),e(rr,Yx),e(Yx,CTr),e(Yx,bTe),e(bTe,wTr),e(Yx,ATr),e(rr,LTr),e(rr,It),M(Kx,It,null),e(It,yTr),e(It,vTe),e(vTe,xTr),e(It,$Tr),e(It,vc),e(vc,kTr),e(vc,FTe),e(FTe,STr),e(vc,RTr),e(vc,eY),e(eY,PTr),e(vc,BTr),e(It,ITr),M(e8,It,null),e(rr,NTr),e(rr,To),M(Zx,To,null),e(To,qTr),e(To,TTe),e(TTe,jTr),e(To,DTr),e(To,hn),e(hn,GTr),e(hn,MTe),e(MTe,OTr),e(hn,VTr),e(hn,ETe),e(ETe,XTr),e(hn,zTr),e(hn,CTe),e(CTe,WTr),e(hn,QTr),e(To,UTr),e(To,it),e(it,o8),e(o8,wTe),e(wTe,HTr),e(o8,JTr),e(o8,oY),e(oY,YTr),e(o8,KTr),e(it,ZTr),e(it,r8),e(r8,ATe),e(ATe,e8r),e(r8,o8r),e(r8,rY),e(rY,r8r),e(r8,t8r),e(it,a8r),e(it,t8),e(t8,LTe),e(LTe,n8r),e(t8,s8r),e(t8,tY),e(tY,l8r),e(t8,i8r),e(it,d8r),e(it,a8),e(a8,yTe),e(yTe,c8r),e(a8,f8r),e(a8,aY),e(aY,m8r),e(a8,g8r),e(it,h8r),e(it,n8),e(n8,xTe),e(xTe,p8r),e(n8,_8r),e(n8,nY),e(nY,u8r),e(n8,b8r),e(To,v8r),e(To,s8),e(s8,F8r),e(s8,$Te),e($Te,T8r),e(s8,M8r),e(s8,kTe),e(kTe,E8r),e(To,C8r),M(l8,To,null),b(f,YUe,u),b(f,Fc,u),e(Fc,i8),e(i8,STe),M(e$,STe,null),e(Fc,w8r),e(Fc,RTe),e(RTe,A8r),b(f,KUe,u),b(f,tr,u),M(o$,tr,null),e(tr,L8r),e(tr,Tc),e(Tc,y8r),e(Tc,sY),e(sY,x8r),e(Tc,$8r),e(Tc,lY),e(lY,k8r),e(Tc,S8r),e(tr,R8r),e(tr,r$),e(r$,P8r),e(r$,PTe),e(PTe,B8r),e(r$,I8r),e(tr,N8r),e(tr,Nt),M(t$,Nt,null),e(Nt,q8r),e(Nt,BTe),e(BTe,j8r),e(Nt,D8r),e(Nt,Mc),e(Mc,G8r),e(Mc,ITe),e(ITe,O8r),e(Mc,V8r),e(Mc,iY),e(iY,X8r),e(Mc,z8r),e(Nt,W8r),M(d8,Nt,null),e(tr,Q8r),e(tr,Mo),M(a$,Mo,null),e(Mo,U8r),e(Mo,NTe),e(NTe,H8r),e(Mo,J8r),e(Mo,pn),e(pn,Y8r),e(pn,qTe),e(qTe,K8r),e(pn,Z8r),e(pn,jTe),e(jTe,eMr),e(pn,oMr),e(pn,DTe),e(DTe,rMr),e(pn,tMr),e(Mo,aMr),e(Mo,GTe),e(GTe,c8),e(c8,OTe),e(OTe,nMr),e(c8,sMr),e(c8,dY),e(dY,lMr),e(c8,iMr),e(Mo,dMr),e(Mo,f8),e(f8,cMr),e(f8,VTe),e(VTe,fMr),e(f8,mMr),e(f8,XTe),e(XTe,gMr),e(Mo,hMr),M(m8,Mo,null),b(f,ZUe,u),b(f,Ec,u),e(Ec,g8),e(g8,zTe),M(n$,zTe,null),e(Ec,pMr),e(Ec,WTe),e(WTe,_Mr),b(f,eHe,u),b(f,ar,u),M(s$,ar,null),e(ar,uMr),e(ar,Cc),e(Cc,bMr),e(Cc,cY),e(cY,vMr),e(Cc,FMr),e(Cc,fY),e(fY,TMr),e(Cc,MMr),e(ar,EMr),e(ar,l$),e(l$,CMr),e(l$,QTe),e(QTe,wMr),e(l$,AMr),e(ar,LMr),e(ar,qt),M(i$,qt,null),e(qt,yMr),e(qt,UTe),e(UTe,xMr),e(qt,$Mr),e(qt,wc),e(wc,kMr),e(wc,HTe),e(HTe,SMr),e(wc,RMr),e(wc,mY),e(mY,PMr),e(wc,BMr),e(qt,IMr),M(h8,qt,null),e(ar,NMr),e(ar,Rr),M(d$,Rr,null),e(Rr,qMr),e(Rr,JTe),e(JTe,jMr),e(Rr,DMr),e(Rr,_n),e(_n,GMr),e(_n,YTe),e(YTe,OMr),e(_n,VMr),e(_n,KTe),e(KTe,XMr),e(_n,zMr),e(_n,ZTe),e(ZTe,WMr),e(_n,QMr),e(Rr,UMr),e(Rr,q),e(q,p8),e(p8,e8e),e(e8e,HMr),e(p8,JMr),e(p8,gY),e(gY,YMr),e(p8,KMr),e(q,ZMr),e(q,_8),e(_8,o8e),e(o8e,eEr),e(_8,oEr),e(_8,hY),e(hY,rEr),e(_8,tEr),e(q,aEr),e(q,u8),e(u8,r8e),e(r8e,nEr),e(u8,sEr),e(u8,pY),e(pY,lEr),e(u8,iEr),e(q,dEr),e(q,b8),e(b8,t8e),e(t8e,cEr),e(b8,fEr),e(b8,_Y),e(_Y,mEr),e(b8,gEr),e(q,hEr),e(q,v8),e(v8,a8e),e(a8e,pEr),e(v8,_Er),e(v8,uY),e(uY,uEr),e(v8,bEr),e(q,vEr),e(q,F8),e(F8,n8e),e(n8e,FEr),e(F8,TEr),e(F8,bY),e(bY,MEr),e(F8,EEr),e(q,CEr),e(q,T8),e(T8,s8e),e(s8e,wEr),e(T8,AEr),e(T8,vY),e(vY,LEr),e(T8,yEr),e(q,xEr),e(q,M8),e(M8,l8e),e(l8e,$Er),e(M8,kEr),e(M8,FY),e(FY,SEr),e(M8,REr),e(q,PEr),e(q,E8),e(E8,i8e),e(i8e,BEr),e(E8,IEr),e(E8,TY),e(TY,NEr),e(E8,qEr),e(q,jEr),e(q,C8),e(C8,d8e),e(d8e,DEr),e(C8,GEr),e(C8,MY),e(MY,OEr),e(C8,VEr),e(q,XEr),e(q,w8),e(w8,c8e),e(c8e,zEr),e(w8,WEr),e(w8,EY),e(EY,QEr),e(w8,UEr),e(q,HEr),e(q,A8),e(A8,f8e),e(f8e,JEr),e(A8,YEr),e(A8,CY),e(CY,KEr),e(A8,ZEr),e(q,eCr),e(q,L8),e(L8,m8e),e(m8e,oCr),e(L8,rCr),e(L8,wY),e(wY,tCr),e(L8,aCr),e(q,nCr),e(q,y8),e(y8,g8e),e(g8e,sCr),e(y8,lCr),e(y8,AY),e(AY,iCr),e(y8,dCr),e(q,cCr),e(q,x8),e(x8,h8e),e(h8e,fCr),e(x8,mCr),e(x8,LY),e(LY,gCr),e(x8,hCr),e(q,pCr),e(q,$8),e($8,p8e),e(p8e,_Cr),e($8,uCr),e($8,yY),e(yY,bCr),e($8,vCr),e(q,FCr),e(q,k8),e(k8,_8e),e(_8e,TCr),e(k8,MCr),e(k8,xY),e(xY,ECr),e(k8,CCr),e(q,wCr),e(q,S8),e(S8,u8e),e(u8e,ACr),e(S8,LCr),e(S8,$Y),e($Y,yCr),e(S8,xCr),e(q,$Cr),e(q,il),e(il,b8e),e(b8e,kCr),e(il,SCr),e(il,kY),e(kY,RCr),e(il,PCr),e(il,SY),e(SY,BCr),e(il,ICr),e(q,NCr),e(q,R8),e(R8,v8e),e(v8e,qCr),e(R8,jCr),e(R8,RY),e(RY,DCr),e(R8,GCr),e(q,OCr),e(q,P8),e(P8,F8e),e(F8e,VCr),e(P8,XCr),e(P8,PY),e(PY,zCr),e(P8,WCr),e(q,QCr),e(q,B8),e(B8,T8e),e(T8e,UCr),e(B8,HCr),e(B8,BY),e(BY,JCr),e(B8,YCr),e(q,KCr),e(q,I8),e(I8,M8e),e(M8e,ZCr),e(I8,e3r),e(I8,IY),e(IY,o3r),e(I8,r3r),e(q,t3r),e(q,N8),e(N8,E8e),e(E8e,a3r),e(N8,n3r),e(N8,NY),e(NY,s3r),e(N8,l3r),e(q,i3r),e(q,q8),e(q8,C8e),e(C8e,d3r),e(q8,c3r),e(q8,qY),e(qY,f3r),e(q8,m3r),e(q,g3r),e(q,j8),e(j8,w8e),e(w8e,h3r),e(j8,p3r),e(j8,jY),e(jY,_3r),e(j8,u3r),e(q,b3r),e(q,D8),e(D8,A8e),e(A8e,v3r),e(D8,F3r),e(D8,DY),e(DY,T3r),e(D8,M3r),e(q,E3r),e(q,G8),e(G8,L8e),e(L8e,C3r),e(G8,w3r),e(G8,GY),e(GY,A3r),e(G8,L3r),e(q,y3r),e(q,O8),e(O8,y8e),e(y8e,x3r),e(O8,$3r),e(O8,OY),e(OY,k3r),e(O8,S3r),e(q,R3r),e(q,V8),e(V8,x8e),e(x8e,P3r),e(V8,B3r),e(V8,VY),e(VY,I3r),e(V8,N3r),e(q,q3r),e(q,X8),e(X8,$8e),e($8e,j3r),e(X8,D3r),e(X8,XY),e(XY,G3r),e(X8,O3r),e(q,V3r),e(q,z8),e(z8,k8e),e(k8e,X3r),e(z8,z3r),e(z8,zY),e(zY,W3r),e(z8,Q3r),e(q,U3r),e(q,W8),e(W8,S8e),e(S8e,H3r),e(W8,J3r),e(W8,WY),e(WY,Y3r),e(W8,K3r),e(q,Z3r),e(q,Q8),e(Q8,R8e),e(R8e,ewr),e(Q8,owr),e(Q8,QY),e(QY,rwr),e(Q8,twr),e(q,awr),e(q,U8),e(U8,P8e),e(P8e,nwr),e(U8,swr),e(U8,UY),e(UY,lwr),e(U8,iwr),e(q,dwr),e(q,H8),e(H8,B8e),e(B8e,cwr),e(H8,fwr),e(H8,HY),e(HY,mwr),e(H8,gwr),e(q,hwr),e(q,J8),e(J8,I8e),e(I8e,pwr),e(J8,_wr),e(J8,JY),e(JY,uwr),e(J8,bwr),e(q,vwr),e(q,Y8),e(Y8,N8e),e(N8e,Fwr),e(Y8,Twr),e(Y8,YY),e(YY,Mwr),e(Y8,Ewr),e(q,Cwr),e(q,K8),e(K8,q8e),e(q8e,wwr),e(K8,Awr),e(K8,KY),e(KY,Lwr),e(K8,ywr),e(q,xwr),e(q,Z8),e(Z8,j8e),e(j8e,$wr),e(Z8,kwr),e(Z8,ZY),e(ZY,Swr),e(Z8,Rwr),e(q,Pwr),e(q,eM),e(eM,D8e),e(D8e,Bwr),e(eM,Iwr),e(eM,eK),e(eK,Nwr),e(eM,qwr),e(q,jwr),e(q,oM),e(oM,G8e),e(G8e,Dwr),e(oM,Gwr),e(oM,oK),e(oK,Owr),e(oM,Vwr),e(q,Xwr),e(q,rM),e(rM,O8e),e(O8e,zwr),e(rM,Wwr),e(rM,rK),e(rK,Qwr),e(rM,Uwr),e(q,Hwr),e(q,tM),e(tM,V8e),e(V8e,Jwr),e(tM,Ywr),e(tM,tK),e(tK,Kwr),e(tM,Zwr),e(q,e6r),e(q,aM),e(aM,X8e),e(X8e,o6r),e(aM,r6r),e(aM,aK),e(aK,t6r),e(aM,a6r),e(q,n6r),e(q,nM),e(nM,z8e),e(z8e,s6r),e(nM,l6r),e(nM,nK),e(nK,i6r),e(nM,d6r),e(q,c6r),e(q,sM),e(sM,W8e),e(W8e,f6r),e(sM,m6r),e(sM,sK),e(sK,g6r),e(sM,h6r),e(q,p6r),e(q,lM),e(lM,Q8e),e(Q8e,_6r),e(lM,u6r),e(lM,lK),e(lK,b6r),e(lM,v6r),e(q,F6r),e(q,iM),e(iM,U8e),e(U8e,T6r),e(iM,M6r),e(iM,iK),e(iK,E6r),e(iM,C6r),e(q,w6r),e(q,dM),e(dM,H8e),e(H8e,A6r),e(dM,L6r),e(dM,dK),e(dK,y6r),e(dM,x6r),e(q,$6r),e(q,cM),e(cM,J8e),e(J8e,k6r),e(cM,S6r),e(cM,cK),e(cK,R6r),e(cM,P6r),e(q,B6r),e(q,fM),e(fM,Y8e),e(Y8e,I6r),e(fM,N6r),e(fM,fK),e(fK,q6r),e(fM,j6r),e(Rr,D6r),M(mM,Rr,null),b(f,oHe,u),b(f,Ac,u),e(Ac,gM),e(gM,K8e),M(c$,K8e,null),e(Ac,G6r),e(Ac,Z8e),e(Z8e,O6r),b(f,rHe,u),b(f,nr,u),M(f$,nr,null),e(nr,V6r),e(nr,Lc),e(Lc,X6r),e(Lc,mK),e(mK,z6r),e(Lc,W6r),e(Lc,gK),e(gK,Q6r),e(Lc,U6r),e(nr,H6r),e(nr,m$),e(m$,J6r),e(m$,eMe),e(eMe,Y6r),e(m$,K6r),e(nr,Z6r),e(nr,jt),M(g$,jt,null),e(jt,eAr),e(jt,oMe),e(oMe,oAr),e(jt,rAr),e(jt,yc),e(yc,tAr),e(yc,rMe),e(rMe,aAr),e(yc,nAr),e(yc,hK),e(hK,sAr),e(yc,lAr),e(jt,iAr),M(hM,jt,null),e(nr,dAr),e(nr,Pr),M(h$,Pr,null),e(Pr,cAr),e(Pr,tMe),e(tMe,fAr),e(Pr,mAr),e(Pr,un),e(un,gAr),e(un,aMe),e(aMe,hAr),e(un,pAr),e(un,nMe),e(nMe,_Ar),e(un,uAr),e(un,sMe),e(sMe,bAr),e(un,vAr),e(Pr,FAr),e(Pr,se),e(se,pM),e(pM,lMe),e(lMe,TAr),e(pM,MAr),e(pM,pK),e(pK,EAr),e(pM,CAr),e(se,wAr),e(se,_M),e(_M,iMe),e(iMe,AAr),e(_M,LAr),e(_M,_K),e(_K,yAr),e(_M,xAr),e(se,$Ar),e(se,uM),e(uM,dMe),e(dMe,kAr),e(uM,SAr),e(uM,uK),e(uK,RAr),e(uM,PAr),e(se,BAr),e(se,bM),e(bM,cMe),e(cMe,IAr),e(bM,NAr),e(bM,bK),e(bK,qAr),e(bM,jAr),e(se,DAr),e(se,vM),e(vM,fMe),e(fMe,GAr),e(vM,OAr),e(vM,vK),e(vK,VAr),e(vM,XAr),e(se,zAr),e(se,FM),e(FM,mMe),e(mMe,WAr),e(FM,QAr),e(FM,FK),e(FK,UAr),e(FM,HAr),e(se,JAr),e(se,TM),e(TM,gMe),e(gMe,YAr),e(TM,KAr),e(TM,TK),e(TK,ZAr),e(TM,e7r),e(se,o7r),e(se,MM),e(MM,hMe),e(hMe,r7r),e(MM,t7r),e(MM,MK),e(MK,a7r),e(MM,n7r),e(se,s7r),e(se,EM),e(EM,pMe),e(pMe,l7r),e(EM,i7r),e(EM,EK),e(EK,d7r),e(EM,c7r),e(se,f7r),e(se,CM),e(CM,_Me),e(_Me,m7r),e(CM,g7r),e(CM,CK),e(CK,h7r),e(CM,p7r),e(se,_7r),e(se,wM),e(wM,uMe),e(uMe,u7r),e(wM,b7r),e(wM,wK),e(wK,v7r),e(wM,F7r),e(se,T7r),e(se,AM),e(AM,bMe),e(bMe,M7r),e(AM,E7r),e(AM,AK),e(AK,C7r),e(AM,w7r),e(se,A7r),e(se,LM),e(LM,vMe),e(vMe,L7r),e(LM,y7r),e(LM,LK),e(LK,x7r),e(LM,$7r),e(se,k7r),e(se,yM),e(yM,FMe),e(FMe,S7r),e(yM,R7r),e(yM,yK),e(yK,P7r),e(yM,B7r),e(se,I7r),e(se,xM),e(xM,TMe),e(TMe,N7r),e(xM,q7r),e(xM,xK),e(xK,j7r),e(xM,D7r),e(se,G7r),e(se,$M),e($M,MMe),e(MMe,O7r),e($M,V7r),e($M,$K),e($K,X7r),e($M,z7r),e(se,W7r),e(se,kM),e(kM,EMe),e(EMe,Q7r),e(kM,U7r),e(kM,kK),e(kK,H7r),e(kM,J7r),e(se,Y7r),e(se,SM),e(SM,CMe),e(CMe,K7r),e(SM,Z7r),e(SM,SK),e(SK,eLr),e(SM,oLr),e(se,rLr),e(se,RM),e(RM,wMe),e(wMe,tLr),e(RM,aLr),e(RM,RK),e(RK,nLr),e(RM,sLr),e(se,lLr),e(se,PM),e(PM,AMe),e(AMe,iLr),e(PM,dLr),e(PM,PK),e(PK,cLr),e(PM,fLr),e(se,mLr),e(se,BM),e(BM,LMe),e(LMe,gLr),e(BM,hLr),e(BM,BK),e(BK,pLr),e(BM,_Lr),e(se,uLr),e(se,IM),e(IM,yMe),e(yMe,bLr),e(IM,vLr),e(IM,IK),e(IK,FLr),e(IM,TLr),e(se,MLr),e(se,NM),e(NM,xMe),e(xMe,ELr),e(NM,CLr),e(NM,NK),e(NK,wLr),e(NM,ALr),e(Pr,LLr),M(qM,Pr,null),b(f,tHe,u),b(f,xc,u),e(xc,jM),e(jM,$Me),M(p$,$Me,null),e(xc,yLr),e(xc,kMe),e(kMe,xLr),b(f,aHe,u),b(f,sr,u),M(_$,sr,null),e(sr,$Lr),e(sr,$c),e($c,kLr),e($c,qK),e(qK,SLr),e($c,RLr),e($c,jK),e(jK,PLr),e($c,BLr),e(sr,ILr),e(sr,u$),e(u$,NLr),e(u$,SMe),e(SMe,qLr),e(u$,jLr),e(sr,DLr),e(sr,Dt),M(b$,Dt,null),e(Dt,GLr),e(Dt,RMe),e(RMe,OLr),e(Dt,VLr),e(Dt,kc),e(kc,XLr),e(kc,PMe),e(PMe,zLr),e(kc,WLr),e(kc,DK),e(DK,QLr),e(kc,ULr),e(Dt,HLr),M(DM,Dt,null),e(sr,JLr),e(sr,Br),M(v$,Br,null),e(Br,YLr),e(Br,BMe),e(BMe,KLr),e(Br,ZLr),e(Br,bn),e(bn,eyr),e(bn,IMe),e(IMe,oyr),e(bn,ryr),e(bn,NMe),e(NMe,tyr),e(bn,ayr),e(bn,qMe),e(qMe,nyr),e(bn,syr),e(Br,lyr),e(Br,Me),e(Me,GM),e(GM,jMe),e(jMe,iyr),e(GM,dyr),e(GM,GK),e(GK,cyr),e(GM,fyr),e(Me,myr),e(Me,OM),e(OM,DMe),e(DMe,gyr),e(OM,hyr),e(OM,OK),e(OK,pyr),e(OM,_yr),e(Me,uyr),e(Me,VM),e(VM,GMe),e(GMe,byr),e(VM,vyr),e(VM,VK),e(VK,Fyr),e(VM,Tyr),e(Me,Myr),e(Me,XM),e(XM,OMe),e(OMe,Eyr),e(XM,Cyr),e(XM,XK),e(XK,wyr),e(XM,Ayr),e(Me,Lyr),e(Me,zM),e(zM,VMe),e(VMe,yyr),e(zM,xyr),e(zM,zK),e(zK,$yr),e(zM,kyr),e(Me,Syr),e(Me,WM),e(WM,XMe),e(XMe,Ryr),e(WM,Pyr),e(WM,WK),e(WK,Byr),e(WM,Iyr),e(Me,Nyr),e(Me,QM),e(QM,zMe),e(zMe,qyr),e(QM,jyr),e(QM,QK),e(QK,Dyr),e(QM,Gyr),e(Me,Oyr),e(Me,UM),e(UM,WMe),e(WMe,Vyr),e(UM,Xyr),e(UM,UK),e(UK,zyr),e(UM,Wyr),e(Me,Qyr),e(Me,HM),e(HM,QMe),e(QMe,Uyr),e(HM,Hyr),e(HM,HK),e(HK,Jyr),e(HM,Yyr),e(Me,Kyr),e(Me,JM),e(JM,UMe),e(UMe,Zyr),e(JM,e9r),e(JM,JK),e(JK,o9r),e(JM,r9r),e(Me,t9r),e(Me,YM),e(YM,HMe),e(HMe,a9r),e(YM,n9r),e(YM,YK),e(YK,s9r),e(YM,l9r),e(Me,i9r),e(Me,KM),e(KM,JMe),e(JMe,d9r),e(KM,c9r),e(KM,KK),e(KK,f9r),e(KM,m9r),e(Me,g9r),e(Me,ZM),e(ZM,YMe),e(YMe,h9r),e(ZM,p9r),e(ZM,ZK),e(ZK,_9r),e(ZM,u9r),e(Br,b9r),M(eE,Br,null),b(f,nHe,u),b(f,Sc,u),e(Sc,oE),e(oE,KMe),M(F$,KMe,null),e(Sc,v9r),e(Sc,ZMe),e(ZMe,F9r),b(f,sHe,u),b(f,lr,u),M(T$,lr,null),e(lr,T9r),e(lr,Rc),e(Rc,M9r),e(Rc,eZ),e(eZ,E9r),e(Rc,C9r),e(Rc,oZ),e(oZ,w9r),e(Rc,A9r),e(lr,L9r),e(lr,M$),e(M$,y9r),e(M$,eEe),e(eEe,x9r),e(M$,$9r),e(lr,k9r),e(lr,Gt),M(E$,Gt,null),e(Gt,S9r),e(Gt,oEe),e(oEe,R9r),e(Gt,P9r),e(Gt,Pc),e(Pc,B9r),e(Pc,rEe),e(rEe,I9r),e(Pc,N9r),e(Pc,rZ),e(rZ,q9r),e(Pc,j9r),e(Gt,D9r),M(rE,Gt,null),e(lr,G9r),e(lr,Ir),M(C$,Ir,null),e(Ir,O9r),e(Ir,tEe),e(tEe,V9r),e(Ir,X9r),e(Ir,vn),e(vn,z9r),e(vn,aEe),e(aEe,W9r),e(vn,Q9r),e(vn,nEe),e(nEe,U9r),e(vn,H9r),e(vn,sEe),e(sEe,J9r),e(vn,Y9r),e(Ir,K9r),e(Ir,Ve),e(Ve,tE),e(tE,lEe),e(lEe,Z9r),e(tE,exr),e(tE,tZ),e(tZ,oxr),e(tE,rxr),e(Ve,txr),e(Ve,aE),e(aE,iEe),e(iEe,axr),e(aE,nxr),e(aE,aZ),e(aZ,sxr),e(aE,lxr),e(Ve,ixr),e(Ve,dl),e(dl,dEe),e(dEe,dxr),e(dl,cxr),e(dl,nZ),e(nZ,fxr),e(dl,mxr),e(dl,sZ),e(sZ,gxr),e(dl,hxr),e(Ve,pxr),e(Ve,nE),e(nE,cEe),e(cEe,_xr),e(nE,uxr),e(nE,lZ),e(lZ,bxr),e(nE,vxr),e(Ve,Fxr),e(Ve,sE),e(sE,fEe),e(fEe,Txr),e(sE,Mxr),e(sE,iZ),e(iZ,Exr),e(sE,Cxr),e(Ve,wxr),e(Ve,lE),e(lE,mEe),e(mEe,Axr),e(lE,Lxr),e(lE,dZ),e(dZ,yxr),e(lE,xxr),e(Ve,$xr),e(Ve,iE),e(iE,gEe),e(gEe,kxr),e(iE,Sxr),e(iE,cZ),e(cZ,Rxr),e(iE,Pxr),e(Ve,Bxr),e(Ve,dE),e(dE,hEe),e(hEe,Ixr),e(dE,Nxr),e(dE,fZ),e(fZ,qxr),e(dE,jxr),e(Ir,Dxr),M(cE,Ir,null),b(f,lHe,u),b(f,Bc,u),e(Bc,fE),e(fE,pEe),M(w$,pEe,null),e(Bc,Gxr),e(Bc,_Ee),e(_Ee,Oxr),b(f,iHe,u),b(f,ir,u),M(A$,ir,null),e(ir,Vxr),e(ir,Ic),e(Ic,Xxr),e(Ic,mZ),e(mZ,zxr),e(Ic,Wxr),e(Ic,gZ),e(gZ,Qxr),e(Ic,Uxr),e(ir,Hxr),e(ir,L$),e(L$,Jxr),e(L$,uEe),e(uEe,Yxr),e(L$,Kxr),e(ir,Zxr),e(ir,Ot),M(y$,Ot,null),e(Ot,e$r),e(Ot,bEe),e(bEe,o$r),e(Ot,r$r),e(Ot,Nc),e(Nc,t$r),e(Nc,vEe),e(vEe,a$r),e(Nc,n$r),e(Nc,hZ),e(hZ,s$r),e(Nc,l$r),e(Ot,i$r),M(mE,Ot,null),e(ir,d$r),e(ir,Nr),M(x$,Nr,null),e(Nr,c$r),e(Nr,FEe),e(FEe,f$r),e(Nr,m$r),e(Nr,Fn),e(Fn,g$r),e(Fn,TEe),e(TEe,h$r),e(Fn,p$r),e(Fn,MEe),e(MEe,_$r),e(Fn,u$r),e(Fn,EEe),e(EEe,b$r),e(Fn,v$r),e(Nr,F$r),e(Nr,$$),e($$,gE),e(gE,CEe),e(CEe,T$r),e(gE,M$r),e(gE,pZ),e(pZ,E$r),e(gE,C$r),e($$,w$r),e($$,hE),e(hE,wEe),e(wEe,A$r),e(hE,L$r),e(hE,_Z),e(_Z,y$r),e(hE,x$r),e(Nr,$$r),M(pE,Nr,null),b(f,dHe,u),b(f,qc,u),e(qc,_E),e(_E,AEe),M(k$,AEe,null),e(qc,k$r),e(qc,LEe),e(LEe,S$r),b(f,cHe,u),b(f,dr,u),M(S$,dr,null),e(dr,R$r),e(dr,jc),e(jc,P$r),e(jc,uZ),e(uZ,B$r),e(jc,I$r),e(jc,bZ),e(bZ,N$r),e(jc,q$r),e(dr,j$r),e(dr,R$),e(R$,D$r),e(R$,yEe),e(yEe,G$r),e(R$,O$r),e(dr,V$r),e(dr,Vt),M(P$,Vt,null),e(Vt,X$r),e(Vt,xEe),e(xEe,z$r),e(Vt,W$r),e(Vt,Dc),e(Dc,Q$r),e(Dc,$Ee),e($Ee,U$r),e(Dc,H$r),e(Dc,vZ),e(vZ,J$r),e(Dc,Y$r),e(Vt,K$r),M(uE,Vt,null),e(dr,Z$r),e(dr,qr),M(B$,qr,null),e(qr,ekr),e(qr,kEe),e(kEe,okr),e(qr,rkr),e(qr,Tn),e(Tn,tkr),e(Tn,SEe),e(SEe,akr),e(Tn,nkr),e(Tn,REe),e(REe,skr),e(Tn,lkr),e(Tn,PEe),e(PEe,ikr),e(Tn,dkr),e(qr,ckr),e(qr,de),e(de,bE),e(bE,BEe),e(BEe,fkr),e(bE,mkr),e(bE,FZ),e(FZ,gkr),e(bE,hkr),e(de,pkr),e(de,vE),e(vE,IEe),e(IEe,_kr),e(vE,ukr),e(vE,TZ),e(TZ,bkr),e(vE,vkr),e(de,Fkr),e(de,FE),e(FE,NEe),e(NEe,Tkr),e(FE,Mkr),e(FE,MZ),e(MZ,Ekr),e(FE,Ckr),e(de,wkr),e(de,TE),e(TE,qEe),e(qEe,Akr),e(TE,Lkr),e(TE,EZ),e(EZ,ykr),e(TE,xkr),e(de,$kr),e(de,ME),e(ME,jEe),e(jEe,kkr),e(ME,Skr),e(ME,CZ),e(CZ,Rkr),e(ME,Pkr),e(de,Bkr),e(de,EE),e(EE,DEe),e(DEe,Ikr),e(EE,Nkr),e(EE,wZ),e(wZ,qkr),e(EE,jkr),e(de,Dkr),e(de,CE),e(CE,GEe),e(GEe,Gkr),e(CE,Okr),e(CE,AZ),e(AZ,Vkr),e(CE,Xkr),e(de,zkr),e(de,wE),e(wE,OEe),e(OEe,Wkr),e(wE,Qkr),e(wE,LZ),e(LZ,Ukr),e(wE,Hkr),e(de,Jkr),e(de,AE),e(AE,VEe),e(VEe,Ykr),e(AE,Kkr),e(AE,yZ),e(yZ,Zkr),e(AE,eSr),e(de,oSr),e(de,LE),e(LE,XEe),e(XEe,rSr),e(LE,tSr),e(LE,xZ),e(xZ,aSr),e(LE,nSr),e(de,sSr),e(de,yE),e(yE,zEe),e(zEe,lSr),e(yE,iSr),e(yE,$Z),e($Z,dSr),e(yE,cSr),e(de,fSr),e(de,xE),e(xE,WEe),e(WEe,mSr),e(xE,gSr),e(xE,kZ),e(kZ,hSr),e(xE,pSr),e(de,_Sr),e(de,$E),e($E,QEe),e(QEe,uSr),e($E,bSr),e($E,SZ),e(SZ,vSr),e($E,FSr),e(de,TSr),e(de,kE),e(kE,UEe),e(UEe,MSr),e(kE,ESr),e(kE,RZ),e(RZ,CSr),e(kE,wSr),e(de,ASr),e(de,SE),e(SE,HEe),e(HEe,LSr),e(SE,ySr),e(SE,PZ),e(PZ,xSr),e(SE,$Sr),e(de,kSr),e(de,RE),e(RE,JEe),e(JEe,SSr),e(RE,RSr),e(RE,BZ),e(BZ,PSr),e(RE,BSr),e(de,ISr),e(de,PE),e(PE,YEe),e(YEe,NSr),e(PE,qSr),e(PE,IZ),e(IZ,jSr),e(PE,DSr),e(de,GSr),e(de,BE),e(BE,KEe),e(KEe,OSr),e(BE,VSr),e(BE,NZ),e(NZ,XSr),e(BE,zSr),e(de,WSr),e(de,IE),e(IE,ZEe),e(ZEe,QSr),e(IE,USr),e(IE,qZ),e(qZ,HSr),e(IE,JSr),e(de,YSr),e(de,NE),e(NE,eCe),e(eCe,KSr),e(NE,ZSr),e(NE,jZ),e(jZ,eRr),e(NE,oRr),e(qr,rRr),M(qE,qr,null),b(f,fHe,u),b(f,Gc,u),e(Gc,jE),e(jE,oCe),M(I$,oCe,null),e(Gc,tRr),e(Gc,rCe),e(rCe,aRr),b(f,mHe,u),b(f,cr,u),M(N$,cr,null),e(cr,nRr),e(cr,Oc),e(Oc,sRr),e(Oc,DZ),e(DZ,lRr),e(Oc,iRr),e(Oc,GZ),e(GZ,dRr),e(Oc,cRr),e(cr,fRr),e(cr,q$),e(q$,mRr),e(q$,tCe),e(tCe,gRr),e(q$,hRr),e(cr,pRr),e(cr,Xt),M(j$,Xt,null),e(Xt,_Rr),e(Xt,aCe),e(aCe,uRr),e(Xt,bRr),e(Xt,Vc),e(Vc,vRr),e(Vc,nCe),e(nCe,FRr),e(Vc,TRr),e(Vc,OZ),e(OZ,MRr),e(Vc,ERr),e(Xt,CRr),M(DE,Xt,null),e(cr,wRr),e(cr,jr),M(D$,jr,null),e(jr,ARr),e(jr,sCe),e(sCe,LRr),e(jr,yRr),e(jr,Mn),e(Mn,xRr),e(Mn,lCe),e(lCe,$Rr),e(Mn,kRr),e(Mn,iCe),e(iCe,SRr),e(Mn,RRr),e(Mn,dCe),e(dCe,PRr),e(Mn,BRr),e(jr,IRr),e(jr,ye),e(ye,GE),e(GE,cCe),e(cCe,NRr),e(GE,qRr),e(GE,VZ),e(VZ,jRr),e(GE,DRr),e(ye,GRr),e(ye,OE),e(OE,fCe),e(fCe,ORr),e(OE,VRr),e(OE,XZ),e(XZ,XRr),e(OE,zRr),e(ye,WRr),e(ye,VE),e(VE,mCe),e(mCe,QRr),e(VE,URr),e(VE,zZ),e(zZ,HRr),e(VE,JRr),e(ye,YRr),e(ye,XE),e(XE,gCe),e(gCe,KRr),e(XE,ZRr),e(XE,WZ),e(WZ,ePr),e(XE,oPr),e(ye,rPr),e(ye,zE),e(zE,hCe),e(hCe,tPr),e(zE,aPr),e(zE,QZ),e(QZ,nPr),e(zE,sPr),e(ye,lPr),e(ye,WE),e(WE,pCe),e(pCe,iPr),e(WE,dPr),e(WE,UZ),e(UZ,cPr),e(WE,fPr),e(ye,mPr),e(ye,QE),e(QE,_Ce),e(_Ce,gPr),e(QE,hPr),e(QE,HZ),e(HZ,pPr),e(QE,_Pr),e(ye,uPr),e(ye,UE),e(UE,uCe),e(uCe,bPr),e(UE,vPr),e(UE,JZ),e(JZ,FPr),e(UE,TPr),e(ye,MPr),e(ye,HE),e(HE,bCe),e(bCe,EPr),e(HE,CPr),e(HE,YZ),e(YZ,wPr),e(HE,APr),e(ye,LPr),e(ye,JE),e(JE,vCe),e(vCe,yPr),e(JE,xPr),e(JE,KZ),e(KZ,$Pr),e(JE,kPr),e(jr,SPr),M(YE,jr,null),b(f,gHe,u),b(f,Xc,u),e(Xc,KE),e(KE,FCe),M(G$,FCe,null),e(Xc,RPr),e(Xc,TCe),e(TCe,PPr),b(f,hHe,u),b(f,fr,u),M(O$,fr,null),e(fr,BPr),e(fr,zc),e(zc,IPr),e(zc,ZZ),e(ZZ,NPr),e(zc,qPr),e(zc,eee),e(eee,jPr),e(zc,DPr),e(fr,GPr),e(fr,V$),e(V$,OPr),e(V$,MCe),e(MCe,VPr),e(V$,XPr),e(fr,zPr),e(fr,zt),M(X$,zt,null),e(zt,WPr),e(zt,ECe),e(ECe,QPr),e(zt,UPr),e(zt,Wc),e(Wc,HPr),e(Wc,CCe),e(CCe,JPr),e(Wc,YPr),e(Wc,oee),e(oee,KPr),e(Wc,ZPr),e(zt,eBr),M(ZE,zt,null),e(fr,oBr),e(fr,Dr),M(z$,Dr,null),e(Dr,rBr),e(Dr,wCe),e(wCe,tBr),e(Dr,aBr),e(Dr,En),e(En,nBr),e(En,ACe),e(ACe,sBr),e(En,lBr),e(En,LCe),e(LCe,iBr),e(En,dBr),e(En,yCe),e(yCe,cBr),e(En,fBr),e(Dr,mBr),e(Dr,te),e(te,eC),e(eC,xCe),e(xCe,gBr),e(eC,hBr),e(eC,ree),e(ree,pBr),e(eC,_Br),e(te,uBr),e(te,oC),e(oC,$Ce),e($Ce,bBr),e(oC,vBr),e(oC,tee),e(tee,FBr),e(oC,TBr),e(te,MBr),e(te,rC),e(rC,kCe),e(kCe,EBr),e(rC,CBr),e(rC,aee),e(aee,wBr),e(rC,ABr),e(te,LBr),e(te,tC),e(tC,SCe),e(SCe,yBr),e(tC,xBr),e(tC,nee),e(nee,$Br),e(tC,kBr),e(te,SBr),e(te,aC),e(aC,RCe),e(RCe,RBr),e(aC,PBr),e(aC,see),e(see,BBr),e(aC,IBr),e(te,NBr),e(te,nC),e(nC,PCe),e(PCe,qBr),e(nC,jBr),e(nC,lee),e(lee,DBr),e(nC,GBr),e(te,OBr),e(te,sC),e(sC,BCe),e(BCe,VBr),e(sC,XBr),e(sC,iee),e(iee,zBr),e(sC,WBr),e(te,QBr),e(te,lC),e(lC,ICe),e(ICe,UBr),e(lC,HBr),e(lC,dee),e(dee,JBr),e(lC,YBr),e(te,KBr),e(te,iC),e(iC,NCe),e(NCe,ZBr),e(iC,eIr),e(iC,cee),e(cee,oIr),e(iC,rIr),e(te,tIr),e(te,dC),e(dC,qCe),e(qCe,aIr),e(dC,nIr),e(dC,fee),e(fee,sIr),e(dC,lIr),e(te,iIr),e(te,cC),e(cC,jCe),e(jCe,dIr),e(cC,cIr),e(cC,mee),e(mee,fIr),e(cC,mIr),e(te,gIr),e(te,fC),e(fC,DCe),e(DCe,hIr),e(fC,pIr),e(fC,gee),e(gee,_Ir),e(fC,uIr),e(te,bIr),e(te,mC),e(mC,GCe),e(GCe,vIr),e(mC,FIr),e(mC,hee),e(hee,TIr),e(mC,MIr),e(te,EIr),e(te,gC),e(gC,OCe),e(OCe,CIr),e(gC,wIr),e(gC,pee),e(pee,AIr),e(gC,LIr),e(te,yIr),e(te,hC),e(hC,VCe),e(VCe,xIr),e(hC,$Ir),e(hC,_ee),e(_ee,kIr),e(hC,SIr),e(te,RIr),e(te,pC),e(pC,XCe),e(XCe,PIr),e(pC,BIr),e(pC,uee),e(uee,IIr),e(pC,NIr),e(te,qIr),e(te,_C),e(_C,zCe),e(zCe,jIr),e(_C,DIr),e(_C,bee),e(bee,GIr),e(_C,OIr),e(te,VIr),e(te,uC),e(uC,WCe),e(WCe,XIr),e(uC,zIr),e(uC,vee),e(vee,WIr),e(uC,QIr),e(te,UIr),e(te,bC),e(bC,QCe),e(QCe,HIr),e(bC,JIr),e(bC,Fee),e(Fee,YIr),e(bC,KIr),e(te,ZIr),e(te,vC),e(vC,UCe),e(UCe,eNr),e(vC,oNr),e(vC,Tee),e(Tee,rNr),e(vC,tNr),e(te,aNr),e(te,FC),e(FC,HCe),e(HCe,nNr),e(FC,sNr),e(FC,Mee),e(Mee,lNr),e(FC,iNr),e(te,dNr),e(te,TC),e(TC,JCe),e(JCe,cNr),e(TC,fNr),e(TC,Eee),e(Eee,mNr),e(TC,gNr),e(te,hNr),e(te,MC),e(MC,YCe),e(YCe,pNr),e(MC,_Nr),e(MC,Cee),e(Cee,uNr),e(MC,bNr),e(te,vNr),e(te,EC),e(EC,KCe),e(KCe,FNr),e(EC,TNr),e(EC,wee),e(wee,MNr),e(EC,ENr),e(te,CNr),e(te,CC),e(CC,ZCe),e(ZCe,wNr),e(CC,ANr),e(CC,Aee),e(Aee,LNr),e(CC,yNr),e(te,xNr),e(te,wC),e(wC,e3e),e(e3e,$Nr),e(wC,kNr),e(wC,Lee),e(Lee,SNr),e(wC,RNr),e(Dr,PNr),M(AC,Dr,null),b(f,pHe,u),b(f,Qc,u),e(Qc,LC),e(LC,o3e),M(W$,o3e,null),e(Qc,BNr),e(Qc,r3e),e(r3e,INr),b(f,_He,u),b(f,mr,u),M(Q$,mr,null),e(mr,NNr),e(mr,Uc),e(Uc,qNr),e(Uc,yee),e(yee,jNr),e(Uc,DNr),e(Uc,xee),e(xee,GNr),e(Uc,ONr),e(mr,VNr),e(mr,U$),e(U$,XNr),e(U$,t3e),e(t3e,zNr),e(U$,WNr),e(mr,QNr),e(mr,Wt),M(H$,Wt,null),e(Wt,UNr),e(Wt,a3e),e(a3e,HNr),e(Wt,JNr),e(Wt,Hc),e(Hc,YNr),e(Hc,n3e),e(n3e,KNr),e(Hc,ZNr),e(Hc,$ee),e($ee,eqr),e(Hc,oqr),e(Wt,rqr),M(yC,Wt,null),e(mr,tqr),e(mr,Gr),M(J$,Gr,null),e(Gr,aqr),e(Gr,s3e),e(s3e,nqr),e(Gr,sqr),e(Gr,Cn),e(Cn,lqr),e(Cn,l3e),e(l3e,iqr),e(Cn,dqr),e(Cn,i3e),e(i3e,cqr),e(Cn,fqr),e(Cn,d3e),e(d3e,mqr),e(Cn,gqr),e(Gr,hqr),e(Gr,ve),e(ve,xC),e(xC,c3e),e(c3e,pqr),e(xC,_qr),e(xC,kee),e(kee,uqr),e(xC,bqr),e(ve,vqr),e(ve,$C),e($C,f3e),e(f3e,Fqr),e($C,Tqr),e($C,See),e(See,Mqr),e($C,Eqr),e(ve,Cqr),e(ve,kC),e(kC,m3e),e(m3e,wqr),e(kC,Aqr),e(kC,Ree),e(Ree,Lqr),e(kC,yqr),e(ve,xqr),e(ve,SC),e(SC,g3e),e(g3e,$qr),e(SC,kqr),e(SC,Pee),e(Pee,Sqr),e(SC,Rqr),e(ve,Pqr),e(ve,RC),e(RC,h3e),e(h3e,Bqr),e(RC,Iqr),e(RC,Bee),e(Bee,Nqr),e(RC,qqr),e(ve,jqr),e(ve,PC),e(PC,p3e),e(p3e,Dqr),e(PC,Gqr),e(PC,Iee),e(Iee,Oqr),e(PC,Vqr),e(ve,Xqr),e(ve,BC),e(BC,_3e),e(_3e,zqr),e(BC,Wqr),e(BC,Nee),e(Nee,Qqr),e(BC,Uqr),e(ve,Hqr),e(ve,IC),e(IC,u3e),e(u3e,Jqr),e(IC,Yqr),e(IC,qee),e(qee,Kqr),e(IC,Zqr),e(ve,ejr),e(ve,NC),e(NC,b3e),e(b3e,ojr),e(NC,rjr),e(NC,jee),e(jee,tjr),e(NC,ajr),e(ve,njr),e(ve,qC),e(qC,v3e),e(v3e,sjr),e(qC,ljr),e(qC,Dee),e(Dee,ijr),e(qC,djr),e(ve,cjr),e(ve,jC),e(jC,F3e),e(F3e,fjr),e(jC,mjr),e(jC,Gee),e(Gee,gjr),e(jC,hjr),e(ve,pjr),e(ve,DC),e(DC,T3e),e(T3e,_jr),e(DC,ujr),e(DC,Oee),e(Oee,bjr),e(DC,vjr),e(ve,Fjr),e(ve,GC),e(GC,M3e),e(M3e,Tjr),e(GC,Mjr),e(GC,Vee),e(Vee,Ejr),e(GC,Cjr),e(ve,wjr),e(ve,OC),e(OC,E3e),e(E3e,Ajr),e(OC,Ljr),e(OC,Xee),e(Xee,yjr),e(OC,xjr),e(ve,$jr),e(ve,VC),e(VC,C3e),e(C3e,kjr),e(VC,Sjr),e(VC,zee),e(zee,Rjr),e(VC,Pjr),e(ve,Bjr),e(ve,XC),e(XC,w3e),e(w3e,Ijr),e(XC,Njr),e(XC,Wee),e(Wee,qjr),e(XC,jjr),e(ve,Djr),e(ve,zC),e(zC,A3e),e(A3e,Gjr),e(zC,Ojr),e(zC,Qee),e(Qee,Vjr),e(zC,Xjr),e(Gr,zjr),M(WC,Gr,null),b(f,uHe,u),b(f,Jc,u),e(Jc,QC),e(QC,L3e),M(Y$,L3e,null),e(Jc,Wjr),e(Jc,y3e),e(y3e,Qjr),b(f,bHe,u),b(f,gr,u),M(K$,gr,null),e(gr,Ujr),e(gr,Yc),e(Yc,Hjr),e(Yc,Uee),e(Uee,Jjr),e(Yc,Yjr),e(Yc,Hee),e(Hee,Kjr),e(Yc,Zjr),e(gr,eDr),e(gr,Z$),e(Z$,oDr),e(Z$,x3e),e(x3e,rDr),e(Z$,tDr),e(gr,aDr),e(gr,Qt),M(ek,Qt,null),e(Qt,nDr),e(Qt,$3e),e($3e,sDr),e(Qt,lDr),e(Qt,Kc),e(Kc,iDr),e(Kc,k3e),e(k3e,dDr),e(Kc,cDr),e(Kc,Jee),e(Jee,fDr),e(Kc,mDr),e(Qt,gDr),M(UC,Qt,null),e(gr,hDr),e(gr,Or),M(ok,Or,null),e(Or,pDr),e(Or,S3e),e(S3e,_Dr),e(Or,uDr),e(Or,wn),e(wn,bDr),e(wn,R3e),e(R3e,vDr),e(wn,FDr),e(wn,P3e),e(P3e,TDr),e(wn,MDr),e(wn,B3e),e(B3e,EDr),e(wn,CDr),e(Or,wDr),e(Or,rk),e(rk,HC),e(HC,I3e),e(I3e,ADr),e(HC,LDr),e(HC,Yee),e(Yee,yDr),e(HC,xDr),e(rk,$Dr),e(rk,JC),e(JC,N3e),e(N3e,kDr),e(JC,SDr),e(JC,Kee),e(Kee,RDr),e(JC,PDr),e(Or,BDr),M(YC,Or,null),b(f,vHe,u),b(f,Zc,u),e(Zc,KC),e(KC,q3e),M(tk,q3e,null),e(Zc,IDr),e(Zc,j3e),e(j3e,NDr),b(f,FHe,u),b(f,hr,u),M(ak,hr,null),e(hr,qDr),e(hr,ef),e(ef,jDr),e(ef,Zee),e(Zee,DDr),e(ef,GDr),e(ef,eoe),e(eoe,ODr),e(ef,VDr),e(hr,XDr),e(hr,nk),e(nk,zDr),e(nk,D3e),e(D3e,WDr),e(nk,QDr),e(hr,UDr),e(hr,Ut),M(sk,Ut,null),e(Ut,HDr),e(Ut,G3e),e(G3e,JDr),e(Ut,YDr),e(Ut,of),e(of,KDr),e(of,O3e),e(O3e,ZDr),e(of,eGr),e(of,ooe),e(ooe,oGr),e(of,rGr),e(Ut,tGr),M(ZC,Ut,null),e(hr,aGr),e(hr,Vr),M(lk,Vr,null),e(Vr,nGr),e(Vr,V3e),e(V3e,sGr),e(Vr,lGr),e(Vr,An),e(An,iGr),e(An,X3e),e(X3e,dGr),e(An,cGr),e(An,z3e),e(z3e,fGr),e(An,mGr),e(An,W3e),e(W3e,gGr),e(An,hGr),e(Vr,pGr),e(Vr,Q3e),e(Q3e,e3),e(e3,U3e),e(U3e,_Gr),e(e3,uGr),e(e3,roe),e(roe,bGr),e(e3,vGr),e(Vr,FGr),M(o3,Vr,null),b(f,THe,u),b(f,rf,u),e(rf,r3),e(r3,H3e),M(ik,H3e,null),e(rf,TGr),e(rf,J3e),e(J3e,MGr),b(f,MHe,u),b(f,pr,u),M(dk,pr,null),e(pr,EGr),e(pr,tf),e(tf,CGr),e(tf,toe),e(toe,wGr),e(tf,AGr),e(tf,aoe),e(aoe,LGr),e(tf,yGr),e(pr,xGr),e(pr,ck),e(ck,$Gr),e(ck,Y3e),e(Y3e,kGr),e(ck,SGr),e(pr,RGr),e(pr,Ht),M(fk,Ht,null),e(Ht,PGr),e(Ht,K3e),e(K3e,BGr),e(Ht,IGr),e(Ht,af),e(af,NGr),e(af,Z3e),e(Z3e,qGr),e(af,jGr),e(af,noe),e(noe,DGr),e(af,GGr),e(Ht,OGr),M(t3,Ht,null),e(pr,VGr),e(pr,Xr),M(mk,Xr,null),e(Xr,XGr),e(Xr,ewe),e(ewe,zGr),e(Xr,WGr),e(Xr,Ln),e(Ln,QGr),e(Ln,owe),e(owe,UGr),e(Ln,HGr),e(Ln,rwe),e(rwe,JGr),e(Ln,YGr),e(Ln,twe),e(twe,KGr),e(Ln,ZGr),e(Xr,eOr),e(Xr,ce),e(ce,a3),e(a3,awe),e(awe,oOr),e(a3,rOr),e(a3,soe),e(soe,tOr),e(a3,aOr),e(ce,nOr),e(ce,n3),e(n3,nwe),e(nwe,sOr),e(n3,lOr),e(n3,loe),e(loe,iOr),e(n3,dOr),e(ce,cOr),e(ce,s3),e(s3,swe),e(swe,fOr),e(s3,mOr),e(s3,ioe),e(ioe,gOr),e(s3,hOr),e(ce,pOr),e(ce,l3),e(l3,lwe),e(lwe,_Or),e(l3,uOr),e(l3,doe),e(doe,bOr),e(l3,vOr),e(ce,FOr),e(ce,i3),e(i3,iwe),e(iwe,TOr),e(i3,MOr),e(i3,coe),e(coe,EOr),e(i3,COr),e(ce,wOr),e(ce,d3),e(d3,dwe),e(dwe,AOr),e(d3,LOr),e(d3,foe),e(foe,yOr),e(d3,xOr),e(ce,$Or),e(ce,c3),e(c3,cwe),e(cwe,kOr),e(c3,SOr),e(c3,moe),e(moe,ROr),e(c3,POr),e(ce,BOr),e(ce,f3),e(f3,fwe),e(fwe,IOr),e(f3,NOr),e(f3,goe),e(goe,qOr),e(f3,jOr),e(ce,DOr),e(ce,m3),e(m3,mwe),e(mwe,GOr),e(m3,OOr),e(m3,hoe),e(hoe,VOr),e(m3,XOr),e(ce,zOr),e(ce,g3),e(g3,gwe),e(gwe,WOr),e(g3,QOr),e(g3,poe),e(poe,UOr),e(g3,HOr),e(ce,JOr),e(ce,h3),e(h3,hwe),e(hwe,YOr),e(h3,KOr),e(h3,_oe),e(_oe,ZOr),e(h3,eVr),e(ce,oVr),e(ce,p3),e(p3,pwe),e(pwe,rVr),e(p3,tVr),e(p3,uoe),e(uoe,aVr),e(p3,nVr),e(ce,sVr),e(ce,_3),e(_3,_we),e(_we,lVr),e(_3,iVr),e(_3,boe),e(boe,dVr),e(_3,cVr),e(ce,fVr),e(ce,u3),e(u3,uwe),e(uwe,mVr),e(u3,gVr),e(u3,voe),e(voe,hVr),e(u3,pVr),e(ce,_Vr),e(ce,b3),e(b3,bwe),e(bwe,uVr),e(b3,bVr),e(b3,Foe),e(Foe,vVr),e(b3,FVr),e(ce,TVr),e(ce,v3),e(v3,vwe),e(vwe,MVr),e(v3,EVr),e(v3,Toe),e(Toe,CVr),e(v3,wVr),e(ce,AVr),e(ce,F3),e(F3,Fwe),e(Fwe,LVr),e(F3,yVr),e(F3,Moe),e(Moe,xVr),e(F3,$Vr),e(ce,kVr),e(ce,T3),e(T3,Twe),e(Twe,SVr),e(T3,RVr),e(T3,Eoe),e(Eoe,PVr),e(T3,BVr),e(ce,IVr),e(ce,M3),e(M3,Mwe),e(Mwe,NVr),e(M3,qVr),e(M3,Coe),e(Coe,jVr),e(M3,DVr),e(ce,GVr),e(ce,E3),e(E3,Ewe),e(Ewe,OVr),e(E3,VVr),e(E3,woe),e(woe,XVr),e(E3,zVr),e(Xr,WVr),M(C3,Xr,null),b(f,EHe,u),b(f,nf,u),e(nf,w3),e(w3,Cwe),M(gk,Cwe,null),e(nf,QVr),e(nf,wwe),e(wwe,UVr),b(f,CHe,u),b(f,_r,u),M(hk,_r,null),e(_r,HVr),e(_r,sf),e(sf,JVr),e(sf,Aoe),e(Aoe,YVr),e(sf,KVr),e(sf,Loe),e(Loe,ZVr),e(sf,eXr),e(_r,oXr),e(_r,pk),e(pk,rXr),e(pk,Awe),e(Awe,tXr),e(pk,aXr),e(_r,nXr),e(_r,Jt),M(_k,Jt,null),e(Jt,sXr),e(Jt,Lwe),e(Lwe,lXr),e(Jt,iXr),e(Jt,lf),e(lf,dXr),e(lf,ywe),e(ywe,cXr),e(lf,fXr),e(lf,yoe),e(yoe,mXr),e(lf,gXr),e(Jt,hXr),M(A3,Jt,null),e(_r,pXr),e(_r,zr),M(uk,zr,null),e(zr,_Xr),e(zr,xwe),e(xwe,uXr),e(zr,bXr),e(zr,yn),e(yn,vXr),e(yn,$we),e($we,FXr),e(yn,TXr),e(yn,kwe),e(kwe,MXr),e(yn,EXr),e(yn,Swe),e(Swe,CXr),e(yn,wXr),e(zr,AXr),e(zr,fe),e(fe,L3),e(L3,Rwe),e(Rwe,LXr),e(L3,yXr),e(L3,xoe),e(xoe,xXr),e(L3,$Xr),e(fe,kXr),e(fe,y3),e(y3,Pwe),e(Pwe,SXr),e(y3,RXr),e(y3,$oe),e($oe,PXr),e(y3,BXr),e(fe,IXr),e(fe,x3),e(x3,Bwe),e(Bwe,NXr),e(x3,qXr),e(x3,koe),e(koe,jXr),e(x3,DXr),e(fe,GXr),e(fe,$3),e($3,Iwe),e(Iwe,OXr),e($3,VXr),e($3,Soe),e(Soe,XXr),e($3,zXr),e(fe,WXr),e(fe,k3),e(k3,Nwe),e(Nwe,QXr),e(k3,UXr),e(k3,Roe),e(Roe,HXr),e(k3,JXr),e(fe,YXr),e(fe,S3),e(S3,qwe),e(qwe,KXr),e(S3,ZXr),e(S3,Poe),e(Poe,ezr),e(S3,ozr),e(fe,rzr),e(fe,R3),e(R3,jwe),e(jwe,tzr),e(R3,azr),e(R3,Boe),e(Boe,nzr),e(R3,szr),e(fe,lzr),e(fe,P3),e(P3,Dwe),e(Dwe,izr),e(P3,dzr),e(P3,Ioe),e(Ioe,czr),e(P3,fzr),e(fe,mzr),e(fe,B3),e(B3,Gwe),e(Gwe,gzr),e(B3,hzr),e(B3,Noe),e(Noe,pzr),e(B3,_zr),e(fe,uzr),e(fe,I3),e(I3,Owe),e(Owe,bzr),e(I3,vzr),e(I3,qoe),e(qoe,Fzr),e(I3,Tzr),e(fe,Mzr),e(fe,N3),e(N3,Vwe),e(Vwe,Ezr),e(N3,Czr),e(N3,joe),e(joe,wzr),e(N3,Azr),e(fe,Lzr),e(fe,q3),e(q3,Xwe),e(Xwe,yzr),e(q3,xzr),e(q3,Doe),e(Doe,$zr),e(q3,kzr),e(fe,Szr),e(fe,j3),e(j3,zwe),e(zwe,Rzr),e(j3,Pzr),e(j3,Goe),e(Goe,Bzr),e(j3,Izr),e(fe,Nzr),e(fe,D3),e(D3,Wwe),e(Wwe,qzr),e(D3,jzr),e(D3,Ooe),e(Ooe,Dzr),e(D3,Gzr),e(fe,Ozr),e(fe,G3),e(G3,Qwe),e(Qwe,Vzr),e(G3,Xzr),e(G3,Voe),e(Voe,zzr),e(G3,Wzr),e(fe,Qzr),e(fe,O3),e(O3,Uwe),e(Uwe,Uzr),e(O3,Hzr),e(O3,Xoe),e(Xoe,Jzr),e(O3,Yzr),e(fe,Kzr),e(fe,V3),e(V3,Hwe),e(Hwe,Zzr),e(V3,eWr),e(V3,zoe),e(zoe,oWr),e(V3,rWr),e(fe,tWr),e(fe,X3),e(X3,Jwe),e(Jwe,aWr),e(X3,nWr),e(X3,Woe),e(Woe,sWr),e(X3,lWr),e(fe,iWr),e(fe,z3),e(z3,Ywe),e(Ywe,dWr),e(z3,cWr),e(z3,Qoe),e(Qoe,fWr),e(z3,mWr),e(fe,gWr),e(fe,W3),e(W3,Kwe),e(Kwe,hWr),e(W3,pWr),e(W3,Uoe),e(Uoe,_Wr),e(W3,uWr),e(zr,bWr),M(Q3,zr,null),b(f,wHe,u),b(f,df,u),e(df,U3),e(U3,Zwe),M(bk,Zwe,null),e(df,vWr),e(df,e6e),e(e6e,FWr),b(f,AHe,u),b(f,ur,u),M(vk,ur,null),e(ur,TWr),e(ur,cf),e(cf,MWr),e(cf,Hoe),e(Hoe,EWr),e(cf,CWr),e(cf,Joe),e(Joe,wWr),e(cf,AWr),e(ur,LWr),e(ur,Fk),e(Fk,yWr),e(Fk,o6e),e(o6e,xWr),e(Fk,$Wr),e(ur,kWr),e(ur,Yt),M(Tk,Yt,null),e(Yt,SWr),e(Yt,r6e),e(r6e,RWr),e(Yt,PWr),e(Yt,ff),e(ff,BWr),e(ff,t6e),e(t6e,IWr),e(ff,NWr),e(ff,Yoe),e(Yoe,qWr),e(ff,jWr),e(Yt,DWr),M(H3,Yt,null),e(ur,GWr),e(ur,Wr),M(Mk,Wr,null),e(Wr,OWr),e(Wr,a6e),e(a6e,VWr),e(Wr,XWr),e(Wr,xn),e(xn,zWr),e(xn,n6e),e(n6e,WWr),e(xn,QWr),e(xn,s6e),e(s6e,UWr),e(xn,HWr),e(xn,l6e),e(l6e,JWr),e(xn,YWr),e(Wr,KWr),e(Wr,i6e),e(i6e,J3),e(J3,d6e),e(d6e,ZWr),e(J3,eQr),e(J3,Koe),e(Koe,oQr),e(J3,rQr),e(Wr,tQr),M(Y3,Wr,null),b(f,LHe,u),b(f,mf,u),e(mf,K3),e(K3,c6e),M(Ek,c6e,null),e(mf,aQr),e(mf,f6e),e(f6e,nQr),b(f,yHe,u),b(f,br,u),M(Ck,br,null),e(br,sQr),e(br,gf),e(gf,lQr),e(gf,Zoe),e(Zoe,iQr),e(gf,dQr),e(gf,ere),e(ere,cQr),e(gf,fQr),e(br,mQr),e(br,wk),e(wk,gQr),e(wk,m6e),e(m6e,hQr),e(wk,pQr),e(br,_Qr),e(br,Kt),M(Ak,Kt,null),e(Kt,uQr),e(Kt,g6e),e(g6e,bQr),e(Kt,vQr),e(Kt,hf),e(hf,FQr),e(hf,h6e),e(h6e,TQr),e(hf,MQr),e(hf,ore),e(ore,EQr),e(hf,CQr),e(Kt,wQr),M(Z3,Kt,null),e(br,AQr),e(br,Qr),M(Lk,Qr,null),e(Qr,LQr),e(Qr,p6e),e(p6e,yQr),e(Qr,xQr),e(Qr,$n),e($n,$Qr),e($n,_6e),e(_6e,kQr),e($n,SQr),e($n,u6e),e(u6e,RQr),e($n,PQr),e($n,b6e),e(b6e,BQr),e($n,IQr),e(Qr,NQr),e(Qr,v6e),e(v6e,ew),e(ew,F6e),e(F6e,qQr),e(ew,jQr),e(ew,rre),e(rre,DQr),e(ew,GQr),e(Qr,OQr),M(ow,Qr,null),b(f,xHe,u),b(f,pf,u),e(pf,rw),e(rw,T6e),M(yk,T6e,null),e(pf,VQr),e(pf,M6e),e(M6e,XQr),b(f,$He,u),b(f,vr,u),M(xk,vr,null),e(vr,zQr),e(vr,_f),e(_f,WQr),e(_f,tre),e(tre,QQr),e(_f,UQr),e(_f,are),e(are,HQr),e(_f,JQr),e(vr,YQr),e(vr,$k),e($k,KQr),e($k,E6e),e(E6e,ZQr),e($k,eUr),e(vr,oUr),e(vr,Zt),M(kk,Zt,null),e(Zt,rUr),e(Zt,C6e),e(C6e,tUr),e(Zt,aUr),e(Zt,uf),e(uf,nUr),e(uf,w6e),e(w6e,sUr),e(uf,lUr),e(uf,nre),e(nre,iUr),e(uf,dUr),e(Zt,cUr),M(tw,Zt,null),e(vr,fUr),e(vr,Ur),M(Sk,Ur,null),e(Ur,mUr),e(Ur,A6e),e(A6e,gUr),e(Ur,hUr),e(Ur,kn),e(kn,pUr),e(kn,L6e),e(L6e,_Ur),e(kn,uUr),e(kn,y6e),e(y6e,bUr),e(kn,vUr),e(kn,x6e),e(x6e,FUr),e(kn,TUr),e(Ur,MUr),e(Ur,re),e(re,aw),e(aw,$6e),e($6e,EUr),e(aw,CUr),e(aw,sre),e(sre,wUr),e(aw,AUr),e(re,LUr),e(re,nw),e(nw,k6e),e(k6e,yUr),e(nw,xUr),e(nw,lre),e(lre,$Ur),e(nw,kUr),e(re,SUr),e(re,sw),e(sw,S6e),e(S6e,RUr),e(sw,PUr),e(sw,ire),e(ire,BUr),e(sw,IUr),e(re,NUr),e(re,lw),e(lw,R6e),e(R6e,qUr),e(lw,jUr),e(lw,dre),e(dre,DUr),e(lw,GUr),e(re,OUr),e(re,iw),e(iw,P6e),e(P6e,VUr),e(iw,XUr),e(iw,cre),e(cre,zUr),e(iw,WUr),e(re,QUr),e(re,dw),e(dw,B6e),e(B6e,UUr),e(dw,HUr),e(dw,fre),e(fre,JUr),e(dw,YUr),e(re,KUr),e(re,cw),e(cw,I6e),e(I6e,ZUr),e(cw,eHr),e(cw,mre),e(mre,oHr),e(cw,rHr),e(re,tHr),e(re,fw),e(fw,N6e),e(N6e,aHr),e(fw,nHr),e(fw,gre),e(gre,sHr),e(fw,lHr),e(re,iHr),e(re,mw),e(mw,q6e),e(q6e,dHr),e(mw,cHr),e(mw,hre),e(hre,fHr),e(mw,mHr),e(re,gHr),e(re,gw),e(gw,j6e),e(j6e,hHr),e(gw,pHr),e(gw,pre),e(pre,_Hr),e(gw,uHr),e(re,bHr),e(re,hw),e(hw,D6e),e(D6e,vHr),e(hw,FHr),e(hw,_re),e(_re,THr),e(hw,MHr),e(re,EHr),e(re,pw),e(pw,G6e),e(G6e,CHr),e(pw,wHr),e(pw,ure),e(ure,AHr),e(pw,LHr),e(re,yHr),e(re,_w),e(_w,O6e),e(O6e,xHr),e(_w,$Hr),e(_w,bre),e(bre,kHr),e(_w,SHr),e(re,RHr),e(re,uw),e(uw,V6e),e(V6e,PHr),e(uw,BHr),e(uw,vre),e(vre,IHr),e(uw,NHr),e(re,qHr),e(re,bw),e(bw,X6e),e(X6e,jHr),e(bw,DHr),e(bw,Fre),e(Fre,GHr),e(bw,OHr),e(re,VHr),e(re,vw),e(vw,z6e),e(z6e,XHr),e(vw,zHr),e(vw,Tre),e(Tre,WHr),e(vw,QHr),e(re,UHr),e(re,Fw),e(Fw,W6e),e(W6e,HHr),e(Fw,JHr),e(Fw,Mre),e(Mre,YHr),e(Fw,KHr),e(re,ZHr),e(re,Tw),e(Tw,Q6e),e(Q6e,eJr),e(Tw,oJr),e(Tw,Ere),e(Ere,rJr),e(Tw,tJr),e(re,aJr),e(re,Mw),e(Mw,U6e),e(U6e,nJr),e(Mw,sJr),e(Mw,Cre),e(Cre,lJr),e(Mw,iJr),e(re,dJr),e(re,Ew),e(Ew,H6e),e(H6e,cJr),e(Ew,fJr),e(Ew,wre),e(wre,mJr),e(Ew,gJr),e(re,hJr),e(re,Cw),e(Cw,J6e),e(J6e,pJr),e(Cw,_Jr),e(Cw,Are),e(Are,uJr),e(Cw,bJr),e(re,vJr),e(re,ww),e(ww,Y6e),e(Y6e,FJr),e(ww,TJr),e(ww,Lre),e(Lre,MJr),e(ww,EJr),e(re,CJr),e(re,Aw),e(Aw,K6e),e(K6e,wJr),e(Aw,AJr),e(Aw,yre),e(yre,LJr),e(Aw,yJr),e(re,xJr),e(re,Lw),e(Lw,Z6e),e(Z6e,$Jr),e(Lw,kJr),e(Lw,xre),e(xre,SJr),e(Lw,RJr),e(re,PJr),e(re,yw),e(yw,eAe),e(eAe,BJr),e(yw,IJr),e(yw,$re),e($re,NJr),e(yw,qJr),e(re,jJr),e(re,xw),e(xw,oAe),e(oAe,DJr),e(xw,GJr),e(xw,kre),e(kre,OJr),e(xw,VJr),e(re,XJr),e(re,$w),e($w,rAe),e(rAe,zJr),e($w,WJr),e($w,Sre),e(Sre,QJr),e($w,UJr),e(Ur,HJr),M(kw,Ur,null),b(f,kHe,u),b(f,bf,u),e(bf,Sw),e(Sw,tAe),M(Rk,tAe,null),e(bf,JJr),e(bf,aAe),e(aAe,YJr),b(f,SHe,u),b(f,Fr,u),M(Pk,Fr,null),e(Fr,KJr),e(Fr,vf),e(vf,ZJr),e(vf,Rre),e(Rre,eYr),e(vf,oYr),e(vf,Pre),e(Pre,rYr),e(vf,tYr),e(Fr,aYr),e(Fr,Bk),e(Bk,nYr),e(Bk,nAe),e(nAe,sYr),e(Bk,lYr),e(Fr,iYr),e(Fr,ea),M(Ik,ea,null),e(ea,dYr),e(ea,sAe),e(sAe,cYr),e(ea,fYr),e(ea,Ff),e(Ff,mYr),e(Ff,lAe),e(lAe,gYr),e(Ff,hYr),e(Ff,Bre),e(Bre,pYr),e(Ff,_Yr),e(ea,uYr),M(Rw,ea,null),e(Fr,bYr),e(Fr,Hr),M(Nk,Hr,null),e(Hr,vYr),e(Hr,iAe),e(iAe,FYr),e(Hr,TYr),e(Hr,Sn),e(Sn,MYr),e(Sn,dAe),e(dAe,EYr),e(Sn,CYr),e(Sn,cAe),e(cAe,wYr),e(Sn,AYr),e(Sn,fAe),e(fAe,LYr),e(Sn,yYr),e(Hr,xYr),e(Hr,xe),e(xe,Pw),e(Pw,mAe),e(mAe,$Yr),e(Pw,kYr),e(Pw,Ire),e(Ire,SYr),e(Pw,RYr),e(xe,PYr),e(xe,Bw),e(Bw,gAe),e(gAe,BYr),e(Bw,IYr),e(Bw,Nre),e(Nre,NYr),e(Bw,qYr),e(xe,jYr),e(xe,Iw),e(Iw,hAe),e(hAe,DYr),e(Iw,GYr),e(Iw,qre),e(qre,OYr),e(Iw,VYr),e(xe,XYr),e(xe,Nw),e(Nw,pAe),e(pAe,zYr),e(Nw,WYr),e(Nw,jre),e(jre,QYr),e(Nw,UYr),e(xe,HYr),e(xe,qw),e(qw,_Ae),e(_Ae,JYr),e(qw,YYr),e(qw,Dre),e(Dre,KYr),e(qw,ZYr),e(xe,eKr),e(xe,jw),e(jw,uAe),e(uAe,oKr),e(jw,rKr),e(jw,Gre),e(Gre,tKr),e(jw,aKr),e(xe,nKr),e(xe,Dw),e(Dw,bAe),e(bAe,sKr),e(Dw,lKr),e(Dw,Ore),e(Ore,iKr),e(Dw,dKr),e(xe,cKr),e(xe,Gw),e(Gw,vAe),e(vAe,fKr),e(Gw,mKr),e(Gw,Vre),e(Vre,gKr),e(Gw,hKr),e(xe,pKr),e(xe,Ow),e(Ow,FAe),e(FAe,_Kr),e(Ow,uKr),e(Ow,Xre),e(Xre,bKr),e(Ow,vKr),e(xe,FKr),e(xe,Vw),e(Vw,TAe),e(TAe,TKr),e(Vw,MKr),e(Vw,zre),e(zre,EKr),e(Vw,CKr),e(Hr,wKr),M(Xw,Hr,null),b(f,RHe,u),b(f,Tf,u),e(Tf,zw),e(zw,MAe),M(qk,MAe,null),e(Tf,AKr),e(Tf,EAe),e(EAe,LKr),b(f,PHe,u),b(f,Tr,u),M(jk,Tr,null),e(Tr,yKr),e(Tr,Mf),e(Mf,xKr),e(Mf,Wre),e(Wre,$Kr),e(Mf,kKr),e(Mf,Qre),e(Qre,SKr),e(Mf,RKr),e(Tr,PKr),e(Tr,Dk),e(Dk,BKr),e(Dk,CAe),e(CAe,IKr),e(Dk,NKr),e(Tr,qKr),e(Tr,oa),M(Gk,oa,null),e(oa,jKr),e(oa,wAe),e(wAe,DKr),e(oa,GKr),e(oa,Ef),e(Ef,OKr),e(Ef,AAe),e(AAe,VKr),e(Ef,XKr),e(Ef,Ure),e(Ure,zKr),e(Ef,WKr),e(oa,QKr),M(Ww,oa,null),e(Tr,UKr),e(Tr,Jr),M(Ok,Jr,null),e(Jr,HKr),e(Jr,LAe),e(LAe,JKr),e(Jr,YKr),e(Jr,Rn),e(Rn,KKr),e(Rn,yAe),e(yAe,ZKr),e(Rn,eZr),e(Rn,xAe),e(xAe,oZr),e(Rn,rZr),e(Rn,$Ae),e($Ae,tZr),e(Rn,aZr),e(Jr,nZr),e(Jr,Ee),e(Ee,Qw),e(Qw,kAe),e(kAe,sZr),e(Qw,lZr),e(Qw,Hre),e(Hre,iZr),e(Qw,dZr),e(Ee,cZr),e(Ee,Uw),e(Uw,SAe),e(SAe,fZr),e(Uw,mZr),e(Uw,Jre),e(Jre,gZr),e(Uw,hZr),e(Ee,pZr),e(Ee,Hw),e(Hw,RAe),e(RAe,_Zr),e(Hw,uZr),e(Hw,Yre),e(Yre,bZr),e(Hw,vZr),e(Ee,FZr),e(Ee,Jw),e(Jw,PAe),e(PAe,TZr),e(Jw,MZr),e(Jw,Kre),e(Kre,EZr),e(Jw,CZr),e(Ee,wZr),e(Ee,Yw),e(Yw,BAe),e(BAe,AZr),e(Yw,LZr),e(Yw,Zre),e(Zre,yZr),e(Yw,xZr),e(Ee,$Zr),e(Ee,Kw),e(Kw,IAe),e(IAe,kZr),e(Kw,SZr),e(Kw,ete),e(ete,RZr),e(Kw,PZr),e(Ee,BZr),e(Ee,Zw),e(Zw,NAe),e(NAe,IZr),e(Zw,NZr),e(Zw,ote),e(ote,qZr),e(Zw,jZr),e(Ee,DZr),e(Ee,e6),e(e6,qAe),e(qAe,GZr),e(e6,OZr),e(e6,rte),e(rte,VZr),e(e6,XZr),e(Ee,zZr),e(Ee,o6),e(o6,jAe),e(jAe,WZr),e(o6,QZr),e(o6,tte),e(tte,UZr),e(o6,HZr),e(Ee,JZr),e(Ee,r6),e(r6,DAe),e(DAe,YZr),e(r6,KZr),e(r6,ate),e(ate,ZZr),e(r6,eet),e(Ee,oet),e(Ee,t6),e(t6,GAe),e(GAe,ret),e(t6,tet),e(t6,nte),e(nte,aet),e(t6,net),e(Ee,set),e(Ee,a6),e(a6,OAe),e(OAe,iet),e(a6,det),e(a6,ste),e(ste,cet),e(a6,fet),e(Ee,met),e(Ee,n6),e(n6,VAe),e(VAe,get),e(n6,het),e(n6,lte),e(lte,pet),e(n6,_et),e(Jr,uet),M(s6,Jr,null),b(f,BHe,u),b(f,Cf,u),e(Cf,l6),e(l6,XAe),M(Vk,XAe,null),e(Cf,bet),e(Cf,zAe),e(zAe,vet),b(f,IHe,u),b(f,Mr,u),M(Xk,Mr,null),e(Mr,Fet),e(Mr,wf),e(wf,Tet),e(wf,ite),e(ite,Met),e(wf,Eet),e(wf,dte),e(dte,Cet),e(wf,wet),e(Mr,Aet),e(Mr,zk),e(zk,Let),e(zk,WAe),e(WAe,yet),e(zk,xet),e(Mr,$et),e(Mr,ra),M(Wk,ra,null),e(ra,ket),e(ra,QAe),e(QAe,Set),e(ra,Ret),e(ra,Af),e(Af,Pet),e(Af,UAe),e(UAe,Bet),e(Af,Iet),e(Af,cte),e(cte,Net),e(Af,qet),e(ra,jet),M(i6,ra,null),e(Mr,Det),e(Mr,Yr),M(Qk,Yr,null),e(Yr,Get),e(Yr,HAe),e(HAe,Oet),e(Yr,Vet),e(Yr,Pn),e(Pn,Xet),e(Pn,JAe),e(JAe,zet),e(Pn,Wet),e(Pn,YAe),e(YAe,Qet),e(Pn,Uet),e(Pn,KAe),e(KAe,Het),e(Pn,Jet),e(Yr,Yet),e(Yr,$e),e($e,d6),e(d6,ZAe),e(ZAe,Ket),e(d6,Zet),e(d6,fte),e(fte,eot),e(d6,oot),e($e,rot),e($e,c6),e(c6,e7e),e(e7e,tot),e(c6,aot),e(c6,mte),e(mte,not),e(c6,sot),e($e,lot),e($e,f6),e(f6,o7e),e(o7e,iot),e(f6,dot),e(f6,gte),e(gte,cot),e(f6,fot),e($e,mot),e($e,m6),e(m6,r7e),e(r7e,got),e(m6,hot),e(m6,hte),e(hte,pot),e(m6,_ot),e($e,uot),e($e,g6),e(g6,t7e),e(t7e,bot),e(g6,vot),e(g6,pte),e(pte,Fot),e(g6,Tot),e($e,Mot),e($e,h6),e(h6,a7e),e(a7e,Eot),e(h6,Cot),e(h6,_te),e(_te,wot),e(h6,Aot),e($e,Lot),e($e,p6),e(p6,n7e),e(n7e,yot),e(p6,xot),e(p6,ute),e(ute,$ot),e(p6,kot),e($e,Sot),e($e,_6),e(_6,s7e),e(s7e,Rot),e(_6,Pot),e(_6,bte),e(bte,Bot),e(_6,Iot),e($e,Not),e($e,u6),e(u6,l7e),e(l7e,qot),e(u6,jot),e(u6,vte),e(vte,Dot),e(u6,Got),e($e,Oot),e($e,b6),e(b6,i7e),e(i7e,Vot),e(b6,Xot),e(b6,Fte),e(Fte,zot),e(b6,Wot),e(Yr,Qot),M(v6,Yr,null),b(f,NHe,u),b(f,Lf,u),e(Lf,F6),e(F6,d7e),M(Uk,d7e,null),e(Lf,Uot),e(Lf,c7e),e(c7e,Hot),b(f,qHe,u),b(f,Er,u),M(Hk,Er,null),e(Er,Jot),e(Er,yf),e(yf,Yot),e(yf,Tte),e(Tte,Kot),e(yf,Zot),e(yf,Mte),e(Mte,ert),e(yf,ort),e(Er,rrt),e(Er,Jk),e(Jk,trt),e(Jk,f7e),e(f7e,art),e(Jk,nrt),e(Er,srt),e(Er,ta),M(Yk,ta,null),e(ta,lrt),e(ta,m7e),e(m7e,irt),e(ta,drt),e(ta,xf),e(xf,crt),e(xf,g7e),e(g7e,frt),e(xf,mrt),e(xf,Ete),e(Ete,grt),e(xf,hrt),e(ta,prt),M(T6,ta,null),e(Er,_rt),e(Er,Kr),M(Kk,Kr,null),e(Kr,urt),e(Kr,h7e),e(h7e,brt),e(Kr,vrt),e(Kr,Bn),e(Bn,Frt),e(Bn,p7e),e(p7e,Trt),e(Bn,Mrt),e(Bn,_7e),e(_7e,Ert),e(Bn,Crt),e(Bn,u7e),e(u7e,wrt),e(Bn,Art),e(Kr,Lrt),e(Kr,ke),e(ke,M6),e(M6,b7e),e(b7e,yrt),e(M6,xrt),e(M6,Cte),e(Cte,$rt),e(M6,krt),e(ke,Srt),e(ke,E6),e(E6,v7e),e(v7e,Rrt),e(E6,Prt),e(E6,wte),e(wte,Brt),e(E6,Irt),e(ke,Nrt),e(ke,C6),e(C6,F7e),e(F7e,qrt),e(C6,jrt),e(C6,Ate),e(Ate,Drt),e(C6,Grt),e(ke,Ort),e(ke,w6),e(w6,T7e),e(T7e,Vrt),e(w6,Xrt),e(w6,Lte),e(Lte,zrt),e(w6,Wrt),e(ke,Qrt),e(ke,A6),e(A6,M7e),e(M7e,Urt),e(A6,Hrt),e(A6,yte),e(yte,Jrt),e(A6,Yrt),e(ke,Krt),e(ke,L6),e(L6,E7e),e(E7e,Zrt),e(L6,ett),e(L6,xte),e(xte,ott),e(L6,rtt),e(ke,ttt),e(ke,y6),e(y6,C7e),e(C7e,att),e(y6,ntt),e(y6,$te),e($te,stt),e(y6,ltt),e(ke,itt),e(ke,x6),e(x6,w7e),e(w7e,dtt),e(x6,ctt),e(x6,kte),e(kte,ftt),e(x6,mtt),e(ke,gtt),e(ke,$6),e($6,A7e),e(A7e,htt),e($6,ptt),e($6,Ste),e(Ste,_tt),e($6,utt),e(ke,btt),e(ke,k6),e(k6,L7e),e(L7e,vtt),e(k6,Ftt),e(k6,Rte),e(Rte,Ttt),e(k6,Mtt),e(Kr,Ett),M(S6,Kr,null),b(f,jHe,u),b(f,$f,u),e($f,R6),e(R6,y7e),M(Zk,y7e,null),e($f,Ctt),e($f,x7e),e(x7e,wtt),b(f,DHe,u),b(f,Cr,u),M(eS,Cr,null),e(Cr,Att),e(Cr,kf),e(kf,Ltt),e(kf,Pte),e(Pte,ytt),e(kf,xtt),e(kf,Bte),e(Bte,$tt),e(kf,ktt),e(Cr,Stt),e(Cr,oS),e(oS,Rtt),e(oS,$7e),e($7e,Ptt),e(oS,Btt),e(Cr,Itt),e(Cr,aa),M(rS,aa,null),e(aa,Ntt),e(aa,k7e),e(k7e,qtt),e(aa,jtt),e(aa,Sf),e(Sf,Dtt),e(Sf,S7e),e(S7e,Gtt),e(Sf,Ott),e(Sf,Ite),e(Ite,Vtt),e(Sf,Xtt),e(aa,ztt),M(P6,aa,null),e(Cr,Wtt),e(Cr,Zr),M(tS,Zr,null),e(Zr,Qtt),e(Zr,R7e),e(R7e,Utt),e(Zr,Htt),e(Zr,In),e(In,Jtt),e(In,P7e),e(P7e,Ytt),e(In,Ktt),e(In,B7e),e(B7e,Ztt),e(In,eat),e(In,I7e),e(I7e,oat),e(In,rat),e(Zr,tat),e(Zr,Se),e(Se,B6),e(B6,N7e),e(N7e,aat),e(B6,nat),e(B6,Nte),e(Nte,sat),e(B6,lat),e(Se,iat),e(Se,I6),e(I6,q7e),e(q7e,dat),e(I6,cat),e(I6,qte),e(qte,fat),e(I6,mat),e(Se,gat),e(Se,N6),e(N6,j7e),e(j7e,hat),e(N6,pat),e(N6,jte),e(jte,_at),e(N6,uat),e(Se,bat),e(Se,q6),e(q6,D7e),e(D7e,vat),e(q6,Fat),e(q6,Dte),e(Dte,Tat),e(q6,Mat),e(Se,Eat),e(Se,j6),e(j6,G7e),e(G7e,Cat),e(j6,wat),e(j6,Gte),e(Gte,Aat),e(j6,Lat),e(Se,yat),e(Se,D6),e(D6,O7e),e(O7e,xat),e(D6,$at),e(D6,Ote),e(Ote,kat),e(D6,Sat),e(Se,Rat),e(Se,G6),e(G6,V7e),e(V7e,Pat),e(G6,Bat),e(G6,Vte),e(Vte,Iat),e(G6,Nat),e(Se,qat),e(Se,O6),e(O6,X7e),e(X7e,jat),e(O6,Dat),e(O6,Xte),e(Xte,Gat),e(O6,Oat),e(Se,Vat),e(Se,V6),e(V6,z7e),e(z7e,Xat),e(V6,zat),e(V6,zte),e(zte,Wat),e(V6,Qat),e(Se,Uat),e(Se,X6),e(X6,W7e),e(W7e,Hat),e(X6,Jat),e(X6,Wte),e(Wte,Yat),e(X6,Kat),e(Zr,Zat),M(z6,Zr,null),b(f,GHe,u),b(f,Rf,u),e(Rf,W6),e(W6,Q7e),M(aS,Q7e,null),e(Rf,ent),e(Rf,U7e),e(U7e,ont),b(f,OHe,u),b(f,wr,u),M(nS,wr,null),e(wr,rnt),e(wr,Pf),e(Pf,tnt),e(Pf,Qte),e(Qte,ant),e(Pf,nnt),e(Pf,Ute),e(Ute,snt),e(Pf,lnt),e(wr,int),e(wr,sS),e(sS,dnt),e(sS,H7e),e(H7e,cnt),e(sS,fnt),e(wr,mnt),e(wr,na),M(lS,na,null),e(na,gnt),e(na,J7e),e(J7e,hnt),e(na,pnt),e(na,Bf),e(Bf,_nt),e(Bf,Y7e),e(Y7e,unt),e(Bf,bnt),e(Bf,Hte),e(Hte,vnt),e(Bf,Fnt),e(na,Tnt),M(Q6,na,null),e(wr,Mnt),e(wr,et),M(iS,et,null),e(et,Ent),e(et,K7e),e(K7e,Cnt),e(et,wnt),e(et,Nn),e(Nn,Ant),e(Nn,Z7e),e(Z7e,Lnt),e(Nn,ynt),e(Nn,eLe),e(eLe,xnt),e(Nn,$nt),e(Nn,oLe),e(oLe,knt),e(Nn,Snt),e(et,Rnt),e(et,Re),e(Re,U6),e(U6,rLe),e(rLe,Pnt),e(U6,Bnt),e(U6,Jte),e(Jte,Int),e(U6,Nnt),e(Re,qnt),e(Re,H6),e(H6,tLe),e(tLe,jnt),e(H6,Dnt),e(H6,Yte),e(Yte,Gnt),e(H6,Ont),e(Re,Vnt),e(Re,J6),e(J6,aLe),e(aLe,Xnt),e(J6,znt),e(J6,Kte),e(Kte,Wnt),e(J6,Qnt),e(Re,Unt),e(Re,Y6),e(Y6,nLe),e(nLe,Hnt),e(Y6,Jnt),e(Y6,Zte),e(Zte,Ynt),e(Y6,Knt),e(Re,Znt),e(Re,K6),e(K6,sLe),e(sLe,est),e(K6,ost),e(K6,eae),e(eae,rst),e(K6,tst),e(Re,ast),e(Re,Z6),e(Z6,lLe),e(lLe,nst),e(Z6,sst),e(Z6,oae),e(oae,lst),e(Z6,ist),e(Re,dst),e(Re,eA),e(eA,iLe),e(iLe,cst),e(eA,fst),e(eA,rae),e(rae,mst),e(eA,gst),e(Re,hst),e(Re,oA),e(oA,dLe),e(dLe,pst),e(oA,_st),e(oA,tae),e(tae,ust),e(oA,bst),e(Re,vst),e(Re,rA),e(rA,cLe),e(cLe,Fst),e(rA,Tst),e(rA,aae),e(aae,Mst),e(rA,Est),e(Re,Cst),e(Re,tA),e(tA,fLe),e(fLe,wst),e(tA,Ast),e(tA,nae),e(nae,Lst),e(tA,yst),e(et,xst),M(aA,et,null),b(f,VHe,u),b(f,If,u),e(If,nA),e(nA,mLe),M(dS,mLe,null),e(If,$st),e(If,gLe),e(gLe,kst),b(f,XHe,u),b(f,Ar,u),M(cS,Ar,null),e(Ar,Sst),e(Ar,Nf),e(Nf,Rst),e(Nf,sae),e(sae,Pst),e(Nf,Bst),e(Nf,lae),e(lae,Ist),e(Nf,Nst),e(Ar,qst),e(Ar,fS),e(fS,jst),e(fS,hLe),e(hLe,Dst),e(fS,Gst),e(Ar,Ost),e(Ar,sa),M(mS,sa,null),e(sa,Vst),e(sa,pLe),e(pLe,Xst),e(sa,zst),e(sa,qf),e(qf,Wst),e(qf,_Le),e(_Le,Qst),e(qf,Ust),e(qf,iae),e(iae,Hst),e(qf,Jst),e(sa,Yst),M(sA,sa,null),e(Ar,Kst),e(Ar,ot),M(gS,ot,null),e(ot,Zst),e(ot,uLe),e(uLe,elt),e(ot,olt),e(ot,qn),e(qn,rlt),e(qn,bLe),e(bLe,tlt),e(qn,alt),e(qn,vLe),e(vLe,nlt),e(qn,slt),e(qn,FLe),e(FLe,llt),e(qn,ilt),e(ot,dlt),e(ot,Xe),e(Xe,lA),e(lA,TLe),e(TLe,clt),e(lA,flt),e(lA,dae),e(dae,mlt),e(lA,glt),e(Xe,hlt),e(Xe,iA),e(iA,MLe),e(MLe,plt),e(iA,_lt),e(iA,cae),e(cae,ult),e(iA,blt),e(Xe,vlt),e(Xe,dA),e(dA,ELe),e(ELe,Flt),e(dA,Tlt),e(dA,fae),e(fae,Mlt),e(dA,Elt),e(Xe,Clt),e(Xe,cA),e(cA,CLe),e(CLe,wlt),e(cA,Alt),e(cA,mae),e(mae,Llt),e(cA,ylt),e(Xe,xlt),e(Xe,fA),e(fA,wLe),e(wLe,$lt),e(fA,klt),e(fA,gae),e(gae,Slt),e(fA,Rlt),e(Xe,Plt),e(Xe,mA),e(mA,ALe),e(ALe,Blt),e(mA,Ilt),e(mA,hae),e(hae,Nlt),e(mA,qlt),e(Xe,jlt),e(Xe,gA),e(gA,LLe),e(LLe,Dlt),e(gA,Glt),e(gA,pae),e(pae,Olt),e(gA,Vlt),e(Xe,Xlt),e(Xe,hA),e(hA,yLe),e(yLe,zlt),e(hA,Wlt),e(hA,_ae),e(_ae,Qlt),e(hA,Ult),e(ot,Hlt),M(pA,ot,null),b(f,zHe,u),b(f,jf,u),e(jf,_A),e(_A,xLe),M(hS,xLe,null),e(jf,Jlt),e(jf,$Le),e($Le,Ylt),b(f,WHe,u),b(f,Lr,u),M(pS,Lr,null),e(Lr,Klt),e(Lr,Df),e(Df,Zlt),e(Df,uae),e(uae,eit),e(Df,oit),e(Df,bae),e(bae,rit),e(Df,tit),e(Lr,ait),e(Lr,_S),e(_S,nit),e(_S,kLe),e(kLe,sit),e(_S,lit),e(Lr,iit),e(Lr,la),M(uS,la,null),e(la,dit),e(la,SLe),e(SLe,cit),e(la,fit),e(la,Gf),e(Gf,mit),e(Gf,RLe),e(RLe,git),e(Gf,hit),e(Gf,vae),e(vae,pit),e(Gf,_it),e(la,uit),M(uA,la,null),e(Lr,bit),e(Lr,rt),M(bS,rt,null),e(rt,vit),e(rt,PLe),e(PLe,Fit),e(rt,Tit),e(rt,jn),e(jn,Mit),e(jn,BLe),e(BLe,Eit),e(jn,Cit),e(jn,ILe),e(ILe,wit),e(jn,Ait),e(jn,NLe),e(NLe,Lit),e(jn,yit),e(rt,xit),e(rt,ze),e(ze,bA),e(bA,qLe),e(qLe,$it),e(bA,kit),e(bA,Fae),e(Fae,Sit),e(bA,Rit),e(ze,Pit),e(ze,vA),e(vA,jLe),e(jLe,Bit),e(vA,Iit),e(vA,Tae),e(Tae,Nit),e(vA,qit),e(ze,jit),e(ze,FA),e(FA,DLe),e(DLe,Dit),e(FA,Git),e(FA,Mae),e(Mae,Oit),e(FA,Vit),e(ze,Xit),e(ze,TA),e(TA,GLe),e(GLe,zit),e(TA,Wit),e(TA,Eae),e(Eae,Qit),e(TA,Uit),e(ze,Hit),e(ze,MA),e(MA,OLe),e(OLe,Jit),e(MA,Yit),e(MA,Cae),e(Cae,Kit),e(MA,Zit),e(ze,edt),e(ze,EA),e(EA,VLe),e(VLe,odt),e(EA,rdt),e(EA,wae),e(wae,tdt),e(EA,adt),e(ze,ndt),e(ze,CA),e(CA,XLe),e(XLe,sdt),e(CA,ldt),e(CA,Aae),e(Aae,idt),e(CA,ddt),e(ze,cdt),e(ze,wA),e(wA,zLe),e(zLe,fdt),e(wA,mdt),e(wA,Lae),e(Lae,gdt),e(wA,hdt),e(rt,pdt),M(AA,rt,null),b(f,QHe,u),b(f,Of,u),e(Of,LA),e(LA,WLe),M(vS,WLe,null),e(Of,_dt),e(Of,QLe),e(QLe,udt),b(f,UHe,u),b(f,yr,u),M(FS,yr,null),e(yr,bdt),e(yr,Vf),e(Vf,vdt),e(Vf,yae),e(yae,Fdt),e(Vf,Tdt),e(Vf,xae),e(xae,Mdt),e(Vf,Edt),e(yr,Cdt),e(yr,TS),e(TS,wdt),e(TS,ULe),e(ULe,Adt),e(TS,Ldt),e(yr,ydt),e(yr,ia),M(MS,ia,null),e(ia,xdt),e(ia,HLe),e(HLe,$dt),e(ia,kdt),e(ia,Xf),e(Xf,Sdt),e(Xf,JLe),e(JLe,Rdt),e(Xf,Pdt),e(Xf,$ae),e($ae,Bdt),e(Xf,Idt),e(ia,Ndt),M(yA,ia,null),e(yr,qdt),e(yr,tt),M(ES,tt,null),e(tt,jdt),e(tt,YLe),e(YLe,Ddt),e(tt,Gdt),e(tt,Dn),e(Dn,Odt),e(Dn,KLe),e(KLe,Vdt),e(Dn,Xdt),e(Dn,ZLe),e(ZLe,zdt),e(Dn,Wdt),e(Dn,eye),e(eye,Qdt),e(Dn,Udt),e(tt,Hdt),e(tt,oye),e(oye,xA),e(xA,rye),e(rye,Jdt),e(xA,Ydt),e(xA,kae),e(kae,Kdt),e(xA,Zdt),e(tt,ect),M($A,tt,null),b(f,HHe,u),b(f,zf,u),e(zf,kA),e(kA,tye),M(CS,tye,null),e(zf,oct),e(zf,aye),e(aye,rct),b(f,JHe,u),b(f,xr,u),M(wS,xr,null),e(xr,tct),e(xr,Wf),e(Wf,act),e(Wf,Sae),e(Sae,nct),e(Wf,sct),e(Wf,Rae),e(Rae,lct),e(Wf,ict),e(xr,dct),e(xr,AS),e(AS,cct),e(AS,nye),e(nye,fct),e(AS,mct),e(xr,gct),e(xr,da),M(LS,da,null),e(da,hct),e(da,sye),e(sye,pct),e(da,_ct),e(da,Qf),e(Qf,uct),e(Qf,lye),e(lye,bct),e(Qf,vct),e(Qf,Pae),e(Pae,Fct),e(Qf,Tct),e(da,Mct),M(SA,da,null),e(xr,Ect),e(xr,at),M(yS,at,null),e(at,Cct),e(at,iye),e(iye,wct),e(at,Act),e(at,Gn),e(Gn,Lct),e(Gn,dye),e(dye,yct),e(Gn,xct),e(Gn,cye),e(cye,$ct),e(Gn,kct),e(Gn,fye),e(fye,Sct),e(Gn,Rct),e(at,Pct),e(at,xS),e(xS,RA),e(RA,mye),e(mye,Bct),e(RA,Ict),e(RA,Bae),e(Bae,Nct),e(RA,qct),e(xS,jct),e(xS,PA),e(PA,gye),e(gye,Dct),e(PA,Gct),e(PA,Iae),e(Iae,Oct),e(PA,Vct),e(at,Xct),M(BA,at,null),b(f,YHe,u),b(f,Uf,u),e(Uf,IA),e(IA,hye),M($S,hye,null),e(Uf,zct),e(Uf,pye),e(pye,Wct),b(f,KHe,u),b(f,$r,u),M(kS,$r,null),e($r,Qct),e($r,Hf),e(Hf,Uct),e(Hf,Nae),e(Nae,Hct),e(Hf,Jct),e(Hf,qae),e(qae,Yct),e(Hf,Kct),e($r,Zct),e($r,SS),e(SS,eft),e(SS,_ye),e(_ye,oft),e(SS,rft),e($r,tft),e($r,ca),M(RS,ca,null),e(ca,aft),e(ca,uye),e(uye,nft),e(ca,sft),e(ca,Jf),e(Jf,lft),e(Jf,bye),e(bye,ift),e(Jf,dft),e(Jf,jae),e(jae,cft),e(Jf,fft),e(ca,mft),M(NA,ca,null),e($r,gft),e($r,nt),M(PS,nt,null),e(nt,hft),e(nt,vye),e(vye,pft),e(nt,_ft),e(nt,On),e(On,uft),e(On,Fye),e(Fye,bft),e(On,vft),e(On,Tye),e(Tye,Fft),e(On,Tft),e(On,Mye),e(Mye,Mft),e(On,Eft),e(nt,Cft),e(nt,Eye),e(Eye,qA),e(qA,Cye),e(Cye,wft),e(qA,Aft),e(qA,Dae),e(Dae,Lft),e(qA,yft),e(nt,xft),M(jA,nt,null),ZHe=!0},p(f,[u]){const BS={};u&2&&(BS.$$scope={dirty:u,ctx:f}),nm.$set(BS);const wye={};u&2&&(wye.$$scope={dirty:u,ctx:f}),Th.$set(wye);const Aye={};u&2&&(Aye.$$scope={dirty:u,ctx:f}),tp.$set(Aye);const Lye={};u&2&&(Lye.$$scope={dirty:u,ctx:f}),Xp.$set(Lye);const IS={};u&2&&(IS.$$scope={dirty:u,ctx:f}),zp.$set(IS);const yye={};u&2&&(yye.$$scope={dirty:u,ctx:f}),h_.$set(yye);const Vn={};u&2&&(Vn.$$scope={dirty:u,ctx:f}),p_.$set(Vn);const xye={};u&2&&(xye.$$scope={dirty:u,ctx:f}),b_.$set(xye);const $ye={};u&2&&($ye.$$scope={dirty:u,ctx:f}),L1.$set($ye);const kye={};u&2&&(kye.$$scope={dirty:u,ctx:f}),x1.$set(kye);const NS={};u&2&&(NS.$$scope={dirty:u,ctx:f}),C4.$set(NS);const Sye={};u&2&&(Sye.$$scope={dirty:u,ctx:f}),A4.$set(Sye);const qS={};u&2&&(qS.$$scope={dirty:u,ctx:f}),h2.$set(qS);const Rye={};u&2&&(Rye.$$scope={dirty:u,ctx:f}),_2.$set(Rye);const jS={};u&2&&(jS.$$scope={dirty:u,ctx:f}),rb.$set(jS);const Pye={};u&2&&(Pye.$$scope={dirty:u,ctx:f}),ab.$set(Pye);const Bye={};u&2&&(Bye.$$scope={dirty:u,ctx:f}),wb.$set(Bye);const Iye={};u&2&&(Iye.$$scope={dirty:u,ctx:f}),Lb.$set(Iye);const Yf={};u&2&&(Yf.$$scope={dirty:u,ctx:f}),Lv.$set(Yf);const Nye={};u&2&&(Nye.$$scope={dirty:u,ctx:f}),xv.$set(Nye);const qye={};u&2&&(qye.$$scope={dirty:u,ctx:f}),i5.$set(qye);const jye={};u&2&&(jye.$$scope={dirty:u,ctx:f}),c5.$set(jye);const DS={};u&2&&(DS.$$scope={dirty:u,ctx:f}),b5.$set(DS);const Dye={};u&2&&(Dye.$$scope={dirty:u,ctx:f}),F5.$set(Dye);const Gye={};u&2&&(Gye.$$scope={dirty:u,ctx:f}),n0.$set(Gye);const Oye={};u&2&&(Oye.$$scope={dirty:u,ctx:f}),l0.$set(Oye);const dt={};u&2&&(dt.$$scope={dirty:u,ctx:f}),K0.$set(dt);const GS={};u&2&&(GS.$$scope={dirty:u,ctx:f}),eF.$set(GS);const Vye={};u&2&&(Vye.$$scope={dirty:u,ctx:f}),tF.$set(Vye);const OS={};u&2&&(OS.$$scope={dirty:u,ctx:f}),nF.$set(OS);const Xye={};u&2&&(Xye.$$scope={dirty:u,ctx:f}),TF.$set(Xye);const ct={};u&2&&(ct.$$scope={dirty:u,ctx:f}),EF.$set(ct);const zye={};u&2&&(zye.$$scope={dirty:u,ctx:f}),AF.$set(zye);const Kf={};u&2&&(Kf.$$scope={dirty:u,ctx:f}),yF.$set(Kf);const Wye={};u&2&&(Wye.$$scope={dirty:u,ctx:f}),kF.$set(Wye);const Qye={};u&2&&(Qye.$$scope={dirty:u,ctx:f}),RF.$set(Qye);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),IF.$set(L);const DA={};u&2&&(DA.$$scope={dirty:u,ctx:f}),qF.$set(DA);const Uye={};u&2&&(Uye.$$scope={dirty:u,ctx:f}),HF.$set(Uye);const Hye={};u&2&&(Hye.$$scope={dirty:u,ctx:f}),YF.$set(Hye);const GA={};u&2&&(GA.$$scope={dirty:u,ctx:f}),aT.$set(GA);const Jye={};u&2&&(Jye.$$scope={dirty:u,ctx:f}),sT.$set(Jye);const Yye={};u&2&&(Yye.$$scope={dirty:u,ctx:f}),bT.$set(Yye);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),FT.$set(OA);const Kye={};u&2&&(Kye.$$scope={dirty:u,ctx:f}),CT.$set(Kye);const Zye={};u&2&&(Zye.$$scope={dirty:u,ctx:f}),AT.$set(Zye);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),RT.$set(VA);const e9e={};u&2&&(e9e.$$scope={dirty:u,ctx:f}),BT.$set(e9e);const o9e={};u&2&&(o9e.$$scope={dirty:u,ctx:f}),GT.$set(o9e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),VT.$set(XA);const r9e={};u&2&&(r9e.$$scope={dirty:u,ctx:f}),QT.$set(r9e);const t9e={};u&2&&(t9e.$$scope={dirty:u,ctx:f}),HT.$set(t9e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),KT.$set(zA);const a9e={};u&2&&(a9e.$$scope={dirty:u,ctx:f}),e8.$set(a9e);const n9e={};u&2&&(n9e.$$scope={dirty:u,ctx:f}),l8.$set(n9e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),d8.$set(WA);const s9e={};u&2&&(s9e.$$scope={dirty:u,ctx:f}),m8.$set(s9e);const l9e={};u&2&&(l9e.$$scope={dirty:u,ctx:f}),h8.$set(l9e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),mM.$set(QA);const i9e={};u&2&&(i9e.$$scope={dirty:u,ctx:f}),hM.$set(i9e);const d9e={};u&2&&(d9e.$$scope={dirty:u,ctx:f}),qM.$set(d9e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),DM.$set(UA);const c9e={};u&2&&(c9e.$$scope={dirty:u,ctx:f}),eE.$set(c9e);const f9e={};u&2&&(f9e.$$scope={dirty:u,ctx:f}),rE.$set(f9e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),cE.$set(HA);const m9e={};u&2&&(m9e.$$scope={dirty:u,ctx:f}),mE.$set(m9e);const g9e={};u&2&&(g9e.$$scope={dirty:u,ctx:f}),pE.$set(g9e);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),uE.$set(JA);const h9e={};u&2&&(h9e.$$scope={dirty:u,ctx:f}),qE.$set(h9e);const p9e={};u&2&&(p9e.$$scope={dirty:u,ctx:f}),DE.$set(p9e);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),YE.$set(YA);const _9e={};u&2&&(_9e.$$scope={dirty:u,ctx:f}),ZE.$set(_9e);const u9e={};u&2&&(u9e.$$scope={dirty:u,ctx:f}),AC.$set(u9e);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),yC.$set(KA);const b9e={};u&2&&(b9e.$$scope={dirty:u,ctx:f}),WC.$set(b9e);const v9e={};u&2&&(v9e.$$scope={dirty:u,ctx:f}),UC.$set(v9e);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),YC.$set(ZA);const F9e={};u&2&&(F9e.$$scope={dirty:u,ctx:f}),ZC.$set(F9e);const T9e={};u&2&&(T9e.$$scope={dirty:u,ctx:f}),o3.$set(T9e);const e7={};u&2&&(e7.$$scope={dirty:u,ctx:f}),t3.$set(e7);const M9e={};u&2&&(M9e.$$scope={dirty:u,ctx:f}),C3.$set(M9e);const E9e={};u&2&&(E9e.$$scope={dirty:u,ctx:f}),A3.$set(E9e);const o7={};u&2&&(o7.$$scope={dirty:u,ctx:f}),Q3.$set(o7);const C9e={};u&2&&(C9e.$$scope={dirty:u,ctx:f}),H3.$set(C9e);const w9e={};u&2&&(w9e.$$scope={dirty:u,ctx:f}),Y3.$set(w9e);const r7={};u&2&&(r7.$$scope={dirty:u,ctx:f}),Z3.$set(r7);const A9e={};u&2&&(A9e.$$scope={dirty:u,ctx:f}),ow.$set(A9e);const L9e={};u&2&&(L9e.$$scope={dirty:u,ctx:f}),tw.$set(L9e);const t7={};u&2&&(t7.$$scope={dirty:u,ctx:f}),kw.$set(t7);const y9e={};u&2&&(y9e.$$scope={dirty:u,ctx:f}),Rw.$set(y9e);const x9e={};u&2&&(x9e.$$scope={dirty:u,ctx:f}),Xw.$set(x9e);const a7={};u&2&&(a7.$$scope={dirty:u,ctx:f}),Ww.$set(a7);const $9e={};u&2&&($9e.$$scope={dirty:u,ctx:f}),s6.$set($9e);const k9e={};u&2&&(k9e.$$scope={dirty:u,ctx:f}),i6.$set(k9e);const n7={};u&2&&(n7.$$scope={dirty:u,ctx:f}),v6.$set(n7);const S9e={};u&2&&(S9e.$$scope={dirty:u,ctx:f}),T6.$set(S9e);const R9e={};u&2&&(R9e.$$scope={dirty:u,ctx:f}),S6.$set(R9e);const s7={};u&2&&(s7.$$scope={dirty:u,ctx:f}),P6.$set(s7);const P9e={};u&2&&(P9e.$$scope={dirty:u,ctx:f}),z6.$set(P9e);const B9e={};u&2&&(B9e.$$scope={dirty:u,ctx:f}),Q6.$set(B9e);const l7={};u&2&&(l7.$$scope={dirty:u,ctx:f}),aA.$set(l7);const I9e={};u&2&&(I9e.$$scope={dirty:u,ctx:f}),sA.$set(I9e);const N9e={};u&2&&(N9e.$$scope={dirty:u,ctx:f}),pA.$set(N9e);const i7={};u&2&&(i7.$$scope={dirty:u,ctx:f}),uA.$set(i7);const q9e={};u&2&&(q9e.$$scope={dirty:u,ctx:f}),AA.$set(q9e);const j9e={};u&2&&(j9e.$$scope={dirty:u,ctx:f}),yA.$set(j9e);const d7={};u&2&&(d7.$$scope={dirty:u,ctx:f}),$A.$set(d7);const D9e={};u&2&&(D9e.$$scope={dirty:u,ctx:f}),SA.$set(D9e);const G9e={};u&2&&(G9e.$$scope={dirty:u,ctx:f}),BA.$set(G9e);const c7={};u&2&&(c7.$$scope={dirty:u,ctx:f}),NA.$set(c7);const O9e={};u&2&&(O9e.$$scope={dirty:u,ctx:f}),jA.$set(O9e)},i(f){ZHe||(E(d.$$.fragment,f),E(ja.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(nm.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(Fy.$$.fragment,f),E(Th.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(Ay.$$.fragment,f),E(tp.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(Sy.$$.fragment,f),E(Xp.$$.fragment,f),E(zp.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(qy.$$.fragment,f),E(h_.$$.fragment,f),E(p_.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(b_.$$.fragment,f),E(Xy.$$.fragment,f),E(L1.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(x1.$$.fragment,f),E(Hy.$$.fragment,f),E(C4.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(A4.$$.fragment,f),E(e9.$$.fragment,f),E(h2.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(_2.$$.fragment,f),E(n9.$$.fragment,f),E(rb.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(ab.$$.fragment,f),E(c9.$$.fragment,f),E(wb.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(Lb.$$.fragment,f),E(p9.$$.fragment,f),E(Lv.$$.fragment,f),E(_9.$$.fragment,f),E(u9.$$.fragment,f),E(v9.$$.fragment,f),E(xv.$$.fragment,f),E(F9.$$.fragment,f),E(i5.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(c5.$$.fragment,f),E(w9.$$.fragment,f),E(b5.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(F5.$$.fragment,f),E($9.$$.fragment,f),E(n0.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(l0.$$.fragment,f),E(B9.$$.fragment,f),E(K0.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(eF.$$.fragment,f),E(D9.$$.fragment,f),E(tF.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(nF.$$.fragment,f),E(z9.$$.fragment,f),E(TF.$$.fragment,f),E(W9.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(EF.$$.fragment,f),E(J9.$$.fragment,f),E(AF.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(yF.$$.fragment,f),E(ox.$$.fragment,f),E(kF.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(RF.$$.fragment,f),E(sx.$$.fragment,f),E(IF.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(qF.$$.fragment,f),E(fx.$$.fragment,f),E(HF.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(YF.$$.fragment,f),E(_x.$$.fragment,f),E(aT.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(sT.$$.fragment,f),E(Tx.$$.fragment,f),E(bT.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(FT.$$.fragment,f),E(Ax.$$.fragment,f),E(CT.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(AT.$$.fragment,f),E(Sx.$$.fragment,f),E(RT.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(BT.$$.fragment,f),E(Nx.$$.fragment,f),E(GT.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(VT.$$.fragment,f),E(Ox.$$.fragment,f),E(QT.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(HT.$$.fragment,f),E(Ux.$$.fragment,f),E(KT.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(e8.$$.fragment,f),E(Zx.$$.fragment,f),E(l8.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(d8.$$.fragment,f),E(a$.$$.fragment,f),E(m8.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(h8.$$.fragment,f),E(d$.$$.fragment,f),E(mM.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(hM.$$.fragment,f),E(h$.$$.fragment,f),E(qM.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(DM.$$.fragment,f),E(v$.$$.fragment,f),E(eE.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(rE.$$.fragment,f),E(C$.$$.fragment,f),E(cE.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(mE.$$.fragment,f),E(x$.$$.fragment,f),E(pE.$$.fragment,f),E(k$.$$.fragment,f),E(S$.$$.fragment,f),E(P$.$$.fragment,f),E(uE.$$.fragment,f),E(B$.$$.fragment,f),E(qE.$$.fragment,f),E(I$.$$.fragment,f),E(N$.$$.fragment,f),E(j$.$$.fragment,f),E(DE.$$.fragment,f),E(D$.$$.fragment,f),E(YE.$$.fragment,f),E(G$.$$.fragment,f),E(O$.$$.fragment,f),E(X$.$$.fragment,f),E(ZE.$$.fragment,f),E(z$.$$.fragment,f),E(AC.$$.fragment,f),E(W$.$$.fragment,f),E(Q$.$$.fragment,f),E(H$.$$.fragment,f),E(yC.$$.fragment,f),E(J$.$$.fragment,f),E(WC.$$.fragment,f),E(Y$.$$.fragment,f),E(K$.$$.fragment,f),E(ek.$$.fragment,f),E(UC.$$.fragment,f),E(ok.$$.fragment,f),E(YC.$$.fragment,f),E(tk.$$.fragment,f),E(ak.$$.fragment,f),E(sk.$$.fragment,f),E(ZC.$$.fragment,f),E(lk.$$.fragment,f),E(o3.$$.fragment,f),E(ik.$$.fragment,f),E(dk.$$.fragment,f),E(fk.$$.fragment,f),E(t3.$$.fragment,f),E(mk.$$.fragment,f),E(C3.$$.fragment,f),E(gk.$$.fragment,f),E(hk.$$.fragment,f),E(_k.$$.fragment,f),E(A3.$$.fragment,f),E(uk.$$.fragment,f),E(Q3.$$.fragment,f),E(bk.$$.fragment,f),E(vk.$$.fragment,f),E(Tk.$$.fragment,f),E(H3.$$.fragment,f),E(Mk.$$.fragment,f),E(Y3.$$.fragment,f),E(Ek.$$.fragment,f),E(Ck.$$.fragment,f),E(Ak.$$.fragment,f),E(Z3.$$.fragment,f),E(Lk.$$.fragment,f),E(ow.$$.fragment,f),E(yk.$$.fragment,f),E(xk.$$.fragment,f),E(kk.$$.fragment,f),E(tw.$$.fragment,f),E(Sk.$$.fragment,f),E(kw.$$.fragment,f),E(Rk.$$.fragment,f),E(Pk.$$.fragment,f),E(Ik.$$.fragment,f),E(Rw.$$.fragment,f),E(Nk.$$.fragment,f),E(Xw.$$.fragment,f),E(qk.$$.fragment,f),E(jk.$$.fragment,f),E(Gk.$$.fragment,f),E(Ww.$$.fragment,f),E(Ok.$$.fragment,f),E(s6.$$.fragment,f),E(Vk.$$.fragment,f),E(Xk.$$.fragment,f),E(Wk.$$.fragment,f),E(i6.$$.fragment,f),E(Qk.$$.fragment,f),E(v6.$$.fragment,f),E(Uk.$$.fragment,f),E(Hk.$$.fragment,f),E(Yk.$$.fragment,f),E(T6.$$.fragment,f),E(Kk.$$.fragment,f),E(S6.$$.fragment,f),E(Zk.$$.fragment,f),E(eS.$$.fragment,f),E(rS.$$.fragment,f),E(P6.$$.fragment,f),E(tS.$$.fragment,f),E(z6.$$.fragment,f),E(aS.$$.fragment,f),E(nS.$$.fragment,f),E(lS.$$.fragment,f),E(Q6.$$.fragment,f),E(iS.$$.fragment,f),E(aA.$$.fragment,f),E(dS.$$.fragment,f),E(cS.$$.fragment,f),E(mS.$$.fragment,f),E(sA.$$.fragment,f),E(gS.$$.fragment,f),E(pA.$$.fragment,f),E(hS.$$.fragment,f),E(pS.$$.fragment,f),E(uS.$$.fragment,f),E(uA.$$.fragment,f),E(bS.$$.fragment,f),E(AA.$$.fragment,f),E(vS.$$.fragment,f),E(FS.$$.fragment,f),E(MS.$$.fragment,f),E(yA.$$.fragment,f),E(ES.$$.fragment,f),E($A.$$.fragment,f),E(CS.$$.fragment,f),E(wS.$$.fragment,f),E(LS.$$.fragment,f),E(SA.$$.fragment,f),E(yS.$$.fragment,f),E(BA.$$.fragment,f),E($S.$$.fragment,f),E(kS.$$.fragment,f),E(RS.$$.fragment,f),E(NA.$$.fragment,f),E(PS.$$.fragment,f),E(jA.$$.fragment,f),ZHe=!0)},o(f){C(d.$$.fragment,f),C(ja.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(nm.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(Fy.$$.fragment,f),C(Th.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(Ay.$$.fragment,f),C(tp.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(Sy.$$.fragment,f),C(Xp.$$.fragment,f),C(zp.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(qy.$$.fragment,f),C(h_.$$.fragment,f),C(p_.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(b_.$$.fragment,f),C(Xy.$$.fragment,f),C(L1.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(x1.$$.fragment,f),C(Hy.$$.fragment,f),C(C4.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(A4.$$.fragment,f),C(e9.$$.fragment,f),C(h2.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(_2.$$.fragment,f),C(n9.$$.fragment,f),C(rb.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(ab.$$.fragment,f),C(c9.$$.fragment,f),C(wb.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(Lb.$$.fragment,f),C(p9.$$.fragment,f),C(Lv.$$.fragment,f),C(_9.$$.fragment,f),C(u9.$$.fragment,f),C(v9.$$.fragment,f),C(xv.$$.fragment,f),C(F9.$$.fragment,f),C(i5.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(c5.$$.fragment,f),C(w9.$$.fragment,f),C(b5.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(F5.$$.fragment,f),C($9.$$.fragment,f),C(n0.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(l0.$$.fragment,f),C(B9.$$.fragment,f),C(K0.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(eF.$$.fragment,f),C(D9.$$.fragment,f),C(tF.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(nF.$$.fragment,f),C(z9.$$.fragment,f),C(TF.$$.fragment,f),C(W9.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(EF.$$.fragment,f),C(J9.$$.fragment,f),C(AF.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(yF.$$.fragment,f),C(ox.$$.fragment,f),C(kF.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(RF.$$.fragment,f),C(sx.$$.fragment,f),C(IF.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(qF.$$.fragment,f),C(fx.$$.fragment,f),C(HF.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(YF.$$.fragment,f),C(_x.$$.fragment,f),C(aT.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(sT.$$.fragment,f),C(Tx.$$.fragment,f),C(bT.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(FT.$$.fragment,f),C(Ax.$$.fragment,f),C(CT.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(AT.$$.fragment,f),C(Sx.$$.fragment,f),C(RT.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(BT.$$.fragment,f),C(Nx.$$.fragment,f),C(GT.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(VT.$$.fragment,f),C(Ox.$$.fragment,f),C(QT.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(HT.$$.fragment,f),C(Ux.$$.fragment,f),C(KT.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(e8.$$.fragment,f),C(Zx.$$.fragment,f),C(l8.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(d8.$$.fragment,f),C(a$.$$.fragment,f),C(m8.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(h8.$$.fragment,f),C(d$.$$.fragment,f),C(mM.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(hM.$$.fragment,f),C(h$.$$.fragment,f),C(qM.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(DM.$$.fragment,f),C(v$.$$.fragment,f),C(eE.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(rE.$$.fragment,f),C(C$.$$.fragment,f),C(cE.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(mE.$$.fragment,f),C(x$.$$.fragment,f),C(pE.$$.fragment,f),C(k$.$$.fragment,f),C(S$.$$.fragment,f),C(P$.$$.fragment,f),C(uE.$$.fragment,f),C(B$.$$.fragment,f),C(qE.$$.fragment,f),C(I$.$$.fragment,f),C(N$.$$.fragment,f),C(j$.$$.fragment,f),C(DE.$$.fragment,f),C(D$.$$.fragment,f),C(YE.$$.fragment,f),C(G$.$$.fragment,f),C(O$.$$.fragment,f),C(X$.$$.fragment,f),C(ZE.$$.fragment,f),C(z$.$$.fragment,f),C(AC.$$.fragment,f),C(W$.$$.fragment,f),C(Q$.$$.fragment,f),C(H$.$$.fragment,f),C(yC.$$.fragment,f),C(J$.$$.fragment,f),C(WC.$$.fragment,f),C(Y$.$$.fragment,f),C(K$.$$.fragment,f),C(ek.$$.fragment,f),C(UC.$$.fragment,f),C(ok.$$.fragment,f),C(YC.$$.fragment,f),C(tk.$$.fragment,f),C(ak.$$.fragment,f),C(sk.$$.fragment,f),C(ZC.$$.fragment,f),C(lk.$$.fragment,f),C(o3.$$.fragment,f),C(ik.$$.fragment,f),C(dk.$$.fragment,f),C(fk.$$.fragment,f),C(t3.$$.fragment,f),C(mk.$$.fragment,f),C(C3.$$.fragment,f),C(gk.$$.fragment,f),C(hk.$$.fragment,f),C(_k.$$.fragment,f),C(A3.$$.fragment,f),C(uk.$$.fragment,f),C(Q3.$$.fragment,f),C(bk.$$.fragment,f),C(vk.$$.fragment,f),C(Tk.$$.fragment,f),C(H3.$$.fragment,f),C(Mk.$$.fragment,f),C(Y3.$$.fragment,f),C(Ek.$$.fragment,f),C(Ck.$$.fragment,f),C(Ak.$$.fragment,f),C(Z3.$$.fragment,f),C(Lk.$$.fragment,f),C(ow.$$.fragment,f),C(yk.$$.fragment,f),C(xk.$$.fragment,f),C(kk.$$.fragment,f),C(tw.$$.fragment,f),C(Sk.$$.fragment,f),C(kw.$$.fragment,f),C(Rk.$$.fragment,f),C(Pk.$$.fragment,f),C(Ik.$$.fragment,f),C(Rw.$$.fragment,f),C(Nk.$$.fragment,f),C(Xw.$$.fragment,f),C(qk.$$.fragment,f),C(jk.$$.fragment,f),C(Gk.$$.fragment,f),C(Ww.$$.fragment,f),C(Ok.$$.fragment,f),C(s6.$$.fragment,f),C(Vk.$$.fragment,f),C(Xk.$$.fragment,f),C(Wk.$$.fragment,f),C(i6.$$.fragment,f),C(Qk.$$.fragment,f),C(v6.$$.fragment,f),C(Uk.$$.fragment,f),C(Hk.$$.fragment,f),C(Yk.$$.fragment,f),C(T6.$$.fragment,f),C(Kk.$$.fragment,f),C(S6.$$.fragment,f),C(Zk.$$.fragment,f),C(eS.$$.fragment,f),C(rS.$$.fragment,f),C(P6.$$.fragment,f),C(tS.$$.fragment,f),C(z6.$$.fragment,f),C(aS.$$.fragment,f),C(nS.$$.fragment,f),C(lS.$$.fragment,f),C(Q6.$$.fragment,f),C(iS.$$.fragment,f),C(aA.$$.fragment,f),C(dS.$$.fragment,f),C(cS.$$.fragment,f),C(mS.$$.fragment,f),C(sA.$$.fragment,f),C(gS.$$.fragment,f),C(pA.$$.fragment,f),C(hS.$$.fragment,f),C(pS.$$.fragment,f),C(uS.$$.fragment,f),C(uA.$$.fragment,f),C(bS.$$.fragment,f),C(AA.$$.fragment,f),C(vS.$$.fragment,f),C(FS.$$.fragment,f),C(MS.$$.fragment,f),C(yA.$$.fragment,f),C(ES.$$.fragment,f),C($A.$$.fragment,f),C(CS.$$.fragment,f),C(wS.$$.fragment,f),C(LS.$$.fragment,f),C(SA.$$.fragment,f),C(yS.$$.fragment,f),C(BA.$$.fragment,f),C($S.$$.fragment,f),C(kS.$$.fragment,f),C(RS.$$.fragment,f),C(NA.$$.fragment,f),C(PS.$$.fragment,f),C(jA.$$.fragment,f),ZHe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(em),f&&t(ft),f&&t(Oe),f&&t(Qe),f&&t(rm),w(ja,f),f&&t(Ue),f&&t(Ae),f&&t(Lo),f&&t(Da),f&&t(XQe),f&&t(Hi),w(hy),f&&t(zQe),f&&t(Un),f&&t(WQe),w(py,f),f&&t(QQe),f&&t(dP),f&&t(UQe),w(nm,f),f&&t(HQe),f&&t(Ji),w(_y),f&&t(JQe),f&&t(yo),w(uy),w(Fy),w(Th),w(Ty),f&&t(YQe),f&&t(Ki),w(My),f&&t(KQe),f&&t(xo),w(Ey),w(Ay),w(tp),w(Ly),f&&t(ZQe),f&&t(Zi),w(yy),f&&t(eUe),f&&t($o),w(xy),w(Sy),w(Xp),w(zp),w(Ry),f&&t(oUe),f&&t(ed),w(Py),f&&t(rUe),f&&t(ko),w(By),w(qy),w(h_),w(p_),w(jy),f&&t(tUe),f&&t(rd),w(Dy),f&&t(aUe),f&&t(So),w(Gy),w(Vy),w(b_),w(Xy),w(L1),f&&t(nUe),f&&t(nd),w(zy),f&&t(sUe),f&&t(Ro),w(Wy),w(Uy),w(x1),w(Hy),w(C4),f&&t(lUe),f&&t(id),w(Jy),f&&t(iUe),f&&t(Po),w(Yy),w(Zy),w(A4),w(e9),w(h2),f&&t(dUe),f&&t(fd),w(o9),f&&t(cUe),f&&t(Bo),w(r9),w(a9),w(_2),w(n9),w(rb),f&&t(fUe),f&&t(hd),w(s9),f&&t(mUe),f&&t(Io),w(l9),w(d9),w(ab),w(c9),w(wb),f&&t(gUe),f&&t(ud),w(f9),f&&t(hUe),f&&t(No),w(m9),w(h9),w(Lb),w(p9),w(Lv),f&&t(pUe),f&&t(Fd),w(_9),f&&t(_Ue),f&&t(qo),w(u9),w(v9),w(xv),w(F9),w(i5),f&&t(uUe),f&&t(Ed),w(T9),f&&t(bUe),f&&t(jo),w(M9),w(C9),w(c5),w(w9),w(b5),f&&t(vUe),f&&t(Ad),w(A9),f&&t(FUe),f&&t(Go),w(L9),w(x9),w(F5),w($9),w(n0),f&&t(TUe),f&&t(xd),w(k9),f&&t(MUe),f&&t(Oo),w(S9),w(P9),w(l0),w(B9),w(K0),f&&t(EUe),f&&t(Sd),w(I9),f&&t(CUe),f&&t(Vo),w(N9),w(j9),w(eF),w(D9),w(tF),f&&t(wUe),f&&t(Bd),w(G9),f&&t(AUe),f&&t(Xo),w(O9),w(X9),w(nF),w(z9),w(TF),f&&t(LUe),f&&t(qd),w(W9),f&&t(yUe),f&&t(zo),w(Q9),w(H9),w(EF),w(J9),w(AF),f&&t(xUe),f&&t(Gd),w(Y9),f&&t($Ue),f&&t(Wo),w(K9),w(ex),w(yF),w(ox),w(kF),f&&t(kUe),f&&t(Xd),w(rx),f&&t(SUe),f&&t(Qo),w(tx),w(nx),w(RF),w(sx),w(IF),f&&t(RUe),f&&t(Qd),w(lx),f&&t(PUe),f&&t(Uo),w(ix),w(cx),w(qF),w(fx),w(HF),f&&t(BUe),f&&t(Jd),w(mx),f&&t(IUe),f&&t(Ho),w(gx),w(px),w(YF),w(_x),w(aT),f&&t(NUe),f&&t(Zd),w(ux),f&&t(qUe),f&&t(Jo),w(bx),w(Fx),w(sT),w(Tx),w(bT),f&&t(jUe),f&&t(rc),w(Mx),f&&t(DUe),f&&t(Yo),w(Ex),w(wx),w(FT),w(Ax),w(CT),f&&t(GUe),f&&t(nc),w(yx),f&&t(OUe),f&&t(Ko),w(xx),w(kx),w(AT),w(Sx),w(RT),f&&t(VUe),f&&t(ic),w(Rx),f&&t(XUe),f&&t(Zo),w(Px),w(Ix),w(BT),w(Nx),w(GT),f&&t(zUe),f&&t(fc),w(qx),f&&t(WUe),f&&t(er),w(jx),w(Gx),w(VT),w(Ox),w(QT),f&&t(QUe),f&&t(hc),w(Xx),f&&t(UUe),f&&t(or),w(zx),w(Qx),w(HT),w(Ux),w(KT),f&&t(HUe),f&&t(uc),w(Hx),f&&t(JUe),f&&t(rr),w(Jx),w(Kx),w(e8),w(Zx),w(l8),f&&t(YUe),f&&t(Fc),w(e$),f&&t(KUe),f&&t(tr),w(o$),w(t$),w(d8),w(a$),w(m8),f&&t(ZUe),f&&t(Ec),w(n$),f&&t(eHe),f&&t(ar),w(s$),w(i$),w(h8),w(d$),w(mM),f&&t(oHe),f&&t(Ac),w(c$),f&&t(rHe),f&&t(nr),w(f$),w(g$),w(hM),w(h$),w(qM),f&&t(tHe),f&&t(xc),w(p$),f&&t(aHe),f&&t(sr),w(_$),w(b$),w(DM),w(v$),w(eE),f&&t(nHe),f&&t(Sc),w(F$),f&&t(sHe),f&&t(lr),w(T$),w(E$),w(rE),w(C$),w(cE),f&&t(lHe),f&&t(Bc),w(w$),f&&t(iHe),f&&t(ir),w(A$),w(y$),w(mE),w(x$),w(pE),f&&t(dHe),f&&t(qc),w(k$),f&&t(cHe),f&&t(dr),w(S$),w(P$),w(uE),w(B$),w(qE),f&&t(fHe),f&&t(Gc),w(I$),f&&t(mHe),f&&t(cr),w(N$),w(j$),w(DE),w(D$),w(YE),f&&t(gHe),f&&t(Xc),w(G$),f&&t(hHe),f&&t(fr),w(O$),w(X$),w(ZE),w(z$),w(AC),f&&t(pHe),f&&t(Qc),w(W$),f&&t(_He),f&&t(mr),w(Q$),w(H$),w(yC),w(J$),w(WC),f&&t(uHe),f&&t(Jc),w(Y$),f&&t(bHe),f&&t(gr),w(K$),w(ek),w(UC),w(ok),w(YC),f&&t(vHe),f&&t(Zc),w(tk),f&&t(FHe),f&&t(hr),w(ak),w(sk),w(ZC),w(lk),w(o3),f&&t(THe),f&&t(rf),w(ik),f&&t(MHe),f&&t(pr),w(dk),w(fk),w(t3),w(mk),w(C3),f&&t(EHe),f&&t(nf),w(gk),f&&t(CHe),f&&t(_r),w(hk),w(_k),w(A3),w(uk),w(Q3),f&&t(wHe),f&&t(df),w(bk),f&&t(AHe),f&&t(ur),w(vk),w(Tk),w(H3),w(Mk),w(Y3),f&&t(LHe),f&&t(mf),w(Ek),f&&t(yHe),f&&t(br),w(Ck),w(Ak),w(Z3),w(Lk),w(ow),f&&t(xHe),f&&t(pf),w(yk),f&&t($He),f&&t(vr),w(xk),w(kk),w(tw),w(Sk),w(kw),f&&t(kHe),f&&t(bf),w(Rk),f&&t(SHe),f&&t(Fr),w(Pk),w(Ik),w(Rw),w(Nk),w(Xw),f&&t(RHe),f&&t(Tf),w(qk),f&&t(PHe),f&&t(Tr),w(jk),w(Gk),w(Ww),w(Ok),w(s6),f&&t(BHe),f&&t(Cf),w(Vk),f&&t(IHe),f&&t(Mr),w(Xk),w(Wk),w(i6),w(Qk),w(v6),f&&t(NHe),f&&t(Lf),w(Uk),f&&t(qHe),f&&t(Er),w(Hk),w(Yk),w(T6),w(Kk),w(S6),f&&t(jHe),f&&t($f),w(Zk),f&&t(DHe),f&&t(Cr),w(eS),w(rS),w(P6),w(tS),w(z6),f&&t(GHe),f&&t(Rf),w(aS),f&&t(OHe),f&&t(wr),w(nS),w(lS),w(Q6),w(iS),w(aA),f&&t(VHe),f&&t(If),w(dS),f&&t(XHe),f&&t(Ar),w(cS),w(mS),w(sA),w(gS),w(pA),f&&t(zHe),f&&t(jf),w(hS),f&&t(WHe),f&&t(Lr),w(pS),w(uS),w(uA),w(bS),w(AA),f&&t(QHe),f&&t(Of),w(vS),f&&t(UHe),f&&t(yr),w(FS),w(MS),w(yA),w(ES),w($A),f&&t(HHe),f&&t(zf),w(CS),f&&t(JHe),f&&t(xr),w(wS),w(LS),w(SA),w(yS),w(BA),f&&t(YHe),f&&t(Uf),w($S),f&&t(KHe),f&&t($r),w(kS),w(RS),w(NA),w(PS),w(jA)}}}const Zaa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function ena($){return Ura(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lna extends Xra{constructor(g){super();zra(this,g,ena,Kaa,Wra,{})}}export{lna as default,Zaa as metadata};
