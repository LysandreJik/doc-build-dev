import{S as dJt,i as cJt,s as fJt,e as a,k as l,w as F,t as o,M as mJt,c as n,d as t,m as i,a as s,x as T,h as r,b as d,G as e,g as b,y as M,q as E,o as C,B as w,v as gJt,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as Znt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function hJt($){let g,v,p,m,_,c,h,wo,$i,If,lt,ki,Si,bL,Nf,Oe,Qe,Ri,Bn,vL,In,Nn,FL,Pi,qn,TL,Bi,qf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),c=a("code"),h=o("PretrainedConfig"),wo=o(`, make sure its
`),$i=a("code"),If=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),ki=a("code"),Si=o('"new-model"'),bL=o(")."),Nf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ri=a("code"),Bn=o("NewModel"),vL=o(" is a subclass of "),In=a("a"),Nn=o("PreTrainedModel"),FL=o(`, make sure its
`),Pi=a("code"),qn=o("config_class"),TL=o(` attribute is set to the same class you use when registering the model (here
`),Bi=a("code"),qf=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var oR=s(p);m=r(oR,"NewModelConfig"),oR.forEach(t),_=r(Ae," is a subclass of "),c=n(Ae,"CODE",{});var Ii=s(c);h=r(Ii,"PretrainedConfig"),Ii.forEach(t),wo=r(Ae,`, make sure its
`),$i=n(Ae,"CODE",{});var rR=s($i);If=r(rR,"model_type"),rR.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),ki=n(Ae,"CODE",{});var tR=s(ki);Si=r(tR,'"new-model"'),tR.forEach(t),bL=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var Ao=s(Oe);Qe=r(Ao,"Likewise, if your "),Ri=n(Ao,"CODE",{});var Ra=s(Ri);Bn=r(Ra,"NewModel"),Ra.forEach(t),vL=r(Ao," is a subclass of "),In=n(Ao,"A",{href:!0});var aR=s(In);Nn=r(aR,"PreTrainedModel"),aR.forEach(t),FL=r(Ao,`, make sure its
`),Pi=n(Ao,"CODE",{});var jf=s(Pi);qn=r(jf,"config_class"),jf.forEach(t),TL=r(Ao,` attribute is set to the same class you use when registering the model (here
`),Bi=n(Ao,"CODE",{});var nR=s(Bi);qf=r(nR,"NewModelConfig"),nR.forEach(t),Sa=r(Ao,")."),Ao.forEach(t),this.h()},h(){d(In,"href","/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,c),e(c,h),e(g,wo),e(g,$i),e($i,If),e(g,lt),e(g,ki),e(ki,Si),e(g,bL),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,Ri),e(Ri,Bn),e(Oe,vL),e(Oe,In),e(In,Nn),e(Oe,FL),e(Oe,Pi),e(Pi,qn),e(Oe,TL),e(Oe,Bi),e(Bi,qf),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function pJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Jt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uJt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function bJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vJt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function FJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Jt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function BJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function tYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function aYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function iYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Yt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Yt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function BYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function tKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function aKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function iKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gKt($){let g,v,p,m,_,c,h,wo,$i,If,lt,ki,Si,bL,Nf,Oe,Qe,Ri,Bn,vL,In,Nn,FL,Pi,qn,TL,Bi,qf,Sa,He,Ae,oR,Ii,rR,tR,Ao,Ra,aR,jf,nR,yUe,gze,Ni,Df,dne,ML,xUe,cne,$Ue,hze,jn,kUe,fne,SUe,RUe,mne,PUe,BUe,pze,EL,_ze,sR,IUe,uze,Gf,bze,qi,Of,gne,CL,NUe,hne,qUe,vze,Lo,wL,jUe,AL,DUe,lR,GUe,OUe,VUe,LL,XUe,pne,zUe,WUe,QUe,yr,yL,HUe,_ne,UUe,JUe,ji,YUe,une,KUe,ZUe,bne,eJe,oJe,rJe,A,Vf,vne,tJe,aJe,iR,nJe,sJe,lJe,Xf,Fne,iJe,dJe,dR,cJe,fJe,mJe,zf,Tne,gJe,hJe,cR,pJe,_Je,uJe,Wf,Mne,bJe,vJe,fR,FJe,TJe,MJe,Qf,Ene,EJe,CJe,mR,wJe,AJe,LJe,Hf,Cne,yJe,xJe,gR,$Je,kJe,SJe,Uf,wne,RJe,PJe,hR,BJe,IJe,NJe,Jf,Ane,qJe,jJe,pR,DJe,GJe,OJe,Yf,Lne,VJe,XJe,_R,zJe,WJe,QJe,Kf,yne,HJe,UJe,uR,JJe,YJe,KJe,Zf,xne,ZJe,eYe,bR,oYe,rYe,tYe,em,$ne,aYe,nYe,vR,sYe,lYe,iYe,om,kne,dYe,cYe,FR,fYe,mYe,gYe,rm,Sne,hYe,pYe,TR,_Ye,uYe,bYe,tm,Rne,vYe,FYe,MR,TYe,MYe,EYe,am,Pne,CYe,wYe,ER,AYe,LYe,yYe,nm,Bne,xYe,$Ye,CR,kYe,SYe,RYe,sm,Ine,PYe,BYe,wR,IYe,NYe,qYe,lm,Nne,jYe,DYe,AR,GYe,OYe,VYe,im,qne,XYe,zYe,LR,WYe,QYe,HYe,dm,jne,UYe,JYe,yR,YYe,KYe,ZYe,cm,Dne,eKe,oKe,xR,rKe,tKe,aKe,fm,Gne,nKe,sKe,$R,lKe,iKe,dKe,mm,One,cKe,fKe,kR,mKe,gKe,hKe,gm,Vne,pKe,_Ke,SR,uKe,bKe,vKe,hm,Xne,FKe,TKe,RR,MKe,EKe,CKe,pm,zne,wKe,AKe,PR,LKe,yKe,xKe,_m,Wne,$Ke,kKe,BR,SKe,RKe,PKe,um,Qne,BKe,IKe,IR,NKe,qKe,jKe,bm,Hne,DKe,GKe,NR,OKe,VKe,XKe,vm,Une,zKe,WKe,qR,QKe,HKe,UKe,Fm,Jne,JKe,YKe,jR,KKe,ZKe,eZe,Tm,Yne,oZe,rZe,DR,tZe,aZe,nZe,Mm,Kne,sZe,lZe,GR,iZe,dZe,cZe,Em,Zne,fZe,mZe,OR,gZe,hZe,pZe,Cm,ese,_Ze,uZe,VR,bZe,vZe,FZe,wm,ose,TZe,MZe,XR,EZe,CZe,wZe,Am,rse,AZe,LZe,zR,yZe,xZe,$Ze,Lm,tse,kZe,SZe,WR,RZe,PZe,BZe,ym,ase,IZe,NZe,QR,qZe,jZe,DZe,xm,nse,GZe,OZe,HR,VZe,XZe,zZe,$m,sse,WZe,QZe,UR,HZe,UZe,JZe,km,lse,YZe,KZe,JR,ZZe,eeo,oeo,Sm,ise,reo,teo,YR,aeo,neo,seo,Rm,dse,leo,ieo,KR,deo,ceo,feo,Pm,cse,meo,geo,ZR,heo,peo,_eo,Bm,fse,ueo,beo,eP,veo,Feo,Teo,Im,mse,Meo,Eeo,oP,Ceo,weo,Aeo,Nm,gse,Leo,yeo,rP,xeo,$eo,keo,qm,hse,Seo,Reo,tP,Peo,Beo,Ieo,jm,pse,Neo,qeo,aP,jeo,Deo,Geo,Dm,_se,Oeo,Veo,nP,Xeo,zeo,Weo,Gm,use,Qeo,Heo,sP,Ueo,Jeo,Yeo,Om,bse,Keo,Zeo,lP,eoo,ooo,roo,Vm,vse,too,aoo,iP,noo,soo,loo,Xm,Fse,ioo,doo,dP,coo,foo,moo,zm,Tse,goo,hoo,cP,poo,_oo,uoo,Wm,Mse,boo,voo,fP,Foo,Too,Moo,Qm,Ese,Eoo,Coo,mP,woo,Aoo,Loo,Hm,Cse,yoo,xoo,gP,$oo,koo,Soo,Um,wse,Roo,Poo,hP,Boo,Ioo,Noo,Jm,Ase,qoo,joo,pP,Doo,Goo,Ooo,Ym,Lse,Voo,Xoo,_P,zoo,Woo,Qoo,Km,yse,Hoo,Uoo,uP,Joo,Yoo,Koo,Zm,xse,Zoo,ero,bP,oro,rro,tro,eg,$se,aro,nro,vP,sro,lro,iro,og,kse,dro,cro,FP,fro,mro,gro,rg,Sse,hro,pro,TP,_ro,uro,bro,tg,Rse,vro,Fro,MP,Tro,Mro,Ero,ag,Pse,Cro,wro,EP,Aro,Lro,yro,ng,Bse,xro,$ro,CP,kro,Sro,Rro,sg,Ise,Pro,Bro,wP,Iro,Nro,qro,lg,Nse,jro,Dro,AP,Gro,Oro,Vro,ig,qse,Xro,zro,LP,Wro,Qro,Hro,dg,jse,Uro,Jro,yP,Yro,Kro,Zro,cg,Dse,eto,oto,xP,rto,tto,ato,fg,Gse,nto,sto,$P,lto,ito,dto,mg,Ose,cto,fto,kP,mto,gto,hto,gg,Vse,pto,_to,SP,uto,bto,vto,hg,Xse,Fto,Tto,RP,Mto,Eto,Cto,pg,zse,wto,Ato,PP,Lto,yto,xto,_g,Wse,$to,kto,BP,Sto,Rto,Pto,ug,Qse,Bto,Ito,IP,Nto,qto,jto,bg,Hse,Dto,Gto,NP,Oto,Vto,Xto,vg,Use,zto,Wto,qP,Qto,Hto,Uto,Fg,Jse,Jto,Yto,jP,Kto,Zto,eao,Tg,Yse,oao,rao,DP,tao,aao,nao,Mg,Kse,sao,lao,GP,iao,dao,cao,Eg,Zse,fao,mao,OP,gao,hao,pao,Cg,ele,_ao,uao,VP,bao,vao,Fao,wg,ole,Tao,Mao,XP,Eao,Cao,wao,Ag,rle,Aao,Lao,zP,yao,xao,$ao,Lg,tle,kao,Sao,WP,Rao,Pao,Bao,yg,ale,Iao,Nao,QP,qao,jao,Dao,xg,nle,Gao,Oao,HP,Vao,Xao,zao,$g,sle,Wao,Qao,UP,Hao,Uao,Jao,kg,lle,Yao,Kao,JP,Zao,eno,ono,Sg,ile,rno,tno,YP,ano,nno,sno,Rg,dle,lno,ino,KP,dno,cno,fno,Pg,cle,mno,gno,ZP,hno,pno,_no,Bg,fle,uno,bno,eB,vno,Fno,Tno,Ig,mle,Mno,Eno,oB,Cno,wno,Ano,Ng,gle,Lno,yno,rB,xno,$no,kno,qg,hle,Sno,Rno,tB,Pno,Bno,Ino,jg,ple,Nno,qno,aB,jno,Dno,Gno,Dg,_le,Ono,Vno,nB,Xno,zno,Wno,Gg,ule,Qno,Hno,sB,Uno,Jno,Yno,Og,ble,Kno,Zno,lB,eso,oso,rso,Vg,vle,tso,aso,iB,nso,sso,lso,Xg,Fle,iso,dso,dB,cso,fso,mso,zg,Tle,gso,hso,cB,pso,_so,uso,Wg,Mle,bso,vso,fB,Fso,Tso,Mso,Qg,Ele,Eso,Cso,mB,wso,Aso,Lso,Hg,Cle,yso,xso,gB,$so,kso,Sso,Ug,wle,Rso,Pso,hB,Bso,Iso,Nso,Jg,Ale,qso,jso,pB,Dso,Gso,Oso,Yg,Lle,Vso,Xso,_B,zso,Wso,Qso,Kg,yle,Hso,Uso,uB,Jso,Yso,Kso,Zg,xle,Zso,elo,bB,olo,rlo,tlo,eh,$le,alo,nlo,vB,slo,llo,ilo,oh,dlo,rh,xL,clo,kle,flo,Fze,Di,th,Sle,$L,mlo,Rle,glo,Tze,yo,kL,hlo,SL,plo,FB,_lo,ulo,blo,RL,vlo,Ple,Flo,Tlo,Mlo,xr,PL,Elo,Ble,Clo,wlo,Pa,Alo,Ile,Llo,ylo,Nle,xlo,$lo,qle,klo,Slo,Rlo,k,Dn,jle,Plo,Blo,TB,Ilo,Nlo,MB,qlo,jlo,Dlo,Gn,Dle,Glo,Olo,EB,Vlo,Xlo,CB,zlo,Wlo,Qlo,On,Gle,Hlo,Ulo,wB,Jlo,Ylo,AB,Klo,Zlo,eio,ah,Ole,oio,rio,LB,tio,aio,nio,Vn,Vle,sio,lio,yB,iio,dio,xB,cio,fio,mio,nh,Xle,gio,hio,$B,pio,_io,uio,sh,zle,bio,vio,kB,Fio,Tio,Mio,lh,Wle,Eio,Cio,SB,wio,Aio,Lio,Xn,Qle,yio,xio,RB,$io,kio,PB,Sio,Rio,Pio,zn,Hle,Bio,Iio,BB,Nio,qio,IB,jio,Dio,Gio,Wn,Ule,Oio,Vio,NB,Xio,zio,qB,Wio,Qio,Hio,ih,Jle,Uio,Jio,jB,Yio,Kio,Zio,dh,Yle,edo,odo,DB,rdo,tdo,ado,ch,Kle,ndo,sdo,GB,ldo,ido,ddo,Qn,Zle,cdo,fdo,OB,mdo,gdo,VB,hdo,pdo,_do,fh,eie,udo,bdo,XB,vdo,Fdo,Tdo,Hn,oie,Mdo,Edo,zB,Cdo,wdo,WB,Ado,Ldo,ydo,Un,rie,xdo,$do,QB,kdo,Sdo,HB,Rdo,Pdo,Bdo,Jn,tie,Ido,Ndo,UB,qdo,jdo,JB,Ddo,Gdo,Odo,Yn,aie,Vdo,Xdo,YB,zdo,Wdo,KB,Qdo,Hdo,Udo,mh,nie,Jdo,Ydo,ZB,Kdo,Zdo,eco,Kn,sie,oco,rco,eI,tco,aco,oI,nco,sco,lco,Zn,lie,ico,dco,rI,cco,fco,tI,mco,gco,hco,es,iie,pco,_co,aI,uco,bco,nI,vco,Fco,Tco,os,die,Mco,Eco,sI,Cco,wco,lI,Aco,Lco,yco,rs,cie,xco,$co,iI,kco,Sco,dI,Rco,Pco,Bco,ts,fie,Ico,Nco,cI,qco,jco,fI,Dco,Gco,Oco,gh,mie,Vco,Xco,mI,zco,Wco,Qco,as,gie,Hco,Uco,gI,Jco,Yco,hI,Kco,Zco,efo,hh,hie,ofo,rfo,pI,tfo,afo,nfo,ns,pie,sfo,lfo,_I,ifo,dfo,uI,cfo,ffo,mfo,ss,_ie,gfo,hfo,bI,pfo,_fo,vI,ufo,bfo,vfo,ls,uie,Ffo,Tfo,FI,Mfo,Efo,TI,Cfo,wfo,Afo,ph,bie,Lfo,yfo,MI,xfo,$fo,kfo,is,vie,Sfo,Rfo,EI,Pfo,Bfo,CI,Ifo,Nfo,qfo,ds,Fie,jfo,Dfo,wI,Gfo,Ofo,AI,Vfo,Xfo,zfo,cs,Tie,Wfo,Qfo,LI,Hfo,Ufo,yI,Jfo,Yfo,Kfo,_h,Mie,Zfo,emo,xI,omo,rmo,tmo,fs,Eie,amo,nmo,$I,smo,lmo,kI,imo,dmo,cmo,ms,Cie,fmo,mmo,SI,gmo,hmo,RI,pmo,_mo,umo,gs,wie,bmo,vmo,PI,Fmo,Tmo,BI,Mmo,Emo,Cmo,hs,Aie,wmo,Amo,II,Lmo,ymo,NI,xmo,$mo,kmo,ps,Lie,Smo,Rmo,qI,Pmo,Bmo,jI,Imo,Nmo,qmo,_s,yie,jmo,Dmo,DI,Gmo,Omo,GI,Vmo,Xmo,zmo,us,xie,Wmo,Qmo,OI,Hmo,Umo,VI,Jmo,Ymo,Kmo,bs,$ie,Zmo,ego,XI,ogo,rgo,zI,tgo,ago,ngo,uh,kie,sgo,lgo,WI,igo,dgo,cgo,vs,Sie,fgo,mgo,QI,ggo,hgo,HI,pgo,_go,ugo,bh,Rie,bgo,vgo,UI,Fgo,Tgo,Mgo,vh,Pie,Ego,Cgo,JI,wgo,Ago,Lgo,Fs,Bie,ygo,xgo,YI,$go,kgo,KI,Sgo,Rgo,Pgo,Ts,Iie,Bgo,Igo,ZI,Ngo,qgo,eN,jgo,Dgo,Ggo,Ms,Nie,Ogo,Vgo,oN,Xgo,zgo,rN,Wgo,Qgo,Hgo,Fh,qie,Ugo,Jgo,tN,Ygo,Kgo,Zgo,Es,jie,eho,oho,aN,rho,tho,nN,aho,nho,sho,Cs,Die,lho,iho,sN,dho,cho,lN,fho,mho,gho,ws,Gie,hho,pho,iN,_ho,uho,dN,bho,vho,Fho,As,Oie,Tho,Mho,cN,Eho,Cho,fN,who,Aho,Lho,Ls,Vie,yho,xho,mN,$ho,kho,gN,Sho,Rho,Pho,ys,Xie,Bho,Iho,hN,Nho,qho,pN,jho,Dho,Gho,xs,zie,Oho,Vho,_N,Xho,zho,uN,Who,Qho,Hho,$s,Wie,Uho,Jho,bN,Yho,Kho,vN,Zho,epo,opo,Th,Qie,rpo,tpo,FN,apo,npo,spo,ks,Hie,lpo,ipo,TN,dpo,cpo,MN,fpo,mpo,gpo,Ss,Uie,hpo,ppo,EN,_po,upo,CN,bpo,vpo,Fpo,Mh,Jie,Tpo,Mpo,wN,Epo,Cpo,wpo,Eh,Yie,Apo,Lpo,AN,ypo,xpo,$po,Ch,Kie,kpo,Spo,LN,Rpo,Ppo,Bpo,wh,Zie,Ipo,Npo,yN,qpo,jpo,Dpo,Rs,ede,Gpo,Opo,xN,Vpo,Xpo,$N,zpo,Wpo,Qpo,Ah,ode,Hpo,Upo,kN,Jpo,Ypo,Kpo,Ps,rde,Zpo,e_o,SN,o_o,r_o,RN,t_o,a_o,n_o,Bs,tde,s_o,l_o,PN,i_o,d_o,BN,c_o,f_o,m_o,Is,ade,g_o,h_o,IN,p_o,__o,NN,u_o,b_o,v_o,Ns,nde,F_o,T_o,qN,M_o,E_o,jN,C_o,w_o,A_o,qs,sde,L_o,y_o,DN,x_o,$_o,GN,k_o,S_o,R_o,js,lde,P_o,B_o,ON,I_o,N_o,VN,q_o,j_o,D_o,Lh,ide,G_o,O_o,XN,V_o,X_o,z_o,yh,dde,W_o,Q_o,zN,H_o,U_o,J_o,Ds,cde,Y_o,K_o,WN,Z_o,euo,QN,ouo,ruo,tuo,Gs,fde,auo,nuo,HN,suo,luo,UN,iuo,duo,cuo,Os,mde,fuo,muo,JN,guo,huo,YN,puo,_uo,uuo,xh,gde,buo,vuo,KN,Fuo,Tuo,Muo,$h,hde,Euo,Cuo,ZN,wuo,Auo,Luo,kh,pde,yuo,xuo,eq,$uo,kuo,Suo,Vs,_de,Ruo,Puo,oq,Buo,Iuo,rq,Nuo,quo,juo,Xs,ude,Duo,Guo,tq,Ouo,Vuo,aq,Xuo,zuo,Wuo,Sh,bde,Quo,Huo,nq,Uuo,Juo,Yuo,Rh,vde,Kuo,Zuo,sq,e2o,o2o,r2o,Ph,Fde,t2o,a2o,lq,n2o,s2o,l2o,zs,Tde,i2o,d2o,iq,c2o,f2o,dq,m2o,g2o,h2o,Bh,Mde,p2o,_2o,cq,u2o,b2o,v2o,Ih,Ede,F2o,T2o,fq,M2o,E2o,C2o,Ws,Cde,w2o,A2o,mq,L2o,y2o,gq,x2o,$2o,k2o,Qs,wde,S2o,R2o,hq,P2o,B2o,pq,I2o,N2o,q2o,Hs,Ade,j2o,D2o,_q,G2o,O2o,uq,V2o,X2o,z2o,Us,Lde,W2o,Q2o,bq,H2o,U2o,vq,J2o,Y2o,K2o,Nh,Z2o,qh,BL,e1o,yde,o1o,Mze,Gi,jh,xde,IL,r1o,$de,t1o,Eze,xo,NL,a1o,qL,n1o,Fq,s1o,l1o,i1o,jL,d1o,kde,c1o,f1o,m1o,Ue,DL,g1o,Sde,h1o,p1o,Ba,_1o,Rde,u1o,b1o,Pde,v1o,F1o,Bde,T1o,M1o,E1o,U,Dh,Ide,C1o,w1o,Tq,A1o,L1o,y1o,Gh,Nde,x1o,$1o,Mq,k1o,S1o,R1o,Oh,qde,P1o,B1o,Eq,I1o,N1o,q1o,Vh,jde,j1o,D1o,Cq,G1o,O1o,V1o,Xh,Dde,X1o,z1o,wq,W1o,Q1o,H1o,zh,Gde,U1o,J1o,Aq,Y1o,K1o,Z1o,Wh,Ode,ebo,obo,Lq,rbo,tbo,abo,Qh,Vde,nbo,sbo,yq,lbo,ibo,dbo,Hh,Xde,cbo,fbo,xq,mbo,gbo,hbo,Uh,zde,pbo,_bo,$q,ubo,bbo,vbo,Jh,Wde,Fbo,Tbo,kq,Mbo,Ebo,Cbo,Yh,Qde,wbo,Abo,Sq,Lbo,ybo,xbo,Kh,Hde,$bo,kbo,Rq,Sbo,Rbo,Pbo,Zh,Ude,Bbo,Ibo,Pq,Nbo,qbo,jbo,ep,Jde,Dbo,Gbo,Bq,Obo,Vbo,Xbo,op,Yde,zbo,Wbo,Iq,Qbo,Hbo,Ubo,rp,Kde,Jbo,Ybo,Nq,Kbo,Zbo,evo,tp,Zde,ovo,rvo,qq,tvo,avo,nvo,ap,ece,svo,lvo,jq,ivo,dvo,cvo,np,oce,fvo,mvo,Dq,gvo,hvo,pvo,sp,rce,_vo,uvo,Gq,bvo,vvo,Fvo,lp,tce,Tvo,Mvo,Oq,Evo,Cvo,wvo,ip,ace,Avo,Lvo,Vq,yvo,xvo,$vo,dp,nce,kvo,Svo,Xq,Rvo,Pvo,Bvo,cp,sce,Ivo,Nvo,zq,qvo,jvo,Dvo,fp,lce,Gvo,Ovo,Wq,Vvo,Xvo,zvo,mp,ice,Wvo,Qvo,Qq,Hvo,Uvo,Jvo,gp,dce,Yvo,Kvo,Hq,Zvo,e3o,o3o,hp,cce,r3o,t3o,Uq,a3o,n3o,s3o,pp,fce,l3o,i3o,Jq,d3o,c3o,f3o,_p,mce,m3o,g3o,Yq,h3o,p3o,_3o,up,gce,u3o,b3o,Kq,v3o,F3o,T3o,bp,hce,M3o,E3o,Zq,C3o,w3o,A3o,vp,pce,L3o,y3o,ej,x3o,$3o,k3o,Fp,_ce,S3o,R3o,oj,P3o,B3o,I3o,Tp,uce,N3o,q3o,rj,j3o,D3o,G3o,Mp,O3o,Ep,V3o,Cp,GL,X3o,bce,z3o,Cze,Oi,wp,vce,OL,W3o,Fce,Q3o,wze,$o,VL,H3o,XL,U3o,tj,J3o,Y3o,K3o,zL,Z3o,Tce,eFo,oFo,rFo,Je,WL,tFo,Mce,aFo,nFo,Vi,sFo,Ece,lFo,iFo,Cce,dFo,cFo,fFo,fe,Ap,wce,mFo,gFo,aj,hFo,pFo,_Fo,Lp,Ace,uFo,bFo,nj,vFo,FFo,TFo,yp,Lce,MFo,EFo,sj,CFo,wFo,AFo,xp,yce,LFo,yFo,lj,xFo,$Fo,kFo,$p,xce,SFo,RFo,ij,PFo,BFo,IFo,kp,$ce,NFo,qFo,dj,jFo,DFo,GFo,Sp,kce,OFo,VFo,cj,XFo,zFo,WFo,Rp,Sce,QFo,HFo,fj,UFo,JFo,YFo,Pp,Rce,KFo,ZFo,mj,e6o,o6o,r6o,Bp,Pce,t6o,a6o,gj,n6o,s6o,l6o,Ip,Bce,i6o,d6o,hj,c6o,f6o,m6o,Np,Ice,g6o,h6o,pj,p6o,_6o,u6o,qp,Nce,b6o,v6o,_j,F6o,T6o,M6o,jp,qce,E6o,C6o,uj,w6o,A6o,L6o,Dp,jce,y6o,x6o,bj,$6o,k6o,S6o,Gp,Dce,R6o,P6o,vj,B6o,I6o,N6o,Op,Gce,q6o,j6o,Fj,D6o,G6o,O6o,Vp,Oce,V6o,X6o,Tj,z6o,W6o,Q6o,Xp,Vce,H6o,U6o,Mj,J6o,Y6o,K6o,zp,Z6o,Wp,eTo,Qp,QL,oTo,Xce,rTo,Aze,Xi,Hp,zce,HL,tTo,Wce,aTo,Lze,ko,UL,nTo,zi,sTo,Ej,lTo,iTo,Cj,dTo,cTo,fTo,JL,mTo,Qce,gTo,hTo,pTo,it,YL,_To,Hce,uTo,bTo,Wi,vTo,Uce,FTo,TTo,wj,MTo,ETo,CTo,Up,wTo,Ye,KL,ATo,Jce,LTo,yTo,Ia,xTo,Yce,$To,kTo,Kce,STo,RTo,Zce,PTo,BTo,ITo,y,Jp,efe,NTo,qTo,Aj,jTo,DTo,GTo,Yp,ofe,OTo,VTo,Lj,XTo,zTo,WTo,Kp,rfe,QTo,HTo,yj,UTo,JTo,YTo,Zp,tfe,KTo,ZTo,xj,e8o,o8o,r8o,e_,afe,t8o,a8o,$j,n8o,s8o,l8o,o_,nfe,i8o,d8o,kj,c8o,f8o,m8o,r_,sfe,g8o,h8o,Sj,p8o,_8o,u8o,t_,lfe,b8o,v8o,Rj,F8o,T8o,M8o,a_,ife,E8o,C8o,Pj,w8o,A8o,L8o,n_,dfe,y8o,x8o,Bj,$8o,k8o,S8o,s_,cfe,R8o,P8o,Ij,B8o,I8o,N8o,l_,ffe,q8o,j8o,Nj,D8o,G8o,O8o,i_,mfe,V8o,X8o,qj,z8o,W8o,Q8o,d_,gfe,H8o,U8o,jj,J8o,Y8o,K8o,c_,hfe,Z8o,eMo,Dj,oMo,rMo,tMo,f_,pfe,aMo,nMo,Gj,sMo,lMo,iMo,m_,_fe,dMo,cMo,Oj,fMo,mMo,gMo,g_,ufe,hMo,pMo,Vj,_Mo,uMo,bMo,h_,bfe,vMo,FMo,Xj,TMo,MMo,EMo,p_,vfe,CMo,wMo,zj,AMo,LMo,yMo,__,Ffe,xMo,$Mo,Wj,kMo,SMo,RMo,u_,Tfe,PMo,BMo,Qj,IMo,NMo,qMo,b_,Mfe,jMo,DMo,Hj,GMo,OMo,VMo,v_,Efe,XMo,zMo,Uj,WMo,QMo,HMo,F_,Cfe,UMo,JMo,Jj,YMo,KMo,ZMo,T_,wfe,e4o,o4o,Yj,r4o,t4o,a4o,M_,Afe,n4o,s4o,Kj,l4o,i4o,d4o,E_,Lfe,c4o,f4o,Zj,m4o,g4o,h4o,C_,yfe,p4o,_4o,eD,u4o,b4o,v4o,w_,xfe,F4o,T4o,oD,M4o,E4o,C4o,A_,$fe,w4o,A4o,rD,L4o,y4o,x4o,L_,kfe,$4o,k4o,tD,S4o,R4o,P4o,y_,Sfe,B4o,I4o,aD,N4o,q4o,j4o,x_,Rfe,D4o,G4o,nD,O4o,V4o,X4o,Js,Pfe,z4o,W4o,sD,Q4o,H4o,lD,U4o,J4o,Y4o,$_,Bfe,K4o,Z4o,iD,eEo,oEo,rEo,k_,Ife,tEo,aEo,dD,nEo,sEo,lEo,S_,Nfe,iEo,dEo,cD,cEo,fEo,mEo,R_,qfe,gEo,hEo,fD,pEo,_Eo,uEo,P_,jfe,bEo,vEo,mD,FEo,TEo,MEo,B_,Dfe,EEo,CEo,gD,wEo,AEo,LEo,I_,Gfe,yEo,xEo,hD,$Eo,kEo,SEo,N_,Ofe,REo,PEo,pD,BEo,IEo,NEo,q_,Vfe,qEo,jEo,_D,DEo,GEo,OEo,j_,Xfe,VEo,XEo,uD,zEo,WEo,QEo,D_,zfe,HEo,UEo,bD,JEo,YEo,KEo,G_,Wfe,ZEo,eCo,vD,oCo,rCo,tCo,O_,Qfe,aCo,nCo,FD,sCo,lCo,iCo,V_,Hfe,dCo,cCo,TD,fCo,mCo,gCo,X_,Ufe,hCo,pCo,MD,_Co,uCo,bCo,z_,Jfe,vCo,FCo,ED,TCo,MCo,ECo,W_,Yfe,CCo,wCo,CD,ACo,LCo,yCo,Q_,Kfe,xCo,$Co,wD,kCo,SCo,RCo,H_,Zfe,PCo,BCo,AD,ICo,NCo,qCo,U_,eme,jCo,DCo,LD,GCo,OCo,VCo,J_,ome,XCo,zCo,yD,WCo,QCo,HCo,Y_,rme,UCo,JCo,xD,YCo,KCo,ZCo,K_,tme,e5o,o5o,$D,r5o,t5o,a5o,Z_,ame,n5o,s5o,kD,l5o,i5o,d5o,eu,nme,c5o,f5o,SD,m5o,g5o,h5o,ou,sme,p5o,_5o,RD,u5o,b5o,v5o,ru,lme,F5o,T5o,PD,M5o,E5o,C5o,tu,ime,w5o,A5o,BD,L5o,y5o,x5o,au,dme,$5o,k5o,ID,S5o,R5o,P5o,nu,cme,B5o,I5o,ND,N5o,q5o,j5o,su,fme,D5o,G5o,qD,O5o,V5o,X5o,lu,mme,z5o,W5o,jD,Q5o,H5o,U5o,iu,gme,J5o,Y5o,DD,K5o,Z5o,e0o,du,hme,o0o,r0o,GD,t0o,a0o,n0o,cu,pme,s0o,l0o,OD,i0o,d0o,c0o,fu,_me,f0o,m0o,VD,g0o,h0o,p0o,mu,ume,_0o,u0o,XD,b0o,v0o,F0o,gu,bme,T0o,M0o,zD,E0o,C0o,w0o,hu,vme,A0o,L0o,WD,y0o,x0o,$0o,pu,Fme,k0o,S0o,QD,R0o,P0o,B0o,_u,Tme,I0o,N0o,HD,q0o,j0o,D0o,uu,Mme,G0o,O0o,UD,V0o,X0o,z0o,bu,Eme,W0o,Q0o,JD,H0o,U0o,J0o,vu,Cme,Y0o,K0o,YD,Z0o,ewo,owo,Fu,wme,rwo,two,KD,awo,nwo,swo,Tu,Ame,lwo,iwo,ZD,dwo,cwo,fwo,Mu,Lme,mwo,gwo,eG,hwo,pwo,_wo,Eu,yme,uwo,bwo,oG,vwo,Fwo,Two,Cu,xme,Mwo,Ewo,rG,Cwo,wwo,Awo,wu,$me,Lwo,ywo,tG,xwo,$wo,kwo,Au,kme,Swo,Rwo,aG,Pwo,Bwo,Iwo,Lu,Sme,Nwo,qwo,nG,jwo,Dwo,Gwo,yu,Rme,Owo,Vwo,sG,Xwo,zwo,Wwo,xu,Pme,Qwo,Hwo,lG,Uwo,Jwo,Ywo,$u,Bme,Kwo,Zwo,iG,eAo,oAo,rAo,ku,Ime,tAo,aAo,dG,nAo,sAo,lAo,Su,Nme,iAo,dAo,cG,cAo,fAo,mAo,Ru,qme,gAo,hAo,fG,pAo,_Ao,uAo,Pu,jme,bAo,vAo,mG,FAo,TAo,MAo,Bu,Dme,EAo,CAo,gG,wAo,AAo,LAo,Iu,Gme,yAo,xAo,hG,$Ao,kAo,SAo,Nu,Ome,RAo,PAo,pG,BAo,IAo,NAo,qu,Vme,qAo,jAo,_G,DAo,GAo,OAo,ju,Xme,VAo,XAo,uG,zAo,WAo,QAo,Du,zme,HAo,UAo,bG,JAo,YAo,KAo,Gu,Wme,ZAo,e7o,vG,o7o,r7o,t7o,Ou,Qme,a7o,n7o,FG,s7o,l7o,i7o,Vu,Hme,d7o,c7o,TG,f7o,m7o,g7o,Xu,Ume,h7o,p7o,MG,_7o,u7o,b7o,zu,Jme,v7o,F7o,EG,T7o,M7o,E7o,Wu,Yme,C7o,w7o,CG,A7o,L7o,y7o,Qu,Kme,x7o,$7o,wG,k7o,S7o,R7o,Hu,Zme,P7o,B7o,AG,I7o,N7o,q7o,Uu,ege,j7o,D7o,LG,G7o,O7o,V7o,Ju,oge,X7o,z7o,yG,W7o,Q7o,H7o,Yu,rge,U7o,J7o,xG,Y7o,K7o,Z7o,Ku,tge,eLo,oLo,$G,rLo,tLo,aLo,Zu,age,nLo,sLo,kG,lLo,iLo,dLo,e2,nge,cLo,fLo,SG,mLo,gLo,hLo,o2,pLo,sge,_Lo,uLo,lge,bLo,vLo,r2,yze,Qi,t2,ige,ZL,FLo,dge,TLo,xze,So,ey,MLo,Hi,ELo,RG,CLo,wLo,PG,ALo,LLo,yLo,oy,xLo,cge,$Lo,kLo,SLo,dt,ry,RLo,fge,PLo,BLo,Ui,ILo,mge,NLo,qLo,BG,jLo,DLo,GLo,a2,OLo,Ke,ty,VLo,gge,XLo,zLo,Na,WLo,hge,QLo,HLo,pge,ULo,JLo,_ge,YLo,KLo,ZLo,G,n2,uge,eyo,oyo,IG,ryo,tyo,ayo,s2,bge,nyo,syo,NG,lyo,iyo,dyo,l2,vge,cyo,fyo,qG,myo,gyo,hyo,i2,Fge,pyo,_yo,jG,uyo,byo,vyo,d2,Tge,Fyo,Tyo,DG,Myo,Eyo,Cyo,c2,Mge,wyo,Ayo,GG,Lyo,yyo,xyo,f2,Ege,$yo,kyo,OG,Syo,Ryo,Pyo,m2,Cge,Byo,Iyo,VG,Nyo,qyo,jyo,g2,wge,Dyo,Gyo,XG,Oyo,Vyo,Xyo,h2,Age,zyo,Wyo,zG,Qyo,Hyo,Uyo,p2,Lge,Jyo,Yyo,WG,Kyo,Zyo,e9o,_2,yge,o9o,r9o,QG,t9o,a9o,n9o,u2,xge,s9o,l9o,HG,i9o,d9o,c9o,b2,$ge,f9o,m9o,UG,g9o,h9o,p9o,v2,kge,_9o,u9o,JG,b9o,v9o,F9o,F2,Sge,T9o,M9o,YG,E9o,C9o,w9o,T2,Rge,A9o,L9o,KG,y9o,x9o,$9o,M2,Pge,k9o,S9o,ZG,R9o,P9o,B9o,E2,Bge,I9o,N9o,eO,q9o,j9o,D9o,C2,Ige,G9o,O9o,oO,V9o,X9o,z9o,w2,Nge,W9o,Q9o,rO,H9o,U9o,J9o,A2,qge,Y9o,K9o,tO,Z9o,exo,oxo,L2,jge,rxo,txo,aO,axo,nxo,sxo,y2,Dge,lxo,ixo,nO,dxo,cxo,fxo,x2,Gge,mxo,gxo,sO,hxo,pxo,_xo,$2,Oge,uxo,bxo,lO,vxo,Fxo,Txo,k2,Vge,Mxo,Exo,iO,Cxo,wxo,Axo,S2,Xge,Lxo,yxo,dO,xxo,$xo,kxo,R2,zge,Sxo,Rxo,cO,Pxo,Bxo,Ixo,P2,Wge,Nxo,qxo,fO,jxo,Dxo,Gxo,B2,Qge,Oxo,Vxo,mO,Xxo,zxo,Wxo,I2,Hge,Qxo,Hxo,gO,Uxo,Jxo,Yxo,N2,Uge,Kxo,Zxo,hO,e$o,o$o,r$o,q2,Jge,t$o,a$o,pO,n$o,s$o,l$o,j2,Yge,i$o,d$o,_O,c$o,f$o,m$o,D2,Kge,g$o,h$o,uO,p$o,_$o,u$o,G2,Zge,b$o,v$o,bO,F$o,T$o,M$o,O2,ehe,E$o,C$o,vO,w$o,A$o,L$o,V2,ohe,y$o,x$o,FO,$$o,k$o,S$o,X2,rhe,R$o,P$o,TO,B$o,I$o,N$o,z2,the,q$o,j$o,MO,D$o,G$o,O$o,W2,ahe,V$o,X$o,EO,z$o,W$o,Q$o,Q2,nhe,H$o,U$o,CO,J$o,Y$o,K$o,H2,she,Z$o,eko,wO,oko,rko,tko,U2,lhe,ako,nko,AO,sko,lko,iko,J2,dko,ihe,cko,fko,dhe,mko,gko,Y2,$ze,Ji,K2,che,ay,hko,fhe,pko,kze,Ro,ny,_ko,Yi,uko,LO,bko,vko,yO,Fko,Tko,Mko,sy,Eko,mhe,Cko,wko,Ako,ct,ly,Lko,ghe,yko,xko,Ki,$ko,hhe,kko,Sko,xO,Rko,Pko,Bko,Z2,Iko,Ze,iy,Nko,phe,qko,jko,qa,Dko,_he,Gko,Oko,uhe,Vko,Xko,bhe,zko,Wko,Qko,X,e1,vhe,Hko,Uko,$O,Jko,Yko,Kko,o1,Fhe,Zko,eSo,kO,oSo,rSo,tSo,r1,The,aSo,nSo,SO,sSo,lSo,iSo,t1,Mhe,dSo,cSo,RO,fSo,mSo,gSo,a1,Ehe,hSo,pSo,PO,_So,uSo,bSo,n1,Che,vSo,FSo,BO,TSo,MSo,ESo,s1,whe,CSo,wSo,IO,ASo,LSo,ySo,l1,Ahe,xSo,$So,NO,kSo,SSo,RSo,i1,Lhe,PSo,BSo,qO,ISo,NSo,qSo,d1,yhe,jSo,DSo,jO,GSo,OSo,VSo,c1,xhe,XSo,zSo,DO,WSo,QSo,HSo,f1,$he,USo,JSo,GO,YSo,KSo,ZSo,m1,khe,eRo,oRo,OO,rRo,tRo,aRo,g1,She,nRo,sRo,VO,lRo,iRo,dRo,h1,Rhe,cRo,fRo,XO,mRo,gRo,hRo,p1,Phe,pRo,_Ro,zO,uRo,bRo,vRo,_1,Bhe,FRo,TRo,WO,MRo,ERo,CRo,u1,Ihe,wRo,ARo,QO,LRo,yRo,xRo,b1,Nhe,$Ro,kRo,HO,SRo,RRo,PRo,v1,qhe,BRo,IRo,UO,NRo,qRo,jRo,F1,jhe,DRo,GRo,JO,ORo,VRo,XRo,T1,Dhe,zRo,WRo,YO,QRo,HRo,URo,M1,Ghe,JRo,YRo,KO,KRo,ZRo,ePo,E1,Ohe,oPo,rPo,ZO,tPo,aPo,nPo,C1,Vhe,sPo,lPo,eV,iPo,dPo,cPo,w1,Xhe,fPo,mPo,oV,gPo,hPo,pPo,A1,zhe,_Po,uPo,rV,bPo,vPo,FPo,L1,Whe,TPo,MPo,tV,EPo,CPo,wPo,y1,Qhe,APo,LPo,aV,yPo,xPo,$Po,x1,Hhe,kPo,SPo,nV,RPo,PPo,BPo,$1,Uhe,IPo,NPo,sV,qPo,jPo,DPo,k1,Jhe,GPo,OPo,lV,VPo,XPo,zPo,S1,Yhe,WPo,QPo,iV,HPo,UPo,JPo,R1,Khe,YPo,KPo,dV,ZPo,eBo,oBo,P1,Zhe,rBo,tBo,cV,aBo,nBo,sBo,B1,epe,lBo,iBo,fV,dBo,cBo,fBo,I1,ope,mBo,gBo,mV,hBo,pBo,_Bo,N1,rpe,uBo,bBo,gV,vBo,FBo,TBo,q1,tpe,MBo,EBo,hV,CBo,wBo,ABo,j1,ape,LBo,yBo,pV,xBo,$Bo,kBo,D1,npe,SBo,RBo,_V,PBo,BBo,IBo,G1,NBo,spe,qBo,jBo,lpe,DBo,GBo,O1,Sze,Zi,V1,ipe,dy,OBo,dpe,VBo,Rze,Po,cy,XBo,ed,zBo,uV,WBo,QBo,bV,HBo,UBo,JBo,fy,YBo,cpe,KBo,ZBo,eIo,ft,my,oIo,fpe,rIo,tIo,od,aIo,mpe,nIo,sIo,vV,lIo,iIo,dIo,X1,cIo,eo,gy,fIo,gpe,mIo,gIo,ja,hIo,hpe,pIo,_Io,ppe,uIo,bIo,_pe,vIo,FIo,TIo,Q,z1,upe,MIo,EIo,FV,CIo,wIo,AIo,W1,bpe,LIo,yIo,TV,xIo,$Io,kIo,Q1,vpe,SIo,RIo,MV,PIo,BIo,IIo,H1,Fpe,NIo,qIo,EV,jIo,DIo,GIo,U1,Tpe,OIo,VIo,CV,XIo,zIo,WIo,J1,Mpe,QIo,HIo,wV,UIo,JIo,YIo,Y1,Epe,KIo,ZIo,AV,eNo,oNo,rNo,K1,Cpe,tNo,aNo,LV,nNo,sNo,lNo,Z1,wpe,iNo,dNo,yV,cNo,fNo,mNo,eb,Ape,gNo,hNo,xV,pNo,_No,uNo,ob,Lpe,bNo,vNo,$V,FNo,TNo,MNo,rb,ype,ENo,CNo,kV,wNo,ANo,LNo,tb,xpe,yNo,xNo,SV,$No,kNo,SNo,ab,$pe,RNo,PNo,RV,BNo,INo,NNo,nb,kpe,qNo,jNo,PV,DNo,GNo,ONo,sb,Spe,VNo,XNo,BV,zNo,WNo,QNo,lb,Rpe,HNo,UNo,IV,JNo,YNo,KNo,ib,Ppe,ZNo,eqo,NV,oqo,rqo,tqo,db,Bpe,aqo,nqo,qV,sqo,lqo,iqo,cb,Ipe,dqo,cqo,jV,fqo,mqo,gqo,fb,Npe,hqo,pqo,DV,_qo,uqo,bqo,mb,qpe,vqo,Fqo,GV,Tqo,Mqo,Eqo,gb,jpe,Cqo,wqo,OV,Aqo,Lqo,yqo,hb,Dpe,xqo,$qo,VV,kqo,Sqo,Rqo,pb,Gpe,Pqo,Bqo,XV,Iqo,Nqo,qqo,_b,Ope,jqo,Dqo,zV,Gqo,Oqo,Vqo,ub,Vpe,Xqo,zqo,WV,Wqo,Qqo,Hqo,bb,Xpe,Uqo,Jqo,QV,Yqo,Kqo,Zqo,vb,zpe,ejo,ojo,HV,rjo,tjo,ajo,Fb,Wpe,njo,sjo,UV,ljo,ijo,djo,Tb,Qpe,cjo,fjo,JV,mjo,gjo,hjo,Mb,Hpe,pjo,_jo,YV,ujo,bjo,vjo,Eb,Upe,Fjo,Tjo,KV,Mjo,Ejo,Cjo,Cb,Jpe,wjo,Ajo,Ype,Ljo,yjo,xjo,wb,Kpe,$jo,kjo,ZV,Sjo,Rjo,Pjo,Ab,Zpe,Bjo,Ijo,eX,Njo,qjo,jjo,Lb,e_e,Djo,Gjo,oX,Ojo,Vjo,Xjo,yb,o_e,zjo,Wjo,rX,Qjo,Hjo,Ujo,xb,Jjo,r_e,Yjo,Kjo,t_e,Zjo,eDo,$b,Pze,rd,kb,a_e,hy,oDo,n_e,rDo,Bze,Bo,py,tDo,td,aDo,tX,nDo,sDo,aX,lDo,iDo,dDo,_y,cDo,s_e,fDo,mDo,gDo,mt,uy,hDo,l_e,pDo,_Do,ad,uDo,i_e,bDo,vDo,nX,FDo,TDo,MDo,Sb,EDo,oo,by,CDo,d_e,wDo,ADo,Da,LDo,c_e,yDo,xDo,f_e,$Do,kDo,m_e,SDo,RDo,PDo,me,Rb,g_e,BDo,IDo,sX,NDo,qDo,jDo,Pb,h_e,DDo,GDo,lX,ODo,VDo,XDo,Bb,p_e,zDo,WDo,iX,QDo,HDo,UDo,Ib,__e,JDo,YDo,dX,KDo,ZDo,eGo,Nb,u_e,oGo,rGo,cX,tGo,aGo,nGo,qb,b_e,sGo,lGo,fX,iGo,dGo,cGo,jb,v_e,fGo,mGo,mX,gGo,hGo,pGo,Db,F_e,_Go,uGo,gX,bGo,vGo,FGo,Gb,T_e,TGo,MGo,hX,EGo,CGo,wGo,Ob,M_e,AGo,LGo,pX,yGo,xGo,$Go,Vb,E_e,kGo,SGo,_X,RGo,PGo,BGo,Xb,C_e,IGo,NGo,uX,qGo,jGo,DGo,zb,w_e,GGo,OGo,bX,VGo,XGo,zGo,Wb,A_e,WGo,QGo,vX,HGo,UGo,JGo,Qb,L_e,YGo,KGo,FX,ZGo,eOo,oOo,Hb,y_e,rOo,tOo,TX,aOo,nOo,sOo,Ub,x_e,lOo,iOo,MX,dOo,cOo,fOo,Jb,$_e,mOo,gOo,EX,hOo,pOo,_Oo,Yb,k_e,uOo,bOo,CX,vOo,FOo,TOo,Kb,MOo,S_e,EOo,COo,R_e,wOo,AOo,Zb,Ize,nd,ev,P_e,vy,LOo,B_e,yOo,Nze,Io,Fy,xOo,sd,$Oo,wX,kOo,SOo,AX,ROo,POo,BOo,Ty,IOo,I_e,NOo,qOo,jOo,gt,My,DOo,N_e,GOo,OOo,ld,VOo,q_e,XOo,zOo,LX,WOo,QOo,HOo,ov,UOo,ro,Ey,JOo,j_e,YOo,KOo,Ga,ZOo,D_e,eVo,oVo,G_e,rVo,tVo,O_e,aVo,nVo,sVo,B,rv,V_e,lVo,iVo,yX,dVo,cVo,fVo,tv,X_e,mVo,gVo,xX,hVo,pVo,_Vo,av,z_e,uVo,bVo,$X,vVo,FVo,TVo,nv,W_e,MVo,EVo,kX,CVo,wVo,AVo,sv,Q_e,LVo,yVo,SX,xVo,$Vo,kVo,lv,H_e,SVo,RVo,RX,PVo,BVo,IVo,iv,U_e,NVo,qVo,PX,jVo,DVo,GVo,dv,J_e,OVo,VVo,BX,XVo,zVo,WVo,cv,Y_e,QVo,HVo,IX,UVo,JVo,YVo,fv,K_e,KVo,ZVo,NX,eXo,oXo,rXo,mv,Z_e,tXo,aXo,qX,nXo,sXo,lXo,gv,eue,iXo,dXo,jX,cXo,fXo,mXo,hv,oue,gXo,hXo,DX,pXo,_Xo,uXo,pv,rue,bXo,vXo,GX,FXo,TXo,MXo,_v,tue,EXo,CXo,OX,wXo,AXo,LXo,uv,aue,yXo,xXo,VX,$Xo,kXo,SXo,bv,nue,RXo,PXo,XX,BXo,IXo,NXo,vv,sue,qXo,jXo,zX,DXo,GXo,OXo,Fv,lue,VXo,XXo,WX,zXo,WXo,QXo,Tv,iue,HXo,UXo,QX,JXo,YXo,KXo,Mv,due,ZXo,ezo,HX,ozo,rzo,tzo,Ev,cue,azo,nzo,UX,szo,lzo,izo,Cv,fue,dzo,czo,JX,fzo,mzo,gzo,wv,mue,hzo,pzo,YX,_zo,uzo,bzo,Av,gue,vzo,Fzo,KX,Tzo,Mzo,Ezo,Lv,hue,Czo,wzo,ZX,Azo,Lzo,yzo,yv,pue,xzo,$zo,ez,kzo,Szo,Rzo,xv,_ue,Pzo,Bzo,oz,Izo,Nzo,qzo,$v,uue,jzo,Dzo,rz,Gzo,Ozo,Vzo,kv,bue,Xzo,zzo,tz,Wzo,Qzo,Hzo,Sv,vue,Uzo,Jzo,az,Yzo,Kzo,Zzo,Rv,Fue,eWo,oWo,nz,rWo,tWo,aWo,Pv,Tue,nWo,sWo,sz,lWo,iWo,dWo,Bv,Mue,cWo,fWo,lz,mWo,gWo,hWo,Iv,Eue,pWo,_Wo,iz,uWo,bWo,vWo,Nv,Cue,FWo,TWo,dz,MWo,EWo,CWo,qv,wue,wWo,AWo,cz,LWo,yWo,xWo,jv,Aue,$Wo,kWo,fz,SWo,RWo,PWo,Dv,Lue,BWo,IWo,mz,NWo,qWo,jWo,Gv,yue,DWo,GWo,gz,OWo,VWo,XWo,Ov,xue,zWo,WWo,hz,QWo,HWo,UWo,Vv,$ue,JWo,YWo,pz,KWo,ZWo,eQo,Xv,kue,oQo,rQo,_z,tQo,aQo,nQo,zv,Sue,sQo,lQo,uz,iQo,dQo,cQo,Wv,Rue,fQo,mQo,bz,gQo,hQo,pQo,Qv,Pue,_Qo,uQo,vz,bQo,vQo,FQo,Hv,Bue,TQo,MQo,Fz,EQo,CQo,wQo,Uv,Iue,AQo,LQo,Tz,yQo,xQo,$Qo,Jv,Nue,kQo,SQo,Mz,RQo,PQo,BQo,Yv,que,IQo,NQo,Ez,qQo,jQo,DQo,Kv,jue,GQo,OQo,Cz,VQo,XQo,zQo,Zv,WQo,Due,QQo,HQo,Gue,UQo,JQo,e3,qze,id,o3,Oue,Cy,YQo,Vue,KQo,jze,No,wy,ZQo,dd,eHo,wz,oHo,rHo,Az,tHo,aHo,nHo,Ay,sHo,Xue,lHo,iHo,dHo,ht,Ly,cHo,zue,fHo,mHo,cd,gHo,Wue,hHo,pHo,Lz,_Ho,uHo,bHo,r3,vHo,to,yy,FHo,Que,THo,MHo,Oa,EHo,Hue,CHo,wHo,Uue,AHo,LHo,Jue,yHo,xHo,$Ho,Z,t3,Yue,kHo,SHo,yz,RHo,PHo,BHo,a3,Kue,IHo,NHo,xz,qHo,jHo,DHo,n3,Zue,GHo,OHo,$z,VHo,XHo,zHo,s3,e2e,WHo,QHo,kz,HHo,UHo,JHo,l3,o2e,YHo,KHo,Sz,ZHo,eUo,oUo,i3,r2e,rUo,tUo,Rz,aUo,nUo,sUo,d3,t2e,lUo,iUo,Pz,dUo,cUo,fUo,c3,a2e,mUo,gUo,Bz,hUo,pUo,_Uo,f3,n2e,uUo,bUo,Iz,vUo,FUo,TUo,m3,s2e,MUo,EUo,Nz,CUo,wUo,AUo,g3,l2e,LUo,yUo,qz,xUo,$Uo,kUo,h3,i2e,SUo,RUo,jz,PUo,BUo,IUo,p3,d2e,NUo,qUo,Dz,jUo,DUo,GUo,_3,c2e,OUo,VUo,Gz,XUo,zUo,WUo,u3,f2e,QUo,HUo,Oz,UUo,JUo,YUo,b3,m2e,KUo,ZUo,Vz,eJo,oJo,rJo,v3,g2e,tJo,aJo,Xz,nJo,sJo,lJo,F3,h2e,iJo,dJo,zz,cJo,fJo,mJo,T3,p2e,gJo,hJo,Wz,pJo,_Jo,uJo,M3,_2e,bJo,vJo,Qz,FJo,TJo,MJo,E3,u2e,EJo,CJo,Hz,wJo,AJo,LJo,C3,b2e,yJo,xJo,Uz,$Jo,kJo,SJo,w3,v2e,RJo,PJo,Jz,BJo,IJo,NJo,A3,F2e,qJo,jJo,Yz,DJo,GJo,OJo,L3,T2e,VJo,XJo,Kz,zJo,WJo,QJo,y3,M2e,HJo,UJo,Zz,JJo,YJo,KJo,x3,E2e,ZJo,eYo,eW,oYo,rYo,tYo,$3,C2e,aYo,nYo,oW,sYo,lYo,iYo,k3,w2e,dYo,cYo,rW,fYo,mYo,gYo,S3,A2e,hYo,pYo,tW,_Yo,uYo,bYo,R3,vYo,L2e,FYo,TYo,y2e,MYo,EYo,P3,Dze,fd,B3,x2e,xy,CYo,$2e,wYo,Gze,qo,$y,AYo,md,LYo,aW,yYo,xYo,nW,$Yo,kYo,SYo,ky,RYo,k2e,PYo,BYo,IYo,pt,Sy,NYo,S2e,qYo,jYo,gd,DYo,R2e,GYo,OYo,sW,VYo,XYo,zYo,I3,WYo,ao,Ry,QYo,P2e,HYo,UYo,Va,JYo,B2e,YYo,KYo,I2e,ZYo,eKo,N2e,oKo,rKo,tKo,jo,N3,q2e,aKo,nKo,lW,sKo,lKo,iKo,q3,j2e,dKo,cKo,iW,fKo,mKo,gKo,j3,D2e,hKo,pKo,dW,_Ko,uKo,bKo,D3,G2e,vKo,FKo,cW,TKo,MKo,EKo,G3,O2e,CKo,wKo,fW,AKo,LKo,yKo,O3,V2e,xKo,$Ko,mW,kKo,SKo,RKo,V3,PKo,X2e,BKo,IKo,z2e,NKo,qKo,X3,Oze,hd,z3,W2e,Py,jKo,Q2e,DKo,Vze,Do,By,GKo,pd,OKo,gW,VKo,XKo,hW,zKo,WKo,QKo,Iy,HKo,H2e,UKo,JKo,YKo,_t,Ny,KKo,U2e,ZKo,eZo,_d,oZo,J2e,rZo,tZo,pW,aZo,nZo,sZo,W3,lZo,no,qy,iZo,Y2e,dZo,cZo,Xa,fZo,K2e,mZo,gZo,Z2e,hZo,pZo,e1e,_Zo,uZo,bZo,J,Q3,o1e,vZo,FZo,_W,TZo,MZo,EZo,H3,r1e,CZo,wZo,uW,AZo,LZo,yZo,U3,t1e,xZo,$Zo,bW,kZo,SZo,RZo,J3,a1e,PZo,BZo,vW,IZo,NZo,qZo,Y3,n1e,jZo,DZo,FW,GZo,OZo,VZo,K3,s1e,XZo,zZo,TW,WZo,QZo,HZo,Z3,l1e,UZo,JZo,MW,YZo,KZo,ZZo,eF,i1e,eer,oer,EW,rer,ter,aer,oF,d1e,ner,ser,CW,ler,ier,der,rF,c1e,cer,fer,wW,mer,ger,her,tF,f1e,per,_er,AW,uer,ber,ver,aF,m1e,Fer,Ter,LW,Mer,Eer,Cer,nF,g1e,wer,Aer,yW,Ler,yer,xer,sF,h1e,$er,ker,xW,Ser,Rer,Per,lF,p1e,Ber,Ier,$W,Ner,qer,jer,iF,_1e,Der,Ger,kW,Oer,Ver,Xer,dF,u1e,zer,Wer,SW,Qer,Her,Uer,cF,b1e,Jer,Yer,RW,Ker,Zer,eor,fF,v1e,oor,ror,PW,tor,aor,nor,mF,F1e,sor,lor,BW,ior,dor,cor,gF,T1e,mor,gor,IW,hor,por,_or,hF,M1e,uor,bor,NW,vor,For,Tor,pF,E1e,Mor,Eor,qW,Cor,wor,Aor,_F,C1e,Lor,yor,jW,xor,$or,kor,uF,w1e,Sor,Ror,DW,Por,Bor,Ior,bF,A1e,Nor,qor,GW,jor,Dor,Gor,vF,L1e,Oor,Vor,OW,Xor,zor,Wor,FF,y1e,Qor,Hor,VW,Uor,Jor,Yor,TF,x1e,Kor,Zor,XW,err,orr,rrr,MF,$1e,trr,arr,zW,nrr,srr,lrr,EF,k1e,irr,drr,WW,crr,frr,mrr,CF,S1e,grr,hrr,QW,prr,_rr,urr,wF,R1e,brr,vrr,HW,Frr,Trr,Mrr,AF,P1e,Err,Crr,UW,wrr,Arr,Lrr,LF,B1e,yrr,xrr,JW,$rr,krr,Srr,yF,I1e,Rrr,Prr,YW,Brr,Irr,Nrr,xF,qrr,N1e,jrr,Drr,q1e,Grr,Orr,$F,Xze,ud,kF,j1e,jy,Vrr,D1e,Xrr,zze,Go,Dy,zrr,bd,Wrr,KW,Qrr,Hrr,ZW,Urr,Jrr,Yrr,Gy,Krr,G1e,Zrr,etr,otr,ut,Oy,rtr,O1e,ttr,atr,vd,ntr,V1e,str,ltr,eQ,itr,dtr,ctr,SF,ftr,so,Vy,mtr,X1e,gtr,htr,za,ptr,z1e,_tr,utr,W1e,btr,vtr,Q1e,Ftr,Ttr,Mtr,V,RF,H1e,Etr,Ctr,oQ,wtr,Atr,Ltr,PF,U1e,ytr,xtr,rQ,$tr,ktr,Str,BF,J1e,Rtr,Ptr,tQ,Btr,Itr,Ntr,IF,Y1e,qtr,jtr,aQ,Dtr,Gtr,Otr,NF,K1e,Vtr,Xtr,nQ,ztr,Wtr,Qtr,qF,Z1e,Htr,Utr,sQ,Jtr,Ytr,Ktr,jF,ebe,Ztr,ear,lQ,oar,rar,tar,DF,obe,aar,nar,iQ,sar,lar,iar,GF,rbe,dar,car,dQ,far,mar,gar,OF,tbe,har,par,cQ,_ar,uar,bar,VF,abe,Far,Tar,fQ,Mar,Ear,Car,XF,nbe,war,Aar,mQ,Lar,yar,xar,zF,sbe,$ar,kar,gQ,Sar,Rar,Par,WF,lbe,Bar,Iar,hQ,Nar,qar,jar,QF,ibe,Dar,Gar,pQ,Oar,Var,Xar,HF,dbe,zar,War,_Q,Qar,Har,Uar,UF,cbe,Jar,Yar,uQ,Kar,Zar,enr,JF,fbe,onr,rnr,bQ,tnr,anr,nnr,YF,mbe,snr,lnr,vQ,inr,dnr,cnr,KF,gbe,fnr,mnr,FQ,gnr,hnr,pnr,ZF,hbe,_nr,unr,TQ,bnr,vnr,Fnr,e6,pbe,Tnr,Mnr,MQ,Enr,Cnr,wnr,o6,_be,Anr,Lnr,EQ,ynr,xnr,$nr,r6,ube,knr,Snr,CQ,Rnr,Pnr,Bnr,t6,bbe,Inr,Nnr,wQ,qnr,jnr,Dnr,a6,vbe,Gnr,Onr,AQ,Vnr,Xnr,znr,n6,Fbe,Wnr,Qnr,LQ,Hnr,Unr,Jnr,s6,Tbe,Ynr,Knr,yQ,Znr,esr,osr,l6,Mbe,rsr,tsr,xQ,asr,nsr,ssr,i6,Ebe,lsr,isr,$Q,dsr,csr,fsr,d6,Cbe,msr,gsr,kQ,hsr,psr,_sr,c6,wbe,usr,bsr,SQ,vsr,Fsr,Tsr,f6,Abe,Msr,Esr,RQ,Csr,wsr,Asr,m6,Lbe,Lsr,ysr,PQ,xsr,$sr,ksr,g6,ybe,Ssr,Rsr,BQ,Psr,Bsr,Isr,h6,xbe,Nsr,qsr,IQ,jsr,Dsr,Gsr,p6,$be,Osr,Vsr,NQ,Xsr,zsr,Wsr,_6,kbe,Qsr,Hsr,qQ,Usr,Jsr,Ysr,u6,Sbe,Ksr,Zsr,jQ,elr,olr,rlr,b6,Rbe,tlr,alr,DQ,nlr,slr,llr,v6,Pbe,ilr,dlr,GQ,clr,flr,mlr,F6,Bbe,glr,hlr,OQ,plr,_lr,ulr,T6,blr,Ibe,vlr,Flr,Nbe,Tlr,Mlr,M6,Wze,Fd,E6,qbe,Xy,Elr,jbe,Clr,Qze,Oo,zy,wlr,Td,Alr,VQ,Llr,ylr,XQ,xlr,$lr,klr,Wy,Slr,Dbe,Rlr,Plr,Blr,bt,Qy,Ilr,Gbe,Nlr,qlr,Md,jlr,Obe,Dlr,Glr,zQ,Olr,Vlr,Xlr,C6,zlr,lo,Hy,Wlr,Vbe,Qlr,Hlr,Wa,Ulr,Xbe,Jlr,Ylr,zbe,Klr,Zlr,Wbe,eir,oir,rir,Qbe,w6,Hbe,tir,air,WQ,nir,sir,lir,A6,iir,Ube,dir,cir,Jbe,fir,mir,L6,Hze,Ed,y6,Ybe,Uy,gir,Kbe,hir,Uze,Vo,Jy,pir,Cd,_ir,QQ,uir,bir,HQ,vir,Fir,Tir,Yy,Mir,Zbe,Eir,Cir,wir,vt,Ky,Air,eve,Lir,yir,wd,xir,ove,$ir,kir,UQ,Sir,Rir,Pir,x6,Bir,io,Zy,Iir,rve,Nir,qir,Qa,jir,tve,Dir,Gir,ave,Oir,Vir,nve,Xir,zir,Wir,be,$6,sve,Qir,Hir,JQ,Uir,Jir,Yir,k6,lve,Kir,Zir,YQ,edr,odr,rdr,S6,ive,tdr,adr,KQ,ndr,sdr,ldr,R6,dve,idr,ddr,ZQ,cdr,fdr,mdr,Ys,cve,gdr,hdr,eH,pdr,_dr,oH,udr,bdr,vdr,P6,fve,Fdr,Tdr,rH,Mdr,Edr,Cdr,Ks,mve,wdr,Adr,tH,Ldr,ydr,aH,xdr,$dr,kdr,B6,gve,Sdr,Rdr,nH,Pdr,Bdr,Idr,Ft,hve,Ndr,qdr,sH,jdr,Ddr,lH,Gdr,Odr,iH,Vdr,Xdr,zdr,I6,pve,Wdr,Qdr,dH,Hdr,Udr,Jdr,N6,_ve,Ydr,Kdr,cH,Zdr,ecr,ocr,q6,uve,rcr,tcr,fH,acr,ncr,scr,j6,bve,lcr,icr,mH,dcr,ccr,fcr,D6,vve,mcr,gcr,gH,hcr,pcr,_cr,G6,Fve,ucr,bcr,hH,vcr,Fcr,Tcr,O6,Tve,Mcr,Ecr,pH,Ccr,wcr,Acr,V6,Mve,Lcr,ycr,_H,xcr,$cr,kcr,X6,Scr,Eve,Rcr,Pcr,Cve,Bcr,Icr,z6,Jze,Ad,W6,wve,e9,Ncr,Ave,qcr,Yze,Xo,o9,jcr,Ld,Dcr,uH,Gcr,Ocr,bH,Vcr,Xcr,zcr,r9,Wcr,Lve,Qcr,Hcr,Ucr,Tt,t9,Jcr,yve,Ycr,Kcr,yd,Zcr,xve,efr,ofr,vH,rfr,tfr,afr,Q6,nfr,co,a9,sfr,$ve,lfr,ifr,Ha,dfr,kve,cfr,ffr,Sve,mfr,gfr,Rve,hfr,pfr,_fr,Pve,H6,Bve,ufr,bfr,FH,vfr,Ffr,Tfr,U6,Mfr,Ive,Efr,Cfr,Nve,wfr,Afr,J6,Kze,xd,Y6,qve,n9,Lfr,jve,yfr,Zze,zo,s9,xfr,$d,$fr,TH,kfr,Sfr,MH,Rfr,Pfr,Bfr,l9,Ifr,Dve,Nfr,qfr,jfr,Mt,i9,Dfr,Gve,Gfr,Ofr,kd,Vfr,Ove,Xfr,zfr,EH,Wfr,Qfr,Hfr,K6,Ufr,fo,d9,Jfr,Vve,Yfr,Kfr,Ua,Zfr,Xve,emr,omr,zve,rmr,tmr,Wve,amr,nmr,smr,Qve,Z6,Hve,lmr,imr,CH,dmr,cmr,fmr,eT,mmr,Uve,gmr,hmr,Jve,pmr,_mr,oT,eWe,Sd,rT,Yve,c9,umr,Kve,bmr,oWe,Wo,f9,vmr,Rd,Fmr,wH,Tmr,Mmr,AH,Emr,Cmr,wmr,m9,Amr,Zve,Lmr,ymr,xmr,Et,g9,$mr,e3e,kmr,Smr,Pd,Rmr,o3e,Pmr,Bmr,LH,Imr,Nmr,qmr,tT,jmr,mo,h9,Dmr,r3e,Gmr,Omr,Ja,Vmr,t3e,Xmr,zmr,a3e,Wmr,Qmr,n3e,Hmr,Umr,Jmr,Pe,aT,s3e,Ymr,Kmr,yH,Zmr,egr,ogr,nT,l3e,rgr,tgr,xH,agr,ngr,sgr,sT,i3e,lgr,igr,$H,dgr,cgr,fgr,lT,d3e,mgr,ggr,kH,hgr,pgr,_gr,iT,c3e,ugr,bgr,SH,vgr,Fgr,Tgr,dT,f3e,Mgr,Egr,RH,Cgr,wgr,Agr,cT,m3e,Lgr,ygr,PH,xgr,$gr,kgr,fT,g3e,Sgr,Rgr,BH,Pgr,Bgr,Igr,mT,h3e,Ngr,qgr,IH,jgr,Dgr,Ggr,gT,Ogr,p3e,Vgr,Xgr,_3e,zgr,Wgr,hT,rWe,Bd,pT,u3e,p9,Qgr,b3e,Hgr,tWe,Qo,_9,Ugr,Id,Jgr,NH,Ygr,Kgr,qH,Zgr,ehr,ohr,u9,rhr,v3e,thr,ahr,nhr,Ct,b9,shr,F3e,lhr,ihr,Nd,dhr,T3e,chr,fhr,jH,mhr,ghr,hhr,_T,phr,go,v9,_hr,M3e,uhr,bhr,Ya,vhr,E3e,Fhr,Thr,C3e,Mhr,Ehr,w3e,Chr,whr,Ahr,rt,uT,A3e,Lhr,yhr,DH,xhr,$hr,khr,bT,L3e,Shr,Rhr,GH,Phr,Bhr,Ihr,vT,y3e,Nhr,qhr,OH,jhr,Dhr,Ghr,FT,x3e,Ohr,Vhr,VH,Xhr,zhr,Whr,TT,$3e,Qhr,Hhr,XH,Uhr,Jhr,Yhr,MT,Khr,k3e,Zhr,epr,S3e,opr,rpr,ET,aWe,qd,CT,R3e,F9,tpr,P3e,apr,nWe,Ho,T9,npr,jd,spr,zH,lpr,ipr,WH,dpr,cpr,fpr,M9,mpr,B3e,gpr,hpr,ppr,wt,E9,_pr,I3e,upr,bpr,Dd,vpr,N3e,Fpr,Tpr,QH,Mpr,Epr,Cpr,wT,wpr,ho,C9,Apr,q3e,Lpr,ypr,Ka,xpr,j3e,$pr,kpr,D3e,Spr,Rpr,G3e,Ppr,Bpr,Ipr,Le,AT,O3e,Npr,qpr,HH,jpr,Dpr,Gpr,LT,V3e,Opr,Vpr,UH,Xpr,zpr,Wpr,yT,X3e,Qpr,Hpr,JH,Upr,Jpr,Ypr,xT,z3e,Kpr,Zpr,YH,e_r,o_r,r_r,$T,W3e,t_r,a_r,KH,n_r,s_r,l_r,kT,Q3e,i_r,d_r,ZH,c_r,f_r,m_r,ST,H3e,g_r,h_r,eU,p_r,__r,u_r,RT,U3e,b_r,v_r,oU,F_r,T_r,M_r,PT,J3e,E_r,C_r,rU,w_r,A_r,L_r,BT,Y3e,y_r,x_r,tU,$_r,k_r,S_r,IT,R_r,K3e,P_r,B_r,Z3e,I_r,N_r,NT,sWe,Gd,qT,eFe,w9,q_r,oFe,j_r,lWe,Uo,A9,D_r,Od,G_r,aU,O_r,V_r,nU,X_r,z_r,W_r,L9,Q_r,rFe,H_r,U_r,J_r,At,y9,Y_r,tFe,K_r,Z_r,Vd,eur,aFe,our,rur,sU,tur,aur,nur,jT,sur,po,x9,lur,nFe,iur,dur,Za,cur,sFe,fur,mur,lFe,gur,hur,iFe,pur,_ur,uur,$9,DT,dFe,bur,vur,lU,Fur,Tur,Mur,GT,cFe,Eur,Cur,iU,wur,Aur,Lur,OT,yur,fFe,xur,$ur,mFe,kur,Sur,VT,iWe,Xd,XT,gFe,k9,Rur,hFe,Pur,dWe,Jo,S9,Bur,zd,Iur,dU,Nur,qur,cU,jur,Dur,Gur,R9,Our,pFe,Vur,Xur,zur,Lt,P9,Wur,_Fe,Qur,Hur,Wd,Uur,uFe,Jur,Yur,fU,Kur,Zur,e2r,zT,o2r,_o,B9,r2r,bFe,t2r,a2r,en,n2r,vFe,s2r,l2r,FFe,i2r,d2r,TFe,c2r,f2r,m2r,tt,WT,MFe,g2r,h2r,mU,p2r,_2r,u2r,QT,EFe,b2r,v2r,gU,F2r,T2r,M2r,HT,CFe,E2r,C2r,hU,w2r,A2r,L2r,UT,wFe,y2r,x2r,pU,$2r,k2r,S2r,JT,AFe,R2r,P2r,_U,B2r,I2r,N2r,YT,q2r,LFe,j2r,D2r,yFe,G2r,O2r,KT,cWe,Qd,ZT,xFe,I9,V2r,$Fe,X2r,fWe,Yo,N9,z2r,Hd,W2r,uU,Q2r,H2r,bU,U2r,J2r,Y2r,q9,K2r,kFe,Z2r,e1r,o1r,yt,j9,r1r,SFe,t1r,a1r,Ud,n1r,RFe,s1r,l1r,vU,i1r,d1r,c1r,e8,f1r,uo,D9,m1r,PFe,g1r,h1r,on,p1r,BFe,_1r,u1r,IFe,b1r,v1r,NFe,F1r,T1r,M1r,rn,o8,qFe,E1r,C1r,FU,w1r,A1r,L1r,r8,jFe,y1r,x1r,TU,$1r,k1r,S1r,t8,DFe,R1r,P1r,MU,B1r,I1r,N1r,a8,GFe,q1r,j1r,EU,D1r,G1r,O1r,n8,V1r,OFe,X1r,z1r,VFe,W1r,Q1r,s8,mWe,Jd,l8,XFe,G9,H1r,zFe,U1r,gWe,Ko,O9,J1r,Yd,Y1r,CU,K1r,Z1r,wU,ebr,obr,rbr,V9,tbr,WFe,abr,nbr,sbr,xt,X9,lbr,QFe,ibr,dbr,Kd,cbr,HFe,fbr,mbr,AU,gbr,hbr,pbr,i8,_br,bo,z9,ubr,UFe,bbr,vbr,tn,Fbr,JFe,Tbr,Mbr,YFe,Ebr,Cbr,KFe,wbr,Abr,Lbr,W9,d8,ZFe,ybr,xbr,LU,$br,kbr,Sbr,c8,e6e,Rbr,Pbr,yU,Bbr,Ibr,Nbr,f8,qbr,o6e,jbr,Dbr,r6e,Gbr,Obr,m8,hWe,Zd,g8,t6e,Q9,Vbr,a6e,Xbr,pWe,Zo,H9,zbr,ec,Wbr,xU,Qbr,Hbr,$U,Ubr,Jbr,Ybr,U9,Kbr,n6e,Zbr,evr,ovr,$t,J9,rvr,s6e,tvr,avr,oc,nvr,l6e,svr,lvr,kU,ivr,dvr,cvr,h8,fvr,vo,Y9,mvr,i6e,gvr,hvr,an,pvr,d6e,_vr,uvr,c6e,bvr,vvr,f6e,Fvr,Tvr,Mvr,m6e,p8,g6e,Evr,Cvr,SU,wvr,Avr,Lvr,_8,yvr,h6e,xvr,$vr,p6e,kvr,Svr,u8,_We,rc,b8,_6e,K9,Rvr,u6e,Pvr,uWe,er,Z9,Bvr,tc,Ivr,RU,Nvr,qvr,PU,jvr,Dvr,Gvr,ex,Ovr,b6e,Vvr,Xvr,zvr,kt,ox,Wvr,v6e,Qvr,Hvr,ac,Uvr,F6e,Jvr,Yvr,BU,Kvr,Zvr,e3r,v8,o3r,Fo,rx,r3r,T6e,t3r,a3r,nn,n3r,M6e,s3r,l3r,E6e,i3r,d3r,C6e,c3r,f3r,m3r,at,F8,w6e,g3r,h3r,IU,p3r,_3r,u3r,T8,A6e,b3r,v3r,NU,F3r,T3r,M3r,M8,L6e,E3r,C3r,qU,w3r,A3r,L3r,E8,y6e,y3r,x3r,jU,$3r,k3r,S3r,C8,x6e,R3r,P3r,DU,B3r,I3r,N3r,w8,q3r,$6e,j3r,D3r,k6e,G3r,O3r,A8,bWe,nc,L8,S6e,tx,V3r,R6e,X3r,vWe,or,ax,z3r,sc,W3r,GU,Q3r,H3r,OU,U3r,J3r,Y3r,nx,K3r,P6e,Z3r,eFr,oFr,St,sx,rFr,B6e,tFr,aFr,lc,nFr,I6e,sFr,lFr,VU,iFr,dFr,cFr,y8,fFr,To,lx,mFr,N6e,gFr,hFr,sn,pFr,q6e,_Fr,uFr,j6e,bFr,vFr,D6e,FFr,TFr,MFr,G6e,x8,O6e,EFr,CFr,XU,wFr,AFr,LFr,$8,yFr,V6e,xFr,$Fr,X6e,kFr,SFr,k8,FWe,ic,S8,z6e,ix,RFr,W6e,PFr,TWe,rr,dx,BFr,dc,IFr,zU,NFr,qFr,WU,jFr,DFr,GFr,cx,OFr,Q6e,VFr,XFr,zFr,Rt,fx,WFr,H6e,QFr,HFr,cc,UFr,U6e,JFr,YFr,QU,KFr,ZFr,e6r,R8,o6r,$r,mx,r6r,J6e,t6r,a6r,ln,n6r,Y6e,s6r,l6r,K6e,i6r,d6r,Z6e,c6r,f6r,m6r,I,P8,eTe,g6r,h6r,HU,p6r,_6r,u6r,B8,oTe,b6r,v6r,UU,F6r,T6r,M6r,I8,rTe,E6r,C6r,JU,w6r,A6r,L6r,N8,tTe,y6r,x6r,YU,$6r,k6r,S6r,q8,aTe,R6r,P6r,KU,B6r,I6r,N6r,j8,nTe,q6r,j6r,ZU,D6r,G6r,O6r,D8,sTe,V6r,X6r,eJ,z6r,W6r,Q6r,G8,lTe,H6r,U6r,oJ,J6r,Y6r,K6r,O8,iTe,Z6r,eTr,rJ,oTr,rTr,tTr,V8,dTe,aTr,nTr,tJ,sTr,lTr,iTr,X8,cTe,dTr,cTr,aJ,fTr,mTr,gTr,z8,fTe,hTr,pTr,nJ,_Tr,uTr,bTr,W8,mTe,vTr,FTr,sJ,TTr,MTr,ETr,Q8,gTe,CTr,wTr,lJ,ATr,LTr,yTr,H8,hTe,xTr,$Tr,iJ,kTr,STr,RTr,U8,pTe,PTr,BTr,dJ,ITr,NTr,qTr,J8,_Te,jTr,DTr,cJ,GTr,OTr,VTr,Y8,uTe,XTr,zTr,fJ,WTr,QTr,HTr,Zs,bTe,UTr,JTr,mJ,YTr,KTr,gJ,ZTr,e8r,o8r,K8,vTe,r8r,t8r,hJ,a8r,n8r,s8r,Z8,FTe,l8r,i8r,pJ,d8r,c8r,f8r,eM,TTe,m8r,g8r,_J,h8r,p8r,_8r,oM,MTe,u8r,b8r,uJ,v8r,F8r,T8r,rM,ETe,M8r,E8r,bJ,C8r,w8r,A8r,tM,CTe,L8r,y8r,vJ,x8r,$8r,k8r,aM,wTe,S8r,R8r,FJ,P8r,B8r,I8r,nM,ATe,N8r,q8r,TJ,j8r,D8r,G8r,sM,LTe,O8r,V8r,MJ,X8r,z8r,W8r,lM,yTe,Q8r,H8r,EJ,U8r,J8r,Y8r,iM,xTe,K8r,Z8r,CJ,eMr,oMr,rMr,dM,$Te,tMr,aMr,wJ,nMr,sMr,lMr,cM,kTe,iMr,dMr,AJ,cMr,fMr,mMr,fM,STe,gMr,hMr,LJ,pMr,_Mr,uMr,mM,RTe,bMr,vMr,yJ,FMr,TMr,MMr,gM,PTe,EMr,CMr,xJ,wMr,AMr,LMr,hM,BTe,yMr,xMr,$J,$Mr,kMr,SMr,pM,ITe,RMr,PMr,kJ,BMr,IMr,NMr,_M,NTe,qMr,jMr,SJ,DMr,GMr,OMr,uM,qTe,VMr,XMr,RJ,zMr,WMr,QMr,bM,jTe,HMr,UMr,PJ,JMr,YMr,KMr,vM,DTe,ZMr,e4r,BJ,o4r,r4r,t4r,FM,GTe,a4r,n4r,IJ,s4r,l4r,i4r,TM,OTe,d4r,c4r,NJ,f4r,m4r,g4r,MM,VTe,h4r,p4r,qJ,_4r,u4r,b4r,EM,XTe,v4r,F4r,jJ,T4r,M4r,E4r,CM,zTe,C4r,w4r,DJ,A4r,L4r,y4r,wM,WTe,x4r,$4r,GJ,k4r,S4r,R4r,AM,QTe,P4r,B4r,OJ,I4r,N4r,q4r,LM,HTe,j4r,D4r,VJ,G4r,O4r,V4r,yM,UTe,X4r,z4r,XJ,W4r,Q4r,H4r,xM,JTe,U4r,J4r,zJ,Y4r,K4r,Z4r,$M,MWe,fc,kM,YTe,gx,eEr,KTe,oEr,EWe,tr,hx,rEr,mc,tEr,WJ,aEr,nEr,QJ,sEr,lEr,iEr,px,dEr,ZTe,cEr,fEr,mEr,Pt,_x,gEr,e8e,hEr,pEr,gc,_Er,o8e,uEr,bEr,HJ,vEr,FEr,TEr,SM,MEr,kr,ux,EEr,r8e,CEr,wEr,dn,AEr,t8e,LEr,yEr,a8e,xEr,$Er,n8e,kEr,SEr,REr,se,RM,s8e,PEr,BEr,UJ,IEr,NEr,qEr,PM,l8e,jEr,DEr,JJ,GEr,OEr,VEr,BM,i8e,XEr,zEr,YJ,WEr,QEr,HEr,IM,d8e,UEr,JEr,KJ,YEr,KEr,ZEr,NM,c8e,eCr,oCr,ZJ,rCr,tCr,aCr,qM,f8e,nCr,sCr,eY,lCr,iCr,dCr,jM,m8e,cCr,fCr,oY,mCr,gCr,hCr,DM,g8e,pCr,_Cr,rY,uCr,bCr,vCr,GM,h8e,FCr,TCr,tY,MCr,ECr,CCr,OM,p8e,wCr,ACr,aY,LCr,yCr,xCr,VM,_8e,$Cr,kCr,nY,SCr,RCr,PCr,XM,u8e,BCr,ICr,sY,NCr,qCr,jCr,zM,b8e,DCr,GCr,lY,OCr,VCr,XCr,WM,v8e,zCr,WCr,iY,QCr,HCr,UCr,QM,F8e,JCr,YCr,dY,KCr,ZCr,e5r,HM,T8e,o5r,r5r,cY,t5r,a5r,n5r,UM,M8e,s5r,l5r,fY,i5r,d5r,c5r,JM,E8e,f5r,m5r,mY,g5r,h5r,p5r,YM,C8e,_5r,u5r,gY,b5r,v5r,F5r,KM,w8e,T5r,M5r,hY,E5r,C5r,w5r,ZM,A8e,A5r,L5r,pY,y5r,x5r,$5r,e4,L8e,k5r,S5r,_Y,R5r,P5r,B5r,o4,y8e,I5r,N5r,uY,q5r,j5r,D5r,r4,CWe,hc,t4,x8e,bx,G5r,$8e,O5r,wWe,ar,vx,V5r,pc,X5r,bY,z5r,W5r,vY,Q5r,H5r,U5r,Fx,J5r,k8e,Y5r,K5r,Z5r,Bt,Tx,e0r,S8e,o0r,r0r,_c,t0r,R8e,a0r,n0r,FY,s0r,l0r,i0r,a4,d0r,Sr,Mx,c0r,P8e,f0r,m0r,cn,g0r,B8e,h0r,p0r,I8e,_0r,u0r,N8e,b0r,v0r,F0r,Me,n4,q8e,T0r,M0r,TY,E0r,C0r,w0r,s4,j8e,A0r,L0r,MY,y0r,x0r,$0r,l4,D8e,k0r,S0r,EY,R0r,P0r,B0r,i4,G8e,I0r,N0r,CY,q0r,j0r,D0r,d4,O8e,G0r,O0r,wY,V0r,X0r,z0r,c4,V8e,W0r,Q0r,AY,H0r,U0r,J0r,f4,X8e,Y0r,K0r,LY,Z0r,ewr,owr,m4,z8e,rwr,twr,yY,awr,nwr,swr,g4,W8e,lwr,iwr,xY,dwr,cwr,fwr,h4,Q8e,mwr,gwr,$Y,hwr,pwr,_wr,p4,H8e,uwr,bwr,kY,vwr,Fwr,Twr,_4,U8e,Mwr,Ewr,SY,Cwr,wwr,Awr,u4,J8e,Lwr,ywr,RY,xwr,$wr,kwr,b4,AWe,uc,v4,Y8e,Ex,Swr,K8e,Rwr,LWe,nr,Cx,Pwr,bc,Bwr,PY,Iwr,Nwr,BY,qwr,jwr,Dwr,wx,Gwr,Z8e,Owr,Vwr,Xwr,It,Ax,zwr,eMe,Wwr,Qwr,vc,Hwr,oMe,Uwr,Jwr,IY,Ywr,Kwr,Zwr,F4,eAr,Rr,Lx,oAr,rMe,rAr,tAr,fn,aAr,tMe,nAr,sAr,aMe,lAr,iAr,nMe,dAr,cAr,fAr,Ve,T4,sMe,mAr,gAr,NY,hAr,pAr,_Ar,M4,lMe,uAr,bAr,qY,vAr,FAr,TAr,el,iMe,MAr,EAr,jY,CAr,wAr,DY,AAr,LAr,yAr,E4,dMe,xAr,$Ar,GY,kAr,SAr,RAr,C4,cMe,PAr,BAr,OY,IAr,NAr,qAr,w4,fMe,jAr,DAr,VY,GAr,OAr,VAr,A4,mMe,XAr,zAr,XY,WAr,QAr,HAr,L4,gMe,UAr,JAr,zY,YAr,KAr,ZAr,y4,yWe,Fc,x4,hMe,yx,e7r,pMe,o7r,xWe,sr,xx,r7r,Tc,t7r,WY,a7r,n7r,QY,s7r,l7r,i7r,$x,d7r,_Me,c7r,f7r,m7r,Nt,kx,g7r,uMe,h7r,p7r,Mc,_7r,bMe,u7r,b7r,HY,v7r,F7r,T7r,$4,M7r,Pr,Sx,E7r,vMe,C7r,w7r,mn,A7r,FMe,L7r,y7r,TMe,x7r,$7r,MMe,k7r,S7r,R7r,ie,k4,EMe,P7r,B7r,UY,I7r,N7r,q7r,S4,CMe,j7r,D7r,JY,G7r,O7r,V7r,R4,wMe,X7r,z7r,YY,W7r,Q7r,H7r,P4,AMe,U7r,J7r,KY,Y7r,K7r,Z7r,B4,LMe,eLr,oLr,ZY,rLr,tLr,aLr,I4,yMe,nLr,sLr,eK,lLr,iLr,dLr,N4,xMe,cLr,fLr,oK,mLr,gLr,hLr,q4,$Me,pLr,_Lr,rK,uLr,bLr,vLr,j4,kMe,FLr,TLr,tK,MLr,ELr,CLr,D4,SMe,wLr,ALr,aK,LLr,yLr,xLr,G4,RMe,$Lr,kLr,nK,SLr,RLr,PLr,O4,PMe,BLr,ILr,sK,NLr,qLr,jLr,V4,BMe,DLr,GLr,lK,OLr,VLr,XLr,X4,IMe,zLr,WLr,iK,QLr,HLr,ULr,z4,NMe,JLr,YLr,dK,KLr,ZLr,eyr,W4,qMe,oyr,ryr,cK,tyr,ayr,nyr,Q4,jMe,syr,lyr,fK,iyr,dyr,cyr,H4,DMe,fyr,myr,mK,gyr,hyr,pyr,U4,GMe,_yr,uyr,gK,byr,vyr,Fyr,J4,OMe,Tyr,Myr,hK,Eyr,Cyr,wyr,Y4,$We,Ec,K4,VMe,Rx,Ayr,XMe,Lyr,kWe,lr,Px,yyr,Cc,xyr,pK,$yr,kyr,_K,Syr,Ryr,Pyr,Bx,Byr,zMe,Iyr,Nyr,qyr,qt,Ix,jyr,WMe,Dyr,Gyr,wc,Oyr,QMe,Vyr,Xyr,uK,zyr,Wyr,Qyr,Z4,Hyr,Br,Nx,Uyr,HMe,Jyr,Yyr,gn,Kyr,UMe,Zyr,e9r,JMe,o9r,r9r,YMe,t9r,a9r,n9r,ye,eE,KMe,s9r,l9r,bK,i9r,d9r,c9r,oE,ZMe,f9r,m9r,vK,g9r,h9r,p9r,rE,e4e,_9r,u9r,FK,b9r,v9r,F9r,tE,o4e,T9r,M9r,TK,E9r,C9r,w9r,aE,r4e,A9r,L9r,MK,y9r,x9r,$9r,nE,t4e,k9r,S9r,EK,R9r,P9r,B9r,sE,a4e,I9r,N9r,CK,q9r,j9r,D9r,lE,n4e,G9r,O9r,wK,V9r,X9r,z9r,iE,s4e,W9r,Q9r,AK,H9r,U9r,J9r,dE,l4e,Y9r,K9r,LK,Z9r,exr,oxr,cE,SWe,Ac,fE,i4e,qx,rxr,d4e,txr,RWe,ir,jx,axr,Lc,nxr,yK,sxr,lxr,xK,ixr,dxr,cxr,Dx,fxr,c4e,mxr,gxr,hxr,jt,Gx,pxr,f4e,_xr,uxr,yc,bxr,m4e,vxr,Fxr,$K,Txr,Mxr,Exr,mE,Cxr,Ir,Ox,wxr,g4e,Axr,Lxr,hn,yxr,h4e,xxr,$xr,p4e,kxr,Sxr,_4e,Rxr,Pxr,Bxr,te,gE,u4e,Ixr,Nxr,kK,qxr,jxr,Dxr,hE,b4e,Gxr,Oxr,SK,Vxr,Xxr,zxr,pE,v4e,Wxr,Qxr,RK,Hxr,Uxr,Jxr,_E,F4e,Yxr,Kxr,PK,Zxr,e$r,o$r,uE,T4e,r$r,t$r,BK,a$r,n$r,s$r,bE,M4e,l$r,i$r,IK,d$r,c$r,f$r,vE,E4e,m$r,g$r,NK,h$r,p$r,_$r,FE,C4e,u$r,b$r,qK,v$r,F$r,T$r,TE,w4e,M$r,E$r,jK,C$r,w$r,A$r,ME,A4e,L$r,y$r,DK,x$r,$$r,k$r,EE,L4e,S$r,R$r,GK,P$r,B$r,I$r,CE,y4e,N$r,q$r,OK,j$r,D$r,G$r,wE,x4e,O$r,V$r,VK,X$r,z$r,W$r,AE,$4e,Q$r,H$r,XK,U$r,J$r,Y$r,LE,k4e,K$r,Z$r,zK,ekr,okr,rkr,yE,S4e,tkr,akr,WK,nkr,skr,lkr,xE,R4e,ikr,dkr,QK,ckr,fkr,mkr,$E,P4e,gkr,hkr,HK,pkr,_kr,ukr,kE,B4e,bkr,vkr,UK,Fkr,Tkr,Mkr,SE,I4e,Ekr,Ckr,JK,wkr,Akr,Lkr,RE,N4e,ykr,xkr,YK,$kr,kkr,Skr,PE,q4e,Rkr,Pkr,KK,Bkr,Ikr,Nkr,BE,j4e,qkr,jkr,ZK,Dkr,Gkr,Okr,IE,D4e,Vkr,Xkr,eZ,zkr,Wkr,Qkr,NE,G4e,Hkr,Ukr,oZ,Jkr,Ykr,Kkr,qE,O4e,Zkr,eSr,rZ,oSr,rSr,tSr,jE,PWe,xc,DE,V4e,Vx,aSr,X4e,nSr,BWe,dr,Xx,sSr,$c,lSr,tZ,iSr,dSr,aZ,cSr,fSr,mSr,zx,gSr,z4e,hSr,pSr,_Sr,Dt,Wx,uSr,W4e,bSr,vSr,kc,FSr,Q4e,TSr,MSr,nZ,ESr,CSr,wSr,GE,ASr,Nr,Qx,LSr,H4e,ySr,xSr,pn,$Sr,U4e,kSr,SSr,J4e,RSr,PSr,Y4e,BSr,ISr,NSr,ve,OE,K4e,qSr,jSr,sZ,DSr,GSr,OSr,VE,Z4e,VSr,XSr,lZ,zSr,WSr,QSr,XE,eEe,HSr,USr,iZ,JSr,YSr,KSr,zE,oEe,ZSr,eRr,dZ,oRr,rRr,tRr,WE,rEe,aRr,nRr,cZ,sRr,lRr,iRr,QE,tEe,dRr,cRr,fZ,fRr,mRr,gRr,HE,aEe,hRr,pRr,mZ,_Rr,uRr,bRr,UE,nEe,vRr,FRr,gZ,TRr,MRr,ERr,JE,sEe,CRr,wRr,hZ,ARr,LRr,yRr,YE,lEe,xRr,$Rr,pZ,kRr,SRr,RRr,KE,iEe,PRr,BRr,_Z,IRr,NRr,qRr,ZE,dEe,jRr,DRr,uZ,GRr,ORr,VRr,eC,cEe,XRr,zRr,bZ,WRr,QRr,HRr,oC,fEe,URr,JRr,vZ,YRr,KRr,ZRr,rC,mEe,ePr,oPr,FZ,rPr,tPr,aPr,tC,gEe,nPr,sPr,TZ,lPr,iPr,dPr,aC,hEe,cPr,fPr,MZ,mPr,gPr,hPr,nC,IWe,Sc,sC,pEe,Hx,pPr,_Ee,_Pr,NWe,cr,Ux,uPr,Rc,bPr,EZ,vPr,FPr,CZ,TPr,MPr,EPr,Jx,CPr,uEe,wPr,APr,LPr,Gt,Yx,yPr,bEe,xPr,$Pr,Pc,kPr,vEe,SPr,RPr,wZ,PPr,BPr,IPr,lC,NPr,qr,Kx,qPr,FEe,jPr,DPr,_n,GPr,TEe,OPr,VPr,MEe,XPr,zPr,EEe,WPr,QPr,HPr,Zx,iC,CEe,UPr,JPr,AZ,YPr,KPr,ZPr,dC,wEe,eBr,oBr,LZ,rBr,tBr,aBr,cC,qWe,Bc,fC,AEe,e$,nBr,LEe,sBr,jWe,fr,o$,lBr,Ic,iBr,yZ,dBr,cBr,xZ,fBr,mBr,gBr,r$,hBr,yEe,pBr,_Br,uBr,Ot,t$,bBr,xEe,vBr,FBr,Nc,TBr,$Ee,MBr,EBr,$Z,CBr,wBr,ABr,mC,LBr,jr,a$,yBr,kEe,xBr,$Br,un,kBr,SEe,SBr,RBr,REe,PBr,BBr,PEe,IBr,NBr,qBr,BEe,gC,IEe,jBr,DBr,kZ,GBr,OBr,VBr,hC,DWe,qc,pC,NEe,n$,XBr,qEe,zBr,GWe,mr,s$,WBr,jc,QBr,SZ,HBr,UBr,RZ,JBr,YBr,KBr,l$,ZBr,jEe,eIr,oIr,rIr,Vt,i$,tIr,DEe,aIr,nIr,Dc,sIr,GEe,lIr,iIr,PZ,dIr,cIr,fIr,_C,mIr,Dr,d$,gIr,OEe,hIr,pIr,bn,_Ir,VEe,uIr,bIr,XEe,vIr,FIr,zEe,TIr,MIr,EIr,de,uC,WEe,CIr,wIr,BZ,AIr,LIr,yIr,bC,QEe,xIr,$Ir,IZ,kIr,SIr,RIr,vC,HEe,PIr,BIr,NZ,IIr,NIr,qIr,FC,UEe,jIr,DIr,qZ,GIr,OIr,VIr,TC,JEe,XIr,zIr,jZ,WIr,QIr,HIr,MC,YEe,UIr,JIr,DZ,YIr,KIr,ZIr,EC,KEe,eNr,oNr,GZ,rNr,tNr,aNr,CC,ZEe,nNr,sNr,OZ,lNr,iNr,dNr,wC,eCe,cNr,fNr,VZ,mNr,gNr,hNr,AC,oCe,pNr,_Nr,XZ,uNr,bNr,vNr,LC,rCe,FNr,TNr,zZ,MNr,ENr,CNr,yC,tCe,wNr,ANr,WZ,LNr,yNr,xNr,xC,aCe,$Nr,kNr,QZ,SNr,RNr,PNr,$C,nCe,BNr,INr,HZ,NNr,qNr,jNr,kC,sCe,DNr,GNr,UZ,ONr,VNr,XNr,SC,lCe,zNr,WNr,JZ,QNr,HNr,UNr,RC,iCe,JNr,YNr,YZ,KNr,ZNr,eqr,PC,dCe,oqr,rqr,KZ,tqr,aqr,nqr,BC,cCe,sqr,lqr,ZZ,iqr,dqr,cqr,IC,fCe,fqr,mqr,eee,gqr,hqr,pqr,NC,OWe,Gc,qC,mCe,c$,_qr,gCe,uqr,VWe,gr,f$,bqr,Oc,vqr,oee,Fqr,Tqr,ree,Mqr,Eqr,Cqr,m$,wqr,hCe,Aqr,Lqr,yqr,Xt,g$,xqr,pCe,$qr,kqr,Vc,Sqr,_Ce,Rqr,Pqr,tee,Bqr,Iqr,Nqr,jC,qqr,Gr,h$,jqr,uCe,Dqr,Gqr,vn,Oqr,bCe,Vqr,Xqr,vCe,zqr,Wqr,FCe,Qqr,Hqr,Uqr,ce,DC,TCe,Jqr,Yqr,aee,Kqr,Zqr,ejr,GC,MCe,ojr,rjr,nee,tjr,ajr,njr,OC,ECe,sjr,ljr,see,ijr,djr,cjr,VC,CCe,fjr,mjr,lee,gjr,hjr,pjr,XC,wCe,_jr,ujr,iee,bjr,vjr,Fjr,zC,ACe,Tjr,Mjr,dee,Ejr,Cjr,wjr,WC,LCe,Ajr,Ljr,cee,yjr,xjr,$jr,QC,yCe,kjr,Sjr,fee,Rjr,Pjr,Bjr,HC,xCe,Ijr,Njr,mee,qjr,jjr,Djr,UC,$Ce,Gjr,Ojr,gee,Vjr,Xjr,zjr,JC,kCe,Wjr,Qjr,hee,Hjr,Ujr,Jjr,YC,SCe,Yjr,Kjr,pee,Zjr,eDr,oDr,KC,RCe,rDr,tDr,_ee,aDr,nDr,sDr,ZC,PCe,lDr,iDr,uee,dDr,cDr,fDr,e5,BCe,mDr,gDr,bee,hDr,pDr,_Dr,o5,ICe,uDr,bDr,vee,vDr,FDr,TDr,r5,NCe,MDr,EDr,Fee,CDr,wDr,ADr,t5,qCe,LDr,yDr,Tee,xDr,$Dr,kDr,a5,jCe,SDr,RDr,Mee,PDr,BDr,IDr,n5,DCe,NDr,qDr,Eee,jDr,DDr,GDr,s5,XWe,Xc,l5,GCe,p$,ODr,OCe,VDr,zWe,hr,_$,XDr,zc,zDr,Cee,WDr,QDr,wee,HDr,UDr,JDr,u$,YDr,VCe,KDr,ZDr,eGr,zt,b$,oGr,XCe,rGr,tGr,Wc,aGr,zCe,nGr,sGr,Aee,lGr,iGr,dGr,i5,cGr,Or,v$,fGr,WCe,mGr,gGr,Fn,hGr,QCe,pGr,_Gr,HCe,uGr,bGr,UCe,vGr,FGr,TGr,JCe,d5,YCe,MGr,EGr,Lee,CGr,wGr,AGr,c5,WWe,Qc,f5,KCe,F$,LGr,ZCe,yGr,QWe,pr,T$,xGr,Hc,$Gr,yee,kGr,SGr,xee,RGr,PGr,BGr,M$,IGr,e5e,NGr,qGr,jGr,Wt,E$,DGr,o5e,GGr,OGr,Uc,VGr,r5e,XGr,zGr,$ee,WGr,QGr,HGr,m5,UGr,Vr,C$,JGr,t5e,YGr,KGr,Tn,ZGr,a5e,eOr,oOr,n5e,rOr,tOr,s5e,aOr,nOr,sOr,l5e,g5,i5e,lOr,iOr,kee,dOr,cOr,fOr,h5,HWe,Jc,p5,d5e,w$,mOr,c5e,gOr,UWe,_r,A$,hOr,Yc,pOr,See,_Or,uOr,Ree,bOr,vOr,FOr,L$,TOr,f5e,MOr,EOr,COr,Qt,y$,wOr,m5e,AOr,LOr,Kc,yOr,g5e,xOr,$Or,Pee,kOr,SOr,ROr,_5,POr,Xr,x$,BOr,h5e,IOr,NOr,Mn,qOr,p5e,jOr,DOr,_5e,GOr,OOr,u5e,VOr,XOr,zOr,oe,u5,b5e,WOr,QOr,Bee,HOr,UOr,JOr,b5,v5e,YOr,KOr,Iee,ZOr,eVr,oVr,v5,F5e,rVr,tVr,Nee,aVr,nVr,sVr,F5,T5e,lVr,iVr,qee,dVr,cVr,fVr,T5,M5e,mVr,gVr,jee,hVr,pVr,_Vr,M5,E5e,uVr,bVr,Dee,vVr,FVr,TVr,E5,C5e,MVr,EVr,Gee,CVr,wVr,AVr,C5,w5e,LVr,yVr,Oee,xVr,$Vr,kVr,w5,A5e,SVr,RVr,Vee,PVr,BVr,IVr,A5,L5e,NVr,qVr,Xee,jVr,DVr,GVr,L5,y5e,OVr,VVr,zee,XVr,zVr,WVr,y5,x5e,QVr,HVr,Wee,UVr,JVr,YVr,x5,$5e,KVr,ZVr,Qee,eXr,oXr,rXr,$5,k5e,tXr,aXr,Hee,nXr,sXr,lXr,k5,S5e,iXr,dXr,Uee,cXr,fXr,mXr,S5,R5e,gXr,hXr,Jee,pXr,_Xr,uXr,R5,P5e,bXr,vXr,Yee,FXr,TXr,MXr,P5,B5e,EXr,CXr,Kee,wXr,AXr,LXr,B5,I5e,yXr,xXr,Zee,$Xr,kXr,SXr,I5,N5e,RXr,PXr,eoe,BXr,IXr,NXr,N5,q5e,qXr,jXr,ooe,DXr,GXr,OXr,q5,j5e,VXr,XXr,roe,zXr,WXr,QXr,j5,D5e,HXr,UXr,toe,JXr,YXr,KXr,D5,G5e,ZXr,ezr,aoe,ozr,rzr,tzr,G5,O5e,azr,nzr,noe,szr,lzr,izr,O5,V5e,dzr,czr,soe,fzr,mzr,gzr,V5,X5e,hzr,pzr,loe,_zr,uzr,bzr,X5,JWe,Zc,z5,z5e,$$,vzr,W5e,Fzr,YWe,ur,k$,Tzr,ef,Mzr,ioe,Ezr,Czr,doe,wzr,Azr,Lzr,S$,yzr,Q5e,xzr,$zr,kzr,Ht,R$,Szr,H5e,Rzr,Pzr,of,Bzr,U5e,Izr,Nzr,coe,qzr,jzr,Dzr,W5,Gzr,zr,P$,Ozr,J5e,Vzr,Xzr,En,zzr,Y5e,Wzr,Qzr,K5e,Hzr,Uzr,Z5e,Jzr,Yzr,Kzr,xe,Q5,e0e,Zzr,eWr,foe,oWr,rWr,tWr,H5,o0e,aWr,nWr,moe,sWr,lWr,iWr,U5,r0e,dWr,cWr,goe,fWr,mWr,gWr,J5,t0e,hWr,pWr,hoe,_Wr,uWr,bWr,Y5,a0e,vWr,FWr,poe,TWr,MWr,EWr,K5,n0e,CWr,wWr,_oe,AWr,LWr,yWr,Z5,s0e,xWr,$Wr,uoe,kWr,SWr,RWr,e0,l0e,PWr,BWr,boe,IWr,NWr,qWr,o0,i0e,jWr,DWr,voe,GWr,OWr,VWr,r0,d0e,XWr,zWr,Foe,WWr,QWr,HWr,t0,KWe,rf,a0,c0e,B$,UWr,f0e,JWr,ZWe,br,I$,YWr,tf,KWr,Toe,ZWr,eQr,Moe,oQr,rQr,tQr,N$,aQr,m0e,nQr,sQr,lQr,Ut,q$,iQr,g0e,dQr,cQr,af,fQr,h0e,mQr,gQr,Eoe,hQr,pQr,_Qr,n0,uQr,Wr,j$,bQr,p0e,vQr,FQr,Cn,TQr,_0e,MQr,EQr,u0e,CQr,wQr,b0e,AQr,LQr,yQr,Ee,s0,v0e,xQr,$Qr,Coe,kQr,SQr,RQr,l0,F0e,PQr,BQr,woe,IQr,NQr,qQr,i0,T0e,jQr,DQr,Aoe,GQr,OQr,VQr,d0,M0e,XQr,zQr,Loe,WQr,QQr,HQr,c0,E0e,UQr,JQr,yoe,YQr,KQr,ZQr,f0,C0e,eHr,oHr,xoe,rHr,tHr,aHr,m0,w0e,nHr,sHr,$oe,lHr,iHr,dHr,g0,A0e,cHr,fHr,koe,mHr,gHr,hHr,h0,L0e,pHr,_Hr,Soe,uHr,bHr,vHr,p0,y0e,FHr,THr,Roe,MHr,EHr,CHr,_0,x0e,wHr,AHr,Poe,LHr,yHr,xHr,u0,$0e,$Hr,kHr,Boe,SHr,RHr,PHr,b0,k0e,BHr,IHr,Ioe,NHr,qHr,jHr,v0,eQe,nf,F0,S0e,D$,DHr,R0e,GHr,oQe,vr,G$,OHr,sf,VHr,Noe,XHr,zHr,qoe,WHr,QHr,HHr,O$,UHr,P0e,JHr,YHr,KHr,Jt,V$,ZHr,B0e,eUr,oUr,lf,rUr,I0e,tUr,aUr,joe,nUr,sUr,lUr,T0,iUr,Qr,X$,dUr,N0e,cUr,fUr,wn,mUr,q0e,gUr,hUr,j0e,pUr,_Ur,D0e,uUr,bUr,vUr,$e,M0,G0e,FUr,TUr,Doe,MUr,EUr,CUr,E0,O0e,wUr,AUr,Goe,LUr,yUr,xUr,C0,V0e,$Ur,kUr,Ooe,SUr,RUr,PUr,w0,X0e,BUr,IUr,Voe,NUr,qUr,jUr,A0,z0e,DUr,GUr,Xoe,OUr,VUr,XUr,L0,W0e,zUr,WUr,zoe,QUr,HUr,UUr,y0,Q0e,JUr,YUr,Woe,KUr,ZUr,eJr,x0,H0e,oJr,rJr,Qoe,tJr,aJr,nJr,$0,U0e,sJr,lJr,Hoe,iJr,dJr,cJr,k0,J0e,fJr,mJr,Uoe,gJr,hJr,pJr,S0,rQe,df,R0,Y0e,z$,_Jr,K0e,uJr,tQe,Fr,W$,bJr,cf,vJr,Joe,FJr,TJr,Yoe,MJr,EJr,CJr,Q$,wJr,Z0e,AJr,LJr,yJr,Yt,H$,xJr,ewe,$Jr,kJr,ff,SJr,owe,RJr,PJr,Koe,BJr,IJr,NJr,P0,qJr,Hr,U$,jJr,rwe,DJr,GJr,An,OJr,twe,VJr,XJr,awe,zJr,WJr,nwe,QJr,HJr,UJr,ke,B0,swe,JJr,YJr,Zoe,KJr,ZJr,eYr,I0,lwe,oYr,rYr,ere,tYr,aYr,nYr,N0,iwe,sYr,lYr,ore,iYr,dYr,cYr,q0,dwe,fYr,mYr,rre,gYr,hYr,pYr,j0,cwe,_Yr,uYr,tre,bYr,vYr,FYr,D0,fwe,TYr,MYr,are,EYr,CYr,wYr,G0,mwe,AYr,LYr,nre,yYr,xYr,$Yr,O0,gwe,kYr,SYr,sre,RYr,PYr,BYr,V0,hwe,IYr,NYr,lre,qYr,jYr,DYr,X0,pwe,GYr,OYr,ire,VYr,XYr,zYr,z0,aQe,mf,W0,_we,J$,WYr,uwe,QYr,nQe,Tr,Y$,HYr,gf,UYr,dre,JYr,YYr,cre,KYr,ZYr,eKr,K$,oKr,bwe,rKr,tKr,aKr,Kt,Z$,nKr,vwe,sKr,lKr,hf,iKr,Fwe,dKr,cKr,fre,fKr,mKr,gKr,Q0,hKr,Ur,ek,pKr,Twe,_Kr,uKr,Ln,bKr,Mwe,vKr,FKr,Ewe,TKr,MKr,Cwe,EKr,CKr,wKr,Se,H0,wwe,AKr,LKr,mre,yKr,xKr,$Kr,U0,Awe,kKr,SKr,gre,RKr,PKr,BKr,J0,Lwe,IKr,NKr,hre,qKr,jKr,DKr,Y0,ywe,GKr,OKr,pre,VKr,XKr,zKr,K0,xwe,WKr,QKr,_re,HKr,UKr,JKr,Z0,$we,YKr,KKr,ure,ZKr,eZr,oZr,ew,kwe,rZr,tZr,bre,aZr,nZr,sZr,ow,Swe,lZr,iZr,vre,dZr,cZr,fZr,rw,Rwe,mZr,gZr,Fre,hZr,pZr,_Zr,tw,Pwe,uZr,bZr,Tre,vZr,FZr,TZr,aw,sQe,pf,nw,Bwe,ok,MZr,Iwe,EZr,lQe,Mr,rk,CZr,_f,wZr,Mre,AZr,LZr,Ere,yZr,xZr,$Zr,tk,kZr,Nwe,SZr,RZr,PZr,Zt,ak,BZr,qwe,IZr,NZr,uf,qZr,jwe,jZr,DZr,Cre,GZr,OZr,VZr,sw,XZr,Jr,nk,zZr,Dwe,WZr,QZr,yn,HZr,Gwe,UZr,JZr,Owe,YZr,KZr,Vwe,ZZr,eet,oet,Re,lw,Xwe,ret,tet,wre,aet,net,set,iw,zwe,iet,det,Are,cet,fet,met,dw,Wwe,get,het,Lre,pet,_et,uet,cw,Qwe,bet,vet,yre,Fet,Tet,Met,fw,Hwe,Eet,Cet,xre,wet,Aet,Let,mw,Uwe,yet,xet,$re,$et,ket,Set,gw,Jwe,Ret,Pet,kre,Bet,Iet,Net,hw,Ywe,qet,jet,Sre,Det,Get,Oet,pw,Kwe,Vet,Xet,Rre,zet,Wet,Qet,_w,Zwe,Het,Uet,Pre,Jet,Yet,Ket,uw,iQe,bf,bw,eAe,sk,Zet,oAe,eot,dQe,Er,lk,oot,vf,rot,Bre,tot,aot,Ire,not,sot,lot,ik,iot,rAe,dot,cot,fot,ea,dk,mot,tAe,got,hot,Ff,pot,aAe,_ot,uot,Nre,bot,vot,Fot,vw,Tot,Yr,ck,Mot,nAe,Eot,Cot,xn,wot,sAe,Aot,Lot,lAe,yot,xot,iAe,$ot,kot,Sot,Xe,Fw,dAe,Rot,Pot,qre,Bot,Iot,Not,Tw,cAe,qot,jot,jre,Dot,Got,Oot,Mw,fAe,Vot,Xot,Dre,zot,Wot,Qot,Ew,mAe,Hot,Uot,Gre,Jot,Yot,Kot,Cw,gAe,Zot,ert,Ore,ort,rrt,trt,ww,hAe,art,nrt,Vre,srt,lrt,irt,Aw,pAe,drt,crt,Xre,frt,mrt,grt,Lw,_Ae,hrt,prt,zre,_rt,urt,brt,yw,cQe,Tf,xw,uAe,fk,vrt,bAe,Frt,fQe,Cr,mk,Trt,Mf,Mrt,Wre,Ert,Crt,Qre,wrt,Art,Lrt,gk,yrt,vAe,xrt,$rt,krt,oa,hk,Srt,FAe,Rrt,Prt,Ef,Brt,TAe,Irt,Nrt,Hre,qrt,jrt,Drt,$w,Grt,Kr,pk,Ort,MAe,Vrt,Xrt,$n,zrt,EAe,Wrt,Qrt,CAe,Hrt,Urt,wAe,Jrt,Yrt,Krt,ze,kw,AAe,Zrt,ett,Ure,ott,rtt,ttt,Sw,LAe,att,ntt,Jre,stt,ltt,itt,Rw,yAe,dtt,ctt,Yre,ftt,mtt,gtt,Pw,xAe,htt,ptt,Kre,_tt,utt,btt,Bw,$Ae,vtt,Ftt,Zre,Ttt,Mtt,Ett,Iw,kAe,Ctt,wtt,ete,Att,Ltt,ytt,Nw,SAe,xtt,$tt,ote,ktt,Stt,Rtt,qw,RAe,Ptt,Btt,rte,Itt,Ntt,qtt,jw,mQe,Cf,Dw,PAe,_k,jtt,BAe,Dtt,gQe,wr,uk,Gtt,wf,Ott,tte,Vtt,Xtt,ate,ztt,Wtt,Qtt,bk,Htt,IAe,Utt,Jtt,Ytt,ra,vk,Ktt,NAe,Ztt,eat,Af,oat,qAe,rat,tat,nte,aat,nat,sat,Gw,lat,Zr,Fk,iat,jAe,dat,cat,kn,fat,DAe,mat,gat,GAe,hat,pat,OAe,_at,uat,bat,VAe,Ow,XAe,vat,Fat,ste,Tat,Mat,Eat,Vw,hQe,Lf,Xw,zAe,Tk,Cat,WAe,wat,pQe,Ar,Mk,Aat,yf,Lat,lte,yat,xat,ite,$at,kat,Sat,Ek,Rat,QAe,Pat,Bat,Iat,ta,Ck,Nat,HAe,qat,jat,xf,Dat,UAe,Gat,Oat,dte,Vat,Xat,zat,zw,Wat,et,wk,Qat,JAe,Hat,Uat,Sn,Jat,YAe,Yat,Kat,KAe,Zat,ent,ZAe,ont,rnt,tnt,Ak,Ww,e7e,ant,nnt,cte,snt,lnt,int,Qw,o7e,dnt,cnt,fte,fnt,mnt,gnt,Hw,_Qe,$f,Uw,r7e,Lk,hnt,t7e,pnt,uQe,Lr,yk,_nt,kf,unt,mte,bnt,vnt,gte,Fnt,Tnt,Mnt,xk,Ent,a7e,Cnt,wnt,Ant,aa,$k,Lnt,n7e,ynt,xnt,Sf,$nt,s7e,knt,Snt,hte,Rnt,Pnt,Bnt,Jw,Int,ot,kk,Nnt,l7e,qnt,jnt,Rn,Dnt,i7e,Gnt,Ont,d7e,Vnt,Xnt,c7e,znt,Wnt,Qnt,f7e,Yw,m7e,Hnt,Unt,pte,Jnt,Ynt,Knt,Kw,bQe;return c=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ML=new re({}),EL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new Znt({props:{warning:!0,$$slots:{default:[hJt]},$$scope:{ctx:$}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/configuration_auto.py#L617"}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/configuration_auto.py#L640"}}),oh=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[pJt]},$$scope:{ctx:$}}}),xL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/configuration_auto.py#L763"}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/tokenization_auto.py#L411"}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18326/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/tokenization_auto.py#L425"}}),Nh=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[_Jt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/tokenization_auto.py#L624"}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/feature_extraction_auto.py#L197"}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18326/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/feature_extraction_auto.py#L211"}}),Mp=new Znt({props:{$$slots:{default:[uJt]},$$scope:{ctx:$}}}),Ep=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[bJt]},$$scope:{ctx:$}}}),GL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/feature_extraction_auto.py#L338"}}),OL=new re({}),VL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/processing_auto.py#L90"}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/processing_auto.py#L104"}}),zp=new Znt({props:{$$slots:{default:[vJt]},$$scope:{ctx:$}}}),Wp=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[FJt]},$$scope:{ctx:$}}}),QL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/processing_auto.py#L257"}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L791"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),Up=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[TJt]},$$scope:{ctx:$}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),r2=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[MJt]},$$scope:{ctx:$}}}),ZL=new re({}),ey=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L798"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),a2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[EJt]},$$scope:{ctx:$}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),Y2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[CJt]},$$scope:{ctx:$}}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L813"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),Z2=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[wJt]},$$scope:{ctx:$}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),O1=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[AJt]},$$scope:{ctx:$}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L820"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),X1=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[LJt]},$$scope:{ctx:$}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),$b=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yJt]},$$scope:{ctx:$}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L827"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),Sb=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[xJt]},$$scope:{ctx:$}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),Zb=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$Jt]},$$scope:{ctx:$}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L836"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[kJt]},$$scope:{ctx:$}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[SJt]},$$scope:{ctx:$}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L881"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[RJt]},$$scope:{ctx:$}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[PJt]},$$scope:{ctx:$}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L888"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[BJt]},$$scope:{ctx:$}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[IJt]},$$scope:{ctx:$}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L874"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[NJt]},$$scope:{ctx:$}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[qJt]},$$scope:{ctx:$}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L845"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[jJt]},$$scope:{ctx:$}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[DJt]},$$scope:{ctx:$}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L852"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[GJt]},$$scope:{ctx:$}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),L6=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[OJt]},$$scope:{ctx:$}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L897"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18326/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),x6=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[VJt]},$$scope:{ctx:$}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),z6=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[XJt]},$$scope:{ctx:$}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L936"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),Q6=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[zJt]},$$scope:{ctx:$}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),J6=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[WJt]},$$scope:{ctx:$}}}),n9=new re({}),s9=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L863"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),K6=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[QJt]},$$scope:{ctx:$}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),oT=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[HJt]},$$scope:{ctx:$}}}),c9=new re({}),f9=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L943"}}),g9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),tT=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[UJt]},$$scope:{ctx:$}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[JJt]},$$scope:{ctx:$}}}),p9=new re({}),_9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L966"}}),b9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[YJt]},$$scope:{ctx:$}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[KJt]},$$scope:{ctx:$}}}),F9=new re({}),T9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L950"}}),E9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[ZJt]},$$scope:{ctx:$}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[eYt]},$$scope:{ctx:$}}}),w9=new re({}),A9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L957"}}),y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[oYt]},$$scope:{ctx:$}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[rYt]},$$scope:{ctx:$}}}),k9=new re({}),S9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L975"}}),P9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[tYt]},$$scope:{ctx:$}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[aYt]},$$scope:{ctx:$}}}),I9=new re({}),N9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L982"}}),j9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),e8=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[nYt]},$$scope:{ctx:$}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),s8=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[sYt]},$$scope:{ctx:$}}}),G9=new re({}),O9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L929"}}),X9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),i8=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[lYt]},$$scope:{ctx:$}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),m8=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[iYt]},$$scope:{ctx:$}}}),Q9=new re({}),H9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L904"}}),J9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),h8=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[dYt]},$$scope:{ctx:$}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),u8=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[cYt]},$$scope:{ctx:$}}}),K9=new re({}),Z9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L911"}}),ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),v8=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[fYt]},$$scope:{ctx:$}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),A8=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[mYt]},$$scope:{ctx:$}}}),tx=new re({}),ax=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_auto.py#L920"}}),sx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),y8=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[gYt]},$$scope:{ctx:$}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),k8=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[hYt]},$$scope:{ctx:$}}}),ix=new re({}),dx=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),R8=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[pYt]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[_Yt]},$$scope:{ctx:$}}}),gx=new re({}),hx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[uYt]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[bYt]},$$scope:{ctx:$}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[vYt]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[FYt]},$$scope:{ctx:$}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18326/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[TYt]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[MYt]},$$scope:{ctx:$}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[EYt]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[CYt]},$$scope:{ctx:$}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wYt]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[AYt]},$$scope:{ctx:$}}}),qx=new re({}),jx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[LYt]},$$scope:{ctx:$}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[yYt]},$$scope:{ctx:$}}}),Vx=new re({}),Xx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[xYt]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$Yt]},$$scope:{ctx:$}}}),Hx=new re({}),Ux=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kYt]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[SYt]},$$scope:{ctx:$}}}),e$=new re({}),o$=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),t$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[RYt]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[PYt]},$$scope:{ctx:$}}}),n$=new re({}),s$=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),i$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[BYt]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[IYt]},$$scope:{ctx:$}}}),c$=new re({}),f$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),g$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[NYt]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qYt]},$$scope:{ctx:$}}}),p$=new re({}),_$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),b$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[jYt]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[DYt]},$$scope:{ctx:$}}}),F$=new re({}),T$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),E$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[GYt]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[OYt]},$$scope:{ctx:$}}}),w$=new re({}),A$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[VYt]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[XYt]},$$scope:{ctx:$}}}),$$=new re({}),k$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),R$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[zYt]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[WYt]},$$scope:{ctx:$}}}),B$=new re({}),I$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[QYt]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[HYt]},$$scope:{ctx:$}}}),D$=new re({}),G$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),V$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),T0=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[UYt]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[JYt]},$$scope:{ctx:$}}}),z$=new re({}),W$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),H$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[YYt]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[KYt]},$$scope:{ctx:$}}}),J$=new re({}),Y$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ZYt]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eKt]},$$scope:{ctx:$}}}),ok=new re({}),rk=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),ak=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[oKt]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),uw=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[rKt]},$$scope:{ctx:$}}}),sk=new re({}),lk=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),dk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),vw=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[tKt]},$$scope:{ctx:$}}}),ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[aKt]},$$scope:{ctx:$}}}),fk=new re({}),mk=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),hk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),$w=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[nKt]},$$scope:{ctx:$}}}),pk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),jw=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[sKt]},$$scope:{ctx:$}}}),_k=new re({}),uk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),vk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),Gw=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[lKt]},$$scope:{ctx:$}}}),Fk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),Vw=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[iKt]},$$scope:{ctx:$}}}),Tk=new re({}),Mk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Ck=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),zw=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[dKt]},$$scope:{ctx:$}}}),wk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),Hw=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[cKt]},$$scope:{ctx:$}}}),Lk=new re({}),yk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),$k=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18326/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18326/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[fKt]},$$scope:{ctx:$}}}),kk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18326/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18326/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18326/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mKt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(c.$$.fragment),h=l(),wo=a("span"),$i=o("Auto Classes"),If=l(),lt=a("p"),ki=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Si=a("code"),bL=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ri=o("Instantiating one of "),Bn=a("a"),vL=o("AutoConfig"),In=o(", "),Nn=a("a"),FL=o("AutoModel"),Pi=o(`, and
`),qn=a("a"),TL=o("AutoTokenizer"),Bi=o(" will directly create a class of the relevant architecture. For instance"),qf=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),oR=o("will create a model that is an instance of "),Ii=a("a"),rR=o("BertModel"),tR=o("."),Ao=l(),Ra=a("p"),aR=o("There is one class of "),jf=a("code"),nR=o("AutoModel"),yUe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),gze=l(),Ni=a("h2"),Df=a("a"),dne=a("span"),F(ML.$$.fragment),xUe=l(),cne=a("span"),$Ue=o("Extending the Auto Classes"),hze=l(),jn=a("p"),kUe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),fne=a("code"),SUe=o("NewModel"),RUe=o(", make sure you have a "),mne=a("code"),PUe=o("NewModelConfig"),BUe=o(` then you can add those to the auto
classes like this:`),pze=l(),F(EL.$$.fragment),_ze=l(),sR=a("p"),IUe=o("You will then be able to use the auto classes like you would usually do!"),uze=l(),F(Gf.$$.fragment),bze=l(),qi=a("h2"),Of=a("a"),gne=a("span"),F(CL.$$.fragment),NUe=l(),hne=a("span"),qUe=o("AutoConfig"),vze=l(),Lo=a("div"),F(wL.$$.fragment),jUe=l(),AL=a("p"),DUe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),lR=a("a"),GUe=o("from_pretrained()"),OUe=o(" class method."),VUe=l(),LL=a("p"),XUe=o("This class cannot be instantiated directly using "),pne=a("code"),zUe=o("__init__()"),WUe=o(" (throws an error)."),QUe=l(),yr=a("div"),F(yL.$$.fragment),HUe=l(),_ne=a("p"),UUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),JUe=l(),ji=a("p"),YUe=o("The configuration class to instantiate is selected based on the "),une=a("code"),KUe=o("model_type"),ZUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),bne=a("code"),eJe=o("pretrained_model_name_or_path"),oJe=o(":"),rJe=l(),A=a("ul"),Vf=a("li"),vne=a("strong"),tJe=o("albert"),aJe=o(" \u2014 "),iR=a("a"),nJe=o("AlbertConfig"),sJe=o(" (ALBERT model)"),lJe=l(),Xf=a("li"),Fne=a("strong"),iJe=o("bart"),dJe=o(" \u2014 "),dR=a("a"),cJe=o("BartConfig"),fJe=o(" (BART model)"),mJe=l(),zf=a("li"),Tne=a("strong"),gJe=o("beit"),hJe=o(" \u2014 "),cR=a("a"),pJe=o("BeitConfig"),_Je=o(" (BEiT model)"),uJe=l(),Wf=a("li"),Mne=a("strong"),bJe=o("bert"),vJe=o(" \u2014 "),fR=a("a"),FJe=o("BertConfig"),TJe=o(" (BERT model)"),MJe=l(),Qf=a("li"),Ene=a("strong"),EJe=o("bert-generation"),CJe=o(" \u2014 "),mR=a("a"),wJe=o("BertGenerationConfig"),AJe=o(" (Bert Generation model)"),LJe=l(),Hf=a("li"),Cne=a("strong"),yJe=o("big_bird"),xJe=o(" \u2014 "),gR=a("a"),$Je=o("BigBirdConfig"),kJe=o(" (BigBird model)"),SJe=l(),Uf=a("li"),wne=a("strong"),RJe=o("bigbird_pegasus"),PJe=o(" \u2014 "),hR=a("a"),BJe=o("BigBirdPegasusConfig"),IJe=o(" (BigBird-Pegasus model)"),NJe=l(),Jf=a("li"),Ane=a("strong"),qJe=o("blenderbot"),jJe=o(" \u2014 "),pR=a("a"),DJe=o("BlenderbotConfig"),GJe=o(" (Blenderbot model)"),OJe=l(),Yf=a("li"),Lne=a("strong"),VJe=o("blenderbot-small"),XJe=o(" \u2014 "),_R=a("a"),zJe=o("BlenderbotSmallConfig"),WJe=o(" (BlenderbotSmall model)"),QJe=l(),Kf=a("li"),yne=a("strong"),HJe=o("bloom"),UJe=o(" \u2014 "),uR=a("a"),JJe=o("BloomConfig"),YJe=o(" (BLOOM model)"),KJe=l(),Zf=a("li"),xne=a("strong"),ZJe=o("camembert"),eYe=o(" \u2014 "),bR=a("a"),oYe=o("CamembertConfig"),rYe=o(" (CamemBERT model)"),tYe=l(),em=a("li"),$ne=a("strong"),aYe=o("canine"),nYe=o(" \u2014 "),vR=a("a"),sYe=o("CanineConfig"),lYe=o(" (CANINE model)"),iYe=l(),om=a("li"),kne=a("strong"),dYe=o("clip"),cYe=o(" \u2014 "),FR=a("a"),fYe=o("CLIPConfig"),mYe=o(" (CLIP model)"),gYe=l(),rm=a("li"),Sne=a("strong"),hYe=o("codegen"),pYe=o(" \u2014 "),TR=a("a"),_Ye=o("CodeGenConfig"),uYe=o(" (CodeGen model)"),bYe=l(),tm=a("li"),Rne=a("strong"),vYe=o("convbert"),FYe=o(" \u2014 "),MR=a("a"),TYe=o("ConvBertConfig"),MYe=o(" (ConvBERT model)"),EYe=l(),am=a("li"),Pne=a("strong"),CYe=o("convnext"),wYe=o(" \u2014 "),ER=a("a"),AYe=o("ConvNextConfig"),LYe=o(" (ConvNeXT model)"),yYe=l(),nm=a("li"),Bne=a("strong"),xYe=o("ctrl"),$Ye=o(" \u2014 "),CR=a("a"),kYe=o("CTRLConfig"),SYe=o(" (CTRL model)"),RYe=l(),sm=a("li"),Ine=a("strong"),PYe=o("cvt"),BYe=o(" \u2014 "),wR=a("a"),IYe=o("CvtConfig"),NYe=o(" (CvT model)"),qYe=l(),lm=a("li"),Nne=a("strong"),jYe=o("data2vec-audio"),DYe=o(" \u2014 "),AR=a("a"),GYe=o("Data2VecAudioConfig"),OYe=o(" (Data2VecAudio model)"),VYe=l(),im=a("li"),qne=a("strong"),XYe=o("data2vec-text"),zYe=o(" \u2014 "),LR=a("a"),WYe=o("Data2VecTextConfig"),QYe=o(" (Data2VecText model)"),HYe=l(),dm=a("li"),jne=a("strong"),UYe=o("data2vec-vision"),JYe=o(" \u2014 "),yR=a("a"),YYe=o("Data2VecVisionConfig"),KYe=o(" (Data2VecVision model)"),ZYe=l(),cm=a("li"),Dne=a("strong"),eKe=o("deberta"),oKe=o(" \u2014 "),xR=a("a"),rKe=o("DebertaConfig"),tKe=o(" (DeBERTa model)"),aKe=l(),fm=a("li"),Gne=a("strong"),nKe=o("deberta-v2"),sKe=o(" \u2014 "),$R=a("a"),lKe=o("DebertaV2Config"),iKe=o(" (DeBERTa-v2 model)"),dKe=l(),mm=a("li"),One=a("strong"),cKe=o("decision_transformer"),fKe=o(" \u2014 "),kR=a("a"),mKe=o("DecisionTransformerConfig"),gKe=o(" (Decision Transformer model)"),hKe=l(),gm=a("li"),Vne=a("strong"),pKe=o("deit"),_Ke=o(" \u2014 "),SR=a("a"),uKe=o("DeiTConfig"),bKe=o(" (DeiT model)"),vKe=l(),hm=a("li"),Xne=a("strong"),FKe=o("detr"),TKe=o(" \u2014 "),RR=a("a"),MKe=o("DetrConfig"),EKe=o(" (DETR model)"),CKe=l(),pm=a("li"),zne=a("strong"),wKe=o("distilbert"),AKe=o(" \u2014 "),PR=a("a"),LKe=o("DistilBertConfig"),yKe=o(" (DistilBERT model)"),xKe=l(),_m=a("li"),Wne=a("strong"),$Ke=o("dpr"),kKe=o(" \u2014 "),BR=a("a"),SKe=o("DPRConfig"),RKe=o(" (DPR model)"),PKe=l(),um=a("li"),Qne=a("strong"),BKe=o("dpt"),IKe=o(" \u2014 "),IR=a("a"),NKe=o("DPTConfig"),qKe=o(" (DPT model)"),jKe=l(),bm=a("li"),Hne=a("strong"),DKe=o("electra"),GKe=o(" \u2014 "),NR=a("a"),OKe=o("ElectraConfig"),VKe=o(" (ELECTRA model)"),XKe=l(),vm=a("li"),Une=a("strong"),zKe=o("encoder-decoder"),WKe=o(" \u2014 "),qR=a("a"),QKe=o("EncoderDecoderConfig"),HKe=o(" (Encoder decoder model)"),UKe=l(),Fm=a("li"),Jne=a("strong"),JKe=o("flaubert"),YKe=o(" \u2014 "),jR=a("a"),KKe=o("FlaubertConfig"),ZKe=o(" (FlauBERT model)"),eZe=l(),Tm=a("li"),Yne=a("strong"),oZe=o("flava"),rZe=o(" \u2014 "),DR=a("a"),tZe=o("FlavaConfig"),aZe=o(" (FLAVA model)"),nZe=l(),Mm=a("li"),Kne=a("strong"),sZe=o("fnet"),lZe=o(" \u2014 "),GR=a("a"),iZe=o("FNetConfig"),dZe=o(" (FNet model)"),cZe=l(),Em=a("li"),Zne=a("strong"),fZe=o("fsmt"),mZe=o(" \u2014 "),OR=a("a"),gZe=o("FSMTConfig"),hZe=o(" (FairSeq Machine-Translation model)"),pZe=l(),Cm=a("li"),ese=a("strong"),_Ze=o("funnel"),uZe=o(" \u2014 "),VR=a("a"),bZe=o("FunnelConfig"),vZe=o(" (Funnel Transformer model)"),FZe=l(),wm=a("li"),ose=a("strong"),TZe=o("glpn"),MZe=o(" \u2014 "),XR=a("a"),EZe=o("GLPNConfig"),CZe=o(" (GLPN model)"),wZe=l(),Am=a("li"),rse=a("strong"),AZe=o("gpt2"),LZe=o(" \u2014 "),zR=a("a"),yZe=o("GPT2Config"),xZe=o(" (OpenAI GPT-2 model)"),$Ze=l(),Lm=a("li"),tse=a("strong"),kZe=o("gpt_neo"),SZe=o(" \u2014 "),WR=a("a"),RZe=o("GPTNeoConfig"),PZe=o(" (GPT Neo model)"),BZe=l(),ym=a("li"),ase=a("strong"),IZe=o("gpt_neox"),NZe=o(" \u2014 "),QR=a("a"),qZe=o("GPTNeoXConfig"),jZe=o(" (GPT NeoX model)"),DZe=l(),xm=a("li"),nse=a("strong"),GZe=o("gptj"),OZe=o(" \u2014 "),HR=a("a"),VZe=o("GPTJConfig"),XZe=o(" (GPT-J model)"),zZe=l(),$m=a("li"),sse=a("strong"),WZe=o("groupvit"),QZe=o(" \u2014 "),UR=a("a"),HZe=o("GroupViTConfig"),UZe=o(" (GroupViT model)"),JZe=l(),km=a("li"),lse=a("strong"),YZe=o("hubert"),KZe=o(" \u2014 "),JR=a("a"),ZZe=o("HubertConfig"),eeo=o(" (Hubert model)"),oeo=l(),Sm=a("li"),ise=a("strong"),reo=o("ibert"),teo=o(" \u2014 "),YR=a("a"),aeo=o("IBertConfig"),neo=o(" (I-BERT model)"),seo=l(),Rm=a("li"),dse=a("strong"),leo=o("imagegpt"),ieo=o(" \u2014 "),KR=a("a"),deo=o("ImageGPTConfig"),ceo=o(" (ImageGPT model)"),feo=l(),Pm=a("li"),cse=a("strong"),meo=o("layoutlm"),geo=o(" \u2014 "),ZR=a("a"),heo=o("LayoutLMConfig"),peo=o(" (LayoutLM model)"),_eo=l(),Bm=a("li"),fse=a("strong"),ueo=o("layoutlmv2"),beo=o(" \u2014 "),eP=a("a"),veo=o("LayoutLMv2Config"),Feo=o(" (LayoutLMv2 model)"),Teo=l(),Im=a("li"),mse=a("strong"),Meo=o("layoutlmv3"),Eeo=o(" \u2014 "),oP=a("a"),Ceo=o("LayoutLMv3Config"),weo=o(" (LayoutLMv3 model)"),Aeo=l(),Nm=a("li"),gse=a("strong"),Leo=o("led"),yeo=o(" \u2014 "),rP=a("a"),xeo=o("LEDConfig"),$eo=o(" (LED model)"),keo=l(),qm=a("li"),hse=a("strong"),Seo=o("levit"),Reo=o(" \u2014 "),tP=a("a"),Peo=o("LevitConfig"),Beo=o(" (LeViT model)"),Ieo=l(),jm=a("li"),pse=a("strong"),Neo=o("longformer"),qeo=o(" \u2014 "),aP=a("a"),jeo=o("LongformerConfig"),Deo=o(" (Longformer model)"),Geo=l(),Dm=a("li"),_se=a("strong"),Oeo=o("longt5"),Veo=o(" \u2014 "),nP=a("a"),Xeo=o("LongT5Config"),zeo=o(" (LongT5 model)"),Weo=l(),Gm=a("li"),use=a("strong"),Qeo=o("luke"),Heo=o(" \u2014 "),sP=a("a"),Ueo=o("LukeConfig"),Jeo=o(" (LUKE model)"),Yeo=l(),Om=a("li"),bse=a("strong"),Keo=o("lxmert"),Zeo=o(" \u2014 "),lP=a("a"),eoo=o("LxmertConfig"),ooo=o(" (LXMERT model)"),roo=l(),Vm=a("li"),vse=a("strong"),too=o("m2m_100"),aoo=o(" \u2014 "),iP=a("a"),noo=o("M2M100Config"),soo=o(" (M2M100 model)"),loo=l(),Xm=a("li"),Fse=a("strong"),ioo=o("marian"),doo=o(" \u2014 "),dP=a("a"),coo=o("MarianConfig"),foo=o(" (Marian model)"),moo=l(),zm=a("li"),Tse=a("strong"),goo=o("maskformer"),hoo=o(" \u2014 "),cP=a("a"),poo=o("MaskFormerConfig"),_oo=o(" (MaskFormer model)"),uoo=l(),Wm=a("li"),Mse=a("strong"),boo=o("mbart"),voo=o(" \u2014 "),fP=a("a"),Foo=o("MBartConfig"),Too=o(" (mBART model)"),Moo=l(),Qm=a("li"),Ese=a("strong"),Eoo=o("mctct"),Coo=o(" \u2014 "),mP=a("a"),woo=o("MCTCTConfig"),Aoo=o(" (M-CTC-T model)"),Loo=l(),Hm=a("li"),Cse=a("strong"),yoo=o("megatron-bert"),xoo=o(" \u2014 "),gP=a("a"),$oo=o("MegatronBertConfig"),koo=o(" (Megatron-BERT model)"),Soo=l(),Um=a("li"),wse=a("strong"),Roo=o("mobilebert"),Poo=o(" \u2014 "),hP=a("a"),Boo=o("MobileBertConfig"),Ioo=o(" (MobileBERT model)"),Noo=l(),Jm=a("li"),Ase=a("strong"),qoo=o("mobilevit"),joo=o(" \u2014 "),pP=a("a"),Doo=o("MobileViTConfig"),Goo=o(" (MobileViT model)"),Ooo=l(),Ym=a("li"),Lse=a("strong"),Voo=o("mpnet"),Xoo=o(" \u2014 "),_P=a("a"),zoo=o("MPNetConfig"),Woo=o(" (MPNet model)"),Qoo=l(),Km=a("li"),yse=a("strong"),Hoo=o("mt5"),Uoo=o(" \u2014 "),uP=a("a"),Joo=o("MT5Config"),Yoo=o(" (MT5 model)"),Koo=l(),Zm=a("li"),xse=a("strong"),Zoo=o("mvp"),ero=o(" \u2014 "),bP=a("a"),oro=o("MvpConfig"),rro=o(" (MVP model)"),tro=l(),eg=a("li"),$se=a("strong"),aro=o("nezha"),nro=o(" \u2014 "),vP=a("a"),sro=o("NezhaConfig"),lro=o(" (Nezha model)"),iro=l(),og=a("li"),kse=a("strong"),dro=o("nystromformer"),cro=o(" \u2014 "),FP=a("a"),fro=o("NystromformerConfig"),mro=o(" (Nystr\xF6mformer model)"),gro=l(),rg=a("li"),Sse=a("strong"),hro=o("openai-gpt"),pro=o(" \u2014 "),TP=a("a"),_ro=o("OpenAIGPTConfig"),uro=o(" (OpenAI GPT model)"),bro=l(),tg=a("li"),Rse=a("strong"),vro=o("opt"),Fro=o(" \u2014 "),MP=a("a"),Tro=o("OPTConfig"),Mro=o(" (OPT model)"),Ero=l(),ag=a("li"),Pse=a("strong"),Cro=o("owlvit"),wro=o(" \u2014 "),EP=a("a"),Aro=o("OwlViTConfig"),Lro=o(" (OWL-ViT model)"),yro=l(),ng=a("li"),Bse=a("strong"),xro=o("pegasus"),$ro=o(" \u2014 "),CP=a("a"),kro=o("PegasusConfig"),Sro=o(" (Pegasus model)"),Rro=l(),sg=a("li"),Ise=a("strong"),Pro=o("perceiver"),Bro=o(" \u2014 "),wP=a("a"),Iro=o("PerceiverConfig"),Nro=o(" (Perceiver model)"),qro=l(),lg=a("li"),Nse=a("strong"),jro=o("plbart"),Dro=o(" \u2014 "),AP=a("a"),Gro=o("PLBartConfig"),Oro=o(" (PLBart model)"),Vro=l(),ig=a("li"),qse=a("strong"),Xro=o("poolformer"),zro=o(" \u2014 "),LP=a("a"),Wro=o("PoolFormerConfig"),Qro=o(" (PoolFormer model)"),Hro=l(),dg=a("li"),jse=a("strong"),Uro=o("prophetnet"),Jro=o(" \u2014 "),yP=a("a"),Yro=o("ProphetNetConfig"),Kro=o(" (ProphetNet model)"),Zro=l(),cg=a("li"),Dse=a("strong"),eto=o("qdqbert"),oto=o(" \u2014 "),xP=a("a"),rto=o("QDQBertConfig"),tto=o(" (QDQBert model)"),ato=l(),fg=a("li"),Gse=a("strong"),nto=o("rag"),sto=o(" \u2014 "),$P=a("a"),lto=o("RagConfig"),ito=o(" (RAG model)"),dto=l(),mg=a("li"),Ose=a("strong"),cto=o("realm"),fto=o(" \u2014 "),kP=a("a"),mto=o("RealmConfig"),gto=o(" (REALM model)"),hto=l(),gg=a("li"),Vse=a("strong"),pto=o("reformer"),_to=o(" \u2014 "),SP=a("a"),uto=o("ReformerConfig"),bto=o(" (Reformer model)"),vto=l(),hg=a("li"),Xse=a("strong"),Fto=o("regnet"),Tto=o(" \u2014 "),RP=a("a"),Mto=o("RegNetConfig"),Eto=o(" (RegNet model)"),Cto=l(),pg=a("li"),zse=a("strong"),wto=o("rembert"),Ato=o(" \u2014 "),PP=a("a"),Lto=o("RemBertConfig"),yto=o(" (RemBERT model)"),xto=l(),_g=a("li"),Wse=a("strong"),$to=o("resnet"),kto=o(" \u2014 "),BP=a("a"),Sto=o("ResNetConfig"),Rto=o(" (ResNet model)"),Pto=l(),ug=a("li"),Qse=a("strong"),Bto=o("retribert"),Ito=o(" \u2014 "),IP=a("a"),Nto=o("RetriBertConfig"),qto=o(" (RetriBERT model)"),jto=l(),bg=a("li"),Hse=a("strong"),Dto=o("roberta"),Gto=o(" \u2014 "),NP=a("a"),Oto=o("RobertaConfig"),Vto=o(" (RoBERTa model)"),Xto=l(),vg=a("li"),Use=a("strong"),zto=o("roformer"),Wto=o(" \u2014 "),qP=a("a"),Qto=o("RoFormerConfig"),Hto=o(" (RoFormer model)"),Uto=l(),Fg=a("li"),Jse=a("strong"),Jto=o("segformer"),Yto=o(" \u2014 "),jP=a("a"),Kto=o("SegformerConfig"),Zto=o(" (SegFormer model)"),eao=l(),Tg=a("li"),Yse=a("strong"),oao=o("sew"),rao=o(" \u2014 "),DP=a("a"),tao=o("SEWConfig"),aao=o(" (SEW model)"),nao=l(),Mg=a("li"),Kse=a("strong"),sao=o("sew-d"),lao=o(" \u2014 "),GP=a("a"),iao=o("SEWDConfig"),dao=o(" (SEW-D model)"),cao=l(),Eg=a("li"),Zse=a("strong"),fao=o("speech-encoder-decoder"),mao=o(" \u2014 "),OP=a("a"),gao=o("SpeechEncoderDecoderConfig"),hao=o(" (Speech Encoder decoder model)"),pao=l(),Cg=a("li"),ele=a("strong"),_ao=o("speech_to_text"),uao=o(" \u2014 "),VP=a("a"),bao=o("Speech2TextConfig"),vao=o(" (Speech2Text model)"),Fao=l(),wg=a("li"),ole=a("strong"),Tao=o("speech_to_text_2"),Mao=o(" \u2014 "),XP=a("a"),Eao=o("Speech2Text2Config"),Cao=o(" (Speech2Text2 model)"),wao=l(),Ag=a("li"),rle=a("strong"),Aao=o("splinter"),Lao=o(" \u2014 "),zP=a("a"),yao=o("SplinterConfig"),xao=o(" (Splinter model)"),$ao=l(),Lg=a("li"),tle=a("strong"),kao=o("squeezebert"),Sao=o(" \u2014 "),WP=a("a"),Rao=o("SqueezeBertConfig"),Pao=o(" (SqueezeBERT model)"),Bao=l(),yg=a("li"),ale=a("strong"),Iao=o("swin"),Nao=o(" \u2014 "),QP=a("a"),qao=o("SwinConfig"),jao=o(" (Swin Transformer model)"),Dao=l(),xg=a("li"),nle=a("strong"),Gao=o("swinv2"),Oao=o(" \u2014 "),HP=a("a"),Vao=o("Swinv2Config"),Xao=o(" (Swin Transformer V2 model)"),zao=l(),$g=a("li"),sle=a("strong"),Wao=o("t5"),Qao=o(" \u2014 "),UP=a("a"),Hao=o("T5Config"),Uao=o(" (T5 model)"),Jao=l(),kg=a("li"),lle=a("strong"),Yao=o("tapas"),Kao=o(" \u2014 "),JP=a("a"),Zao=o("TapasConfig"),eno=o(" (TAPAS model)"),ono=l(),Sg=a("li"),ile=a("strong"),rno=o("trajectory_transformer"),tno=o(" \u2014 "),YP=a("a"),ano=o("TrajectoryTransformerConfig"),nno=o(" (Trajectory Transformer model)"),sno=l(),Rg=a("li"),dle=a("strong"),lno=o("transfo-xl"),ino=o(" \u2014 "),KP=a("a"),dno=o("TransfoXLConfig"),cno=o(" (Transformer-XL model)"),fno=l(),Pg=a("li"),cle=a("strong"),mno=o("trocr"),gno=o(" \u2014 "),ZP=a("a"),hno=o("TrOCRConfig"),pno=o(" (TrOCR model)"),_no=l(),Bg=a("li"),fle=a("strong"),uno=o("unispeech"),bno=o(" \u2014 "),eB=a("a"),vno=o("UniSpeechConfig"),Fno=o(" (UniSpeech model)"),Tno=l(),Ig=a("li"),mle=a("strong"),Mno=o("unispeech-sat"),Eno=o(" \u2014 "),oB=a("a"),Cno=o("UniSpeechSatConfig"),wno=o(" (UniSpeechSat model)"),Ano=l(),Ng=a("li"),gle=a("strong"),Lno=o("van"),yno=o(" \u2014 "),rB=a("a"),xno=o("VanConfig"),$no=o(" (VAN model)"),kno=l(),qg=a("li"),hle=a("strong"),Sno=o("vilt"),Rno=o(" \u2014 "),tB=a("a"),Pno=o("ViltConfig"),Bno=o(" (ViLT model)"),Ino=l(),jg=a("li"),ple=a("strong"),Nno=o("vision-encoder-decoder"),qno=o(" \u2014 "),aB=a("a"),jno=o("VisionEncoderDecoderConfig"),Dno=o(" (Vision Encoder decoder model)"),Gno=l(),Dg=a("li"),_le=a("strong"),Ono=o("vision-text-dual-encoder"),Vno=o(" \u2014 "),nB=a("a"),Xno=o("VisionTextDualEncoderConfig"),zno=o(" (VisionTextDualEncoder model)"),Wno=l(),Gg=a("li"),ule=a("strong"),Qno=o("visual_bert"),Hno=o(" \u2014 "),sB=a("a"),Uno=o("VisualBertConfig"),Jno=o(" (VisualBERT model)"),Yno=l(),Og=a("li"),ble=a("strong"),Kno=o("vit"),Zno=o(" \u2014 "),lB=a("a"),eso=o("ViTConfig"),oso=o(" (ViT model)"),rso=l(),Vg=a("li"),vle=a("strong"),tso=o("vit_mae"),aso=o(" \u2014 "),iB=a("a"),nso=o("ViTMAEConfig"),sso=o(" (ViTMAE model)"),lso=l(),Xg=a("li"),Fle=a("strong"),iso=o("wav2vec2"),dso=o(" \u2014 "),dB=a("a"),cso=o("Wav2Vec2Config"),fso=o(" (Wav2Vec2 model)"),mso=l(),zg=a("li"),Tle=a("strong"),gso=o("wav2vec2-conformer"),hso=o(" \u2014 "),cB=a("a"),pso=o("Wav2Vec2ConformerConfig"),_so=o(" (Wav2Vec2-Conformer model)"),uso=l(),Wg=a("li"),Mle=a("strong"),bso=o("wavlm"),vso=o(" \u2014 "),fB=a("a"),Fso=o("WavLMConfig"),Tso=o(" (WavLM model)"),Mso=l(),Qg=a("li"),Ele=a("strong"),Eso=o("xglm"),Cso=o(" \u2014 "),mB=a("a"),wso=o("XGLMConfig"),Aso=o(" (XGLM model)"),Lso=l(),Hg=a("li"),Cle=a("strong"),yso=o("xlm"),xso=o(" \u2014 "),gB=a("a"),$so=o("XLMConfig"),kso=o(" (XLM model)"),Sso=l(),Ug=a("li"),wle=a("strong"),Rso=o("xlm-prophetnet"),Pso=o(" \u2014 "),hB=a("a"),Bso=o("XLMProphetNetConfig"),Iso=o(" (XLM-ProphetNet model)"),Nso=l(),Jg=a("li"),Ale=a("strong"),qso=o("xlm-roberta"),jso=o(" \u2014 "),pB=a("a"),Dso=o("XLMRobertaConfig"),Gso=o(" (XLM-RoBERTa model)"),Oso=l(),Yg=a("li"),Lle=a("strong"),Vso=o("xlm-roberta-xl"),Xso=o(" \u2014 "),_B=a("a"),zso=o("XLMRobertaXLConfig"),Wso=o(" (XLM-RoBERTa-XL model)"),Qso=l(),Kg=a("li"),yle=a("strong"),Hso=o("xlnet"),Uso=o(" \u2014 "),uB=a("a"),Jso=o("XLNetConfig"),Yso=o(" (XLNet model)"),Kso=l(),Zg=a("li"),xle=a("strong"),Zso=o("yolos"),elo=o(" \u2014 "),bB=a("a"),olo=o("YolosConfig"),rlo=o(" (YOLOS model)"),tlo=l(),eh=a("li"),$le=a("strong"),alo=o("yoso"),nlo=o(" \u2014 "),vB=a("a"),slo=o("YosoConfig"),llo=o(" (YOSO model)"),ilo=l(),F(oh.$$.fragment),dlo=l(),rh=a("div"),F(xL.$$.fragment),clo=l(),kle=a("p"),flo=o("Register a new configuration for this class."),Fze=l(),Di=a("h2"),th=a("a"),Sle=a("span"),F($L.$$.fragment),mlo=l(),Rle=a("span"),glo=o("AutoTokenizer"),Tze=l(),yo=a("div"),F(kL.$$.fragment),hlo=l(),SL=a("p"),plo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),FB=a("a"),_lo=o("AutoTokenizer.from_pretrained()"),ulo=o(" class method."),blo=l(),RL=a("p"),vlo=o("This class cannot be instantiated directly using "),Ple=a("code"),Flo=o("__init__()"),Tlo=o(" (throws an error)."),Mlo=l(),xr=a("div"),F(PL.$$.fragment),Elo=l(),Ble=a("p"),Clo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),wlo=l(),Pa=a("p"),Alo=o("The tokenizer class to instantiate is selected based on the "),Ile=a("code"),Llo=o("model_type"),ylo=o(` property of the config object (either
passed as an argument or loaded from `),Nle=a("code"),xlo=o("pretrained_model_name_or_path"),$lo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qle=a("code"),klo=o("pretrained_model_name_or_path"),Slo=o(":"),Rlo=l(),k=a("ul"),Dn=a("li"),jle=a("strong"),Plo=o("albert"),Blo=o(" \u2014 "),TB=a("a"),Ilo=o("AlbertTokenizer"),Nlo=o(" or "),MB=a("a"),qlo=o("AlbertTokenizerFast"),jlo=o(" (ALBERT model)"),Dlo=l(),Gn=a("li"),Dle=a("strong"),Glo=o("bart"),Olo=o(" \u2014 "),EB=a("a"),Vlo=o("BartTokenizer"),Xlo=o(" or "),CB=a("a"),zlo=o("BartTokenizerFast"),Wlo=o(" (BART model)"),Qlo=l(),On=a("li"),Gle=a("strong"),Hlo=o("barthez"),Ulo=o(" \u2014 "),wB=a("a"),Jlo=o("BarthezTokenizer"),Ylo=o(" or "),AB=a("a"),Klo=o("BarthezTokenizerFast"),Zlo=o(" (BARThez model)"),eio=l(),ah=a("li"),Ole=a("strong"),oio=o("bartpho"),rio=o(" \u2014 "),LB=a("a"),tio=o("BartphoTokenizer"),aio=o(" (BARTpho model)"),nio=l(),Vn=a("li"),Vle=a("strong"),sio=o("bert"),lio=o(" \u2014 "),yB=a("a"),iio=o("BertTokenizer"),dio=o(" or "),xB=a("a"),cio=o("BertTokenizerFast"),fio=o(" (BERT model)"),mio=l(),nh=a("li"),Xle=a("strong"),gio=o("bert-generation"),hio=o(" \u2014 "),$B=a("a"),pio=o("BertGenerationTokenizer"),_io=o(" (Bert Generation model)"),uio=l(),sh=a("li"),zle=a("strong"),bio=o("bert-japanese"),vio=o(" \u2014 "),kB=a("a"),Fio=o("BertJapaneseTokenizer"),Tio=o(" (BertJapanese model)"),Mio=l(),lh=a("li"),Wle=a("strong"),Eio=o("bertweet"),Cio=o(" \u2014 "),SB=a("a"),wio=o("BertweetTokenizer"),Aio=o(" (BERTweet model)"),Lio=l(),Xn=a("li"),Qle=a("strong"),yio=o("big_bird"),xio=o(" \u2014 "),RB=a("a"),$io=o("BigBirdTokenizer"),kio=o(" or "),PB=a("a"),Sio=o("BigBirdTokenizerFast"),Rio=o(" (BigBird model)"),Pio=l(),zn=a("li"),Hle=a("strong"),Bio=o("bigbird_pegasus"),Iio=o(" \u2014 "),BB=a("a"),Nio=o("PegasusTokenizer"),qio=o(" or "),IB=a("a"),jio=o("PegasusTokenizerFast"),Dio=o(" (BigBird-Pegasus model)"),Gio=l(),Wn=a("li"),Ule=a("strong"),Oio=o("blenderbot"),Vio=o(" \u2014 "),NB=a("a"),Xio=o("BlenderbotTokenizer"),zio=o(" or "),qB=a("a"),Wio=o("BlenderbotTokenizerFast"),Qio=o(" (Blenderbot model)"),Hio=l(),ih=a("li"),Jle=a("strong"),Uio=o("blenderbot-small"),Jio=o(" \u2014 "),jB=a("a"),Yio=o("BlenderbotSmallTokenizer"),Kio=o(" (BlenderbotSmall model)"),Zio=l(),dh=a("li"),Yle=a("strong"),edo=o("bloom"),odo=o(" \u2014 "),DB=a("a"),rdo=o("BloomTokenizerFast"),tdo=o(" (BLOOM model)"),ado=l(),ch=a("li"),Kle=a("strong"),ndo=o("byt5"),sdo=o(" \u2014 "),GB=a("a"),ldo=o("ByT5Tokenizer"),ido=o(" (ByT5 model)"),ddo=l(),Qn=a("li"),Zle=a("strong"),cdo=o("camembert"),fdo=o(" \u2014 "),OB=a("a"),mdo=o("CamembertTokenizer"),gdo=o(" or "),VB=a("a"),hdo=o("CamembertTokenizerFast"),pdo=o(" (CamemBERT model)"),_do=l(),fh=a("li"),eie=a("strong"),udo=o("canine"),bdo=o(" \u2014 "),XB=a("a"),vdo=o("CanineTokenizer"),Fdo=o(" (CANINE model)"),Tdo=l(),Hn=a("li"),oie=a("strong"),Mdo=o("clip"),Edo=o(" \u2014 "),zB=a("a"),Cdo=o("CLIPTokenizer"),wdo=o(" or "),WB=a("a"),Ado=o("CLIPTokenizerFast"),Ldo=o(" (CLIP model)"),ydo=l(),Un=a("li"),rie=a("strong"),xdo=o("codegen"),$do=o(" \u2014 "),QB=a("a"),kdo=o("CodeGenTokenizer"),Sdo=o(" or "),HB=a("a"),Rdo=o("CodeGenTokenizerFast"),Pdo=o(" (CodeGen model)"),Bdo=l(),Jn=a("li"),tie=a("strong"),Ido=o("convbert"),Ndo=o(" \u2014 "),UB=a("a"),qdo=o("ConvBertTokenizer"),jdo=o(" or "),JB=a("a"),Ddo=o("ConvBertTokenizerFast"),Gdo=o(" (ConvBERT model)"),Odo=l(),Yn=a("li"),aie=a("strong"),Vdo=o("cpm"),Xdo=o(" \u2014 "),YB=a("a"),zdo=o("CpmTokenizer"),Wdo=o(" or "),KB=a("a"),Qdo=o("CpmTokenizerFast"),Hdo=o(" (CPM model)"),Udo=l(),mh=a("li"),nie=a("strong"),Jdo=o("ctrl"),Ydo=o(" \u2014 "),ZB=a("a"),Kdo=o("CTRLTokenizer"),Zdo=o(" (CTRL model)"),eco=l(),Kn=a("li"),sie=a("strong"),oco=o("data2vec-text"),rco=o(" \u2014 "),eI=a("a"),tco=o("RobertaTokenizer"),aco=o(" or "),oI=a("a"),nco=o("RobertaTokenizerFast"),sco=o(" (Data2VecText model)"),lco=l(),Zn=a("li"),lie=a("strong"),ico=o("deberta"),dco=o(" \u2014 "),rI=a("a"),cco=o("DebertaTokenizer"),fco=o(" or "),tI=a("a"),mco=o("DebertaTokenizerFast"),gco=o(" (DeBERTa model)"),hco=l(),es=a("li"),iie=a("strong"),pco=o("deberta-v2"),_co=o(" \u2014 "),aI=a("a"),uco=o("DebertaV2Tokenizer"),bco=o(" or "),nI=a("a"),vco=o("DebertaV2TokenizerFast"),Fco=o(" (DeBERTa-v2 model)"),Tco=l(),os=a("li"),die=a("strong"),Mco=o("distilbert"),Eco=o(" \u2014 "),sI=a("a"),Cco=o("DistilBertTokenizer"),wco=o(" or "),lI=a("a"),Aco=o("DistilBertTokenizerFast"),Lco=o(" (DistilBERT model)"),yco=l(),rs=a("li"),cie=a("strong"),xco=o("dpr"),$co=o(" \u2014 "),iI=a("a"),kco=o("DPRQuestionEncoderTokenizer"),Sco=o(" or "),dI=a("a"),Rco=o("DPRQuestionEncoderTokenizerFast"),Pco=o(" (DPR model)"),Bco=l(),ts=a("li"),fie=a("strong"),Ico=o("electra"),Nco=o(" \u2014 "),cI=a("a"),qco=o("ElectraTokenizer"),jco=o(" or "),fI=a("a"),Dco=o("ElectraTokenizerFast"),Gco=o(" (ELECTRA model)"),Oco=l(),gh=a("li"),mie=a("strong"),Vco=o("flaubert"),Xco=o(" \u2014 "),mI=a("a"),zco=o("FlaubertTokenizer"),Wco=o(" (FlauBERT model)"),Qco=l(),as=a("li"),gie=a("strong"),Hco=o("fnet"),Uco=o(" \u2014 "),gI=a("a"),Jco=o("FNetTokenizer"),Yco=o(" or "),hI=a("a"),Kco=o("FNetTokenizerFast"),Zco=o(" (FNet model)"),efo=l(),hh=a("li"),hie=a("strong"),ofo=o("fsmt"),rfo=o(" \u2014 "),pI=a("a"),tfo=o("FSMTTokenizer"),afo=o(" (FairSeq Machine-Translation model)"),nfo=l(),ns=a("li"),pie=a("strong"),sfo=o("funnel"),lfo=o(" \u2014 "),_I=a("a"),ifo=o("FunnelTokenizer"),dfo=o(" or "),uI=a("a"),cfo=o("FunnelTokenizerFast"),ffo=o(" (Funnel Transformer model)"),mfo=l(),ss=a("li"),_ie=a("strong"),gfo=o("gpt2"),hfo=o(" \u2014 "),bI=a("a"),pfo=o("GPT2Tokenizer"),_fo=o(" or "),vI=a("a"),ufo=o("GPT2TokenizerFast"),bfo=o(" (OpenAI GPT-2 model)"),vfo=l(),ls=a("li"),uie=a("strong"),Ffo=o("gpt_neo"),Tfo=o(" \u2014 "),FI=a("a"),Mfo=o("GPT2Tokenizer"),Efo=o(" or "),TI=a("a"),Cfo=o("GPT2TokenizerFast"),wfo=o(" (GPT Neo model)"),Afo=l(),ph=a("li"),bie=a("strong"),Lfo=o("gpt_neox"),yfo=o(" \u2014 "),MI=a("a"),xfo=o("GPTNeoXTokenizerFast"),$fo=o(" (GPT NeoX model)"),kfo=l(),is=a("li"),vie=a("strong"),Sfo=o("gptj"),Rfo=o(" \u2014 "),EI=a("a"),Pfo=o("GPT2Tokenizer"),Bfo=o(" or "),CI=a("a"),Ifo=o("GPT2TokenizerFast"),Nfo=o(" (GPT-J model)"),qfo=l(),ds=a("li"),Fie=a("strong"),jfo=o("groupvit"),Dfo=o(" \u2014 "),wI=a("a"),Gfo=o("CLIPTokenizer"),Ofo=o(" or "),AI=a("a"),Vfo=o("CLIPTokenizerFast"),Xfo=o(" (GroupViT model)"),zfo=l(),cs=a("li"),Tie=a("strong"),Wfo=o("herbert"),Qfo=o(" \u2014 "),LI=a("a"),Hfo=o("HerbertTokenizer"),Ufo=o(" or "),yI=a("a"),Jfo=o("HerbertTokenizerFast"),Yfo=o(" (HerBERT model)"),Kfo=l(),_h=a("li"),Mie=a("strong"),Zfo=o("hubert"),emo=o(" \u2014 "),xI=a("a"),omo=o("Wav2Vec2CTCTokenizer"),rmo=o(" (Hubert model)"),tmo=l(),fs=a("li"),Eie=a("strong"),amo=o("ibert"),nmo=o(" \u2014 "),$I=a("a"),smo=o("RobertaTokenizer"),lmo=o(" or "),kI=a("a"),imo=o("RobertaTokenizerFast"),dmo=o(" (I-BERT model)"),cmo=l(),ms=a("li"),Cie=a("strong"),fmo=o("layoutlm"),mmo=o(" \u2014 "),SI=a("a"),gmo=o("LayoutLMTokenizer"),hmo=o(" or "),RI=a("a"),pmo=o("LayoutLMTokenizerFast"),_mo=o(" (LayoutLM model)"),umo=l(),gs=a("li"),wie=a("strong"),bmo=o("layoutlmv2"),vmo=o(" \u2014 "),PI=a("a"),Fmo=o("LayoutLMv2Tokenizer"),Tmo=o(" or "),BI=a("a"),Mmo=o("LayoutLMv2TokenizerFast"),Emo=o(" (LayoutLMv2 model)"),Cmo=l(),hs=a("li"),Aie=a("strong"),wmo=o("layoutlmv3"),Amo=o(" \u2014 "),II=a("a"),Lmo=o("LayoutLMv3Tokenizer"),ymo=o(" or "),NI=a("a"),xmo=o("LayoutLMv3TokenizerFast"),$mo=o(" (LayoutLMv3 model)"),kmo=l(),ps=a("li"),Lie=a("strong"),Smo=o("layoutxlm"),Rmo=o(" \u2014 "),qI=a("a"),Pmo=o("LayoutXLMTokenizer"),Bmo=o(" or "),jI=a("a"),Imo=o("LayoutXLMTokenizerFast"),Nmo=o(" (LayoutXLM model)"),qmo=l(),_s=a("li"),yie=a("strong"),jmo=o("led"),Dmo=o(" \u2014 "),DI=a("a"),Gmo=o("LEDTokenizer"),Omo=o(" or "),GI=a("a"),Vmo=o("LEDTokenizerFast"),Xmo=o(" (LED model)"),zmo=l(),us=a("li"),xie=a("strong"),Wmo=o("longformer"),Qmo=o(" \u2014 "),OI=a("a"),Hmo=o("LongformerTokenizer"),Umo=o(" or "),VI=a("a"),Jmo=o("LongformerTokenizerFast"),Ymo=o(" (Longformer model)"),Kmo=l(),bs=a("li"),$ie=a("strong"),Zmo=o("longt5"),ego=o(" \u2014 "),XI=a("a"),ogo=o("T5Tokenizer"),rgo=o(" or "),zI=a("a"),tgo=o("T5TokenizerFast"),ago=o(" (LongT5 model)"),ngo=l(),uh=a("li"),kie=a("strong"),sgo=o("luke"),lgo=o(" \u2014 "),WI=a("a"),igo=o("LukeTokenizer"),dgo=o(" (LUKE model)"),cgo=l(),vs=a("li"),Sie=a("strong"),fgo=o("lxmert"),mgo=o(" \u2014 "),QI=a("a"),ggo=o("LxmertTokenizer"),hgo=o(" or "),HI=a("a"),pgo=o("LxmertTokenizerFast"),_go=o(" (LXMERT model)"),ugo=l(),bh=a("li"),Rie=a("strong"),bgo=o("m2m_100"),vgo=o(" \u2014 "),UI=a("a"),Fgo=o("M2M100Tokenizer"),Tgo=o(" (M2M100 model)"),Mgo=l(),vh=a("li"),Pie=a("strong"),Ego=o("marian"),Cgo=o(" \u2014 "),JI=a("a"),wgo=o("MarianTokenizer"),Ago=o(" (Marian model)"),Lgo=l(),Fs=a("li"),Bie=a("strong"),ygo=o("mbart"),xgo=o(" \u2014 "),YI=a("a"),$go=o("MBartTokenizer"),kgo=o(" or "),KI=a("a"),Sgo=o("MBartTokenizerFast"),Rgo=o(" (mBART model)"),Pgo=l(),Ts=a("li"),Iie=a("strong"),Bgo=o("mbart50"),Igo=o(" \u2014 "),ZI=a("a"),Ngo=o("MBart50Tokenizer"),qgo=o(" or "),eN=a("a"),jgo=o("MBart50TokenizerFast"),Dgo=o(" (mBART-50 model)"),Ggo=l(),Ms=a("li"),Nie=a("strong"),Ogo=o("megatron-bert"),Vgo=o(" \u2014 "),oN=a("a"),Xgo=o("BertTokenizer"),zgo=o(" or "),rN=a("a"),Wgo=o("BertTokenizerFast"),Qgo=o(" (Megatron-BERT model)"),Hgo=l(),Fh=a("li"),qie=a("strong"),Ugo=o("mluke"),Jgo=o(" \u2014 "),tN=a("a"),Ygo=o("MLukeTokenizer"),Kgo=o(" (mLUKE model)"),Zgo=l(),Es=a("li"),jie=a("strong"),eho=o("mobilebert"),oho=o(" \u2014 "),aN=a("a"),rho=o("MobileBertTokenizer"),tho=o(" or "),nN=a("a"),aho=o("MobileBertTokenizerFast"),nho=o(" (MobileBERT model)"),sho=l(),Cs=a("li"),Die=a("strong"),lho=o("mpnet"),iho=o(" \u2014 "),sN=a("a"),dho=o("MPNetTokenizer"),cho=o(" or "),lN=a("a"),fho=o("MPNetTokenizerFast"),mho=o(" (MPNet model)"),gho=l(),ws=a("li"),Gie=a("strong"),hho=o("mt5"),pho=o(" \u2014 "),iN=a("a"),_ho=o("MT5Tokenizer"),uho=o(" or "),dN=a("a"),bho=o("MT5TokenizerFast"),vho=o(" (MT5 model)"),Fho=l(),As=a("li"),Oie=a("strong"),Tho=o("mvp"),Mho=o(" \u2014 "),cN=a("a"),Eho=o("MvpTokenizer"),Cho=o(" or "),fN=a("a"),who=o("MvpTokenizerFast"),Aho=o(" (MVP model)"),Lho=l(),Ls=a("li"),Vie=a("strong"),yho=o("nezha"),xho=o(" \u2014 "),mN=a("a"),$ho=o("BertTokenizer"),kho=o(" or "),gN=a("a"),Sho=o("BertTokenizerFast"),Rho=o(" (Nezha model)"),Pho=l(),ys=a("li"),Xie=a("strong"),Bho=o("nllb"),Iho=o(" \u2014 "),hN=a("a"),Nho=o("NllbTokenizer"),qho=o(" or "),pN=a("a"),jho=o("NllbTokenizerFast"),Dho=o(" (NLLB model)"),Gho=l(),xs=a("li"),zie=a("strong"),Oho=o("nystromformer"),Vho=o(" \u2014 "),_N=a("a"),Xho=o("AlbertTokenizer"),zho=o(" or "),uN=a("a"),Who=o("AlbertTokenizerFast"),Qho=o(" (Nystr\xF6mformer model)"),Hho=l(),$s=a("li"),Wie=a("strong"),Uho=o("openai-gpt"),Jho=o(" \u2014 "),bN=a("a"),Yho=o("OpenAIGPTTokenizer"),Kho=o(" or "),vN=a("a"),Zho=o("OpenAIGPTTokenizerFast"),epo=o(" (OpenAI GPT model)"),opo=l(),Th=a("li"),Qie=a("strong"),rpo=o("opt"),tpo=o(" \u2014 "),FN=a("a"),apo=o("GPT2Tokenizer"),npo=o(" (OPT model)"),spo=l(),ks=a("li"),Hie=a("strong"),lpo=o("owlvit"),ipo=o(" \u2014 "),TN=a("a"),dpo=o("CLIPTokenizer"),cpo=o(" or "),MN=a("a"),fpo=o("CLIPTokenizerFast"),mpo=o(" (OWL-ViT model)"),gpo=l(),Ss=a("li"),Uie=a("strong"),hpo=o("pegasus"),ppo=o(" \u2014 "),EN=a("a"),_po=o("PegasusTokenizer"),upo=o(" or "),CN=a("a"),bpo=o("PegasusTokenizerFast"),vpo=o(" (Pegasus model)"),Fpo=l(),Mh=a("li"),Jie=a("strong"),Tpo=o("perceiver"),Mpo=o(" \u2014 "),wN=a("a"),Epo=o("PerceiverTokenizer"),Cpo=o(" (Perceiver model)"),wpo=l(),Eh=a("li"),Yie=a("strong"),Apo=o("phobert"),Lpo=o(" \u2014 "),AN=a("a"),ypo=o("PhobertTokenizer"),xpo=o(" (PhoBERT model)"),$po=l(),Ch=a("li"),Kie=a("strong"),kpo=o("plbart"),Spo=o(" \u2014 "),LN=a("a"),Rpo=o("PLBartTokenizer"),Ppo=o(" (PLBart model)"),Bpo=l(),wh=a("li"),Zie=a("strong"),Ipo=o("prophetnet"),Npo=o(" \u2014 "),yN=a("a"),qpo=o("ProphetNetTokenizer"),jpo=o(" (ProphetNet model)"),Dpo=l(),Rs=a("li"),ede=a("strong"),Gpo=o("qdqbert"),Opo=o(" \u2014 "),xN=a("a"),Vpo=o("BertTokenizer"),Xpo=o(" or "),$N=a("a"),zpo=o("BertTokenizerFast"),Wpo=o(" (QDQBert model)"),Qpo=l(),Ah=a("li"),ode=a("strong"),Hpo=o("rag"),Upo=o(" \u2014 "),kN=a("a"),Jpo=o("RagTokenizer"),Ypo=o(" (RAG model)"),Kpo=l(),Ps=a("li"),rde=a("strong"),Zpo=o("realm"),e_o=o(" \u2014 "),SN=a("a"),o_o=o("RealmTokenizer"),r_o=o(" or "),RN=a("a"),t_o=o("RealmTokenizerFast"),a_o=o(" (REALM model)"),n_o=l(),Bs=a("li"),tde=a("strong"),s_o=o("reformer"),l_o=o(" \u2014 "),PN=a("a"),i_o=o("ReformerTokenizer"),d_o=o(" or "),BN=a("a"),c_o=o("ReformerTokenizerFast"),f_o=o(" (Reformer model)"),m_o=l(),Is=a("li"),ade=a("strong"),g_o=o("rembert"),h_o=o(" \u2014 "),IN=a("a"),p_o=o("RemBertTokenizer"),__o=o(" or "),NN=a("a"),u_o=o("RemBertTokenizerFast"),b_o=o(" (RemBERT model)"),v_o=l(),Ns=a("li"),nde=a("strong"),F_o=o("retribert"),T_o=o(" \u2014 "),qN=a("a"),M_o=o("RetriBertTokenizer"),E_o=o(" or "),jN=a("a"),C_o=o("RetriBertTokenizerFast"),w_o=o(" (RetriBERT model)"),A_o=l(),qs=a("li"),sde=a("strong"),L_o=o("roberta"),y_o=o(" \u2014 "),DN=a("a"),x_o=o("RobertaTokenizer"),$_o=o(" or "),GN=a("a"),k_o=o("RobertaTokenizerFast"),S_o=o(" (RoBERTa model)"),R_o=l(),js=a("li"),lde=a("strong"),P_o=o("roformer"),B_o=o(" \u2014 "),ON=a("a"),I_o=o("RoFormerTokenizer"),N_o=o(" or "),VN=a("a"),q_o=o("RoFormerTokenizerFast"),j_o=o(" (RoFormer model)"),D_o=l(),Lh=a("li"),ide=a("strong"),G_o=o("speech_to_text"),O_o=o(" \u2014 "),XN=a("a"),V_o=o("Speech2TextTokenizer"),X_o=o(" (Speech2Text model)"),z_o=l(),yh=a("li"),dde=a("strong"),W_o=o("speech_to_text_2"),Q_o=o(" \u2014 "),zN=a("a"),H_o=o("Speech2Text2Tokenizer"),U_o=o(" (Speech2Text2 model)"),J_o=l(),Ds=a("li"),cde=a("strong"),Y_o=o("splinter"),K_o=o(" \u2014 "),WN=a("a"),Z_o=o("SplinterTokenizer"),euo=o(" or "),QN=a("a"),ouo=o("SplinterTokenizerFast"),ruo=o(" (Splinter model)"),tuo=l(),Gs=a("li"),fde=a("strong"),auo=o("squeezebert"),nuo=o(" \u2014 "),HN=a("a"),suo=o("SqueezeBertTokenizer"),luo=o(" or "),UN=a("a"),iuo=o("SqueezeBertTokenizerFast"),duo=o(" (SqueezeBERT model)"),cuo=l(),Os=a("li"),mde=a("strong"),fuo=o("t5"),muo=o(" \u2014 "),JN=a("a"),guo=o("T5Tokenizer"),huo=o(" or "),YN=a("a"),puo=o("T5TokenizerFast"),_uo=o(" (T5 model)"),uuo=l(),xh=a("li"),gde=a("strong"),buo=o("tapas"),vuo=o(" \u2014 "),KN=a("a"),Fuo=o("TapasTokenizer"),Tuo=o(" (TAPAS model)"),Muo=l(),$h=a("li"),hde=a("strong"),Euo=o("tapex"),Cuo=o(" \u2014 "),ZN=a("a"),wuo=o("TapexTokenizer"),Auo=o(" (TAPEX model)"),Luo=l(),kh=a("li"),pde=a("strong"),yuo=o("transfo-xl"),xuo=o(" \u2014 "),eq=a("a"),$uo=o("TransfoXLTokenizer"),kuo=o(" (Transformer-XL model)"),Suo=l(),Vs=a("li"),_de=a("strong"),Ruo=o("vilt"),Puo=o(" \u2014 "),oq=a("a"),Buo=o("BertTokenizer"),Iuo=o(" or "),rq=a("a"),Nuo=o("BertTokenizerFast"),quo=o(" (ViLT model)"),juo=l(),Xs=a("li"),ude=a("strong"),Duo=o("visual_bert"),Guo=o(" \u2014 "),tq=a("a"),Ouo=o("BertTokenizer"),Vuo=o(" or "),aq=a("a"),Xuo=o("BertTokenizerFast"),zuo=o(" (VisualBERT model)"),Wuo=l(),Sh=a("li"),bde=a("strong"),Quo=o("wav2vec2"),Huo=o(" \u2014 "),nq=a("a"),Uuo=o("Wav2Vec2CTCTokenizer"),Juo=o(" (Wav2Vec2 model)"),Yuo=l(),Rh=a("li"),vde=a("strong"),Kuo=o("wav2vec2-conformer"),Zuo=o(" \u2014 "),sq=a("a"),e2o=o("Wav2Vec2CTCTokenizer"),o2o=o(" (Wav2Vec2-Conformer model)"),r2o=l(),Ph=a("li"),Fde=a("strong"),t2o=o("wav2vec2_phoneme"),a2o=o(" \u2014 "),lq=a("a"),n2o=o("Wav2Vec2PhonemeCTCTokenizer"),s2o=o(" (Wav2Vec2Phoneme model)"),l2o=l(),zs=a("li"),Tde=a("strong"),i2o=o("xglm"),d2o=o(" \u2014 "),iq=a("a"),c2o=o("XGLMTokenizer"),f2o=o(" or "),dq=a("a"),m2o=o("XGLMTokenizerFast"),g2o=o(" (XGLM model)"),h2o=l(),Bh=a("li"),Mde=a("strong"),p2o=o("xlm"),_2o=o(" \u2014 "),cq=a("a"),u2o=o("XLMTokenizer"),b2o=o(" (XLM model)"),v2o=l(),Ih=a("li"),Ede=a("strong"),F2o=o("xlm-prophetnet"),T2o=o(" \u2014 "),fq=a("a"),M2o=o("XLMProphetNetTokenizer"),E2o=o(" (XLM-ProphetNet model)"),C2o=l(),Ws=a("li"),Cde=a("strong"),w2o=o("xlm-roberta"),A2o=o(" \u2014 "),mq=a("a"),L2o=o("XLMRobertaTokenizer"),y2o=o(" or "),gq=a("a"),x2o=o("XLMRobertaTokenizerFast"),$2o=o(" (XLM-RoBERTa model)"),k2o=l(),Qs=a("li"),wde=a("strong"),S2o=o("xlm-roberta-xl"),R2o=o(" \u2014 "),hq=a("a"),P2o=o("RobertaTokenizer"),B2o=o(" or "),pq=a("a"),I2o=o("RobertaTokenizerFast"),N2o=o(" (XLM-RoBERTa-XL model)"),q2o=l(),Hs=a("li"),Ade=a("strong"),j2o=o("xlnet"),D2o=o(" \u2014 "),_q=a("a"),G2o=o("XLNetTokenizer"),O2o=o(" or "),uq=a("a"),V2o=o("XLNetTokenizerFast"),X2o=o(" (XLNet model)"),z2o=l(),Us=a("li"),Lde=a("strong"),W2o=o("yoso"),Q2o=o(" \u2014 "),bq=a("a"),H2o=o("AlbertTokenizer"),U2o=o(" or "),vq=a("a"),J2o=o("AlbertTokenizerFast"),Y2o=o(" (YOSO model)"),K2o=l(),F(Nh.$$.fragment),Z2o=l(),qh=a("div"),F(BL.$$.fragment),e1o=l(),yde=a("p"),o1o=o("Register a new tokenizer in this mapping."),Mze=l(),Gi=a("h2"),jh=a("a"),xde=a("span"),F(IL.$$.fragment),r1o=l(),$de=a("span"),t1o=o("AutoFeatureExtractor"),Eze=l(),xo=a("div"),F(NL.$$.fragment),a1o=l(),qL=a("p"),n1o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Fq=a("a"),s1o=o("AutoFeatureExtractor.from_pretrained()"),l1o=o(" class method."),i1o=l(),jL=a("p"),d1o=o("This class cannot be instantiated directly using "),kde=a("code"),c1o=o("__init__()"),f1o=o(" (throws an error)."),m1o=l(),Ue=a("div"),F(DL.$$.fragment),g1o=l(),Sde=a("p"),h1o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),p1o=l(),Ba=a("p"),_1o=o("The feature extractor class to instantiate is selected based on the "),Rde=a("code"),u1o=o("model_type"),b1o=o(` property of the config object
(either passed as an argument or loaded from `),Pde=a("code"),v1o=o("pretrained_model_name_or_path"),F1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bde=a("code"),T1o=o("pretrained_model_name_or_path"),M1o=o(":"),E1o=l(),U=a("ul"),Dh=a("li"),Ide=a("strong"),C1o=o("beit"),w1o=o(" \u2014 "),Tq=a("a"),A1o=o("BeitFeatureExtractor"),L1o=o(" (BEiT model)"),y1o=l(),Gh=a("li"),Nde=a("strong"),x1o=o("clip"),$1o=o(" \u2014 "),Mq=a("a"),k1o=o("CLIPFeatureExtractor"),S1o=o(" (CLIP model)"),R1o=l(),Oh=a("li"),qde=a("strong"),P1o=o("convnext"),B1o=o(" \u2014 "),Eq=a("a"),I1o=o("ConvNextFeatureExtractor"),N1o=o(" (ConvNeXT model)"),q1o=l(),Vh=a("li"),jde=a("strong"),j1o=o("cvt"),D1o=o(" \u2014 "),Cq=a("a"),G1o=o("ConvNextFeatureExtractor"),O1o=o(" (CvT model)"),V1o=l(),Xh=a("li"),Dde=a("strong"),X1o=o("data2vec-audio"),z1o=o(" \u2014 "),wq=a("a"),W1o=o("Wav2Vec2FeatureExtractor"),Q1o=o(" (Data2VecAudio model)"),H1o=l(),zh=a("li"),Gde=a("strong"),U1o=o("data2vec-vision"),J1o=o(" \u2014 "),Aq=a("a"),Y1o=o("BeitFeatureExtractor"),K1o=o(" (Data2VecVision model)"),Z1o=l(),Wh=a("li"),Ode=a("strong"),ebo=o("deit"),obo=o(" \u2014 "),Lq=a("a"),rbo=o("DeiTFeatureExtractor"),tbo=o(" (DeiT model)"),abo=l(),Qh=a("li"),Vde=a("strong"),nbo=o("detr"),sbo=o(" \u2014 "),yq=a("a"),lbo=o("DetrFeatureExtractor"),ibo=o(" (DETR model)"),dbo=l(),Hh=a("li"),Xde=a("strong"),cbo=o("dpt"),fbo=o(" \u2014 "),xq=a("a"),mbo=o("DPTFeatureExtractor"),gbo=o(" (DPT model)"),hbo=l(),Uh=a("li"),zde=a("strong"),pbo=o("flava"),_bo=o(" \u2014 "),$q=a("a"),ubo=o("FlavaFeatureExtractor"),bbo=o(" (FLAVA model)"),vbo=l(),Jh=a("li"),Wde=a("strong"),Fbo=o("glpn"),Tbo=o(" \u2014 "),kq=a("a"),Mbo=o("GLPNFeatureExtractor"),Ebo=o(" (GLPN model)"),Cbo=l(),Yh=a("li"),Qde=a("strong"),wbo=o("groupvit"),Abo=o(" \u2014 "),Sq=a("a"),Lbo=o("CLIPFeatureExtractor"),ybo=o(" (GroupViT model)"),xbo=l(),Kh=a("li"),Hde=a("strong"),$bo=o("hubert"),kbo=o(" \u2014 "),Rq=a("a"),Sbo=o("Wav2Vec2FeatureExtractor"),Rbo=o(" (Hubert model)"),Pbo=l(),Zh=a("li"),Ude=a("strong"),Bbo=o("imagegpt"),Ibo=o(" \u2014 "),Pq=a("a"),Nbo=o("ImageGPTFeatureExtractor"),qbo=o(" (ImageGPT model)"),jbo=l(),ep=a("li"),Jde=a("strong"),Dbo=o("layoutlmv2"),Gbo=o(" \u2014 "),Bq=a("a"),Obo=o("LayoutLMv2FeatureExtractor"),Vbo=o(" (LayoutLMv2 model)"),Xbo=l(),op=a("li"),Yde=a("strong"),zbo=o("layoutlmv3"),Wbo=o(" \u2014 "),Iq=a("a"),Qbo=o("LayoutLMv3FeatureExtractor"),Hbo=o(" (LayoutLMv3 model)"),Ubo=l(),rp=a("li"),Kde=a("strong"),Jbo=o("levit"),Ybo=o(" \u2014 "),Nq=a("a"),Kbo=o("LevitFeatureExtractor"),Zbo=o(" (LeViT model)"),evo=l(),tp=a("li"),Zde=a("strong"),ovo=o("maskformer"),rvo=o(" \u2014 "),qq=a("a"),tvo=o("MaskFormerFeatureExtractor"),avo=o(" (MaskFormer model)"),nvo=l(),ap=a("li"),ece=a("strong"),svo=o("mctct"),lvo=o(" \u2014 "),jq=a("a"),ivo=o("MCTCTFeatureExtractor"),dvo=o(" (M-CTC-T model)"),cvo=l(),np=a("li"),oce=a("strong"),fvo=o("mobilevit"),mvo=o(" \u2014 "),Dq=a("a"),gvo=o("MobileViTFeatureExtractor"),hvo=o(" (MobileViT model)"),pvo=l(),sp=a("li"),rce=a("strong"),_vo=o("owlvit"),uvo=o(" \u2014 "),Gq=a("a"),bvo=o("OwlViTFeatureExtractor"),vvo=o(" (OWL-ViT model)"),Fvo=l(),lp=a("li"),tce=a("strong"),Tvo=o("perceiver"),Mvo=o(" \u2014 "),Oq=a("a"),Evo=o("PerceiverFeatureExtractor"),Cvo=o(" (Perceiver model)"),wvo=l(),ip=a("li"),ace=a("strong"),Avo=o("poolformer"),Lvo=o(" \u2014 "),Vq=a("a"),yvo=o("PoolFormerFeatureExtractor"),xvo=o(" (PoolFormer model)"),$vo=l(),dp=a("li"),nce=a("strong"),kvo=o("regnet"),Svo=o(" \u2014 "),Xq=a("a"),Rvo=o("ConvNextFeatureExtractor"),Pvo=o(" (RegNet model)"),Bvo=l(),cp=a("li"),sce=a("strong"),Ivo=o("resnet"),Nvo=o(" \u2014 "),zq=a("a"),qvo=o("ConvNextFeatureExtractor"),jvo=o(" (ResNet model)"),Dvo=l(),fp=a("li"),lce=a("strong"),Gvo=o("segformer"),Ovo=o(" \u2014 "),Wq=a("a"),Vvo=o("SegformerFeatureExtractor"),Xvo=o(" (SegFormer model)"),zvo=l(),mp=a("li"),ice=a("strong"),Wvo=o("speech_to_text"),Qvo=o(" \u2014 "),Qq=a("a"),Hvo=o("Speech2TextFeatureExtractor"),Uvo=o(" (Speech2Text model)"),Jvo=l(),gp=a("li"),dce=a("strong"),Yvo=o("swin"),Kvo=o(" \u2014 "),Hq=a("a"),Zvo=o("ViTFeatureExtractor"),e3o=o(" (Swin Transformer model)"),o3o=l(),hp=a("li"),cce=a("strong"),r3o=o("swinv2"),t3o=o(" \u2014 "),Uq=a("a"),a3o=o("ViTFeatureExtractor"),n3o=o(" (Swin Transformer V2 model)"),s3o=l(),pp=a("li"),fce=a("strong"),l3o=o("van"),i3o=o(" \u2014 "),Jq=a("a"),d3o=o("ConvNextFeatureExtractor"),c3o=o(" (VAN model)"),f3o=l(),_p=a("li"),mce=a("strong"),m3o=o("vilt"),g3o=o(" \u2014 "),Yq=a("a"),h3o=o("ViltFeatureExtractor"),p3o=o(" (ViLT model)"),_3o=l(),up=a("li"),gce=a("strong"),u3o=o("vit"),b3o=o(" \u2014 "),Kq=a("a"),v3o=o("ViTFeatureExtractor"),F3o=o(" (ViT model)"),T3o=l(),bp=a("li"),hce=a("strong"),M3o=o("vit_mae"),E3o=o(" \u2014 "),Zq=a("a"),C3o=o("ViTFeatureExtractor"),w3o=o(" (ViTMAE model)"),A3o=l(),vp=a("li"),pce=a("strong"),L3o=o("wav2vec2"),y3o=o(" \u2014 "),ej=a("a"),x3o=o("Wav2Vec2FeatureExtractor"),$3o=o(" (Wav2Vec2 model)"),k3o=l(),Fp=a("li"),_ce=a("strong"),S3o=o("wav2vec2-conformer"),R3o=o(" \u2014 "),oj=a("a"),P3o=o("Wav2Vec2FeatureExtractor"),B3o=o(" (Wav2Vec2-Conformer model)"),I3o=l(),Tp=a("li"),uce=a("strong"),N3o=o("yolos"),q3o=o(" \u2014 "),rj=a("a"),j3o=o("YolosFeatureExtractor"),D3o=o(" (YOLOS model)"),G3o=l(),F(Mp.$$.fragment),O3o=l(),F(Ep.$$.fragment),V3o=l(),Cp=a("div"),F(GL.$$.fragment),X3o=l(),bce=a("p"),z3o=o("Register a new feature extractor for this class."),Cze=l(),Oi=a("h2"),wp=a("a"),vce=a("span"),F(OL.$$.fragment),W3o=l(),Fce=a("span"),Q3o=o("AutoProcessor"),wze=l(),$o=a("div"),F(VL.$$.fragment),H3o=l(),XL=a("p"),U3o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tj=a("a"),J3o=o("AutoProcessor.from_pretrained()"),Y3o=o(" class method."),K3o=l(),zL=a("p"),Z3o=o("This class cannot be instantiated directly using "),Tce=a("code"),eFo=o("__init__()"),oFo=o(" (throws an error)."),rFo=l(),Je=a("div"),F(WL.$$.fragment),tFo=l(),Mce=a("p"),aFo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),nFo=l(),Vi=a("p"),sFo=o("The processor class to instantiate is selected based on the "),Ece=a("code"),lFo=o("model_type"),iFo=o(` property of the config object (either
passed as an argument or loaded from `),Cce=a("code"),dFo=o("pretrained_model_name_or_path"),cFo=o(" if possible):"),fFo=l(),fe=a("ul"),Ap=a("li"),wce=a("strong"),mFo=o("clip"),gFo=o(" \u2014 "),aj=a("a"),hFo=o("CLIPProcessor"),pFo=o(" (CLIP model)"),_Fo=l(),Lp=a("li"),Ace=a("strong"),uFo=o("flava"),bFo=o(" \u2014 "),nj=a("a"),vFo=o("FlavaProcessor"),FFo=o(" (FLAVA model)"),TFo=l(),yp=a("li"),Lce=a("strong"),MFo=o("groupvit"),EFo=o(" \u2014 "),sj=a("a"),CFo=o("CLIPProcessor"),wFo=o(" (GroupViT model)"),AFo=l(),xp=a("li"),yce=a("strong"),LFo=o("layoutlmv2"),yFo=o(" \u2014 "),lj=a("a"),xFo=o("LayoutLMv2Processor"),$Fo=o(" (LayoutLMv2 model)"),kFo=l(),$p=a("li"),xce=a("strong"),SFo=o("layoutlmv3"),RFo=o(" \u2014 "),ij=a("a"),PFo=o("LayoutLMv3Processor"),BFo=o(" (LayoutLMv3 model)"),IFo=l(),kp=a("li"),$ce=a("strong"),NFo=o("layoutxlm"),qFo=o(" \u2014 "),dj=a("a"),jFo=o("LayoutXLMProcessor"),DFo=o(" (LayoutXLM model)"),GFo=l(),Sp=a("li"),kce=a("strong"),OFo=o("owlvit"),VFo=o(" \u2014 "),cj=a("a"),XFo=o("OwlViTProcessor"),zFo=o(" (OWL-ViT model)"),WFo=l(),Rp=a("li"),Sce=a("strong"),QFo=o("sew"),HFo=o(" \u2014 "),fj=a("a"),UFo=o("Wav2Vec2Processor"),JFo=o(" (SEW model)"),YFo=l(),Pp=a("li"),Rce=a("strong"),KFo=o("sew-d"),ZFo=o(" \u2014 "),mj=a("a"),e6o=o("Wav2Vec2Processor"),o6o=o(" (SEW-D model)"),r6o=l(),Bp=a("li"),Pce=a("strong"),t6o=o("speech_to_text"),a6o=o(" \u2014 "),gj=a("a"),n6o=o("Speech2TextProcessor"),s6o=o(" (Speech2Text model)"),l6o=l(),Ip=a("li"),Bce=a("strong"),i6o=o("speech_to_text_2"),d6o=o(" \u2014 "),hj=a("a"),c6o=o("Speech2Text2Processor"),f6o=o(" (Speech2Text2 model)"),m6o=l(),Np=a("li"),Ice=a("strong"),g6o=o("trocr"),h6o=o(" \u2014 "),pj=a("a"),p6o=o("TrOCRProcessor"),_6o=o(" (TrOCR model)"),u6o=l(),qp=a("li"),Nce=a("strong"),b6o=o("unispeech"),v6o=o(" \u2014 "),_j=a("a"),F6o=o("Wav2Vec2Processor"),T6o=o(" (UniSpeech model)"),M6o=l(),jp=a("li"),qce=a("strong"),E6o=o("unispeech-sat"),C6o=o(" \u2014 "),uj=a("a"),w6o=o("Wav2Vec2Processor"),A6o=o(" (UniSpeechSat model)"),L6o=l(),Dp=a("li"),jce=a("strong"),y6o=o("vilt"),x6o=o(" \u2014 "),bj=a("a"),$6o=o("ViltProcessor"),k6o=o(" (ViLT model)"),S6o=l(),Gp=a("li"),Dce=a("strong"),R6o=o("vision-text-dual-encoder"),P6o=o(" \u2014 "),vj=a("a"),B6o=o("VisionTextDualEncoderProcessor"),I6o=o(" (VisionTextDualEncoder model)"),N6o=l(),Op=a("li"),Gce=a("strong"),q6o=o("wav2vec2"),j6o=o(" \u2014 "),Fj=a("a"),D6o=o("Wav2Vec2Processor"),G6o=o(" (Wav2Vec2 model)"),O6o=l(),Vp=a("li"),Oce=a("strong"),V6o=o("wav2vec2-conformer"),X6o=o(" \u2014 "),Tj=a("a"),z6o=o("Wav2Vec2Processor"),W6o=o(" (Wav2Vec2-Conformer model)"),Q6o=l(),Xp=a("li"),Vce=a("strong"),H6o=o("wavlm"),U6o=o(" \u2014 "),Mj=a("a"),J6o=o("Wav2Vec2Processor"),Y6o=o(" (WavLM model)"),K6o=l(),F(zp.$$.fragment),Z6o=l(),F(Wp.$$.fragment),eTo=l(),Qp=a("div"),F(QL.$$.fragment),oTo=l(),Xce=a("p"),rTo=o("Register a new processor for this class."),Aze=l(),Xi=a("h2"),Hp=a("a"),zce=a("span"),F(HL.$$.fragment),tTo=l(),Wce=a("span"),aTo=o("AutoModel"),Lze=l(),ko=a("div"),F(UL.$$.fragment),nTo=l(),zi=a("p"),sTo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ej=a("a"),lTo=o("from_pretrained()"),iTo=o(" class method or the "),Cj=a("a"),dTo=o("from_config()"),cTo=o(` class
method.`),fTo=l(),JL=a("p"),mTo=o("This class cannot be instantiated directly using "),Qce=a("code"),gTo=o("__init__()"),hTo=o(" (throws an error)."),pTo=l(),it=a("div"),F(YL.$$.fragment),_To=l(),Hce=a("p"),uTo=o("Instantiates one of the base model classes of the library from a configuration."),bTo=l(),Wi=a("p"),vTo=o(`Note:
Loading a model from its configuration file does `),Uce=a("strong"),FTo=o("not"),TTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wj=a("a"),MTo=o("from_pretrained()"),ETo=o(" to load the model weights."),CTo=l(),F(Up.$$.fragment),wTo=l(),Ye=a("div"),F(KL.$$.fragment),ATo=l(),Jce=a("p"),LTo=o("Instantiate one of the base model classes of the library from a pretrained model."),yTo=l(),Ia=a("p"),xTo=o("The model class to instantiate is selected based on the "),Yce=a("code"),$To=o("model_type"),kTo=o(` property of the config object (either
passed as an argument or loaded from `),Kce=a("code"),STo=o("pretrained_model_name_or_path"),RTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zce=a("code"),PTo=o("pretrained_model_name_or_path"),BTo=o(":"),ITo=l(),y=a("ul"),Jp=a("li"),efe=a("strong"),NTo=o("albert"),qTo=o(" \u2014 "),Aj=a("a"),jTo=o("AlbertModel"),DTo=o(" (ALBERT model)"),GTo=l(),Yp=a("li"),ofe=a("strong"),OTo=o("bart"),VTo=o(" \u2014 "),Lj=a("a"),XTo=o("BartModel"),zTo=o(" (BART model)"),WTo=l(),Kp=a("li"),rfe=a("strong"),QTo=o("beit"),HTo=o(" \u2014 "),yj=a("a"),UTo=o("BeitModel"),JTo=o(" (BEiT model)"),YTo=l(),Zp=a("li"),tfe=a("strong"),KTo=o("bert"),ZTo=o(" \u2014 "),xj=a("a"),e8o=o("BertModel"),o8o=o(" (BERT model)"),r8o=l(),e_=a("li"),afe=a("strong"),t8o=o("bert-generation"),a8o=o(" \u2014 "),$j=a("a"),n8o=o("BertGenerationEncoder"),s8o=o(" (Bert Generation model)"),l8o=l(),o_=a("li"),nfe=a("strong"),i8o=o("big_bird"),d8o=o(" \u2014 "),kj=a("a"),c8o=o("BigBirdModel"),f8o=o(" (BigBird model)"),m8o=l(),r_=a("li"),sfe=a("strong"),g8o=o("bigbird_pegasus"),h8o=o(" \u2014 "),Sj=a("a"),p8o=o("BigBirdPegasusModel"),_8o=o(" (BigBird-Pegasus model)"),u8o=l(),t_=a("li"),lfe=a("strong"),b8o=o("blenderbot"),v8o=o(" \u2014 "),Rj=a("a"),F8o=o("BlenderbotModel"),T8o=o(" (Blenderbot model)"),M8o=l(),a_=a("li"),ife=a("strong"),E8o=o("blenderbot-small"),C8o=o(" \u2014 "),Pj=a("a"),w8o=o("BlenderbotSmallModel"),A8o=o(" (BlenderbotSmall model)"),L8o=l(),n_=a("li"),dfe=a("strong"),y8o=o("bloom"),x8o=o(" \u2014 "),Bj=a("a"),$8o=o("BloomModel"),k8o=o(" (BLOOM model)"),S8o=l(),s_=a("li"),cfe=a("strong"),R8o=o("camembert"),P8o=o(" \u2014 "),Ij=a("a"),B8o=o("CamembertModel"),I8o=o(" (CamemBERT model)"),N8o=l(),l_=a("li"),ffe=a("strong"),q8o=o("canine"),j8o=o(" \u2014 "),Nj=a("a"),D8o=o("CanineModel"),G8o=o(" (CANINE model)"),O8o=l(),i_=a("li"),mfe=a("strong"),V8o=o("clip"),X8o=o(" \u2014 "),qj=a("a"),z8o=o("CLIPModel"),W8o=o(" (CLIP model)"),Q8o=l(),d_=a("li"),gfe=a("strong"),H8o=o("codegen"),U8o=o(" \u2014 "),jj=a("a"),J8o=o("CodeGenModel"),Y8o=o(" (CodeGen model)"),K8o=l(),c_=a("li"),hfe=a("strong"),Z8o=o("convbert"),eMo=o(" \u2014 "),Dj=a("a"),oMo=o("ConvBertModel"),rMo=o(" (ConvBERT model)"),tMo=l(),f_=a("li"),pfe=a("strong"),aMo=o("convnext"),nMo=o(" \u2014 "),Gj=a("a"),sMo=o("ConvNextModel"),lMo=o(" (ConvNeXT model)"),iMo=l(),m_=a("li"),_fe=a("strong"),dMo=o("ctrl"),cMo=o(" \u2014 "),Oj=a("a"),fMo=o("CTRLModel"),mMo=o(" (CTRL model)"),gMo=l(),g_=a("li"),ufe=a("strong"),hMo=o("cvt"),pMo=o(" \u2014 "),Vj=a("a"),_Mo=o("CvtModel"),uMo=o(" (CvT model)"),bMo=l(),h_=a("li"),bfe=a("strong"),vMo=o("data2vec-audio"),FMo=o(" \u2014 "),Xj=a("a"),TMo=o("Data2VecAudioModel"),MMo=o(" (Data2VecAudio model)"),EMo=l(),p_=a("li"),vfe=a("strong"),CMo=o("data2vec-text"),wMo=o(" \u2014 "),zj=a("a"),AMo=o("Data2VecTextModel"),LMo=o(" (Data2VecText model)"),yMo=l(),__=a("li"),Ffe=a("strong"),xMo=o("data2vec-vision"),$Mo=o(" \u2014 "),Wj=a("a"),kMo=o("Data2VecVisionModel"),SMo=o(" (Data2VecVision model)"),RMo=l(),u_=a("li"),Tfe=a("strong"),PMo=o("deberta"),BMo=o(" \u2014 "),Qj=a("a"),IMo=o("DebertaModel"),NMo=o(" (DeBERTa model)"),qMo=l(),b_=a("li"),Mfe=a("strong"),jMo=o("deberta-v2"),DMo=o(" \u2014 "),Hj=a("a"),GMo=o("DebertaV2Model"),OMo=o(" (DeBERTa-v2 model)"),VMo=l(),v_=a("li"),Efe=a("strong"),XMo=o("decision_transformer"),zMo=o(" \u2014 "),Uj=a("a"),WMo=o("DecisionTransformerModel"),QMo=o(" (Decision Transformer model)"),HMo=l(),F_=a("li"),Cfe=a("strong"),UMo=o("deit"),JMo=o(" \u2014 "),Jj=a("a"),YMo=o("DeiTModel"),KMo=o(" (DeiT model)"),ZMo=l(),T_=a("li"),wfe=a("strong"),e4o=o("detr"),o4o=o(" \u2014 "),Yj=a("a"),r4o=o("DetrModel"),t4o=o(" (DETR model)"),a4o=l(),M_=a("li"),Afe=a("strong"),n4o=o("distilbert"),s4o=o(" \u2014 "),Kj=a("a"),l4o=o("DistilBertModel"),i4o=o(" (DistilBERT model)"),d4o=l(),E_=a("li"),Lfe=a("strong"),c4o=o("dpr"),f4o=o(" \u2014 "),Zj=a("a"),m4o=o("DPRQuestionEncoder"),g4o=o(" (DPR model)"),h4o=l(),C_=a("li"),yfe=a("strong"),p4o=o("dpt"),_4o=o(" \u2014 "),eD=a("a"),u4o=o("DPTModel"),b4o=o(" (DPT model)"),v4o=l(),w_=a("li"),xfe=a("strong"),F4o=o("electra"),T4o=o(" \u2014 "),oD=a("a"),M4o=o("ElectraModel"),E4o=o(" (ELECTRA model)"),C4o=l(),A_=a("li"),$fe=a("strong"),w4o=o("flaubert"),A4o=o(" \u2014 "),rD=a("a"),L4o=o("FlaubertModel"),y4o=o(" (FlauBERT model)"),x4o=l(),L_=a("li"),kfe=a("strong"),$4o=o("flava"),k4o=o(" \u2014 "),tD=a("a"),S4o=o("FlavaModel"),R4o=o(" (FLAVA model)"),P4o=l(),y_=a("li"),Sfe=a("strong"),B4o=o("fnet"),I4o=o(" \u2014 "),aD=a("a"),N4o=o("FNetModel"),q4o=o(" (FNet model)"),j4o=l(),x_=a("li"),Rfe=a("strong"),D4o=o("fsmt"),G4o=o(" \u2014 "),nD=a("a"),O4o=o("FSMTModel"),V4o=o(" (FairSeq Machine-Translation model)"),X4o=l(),Js=a("li"),Pfe=a("strong"),z4o=o("funnel"),W4o=o(" \u2014 "),sD=a("a"),Q4o=o("FunnelModel"),H4o=o(" or "),lD=a("a"),U4o=o("FunnelBaseModel"),J4o=o(" (Funnel Transformer model)"),Y4o=l(),$_=a("li"),Bfe=a("strong"),K4o=o("glpn"),Z4o=o(" \u2014 "),iD=a("a"),eEo=o("GLPNModel"),oEo=o(" (GLPN model)"),rEo=l(),k_=a("li"),Ife=a("strong"),tEo=o("gpt2"),aEo=o(" \u2014 "),dD=a("a"),nEo=o("GPT2Model"),sEo=o(" (OpenAI GPT-2 model)"),lEo=l(),S_=a("li"),Nfe=a("strong"),iEo=o("gpt_neo"),dEo=o(" \u2014 "),cD=a("a"),cEo=o("GPTNeoModel"),fEo=o(" (GPT Neo model)"),mEo=l(),R_=a("li"),qfe=a("strong"),gEo=o("gpt_neox"),hEo=o(" \u2014 "),fD=a("a"),pEo=o("GPTNeoXModel"),_Eo=o(" (GPT NeoX model)"),uEo=l(),P_=a("li"),jfe=a("strong"),bEo=o("gptj"),vEo=o(" \u2014 "),mD=a("a"),FEo=o("GPTJModel"),TEo=o(" (GPT-J model)"),MEo=l(),B_=a("li"),Dfe=a("strong"),EEo=o("groupvit"),CEo=o(" \u2014 "),gD=a("a"),wEo=o("GroupViTModel"),AEo=o(" (GroupViT model)"),LEo=l(),I_=a("li"),Gfe=a("strong"),yEo=o("hubert"),xEo=o(" \u2014 "),hD=a("a"),$Eo=o("HubertModel"),kEo=o(" (Hubert model)"),SEo=l(),N_=a("li"),Ofe=a("strong"),REo=o("ibert"),PEo=o(" \u2014 "),pD=a("a"),BEo=o("IBertModel"),IEo=o(" (I-BERT model)"),NEo=l(),q_=a("li"),Vfe=a("strong"),qEo=o("imagegpt"),jEo=o(" \u2014 "),_D=a("a"),DEo=o("ImageGPTModel"),GEo=o(" (ImageGPT model)"),OEo=l(),j_=a("li"),Xfe=a("strong"),VEo=o("layoutlm"),XEo=o(" \u2014 "),uD=a("a"),zEo=o("LayoutLMModel"),WEo=o(" (LayoutLM model)"),QEo=l(),D_=a("li"),zfe=a("strong"),HEo=o("layoutlmv2"),UEo=o(" \u2014 "),bD=a("a"),JEo=o("LayoutLMv2Model"),YEo=o(" (LayoutLMv2 model)"),KEo=l(),G_=a("li"),Wfe=a("strong"),ZEo=o("layoutlmv3"),eCo=o(" \u2014 "),vD=a("a"),oCo=o("LayoutLMv3Model"),rCo=o(" (LayoutLMv3 model)"),tCo=l(),O_=a("li"),Qfe=a("strong"),aCo=o("led"),nCo=o(" \u2014 "),FD=a("a"),sCo=o("LEDModel"),lCo=o(" (LED model)"),iCo=l(),V_=a("li"),Hfe=a("strong"),dCo=o("levit"),cCo=o(" \u2014 "),TD=a("a"),fCo=o("LevitModel"),mCo=o(" (LeViT model)"),gCo=l(),X_=a("li"),Ufe=a("strong"),hCo=o("longformer"),pCo=o(" \u2014 "),MD=a("a"),_Co=o("LongformerModel"),uCo=o(" (Longformer model)"),bCo=l(),z_=a("li"),Jfe=a("strong"),vCo=o("longt5"),FCo=o(" \u2014 "),ED=a("a"),TCo=o("LongT5Model"),MCo=o(" (LongT5 model)"),ECo=l(),W_=a("li"),Yfe=a("strong"),CCo=o("luke"),wCo=o(" \u2014 "),CD=a("a"),ACo=o("LukeModel"),LCo=o(" (LUKE model)"),yCo=l(),Q_=a("li"),Kfe=a("strong"),xCo=o("lxmert"),$Co=o(" \u2014 "),wD=a("a"),kCo=o("LxmertModel"),SCo=o(" (LXMERT model)"),RCo=l(),H_=a("li"),Zfe=a("strong"),PCo=o("m2m_100"),BCo=o(" \u2014 "),AD=a("a"),ICo=o("M2M100Model"),NCo=o(" (M2M100 model)"),qCo=l(),U_=a("li"),eme=a("strong"),jCo=o("marian"),DCo=o(" \u2014 "),LD=a("a"),GCo=o("MarianModel"),OCo=o(" (Marian model)"),VCo=l(),J_=a("li"),ome=a("strong"),XCo=o("maskformer"),zCo=o(" \u2014 "),yD=a("a"),WCo=o("MaskFormerModel"),QCo=o(" (MaskFormer model)"),HCo=l(),Y_=a("li"),rme=a("strong"),UCo=o("mbart"),JCo=o(" \u2014 "),xD=a("a"),YCo=o("MBartModel"),KCo=o(" (mBART model)"),ZCo=l(),K_=a("li"),tme=a("strong"),e5o=o("mctct"),o5o=o(" \u2014 "),$D=a("a"),r5o=o("MCTCTModel"),t5o=o(" (M-CTC-T model)"),a5o=l(),Z_=a("li"),ame=a("strong"),n5o=o("megatron-bert"),s5o=o(" \u2014 "),kD=a("a"),l5o=o("MegatronBertModel"),i5o=o(" (Megatron-BERT model)"),d5o=l(),eu=a("li"),nme=a("strong"),c5o=o("mobilebert"),f5o=o(" \u2014 "),SD=a("a"),m5o=o("MobileBertModel"),g5o=o(" (MobileBERT model)"),h5o=l(),ou=a("li"),sme=a("strong"),p5o=o("mobilevit"),_5o=o(" \u2014 "),RD=a("a"),u5o=o("MobileViTModel"),b5o=o(" (MobileViT model)"),v5o=l(),ru=a("li"),lme=a("strong"),F5o=o("mpnet"),T5o=o(" \u2014 "),PD=a("a"),M5o=o("MPNetModel"),E5o=o(" (MPNet model)"),C5o=l(),tu=a("li"),ime=a("strong"),w5o=o("mt5"),A5o=o(" \u2014 "),BD=a("a"),L5o=o("MT5Model"),y5o=o(" (MT5 model)"),x5o=l(),au=a("li"),dme=a("strong"),$5o=o("mvp"),k5o=o(" \u2014 "),ID=a("a"),S5o=o("MvpModel"),R5o=o(" (MVP model)"),P5o=l(),nu=a("li"),cme=a("strong"),B5o=o("nezha"),I5o=o(" \u2014 "),ND=a("a"),N5o=o("NezhaModel"),q5o=o(" (Nezha model)"),j5o=l(),su=a("li"),fme=a("strong"),D5o=o("nllb"),G5o=o(" \u2014 "),qD=a("a"),O5o=o("M2M100Model"),V5o=o(" (NLLB model)"),X5o=l(),lu=a("li"),mme=a("strong"),z5o=o("nystromformer"),W5o=o(" \u2014 "),jD=a("a"),Q5o=o("NystromformerModel"),H5o=o(" (Nystr\xF6mformer model)"),U5o=l(),iu=a("li"),gme=a("strong"),J5o=o("openai-gpt"),Y5o=o(" \u2014 "),DD=a("a"),K5o=o("OpenAIGPTModel"),Z5o=o(" (OpenAI GPT model)"),e0o=l(),du=a("li"),hme=a("strong"),o0o=o("opt"),r0o=o(" \u2014 "),GD=a("a"),t0o=o("OPTModel"),a0o=o(" (OPT model)"),n0o=l(),cu=a("li"),pme=a("strong"),s0o=o("owlvit"),l0o=o(" \u2014 "),OD=a("a"),i0o=o("OwlViTModel"),d0o=o(" (OWL-ViT model)"),c0o=l(),fu=a("li"),_me=a("strong"),f0o=o("pegasus"),m0o=o(" \u2014 "),VD=a("a"),g0o=o("PegasusModel"),h0o=o(" (Pegasus model)"),p0o=l(),mu=a("li"),ume=a("strong"),_0o=o("perceiver"),u0o=o(" \u2014 "),XD=a("a"),b0o=o("PerceiverModel"),v0o=o(" (Perceiver model)"),F0o=l(),gu=a("li"),bme=a("strong"),T0o=o("plbart"),M0o=o(" \u2014 "),zD=a("a"),E0o=o("PLBartModel"),C0o=o(" (PLBart model)"),w0o=l(),hu=a("li"),vme=a("strong"),A0o=o("poolformer"),L0o=o(" \u2014 "),WD=a("a"),y0o=o("PoolFormerModel"),x0o=o(" (PoolFormer model)"),$0o=l(),pu=a("li"),Fme=a("strong"),k0o=o("prophetnet"),S0o=o(" \u2014 "),QD=a("a"),R0o=o("ProphetNetModel"),P0o=o(" (ProphetNet model)"),B0o=l(),_u=a("li"),Tme=a("strong"),I0o=o("qdqbert"),N0o=o(" \u2014 "),HD=a("a"),q0o=o("QDQBertModel"),j0o=o(" (QDQBert model)"),D0o=l(),uu=a("li"),Mme=a("strong"),G0o=o("reformer"),O0o=o(" \u2014 "),UD=a("a"),V0o=o("ReformerModel"),X0o=o(" (Reformer model)"),z0o=l(),bu=a("li"),Eme=a("strong"),W0o=o("regnet"),Q0o=o(" \u2014 "),JD=a("a"),H0o=o("RegNetModel"),U0o=o(" (RegNet model)"),J0o=l(),vu=a("li"),Cme=a("strong"),Y0o=o("rembert"),K0o=o(" \u2014 "),YD=a("a"),Z0o=o("RemBertModel"),ewo=o(" (RemBERT model)"),owo=l(),Fu=a("li"),wme=a("strong"),rwo=o("resnet"),two=o(" \u2014 "),KD=a("a"),awo=o("ResNetModel"),nwo=o(" (ResNet model)"),swo=l(),Tu=a("li"),Ame=a("strong"),lwo=o("retribert"),iwo=o(" \u2014 "),ZD=a("a"),dwo=o("RetriBertModel"),cwo=o(" (RetriBERT model)"),fwo=l(),Mu=a("li"),Lme=a("strong"),mwo=o("roberta"),gwo=o(" \u2014 "),eG=a("a"),hwo=o("RobertaModel"),pwo=o(" (RoBERTa model)"),_wo=l(),Eu=a("li"),yme=a("strong"),uwo=o("roformer"),bwo=o(" \u2014 "),oG=a("a"),vwo=o("RoFormerModel"),Fwo=o(" (RoFormer model)"),Two=l(),Cu=a("li"),xme=a("strong"),Mwo=o("segformer"),Ewo=o(" \u2014 "),rG=a("a"),Cwo=o("SegformerModel"),wwo=o(" (SegFormer model)"),Awo=l(),wu=a("li"),$me=a("strong"),Lwo=o("sew"),ywo=o(" \u2014 "),tG=a("a"),xwo=o("SEWModel"),$wo=o(" (SEW model)"),kwo=l(),Au=a("li"),kme=a("strong"),Swo=o("sew-d"),Rwo=o(" \u2014 "),aG=a("a"),Pwo=o("SEWDModel"),Bwo=o(" (SEW-D model)"),Iwo=l(),Lu=a("li"),Sme=a("strong"),Nwo=o("speech_to_text"),qwo=o(" \u2014 "),nG=a("a"),jwo=o("Speech2TextModel"),Dwo=o(" (Speech2Text model)"),Gwo=l(),yu=a("li"),Rme=a("strong"),Owo=o("splinter"),Vwo=o(" \u2014 "),sG=a("a"),Xwo=o("SplinterModel"),zwo=o(" (Splinter model)"),Wwo=l(),xu=a("li"),Pme=a("strong"),Qwo=o("squeezebert"),Hwo=o(" \u2014 "),lG=a("a"),Uwo=o("SqueezeBertModel"),Jwo=o(" (SqueezeBERT model)"),Ywo=l(),$u=a("li"),Bme=a("strong"),Kwo=o("swin"),Zwo=o(" \u2014 "),iG=a("a"),eAo=o("SwinModel"),oAo=o(" (Swin Transformer model)"),rAo=l(),ku=a("li"),Ime=a("strong"),tAo=o("swinv2"),aAo=o(" \u2014 "),dG=a("a"),nAo=o("Swinv2Model"),sAo=o(" (Swin Transformer V2 model)"),lAo=l(),Su=a("li"),Nme=a("strong"),iAo=o("t5"),dAo=o(" \u2014 "),cG=a("a"),cAo=o("T5Model"),fAo=o(" (T5 model)"),mAo=l(),Ru=a("li"),qme=a("strong"),gAo=o("tapas"),hAo=o(" \u2014 "),fG=a("a"),pAo=o("TapasModel"),_Ao=o(" (TAPAS model)"),uAo=l(),Pu=a("li"),jme=a("strong"),bAo=o("trajectory_transformer"),vAo=o(" \u2014 "),mG=a("a"),FAo=o("TrajectoryTransformerModel"),TAo=o(" (Trajectory Transformer model)"),MAo=l(),Bu=a("li"),Dme=a("strong"),EAo=o("transfo-xl"),CAo=o(" \u2014 "),gG=a("a"),wAo=o("TransfoXLModel"),AAo=o(" (Transformer-XL model)"),LAo=l(),Iu=a("li"),Gme=a("strong"),yAo=o("unispeech"),xAo=o(" \u2014 "),hG=a("a"),$Ao=o("UniSpeechModel"),kAo=o(" (UniSpeech model)"),SAo=l(),Nu=a("li"),Ome=a("strong"),RAo=o("unispeech-sat"),PAo=o(" \u2014 "),pG=a("a"),BAo=o("UniSpeechSatModel"),IAo=o(" (UniSpeechSat model)"),NAo=l(),qu=a("li"),Vme=a("strong"),qAo=o("van"),jAo=o(" \u2014 "),_G=a("a"),DAo=o("VanModel"),GAo=o(" (VAN model)"),OAo=l(),ju=a("li"),Xme=a("strong"),VAo=o("vilt"),XAo=o(" \u2014 "),uG=a("a"),zAo=o("ViltModel"),WAo=o(" (ViLT model)"),QAo=l(),Du=a("li"),zme=a("strong"),HAo=o("vision-text-dual-encoder"),UAo=o(" \u2014 "),bG=a("a"),JAo=o("VisionTextDualEncoderModel"),YAo=o(" (VisionTextDualEncoder model)"),KAo=l(),Gu=a("li"),Wme=a("strong"),ZAo=o("visual_bert"),e7o=o(" \u2014 "),vG=a("a"),o7o=o("VisualBertModel"),r7o=o(" (VisualBERT model)"),t7o=l(),Ou=a("li"),Qme=a("strong"),a7o=o("vit"),n7o=o(" \u2014 "),FG=a("a"),s7o=o("ViTModel"),l7o=o(" (ViT model)"),i7o=l(),Vu=a("li"),Hme=a("strong"),d7o=o("vit_mae"),c7o=o(" \u2014 "),TG=a("a"),f7o=o("ViTMAEModel"),m7o=o(" (ViTMAE model)"),g7o=l(),Xu=a("li"),Ume=a("strong"),h7o=o("wav2vec2"),p7o=o(" \u2014 "),MG=a("a"),_7o=o("Wav2Vec2Model"),u7o=o(" (Wav2Vec2 model)"),b7o=l(),zu=a("li"),Jme=a("strong"),v7o=o("wav2vec2-conformer"),F7o=o(" \u2014 "),EG=a("a"),T7o=o("Wav2Vec2ConformerModel"),M7o=o(" (Wav2Vec2-Conformer model)"),E7o=l(),Wu=a("li"),Yme=a("strong"),C7o=o("wavlm"),w7o=o(" \u2014 "),CG=a("a"),A7o=o("WavLMModel"),L7o=o(" (WavLM model)"),y7o=l(),Qu=a("li"),Kme=a("strong"),x7o=o("xglm"),$7o=o(" \u2014 "),wG=a("a"),k7o=o("XGLMModel"),S7o=o(" (XGLM model)"),R7o=l(),Hu=a("li"),Zme=a("strong"),P7o=o("xlm"),B7o=o(" \u2014 "),AG=a("a"),I7o=o("XLMModel"),N7o=o(" (XLM model)"),q7o=l(),Uu=a("li"),ege=a("strong"),j7o=o("xlm-prophetnet"),D7o=o(" \u2014 "),LG=a("a"),G7o=o("XLMProphetNetModel"),O7o=o(" (XLM-ProphetNet model)"),V7o=l(),Ju=a("li"),oge=a("strong"),X7o=o("xlm-roberta"),z7o=o(" \u2014 "),yG=a("a"),W7o=o("XLMRobertaModel"),Q7o=o(" (XLM-RoBERTa model)"),H7o=l(),Yu=a("li"),rge=a("strong"),U7o=o("xlm-roberta-xl"),J7o=o(" \u2014 "),xG=a("a"),Y7o=o("XLMRobertaXLModel"),K7o=o(" (XLM-RoBERTa-XL model)"),Z7o=l(),Ku=a("li"),tge=a("strong"),eLo=o("xlnet"),oLo=o(" \u2014 "),$G=a("a"),rLo=o("XLNetModel"),tLo=o(" (XLNet model)"),aLo=l(),Zu=a("li"),age=a("strong"),nLo=o("yolos"),sLo=o(" \u2014 "),kG=a("a"),lLo=o("YolosModel"),iLo=o(" (YOLOS model)"),dLo=l(),e2=a("li"),nge=a("strong"),cLo=o("yoso"),fLo=o(" \u2014 "),SG=a("a"),mLo=o("YosoModel"),gLo=o(" (YOSO model)"),hLo=l(),o2=a("p"),pLo=o("The model is set in evaluation mode by default using "),sge=a("code"),_Lo=o("model.eval()"),uLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=a("code"),bLo=o("model.train()"),vLo=l(),F(r2.$$.fragment),yze=l(),Qi=a("h2"),t2=a("a"),ige=a("span"),F(ZL.$$.fragment),FLo=l(),dge=a("span"),TLo=o("AutoModelForPreTraining"),xze=l(),So=a("div"),F(ey.$$.fragment),MLo=l(),Hi=a("p"),ELo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RG=a("a"),CLo=o("from_pretrained()"),wLo=o(" class method or the "),PG=a("a"),ALo=o("from_config()"),LLo=o(` class
method.`),yLo=l(),oy=a("p"),xLo=o("This class cannot be instantiated directly using "),cge=a("code"),$Lo=o("__init__()"),kLo=o(" (throws an error)."),SLo=l(),dt=a("div"),F(ry.$$.fragment),RLo=l(),fge=a("p"),PLo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),BLo=l(),Ui=a("p"),ILo=o(`Note:
Loading a model from its configuration file does `),mge=a("strong"),NLo=o("not"),qLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=a("a"),jLo=o("from_pretrained()"),DLo=o(" to load the model weights."),GLo=l(),F(a2.$$.fragment),OLo=l(),Ke=a("div"),F(ty.$$.fragment),VLo=l(),gge=a("p"),XLo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zLo=l(),Na=a("p"),WLo=o("The model class to instantiate is selected based on the "),hge=a("code"),QLo=o("model_type"),HLo=o(` property of the config object (either
passed as an argument or loaded from `),pge=a("code"),ULo=o("pretrained_model_name_or_path"),JLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ge=a("code"),YLo=o("pretrained_model_name_or_path"),KLo=o(":"),ZLo=l(),G=a("ul"),n2=a("li"),uge=a("strong"),eyo=o("albert"),oyo=o(" \u2014 "),IG=a("a"),ryo=o("AlbertForPreTraining"),tyo=o(" (ALBERT model)"),ayo=l(),s2=a("li"),bge=a("strong"),nyo=o("bart"),syo=o(" \u2014 "),NG=a("a"),lyo=o("BartForConditionalGeneration"),iyo=o(" (BART model)"),dyo=l(),l2=a("li"),vge=a("strong"),cyo=o("bert"),fyo=o(" \u2014 "),qG=a("a"),myo=o("BertForPreTraining"),gyo=o(" (BERT model)"),hyo=l(),i2=a("li"),Fge=a("strong"),pyo=o("big_bird"),_yo=o(" \u2014 "),jG=a("a"),uyo=o("BigBirdForPreTraining"),byo=o(" (BigBird model)"),vyo=l(),d2=a("li"),Tge=a("strong"),Fyo=o("bloom"),Tyo=o(" \u2014 "),DG=a("a"),Myo=o("BloomForCausalLM"),Eyo=o(" (BLOOM model)"),Cyo=l(),c2=a("li"),Mge=a("strong"),wyo=o("camembert"),Ayo=o(" \u2014 "),GG=a("a"),Lyo=o("CamembertForMaskedLM"),yyo=o(" (CamemBERT model)"),xyo=l(),f2=a("li"),Ege=a("strong"),$yo=o("ctrl"),kyo=o(" \u2014 "),OG=a("a"),Syo=o("CTRLLMHeadModel"),Ryo=o(" (CTRL model)"),Pyo=l(),m2=a("li"),Cge=a("strong"),Byo=o("data2vec-text"),Iyo=o(" \u2014 "),VG=a("a"),Nyo=o("Data2VecTextForMaskedLM"),qyo=o(" (Data2VecText model)"),jyo=l(),g2=a("li"),wge=a("strong"),Dyo=o("deberta"),Gyo=o(" \u2014 "),XG=a("a"),Oyo=o("DebertaForMaskedLM"),Vyo=o(" (DeBERTa model)"),Xyo=l(),h2=a("li"),Age=a("strong"),zyo=o("deberta-v2"),Wyo=o(" \u2014 "),zG=a("a"),Qyo=o("DebertaV2ForMaskedLM"),Hyo=o(" (DeBERTa-v2 model)"),Uyo=l(),p2=a("li"),Lge=a("strong"),Jyo=o("distilbert"),Yyo=o(" \u2014 "),WG=a("a"),Kyo=o("DistilBertForMaskedLM"),Zyo=o(" (DistilBERT model)"),e9o=l(),_2=a("li"),yge=a("strong"),o9o=o("electra"),r9o=o(" \u2014 "),QG=a("a"),t9o=o("ElectraForPreTraining"),a9o=o(" (ELECTRA model)"),n9o=l(),u2=a("li"),xge=a("strong"),s9o=o("flaubert"),l9o=o(" \u2014 "),HG=a("a"),i9o=o("FlaubertWithLMHeadModel"),d9o=o(" (FlauBERT model)"),c9o=l(),b2=a("li"),$ge=a("strong"),f9o=o("flava"),m9o=o(" \u2014 "),UG=a("a"),g9o=o("FlavaForPreTraining"),h9o=o(" (FLAVA model)"),p9o=l(),v2=a("li"),kge=a("strong"),_9o=o("fnet"),u9o=o(" \u2014 "),JG=a("a"),b9o=o("FNetForPreTraining"),v9o=o(" (FNet model)"),F9o=l(),F2=a("li"),Sge=a("strong"),T9o=o("fsmt"),M9o=o(" \u2014 "),YG=a("a"),E9o=o("FSMTForConditionalGeneration"),C9o=o(" (FairSeq Machine-Translation model)"),w9o=l(),T2=a("li"),Rge=a("strong"),A9o=o("funnel"),L9o=o(" \u2014 "),KG=a("a"),y9o=o("FunnelForPreTraining"),x9o=o(" (Funnel Transformer model)"),$9o=l(),M2=a("li"),Pge=a("strong"),k9o=o("gpt2"),S9o=o(" \u2014 "),ZG=a("a"),R9o=o("GPT2LMHeadModel"),P9o=o(" (OpenAI GPT-2 model)"),B9o=l(),E2=a("li"),Bge=a("strong"),I9o=o("ibert"),N9o=o(" \u2014 "),eO=a("a"),q9o=o("IBertForMaskedLM"),j9o=o(" (I-BERT model)"),D9o=l(),C2=a("li"),Ige=a("strong"),G9o=o("layoutlm"),O9o=o(" \u2014 "),oO=a("a"),V9o=o("LayoutLMForMaskedLM"),X9o=o(" (LayoutLM model)"),z9o=l(),w2=a("li"),Nge=a("strong"),W9o=o("longformer"),Q9o=o(" \u2014 "),rO=a("a"),H9o=o("LongformerForMaskedLM"),U9o=o(" (Longformer model)"),J9o=l(),A2=a("li"),qge=a("strong"),Y9o=o("lxmert"),K9o=o(" \u2014 "),tO=a("a"),Z9o=o("LxmertForPreTraining"),exo=o(" (LXMERT model)"),oxo=l(),L2=a("li"),jge=a("strong"),rxo=o("megatron-bert"),txo=o(" \u2014 "),aO=a("a"),axo=o("MegatronBertForPreTraining"),nxo=o(" (Megatron-BERT model)"),sxo=l(),y2=a("li"),Dge=a("strong"),lxo=o("mobilebert"),ixo=o(" \u2014 "),nO=a("a"),dxo=o("MobileBertForPreTraining"),cxo=o(" (MobileBERT model)"),fxo=l(),x2=a("li"),Gge=a("strong"),mxo=o("mpnet"),gxo=o(" \u2014 "),sO=a("a"),hxo=o("MPNetForMaskedLM"),pxo=o(" (MPNet model)"),_xo=l(),$2=a("li"),Oge=a("strong"),uxo=o("mvp"),bxo=o(" \u2014 "),lO=a("a"),vxo=o("MvpForConditionalGeneration"),Fxo=o(" (MVP model)"),Txo=l(),k2=a("li"),Vge=a("strong"),Mxo=o("nezha"),Exo=o(" \u2014 "),iO=a("a"),Cxo=o("NezhaForPreTraining"),wxo=o(" (Nezha model)"),Axo=l(),S2=a("li"),Xge=a("strong"),Lxo=o("openai-gpt"),yxo=o(" \u2014 "),dO=a("a"),xxo=o("OpenAIGPTLMHeadModel"),$xo=o(" (OpenAI GPT model)"),kxo=l(),R2=a("li"),zge=a("strong"),Sxo=o("retribert"),Rxo=o(" \u2014 "),cO=a("a"),Pxo=o("RetriBertModel"),Bxo=o(" (RetriBERT model)"),Ixo=l(),P2=a("li"),Wge=a("strong"),Nxo=o("roberta"),qxo=o(" \u2014 "),fO=a("a"),jxo=o("RobertaForMaskedLM"),Dxo=o(" (RoBERTa model)"),Gxo=l(),B2=a("li"),Qge=a("strong"),Oxo=o("splinter"),Vxo=o(" \u2014 "),mO=a("a"),Xxo=o("SplinterForPreTraining"),zxo=o(" (Splinter model)"),Wxo=l(),I2=a("li"),Hge=a("strong"),Qxo=o("squeezebert"),Hxo=o(" \u2014 "),gO=a("a"),Uxo=o("SqueezeBertForMaskedLM"),Jxo=o(" (SqueezeBERT model)"),Yxo=l(),N2=a("li"),Uge=a("strong"),Kxo=o("t5"),Zxo=o(" \u2014 "),hO=a("a"),e$o=o("T5ForConditionalGeneration"),o$o=o(" (T5 model)"),r$o=l(),q2=a("li"),Jge=a("strong"),t$o=o("tapas"),a$o=o(" \u2014 "),pO=a("a"),n$o=o("TapasForMaskedLM"),s$o=o(" (TAPAS model)"),l$o=l(),j2=a("li"),Yge=a("strong"),i$o=o("transfo-xl"),d$o=o(" \u2014 "),_O=a("a"),c$o=o("TransfoXLLMHeadModel"),f$o=o(" (Transformer-XL model)"),m$o=l(),D2=a("li"),Kge=a("strong"),g$o=o("unispeech"),h$o=o(" \u2014 "),uO=a("a"),p$o=o("UniSpeechForPreTraining"),_$o=o(" (UniSpeech model)"),u$o=l(),G2=a("li"),Zge=a("strong"),b$o=o("unispeech-sat"),v$o=o(" \u2014 "),bO=a("a"),F$o=o("UniSpeechSatForPreTraining"),T$o=o(" (UniSpeechSat model)"),M$o=l(),O2=a("li"),ehe=a("strong"),E$o=o("visual_bert"),C$o=o(" \u2014 "),vO=a("a"),w$o=o("VisualBertForPreTraining"),A$o=o(" (VisualBERT model)"),L$o=l(),V2=a("li"),ohe=a("strong"),y$o=o("vit_mae"),x$o=o(" \u2014 "),FO=a("a"),$$o=o("ViTMAEForPreTraining"),k$o=o(" (ViTMAE model)"),S$o=l(),X2=a("li"),rhe=a("strong"),R$o=o("wav2vec2"),P$o=o(" \u2014 "),TO=a("a"),B$o=o("Wav2Vec2ForPreTraining"),I$o=o(" (Wav2Vec2 model)"),N$o=l(),z2=a("li"),the=a("strong"),q$o=o("wav2vec2-conformer"),j$o=o(" \u2014 "),MO=a("a"),D$o=o("Wav2Vec2ConformerForPreTraining"),G$o=o(" (Wav2Vec2-Conformer model)"),O$o=l(),W2=a("li"),ahe=a("strong"),V$o=o("xlm"),X$o=o(" \u2014 "),EO=a("a"),z$o=o("XLMWithLMHeadModel"),W$o=o(" (XLM model)"),Q$o=l(),Q2=a("li"),nhe=a("strong"),H$o=o("xlm-roberta"),U$o=o(" \u2014 "),CO=a("a"),J$o=o("XLMRobertaForMaskedLM"),Y$o=o(" (XLM-RoBERTa model)"),K$o=l(),H2=a("li"),she=a("strong"),Z$o=o("xlm-roberta-xl"),eko=o(" \u2014 "),wO=a("a"),oko=o("XLMRobertaXLForMaskedLM"),rko=o(" (XLM-RoBERTa-XL model)"),tko=l(),U2=a("li"),lhe=a("strong"),ako=o("xlnet"),nko=o(" \u2014 "),AO=a("a"),sko=o("XLNetLMHeadModel"),lko=o(" (XLNet model)"),iko=l(),J2=a("p"),dko=o("The model is set in evaluation mode by default using "),ihe=a("code"),cko=o("model.eval()"),fko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=a("code"),mko=o("model.train()"),gko=l(),F(Y2.$$.fragment),$ze=l(),Ji=a("h2"),K2=a("a"),che=a("span"),F(ay.$$.fragment),hko=l(),fhe=a("span"),pko=o("AutoModelForCausalLM"),kze=l(),Ro=a("div"),F(ny.$$.fragment),_ko=l(),Yi=a("p"),uko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),LO=a("a"),bko=o("from_pretrained()"),vko=o(" class method or the "),yO=a("a"),Fko=o("from_config()"),Tko=o(` class
method.`),Mko=l(),sy=a("p"),Eko=o("This class cannot be instantiated directly using "),mhe=a("code"),Cko=o("__init__()"),wko=o(" (throws an error)."),Ako=l(),ct=a("div"),F(ly.$$.fragment),Lko=l(),ghe=a("p"),yko=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xko=l(),Ki=a("p"),$ko=o(`Note:
Loading a model from its configuration file does `),hhe=a("strong"),kko=o("not"),Sko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=a("a"),Rko=o("from_pretrained()"),Pko=o(" to load the model weights."),Bko=l(),F(Z2.$$.fragment),Iko=l(),Ze=a("div"),F(iy.$$.fragment),Nko=l(),phe=a("p"),qko=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jko=l(),qa=a("p"),Dko=o("The model class to instantiate is selected based on the "),_he=a("code"),Gko=o("model_type"),Oko=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),Vko=o("pretrained_model_name_or_path"),Xko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),zko=o("pretrained_model_name_or_path"),Wko=o(":"),Qko=l(),X=a("ul"),e1=a("li"),vhe=a("strong"),Hko=o("bart"),Uko=o(" \u2014 "),$O=a("a"),Jko=o("BartForCausalLM"),Yko=o(" (BART model)"),Kko=l(),o1=a("li"),Fhe=a("strong"),Zko=o("bert"),eSo=o(" \u2014 "),kO=a("a"),oSo=o("BertLMHeadModel"),rSo=o(" (BERT model)"),tSo=l(),r1=a("li"),The=a("strong"),aSo=o("bert-generation"),nSo=o(" \u2014 "),SO=a("a"),sSo=o("BertGenerationDecoder"),lSo=o(" (Bert Generation model)"),iSo=l(),t1=a("li"),Mhe=a("strong"),dSo=o("big_bird"),cSo=o(" \u2014 "),RO=a("a"),fSo=o("BigBirdForCausalLM"),mSo=o(" (BigBird model)"),gSo=l(),a1=a("li"),Ehe=a("strong"),hSo=o("bigbird_pegasus"),pSo=o(" \u2014 "),PO=a("a"),_So=o("BigBirdPegasusForCausalLM"),uSo=o(" (BigBird-Pegasus model)"),bSo=l(),n1=a("li"),Che=a("strong"),vSo=o("blenderbot"),FSo=o(" \u2014 "),BO=a("a"),TSo=o("BlenderbotForCausalLM"),MSo=o(" (Blenderbot model)"),ESo=l(),s1=a("li"),whe=a("strong"),CSo=o("blenderbot-small"),wSo=o(" \u2014 "),IO=a("a"),ASo=o("BlenderbotSmallForCausalLM"),LSo=o(" (BlenderbotSmall model)"),ySo=l(),l1=a("li"),Ahe=a("strong"),xSo=o("bloom"),$So=o(" \u2014 "),NO=a("a"),kSo=o("BloomForCausalLM"),SSo=o(" (BLOOM model)"),RSo=l(),i1=a("li"),Lhe=a("strong"),PSo=o("camembert"),BSo=o(" \u2014 "),qO=a("a"),ISo=o("CamembertForCausalLM"),NSo=o(" (CamemBERT model)"),qSo=l(),d1=a("li"),yhe=a("strong"),jSo=o("codegen"),DSo=o(" \u2014 "),jO=a("a"),GSo=o("CodeGenForCausalLM"),OSo=o(" (CodeGen model)"),VSo=l(),c1=a("li"),xhe=a("strong"),XSo=o("ctrl"),zSo=o(" \u2014 "),DO=a("a"),WSo=o("CTRLLMHeadModel"),QSo=o(" (CTRL model)"),HSo=l(),f1=a("li"),$he=a("strong"),USo=o("data2vec-text"),JSo=o(" \u2014 "),GO=a("a"),YSo=o("Data2VecTextForCausalLM"),KSo=o(" (Data2VecText model)"),ZSo=l(),m1=a("li"),khe=a("strong"),eRo=o("electra"),oRo=o(" \u2014 "),OO=a("a"),rRo=o("ElectraForCausalLM"),tRo=o(" (ELECTRA model)"),aRo=l(),g1=a("li"),She=a("strong"),nRo=o("gpt2"),sRo=o(" \u2014 "),VO=a("a"),lRo=o("GPT2LMHeadModel"),iRo=o(" (OpenAI GPT-2 model)"),dRo=l(),h1=a("li"),Rhe=a("strong"),cRo=o("gpt_neo"),fRo=o(" \u2014 "),XO=a("a"),mRo=o("GPTNeoForCausalLM"),gRo=o(" (GPT Neo model)"),hRo=l(),p1=a("li"),Phe=a("strong"),pRo=o("gpt_neox"),_Ro=o(" \u2014 "),zO=a("a"),uRo=o("GPTNeoXForCausalLM"),bRo=o(" (GPT NeoX model)"),vRo=l(),_1=a("li"),Bhe=a("strong"),FRo=o("gptj"),TRo=o(" \u2014 "),WO=a("a"),MRo=o("GPTJForCausalLM"),ERo=o(" (GPT-J model)"),CRo=l(),u1=a("li"),Ihe=a("strong"),wRo=o("marian"),ARo=o(" \u2014 "),QO=a("a"),LRo=o("MarianForCausalLM"),yRo=o(" (Marian model)"),xRo=l(),b1=a("li"),Nhe=a("strong"),$Ro=o("mbart"),kRo=o(" \u2014 "),HO=a("a"),SRo=o("MBartForCausalLM"),RRo=o(" (mBART model)"),PRo=l(),v1=a("li"),qhe=a("strong"),BRo=o("megatron-bert"),IRo=o(" \u2014 "),UO=a("a"),NRo=o("MegatronBertForCausalLM"),qRo=o(" (Megatron-BERT model)"),jRo=l(),F1=a("li"),jhe=a("strong"),DRo=o("mvp"),GRo=o(" \u2014 "),JO=a("a"),ORo=o("MvpForCausalLM"),VRo=o(" (MVP model)"),XRo=l(),T1=a("li"),Dhe=a("strong"),zRo=o("openai-gpt"),WRo=o(" \u2014 "),YO=a("a"),QRo=o("OpenAIGPTLMHeadModel"),HRo=o(" (OpenAI GPT model)"),URo=l(),M1=a("li"),Ghe=a("strong"),JRo=o("opt"),YRo=o(" \u2014 "),KO=a("a"),KRo=o("OPTForCausalLM"),ZRo=o(" (OPT model)"),ePo=l(),E1=a("li"),Ohe=a("strong"),oPo=o("pegasus"),rPo=o(" \u2014 "),ZO=a("a"),tPo=o("PegasusForCausalLM"),aPo=o(" (Pegasus model)"),nPo=l(),C1=a("li"),Vhe=a("strong"),sPo=o("plbart"),lPo=o(" \u2014 "),eV=a("a"),iPo=o("PLBartForCausalLM"),dPo=o(" (PLBart model)"),cPo=l(),w1=a("li"),Xhe=a("strong"),fPo=o("prophetnet"),mPo=o(" \u2014 "),oV=a("a"),gPo=o("ProphetNetForCausalLM"),hPo=o(" (ProphetNet model)"),pPo=l(),A1=a("li"),zhe=a("strong"),_Po=o("qdqbert"),uPo=o(" \u2014 "),rV=a("a"),bPo=o("QDQBertLMHeadModel"),vPo=o(" (QDQBert model)"),FPo=l(),L1=a("li"),Whe=a("strong"),TPo=o("reformer"),MPo=o(" \u2014 "),tV=a("a"),EPo=o("ReformerModelWithLMHead"),CPo=o(" (Reformer model)"),wPo=l(),y1=a("li"),Qhe=a("strong"),APo=o("rembert"),LPo=o(" \u2014 "),aV=a("a"),yPo=o("RemBertForCausalLM"),xPo=o(" (RemBERT model)"),$Po=l(),x1=a("li"),Hhe=a("strong"),kPo=o("roberta"),SPo=o(" \u2014 "),nV=a("a"),RPo=o("RobertaForCausalLM"),PPo=o(" (RoBERTa model)"),BPo=l(),$1=a("li"),Uhe=a("strong"),IPo=o("roformer"),NPo=o(" \u2014 "),sV=a("a"),qPo=o("RoFormerForCausalLM"),jPo=o(" (RoFormer model)"),DPo=l(),k1=a("li"),Jhe=a("strong"),GPo=o("speech_to_text_2"),OPo=o(" \u2014 "),lV=a("a"),VPo=o("Speech2Text2ForCausalLM"),XPo=o(" (Speech2Text2 model)"),zPo=l(),S1=a("li"),Yhe=a("strong"),WPo=o("t5"),QPo=o(" \u2014 "),iV=a("a"),HPo=o("T5ForConditionalGeneration"),UPo=o(" (T5 model)"),JPo=l(),R1=a("li"),Khe=a("strong"),YPo=o("transfo-xl"),KPo=o(" \u2014 "),dV=a("a"),ZPo=o("TransfoXLLMHeadModel"),eBo=o(" (Transformer-XL model)"),oBo=l(),P1=a("li"),Zhe=a("strong"),rBo=o("trocr"),tBo=o(" \u2014 "),cV=a("a"),aBo=o("TrOCRForCausalLM"),nBo=o(" (TrOCR model)"),sBo=l(),B1=a("li"),epe=a("strong"),lBo=o("xglm"),iBo=o(" \u2014 "),fV=a("a"),dBo=o("XGLMForCausalLM"),cBo=o(" (XGLM model)"),fBo=l(),I1=a("li"),ope=a("strong"),mBo=o("xlm"),gBo=o(" \u2014 "),mV=a("a"),hBo=o("XLMWithLMHeadModel"),pBo=o(" (XLM model)"),_Bo=l(),N1=a("li"),rpe=a("strong"),uBo=o("xlm-prophetnet"),bBo=o(" \u2014 "),gV=a("a"),vBo=o("XLMProphetNetForCausalLM"),FBo=o(" (XLM-ProphetNet model)"),TBo=l(),q1=a("li"),tpe=a("strong"),MBo=o("xlm-roberta"),EBo=o(" \u2014 "),hV=a("a"),CBo=o("XLMRobertaForCausalLM"),wBo=o(" (XLM-RoBERTa model)"),ABo=l(),j1=a("li"),ape=a("strong"),LBo=o("xlm-roberta-xl"),yBo=o(" \u2014 "),pV=a("a"),xBo=o("XLMRobertaXLForCausalLM"),$Bo=o(" (XLM-RoBERTa-XL model)"),kBo=l(),D1=a("li"),npe=a("strong"),SBo=o("xlnet"),RBo=o(" \u2014 "),_V=a("a"),PBo=o("XLNetLMHeadModel"),BBo=o(" (XLNet model)"),IBo=l(),G1=a("p"),NBo=o("The model is set in evaluation mode by default using "),spe=a("code"),qBo=o("model.eval()"),jBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=a("code"),DBo=o("model.train()"),GBo=l(),F(O1.$$.fragment),Sze=l(),Zi=a("h2"),V1=a("a"),ipe=a("span"),F(dy.$$.fragment),OBo=l(),dpe=a("span"),VBo=o("AutoModelForMaskedLM"),Rze=l(),Po=a("div"),F(cy.$$.fragment),XBo=l(),ed=a("p"),zBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uV=a("a"),WBo=o("from_pretrained()"),QBo=o(" class method or the "),bV=a("a"),HBo=o("from_config()"),UBo=o(` class
method.`),JBo=l(),fy=a("p"),YBo=o("This class cannot be instantiated directly using "),cpe=a("code"),KBo=o("__init__()"),ZBo=o(" (throws an error)."),eIo=l(),ft=a("div"),F(my.$$.fragment),oIo=l(),fpe=a("p"),rIo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tIo=l(),od=a("p"),aIo=o(`Note:
Loading a model from its configuration file does `),mpe=a("strong"),nIo=o("not"),sIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),lIo=o("from_pretrained()"),iIo=o(" to load the model weights."),dIo=l(),F(X1.$$.fragment),cIo=l(),eo=a("div"),F(gy.$$.fragment),fIo=l(),gpe=a("p"),mIo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gIo=l(),ja=a("p"),hIo=o("The model class to instantiate is selected based on the "),hpe=a("code"),pIo=o("model_type"),_Io=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),uIo=o("pretrained_model_name_or_path"),bIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=a("code"),vIo=o("pretrained_model_name_or_path"),FIo=o(":"),TIo=l(),Q=a("ul"),z1=a("li"),upe=a("strong"),MIo=o("albert"),EIo=o(" \u2014 "),FV=a("a"),CIo=o("AlbertForMaskedLM"),wIo=o(" (ALBERT model)"),AIo=l(),W1=a("li"),bpe=a("strong"),LIo=o("bart"),yIo=o(" \u2014 "),TV=a("a"),xIo=o("BartForConditionalGeneration"),$Io=o(" (BART model)"),kIo=l(),Q1=a("li"),vpe=a("strong"),SIo=o("bert"),RIo=o(" \u2014 "),MV=a("a"),PIo=o("BertForMaskedLM"),BIo=o(" (BERT model)"),IIo=l(),H1=a("li"),Fpe=a("strong"),NIo=o("big_bird"),qIo=o(" \u2014 "),EV=a("a"),jIo=o("BigBirdForMaskedLM"),DIo=o(" (BigBird model)"),GIo=l(),U1=a("li"),Tpe=a("strong"),OIo=o("camembert"),VIo=o(" \u2014 "),CV=a("a"),XIo=o("CamembertForMaskedLM"),zIo=o(" (CamemBERT model)"),WIo=l(),J1=a("li"),Mpe=a("strong"),QIo=o("convbert"),HIo=o(" \u2014 "),wV=a("a"),UIo=o("ConvBertForMaskedLM"),JIo=o(" (ConvBERT model)"),YIo=l(),Y1=a("li"),Epe=a("strong"),KIo=o("data2vec-text"),ZIo=o(" \u2014 "),AV=a("a"),eNo=o("Data2VecTextForMaskedLM"),oNo=o(" (Data2VecText model)"),rNo=l(),K1=a("li"),Cpe=a("strong"),tNo=o("deberta"),aNo=o(" \u2014 "),LV=a("a"),nNo=o("DebertaForMaskedLM"),sNo=o(" (DeBERTa model)"),lNo=l(),Z1=a("li"),wpe=a("strong"),iNo=o("deberta-v2"),dNo=o(" \u2014 "),yV=a("a"),cNo=o("DebertaV2ForMaskedLM"),fNo=o(" (DeBERTa-v2 model)"),mNo=l(),eb=a("li"),Ape=a("strong"),gNo=o("distilbert"),hNo=o(" \u2014 "),xV=a("a"),pNo=o("DistilBertForMaskedLM"),_No=o(" (DistilBERT model)"),uNo=l(),ob=a("li"),Lpe=a("strong"),bNo=o("electra"),vNo=o(" \u2014 "),$V=a("a"),FNo=o("ElectraForMaskedLM"),TNo=o(" (ELECTRA model)"),MNo=l(),rb=a("li"),ype=a("strong"),ENo=o("flaubert"),CNo=o(" \u2014 "),kV=a("a"),wNo=o("FlaubertWithLMHeadModel"),ANo=o(" (FlauBERT model)"),LNo=l(),tb=a("li"),xpe=a("strong"),yNo=o("fnet"),xNo=o(" \u2014 "),SV=a("a"),$No=o("FNetForMaskedLM"),kNo=o(" (FNet model)"),SNo=l(),ab=a("li"),$pe=a("strong"),RNo=o("funnel"),PNo=o(" \u2014 "),RV=a("a"),BNo=o("FunnelForMaskedLM"),INo=o(" (Funnel Transformer model)"),NNo=l(),nb=a("li"),kpe=a("strong"),qNo=o("ibert"),jNo=o(" \u2014 "),PV=a("a"),DNo=o("IBertForMaskedLM"),GNo=o(" (I-BERT model)"),ONo=l(),sb=a("li"),Spe=a("strong"),VNo=o("layoutlm"),XNo=o(" \u2014 "),BV=a("a"),zNo=o("LayoutLMForMaskedLM"),WNo=o(" (LayoutLM model)"),QNo=l(),lb=a("li"),Rpe=a("strong"),HNo=o("longformer"),UNo=o(" \u2014 "),IV=a("a"),JNo=o("LongformerForMaskedLM"),YNo=o(" (Longformer model)"),KNo=l(),ib=a("li"),Ppe=a("strong"),ZNo=o("luke"),eqo=o(" \u2014 "),NV=a("a"),oqo=o("LukeForMaskedLM"),rqo=o(" (LUKE model)"),tqo=l(),db=a("li"),Bpe=a("strong"),aqo=o("mbart"),nqo=o(" \u2014 "),qV=a("a"),sqo=o("MBartForConditionalGeneration"),lqo=o(" (mBART model)"),iqo=l(),cb=a("li"),Ipe=a("strong"),dqo=o("megatron-bert"),cqo=o(" \u2014 "),jV=a("a"),fqo=o("MegatronBertForMaskedLM"),mqo=o(" (Megatron-BERT model)"),gqo=l(),fb=a("li"),Npe=a("strong"),hqo=o("mobilebert"),pqo=o(" \u2014 "),DV=a("a"),_qo=o("MobileBertForMaskedLM"),uqo=o(" (MobileBERT model)"),bqo=l(),mb=a("li"),qpe=a("strong"),vqo=o("mpnet"),Fqo=o(" \u2014 "),GV=a("a"),Tqo=o("MPNetForMaskedLM"),Mqo=o(" (MPNet model)"),Eqo=l(),gb=a("li"),jpe=a("strong"),Cqo=o("mvp"),wqo=o(" \u2014 "),OV=a("a"),Aqo=o("MvpForConditionalGeneration"),Lqo=o(" (MVP model)"),yqo=l(),hb=a("li"),Dpe=a("strong"),xqo=o("nezha"),$qo=o(" \u2014 "),VV=a("a"),kqo=o("NezhaForMaskedLM"),Sqo=o(" (Nezha model)"),Rqo=l(),pb=a("li"),Gpe=a("strong"),Pqo=o("nystromformer"),Bqo=o(" \u2014 "),XV=a("a"),Iqo=o("NystromformerForMaskedLM"),Nqo=o(" (Nystr\xF6mformer model)"),qqo=l(),_b=a("li"),Ope=a("strong"),jqo=o("perceiver"),Dqo=o(" \u2014 "),zV=a("a"),Gqo=o("PerceiverForMaskedLM"),Oqo=o(" (Perceiver model)"),Vqo=l(),ub=a("li"),Vpe=a("strong"),Xqo=o("qdqbert"),zqo=o(" \u2014 "),WV=a("a"),Wqo=o("QDQBertForMaskedLM"),Qqo=o(" (QDQBert model)"),Hqo=l(),bb=a("li"),Xpe=a("strong"),Uqo=o("reformer"),Jqo=o(" \u2014 "),QV=a("a"),Yqo=o("ReformerForMaskedLM"),Kqo=o(" (Reformer model)"),Zqo=l(),vb=a("li"),zpe=a("strong"),ejo=o("rembert"),ojo=o(" \u2014 "),HV=a("a"),rjo=o("RemBertForMaskedLM"),tjo=o(" (RemBERT model)"),ajo=l(),Fb=a("li"),Wpe=a("strong"),njo=o("roberta"),sjo=o(" \u2014 "),UV=a("a"),ljo=o("RobertaForMaskedLM"),ijo=o(" (RoBERTa model)"),djo=l(),Tb=a("li"),Qpe=a("strong"),cjo=o("roformer"),fjo=o(" \u2014 "),JV=a("a"),mjo=o("RoFormerForMaskedLM"),gjo=o(" (RoFormer model)"),hjo=l(),Mb=a("li"),Hpe=a("strong"),pjo=o("squeezebert"),_jo=o(" \u2014 "),YV=a("a"),ujo=o("SqueezeBertForMaskedLM"),bjo=o(" (SqueezeBERT model)"),vjo=l(),Eb=a("li"),Upe=a("strong"),Fjo=o("tapas"),Tjo=o(" \u2014 "),KV=a("a"),Mjo=o("TapasForMaskedLM"),Ejo=o(" (TAPAS model)"),Cjo=l(),Cb=a("li"),Jpe=a("strong"),wjo=o("wav2vec2"),Ajo=o(" \u2014 "),Ype=a("code"),Ljo=o("Wav2Vec2ForMaskedLM"),yjo=o(" (Wav2Vec2 model)"),xjo=l(),wb=a("li"),Kpe=a("strong"),$jo=o("xlm"),kjo=o(" \u2014 "),ZV=a("a"),Sjo=o("XLMWithLMHeadModel"),Rjo=o(" (XLM model)"),Pjo=l(),Ab=a("li"),Zpe=a("strong"),Bjo=o("xlm-roberta"),Ijo=o(" \u2014 "),eX=a("a"),Njo=o("XLMRobertaForMaskedLM"),qjo=o(" (XLM-RoBERTa model)"),jjo=l(),Lb=a("li"),e_e=a("strong"),Djo=o("xlm-roberta-xl"),Gjo=o(" \u2014 "),oX=a("a"),Ojo=o("XLMRobertaXLForMaskedLM"),Vjo=o(" (XLM-RoBERTa-XL model)"),Xjo=l(),yb=a("li"),o_e=a("strong"),zjo=o("yoso"),Wjo=o(" \u2014 "),rX=a("a"),Qjo=o("YosoForMaskedLM"),Hjo=o(" (YOSO model)"),Ujo=l(),xb=a("p"),Jjo=o("The model is set in evaluation mode by default using "),r_e=a("code"),Yjo=o("model.eval()"),Kjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=a("code"),Zjo=o("model.train()"),eDo=l(),F($b.$$.fragment),Pze=l(),rd=a("h2"),kb=a("a"),a_e=a("span"),F(hy.$$.fragment),oDo=l(),n_e=a("span"),rDo=o("AutoModelForSeq2SeqLM"),Bze=l(),Bo=a("div"),F(py.$$.fragment),tDo=l(),td=a("p"),aDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tX=a("a"),nDo=o("from_pretrained()"),sDo=o(" class method or the "),aX=a("a"),lDo=o("from_config()"),iDo=o(` class
method.`),dDo=l(),_y=a("p"),cDo=o("This class cannot be instantiated directly using "),s_e=a("code"),fDo=o("__init__()"),mDo=o(" (throws an error)."),gDo=l(),mt=a("div"),F(uy.$$.fragment),hDo=l(),l_e=a("p"),pDo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_Do=l(),ad=a("p"),uDo=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),bDo=o("not"),vDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=a("a"),FDo=o("from_pretrained()"),TDo=o(" to load the model weights."),MDo=l(),F(Sb.$$.fragment),EDo=l(),oo=a("div"),F(by.$$.fragment),CDo=l(),d_e=a("p"),wDo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ADo=l(),Da=a("p"),LDo=o("The model class to instantiate is selected based on the "),c_e=a("code"),yDo=o("model_type"),xDo=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),$Do=o("pretrained_model_name_or_path"),kDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),SDo=o("pretrained_model_name_or_path"),RDo=o(":"),PDo=l(),me=a("ul"),Rb=a("li"),g_e=a("strong"),BDo=o("bart"),IDo=o(" \u2014 "),sX=a("a"),NDo=o("BartForConditionalGeneration"),qDo=o(" (BART model)"),jDo=l(),Pb=a("li"),h_e=a("strong"),DDo=o("bigbird_pegasus"),GDo=o(" \u2014 "),lX=a("a"),ODo=o("BigBirdPegasusForConditionalGeneration"),VDo=o(" (BigBird-Pegasus model)"),XDo=l(),Bb=a("li"),p_e=a("strong"),zDo=o("blenderbot"),WDo=o(" \u2014 "),iX=a("a"),QDo=o("BlenderbotForConditionalGeneration"),HDo=o(" (Blenderbot model)"),UDo=l(),Ib=a("li"),__e=a("strong"),JDo=o("blenderbot-small"),YDo=o(" \u2014 "),dX=a("a"),KDo=o("BlenderbotSmallForConditionalGeneration"),ZDo=o(" (BlenderbotSmall model)"),eGo=l(),Nb=a("li"),u_e=a("strong"),oGo=o("encoder-decoder"),rGo=o(" \u2014 "),cX=a("a"),tGo=o("EncoderDecoderModel"),aGo=o(" (Encoder decoder model)"),nGo=l(),qb=a("li"),b_e=a("strong"),sGo=o("fsmt"),lGo=o(" \u2014 "),fX=a("a"),iGo=o("FSMTForConditionalGeneration"),dGo=o(" (FairSeq Machine-Translation model)"),cGo=l(),jb=a("li"),v_e=a("strong"),fGo=o("led"),mGo=o(" \u2014 "),mX=a("a"),gGo=o("LEDForConditionalGeneration"),hGo=o(" (LED model)"),pGo=l(),Db=a("li"),F_e=a("strong"),_Go=o("longt5"),uGo=o(" \u2014 "),gX=a("a"),bGo=o("LongT5ForConditionalGeneration"),vGo=o(" (LongT5 model)"),FGo=l(),Gb=a("li"),T_e=a("strong"),TGo=o("m2m_100"),MGo=o(" \u2014 "),hX=a("a"),EGo=o("M2M100ForConditionalGeneration"),CGo=o(" (M2M100 model)"),wGo=l(),Ob=a("li"),M_e=a("strong"),AGo=o("marian"),LGo=o(" \u2014 "),pX=a("a"),yGo=o("MarianMTModel"),xGo=o(" (Marian model)"),$Go=l(),Vb=a("li"),E_e=a("strong"),kGo=o("mbart"),SGo=o(" \u2014 "),_X=a("a"),RGo=o("MBartForConditionalGeneration"),PGo=o(" (mBART model)"),BGo=l(),Xb=a("li"),C_e=a("strong"),IGo=o("mt5"),NGo=o(" \u2014 "),uX=a("a"),qGo=o("MT5ForConditionalGeneration"),jGo=o(" (MT5 model)"),DGo=l(),zb=a("li"),w_e=a("strong"),GGo=o("mvp"),OGo=o(" \u2014 "),bX=a("a"),VGo=o("MvpForConditionalGeneration"),XGo=o(" (MVP model)"),zGo=l(),Wb=a("li"),A_e=a("strong"),WGo=o("nllb"),QGo=o(" \u2014 "),vX=a("a"),HGo=o("M2M100ForConditionalGeneration"),UGo=o(" (NLLB model)"),JGo=l(),Qb=a("li"),L_e=a("strong"),YGo=o("pegasus"),KGo=o(" \u2014 "),FX=a("a"),ZGo=o("PegasusForConditionalGeneration"),eOo=o(" (Pegasus model)"),oOo=l(),Hb=a("li"),y_e=a("strong"),rOo=o("plbart"),tOo=o(" \u2014 "),TX=a("a"),aOo=o("PLBartForConditionalGeneration"),nOo=o(" (PLBart model)"),sOo=l(),Ub=a("li"),x_e=a("strong"),lOo=o("prophetnet"),iOo=o(" \u2014 "),MX=a("a"),dOo=o("ProphetNetForConditionalGeneration"),cOo=o(" (ProphetNet model)"),fOo=l(),Jb=a("li"),$_e=a("strong"),mOo=o("t5"),gOo=o(" \u2014 "),EX=a("a"),hOo=o("T5ForConditionalGeneration"),pOo=o(" (T5 model)"),_Oo=l(),Yb=a("li"),k_e=a("strong"),uOo=o("xlm-prophetnet"),bOo=o(" \u2014 "),CX=a("a"),vOo=o("XLMProphetNetForConditionalGeneration"),FOo=o(" (XLM-ProphetNet model)"),TOo=l(),Kb=a("p"),MOo=o("The model is set in evaluation mode by default using "),S_e=a("code"),EOo=o("model.eval()"),COo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=a("code"),wOo=o("model.train()"),AOo=l(),F(Zb.$$.fragment),Ize=l(),nd=a("h2"),ev=a("a"),P_e=a("span"),F(vy.$$.fragment),LOo=l(),B_e=a("span"),yOo=o("AutoModelForSequenceClassification"),Nze=l(),Io=a("div"),F(Fy.$$.fragment),xOo=l(),sd=a("p"),$Oo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wX=a("a"),kOo=o("from_pretrained()"),SOo=o(" class method or the "),AX=a("a"),ROo=o("from_config()"),POo=o(` class
method.`),BOo=l(),Ty=a("p"),IOo=o("This class cannot be instantiated directly using "),I_e=a("code"),NOo=o("__init__()"),qOo=o(" (throws an error)."),jOo=l(),gt=a("div"),F(My.$$.fragment),DOo=l(),N_e=a("p"),GOo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),OOo=l(),ld=a("p"),VOo=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),XOo=o("not"),zOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),WOo=o("from_pretrained()"),QOo=o(" to load the model weights."),HOo=l(),F(ov.$$.fragment),UOo=l(),ro=a("div"),F(Ey.$$.fragment),JOo=l(),j_e=a("p"),YOo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),KOo=l(),Ga=a("p"),ZOo=o("The model class to instantiate is selected based on the "),D_e=a("code"),eVo=o("model_type"),oVo=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),rVo=o("pretrained_model_name_or_path"),tVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),aVo=o("pretrained_model_name_or_path"),nVo=o(":"),sVo=l(),B=a("ul"),rv=a("li"),V_e=a("strong"),lVo=o("albert"),iVo=o(" \u2014 "),yX=a("a"),dVo=o("AlbertForSequenceClassification"),cVo=o(" (ALBERT model)"),fVo=l(),tv=a("li"),X_e=a("strong"),mVo=o("bart"),gVo=o(" \u2014 "),xX=a("a"),hVo=o("BartForSequenceClassification"),pVo=o(" (BART model)"),_Vo=l(),av=a("li"),z_e=a("strong"),uVo=o("bert"),bVo=o(" \u2014 "),$X=a("a"),vVo=o("BertForSequenceClassification"),FVo=o(" (BERT model)"),TVo=l(),nv=a("li"),W_e=a("strong"),MVo=o("big_bird"),EVo=o(" \u2014 "),kX=a("a"),CVo=o("BigBirdForSequenceClassification"),wVo=o(" (BigBird model)"),AVo=l(),sv=a("li"),Q_e=a("strong"),LVo=o("bigbird_pegasus"),yVo=o(" \u2014 "),SX=a("a"),xVo=o("BigBirdPegasusForSequenceClassification"),$Vo=o(" (BigBird-Pegasus model)"),kVo=l(),lv=a("li"),H_e=a("strong"),SVo=o("bloom"),RVo=o(" \u2014 "),RX=a("a"),PVo=o("BloomForSequenceClassification"),BVo=o(" (BLOOM model)"),IVo=l(),iv=a("li"),U_e=a("strong"),NVo=o("camembert"),qVo=o(" \u2014 "),PX=a("a"),jVo=o("CamembertForSequenceClassification"),DVo=o(" (CamemBERT model)"),GVo=l(),dv=a("li"),J_e=a("strong"),OVo=o("canine"),VVo=o(" \u2014 "),BX=a("a"),XVo=o("CanineForSequenceClassification"),zVo=o(" (CANINE model)"),WVo=l(),cv=a("li"),Y_e=a("strong"),QVo=o("convbert"),HVo=o(" \u2014 "),IX=a("a"),UVo=o("ConvBertForSequenceClassification"),JVo=o(" (ConvBERT model)"),YVo=l(),fv=a("li"),K_e=a("strong"),KVo=o("ctrl"),ZVo=o(" \u2014 "),NX=a("a"),eXo=o("CTRLForSequenceClassification"),oXo=o(" (CTRL model)"),rXo=l(),mv=a("li"),Z_e=a("strong"),tXo=o("data2vec-text"),aXo=o(" \u2014 "),qX=a("a"),nXo=o("Data2VecTextForSequenceClassification"),sXo=o(" (Data2VecText model)"),lXo=l(),gv=a("li"),eue=a("strong"),iXo=o("deberta"),dXo=o(" \u2014 "),jX=a("a"),cXo=o("DebertaForSequenceClassification"),fXo=o(" (DeBERTa model)"),mXo=l(),hv=a("li"),oue=a("strong"),gXo=o("deberta-v2"),hXo=o(" \u2014 "),DX=a("a"),pXo=o("DebertaV2ForSequenceClassification"),_Xo=o(" (DeBERTa-v2 model)"),uXo=l(),pv=a("li"),rue=a("strong"),bXo=o("distilbert"),vXo=o(" \u2014 "),GX=a("a"),FXo=o("DistilBertForSequenceClassification"),TXo=o(" (DistilBERT model)"),MXo=l(),_v=a("li"),tue=a("strong"),EXo=o("electra"),CXo=o(" \u2014 "),OX=a("a"),wXo=o("ElectraForSequenceClassification"),AXo=o(" (ELECTRA model)"),LXo=l(),uv=a("li"),aue=a("strong"),yXo=o("flaubert"),xXo=o(" \u2014 "),VX=a("a"),$Xo=o("FlaubertForSequenceClassification"),kXo=o(" (FlauBERT model)"),SXo=l(),bv=a("li"),nue=a("strong"),RXo=o("fnet"),PXo=o(" \u2014 "),XX=a("a"),BXo=o("FNetForSequenceClassification"),IXo=o(" (FNet model)"),NXo=l(),vv=a("li"),sue=a("strong"),qXo=o("funnel"),jXo=o(" \u2014 "),zX=a("a"),DXo=o("FunnelForSequenceClassification"),GXo=o(" (Funnel Transformer model)"),OXo=l(),Fv=a("li"),lue=a("strong"),VXo=o("gpt2"),XXo=o(" \u2014 "),WX=a("a"),zXo=o("GPT2ForSequenceClassification"),WXo=o(" (OpenAI GPT-2 model)"),QXo=l(),Tv=a("li"),iue=a("strong"),HXo=o("gpt_neo"),UXo=o(" \u2014 "),QX=a("a"),JXo=o("GPTNeoForSequenceClassification"),YXo=o(" (GPT Neo model)"),KXo=l(),Mv=a("li"),due=a("strong"),ZXo=o("gptj"),ezo=o(" \u2014 "),HX=a("a"),ozo=o("GPTJForSequenceClassification"),rzo=o(" (GPT-J model)"),tzo=l(),Ev=a("li"),cue=a("strong"),azo=o("ibert"),nzo=o(" \u2014 "),UX=a("a"),szo=o("IBertForSequenceClassification"),lzo=o(" (I-BERT model)"),izo=l(),Cv=a("li"),fue=a("strong"),dzo=o("layoutlm"),czo=o(" \u2014 "),JX=a("a"),fzo=o("LayoutLMForSequenceClassification"),mzo=o(" (LayoutLM model)"),gzo=l(),wv=a("li"),mue=a("strong"),hzo=o("layoutlmv2"),pzo=o(" \u2014 "),YX=a("a"),_zo=o("LayoutLMv2ForSequenceClassification"),uzo=o(" (LayoutLMv2 model)"),bzo=l(),Av=a("li"),gue=a("strong"),vzo=o("layoutlmv3"),Fzo=o(" \u2014 "),KX=a("a"),Tzo=o("LayoutLMv3ForSequenceClassification"),Mzo=o(" (LayoutLMv3 model)"),Ezo=l(),Lv=a("li"),hue=a("strong"),Czo=o("led"),wzo=o(" \u2014 "),ZX=a("a"),Azo=o("LEDForSequenceClassification"),Lzo=o(" (LED model)"),yzo=l(),yv=a("li"),pue=a("strong"),xzo=o("longformer"),$zo=o(" \u2014 "),ez=a("a"),kzo=o("LongformerForSequenceClassification"),Szo=o(" (Longformer model)"),Rzo=l(),xv=a("li"),_ue=a("strong"),Pzo=o("mbart"),Bzo=o(" \u2014 "),oz=a("a"),Izo=o("MBartForSequenceClassification"),Nzo=o(" (mBART model)"),qzo=l(),$v=a("li"),uue=a("strong"),jzo=o("megatron-bert"),Dzo=o(" \u2014 "),rz=a("a"),Gzo=o("MegatronBertForSequenceClassification"),Ozo=o(" (Megatron-BERT model)"),Vzo=l(),kv=a("li"),bue=a("strong"),Xzo=o("mobilebert"),zzo=o(" \u2014 "),tz=a("a"),Wzo=o("MobileBertForSequenceClassification"),Qzo=o(" (MobileBERT model)"),Hzo=l(),Sv=a("li"),vue=a("strong"),Uzo=o("mpnet"),Jzo=o(" \u2014 "),az=a("a"),Yzo=o("MPNetForSequenceClassification"),Kzo=o(" (MPNet model)"),Zzo=l(),Rv=a("li"),Fue=a("strong"),eWo=o("mvp"),oWo=o(" \u2014 "),nz=a("a"),rWo=o("MvpForSequenceClassification"),tWo=o(" (MVP model)"),aWo=l(),Pv=a("li"),Tue=a("strong"),nWo=o("nezha"),sWo=o(" \u2014 "),sz=a("a"),lWo=o("NezhaForSequenceClassification"),iWo=o(" (Nezha model)"),dWo=l(),Bv=a("li"),Mue=a("strong"),cWo=o("nystromformer"),fWo=o(" \u2014 "),lz=a("a"),mWo=o("NystromformerForSequenceClassification"),gWo=o(" (Nystr\xF6mformer model)"),hWo=l(),Iv=a("li"),Eue=a("strong"),pWo=o("openai-gpt"),_Wo=o(" \u2014 "),iz=a("a"),uWo=o("OpenAIGPTForSequenceClassification"),bWo=o(" (OpenAI GPT model)"),vWo=l(),Nv=a("li"),Cue=a("strong"),FWo=o("opt"),TWo=o(" \u2014 "),dz=a("a"),MWo=o("OPTForSequenceClassification"),EWo=o(" (OPT model)"),CWo=l(),qv=a("li"),wue=a("strong"),wWo=o("perceiver"),AWo=o(" \u2014 "),cz=a("a"),LWo=o("PerceiverForSequenceClassification"),yWo=o(" (Perceiver model)"),xWo=l(),jv=a("li"),Aue=a("strong"),$Wo=o("plbart"),kWo=o(" \u2014 "),fz=a("a"),SWo=o("PLBartForSequenceClassification"),RWo=o(" (PLBart model)"),PWo=l(),Dv=a("li"),Lue=a("strong"),BWo=o("qdqbert"),IWo=o(" \u2014 "),mz=a("a"),NWo=o("QDQBertForSequenceClassification"),qWo=o(" (QDQBert model)"),jWo=l(),Gv=a("li"),yue=a("strong"),DWo=o("reformer"),GWo=o(" \u2014 "),gz=a("a"),OWo=o("ReformerForSequenceClassification"),VWo=o(" (Reformer model)"),XWo=l(),Ov=a("li"),xue=a("strong"),zWo=o("rembert"),WWo=o(" \u2014 "),hz=a("a"),QWo=o("RemBertForSequenceClassification"),HWo=o(" (RemBERT model)"),UWo=l(),Vv=a("li"),$ue=a("strong"),JWo=o("roberta"),YWo=o(" \u2014 "),pz=a("a"),KWo=o("RobertaForSequenceClassification"),ZWo=o(" (RoBERTa model)"),eQo=l(),Xv=a("li"),kue=a("strong"),oQo=o("roformer"),rQo=o(" \u2014 "),_z=a("a"),tQo=o("RoFormerForSequenceClassification"),aQo=o(" (RoFormer model)"),nQo=l(),zv=a("li"),Sue=a("strong"),sQo=o("squeezebert"),lQo=o(" \u2014 "),uz=a("a"),iQo=o("SqueezeBertForSequenceClassification"),dQo=o(" (SqueezeBERT model)"),cQo=l(),Wv=a("li"),Rue=a("strong"),fQo=o("tapas"),mQo=o(" \u2014 "),bz=a("a"),gQo=o("TapasForSequenceClassification"),hQo=o(" (TAPAS model)"),pQo=l(),Qv=a("li"),Pue=a("strong"),_Qo=o("transfo-xl"),uQo=o(" \u2014 "),vz=a("a"),bQo=o("TransfoXLForSequenceClassification"),vQo=o(" (Transformer-XL model)"),FQo=l(),Hv=a("li"),Bue=a("strong"),TQo=o("xlm"),MQo=o(" \u2014 "),Fz=a("a"),EQo=o("XLMForSequenceClassification"),CQo=o(" (XLM model)"),wQo=l(),Uv=a("li"),Iue=a("strong"),AQo=o("xlm-roberta"),LQo=o(" \u2014 "),Tz=a("a"),yQo=o("XLMRobertaForSequenceClassification"),xQo=o(" (XLM-RoBERTa model)"),$Qo=l(),Jv=a("li"),Nue=a("strong"),kQo=o("xlm-roberta-xl"),SQo=o(" \u2014 "),Mz=a("a"),RQo=o("XLMRobertaXLForSequenceClassification"),PQo=o(" (XLM-RoBERTa-XL model)"),BQo=l(),Yv=a("li"),que=a("strong"),IQo=o("xlnet"),NQo=o(" \u2014 "),Ez=a("a"),qQo=o("XLNetForSequenceClassification"),jQo=o(" (XLNet model)"),DQo=l(),Kv=a("li"),jue=a("strong"),GQo=o("yoso"),OQo=o(" \u2014 "),Cz=a("a"),VQo=o("YosoForSequenceClassification"),XQo=o(" (YOSO model)"),zQo=l(),Zv=a("p"),WQo=o("The model is set in evaluation mode by default using "),Due=a("code"),QQo=o("model.eval()"),HQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),UQo=o("model.train()"),JQo=l(),F(e3.$$.fragment),qze=l(),id=a("h2"),o3=a("a"),Oue=a("span"),F(Cy.$$.fragment),YQo=l(),Vue=a("span"),KQo=o("AutoModelForMultipleChoice"),jze=l(),No=a("div"),F(wy.$$.fragment),ZQo=l(),dd=a("p"),eHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wz=a("a"),oHo=o("from_pretrained()"),rHo=o(" class method or the "),Az=a("a"),tHo=o("from_config()"),aHo=o(` class
method.`),nHo=l(),Ay=a("p"),sHo=o("This class cannot be instantiated directly using "),Xue=a("code"),lHo=o("__init__()"),iHo=o(" (throws an error)."),dHo=l(),ht=a("div"),F(Ly.$$.fragment),cHo=l(),zue=a("p"),fHo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mHo=l(),cd=a("p"),gHo=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),hHo=o("not"),pHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),_Ho=o("from_pretrained()"),uHo=o(" to load the model weights."),bHo=l(),F(r3.$$.fragment),vHo=l(),to=a("div"),F(yy.$$.fragment),FHo=l(),Que=a("p"),THo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MHo=l(),Oa=a("p"),EHo=o("The model class to instantiate is selected based on the "),Hue=a("code"),CHo=o("model_type"),wHo=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),AHo=o("pretrained_model_name_or_path"),LHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),yHo=o("pretrained_model_name_or_path"),xHo=o(":"),$Ho=l(),Z=a("ul"),t3=a("li"),Yue=a("strong"),kHo=o("albert"),SHo=o(" \u2014 "),yz=a("a"),RHo=o("AlbertForMultipleChoice"),PHo=o(" (ALBERT model)"),BHo=l(),a3=a("li"),Kue=a("strong"),IHo=o("bert"),NHo=o(" \u2014 "),xz=a("a"),qHo=o("BertForMultipleChoice"),jHo=o(" (BERT model)"),DHo=l(),n3=a("li"),Zue=a("strong"),GHo=o("big_bird"),OHo=o(" \u2014 "),$z=a("a"),VHo=o("BigBirdForMultipleChoice"),XHo=o(" (BigBird model)"),zHo=l(),s3=a("li"),e2e=a("strong"),WHo=o("camembert"),QHo=o(" \u2014 "),kz=a("a"),HHo=o("CamembertForMultipleChoice"),UHo=o(" (CamemBERT model)"),JHo=l(),l3=a("li"),o2e=a("strong"),YHo=o("canine"),KHo=o(" \u2014 "),Sz=a("a"),ZHo=o("CanineForMultipleChoice"),eUo=o(" (CANINE model)"),oUo=l(),i3=a("li"),r2e=a("strong"),rUo=o("convbert"),tUo=o(" \u2014 "),Rz=a("a"),aUo=o("ConvBertForMultipleChoice"),nUo=o(" (ConvBERT model)"),sUo=l(),d3=a("li"),t2e=a("strong"),lUo=o("data2vec-text"),iUo=o(" \u2014 "),Pz=a("a"),dUo=o("Data2VecTextForMultipleChoice"),cUo=o(" (Data2VecText model)"),fUo=l(),c3=a("li"),a2e=a("strong"),mUo=o("deberta-v2"),gUo=o(" \u2014 "),Bz=a("a"),hUo=o("DebertaV2ForMultipleChoice"),pUo=o(" (DeBERTa-v2 model)"),_Uo=l(),f3=a("li"),n2e=a("strong"),uUo=o("distilbert"),bUo=o(" \u2014 "),Iz=a("a"),vUo=o("DistilBertForMultipleChoice"),FUo=o(" (DistilBERT model)"),TUo=l(),m3=a("li"),s2e=a("strong"),MUo=o("electra"),EUo=o(" \u2014 "),Nz=a("a"),CUo=o("ElectraForMultipleChoice"),wUo=o(" (ELECTRA model)"),AUo=l(),g3=a("li"),l2e=a("strong"),LUo=o("flaubert"),yUo=o(" \u2014 "),qz=a("a"),xUo=o("FlaubertForMultipleChoice"),$Uo=o(" (FlauBERT model)"),kUo=l(),h3=a("li"),i2e=a("strong"),SUo=o("fnet"),RUo=o(" \u2014 "),jz=a("a"),PUo=o("FNetForMultipleChoice"),BUo=o(" (FNet model)"),IUo=l(),p3=a("li"),d2e=a("strong"),NUo=o("funnel"),qUo=o(" \u2014 "),Dz=a("a"),jUo=o("FunnelForMultipleChoice"),DUo=o(" (Funnel Transformer model)"),GUo=l(),_3=a("li"),c2e=a("strong"),OUo=o("ibert"),VUo=o(" \u2014 "),Gz=a("a"),XUo=o("IBertForMultipleChoice"),zUo=o(" (I-BERT model)"),WUo=l(),u3=a("li"),f2e=a("strong"),QUo=o("longformer"),HUo=o(" \u2014 "),Oz=a("a"),UUo=o("LongformerForMultipleChoice"),JUo=o(" (Longformer model)"),YUo=l(),b3=a("li"),m2e=a("strong"),KUo=o("megatron-bert"),ZUo=o(" \u2014 "),Vz=a("a"),eJo=o("MegatronBertForMultipleChoice"),oJo=o(" (Megatron-BERT model)"),rJo=l(),v3=a("li"),g2e=a("strong"),tJo=o("mobilebert"),aJo=o(" \u2014 "),Xz=a("a"),nJo=o("MobileBertForMultipleChoice"),sJo=o(" (MobileBERT model)"),lJo=l(),F3=a("li"),h2e=a("strong"),iJo=o("mpnet"),dJo=o(" \u2014 "),zz=a("a"),cJo=o("MPNetForMultipleChoice"),fJo=o(" (MPNet model)"),mJo=l(),T3=a("li"),p2e=a("strong"),gJo=o("nezha"),hJo=o(" \u2014 "),Wz=a("a"),pJo=o("NezhaForMultipleChoice"),_Jo=o(" (Nezha model)"),uJo=l(),M3=a("li"),_2e=a("strong"),bJo=o("nystromformer"),vJo=o(" \u2014 "),Qz=a("a"),FJo=o("NystromformerForMultipleChoice"),TJo=o(" (Nystr\xF6mformer model)"),MJo=l(),E3=a("li"),u2e=a("strong"),EJo=o("qdqbert"),CJo=o(" \u2014 "),Hz=a("a"),wJo=o("QDQBertForMultipleChoice"),AJo=o(" (QDQBert model)"),LJo=l(),C3=a("li"),b2e=a("strong"),yJo=o("rembert"),xJo=o(" \u2014 "),Uz=a("a"),$Jo=o("RemBertForMultipleChoice"),kJo=o(" (RemBERT model)"),SJo=l(),w3=a("li"),v2e=a("strong"),RJo=o("roberta"),PJo=o(" \u2014 "),Jz=a("a"),BJo=o("RobertaForMultipleChoice"),IJo=o(" (RoBERTa model)"),NJo=l(),A3=a("li"),F2e=a("strong"),qJo=o("roformer"),jJo=o(" \u2014 "),Yz=a("a"),DJo=o("RoFormerForMultipleChoice"),GJo=o(" (RoFormer model)"),OJo=l(),L3=a("li"),T2e=a("strong"),VJo=o("squeezebert"),XJo=o(" \u2014 "),Kz=a("a"),zJo=o("SqueezeBertForMultipleChoice"),WJo=o(" (SqueezeBERT model)"),QJo=l(),y3=a("li"),M2e=a("strong"),HJo=o("xlm"),UJo=o(" \u2014 "),Zz=a("a"),JJo=o("XLMForMultipleChoice"),YJo=o(" (XLM model)"),KJo=l(),x3=a("li"),E2e=a("strong"),ZJo=o("xlm-roberta"),eYo=o(" \u2014 "),eW=a("a"),oYo=o("XLMRobertaForMultipleChoice"),rYo=o(" (XLM-RoBERTa model)"),tYo=l(),$3=a("li"),C2e=a("strong"),aYo=o("xlm-roberta-xl"),nYo=o(" \u2014 "),oW=a("a"),sYo=o("XLMRobertaXLForMultipleChoice"),lYo=o(" (XLM-RoBERTa-XL model)"),iYo=l(),k3=a("li"),w2e=a("strong"),dYo=o("xlnet"),cYo=o(" \u2014 "),rW=a("a"),fYo=o("XLNetForMultipleChoice"),mYo=o(" (XLNet model)"),gYo=l(),S3=a("li"),A2e=a("strong"),hYo=o("yoso"),pYo=o(" \u2014 "),tW=a("a"),_Yo=o("YosoForMultipleChoice"),uYo=o(" (YOSO model)"),bYo=l(),R3=a("p"),vYo=o("The model is set in evaluation mode by default using "),L2e=a("code"),FYo=o("model.eval()"),TYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y2e=a("code"),MYo=o("model.train()"),EYo=l(),F(P3.$$.fragment),Dze=l(),fd=a("h2"),B3=a("a"),x2e=a("span"),F(xy.$$.fragment),CYo=l(),$2e=a("span"),wYo=o("AutoModelForNextSentencePrediction"),Gze=l(),qo=a("div"),F($y.$$.fragment),AYo=l(),md=a("p"),LYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aW=a("a"),yYo=o("from_pretrained()"),xYo=o(" class method or the "),nW=a("a"),$Yo=o("from_config()"),kYo=o(` class
method.`),SYo=l(),ky=a("p"),RYo=o("This class cannot be instantiated directly using "),k2e=a("code"),PYo=o("__init__()"),BYo=o(" (throws an error)."),IYo=l(),pt=a("div"),F(Sy.$$.fragment),NYo=l(),S2e=a("p"),qYo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jYo=l(),gd=a("p"),DYo=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),GYo=o("not"),OYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),VYo=o("from_pretrained()"),XYo=o(" to load the model weights."),zYo=l(),F(I3.$$.fragment),WYo=l(),ao=a("div"),F(Ry.$$.fragment),QYo=l(),P2e=a("p"),HYo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UYo=l(),Va=a("p"),JYo=o("The model class to instantiate is selected based on the "),B2e=a("code"),YYo=o("model_type"),KYo=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),ZYo=o("pretrained_model_name_or_path"),eKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),oKo=o("pretrained_model_name_or_path"),rKo=o(":"),tKo=l(),jo=a("ul"),N3=a("li"),q2e=a("strong"),aKo=o("bert"),nKo=o(" \u2014 "),lW=a("a"),sKo=o("BertForNextSentencePrediction"),lKo=o(" (BERT model)"),iKo=l(),q3=a("li"),j2e=a("strong"),dKo=o("fnet"),cKo=o(" \u2014 "),iW=a("a"),fKo=o("FNetForNextSentencePrediction"),mKo=o(" (FNet model)"),gKo=l(),j3=a("li"),D2e=a("strong"),hKo=o("megatron-bert"),pKo=o(" \u2014 "),dW=a("a"),_Ko=o("MegatronBertForNextSentencePrediction"),uKo=o(" (Megatron-BERT model)"),bKo=l(),D3=a("li"),G2e=a("strong"),vKo=o("mobilebert"),FKo=o(" \u2014 "),cW=a("a"),TKo=o("MobileBertForNextSentencePrediction"),MKo=o(" (MobileBERT model)"),EKo=l(),G3=a("li"),O2e=a("strong"),CKo=o("nezha"),wKo=o(" \u2014 "),fW=a("a"),AKo=o("NezhaForNextSentencePrediction"),LKo=o(" (Nezha model)"),yKo=l(),O3=a("li"),V2e=a("strong"),xKo=o("qdqbert"),$Ko=o(" \u2014 "),mW=a("a"),kKo=o("QDQBertForNextSentencePrediction"),SKo=o(" (QDQBert model)"),RKo=l(),V3=a("p"),PKo=o("The model is set in evaluation mode by default using "),X2e=a("code"),BKo=o("model.eval()"),IKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z2e=a("code"),NKo=o("model.train()"),qKo=l(),F(X3.$$.fragment),Oze=l(),hd=a("h2"),z3=a("a"),W2e=a("span"),F(Py.$$.fragment),jKo=l(),Q2e=a("span"),DKo=o("AutoModelForTokenClassification"),Vze=l(),Do=a("div"),F(By.$$.fragment),GKo=l(),pd=a("p"),OKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gW=a("a"),VKo=o("from_pretrained()"),XKo=o(" class method or the "),hW=a("a"),zKo=o("from_config()"),WKo=o(` class
method.`),QKo=l(),Iy=a("p"),HKo=o("This class cannot be instantiated directly using "),H2e=a("code"),UKo=o("__init__()"),JKo=o(" (throws an error)."),YKo=l(),_t=a("div"),F(Ny.$$.fragment),KKo=l(),U2e=a("p"),ZKo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eZo=l(),_d=a("p"),oZo=o(`Note:
Loading a model from its configuration file does `),J2e=a("strong"),rZo=o("not"),tZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),aZo=o("from_pretrained()"),nZo=o(" to load the model weights."),sZo=l(),F(W3.$$.fragment),lZo=l(),no=a("div"),F(qy.$$.fragment),iZo=l(),Y2e=a("p"),dZo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cZo=l(),Xa=a("p"),fZo=o("The model class to instantiate is selected based on the "),K2e=a("code"),mZo=o("model_type"),gZo=o(` property of the config object (either
passed as an argument or loaded from `),Z2e=a("code"),hZo=o("pretrained_model_name_or_path"),pZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),_Zo=o("pretrained_model_name_or_path"),uZo=o(":"),bZo=l(),J=a("ul"),Q3=a("li"),o1e=a("strong"),vZo=o("albert"),FZo=o(" \u2014 "),_W=a("a"),TZo=o("AlbertForTokenClassification"),MZo=o(" (ALBERT model)"),EZo=l(),H3=a("li"),r1e=a("strong"),CZo=o("bert"),wZo=o(" \u2014 "),uW=a("a"),AZo=o("BertForTokenClassification"),LZo=o(" (BERT model)"),yZo=l(),U3=a("li"),t1e=a("strong"),xZo=o("big_bird"),$Zo=o(" \u2014 "),bW=a("a"),kZo=o("BigBirdForTokenClassification"),SZo=o(" (BigBird model)"),RZo=l(),J3=a("li"),a1e=a("strong"),PZo=o("bloom"),BZo=o(" \u2014 "),vW=a("a"),IZo=o("BloomForTokenClassification"),NZo=o(" (BLOOM model)"),qZo=l(),Y3=a("li"),n1e=a("strong"),jZo=o("camembert"),DZo=o(" \u2014 "),FW=a("a"),GZo=o("CamembertForTokenClassification"),OZo=o(" (CamemBERT model)"),VZo=l(),K3=a("li"),s1e=a("strong"),XZo=o("canine"),zZo=o(" \u2014 "),TW=a("a"),WZo=o("CanineForTokenClassification"),QZo=o(" (CANINE model)"),HZo=l(),Z3=a("li"),l1e=a("strong"),UZo=o("convbert"),JZo=o(" \u2014 "),MW=a("a"),YZo=o("ConvBertForTokenClassification"),KZo=o(" (ConvBERT model)"),ZZo=l(),eF=a("li"),i1e=a("strong"),eer=o("data2vec-text"),oer=o(" \u2014 "),EW=a("a"),rer=o("Data2VecTextForTokenClassification"),ter=o(" (Data2VecText model)"),aer=l(),oF=a("li"),d1e=a("strong"),ner=o("deberta"),ser=o(" \u2014 "),CW=a("a"),ler=o("DebertaForTokenClassification"),ier=o(" (DeBERTa model)"),der=l(),rF=a("li"),c1e=a("strong"),cer=o("deberta-v2"),fer=o(" \u2014 "),wW=a("a"),mer=o("DebertaV2ForTokenClassification"),ger=o(" (DeBERTa-v2 model)"),her=l(),tF=a("li"),f1e=a("strong"),per=o("distilbert"),_er=o(" \u2014 "),AW=a("a"),uer=o("DistilBertForTokenClassification"),ber=o(" (DistilBERT model)"),ver=l(),aF=a("li"),m1e=a("strong"),Fer=o("electra"),Ter=o(" \u2014 "),LW=a("a"),Mer=o("ElectraForTokenClassification"),Eer=o(" (ELECTRA model)"),Cer=l(),nF=a("li"),g1e=a("strong"),wer=o("flaubert"),Aer=o(" \u2014 "),yW=a("a"),Ler=o("FlaubertForTokenClassification"),yer=o(" (FlauBERT model)"),xer=l(),sF=a("li"),h1e=a("strong"),$er=o("fnet"),ker=o(" \u2014 "),xW=a("a"),Ser=o("FNetForTokenClassification"),Rer=o(" (FNet model)"),Per=l(),lF=a("li"),p1e=a("strong"),Ber=o("funnel"),Ier=o(" \u2014 "),$W=a("a"),Ner=o("FunnelForTokenClassification"),qer=o(" (Funnel Transformer model)"),jer=l(),iF=a("li"),_1e=a("strong"),Der=o("gpt2"),Ger=o(" \u2014 "),kW=a("a"),Oer=o("GPT2ForTokenClassification"),Ver=o(" (OpenAI GPT-2 model)"),Xer=l(),dF=a("li"),u1e=a("strong"),zer=o("ibert"),Wer=o(" \u2014 "),SW=a("a"),Qer=o("IBertForTokenClassification"),Her=o(" (I-BERT model)"),Uer=l(),cF=a("li"),b1e=a("strong"),Jer=o("layoutlm"),Yer=o(" \u2014 "),RW=a("a"),Ker=o("LayoutLMForTokenClassification"),Zer=o(" (LayoutLM model)"),eor=l(),fF=a("li"),v1e=a("strong"),oor=o("layoutlmv2"),ror=o(" \u2014 "),PW=a("a"),tor=o("LayoutLMv2ForTokenClassification"),aor=o(" (LayoutLMv2 model)"),nor=l(),mF=a("li"),F1e=a("strong"),sor=o("layoutlmv3"),lor=o(" \u2014 "),BW=a("a"),ior=o("LayoutLMv3ForTokenClassification"),dor=o(" (LayoutLMv3 model)"),cor=l(),gF=a("li"),T1e=a("strong"),mor=o("longformer"),gor=o(" \u2014 "),IW=a("a"),hor=o("LongformerForTokenClassification"),por=o(" (Longformer model)"),_or=l(),hF=a("li"),M1e=a("strong"),uor=o("megatron-bert"),bor=o(" \u2014 "),NW=a("a"),vor=o("MegatronBertForTokenClassification"),For=o(" (Megatron-BERT model)"),Tor=l(),pF=a("li"),E1e=a("strong"),Mor=o("mobilebert"),Eor=o(" \u2014 "),qW=a("a"),Cor=o("MobileBertForTokenClassification"),wor=o(" (MobileBERT model)"),Aor=l(),_F=a("li"),C1e=a("strong"),Lor=o("mpnet"),yor=o(" \u2014 "),jW=a("a"),xor=o("MPNetForTokenClassification"),$or=o(" (MPNet model)"),kor=l(),uF=a("li"),w1e=a("strong"),Sor=o("nezha"),Ror=o(" \u2014 "),DW=a("a"),Por=o("NezhaForTokenClassification"),Bor=o(" (Nezha model)"),Ior=l(),bF=a("li"),A1e=a("strong"),Nor=o("nystromformer"),qor=o(" \u2014 "),GW=a("a"),jor=o("NystromformerForTokenClassification"),Dor=o(" (Nystr\xF6mformer model)"),Gor=l(),vF=a("li"),L1e=a("strong"),Oor=o("qdqbert"),Vor=o(" \u2014 "),OW=a("a"),Xor=o("QDQBertForTokenClassification"),zor=o(" (QDQBert model)"),Wor=l(),FF=a("li"),y1e=a("strong"),Qor=o("rembert"),Hor=o(" \u2014 "),VW=a("a"),Uor=o("RemBertForTokenClassification"),Jor=o(" (RemBERT model)"),Yor=l(),TF=a("li"),x1e=a("strong"),Kor=o("roberta"),Zor=o(" \u2014 "),XW=a("a"),err=o("RobertaForTokenClassification"),orr=o(" (RoBERTa model)"),rrr=l(),MF=a("li"),$1e=a("strong"),trr=o("roformer"),arr=o(" \u2014 "),zW=a("a"),nrr=o("RoFormerForTokenClassification"),srr=o(" (RoFormer model)"),lrr=l(),EF=a("li"),k1e=a("strong"),irr=o("squeezebert"),drr=o(" \u2014 "),WW=a("a"),crr=o("SqueezeBertForTokenClassification"),frr=o(" (SqueezeBERT model)"),mrr=l(),CF=a("li"),S1e=a("strong"),grr=o("xlm"),hrr=o(" \u2014 "),QW=a("a"),prr=o("XLMForTokenClassification"),_rr=o(" (XLM model)"),urr=l(),wF=a("li"),R1e=a("strong"),brr=o("xlm-roberta"),vrr=o(" \u2014 "),HW=a("a"),Frr=o("XLMRobertaForTokenClassification"),Trr=o(" (XLM-RoBERTa model)"),Mrr=l(),AF=a("li"),P1e=a("strong"),Err=o("xlm-roberta-xl"),Crr=o(" \u2014 "),UW=a("a"),wrr=o("XLMRobertaXLForTokenClassification"),Arr=o(" (XLM-RoBERTa-XL model)"),Lrr=l(),LF=a("li"),B1e=a("strong"),yrr=o("xlnet"),xrr=o(" \u2014 "),JW=a("a"),$rr=o("XLNetForTokenClassification"),krr=o(" (XLNet model)"),Srr=l(),yF=a("li"),I1e=a("strong"),Rrr=o("yoso"),Prr=o(" \u2014 "),YW=a("a"),Brr=o("YosoForTokenClassification"),Irr=o(" (YOSO model)"),Nrr=l(),xF=a("p"),qrr=o("The model is set in evaluation mode by default using "),N1e=a("code"),jrr=o("model.eval()"),Drr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=a("code"),Grr=o("model.train()"),Orr=l(),F($F.$$.fragment),Xze=l(),ud=a("h2"),kF=a("a"),j1e=a("span"),F(jy.$$.fragment),Vrr=l(),D1e=a("span"),Xrr=o("AutoModelForQuestionAnswering"),zze=l(),Go=a("div"),F(Dy.$$.fragment),zrr=l(),bd=a("p"),Wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KW=a("a"),Qrr=o("from_pretrained()"),Hrr=o(" class method or the "),ZW=a("a"),Urr=o("from_config()"),Jrr=o(` class
method.`),Yrr=l(),Gy=a("p"),Krr=o("This class cannot be instantiated directly using "),G1e=a("code"),Zrr=o("__init__()"),etr=o(" (throws an error)."),otr=l(),ut=a("div"),F(Oy.$$.fragment),rtr=l(),O1e=a("p"),ttr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),atr=l(),vd=a("p"),ntr=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),str=o("not"),ltr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eQ=a("a"),itr=o("from_pretrained()"),dtr=o(" to load the model weights."),ctr=l(),F(SF.$$.fragment),ftr=l(),so=a("div"),F(Vy.$$.fragment),mtr=l(),X1e=a("p"),gtr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),htr=l(),za=a("p"),ptr=o("The model class to instantiate is selected based on the "),z1e=a("code"),_tr=o("model_type"),utr=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=a("code"),Ftr=o("pretrained_model_name_or_path"),Ttr=o(":"),Mtr=l(),V=a("ul"),RF=a("li"),H1e=a("strong"),Etr=o("albert"),Ctr=o(" \u2014 "),oQ=a("a"),wtr=o("AlbertForQuestionAnswering"),Atr=o(" (ALBERT model)"),Ltr=l(),PF=a("li"),U1e=a("strong"),ytr=o("bart"),xtr=o(" \u2014 "),rQ=a("a"),$tr=o("BartForQuestionAnswering"),ktr=o(" (BART model)"),Str=l(),BF=a("li"),J1e=a("strong"),Rtr=o("bert"),Ptr=o(" \u2014 "),tQ=a("a"),Btr=o("BertForQuestionAnswering"),Itr=o(" (BERT model)"),Ntr=l(),IF=a("li"),Y1e=a("strong"),qtr=o("big_bird"),jtr=o(" \u2014 "),aQ=a("a"),Dtr=o("BigBirdForQuestionAnswering"),Gtr=o(" (BigBird model)"),Otr=l(),NF=a("li"),K1e=a("strong"),Vtr=o("bigbird_pegasus"),Xtr=o(" \u2014 "),nQ=a("a"),ztr=o("BigBirdPegasusForQuestionAnswering"),Wtr=o(" (BigBird-Pegasus model)"),Qtr=l(),qF=a("li"),Z1e=a("strong"),Htr=o("camembert"),Utr=o(" \u2014 "),sQ=a("a"),Jtr=o("CamembertForQuestionAnswering"),Ytr=o(" (CamemBERT model)"),Ktr=l(),jF=a("li"),ebe=a("strong"),Ztr=o("canine"),ear=o(" \u2014 "),lQ=a("a"),oar=o("CanineForQuestionAnswering"),rar=o(" (CANINE model)"),tar=l(),DF=a("li"),obe=a("strong"),aar=o("convbert"),nar=o(" \u2014 "),iQ=a("a"),sar=o("ConvBertForQuestionAnswering"),lar=o(" (ConvBERT model)"),iar=l(),GF=a("li"),rbe=a("strong"),dar=o("data2vec-text"),car=o(" \u2014 "),dQ=a("a"),far=o("Data2VecTextForQuestionAnswering"),mar=o(" (Data2VecText model)"),gar=l(),OF=a("li"),tbe=a("strong"),har=o("deberta"),par=o(" \u2014 "),cQ=a("a"),_ar=o("DebertaForQuestionAnswering"),uar=o(" (DeBERTa model)"),bar=l(),VF=a("li"),abe=a("strong"),Far=o("deberta-v2"),Tar=o(" \u2014 "),fQ=a("a"),Mar=o("DebertaV2ForQuestionAnswering"),Ear=o(" (DeBERTa-v2 model)"),Car=l(),XF=a("li"),nbe=a("strong"),war=o("distilbert"),Aar=o(" \u2014 "),mQ=a("a"),Lar=o("DistilBertForQuestionAnswering"),yar=o(" (DistilBERT model)"),xar=l(),zF=a("li"),sbe=a("strong"),$ar=o("electra"),kar=o(" \u2014 "),gQ=a("a"),Sar=o("ElectraForQuestionAnswering"),Rar=o(" (ELECTRA model)"),Par=l(),WF=a("li"),lbe=a("strong"),Bar=o("flaubert"),Iar=o(" \u2014 "),hQ=a("a"),Nar=o("FlaubertForQuestionAnsweringSimple"),qar=o(" (FlauBERT model)"),jar=l(),QF=a("li"),ibe=a("strong"),Dar=o("fnet"),Gar=o(" \u2014 "),pQ=a("a"),Oar=o("FNetForQuestionAnswering"),Var=o(" (FNet model)"),Xar=l(),HF=a("li"),dbe=a("strong"),zar=o("funnel"),War=o(" \u2014 "),_Q=a("a"),Qar=o("FunnelForQuestionAnswering"),Har=o(" (Funnel Transformer model)"),Uar=l(),UF=a("li"),cbe=a("strong"),Jar=o("gptj"),Yar=o(" \u2014 "),uQ=a("a"),Kar=o("GPTJForQuestionAnswering"),Zar=o(" (GPT-J model)"),enr=l(),JF=a("li"),fbe=a("strong"),onr=o("ibert"),rnr=o(" \u2014 "),bQ=a("a"),tnr=o("IBertForQuestionAnswering"),anr=o(" (I-BERT model)"),nnr=l(),YF=a("li"),mbe=a("strong"),snr=o("layoutlmv2"),lnr=o(" \u2014 "),vQ=a("a"),inr=o("LayoutLMv2ForQuestionAnswering"),dnr=o(" (LayoutLMv2 model)"),cnr=l(),KF=a("li"),gbe=a("strong"),fnr=o("layoutlmv3"),mnr=o(" \u2014 "),FQ=a("a"),gnr=o("LayoutLMv3ForQuestionAnswering"),hnr=o(" (LayoutLMv3 model)"),pnr=l(),ZF=a("li"),hbe=a("strong"),_nr=o("led"),unr=o(" \u2014 "),TQ=a("a"),bnr=o("LEDForQuestionAnswering"),vnr=o(" (LED model)"),Fnr=l(),e6=a("li"),pbe=a("strong"),Tnr=o("longformer"),Mnr=o(" \u2014 "),MQ=a("a"),Enr=o("LongformerForQuestionAnswering"),Cnr=o(" (Longformer model)"),wnr=l(),o6=a("li"),_be=a("strong"),Anr=o("lxmert"),Lnr=o(" \u2014 "),EQ=a("a"),ynr=o("LxmertForQuestionAnswering"),xnr=o(" (LXMERT model)"),$nr=l(),r6=a("li"),ube=a("strong"),knr=o("mbart"),Snr=o(" \u2014 "),CQ=a("a"),Rnr=o("MBartForQuestionAnswering"),Pnr=o(" (mBART model)"),Bnr=l(),t6=a("li"),bbe=a("strong"),Inr=o("megatron-bert"),Nnr=o(" \u2014 "),wQ=a("a"),qnr=o("MegatronBertForQuestionAnswering"),jnr=o(" (Megatron-BERT model)"),Dnr=l(),a6=a("li"),vbe=a("strong"),Gnr=o("mobilebert"),Onr=o(" \u2014 "),AQ=a("a"),Vnr=o("MobileBertForQuestionAnswering"),Xnr=o(" (MobileBERT model)"),znr=l(),n6=a("li"),Fbe=a("strong"),Wnr=o("mpnet"),Qnr=o(" \u2014 "),LQ=a("a"),Hnr=o("MPNetForQuestionAnswering"),Unr=o(" (MPNet model)"),Jnr=l(),s6=a("li"),Tbe=a("strong"),Ynr=o("mvp"),Knr=o(" \u2014 "),yQ=a("a"),Znr=o("MvpForQuestionAnswering"),esr=o(" (MVP model)"),osr=l(),l6=a("li"),Mbe=a("strong"),rsr=o("nezha"),tsr=o(" \u2014 "),xQ=a("a"),asr=o("NezhaForQuestionAnswering"),nsr=o(" (Nezha model)"),ssr=l(),i6=a("li"),Ebe=a("strong"),lsr=o("nystromformer"),isr=o(" \u2014 "),$Q=a("a"),dsr=o("NystromformerForQuestionAnswering"),csr=o(" (Nystr\xF6mformer model)"),fsr=l(),d6=a("li"),Cbe=a("strong"),msr=o("qdqbert"),gsr=o(" \u2014 "),kQ=a("a"),hsr=o("QDQBertForQuestionAnswering"),psr=o(" (QDQBert model)"),_sr=l(),c6=a("li"),wbe=a("strong"),usr=o("reformer"),bsr=o(" \u2014 "),SQ=a("a"),vsr=o("ReformerForQuestionAnswering"),Fsr=o(" (Reformer model)"),Tsr=l(),f6=a("li"),Abe=a("strong"),Msr=o("rembert"),Esr=o(" \u2014 "),RQ=a("a"),Csr=o("RemBertForQuestionAnswering"),wsr=o(" (RemBERT model)"),Asr=l(),m6=a("li"),Lbe=a("strong"),Lsr=o("roberta"),ysr=o(" \u2014 "),PQ=a("a"),xsr=o("RobertaForQuestionAnswering"),$sr=o(" (RoBERTa model)"),ksr=l(),g6=a("li"),ybe=a("strong"),Ssr=o("roformer"),Rsr=o(" \u2014 "),BQ=a("a"),Psr=o("RoFormerForQuestionAnswering"),Bsr=o(" (RoFormer model)"),Isr=l(),h6=a("li"),xbe=a("strong"),Nsr=o("splinter"),qsr=o(" \u2014 "),IQ=a("a"),jsr=o("SplinterForQuestionAnswering"),Dsr=o(" (Splinter model)"),Gsr=l(),p6=a("li"),$be=a("strong"),Osr=o("squeezebert"),Vsr=o(" \u2014 "),NQ=a("a"),Xsr=o("SqueezeBertForQuestionAnswering"),zsr=o(" (SqueezeBERT model)"),Wsr=l(),_6=a("li"),kbe=a("strong"),Qsr=o("xlm"),Hsr=o(" \u2014 "),qQ=a("a"),Usr=o("XLMForQuestionAnsweringSimple"),Jsr=o(" (XLM model)"),Ysr=l(),u6=a("li"),Sbe=a("strong"),Ksr=o("xlm-roberta"),Zsr=o(" \u2014 "),jQ=a("a"),elr=o("XLMRobertaForQuestionAnswering"),olr=o(" (XLM-RoBERTa model)"),rlr=l(),b6=a("li"),Rbe=a("strong"),tlr=o("xlm-roberta-xl"),alr=o(" \u2014 "),DQ=a("a"),nlr=o("XLMRobertaXLForQuestionAnswering"),slr=o(" (XLM-RoBERTa-XL model)"),llr=l(),v6=a("li"),Pbe=a("strong"),ilr=o("xlnet"),dlr=o(" \u2014 "),GQ=a("a"),clr=o("XLNetForQuestionAnsweringSimple"),flr=o(" (XLNet model)"),mlr=l(),F6=a("li"),Bbe=a("strong"),glr=o("yoso"),hlr=o(" \u2014 "),OQ=a("a"),plr=o("YosoForQuestionAnswering"),_lr=o(" (YOSO model)"),ulr=l(),T6=a("p"),blr=o("The model is set in evaluation mode by default using "),Ibe=a("code"),vlr=o("model.eval()"),Flr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=a("code"),Tlr=o("model.train()"),Mlr=l(),F(M6.$$.fragment),Wze=l(),Fd=a("h2"),E6=a("a"),qbe=a("span"),F(Xy.$$.fragment),Elr=l(),jbe=a("span"),Clr=o("AutoModelForTableQuestionAnswering"),Qze=l(),Oo=a("div"),F(zy.$$.fragment),wlr=l(),Td=a("p"),Alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),VQ=a("a"),Llr=o("from_pretrained()"),ylr=o(" class method or the "),XQ=a("a"),xlr=o("from_config()"),$lr=o(` class
method.`),klr=l(),Wy=a("p"),Slr=o("This class cannot be instantiated directly using "),Dbe=a("code"),Rlr=o("__init__()"),Plr=o(" (throws an error)."),Blr=l(),bt=a("div"),F(Qy.$$.fragment),Ilr=l(),Gbe=a("p"),Nlr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qlr=l(),Md=a("p"),jlr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),Dlr=o("not"),Glr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=a("a"),Olr=o("from_pretrained()"),Vlr=o(" to load the model weights."),Xlr=l(),F(C6.$$.fragment),zlr=l(),lo=a("div"),F(Hy.$$.fragment),Wlr=l(),Vbe=a("p"),Qlr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Hlr=l(),Wa=a("p"),Ulr=o("The model class to instantiate is selected based on the "),Xbe=a("code"),Jlr=o("model_type"),Ylr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),Klr=o("pretrained_model_name_or_path"),Zlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),eir=o("pretrained_model_name_or_path"),oir=o(":"),rir=l(),Qbe=a("ul"),w6=a("li"),Hbe=a("strong"),tir=o("tapas"),air=o(" \u2014 "),WQ=a("a"),nir=o("TapasForQuestionAnswering"),sir=o(" (TAPAS model)"),lir=l(),A6=a("p"),iir=o("The model is set in evaluation mode by default using "),Ube=a("code"),dir=o("model.eval()"),cir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=a("code"),fir=o("model.train()"),mir=l(),F(L6.$$.fragment),Hze=l(),Ed=a("h2"),y6=a("a"),Ybe=a("span"),F(Uy.$$.fragment),gir=l(),Kbe=a("span"),hir=o("AutoModelForImageClassification"),Uze=l(),Vo=a("div"),F(Jy.$$.fragment),pir=l(),Cd=a("p"),_ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QQ=a("a"),uir=o("from_pretrained()"),bir=o(" class method or the "),HQ=a("a"),vir=o("from_config()"),Fir=o(` class
method.`),Tir=l(),Yy=a("p"),Mir=o("This class cannot be instantiated directly using "),Zbe=a("code"),Eir=o("__init__()"),Cir=o(" (throws an error)."),wir=l(),vt=a("div"),F(Ky.$$.fragment),Air=l(),eve=a("p"),Lir=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yir=l(),wd=a("p"),xir=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),$ir=o("not"),kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=a("a"),Sir=o("from_pretrained()"),Rir=o(" to load the model weights."),Pir=l(),F(x6.$$.fragment),Bir=l(),io=a("div"),F(Zy.$$.fragment),Iir=l(),rve=a("p"),Nir=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qir=l(),Qa=a("p"),jir=o("The model class to instantiate is selected based on the "),tve=a("code"),Dir=o("model_type"),Gir=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),Oir=o("pretrained_model_name_or_path"),Vir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),Xir=o("pretrained_model_name_or_path"),zir=o(":"),Wir=l(),be=a("ul"),$6=a("li"),sve=a("strong"),Qir=o("beit"),Hir=o(" \u2014 "),JQ=a("a"),Uir=o("BeitForImageClassification"),Jir=o(" (BEiT model)"),Yir=l(),k6=a("li"),lve=a("strong"),Kir=o("convnext"),Zir=o(" \u2014 "),YQ=a("a"),edr=o("ConvNextForImageClassification"),odr=o(" (ConvNeXT model)"),rdr=l(),S6=a("li"),ive=a("strong"),tdr=o("cvt"),adr=o(" \u2014 "),KQ=a("a"),ndr=o("CvtForImageClassification"),sdr=o(" (CvT model)"),ldr=l(),R6=a("li"),dve=a("strong"),idr=o("data2vec-vision"),ddr=o(" \u2014 "),ZQ=a("a"),cdr=o("Data2VecVisionForImageClassification"),fdr=o(" (Data2VecVision model)"),mdr=l(),Ys=a("li"),cve=a("strong"),gdr=o("deit"),hdr=o(" \u2014 "),eH=a("a"),pdr=o("DeiTForImageClassification"),_dr=o(" or "),oH=a("a"),udr=o("DeiTForImageClassificationWithTeacher"),bdr=o(" (DeiT model)"),vdr=l(),P6=a("li"),fve=a("strong"),Fdr=o("imagegpt"),Tdr=o(" \u2014 "),rH=a("a"),Mdr=o("ImageGPTForImageClassification"),Edr=o(" (ImageGPT model)"),Cdr=l(),Ks=a("li"),mve=a("strong"),wdr=o("levit"),Adr=o(" \u2014 "),tH=a("a"),Ldr=o("LevitForImageClassification"),ydr=o(" or "),aH=a("a"),xdr=o("LevitForImageClassificationWithTeacher"),$dr=o(" (LeViT model)"),kdr=l(),B6=a("li"),gve=a("strong"),Sdr=o("mobilevit"),Rdr=o(" \u2014 "),nH=a("a"),Pdr=o("MobileViTForImageClassification"),Bdr=o(" (MobileViT model)"),Idr=l(),Ft=a("li"),hve=a("strong"),Ndr=o("perceiver"),qdr=o(" \u2014 "),sH=a("a"),jdr=o("PerceiverForImageClassificationLearned"),Ddr=o(" or "),lH=a("a"),Gdr=o("PerceiverForImageClassificationFourier"),Odr=o(" or "),iH=a("a"),Vdr=o("PerceiverForImageClassificationConvProcessing"),Xdr=o(" (Perceiver model)"),zdr=l(),I6=a("li"),pve=a("strong"),Wdr=o("poolformer"),Qdr=o(" \u2014 "),dH=a("a"),Hdr=o("PoolFormerForImageClassification"),Udr=o(" (PoolFormer model)"),Jdr=l(),N6=a("li"),_ve=a("strong"),Ydr=o("regnet"),Kdr=o(" \u2014 "),cH=a("a"),Zdr=o("RegNetForImageClassification"),ecr=o(" (RegNet model)"),ocr=l(),q6=a("li"),uve=a("strong"),rcr=o("resnet"),tcr=o(" \u2014 "),fH=a("a"),acr=o("ResNetForImageClassification"),ncr=o(" (ResNet model)"),scr=l(),j6=a("li"),bve=a("strong"),lcr=o("segformer"),icr=o(" \u2014 "),mH=a("a"),dcr=o("SegformerForImageClassification"),ccr=o(" (SegFormer model)"),fcr=l(),D6=a("li"),vve=a("strong"),mcr=o("swin"),gcr=o(" \u2014 "),gH=a("a"),hcr=o("SwinForImageClassification"),pcr=o(" (Swin Transformer model)"),_cr=l(),G6=a("li"),Fve=a("strong"),ucr=o("swinv2"),bcr=o(" \u2014 "),hH=a("a"),vcr=o("Swinv2ForImageClassification"),Fcr=o(" (Swin Transformer V2 model)"),Tcr=l(),O6=a("li"),Tve=a("strong"),Mcr=o("van"),Ecr=o(" \u2014 "),pH=a("a"),Ccr=o("VanForImageClassification"),wcr=o(" (VAN model)"),Acr=l(),V6=a("li"),Mve=a("strong"),Lcr=o("vit"),ycr=o(" \u2014 "),_H=a("a"),xcr=o("ViTForImageClassification"),$cr=o(" (ViT model)"),kcr=l(),X6=a("p"),Scr=o("The model is set in evaluation mode by default using "),Eve=a("code"),Rcr=o("model.eval()"),Pcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=a("code"),Bcr=o("model.train()"),Icr=l(),F(z6.$$.fragment),Jze=l(),Ad=a("h2"),W6=a("a"),wve=a("span"),F(e9.$$.fragment),Ncr=l(),Ave=a("span"),qcr=o("AutoModelForVision2Seq"),Yze=l(),Xo=a("div"),F(o9.$$.fragment),jcr=l(),Ld=a("p"),Dcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uH=a("a"),Gcr=o("from_pretrained()"),Ocr=o(" class method or the "),bH=a("a"),Vcr=o("from_config()"),Xcr=o(` class
method.`),zcr=l(),r9=a("p"),Wcr=o("This class cannot be instantiated directly using "),Lve=a("code"),Qcr=o("__init__()"),Hcr=o(" (throws an error)."),Ucr=l(),Tt=a("div"),F(t9.$$.fragment),Jcr=l(),yve=a("p"),Ycr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Kcr=l(),yd=a("p"),Zcr=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),efr=o("not"),ofr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),rfr=o("from_pretrained()"),tfr=o(" to load the model weights."),afr=l(),F(Q6.$$.fragment),nfr=l(),co=a("div"),F(a9.$$.fragment),sfr=l(),$ve=a("p"),lfr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ifr=l(),Ha=a("p"),dfr=o("The model class to instantiate is selected based on the "),kve=a("code"),cfr=o("model_type"),ffr=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),mfr=o("pretrained_model_name_or_path"),gfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),hfr=o("pretrained_model_name_or_path"),pfr=o(":"),_fr=l(),Pve=a("ul"),H6=a("li"),Bve=a("strong"),ufr=o("vision-encoder-decoder"),bfr=o(" \u2014 "),FH=a("a"),vfr=o("VisionEncoderDecoderModel"),Ffr=o(" (Vision Encoder decoder model)"),Tfr=l(),U6=a("p"),Mfr=o("The model is set in evaluation mode by default using "),Ive=a("code"),Efr=o("model.eval()"),Cfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nve=a("code"),wfr=o("model.train()"),Afr=l(),F(J6.$$.fragment),Kze=l(),xd=a("h2"),Y6=a("a"),qve=a("span"),F(n9.$$.fragment),Lfr=l(),jve=a("span"),yfr=o("AutoModelForVisualQuestionAnswering"),Zze=l(),zo=a("div"),F(s9.$$.fragment),xfr=l(),$d=a("p"),$fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),TH=a("a"),kfr=o("from_pretrained()"),Sfr=o(" class method or the "),MH=a("a"),Rfr=o("from_config()"),Pfr=o(` class
method.`),Bfr=l(),l9=a("p"),Ifr=o("This class cannot be instantiated directly using "),Dve=a("code"),Nfr=o("__init__()"),qfr=o(" (throws an error)."),jfr=l(),Mt=a("div"),F(i9.$$.fragment),Dfr=l(),Gve=a("p"),Gfr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Ofr=l(),kd=a("p"),Vfr=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),Xfr=o("not"),zfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),Wfr=o("from_pretrained()"),Qfr=o(" to load the model weights."),Hfr=l(),F(K6.$$.fragment),Ufr=l(),fo=a("div"),F(d9.$$.fragment),Jfr=l(),Vve=a("p"),Yfr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Kfr=l(),Ua=a("p"),Zfr=o("The model class to instantiate is selected based on the "),Xve=a("code"),emr=o("model_type"),omr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(":"),smr=l(),Qve=a("ul"),Z6=a("li"),Hve=a("strong"),lmr=o("vilt"),imr=o(" \u2014 "),CH=a("a"),dmr=o("ViltForQuestionAnswering"),cmr=o(" (ViLT model)"),fmr=l(),eT=a("p"),mmr=o("The model is set in evaluation mode by default using "),Uve=a("code"),gmr=o("model.eval()"),hmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jve=a("code"),pmr=o("model.train()"),_mr=l(),F(oT.$$.fragment),eWe=l(),Sd=a("h2"),rT=a("a"),Yve=a("span"),F(c9.$$.fragment),umr=l(),Kve=a("span"),bmr=o("AutoModelForAudioClassification"),oWe=l(),Wo=a("div"),F(f9.$$.fragment),vmr=l(),Rd=a("p"),Fmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wH=a("a"),Tmr=o("from_pretrained()"),Mmr=o(" class method or the "),AH=a("a"),Emr=o("from_config()"),Cmr=o(` class
method.`),wmr=l(),m9=a("p"),Amr=o("This class cannot be instantiated directly using "),Zve=a("code"),Lmr=o("__init__()"),ymr=o(" (throws an error)."),xmr=l(),Et=a("div"),F(g9.$$.fragment),$mr=l(),e3e=a("p"),kmr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Smr=l(),Pd=a("p"),Rmr=o(`Note:
Loading a model from its configuration file does `),o3e=a("strong"),Pmr=o("not"),Bmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),Imr=o("from_pretrained()"),Nmr=o(" to load the model weights."),qmr=l(),F(tT.$$.fragment),jmr=l(),mo=a("div"),F(h9.$$.fragment),Dmr=l(),r3e=a("p"),Gmr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Omr=l(),Ja=a("p"),Vmr=o("The model class to instantiate is selected based on the "),t3e=a("code"),Xmr=o("model_type"),zmr=o(` property of the config object (either
passed as an argument or loaded from `),a3e=a("code"),Wmr=o("pretrained_model_name_or_path"),Qmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=a("code"),Hmr=o("pretrained_model_name_or_path"),Umr=o(":"),Jmr=l(),Pe=a("ul"),aT=a("li"),s3e=a("strong"),Ymr=o("data2vec-audio"),Kmr=o(" \u2014 "),yH=a("a"),Zmr=o("Data2VecAudioForSequenceClassification"),egr=o(" (Data2VecAudio model)"),ogr=l(),nT=a("li"),l3e=a("strong"),rgr=o("hubert"),tgr=o(" \u2014 "),xH=a("a"),agr=o("HubertForSequenceClassification"),ngr=o(" (Hubert model)"),sgr=l(),sT=a("li"),i3e=a("strong"),lgr=o("sew"),igr=o(" \u2014 "),$H=a("a"),dgr=o("SEWForSequenceClassification"),cgr=o(" (SEW model)"),fgr=l(),lT=a("li"),d3e=a("strong"),mgr=o("sew-d"),ggr=o(" \u2014 "),kH=a("a"),hgr=o("SEWDForSequenceClassification"),pgr=o(" (SEW-D model)"),_gr=l(),iT=a("li"),c3e=a("strong"),ugr=o("unispeech"),bgr=o(" \u2014 "),SH=a("a"),vgr=o("UniSpeechForSequenceClassification"),Fgr=o(" (UniSpeech model)"),Tgr=l(),dT=a("li"),f3e=a("strong"),Mgr=o("unispeech-sat"),Egr=o(" \u2014 "),RH=a("a"),Cgr=o("UniSpeechSatForSequenceClassification"),wgr=o(" (UniSpeechSat model)"),Agr=l(),cT=a("li"),m3e=a("strong"),Lgr=o("wav2vec2"),ygr=o(" \u2014 "),PH=a("a"),xgr=o("Wav2Vec2ForSequenceClassification"),$gr=o(" (Wav2Vec2 model)"),kgr=l(),fT=a("li"),g3e=a("strong"),Sgr=o("wav2vec2-conformer"),Rgr=o(" \u2014 "),BH=a("a"),Pgr=o("Wav2Vec2ConformerForSequenceClassification"),Bgr=o(" (Wav2Vec2-Conformer model)"),Igr=l(),mT=a("li"),h3e=a("strong"),Ngr=o("wavlm"),qgr=o(" \u2014 "),IH=a("a"),jgr=o("WavLMForSequenceClassification"),Dgr=o(" (WavLM model)"),Ggr=l(),gT=a("p"),Ogr=o("The model is set in evaluation mode by default using "),p3e=a("code"),Vgr=o("model.eval()"),Xgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_3e=a("code"),zgr=o("model.train()"),Wgr=l(),F(hT.$$.fragment),rWe=l(),Bd=a("h2"),pT=a("a"),u3e=a("span"),F(p9.$$.fragment),Qgr=l(),b3e=a("span"),Hgr=o("AutoModelForAudioFrameClassification"),tWe=l(),Qo=a("div"),F(_9.$$.fragment),Ugr=l(),Id=a("p"),Jgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),NH=a("a"),Ygr=o("from_pretrained()"),Kgr=o(" class method or the "),qH=a("a"),Zgr=o("from_config()"),ehr=o(` class
method.`),ohr=l(),u9=a("p"),rhr=o("This class cannot be instantiated directly using "),v3e=a("code"),thr=o("__init__()"),ahr=o(" (throws an error)."),nhr=l(),Ct=a("div"),F(b9.$$.fragment),shr=l(),F3e=a("p"),lhr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ihr=l(),Nd=a("p"),dhr=o(`Note:
Loading a model from its configuration file does `),T3e=a("strong"),chr=o("not"),fhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),mhr=o("from_pretrained()"),ghr=o(" to load the model weights."),hhr=l(),F(_T.$$.fragment),phr=l(),go=a("div"),F(v9.$$.fragment),_hr=l(),M3e=a("p"),uhr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),bhr=l(),Ya=a("p"),vhr=o("The model class to instantiate is selected based on the "),E3e=a("code"),Fhr=o("model_type"),Thr=o(` property of the config object (either
passed as an argument or loaded from `),C3e=a("code"),Mhr=o("pretrained_model_name_or_path"),Ehr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=a("code"),Chr=o("pretrained_model_name_or_path"),whr=o(":"),Ahr=l(),rt=a("ul"),uT=a("li"),A3e=a("strong"),Lhr=o("data2vec-audio"),yhr=o(" \u2014 "),DH=a("a"),xhr=o("Data2VecAudioForAudioFrameClassification"),$hr=o(" (Data2VecAudio model)"),khr=l(),bT=a("li"),L3e=a("strong"),Shr=o("unispeech-sat"),Rhr=o(" \u2014 "),GH=a("a"),Phr=o("UniSpeechSatForAudioFrameClassification"),Bhr=o(" (UniSpeechSat model)"),Ihr=l(),vT=a("li"),y3e=a("strong"),Nhr=o("wav2vec2"),qhr=o(" \u2014 "),OH=a("a"),jhr=o("Wav2Vec2ForAudioFrameClassification"),Dhr=o(" (Wav2Vec2 model)"),Ghr=l(),FT=a("li"),x3e=a("strong"),Ohr=o("wav2vec2-conformer"),Vhr=o(" \u2014 "),VH=a("a"),Xhr=o("Wav2Vec2ConformerForAudioFrameClassification"),zhr=o(" (Wav2Vec2-Conformer model)"),Whr=l(),TT=a("li"),$3e=a("strong"),Qhr=o("wavlm"),Hhr=o(" \u2014 "),XH=a("a"),Uhr=o("WavLMForAudioFrameClassification"),Jhr=o(" (WavLM model)"),Yhr=l(),MT=a("p"),Khr=o("The model is set in evaluation mode by default using "),k3e=a("code"),Zhr=o("model.eval()"),epr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S3e=a("code"),opr=o("model.train()"),rpr=l(),F(ET.$$.fragment),aWe=l(),qd=a("h2"),CT=a("a"),R3e=a("span"),F(F9.$$.fragment),tpr=l(),P3e=a("span"),apr=o("AutoModelForCTC"),nWe=l(),Ho=a("div"),F(T9.$$.fragment),npr=l(),jd=a("p"),spr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),zH=a("a"),lpr=o("from_pretrained()"),ipr=o(" class method or the "),WH=a("a"),dpr=o("from_config()"),cpr=o(` class
method.`),fpr=l(),M9=a("p"),mpr=o("This class cannot be instantiated directly using "),B3e=a("code"),gpr=o("__init__()"),hpr=o(" (throws an error)."),ppr=l(),wt=a("div"),F(E9.$$.fragment),_pr=l(),I3e=a("p"),upr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bpr=l(),Dd=a("p"),vpr=o(`Note:
Loading a model from its configuration file does `),N3e=a("strong"),Fpr=o("not"),Tpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),Mpr=o("from_pretrained()"),Epr=o(" to load the model weights."),Cpr=l(),F(wT.$$.fragment),wpr=l(),ho=a("div"),F(C9.$$.fragment),Apr=l(),q3e=a("p"),Lpr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ypr=l(),Ka=a("p"),xpr=o("The model class to instantiate is selected based on the "),j3e=a("code"),$pr=o("model_type"),kpr=o(` property of the config object (either
passed as an argument or loaded from `),D3e=a("code"),Spr=o("pretrained_model_name_or_path"),Rpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=a("code"),Ppr=o("pretrained_model_name_or_path"),Bpr=o(":"),Ipr=l(),Le=a("ul"),AT=a("li"),O3e=a("strong"),Npr=o("data2vec-audio"),qpr=o(" \u2014 "),HH=a("a"),jpr=o("Data2VecAudioForCTC"),Dpr=o(" (Data2VecAudio model)"),Gpr=l(),LT=a("li"),V3e=a("strong"),Opr=o("hubert"),Vpr=o(" \u2014 "),UH=a("a"),Xpr=o("HubertForCTC"),zpr=o(" (Hubert model)"),Wpr=l(),yT=a("li"),X3e=a("strong"),Qpr=o("mctct"),Hpr=o(" \u2014 "),JH=a("a"),Upr=o("MCTCTForCTC"),Jpr=o(" (M-CTC-T model)"),Ypr=l(),xT=a("li"),z3e=a("strong"),Kpr=o("sew"),Zpr=o(" \u2014 "),YH=a("a"),e_r=o("SEWForCTC"),o_r=o(" (SEW model)"),r_r=l(),$T=a("li"),W3e=a("strong"),t_r=o("sew-d"),a_r=o(" \u2014 "),KH=a("a"),n_r=o("SEWDForCTC"),s_r=o(" (SEW-D model)"),l_r=l(),kT=a("li"),Q3e=a("strong"),i_r=o("unispeech"),d_r=o(" \u2014 "),ZH=a("a"),c_r=o("UniSpeechForCTC"),f_r=o(" (UniSpeech model)"),m_r=l(),ST=a("li"),H3e=a("strong"),g_r=o("unispeech-sat"),h_r=o(" \u2014 "),eU=a("a"),p_r=o("UniSpeechSatForCTC"),__r=o(" (UniSpeechSat model)"),u_r=l(),RT=a("li"),U3e=a("strong"),b_r=o("wav2vec2"),v_r=o(" \u2014 "),oU=a("a"),F_r=o("Wav2Vec2ForCTC"),T_r=o(" (Wav2Vec2 model)"),M_r=l(),PT=a("li"),J3e=a("strong"),E_r=o("wav2vec2-conformer"),C_r=o(" \u2014 "),rU=a("a"),w_r=o("Wav2Vec2ConformerForCTC"),A_r=o(" (Wav2Vec2-Conformer model)"),L_r=l(),BT=a("li"),Y3e=a("strong"),y_r=o("wavlm"),x_r=o(" \u2014 "),tU=a("a"),$_r=o("WavLMForCTC"),k_r=o(" (WavLM model)"),S_r=l(),IT=a("p"),R_r=o("The model is set in evaluation mode by default using "),K3e=a("code"),P_r=o("model.eval()"),B_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z3e=a("code"),I_r=o("model.train()"),N_r=l(),F(NT.$$.fragment),sWe=l(),Gd=a("h2"),qT=a("a"),eFe=a("span"),F(w9.$$.fragment),q_r=l(),oFe=a("span"),j_r=o("AutoModelForSpeechSeq2Seq"),lWe=l(),Uo=a("div"),F(A9.$$.fragment),D_r=l(),Od=a("p"),G_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aU=a("a"),O_r=o("from_pretrained()"),V_r=o(" class method or the "),nU=a("a"),X_r=o("from_config()"),z_r=o(` class
method.`),W_r=l(),L9=a("p"),Q_r=o("This class cannot be instantiated directly using "),rFe=a("code"),H_r=o("__init__()"),U_r=o(" (throws an error)."),J_r=l(),At=a("div"),F(y9.$$.fragment),Y_r=l(),tFe=a("p"),K_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Z_r=l(),Vd=a("p"),eur=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),our=o("not"),rur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),tur=o("from_pretrained()"),aur=o(" to load the model weights."),nur=l(),F(jT.$$.fragment),sur=l(),po=a("div"),F(x9.$$.fragment),lur=l(),nFe=a("p"),iur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dur=l(),Za=a("p"),cur=o("The model class to instantiate is selected based on the "),sFe=a("code"),fur=o("model_type"),mur=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),gur=o("pretrained_model_name_or_path"),hur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),pur=o("pretrained_model_name_or_path"),_ur=o(":"),uur=l(),$9=a("ul"),DT=a("li"),dFe=a("strong"),bur=o("speech-encoder-decoder"),vur=o(" \u2014 "),lU=a("a"),Fur=o("SpeechEncoderDecoderModel"),Tur=o(" (Speech Encoder decoder model)"),Mur=l(),GT=a("li"),cFe=a("strong"),Eur=o("speech_to_text"),Cur=o(" \u2014 "),iU=a("a"),wur=o("Speech2TextForConditionalGeneration"),Aur=o(" (Speech2Text model)"),Lur=l(),OT=a("p"),yur=o("The model is set in evaluation mode by default using "),fFe=a("code"),xur=o("model.eval()"),$ur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mFe=a("code"),kur=o("model.train()"),Sur=l(),F(VT.$$.fragment),iWe=l(),Xd=a("h2"),XT=a("a"),gFe=a("span"),F(k9.$$.fragment),Rur=l(),hFe=a("span"),Pur=o("AutoModelForAudioXVector"),dWe=l(),Jo=a("div"),F(S9.$$.fragment),Bur=l(),zd=a("p"),Iur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),dU=a("a"),Nur=o("from_pretrained()"),qur=o(" class method or the "),cU=a("a"),jur=o("from_config()"),Dur=o(` class
method.`),Gur=l(),R9=a("p"),Our=o("This class cannot be instantiated directly using "),pFe=a("code"),Vur=o("__init__()"),Xur=o(" (throws an error)."),zur=l(),Lt=a("div"),F(P9.$$.fragment),Wur=l(),_Fe=a("p"),Qur=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Hur=l(),Wd=a("p"),Uur=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),Jur=o("not"),Yur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),Kur=o("from_pretrained()"),Zur=o(" to load the model weights."),e2r=l(),F(zT.$$.fragment),o2r=l(),_o=a("div"),F(B9.$$.fragment),r2r=l(),bFe=a("p"),t2r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),a2r=l(),en=a("p"),n2r=o("The model class to instantiate is selected based on the "),vFe=a("code"),s2r=o("model_type"),l2r=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),i2r=o("pretrained_model_name_or_path"),d2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),c2r=o("pretrained_model_name_or_path"),f2r=o(":"),m2r=l(),tt=a("ul"),WT=a("li"),MFe=a("strong"),g2r=o("data2vec-audio"),h2r=o(" \u2014 "),mU=a("a"),p2r=o("Data2VecAudioForXVector"),_2r=o(" (Data2VecAudio model)"),u2r=l(),QT=a("li"),EFe=a("strong"),b2r=o("unispeech-sat"),v2r=o(" \u2014 "),gU=a("a"),F2r=o("UniSpeechSatForXVector"),T2r=o(" (UniSpeechSat model)"),M2r=l(),HT=a("li"),CFe=a("strong"),E2r=o("wav2vec2"),C2r=o(" \u2014 "),hU=a("a"),w2r=o("Wav2Vec2ForXVector"),A2r=o(" (Wav2Vec2 model)"),L2r=l(),UT=a("li"),wFe=a("strong"),y2r=o("wav2vec2-conformer"),x2r=o(" \u2014 "),pU=a("a"),$2r=o("Wav2Vec2ConformerForXVector"),k2r=o(" (Wav2Vec2-Conformer model)"),S2r=l(),JT=a("li"),AFe=a("strong"),R2r=o("wavlm"),P2r=o(" \u2014 "),_U=a("a"),B2r=o("WavLMForXVector"),I2r=o(" (WavLM model)"),N2r=l(),YT=a("p"),q2r=o("The model is set in evaluation mode by default using "),LFe=a("code"),j2r=o("model.eval()"),D2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yFe=a("code"),G2r=o("model.train()"),O2r=l(),F(KT.$$.fragment),cWe=l(),Qd=a("h2"),ZT=a("a"),xFe=a("span"),F(I9.$$.fragment),V2r=l(),$Fe=a("span"),X2r=o("AutoModelForMaskedImageModeling"),fWe=l(),Yo=a("div"),F(N9.$$.fragment),z2r=l(),Hd=a("p"),W2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),uU=a("a"),Q2r=o("from_pretrained()"),H2r=o(" class method or the "),bU=a("a"),U2r=o("from_config()"),J2r=o(` class
method.`),Y2r=l(),q9=a("p"),K2r=o("This class cannot be instantiated directly using "),kFe=a("code"),Z2r=o("__init__()"),e1r=o(" (throws an error)."),o1r=l(),yt=a("div"),F(j9.$$.fragment),r1r=l(),SFe=a("p"),t1r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),a1r=l(),Ud=a("p"),n1r=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),s1r=o("not"),l1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),i1r=o("from_pretrained()"),d1r=o(" to load the model weights."),c1r=l(),F(e8.$$.fragment),f1r=l(),uo=a("div"),F(D9.$$.fragment),m1r=l(),PFe=a("p"),g1r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),h1r=l(),on=a("p"),p1r=o("The model class to instantiate is selected based on the "),BFe=a("code"),_1r=o("model_type"),u1r=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),b1r=o("pretrained_model_name_or_path"),v1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),F1r=o("pretrained_model_name_or_path"),T1r=o(":"),M1r=l(),rn=a("ul"),o8=a("li"),qFe=a("strong"),E1r=o("deit"),C1r=o(" \u2014 "),FU=a("a"),w1r=o("DeiTForMaskedImageModeling"),A1r=o(" (DeiT model)"),L1r=l(),r8=a("li"),jFe=a("strong"),y1r=o("swin"),x1r=o(" \u2014 "),TU=a("a"),$1r=o("SwinForMaskedImageModeling"),k1r=o(" (Swin Transformer model)"),S1r=l(),t8=a("li"),DFe=a("strong"),R1r=o("swinv2"),P1r=o(" \u2014 "),MU=a("a"),B1r=o("Swinv2ForMaskedImageModeling"),I1r=o(" (Swin Transformer V2 model)"),N1r=l(),a8=a("li"),GFe=a("strong"),q1r=o("vit"),j1r=o(" \u2014 "),EU=a("a"),D1r=o("ViTForMaskedImageModeling"),G1r=o(" (ViT model)"),O1r=l(),n8=a("p"),V1r=o("The model is set in evaluation mode by default using "),OFe=a("code"),X1r=o("model.eval()"),z1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=a("code"),W1r=o("model.train()"),Q1r=l(),F(s8.$$.fragment),mWe=l(),Jd=a("h2"),l8=a("a"),XFe=a("span"),F(G9.$$.fragment),H1r=l(),zFe=a("span"),U1r=o("AutoModelForObjectDetection"),gWe=l(),Ko=a("div"),F(O9.$$.fragment),J1r=l(),Yd=a("p"),Y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),CU=a("a"),K1r=o("from_pretrained()"),Z1r=o(" class method or the "),wU=a("a"),ebr=o("from_config()"),obr=o(` class
method.`),rbr=l(),V9=a("p"),tbr=o("This class cannot be instantiated directly using "),WFe=a("code"),abr=o("__init__()"),nbr=o(" (throws an error)."),sbr=l(),xt=a("div"),F(X9.$$.fragment),lbr=l(),QFe=a("p"),ibr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),dbr=l(),Kd=a("p"),cbr=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),fbr=o("not"),mbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),gbr=o("from_pretrained()"),hbr=o(" to load the model weights."),pbr=l(),F(i8.$$.fragment),_br=l(),bo=a("div"),F(z9.$$.fragment),ubr=l(),UFe=a("p"),bbr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),vbr=l(),tn=a("p"),Fbr=o("The model class to instantiate is selected based on the "),JFe=a("code"),Tbr=o("model_type"),Mbr=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),Ebr=o("pretrained_model_name_or_path"),Cbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),wbr=o("pretrained_model_name_or_path"),Abr=o(":"),Lbr=l(),W9=a("ul"),d8=a("li"),ZFe=a("strong"),ybr=o("detr"),xbr=o(" \u2014 "),LU=a("a"),$br=o("DetrForObjectDetection"),kbr=o(" (DETR model)"),Sbr=l(),c8=a("li"),e6e=a("strong"),Rbr=o("yolos"),Pbr=o(" \u2014 "),yU=a("a"),Bbr=o("YolosForObjectDetection"),Ibr=o(" (YOLOS model)"),Nbr=l(),f8=a("p"),qbr=o("The model is set in evaluation mode by default using "),o6e=a("code"),jbr=o("model.eval()"),Dbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r6e=a("code"),Gbr=o("model.train()"),Obr=l(),F(m8.$$.fragment),hWe=l(),Zd=a("h2"),g8=a("a"),t6e=a("span"),F(Q9.$$.fragment),Vbr=l(),a6e=a("span"),Xbr=o("AutoModelForImageSegmentation"),pWe=l(),Zo=a("div"),F(H9.$$.fragment),zbr=l(),ec=a("p"),Wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),xU=a("a"),Qbr=o("from_pretrained()"),Hbr=o(" class method or the "),$U=a("a"),Ubr=o("from_config()"),Jbr=o(` class
method.`),Ybr=l(),U9=a("p"),Kbr=o("This class cannot be instantiated directly using "),n6e=a("code"),Zbr=o("__init__()"),evr=o(" (throws an error)."),ovr=l(),$t=a("div"),F(J9.$$.fragment),rvr=l(),s6e=a("p"),tvr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),avr=l(),oc=a("p"),nvr=o(`Note:
Loading a model from its configuration file does `),l6e=a("strong"),svr=o("not"),lvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),ivr=o("from_pretrained()"),dvr=o(" to load the model weights."),cvr=l(),F(h8.$$.fragment),fvr=l(),vo=a("div"),F(Y9.$$.fragment),mvr=l(),i6e=a("p"),gvr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),hvr=l(),an=a("p"),pvr=o("The model class to instantiate is selected based on the "),d6e=a("code"),_vr=o("model_type"),uvr=o(` property of the config object (either
passed as an argument or loaded from `),c6e=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=a("code"),Fvr=o("pretrained_model_name_or_path"),Tvr=o(":"),Mvr=l(),m6e=a("ul"),p8=a("li"),g6e=a("strong"),Evr=o("detr"),Cvr=o(" \u2014 "),SU=a("a"),wvr=o("DetrForSegmentation"),Avr=o(" (DETR model)"),Lvr=l(),_8=a("p"),yvr=o("The model is set in evaluation mode by default using "),h6e=a("code"),xvr=o("model.eval()"),$vr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p6e=a("code"),kvr=o("model.train()"),Svr=l(),F(u8.$$.fragment),_We=l(),rc=a("h2"),b8=a("a"),_6e=a("span"),F(K9.$$.fragment),Rvr=l(),u6e=a("span"),Pvr=o("AutoModelForSemanticSegmentation"),uWe=l(),er=a("div"),F(Z9.$$.fragment),Bvr=l(),tc=a("p"),Ivr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),RU=a("a"),Nvr=o("from_pretrained()"),qvr=o(" class method or the "),PU=a("a"),jvr=o("from_config()"),Dvr=o(` class
method.`),Gvr=l(),ex=a("p"),Ovr=o("This class cannot be instantiated directly using "),b6e=a("code"),Vvr=o("__init__()"),Xvr=o(" (throws an error)."),zvr=l(),kt=a("div"),F(ox.$$.fragment),Wvr=l(),v6e=a("p"),Qvr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Hvr=l(),ac=a("p"),Uvr=o(`Note:
Loading a model from its configuration file does `),F6e=a("strong"),Jvr=o("not"),Yvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=a("a"),Kvr=o("from_pretrained()"),Zvr=o(" to load the model weights."),e3r=l(),F(v8.$$.fragment),o3r=l(),Fo=a("div"),F(rx.$$.fragment),r3r=l(),T6e=a("p"),t3r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),a3r=l(),nn=a("p"),n3r=o("The model class to instantiate is selected based on the "),M6e=a("code"),s3r=o("model_type"),l3r=o(` property of the config object (either
passed as an argument or loaded from `),E6e=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=a("code"),c3r=o("pretrained_model_name_or_path"),f3r=o(":"),m3r=l(),at=a("ul"),F8=a("li"),w6e=a("strong"),g3r=o("beit"),h3r=o(" \u2014 "),IU=a("a"),p3r=o("BeitForSemanticSegmentation"),_3r=o(" (BEiT model)"),u3r=l(),T8=a("li"),A6e=a("strong"),b3r=o("data2vec-vision"),v3r=o(" \u2014 "),NU=a("a"),F3r=o("Data2VecVisionForSemanticSegmentation"),T3r=o(" (Data2VecVision model)"),M3r=l(),M8=a("li"),L6e=a("strong"),E3r=o("dpt"),C3r=o(" \u2014 "),qU=a("a"),w3r=o("DPTForSemanticSegmentation"),A3r=o(" (DPT model)"),L3r=l(),E8=a("li"),y6e=a("strong"),y3r=o("mobilevit"),x3r=o(" \u2014 "),jU=a("a"),$3r=o("MobileViTForSemanticSegmentation"),k3r=o(" (MobileViT model)"),S3r=l(),C8=a("li"),x6e=a("strong"),R3r=o("segformer"),P3r=o(" \u2014 "),DU=a("a"),B3r=o("SegformerForSemanticSegmentation"),I3r=o(" (SegFormer model)"),N3r=l(),w8=a("p"),q3r=o("The model is set in evaluation mode by default using "),$6e=a("code"),j3r=o("model.eval()"),D3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k6e=a("code"),G3r=o("model.train()"),O3r=l(),F(A8.$$.fragment),bWe=l(),nc=a("h2"),L8=a("a"),S6e=a("span"),F(tx.$$.fragment),V3r=l(),R6e=a("span"),X3r=o("AutoModelForInstanceSegmentation"),vWe=l(),or=a("div"),F(ax.$$.fragment),z3r=l(),sc=a("p"),W3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),GU=a("a"),Q3r=o("from_pretrained()"),H3r=o(" class method or the "),OU=a("a"),U3r=o("from_config()"),J3r=o(` class
method.`),Y3r=l(),nx=a("p"),K3r=o("This class cannot be instantiated directly using "),P6e=a("code"),Z3r=o("__init__()"),eFr=o(" (throws an error)."),oFr=l(),St=a("div"),F(sx.$$.fragment),rFr=l(),B6e=a("p"),tFr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),aFr=l(),lc=a("p"),nFr=o(`Note:
Loading a model from its configuration file does `),I6e=a("strong"),sFr=o("not"),lFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),iFr=o("from_pretrained()"),dFr=o(" to load the model weights."),cFr=l(),F(y8.$$.fragment),fFr=l(),To=a("div"),F(lx.$$.fragment),mFr=l(),N6e=a("p"),gFr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hFr=l(),sn=a("p"),pFr=o("The model class to instantiate is selected based on the "),q6e=a("code"),_Fr=o("model_type"),uFr=o(` property of the config object (either
passed as an argument or loaded from `),j6e=a("code"),bFr=o("pretrained_model_name_or_path"),vFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D6e=a("code"),FFr=o("pretrained_model_name_or_path"),TFr=o(":"),MFr=l(),G6e=a("ul"),x8=a("li"),O6e=a("strong"),EFr=o("maskformer"),CFr=o(" \u2014 "),XU=a("a"),wFr=o("MaskFormerForInstanceSegmentation"),AFr=o(" (MaskFormer model)"),LFr=l(),$8=a("p"),yFr=o("The model is set in evaluation mode by default using "),V6e=a("code"),xFr=o("model.eval()"),$Fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X6e=a("code"),kFr=o("model.train()"),SFr=l(),F(k8.$$.fragment),FWe=l(),ic=a("h2"),S8=a("a"),z6e=a("span"),F(ix.$$.fragment),RFr=l(),W6e=a("span"),PFr=o("TFAutoModel"),TWe=l(),rr=a("div"),F(dx.$$.fragment),BFr=l(),dc=a("p"),IFr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zU=a("a"),NFr=o("from_pretrained()"),qFr=o(" class method or the "),WU=a("a"),jFr=o("from_config()"),DFr=o(` class
method.`),GFr=l(),cx=a("p"),OFr=o("This class cannot be instantiated directly using "),Q6e=a("code"),VFr=o("__init__()"),XFr=o(" (throws an error)."),zFr=l(),Rt=a("div"),F(fx.$$.fragment),WFr=l(),H6e=a("p"),QFr=o("Instantiates one of the base model classes of the library from a configuration."),HFr=l(),cc=a("p"),UFr=o(`Note:
Loading a model from its configuration file does `),U6e=a("strong"),JFr=o("not"),YFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),KFr=o("from_pretrained()"),ZFr=o(" to load the model weights."),e6r=l(),F(R8.$$.fragment),o6r=l(),$r=a("div"),F(mx.$$.fragment),r6r=l(),J6e=a("p"),t6r=o("Instantiate one of the base model classes of the library from a pretrained model."),a6r=l(),ln=a("p"),n6r=o("The model class to instantiate is selected based on the "),Y6e=a("code"),s6r=o("model_type"),l6r=o(` property of the config object (either
passed as an argument or loaded from `),K6e=a("code"),i6r=o("pretrained_model_name_or_path"),d6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=a("code"),c6r=o("pretrained_model_name_or_path"),f6r=o(":"),m6r=l(),I=a("ul"),P8=a("li"),eTe=a("strong"),g6r=o("albert"),h6r=o(" \u2014 "),HU=a("a"),p6r=o("TFAlbertModel"),_6r=o(" (ALBERT model)"),u6r=l(),B8=a("li"),oTe=a("strong"),b6r=o("bart"),v6r=o(" \u2014 "),UU=a("a"),F6r=o("TFBartModel"),T6r=o(" (BART model)"),M6r=l(),I8=a("li"),rTe=a("strong"),E6r=o("bert"),C6r=o(" \u2014 "),JU=a("a"),w6r=o("TFBertModel"),A6r=o(" (BERT model)"),L6r=l(),N8=a("li"),tTe=a("strong"),y6r=o("blenderbot"),x6r=o(" \u2014 "),YU=a("a"),$6r=o("TFBlenderbotModel"),k6r=o(" (Blenderbot model)"),S6r=l(),q8=a("li"),aTe=a("strong"),R6r=o("blenderbot-small"),P6r=o(" \u2014 "),KU=a("a"),B6r=o("TFBlenderbotSmallModel"),I6r=o(" (BlenderbotSmall model)"),N6r=l(),j8=a("li"),nTe=a("strong"),q6r=o("camembert"),j6r=o(" \u2014 "),ZU=a("a"),D6r=o("TFCamembertModel"),G6r=o(" (CamemBERT model)"),O6r=l(),D8=a("li"),sTe=a("strong"),V6r=o("clip"),X6r=o(" \u2014 "),eJ=a("a"),z6r=o("TFCLIPModel"),W6r=o(" (CLIP model)"),Q6r=l(),G8=a("li"),lTe=a("strong"),H6r=o("convbert"),U6r=o(" \u2014 "),oJ=a("a"),J6r=o("TFConvBertModel"),Y6r=o(" (ConvBERT model)"),K6r=l(),O8=a("li"),iTe=a("strong"),Z6r=o("convnext"),eTr=o(" \u2014 "),rJ=a("a"),oTr=o("TFConvNextModel"),rTr=o(" (ConvNeXT model)"),tTr=l(),V8=a("li"),dTe=a("strong"),aTr=o("ctrl"),nTr=o(" \u2014 "),tJ=a("a"),sTr=o("TFCTRLModel"),lTr=o(" (CTRL model)"),iTr=l(),X8=a("li"),cTe=a("strong"),dTr=o("data2vec-vision"),cTr=o(" \u2014 "),aJ=a("a"),fTr=o("TFData2VecVisionModel"),mTr=o(" (Data2VecVision model)"),gTr=l(),z8=a("li"),fTe=a("strong"),hTr=o("deberta"),pTr=o(" \u2014 "),nJ=a("a"),_Tr=o("TFDebertaModel"),uTr=o(" (DeBERTa model)"),bTr=l(),W8=a("li"),mTe=a("strong"),vTr=o("deberta-v2"),FTr=o(" \u2014 "),sJ=a("a"),TTr=o("TFDebertaV2Model"),MTr=o(" (DeBERTa-v2 model)"),ETr=l(),Q8=a("li"),gTe=a("strong"),CTr=o("deit"),wTr=o(" \u2014 "),lJ=a("a"),ATr=o("TFDeiTModel"),LTr=o(" (DeiT model)"),yTr=l(),H8=a("li"),hTe=a("strong"),xTr=o("distilbert"),$Tr=o(" \u2014 "),iJ=a("a"),kTr=o("TFDistilBertModel"),STr=o(" (DistilBERT model)"),RTr=l(),U8=a("li"),pTe=a("strong"),PTr=o("dpr"),BTr=o(" \u2014 "),dJ=a("a"),ITr=o("TFDPRQuestionEncoder"),NTr=o(" (DPR model)"),qTr=l(),J8=a("li"),_Te=a("strong"),jTr=o("electra"),DTr=o(" \u2014 "),cJ=a("a"),GTr=o("TFElectraModel"),OTr=o(" (ELECTRA model)"),VTr=l(),Y8=a("li"),uTe=a("strong"),XTr=o("flaubert"),zTr=o(" \u2014 "),fJ=a("a"),WTr=o("TFFlaubertModel"),QTr=o(" (FlauBERT model)"),HTr=l(),Zs=a("li"),bTe=a("strong"),UTr=o("funnel"),JTr=o(" \u2014 "),mJ=a("a"),YTr=o("TFFunnelModel"),KTr=o(" or "),gJ=a("a"),ZTr=o("TFFunnelBaseModel"),e8r=o(" (Funnel Transformer model)"),o8r=l(),K8=a("li"),vTe=a("strong"),r8r=o("gpt2"),t8r=o(" \u2014 "),hJ=a("a"),a8r=o("TFGPT2Model"),n8r=o(" (OpenAI GPT-2 model)"),s8r=l(),Z8=a("li"),FTe=a("strong"),l8r=o("gptj"),i8r=o(" \u2014 "),pJ=a("a"),d8r=o("TFGPTJModel"),c8r=o(" (GPT-J model)"),f8r=l(),eM=a("li"),TTe=a("strong"),m8r=o("hubert"),g8r=o(" \u2014 "),_J=a("a"),h8r=o("TFHubertModel"),p8r=o(" (Hubert model)"),_8r=l(),oM=a("li"),MTe=a("strong"),u8r=o("layoutlm"),b8r=o(" \u2014 "),uJ=a("a"),v8r=o("TFLayoutLMModel"),F8r=o(" (LayoutLM model)"),T8r=l(),rM=a("li"),ETe=a("strong"),M8r=o("led"),E8r=o(" \u2014 "),bJ=a("a"),C8r=o("TFLEDModel"),w8r=o(" (LED model)"),A8r=l(),tM=a("li"),CTe=a("strong"),L8r=o("longformer"),y8r=o(" \u2014 "),vJ=a("a"),x8r=o("TFLongformerModel"),$8r=o(" (Longformer model)"),k8r=l(),aM=a("li"),wTe=a("strong"),S8r=o("lxmert"),R8r=o(" \u2014 "),FJ=a("a"),P8r=o("TFLxmertModel"),B8r=o(" (LXMERT model)"),I8r=l(),nM=a("li"),ATe=a("strong"),N8r=o("marian"),q8r=o(" \u2014 "),TJ=a("a"),j8r=o("TFMarianModel"),D8r=o(" (Marian model)"),G8r=l(),sM=a("li"),LTe=a("strong"),O8r=o("mbart"),V8r=o(" \u2014 "),MJ=a("a"),X8r=o("TFMBartModel"),z8r=o(" (mBART model)"),W8r=l(),lM=a("li"),yTe=a("strong"),Q8r=o("mobilebert"),H8r=o(" \u2014 "),EJ=a("a"),U8r=o("TFMobileBertModel"),J8r=o(" (MobileBERT model)"),Y8r=l(),iM=a("li"),xTe=a("strong"),K8r=o("mpnet"),Z8r=o(" \u2014 "),CJ=a("a"),eMr=o("TFMPNetModel"),oMr=o(" (MPNet model)"),rMr=l(),dM=a("li"),$Te=a("strong"),tMr=o("mt5"),aMr=o(" \u2014 "),wJ=a("a"),nMr=o("TFMT5Model"),sMr=o(" (MT5 model)"),lMr=l(),cM=a("li"),kTe=a("strong"),iMr=o("openai-gpt"),dMr=o(" \u2014 "),AJ=a("a"),cMr=o("TFOpenAIGPTModel"),fMr=o(" (OpenAI GPT model)"),mMr=l(),fM=a("li"),STe=a("strong"),gMr=o("opt"),hMr=o(" \u2014 "),LJ=a("a"),pMr=o("TFOPTModel"),_Mr=o(" (OPT model)"),uMr=l(),mM=a("li"),RTe=a("strong"),bMr=o("pegasus"),vMr=o(" \u2014 "),yJ=a("a"),FMr=o("TFPegasusModel"),TMr=o(" (Pegasus model)"),MMr=l(),gM=a("li"),PTe=a("strong"),EMr=o("regnet"),CMr=o(" \u2014 "),xJ=a("a"),wMr=o("TFRegNetModel"),AMr=o(" (RegNet model)"),LMr=l(),hM=a("li"),BTe=a("strong"),yMr=o("rembert"),xMr=o(" \u2014 "),$J=a("a"),$Mr=o("TFRemBertModel"),kMr=o(" (RemBERT model)"),SMr=l(),pM=a("li"),ITe=a("strong"),RMr=o("resnet"),PMr=o(" \u2014 "),kJ=a("a"),BMr=o("TFResNetModel"),IMr=o(" (ResNet model)"),NMr=l(),_M=a("li"),NTe=a("strong"),qMr=o("roberta"),jMr=o(" \u2014 "),SJ=a("a"),DMr=o("TFRobertaModel"),GMr=o(" (RoBERTa model)"),OMr=l(),uM=a("li"),qTe=a("strong"),VMr=o("roformer"),XMr=o(" \u2014 "),RJ=a("a"),zMr=o("TFRoFormerModel"),WMr=o(" (RoFormer model)"),QMr=l(),bM=a("li"),jTe=a("strong"),HMr=o("segformer"),UMr=o(" \u2014 "),PJ=a("a"),JMr=o("TFSegformerModel"),YMr=o(" (SegFormer model)"),KMr=l(),vM=a("li"),DTe=a("strong"),ZMr=o("speech_to_text"),e4r=o(" \u2014 "),BJ=a("a"),o4r=o("TFSpeech2TextModel"),r4r=o(" (Speech2Text model)"),t4r=l(),FM=a("li"),GTe=a("strong"),a4r=o("swin"),n4r=o(" \u2014 "),IJ=a("a"),s4r=o("TFSwinModel"),l4r=o(" (Swin Transformer model)"),i4r=l(),TM=a("li"),OTe=a("strong"),d4r=o("t5"),c4r=o(" \u2014 "),NJ=a("a"),f4r=o("TFT5Model"),m4r=o(" (T5 model)"),g4r=l(),MM=a("li"),VTe=a("strong"),h4r=o("tapas"),p4r=o(" \u2014 "),qJ=a("a"),_4r=o("TFTapasModel"),u4r=o(" (TAPAS model)"),b4r=l(),EM=a("li"),XTe=a("strong"),v4r=o("transfo-xl"),F4r=o(" \u2014 "),jJ=a("a"),T4r=o("TFTransfoXLModel"),M4r=o(" (Transformer-XL model)"),E4r=l(),CM=a("li"),zTe=a("strong"),C4r=o("vit"),w4r=o(" \u2014 "),DJ=a("a"),A4r=o("TFViTModel"),L4r=o(" (ViT model)"),y4r=l(),wM=a("li"),WTe=a("strong"),x4r=o("vit_mae"),$4r=o(" \u2014 "),GJ=a("a"),k4r=o("TFViTMAEModel"),S4r=o(" (ViTMAE model)"),R4r=l(),AM=a("li"),QTe=a("strong"),P4r=o("wav2vec2"),B4r=o(" \u2014 "),OJ=a("a"),I4r=o("TFWav2Vec2Model"),N4r=o(" (Wav2Vec2 model)"),q4r=l(),LM=a("li"),HTe=a("strong"),j4r=o("xlm"),D4r=o(" \u2014 "),VJ=a("a"),G4r=o("TFXLMModel"),O4r=o(" (XLM model)"),V4r=l(),yM=a("li"),UTe=a("strong"),X4r=o("xlm-roberta"),z4r=o(" \u2014 "),XJ=a("a"),W4r=o("TFXLMRobertaModel"),Q4r=o(" (XLM-RoBERTa model)"),H4r=l(),xM=a("li"),JTe=a("strong"),U4r=o("xlnet"),J4r=o(" \u2014 "),zJ=a("a"),Y4r=o("TFXLNetModel"),K4r=o(" (XLNet model)"),Z4r=l(),F($M.$$.fragment),MWe=l(),fc=a("h2"),kM=a("a"),YTe=a("span"),F(gx.$$.fragment),eEr=l(),KTe=a("span"),oEr=o("TFAutoModelForPreTraining"),EWe=l(),tr=a("div"),F(hx.$$.fragment),rEr=l(),mc=a("p"),tEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WJ=a("a"),aEr=o("from_pretrained()"),nEr=o(" class method or the "),QJ=a("a"),sEr=o("from_config()"),lEr=o(` class
method.`),iEr=l(),px=a("p"),dEr=o("This class cannot be instantiated directly using "),ZTe=a("code"),cEr=o("__init__()"),fEr=o(" (throws an error)."),mEr=l(),Pt=a("div"),F(_x.$$.fragment),gEr=l(),e8e=a("p"),hEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pEr=l(),gc=a("p"),_Er=o(`Note:
Loading a model from its configuration file does `),o8e=a("strong"),uEr=o("not"),bEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),vEr=o("from_pretrained()"),FEr=o(" to load the model weights."),TEr=l(),F(SM.$$.fragment),MEr=l(),kr=a("div"),F(ux.$$.fragment),EEr=l(),r8e=a("p"),CEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wEr=l(),dn=a("p"),AEr=o("The model class to instantiate is selected based on the "),t8e=a("code"),LEr=o("model_type"),yEr=o(` property of the config object (either
passed as an argument or loaded from `),a8e=a("code"),xEr=o("pretrained_model_name_or_path"),$Er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n8e=a("code"),kEr=o("pretrained_model_name_or_path"),SEr=o(":"),REr=l(),se=a("ul"),RM=a("li"),s8e=a("strong"),PEr=o("albert"),BEr=o(" \u2014 "),UJ=a("a"),IEr=o("TFAlbertForPreTraining"),NEr=o(" (ALBERT model)"),qEr=l(),PM=a("li"),l8e=a("strong"),jEr=o("bart"),DEr=o(" \u2014 "),JJ=a("a"),GEr=o("TFBartForConditionalGeneration"),OEr=o(" (BART model)"),VEr=l(),BM=a("li"),i8e=a("strong"),XEr=o("bert"),zEr=o(" \u2014 "),YJ=a("a"),WEr=o("TFBertForPreTraining"),QEr=o(" (BERT model)"),HEr=l(),IM=a("li"),d8e=a("strong"),UEr=o("camembert"),JEr=o(" \u2014 "),KJ=a("a"),YEr=o("TFCamembertForMaskedLM"),KEr=o(" (CamemBERT model)"),ZEr=l(),NM=a("li"),c8e=a("strong"),eCr=o("ctrl"),oCr=o(" \u2014 "),ZJ=a("a"),rCr=o("TFCTRLLMHeadModel"),tCr=o(" (CTRL model)"),aCr=l(),qM=a("li"),f8e=a("strong"),nCr=o("distilbert"),sCr=o(" \u2014 "),eY=a("a"),lCr=o("TFDistilBertForMaskedLM"),iCr=o(" (DistilBERT model)"),dCr=l(),jM=a("li"),m8e=a("strong"),cCr=o("electra"),fCr=o(" \u2014 "),oY=a("a"),mCr=o("TFElectraForPreTraining"),gCr=o(" (ELECTRA model)"),hCr=l(),DM=a("li"),g8e=a("strong"),pCr=o("flaubert"),_Cr=o(" \u2014 "),rY=a("a"),uCr=o("TFFlaubertWithLMHeadModel"),bCr=o(" (FlauBERT model)"),vCr=l(),GM=a("li"),h8e=a("strong"),FCr=o("funnel"),TCr=o(" \u2014 "),tY=a("a"),MCr=o("TFFunnelForPreTraining"),ECr=o(" (Funnel Transformer model)"),CCr=l(),OM=a("li"),p8e=a("strong"),wCr=o("gpt2"),ACr=o(" \u2014 "),aY=a("a"),LCr=o("TFGPT2LMHeadModel"),yCr=o(" (OpenAI GPT-2 model)"),xCr=l(),VM=a("li"),_8e=a("strong"),$Cr=o("layoutlm"),kCr=o(" \u2014 "),nY=a("a"),SCr=o("TFLayoutLMForMaskedLM"),RCr=o(" (LayoutLM model)"),PCr=l(),XM=a("li"),u8e=a("strong"),BCr=o("lxmert"),ICr=o(" \u2014 "),sY=a("a"),NCr=o("TFLxmertForPreTraining"),qCr=o(" (LXMERT model)"),jCr=l(),zM=a("li"),b8e=a("strong"),DCr=o("mobilebert"),GCr=o(" \u2014 "),lY=a("a"),OCr=o("TFMobileBertForPreTraining"),VCr=o(" (MobileBERT model)"),XCr=l(),WM=a("li"),v8e=a("strong"),zCr=o("mpnet"),WCr=o(" \u2014 "),iY=a("a"),QCr=o("TFMPNetForMaskedLM"),HCr=o(" (MPNet model)"),UCr=l(),QM=a("li"),F8e=a("strong"),JCr=o("openai-gpt"),YCr=o(" \u2014 "),dY=a("a"),KCr=o("TFOpenAIGPTLMHeadModel"),ZCr=o(" (OpenAI GPT model)"),e5r=l(),HM=a("li"),T8e=a("strong"),o5r=o("roberta"),r5r=o(" \u2014 "),cY=a("a"),t5r=o("TFRobertaForMaskedLM"),a5r=o(" (RoBERTa model)"),n5r=l(),UM=a("li"),M8e=a("strong"),s5r=o("t5"),l5r=o(" \u2014 "),fY=a("a"),i5r=o("TFT5ForConditionalGeneration"),d5r=o(" (T5 model)"),c5r=l(),JM=a("li"),E8e=a("strong"),f5r=o("tapas"),m5r=o(" \u2014 "),mY=a("a"),g5r=o("TFTapasForMaskedLM"),h5r=o(" (TAPAS model)"),p5r=l(),YM=a("li"),C8e=a("strong"),_5r=o("transfo-xl"),u5r=o(" \u2014 "),gY=a("a"),b5r=o("TFTransfoXLLMHeadModel"),v5r=o(" (Transformer-XL model)"),F5r=l(),KM=a("li"),w8e=a("strong"),T5r=o("vit_mae"),M5r=o(" \u2014 "),hY=a("a"),E5r=o("TFViTMAEForPreTraining"),C5r=o(" (ViTMAE model)"),w5r=l(),ZM=a("li"),A8e=a("strong"),A5r=o("xlm"),L5r=o(" \u2014 "),pY=a("a"),y5r=o("TFXLMWithLMHeadModel"),x5r=o(" (XLM model)"),$5r=l(),e4=a("li"),L8e=a("strong"),k5r=o("xlm-roberta"),S5r=o(" \u2014 "),_Y=a("a"),R5r=o("TFXLMRobertaForMaskedLM"),P5r=o(" (XLM-RoBERTa model)"),B5r=l(),o4=a("li"),y8e=a("strong"),I5r=o("xlnet"),N5r=o(" \u2014 "),uY=a("a"),q5r=o("TFXLNetLMHeadModel"),j5r=o(" (XLNet model)"),D5r=l(),F(r4.$$.fragment),CWe=l(),hc=a("h2"),t4=a("a"),x8e=a("span"),F(bx.$$.fragment),G5r=l(),$8e=a("span"),O5r=o("TFAutoModelForCausalLM"),wWe=l(),ar=a("div"),F(vx.$$.fragment),V5r=l(),pc=a("p"),X5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bY=a("a"),z5r=o("from_pretrained()"),W5r=o(" class method or the "),vY=a("a"),Q5r=o("from_config()"),H5r=o(` class
method.`),U5r=l(),Fx=a("p"),J5r=o("This class cannot be instantiated directly using "),k8e=a("code"),Y5r=o("__init__()"),K5r=o(" (throws an error)."),Z5r=l(),Bt=a("div"),F(Tx.$$.fragment),e0r=l(),S8e=a("p"),o0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),r0r=l(),_c=a("p"),t0r=o(`Note:
Loading a model from its configuration file does `),R8e=a("strong"),a0r=o("not"),n0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),s0r=o("from_pretrained()"),l0r=o(" to load the model weights."),i0r=l(),F(a4.$$.fragment),d0r=l(),Sr=a("div"),F(Mx.$$.fragment),c0r=l(),P8e=a("p"),f0r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),m0r=l(),cn=a("p"),g0r=o("The model class to instantiate is selected based on the "),B8e=a("code"),h0r=o("model_type"),p0r=o(` property of the config object (either
passed as an argument or loaded from `),I8e=a("code"),_0r=o("pretrained_model_name_or_path"),u0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=a("code"),b0r=o("pretrained_model_name_or_path"),v0r=o(":"),F0r=l(),Me=a("ul"),n4=a("li"),q8e=a("strong"),T0r=o("bert"),M0r=o(" \u2014 "),TY=a("a"),E0r=o("TFBertLMHeadModel"),C0r=o(" (BERT model)"),w0r=l(),s4=a("li"),j8e=a("strong"),A0r=o("camembert"),L0r=o(" \u2014 "),MY=a("a"),y0r=o("TFCamembertForCausalLM"),x0r=o(" (CamemBERT model)"),$0r=l(),l4=a("li"),D8e=a("strong"),k0r=o("ctrl"),S0r=o(" \u2014 "),EY=a("a"),R0r=o("TFCTRLLMHeadModel"),P0r=o(" (CTRL model)"),B0r=l(),i4=a("li"),G8e=a("strong"),I0r=o("gpt2"),N0r=o(" \u2014 "),CY=a("a"),q0r=o("TFGPT2LMHeadModel"),j0r=o(" (OpenAI GPT-2 model)"),D0r=l(),d4=a("li"),O8e=a("strong"),G0r=o("gptj"),O0r=o(" \u2014 "),wY=a("a"),V0r=o("TFGPTJForCausalLM"),X0r=o(" (GPT-J model)"),z0r=l(),c4=a("li"),V8e=a("strong"),W0r=o("openai-gpt"),Q0r=o(" \u2014 "),AY=a("a"),H0r=o("TFOpenAIGPTLMHeadModel"),U0r=o(" (OpenAI GPT model)"),J0r=l(),f4=a("li"),X8e=a("strong"),Y0r=o("opt"),K0r=o(" \u2014 "),LY=a("a"),Z0r=o("TFOPTForCausalLM"),ewr=o(" (OPT model)"),owr=l(),m4=a("li"),z8e=a("strong"),rwr=o("rembert"),twr=o(" \u2014 "),yY=a("a"),awr=o("TFRemBertForCausalLM"),nwr=o(" (RemBERT model)"),swr=l(),g4=a("li"),W8e=a("strong"),lwr=o("roberta"),iwr=o(" \u2014 "),xY=a("a"),dwr=o("TFRobertaForCausalLM"),cwr=o(" (RoBERTa model)"),fwr=l(),h4=a("li"),Q8e=a("strong"),mwr=o("roformer"),gwr=o(" \u2014 "),$Y=a("a"),hwr=o("TFRoFormerForCausalLM"),pwr=o(" (RoFormer model)"),_wr=l(),p4=a("li"),H8e=a("strong"),uwr=o("transfo-xl"),bwr=o(" \u2014 "),kY=a("a"),vwr=o("TFTransfoXLLMHeadModel"),Fwr=o(" (Transformer-XL model)"),Twr=l(),_4=a("li"),U8e=a("strong"),Mwr=o("xlm"),Ewr=o(" \u2014 "),SY=a("a"),Cwr=o("TFXLMWithLMHeadModel"),wwr=o(" (XLM model)"),Awr=l(),u4=a("li"),J8e=a("strong"),Lwr=o("xlnet"),ywr=o(" \u2014 "),RY=a("a"),xwr=o("TFXLNetLMHeadModel"),$wr=o(" (XLNet model)"),kwr=l(),F(b4.$$.fragment),AWe=l(),uc=a("h2"),v4=a("a"),Y8e=a("span"),F(Ex.$$.fragment),Swr=l(),K8e=a("span"),Rwr=o("TFAutoModelForImageClassification"),LWe=l(),nr=a("div"),F(Cx.$$.fragment),Pwr=l(),bc=a("p"),Bwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PY=a("a"),Iwr=o("from_pretrained()"),Nwr=o(" class method or the "),BY=a("a"),qwr=o("from_config()"),jwr=o(` class
method.`),Dwr=l(),wx=a("p"),Gwr=o("This class cannot be instantiated directly using "),Z8e=a("code"),Owr=o("__init__()"),Vwr=o(" (throws an error)."),Xwr=l(),It=a("div"),F(Ax.$$.fragment),zwr=l(),eMe=a("p"),Wwr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Qwr=l(),vc=a("p"),Hwr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),Uwr=o("not"),Jwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("a"),Ywr=o("from_pretrained()"),Kwr=o(" to load the model weights."),Zwr=l(),F(F4.$$.fragment),eAr=l(),Rr=a("div"),F(Lx.$$.fragment),oAr=l(),rMe=a("p"),rAr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tAr=l(),fn=a("p"),aAr=o("The model class to instantiate is selected based on the "),tMe=a("code"),nAr=o("model_type"),sAr=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),dAr=o("pretrained_model_name_or_path"),cAr=o(":"),fAr=l(),Ve=a("ul"),T4=a("li"),sMe=a("strong"),mAr=o("convnext"),gAr=o(" \u2014 "),NY=a("a"),hAr=o("TFConvNextForImageClassification"),pAr=o(" (ConvNeXT model)"),_Ar=l(),M4=a("li"),lMe=a("strong"),uAr=o("data2vec-vision"),bAr=o(" \u2014 "),qY=a("a"),vAr=o("TFData2VecVisionForImageClassification"),FAr=o(" (Data2VecVision model)"),TAr=l(),el=a("li"),iMe=a("strong"),MAr=o("deit"),EAr=o(" \u2014 "),jY=a("a"),CAr=o("TFDeiTForImageClassification"),wAr=o(" or "),DY=a("a"),AAr=o("TFDeiTForImageClassificationWithTeacher"),LAr=o(" (DeiT model)"),yAr=l(),E4=a("li"),dMe=a("strong"),xAr=o("regnet"),$Ar=o(" \u2014 "),GY=a("a"),kAr=o("TFRegNetForImageClassification"),SAr=o(" (RegNet model)"),RAr=l(),C4=a("li"),cMe=a("strong"),PAr=o("resnet"),BAr=o(" \u2014 "),OY=a("a"),IAr=o("TFResNetForImageClassification"),NAr=o(" (ResNet model)"),qAr=l(),w4=a("li"),fMe=a("strong"),jAr=o("segformer"),DAr=o(" \u2014 "),VY=a("a"),GAr=o("TFSegformerForImageClassification"),OAr=o(" (SegFormer model)"),VAr=l(),A4=a("li"),mMe=a("strong"),XAr=o("swin"),zAr=o(" \u2014 "),XY=a("a"),WAr=o("TFSwinForImageClassification"),QAr=o(" (Swin Transformer model)"),HAr=l(),L4=a("li"),gMe=a("strong"),UAr=o("vit"),JAr=o(" \u2014 "),zY=a("a"),YAr=o("TFViTForImageClassification"),KAr=o(" (ViT model)"),ZAr=l(),F(y4.$$.fragment),yWe=l(),Fc=a("h2"),x4=a("a"),hMe=a("span"),F(yx.$$.fragment),e7r=l(),pMe=a("span"),o7r=o("TFAutoModelForMaskedLM"),xWe=l(),sr=a("div"),F(xx.$$.fragment),r7r=l(),Tc=a("p"),t7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WY=a("a"),a7r=o("from_pretrained()"),n7r=o(" class method or the "),QY=a("a"),s7r=o("from_config()"),l7r=o(` class
method.`),i7r=l(),$x=a("p"),d7r=o("This class cannot be instantiated directly using "),_Me=a("code"),c7r=o("__init__()"),f7r=o(" (throws an error)."),m7r=l(),Nt=a("div"),F(kx.$$.fragment),g7r=l(),uMe=a("p"),h7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p7r=l(),Mc=a("p"),_7r=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),u7r=o("not"),b7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),v7r=o("from_pretrained()"),F7r=o(" to load the model weights."),T7r=l(),F($4.$$.fragment),M7r=l(),Pr=a("div"),F(Sx.$$.fragment),E7r=l(),vMe=a("p"),C7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),w7r=l(),mn=a("p"),A7r=o("The model class to instantiate is selected based on the "),FMe=a("code"),L7r=o("model_type"),y7r=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),x7r=o("pretrained_model_name_or_path"),$7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),k7r=o("pretrained_model_name_or_path"),S7r=o(":"),R7r=l(),ie=a("ul"),k4=a("li"),EMe=a("strong"),P7r=o("albert"),B7r=o(" \u2014 "),UY=a("a"),I7r=o("TFAlbertForMaskedLM"),N7r=o(" (ALBERT model)"),q7r=l(),S4=a("li"),CMe=a("strong"),j7r=o("bert"),D7r=o(" \u2014 "),JY=a("a"),G7r=o("TFBertForMaskedLM"),O7r=o(" (BERT model)"),V7r=l(),R4=a("li"),wMe=a("strong"),X7r=o("camembert"),z7r=o(" \u2014 "),YY=a("a"),W7r=o("TFCamembertForMaskedLM"),Q7r=o(" (CamemBERT model)"),H7r=l(),P4=a("li"),AMe=a("strong"),U7r=o("convbert"),J7r=o(" \u2014 "),KY=a("a"),Y7r=o("TFConvBertForMaskedLM"),K7r=o(" (ConvBERT model)"),Z7r=l(),B4=a("li"),LMe=a("strong"),eLr=o("deberta"),oLr=o(" \u2014 "),ZY=a("a"),rLr=o("TFDebertaForMaskedLM"),tLr=o(" (DeBERTa model)"),aLr=l(),I4=a("li"),yMe=a("strong"),nLr=o("deberta-v2"),sLr=o(" \u2014 "),eK=a("a"),lLr=o("TFDebertaV2ForMaskedLM"),iLr=o(" (DeBERTa-v2 model)"),dLr=l(),N4=a("li"),xMe=a("strong"),cLr=o("distilbert"),fLr=o(" \u2014 "),oK=a("a"),mLr=o("TFDistilBertForMaskedLM"),gLr=o(" (DistilBERT model)"),hLr=l(),q4=a("li"),$Me=a("strong"),pLr=o("electra"),_Lr=o(" \u2014 "),rK=a("a"),uLr=o("TFElectraForMaskedLM"),bLr=o(" (ELECTRA model)"),vLr=l(),j4=a("li"),kMe=a("strong"),FLr=o("flaubert"),TLr=o(" \u2014 "),tK=a("a"),MLr=o("TFFlaubertWithLMHeadModel"),ELr=o(" (FlauBERT model)"),CLr=l(),D4=a("li"),SMe=a("strong"),wLr=o("funnel"),ALr=o(" \u2014 "),aK=a("a"),LLr=o("TFFunnelForMaskedLM"),yLr=o(" (Funnel Transformer model)"),xLr=l(),G4=a("li"),RMe=a("strong"),$Lr=o("layoutlm"),kLr=o(" \u2014 "),nK=a("a"),SLr=o("TFLayoutLMForMaskedLM"),RLr=o(" (LayoutLM model)"),PLr=l(),O4=a("li"),PMe=a("strong"),BLr=o("longformer"),ILr=o(" \u2014 "),sK=a("a"),NLr=o("TFLongformerForMaskedLM"),qLr=o(" (Longformer model)"),jLr=l(),V4=a("li"),BMe=a("strong"),DLr=o("mobilebert"),GLr=o(" \u2014 "),lK=a("a"),OLr=o("TFMobileBertForMaskedLM"),VLr=o(" (MobileBERT model)"),XLr=l(),X4=a("li"),IMe=a("strong"),zLr=o("mpnet"),WLr=o(" \u2014 "),iK=a("a"),QLr=o("TFMPNetForMaskedLM"),HLr=o(" (MPNet model)"),ULr=l(),z4=a("li"),NMe=a("strong"),JLr=o("rembert"),YLr=o(" \u2014 "),dK=a("a"),KLr=o("TFRemBertForMaskedLM"),ZLr=o(" (RemBERT model)"),eyr=l(),W4=a("li"),qMe=a("strong"),oyr=o("roberta"),ryr=o(" \u2014 "),cK=a("a"),tyr=o("TFRobertaForMaskedLM"),ayr=o(" (RoBERTa model)"),nyr=l(),Q4=a("li"),jMe=a("strong"),syr=o("roformer"),lyr=o(" \u2014 "),fK=a("a"),iyr=o("TFRoFormerForMaskedLM"),dyr=o(" (RoFormer model)"),cyr=l(),H4=a("li"),DMe=a("strong"),fyr=o("tapas"),myr=o(" \u2014 "),mK=a("a"),gyr=o("TFTapasForMaskedLM"),hyr=o(" (TAPAS model)"),pyr=l(),U4=a("li"),GMe=a("strong"),_yr=o("xlm"),uyr=o(" \u2014 "),gK=a("a"),byr=o("TFXLMWithLMHeadModel"),vyr=o(" (XLM model)"),Fyr=l(),J4=a("li"),OMe=a("strong"),Tyr=o("xlm-roberta"),Myr=o(" \u2014 "),hK=a("a"),Eyr=o("TFXLMRobertaForMaskedLM"),Cyr=o(" (XLM-RoBERTa model)"),wyr=l(),F(Y4.$$.fragment),$We=l(),Ec=a("h2"),K4=a("a"),VMe=a("span"),F(Rx.$$.fragment),Ayr=l(),XMe=a("span"),Lyr=o("TFAutoModelForSeq2SeqLM"),kWe=l(),lr=a("div"),F(Px.$$.fragment),yyr=l(),Cc=a("p"),xyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pK=a("a"),$yr=o("from_pretrained()"),kyr=o(" class method or the "),_K=a("a"),Syr=o("from_config()"),Ryr=o(` class
method.`),Pyr=l(),Bx=a("p"),Byr=o("This class cannot be instantiated directly using "),zMe=a("code"),Iyr=o("__init__()"),Nyr=o(" (throws an error)."),qyr=l(),qt=a("div"),F(Ix.$$.fragment),jyr=l(),WMe=a("p"),Dyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gyr=l(),wc=a("p"),Oyr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),Vyr=o("not"),Xyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),zyr=o("from_pretrained()"),Wyr=o(" to load the model weights."),Qyr=l(),F(Z4.$$.fragment),Hyr=l(),Br=a("div"),F(Nx.$$.fragment),Uyr=l(),HMe=a("p"),Jyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Yyr=l(),gn=a("p"),Kyr=o("The model class to instantiate is selected based on the "),UMe=a("code"),Zyr=o("model_type"),e9r=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),o9r=o("pretrained_model_name_or_path"),r9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),t9r=o("pretrained_model_name_or_path"),a9r=o(":"),n9r=l(),ye=a("ul"),eE=a("li"),KMe=a("strong"),s9r=o("bart"),l9r=o(" \u2014 "),bK=a("a"),i9r=o("TFBartForConditionalGeneration"),d9r=o(" (BART model)"),c9r=l(),oE=a("li"),ZMe=a("strong"),f9r=o("blenderbot"),m9r=o(" \u2014 "),vK=a("a"),g9r=o("TFBlenderbotForConditionalGeneration"),h9r=o(" (Blenderbot model)"),p9r=l(),rE=a("li"),e4e=a("strong"),_9r=o("blenderbot-small"),u9r=o(" \u2014 "),FK=a("a"),b9r=o("TFBlenderbotSmallForConditionalGeneration"),v9r=o(" (BlenderbotSmall model)"),F9r=l(),tE=a("li"),o4e=a("strong"),T9r=o("encoder-decoder"),M9r=o(" \u2014 "),TK=a("a"),E9r=o("TFEncoderDecoderModel"),C9r=o(" (Encoder decoder model)"),w9r=l(),aE=a("li"),r4e=a("strong"),A9r=o("led"),L9r=o(" \u2014 "),MK=a("a"),y9r=o("TFLEDForConditionalGeneration"),x9r=o(" (LED model)"),$9r=l(),nE=a("li"),t4e=a("strong"),k9r=o("marian"),S9r=o(" \u2014 "),EK=a("a"),R9r=o("TFMarianMTModel"),P9r=o(" (Marian model)"),B9r=l(),sE=a("li"),a4e=a("strong"),I9r=o("mbart"),N9r=o(" \u2014 "),CK=a("a"),q9r=o("TFMBartForConditionalGeneration"),j9r=o(" (mBART model)"),D9r=l(),lE=a("li"),n4e=a("strong"),G9r=o("mt5"),O9r=o(" \u2014 "),wK=a("a"),V9r=o("TFMT5ForConditionalGeneration"),X9r=o(" (MT5 model)"),z9r=l(),iE=a("li"),s4e=a("strong"),W9r=o("pegasus"),Q9r=o(" \u2014 "),AK=a("a"),H9r=o("TFPegasusForConditionalGeneration"),U9r=o(" (Pegasus model)"),J9r=l(),dE=a("li"),l4e=a("strong"),Y9r=o("t5"),K9r=o(" \u2014 "),LK=a("a"),Z9r=o("TFT5ForConditionalGeneration"),exr=o(" (T5 model)"),oxr=l(),F(cE.$$.fragment),SWe=l(),Ac=a("h2"),fE=a("a"),i4e=a("span"),F(qx.$$.fragment),rxr=l(),d4e=a("span"),txr=o("TFAutoModelForSequenceClassification"),RWe=l(),ir=a("div"),F(jx.$$.fragment),axr=l(),Lc=a("p"),nxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yK=a("a"),sxr=o("from_pretrained()"),lxr=o(" class method or the "),xK=a("a"),ixr=o("from_config()"),dxr=o(` class
method.`),cxr=l(),Dx=a("p"),fxr=o("This class cannot be instantiated directly using "),c4e=a("code"),mxr=o("__init__()"),gxr=o(" (throws an error)."),hxr=l(),jt=a("div"),F(Gx.$$.fragment),pxr=l(),f4e=a("p"),_xr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uxr=l(),yc=a("p"),bxr=o(`Note:
Loading a model from its configuration file does `),m4e=a("strong"),vxr=o("not"),Fxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=a("a"),Txr=o("from_pretrained()"),Mxr=o(" to load the model weights."),Exr=l(),F(mE.$$.fragment),Cxr=l(),Ir=a("div"),F(Ox.$$.fragment),wxr=l(),g4e=a("p"),Axr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lxr=l(),hn=a("p"),yxr=o("The model class to instantiate is selected based on the "),h4e=a("code"),xxr=o("model_type"),$xr=o(` property of the config object (either
passed as an argument or loaded from `),p4e=a("code"),kxr=o("pretrained_model_name_or_path"),Sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=a("code"),Rxr=o("pretrained_model_name_or_path"),Pxr=o(":"),Bxr=l(),te=a("ul"),gE=a("li"),u4e=a("strong"),Ixr=o("albert"),Nxr=o(" \u2014 "),kK=a("a"),qxr=o("TFAlbertForSequenceClassification"),jxr=o(" (ALBERT model)"),Dxr=l(),hE=a("li"),b4e=a("strong"),Gxr=o("bert"),Oxr=o(" \u2014 "),SK=a("a"),Vxr=o("TFBertForSequenceClassification"),Xxr=o(" (BERT model)"),zxr=l(),pE=a("li"),v4e=a("strong"),Wxr=o("camembert"),Qxr=o(" \u2014 "),RK=a("a"),Hxr=o("TFCamembertForSequenceClassification"),Uxr=o(" (CamemBERT model)"),Jxr=l(),_E=a("li"),F4e=a("strong"),Yxr=o("convbert"),Kxr=o(" \u2014 "),PK=a("a"),Zxr=o("TFConvBertForSequenceClassification"),e$r=o(" (ConvBERT model)"),o$r=l(),uE=a("li"),T4e=a("strong"),r$r=o("ctrl"),t$r=o(" \u2014 "),BK=a("a"),a$r=o("TFCTRLForSequenceClassification"),n$r=o(" (CTRL model)"),s$r=l(),bE=a("li"),M4e=a("strong"),l$r=o("deberta"),i$r=o(" \u2014 "),IK=a("a"),d$r=o("TFDebertaForSequenceClassification"),c$r=o(" (DeBERTa model)"),f$r=l(),vE=a("li"),E4e=a("strong"),m$r=o("deberta-v2"),g$r=o(" \u2014 "),NK=a("a"),h$r=o("TFDebertaV2ForSequenceClassification"),p$r=o(" (DeBERTa-v2 model)"),_$r=l(),FE=a("li"),C4e=a("strong"),u$r=o("distilbert"),b$r=o(" \u2014 "),qK=a("a"),v$r=o("TFDistilBertForSequenceClassification"),F$r=o(" (DistilBERT model)"),T$r=l(),TE=a("li"),w4e=a("strong"),M$r=o("electra"),E$r=o(" \u2014 "),jK=a("a"),C$r=o("TFElectraForSequenceClassification"),w$r=o(" (ELECTRA model)"),A$r=l(),ME=a("li"),A4e=a("strong"),L$r=o("flaubert"),y$r=o(" \u2014 "),DK=a("a"),x$r=o("TFFlaubertForSequenceClassification"),$$r=o(" (FlauBERT model)"),k$r=l(),EE=a("li"),L4e=a("strong"),S$r=o("funnel"),R$r=o(" \u2014 "),GK=a("a"),P$r=o("TFFunnelForSequenceClassification"),B$r=o(" (Funnel Transformer model)"),I$r=l(),CE=a("li"),y4e=a("strong"),N$r=o("gpt2"),q$r=o(" \u2014 "),OK=a("a"),j$r=o("TFGPT2ForSequenceClassification"),D$r=o(" (OpenAI GPT-2 model)"),G$r=l(),wE=a("li"),x4e=a("strong"),O$r=o("gptj"),V$r=o(" \u2014 "),VK=a("a"),X$r=o("TFGPTJForSequenceClassification"),z$r=o(" (GPT-J model)"),W$r=l(),AE=a("li"),$4e=a("strong"),Q$r=o("layoutlm"),H$r=o(" \u2014 "),XK=a("a"),U$r=o("TFLayoutLMForSequenceClassification"),J$r=o(" (LayoutLM model)"),Y$r=l(),LE=a("li"),k4e=a("strong"),K$r=o("longformer"),Z$r=o(" \u2014 "),zK=a("a"),ekr=o("TFLongformerForSequenceClassification"),okr=o(" (Longformer model)"),rkr=l(),yE=a("li"),S4e=a("strong"),tkr=o("mobilebert"),akr=o(" \u2014 "),WK=a("a"),nkr=o("TFMobileBertForSequenceClassification"),skr=o(" (MobileBERT model)"),lkr=l(),xE=a("li"),R4e=a("strong"),ikr=o("mpnet"),dkr=o(" \u2014 "),QK=a("a"),ckr=o("TFMPNetForSequenceClassification"),fkr=o(" (MPNet model)"),mkr=l(),$E=a("li"),P4e=a("strong"),gkr=o("openai-gpt"),hkr=o(" \u2014 "),HK=a("a"),pkr=o("TFOpenAIGPTForSequenceClassification"),_kr=o(" (OpenAI GPT model)"),ukr=l(),kE=a("li"),B4e=a("strong"),bkr=o("rembert"),vkr=o(" \u2014 "),UK=a("a"),Fkr=o("TFRemBertForSequenceClassification"),Tkr=o(" (RemBERT model)"),Mkr=l(),SE=a("li"),I4e=a("strong"),Ekr=o("roberta"),Ckr=o(" \u2014 "),JK=a("a"),wkr=o("TFRobertaForSequenceClassification"),Akr=o(" (RoBERTa model)"),Lkr=l(),RE=a("li"),N4e=a("strong"),ykr=o("roformer"),xkr=o(" \u2014 "),YK=a("a"),$kr=o("TFRoFormerForSequenceClassification"),kkr=o(" (RoFormer model)"),Skr=l(),PE=a("li"),q4e=a("strong"),Rkr=o("tapas"),Pkr=o(" \u2014 "),KK=a("a"),Bkr=o("TFTapasForSequenceClassification"),Ikr=o(" (TAPAS model)"),Nkr=l(),BE=a("li"),j4e=a("strong"),qkr=o("transfo-xl"),jkr=o(" \u2014 "),ZK=a("a"),Dkr=o("TFTransfoXLForSequenceClassification"),Gkr=o(" (Transformer-XL model)"),Okr=l(),IE=a("li"),D4e=a("strong"),Vkr=o("xlm"),Xkr=o(" \u2014 "),eZ=a("a"),zkr=o("TFXLMForSequenceClassification"),Wkr=o(" (XLM model)"),Qkr=l(),NE=a("li"),G4e=a("strong"),Hkr=o("xlm-roberta"),Ukr=o(" \u2014 "),oZ=a("a"),Jkr=o("TFXLMRobertaForSequenceClassification"),Ykr=o(" (XLM-RoBERTa model)"),Kkr=l(),qE=a("li"),O4e=a("strong"),Zkr=o("xlnet"),eSr=o(" \u2014 "),rZ=a("a"),oSr=o("TFXLNetForSequenceClassification"),rSr=o(" (XLNet model)"),tSr=l(),F(jE.$$.fragment),PWe=l(),xc=a("h2"),DE=a("a"),V4e=a("span"),F(Vx.$$.fragment),aSr=l(),X4e=a("span"),nSr=o("TFAutoModelForMultipleChoice"),BWe=l(),dr=a("div"),F(Xx.$$.fragment),sSr=l(),$c=a("p"),lSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tZ=a("a"),iSr=o("from_pretrained()"),dSr=o(" class method or the "),aZ=a("a"),cSr=o("from_config()"),fSr=o(` class
method.`),mSr=l(),zx=a("p"),gSr=o("This class cannot be instantiated directly using "),z4e=a("code"),hSr=o("__init__()"),pSr=o(" (throws an error)."),_Sr=l(),Dt=a("div"),F(Wx.$$.fragment),uSr=l(),W4e=a("p"),bSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vSr=l(),kc=a("p"),FSr=o(`Note:
Loading a model from its configuration file does `),Q4e=a("strong"),TSr=o("not"),MSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),ESr=o("from_pretrained()"),CSr=o(" to load the model weights."),wSr=l(),F(GE.$$.fragment),ASr=l(),Nr=a("div"),F(Qx.$$.fragment),LSr=l(),H4e=a("p"),ySr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xSr=l(),pn=a("p"),$Sr=o("The model class to instantiate is selected based on the "),U4e=a("code"),kSr=o("model_type"),SSr=o(` property of the config object (either
passed as an argument or loaded from `),J4e=a("code"),RSr=o("pretrained_model_name_or_path"),PSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=a("code"),BSr=o("pretrained_model_name_or_path"),ISr=o(":"),NSr=l(),ve=a("ul"),OE=a("li"),K4e=a("strong"),qSr=o("albert"),jSr=o(" \u2014 "),sZ=a("a"),DSr=o("TFAlbertForMultipleChoice"),GSr=o(" (ALBERT model)"),OSr=l(),VE=a("li"),Z4e=a("strong"),VSr=o("bert"),XSr=o(" \u2014 "),lZ=a("a"),zSr=o("TFBertForMultipleChoice"),WSr=o(" (BERT model)"),QSr=l(),XE=a("li"),eEe=a("strong"),HSr=o("camembert"),USr=o(" \u2014 "),iZ=a("a"),JSr=o("TFCamembertForMultipleChoice"),YSr=o(" (CamemBERT model)"),KSr=l(),zE=a("li"),oEe=a("strong"),ZSr=o("convbert"),eRr=o(" \u2014 "),dZ=a("a"),oRr=o("TFConvBertForMultipleChoice"),rRr=o(" (ConvBERT model)"),tRr=l(),WE=a("li"),rEe=a("strong"),aRr=o("distilbert"),nRr=o(" \u2014 "),cZ=a("a"),sRr=o("TFDistilBertForMultipleChoice"),lRr=o(" (DistilBERT model)"),iRr=l(),QE=a("li"),tEe=a("strong"),dRr=o("electra"),cRr=o(" \u2014 "),fZ=a("a"),fRr=o("TFElectraForMultipleChoice"),mRr=o(" (ELECTRA model)"),gRr=l(),HE=a("li"),aEe=a("strong"),hRr=o("flaubert"),pRr=o(" \u2014 "),mZ=a("a"),_Rr=o("TFFlaubertForMultipleChoice"),uRr=o(" (FlauBERT model)"),bRr=l(),UE=a("li"),nEe=a("strong"),vRr=o("funnel"),FRr=o(" \u2014 "),gZ=a("a"),TRr=o("TFFunnelForMultipleChoice"),MRr=o(" (Funnel Transformer model)"),ERr=l(),JE=a("li"),sEe=a("strong"),CRr=o("longformer"),wRr=o(" \u2014 "),hZ=a("a"),ARr=o("TFLongformerForMultipleChoice"),LRr=o(" (Longformer model)"),yRr=l(),YE=a("li"),lEe=a("strong"),xRr=o("mobilebert"),$Rr=o(" \u2014 "),pZ=a("a"),kRr=o("TFMobileBertForMultipleChoice"),SRr=o(" (MobileBERT model)"),RRr=l(),KE=a("li"),iEe=a("strong"),PRr=o("mpnet"),BRr=o(" \u2014 "),_Z=a("a"),IRr=o("TFMPNetForMultipleChoice"),NRr=o(" (MPNet model)"),qRr=l(),ZE=a("li"),dEe=a("strong"),jRr=o("rembert"),DRr=o(" \u2014 "),uZ=a("a"),GRr=o("TFRemBertForMultipleChoice"),ORr=o(" (RemBERT model)"),VRr=l(),eC=a("li"),cEe=a("strong"),XRr=o("roberta"),zRr=o(" \u2014 "),bZ=a("a"),WRr=o("TFRobertaForMultipleChoice"),QRr=o(" (RoBERTa model)"),HRr=l(),oC=a("li"),fEe=a("strong"),URr=o("roformer"),JRr=o(" \u2014 "),vZ=a("a"),YRr=o("TFRoFormerForMultipleChoice"),KRr=o(" (RoFormer model)"),ZRr=l(),rC=a("li"),mEe=a("strong"),ePr=o("xlm"),oPr=o(" \u2014 "),FZ=a("a"),rPr=o("TFXLMForMultipleChoice"),tPr=o(" (XLM model)"),aPr=l(),tC=a("li"),gEe=a("strong"),nPr=o("xlm-roberta"),sPr=o(" \u2014 "),TZ=a("a"),lPr=o("TFXLMRobertaForMultipleChoice"),iPr=o(" (XLM-RoBERTa model)"),dPr=l(),aC=a("li"),hEe=a("strong"),cPr=o("xlnet"),fPr=o(" \u2014 "),MZ=a("a"),mPr=o("TFXLNetForMultipleChoice"),gPr=o(" (XLNet model)"),hPr=l(),F(nC.$$.fragment),IWe=l(),Sc=a("h2"),sC=a("a"),pEe=a("span"),F(Hx.$$.fragment),pPr=l(),_Ee=a("span"),_Pr=o("TFAutoModelForNextSentencePrediction"),NWe=l(),cr=a("div"),F(Ux.$$.fragment),uPr=l(),Rc=a("p"),bPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EZ=a("a"),vPr=o("from_pretrained()"),FPr=o(" class method or the "),CZ=a("a"),TPr=o("from_config()"),MPr=o(` class
method.`),EPr=l(),Jx=a("p"),CPr=o("This class cannot be instantiated directly using "),uEe=a("code"),wPr=o("__init__()"),APr=o(" (throws an error)."),LPr=l(),Gt=a("div"),F(Yx.$$.fragment),yPr=l(),bEe=a("p"),xPr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Pr=l(),Pc=a("p"),kPr=o(`Note:
Loading a model from its configuration file does `),vEe=a("strong"),SPr=o("not"),RPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("a"),PPr=o("from_pretrained()"),BPr=o(" to load the model weights."),IPr=l(),F(lC.$$.fragment),NPr=l(),qr=a("div"),F(Kx.$$.fragment),qPr=l(),FEe=a("p"),jPr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DPr=l(),_n=a("p"),GPr=o("The model class to instantiate is selected based on the "),TEe=a("code"),OPr=o("model_type"),VPr=o(` property of the config object (either
passed as an argument or loaded from `),MEe=a("code"),XPr=o("pretrained_model_name_or_path"),zPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=a("code"),WPr=o("pretrained_model_name_or_path"),QPr=o(":"),HPr=l(),Zx=a("ul"),iC=a("li"),CEe=a("strong"),UPr=o("bert"),JPr=o(" \u2014 "),AZ=a("a"),YPr=o("TFBertForNextSentencePrediction"),KPr=o(" (BERT model)"),ZPr=l(),dC=a("li"),wEe=a("strong"),eBr=o("mobilebert"),oBr=o(" \u2014 "),LZ=a("a"),rBr=o("TFMobileBertForNextSentencePrediction"),tBr=o(" (MobileBERT model)"),aBr=l(),F(cC.$$.fragment),qWe=l(),Bc=a("h2"),fC=a("a"),AEe=a("span"),F(e$.$$.fragment),nBr=l(),LEe=a("span"),sBr=o("TFAutoModelForTableQuestionAnswering"),jWe=l(),fr=a("div"),F(o$.$$.fragment),lBr=l(),Ic=a("p"),iBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yZ=a("a"),dBr=o("from_pretrained()"),cBr=o(" class method or the "),xZ=a("a"),fBr=o("from_config()"),mBr=o(` class
method.`),gBr=l(),r$=a("p"),hBr=o("This class cannot be instantiated directly using "),yEe=a("code"),pBr=o("__init__()"),_Br=o(" (throws an error)."),uBr=l(),Ot=a("div"),F(t$.$$.fragment),bBr=l(),xEe=a("p"),vBr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FBr=l(),Nc=a("p"),TBr=o(`Note:
Loading a model from its configuration file does `),$Ee=a("strong"),MBr=o("not"),EBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=a("a"),CBr=o("from_pretrained()"),wBr=o(" to load the model weights."),ABr=l(),F(mC.$$.fragment),LBr=l(),jr=a("div"),F(a$.$$.fragment),yBr=l(),kEe=a("p"),xBr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Br=l(),un=a("p"),kBr=o("The model class to instantiate is selected based on the "),SEe=a("code"),SBr=o("model_type"),RBr=o(` property of the config object (either
passed as an argument or loaded from `),REe=a("code"),PBr=o("pretrained_model_name_or_path"),BBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=a("code"),IBr=o("pretrained_model_name_or_path"),NBr=o(":"),qBr=l(),BEe=a("ul"),gC=a("li"),IEe=a("strong"),jBr=o("tapas"),DBr=o(" \u2014 "),kZ=a("a"),GBr=o("TFTapasForQuestionAnswering"),OBr=o(" (TAPAS model)"),VBr=l(),F(hC.$$.fragment),DWe=l(),qc=a("h2"),pC=a("a"),NEe=a("span"),F(n$.$$.fragment),XBr=l(),qEe=a("span"),zBr=o("TFAutoModelForTokenClassification"),GWe=l(),mr=a("div"),F(s$.$$.fragment),WBr=l(),jc=a("p"),QBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SZ=a("a"),HBr=o("from_pretrained()"),UBr=o(" class method or the "),RZ=a("a"),JBr=o("from_config()"),YBr=o(` class
method.`),KBr=l(),l$=a("p"),ZBr=o("This class cannot be instantiated directly using "),jEe=a("code"),eIr=o("__init__()"),oIr=o(" (throws an error)."),rIr=l(),Vt=a("div"),F(i$.$$.fragment),tIr=l(),DEe=a("p"),aIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nIr=l(),Dc=a("p"),sIr=o(`Note:
Loading a model from its configuration file does `),GEe=a("strong"),lIr=o("not"),iIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),dIr=o("from_pretrained()"),cIr=o(" to load the model weights."),fIr=l(),F(_C.$$.fragment),mIr=l(),Dr=a("div"),F(d$.$$.fragment),gIr=l(),OEe=a("p"),hIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pIr=l(),bn=a("p"),_Ir=o("The model class to instantiate is selected based on the "),VEe=a("code"),uIr=o("model_type"),bIr=o(` property of the config object (either
passed as an argument or loaded from `),XEe=a("code"),vIr=o("pretrained_model_name_or_path"),FIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=a("code"),TIr=o("pretrained_model_name_or_path"),MIr=o(":"),EIr=l(),de=a("ul"),uC=a("li"),WEe=a("strong"),CIr=o("albert"),wIr=o(" \u2014 "),BZ=a("a"),AIr=o("TFAlbertForTokenClassification"),LIr=o(" (ALBERT model)"),yIr=l(),bC=a("li"),QEe=a("strong"),xIr=o("bert"),$Ir=o(" \u2014 "),IZ=a("a"),kIr=o("TFBertForTokenClassification"),SIr=o(" (BERT model)"),RIr=l(),vC=a("li"),HEe=a("strong"),PIr=o("camembert"),BIr=o(" \u2014 "),NZ=a("a"),IIr=o("TFCamembertForTokenClassification"),NIr=o(" (CamemBERT model)"),qIr=l(),FC=a("li"),UEe=a("strong"),jIr=o("convbert"),DIr=o(" \u2014 "),qZ=a("a"),GIr=o("TFConvBertForTokenClassification"),OIr=o(" (ConvBERT model)"),VIr=l(),TC=a("li"),JEe=a("strong"),XIr=o("deberta"),zIr=o(" \u2014 "),jZ=a("a"),WIr=o("TFDebertaForTokenClassification"),QIr=o(" (DeBERTa model)"),HIr=l(),MC=a("li"),YEe=a("strong"),UIr=o("deberta-v2"),JIr=o(" \u2014 "),DZ=a("a"),YIr=o("TFDebertaV2ForTokenClassification"),KIr=o(" (DeBERTa-v2 model)"),ZIr=l(),EC=a("li"),KEe=a("strong"),eNr=o("distilbert"),oNr=o(" \u2014 "),GZ=a("a"),rNr=o("TFDistilBertForTokenClassification"),tNr=o(" (DistilBERT model)"),aNr=l(),CC=a("li"),ZEe=a("strong"),nNr=o("electra"),sNr=o(" \u2014 "),OZ=a("a"),lNr=o("TFElectraForTokenClassification"),iNr=o(" (ELECTRA model)"),dNr=l(),wC=a("li"),eCe=a("strong"),cNr=o("flaubert"),fNr=o(" \u2014 "),VZ=a("a"),mNr=o("TFFlaubertForTokenClassification"),gNr=o(" (FlauBERT model)"),hNr=l(),AC=a("li"),oCe=a("strong"),pNr=o("funnel"),_Nr=o(" \u2014 "),XZ=a("a"),uNr=o("TFFunnelForTokenClassification"),bNr=o(" (Funnel Transformer model)"),vNr=l(),LC=a("li"),rCe=a("strong"),FNr=o("layoutlm"),TNr=o(" \u2014 "),zZ=a("a"),MNr=o("TFLayoutLMForTokenClassification"),ENr=o(" (LayoutLM model)"),CNr=l(),yC=a("li"),tCe=a("strong"),wNr=o("longformer"),ANr=o(" \u2014 "),WZ=a("a"),LNr=o("TFLongformerForTokenClassification"),yNr=o(" (Longformer model)"),xNr=l(),xC=a("li"),aCe=a("strong"),$Nr=o("mobilebert"),kNr=o(" \u2014 "),QZ=a("a"),SNr=o("TFMobileBertForTokenClassification"),RNr=o(" (MobileBERT model)"),PNr=l(),$C=a("li"),nCe=a("strong"),BNr=o("mpnet"),INr=o(" \u2014 "),HZ=a("a"),NNr=o("TFMPNetForTokenClassification"),qNr=o(" (MPNet model)"),jNr=l(),kC=a("li"),sCe=a("strong"),DNr=o("rembert"),GNr=o(" \u2014 "),UZ=a("a"),ONr=o("TFRemBertForTokenClassification"),VNr=o(" (RemBERT model)"),XNr=l(),SC=a("li"),lCe=a("strong"),zNr=o("roberta"),WNr=o(" \u2014 "),JZ=a("a"),QNr=o("TFRobertaForTokenClassification"),HNr=o(" (RoBERTa model)"),UNr=l(),RC=a("li"),iCe=a("strong"),JNr=o("roformer"),YNr=o(" \u2014 "),YZ=a("a"),KNr=o("TFRoFormerForTokenClassification"),ZNr=o(" (RoFormer model)"),eqr=l(),PC=a("li"),dCe=a("strong"),oqr=o("xlm"),rqr=o(" \u2014 "),KZ=a("a"),tqr=o("TFXLMForTokenClassification"),aqr=o(" (XLM model)"),nqr=l(),BC=a("li"),cCe=a("strong"),sqr=o("xlm-roberta"),lqr=o(" \u2014 "),ZZ=a("a"),iqr=o("TFXLMRobertaForTokenClassification"),dqr=o(" (XLM-RoBERTa model)"),cqr=l(),IC=a("li"),fCe=a("strong"),fqr=o("xlnet"),mqr=o(" \u2014 "),eee=a("a"),gqr=o("TFXLNetForTokenClassification"),hqr=o(" (XLNet model)"),pqr=l(),F(NC.$$.fragment),OWe=l(),Gc=a("h2"),qC=a("a"),mCe=a("span"),F(c$.$$.fragment),_qr=l(),gCe=a("span"),uqr=o("TFAutoModelForQuestionAnswering"),VWe=l(),gr=a("div"),F(f$.$$.fragment),bqr=l(),Oc=a("p"),vqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oee=a("a"),Fqr=o("from_pretrained()"),Tqr=o(" class method or the "),ree=a("a"),Mqr=o("from_config()"),Eqr=o(` class
method.`),Cqr=l(),m$=a("p"),wqr=o("This class cannot be instantiated directly using "),hCe=a("code"),Aqr=o("__init__()"),Lqr=o(" (throws an error)."),yqr=l(),Xt=a("div"),F(g$.$$.fragment),xqr=l(),pCe=a("p"),$qr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kqr=l(),Vc=a("p"),Sqr=o(`Note:
Loading a model from its configuration file does `),_Ce=a("strong"),Rqr=o("not"),Pqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tee=a("a"),Bqr=o("from_pretrained()"),Iqr=o(" to load the model weights."),Nqr=l(),F(jC.$$.fragment),qqr=l(),Gr=a("div"),F(h$.$$.fragment),jqr=l(),uCe=a("p"),Dqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gqr=l(),vn=a("p"),Oqr=o("The model class to instantiate is selected based on the "),bCe=a("code"),Vqr=o("model_type"),Xqr=o(` property of the config object (either
passed as an argument or loaded from `),vCe=a("code"),zqr=o("pretrained_model_name_or_path"),Wqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=a("code"),Qqr=o("pretrained_model_name_or_path"),Hqr=o(":"),Uqr=l(),ce=a("ul"),DC=a("li"),TCe=a("strong"),Jqr=o("albert"),Yqr=o(" \u2014 "),aee=a("a"),Kqr=o("TFAlbertForQuestionAnswering"),Zqr=o(" (ALBERT model)"),ejr=l(),GC=a("li"),MCe=a("strong"),ojr=o("bert"),rjr=o(" \u2014 "),nee=a("a"),tjr=o("TFBertForQuestionAnswering"),ajr=o(" (BERT model)"),njr=l(),OC=a("li"),ECe=a("strong"),sjr=o("camembert"),ljr=o(" \u2014 "),see=a("a"),ijr=o("TFCamembertForQuestionAnswering"),djr=o(" (CamemBERT model)"),cjr=l(),VC=a("li"),CCe=a("strong"),fjr=o("convbert"),mjr=o(" \u2014 "),lee=a("a"),gjr=o("TFConvBertForQuestionAnswering"),hjr=o(" (ConvBERT model)"),pjr=l(),XC=a("li"),wCe=a("strong"),_jr=o("deberta"),ujr=o(" \u2014 "),iee=a("a"),bjr=o("TFDebertaForQuestionAnswering"),vjr=o(" (DeBERTa model)"),Fjr=l(),zC=a("li"),ACe=a("strong"),Tjr=o("deberta-v2"),Mjr=o(" \u2014 "),dee=a("a"),Ejr=o("TFDebertaV2ForQuestionAnswering"),Cjr=o(" (DeBERTa-v2 model)"),wjr=l(),WC=a("li"),LCe=a("strong"),Ajr=o("distilbert"),Ljr=o(" \u2014 "),cee=a("a"),yjr=o("TFDistilBertForQuestionAnswering"),xjr=o(" (DistilBERT model)"),$jr=l(),QC=a("li"),yCe=a("strong"),kjr=o("electra"),Sjr=o(" \u2014 "),fee=a("a"),Rjr=o("TFElectraForQuestionAnswering"),Pjr=o(" (ELECTRA model)"),Bjr=l(),HC=a("li"),xCe=a("strong"),Ijr=o("flaubert"),Njr=o(" \u2014 "),mee=a("a"),qjr=o("TFFlaubertForQuestionAnsweringSimple"),jjr=o(" (FlauBERT model)"),Djr=l(),UC=a("li"),$Ce=a("strong"),Gjr=o("funnel"),Ojr=o(" \u2014 "),gee=a("a"),Vjr=o("TFFunnelForQuestionAnswering"),Xjr=o(" (Funnel Transformer model)"),zjr=l(),JC=a("li"),kCe=a("strong"),Wjr=o("gptj"),Qjr=o(" \u2014 "),hee=a("a"),Hjr=o("TFGPTJForQuestionAnswering"),Ujr=o(" (GPT-J model)"),Jjr=l(),YC=a("li"),SCe=a("strong"),Yjr=o("longformer"),Kjr=o(" \u2014 "),pee=a("a"),Zjr=o("TFLongformerForQuestionAnswering"),eDr=o(" (Longformer model)"),oDr=l(),KC=a("li"),RCe=a("strong"),rDr=o("mobilebert"),tDr=o(" \u2014 "),_ee=a("a"),aDr=o("TFMobileBertForQuestionAnswering"),nDr=o(" (MobileBERT model)"),sDr=l(),ZC=a("li"),PCe=a("strong"),lDr=o("mpnet"),iDr=o(" \u2014 "),uee=a("a"),dDr=o("TFMPNetForQuestionAnswering"),cDr=o(" (MPNet model)"),fDr=l(),e5=a("li"),BCe=a("strong"),mDr=o("rembert"),gDr=o(" \u2014 "),bee=a("a"),hDr=o("TFRemBertForQuestionAnswering"),pDr=o(" (RemBERT model)"),_Dr=l(),o5=a("li"),ICe=a("strong"),uDr=o("roberta"),bDr=o(" \u2014 "),vee=a("a"),vDr=o("TFRobertaForQuestionAnswering"),FDr=o(" (RoBERTa model)"),TDr=l(),r5=a("li"),NCe=a("strong"),MDr=o("roformer"),EDr=o(" \u2014 "),Fee=a("a"),CDr=o("TFRoFormerForQuestionAnswering"),wDr=o(" (RoFormer model)"),ADr=l(),t5=a("li"),qCe=a("strong"),LDr=o("xlm"),yDr=o(" \u2014 "),Tee=a("a"),xDr=o("TFXLMForQuestionAnsweringSimple"),$Dr=o(" (XLM model)"),kDr=l(),a5=a("li"),jCe=a("strong"),SDr=o("xlm-roberta"),RDr=o(" \u2014 "),Mee=a("a"),PDr=o("TFXLMRobertaForQuestionAnswering"),BDr=o(" (XLM-RoBERTa model)"),IDr=l(),n5=a("li"),DCe=a("strong"),NDr=o("xlnet"),qDr=o(" \u2014 "),Eee=a("a"),jDr=o("TFXLNetForQuestionAnsweringSimple"),DDr=o(" (XLNet model)"),GDr=l(),F(s5.$$.fragment),XWe=l(),Xc=a("h2"),l5=a("a"),GCe=a("span"),F(p$.$$.fragment),ODr=l(),OCe=a("span"),VDr=o("TFAutoModelForVision2Seq"),zWe=l(),hr=a("div"),F(_$.$$.fragment),XDr=l(),zc=a("p"),zDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cee=a("a"),WDr=o("from_pretrained()"),QDr=o(" class method or the "),wee=a("a"),HDr=o("from_config()"),UDr=o(` class
method.`),JDr=l(),u$=a("p"),YDr=o("This class cannot be instantiated directly using "),VCe=a("code"),KDr=o("__init__()"),ZDr=o(" (throws an error)."),eGr=l(),zt=a("div"),F(b$.$$.fragment),oGr=l(),XCe=a("p"),rGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tGr=l(),Wc=a("p"),aGr=o(`Note:
Loading a model from its configuration file does `),zCe=a("strong"),nGr=o("not"),sGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=a("a"),lGr=o("from_pretrained()"),iGr=o(" to load the model weights."),dGr=l(),F(i5.$$.fragment),cGr=l(),Or=a("div"),F(v$.$$.fragment),fGr=l(),WCe=a("p"),mGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gGr=l(),Fn=a("p"),hGr=o("The model class to instantiate is selected based on the "),QCe=a("code"),pGr=o("model_type"),_Gr=o(` property of the config object (either
passed as an argument or loaded from `),HCe=a("code"),uGr=o("pretrained_model_name_or_path"),bGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UCe=a("code"),vGr=o("pretrained_model_name_or_path"),FGr=o(":"),TGr=l(),JCe=a("ul"),d5=a("li"),YCe=a("strong"),MGr=o("vision-encoder-decoder"),EGr=o(" \u2014 "),Lee=a("a"),CGr=o("TFVisionEncoderDecoderModel"),wGr=o(" (Vision Encoder decoder model)"),AGr=l(),F(c5.$$.fragment),WWe=l(),Qc=a("h2"),f5=a("a"),KCe=a("span"),F(F$.$$.fragment),LGr=l(),ZCe=a("span"),yGr=o("TFAutoModelForSpeechSeq2Seq"),QWe=l(),pr=a("div"),F(T$.$$.fragment),xGr=l(),Hc=a("p"),$Gr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yee=a("a"),kGr=o("from_pretrained()"),SGr=o(" class method or the "),xee=a("a"),RGr=o("from_config()"),PGr=o(` class
method.`),BGr=l(),M$=a("p"),IGr=o("This class cannot be instantiated directly using "),e5e=a("code"),NGr=o("__init__()"),qGr=o(" (throws an error)."),jGr=l(),Wt=a("div"),F(E$.$$.fragment),DGr=l(),o5e=a("p"),GGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OGr=l(),Uc=a("p"),VGr=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),XGr=o("not"),zGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=a("a"),WGr=o("from_pretrained()"),QGr=o(" to load the model weights."),HGr=l(),F(m5.$$.fragment),UGr=l(),Vr=a("div"),F(C$.$$.fragment),JGr=l(),t5e=a("p"),YGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),KGr=l(),Tn=a("p"),ZGr=o("The model class to instantiate is selected based on the "),a5e=a("code"),eOr=o("model_type"),oOr=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),rOr=o("pretrained_model_name_or_path"),tOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),aOr=o("pretrained_model_name_or_path"),nOr=o(":"),sOr=l(),l5e=a("ul"),g5=a("li"),i5e=a("strong"),lOr=o("speech_to_text"),iOr=o(" \u2014 "),kee=a("a"),dOr=o("TFSpeech2TextForConditionalGeneration"),cOr=o(" (Speech2Text model)"),fOr=l(),F(h5.$$.fragment),HWe=l(),Jc=a("h2"),p5=a("a"),d5e=a("span"),F(w$.$$.fragment),mOr=l(),c5e=a("span"),gOr=o("FlaxAutoModel"),UWe=l(),_r=a("div"),F(A$.$$.fragment),hOr=l(),Yc=a("p"),pOr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),See=a("a"),_Or=o("from_pretrained()"),uOr=o(" class method or the "),Ree=a("a"),bOr=o("from_config()"),vOr=o(` class
method.`),FOr=l(),L$=a("p"),TOr=o("This class cannot be instantiated directly using "),f5e=a("code"),MOr=o("__init__()"),EOr=o(" (throws an error)."),COr=l(),Qt=a("div"),F(y$.$$.fragment),wOr=l(),m5e=a("p"),AOr=o("Instantiates one of the base model classes of the library from a configuration."),LOr=l(),Kc=a("p"),yOr=o(`Note:
Loading a model from its configuration file does `),g5e=a("strong"),xOr=o("not"),$Or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),kOr=o("from_pretrained()"),SOr=o(" to load the model weights."),ROr=l(),F(_5.$$.fragment),POr=l(),Xr=a("div"),F(x$.$$.fragment),BOr=l(),h5e=a("p"),IOr=o("Instantiate one of the base model classes of the library from a pretrained model."),NOr=l(),Mn=a("p"),qOr=o("The model class to instantiate is selected based on the "),p5e=a("code"),jOr=o("model_type"),DOr=o(` property of the config object (either
passed as an argument or loaded from `),_5e=a("code"),GOr=o("pretrained_model_name_or_path"),OOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),VOr=o("pretrained_model_name_or_path"),XOr=o(":"),zOr=l(),oe=a("ul"),u5=a("li"),b5e=a("strong"),WOr=o("albert"),QOr=o(" \u2014 "),Bee=a("a"),HOr=o("FlaxAlbertModel"),UOr=o(" (ALBERT model)"),JOr=l(),b5=a("li"),v5e=a("strong"),YOr=o("bart"),KOr=o(" \u2014 "),Iee=a("a"),ZOr=o("FlaxBartModel"),eVr=o(" (BART model)"),oVr=l(),v5=a("li"),F5e=a("strong"),rVr=o("beit"),tVr=o(" \u2014 "),Nee=a("a"),aVr=o("FlaxBeitModel"),nVr=o(" (BEiT model)"),sVr=l(),F5=a("li"),T5e=a("strong"),lVr=o("bert"),iVr=o(" \u2014 "),qee=a("a"),dVr=o("FlaxBertModel"),cVr=o(" (BERT model)"),fVr=l(),T5=a("li"),M5e=a("strong"),mVr=o("big_bird"),gVr=o(" \u2014 "),jee=a("a"),hVr=o("FlaxBigBirdModel"),pVr=o(" (BigBird model)"),_Vr=l(),M5=a("li"),E5e=a("strong"),uVr=o("blenderbot"),bVr=o(" \u2014 "),Dee=a("a"),vVr=o("FlaxBlenderbotModel"),FVr=o(" (Blenderbot model)"),TVr=l(),E5=a("li"),C5e=a("strong"),MVr=o("blenderbot-small"),EVr=o(" \u2014 "),Gee=a("a"),CVr=o("FlaxBlenderbotSmallModel"),wVr=o(" (BlenderbotSmall model)"),AVr=l(),C5=a("li"),w5e=a("strong"),LVr=o("clip"),yVr=o(" \u2014 "),Oee=a("a"),xVr=o("FlaxCLIPModel"),$Vr=o(" (CLIP model)"),kVr=l(),w5=a("li"),A5e=a("strong"),SVr=o("distilbert"),RVr=o(" \u2014 "),Vee=a("a"),PVr=o("FlaxDistilBertModel"),BVr=o(" (DistilBERT model)"),IVr=l(),A5=a("li"),L5e=a("strong"),NVr=o("electra"),qVr=o(" \u2014 "),Xee=a("a"),jVr=o("FlaxElectraModel"),DVr=o(" (ELECTRA model)"),GVr=l(),L5=a("li"),y5e=a("strong"),OVr=o("gpt2"),VVr=o(" \u2014 "),zee=a("a"),XVr=o("FlaxGPT2Model"),zVr=o(" (OpenAI GPT-2 model)"),WVr=l(),y5=a("li"),x5e=a("strong"),QVr=o("gpt_neo"),HVr=o(" \u2014 "),Wee=a("a"),UVr=o("FlaxGPTNeoModel"),JVr=o(" (GPT Neo model)"),YVr=l(),x5=a("li"),$5e=a("strong"),KVr=o("gptj"),ZVr=o(" \u2014 "),Qee=a("a"),eXr=o("FlaxGPTJModel"),oXr=o(" (GPT-J model)"),rXr=l(),$5=a("li"),k5e=a("strong"),tXr=o("longt5"),aXr=o(" \u2014 "),Hee=a("a"),nXr=o("FlaxLongT5Model"),sXr=o(" (LongT5 model)"),lXr=l(),k5=a("li"),S5e=a("strong"),iXr=o("marian"),dXr=o(" \u2014 "),Uee=a("a"),cXr=o("FlaxMarianModel"),fXr=o(" (Marian model)"),mXr=l(),S5=a("li"),R5e=a("strong"),gXr=o("mbart"),hXr=o(" \u2014 "),Jee=a("a"),pXr=o("FlaxMBartModel"),_Xr=o(" (mBART model)"),uXr=l(),R5=a("li"),P5e=a("strong"),bXr=o("mt5"),vXr=o(" \u2014 "),Yee=a("a"),FXr=o("FlaxMT5Model"),TXr=o(" (MT5 model)"),MXr=l(),P5=a("li"),B5e=a("strong"),EXr=o("opt"),CXr=o(" \u2014 "),Kee=a("a"),wXr=o("FlaxOPTModel"),AXr=o(" (OPT model)"),LXr=l(),B5=a("li"),I5e=a("strong"),yXr=o("pegasus"),xXr=o(" \u2014 "),Zee=a("a"),$Xr=o("FlaxPegasusModel"),kXr=o(" (Pegasus model)"),SXr=l(),I5=a("li"),N5e=a("strong"),RXr=o("roberta"),PXr=o(" \u2014 "),eoe=a("a"),BXr=o("FlaxRobertaModel"),IXr=o(" (RoBERTa model)"),NXr=l(),N5=a("li"),q5e=a("strong"),qXr=o("roformer"),jXr=o(" \u2014 "),ooe=a("a"),DXr=o("FlaxRoFormerModel"),GXr=o(" (RoFormer model)"),OXr=l(),q5=a("li"),j5e=a("strong"),VXr=o("t5"),XXr=o(" \u2014 "),roe=a("a"),zXr=o("FlaxT5Model"),WXr=o(" (T5 model)"),QXr=l(),j5=a("li"),D5e=a("strong"),HXr=o("vision-text-dual-encoder"),UXr=o(" \u2014 "),toe=a("a"),JXr=o("FlaxVisionTextDualEncoderModel"),YXr=o(" (VisionTextDualEncoder model)"),KXr=l(),D5=a("li"),G5e=a("strong"),ZXr=o("vit"),ezr=o(" \u2014 "),aoe=a("a"),ozr=o("FlaxViTModel"),rzr=o(" (ViT model)"),tzr=l(),G5=a("li"),O5e=a("strong"),azr=o("wav2vec2"),nzr=o(" \u2014 "),noe=a("a"),szr=o("FlaxWav2Vec2Model"),lzr=o(" (Wav2Vec2 model)"),izr=l(),O5=a("li"),V5e=a("strong"),dzr=o("xglm"),czr=o(" \u2014 "),soe=a("a"),fzr=o("FlaxXGLMModel"),mzr=o(" (XGLM model)"),gzr=l(),V5=a("li"),X5e=a("strong"),hzr=o("xlm-roberta"),pzr=o(" \u2014 "),loe=a("a"),_zr=o("FlaxXLMRobertaModel"),uzr=o(" (XLM-RoBERTa model)"),bzr=l(),F(X5.$$.fragment),JWe=l(),Zc=a("h2"),z5=a("a"),z5e=a("span"),F($$.$$.fragment),vzr=l(),W5e=a("span"),Fzr=o("FlaxAutoModelForCausalLM"),YWe=l(),ur=a("div"),F(k$.$$.fragment),Tzr=l(),ef=a("p"),Mzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ioe=a("a"),Ezr=o("from_pretrained()"),Czr=o(" class method or the "),doe=a("a"),wzr=o("from_config()"),Azr=o(` class
method.`),Lzr=l(),S$=a("p"),yzr=o("This class cannot be instantiated directly using "),Q5e=a("code"),xzr=o("__init__()"),$zr=o(" (throws an error)."),kzr=l(),Ht=a("div"),F(R$.$$.fragment),Szr=l(),H5e=a("p"),Rzr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pzr=l(),of=a("p"),Bzr=o(`Note:
Loading a model from its configuration file does `),U5e=a("strong"),Izr=o("not"),Nzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=a("a"),qzr=o("from_pretrained()"),jzr=o(" to load the model weights."),Dzr=l(),F(W5.$$.fragment),Gzr=l(),zr=a("div"),F(P$.$$.fragment),Ozr=l(),J5e=a("p"),Vzr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xzr=l(),En=a("p"),zzr=o("The model class to instantiate is selected based on the "),Y5e=a("code"),Wzr=o("model_type"),Qzr=o(` property of the config object (either
passed as an argument or loaded from `),K5e=a("code"),Hzr=o("pretrained_model_name_or_path"),Uzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=a("code"),Jzr=o("pretrained_model_name_or_path"),Yzr=o(":"),Kzr=l(),xe=a("ul"),Q5=a("li"),e0e=a("strong"),Zzr=o("bart"),eWr=o(" \u2014 "),foe=a("a"),oWr=o("FlaxBartForCausalLM"),rWr=o(" (BART model)"),tWr=l(),H5=a("li"),o0e=a("strong"),aWr=o("bert"),nWr=o(" \u2014 "),moe=a("a"),sWr=o("FlaxBertForCausalLM"),lWr=o(" (BERT model)"),iWr=l(),U5=a("li"),r0e=a("strong"),dWr=o("big_bird"),cWr=o(" \u2014 "),goe=a("a"),fWr=o("FlaxBigBirdForCausalLM"),mWr=o(" (BigBird model)"),gWr=l(),J5=a("li"),t0e=a("strong"),hWr=o("electra"),pWr=o(" \u2014 "),hoe=a("a"),_Wr=o("FlaxElectraForCausalLM"),uWr=o(" (ELECTRA model)"),bWr=l(),Y5=a("li"),a0e=a("strong"),vWr=o("gpt2"),FWr=o(" \u2014 "),poe=a("a"),TWr=o("FlaxGPT2LMHeadModel"),MWr=o(" (OpenAI GPT-2 model)"),EWr=l(),K5=a("li"),n0e=a("strong"),CWr=o("gpt_neo"),wWr=o(" \u2014 "),_oe=a("a"),AWr=o("FlaxGPTNeoForCausalLM"),LWr=o(" (GPT Neo model)"),yWr=l(),Z5=a("li"),s0e=a("strong"),xWr=o("gptj"),$Wr=o(" \u2014 "),uoe=a("a"),kWr=o("FlaxGPTJForCausalLM"),SWr=o(" (GPT-J model)"),RWr=l(),e0=a("li"),l0e=a("strong"),PWr=o("opt"),BWr=o(" \u2014 "),boe=a("a"),IWr=o("FlaxOPTForCausalLM"),NWr=o(" (OPT model)"),qWr=l(),o0=a("li"),i0e=a("strong"),jWr=o("roberta"),DWr=o(" \u2014 "),voe=a("a"),GWr=o("FlaxRobertaForCausalLM"),OWr=o(" (RoBERTa model)"),VWr=l(),r0=a("li"),d0e=a("strong"),XWr=o("xglm"),zWr=o(" \u2014 "),Foe=a("a"),WWr=o("FlaxXGLMForCausalLM"),QWr=o(" (XGLM model)"),HWr=l(),F(t0.$$.fragment),KWe=l(),rf=a("h2"),a0=a("a"),c0e=a("span"),F(B$.$$.fragment),UWr=l(),f0e=a("span"),JWr=o("FlaxAutoModelForPreTraining"),ZWe=l(),br=a("div"),F(I$.$$.fragment),YWr=l(),tf=a("p"),KWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Toe=a("a"),ZWr=o("from_pretrained()"),eQr=o(" class method or the "),Moe=a("a"),oQr=o("from_config()"),rQr=o(` class
method.`),tQr=l(),N$=a("p"),aQr=o("This class cannot be instantiated directly using "),m0e=a("code"),nQr=o("__init__()"),sQr=o(" (throws an error)."),lQr=l(),Ut=a("div"),F(q$.$$.fragment),iQr=l(),g0e=a("p"),dQr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cQr=l(),af=a("p"),fQr=o(`Note:
Loading a model from its configuration file does `),h0e=a("strong"),mQr=o("not"),gQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=a("a"),hQr=o("from_pretrained()"),pQr=o(" to load the model weights."),_Qr=l(),F(n0.$$.fragment),uQr=l(),Wr=a("div"),F(j$.$$.fragment),bQr=l(),p0e=a("p"),vQr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FQr=l(),Cn=a("p"),TQr=o("The model class to instantiate is selected based on the "),_0e=a("code"),MQr=o("model_type"),EQr=o(` property of the config object (either
passed as an argument or loaded from `),u0e=a("code"),CQr=o("pretrained_model_name_or_path"),wQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b0e=a("code"),AQr=o("pretrained_model_name_or_path"),LQr=o(":"),yQr=l(),Ee=a("ul"),s0=a("li"),v0e=a("strong"),xQr=o("albert"),$Qr=o(" \u2014 "),Coe=a("a"),kQr=o("FlaxAlbertForPreTraining"),SQr=o(" (ALBERT model)"),RQr=l(),l0=a("li"),F0e=a("strong"),PQr=o("bart"),BQr=o(" \u2014 "),woe=a("a"),IQr=o("FlaxBartForConditionalGeneration"),NQr=o(" (BART model)"),qQr=l(),i0=a("li"),T0e=a("strong"),jQr=o("bert"),DQr=o(" \u2014 "),Aoe=a("a"),GQr=o("FlaxBertForPreTraining"),OQr=o(" (BERT model)"),VQr=l(),d0=a("li"),M0e=a("strong"),XQr=o("big_bird"),zQr=o(" \u2014 "),Loe=a("a"),WQr=o("FlaxBigBirdForPreTraining"),QQr=o(" (BigBird model)"),HQr=l(),c0=a("li"),E0e=a("strong"),UQr=o("electra"),JQr=o(" \u2014 "),yoe=a("a"),YQr=o("FlaxElectraForPreTraining"),KQr=o(" (ELECTRA model)"),ZQr=l(),f0=a("li"),C0e=a("strong"),eHr=o("longt5"),oHr=o(" \u2014 "),xoe=a("a"),rHr=o("FlaxLongT5ForConditionalGeneration"),tHr=o(" (LongT5 model)"),aHr=l(),m0=a("li"),w0e=a("strong"),nHr=o("mbart"),sHr=o(" \u2014 "),$oe=a("a"),lHr=o("FlaxMBartForConditionalGeneration"),iHr=o(" (mBART model)"),dHr=l(),g0=a("li"),A0e=a("strong"),cHr=o("mt5"),fHr=o(" \u2014 "),koe=a("a"),mHr=o("FlaxMT5ForConditionalGeneration"),gHr=o(" (MT5 model)"),hHr=l(),h0=a("li"),L0e=a("strong"),pHr=o("roberta"),_Hr=o(" \u2014 "),Soe=a("a"),uHr=o("FlaxRobertaForMaskedLM"),bHr=o(" (RoBERTa model)"),vHr=l(),p0=a("li"),y0e=a("strong"),FHr=o("roformer"),THr=o(" \u2014 "),Roe=a("a"),MHr=o("FlaxRoFormerForMaskedLM"),EHr=o(" (RoFormer model)"),CHr=l(),_0=a("li"),x0e=a("strong"),wHr=o("t5"),AHr=o(" \u2014 "),Poe=a("a"),LHr=o("FlaxT5ForConditionalGeneration"),yHr=o(" (T5 model)"),xHr=l(),u0=a("li"),$0e=a("strong"),$Hr=o("wav2vec2"),kHr=o(" \u2014 "),Boe=a("a"),SHr=o("FlaxWav2Vec2ForPreTraining"),RHr=o(" (Wav2Vec2 model)"),PHr=l(),b0=a("li"),k0e=a("strong"),BHr=o("xlm-roberta"),IHr=o(" \u2014 "),Ioe=a("a"),NHr=o("FlaxXLMRobertaForMaskedLM"),qHr=o(" (XLM-RoBERTa model)"),jHr=l(),F(v0.$$.fragment),eQe=l(),nf=a("h2"),F0=a("a"),S0e=a("span"),F(D$.$$.fragment),DHr=l(),R0e=a("span"),GHr=o("FlaxAutoModelForMaskedLM"),oQe=l(),vr=a("div"),F(G$.$$.fragment),OHr=l(),sf=a("p"),VHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Noe=a("a"),XHr=o("from_pretrained()"),zHr=o(" class method or the "),qoe=a("a"),WHr=o("from_config()"),QHr=o(` class
method.`),HHr=l(),O$=a("p"),UHr=o("This class cannot be instantiated directly using "),P0e=a("code"),JHr=o("__init__()"),YHr=o(" (throws an error)."),KHr=l(),Jt=a("div"),F(V$.$$.fragment),ZHr=l(),B0e=a("p"),eUr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oUr=l(),lf=a("p"),rUr=o(`Note:
Loading a model from its configuration file does `),I0e=a("strong"),tUr=o("not"),aUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=a("a"),nUr=o("from_pretrained()"),sUr=o(" to load the model weights."),lUr=l(),F(T0.$$.fragment),iUr=l(),Qr=a("div"),F(X$.$$.fragment),dUr=l(),N0e=a("p"),cUr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fUr=l(),wn=a("p"),mUr=o("The model class to instantiate is selected based on the "),q0e=a("code"),gUr=o("model_type"),hUr=o(` property of the config object (either
passed as an argument or loaded from `),j0e=a("code"),pUr=o("pretrained_model_name_or_path"),_Ur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=a("code"),uUr=o("pretrained_model_name_or_path"),bUr=o(":"),vUr=l(),$e=a("ul"),M0=a("li"),G0e=a("strong"),FUr=o("albert"),TUr=o(" \u2014 "),Doe=a("a"),MUr=o("FlaxAlbertForMaskedLM"),EUr=o(" (ALBERT model)"),CUr=l(),E0=a("li"),O0e=a("strong"),wUr=o("bart"),AUr=o(" \u2014 "),Goe=a("a"),LUr=o("FlaxBartForConditionalGeneration"),yUr=o(" (BART model)"),xUr=l(),C0=a("li"),V0e=a("strong"),$Ur=o("bert"),kUr=o(" \u2014 "),Ooe=a("a"),SUr=o("FlaxBertForMaskedLM"),RUr=o(" (BERT model)"),PUr=l(),w0=a("li"),X0e=a("strong"),BUr=o("big_bird"),IUr=o(" \u2014 "),Voe=a("a"),NUr=o("FlaxBigBirdForMaskedLM"),qUr=o(" (BigBird model)"),jUr=l(),A0=a("li"),z0e=a("strong"),DUr=o("distilbert"),GUr=o(" \u2014 "),Xoe=a("a"),OUr=o("FlaxDistilBertForMaskedLM"),VUr=o(" (DistilBERT model)"),XUr=l(),L0=a("li"),W0e=a("strong"),zUr=o("electra"),WUr=o(" \u2014 "),zoe=a("a"),QUr=o("FlaxElectraForMaskedLM"),HUr=o(" (ELECTRA model)"),UUr=l(),y0=a("li"),Q0e=a("strong"),JUr=o("mbart"),YUr=o(" \u2014 "),Woe=a("a"),KUr=o("FlaxMBartForConditionalGeneration"),ZUr=o(" (mBART model)"),eJr=l(),x0=a("li"),H0e=a("strong"),oJr=o("roberta"),rJr=o(" \u2014 "),Qoe=a("a"),tJr=o("FlaxRobertaForMaskedLM"),aJr=o(" (RoBERTa model)"),nJr=l(),$0=a("li"),U0e=a("strong"),sJr=o("roformer"),lJr=o(" \u2014 "),Hoe=a("a"),iJr=o("FlaxRoFormerForMaskedLM"),dJr=o(" (RoFormer model)"),cJr=l(),k0=a("li"),J0e=a("strong"),fJr=o("xlm-roberta"),mJr=o(" \u2014 "),Uoe=a("a"),gJr=o("FlaxXLMRobertaForMaskedLM"),hJr=o(" (XLM-RoBERTa model)"),pJr=l(),F(S0.$$.fragment),rQe=l(),df=a("h2"),R0=a("a"),Y0e=a("span"),F(z$.$$.fragment),_Jr=l(),K0e=a("span"),uJr=o("FlaxAutoModelForSeq2SeqLM"),tQe=l(),Fr=a("div"),F(W$.$$.fragment),bJr=l(),cf=a("p"),vJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Joe=a("a"),FJr=o("from_pretrained()"),TJr=o(" class method or the "),Yoe=a("a"),MJr=o("from_config()"),EJr=o(` class
method.`),CJr=l(),Q$=a("p"),wJr=o("This class cannot be instantiated directly using "),Z0e=a("code"),AJr=o("__init__()"),LJr=o(" (throws an error)."),yJr=l(),Yt=a("div"),F(H$.$$.fragment),xJr=l(),ewe=a("p"),$Jr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kJr=l(),ff=a("p"),SJr=o(`Note:
Loading a model from its configuration file does `),owe=a("strong"),RJr=o("not"),PJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=a("a"),BJr=o("from_pretrained()"),IJr=o(" to load the model weights."),NJr=l(),F(P0.$$.fragment),qJr=l(),Hr=a("div"),F(U$.$$.fragment),jJr=l(),rwe=a("p"),DJr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GJr=l(),An=a("p"),OJr=o("The model class to instantiate is selected based on the "),twe=a("code"),VJr=o("model_type"),XJr=o(` property of the config object (either
passed as an argument or loaded from `),awe=a("code"),zJr=o("pretrained_model_name_or_path"),WJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nwe=a("code"),QJr=o("pretrained_model_name_or_path"),HJr=o(":"),UJr=l(),ke=a("ul"),B0=a("li"),swe=a("strong"),JJr=o("bart"),YJr=o(" \u2014 "),Zoe=a("a"),KJr=o("FlaxBartForConditionalGeneration"),ZJr=o(" (BART model)"),eYr=l(),I0=a("li"),lwe=a("strong"),oYr=o("blenderbot"),rYr=o(" \u2014 "),ere=a("a"),tYr=o("FlaxBlenderbotForConditionalGeneration"),aYr=o(" (Blenderbot model)"),nYr=l(),N0=a("li"),iwe=a("strong"),sYr=o("blenderbot-small"),lYr=o(" \u2014 "),ore=a("a"),iYr=o("FlaxBlenderbotSmallForConditionalGeneration"),dYr=o(" (BlenderbotSmall model)"),cYr=l(),q0=a("li"),dwe=a("strong"),fYr=o("encoder-decoder"),mYr=o(" \u2014 "),rre=a("a"),gYr=o("FlaxEncoderDecoderModel"),hYr=o(" (Encoder decoder model)"),pYr=l(),j0=a("li"),cwe=a("strong"),_Yr=o("longt5"),uYr=o(" \u2014 "),tre=a("a"),bYr=o("FlaxLongT5ForConditionalGeneration"),vYr=o(" (LongT5 model)"),FYr=l(),D0=a("li"),fwe=a("strong"),TYr=o("marian"),MYr=o(" \u2014 "),are=a("a"),EYr=o("FlaxMarianMTModel"),CYr=o(" (Marian model)"),wYr=l(),G0=a("li"),mwe=a("strong"),AYr=o("mbart"),LYr=o(" \u2014 "),nre=a("a"),yYr=o("FlaxMBartForConditionalGeneration"),xYr=o(" (mBART model)"),$Yr=l(),O0=a("li"),gwe=a("strong"),kYr=o("mt5"),SYr=o(" \u2014 "),sre=a("a"),RYr=o("FlaxMT5ForConditionalGeneration"),PYr=o(" (MT5 model)"),BYr=l(),V0=a("li"),hwe=a("strong"),IYr=o("pegasus"),NYr=o(" \u2014 "),lre=a("a"),qYr=o("FlaxPegasusForConditionalGeneration"),jYr=o(" (Pegasus model)"),DYr=l(),X0=a("li"),pwe=a("strong"),GYr=o("t5"),OYr=o(" \u2014 "),ire=a("a"),VYr=o("FlaxT5ForConditionalGeneration"),XYr=o(" (T5 model)"),zYr=l(),F(z0.$$.fragment),aQe=l(),mf=a("h2"),W0=a("a"),_we=a("span"),F(J$.$$.fragment),WYr=l(),uwe=a("span"),QYr=o("FlaxAutoModelForSequenceClassification"),nQe=l(),Tr=a("div"),F(Y$.$$.fragment),HYr=l(),gf=a("p"),UYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dre=a("a"),JYr=o("from_pretrained()"),YYr=o(" class method or the "),cre=a("a"),KYr=o("from_config()"),ZYr=o(` class
method.`),eKr=l(),K$=a("p"),oKr=o("This class cannot be instantiated directly using "),bwe=a("code"),rKr=o("__init__()"),tKr=o(" (throws an error)."),aKr=l(),Kt=a("div"),F(Z$.$$.fragment),nKr=l(),vwe=a("p"),sKr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lKr=l(),hf=a("p"),iKr=o(`Note:
Loading a model from its configuration file does `),Fwe=a("strong"),dKr=o("not"),cKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=a("a"),fKr=o("from_pretrained()"),mKr=o(" to load the model weights."),gKr=l(),F(Q0.$$.fragment),hKr=l(),Ur=a("div"),F(ek.$$.fragment),pKr=l(),Twe=a("p"),_Kr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uKr=l(),Ln=a("p"),bKr=o("The model class to instantiate is selected based on the "),Mwe=a("code"),vKr=o("model_type"),FKr=o(` property of the config object (either
passed as an argument or loaded from `),Ewe=a("code"),TKr=o("pretrained_model_name_or_path"),MKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cwe=a("code"),EKr=o("pretrained_model_name_or_path"),CKr=o(":"),wKr=l(),Se=a("ul"),H0=a("li"),wwe=a("strong"),AKr=o("albert"),LKr=o(" \u2014 "),mre=a("a"),yKr=o("FlaxAlbertForSequenceClassification"),xKr=o(" (ALBERT model)"),$Kr=l(),U0=a("li"),Awe=a("strong"),kKr=o("bart"),SKr=o(" \u2014 "),gre=a("a"),RKr=o("FlaxBartForSequenceClassification"),PKr=o(" (BART model)"),BKr=l(),J0=a("li"),Lwe=a("strong"),IKr=o("bert"),NKr=o(" \u2014 "),hre=a("a"),qKr=o("FlaxBertForSequenceClassification"),jKr=o(" (BERT model)"),DKr=l(),Y0=a("li"),ywe=a("strong"),GKr=o("big_bird"),OKr=o(" \u2014 "),pre=a("a"),VKr=o("FlaxBigBirdForSequenceClassification"),XKr=o(" (BigBird model)"),zKr=l(),K0=a("li"),xwe=a("strong"),WKr=o("distilbert"),QKr=o(" \u2014 "),_re=a("a"),HKr=o("FlaxDistilBertForSequenceClassification"),UKr=o(" (DistilBERT model)"),JKr=l(),Z0=a("li"),$we=a("strong"),YKr=o("electra"),KKr=o(" \u2014 "),ure=a("a"),ZKr=o("FlaxElectraForSequenceClassification"),eZr=o(" (ELECTRA model)"),oZr=l(),ew=a("li"),kwe=a("strong"),rZr=o("mbart"),tZr=o(" \u2014 "),bre=a("a"),aZr=o("FlaxMBartForSequenceClassification"),nZr=o(" (mBART model)"),sZr=l(),ow=a("li"),Swe=a("strong"),lZr=o("roberta"),iZr=o(" \u2014 "),vre=a("a"),dZr=o("FlaxRobertaForSequenceClassification"),cZr=o(" (RoBERTa model)"),fZr=l(),rw=a("li"),Rwe=a("strong"),mZr=o("roformer"),gZr=o(" \u2014 "),Fre=a("a"),hZr=o("FlaxRoFormerForSequenceClassification"),pZr=o(" (RoFormer model)"),_Zr=l(),tw=a("li"),Pwe=a("strong"),uZr=o("xlm-roberta"),bZr=o(" \u2014 "),Tre=a("a"),vZr=o("FlaxXLMRobertaForSequenceClassification"),FZr=o(" (XLM-RoBERTa model)"),TZr=l(),F(aw.$$.fragment),sQe=l(),pf=a("h2"),nw=a("a"),Bwe=a("span"),F(ok.$$.fragment),MZr=l(),Iwe=a("span"),EZr=o("FlaxAutoModelForQuestionAnswering"),lQe=l(),Mr=a("div"),F(rk.$$.fragment),CZr=l(),_f=a("p"),wZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Mre=a("a"),AZr=o("from_pretrained()"),LZr=o(" class method or the "),Ere=a("a"),yZr=o("from_config()"),xZr=o(` class
method.`),$Zr=l(),tk=a("p"),kZr=o("This class cannot be instantiated directly using "),Nwe=a("code"),SZr=o("__init__()"),RZr=o(" (throws an error)."),PZr=l(),Zt=a("div"),F(ak.$$.fragment),BZr=l(),qwe=a("p"),IZr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NZr=l(),uf=a("p"),qZr=o(`Note:
Loading a model from its configuration file does `),jwe=a("strong"),jZr=o("not"),DZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=a("a"),GZr=o("from_pretrained()"),OZr=o(" to load the model weights."),VZr=l(),F(sw.$$.fragment),XZr=l(),Jr=a("div"),F(nk.$$.fragment),zZr=l(),Dwe=a("p"),WZr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),QZr=l(),yn=a("p"),HZr=o("The model class to instantiate is selected based on the "),Gwe=a("code"),UZr=o("model_type"),JZr=o(` property of the config object (either
passed as an argument or loaded from `),Owe=a("code"),YZr=o("pretrained_model_name_or_path"),KZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vwe=a("code"),ZZr=o("pretrained_model_name_or_path"),eet=o(":"),oet=l(),Re=a("ul"),lw=a("li"),Xwe=a("strong"),ret=o("albert"),tet=o(" \u2014 "),wre=a("a"),aet=o("FlaxAlbertForQuestionAnswering"),net=o(" (ALBERT model)"),set=l(),iw=a("li"),zwe=a("strong"),iet=o("bart"),det=o(" \u2014 "),Are=a("a"),cet=o("FlaxBartForQuestionAnswering"),fet=o(" (BART model)"),met=l(),dw=a("li"),Wwe=a("strong"),get=o("bert"),het=o(" \u2014 "),Lre=a("a"),pet=o("FlaxBertForQuestionAnswering"),_et=o(" (BERT model)"),uet=l(),cw=a("li"),Qwe=a("strong"),bet=o("big_bird"),vet=o(" \u2014 "),yre=a("a"),Fet=o("FlaxBigBirdForQuestionAnswering"),Tet=o(" (BigBird model)"),Met=l(),fw=a("li"),Hwe=a("strong"),Eet=o("distilbert"),Cet=o(" \u2014 "),xre=a("a"),wet=o("FlaxDistilBertForQuestionAnswering"),Aet=o(" (DistilBERT model)"),Let=l(),mw=a("li"),Uwe=a("strong"),yet=o("electra"),xet=o(" \u2014 "),$re=a("a"),$et=o("FlaxElectraForQuestionAnswering"),ket=o(" (ELECTRA model)"),Set=l(),gw=a("li"),Jwe=a("strong"),Ret=o("mbart"),Pet=o(" \u2014 "),kre=a("a"),Bet=o("FlaxMBartForQuestionAnswering"),Iet=o(" (mBART model)"),Net=l(),hw=a("li"),Ywe=a("strong"),qet=o("roberta"),jet=o(" \u2014 "),Sre=a("a"),Det=o("FlaxRobertaForQuestionAnswering"),Get=o(" (RoBERTa model)"),Oet=l(),pw=a("li"),Kwe=a("strong"),Vet=o("roformer"),Xet=o(" \u2014 "),Rre=a("a"),zet=o("FlaxRoFormerForQuestionAnswering"),Wet=o(" (RoFormer model)"),Qet=l(),_w=a("li"),Zwe=a("strong"),Het=o("xlm-roberta"),Uet=o(" \u2014 "),Pre=a("a"),Jet=o("FlaxXLMRobertaForQuestionAnswering"),Yet=o(" (XLM-RoBERTa model)"),Ket=l(),F(uw.$$.fragment),iQe=l(),bf=a("h2"),bw=a("a"),eAe=a("span"),F(sk.$$.fragment),Zet=l(),oAe=a("span"),eot=o("FlaxAutoModelForTokenClassification"),dQe=l(),Er=a("div"),F(lk.$$.fragment),oot=l(),vf=a("p"),rot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bre=a("a"),tot=o("from_pretrained()"),aot=o(" class method or the "),Ire=a("a"),not=o("from_config()"),sot=o(` class
method.`),lot=l(),ik=a("p"),iot=o("This class cannot be instantiated directly using "),rAe=a("code"),dot=o("__init__()"),cot=o(" (throws an error)."),fot=l(),ea=a("div"),F(dk.$$.fragment),mot=l(),tAe=a("p"),got=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hot=l(),Ff=a("p"),pot=o(`Note:
Loading a model from its configuration file does `),aAe=a("strong"),_ot=o("not"),uot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nre=a("a"),bot=o("from_pretrained()"),vot=o(" to load the model weights."),Fot=l(),F(vw.$$.fragment),Tot=l(),Yr=a("div"),F(ck.$$.fragment),Mot=l(),nAe=a("p"),Eot=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cot=l(),xn=a("p"),wot=o("The model class to instantiate is selected based on the "),sAe=a("code"),Aot=o("model_type"),Lot=o(` property of the config object (either
passed as an argument or loaded from `),lAe=a("code"),yot=o("pretrained_model_name_or_path"),xot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iAe=a("code"),$ot=o("pretrained_model_name_or_path"),kot=o(":"),Sot=l(),Xe=a("ul"),Fw=a("li"),dAe=a("strong"),Rot=o("albert"),Pot=o(" \u2014 "),qre=a("a"),Bot=o("FlaxAlbertForTokenClassification"),Iot=o(" (ALBERT model)"),Not=l(),Tw=a("li"),cAe=a("strong"),qot=o("bert"),jot=o(" \u2014 "),jre=a("a"),Dot=o("FlaxBertForTokenClassification"),Got=o(" (BERT model)"),Oot=l(),Mw=a("li"),fAe=a("strong"),Vot=o("big_bird"),Xot=o(" \u2014 "),Dre=a("a"),zot=o("FlaxBigBirdForTokenClassification"),Wot=o(" (BigBird model)"),Qot=l(),Ew=a("li"),mAe=a("strong"),Hot=o("distilbert"),Uot=o(" \u2014 "),Gre=a("a"),Jot=o("FlaxDistilBertForTokenClassification"),Yot=o(" (DistilBERT model)"),Kot=l(),Cw=a("li"),gAe=a("strong"),Zot=o("electra"),ert=o(" \u2014 "),Ore=a("a"),ort=o("FlaxElectraForTokenClassification"),rrt=o(" (ELECTRA model)"),trt=l(),ww=a("li"),hAe=a("strong"),art=o("roberta"),nrt=o(" \u2014 "),Vre=a("a"),srt=o("FlaxRobertaForTokenClassification"),lrt=o(" (RoBERTa model)"),irt=l(),Aw=a("li"),pAe=a("strong"),drt=o("roformer"),crt=o(" \u2014 "),Xre=a("a"),frt=o("FlaxRoFormerForTokenClassification"),mrt=o(" (RoFormer model)"),grt=l(),Lw=a("li"),_Ae=a("strong"),hrt=o("xlm-roberta"),prt=o(" \u2014 "),zre=a("a"),_rt=o("FlaxXLMRobertaForTokenClassification"),urt=o(" (XLM-RoBERTa model)"),brt=l(),F(yw.$$.fragment),cQe=l(),Tf=a("h2"),xw=a("a"),uAe=a("span"),F(fk.$$.fragment),vrt=l(),bAe=a("span"),Frt=o("FlaxAutoModelForMultipleChoice"),fQe=l(),Cr=a("div"),F(mk.$$.fragment),Trt=l(),Mf=a("p"),Mrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Wre=a("a"),Ert=o("from_pretrained()"),Crt=o(" class method or the "),Qre=a("a"),wrt=o("from_config()"),Art=o(` class
method.`),Lrt=l(),gk=a("p"),yrt=o("This class cannot be instantiated directly using "),vAe=a("code"),xrt=o("__init__()"),$rt=o(" (throws an error)."),krt=l(),oa=a("div"),F(hk.$$.fragment),Srt=l(),FAe=a("p"),Rrt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Prt=l(),Ef=a("p"),Brt=o(`Note:
Loading a model from its configuration file does `),TAe=a("strong"),Irt=o("not"),Nrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hre=a("a"),qrt=o("from_pretrained()"),jrt=o(" to load the model weights."),Drt=l(),F($w.$$.fragment),Grt=l(),Kr=a("div"),F(pk.$$.fragment),Ort=l(),MAe=a("p"),Vrt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xrt=l(),$n=a("p"),zrt=o("The model class to instantiate is selected based on the "),EAe=a("code"),Wrt=o("model_type"),Qrt=o(` property of the config object (either
passed as an argument or loaded from `),CAe=a("code"),Hrt=o("pretrained_model_name_or_path"),Urt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wAe=a("code"),Jrt=o("pretrained_model_name_or_path"),Yrt=o(":"),Krt=l(),ze=a("ul"),kw=a("li"),AAe=a("strong"),Zrt=o("albert"),ett=o(" \u2014 "),Ure=a("a"),ott=o("FlaxAlbertForMultipleChoice"),rtt=o(" (ALBERT model)"),ttt=l(),Sw=a("li"),LAe=a("strong"),att=o("bert"),ntt=o(" \u2014 "),Jre=a("a"),stt=o("FlaxBertForMultipleChoice"),ltt=o(" (BERT model)"),itt=l(),Rw=a("li"),yAe=a("strong"),dtt=o("big_bird"),ctt=o(" \u2014 "),Yre=a("a"),ftt=o("FlaxBigBirdForMultipleChoice"),mtt=o(" (BigBird model)"),gtt=l(),Pw=a("li"),xAe=a("strong"),htt=o("distilbert"),ptt=o(" \u2014 "),Kre=a("a"),_tt=o("FlaxDistilBertForMultipleChoice"),utt=o(" (DistilBERT model)"),btt=l(),Bw=a("li"),$Ae=a("strong"),vtt=o("electra"),Ftt=o(" \u2014 "),Zre=a("a"),Ttt=o("FlaxElectraForMultipleChoice"),Mtt=o(" (ELECTRA model)"),Ett=l(),Iw=a("li"),kAe=a("strong"),Ctt=o("roberta"),wtt=o(" \u2014 "),ete=a("a"),Att=o("FlaxRobertaForMultipleChoice"),Ltt=o(" (RoBERTa model)"),ytt=l(),Nw=a("li"),SAe=a("strong"),xtt=o("roformer"),$tt=o(" \u2014 "),ote=a("a"),ktt=o("FlaxRoFormerForMultipleChoice"),Stt=o(" (RoFormer model)"),Rtt=l(),qw=a("li"),RAe=a("strong"),Ptt=o("xlm-roberta"),Btt=o(" \u2014 "),rte=a("a"),Itt=o("FlaxXLMRobertaForMultipleChoice"),Ntt=o(" (XLM-RoBERTa model)"),qtt=l(),F(jw.$$.fragment),mQe=l(),Cf=a("h2"),Dw=a("a"),PAe=a("span"),F(_k.$$.fragment),jtt=l(),BAe=a("span"),Dtt=o("FlaxAutoModelForNextSentencePrediction"),gQe=l(),wr=a("div"),F(uk.$$.fragment),Gtt=l(),wf=a("p"),Ott=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tte=a("a"),Vtt=o("from_pretrained()"),Xtt=o(" class method or the "),ate=a("a"),ztt=o("from_config()"),Wtt=o(` class
method.`),Qtt=l(),bk=a("p"),Htt=o("This class cannot be instantiated directly using "),IAe=a("code"),Utt=o("__init__()"),Jtt=o(" (throws an error)."),Ytt=l(),ra=a("div"),F(vk.$$.fragment),Ktt=l(),NAe=a("p"),Ztt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eat=l(),Af=a("p"),oat=o(`Note:
Loading a model from its configuration file does `),qAe=a("strong"),rat=o("not"),tat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nte=a("a"),aat=o("from_pretrained()"),nat=o(" to load the model weights."),sat=l(),F(Gw.$$.fragment),lat=l(),Zr=a("div"),F(Fk.$$.fragment),iat=l(),jAe=a("p"),dat=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cat=l(),kn=a("p"),fat=o("The model class to instantiate is selected based on the "),DAe=a("code"),mat=o("model_type"),gat=o(` property of the config object (either
passed as an argument or loaded from `),GAe=a("code"),hat=o("pretrained_model_name_or_path"),pat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OAe=a("code"),_at=o("pretrained_model_name_or_path"),uat=o(":"),bat=l(),VAe=a("ul"),Ow=a("li"),XAe=a("strong"),vat=o("bert"),Fat=o(" \u2014 "),ste=a("a"),Tat=o("FlaxBertForNextSentencePrediction"),Mat=o(" (BERT model)"),Eat=l(),F(Vw.$$.fragment),hQe=l(),Lf=a("h2"),Xw=a("a"),zAe=a("span"),F(Tk.$$.fragment),Cat=l(),WAe=a("span"),wat=o("FlaxAutoModelForImageClassification"),pQe=l(),Ar=a("div"),F(Mk.$$.fragment),Aat=l(),yf=a("p"),Lat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lte=a("a"),yat=o("from_pretrained()"),xat=o(" class method or the "),ite=a("a"),$at=o("from_config()"),kat=o(` class
method.`),Sat=l(),Ek=a("p"),Rat=o("This class cannot be instantiated directly using "),QAe=a("code"),Pat=o("__init__()"),Bat=o(" (throws an error)."),Iat=l(),ta=a("div"),F(Ck.$$.fragment),Nat=l(),HAe=a("p"),qat=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jat=l(),xf=a("p"),Dat=o(`Note:
Loading a model from its configuration file does `),UAe=a("strong"),Gat=o("not"),Oat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dte=a("a"),Vat=o("from_pretrained()"),Xat=o(" to load the model weights."),zat=l(),F(zw.$$.fragment),Wat=l(),et=a("div"),F(wk.$$.fragment),Qat=l(),JAe=a("p"),Hat=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Uat=l(),Sn=a("p"),Jat=o("The model class to instantiate is selected based on the "),YAe=a("code"),Yat=o("model_type"),Kat=o(` property of the config object (either
passed as an argument or loaded from `),KAe=a("code"),Zat=o("pretrained_model_name_or_path"),ent=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZAe=a("code"),ont=o("pretrained_model_name_or_path"),rnt=o(":"),tnt=l(),Ak=a("ul"),Ww=a("li"),e7e=a("strong"),ant=o("beit"),nnt=o(" \u2014 "),cte=a("a"),snt=o("FlaxBeitForImageClassification"),lnt=o(" (BEiT model)"),int=l(),Qw=a("li"),o7e=a("strong"),dnt=o("vit"),cnt=o(" \u2014 "),fte=a("a"),fnt=o("FlaxViTForImageClassification"),mnt=o(" (ViT model)"),gnt=l(),F(Hw.$$.fragment),_Qe=l(),$f=a("h2"),Uw=a("a"),r7e=a("span"),F(Lk.$$.fragment),hnt=l(),t7e=a("span"),pnt=o("FlaxAutoModelForVision2Seq"),uQe=l(),Lr=a("div"),F(yk.$$.fragment),_nt=l(),kf=a("p"),unt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mte=a("a"),bnt=o("from_pretrained()"),vnt=o(" class method or the "),gte=a("a"),Fnt=o("from_config()"),Tnt=o(` class
method.`),Mnt=l(),xk=a("p"),Ent=o("This class cannot be instantiated directly using "),a7e=a("code"),Cnt=o("__init__()"),wnt=o(" (throws an error)."),Ant=l(),aa=a("div"),F($k.$$.fragment),Lnt=l(),n7e=a("p"),ynt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xnt=l(),Sf=a("p"),$nt=o(`Note:
Loading a model from its configuration file does `),s7e=a("strong"),knt=o("not"),Snt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hte=a("a"),Rnt=o("from_pretrained()"),Pnt=o(" to load the model weights."),Bnt=l(),F(Jw.$$.fragment),Int=l(),ot=a("div"),F(kk.$$.fragment),Nnt=l(),l7e=a("p"),qnt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jnt=l(),Rn=a("p"),Dnt=o("The model class to instantiate is selected based on the "),i7e=a("code"),Gnt=o("model_type"),Ont=o(` property of the config object (either
passed as an argument or loaded from `),d7e=a("code"),Vnt=o("pretrained_model_name_or_path"),Xnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=a("code"),znt=o("pretrained_model_name_or_path"),Wnt=o(":"),Qnt=l(),f7e=a("ul"),Yw=a("li"),m7e=a("strong"),Hnt=o("vision-encoder-decoder"),Unt=o(" \u2014 "),pte=a("a"),Jnt=o("FlaxVisionEncoderDecoderModel"),Ynt=o(" (Vision Encoder decoder model)"),Knt=l(),F(Kw.$$.fragment),this.h()},l(f){const u=mJt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Sk=s(p);m=n(Sk,"A",{id:!0,class:!0,href:!0});var g7e=s(m);_=n(g7e,"SPAN",{});var h7e=s(_);T(c.$$.fragment,h7e),h7e.forEach(t),g7e.forEach(t),h=i(Sk),wo=n(Sk,"SPAN",{});var p7e=s(wo);$i=r(p7e,"Auto Classes"),p7e.forEach(t),Sk.forEach(t),If=i(f),lt=n(f,"P",{});var Rk=s(lt);ki=r(Rk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Si=n(Rk,"CODE",{});var _7e=s(Si);bL=r(_7e,"from_pretrained()"),_7e.forEach(t),Nf=r(Rk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Rk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Pn=s(Qe);Ri=r(Pn,"Instantiating one of "),Bn=n(Pn,"A",{href:!0});var u7e=s(Bn);vL=r(u7e,"AutoConfig"),u7e.forEach(t),In=r(Pn,", "),Nn=n(Pn,"A",{href:!0});var b7e=s(Nn);FL=r(b7e,"AutoModel"),b7e.forEach(t),Pi=r(Pn,`, and
`),qn=n(Pn,"A",{href:!0});var v7e=s(qn);TL=r(v7e,"AutoTokenizer"),v7e.forEach(t),Bi=r(Pn," will directly create a class of the relevant architecture. For instance"),Pn.forEach(t),qf=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var Pk=s(Ae);oR=r(Pk,"will create a model that is an instance of "),Ii=n(Pk,"A",{href:!0});var F7e=s(Ii);rR=r(F7e,"BertModel"),F7e.forEach(t),tR=r(Pk,"."),Pk.forEach(t),Ao=i(f),Ra=n(f,"P",{});var Bk=s(Ra);aR=r(Bk,"There is one class of "),jf=n(Bk,"CODE",{});var T7e=s(jf);nR=r(T7e,"AutoModel"),T7e.forEach(t),yUe=r(Bk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Bk.forEach(t),gze=i(f),Ni=n(f,"H2",{class:!0});var Ik=s(Ni);Df=n(Ik,"A",{id:!0,class:!0,href:!0});var M7e=s(Df);dne=n(M7e,"SPAN",{});var E7e=s(dne);T(ML.$$.fragment,E7e),E7e.forEach(t),M7e.forEach(t),xUe=i(Ik),cne=n(Ik,"SPAN",{});var C7e=s(cne);$Ue=r(C7e,"Extending the Auto Classes"),C7e.forEach(t),Ik.forEach(t),hze=i(f),jn=n(f,"P",{});var Rf=s(jn);kUe=r(Rf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),fne=n(Rf,"CODE",{});var w7e=s(fne);SUe=r(w7e,"NewModel"),w7e.forEach(t),RUe=r(Rf,", make sure you have a "),mne=n(Rf,"CODE",{});var A7e=s(mne);PUe=r(A7e,"NewModelConfig"),A7e.forEach(t),BUe=r(Rf,` then you can add those to the auto
classes like this:`),Rf.forEach(t),pze=i(f),T(EL.$$.fragment,f),_ze=i(f),sR=n(f,"P",{});var L7e=s(sR);IUe=r(L7e,"You will then be able to use the auto classes like you would usually do!"),L7e.forEach(t),uze=i(f),T(Gf.$$.fragment,f),bze=i(f),qi=n(f,"H2",{class:!0});var Nk=s(qi);Of=n(Nk,"A",{id:!0,class:!0,href:!0});var y7e=s(Of);gne=n(y7e,"SPAN",{});var x7e=s(gne);T(CL.$$.fragment,x7e),x7e.forEach(t),y7e.forEach(t),NUe=i(Nk),hne=n(Nk,"SPAN",{});var $7e=s(hne);qUe=r($7e,"AutoConfig"),$7e.forEach(t),Nk.forEach(t),vze=i(f),Lo=n(f,"DIV",{class:!0});var nt=s(Lo);T(wL.$$.fragment,nt),jUe=i(nt),AL=n(nt,"P",{});var qk=s(AL);DUe=r(qk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),lR=n(qk,"A",{href:!0});var k7e=s(lR);GUe=r(k7e,"from_pretrained()"),k7e.forEach(t),OUe=r(qk," class method."),qk.forEach(t),VUe=i(nt),LL=n(nt,"P",{});var jk=s(LL);XUe=r(jk,"This class cannot be instantiated directly using "),pne=n(jk,"CODE",{});var S7e=s(pne);zUe=r(S7e,"__init__()"),S7e.forEach(t),WUe=r(jk," (throws an error)."),jk.forEach(t),QUe=i(nt),yr=n(nt,"DIV",{class:!0});var st=s(yr);T(yL.$$.fragment,st),HUe=i(st),_ne=n(st,"P",{});var R7e=s(_ne);UUe=r(R7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),R7e.forEach(t),JUe=i(st),ji=n(st,"P",{});var Pf=s(ji);YUe=r(Pf,"The configuration class to instantiate is selected based on the "),une=n(Pf,"CODE",{});var P7e=s(une);KUe=r(P7e,"model_type"),P7e.forEach(t),ZUe=r(Pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),bne=n(Pf,"CODE",{});var B7e=s(bne);eJe=r(B7e,"pretrained_model_name_or_path"),B7e.forEach(t),oJe=r(Pf,":"),Pf.forEach(t),rJe=i(st),A=n(st,"UL",{});var L=s(A);Vf=n(L,"LI",{});var Zw=s(Vf);vne=n(Zw,"STRONG",{});var I7e=s(vne);tJe=r(I7e,"albert"),I7e.forEach(t),aJe=r(Zw," \u2014 "),iR=n(Zw,"A",{href:!0});var N7e=s(iR);nJe=r(N7e,"AlbertConfig"),N7e.forEach(t),sJe=r(Zw," (ALBERT model)"),Zw.forEach(t),lJe=i(L),Xf=n(L,"LI",{});var eA=s(Xf);Fne=n(eA,"STRONG",{});var q7e=s(Fne);iJe=r(q7e,"bart"),q7e.forEach(t),dJe=r(eA," \u2014 "),dR=n(eA,"A",{href:!0});var j7e=s(dR);cJe=r(j7e,"BartConfig"),j7e.forEach(t),fJe=r(eA," (BART model)"),eA.forEach(t),mJe=i(L),zf=n(L,"LI",{});var oA=s(zf);Tne=n(oA,"STRONG",{});var D7e=s(Tne);gJe=r(D7e,"beit"),D7e.forEach(t),hJe=r(oA," \u2014 "),cR=n(oA,"A",{href:!0});var G7e=s(cR);pJe=r(G7e,"BeitConfig"),G7e.forEach(t),_Je=r(oA," (BEiT model)"),oA.forEach(t),uJe=i(L),Wf=n(L,"LI",{});var rA=s(Wf);Mne=n(rA,"STRONG",{});var O7e=s(Mne);bJe=r(O7e,"bert"),O7e.forEach(t),vJe=r(rA," \u2014 "),fR=n(rA,"A",{href:!0});var V7e=s(fR);FJe=r(V7e,"BertConfig"),V7e.forEach(t),TJe=r(rA," (BERT model)"),rA.forEach(t),MJe=i(L),Qf=n(L,"LI",{});var tA=s(Qf);Ene=n(tA,"STRONG",{});var X7e=s(Ene);EJe=r(X7e,"bert-generation"),X7e.forEach(t),CJe=r(tA," \u2014 "),mR=n(tA,"A",{href:!0});var z7e=s(mR);wJe=r(z7e,"BertGenerationConfig"),z7e.forEach(t),AJe=r(tA," (Bert Generation model)"),tA.forEach(t),LJe=i(L),Hf=n(L,"LI",{});var aA=s(Hf);Cne=n(aA,"STRONG",{});var W7e=s(Cne);yJe=r(W7e,"big_bird"),W7e.forEach(t),xJe=r(aA," \u2014 "),gR=n(aA,"A",{href:!0});var Q7e=s(gR);$Je=r(Q7e,"BigBirdConfig"),Q7e.forEach(t),kJe=r(aA," (BigBird model)"),aA.forEach(t),SJe=i(L),Uf=n(L,"LI",{});var nA=s(Uf);wne=n(nA,"STRONG",{});var H7e=s(wne);RJe=r(H7e,"bigbird_pegasus"),H7e.forEach(t),PJe=r(nA," \u2014 "),hR=n(nA,"A",{href:!0});var U7e=s(hR);BJe=r(U7e,"BigBirdPegasusConfig"),U7e.forEach(t),IJe=r(nA," (BigBird-Pegasus model)"),nA.forEach(t),NJe=i(L),Jf=n(L,"LI",{});var sA=s(Jf);Ane=n(sA,"STRONG",{});var J7e=s(Ane);qJe=r(J7e,"blenderbot"),J7e.forEach(t),jJe=r(sA," \u2014 "),pR=n(sA,"A",{href:!0});var Y7e=s(pR);DJe=r(Y7e,"BlenderbotConfig"),Y7e.forEach(t),GJe=r(sA," (Blenderbot model)"),sA.forEach(t),OJe=i(L),Yf=n(L,"LI",{});var lA=s(Yf);Lne=n(lA,"STRONG",{});var K7e=s(Lne);VJe=r(K7e,"blenderbot-small"),K7e.forEach(t),XJe=r(lA," \u2014 "),_R=n(lA,"A",{href:!0});var Z7e=s(_R);zJe=r(Z7e,"BlenderbotSmallConfig"),Z7e.forEach(t),WJe=r(lA," (BlenderbotSmall model)"),lA.forEach(t),QJe=i(L),Kf=n(L,"LI",{});var iA=s(Kf);yne=n(iA,"STRONG",{});var eLe=s(yne);HJe=r(eLe,"bloom"),eLe.forEach(t),UJe=r(iA," \u2014 "),uR=n(iA,"A",{href:!0});var oLe=s(uR);JJe=r(oLe,"BloomConfig"),oLe.forEach(t),YJe=r(iA," (BLOOM model)"),iA.forEach(t),KJe=i(L),Zf=n(L,"LI",{});var dA=s(Zf);xne=n(dA,"STRONG",{});var rLe=s(xne);ZJe=r(rLe,"camembert"),rLe.forEach(t),eYe=r(dA," \u2014 "),bR=n(dA,"A",{href:!0});var tLe=s(bR);oYe=r(tLe,"CamembertConfig"),tLe.forEach(t),rYe=r(dA," (CamemBERT model)"),dA.forEach(t),tYe=i(L),em=n(L,"LI",{});var cA=s(em);$ne=n(cA,"STRONG",{});var aLe=s($ne);aYe=r(aLe,"canine"),aLe.forEach(t),nYe=r(cA," \u2014 "),vR=n(cA,"A",{href:!0});var nLe=s(vR);sYe=r(nLe,"CanineConfig"),nLe.forEach(t),lYe=r(cA," (CANINE model)"),cA.forEach(t),iYe=i(L),om=n(L,"LI",{});var fA=s(om);kne=n(fA,"STRONG",{});var sLe=s(kne);dYe=r(sLe,"clip"),sLe.forEach(t),cYe=r(fA," \u2014 "),FR=n(fA,"A",{href:!0});var lLe=s(FR);fYe=r(lLe,"CLIPConfig"),lLe.forEach(t),mYe=r(fA," (CLIP model)"),fA.forEach(t),gYe=i(L),rm=n(L,"LI",{});var mA=s(rm);Sne=n(mA,"STRONG",{});var iLe=s(Sne);hYe=r(iLe,"codegen"),iLe.forEach(t),pYe=r(mA," \u2014 "),TR=n(mA,"A",{href:!0});var dLe=s(TR);_Ye=r(dLe,"CodeGenConfig"),dLe.forEach(t),uYe=r(mA," (CodeGen model)"),mA.forEach(t),bYe=i(L),tm=n(L,"LI",{});var gA=s(tm);Rne=n(gA,"STRONG",{});var cLe=s(Rne);vYe=r(cLe,"convbert"),cLe.forEach(t),FYe=r(gA," \u2014 "),MR=n(gA,"A",{href:!0});var fLe=s(MR);TYe=r(fLe,"ConvBertConfig"),fLe.forEach(t),MYe=r(gA," (ConvBERT model)"),gA.forEach(t),EYe=i(L),am=n(L,"LI",{});var hA=s(am);Pne=n(hA,"STRONG",{});var mLe=s(Pne);CYe=r(mLe,"convnext"),mLe.forEach(t),wYe=r(hA," \u2014 "),ER=n(hA,"A",{href:!0});var gLe=s(ER);AYe=r(gLe,"ConvNextConfig"),gLe.forEach(t),LYe=r(hA," (ConvNeXT model)"),hA.forEach(t),yYe=i(L),nm=n(L,"LI",{});var pA=s(nm);Bne=n(pA,"STRONG",{});var hLe=s(Bne);xYe=r(hLe,"ctrl"),hLe.forEach(t),$Ye=r(pA," \u2014 "),CR=n(pA,"A",{href:!0});var pLe=s(CR);kYe=r(pLe,"CTRLConfig"),pLe.forEach(t),SYe=r(pA," (CTRL model)"),pA.forEach(t),RYe=i(L),sm=n(L,"LI",{});var _A=s(sm);Ine=n(_A,"STRONG",{});var _Le=s(Ine);PYe=r(_Le,"cvt"),_Le.forEach(t),BYe=r(_A," \u2014 "),wR=n(_A,"A",{href:!0});var uLe=s(wR);IYe=r(uLe,"CvtConfig"),uLe.forEach(t),NYe=r(_A," (CvT model)"),_A.forEach(t),qYe=i(L),lm=n(L,"LI",{});var uA=s(lm);Nne=n(uA,"STRONG",{});var bLe=s(Nne);jYe=r(bLe,"data2vec-audio"),bLe.forEach(t),DYe=r(uA," \u2014 "),AR=n(uA,"A",{href:!0});var vLe=s(AR);GYe=r(vLe,"Data2VecAudioConfig"),vLe.forEach(t),OYe=r(uA," (Data2VecAudio model)"),uA.forEach(t),VYe=i(L),im=n(L,"LI",{});var bA=s(im);qne=n(bA,"STRONG",{});var FLe=s(qne);XYe=r(FLe,"data2vec-text"),FLe.forEach(t),zYe=r(bA," \u2014 "),LR=n(bA,"A",{href:!0});var TLe=s(LR);WYe=r(TLe,"Data2VecTextConfig"),TLe.forEach(t),QYe=r(bA," (Data2VecText model)"),bA.forEach(t),HYe=i(L),dm=n(L,"LI",{});var vA=s(dm);jne=n(vA,"STRONG",{});var MLe=s(jne);UYe=r(MLe,"data2vec-vision"),MLe.forEach(t),JYe=r(vA," \u2014 "),yR=n(vA,"A",{href:!0});var ELe=s(yR);YYe=r(ELe,"Data2VecVisionConfig"),ELe.forEach(t),KYe=r(vA," (Data2VecVision model)"),vA.forEach(t),ZYe=i(L),cm=n(L,"LI",{});var FA=s(cm);Dne=n(FA,"STRONG",{});var CLe=s(Dne);eKe=r(CLe,"deberta"),CLe.forEach(t),oKe=r(FA," \u2014 "),xR=n(FA,"A",{href:!0});var wLe=s(xR);rKe=r(wLe,"DebertaConfig"),wLe.forEach(t),tKe=r(FA," (DeBERTa model)"),FA.forEach(t),aKe=i(L),fm=n(L,"LI",{});var TA=s(fm);Gne=n(TA,"STRONG",{});var ALe=s(Gne);nKe=r(ALe,"deberta-v2"),ALe.forEach(t),sKe=r(TA," \u2014 "),$R=n(TA,"A",{href:!0});var LLe=s($R);lKe=r(LLe,"DebertaV2Config"),LLe.forEach(t),iKe=r(TA," (DeBERTa-v2 model)"),TA.forEach(t),dKe=i(L),mm=n(L,"LI",{});var MA=s(mm);One=n(MA,"STRONG",{});var est=s(One);cKe=r(est,"decision_transformer"),est.forEach(t),fKe=r(MA," \u2014 "),kR=n(MA,"A",{href:!0});var ost=s(kR);mKe=r(ost,"DecisionTransformerConfig"),ost.forEach(t),gKe=r(MA," (Decision Transformer model)"),MA.forEach(t),hKe=i(L),gm=n(L,"LI",{});var yLe=s(gm);Vne=n(yLe,"STRONG",{});var rst=s(Vne);pKe=r(rst,"deit"),rst.forEach(t),_Ke=r(yLe," \u2014 "),SR=n(yLe,"A",{href:!0});var tst=s(SR);uKe=r(tst,"DeiTConfig"),tst.forEach(t),bKe=r(yLe," (DeiT model)"),yLe.forEach(t),vKe=i(L),hm=n(L,"LI",{});var xLe=s(hm);Xne=n(xLe,"STRONG",{});var ast=s(Xne);FKe=r(ast,"detr"),ast.forEach(t),TKe=r(xLe," \u2014 "),RR=n(xLe,"A",{href:!0});var nst=s(RR);MKe=r(nst,"DetrConfig"),nst.forEach(t),EKe=r(xLe," (DETR model)"),xLe.forEach(t),CKe=i(L),pm=n(L,"LI",{});var $Le=s(pm);zne=n($Le,"STRONG",{});var sst=s(zne);wKe=r(sst,"distilbert"),sst.forEach(t),AKe=r($Le," \u2014 "),PR=n($Le,"A",{href:!0});var lst=s(PR);LKe=r(lst,"DistilBertConfig"),lst.forEach(t),yKe=r($Le," (DistilBERT model)"),$Le.forEach(t),xKe=i(L),_m=n(L,"LI",{});var kLe=s(_m);Wne=n(kLe,"STRONG",{});var ist=s(Wne);$Ke=r(ist,"dpr"),ist.forEach(t),kKe=r(kLe," \u2014 "),BR=n(kLe,"A",{href:!0});var dst=s(BR);SKe=r(dst,"DPRConfig"),dst.forEach(t),RKe=r(kLe," (DPR model)"),kLe.forEach(t),PKe=i(L),um=n(L,"LI",{});var SLe=s(um);Qne=n(SLe,"STRONG",{});var cst=s(Qne);BKe=r(cst,"dpt"),cst.forEach(t),IKe=r(SLe," \u2014 "),IR=n(SLe,"A",{href:!0});var fst=s(IR);NKe=r(fst,"DPTConfig"),fst.forEach(t),qKe=r(SLe," (DPT model)"),SLe.forEach(t),jKe=i(L),bm=n(L,"LI",{});var RLe=s(bm);Hne=n(RLe,"STRONG",{});var mst=s(Hne);DKe=r(mst,"electra"),mst.forEach(t),GKe=r(RLe," \u2014 "),NR=n(RLe,"A",{href:!0});var gst=s(NR);OKe=r(gst,"ElectraConfig"),gst.forEach(t),VKe=r(RLe," (ELECTRA model)"),RLe.forEach(t),XKe=i(L),vm=n(L,"LI",{});var PLe=s(vm);Une=n(PLe,"STRONG",{});var hst=s(Une);zKe=r(hst,"encoder-decoder"),hst.forEach(t),WKe=r(PLe," \u2014 "),qR=n(PLe,"A",{href:!0});var pst=s(qR);QKe=r(pst,"EncoderDecoderConfig"),pst.forEach(t),HKe=r(PLe," (Encoder decoder model)"),PLe.forEach(t),UKe=i(L),Fm=n(L,"LI",{});var BLe=s(Fm);Jne=n(BLe,"STRONG",{});var _st=s(Jne);JKe=r(_st,"flaubert"),_st.forEach(t),YKe=r(BLe," \u2014 "),jR=n(BLe,"A",{href:!0});var ust=s(jR);KKe=r(ust,"FlaubertConfig"),ust.forEach(t),ZKe=r(BLe," (FlauBERT model)"),BLe.forEach(t),eZe=i(L),Tm=n(L,"LI",{});var ILe=s(Tm);Yne=n(ILe,"STRONG",{});var bst=s(Yne);oZe=r(bst,"flava"),bst.forEach(t),rZe=r(ILe," \u2014 "),DR=n(ILe,"A",{href:!0});var vst=s(DR);tZe=r(vst,"FlavaConfig"),vst.forEach(t),aZe=r(ILe," (FLAVA model)"),ILe.forEach(t),nZe=i(L),Mm=n(L,"LI",{});var NLe=s(Mm);Kne=n(NLe,"STRONG",{});var Fst=s(Kne);sZe=r(Fst,"fnet"),Fst.forEach(t),lZe=r(NLe," \u2014 "),GR=n(NLe,"A",{href:!0});var Tst=s(GR);iZe=r(Tst,"FNetConfig"),Tst.forEach(t),dZe=r(NLe," (FNet model)"),NLe.forEach(t),cZe=i(L),Em=n(L,"LI",{});var qLe=s(Em);Zne=n(qLe,"STRONG",{});var Mst=s(Zne);fZe=r(Mst,"fsmt"),Mst.forEach(t),mZe=r(qLe," \u2014 "),OR=n(qLe,"A",{href:!0});var Est=s(OR);gZe=r(Est,"FSMTConfig"),Est.forEach(t),hZe=r(qLe," (FairSeq Machine-Translation model)"),qLe.forEach(t),pZe=i(L),Cm=n(L,"LI",{});var jLe=s(Cm);ese=n(jLe,"STRONG",{});var Cst=s(ese);_Ze=r(Cst,"funnel"),Cst.forEach(t),uZe=r(jLe," \u2014 "),VR=n(jLe,"A",{href:!0});var wst=s(VR);bZe=r(wst,"FunnelConfig"),wst.forEach(t),vZe=r(jLe," (Funnel Transformer model)"),jLe.forEach(t),FZe=i(L),wm=n(L,"LI",{});var DLe=s(wm);ose=n(DLe,"STRONG",{});var Ast=s(ose);TZe=r(Ast,"glpn"),Ast.forEach(t),MZe=r(DLe," \u2014 "),XR=n(DLe,"A",{href:!0});var Lst=s(XR);EZe=r(Lst,"GLPNConfig"),Lst.forEach(t),CZe=r(DLe," (GLPN model)"),DLe.forEach(t),wZe=i(L),Am=n(L,"LI",{});var GLe=s(Am);rse=n(GLe,"STRONG",{});var yst=s(rse);AZe=r(yst,"gpt2"),yst.forEach(t),LZe=r(GLe," \u2014 "),zR=n(GLe,"A",{href:!0});var xst=s(zR);yZe=r(xst,"GPT2Config"),xst.forEach(t),xZe=r(GLe," (OpenAI GPT-2 model)"),GLe.forEach(t),$Ze=i(L),Lm=n(L,"LI",{});var OLe=s(Lm);tse=n(OLe,"STRONG",{});var $st=s(tse);kZe=r($st,"gpt_neo"),$st.forEach(t),SZe=r(OLe," \u2014 "),WR=n(OLe,"A",{href:!0});var kst=s(WR);RZe=r(kst,"GPTNeoConfig"),kst.forEach(t),PZe=r(OLe," (GPT Neo model)"),OLe.forEach(t),BZe=i(L),ym=n(L,"LI",{});var VLe=s(ym);ase=n(VLe,"STRONG",{});var Sst=s(ase);IZe=r(Sst,"gpt_neox"),Sst.forEach(t),NZe=r(VLe," \u2014 "),QR=n(VLe,"A",{href:!0});var Rst=s(QR);qZe=r(Rst,"GPTNeoXConfig"),Rst.forEach(t),jZe=r(VLe," (GPT NeoX model)"),VLe.forEach(t),DZe=i(L),xm=n(L,"LI",{});var XLe=s(xm);nse=n(XLe,"STRONG",{});var Pst=s(nse);GZe=r(Pst,"gptj"),Pst.forEach(t),OZe=r(XLe," \u2014 "),HR=n(XLe,"A",{href:!0});var Bst=s(HR);VZe=r(Bst,"GPTJConfig"),Bst.forEach(t),XZe=r(XLe," (GPT-J model)"),XLe.forEach(t),zZe=i(L),$m=n(L,"LI",{});var zLe=s($m);sse=n(zLe,"STRONG",{});var Ist=s(sse);WZe=r(Ist,"groupvit"),Ist.forEach(t),QZe=r(zLe," \u2014 "),UR=n(zLe,"A",{href:!0});var Nst=s(UR);HZe=r(Nst,"GroupViTConfig"),Nst.forEach(t),UZe=r(zLe," (GroupViT model)"),zLe.forEach(t),JZe=i(L),km=n(L,"LI",{});var WLe=s(km);lse=n(WLe,"STRONG",{});var qst=s(lse);YZe=r(qst,"hubert"),qst.forEach(t),KZe=r(WLe," \u2014 "),JR=n(WLe,"A",{href:!0});var jst=s(JR);ZZe=r(jst,"HubertConfig"),jst.forEach(t),eeo=r(WLe," (Hubert model)"),WLe.forEach(t),oeo=i(L),Sm=n(L,"LI",{});var QLe=s(Sm);ise=n(QLe,"STRONG",{});var Dst=s(ise);reo=r(Dst,"ibert"),Dst.forEach(t),teo=r(QLe," \u2014 "),YR=n(QLe,"A",{href:!0});var Gst=s(YR);aeo=r(Gst,"IBertConfig"),Gst.forEach(t),neo=r(QLe," (I-BERT model)"),QLe.forEach(t),seo=i(L),Rm=n(L,"LI",{});var HLe=s(Rm);dse=n(HLe,"STRONG",{});var Ost=s(dse);leo=r(Ost,"imagegpt"),Ost.forEach(t),ieo=r(HLe," \u2014 "),KR=n(HLe,"A",{href:!0});var Vst=s(KR);deo=r(Vst,"ImageGPTConfig"),Vst.forEach(t),ceo=r(HLe," (ImageGPT model)"),HLe.forEach(t),feo=i(L),Pm=n(L,"LI",{});var ULe=s(Pm);cse=n(ULe,"STRONG",{});var Xst=s(cse);meo=r(Xst,"layoutlm"),Xst.forEach(t),geo=r(ULe," \u2014 "),ZR=n(ULe,"A",{href:!0});var zst=s(ZR);heo=r(zst,"LayoutLMConfig"),zst.forEach(t),peo=r(ULe," (LayoutLM model)"),ULe.forEach(t),_eo=i(L),Bm=n(L,"LI",{});var JLe=s(Bm);fse=n(JLe,"STRONG",{});var Wst=s(fse);ueo=r(Wst,"layoutlmv2"),Wst.forEach(t),beo=r(JLe," \u2014 "),eP=n(JLe,"A",{href:!0});var Qst=s(eP);veo=r(Qst,"LayoutLMv2Config"),Qst.forEach(t),Feo=r(JLe," (LayoutLMv2 model)"),JLe.forEach(t),Teo=i(L),Im=n(L,"LI",{});var YLe=s(Im);mse=n(YLe,"STRONG",{});var Hst=s(mse);Meo=r(Hst,"layoutlmv3"),Hst.forEach(t),Eeo=r(YLe," \u2014 "),oP=n(YLe,"A",{href:!0});var Ust=s(oP);Ceo=r(Ust,"LayoutLMv3Config"),Ust.forEach(t),weo=r(YLe," (LayoutLMv3 model)"),YLe.forEach(t),Aeo=i(L),Nm=n(L,"LI",{});var KLe=s(Nm);gse=n(KLe,"STRONG",{});var Jst=s(gse);Leo=r(Jst,"led"),Jst.forEach(t),yeo=r(KLe," \u2014 "),rP=n(KLe,"A",{href:!0});var Yst=s(rP);xeo=r(Yst,"LEDConfig"),Yst.forEach(t),$eo=r(KLe," (LED model)"),KLe.forEach(t),keo=i(L),qm=n(L,"LI",{});var ZLe=s(qm);hse=n(ZLe,"STRONG",{});var Kst=s(hse);Seo=r(Kst,"levit"),Kst.forEach(t),Reo=r(ZLe," \u2014 "),tP=n(ZLe,"A",{href:!0});var Zst=s(tP);Peo=r(Zst,"LevitConfig"),Zst.forEach(t),Beo=r(ZLe," (LeViT model)"),ZLe.forEach(t),Ieo=i(L),jm=n(L,"LI",{});var eye=s(jm);pse=n(eye,"STRONG",{});var elt=s(pse);Neo=r(elt,"longformer"),elt.forEach(t),qeo=r(eye," \u2014 "),aP=n(eye,"A",{href:!0});var olt=s(aP);jeo=r(olt,"LongformerConfig"),olt.forEach(t),Deo=r(eye," (Longformer model)"),eye.forEach(t),Geo=i(L),Dm=n(L,"LI",{});var oye=s(Dm);_se=n(oye,"STRONG",{});var rlt=s(_se);Oeo=r(rlt,"longt5"),rlt.forEach(t),Veo=r(oye," \u2014 "),nP=n(oye,"A",{href:!0});var tlt=s(nP);Xeo=r(tlt,"LongT5Config"),tlt.forEach(t),zeo=r(oye," (LongT5 model)"),oye.forEach(t),Weo=i(L),Gm=n(L,"LI",{});var rye=s(Gm);use=n(rye,"STRONG",{});var alt=s(use);Qeo=r(alt,"luke"),alt.forEach(t),Heo=r(rye," \u2014 "),sP=n(rye,"A",{href:!0});var nlt=s(sP);Ueo=r(nlt,"LukeConfig"),nlt.forEach(t),Jeo=r(rye," (LUKE model)"),rye.forEach(t),Yeo=i(L),Om=n(L,"LI",{});var tye=s(Om);bse=n(tye,"STRONG",{});var slt=s(bse);Keo=r(slt,"lxmert"),slt.forEach(t),Zeo=r(tye," \u2014 "),lP=n(tye,"A",{href:!0});var llt=s(lP);eoo=r(llt,"LxmertConfig"),llt.forEach(t),ooo=r(tye," (LXMERT model)"),tye.forEach(t),roo=i(L),Vm=n(L,"LI",{});var aye=s(Vm);vse=n(aye,"STRONG",{});var ilt=s(vse);too=r(ilt,"m2m_100"),ilt.forEach(t),aoo=r(aye," \u2014 "),iP=n(aye,"A",{href:!0});var dlt=s(iP);noo=r(dlt,"M2M100Config"),dlt.forEach(t),soo=r(aye," (M2M100 model)"),aye.forEach(t),loo=i(L),Xm=n(L,"LI",{});var nye=s(Xm);Fse=n(nye,"STRONG",{});var clt=s(Fse);ioo=r(clt,"marian"),clt.forEach(t),doo=r(nye," \u2014 "),dP=n(nye,"A",{href:!0});var flt=s(dP);coo=r(flt,"MarianConfig"),flt.forEach(t),foo=r(nye," (Marian model)"),nye.forEach(t),moo=i(L),zm=n(L,"LI",{});var sye=s(zm);Tse=n(sye,"STRONG",{});var mlt=s(Tse);goo=r(mlt,"maskformer"),mlt.forEach(t),hoo=r(sye," \u2014 "),cP=n(sye,"A",{href:!0});var glt=s(cP);poo=r(glt,"MaskFormerConfig"),glt.forEach(t),_oo=r(sye," (MaskFormer model)"),sye.forEach(t),uoo=i(L),Wm=n(L,"LI",{});var lye=s(Wm);Mse=n(lye,"STRONG",{});var hlt=s(Mse);boo=r(hlt,"mbart"),hlt.forEach(t),voo=r(lye," \u2014 "),fP=n(lye,"A",{href:!0});var plt=s(fP);Foo=r(plt,"MBartConfig"),plt.forEach(t),Too=r(lye," (mBART model)"),lye.forEach(t),Moo=i(L),Qm=n(L,"LI",{});var iye=s(Qm);Ese=n(iye,"STRONG",{});var _lt=s(Ese);Eoo=r(_lt,"mctct"),_lt.forEach(t),Coo=r(iye," \u2014 "),mP=n(iye,"A",{href:!0});var ult=s(mP);woo=r(ult,"MCTCTConfig"),ult.forEach(t),Aoo=r(iye," (M-CTC-T model)"),iye.forEach(t),Loo=i(L),Hm=n(L,"LI",{});var dye=s(Hm);Cse=n(dye,"STRONG",{});var blt=s(Cse);yoo=r(blt,"megatron-bert"),blt.forEach(t),xoo=r(dye," \u2014 "),gP=n(dye,"A",{href:!0});var vlt=s(gP);$oo=r(vlt,"MegatronBertConfig"),vlt.forEach(t),koo=r(dye," (Megatron-BERT model)"),dye.forEach(t),Soo=i(L),Um=n(L,"LI",{});var cye=s(Um);wse=n(cye,"STRONG",{});var Flt=s(wse);Roo=r(Flt,"mobilebert"),Flt.forEach(t),Poo=r(cye," \u2014 "),hP=n(cye,"A",{href:!0});var Tlt=s(hP);Boo=r(Tlt,"MobileBertConfig"),Tlt.forEach(t),Ioo=r(cye," (MobileBERT model)"),cye.forEach(t),Noo=i(L),Jm=n(L,"LI",{});var fye=s(Jm);Ase=n(fye,"STRONG",{});var Mlt=s(Ase);qoo=r(Mlt,"mobilevit"),Mlt.forEach(t),joo=r(fye," \u2014 "),pP=n(fye,"A",{href:!0});var Elt=s(pP);Doo=r(Elt,"MobileViTConfig"),Elt.forEach(t),Goo=r(fye," (MobileViT model)"),fye.forEach(t),Ooo=i(L),Ym=n(L,"LI",{});var mye=s(Ym);Lse=n(mye,"STRONG",{});var Clt=s(Lse);Voo=r(Clt,"mpnet"),Clt.forEach(t),Xoo=r(mye," \u2014 "),_P=n(mye,"A",{href:!0});var wlt=s(_P);zoo=r(wlt,"MPNetConfig"),wlt.forEach(t),Woo=r(mye," (MPNet model)"),mye.forEach(t),Qoo=i(L),Km=n(L,"LI",{});var gye=s(Km);yse=n(gye,"STRONG",{});var Alt=s(yse);Hoo=r(Alt,"mt5"),Alt.forEach(t),Uoo=r(gye," \u2014 "),uP=n(gye,"A",{href:!0});var Llt=s(uP);Joo=r(Llt,"MT5Config"),Llt.forEach(t),Yoo=r(gye," (MT5 model)"),gye.forEach(t),Koo=i(L),Zm=n(L,"LI",{});var hye=s(Zm);xse=n(hye,"STRONG",{});var ylt=s(xse);Zoo=r(ylt,"mvp"),ylt.forEach(t),ero=r(hye," \u2014 "),bP=n(hye,"A",{href:!0});var xlt=s(bP);oro=r(xlt,"MvpConfig"),xlt.forEach(t),rro=r(hye," (MVP model)"),hye.forEach(t),tro=i(L),eg=n(L,"LI",{});var pye=s(eg);$se=n(pye,"STRONG",{});var $lt=s($se);aro=r($lt,"nezha"),$lt.forEach(t),nro=r(pye," \u2014 "),vP=n(pye,"A",{href:!0});var klt=s(vP);sro=r(klt,"NezhaConfig"),klt.forEach(t),lro=r(pye," (Nezha model)"),pye.forEach(t),iro=i(L),og=n(L,"LI",{});var _ye=s(og);kse=n(_ye,"STRONG",{});var Slt=s(kse);dro=r(Slt,"nystromformer"),Slt.forEach(t),cro=r(_ye," \u2014 "),FP=n(_ye,"A",{href:!0});var Rlt=s(FP);fro=r(Rlt,"NystromformerConfig"),Rlt.forEach(t),mro=r(_ye," (Nystr\xF6mformer model)"),_ye.forEach(t),gro=i(L),rg=n(L,"LI",{});var uye=s(rg);Sse=n(uye,"STRONG",{});var Plt=s(Sse);hro=r(Plt,"openai-gpt"),Plt.forEach(t),pro=r(uye," \u2014 "),TP=n(uye,"A",{href:!0});var Blt=s(TP);_ro=r(Blt,"OpenAIGPTConfig"),Blt.forEach(t),uro=r(uye," (OpenAI GPT model)"),uye.forEach(t),bro=i(L),tg=n(L,"LI",{});var bye=s(tg);Rse=n(bye,"STRONG",{});var Ilt=s(Rse);vro=r(Ilt,"opt"),Ilt.forEach(t),Fro=r(bye," \u2014 "),MP=n(bye,"A",{href:!0});var Nlt=s(MP);Tro=r(Nlt,"OPTConfig"),Nlt.forEach(t),Mro=r(bye," (OPT model)"),bye.forEach(t),Ero=i(L),ag=n(L,"LI",{});var vye=s(ag);Pse=n(vye,"STRONG",{});var qlt=s(Pse);Cro=r(qlt,"owlvit"),qlt.forEach(t),wro=r(vye," \u2014 "),EP=n(vye,"A",{href:!0});var jlt=s(EP);Aro=r(jlt,"OwlViTConfig"),jlt.forEach(t),Lro=r(vye," (OWL-ViT model)"),vye.forEach(t),yro=i(L),ng=n(L,"LI",{});var Fye=s(ng);Bse=n(Fye,"STRONG",{});var Dlt=s(Bse);xro=r(Dlt,"pegasus"),Dlt.forEach(t),$ro=r(Fye," \u2014 "),CP=n(Fye,"A",{href:!0});var Glt=s(CP);kro=r(Glt,"PegasusConfig"),Glt.forEach(t),Sro=r(Fye," (Pegasus model)"),Fye.forEach(t),Rro=i(L),sg=n(L,"LI",{});var Tye=s(sg);Ise=n(Tye,"STRONG",{});var Olt=s(Ise);Pro=r(Olt,"perceiver"),Olt.forEach(t),Bro=r(Tye," \u2014 "),wP=n(Tye,"A",{href:!0});var Vlt=s(wP);Iro=r(Vlt,"PerceiverConfig"),Vlt.forEach(t),Nro=r(Tye," (Perceiver model)"),Tye.forEach(t),qro=i(L),lg=n(L,"LI",{});var Mye=s(lg);Nse=n(Mye,"STRONG",{});var Xlt=s(Nse);jro=r(Xlt,"plbart"),Xlt.forEach(t),Dro=r(Mye," \u2014 "),AP=n(Mye,"A",{href:!0});var zlt=s(AP);Gro=r(zlt,"PLBartConfig"),zlt.forEach(t),Oro=r(Mye," (PLBart model)"),Mye.forEach(t),Vro=i(L),ig=n(L,"LI",{});var Eye=s(ig);qse=n(Eye,"STRONG",{});var Wlt=s(qse);Xro=r(Wlt,"poolformer"),Wlt.forEach(t),zro=r(Eye," \u2014 "),LP=n(Eye,"A",{href:!0});var Qlt=s(LP);Wro=r(Qlt,"PoolFormerConfig"),Qlt.forEach(t),Qro=r(Eye," (PoolFormer model)"),Eye.forEach(t),Hro=i(L),dg=n(L,"LI",{});var Cye=s(dg);jse=n(Cye,"STRONG",{});var Hlt=s(jse);Uro=r(Hlt,"prophetnet"),Hlt.forEach(t),Jro=r(Cye," \u2014 "),yP=n(Cye,"A",{href:!0});var Ult=s(yP);Yro=r(Ult,"ProphetNetConfig"),Ult.forEach(t),Kro=r(Cye," (ProphetNet model)"),Cye.forEach(t),Zro=i(L),cg=n(L,"LI",{});var wye=s(cg);Dse=n(wye,"STRONG",{});var Jlt=s(Dse);eto=r(Jlt,"qdqbert"),Jlt.forEach(t),oto=r(wye," \u2014 "),xP=n(wye,"A",{href:!0});var Ylt=s(xP);rto=r(Ylt,"QDQBertConfig"),Ylt.forEach(t),tto=r(wye," (QDQBert model)"),wye.forEach(t),ato=i(L),fg=n(L,"LI",{});var Aye=s(fg);Gse=n(Aye,"STRONG",{});var Klt=s(Gse);nto=r(Klt,"rag"),Klt.forEach(t),sto=r(Aye," \u2014 "),$P=n(Aye,"A",{href:!0});var Zlt=s($P);lto=r(Zlt,"RagConfig"),Zlt.forEach(t),ito=r(Aye," (RAG model)"),Aye.forEach(t),dto=i(L),mg=n(L,"LI",{});var Lye=s(mg);Ose=n(Lye,"STRONG",{});var eit=s(Ose);cto=r(eit,"realm"),eit.forEach(t),fto=r(Lye," \u2014 "),kP=n(Lye,"A",{href:!0});var oit=s(kP);mto=r(oit,"RealmConfig"),oit.forEach(t),gto=r(Lye," (REALM model)"),Lye.forEach(t),hto=i(L),gg=n(L,"LI",{});var yye=s(gg);Vse=n(yye,"STRONG",{});var rit=s(Vse);pto=r(rit,"reformer"),rit.forEach(t),_to=r(yye," \u2014 "),SP=n(yye,"A",{href:!0});var tit=s(SP);uto=r(tit,"ReformerConfig"),tit.forEach(t),bto=r(yye," (Reformer model)"),yye.forEach(t),vto=i(L),hg=n(L,"LI",{});var xye=s(hg);Xse=n(xye,"STRONG",{});var ait=s(Xse);Fto=r(ait,"regnet"),ait.forEach(t),Tto=r(xye," \u2014 "),RP=n(xye,"A",{href:!0});var nit=s(RP);Mto=r(nit,"RegNetConfig"),nit.forEach(t),Eto=r(xye," (RegNet model)"),xye.forEach(t),Cto=i(L),pg=n(L,"LI",{});var $ye=s(pg);zse=n($ye,"STRONG",{});var sit=s(zse);wto=r(sit,"rembert"),sit.forEach(t),Ato=r($ye," \u2014 "),PP=n($ye,"A",{href:!0});var lit=s(PP);Lto=r(lit,"RemBertConfig"),lit.forEach(t),yto=r($ye," (RemBERT model)"),$ye.forEach(t),xto=i(L),_g=n(L,"LI",{});var kye=s(_g);Wse=n(kye,"STRONG",{});var iit=s(Wse);$to=r(iit,"resnet"),iit.forEach(t),kto=r(kye," \u2014 "),BP=n(kye,"A",{href:!0});var dit=s(BP);Sto=r(dit,"ResNetConfig"),dit.forEach(t),Rto=r(kye," (ResNet model)"),kye.forEach(t),Pto=i(L),ug=n(L,"LI",{});var Sye=s(ug);Qse=n(Sye,"STRONG",{});var cit=s(Qse);Bto=r(cit,"retribert"),cit.forEach(t),Ito=r(Sye," \u2014 "),IP=n(Sye,"A",{href:!0});var fit=s(IP);Nto=r(fit,"RetriBertConfig"),fit.forEach(t),qto=r(Sye," (RetriBERT model)"),Sye.forEach(t),jto=i(L),bg=n(L,"LI",{});var Rye=s(bg);Hse=n(Rye,"STRONG",{});var mit=s(Hse);Dto=r(mit,"roberta"),mit.forEach(t),Gto=r(Rye," \u2014 "),NP=n(Rye,"A",{href:!0});var git=s(NP);Oto=r(git,"RobertaConfig"),git.forEach(t),Vto=r(Rye," (RoBERTa model)"),Rye.forEach(t),Xto=i(L),vg=n(L,"LI",{});var Pye=s(vg);Use=n(Pye,"STRONG",{});var hit=s(Use);zto=r(hit,"roformer"),hit.forEach(t),Wto=r(Pye," \u2014 "),qP=n(Pye,"A",{href:!0});var pit=s(qP);Qto=r(pit,"RoFormerConfig"),pit.forEach(t),Hto=r(Pye," (RoFormer model)"),Pye.forEach(t),Uto=i(L),Fg=n(L,"LI",{});var Bye=s(Fg);Jse=n(Bye,"STRONG",{});var _it=s(Jse);Jto=r(_it,"segformer"),_it.forEach(t),Yto=r(Bye," \u2014 "),jP=n(Bye,"A",{href:!0});var uit=s(jP);Kto=r(uit,"SegformerConfig"),uit.forEach(t),Zto=r(Bye," (SegFormer model)"),Bye.forEach(t),eao=i(L),Tg=n(L,"LI",{});var Iye=s(Tg);Yse=n(Iye,"STRONG",{});var bit=s(Yse);oao=r(bit,"sew"),bit.forEach(t),rao=r(Iye," \u2014 "),DP=n(Iye,"A",{href:!0});var vit=s(DP);tao=r(vit,"SEWConfig"),vit.forEach(t),aao=r(Iye," (SEW model)"),Iye.forEach(t),nao=i(L),Mg=n(L,"LI",{});var Nye=s(Mg);Kse=n(Nye,"STRONG",{});var Fit=s(Kse);sao=r(Fit,"sew-d"),Fit.forEach(t),lao=r(Nye," \u2014 "),GP=n(Nye,"A",{href:!0});var Tit=s(GP);iao=r(Tit,"SEWDConfig"),Tit.forEach(t),dao=r(Nye," (SEW-D model)"),Nye.forEach(t),cao=i(L),Eg=n(L,"LI",{});var qye=s(Eg);Zse=n(qye,"STRONG",{});var Mit=s(Zse);fao=r(Mit,"speech-encoder-decoder"),Mit.forEach(t),mao=r(qye," \u2014 "),OP=n(qye,"A",{href:!0});var Eit=s(OP);gao=r(Eit,"SpeechEncoderDecoderConfig"),Eit.forEach(t),hao=r(qye," (Speech Encoder decoder model)"),qye.forEach(t),pao=i(L),Cg=n(L,"LI",{});var jye=s(Cg);ele=n(jye,"STRONG",{});var Cit=s(ele);_ao=r(Cit,"speech_to_text"),Cit.forEach(t),uao=r(jye," \u2014 "),VP=n(jye,"A",{href:!0});var wit=s(VP);bao=r(wit,"Speech2TextConfig"),wit.forEach(t),vao=r(jye," (Speech2Text model)"),jye.forEach(t),Fao=i(L),wg=n(L,"LI",{});var Dye=s(wg);ole=n(Dye,"STRONG",{});var Ait=s(ole);Tao=r(Ait,"speech_to_text_2"),Ait.forEach(t),Mao=r(Dye," \u2014 "),XP=n(Dye,"A",{href:!0});var Lit=s(XP);Eao=r(Lit,"Speech2Text2Config"),Lit.forEach(t),Cao=r(Dye," (Speech2Text2 model)"),Dye.forEach(t),wao=i(L),Ag=n(L,"LI",{});var Gye=s(Ag);rle=n(Gye,"STRONG",{});var yit=s(rle);Aao=r(yit,"splinter"),yit.forEach(t),Lao=r(Gye," \u2014 "),zP=n(Gye,"A",{href:!0});var xit=s(zP);yao=r(xit,"SplinterConfig"),xit.forEach(t),xao=r(Gye," (Splinter model)"),Gye.forEach(t),$ao=i(L),Lg=n(L,"LI",{});var Oye=s(Lg);tle=n(Oye,"STRONG",{});var $it=s(tle);kao=r($it,"squeezebert"),$it.forEach(t),Sao=r(Oye," \u2014 "),WP=n(Oye,"A",{href:!0});var kit=s(WP);Rao=r(kit,"SqueezeBertConfig"),kit.forEach(t),Pao=r(Oye," (SqueezeBERT model)"),Oye.forEach(t),Bao=i(L),yg=n(L,"LI",{});var Vye=s(yg);ale=n(Vye,"STRONG",{});var Sit=s(ale);Iao=r(Sit,"swin"),Sit.forEach(t),Nao=r(Vye," \u2014 "),QP=n(Vye,"A",{href:!0});var Rit=s(QP);qao=r(Rit,"SwinConfig"),Rit.forEach(t),jao=r(Vye," (Swin Transformer model)"),Vye.forEach(t),Dao=i(L),xg=n(L,"LI",{});var Xye=s(xg);nle=n(Xye,"STRONG",{});var Pit=s(nle);Gao=r(Pit,"swinv2"),Pit.forEach(t),Oao=r(Xye," \u2014 "),HP=n(Xye,"A",{href:!0});var Bit=s(HP);Vao=r(Bit,"Swinv2Config"),Bit.forEach(t),Xao=r(Xye," (Swin Transformer V2 model)"),Xye.forEach(t),zao=i(L),$g=n(L,"LI",{});var zye=s($g);sle=n(zye,"STRONG",{});var Iit=s(sle);Wao=r(Iit,"t5"),Iit.forEach(t),Qao=r(zye," \u2014 "),UP=n(zye,"A",{href:!0});var Nit=s(UP);Hao=r(Nit,"T5Config"),Nit.forEach(t),Uao=r(zye," (T5 model)"),zye.forEach(t),Jao=i(L),kg=n(L,"LI",{});var Wye=s(kg);lle=n(Wye,"STRONG",{});var qit=s(lle);Yao=r(qit,"tapas"),qit.forEach(t),Kao=r(Wye," \u2014 "),JP=n(Wye,"A",{href:!0});var jit=s(JP);Zao=r(jit,"TapasConfig"),jit.forEach(t),eno=r(Wye," (TAPAS model)"),Wye.forEach(t),ono=i(L),Sg=n(L,"LI",{});var Qye=s(Sg);ile=n(Qye,"STRONG",{});var Dit=s(ile);rno=r(Dit,"trajectory_transformer"),Dit.forEach(t),tno=r(Qye," \u2014 "),YP=n(Qye,"A",{href:!0});var Git=s(YP);ano=r(Git,"TrajectoryTransformerConfig"),Git.forEach(t),nno=r(Qye," (Trajectory Transformer model)"),Qye.forEach(t),sno=i(L),Rg=n(L,"LI",{});var Hye=s(Rg);dle=n(Hye,"STRONG",{});var Oit=s(dle);lno=r(Oit,"transfo-xl"),Oit.forEach(t),ino=r(Hye," \u2014 "),KP=n(Hye,"A",{href:!0});var Vit=s(KP);dno=r(Vit,"TransfoXLConfig"),Vit.forEach(t),cno=r(Hye," (Transformer-XL model)"),Hye.forEach(t),fno=i(L),Pg=n(L,"LI",{});var Uye=s(Pg);cle=n(Uye,"STRONG",{});var Xit=s(cle);mno=r(Xit,"trocr"),Xit.forEach(t),gno=r(Uye," \u2014 "),ZP=n(Uye,"A",{href:!0});var zit=s(ZP);hno=r(zit,"TrOCRConfig"),zit.forEach(t),pno=r(Uye," (TrOCR model)"),Uye.forEach(t),_no=i(L),Bg=n(L,"LI",{});var Jye=s(Bg);fle=n(Jye,"STRONG",{});var Wit=s(fle);uno=r(Wit,"unispeech"),Wit.forEach(t),bno=r(Jye," \u2014 "),eB=n(Jye,"A",{href:!0});var Qit=s(eB);vno=r(Qit,"UniSpeechConfig"),Qit.forEach(t),Fno=r(Jye," (UniSpeech model)"),Jye.forEach(t),Tno=i(L),Ig=n(L,"LI",{});var Yye=s(Ig);mle=n(Yye,"STRONG",{});var Hit=s(mle);Mno=r(Hit,"unispeech-sat"),Hit.forEach(t),Eno=r(Yye," \u2014 "),oB=n(Yye,"A",{href:!0});var Uit=s(oB);Cno=r(Uit,"UniSpeechSatConfig"),Uit.forEach(t),wno=r(Yye," (UniSpeechSat model)"),Yye.forEach(t),Ano=i(L),Ng=n(L,"LI",{});var Kye=s(Ng);gle=n(Kye,"STRONG",{});var Jit=s(gle);Lno=r(Jit,"van"),Jit.forEach(t),yno=r(Kye," \u2014 "),rB=n(Kye,"A",{href:!0});var Yit=s(rB);xno=r(Yit,"VanConfig"),Yit.forEach(t),$no=r(Kye," (VAN model)"),Kye.forEach(t),kno=i(L),qg=n(L,"LI",{});var Zye=s(qg);hle=n(Zye,"STRONG",{});var Kit=s(hle);Sno=r(Kit,"vilt"),Kit.forEach(t),Rno=r(Zye," \u2014 "),tB=n(Zye,"A",{href:!0});var Zit=s(tB);Pno=r(Zit,"ViltConfig"),Zit.forEach(t),Bno=r(Zye," (ViLT model)"),Zye.forEach(t),Ino=i(L),jg=n(L,"LI",{});var e9e=s(jg);ple=n(e9e,"STRONG",{});var edt=s(ple);Nno=r(edt,"vision-encoder-decoder"),edt.forEach(t),qno=r(e9e," \u2014 "),aB=n(e9e,"A",{href:!0});var odt=s(aB);jno=r(odt,"VisionEncoderDecoderConfig"),odt.forEach(t),Dno=r(e9e," (Vision Encoder decoder model)"),e9e.forEach(t),Gno=i(L),Dg=n(L,"LI",{});var o9e=s(Dg);_le=n(o9e,"STRONG",{});var rdt=s(_le);Ono=r(rdt,"vision-text-dual-encoder"),rdt.forEach(t),Vno=r(o9e," \u2014 "),nB=n(o9e,"A",{href:!0});var tdt=s(nB);Xno=r(tdt,"VisionTextDualEncoderConfig"),tdt.forEach(t),zno=r(o9e," (VisionTextDualEncoder model)"),o9e.forEach(t),Wno=i(L),Gg=n(L,"LI",{});var r9e=s(Gg);ule=n(r9e,"STRONG",{});var adt=s(ule);Qno=r(adt,"visual_bert"),adt.forEach(t),Hno=r(r9e," \u2014 "),sB=n(r9e,"A",{href:!0});var ndt=s(sB);Uno=r(ndt,"VisualBertConfig"),ndt.forEach(t),Jno=r(r9e," (VisualBERT model)"),r9e.forEach(t),Yno=i(L),Og=n(L,"LI",{});var t9e=s(Og);ble=n(t9e,"STRONG",{});var sdt=s(ble);Kno=r(sdt,"vit"),sdt.forEach(t),Zno=r(t9e," \u2014 "),lB=n(t9e,"A",{href:!0});var ldt=s(lB);eso=r(ldt,"ViTConfig"),ldt.forEach(t),oso=r(t9e," (ViT model)"),t9e.forEach(t),rso=i(L),Vg=n(L,"LI",{});var a9e=s(Vg);vle=n(a9e,"STRONG",{});var idt=s(vle);tso=r(idt,"vit_mae"),idt.forEach(t),aso=r(a9e," \u2014 "),iB=n(a9e,"A",{href:!0});var ddt=s(iB);nso=r(ddt,"ViTMAEConfig"),ddt.forEach(t),sso=r(a9e," (ViTMAE model)"),a9e.forEach(t),lso=i(L),Xg=n(L,"LI",{});var n9e=s(Xg);Fle=n(n9e,"STRONG",{});var cdt=s(Fle);iso=r(cdt,"wav2vec2"),cdt.forEach(t),dso=r(n9e," \u2014 "),dB=n(n9e,"A",{href:!0});var fdt=s(dB);cso=r(fdt,"Wav2Vec2Config"),fdt.forEach(t),fso=r(n9e," (Wav2Vec2 model)"),n9e.forEach(t),mso=i(L),zg=n(L,"LI",{});var s9e=s(zg);Tle=n(s9e,"STRONG",{});var mdt=s(Tle);gso=r(mdt,"wav2vec2-conformer"),mdt.forEach(t),hso=r(s9e," \u2014 "),cB=n(s9e,"A",{href:!0});var gdt=s(cB);pso=r(gdt,"Wav2Vec2ConformerConfig"),gdt.forEach(t),_so=r(s9e," (Wav2Vec2-Conformer model)"),s9e.forEach(t),uso=i(L),Wg=n(L,"LI",{});var l9e=s(Wg);Mle=n(l9e,"STRONG",{});var hdt=s(Mle);bso=r(hdt,"wavlm"),hdt.forEach(t),vso=r(l9e," \u2014 "),fB=n(l9e,"A",{href:!0});var pdt=s(fB);Fso=r(pdt,"WavLMConfig"),pdt.forEach(t),Tso=r(l9e," (WavLM model)"),l9e.forEach(t),Mso=i(L),Qg=n(L,"LI",{});var i9e=s(Qg);Ele=n(i9e,"STRONG",{});var _dt=s(Ele);Eso=r(_dt,"xglm"),_dt.forEach(t),Cso=r(i9e," \u2014 "),mB=n(i9e,"A",{href:!0});var udt=s(mB);wso=r(udt,"XGLMConfig"),udt.forEach(t),Aso=r(i9e," (XGLM model)"),i9e.forEach(t),Lso=i(L),Hg=n(L,"LI",{});var d9e=s(Hg);Cle=n(d9e,"STRONG",{});var bdt=s(Cle);yso=r(bdt,"xlm"),bdt.forEach(t),xso=r(d9e," \u2014 "),gB=n(d9e,"A",{href:!0});var vdt=s(gB);$so=r(vdt,"XLMConfig"),vdt.forEach(t),kso=r(d9e," (XLM model)"),d9e.forEach(t),Sso=i(L),Ug=n(L,"LI",{});var c9e=s(Ug);wle=n(c9e,"STRONG",{});var Fdt=s(wle);Rso=r(Fdt,"xlm-prophetnet"),Fdt.forEach(t),Pso=r(c9e," \u2014 "),hB=n(c9e,"A",{href:!0});var Tdt=s(hB);Bso=r(Tdt,"XLMProphetNetConfig"),Tdt.forEach(t),Iso=r(c9e," (XLM-ProphetNet model)"),c9e.forEach(t),Nso=i(L),Jg=n(L,"LI",{});var f9e=s(Jg);Ale=n(f9e,"STRONG",{});var Mdt=s(Ale);qso=r(Mdt,"xlm-roberta"),Mdt.forEach(t),jso=r(f9e," \u2014 "),pB=n(f9e,"A",{href:!0});var Edt=s(pB);Dso=r(Edt,"XLMRobertaConfig"),Edt.forEach(t),Gso=r(f9e," (XLM-RoBERTa model)"),f9e.forEach(t),Oso=i(L),Yg=n(L,"LI",{});var m9e=s(Yg);Lle=n(m9e,"STRONG",{});var Cdt=s(Lle);Vso=r(Cdt,"xlm-roberta-xl"),Cdt.forEach(t),Xso=r(m9e," \u2014 "),_B=n(m9e,"A",{href:!0});var wdt=s(_B);zso=r(wdt,"XLMRobertaXLConfig"),wdt.forEach(t),Wso=r(m9e," (XLM-RoBERTa-XL model)"),m9e.forEach(t),Qso=i(L),Kg=n(L,"LI",{});var g9e=s(Kg);yle=n(g9e,"STRONG",{});var Adt=s(yle);Hso=r(Adt,"xlnet"),Adt.forEach(t),Uso=r(g9e," \u2014 "),uB=n(g9e,"A",{href:!0});var Ldt=s(uB);Jso=r(Ldt,"XLNetConfig"),Ldt.forEach(t),Yso=r(g9e," (XLNet model)"),g9e.forEach(t),Kso=i(L),Zg=n(L,"LI",{});var h9e=s(Zg);xle=n(h9e,"STRONG",{});var ydt=s(xle);Zso=r(ydt,"yolos"),ydt.forEach(t),elo=r(h9e," \u2014 "),bB=n(h9e,"A",{href:!0});var xdt=s(bB);olo=r(xdt,"YolosConfig"),xdt.forEach(t),rlo=r(h9e," (YOLOS model)"),h9e.forEach(t),tlo=i(L),eh=n(L,"LI",{});var p9e=s(eh);$le=n(p9e,"STRONG",{});var $dt=s($le);alo=r($dt,"yoso"),$dt.forEach(t),nlo=r(p9e," \u2014 "),vB=n(p9e,"A",{href:!0});var kdt=s(vB);slo=r(kdt,"YosoConfig"),kdt.forEach(t),llo=r(p9e," (YOSO model)"),p9e.forEach(t),L.forEach(t),ilo=i(st),T(oh.$$.fragment,st),st.forEach(t),dlo=i(nt),rh=n(nt,"DIV",{class:!0});var vQe=s(rh);T(xL.$$.fragment,vQe),clo=i(vQe),kle=n(vQe,"P",{});var Sdt=s(kle);flo=r(Sdt,"Register a new configuration for this class."),Sdt.forEach(t),vQe.forEach(t),nt.forEach(t),Fze=i(f),Di=n(f,"H2",{class:!0});var FQe=s(Di);th=n(FQe,"A",{id:!0,class:!0,href:!0});var Rdt=s(th);Sle=n(Rdt,"SPAN",{});var Pdt=s(Sle);T($L.$$.fragment,Pdt),Pdt.forEach(t),Rdt.forEach(t),mlo=i(FQe),Rle=n(FQe,"SPAN",{});var Bdt=s(Rle);glo=r(Bdt,"AutoTokenizer"),Bdt.forEach(t),FQe.forEach(t),Tze=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T(kL.$$.fragment,ol),hlo=i(ol),SL=n(ol,"P",{});var TQe=s(SL);plo=r(TQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),FB=n(TQe,"A",{href:!0});var Idt=s(FB);_lo=r(Idt,"AutoTokenizer.from_pretrained()"),Idt.forEach(t),ulo=r(TQe," class method."),TQe.forEach(t),blo=i(ol),RL=n(ol,"P",{});var MQe=s(RL);vlo=r(MQe,"This class cannot be instantiated directly using "),Ple=n(MQe,"CODE",{});var Ndt=s(Ple);Flo=r(Ndt,"__init__()"),Ndt.forEach(t),Tlo=r(MQe," (throws an error)."),MQe.forEach(t),Mlo=i(ol),xr=n(ol,"DIV",{class:!0});var rl=s(xr);T(PL.$$.fragment,rl),Elo=i(rl),Ble=n(rl,"P",{});var qdt=s(Ble);Clo=r(qdt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qdt.forEach(t),wlo=i(rl),Pa=n(rl,"P",{});var EA=s(Pa);Alo=r(EA,"The tokenizer class to instantiate is selected based on the "),Ile=n(EA,"CODE",{});var jdt=s(Ile);Llo=r(jdt,"model_type"),jdt.forEach(t),ylo=r(EA,` property of the config object (either
passed as an argument or loaded from `),Nle=n(EA,"CODE",{});var Ddt=s(Nle);xlo=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),$lo=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qle=n(EA,"CODE",{});var Gdt=s(qle);klo=r(Gdt,"pretrained_model_name_or_path"),Gdt.forEach(t),Slo=r(EA,":"),EA.forEach(t),Rlo=i(rl),k=n(rl,"UL",{});var S=s(k);Dn=n(S,"LI",{});var Dk=s(Dn);jle=n(Dk,"STRONG",{});var Odt=s(jle);Plo=r(Odt,"albert"),Odt.forEach(t),Blo=r(Dk," \u2014 "),TB=n(Dk,"A",{href:!0});var Vdt=s(TB);Ilo=r(Vdt,"AlbertTokenizer"),Vdt.forEach(t),Nlo=r(Dk," or "),MB=n(Dk,"A",{href:!0});var Xdt=s(MB);qlo=r(Xdt,"AlbertTokenizerFast"),Xdt.forEach(t),jlo=r(Dk," (ALBERT model)"),Dk.forEach(t),Dlo=i(S),Gn=n(S,"LI",{});var Gk=s(Gn);Dle=n(Gk,"STRONG",{});var zdt=s(Dle);Glo=r(zdt,"bart"),zdt.forEach(t),Olo=r(Gk," \u2014 "),EB=n(Gk,"A",{href:!0});var Wdt=s(EB);Vlo=r(Wdt,"BartTokenizer"),Wdt.forEach(t),Xlo=r(Gk," or "),CB=n(Gk,"A",{href:!0});var Qdt=s(CB);zlo=r(Qdt,"BartTokenizerFast"),Qdt.forEach(t),Wlo=r(Gk," (BART model)"),Gk.forEach(t),Qlo=i(S),On=n(S,"LI",{});var Ok=s(On);Gle=n(Ok,"STRONG",{});var Hdt=s(Gle);Hlo=r(Hdt,"barthez"),Hdt.forEach(t),Ulo=r(Ok," \u2014 "),wB=n(Ok,"A",{href:!0});var Udt=s(wB);Jlo=r(Udt,"BarthezTokenizer"),Udt.forEach(t),Ylo=r(Ok," or "),AB=n(Ok,"A",{href:!0});var Jdt=s(AB);Klo=r(Jdt,"BarthezTokenizerFast"),Jdt.forEach(t),Zlo=r(Ok," (BARThez model)"),Ok.forEach(t),eio=i(S),ah=n(S,"LI",{});var _9e=s(ah);Ole=n(_9e,"STRONG",{});var Ydt=s(Ole);oio=r(Ydt,"bartpho"),Ydt.forEach(t),rio=r(_9e," \u2014 "),LB=n(_9e,"A",{href:!0});var Kdt=s(LB);tio=r(Kdt,"BartphoTokenizer"),Kdt.forEach(t),aio=r(_9e," (BARTpho model)"),_9e.forEach(t),nio=i(S),Vn=n(S,"LI",{});var Vk=s(Vn);Vle=n(Vk,"STRONG",{});var Zdt=s(Vle);sio=r(Zdt,"bert"),Zdt.forEach(t),lio=r(Vk," \u2014 "),yB=n(Vk,"A",{href:!0});var ect=s(yB);iio=r(ect,"BertTokenizer"),ect.forEach(t),dio=r(Vk," or "),xB=n(Vk,"A",{href:!0});var oct=s(xB);cio=r(oct,"BertTokenizerFast"),oct.forEach(t),fio=r(Vk," (BERT model)"),Vk.forEach(t),mio=i(S),nh=n(S,"LI",{});var u9e=s(nh);Xle=n(u9e,"STRONG",{});var rct=s(Xle);gio=r(rct,"bert-generation"),rct.forEach(t),hio=r(u9e," \u2014 "),$B=n(u9e,"A",{href:!0});var tct=s($B);pio=r(tct,"BertGenerationTokenizer"),tct.forEach(t),_io=r(u9e," (Bert Generation model)"),u9e.forEach(t),uio=i(S),sh=n(S,"LI",{});var b9e=s(sh);zle=n(b9e,"STRONG",{});var act=s(zle);bio=r(act,"bert-japanese"),act.forEach(t),vio=r(b9e," \u2014 "),kB=n(b9e,"A",{href:!0});var nct=s(kB);Fio=r(nct,"BertJapaneseTokenizer"),nct.forEach(t),Tio=r(b9e," (BertJapanese model)"),b9e.forEach(t),Mio=i(S),lh=n(S,"LI",{});var v9e=s(lh);Wle=n(v9e,"STRONG",{});var sct=s(Wle);Eio=r(sct,"bertweet"),sct.forEach(t),Cio=r(v9e," \u2014 "),SB=n(v9e,"A",{href:!0});var lct=s(SB);wio=r(lct,"BertweetTokenizer"),lct.forEach(t),Aio=r(v9e," (BERTweet model)"),v9e.forEach(t),Lio=i(S),Xn=n(S,"LI",{});var Xk=s(Xn);Qle=n(Xk,"STRONG",{});var ict=s(Qle);yio=r(ict,"big_bird"),ict.forEach(t),xio=r(Xk," \u2014 "),RB=n(Xk,"A",{href:!0});var dct=s(RB);$io=r(dct,"BigBirdTokenizer"),dct.forEach(t),kio=r(Xk," or "),PB=n(Xk,"A",{href:!0});var cct=s(PB);Sio=r(cct,"BigBirdTokenizerFast"),cct.forEach(t),Rio=r(Xk," (BigBird model)"),Xk.forEach(t),Pio=i(S),zn=n(S,"LI",{});var zk=s(zn);Hle=n(zk,"STRONG",{});var fct=s(Hle);Bio=r(fct,"bigbird_pegasus"),fct.forEach(t),Iio=r(zk," \u2014 "),BB=n(zk,"A",{href:!0});var mct=s(BB);Nio=r(mct,"PegasusTokenizer"),mct.forEach(t),qio=r(zk," or "),IB=n(zk,"A",{href:!0});var gct=s(IB);jio=r(gct,"PegasusTokenizerFast"),gct.forEach(t),Dio=r(zk," (BigBird-Pegasus model)"),zk.forEach(t),Gio=i(S),Wn=n(S,"LI",{});var Wk=s(Wn);Ule=n(Wk,"STRONG",{});var hct=s(Ule);Oio=r(hct,"blenderbot"),hct.forEach(t),Vio=r(Wk," \u2014 "),NB=n(Wk,"A",{href:!0});var pct=s(NB);Xio=r(pct,"BlenderbotTokenizer"),pct.forEach(t),zio=r(Wk," or "),qB=n(Wk,"A",{href:!0});var _ct=s(qB);Wio=r(_ct,"BlenderbotTokenizerFast"),_ct.forEach(t),Qio=r(Wk," (Blenderbot model)"),Wk.forEach(t),Hio=i(S),ih=n(S,"LI",{});var F9e=s(ih);Jle=n(F9e,"STRONG",{});var uct=s(Jle);Uio=r(uct,"blenderbot-small"),uct.forEach(t),Jio=r(F9e," \u2014 "),jB=n(F9e,"A",{href:!0});var bct=s(jB);Yio=r(bct,"BlenderbotSmallTokenizer"),bct.forEach(t),Kio=r(F9e," (BlenderbotSmall model)"),F9e.forEach(t),Zio=i(S),dh=n(S,"LI",{});var T9e=s(dh);Yle=n(T9e,"STRONG",{});var vct=s(Yle);edo=r(vct,"bloom"),vct.forEach(t),odo=r(T9e," \u2014 "),DB=n(T9e,"A",{href:!0});var Fct=s(DB);rdo=r(Fct,"BloomTokenizerFast"),Fct.forEach(t),tdo=r(T9e," (BLOOM model)"),T9e.forEach(t),ado=i(S),ch=n(S,"LI",{});var M9e=s(ch);Kle=n(M9e,"STRONG",{});var Tct=s(Kle);ndo=r(Tct,"byt5"),Tct.forEach(t),sdo=r(M9e," \u2014 "),GB=n(M9e,"A",{href:!0});var Mct=s(GB);ldo=r(Mct,"ByT5Tokenizer"),Mct.forEach(t),ido=r(M9e," (ByT5 model)"),M9e.forEach(t),ddo=i(S),Qn=n(S,"LI",{});var Qk=s(Qn);Zle=n(Qk,"STRONG",{});var Ect=s(Zle);cdo=r(Ect,"camembert"),Ect.forEach(t),fdo=r(Qk," \u2014 "),OB=n(Qk,"A",{href:!0});var Cct=s(OB);mdo=r(Cct,"CamembertTokenizer"),Cct.forEach(t),gdo=r(Qk," or "),VB=n(Qk,"A",{href:!0});var wct=s(VB);hdo=r(wct,"CamembertTokenizerFast"),wct.forEach(t),pdo=r(Qk," (CamemBERT model)"),Qk.forEach(t),_do=i(S),fh=n(S,"LI",{});var E9e=s(fh);eie=n(E9e,"STRONG",{});var Act=s(eie);udo=r(Act,"canine"),Act.forEach(t),bdo=r(E9e," \u2014 "),XB=n(E9e,"A",{href:!0});var Lct=s(XB);vdo=r(Lct,"CanineTokenizer"),Lct.forEach(t),Fdo=r(E9e," (CANINE model)"),E9e.forEach(t),Tdo=i(S),Hn=n(S,"LI",{});var Hk=s(Hn);oie=n(Hk,"STRONG",{});var yct=s(oie);Mdo=r(yct,"clip"),yct.forEach(t),Edo=r(Hk," \u2014 "),zB=n(Hk,"A",{href:!0});var xct=s(zB);Cdo=r(xct,"CLIPTokenizer"),xct.forEach(t),wdo=r(Hk," or "),WB=n(Hk,"A",{href:!0});var $ct=s(WB);Ado=r($ct,"CLIPTokenizerFast"),$ct.forEach(t),Ldo=r(Hk," (CLIP model)"),Hk.forEach(t),ydo=i(S),Un=n(S,"LI",{});var Uk=s(Un);rie=n(Uk,"STRONG",{});var kct=s(rie);xdo=r(kct,"codegen"),kct.forEach(t),$do=r(Uk," \u2014 "),QB=n(Uk,"A",{href:!0});var Sct=s(QB);kdo=r(Sct,"CodeGenTokenizer"),Sct.forEach(t),Sdo=r(Uk," or "),HB=n(Uk,"A",{href:!0});var Rct=s(HB);Rdo=r(Rct,"CodeGenTokenizerFast"),Rct.forEach(t),Pdo=r(Uk," (CodeGen model)"),Uk.forEach(t),Bdo=i(S),Jn=n(S,"LI",{});var Jk=s(Jn);tie=n(Jk,"STRONG",{});var Pct=s(tie);Ido=r(Pct,"convbert"),Pct.forEach(t),Ndo=r(Jk," \u2014 "),UB=n(Jk,"A",{href:!0});var Bct=s(UB);qdo=r(Bct,"ConvBertTokenizer"),Bct.forEach(t),jdo=r(Jk," or "),JB=n(Jk,"A",{href:!0});var Ict=s(JB);Ddo=r(Ict,"ConvBertTokenizerFast"),Ict.forEach(t),Gdo=r(Jk," (ConvBERT model)"),Jk.forEach(t),Odo=i(S),Yn=n(S,"LI",{});var Yk=s(Yn);aie=n(Yk,"STRONG",{});var Nct=s(aie);Vdo=r(Nct,"cpm"),Nct.forEach(t),Xdo=r(Yk," \u2014 "),YB=n(Yk,"A",{href:!0});var qct=s(YB);zdo=r(qct,"CpmTokenizer"),qct.forEach(t),Wdo=r(Yk," or "),KB=n(Yk,"A",{href:!0});var jct=s(KB);Qdo=r(jct,"CpmTokenizerFast"),jct.forEach(t),Hdo=r(Yk," (CPM model)"),Yk.forEach(t),Udo=i(S),mh=n(S,"LI",{});var C9e=s(mh);nie=n(C9e,"STRONG",{});var Dct=s(nie);Jdo=r(Dct,"ctrl"),Dct.forEach(t),Ydo=r(C9e," \u2014 "),ZB=n(C9e,"A",{href:!0});var Gct=s(ZB);Kdo=r(Gct,"CTRLTokenizer"),Gct.forEach(t),Zdo=r(C9e," (CTRL model)"),C9e.forEach(t),eco=i(S),Kn=n(S,"LI",{});var Kk=s(Kn);sie=n(Kk,"STRONG",{});var Oct=s(sie);oco=r(Oct,"data2vec-text"),Oct.forEach(t),rco=r(Kk," \u2014 "),eI=n(Kk,"A",{href:!0});var Vct=s(eI);tco=r(Vct,"RobertaTokenizer"),Vct.forEach(t),aco=r(Kk," or "),oI=n(Kk,"A",{href:!0});var Xct=s(oI);nco=r(Xct,"RobertaTokenizerFast"),Xct.forEach(t),sco=r(Kk," (Data2VecText model)"),Kk.forEach(t),lco=i(S),Zn=n(S,"LI",{});var Zk=s(Zn);lie=n(Zk,"STRONG",{});var zct=s(lie);ico=r(zct,"deberta"),zct.forEach(t),dco=r(Zk," \u2014 "),rI=n(Zk,"A",{href:!0});var Wct=s(rI);cco=r(Wct,"DebertaTokenizer"),Wct.forEach(t),fco=r(Zk," or "),tI=n(Zk,"A",{href:!0});var Qct=s(tI);mco=r(Qct,"DebertaTokenizerFast"),Qct.forEach(t),gco=r(Zk," (DeBERTa model)"),Zk.forEach(t),hco=i(S),es=n(S,"LI",{});var eS=s(es);iie=n(eS,"STRONG",{});var Hct=s(iie);pco=r(Hct,"deberta-v2"),Hct.forEach(t),_co=r(eS," \u2014 "),aI=n(eS,"A",{href:!0});var Uct=s(aI);uco=r(Uct,"DebertaV2Tokenizer"),Uct.forEach(t),bco=r(eS," or "),nI=n(eS,"A",{href:!0});var Jct=s(nI);vco=r(Jct,"DebertaV2TokenizerFast"),Jct.forEach(t),Fco=r(eS," (DeBERTa-v2 model)"),eS.forEach(t),Tco=i(S),os=n(S,"LI",{});var oS=s(os);die=n(oS,"STRONG",{});var Yct=s(die);Mco=r(Yct,"distilbert"),Yct.forEach(t),Eco=r(oS," \u2014 "),sI=n(oS,"A",{href:!0});var Kct=s(sI);Cco=r(Kct,"DistilBertTokenizer"),Kct.forEach(t),wco=r(oS," or "),lI=n(oS,"A",{href:!0});var Zct=s(lI);Aco=r(Zct,"DistilBertTokenizerFast"),Zct.forEach(t),Lco=r(oS," (DistilBERT model)"),oS.forEach(t),yco=i(S),rs=n(S,"LI",{});var rS=s(rs);cie=n(rS,"STRONG",{});var eft=s(cie);xco=r(eft,"dpr"),eft.forEach(t),$co=r(rS," \u2014 "),iI=n(rS,"A",{href:!0});var oft=s(iI);kco=r(oft,"DPRQuestionEncoderTokenizer"),oft.forEach(t),Sco=r(rS," or "),dI=n(rS,"A",{href:!0});var rft=s(dI);Rco=r(rft,"DPRQuestionEncoderTokenizerFast"),rft.forEach(t),Pco=r(rS," (DPR model)"),rS.forEach(t),Bco=i(S),ts=n(S,"LI",{});var tS=s(ts);fie=n(tS,"STRONG",{});var tft=s(fie);Ico=r(tft,"electra"),tft.forEach(t),Nco=r(tS," \u2014 "),cI=n(tS,"A",{href:!0});var aft=s(cI);qco=r(aft,"ElectraTokenizer"),aft.forEach(t),jco=r(tS," or "),fI=n(tS,"A",{href:!0});var nft=s(fI);Dco=r(nft,"ElectraTokenizerFast"),nft.forEach(t),Gco=r(tS," (ELECTRA model)"),tS.forEach(t),Oco=i(S),gh=n(S,"LI",{});var w9e=s(gh);mie=n(w9e,"STRONG",{});var sft=s(mie);Vco=r(sft,"flaubert"),sft.forEach(t),Xco=r(w9e," \u2014 "),mI=n(w9e,"A",{href:!0});var lft=s(mI);zco=r(lft,"FlaubertTokenizer"),lft.forEach(t),Wco=r(w9e," (FlauBERT model)"),w9e.forEach(t),Qco=i(S),as=n(S,"LI",{});var aS=s(as);gie=n(aS,"STRONG",{});var ift=s(gie);Hco=r(ift,"fnet"),ift.forEach(t),Uco=r(aS," \u2014 "),gI=n(aS,"A",{href:!0});var dft=s(gI);Jco=r(dft,"FNetTokenizer"),dft.forEach(t),Yco=r(aS," or "),hI=n(aS,"A",{href:!0});var cft=s(hI);Kco=r(cft,"FNetTokenizerFast"),cft.forEach(t),Zco=r(aS," (FNet model)"),aS.forEach(t),efo=i(S),hh=n(S,"LI",{});var A9e=s(hh);hie=n(A9e,"STRONG",{});var fft=s(hie);ofo=r(fft,"fsmt"),fft.forEach(t),rfo=r(A9e," \u2014 "),pI=n(A9e,"A",{href:!0});var mft=s(pI);tfo=r(mft,"FSMTTokenizer"),mft.forEach(t),afo=r(A9e," (FairSeq Machine-Translation model)"),A9e.forEach(t),nfo=i(S),ns=n(S,"LI",{});var nS=s(ns);pie=n(nS,"STRONG",{});var gft=s(pie);sfo=r(gft,"funnel"),gft.forEach(t),lfo=r(nS," \u2014 "),_I=n(nS,"A",{href:!0});var hft=s(_I);ifo=r(hft,"FunnelTokenizer"),hft.forEach(t),dfo=r(nS," or "),uI=n(nS,"A",{href:!0});var pft=s(uI);cfo=r(pft,"FunnelTokenizerFast"),pft.forEach(t),ffo=r(nS," (Funnel Transformer model)"),nS.forEach(t),mfo=i(S),ss=n(S,"LI",{});var sS=s(ss);_ie=n(sS,"STRONG",{});var _ft=s(_ie);gfo=r(_ft,"gpt2"),_ft.forEach(t),hfo=r(sS," \u2014 "),bI=n(sS,"A",{href:!0});var uft=s(bI);pfo=r(uft,"GPT2Tokenizer"),uft.forEach(t),_fo=r(sS," or "),vI=n(sS,"A",{href:!0});var bft=s(vI);ufo=r(bft,"GPT2TokenizerFast"),bft.forEach(t),bfo=r(sS," (OpenAI GPT-2 model)"),sS.forEach(t),vfo=i(S),ls=n(S,"LI",{});var lS=s(ls);uie=n(lS,"STRONG",{});var vft=s(uie);Ffo=r(vft,"gpt_neo"),vft.forEach(t),Tfo=r(lS," \u2014 "),FI=n(lS,"A",{href:!0});var Fft=s(FI);Mfo=r(Fft,"GPT2Tokenizer"),Fft.forEach(t),Efo=r(lS," or "),TI=n(lS,"A",{href:!0});var Tft=s(TI);Cfo=r(Tft,"GPT2TokenizerFast"),Tft.forEach(t),wfo=r(lS," (GPT Neo model)"),lS.forEach(t),Afo=i(S),ph=n(S,"LI",{});var L9e=s(ph);bie=n(L9e,"STRONG",{});var Mft=s(bie);Lfo=r(Mft,"gpt_neox"),Mft.forEach(t),yfo=r(L9e," \u2014 "),MI=n(L9e,"A",{href:!0});var Eft=s(MI);xfo=r(Eft,"GPTNeoXTokenizerFast"),Eft.forEach(t),$fo=r(L9e," (GPT NeoX model)"),L9e.forEach(t),kfo=i(S),is=n(S,"LI",{});var iS=s(is);vie=n(iS,"STRONG",{});var Cft=s(vie);Sfo=r(Cft,"gptj"),Cft.forEach(t),Rfo=r(iS," \u2014 "),EI=n(iS,"A",{href:!0});var wft=s(EI);Pfo=r(wft,"GPT2Tokenizer"),wft.forEach(t),Bfo=r(iS," or "),CI=n(iS,"A",{href:!0});var Aft=s(CI);Ifo=r(Aft,"GPT2TokenizerFast"),Aft.forEach(t),Nfo=r(iS," (GPT-J model)"),iS.forEach(t),qfo=i(S),ds=n(S,"LI",{});var dS=s(ds);Fie=n(dS,"STRONG",{});var Lft=s(Fie);jfo=r(Lft,"groupvit"),Lft.forEach(t),Dfo=r(dS," \u2014 "),wI=n(dS,"A",{href:!0});var yft=s(wI);Gfo=r(yft,"CLIPTokenizer"),yft.forEach(t),Ofo=r(dS," or "),AI=n(dS,"A",{href:!0});var xft=s(AI);Vfo=r(xft,"CLIPTokenizerFast"),xft.forEach(t),Xfo=r(dS," (GroupViT model)"),dS.forEach(t),zfo=i(S),cs=n(S,"LI",{});var cS=s(cs);Tie=n(cS,"STRONG",{});var $ft=s(Tie);Wfo=r($ft,"herbert"),$ft.forEach(t),Qfo=r(cS," \u2014 "),LI=n(cS,"A",{href:!0});var kft=s(LI);Hfo=r(kft,"HerbertTokenizer"),kft.forEach(t),Ufo=r(cS," or "),yI=n(cS,"A",{href:!0});var Sft=s(yI);Jfo=r(Sft,"HerbertTokenizerFast"),Sft.forEach(t),Yfo=r(cS," (HerBERT model)"),cS.forEach(t),Kfo=i(S),_h=n(S,"LI",{});var y9e=s(_h);Mie=n(y9e,"STRONG",{});var Rft=s(Mie);Zfo=r(Rft,"hubert"),Rft.forEach(t),emo=r(y9e," \u2014 "),xI=n(y9e,"A",{href:!0});var Pft=s(xI);omo=r(Pft,"Wav2Vec2CTCTokenizer"),Pft.forEach(t),rmo=r(y9e," (Hubert model)"),y9e.forEach(t),tmo=i(S),fs=n(S,"LI",{});var fS=s(fs);Eie=n(fS,"STRONG",{});var Bft=s(Eie);amo=r(Bft,"ibert"),Bft.forEach(t),nmo=r(fS," \u2014 "),$I=n(fS,"A",{href:!0});var Ift=s($I);smo=r(Ift,"RobertaTokenizer"),Ift.forEach(t),lmo=r(fS," or "),kI=n(fS,"A",{href:!0});var Nft=s(kI);imo=r(Nft,"RobertaTokenizerFast"),Nft.forEach(t),dmo=r(fS," (I-BERT model)"),fS.forEach(t),cmo=i(S),ms=n(S,"LI",{});var mS=s(ms);Cie=n(mS,"STRONG",{});var qft=s(Cie);fmo=r(qft,"layoutlm"),qft.forEach(t),mmo=r(mS," \u2014 "),SI=n(mS,"A",{href:!0});var jft=s(SI);gmo=r(jft,"LayoutLMTokenizer"),jft.forEach(t),hmo=r(mS," or "),RI=n(mS,"A",{href:!0});var Dft=s(RI);pmo=r(Dft,"LayoutLMTokenizerFast"),Dft.forEach(t),_mo=r(mS," (LayoutLM model)"),mS.forEach(t),umo=i(S),gs=n(S,"LI",{});var gS=s(gs);wie=n(gS,"STRONG",{});var Gft=s(wie);bmo=r(Gft,"layoutlmv2"),Gft.forEach(t),vmo=r(gS," \u2014 "),PI=n(gS,"A",{href:!0});var Oft=s(PI);Fmo=r(Oft,"LayoutLMv2Tokenizer"),Oft.forEach(t),Tmo=r(gS," or "),BI=n(gS,"A",{href:!0});var Vft=s(BI);Mmo=r(Vft,"LayoutLMv2TokenizerFast"),Vft.forEach(t),Emo=r(gS," (LayoutLMv2 model)"),gS.forEach(t),Cmo=i(S),hs=n(S,"LI",{});var hS=s(hs);Aie=n(hS,"STRONG",{});var Xft=s(Aie);wmo=r(Xft,"layoutlmv3"),Xft.forEach(t),Amo=r(hS," \u2014 "),II=n(hS,"A",{href:!0});var zft=s(II);Lmo=r(zft,"LayoutLMv3Tokenizer"),zft.forEach(t),ymo=r(hS," or "),NI=n(hS,"A",{href:!0});var Wft=s(NI);xmo=r(Wft,"LayoutLMv3TokenizerFast"),Wft.forEach(t),$mo=r(hS," (LayoutLMv3 model)"),hS.forEach(t),kmo=i(S),ps=n(S,"LI",{});var pS=s(ps);Lie=n(pS,"STRONG",{});var Qft=s(Lie);Smo=r(Qft,"layoutxlm"),Qft.forEach(t),Rmo=r(pS," \u2014 "),qI=n(pS,"A",{href:!0});var Hft=s(qI);Pmo=r(Hft,"LayoutXLMTokenizer"),Hft.forEach(t),Bmo=r(pS," or "),jI=n(pS,"A",{href:!0});var Uft=s(jI);Imo=r(Uft,"LayoutXLMTokenizerFast"),Uft.forEach(t),Nmo=r(pS," (LayoutXLM model)"),pS.forEach(t),qmo=i(S),_s=n(S,"LI",{});var _S=s(_s);yie=n(_S,"STRONG",{});var Jft=s(yie);jmo=r(Jft,"led"),Jft.forEach(t),Dmo=r(_S," \u2014 "),DI=n(_S,"A",{href:!0});var Yft=s(DI);Gmo=r(Yft,"LEDTokenizer"),Yft.forEach(t),Omo=r(_S," or "),GI=n(_S,"A",{href:!0});var Kft=s(GI);Vmo=r(Kft,"LEDTokenizerFast"),Kft.forEach(t),Xmo=r(_S," (LED model)"),_S.forEach(t),zmo=i(S),us=n(S,"LI",{});var uS=s(us);xie=n(uS,"STRONG",{});var Zft=s(xie);Wmo=r(Zft,"longformer"),Zft.forEach(t),Qmo=r(uS," \u2014 "),OI=n(uS,"A",{href:!0});var emt=s(OI);Hmo=r(emt,"LongformerTokenizer"),emt.forEach(t),Umo=r(uS," or "),VI=n(uS,"A",{href:!0});var omt=s(VI);Jmo=r(omt,"LongformerTokenizerFast"),omt.forEach(t),Ymo=r(uS," (Longformer model)"),uS.forEach(t),Kmo=i(S),bs=n(S,"LI",{});var bS=s(bs);$ie=n(bS,"STRONG",{});var rmt=s($ie);Zmo=r(rmt,"longt5"),rmt.forEach(t),ego=r(bS," \u2014 "),XI=n(bS,"A",{href:!0});var tmt=s(XI);ogo=r(tmt,"T5Tokenizer"),tmt.forEach(t),rgo=r(bS," or "),zI=n(bS,"A",{href:!0});var amt=s(zI);tgo=r(amt,"T5TokenizerFast"),amt.forEach(t),ago=r(bS," (LongT5 model)"),bS.forEach(t),ngo=i(S),uh=n(S,"LI",{});var x9e=s(uh);kie=n(x9e,"STRONG",{});var nmt=s(kie);sgo=r(nmt,"luke"),nmt.forEach(t),lgo=r(x9e," \u2014 "),WI=n(x9e,"A",{href:!0});var smt=s(WI);igo=r(smt,"LukeTokenizer"),smt.forEach(t),dgo=r(x9e," (LUKE model)"),x9e.forEach(t),cgo=i(S),vs=n(S,"LI",{});var vS=s(vs);Sie=n(vS,"STRONG",{});var lmt=s(Sie);fgo=r(lmt,"lxmert"),lmt.forEach(t),mgo=r(vS," \u2014 "),QI=n(vS,"A",{href:!0});var imt=s(QI);ggo=r(imt,"LxmertTokenizer"),imt.forEach(t),hgo=r(vS," or "),HI=n(vS,"A",{href:!0});var dmt=s(HI);pgo=r(dmt,"LxmertTokenizerFast"),dmt.forEach(t),_go=r(vS," (LXMERT model)"),vS.forEach(t),ugo=i(S),bh=n(S,"LI",{});var $9e=s(bh);Rie=n($9e,"STRONG",{});var cmt=s(Rie);bgo=r(cmt,"m2m_100"),cmt.forEach(t),vgo=r($9e," \u2014 "),UI=n($9e,"A",{href:!0});var fmt=s(UI);Fgo=r(fmt,"M2M100Tokenizer"),fmt.forEach(t),Tgo=r($9e," (M2M100 model)"),$9e.forEach(t),Mgo=i(S),vh=n(S,"LI",{});var k9e=s(vh);Pie=n(k9e,"STRONG",{});var mmt=s(Pie);Ego=r(mmt,"marian"),mmt.forEach(t),Cgo=r(k9e," \u2014 "),JI=n(k9e,"A",{href:!0});var gmt=s(JI);wgo=r(gmt,"MarianTokenizer"),gmt.forEach(t),Ago=r(k9e," (Marian model)"),k9e.forEach(t),Lgo=i(S),Fs=n(S,"LI",{});var FS=s(Fs);Bie=n(FS,"STRONG",{});var hmt=s(Bie);ygo=r(hmt,"mbart"),hmt.forEach(t),xgo=r(FS," \u2014 "),YI=n(FS,"A",{href:!0});var pmt=s(YI);$go=r(pmt,"MBartTokenizer"),pmt.forEach(t),kgo=r(FS," or "),KI=n(FS,"A",{href:!0});var _mt=s(KI);Sgo=r(_mt,"MBartTokenizerFast"),_mt.forEach(t),Rgo=r(FS," (mBART model)"),FS.forEach(t),Pgo=i(S),Ts=n(S,"LI",{});var TS=s(Ts);Iie=n(TS,"STRONG",{});var umt=s(Iie);Bgo=r(umt,"mbart50"),umt.forEach(t),Igo=r(TS," \u2014 "),ZI=n(TS,"A",{href:!0});var bmt=s(ZI);Ngo=r(bmt,"MBart50Tokenizer"),bmt.forEach(t),qgo=r(TS," or "),eN=n(TS,"A",{href:!0});var vmt=s(eN);jgo=r(vmt,"MBart50TokenizerFast"),vmt.forEach(t),Dgo=r(TS," (mBART-50 model)"),TS.forEach(t),Ggo=i(S),Ms=n(S,"LI",{});var MS=s(Ms);Nie=n(MS,"STRONG",{});var Fmt=s(Nie);Ogo=r(Fmt,"megatron-bert"),Fmt.forEach(t),Vgo=r(MS," \u2014 "),oN=n(MS,"A",{href:!0});var Tmt=s(oN);Xgo=r(Tmt,"BertTokenizer"),Tmt.forEach(t),zgo=r(MS," or "),rN=n(MS,"A",{href:!0});var Mmt=s(rN);Wgo=r(Mmt,"BertTokenizerFast"),Mmt.forEach(t),Qgo=r(MS," (Megatron-BERT model)"),MS.forEach(t),Hgo=i(S),Fh=n(S,"LI",{});var S9e=s(Fh);qie=n(S9e,"STRONG",{});var Emt=s(qie);Ugo=r(Emt,"mluke"),Emt.forEach(t),Jgo=r(S9e," \u2014 "),tN=n(S9e,"A",{href:!0});var Cmt=s(tN);Ygo=r(Cmt,"MLukeTokenizer"),Cmt.forEach(t),Kgo=r(S9e," (mLUKE model)"),S9e.forEach(t),Zgo=i(S),Es=n(S,"LI",{});var ES=s(Es);jie=n(ES,"STRONG",{});var wmt=s(jie);eho=r(wmt,"mobilebert"),wmt.forEach(t),oho=r(ES," \u2014 "),aN=n(ES,"A",{href:!0});var Amt=s(aN);rho=r(Amt,"MobileBertTokenizer"),Amt.forEach(t),tho=r(ES," or "),nN=n(ES,"A",{href:!0});var Lmt=s(nN);aho=r(Lmt,"MobileBertTokenizerFast"),Lmt.forEach(t),nho=r(ES," (MobileBERT model)"),ES.forEach(t),sho=i(S),Cs=n(S,"LI",{});var CS=s(Cs);Die=n(CS,"STRONG",{});var ymt=s(Die);lho=r(ymt,"mpnet"),ymt.forEach(t),iho=r(CS," \u2014 "),sN=n(CS,"A",{href:!0});var xmt=s(sN);dho=r(xmt,"MPNetTokenizer"),xmt.forEach(t),cho=r(CS," or "),lN=n(CS,"A",{href:!0});var $mt=s(lN);fho=r($mt,"MPNetTokenizerFast"),$mt.forEach(t),mho=r(CS," (MPNet model)"),CS.forEach(t),gho=i(S),ws=n(S,"LI",{});var wS=s(ws);Gie=n(wS,"STRONG",{});var kmt=s(Gie);hho=r(kmt,"mt5"),kmt.forEach(t),pho=r(wS," \u2014 "),iN=n(wS,"A",{href:!0});var Smt=s(iN);_ho=r(Smt,"MT5Tokenizer"),Smt.forEach(t),uho=r(wS," or "),dN=n(wS,"A",{href:!0});var Rmt=s(dN);bho=r(Rmt,"MT5TokenizerFast"),Rmt.forEach(t),vho=r(wS," (MT5 model)"),wS.forEach(t),Fho=i(S),As=n(S,"LI",{});var AS=s(As);Oie=n(AS,"STRONG",{});var Pmt=s(Oie);Tho=r(Pmt,"mvp"),Pmt.forEach(t),Mho=r(AS," \u2014 "),cN=n(AS,"A",{href:!0});var Bmt=s(cN);Eho=r(Bmt,"MvpTokenizer"),Bmt.forEach(t),Cho=r(AS," or "),fN=n(AS,"A",{href:!0});var Imt=s(fN);who=r(Imt,"MvpTokenizerFast"),Imt.forEach(t),Aho=r(AS," (MVP model)"),AS.forEach(t),Lho=i(S),Ls=n(S,"LI",{});var LS=s(Ls);Vie=n(LS,"STRONG",{});var Nmt=s(Vie);yho=r(Nmt,"nezha"),Nmt.forEach(t),xho=r(LS," \u2014 "),mN=n(LS,"A",{href:!0});var qmt=s(mN);$ho=r(qmt,"BertTokenizer"),qmt.forEach(t),kho=r(LS," or "),gN=n(LS,"A",{href:!0});var jmt=s(gN);Sho=r(jmt,"BertTokenizerFast"),jmt.forEach(t),Rho=r(LS," (Nezha model)"),LS.forEach(t),Pho=i(S),ys=n(S,"LI",{});var yS=s(ys);Xie=n(yS,"STRONG",{});var Dmt=s(Xie);Bho=r(Dmt,"nllb"),Dmt.forEach(t),Iho=r(yS," \u2014 "),hN=n(yS,"A",{href:!0});var Gmt=s(hN);Nho=r(Gmt,"NllbTokenizer"),Gmt.forEach(t),qho=r(yS," or "),pN=n(yS,"A",{href:!0});var Omt=s(pN);jho=r(Omt,"NllbTokenizerFast"),Omt.forEach(t),Dho=r(yS," (NLLB model)"),yS.forEach(t),Gho=i(S),xs=n(S,"LI",{});var xS=s(xs);zie=n(xS,"STRONG",{});var Vmt=s(zie);Oho=r(Vmt,"nystromformer"),Vmt.forEach(t),Vho=r(xS," \u2014 "),_N=n(xS,"A",{href:!0});var Xmt=s(_N);Xho=r(Xmt,"AlbertTokenizer"),Xmt.forEach(t),zho=r(xS," or "),uN=n(xS,"A",{href:!0});var zmt=s(uN);Who=r(zmt,"AlbertTokenizerFast"),zmt.forEach(t),Qho=r(xS," (Nystr\xF6mformer model)"),xS.forEach(t),Hho=i(S),$s=n(S,"LI",{});var $S=s($s);Wie=n($S,"STRONG",{});var Wmt=s(Wie);Uho=r(Wmt,"openai-gpt"),Wmt.forEach(t),Jho=r($S," \u2014 "),bN=n($S,"A",{href:!0});var Qmt=s(bN);Yho=r(Qmt,"OpenAIGPTTokenizer"),Qmt.forEach(t),Kho=r($S," or "),vN=n($S,"A",{href:!0});var Hmt=s(vN);Zho=r(Hmt,"OpenAIGPTTokenizerFast"),Hmt.forEach(t),epo=r($S," (OpenAI GPT model)"),$S.forEach(t),opo=i(S),Th=n(S,"LI",{});var R9e=s(Th);Qie=n(R9e,"STRONG",{});var Umt=s(Qie);rpo=r(Umt,"opt"),Umt.forEach(t),tpo=r(R9e," \u2014 "),FN=n(R9e,"A",{href:!0});var Jmt=s(FN);apo=r(Jmt,"GPT2Tokenizer"),Jmt.forEach(t),npo=r(R9e," (OPT model)"),R9e.forEach(t),spo=i(S),ks=n(S,"LI",{});var kS=s(ks);Hie=n(kS,"STRONG",{});var Ymt=s(Hie);lpo=r(Ymt,"owlvit"),Ymt.forEach(t),ipo=r(kS," \u2014 "),TN=n(kS,"A",{href:!0});var Kmt=s(TN);dpo=r(Kmt,"CLIPTokenizer"),Kmt.forEach(t),cpo=r(kS," or "),MN=n(kS,"A",{href:!0});var Zmt=s(MN);fpo=r(Zmt,"CLIPTokenizerFast"),Zmt.forEach(t),mpo=r(kS," (OWL-ViT model)"),kS.forEach(t),gpo=i(S),Ss=n(S,"LI",{});var SS=s(Ss);Uie=n(SS,"STRONG",{});var egt=s(Uie);hpo=r(egt,"pegasus"),egt.forEach(t),ppo=r(SS," \u2014 "),EN=n(SS,"A",{href:!0});var ogt=s(EN);_po=r(ogt,"PegasusTokenizer"),ogt.forEach(t),upo=r(SS," or "),CN=n(SS,"A",{href:!0});var rgt=s(CN);bpo=r(rgt,"PegasusTokenizerFast"),rgt.forEach(t),vpo=r(SS," (Pegasus model)"),SS.forEach(t),Fpo=i(S),Mh=n(S,"LI",{});var P9e=s(Mh);Jie=n(P9e,"STRONG",{});var tgt=s(Jie);Tpo=r(tgt,"perceiver"),tgt.forEach(t),Mpo=r(P9e," \u2014 "),wN=n(P9e,"A",{href:!0});var agt=s(wN);Epo=r(agt,"PerceiverTokenizer"),agt.forEach(t),Cpo=r(P9e," (Perceiver model)"),P9e.forEach(t),wpo=i(S),Eh=n(S,"LI",{});var B9e=s(Eh);Yie=n(B9e,"STRONG",{});var ngt=s(Yie);Apo=r(ngt,"phobert"),ngt.forEach(t),Lpo=r(B9e," \u2014 "),AN=n(B9e,"A",{href:!0});var sgt=s(AN);ypo=r(sgt,"PhobertTokenizer"),sgt.forEach(t),xpo=r(B9e," (PhoBERT model)"),B9e.forEach(t),$po=i(S),Ch=n(S,"LI",{});var I9e=s(Ch);Kie=n(I9e,"STRONG",{});var lgt=s(Kie);kpo=r(lgt,"plbart"),lgt.forEach(t),Spo=r(I9e," \u2014 "),LN=n(I9e,"A",{href:!0});var igt=s(LN);Rpo=r(igt,"PLBartTokenizer"),igt.forEach(t),Ppo=r(I9e," (PLBart model)"),I9e.forEach(t),Bpo=i(S),wh=n(S,"LI",{});var N9e=s(wh);Zie=n(N9e,"STRONG",{});var dgt=s(Zie);Ipo=r(dgt,"prophetnet"),dgt.forEach(t),Npo=r(N9e," \u2014 "),yN=n(N9e,"A",{href:!0});var cgt=s(yN);qpo=r(cgt,"ProphetNetTokenizer"),cgt.forEach(t),jpo=r(N9e," (ProphetNet model)"),N9e.forEach(t),Dpo=i(S),Rs=n(S,"LI",{});var RS=s(Rs);ede=n(RS,"STRONG",{});var fgt=s(ede);Gpo=r(fgt,"qdqbert"),fgt.forEach(t),Opo=r(RS," \u2014 "),xN=n(RS,"A",{href:!0});var mgt=s(xN);Vpo=r(mgt,"BertTokenizer"),mgt.forEach(t),Xpo=r(RS," or "),$N=n(RS,"A",{href:!0});var ggt=s($N);zpo=r(ggt,"BertTokenizerFast"),ggt.forEach(t),Wpo=r(RS," (QDQBert model)"),RS.forEach(t),Qpo=i(S),Ah=n(S,"LI",{});var q9e=s(Ah);ode=n(q9e,"STRONG",{});var hgt=s(ode);Hpo=r(hgt,"rag"),hgt.forEach(t),Upo=r(q9e," \u2014 "),kN=n(q9e,"A",{href:!0});var pgt=s(kN);Jpo=r(pgt,"RagTokenizer"),pgt.forEach(t),Ypo=r(q9e," (RAG model)"),q9e.forEach(t),Kpo=i(S),Ps=n(S,"LI",{});var PS=s(Ps);rde=n(PS,"STRONG",{});var _gt=s(rde);Zpo=r(_gt,"realm"),_gt.forEach(t),e_o=r(PS," \u2014 "),SN=n(PS,"A",{href:!0});var ugt=s(SN);o_o=r(ugt,"RealmTokenizer"),ugt.forEach(t),r_o=r(PS," or "),RN=n(PS,"A",{href:!0});var bgt=s(RN);t_o=r(bgt,"RealmTokenizerFast"),bgt.forEach(t),a_o=r(PS," (REALM model)"),PS.forEach(t),n_o=i(S),Bs=n(S,"LI",{});var BS=s(Bs);tde=n(BS,"STRONG",{});var vgt=s(tde);s_o=r(vgt,"reformer"),vgt.forEach(t),l_o=r(BS," \u2014 "),PN=n(BS,"A",{href:!0});var Fgt=s(PN);i_o=r(Fgt,"ReformerTokenizer"),Fgt.forEach(t),d_o=r(BS," or "),BN=n(BS,"A",{href:!0});var Tgt=s(BN);c_o=r(Tgt,"ReformerTokenizerFast"),Tgt.forEach(t),f_o=r(BS," (Reformer model)"),BS.forEach(t),m_o=i(S),Is=n(S,"LI",{});var IS=s(Is);ade=n(IS,"STRONG",{});var Mgt=s(ade);g_o=r(Mgt,"rembert"),Mgt.forEach(t),h_o=r(IS," \u2014 "),IN=n(IS,"A",{href:!0});var Egt=s(IN);p_o=r(Egt,"RemBertTokenizer"),Egt.forEach(t),__o=r(IS," or "),NN=n(IS,"A",{href:!0});var Cgt=s(NN);u_o=r(Cgt,"RemBertTokenizerFast"),Cgt.forEach(t),b_o=r(IS," (RemBERT model)"),IS.forEach(t),v_o=i(S),Ns=n(S,"LI",{});var NS=s(Ns);nde=n(NS,"STRONG",{});var wgt=s(nde);F_o=r(wgt,"retribert"),wgt.forEach(t),T_o=r(NS," \u2014 "),qN=n(NS,"A",{href:!0});var Agt=s(qN);M_o=r(Agt,"RetriBertTokenizer"),Agt.forEach(t),E_o=r(NS," or "),jN=n(NS,"A",{href:!0});var Lgt=s(jN);C_o=r(Lgt,"RetriBertTokenizerFast"),Lgt.forEach(t),w_o=r(NS," (RetriBERT model)"),NS.forEach(t),A_o=i(S),qs=n(S,"LI",{});var qS=s(qs);sde=n(qS,"STRONG",{});var ygt=s(sde);L_o=r(ygt,"roberta"),ygt.forEach(t),y_o=r(qS," \u2014 "),DN=n(qS,"A",{href:!0});var xgt=s(DN);x_o=r(xgt,"RobertaTokenizer"),xgt.forEach(t),$_o=r(qS," or "),GN=n(qS,"A",{href:!0});var $gt=s(GN);k_o=r($gt,"RobertaTokenizerFast"),$gt.forEach(t),S_o=r(qS," (RoBERTa model)"),qS.forEach(t),R_o=i(S),js=n(S,"LI",{});var jS=s(js);lde=n(jS,"STRONG",{});var kgt=s(lde);P_o=r(kgt,"roformer"),kgt.forEach(t),B_o=r(jS," \u2014 "),ON=n(jS,"A",{href:!0});var Sgt=s(ON);I_o=r(Sgt,"RoFormerTokenizer"),Sgt.forEach(t),N_o=r(jS," or "),VN=n(jS,"A",{href:!0});var Rgt=s(VN);q_o=r(Rgt,"RoFormerTokenizerFast"),Rgt.forEach(t),j_o=r(jS," (RoFormer model)"),jS.forEach(t),D_o=i(S),Lh=n(S,"LI",{});var j9e=s(Lh);ide=n(j9e,"STRONG",{});var Pgt=s(ide);G_o=r(Pgt,"speech_to_text"),Pgt.forEach(t),O_o=r(j9e," \u2014 "),XN=n(j9e,"A",{href:!0});var Bgt=s(XN);V_o=r(Bgt,"Speech2TextTokenizer"),Bgt.forEach(t),X_o=r(j9e," (Speech2Text model)"),j9e.forEach(t),z_o=i(S),yh=n(S,"LI",{});var D9e=s(yh);dde=n(D9e,"STRONG",{});var Igt=s(dde);W_o=r(Igt,"speech_to_text_2"),Igt.forEach(t),Q_o=r(D9e," \u2014 "),zN=n(D9e,"A",{href:!0});var Ngt=s(zN);H_o=r(Ngt,"Speech2Text2Tokenizer"),Ngt.forEach(t),U_o=r(D9e," (Speech2Text2 model)"),D9e.forEach(t),J_o=i(S),Ds=n(S,"LI",{});var DS=s(Ds);cde=n(DS,"STRONG",{});var qgt=s(cde);Y_o=r(qgt,"splinter"),qgt.forEach(t),K_o=r(DS," \u2014 "),WN=n(DS,"A",{href:!0});var jgt=s(WN);Z_o=r(jgt,"SplinterTokenizer"),jgt.forEach(t),euo=r(DS," or "),QN=n(DS,"A",{href:!0});var Dgt=s(QN);ouo=r(Dgt,"SplinterTokenizerFast"),Dgt.forEach(t),ruo=r(DS," (Splinter model)"),DS.forEach(t),tuo=i(S),Gs=n(S,"LI",{});var GS=s(Gs);fde=n(GS,"STRONG",{});var Ggt=s(fde);auo=r(Ggt,"squeezebert"),Ggt.forEach(t),nuo=r(GS," \u2014 "),HN=n(GS,"A",{href:!0});var Ogt=s(HN);suo=r(Ogt,"SqueezeBertTokenizer"),Ogt.forEach(t),luo=r(GS," or "),UN=n(GS,"A",{href:!0});var Vgt=s(UN);iuo=r(Vgt,"SqueezeBertTokenizerFast"),Vgt.forEach(t),duo=r(GS," (SqueezeBERT model)"),GS.forEach(t),cuo=i(S),Os=n(S,"LI",{});var OS=s(Os);mde=n(OS,"STRONG",{});var Xgt=s(mde);fuo=r(Xgt,"t5"),Xgt.forEach(t),muo=r(OS," \u2014 "),JN=n(OS,"A",{href:!0});var zgt=s(JN);guo=r(zgt,"T5Tokenizer"),zgt.forEach(t),huo=r(OS," or "),YN=n(OS,"A",{href:!0});var Wgt=s(YN);puo=r(Wgt,"T5TokenizerFast"),Wgt.forEach(t),_uo=r(OS," (T5 model)"),OS.forEach(t),uuo=i(S),xh=n(S,"LI",{});var G9e=s(xh);gde=n(G9e,"STRONG",{});var Qgt=s(gde);buo=r(Qgt,"tapas"),Qgt.forEach(t),vuo=r(G9e," \u2014 "),KN=n(G9e,"A",{href:!0});var Hgt=s(KN);Fuo=r(Hgt,"TapasTokenizer"),Hgt.forEach(t),Tuo=r(G9e," (TAPAS model)"),G9e.forEach(t),Muo=i(S),$h=n(S,"LI",{});var O9e=s($h);hde=n(O9e,"STRONG",{});var Ugt=s(hde);Euo=r(Ugt,"tapex"),Ugt.forEach(t),Cuo=r(O9e," \u2014 "),ZN=n(O9e,"A",{href:!0});var Jgt=s(ZN);wuo=r(Jgt,"TapexTokenizer"),Jgt.forEach(t),Auo=r(O9e," (TAPEX model)"),O9e.forEach(t),Luo=i(S),kh=n(S,"LI",{});var V9e=s(kh);pde=n(V9e,"STRONG",{});var Ygt=s(pde);yuo=r(Ygt,"transfo-xl"),Ygt.forEach(t),xuo=r(V9e," \u2014 "),eq=n(V9e,"A",{href:!0});var Kgt=s(eq);$uo=r(Kgt,"TransfoXLTokenizer"),Kgt.forEach(t),kuo=r(V9e," (Transformer-XL model)"),V9e.forEach(t),Suo=i(S),Vs=n(S,"LI",{});var VS=s(Vs);_de=n(VS,"STRONG",{});var Zgt=s(_de);Ruo=r(Zgt,"vilt"),Zgt.forEach(t),Puo=r(VS," \u2014 "),oq=n(VS,"A",{href:!0});var eht=s(oq);Buo=r(eht,"BertTokenizer"),eht.forEach(t),Iuo=r(VS," or "),rq=n(VS,"A",{href:!0});var oht=s(rq);Nuo=r(oht,"BertTokenizerFast"),oht.forEach(t),quo=r(VS," (ViLT model)"),VS.forEach(t),juo=i(S),Xs=n(S,"LI",{});var XS=s(Xs);ude=n(XS,"STRONG",{});var rht=s(ude);Duo=r(rht,"visual_bert"),rht.forEach(t),Guo=r(XS," \u2014 "),tq=n(XS,"A",{href:!0});var tht=s(tq);Ouo=r(tht,"BertTokenizer"),tht.forEach(t),Vuo=r(XS," or "),aq=n(XS,"A",{href:!0});var aht=s(aq);Xuo=r(aht,"BertTokenizerFast"),aht.forEach(t),zuo=r(XS," (VisualBERT model)"),XS.forEach(t),Wuo=i(S),Sh=n(S,"LI",{});var X9e=s(Sh);bde=n(X9e,"STRONG",{});var nht=s(bde);Quo=r(nht,"wav2vec2"),nht.forEach(t),Huo=r(X9e," \u2014 "),nq=n(X9e,"A",{href:!0});var sht=s(nq);Uuo=r(sht,"Wav2Vec2CTCTokenizer"),sht.forEach(t),Juo=r(X9e," (Wav2Vec2 model)"),X9e.forEach(t),Yuo=i(S),Rh=n(S,"LI",{});var z9e=s(Rh);vde=n(z9e,"STRONG",{});var lht=s(vde);Kuo=r(lht,"wav2vec2-conformer"),lht.forEach(t),Zuo=r(z9e," \u2014 "),sq=n(z9e,"A",{href:!0});var iht=s(sq);e2o=r(iht,"Wav2Vec2CTCTokenizer"),iht.forEach(t),o2o=r(z9e," (Wav2Vec2-Conformer model)"),z9e.forEach(t),r2o=i(S),Ph=n(S,"LI",{});var W9e=s(Ph);Fde=n(W9e,"STRONG",{});var dht=s(Fde);t2o=r(dht,"wav2vec2_phoneme"),dht.forEach(t),a2o=r(W9e," \u2014 "),lq=n(W9e,"A",{href:!0});var cht=s(lq);n2o=r(cht,"Wav2Vec2PhonemeCTCTokenizer"),cht.forEach(t),s2o=r(W9e," (Wav2Vec2Phoneme model)"),W9e.forEach(t),l2o=i(S),zs=n(S,"LI",{});var zS=s(zs);Tde=n(zS,"STRONG",{});var fht=s(Tde);i2o=r(fht,"xglm"),fht.forEach(t),d2o=r(zS," \u2014 "),iq=n(zS,"A",{href:!0});var mht=s(iq);c2o=r(mht,"XGLMTokenizer"),mht.forEach(t),f2o=r(zS," or "),dq=n(zS,"A",{href:!0});var ght=s(dq);m2o=r(ght,"XGLMTokenizerFast"),ght.forEach(t),g2o=r(zS," (XGLM model)"),zS.forEach(t),h2o=i(S),Bh=n(S,"LI",{});var Q9e=s(Bh);Mde=n(Q9e,"STRONG",{});var hht=s(Mde);p2o=r(hht,"xlm"),hht.forEach(t),_2o=r(Q9e," \u2014 "),cq=n(Q9e,"A",{href:!0});var pht=s(cq);u2o=r(pht,"XLMTokenizer"),pht.forEach(t),b2o=r(Q9e," (XLM model)"),Q9e.forEach(t),v2o=i(S),Ih=n(S,"LI",{});var H9e=s(Ih);Ede=n(H9e,"STRONG",{});var _ht=s(Ede);F2o=r(_ht,"xlm-prophetnet"),_ht.forEach(t),T2o=r(H9e," \u2014 "),fq=n(H9e,"A",{href:!0});var uht=s(fq);M2o=r(uht,"XLMProphetNetTokenizer"),uht.forEach(t),E2o=r(H9e," (XLM-ProphetNet model)"),H9e.forEach(t),C2o=i(S),Ws=n(S,"LI",{});var WS=s(Ws);Cde=n(WS,"STRONG",{});var bht=s(Cde);w2o=r(bht,"xlm-roberta"),bht.forEach(t),A2o=r(WS," \u2014 "),mq=n(WS,"A",{href:!0});var vht=s(mq);L2o=r(vht,"XLMRobertaTokenizer"),vht.forEach(t),y2o=r(WS," or "),gq=n(WS,"A",{href:!0});var Fht=s(gq);x2o=r(Fht,"XLMRobertaTokenizerFast"),Fht.forEach(t),$2o=r(WS," (XLM-RoBERTa model)"),WS.forEach(t),k2o=i(S),Qs=n(S,"LI",{});var QS=s(Qs);wde=n(QS,"STRONG",{});var Tht=s(wde);S2o=r(Tht,"xlm-roberta-xl"),Tht.forEach(t),R2o=r(QS," \u2014 "),hq=n(QS,"A",{href:!0});var Mht=s(hq);P2o=r(Mht,"RobertaTokenizer"),Mht.forEach(t),B2o=r(QS," or "),pq=n(QS,"A",{href:!0});var Eht=s(pq);I2o=r(Eht,"RobertaTokenizerFast"),Eht.forEach(t),N2o=r(QS," (XLM-RoBERTa-XL model)"),QS.forEach(t),q2o=i(S),Hs=n(S,"LI",{});var HS=s(Hs);Ade=n(HS,"STRONG",{});var Cht=s(Ade);j2o=r(Cht,"xlnet"),Cht.forEach(t),D2o=r(HS," \u2014 "),_q=n(HS,"A",{href:!0});var wht=s(_q);G2o=r(wht,"XLNetTokenizer"),wht.forEach(t),O2o=r(HS," or "),uq=n(HS,"A",{href:!0});var Aht=s(uq);V2o=r(Aht,"XLNetTokenizerFast"),Aht.forEach(t),X2o=r(HS," (XLNet model)"),HS.forEach(t),z2o=i(S),Us=n(S,"LI",{});var US=s(Us);Lde=n(US,"STRONG",{});var Lht=s(Lde);W2o=r(Lht,"yoso"),Lht.forEach(t),Q2o=r(US," \u2014 "),bq=n(US,"A",{href:!0});var yht=s(bq);H2o=r(yht,"AlbertTokenizer"),yht.forEach(t),U2o=r(US," or "),vq=n(US,"A",{href:!0});var xht=s(vq);J2o=r(xht,"AlbertTokenizerFast"),xht.forEach(t),Y2o=r(US," (YOSO model)"),US.forEach(t),S.forEach(t),K2o=i(rl),T(Nh.$$.fragment,rl),rl.forEach(t),Z2o=i(ol),qh=n(ol,"DIV",{class:!0});var EQe=s(qh);T(BL.$$.fragment,EQe),e1o=i(EQe),yde=n(EQe,"P",{});var $ht=s(yde);o1o=r($ht,"Register a new tokenizer in this mapping."),$ht.forEach(t),EQe.forEach(t),ol.forEach(t),Mze=i(f),Gi=n(f,"H2",{class:!0});var CQe=s(Gi);jh=n(CQe,"A",{id:!0,class:!0,href:!0});var kht=s(jh);xde=n(kht,"SPAN",{});var Sht=s(xde);T(IL.$$.fragment,Sht),Sht.forEach(t),kht.forEach(t),r1o=i(CQe),$de=n(CQe,"SPAN",{});var Rht=s($de);t1o=r(Rht,"AutoFeatureExtractor"),Rht.forEach(t),CQe.forEach(t),Eze=i(f),xo=n(f,"DIV",{class:!0});var tl=s(xo);T(NL.$$.fragment,tl),a1o=i(tl),qL=n(tl,"P",{});var wQe=s(qL);n1o=r(wQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Fq=n(wQe,"A",{href:!0});var Pht=s(Fq);s1o=r(Pht,"AutoFeatureExtractor.from_pretrained()"),Pht.forEach(t),l1o=r(wQe," class method."),wQe.forEach(t),i1o=i(tl),jL=n(tl,"P",{});var AQe=s(jL);d1o=r(AQe,"This class cannot be instantiated directly using "),kde=n(AQe,"CODE",{});var Bht=s(kde);c1o=r(Bht,"__init__()"),Bht.forEach(t),f1o=r(AQe," (throws an error)."),AQe.forEach(t),m1o=i(tl),Ue=n(tl,"DIV",{class:!0});var na=s(Ue);T(DL.$$.fragment,na),g1o=i(na),Sde=n(na,"P",{});var Iht=s(Sde);h1o=r(Iht,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Iht.forEach(t),p1o=i(na),Ba=n(na,"P",{});var CA=s(Ba);_1o=r(CA,"The feature extractor class to instantiate is selected based on the "),Rde=n(CA,"CODE",{});var Nht=s(Rde);u1o=r(Nht,"model_type"),Nht.forEach(t),b1o=r(CA,` property of the config object
(either passed as an argument or loaded from `),Pde=n(CA,"CODE",{});var qht=s(Pde);v1o=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),F1o=r(CA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bde=n(CA,"CODE",{});var jht=s(Bde);T1o=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),M1o=r(CA,":"),CA.forEach(t),E1o=i(na),U=n(na,"UL",{});var Y=s(U);Dh=n(Y,"LI",{});var U9e=s(Dh);Ide=n(U9e,"STRONG",{});var Dht=s(Ide);C1o=r(Dht,"beit"),Dht.forEach(t),w1o=r(U9e," \u2014 "),Tq=n(U9e,"A",{href:!0});var Ght=s(Tq);A1o=r(Ght,"BeitFeatureExtractor"),Ght.forEach(t),L1o=r(U9e," (BEiT model)"),U9e.forEach(t),y1o=i(Y),Gh=n(Y,"LI",{});var J9e=s(Gh);Nde=n(J9e,"STRONG",{});var Oht=s(Nde);x1o=r(Oht,"clip"),Oht.forEach(t),$1o=r(J9e," \u2014 "),Mq=n(J9e,"A",{href:!0});var Vht=s(Mq);k1o=r(Vht,"CLIPFeatureExtractor"),Vht.forEach(t),S1o=r(J9e," (CLIP model)"),J9e.forEach(t),R1o=i(Y),Oh=n(Y,"LI",{});var Y9e=s(Oh);qde=n(Y9e,"STRONG",{});var Xht=s(qde);P1o=r(Xht,"convnext"),Xht.forEach(t),B1o=r(Y9e," \u2014 "),Eq=n(Y9e,"A",{href:!0});var zht=s(Eq);I1o=r(zht,"ConvNextFeatureExtractor"),zht.forEach(t),N1o=r(Y9e," (ConvNeXT model)"),Y9e.forEach(t),q1o=i(Y),Vh=n(Y,"LI",{});var K9e=s(Vh);jde=n(K9e,"STRONG",{});var Wht=s(jde);j1o=r(Wht,"cvt"),Wht.forEach(t),D1o=r(K9e," \u2014 "),Cq=n(K9e,"A",{href:!0});var Qht=s(Cq);G1o=r(Qht,"ConvNextFeatureExtractor"),Qht.forEach(t),O1o=r(K9e," (CvT model)"),K9e.forEach(t),V1o=i(Y),Xh=n(Y,"LI",{});var Z9e=s(Xh);Dde=n(Z9e,"STRONG",{});var Hht=s(Dde);X1o=r(Hht,"data2vec-audio"),Hht.forEach(t),z1o=r(Z9e," \u2014 "),wq=n(Z9e,"A",{href:!0});var Uht=s(wq);W1o=r(Uht,"Wav2Vec2FeatureExtractor"),Uht.forEach(t),Q1o=r(Z9e," (Data2VecAudio model)"),Z9e.forEach(t),H1o=i(Y),zh=n(Y,"LI",{});var exe=s(zh);Gde=n(exe,"STRONG",{});var Jht=s(Gde);U1o=r(Jht,"data2vec-vision"),Jht.forEach(t),J1o=r(exe," \u2014 "),Aq=n(exe,"A",{href:!0});var Yht=s(Aq);Y1o=r(Yht,"BeitFeatureExtractor"),Yht.forEach(t),K1o=r(exe," (Data2VecVision model)"),exe.forEach(t),Z1o=i(Y),Wh=n(Y,"LI",{});var oxe=s(Wh);Ode=n(oxe,"STRONG",{});var Kht=s(Ode);ebo=r(Kht,"deit"),Kht.forEach(t),obo=r(oxe," \u2014 "),Lq=n(oxe,"A",{href:!0});var Zht=s(Lq);rbo=r(Zht,"DeiTFeatureExtractor"),Zht.forEach(t),tbo=r(oxe," (DeiT model)"),oxe.forEach(t),abo=i(Y),Qh=n(Y,"LI",{});var rxe=s(Qh);Vde=n(rxe,"STRONG",{});var ept=s(Vde);nbo=r(ept,"detr"),ept.forEach(t),sbo=r(rxe," \u2014 "),yq=n(rxe,"A",{href:!0});var opt=s(yq);lbo=r(opt,"DetrFeatureExtractor"),opt.forEach(t),ibo=r(rxe," (DETR model)"),rxe.forEach(t),dbo=i(Y),Hh=n(Y,"LI",{});var txe=s(Hh);Xde=n(txe,"STRONG",{});var rpt=s(Xde);cbo=r(rpt,"dpt"),rpt.forEach(t),fbo=r(txe," \u2014 "),xq=n(txe,"A",{href:!0});var tpt=s(xq);mbo=r(tpt,"DPTFeatureExtractor"),tpt.forEach(t),gbo=r(txe," (DPT model)"),txe.forEach(t),hbo=i(Y),Uh=n(Y,"LI",{});var axe=s(Uh);zde=n(axe,"STRONG",{});var apt=s(zde);pbo=r(apt,"flava"),apt.forEach(t),_bo=r(axe," \u2014 "),$q=n(axe,"A",{href:!0});var npt=s($q);ubo=r(npt,"FlavaFeatureExtractor"),npt.forEach(t),bbo=r(axe," (FLAVA model)"),axe.forEach(t),vbo=i(Y),Jh=n(Y,"LI",{});var nxe=s(Jh);Wde=n(nxe,"STRONG",{});var spt=s(Wde);Fbo=r(spt,"glpn"),spt.forEach(t),Tbo=r(nxe," \u2014 "),kq=n(nxe,"A",{href:!0});var lpt=s(kq);Mbo=r(lpt,"GLPNFeatureExtractor"),lpt.forEach(t),Ebo=r(nxe," (GLPN model)"),nxe.forEach(t),Cbo=i(Y),Yh=n(Y,"LI",{});var sxe=s(Yh);Qde=n(sxe,"STRONG",{});var ipt=s(Qde);wbo=r(ipt,"groupvit"),ipt.forEach(t),Abo=r(sxe," \u2014 "),Sq=n(sxe,"A",{href:!0});var dpt=s(Sq);Lbo=r(dpt,"CLIPFeatureExtractor"),dpt.forEach(t),ybo=r(sxe," (GroupViT model)"),sxe.forEach(t),xbo=i(Y),Kh=n(Y,"LI",{});var lxe=s(Kh);Hde=n(lxe,"STRONG",{});var cpt=s(Hde);$bo=r(cpt,"hubert"),cpt.forEach(t),kbo=r(lxe," \u2014 "),Rq=n(lxe,"A",{href:!0});var fpt=s(Rq);Sbo=r(fpt,"Wav2Vec2FeatureExtractor"),fpt.forEach(t),Rbo=r(lxe," (Hubert model)"),lxe.forEach(t),Pbo=i(Y),Zh=n(Y,"LI",{});var ixe=s(Zh);Ude=n(ixe,"STRONG",{});var mpt=s(Ude);Bbo=r(mpt,"imagegpt"),mpt.forEach(t),Ibo=r(ixe," \u2014 "),Pq=n(ixe,"A",{href:!0});var gpt=s(Pq);Nbo=r(gpt,"ImageGPTFeatureExtractor"),gpt.forEach(t),qbo=r(ixe," (ImageGPT model)"),ixe.forEach(t),jbo=i(Y),ep=n(Y,"LI",{});var dxe=s(ep);Jde=n(dxe,"STRONG",{});var hpt=s(Jde);Dbo=r(hpt,"layoutlmv2"),hpt.forEach(t),Gbo=r(dxe," \u2014 "),Bq=n(dxe,"A",{href:!0});var ppt=s(Bq);Obo=r(ppt,"LayoutLMv2FeatureExtractor"),ppt.forEach(t),Vbo=r(dxe," (LayoutLMv2 model)"),dxe.forEach(t),Xbo=i(Y),op=n(Y,"LI",{});var cxe=s(op);Yde=n(cxe,"STRONG",{});var _pt=s(Yde);zbo=r(_pt,"layoutlmv3"),_pt.forEach(t),Wbo=r(cxe," \u2014 "),Iq=n(cxe,"A",{href:!0});var upt=s(Iq);Qbo=r(upt,"LayoutLMv3FeatureExtractor"),upt.forEach(t),Hbo=r(cxe," (LayoutLMv3 model)"),cxe.forEach(t),Ubo=i(Y),rp=n(Y,"LI",{});var fxe=s(rp);Kde=n(fxe,"STRONG",{});var bpt=s(Kde);Jbo=r(bpt,"levit"),bpt.forEach(t),Ybo=r(fxe," \u2014 "),Nq=n(fxe,"A",{href:!0});var vpt=s(Nq);Kbo=r(vpt,"LevitFeatureExtractor"),vpt.forEach(t),Zbo=r(fxe," (LeViT model)"),fxe.forEach(t),evo=i(Y),tp=n(Y,"LI",{});var mxe=s(tp);Zde=n(mxe,"STRONG",{});var Fpt=s(Zde);ovo=r(Fpt,"maskformer"),Fpt.forEach(t),rvo=r(mxe," \u2014 "),qq=n(mxe,"A",{href:!0});var Tpt=s(qq);tvo=r(Tpt,"MaskFormerFeatureExtractor"),Tpt.forEach(t),avo=r(mxe," (MaskFormer model)"),mxe.forEach(t),nvo=i(Y),ap=n(Y,"LI",{});var gxe=s(ap);ece=n(gxe,"STRONG",{});var Mpt=s(ece);svo=r(Mpt,"mctct"),Mpt.forEach(t),lvo=r(gxe," \u2014 "),jq=n(gxe,"A",{href:!0});var Ept=s(jq);ivo=r(Ept,"MCTCTFeatureExtractor"),Ept.forEach(t),dvo=r(gxe," (M-CTC-T model)"),gxe.forEach(t),cvo=i(Y),np=n(Y,"LI",{});var hxe=s(np);oce=n(hxe,"STRONG",{});var Cpt=s(oce);fvo=r(Cpt,"mobilevit"),Cpt.forEach(t),mvo=r(hxe," \u2014 "),Dq=n(hxe,"A",{href:!0});var wpt=s(Dq);gvo=r(wpt,"MobileViTFeatureExtractor"),wpt.forEach(t),hvo=r(hxe," (MobileViT model)"),hxe.forEach(t),pvo=i(Y),sp=n(Y,"LI",{});var pxe=s(sp);rce=n(pxe,"STRONG",{});var Apt=s(rce);_vo=r(Apt,"owlvit"),Apt.forEach(t),uvo=r(pxe," \u2014 "),Gq=n(pxe,"A",{href:!0});var Lpt=s(Gq);bvo=r(Lpt,"OwlViTFeatureExtractor"),Lpt.forEach(t),vvo=r(pxe," (OWL-ViT model)"),pxe.forEach(t),Fvo=i(Y),lp=n(Y,"LI",{});var _xe=s(lp);tce=n(_xe,"STRONG",{});var ypt=s(tce);Tvo=r(ypt,"perceiver"),ypt.forEach(t),Mvo=r(_xe," \u2014 "),Oq=n(_xe,"A",{href:!0});var xpt=s(Oq);Evo=r(xpt,"PerceiverFeatureExtractor"),xpt.forEach(t),Cvo=r(_xe," (Perceiver model)"),_xe.forEach(t),wvo=i(Y),ip=n(Y,"LI",{});var uxe=s(ip);ace=n(uxe,"STRONG",{});var $pt=s(ace);Avo=r($pt,"poolformer"),$pt.forEach(t),Lvo=r(uxe," \u2014 "),Vq=n(uxe,"A",{href:!0});var kpt=s(Vq);yvo=r(kpt,"PoolFormerFeatureExtractor"),kpt.forEach(t),xvo=r(uxe," (PoolFormer model)"),uxe.forEach(t),$vo=i(Y),dp=n(Y,"LI",{});var bxe=s(dp);nce=n(bxe,"STRONG",{});var Spt=s(nce);kvo=r(Spt,"regnet"),Spt.forEach(t),Svo=r(bxe," \u2014 "),Xq=n(bxe,"A",{href:!0});var Rpt=s(Xq);Rvo=r(Rpt,"ConvNextFeatureExtractor"),Rpt.forEach(t),Pvo=r(bxe," (RegNet model)"),bxe.forEach(t),Bvo=i(Y),cp=n(Y,"LI",{});var vxe=s(cp);sce=n(vxe,"STRONG",{});var Ppt=s(sce);Ivo=r(Ppt,"resnet"),Ppt.forEach(t),Nvo=r(vxe," \u2014 "),zq=n(vxe,"A",{href:!0});var Bpt=s(zq);qvo=r(Bpt,"ConvNextFeatureExtractor"),Bpt.forEach(t),jvo=r(vxe," (ResNet model)"),vxe.forEach(t),Dvo=i(Y),fp=n(Y,"LI",{});var Fxe=s(fp);lce=n(Fxe,"STRONG",{});var Ipt=s(lce);Gvo=r(Ipt,"segformer"),Ipt.forEach(t),Ovo=r(Fxe," \u2014 "),Wq=n(Fxe,"A",{href:!0});var Npt=s(Wq);Vvo=r(Npt,"SegformerFeatureExtractor"),Npt.forEach(t),Xvo=r(Fxe," (SegFormer model)"),Fxe.forEach(t),zvo=i(Y),mp=n(Y,"LI",{});var Txe=s(mp);ice=n(Txe,"STRONG",{});var qpt=s(ice);Wvo=r(qpt,"speech_to_text"),qpt.forEach(t),Qvo=r(Txe," \u2014 "),Qq=n(Txe,"A",{href:!0});var jpt=s(Qq);Hvo=r(jpt,"Speech2TextFeatureExtractor"),jpt.forEach(t),Uvo=r(Txe," (Speech2Text model)"),Txe.forEach(t),Jvo=i(Y),gp=n(Y,"LI",{});var Mxe=s(gp);dce=n(Mxe,"STRONG",{});var Dpt=s(dce);Yvo=r(Dpt,"swin"),Dpt.forEach(t),Kvo=r(Mxe," \u2014 "),Hq=n(Mxe,"A",{href:!0});var Gpt=s(Hq);Zvo=r(Gpt,"ViTFeatureExtractor"),Gpt.forEach(t),e3o=r(Mxe," (Swin Transformer model)"),Mxe.forEach(t),o3o=i(Y),hp=n(Y,"LI",{});var Exe=s(hp);cce=n(Exe,"STRONG",{});var Opt=s(cce);r3o=r(Opt,"swinv2"),Opt.forEach(t),t3o=r(Exe," \u2014 "),Uq=n(Exe,"A",{href:!0});var Vpt=s(Uq);a3o=r(Vpt,"ViTFeatureExtractor"),Vpt.forEach(t),n3o=r(Exe," (Swin Transformer V2 model)"),Exe.forEach(t),s3o=i(Y),pp=n(Y,"LI",{});var Cxe=s(pp);fce=n(Cxe,"STRONG",{});var Xpt=s(fce);l3o=r(Xpt,"van"),Xpt.forEach(t),i3o=r(Cxe," \u2014 "),Jq=n(Cxe,"A",{href:!0});var zpt=s(Jq);d3o=r(zpt,"ConvNextFeatureExtractor"),zpt.forEach(t),c3o=r(Cxe," (VAN model)"),Cxe.forEach(t),f3o=i(Y),_p=n(Y,"LI",{});var wxe=s(_p);mce=n(wxe,"STRONG",{});var Wpt=s(mce);m3o=r(Wpt,"vilt"),Wpt.forEach(t),g3o=r(wxe," \u2014 "),Yq=n(wxe,"A",{href:!0});var Qpt=s(Yq);h3o=r(Qpt,"ViltFeatureExtractor"),Qpt.forEach(t),p3o=r(wxe," (ViLT model)"),wxe.forEach(t),_3o=i(Y),up=n(Y,"LI",{});var Axe=s(up);gce=n(Axe,"STRONG",{});var Hpt=s(gce);u3o=r(Hpt,"vit"),Hpt.forEach(t),b3o=r(Axe," \u2014 "),Kq=n(Axe,"A",{href:!0});var Upt=s(Kq);v3o=r(Upt,"ViTFeatureExtractor"),Upt.forEach(t),F3o=r(Axe," (ViT model)"),Axe.forEach(t),T3o=i(Y),bp=n(Y,"LI",{});var Lxe=s(bp);hce=n(Lxe,"STRONG",{});var Jpt=s(hce);M3o=r(Jpt,"vit_mae"),Jpt.forEach(t),E3o=r(Lxe," \u2014 "),Zq=n(Lxe,"A",{href:!0});var Ypt=s(Zq);C3o=r(Ypt,"ViTFeatureExtractor"),Ypt.forEach(t),w3o=r(Lxe," (ViTMAE model)"),Lxe.forEach(t),A3o=i(Y),vp=n(Y,"LI",{});var yxe=s(vp);pce=n(yxe,"STRONG",{});var Kpt=s(pce);L3o=r(Kpt,"wav2vec2"),Kpt.forEach(t),y3o=r(yxe," \u2014 "),ej=n(yxe,"A",{href:!0});var Zpt=s(ej);x3o=r(Zpt,"Wav2Vec2FeatureExtractor"),Zpt.forEach(t),$3o=r(yxe," (Wav2Vec2 model)"),yxe.forEach(t),k3o=i(Y),Fp=n(Y,"LI",{});var xxe=s(Fp);_ce=n(xxe,"STRONG",{});var e_t=s(_ce);S3o=r(e_t,"wav2vec2-conformer"),e_t.forEach(t),R3o=r(xxe," \u2014 "),oj=n(xxe,"A",{href:!0});var o_t=s(oj);P3o=r(o_t,"Wav2Vec2FeatureExtractor"),o_t.forEach(t),B3o=r(xxe," (Wav2Vec2-Conformer model)"),xxe.forEach(t),I3o=i(Y),Tp=n(Y,"LI",{});var $xe=s(Tp);uce=n($xe,"STRONG",{});var r_t=s(uce);N3o=r(r_t,"yolos"),r_t.forEach(t),q3o=r($xe," \u2014 "),rj=n($xe,"A",{href:!0});var t_t=s(rj);j3o=r(t_t,"YolosFeatureExtractor"),t_t.forEach(t),D3o=r($xe," (YOLOS model)"),$xe.forEach(t),Y.forEach(t),G3o=i(na),T(Mp.$$.fragment,na),O3o=i(na),T(Ep.$$.fragment,na),na.forEach(t),V3o=i(tl),Cp=n(tl,"DIV",{class:!0});var LQe=s(Cp);T(GL.$$.fragment,LQe),X3o=i(LQe),bce=n(LQe,"P",{});var a_t=s(bce);z3o=r(a_t,"Register a new feature extractor for this class."),a_t.forEach(t),LQe.forEach(t),tl.forEach(t),Cze=i(f),Oi=n(f,"H2",{class:!0});var yQe=s(Oi);wp=n(yQe,"A",{id:!0,class:!0,href:!0});var n_t=s(wp);vce=n(n_t,"SPAN",{});var s_t=s(vce);T(OL.$$.fragment,s_t),s_t.forEach(t),n_t.forEach(t),W3o=i(yQe),Fce=n(yQe,"SPAN",{});var l_t=s(Fce);Q3o=r(l_t,"AutoProcessor"),l_t.forEach(t),yQe.forEach(t),wze=i(f),$o=n(f,"DIV",{class:!0});var al=s($o);T(VL.$$.fragment,al),H3o=i(al),XL=n(al,"P",{});var xQe=s(XL);U3o=r(xQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tj=n(xQe,"A",{href:!0});var i_t=s(tj);J3o=r(i_t,"AutoProcessor.from_pretrained()"),i_t.forEach(t),Y3o=r(xQe," class method."),xQe.forEach(t),K3o=i(al),zL=n(al,"P",{});var $Qe=s(zL);Z3o=r($Qe,"This class cannot be instantiated directly using "),Tce=n($Qe,"CODE",{});var d_t=s(Tce);eFo=r(d_t,"__init__()"),d_t.forEach(t),oFo=r($Qe," (throws an error)."),$Qe.forEach(t),rFo=i(al),Je=n(al,"DIV",{class:!0});var sa=s(Je);T(WL.$$.fragment,sa),tFo=i(sa),Mce=n(sa,"P",{});var c_t=s(Mce);aFo=r(c_t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),c_t.forEach(t),nFo=i(sa),Vi=n(sa,"P",{});var _te=s(Vi);sFo=r(_te,"The processor class to instantiate is selected based on the "),Ece=n(_te,"CODE",{});var f_t=s(Ece);lFo=r(f_t,"model_type"),f_t.forEach(t),iFo=r(_te,` property of the config object (either
passed as an argument or loaded from `),Cce=n(_te,"CODE",{});var m_t=s(Cce);dFo=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),cFo=r(_te," if possible):"),_te.forEach(t),fFo=i(sa),fe=n(sa,"UL",{});var _e=s(fe);Ap=n(_e,"LI",{});var kxe=s(Ap);wce=n(kxe,"STRONG",{});var g_t=s(wce);mFo=r(g_t,"clip"),g_t.forEach(t),gFo=r(kxe," \u2014 "),aj=n(kxe,"A",{href:!0});var h_t=s(aj);hFo=r(h_t,"CLIPProcessor"),h_t.forEach(t),pFo=r(kxe," (CLIP model)"),kxe.forEach(t),_Fo=i(_e),Lp=n(_e,"LI",{});var Sxe=s(Lp);Ace=n(Sxe,"STRONG",{});var p_t=s(Ace);uFo=r(p_t,"flava"),p_t.forEach(t),bFo=r(Sxe," \u2014 "),nj=n(Sxe,"A",{href:!0});var __t=s(nj);vFo=r(__t,"FlavaProcessor"),__t.forEach(t),FFo=r(Sxe," (FLAVA model)"),Sxe.forEach(t),TFo=i(_e),yp=n(_e,"LI",{});var Rxe=s(yp);Lce=n(Rxe,"STRONG",{});var u_t=s(Lce);MFo=r(u_t,"groupvit"),u_t.forEach(t),EFo=r(Rxe," \u2014 "),sj=n(Rxe,"A",{href:!0});var b_t=s(sj);CFo=r(b_t,"CLIPProcessor"),b_t.forEach(t),wFo=r(Rxe," (GroupViT model)"),Rxe.forEach(t),AFo=i(_e),xp=n(_e,"LI",{});var Pxe=s(xp);yce=n(Pxe,"STRONG",{});var v_t=s(yce);LFo=r(v_t,"layoutlmv2"),v_t.forEach(t),yFo=r(Pxe," \u2014 "),lj=n(Pxe,"A",{href:!0});var F_t=s(lj);xFo=r(F_t,"LayoutLMv2Processor"),F_t.forEach(t),$Fo=r(Pxe," (LayoutLMv2 model)"),Pxe.forEach(t),kFo=i(_e),$p=n(_e,"LI",{});var Bxe=s($p);xce=n(Bxe,"STRONG",{});var T_t=s(xce);SFo=r(T_t,"layoutlmv3"),T_t.forEach(t),RFo=r(Bxe," \u2014 "),ij=n(Bxe,"A",{href:!0});var M_t=s(ij);PFo=r(M_t,"LayoutLMv3Processor"),M_t.forEach(t),BFo=r(Bxe," (LayoutLMv3 model)"),Bxe.forEach(t),IFo=i(_e),kp=n(_e,"LI",{});var Ixe=s(kp);$ce=n(Ixe,"STRONG",{});var E_t=s($ce);NFo=r(E_t,"layoutxlm"),E_t.forEach(t),qFo=r(Ixe," \u2014 "),dj=n(Ixe,"A",{href:!0});var C_t=s(dj);jFo=r(C_t,"LayoutXLMProcessor"),C_t.forEach(t),DFo=r(Ixe," (LayoutXLM model)"),Ixe.forEach(t),GFo=i(_e),Sp=n(_e,"LI",{});var Nxe=s(Sp);kce=n(Nxe,"STRONG",{});var w_t=s(kce);OFo=r(w_t,"owlvit"),w_t.forEach(t),VFo=r(Nxe," \u2014 "),cj=n(Nxe,"A",{href:!0});var A_t=s(cj);XFo=r(A_t,"OwlViTProcessor"),A_t.forEach(t),zFo=r(Nxe," (OWL-ViT model)"),Nxe.forEach(t),WFo=i(_e),Rp=n(_e,"LI",{});var qxe=s(Rp);Sce=n(qxe,"STRONG",{});var L_t=s(Sce);QFo=r(L_t,"sew"),L_t.forEach(t),HFo=r(qxe," \u2014 "),fj=n(qxe,"A",{href:!0});var y_t=s(fj);UFo=r(y_t,"Wav2Vec2Processor"),y_t.forEach(t),JFo=r(qxe," (SEW model)"),qxe.forEach(t),YFo=i(_e),Pp=n(_e,"LI",{});var jxe=s(Pp);Rce=n(jxe,"STRONG",{});var x_t=s(Rce);KFo=r(x_t,"sew-d"),x_t.forEach(t),ZFo=r(jxe," \u2014 "),mj=n(jxe,"A",{href:!0});var $_t=s(mj);e6o=r($_t,"Wav2Vec2Processor"),$_t.forEach(t),o6o=r(jxe," (SEW-D model)"),jxe.forEach(t),r6o=i(_e),Bp=n(_e,"LI",{});var Dxe=s(Bp);Pce=n(Dxe,"STRONG",{});var k_t=s(Pce);t6o=r(k_t,"speech_to_text"),k_t.forEach(t),a6o=r(Dxe," \u2014 "),gj=n(Dxe,"A",{href:!0});var S_t=s(gj);n6o=r(S_t,"Speech2TextProcessor"),S_t.forEach(t),s6o=r(Dxe," (Speech2Text model)"),Dxe.forEach(t),l6o=i(_e),Ip=n(_e,"LI",{});var Gxe=s(Ip);Bce=n(Gxe,"STRONG",{});var R_t=s(Bce);i6o=r(R_t,"speech_to_text_2"),R_t.forEach(t),d6o=r(Gxe," \u2014 "),hj=n(Gxe,"A",{href:!0});var P_t=s(hj);c6o=r(P_t,"Speech2Text2Processor"),P_t.forEach(t),f6o=r(Gxe," (Speech2Text2 model)"),Gxe.forEach(t),m6o=i(_e),Np=n(_e,"LI",{});var Oxe=s(Np);Ice=n(Oxe,"STRONG",{});var B_t=s(Ice);g6o=r(B_t,"trocr"),B_t.forEach(t),h6o=r(Oxe," \u2014 "),pj=n(Oxe,"A",{href:!0});var I_t=s(pj);p6o=r(I_t,"TrOCRProcessor"),I_t.forEach(t),_6o=r(Oxe," (TrOCR model)"),Oxe.forEach(t),u6o=i(_e),qp=n(_e,"LI",{});var Vxe=s(qp);Nce=n(Vxe,"STRONG",{});var N_t=s(Nce);b6o=r(N_t,"unispeech"),N_t.forEach(t),v6o=r(Vxe," \u2014 "),_j=n(Vxe,"A",{href:!0});var q_t=s(_j);F6o=r(q_t,"Wav2Vec2Processor"),q_t.forEach(t),T6o=r(Vxe," (UniSpeech model)"),Vxe.forEach(t),M6o=i(_e),jp=n(_e,"LI",{});var Xxe=s(jp);qce=n(Xxe,"STRONG",{});var j_t=s(qce);E6o=r(j_t,"unispeech-sat"),j_t.forEach(t),C6o=r(Xxe," \u2014 "),uj=n(Xxe,"A",{href:!0});var D_t=s(uj);w6o=r(D_t,"Wav2Vec2Processor"),D_t.forEach(t),A6o=r(Xxe," (UniSpeechSat model)"),Xxe.forEach(t),L6o=i(_e),Dp=n(_e,"LI",{});var zxe=s(Dp);jce=n(zxe,"STRONG",{});var G_t=s(jce);y6o=r(G_t,"vilt"),G_t.forEach(t),x6o=r(zxe," \u2014 "),bj=n(zxe,"A",{href:!0});var O_t=s(bj);$6o=r(O_t,"ViltProcessor"),O_t.forEach(t),k6o=r(zxe," (ViLT model)"),zxe.forEach(t),S6o=i(_e),Gp=n(_e,"LI",{});var Wxe=s(Gp);Dce=n(Wxe,"STRONG",{});var V_t=s(Dce);R6o=r(V_t,"vision-text-dual-encoder"),V_t.forEach(t),P6o=r(Wxe," \u2014 "),vj=n(Wxe,"A",{href:!0});var X_t=s(vj);B6o=r(X_t,"VisionTextDualEncoderProcessor"),X_t.forEach(t),I6o=r(Wxe," (VisionTextDualEncoder model)"),Wxe.forEach(t),N6o=i(_e),Op=n(_e,"LI",{});var Qxe=s(Op);Gce=n(Qxe,"STRONG",{});var z_t=s(Gce);q6o=r(z_t,"wav2vec2"),z_t.forEach(t),j6o=r(Qxe," \u2014 "),Fj=n(Qxe,"A",{href:!0});var W_t=s(Fj);D6o=r(W_t,"Wav2Vec2Processor"),W_t.forEach(t),G6o=r(Qxe," (Wav2Vec2 model)"),Qxe.forEach(t),O6o=i(_e),Vp=n(_e,"LI",{});var Hxe=s(Vp);Oce=n(Hxe,"STRONG",{});var Q_t=s(Oce);V6o=r(Q_t,"wav2vec2-conformer"),Q_t.forEach(t),X6o=r(Hxe," \u2014 "),Tj=n(Hxe,"A",{href:!0});var H_t=s(Tj);z6o=r(H_t,"Wav2Vec2Processor"),H_t.forEach(t),W6o=r(Hxe," (Wav2Vec2-Conformer model)"),Hxe.forEach(t),Q6o=i(_e),Xp=n(_e,"LI",{});var Uxe=s(Xp);Vce=n(Uxe,"STRONG",{});var U_t=s(Vce);H6o=r(U_t,"wavlm"),U_t.forEach(t),U6o=r(Uxe," \u2014 "),Mj=n(Uxe,"A",{href:!0});var J_t=s(Mj);J6o=r(J_t,"Wav2Vec2Processor"),J_t.forEach(t),Y6o=r(Uxe," (WavLM model)"),Uxe.forEach(t),_e.forEach(t),K6o=i(sa),T(zp.$$.fragment,sa),Z6o=i(sa),T(Wp.$$.fragment,sa),sa.forEach(t),eTo=i(al),Qp=n(al,"DIV",{class:!0});var kQe=s(Qp);T(QL.$$.fragment,kQe),oTo=i(kQe),Xce=n(kQe,"P",{});var Y_t=s(Xce);rTo=r(Y_t,"Register a new processor for this class."),Y_t.forEach(t),kQe.forEach(t),al.forEach(t),Aze=i(f),Xi=n(f,"H2",{class:!0});var SQe=s(Xi);Hp=n(SQe,"A",{id:!0,class:!0,href:!0});var K_t=s(Hp);zce=n(K_t,"SPAN",{});var Z_t=s(zce);T(HL.$$.fragment,Z_t),Z_t.forEach(t),K_t.forEach(t),tTo=i(SQe),Wce=n(SQe,"SPAN",{});var eut=s(Wce);aTo=r(eut,"AutoModel"),eut.forEach(t),SQe.forEach(t),Lze=i(f),ko=n(f,"DIV",{class:!0});var nl=s(ko);T(UL.$$.fragment,nl),nTo=i(nl),zi=n(nl,"P",{});var ute=s(zi);sTo=r(ute,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ej=n(ute,"A",{href:!0});var out=s(Ej);lTo=r(out,"from_pretrained()"),out.forEach(t),iTo=r(ute," class method or the "),Cj=n(ute,"A",{href:!0});var rut=s(Cj);dTo=r(rut,"from_config()"),rut.forEach(t),cTo=r(ute,` class
method.`),ute.forEach(t),fTo=i(nl),JL=n(nl,"P",{});var RQe=s(JL);mTo=r(RQe,"This class cannot be instantiated directly using "),Qce=n(RQe,"CODE",{});var tut=s(Qce);gTo=r(tut,"__init__()"),tut.forEach(t),hTo=r(RQe," (throws an error)."),RQe.forEach(t),pTo=i(nl),it=n(nl,"DIV",{class:!0});var wA=s(it);T(YL.$$.fragment,wA),_To=i(wA),Hce=n(wA,"P",{});var aut=s(Hce);uTo=r(aut,"Instantiates one of the base model classes of the library from a configuration."),aut.forEach(t),bTo=i(wA),Wi=n(wA,"P",{});var bte=s(Wi);vTo=r(bte,`Note:
Loading a model from its configuration file does `),Uce=n(bte,"STRONG",{});var nut=s(Uce);FTo=r(nut,"not"),nut.forEach(t),TTo=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wj=n(bte,"A",{href:!0});var sut=s(wj);MTo=r(sut,"from_pretrained()"),sut.forEach(t),ETo=r(bte," to load the model weights."),bte.forEach(t),CTo=i(wA),T(Up.$$.fragment,wA),wA.forEach(t),wTo=i(nl),Ye=n(nl,"DIV",{class:!0});var la=s(Ye);T(KL.$$.fragment,la),ATo=i(la),Jce=n(la,"P",{});var lut=s(Jce);LTo=r(lut,"Instantiate one of the base model classes of the library from a pretrained model."),lut.forEach(t),yTo=i(la),Ia=n(la,"P",{});var AA=s(Ia);xTo=r(AA,"The model class to instantiate is selected based on the "),Yce=n(AA,"CODE",{});var iut=s(Yce);$To=r(iut,"model_type"),iut.forEach(t),kTo=r(AA,` property of the config object (either
passed as an argument or loaded from `),Kce=n(AA,"CODE",{});var dut=s(Kce);STo=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),RTo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zce=n(AA,"CODE",{});var cut=s(Zce);PTo=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),BTo=r(AA,":"),AA.forEach(t),ITo=i(la),y=n(la,"UL",{});var x=s(y);Jp=n(x,"LI",{});var Jxe=s(Jp);efe=n(Jxe,"STRONG",{});var fut=s(efe);NTo=r(fut,"albert"),fut.forEach(t),qTo=r(Jxe," \u2014 "),Aj=n(Jxe,"A",{href:!0});var mut=s(Aj);jTo=r(mut,"AlbertModel"),mut.forEach(t),DTo=r(Jxe," (ALBERT model)"),Jxe.forEach(t),GTo=i(x),Yp=n(x,"LI",{});var Yxe=s(Yp);ofe=n(Yxe,"STRONG",{});var gut=s(ofe);OTo=r(gut,"bart"),gut.forEach(t),VTo=r(Yxe," \u2014 "),Lj=n(Yxe,"A",{href:!0});var hut=s(Lj);XTo=r(hut,"BartModel"),hut.forEach(t),zTo=r(Yxe," (BART model)"),Yxe.forEach(t),WTo=i(x),Kp=n(x,"LI",{});var Kxe=s(Kp);rfe=n(Kxe,"STRONG",{});var put=s(rfe);QTo=r(put,"beit"),put.forEach(t),HTo=r(Kxe," \u2014 "),yj=n(Kxe,"A",{href:!0});var _ut=s(yj);UTo=r(_ut,"BeitModel"),_ut.forEach(t),JTo=r(Kxe," (BEiT model)"),Kxe.forEach(t),YTo=i(x),Zp=n(x,"LI",{});var Zxe=s(Zp);tfe=n(Zxe,"STRONG",{});var uut=s(tfe);KTo=r(uut,"bert"),uut.forEach(t),ZTo=r(Zxe," \u2014 "),xj=n(Zxe,"A",{href:!0});var but=s(xj);e8o=r(but,"BertModel"),but.forEach(t),o8o=r(Zxe," (BERT model)"),Zxe.forEach(t),r8o=i(x),e_=n(x,"LI",{});var e$e=s(e_);afe=n(e$e,"STRONG",{});var vut=s(afe);t8o=r(vut,"bert-generation"),vut.forEach(t),a8o=r(e$e," \u2014 "),$j=n(e$e,"A",{href:!0});var Fut=s($j);n8o=r(Fut,"BertGenerationEncoder"),Fut.forEach(t),s8o=r(e$e," (Bert Generation model)"),e$e.forEach(t),l8o=i(x),o_=n(x,"LI",{});var o$e=s(o_);nfe=n(o$e,"STRONG",{});var Tut=s(nfe);i8o=r(Tut,"big_bird"),Tut.forEach(t),d8o=r(o$e," \u2014 "),kj=n(o$e,"A",{href:!0});var Mut=s(kj);c8o=r(Mut,"BigBirdModel"),Mut.forEach(t),f8o=r(o$e," (BigBird model)"),o$e.forEach(t),m8o=i(x),r_=n(x,"LI",{});var r$e=s(r_);sfe=n(r$e,"STRONG",{});var Eut=s(sfe);g8o=r(Eut,"bigbird_pegasus"),Eut.forEach(t),h8o=r(r$e," \u2014 "),Sj=n(r$e,"A",{href:!0});var Cut=s(Sj);p8o=r(Cut,"BigBirdPegasusModel"),Cut.forEach(t),_8o=r(r$e," (BigBird-Pegasus model)"),r$e.forEach(t),u8o=i(x),t_=n(x,"LI",{});var t$e=s(t_);lfe=n(t$e,"STRONG",{});var wut=s(lfe);b8o=r(wut,"blenderbot"),wut.forEach(t),v8o=r(t$e," \u2014 "),Rj=n(t$e,"A",{href:!0});var Aut=s(Rj);F8o=r(Aut,"BlenderbotModel"),Aut.forEach(t),T8o=r(t$e," (Blenderbot model)"),t$e.forEach(t),M8o=i(x),a_=n(x,"LI",{});var a$e=s(a_);ife=n(a$e,"STRONG",{});var Lut=s(ife);E8o=r(Lut,"blenderbot-small"),Lut.forEach(t),C8o=r(a$e," \u2014 "),Pj=n(a$e,"A",{href:!0});var yut=s(Pj);w8o=r(yut,"BlenderbotSmallModel"),yut.forEach(t),A8o=r(a$e," (BlenderbotSmall model)"),a$e.forEach(t),L8o=i(x),n_=n(x,"LI",{});var n$e=s(n_);dfe=n(n$e,"STRONG",{});var xut=s(dfe);y8o=r(xut,"bloom"),xut.forEach(t),x8o=r(n$e," \u2014 "),Bj=n(n$e,"A",{href:!0});var $ut=s(Bj);$8o=r($ut,"BloomModel"),$ut.forEach(t),k8o=r(n$e," (BLOOM model)"),n$e.forEach(t),S8o=i(x),s_=n(x,"LI",{});var s$e=s(s_);cfe=n(s$e,"STRONG",{});var kut=s(cfe);R8o=r(kut,"camembert"),kut.forEach(t),P8o=r(s$e," \u2014 "),Ij=n(s$e,"A",{href:!0});var Sut=s(Ij);B8o=r(Sut,"CamembertModel"),Sut.forEach(t),I8o=r(s$e," (CamemBERT model)"),s$e.forEach(t),N8o=i(x),l_=n(x,"LI",{});var l$e=s(l_);ffe=n(l$e,"STRONG",{});var Rut=s(ffe);q8o=r(Rut,"canine"),Rut.forEach(t),j8o=r(l$e," \u2014 "),Nj=n(l$e,"A",{href:!0});var Put=s(Nj);D8o=r(Put,"CanineModel"),Put.forEach(t),G8o=r(l$e," (CANINE model)"),l$e.forEach(t),O8o=i(x),i_=n(x,"LI",{});var i$e=s(i_);mfe=n(i$e,"STRONG",{});var But=s(mfe);V8o=r(But,"clip"),But.forEach(t),X8o=r(i$e," \u2014 "),qj=n(i$e,"A",{href:!0});var Iut=s(qj);z8o=r(Iut,"CLIPModel"),Iut.forEach(t),W8o=r(i$e," (CLIP model)"),i$e.forEach(t),Q8o=i(x),d_=n(x,"LI",{});var d$e=s(d_);gfe=n(d$e,"STRONG",{});var Nut=s(gfe);H8o=r(Nut,"codegen"),Nut.forEach(t),U8o=r(d$e," \u2014 "),jj=n(d$e,"A",{href:!0});var qut=s(jj);J8o=r(qut,"CodeGenModel"),qut.forEach(t),Y8o=r(d$e," (CodeGen model)"),d$e.forEach(t),K8o=i(x),c_=n(x,"LI",{});var c$e=s(c_);hfe=n(c$e,"STRONG",{});var jut=s(hfe);Z8o=r(jut,"convbert"),jut.forEach(t),eMo=r(c$e," \u2014 "),Dj=n(c$e,"A",{href:!0});var Dut=s(Dj);oMo=r(Dut,"ConvBertModel"),Dut.forEach(t),rMo=r(c$e," (ConvBERT model)"),c$e.forEach(t),tMo=i(x),f_=n(x,"LI",{});var f$e=s(f_);pfe=n(f$e,"STRONG",{});var Gut=s(pfe);aMo=r(Gut,"convnext"),Gut.forEach(t),nMo=r(f$e," \u2014 "),Gj=n(f$e,"A",{href:!0});var Out=s(Gj);sMo=r(Out,"ConvNextModel"),Out.forEach(t),lMo=r(f$e," (ConvNeXT model)"),f$e.forEach(t),iMo=i(x),m_=n(x,"LI",{});var m$e=s(m_);_fe=n(m$e,"STRONG",{});var Vut=s(_fe);dMo=r(Vut,"ctrl"),Vut.forEach(t),cMo=r(m$e," \u2014 "),Oj=n(m$e,"A",{href:!0});var Xut=s(Oj);fMo=r(Xut,"CTRLModel"),Xut.forEach(t),mMo=r(m$e," (CTRL model)"),m$e.forEach(t),gMo=i(x),g_=n(x,"LI",{});var g$e=s(g_);ufe=n(g$e,"STRONG",{});var zut=s(ufe);hMo=r(zut,"cvt"),zut.forEach(t),pMo=r(g$e," \u2014 "),Vj=n(g$e,"A",{href:!0});var Wut=s(Vj);_Mo=r(Wut,"CvtModel"),Wut.forEach(t),uMo=r(g$e," (CvT model)"),g$e.forEach(t),bMo=i(x),h_=n(x,"LI",{});var h$e=s(h_);bfe=n(h$e,"STRONG",{});var Qut=s(bfe);vMo=r(Qut,"data2vec-audio"),Qut.forEach(t),FMo=r(h$e," \u2014 "),Xj=n(h$e,"A",{href:!0});var Hut=s(Xj);TMo=r(Hut,"Data2VecAudioModel"),Hut.forEach(t),MMo=r(h$e," (Data2VecAudio model)"),h$e.forEach(t),EMo=i(x),p_=n(x,"LI",{});var p$e=s(p_);vfe=n(p$e,"STRONG",{});var Uut=s(vfe);CMo=r(Uut,"data2vec-text"),Uut.forEach(t),wMo=r(p$e," \u2014 "),zj=n(p$e,"A",{href:!0});var Jut=s(zj);AMo=r(Jut,"Data2VecTextModel"),Jut.forEach(t),LMo=r(p$e," (Data2VecText model)"),p$e.forEach(t),yMo=i(x),__=n(x,"LI",{});var _$e=s(__);Ffe=n(_$e,"STRONG",{});var Yut=s(Ffe);xMo=r(Yut,"data2vec-vision"),Yut.forEach(t),$Mo=r(_$e," \u2014 "),Wj=n(_$e,"A",{href:!0});var Kut=s(Wj);kMo=r(Kut,"Data2VecVisionModel"),Kut.forEach(t),SMo=r(_$e," (Data2VecVision model)"),_$e.forEach(t),RMo=i(x),u_=n(x,"LI",{});var u$e=s(u_);Tfe=n(u$e,"STRONG",{});var Zut=s(Tfe);PMo=r(Zut,"deberta"),Zut.forEach(t),BMo=r(u$e," \u2014 "),Qj=n(u$e,"A",{href:!0});var e2t=s(Qj);IMo=r(e2t,"DebertaModel"),e2t.forEach(t),NMo=r(u$e," (DeBERTa model)"),u$e.forEach(t),qMo=i(x),b_=n(x,"LI",{});var b$e=s(b_);Mfe=n(b$e,"STRONG",{});var o2t=s(Mfe);jMo=r(o2t,"deberta-v2"),o2t.forEach(t),DMo=r(b$e," \u2014 "),Hj=n(b$e,"A",{href:!0});var r2t=s(Hj);GMo=r(r2t,"DebertaV2Model"),r2t.forEach(t),OMo=r(b$e," (DeBERTa-v2 model)"),b$e.forEach(t),VMo=i(x),v_=n(x,"LI",{});var v$e=s(v_);Efe=n(v$e,"STRONG",{});var t2t=s(Efe);XMo=r(t2t,"decision_transformer"),t2t.forEach(t),zMo=r(v$e," \u2014 "),Uj=n(v$e,"A",{href:!0});var a2t=s(Uj);WMo=r(a2t,"DecisionTransformerModel"),a2t.forEach(t),QMo=r(v$e," (Decision Transformer model)"),v$e.forEach(t),HMo=i(x),F_=n(x,"LI",{});var F$e=s(F_);Cfe=n(F$e,"STRONG",{});var n2t=s(Cfe);UMo=r(n2t,"deit"),n2t.forEach(t),JMo=r(F$e," \u2014 "),Jj=n(F$e,"A",{href:!0});var s2t=s(Jj);YMo=r(s2t,"DeiTModel"),s2t.forEach(t),KMo=r(F$e," (DeiT model)"),F$e.forEach(t),ZMo=i(x),T_=n(x,"LI",{});var T$e=s(T_);wfe=n(T$e,"STRONG",{});var l2t=s(wfe);e4o=r(l2t,"detr"),l2t.forEach(t),o4o=r(T$e," \u2014 "),Yj=n(T$e,"A",{href:!0});var i2t=s(Yj);r4o=r(i2t,"DetrModel"),i2t.forEach(t),t4o=r(T$e," (DETR model)"),T$e.forEach(t),a4o=i(x),M_=n(x,"LI",{});var M$e=s(M_);Afe=n(M$e,"STRONG",{});var d2t=s(Afe);n4o=r(d2t,"distilbert"),d2t.forEach(t),s4o=r(M$e," \u2014 "),Kj=n(M$e,"A",{href:!0});var c2t=s(Kj);l4o=r(c2t,"DistilBertModel"),c2t.forEach(t),i4o=r(M$e," (DistilBERT model)"),M$e.forEach(t),d4o=i(x),E_=n(x,"LI",{});var E$e=s(E_);Lfe=n(E$e,"STRONG",{});var f2t=s(Lfe);c4o=r(f2t,"dpr"),f2t.forEach(t),f4o=r(E$e," \u2014 "),Zj=n(E$e,"A",{href:!0});var m2t=s(Zj);m4o=r(m2t,"DPRQuestionEncoder"),m2t.forEach(t),g4o=r(E$e," (DPR model)"),E$e.forEach(t),h4o=i(x),C_=n(x,"LI",{});var C$e=s(C_);yfe=n(C$e,"STRONG",{});var g2t=s(yfe);p4o=r(g2t,"dpt"),g2t.forEach(t),_4o=r(C$e," \u2014 "),eD=n(C$e,"A",{href:!0});var h2t=s(eD);u4o=r(h2t,"DPTModel"),h2t.forEach(t),b4o=r(C$e," (DPT model)"),C$e.forEach(t),v4o=i(x),w_=n(x,"LI",{});var w$e=s(w_);xfe=n(w$e,"STRONG",{});var p2t=s(xfe);F4o=r(p2t,"electra"),p2t.forEach(t),T4o=r(w$e," \u2014 "),oD=n(w$e,"A",{href:!0});var _2t=s(oD);M4o=r(_2t,"ElectraModel"),_2t.forEach(t),E4o=r(w$e," (ELECTRA model)"),w$e.forEach(t),C4o=i(x),A_=n(x,"LI",{});var A$e=s(A_);$fe=n(A$e,"STRONG",{});var u2t=s($fe);w4o=r(u2t,"flaubert"),u2t.forEach(t),A4o=r(A$e," \u2014 "),rD=n(A$e,"A",{href:!0});var b2t=s(rD);L4o=r(b2t,"FlaubertModel"),b2t.forEach(t),y4o=r(A$e," (FlauBERT model)"),A$e.forEach(t),x4o=i(x),L_=n(x,"LI",{});var L$e=s(L_);kfe=n(L$e,"STRONG",{});var v2t=s(kfe);$4o=r(v2t,"flava"),v2t.forEach(t),k4o=r(L$e," \u2014 "),tD=n(L$e,"A",{href:!0});var F2t=s(tD);S4o=r(F2t,"FlavaModel"),F2t.forEach(t),R4o=r(L$e," (FLAVA model)"),L$e.forEach(t),P4o=i(x),y_=n(x,"LI",{});var y$e=s(y_);Sfe=n(y$e,"STRONG",{});var T2t=s(Sfe);B4o=r(T2t,"fnet"),T2t.forEach(t),I4o=r(y$e," \u2014 "),aD=n(y$e,"A",{href:!0});var M2t=s(aD);N4o=r(M2t,"FNetModel"),M2t.forEach(t),q4o=r(y$e," (FNet model)"),y$e.forEach(t),j4o=i(x),x_=n(x,"LI",{});var x$e=s(x_);Rfe=n(x$e,"STRONG",{});var E2t=s(Rfe);D4o=r(E2t,"fsmt"),E2t.forEach(t),G4o=r(x$e," \u2014 "),nD=n(x$e,"A",{href:!0});var C2t=s(nD);O4o=r(C2t,"FSMTModel"),C2t.forEach(t),V4o=r(x$e," (FairSeq Machine-Translation model)"),x$e.forEach(t),X4o=i(x),Js=n(x,"LI",{});var JS=s(Js);Pfe=n(JS,"STRONG",{});var w2t=s(Pfe);z4o=r(w2t,"funnel"),w2t.forEach(t),W4o=r(JS," \u2014 "),sD=n(JS,"A",{href:!0});var A2t=s(sD);Q4o=r(A2t,"FunnelModel"),A2t.forEach(t),H4o=r(JS," or "),lD=n(JS,"A",{href:!0});var L2t=s(lD);U4o=r(L2t,"FunnelBaseModel"),L2t.forEach(t),J4o=r(JS," (Funnel Transformer model)"),JS.forEach(t),Y4o=i(x),$_=n(x,"LI",{});var $$e=s($_);Bfe=n($$e,"STRONG",{});var y2t=s(Bfe);K4o=r(y2t,"glpn"),y2t.forEach(t),Z4o=r($$e," \u2014 "),iD=n($$e,"A",{href:!0});var x2t=s(iD);eEo=r(x2t,"GLPNModel"),x2t.forEach(t),oEo=r($$e," (GLPN model)"),$$e.forEach(t),rEo=i(x),k_=n(x,"LI",{});var k$e=s(k_);Ife=n(k$e,"STRONG",{});var $2t=s(Ife);tEo=r($2t,"gpt2"),$2t.forEach(t),aEo=r(k$e," \u2014 "),dD=n(k$e,"A",{href:!0});var k2t=s(dD);nEo=r(k2t,"GPT2Model"),k2t.forEach(t),sEo=r(k$e," (OpenAI GPT-2 model)"),k$e.forEach(t),lEo=i(x),S_=n(x,"LI",{});var S$e=s(S_);Nfe=n(S$e,"STRONG",{});var S2t=s(Nfe);iEo=r(S2t,"gpt_neo"),S2t.forEach(t),dEo=r(S$e," \u2014 "),cD=n(S$e,"A",{href:!0});var R2t=s(cD);cEo=r(R2t,"GPTNeoModel"),R2t.forEach(t),fEo=r(S$e," (GPT Neo model)"),S$e.forEach(t),mEo=i(x),R_=n(x,"LI",{});var R$e=s(R_);qfe=n(R$e,"STRONG",{});var P2t=s(qfe);gEo=r(P2t,"gpt_neox"),P2t.forEach(t),hEo=r(R$e," \u2014 "),fD=n(R$e,"A",{href:!0});var B2t=s(fD);pEo=r(B2t,"GPTNeoXModel"),B2t.forEach(t),_Eo=r(R$e," (GPT NeoX model)"),R$e.forEach(t),uEo=i(x),P_=n(x,"LI",{});var P$e=s(P_);jfe=n(P$e,"STRONG",{});var I2t=s(jfe);bEo=r(I2t,"gptj"),I2t.forEach(t),vEo=r(P$e," \u2014 "),mD=n(P$e,"A",{href:!0});var N2t=s(mD);FEo=r(N2t,"GPTJModel"),N2t.forEach(t),TEo=r(P$e," (GPT-J model)"),P$e.forEach(t),MEo=i(x),B_=n(x,"LI",{});var B$e=s(B_);Dfe=n(B$e,"STRONG",{});var q2t=s(Dfe);EEo=r(q2t,"groupvit"),q2t.forEach(t),CEo=r(B$e," \u2014 "),gD=n(B$e,"A",{href:!0});var j2t=s(gD);wEo=r(j2t,"GroupViTModel"),j2t.forEach(t),AEo=r(B$e," (GroupViT model)"),B$e.forEach(t),LEo=i(x),I_=n(x,"LI",{});var I$e=s(I_);Gfe=n(I$e,"STRONG",{});var D2t=s(Gfe);yEo=r(D2t,"hubert"),D2t.forEach(t),xEo=r(I$e," \u2014 "),hD=n(I$e,"A",{href:!0});var G2t=s(hD);$Eo=r(G2t,"HubertModel"),G2t.forEach(t),kEo=r(I$e," (Hubert model)"),I$e.forEach(t),SEo=i(x),N_=n(x,"LI",{});var N$e=s(N_);Ofe=n(N$e,"STRONG",{});var O2t=s(Ofe);REo=r(O2t,"ibert"),O2t.forEach(t),PEo=r(N$e," \u2014 "),pD=n(N$e,"A",{href:!0});var V2t=s(pD);BEo=r(V2t,"IBertModel"),V2t.forEach(t),IEo=r(N$e," (I-BERT model)"),N$e.forEach(t),NEo=i(x),q_=n(x,"LI",{});var q$e=s(q_);Vfe=n(q$e,"STRONG",{});var X2t=s(Vfe);qEo=r(X2t,"imagegpt"),X2t.forEach(t),jEo=r(q$e," \u2014 "),_D=n(q$e,"A",{href:!0});var z2t=s(_D);DEo=r(z2t,"ImageGPTModel"),z2t.forEach(t),GEo=r(q$e," (ImageGPT model)"),q$e.forEach(t),OEo=i(x),j_=n(x,"LI",{});var j$e=s(j_);Xfe=n(j$e,"STRONG",{});var W2t=s(Xfe);VEo=r(W2t,"layoutlm"),W2t.forEach(t),XEo=r(j$e," \u2014 "),uD=n(j$e,"A",{href:!0});var Q2t=s(uD);zEo=r(Q2t,"LayoutLMModel"),Q2t.forEach(t),WEo=r(j$e," (LayoutLM model)"),j$e.forEach(t),QEo=i(x),D_=n(x,"LI",{});var D$e=s(D_);zfe=n(D$e,"STRONG",{});var H2t=s(zfe);HEo=r(H2t,"layoutlmv2"),H2t.forEach(t),UEo=r(D$e," \u2014 "),bD=n(D$e,"A",{href:!0});var U2t=s(bD);JEo=r(U2t,"LayoutLMv2Model"),U2t.forEach(t),YEo=r(D$e," (LayoutLMv2 model)"),D$e.forEach(t),KEo=i(x),G_=n(x,"LI",{});var G$e=s(G_);Wfe=n(G$e,"STRONG",{});var J2t=s(Wfe);ZEo=r(J2t,"layoutlmv3"),J2t.forEach(t),eCo=r(G$e," \u2014 "),vD=n(G$e,"A",{href:!0});var Y2t=s(vD);oCo=r(Y2t,"LayoutLMv3Model"),Y2t.forEach(t),rCo=r(G$e," (LayoutLMv3 model)"),G$e.forEach(t),tCo=i(x),O_=n(x,"LI",{});var O$e=s(O_);Qfe=n(O$e,"STRONG",{});var K2t=s(Qfe);aCo=r(K2t,"led"),K2t.forEach(t),nCo=r(O$e," \u2014 "),FD=n(O$e,"A",{href:!0});var Z2t=s(FD);sCo=r(Z2t,"LEDModel"),Z2t.forEach(t),lCo=r(O$e," (LED model)"),O$e.forEach(t),iCo=i(x),V_=n(x,"LI",{});var V$e=s(V_);Hfe=n(V$e,"STRONG",{});var e1t=s(Hfe);dCo=r(e1t,"levit"),e1t.forEach(t),cCo=r(V$e," \u2014 "),TD=n(V$e,"A",{href:!0});var o1t=s(TD);fCo=r(o1t,"LevitModel"),o1t.forEach(t),mCo=r(V$e," (LeViT model)"),V$e.forEach(t),gCo=i(x),X_=n(x,"LI",{});var X$e=s(X_);Ufe=n(X$e,"STRONG",{});var r1t=s(Ufe);hCo=r(r1t,"longformer"),r1t.forEach(t),pCo=r(X$e," \u2014 "),MD=n(X$e,"A",{href:!0});var t1t=s(MD);_Co=r(t1t,"LongformerModel"),t1t.forEach(t),uCo=r(X$e," (Longformer model)"),X$e.forEach(t),bCo=i(x),z_=n(x,"LI",{});var z$e=s(z_);Jfe=n(z$e,"STRONG",{});var a1t=s(Jfe);vCo=r(a1t,"longt5"),a1t.forEach(t),FCo=r(z$e," \u2014 "),ED=n(z$e,"A",{href:!0});var n1t=s(ED);TCo=r(n1t,"LongT5Model"),n1t.forEach(t),MCo=r(z$e," (LongT5 model)"),z$e.forEach(t),ECo=i(x),W_=n(x,"LI",{});var W$e=s(W_);Yfe=n(W$e,"STRONG",{});var s1t=s(Yfe);CCo=r(s1t,"luke"),s1t.forEach(t),wCo=r(W$e," \u2014 "),CD=n(W$e,"A",{href:!0});var l1t=s(CD);ACo=r(l1t,"LukeModel"),l1t.forEach(t),LCo=r(W$e," (LUKE model)"),W$e.forEach(t),yCo=i(x),Q_=n(x,"LI",{});var Q$e=s(Q_);Kfe=n(Q$e,"STRONG",{});var i1t=s(Kfe);xCo=r(i1t,"lxmert"),i1t.forEach(t),$Co=r(Q$e," \u2014 "),wD=n(Q$e,"A",{href:!0});var d1t=s(wD);kCo=r(d1t,"LxmertModel"),d1t.forEach(t),SCo=r(Q$e," (LXMERT model)"),Q$e.forEach(t),RCo=i(x),H_=n(x,"LI",{});var H$e=s(H_);Zfe=n(H$e,"STRONG",{});var c1t=s(Zfe);PCo=r(c1t,"m2m_100"),c1t.forEach(t),BCo=r(H$e," \u2014 "),AD=n(H$e,"A",{href:!0});var f1t=s(AD);ICo=r(f1t,"M2M100Model"),f1t.forEach(t),NCo=r(H$e," (M2M100 model)"),H$e.forEach(t),qCo=i(x),U_=n(x,"LI",{});var U$e=s(U_);eme=n(U$e,"STRONG",{});var m1t=s(eme);jCo=r(m1t,"marian"),m1t.forEach(t),DCo=r(U$e," \u2014 "),LD=n(U$e,"A",{href:!0});var g1t=s(LD);GCo=r(g1t,"MarianModel"),g1t.forEach(t),OCo=r(U$e," (Marian model)"),U$e.forEach(t),VCo=i(x),J_=n(x,"LI",{});var J$e=s(J_);ome=n(J$e,"STRONG",{});var h1t=s(ome);XCo=r(h1t,"maskformer"),h1t.forEach(t),zCo=r(J$e," \u2014 "),yD=n(J$e,"A",{href:!0});var p1t=s(yD);WCo=r(p1t,"MaskFormerModel"),p1t.forEach(t),QCo=r(J$e," (MaskFormer model)"),J$e.forEach(t),HCo=i(x),Y_=n(x,"LI",{});var Y$e=s(Y_);rme=n(Y$e,"STRONG",{});var _1t=s(rme);UCo=r(_1t,"mbart"),_1t.forEach(t),JCo=r(Y$e," \u2014 "),xD=n(Y$e,"A",{href:!0});var u1t=s(xD);YCo=r(u1t,"MBartModel"),u1t.forEach(t),KCo=r(Y$e," (mBART model)"),Y$e.forEach(t),ZCo=i(x),K_=n(x,"LI",{});var K$e=s(K_);tme=n(K$e,"STRONG",{});var b1t=s(tme);e5o=r(b1t,"mctct"),b1t.forEach(t),o5o=r(K$e," \u2014 "),$D=n(K$e,"A",{href:!0});var v1t=s($D);r5o=r(v1t,"MCTCTModel"),v1t.forEach(t),t5o=r(K$e," (M-CTC-T model)"),K$e.forEach(t),a5o=i(x),Z_=n(x,"LI",{});var Z$e=s(Z_);ame=n(Z$e,"STRONG",{});var F1t=s(ame);n5o=r(F1t,"megatron-bert"),F1t.forEach(t),s5o=r(Z$e," \u2014 "),kD=n(Z$e,"A",{href:!0});var T1t=s(kD);l5o=r(T1t,"MegatronBertModel"),T1t.forEach(t),i5o=r(Z$e," (Megatron-BERT model)"),Z$e.forEach(t),d5o=i(x),eu=n(x,"LI",{});var eke=s(eu);nme=n(eke,"STRONG",{});var M1t=s(nme);c5o=r(M1t,"mobilebert"),M1t.forEach(t),f5o=r(eke," \u2014 "),SD=n(eke,"A",{href:!0});var E1t=s(SD);m5o=r(E1t,"MobileBertModel"),E1t.forEach(t),g5o=r(eke," (MobileBERT model)"),eke.forEach(t),h5o=i(x),ou=n(x,"LI",{});var oke=s(ou);sme=n(oke,"STRONG",{});var C1t=s(sme);p5o=r(C1t,"mobilevit"),C1t.forEach(t),_5o=r(oke," \u2014 "),RD=n(oke,"A",{href:!0});var w1t=s(RD);u5o=r(w1t,"MobileViTModel"),w1t.forEach(t),b5o=r(oke," (MobileViT model)"),oke.forEach(t),v5o=i(x),ru=n(x,"LI",{});var rke=s(ru);lme=n(rke,"STRONG",{});var A1t=s(lme);F5o=r(A1t,"mpnet"),A1t.forEach(t),T5o=r(rke," \u2014 "),PD=n(rke,"A",{href:!0});var L1t=s(PD);M5o=r(L1t,"MPNetModel"),L1t.forEach(t),E5o=r(rke," (MPNet model)"),rke.forEach(t),C5o=i(x),tu=n(x,"LI",{});var tke=s(tu);ime=n(tke,"STRONG",{});var y1t=s(ime);w5o=r(y1t,"mt5"),y1t.forEach(t),A5o=r(tke," \u2014 "),BD=n(tke,"A",{href:!0});var x1t=s(BD);L5o=r(x1t,"MT5Model"),x1t.forEach(t),y5o=r(tke," (MT5 model)"),tke.forEach(t),x5o=i(x),au=n(x,"LI",{});var ake=s(au);dme=n(ake,"STRONG",{});var $1t=s(dme);$5o=r($1t,"mvp"),$1t.forEach(t),k5o=r(ake," \u2014 "),ID=n(ake,"A",{href:!0});var k1t=s(ID);S5o=r(k1t,"MvpModel"),k1t.forEach(t),R5o=r(ake," (MVP model)"),ake.forEach(t),P5o=i(x),nu=n(x,"LI",{});var nke=s(nu);cme=n(nke,"STRONG",{});var S1t=s(cme);B5o=r(S1t,"nezha"),S1t.forEach(t),I5o=r(nke," \u2014 "),ND=n(nke,"A",{href:!0});var R1t=s(ND);N5o=r(R1t,"NezhaModel"),R1t.forEach(t),q5o=r(nke," (Nezha model)"),nke.forEach(t),j5o=i(x),su=n(x,"LI",{});var ske=s(su);fme=n(ske,"STRONG",{});var P1t=s(fme);D5o=r(P1t,"nllb"),P1t.forEach(t),G5o=r(ske," \u2014 "),qD=n(ske,"A",{href:!0});var B1t=s(qD);O5o=r(B1t,"M2M100Model"),B1t.forEach(t),V5o=r(ske," (NLLB model)"),ske.forEach(t),X5o=i(x),lu=n(x,"LI",{});var lke=s(lu);mme=n(lke,"STRONG",{});var I1t=s(mme);z5o=r(I1t,"nystromformer"),I1t.forEach(t),W5o=r(lke," \u2014 "),jD=n(lke,"A",{href:!0});var N1t=s(jD);Q5o=r(N1t,"NystromformerModel"),N1t.forEach(t),H5o=r(lke," (Nystr\xF6mformer model)"),lke.forEach(t),U5o=i(x),iu=n(x,"LI",{});var ike=s(iu);gme=n(ike,"STRONG",{});var q1t=s(gme);J5o=r(q1t,"openai-gpt"),q1t.forEach(t),Y5o=r(ike," \u2014 "),DD=n(ike,"A",{href:!0});var j1t=s(DD);K5o=r(j1t,"OpenAIGPTModel"),j1t.forEach(t),Z5o=r(ike," (OpenAI GPT model)"),ike.forEach(t),e0o=i(x),du=n(x,"LI",{});var dke=s(du);hme=n(dke,"STRONG",{});var D1t=s(hme);o0o=r(D1t,"opt"),D1t.forEach(t),r0o=r(dke," \u2014 "),GD=n(dke,"A",{href:!0});var G1t=s(GD);t0o=r(G1t,"OPTModel"),G1t.forEach(t),a0o=r(dke," (OPT model)"),dke.forEach(t),n0o=i(x),cu=n(x,"LI",{});var cke=s(cu);pme=n(cke,"STRONG",{});var O1t=s(pme);s0o=r(O1t,"owlvit"),O1t.forEach(t),l0o=r(cke," \u2014 "),OD=n(cke,"A",{href:!0});var V1t=s(OD);i0o=r(V1t,"OwlViTModel"),V1t.forEach(t),d0o=r(cke," (OWL-ViT model)"),cke.forEach(t),c0o=i(x),fu=n(x,"LI",{});var fke=s(fu);_me=n(fke,"STRONG",{});var X1t=s(_me);f0o=r(X1t,"pegasus"),X1t.forEach(t),m0o=r(fke," \u2014 "),VD=n(fke,"A",{href:!0});var z1t=s(VD);g0o=r(z1t,"PegasusModel"),z1t.forEach(t),h0o=r(fke," (Pegasus model)"),fke.forEach(t),p0o=i(x),mu=n(x,"LI",{});var mke=s(mu);ume=n(mke,"STRONG",{});var W1t=s(ume);_0o=r(W1t,"perceiver"),W1t.forEach(t),u0o=r(mke," \u2014 "),XD=n(mke,"A",{href:!0});var Q1t=s(XD);b0o=r(Q1t,"PerceiverModel"),Q1t.forEach(t),v0o=r(mke," (Perceiver model)"),mke.forEach(t),F0o=i(x),gu=n(x,"LI",{});var gke=s(gu);bme=n(gke,"STRONG",{});var H1t=s(bme);T0o=r(H1t,"plbart"),H1t.forEach(t),M0o=r(gke," \u2014 "),zD=n(gke,"A",{href:!0});var U1t=s(zD);E0o=r(U1t,"PLBartModel"),U1t.forEach(t),C0o=r(gke," (PLBart model)"),gke.forEach(t),w0o=i(x),hu=n(x,"LI",{});var hke=s(hu);vme=n(hke,"STRONG",{});var J1t=s(vme);A0o=r(J1t,"poolformer"),J1t.forEach(t),L0o=r(hke," \u2014 "),WD=n(hke,"A",{href:!0});var Y1t=s(WD);y0o=r(Y1t,"PoolFormerModel"),Y1t.forEach(t),x0o=r(hke," (PoolFormer model)"),hke.forEach(t),$0o=i(x),pu=n(x,"LI",{});var pke=s(pu);Fme=n(pke,"STRONG",{});var K1t=s(Fme);k0o=r(K1t,"prophetnet"),K1t.forEach(t),S0o=r(pke," \u2014 "),QD=n(pke,"A",{href:!0});var Z1t=s(QD);R0o=r(Z1t,"ProphetNetModel"),Z1t.forEach(t),P0o=r(pke," (ProphetNet model)"),pke.forEach(t),B0o=i(x),_u=n(x,"LI",{});var _ke=s(_u);Tme=n(_ke,"STRONG",{});var ebt=s(Tme);I0o=r(ebt,"qdqbert"),ebt.forEach(t),N0o=r(_ke," \u2014 "),HD=n(_ke,"A",{href:!0});var obt=s(HD);q0o=r(obt,"QDQBertModel"),obt.forEach(t),j0o=r(_ke," (QDQBert model)"),_ke.forEach(t),D0o=i(x),uu=n(x,"LI",{});var uke=s(uu);Mme=n(uke,"STRONG",{});var rbt=s(Mme);G0o=r(rbt,"reformer"),rbt.forEach(t),O0o=r(uke," \u2014 "),UD=n(uke,"A",{href:!0});var tbt=s(UD);V0o=r(tbt,"ReformerModel"),tbt.forEach(t),X0o=r(uke," (Reformer model)"),uke.forEach(t),z0o=i(x),bu=n(x,"LI",{});var bke=s(bu);Eme=n(bke,"STRONG",{});var abt=s(Eme);W0o=r(abt,"regnet"),abt.forEach(t),Q0o=r(bke," \u2014 "),JD=n(bke,"A",{href:!0});var nbt=s(JD);H0o=r(nbt,"RegNetModel"),nbt.forEach(t),U0o=r(bke," (RegNet model)"),bke.forEach(t),J0o=i(x),vu=n(x,"LI",{});var vke=s(vu);Cme=n(vke,"STRONG",{});var sbt=s(Cme);Y0o=r(sbt,"rembert"),sbt.forEach(t),K0o=r(vke," \u2014 "),YD=n(vke,"A",{href:!0});var lbt=s(YD);Z0o=r(lbt,"RemBertModel"),lbt.forEach(t),ewo=r(vke," (RemBERT model)"),vke.forEach(t),owo=i(x),Fu=n(x,"LI",{});var Fke=s(Fu);wme=n(Fke,"STRONG",{});var ibt=s(wme);rwo=r(ibt,"resnet"),ibt.forEach(t),two=r(Fke," \u2014 "),KD=n(Fke,"A",{href:!0});var dbt=s(KD);awo=r(dbt,"ResNetModel"),dbt.forEach(t),nwo=r(Fke," (ResNet model)"),Fke.forEach(t),swo=i(x),Tu=n(x,"LI",{});var Tke=s(Tu);Ame=n(Tke,"STRONG",{});var cbt=s(Ame);lwo=r(cbt,"retribert"),cbt.forEach(t),iwo=r(Tke," \u2014 "),ZD=n(Tke,"A",{href:!0});var fbt=s(ZD);dwo=r(fbt,"RetriBertModel"),fbt.forEach(t),cwo=r(Tke," (RetriBERT model)"),Tke.forEach(t),fwo=i(x),Mu=n(x,"LI",{});var Mke=s(Mu);Lme=n(Mke,"STRONG",{});var mbt=s(Lme);mwo=r(mbt,"roberta"),mbt.forEach(t),gwo=r(Mke," \u2014 "),eG=n(Mke,"A",{href:!0});var gbt=s(eG);hwo=r(gbt,"RobertaModel"),gbt.forEach(t),pwo=r(Mke," (RoBERTa model)"),Mke.forEach(t),_wo=i(x),Eu=n(x,"LI",{});var Eke=s(Eu);yme=n(Eke,"STRONG",{});var hbt=s(yme);uwo=r(hbt,"roformer"),hbt.forEach(t),bwo=r(Eke," \u2014 "),oG=n(Eke,"A",{href:!0});var pbt=s(oG);vwo=r(pbt,"RoFormerModel"),pbt.forEach(t),Fwo=r(Eke," (RoFormer model)"),Eke.forEach(t),Two=i(x),Cu=n(x,"LI",{});var Cke=s(Cu);xme=n(Cke,"STRONG",{});var _bt=s(xme);Mwo=r(_bt,"segformer"),_bt.forEach(t),Ewo=r(Cke," \u2014 "),rG=n(Cke,"A",{href:!0});var ubt=s(rG);Cwo=r(ubt,"SegformerModel"),ubt.forEach(t),wwo=r(Cke," (SegFormer model)"),Cke.forEach(t),Awo=i(x),wu=n(x,"LI",{});var wke=s(wu);$me=n(wke,"STRONG",{});var bbt=s($me);Lwo=r(bbt,"sew"),bbt.forEach(t),ywo=r(wke," \u2014 "),tG=n(wke,"A",{href:!0});var vbt=s(tG);xwo=r(vbt,"SEWModel"),vbt.forEach(t),$wo=r(wke," (SEW model)"),wke.forEach(t),kwo=i(x),Au=n(x,"LI",{});var Ake=s(Au);kme=n(Ake,"STRONG",{});var Fbt=s(kme);Swo=r(Fbt,"sew-d"),Fbt.forEach(t),Rwo=r(Ake," \u2014 "),aG=n(Ake,"A",{href:!0});var Tbt=s(aG);Pwo=r(Tbt,"SEWDModel"),Tbt.forEach(t),Bwo=r(Ake," (SEW-D model)"),Ake.forEach(t),Iwo=i(x),Lu=n(x,"LI",{});var Lke=s(Lu);Sme=n(Lke,"STRONG",{});var Mbt=s(Sme);Nwo=r(Mbt,"speech_to_text"),Mbt.forEach(t),qwo=r(Lke," \u2014 "),nG=n(Lke,"A",{href:!0});var Ebt=s(nG);jwo=r(Ebt,"Speech2TextModel"),Ebt.forEach(t),Dwo=r(Lke," (Speech2Text model)"),Lke.forEach(t),Gwo=i(x),yu=n(x,"LI",{});var yke=s(yu);Rme=n(yke,"STRONG",{});var Cbt=s(Rme);Owo=r(Cbt,"splinter"),Cbt.forEach(t),Vwo=r(yke," \u2014 "),sG=n(yke,"A",{href:!0});var wbt=s(sG);Xwo=r(wbt,"SplinterModel"),wbt.forEach(t),zwo=r(yke," (Splinter model)"),yke.forEach(t),Wwo=i(x),xu=n(x,"LI",{});var xke=s(xu);Pme=n(xke,"STRONG",{});var Abt=s(Pme);Qwo=r(Abt,"squeezebert"),Abt.forEach(t),Hwo=r(xke," \u2014 "),lG=n(xke,"A",{href:!0});var Lbt=s(lG);Uwo=r(Lbt,"SqueezeBertModel"),Lbt.forEach(t),Jwo=r(xke," (SqueezeBERT model)"),xke.forEach(t),Ywo=i(x),$u=n(x,"LI",{});var $ke=s($u);Bme=n($ke,"STRONG",{});var ybt=s(Bme);Kwo=r(ybt,"swin"),ybt.forEach(t),Zwo=r($ke," \u2014 "),iG=n($ke,"A",{href:!0});var xbt=s(iG);eAo=r(xbt,"SwinModel"),xbt.forEach(t),oAo=r($ke," (Swin Transformer model)"),$ke.forEach(t),rAo=i(x),ku=n(x,"LI",{});var kke=s(ku);Ime=n(kke,"STRONG",{});var $bt=s(Ime);tAo=r($bt,"swinv2"),$bt.forEach(t),aAo=r(kke," \u2014 "),dG=n(kke,"A",{href:!0});var kbt=s(dG);nAo=r(kbt,"Swinv2Model"),kbt.forEach(t),sAo=r(kke," (Swin Transformer V2 model)"),kke.forEach(t),lAo=i(x),Su=n(x,"LI",{});var Ske=s(Su);Nme=n(Ske,"STRONG",{});var Sbt=s(Nme);iAo=r(Sbt,"t5"),Sbt.forEach(t),dAo=r(Ske," \u2014 "),cG=n(Ske,"A",{href:!0});var Rbt=s(cG);cAo=r(Rbt,"T5Model"),Rbt.forEach(t),fAo=r(Ske," (T5 model)"),Ske.forEach(t),mAo=i(x),Ru=n(x,"LI",{});var Rke=s(Ru);qme=n(Rke,"STRONG",{});var Pbt=s(qme);gAo=r(Pbt,"tapas"),Pbt.forEach(t),hAo=r(Rke," \u2014 "),fG=n(Rke,"A",{href:!0});var Bbt=s(fG);pAo=r(Bbt,"TapasModel"),Bbt.forEach(t),_Ao=r(Rke," (TAPAS model)"),Rke.forEach(t),uAo=i(x),Pu=n(x,"LI",{});var Pke=s(Pu);jme=n(Pke,"STRONG",{});var Ibt=s(jme);bAo=r(Ibt,"trajectory_transformer"),Ibt.forEach(t),vAo=r(Pke," \u2014 "),mG=n(Pke,"A",{href:!0});var Nbt=s(mG);FAo=r(Nbt,"TrajectoryTransformerModel"),Nbt.forEach(t),TAo=r(Pke," (Trajectory Transformer model)"),Pke.forEach(t),MAo=i(x),Bu=n(x,"LI",{});var Bke=s(Bu);Dme=n(Bke,"STRONG",{});var qbt=s(Dme);EAo=r(qbt,"transfo-xl"),qbt.forEach(t),CAo=r(Bke," \u2014 "),gG=n(Bke,"A",{href:!0});var jbt=s(gG);wAo=r(jbt,"TransfoXLModel"),jbt.forEach(t),AAo=r(Bke," (Transformer-XL model)"),Bke.forEach(t),LAo=i(x),Iu=n(x,"LI",{});var Ike=s(Iu);Gme=n(Ike,"STRONG",{});var Dbt=s(Gme);yAo=r(Dbt,"unispeech"),Dbt.forEach(t),xAo=r(Ike," \u2014 "),hG=n(Ike,"A",{href:!0});var Gbt=s(hG);$Ao=r(Gbt,"UniSpeechModel"),Gbt.forEach(t),kAo=r(Ike," (UniSpeech model)"),Ike.forEach(t),SAo=i(x),Nu=n(x,"LI",{});var Nke=s(Nu);Ome=n(Nke,"STRONG",{});var Obt=s(Ome);RAo=r(Obt,"unispeech-sat"),Obt.forEach(t),PAo=r(Nke," \u2014 "),pG=n(Nke,"A",{href:!0});var Vbt=s(pG);BAo=r(Vbt,"UniSpeechSatModel"),Vbt.forEach(t),IAo=r(Nke," (UniSpeechSat model)"),Nke.forEach(t),NAo=i(x),qu=n(x,"LI",{});var qke=s(qu);Vme=n(qke,"STRONG",{});var Xbt=s(Vme);qAo=r(Xbt,"van"),Xbt.forEach(t),jAo=r(qke," \u2014 "),_G=n(qke,"A",{href:!0});var zbt=s(_G);DAo=r(zbt,"VanModel"),zbt.forEach(t),GAo=r(qke," (VAN model)"),qke.forEach(t),OAo=i(x),ju=n(x,"LI",{});var jke=s(ju);Xme=n(jke,"STRONG",{});var Wbt=s(Xme);VAo=r(Wbt,"vilt"),Wbt.forEach(t),XAo=r(jke," \u2014 "),uG=n(jke,"A",{href:!0});var Qbt=s(uG);zAo=r(Qbt,"ViltModel"),Qbt.forEach(t),WAo=r(jke," (ViLT model)"),jke.forEach(t),QAo=i(x),Du=n(x,"LI",{});var Dke=s(Du);zme=n(Dke,"STRONG",{});var Hbt=s(zme);HAo=r(Hbt,"vision-text-dual-encoder"),Hbt.forEach(t),UAo=r(Dke," \u2014 "),bG=n(Dke,"A",{href:!0});var Ubt=s(bG);JAo=r(Ubt,"VisionTextDualEncoderModel"),Ubt.forEach(t),YAo=r(Dke," (VisionTextDualEncoder model)"),Dke.forEach(t),KAo=i(x),Gu=n(x,"LI",{});var Gke=s(Gu);Wme=n(Gke,"STRONG",{});var Jbt=s(Wme);ZAo=r(Jbt,"visual_bert"),Jbt.forEach(t),e7o=r(Gke," \u2014 "),vG=n(Gke,"A",{href:!0});var Ybt=s(vG);o7o=r(Ybt,"VisualBertModel"),Ybt.forEach(t),r7o=r(Gke," (VisualBERT model)"),Gke.forEach(t),t7o=i(x),Ou=n(x,"LI",{});var Oke=s(Ou);Qme=n(Oke,"STRONG",{});var Kbt=s(Qme);a7o=r(Kbt,"vit"),Kbt.forEach(t),n7o=r(Oke," \u2014 "),FG=n(Oke,"A",{href:!0});var Zbt=s(FG);s7o=r(Zbt,"ViTModel"),Zbt.forEach(t),l7o=r(Oke," (ViT model)"),Oke.forEach(t),i7o=i(x),Vu=n(x,"LI",{});var Vke=s(Vu);Hme=n(Vke,"STRONG",{});var evt=s(Hme);d7o=r(evt,"vit_mae"),evt.forEach(t),c7o=r(Vke," \u2014 "),TG=n(Vke,"A",{href:!0});var ovt=s(TG);f7o=r(ovt,"ViTMAEModel"),ovt.forEach(t),m7o=r(Vke," (ViTMAE model)"),Vke.forEach(t),g7o=i(x),Xu=n(x,"LI",{});var Xke=s(Xu);Ume=n(Xke,"STRONG",{});var rvt=s(Ume);h7o=r(rvt,"wav2vec2"),rvt.forEach(t),p7o=r(Xke," \u2014 "),MG=n(Xke,"A",{href:!0});var tvt=s(MG);_7o=r(tvt,"Wav2Vec2Model"),tvt.forEach(t),u7o=r(Xke," (Wav2Vec2 model)"),Xke.forEach(t),b7o=i(x),zu=n(x,"LI",{});var zke=s(zu);Jme=n(zke,"STRONG",{});var avt=s(Jme);v7o=r(avt,"wav2vec2-conformer"),avt.forEach(t),F7o=r(zke," \u2014 "),EG=n(zke,"A",{href:!0});var nvt=s(EG);T7o=r(nvt,"Wav2Vec2ConformerModel"),nvt.forEach(t),M7o=r(zke," (Wav2Vec2-Conformer model)"),zke.forEach(t),E7o=i(x),Wu=n(x,"LI",{});var Wke=s(Wu);Yme=n(Wke,"STRONG",{});var svt=s(Yme);C7o=r(svt,"wavlm"),svt.forEach(t),w7o=r(Wke," \u2014 "),CG=n(Wke,"A",{href:!0});var lvt=s(CG);A7o=r(lvt,"WavLMModel"),lvt.forEach(t),L7o=r(Wke," (WavLM model)"),Wke.forEach(t),y7o=i(x),Qu=n(x,"LI",{});var Qke=s(Qu);Kme=n(Qke,"STRONG",{});var ivt=s(Kme);x7o=r(ivt,"xglm"),ivt.forEach(t),$7o=r(Qke," \u2014 "),wG=n(Qke,"A",{href:!0});var dvt=s(wG);k7o=r(dvt,"XGLMModel"),dvt.forEach(t),S7o=r(Qke," (XGLM model)"),Qke.forEach(t),R7o=i(x),Hu=n(x,"LI",{});var Hke=s(Hu);Zme=n(Hke,"STRONG",{});var cvt=s(Zme);P7o=r(cvt,"xlm"),cvt.forEach(t),B7o=r(Hke," \u2014 "),AG=n(Hke,"A",{href:!0});var fvt=s(AG);I7o=r(fvt,"XLMModel"),fvt.forEach(t),N7o=r(Hke," (XLM model)"),Hke.forEach(t),q7o=i(x),Uu=n(x,"LI",{});var Uke=s(Uu);ege=n(Uke,"STRONG",{});var mvt=s(ege);j7o=r(mvt,"xlm-prophetnet"),mvt.forEach(t),D7o=r(Uke," \u2014 "),LG=n(Uke,"A",{href:!0});var gvt=s(LG);G7o=r(gvt,"XLMProphetNetModel"),gvt.forEach(t),O7o=r(Uke," (XLM-ProphetNet model)"),Uke.forEach(t),V7o=i(x),Ju=n(x,"LI",{});var Jke=s(Ju);oge=n(Jke,"STRONG",{});var hvt=s(oge);X7o=r(hvt,"xlm-roberta"),hvt.forEach(t),z7o=r(Jke," \u2014 "),yG=n(Jke,"A",{href:!0});var pvt=s(yG);W7o=r(pvt,"XLMRobertaModel"),pvt.forEach(t),Q7o=r(Jke," (XLM-RoBERTa model)"),Jke.forEach(t),H7o=i(x),Yu=n(x,"LI",{});var Yke=s(Yu);rge=n(Yke,"STRONG",{});var _vt=s(rge);U7o=r(_vt,"xlm-roberta-xl"),_vt.forEach(t),J7o=r(Yke," \u2014 "),xG=n(Yke,"A",{href:!0});var uvt=s(xG);Y7o=r(uvt,"XLMRobertaXLModel"),uvt.forEach(t),K7o=r(Yke," (XLM-RoBERTa-XL model)"),Yke.forEach(t),Z7o=i(x),Ku=n(x,"LI",{});var Kke=s(Ku);tge=n(Kke,"STRONG",{});var bvt=s(tge);eLo=r(bvt,"xlnet"),bvt.forEach(t),oLo=r(Kke," \u2014 "),$G=n(Kke,"A",{href:!0});var vvt=s($G);rLo=r(vvt,"XLNetModel"),vvt.forEach(t),tLo=r(Kke," (XLNet model)"),Kke.forEach(t),aLo=i(x),Zu=n(x,"LI",{});var Zke=s(Zu);age=n(Zke,"STRONG",{});var Fvt=s(age);nLo=r(Fvt,"yolos"),Fvt.forEach(t),sLo=r(Zke," \u2014 "),kG=n(Zke,"A",{href:!0});var Tvt=s(kG);lLo=r(Tvt,"YolosModel"),Tvt.forEach(t),iLo=r(Zke," (YOLOS model)"),Zke.forEach(t),dLo=i(x),e2=n(x,"LI",{});var eSe=s(e2);nge=n(eSe,"STRONG",{});var Mvt=s(nge);cLo=r(Mvt,"yoso"),Mvt.forEach(t),fLo=r(eSe," \u2014 "),SG=n(eSe,"A",{href:!0});var Evt=s(SG);mLo=r(Evt,"YosoModel"),Evt.forEach(t),gLo=r(eSe," (YOSO model)"),eSe.forEach(t),x.forEach(t),hLo=i(la),o2=n(la,"P",{});var oSe=s(o2);pLo=r(oSe,"The model is set in evaluation mode by default using "),sge=n(oSe,"CODE",{});var Cvt=s(sge);_Lo=r(Cvt,"model.eval()"),Cvt.forEach(t),uLo=r(oSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=n(oSe,"CODE",{});var wvt=s(lge);bLo=r(wvt,"model.train()"),wvt.forEach(t),oSe.forEach(t),vLo=i(la),T(r2.$$.fragment,la),la.forEach(t),nl.forEach(t),yze=i(f),Qi=n(f,"H2",{class:!0});var PQe=s(Qi);t2=n(PQe,"A",{id:!0,class:!0,href:!0});var Avt=s(t2);ige=n(Avt,"SPAN",{});var Lvt=s(ige);T(ZL.$$.fragment,Lvt),Lvt.forEach(t),Avt.forEach(t),FLo=i(PQe),dge=n(PQe,"SPAN",{});var yvt=s(dge);TLo=r(yvt,"AutoModelForPreTraining"),yvt.forEach(t),PQe.forEach(t),xze=i(f),So=n(f,"DIV",{class:!0});var sl=s(So);T(ey.$$.fragment,sl),MLo=i(sl),Hi=n(sl,"P",{});var vte=s(Hi);ELo=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RG=n(vte,"A",{href:!0});var xvt=s(RG);CLo=r(xvt,"from_pretrained()"),xvt.forEach(t),wLo=r(vte," class method or the "),PG=n(vte,"A",{href:!0});var $vt=s(PG);ALo=r($vt,"from_config()"),$vt.forEach(t),LLo=r(vte,` class
method.`),vte.forEach(t),yLo=i(sl),oy=n(sl,"P",{});var BQe=s(oy);xLo=r(BQe,"This class cannot be instantiated directly using "),cge=n(BQe,"CODE",{});var kvt=s(cge);$Lo=r(kvt,"__init__()"),kvt.forEach(t),kLo=r(BQe," (throws an error)."),BQe.forEach(t),SLo=i(sl),dt=n(sl,"DIV",{class:!0});var LA=s(dt);T(ry.$$.fragment,LA),RLo=i(LA),fge=n(LA,"P",{});var Svt=s(fge);PLo=r(Svt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Svt.forEach(t),BLo=i(LA),Ui=n(LA,"P",{});var Fte=s(Ui);ILo=r(Fte,`Note:
Loading a model from its configuration file does `),mge=n(Fte,"STRONG",{});var Rvt=s(mge);NLo=r(Rvt,"not"),Rvt.forEach(t),qLo=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=n(Fte,"A",{href:!0});var Pvt=s(BG);jLo=r(Pvt,"from_pretrained()"),Pvt.forEach(t),DLo=r(Fte," to load the model weights."),Fte.forEach(t),GLo=i(LA),T(a2.$$.fragment,LA),LA.forEach(t),OLo=i(sl),Ke=n(sl,"DIV",{class:!0});var ia=s(Ke);T(ty.$$.fragment,ia),VLo=i(ia),gge=n(ia,"P",{});var Bvt=s(gge);XLo=r(Bvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Bvt.forEach(t),zLo=i(ia),Na=n(ia,"P",{});var yA=s(Na);WLo=r(yA,"The model class to instantiate is selected based on the "),hge=n(yA,"CODE",{});var Ivt=s(hge);QLo=r(Ivt,"model_type"),Ivt.forEach(t),HLo=r(yA,` property of the config object (either
passed as an argument or loaded from `),pge=n(yA,"CODE",{});var Nvt=s(pge);ULo=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),JLo=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ge=n(yA,"CODE",{});var qvt=s(_ge);YLo=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),KLo=r(yA,":"),yA.forEach(t),ZLo=i(ia),G=n(ia,"UL",{});var O=s(G);n2=n(O,"LI",{});var rSe=s(n2);uge=n(rSe,"STRONG",{});var jvt=s(uge);eyo=r(jvt,"albert"),jvt.forEach(t),oyo=r(rSe," \u2014 "),IG=n(rSe,"A",{href:!0});var Dvt=s(IG);ryo=r(Dvt,"AlbertForPreTraining"),Dvt.forEach(t),tyo=r(rSe," (ALBERT model)"),rSe.forEach(t),ayo=i(O),s2=n(O,"LI",{});var tSe=s(s2);bge=n(tSe,"STRONG",{});var Gvt=s(bge);nyo=r(Gvt,"bart"),Gvt.forEach(t),syo=r(tSe," \u2014 "),NG=n(tSe,"A",{href:!0});var Ovt=s(NG);lyo=r(Ovt,"BartForConditionalGeneration"),Ovt.forEach(t),iyo=r(tSe," (BART model)"),tSe.forEach(t),dyo=i(O),l2=n(O,"LI",{});var aSe=s(l2);vge=n(aSe,"STRONG",{});var Vvt=s(vge);cyo=r(Vvt,"bert"),Vvt.forEach(t),fyo=r(aSe," \u2014 "),qG=n(aSe,"A",{href:!0});var Xvt=s(qG);myo=r(Xvt,"BertForPreTraining"),Xvt.forEach(t),gyo=r(aSe," (BERT model)"),aSe.forEach(t),hyo=i(O),i2=n(O,"LI",{});var nSe=s(i2);Fge=n(nSe,"STRONG",{});var zvt=s(Fge);pyo=r(zvt,"big_bird"),zvt.forEach(t),_yo=r(nSe," \u2014 "),jG=n(nSe,"A",{href:!0});var Wvt=s(jG);uyo=r(Wvt,"BigBirdForPreTraining"),Wvt.forEach(t),byo=r(nSe," (BigBird model)"),nSe.forEach(t),vyo=i(O),d2=n(O,"LI",{});var sSe=s(d2);Tge=n(sSe,"STRONG",{});var Qvt=s(Tge);Fyo=r(Qvt,"bloom"),Qvt.forEach(t),Tyo=r(sSe," \u2014 "),DG=n(sSe,"A",{href:!0});var Hvt=s(DG);Myo=r(Hvt,"BloomForCausalLM"),Hvt.forEach(t),Eyo=r(sSe," (BLOOM model)"),sSe.forEach(t),Cyo=i(O),c2=n(O,"LI",{});var lSe=s(c2);Mge=n(lSe,"STRONG",{});var Uvt=s(Mge);wyo=r(Uvt,"camembert"),Uvt.forEach(t),Ayo=r(lSe," \u2014 "),GG=n(lSe,"A",{href:!0});var Jvt=s(GG);Lyo=r(Jvt,"CamembertForMaskedLM"),Jvt.forEach(t),yyo=r(lSe," (CamemBERT model)"),lSe.forEach(t),xyo=i(O),f2=n(O,"LI",{});var iSe=s(f2);Ege=n(iSe,"STRONG",{});var Yvt=s(Ege);$yo=r(Yvt,"ctrl"),Yvt.forEach(t),kyo=r(iSe," \u2014 "),OG=n(iSe,"A",{href:!0});var Kvt=s(OG);Syo=r(Kvt,"CTRLLMHeadModel"),Kvt.forEach(t),Ryo=r(iSe," (CTRL model)"),iSe.forEach(t),Pyo=i(O),m2=n(O,"LI",{});var dSe=s(m2);Cge=n(dSe,"STRONG",{});var Zvt=s(Cge);Byo=r(Zvt,"data2vec-text"),Zvt.forEach(t),Iyo=r(dSe," \u2014 "),VG=n(dSe,"A",{href:!0});var e3t=s(VG);Nyo=r(e3t,"Data2VecTextForMaskedLM"),e3t.forEach(t),qyo=r(dSe," (Data2VecText model)"),dSe.forEach(t),jyo=i(O),g2=n(O,"LI",{});var cSe=s(g2);wge=n(cSe,"STRONG",{});var o3t=s(wge);Dyo=r(o3t,"deberta"),o3t.forEach(t),Gyo=r(cSe," \u2014 "),XG=n(cSe,"A",{href:!0});var r3t=s(XG);Oyo=r(r3t,"DebertaForMaskedLM"),r3t.forEach(t),Vyo=r(cSe," (DeBERTa model)"),cSe.forEach(t),Xyo=i(O),h2=n(O,"LI",{});var fSe=s(h2);Age=n(fSe,"STRONG",{});var t3t=s(Age);zyo=r(t3t,"deberta-v2"),t3t.forEach(t),Wyo=r(fSe," \u2014 "),zG=n(fSe,"A",{href:!0});var a3t=s(zG);Qyo=r(a3t,"DebertaV2ForMaskedLM"),a3t.forEach(t),Hyo=r(fSe," (DeBERTa-v2 model)"),fSe.forEach(t),Uyo=i(O),p2=n(O,"LI",{});var mSe=s(p2);Lge=n(mSe,"STRONG",{});var n3t=s(Lge);Jyo=r(n3t,"distilbert"),n3t.forEach(t),Yyo=r(mSe," \u2014 "),WG=n(mSe,"A",{href:!0});var s3t=s(WG);Kyo=r(s3t,"DistilBertForMaskedLM"),s3t.forEach(t),Zyo=r(mSe," (DistilBERT model)"),mSe.forEach(t),e9o=i(O),_2=n(O,"LI",{});var gSe=s(_2);yge=n(gSe,"STRONG",{});var l3t=s(yge);o9o=r(l3t,"electra"),l3t.forEach(t),r9o=r(gSe," \u2014 "),QG=n(gSe,"A",{href:!0});var i3t=s(QG);t9o=r(i3t,"ElectraForPreTraining"),i3t.forEach(t),a9o=r(gSe," (ELECTRA model)"),gSe.forEach(t),n9o=i(O),u2=n(O,"LI",{});var hSe=s(u2);xge=n(hSe,"STRONG",{});var d3t=s(xge);s9o=r(d3t,"flaubert"),d3t.forEach(t),l9o=r(hSe," \u2014 "),HG=n(hSe,"A",{href:!0});var c3t=s(HG);i9o=r(c3t,"FlaubertWithLMHeadModel"),c3t.forEach(t),d9o=r(hSe," (FlauBERT model)"),hSe.forEach(t),c9o=i(O),b2=n(O,"LI",{});var pSe=s(b2);$ge=n(pSe,"STRONG",{});var f3t=s($ge);f9o=r(f3t,"flava"),f3t.forEach(t),m9o=r(pSe," \u2014 "),UG=n(pSe,"A",{href:!0});var m3t=s(UG);g9o=r(m3t,"FlavaForPreTraining"),m3t.forEach(t),h9o=r(pSe," (FLAVA model)"),pSe.forEach(t),p9o=i(O),v2=n(O,"LI",{});var _Se=s(v2);kge=n(_Se,"STRONG",{});var g3t=s(kge);_9o=r(g3t,"fnet"),g3t.forEach(t),u9o=r(_Se," \u2014 "),JG=n(_Se,"A",{href:!0});var h3t=s(JG);b9o=r(h3t,"FNetForPreTraining"),h3t.forEach(t),v9o=r(_Se," (FNet model)"),_Se.forEach(t),F9o=i(O),F2=n(O,"LI",{});var uSe=s(F2);Sge=n(uSe,"STRONG",{});var p3t=s(Sge);T9o=r(p3t,"fsmt"),p3t.forEach(t),M9o=r(uSe," \u2014 "),YG=n(uSe,"A",{href:!0});var _3t=s(YG);E9o=r(_3t,"FSMTForConditionalGeneration"),_3t.forEach(t),C9o=r(uSe," (FairSeq Machine-Translation model)"),uSe.forEach(t),w9o=i(O),T2=n(O,"LI",{});var bSe=s(T2);Rge=n(bSe,"STRONG",{});var u3t=s(Rge);A9o=r(u3t,"funnel"),u3t.forEach(t),L9o=r(bSe," \u2014 "),KG=n(bSe,"A",{href:!0});var b3t=s(KG);y9o=r(b3t,"FunnelForPreTraining"),b3t.forEach(t),x9o=r(bSe," (Funnel Transformer model)"),bSe.forEach(t),$9o=i(O),M2=n(O,"LI",{});var vSe=s(M2);Pge=n(vSe,"STRONG",{});var v3t=s(Pge);k9o=r(v3t,"gpt2"),v3t.forEach(t),S9o=r(vSe," \u2014 "),ZG=n(vSe,"A",{href:!0});var F3t=s(ZG);R9o=r(F3t,"GPT2LMHeadModel"),F3t.forEach(t),P9o=r(vSe," (OpenAI GPT-2 model)"),vSe.forEach(t),B9o=i(O),E2=n(O,"LI",{});var FSe=s(E2);Bge=n(FSe,"STRONG",{});var T3t=s(Bge);I9o=r(T3t,"ibert"),T3t.forEach(t),N9o=r(FSe," \u2014 "),eO=n(FSe,"A",{href:!0});var M3t=s(eO);q9o=r(M3t,"IBertForMaskedLM"),M3t.forEach(t),j9o=r(FSe," (I-BERT model)"),FSe.forEach(t),D9o=i(O),C2=n(O,"LI",{});var TSe=s(C2);Ige=n(TSe,"STRONG",{});var E3t=s(Ige);G9o=r(E3t,"layoutlm"),E3t.forEach(t),O9o=r(TSe," \u2014 "),oO=n(TSe,"A",{href:!0});var C3t=s(oO);V9o=r(C3t,"LayoutLMForMaskedLM"),C3t.forEach(t),X9o=r(TSe," (LayoutLM model)"),TSe.forEach(t),z9o=i(O),w2=n(O,"LI",{});var MSe=s(w2);Nge=n(MSe,"STRONG",{});var w3t=s(Nge);W9o=r(w3t,"longformer"),w3t.forEach(t),Q9o=r(MSe," \u2014 "),rO=n(MSe,"A",{href:!0});var A3t=s(rO);H9o=r(A3t,"LongformerForMaskedLM"),A3t.forEach(t),U9o=r(MSe," (Longformer model)"),MSe.forEach(t),J9o=i(O),A2=n(O,"LI",{});var ESe=s(A2);qge=n(ESe,"STRONG",{});var L3t=s(qge);Y9o=r(L3t,"lxmert"),L3t.forEach(t),K9o=r(ESe," \u2014 "),tO=n(ESe,"A",{href:!0});var y3t=s(tO);Z9o=r(y3t,"LxmertForPreTraining"),y3t.forEach(t),exo=r(ESe," (LXMERT model)"),ESe.forEach(t),oxo=i(O),L2=n(O,"LI",{});var CSe=s(L2);jge=n(CSe,"STRONG",{});var x3t=s(jge);rxo=r(x3t,"megatron-bert"),x3t.forEach(t),txo=r(CSe," \u2014 "),aO=n(CSe,"A",{href:!0});var $3t=s(aO);axo=r($3t,"MegatronBertForPreTraining"),$3t.forEach(t),nxo=r(CSe," (Megatron-BERT model)"),CSe.forEach(t),sxo=i(O),y2=n(O,"LI",{});var wSe=s(y2);Dge=n(wSe,"STRONG",{});var k3t=s(Dge);lxo=r(k3t,"mobilebert"),k3t.forEach(t),ixo=r(wSe," \u2014 "),nO=n(wSe,"A",{href:!0});var S3t=s(nO);dxo=r(S3t,"MobileBertForPreTraining"),S3t.forEach(t),cxo=r(wSe," (MobileBERT model)"),wSe.forEach(t),fxo=i(O),x2=n(O,"LI",{});var ASe=s(x2);Gge=n(ASe,"STRONG",{});var R3t=s(Gge);mxo=r(R3t,"mpnet"),R3t.forEach(t),gxo=r(ASe," \u2014 "),sO=n(ASe,"A",{href:!0});var P3t=s(sO);hxo=r(P3t,"MPNetForMaskedLM"),P3t.forEach(t),pxo=r(ASe," (MPNet model)"),ASe.forEach(t),_xo=i(O),$2=n(O,"LI",{});var LSe=s($2);Oge=n(LSe,"STRONG",{});var B3t=s(Oge);uxo=r(B3t,"mvp"),B3t.forEach(t),bxo=r(LSe," \u2014 "),lO=n(LSe,"A",{href:!0});var I3t=s(lO);vxo=r(I3t,"MvpForConditionalGeneration"),I3t.forEach(t),Fxo=r(LSe," (MVP model)"),LSe.forEach(t),Txo=i(O),k2=n(O,"LI",{});var ySe=s(k2);Vge=n(ySe,"STRONG",{});var N3t=s(Vge);Mxo=r(N3t,"nezha"),N3t.forEach(t),Exo=r(ySe," \u2014 "),iO=n(ySe,"A",{href:!0});var q3t=s(iO);Cxo=r(q3t,"NezhaForPreTraining"),q3t.forEach(t),wxo=r(ySe," (Nezha model)"),ySe.forEach(t),Axo=i(O),S2=n(O,"LI",{});var xSe=s(S2);Xge=n(xSe,"STRONG",{});var j3t=s(Xge);Lxo=r(j3t,"openai-gpt"),j3t.forEach(t),yxo=r(xSe," \u2014 "),dO=n(xSe,"A",{href:!0});var D3t=s(dO);xxo=r(D3t,"OpenAIGPTLMHeadModel"),D3t.forEach(t),$xo=r(xSe," (OpenAI GPT model)"),xSe.forEach(t),kxo=i(O),R2=n(O,"LI",{});var $Se=s(R2);zge=n($Se,"STRONG",{});var G3t=s(zge);Sxo=r(G3t,"retribert"),G3t.forEach(t),Rxo=r($Se," \u2014 "),cO=n($Se,"A",{href:!0});var O3t=s(cO);Pxo=r(O3t,"RetriBertModel"),O3t.forEach(t),Bxo=r($Se," (RetriBERT model)"),$Se.forEach(t),Ixo=i(O),P2=n(O,"LI",{});var kSe=s(P2);Wge=n(kSe,"STRONG",{});var V3t=s(Wge);Nxo=r(V3t,"roberta"),V3t.forEach(t),qxo=r(kSe," \u2014 "),fO=n(kSe,"A",{href:!0});var X3t=s(fO);jxo=r(X3t,"RobertaForMaskedLM"),X3t.forEach(t),Dxo=r(kSe," (RoBERTa model)"),kSe.forEach(t),Gxo=i(O),B2=n(O,"LI",{});var SSe=s(B2);Qge=n(SSe,"STRONG",{});var z3t=s(Qge);Oxo=r(z3t,"splinter"),z3t.forEach(t),Vxo=r(SSe," \u2014 "),mO=n(SSe,"A",{href:!0});var W3t=s(mO);Xxo=r(W3t,"SplinterForPreTraining"),W3t.forEach(t),zxo=r(SSe," (Splinter model)"),SSe.forEach(t),Wxo=i(O),I2=n(O,"LI",{});var RSe=s(I2);Hge=n(RSe,"STRONG",{});var Q3t=s(Hge);Qxo=r(Q3t,"squeezebert"),Q3t.forEach(t),Hxo=r(RSe," \u2014 "),gO=n(RSe,"A",{href:!0});var H3t=s(gO);Uxo=r(H3t,"SqueezeBertForMaskedLM"),H3t.forEach(t),Jxo=r(RSe," (SqueezeBERT model)"),RSe.forEach(t),Yxo=i(O),N2=n(O,"LI",{});var PSe=s(N2);Uge=n(PSe,"STRONG",{});var U3t=s(Uge);Kxo=r(U3t,"t5"),U3t.forEach(t),Zxo=r(PSe," \u2014 "),hO=n(PSe,"A",{href:!0});var J3t=s(hO);e$o=r(J3t,"T5ForConditionalGeneration"),J3t.forEach(t),o$o=r(PSe," (T5 model)"),PSe.forEach(t),r$o=i(O),q2=n(O,"LI",{});var BSe=s(q2);Jge=n(BSe,"STRONG",{});var Y3t=s(Jge);t$o=r(Y3t,"tapas"),Y3t.forEach(t),a$o=r(BSe," \u2014 "),pO=n(BSe,"A",{href:!0});var K3t=s(pO);n$o=r(K3t,"TapasForMaskedLM"),K3t.forEach(t),s$o=r(BSe," (TAPAS model)"),BSe.forEach(t),l$o=i(O),j2=n(O,"LI",{});var ISe=s(j2);Yge=n(ISe,"STRONG",{});var Z3t=s(Yge);i$o=r(Z3t,"transfo-xl"),Z3t.forEach(t),d$o=r(ISe," \u2014 "),_O=n(ISe,"A",{href:!0});var eFt=s(_O);c$o=r(eFt,"TransfoXLLMHeadModel"),eFt.forEach(t),f$o=r(ISe," (Transformer-XL model)"),ISe.forEach(t),m$o=i(O),D2=n(O,"LI",{});var NSe=s(D2);Kge=n(NSe,"STRONG",{});var oFt=s(Kge);g$o=r(oFt,"unispeech"),oFt.forEach(t),h$o=r(NSe," \u2014 "),uO=n(NSe,"A",{href:!0});var rFt=s(uO);p$o=r(rFt,"UniSpeechForPreTraining"),rFt.forEach(t),_$o=r(NSe," (UniSpeech model)"),NSe.forEach(t),u$o=i(O),G2=n(O,"LI",{});var qSe=s(G2);Zge=n(qSe,"STRONG",{});var tFt=s(Zge);b$o=r(tFt,"unispeech-sat"),tFt.forEach(t),v$o=r(qSe," \u2014 "),bO=n(qSe,"A",{href:!0});var aFt=s(bO);F$o=r(aFt,"UniSpeechSatForPreTraining"),aFt.forEach(t),T$o=r(qSe," (UniSpeechSat model)"),qSe.forEach(t),M$o=i(O),O2=n(O,"LI",{});var jSe=s(O2);ehe=n(jSe,"STRONG",{});var nFt=s(ehe);E$o=r(nFt,"visual_bert"),nFt.forEach(t),C$o=r(jSe," \u2014 "),vO=n(jSe,"A",{href:!0});var sFt=s(vO);w$o=r(sFt,"VisualBertForPreTraining"),sFt.forEach(t),A$o=r(jSe," (VisualBERT model)"),jSe.forEach(t),L$o=i(O),V2=n(O,"LI",{});var DSe=s(V2);ohe=n(DSe,"STRONG",{});var lFt=s(ohe);y$o=r(lFt,"vit_mae"),lFt.forEach(t),x$o=r(DSe," \u2014 "),FO=n(DSe,"A",{href:!0});var iFt=s(FO);$$o=r(iFt,"ViTMAEForPreTraining"),iFt.forEach(t),k$o=r(DSe," (ViTMAE model)"),DSe.forEach(t),S$o=i(O),X2=n(O,"LI",{});var GSe=s(X2);rhe=n(GSe,"STRONG",{});var dFt=s(rhe);R$o=r(dFt,"wav2vec2"),dFt.forEach(t),P$o=r(GSe," \u2014 "),TO=n(GSe,"A",{href:!0});var cFt=s(TO);B$o=r(cFt,"Wav2Vec2ForPreTraining"),cFt.forEach(t),I$o=r(GSe," (Wav2Vec2 model)"),GSe.forEach(t),N$o=i(O),z2=n(O,"LI",{});var OSe=s(z2);the=n(OSe,"STRONG",{});var fFt=s(the);q$o=r(fFt,"wav2vec2-conformer"),fFt.forEach(t),j$o=r(OSe," \u2014 "),MO=n(OSe,"A",{href:!0});var mFt=s(MO);D$o=r(mFt,"Wav2Vec2ConformerForPreTraining"),mFt.forEach(t),G$o=r(OSe," (Wav2Vec2-Conformer model)"),OSe.forEach(t),O$o=i(O),W2=n(O,"LI",{});var VSe=s(W2);ahe=n(VSe,"STRONG",{});var gFt=s(ahe);V$o=r(gFt,"xlm"),gFt.forEach(t),X$o=r(VSe," \u2014 "),EO=n(VSe,"A",{href:!0});var hFt=s(EO);z$o=r(hFt,"XLMWithLMHeadModel"),hFt.forEach(t),W$o=r(VSe," (XLM model)"),VSe.forEach(t),Q$o=i(O),Q2=n(O,"LI",{});var XSe=s(Q2);nhe=n(XSe,"STRONG",{});var pFt=s(nhe);H$o=r(pFt,"xlm-roberta"),pFt.forEach(t),U$o=r(XSe," \u2014 "),CO=n(XSe,"A",{href:!0});var _Ft=s(CO);J$o=r(_Ft,"XLMRobertaForMaskedLM"),_Ft.forEach(t),Y$o=r(XSe," (XLM-RoBERTa model)"),XSe.forEach(t),K$o=i(O),H2=n(O,"LI",{});var zSe=s(H2);she=n(zSe,"STRONG",{});var uFt=s(she);Z$o=r(uFt,"xlm-roberta-xl"),uFt.forEach(t),eko=r(zSe," \u2014 "),wO=n(zSe,"A",{href:!0});var bFt=s(wO);oko=r(bFt,"XLMRobertaXLForMaskedLM"),bFt.forEach(t),rko=r(zSe," (XLM-RoBERTa-XL model)"),zSe.forEach(t),tko=i(O),U2=n(O,"LI",{});var WSe=s(U2);lhe=n(WSe,"STRONG",{});var vFt=s(lhe);ako=r(vFt,"xlnet"),vFt.forEach(t),nko=r(WSe," \u2014 "),AO=n(WSe,"A",{href:!0});var FFt=s(AO);sko=r(FFt,"XLNetLMHeadModel"),FFt.forEach(t),lko=r(WSe," (XLNet model)"),WSe.forEach(t),O.forEach(t),iko=i(ia),J2=n(ia,"P",{});var QSe=s(J2);dko=r(QSe,"The model is set in evaluation mode by default using "),ihe=n(QSe,"CODE",{});var TFt=s(ihe);cko=r(TFt,"model.eval()"),TFt.forEach(t),fko=r(QSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=n(QSe,"CODE",{});var MFt=s(dhe);mko=r(MFt,"model.train()"),MFt.forEach(t),QSe.forEach(t),gko=i(ia),T(Y2.$$.fragment,ia),ia.forEach(t),sl.forEach(t),$ze=i(f),Ji=n(f,"H2",{class:!0});var IQe=s(Ji);K2=n(IQe,"A",{id:!0,class:!0,href:!0});var EFt=s(K2);che=n(EFt,"SPAN",{});var CFt=s(che);T(ay.$$.fragment,CFt),CFt.forEach(t),EFt.forEach(t),hko=i(IQe),fhe=n(IQe,"SPAN",{});var wFt=s(fhe);pko=r(wFt,"AutoModelForCausalLM"),wFt.forEach(t),IQe.forEach(t),kze=i(f),Ro=n(f,"DIV",{class:!0});var ll=s(Ro);T(ny.$$.fragment,ll),_ko=i(ll),Yi=n(ll,"P",{});var Tte=s(Yi);uko=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),LO=n(Tte,"A",{href:!0});var AFt=s(LO);bko=r(AFt,"from_pretrained()"),AFt.forEach(t),vko=r(Tte," class method or the "),yO=n(Tte,"A",{href:!0});var LFt=s(yO);Fko=r(LFt,"from_config()"),LFt.forEach(t),Tko=r(Tte,` class
method.`),Tte.forEach(t),Mko=i(ll),sy=n(ll,"P",{});var NQe=s(sy);Eko=r(NQe,"This class cannot be instantiated directly using "),mhe=n(NQe,"CODE",{});var yFt=s(mhe);Cko=r(yFt,"__init__()"),yFt.forEach(t),wko=r(NQe," (throws an error)."),NQe.forEach(t),Ako=i(ll),ct=n(ll,"DIV",{class:!0});var xA=s(ct);T(ly.$$.fragment,xA),Lko=i(xA),ghe=n(xA,"P",{});var xFt=s(ghe);yko=r(xFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xFt.forEach(t),xko=i(xA),Ki=n(xA,"P",{});var Mte=s(Ki);$ko=r(Mte,`Note:
Loading a model from its configuration file does `),hhe=n(Mte,"STRONG",{});var $Ft=s(hhe);kko=r($Ft,"not"),$Ft.forEach(t),Sko=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=n(Mte,"A",{href:!0});var kFt=s(xO);Rko=r(kFt,"from_pretrained()"),kFt.forEach(t),Pko=r(Mte," to load the model weights."),Mte.forEach(t),Bko=i(xA),T(Z2.$$.fragment,xA),xA.forEach(t),Iko=i(ll),Ze=n(ll,"DIV",{class:!0});var da=s(Ze);T(iy.$$.fragment,da),Nko=i(da),phe=n(da,"P",{});var SFt=s(phe);qko=r(SFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),SFt.forEach(t),jko=i(da),qa=n(da,"P",{});var $A=s(qa);Dko=r($A,"The model class to instantiate is selected based on the "),_he=n($A,"CODE",{});var RFt=s(_he);Gko=r(RFt,"model_type"),RFt.forEach(t),Oko=r($A,` property of the config object (either
passed as an argument or loaded from `),uhe=n($A,"CODE",{});var PFt=s(uhe);Vko=r(PFt,"pretrained_model_name_or_path"),PFt.forEach(t),Xko=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n($A,"CODE",{});var BFt=s(bhe);zko=r(BFt,"pretrained_model_name_or_path"),BFt.forEach(t),Wko=r($A,":"),$A.forEach(t),Qko=i(da),X=n(da,"UL",{});var W=s(X);e1=n(W,"LI",{});var HSe=s(e1);vhe=n(HSe,"STRONG",{});var IFt=s(vhe);Hko=r(IFt,"bart"),IFt.forEach(t),Uko=r(HSe," \u2014 "),$O=n(HSe,"A",{href:!0});var NFt=s($O);Jko=r(NFt,"BartForCausalLM"),NFt.forEach(t),Yko=r(HSe," (BART model)"),HSe.forEach(t),Kko=i(W),o1=n(W,"LI",{});var USe=s(o1);Fhe=n(USe,"STRONG",{});var qFt=s(Fhe);Zko=r(qFt,"bert"),qFt.forEach(t),eSo=r(USe," \u2014 "),kO=n(USe,"A",{href:!0});var jFt=s(kO);oSo=r(jFt,"BertLMHeadModel"),jFt.forEach(t),rSo=r(USe," (BERT model)"),USe.forEach(t),tSo=i(W),r1=n(W,"LI",{});var JSe=s(r1);The=n(JSe,"STRONG",{});var DFt=s(The);aSo=r(DFt,"bert-generation"),DFt.forEach(t),nSo=r(JSe," \u2014 "),SO=n(JSe,"A",{href:!0});var GFt=s(SO);sSo=r(GFt,"BertGenerationDecoder"),GFt.forEach(t),lSo=r(JSe," (Bert Generation model)"),JSe.forEach(t),iSo=i(W),t1=n(W,"LI",{});var YSe=s(t1);Mhe=n(YSe,"STRONG",{});var OFt=s(Mhe);dSo=r(OFt,"big_bird"),OFt.forEach(t),cSo=r(YSe," \u2014 "),RO=n(YSe,"A",{href:!0});var VFt=s(RO);fSo=r(VFt,"BigBirdForCausalLM"),VFt.forEach(t),mSo=r(YSe," (BigBird model)"),YSe.forEach(t),gSo=i(W),a1=n(W,"LI",{});var KSe=s(a1);Ehe=n(KSe,"STRONG",{});var XFt=s(Ehe);hSo=r(XFt,"bigbird_pegasus"),XFt.forEach(t),pSo=r(KSe," \u2014 "),PO=n(KSe,"A",{href:!0});var zFt=s(PO);_So=r(zFt,"BigBirdPegasusForCausalLM"),zFt.forEach(t),uSo=r(KSe," (BigBird-Pegasus model)"),KSe.forEach(t),bSo=i(W),n1=n(W,"LI",{});var ZSe=s(n1);Che=n(ZSe,"STRONG",{});var WFt=s(Che);vSo=r(WFt,"blenderbot"),WFt.forEach(t),FSo=r(ZSe," \u2014 "),BO=n(ZSe,"A",{href:!0});var QFt=s(BO);TSo=r(QFt,"BlenderbotForCausalLM"),QFt.forEach(t),MSo=r(ZSe," (Blenderbot model)"),ZSe.forEach(t),ESo=i(W),s1=n(W,"LI",{});var eRe=s(s1);whe=n(eRe,"STRONG",{});var HFt=s(whe);CSo=r(HFt,"blenderbot-small"),HFt.forEach(t),wSo=r(eRe," \u2014 "),IO=n(eRe,"A",{href:!0});var UFt=s(IO);ASo=r(UFt,"BlenderbotSmallForCausalLM"),UFt.forEach(t),LSo=r(eRe," (BlenderbotSmall model)"),eRe.forEach(t),ySo=i(W),l1=n(W,"LI",{});var oRe=s(l1);Ahe=n(oRe,"STRONG",{});var JFt=s(Ahe);xSo=r(JFt,"bloom"),JFt.forEach(t),$So=r(oRe," \u2014 "),NO=n(oRe,"A",{href:!0});var YFt=s(NO);kSo=r(YFt,"BloomForCausalLM"),YFt.forEach(t),SSo=r(oRe," (BLOOM model)"),oRe.forEach(t),RSo=i(W),i1=n(W,"LI",{});var rRe=s(i1);Lhe=n(rRe,"STRONG",{});var KFt=s(Lhe);PSo=r(KFt,"camembert"),KFt.forEach(t),BSo=r(rRe," \u2014 "),qO=n(rRe,"A",{href:!0});var ZFt=s(qO);ISo=r(ZFt,"CamembertForCausalLM"),ZFt.forEach(t),NSo=r(rRe," (CamemBERT model)"),rRe.forEach(t),qSo=i(W),d1=n(W,"LI",{});var tRe=s(d1);yhe=n(tRe,"STRONG",{});var e6t=s(yhe);jSo=r(e6t,"codegen"),e6t.forEach(t),DSo=r(tRe," \u2014 "),jO=n(tRe,"A",{href:!0});var o6t=s(jO);GSo=r(o6t,"CodeGenForCausalLM"),o6t.forEach(t),OSo=r(tRe," (CodeGen model)"),tRe.forEach(t),VSo=i(W),c1=n(W,"LI",{});var aRe=s(c1);xhe=n(aRe,"STRONG",{});var r6t=s(xhe);XSo=r(r6t,"ctrl"),r6t.forEach(t),zSo=r(aRe," \u2014 "),DO=n(aRe,"A",{href:!0});var t6t=s(DO);WSo=r(t6t,"CTRLLMHeadModel"),t6t.forEach(t),QSo=r(aRe," (CTRL model)"),aRe.forEach(t),HSo=i(W),f1=n(W,"LI",{});var nRe=s(f1);$he=n(nRe,"STRONG",{});var a6t=s($he);USo=r(a6t,"data2vec-text"),a6t.forEach(t),JSo=r(nRe," \u2014 "),GO=n(nRe,"A",{href:!0});var n6t=s(GO);YSo=r(n6t,"Data2VecTextForCausalLM"),n6t.forEach(t),KSo=r(nRe," (Data2VecText model)"),nRe.forEach(t),ZSo=i(W),m1=n(W,"LI",{});var sRe=s(m1);khe=n(sRe,"STRONG",{});var s6t=s(khe);eRo=r(s6t,"electra"),s6t.forEach(t),oRo=r(sRe," \u2014 "),OO=n(sRe,"A",{href:!0});var l6t=s(OO);rRo=r(l6t,"ElectraForCausalLM"),l6t.forEach(t),tRo=r(sRe," (ELECTRA model)"),sRe.forEach(t),aRo=i(W),g1=n(W,"LI",{});var lRe=s(g1);She=n(lRe,"STRONG",{});var i6t=s(She);nRo=r(i6t,"gpt2"),i6t.forEach(t),sRo=r(lRe," \u2014 "),VO=n(lRe,"A",{href:!0});var d6t=s(VO);lRo=r(d6t,"GPT2LMHeadModel"),d6t.forEach(t),iRo=r(lRe," (OpenAI GPT-2 model)"),lRe.forEach(t),dRo=i(W),h1=n(W,"LI",{});var iRe=s(h1);Rhe=n(iRe,"STRONG",{});var c6t=s(Rhe);cRo=r(c6t,"gpt_neo"),c6t.forEach(t),fRo=r(iRe," \u2014 "),XO=n(iRe,"A",{href:!0});var f6t=s(XO);mRo=r(f6t,"GPTNeoForCausalLM"),f6t.forEach(t),gRo=r(iRe," (GPT Neo model)"),iRe.forEach(t),hRo=i(W),p1=n(W,"LI",{});var dRe=s(p1);Phe=n(dRe,"STRONG",{});var m6t=s(Phe);pRo=r(m6t,"gpt_neox"),m6t.forEach(t),_Ro=r(dRe," \u2014 "),zO=n(dRe,"A",{href:!0});var g6t=s(zO);uRo=r(g6t,"GPTNeoXForCausalLM"),g6t.forEach(t),bRo=r(dRe," (GPT NeoX model)"),dRe.forEach(t),vRo=i(W),_1=n(W,"LI",{});var cRe=s(_1);Bhe=n(cRe,"STRONG",{});var h6t=s(Bhe);FRo=r(h6t,"gptj"),h6t.forEach(t),TRo=r(cRe," \u2014 "),WO=n(cRe,"A",{href:!0});var p6t=s(WO);MRo=r(p6t,"GPTJForCausalLM"),p6t.forEach(t),ERo=r(cRe," (GPT-J model)"),cRe.forEach(t),CRo=i(W),u1=n(W,"LI",{});var fRe=s(u1);Ihe=n(fRe,"STRONG",{});var _6t=s(Ihe);wRo=r(_6t,"marian"),_6t.forEach(t),ARo=r(fRe," \u2014 "),QO=n(fRe,"A",{href:!0});var u6t=s(QO);LRo=r(u6t,"MarianForCausalLM"),u6t.forEach(t),yRo=r(fRe," (Marian model)"),fRe.forEach(t),xRo=i(W),b1=n(W,"LI",{});var mRe=s(b1);Nhe=n(mRe,"STRONG",{});var b6t=s(Nhe);$Ro=r(b6t,"mbart"),b6t.forEach(t),kRo=r(mRe," \u2014 "),HO=n(mRe,"A",{href:!0});var v6t=s(HO);SRo=r(v6t,"MBartForCausalLM"),v6t.forEach(t),RRo=r(mRe," (mBART model)"),mRe.forEach(t),PRo=i(W),v1=n(W,"LI",{});var gRe=s(v1);qhe=n(gRe,"STRONG",{});var F6t=s(qhe);BRo=r(F6t,"megatron-bert"),F6t.forEach(t),IRo=r(gRe," \u2014 "),UO=n(gRe,"A",{href:!0});var T6t=s(UO);NRo=r(T6t,"MegatronBertForCausalLM"),T6t.forEach(t),qRo=r(gRe," (Megatron-BERT model)"),gRe.forEach(t),jRo=i(W),F1=n(W,"LI",{});var hRe=s(F1);jhe=n(hRe,"STRONG",{});var M6t=s(jhe);DRo=r(M6t,"mvp"),M6t.forEach(t),GRo=r(hRe," \u2014 "),JO=n(hRe,"A",{href:!0});var E6t=s(JO);ORo=r(E6t,"MvpForCausalLM"),E6t.forEach(t),VRo=r(hRe," (MVP model)"),hRe.forEach(t),XRo=i(W),T1=n(W,"LI",{});var pRe=s(T1);Dhe=n(pRe,"STRONG",{});var C6t=s(Dhe);zRo=r(C6t,"openai-gpt"),C6t.forEach(t),WRo=r(pRe," \u2014 "),YO=n(pRe,"A",{href:!0});var w6t=s(YO);QRo=r(w6t,"OpenAIGPTLMHeadModel"),w6t.forEach(t),HRo=r(pRe," (OpenAI GPT model)"),pRe.forEach(t),URo=i(W),M1=n(W,"LI",{});var _Re=s(M1);Ghe=n(_Re,"STRONG",{});var A6t=s(Ghe);JRo=r(A6t,"opt"),A6t.forEach(t),YRo=r(_Re," \u2014 "),KO=n(_Re,"A",{href:!0});var L6t=s(KO);KRo=r(L6t,"OPTForCausalLM"),L6t.forEach(t),ZRo=r(_Re," (OPT model)"),_Re.forEach(t),ePo=i(W),E1=n(W,"LI",{});var uRe=s(E1);Ohe=n(uRe,"STRONG",{});var y6t=s(Ohe);oPo=r(y6t,"pegasus"),y6t.forEach(t),rPo=r(uRe," \u2014 "),ZO=n(uRe,"A",{href:!0});var x6t=s(ZO);tPo=r(x6t,"PegasusForCausalLM"),x6t.forEach(t),aPo=r(uRe," (Pegasus model)"),uRe.forEach(t),nPo=i(W),C1=n(W,"LI",{});var bRe=s(C1);Vhe=n(bRe,"STRONG",{});var $6t=s(Vhe);sPo=r($6t,"plbart"),$6t.forEach(t),lPo=r(bRe," \u2014 "),eV=n(bRe,"A",{href:!0});var k6t=s(eV);iPo=r(k6t,"PLBartForCausalLM"),k6t.forEach(t),dPo=r(bRe," (PLBart model)"),bRe.forEach(t),cPo=i(W),w1=n(W,"LI",{});var vRe=s(w1);Xhe=n(vRe,"STRONG",{});var S6t=s(Xhe);fPo=r(S6t,"prophetnet"),S6t.forEach(t),mPo=r(vRe," \u2014 "),oV=n(vRe,"A",{href:!0});var R6t=s(oV);gPo=r(R6t,"ProphetNetForCausalLM"),R6t.forEach(t),hPo=r(vRe," (ProphetNet model)"),vRe.forEach(t),pPo=i(W),A1=n(W,"LI",{});var FRe=s(A1);zhe=n(FRe,"STRONG",{});var P6t=s(zhe);_Po=r(P6t,"qdqbert"),P6t.forEach(t),uPo=r(FRe," \u2014 "),rV=n(FRe,"A",{href:!0});var B6t=s(rV);bPo=r(B6t,"QDQBertLMHeadModel"),B6t.forEach(t),vPo=r(FRe," (QDQBert model)"),FRe.forEach(t),FPo=i(W),L1=n(W,"LI",{});var TRe=s(L1);Whe=n(TRe,"STRONG",{});var I6t=s(Whe);TPo=r(I6t,"reformer"),I6t.forEach(t),MPo=r(TRe," \u2014 "),tV=n(TRe,"A",{href:!0});var N6t=s(tV);EPo=r(N6t,"ReformerModelWithLMHead"),N6t.forEach(t),CPo=r(TRe," (Reformer model)"),TRe.forEach(t),wPo=i(W),y1=n(W,"LI",{});var MRe=s(y1);Qhe=n(MRe,"STRONG",{});var q6t=s(Qhe);APo=r(q6t,"rembert"),q6t.forEach(t),LPo=r(MRe," \u2014 "),aV=n(MRe,"A",{href:!0});var j6t=s(aV);yPo=r(j6t,"RemBertForCausalLM"),j6t.forEach(t),xPo=r(MRe," (RemBERT model)"),MRe.forEach(t),$Po=i(W),x1=n(W,"LI",{});var ERe=s(x1);Hhe=n(ERe,"STRONG",{});var D6t=s(Hhe);kPo=r(D6t,"roberta"),D6t.forEach(t),SPo=r(ERe," \u2014 "),nV=n(ERe,"A",{href:!0});var G6t=s(nV);RPo=r(G6t,"RobertaForCausalLM"),G6t.forEach(t),PPo=r(ERe," (RoBERTa model)"),ERe.forEach(t),BPo=i(W),$1=n(W,"LI",{});var CRe=s($1);Uhe=n(CRe,"STRONG",{});var O6t=s(Uhe);IPo=r(O6t,"roformer"),O6t.forEach(t),NPo=r(CRe," \u2014 "),sV=n(CRe,"A",{href:!0});var V6t=s(sV);qPo=r(V6t,"RoFormerForCausalLM"),V6t.forEach(t),jPo=r(CRe," (RoFormer model)"),CRe.forEach(t),DPo=i(W),k1=n(W,"LI",{});var wRe=s(k1);Jhe=n(wRe,"STRONG",{});var X6t=s(Jhe);GPo=r(X6t,"speech_to_text_2"),X6t.forEach(t),OPo=r(wRe," \u2014 "),lV=n(wRe,"A",{href:!0});var z6t=s(lV);VPo=r(z6t,"Speech2Text2ForCausalLM"),z6t.forEach(t),XPo=r(wRe," (Speech2Text2 model)"),wRe.forEach(t),zPo=i(W),S1=n(W,"LI",{});var ARe=s(S1);Yhe=n(ARe,"STRONG",{});var W6t=s(Yhe);WPo=r(W6t,"t5"),W6t.forEach(t),QPo=r(ARe," \u2014 "),iV=n(ARe,"A",{href:!0});var Q6t=s(iV);HPo=r(Q6t,"T5ForConditionalGeneration"),Q6t.forEach(t),UPo=r(ARe," (T5 model)"),ARe.forEach(t),JPo=i(W),R1=n(W,"LI",{});var LRe=s(R1);Khe=n(LRe,"STRONG",{});var H6t=s(Khe);YPo=r(H6t,"transfo-xl"),H6t.forEach(t),KPo=r(LRe," \u2014 "),dV=n(LRe,"A",{href:!0});var U6t=s(dV);ZPo=r(U6t,"TransfoXLLMHeadModel"),U6t.forEach(t),eBo=r(LRe," (Transformer-XL model)"),LRe.forEach(t),oBo=i(W),P1=n(W,"LI",{});var yRe=s(P1);Zhe=n(yRe,"STRONG",{});var J6t=s(Zhe);rBo=r(J6t,"trocr"),J6t.forEach(t),tBo=r(yRe," \u2014 "),cV=n(yRe,"A",{href:!0});var Y6t=s(cV);aBo=r(Y6t,"TrOCRForCausalLM"),Y6t.forEach(t),nBo=r(yRe," (TrOCR model)"),yRe.forEach(t),sBo=i(W),B1=n(W,"LI",{});var xRe=s(B1);epe=n(xRe,"STRONG",{});var K6t=s(epe);lBo=r(K6t,"xglm"),K6t.forEach(t),iBo=r(xRe," \u2014 "),fV=n(xRe,"A",{href:!0});var Z6t=s(fV);dBo=r(Z6t,"XGLMForCausalLM"),Z6t.forEach(t),cBo=r(xRe," (XGLM model)"),xRe.forEach(t),fBo=i(W),I1=n(W,"LI",{});var $Re=s(I1);ope=n($Re,"STRONG",{});var eTt=s(ope);mBo=r(eTt,"xlm"),eTt.forEach(t),gBo=r($Re," \u2014 "),mV=n($Re,"A",{href:!0});var oTt=s(mV);hBo=r(oTt,"XLMWithLMHeadModel"),oTt.forEach(t),pBo=r($Re," (XLM model)"),$Re.forEach(t),_Bo=i(W),N1=n(W,"LI",{});var kRe=s(N1);rpe=n(kRe,"STRONG",{});var rTt=s(rpe);uBo=r(rTt,"xlm-prophetnet"),rTt.forEach(t),bBo=r(kRe," \u2014 "),gV=n(kRe,"A",{href:!0});var tTt=s(gV);vBo=r(tTt,"XLMProphetNetForCausalLM"),tTt.forEach(t),FBo=r(kRe," (XLM-ProphetNet model)"),kRe.forEach(t),TBo=i(W),q1=n(W,"LI",{});var SRe=s(q1);tpe=n(SRe,"STRONG",{});var aTt=s(tpe);MBo=r(aTt,"xlm-roberta"),aTt.forEach(t),EBo=r(SRe," \u2014 "),hV=n(SRe,"A",{href:!0});var nTt=s(hV);CBo=r(nTt,"XLMRobertaForCausalLM"),nTt.forEach(t),wBo=r(SRe," (XLM-RoBERTa model)"),SRe.forEach(t),ABo=i(W),j1=n(W,"LI",{});var RRe=s(j1);ape=n(RRe,"STRONG",{});var sTt=s(ape);LBo=r(sTt,"xlm-roberta-xl"),sTt.forEach(t),yBo=r(RRe," \u2014 "),pV=n(RRe,"A",{href:!0});var lTt=s(pV);xBo=r(lTt,"XLMRobertaXLForCausalLM"),lTt.forEach(t),$Bo=r(RRe," (XLM-RoBERTa-XL model)"),RRe.forEach(t),kBo=i(W),D1=n(W,"LI",{});var PRe=s(D1);npe=n(PRe,"STRONG",{});var iTt=s(npe);SBo=r(iTt,"xlnet"),iTt.forEach(t),RBo=r(PRe," \u2014 "),_V=n(PRe,"A",{href:!0});var dTt=s(_V);PBo=r(dTt,"XLNetLMHeadModel"),dTt.forEach(t),BBo=r(PRe," (XLNet model)"),PRe.forEach(t),W.forEach(t),IBo=i(da),G1=n(da,"P",{});var BRe=s(G1);NBo=r(BRe,"The model is set in evaluation mode by default using "),spe=n(BRe,"CODE",{});var cTt=s(spe);qBo=r(cTt,"model.eval()"),cTt.forEach(t),jBo=r(BRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=n(BRe,"CODE",{});var fTt=s(lpe);DBo=r(fTt,"model.train()"),fTt.forEach(t),BRe.forEach(t),GBo=i(da),T(O1.$$.fragment,da),da.forEach(t),ll.forEach(t),Sze=i(f),Zi=n(f,"H2",{class:!0});var qQe=s(Zi);V1=n(qQe,"A",{id:!0,class:!0,href:!0});var mTt=s(V1);ipe=n(mTt,"SPAN",{});var gTt=s(ipe);T(dy.$$.fragment,gTt),gTt.forEach(t),mTt.forEach(t),OBo=i(qQe),dpe=n(qQe,"SPAN",{});var hTt=s(dpe);VBo=r(hTt,"AutoModelForMaskedLM"),hTt.forEach(t),qQe.forEach(t),Rze=i(f),Po=n(f,"DIV",{class:!0});var il=s(Po);T(cy.$$.fragment,il),XBo=i(il),ed=n(il,"P",{});var Ete=s(ed);zBo=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uV=n(Ete,"A",{href:!0});var pTt=s(uV);WBo=r(pTt,"from_pretrained()"),pTt.forEach(t),QBo=r(Ete," class method or the "),bV=n(Ete,"A",{href:!0});var _Tt=s(bV);HBo=r(_Tt,"from_config()"),_Tt.forEach(t),UBo=r(Ete,` class
method.`),Ete.forEach(t),JBo=i(il),fy=n(il,"P",{});var jQe=s(fy);YBo=r(jQe,"This class cannot be instantiated directly using "),cpe=n(jQe,"CODE",{});var uTt=s(cpe);KBo=r(uTt,"__init__()"),uTt.forEach(t),ZBo=r(jQe," (throws an error)."),jQe.forEach(t),eIo=i(il),ft=n(il,"DIV",{class:!0});var kA=s(ft);T(my.$$.fragment,kA),oIo=i(kA),fpe=n(kA,"P",{});var bTt=s(fpe);rIo=r(bTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bTt.forEach(t),tIo=i(kA),od=n(kA,"P",{});var Cte=s(od);aIo=r(Cte,`Note:
Loading a model from its configuration file does `),mpe=n(Cte,"STRONG",{});var vTt=s(mpe);nIo=r(vTt,"not"),vTt.forEach(t),sIo=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(Cte,"A",{href:!0});var FTt=s(vV);lIo=r(FTt,"from_pretrained()"),FTt.forEach(t),iIo=r(Cte," to load the model weights."),Cte.forEach(t),dIo=i(kA),T(X1.$$.fragment,kA),kA.forEach(t),cIo=i(il),eo=n(il,"DIV",{class:!0});var ca=s(eo);T(gy.$$.fragment,ca),fIo=i(ca),gpe=n(ca,"P",{});var TTt=s(gpe);mIo=r(TTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TTt.forEach(t),gIo=i(ca),ja=n(ca,"P",{});var SA=s(ja);hIo=r(SA,"The model class to instantiate is selected based on the "),hpe=n(SA,"CODE",{});var MTt=s(hpe);pIo=r(MTt,"model_type"),MTt.forEach(t),_Io=r(SA,` property of the config object (either
passed as an argument or loaded from `),ppe=n(SA,"CODE",{});var ETt=s(ppe);uIo=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),bIo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=n(SA,"CODE",{});var CTt=s(_pe);vIo=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),FIo=r(SA,":"),SA.forEach(t),TIo=i(ca),Q=n(ca,"UL",{});var H=s(Q);z1=n(H,"LI",{});var IRe=s(z1);upe=n(IRe,"STRONG",{});var wTt=s(upe);MIo=r(wTt,"albert"),wTt.forEach(t),EIo=r(IRe," \u2014 "),FV=n(IRe,"A",{href:!0});var ATt=s(FV);CIo=r(ATt,"AlbertForMaskedLM"),ATt.forEach(t),wIo=r(IRe," (ALBERT model)"),IRe.forEach(t),AIo=i(H),W1=n(H,"LI",{});var NRe=s(W1);bpe=n(NRe,"STRONG",{});var LTt=s(bpe);LIo=r(LTt,"bart"),LTt.forEach(t),yIo=r(NRe," \u2014 "),TV=n(NRe,"A",{href:!0});var yTt=s(TV);xIo=r(yTt,"BartForConditionalGeneration"),yTt.forEach(t),$Io=r(NRe," (BART model)"),NRe.forEach(t),kIo=i(H),Q1=n(H,"LI",{});var qRe=s(Q1);vpe=n(qRe,"STRONG",{});var xTt=s(vpe);SIo=r(xTt,"bert"),xTt.forEach(t),RIo=r(qRe," \u2014 "),MV=n(qRe,"A",{href:!0});var $Tt=s(MV);PIo=r($Tt,"BertForMaskedLM"),$Tt.forEach(t),BIo=r(qRe," (BERT model)"),qRe.forEach(t),IIo=i(H),H1=n(H,"LI",{});var jRe=s(H1);Fpe=n(jRe,"STRONG",{});var kTt=s(Fpe);NIo=r(kTt,"big_bird"),kTt.forEach(t),qIo=r(jRe," \u2014 "),EV=n(jRe,"A",{href:!0});var STt=s(EV);jIo=r(STt,"BigBirdForMaskedLM"),STt.forEach(t),DIo=r(jRe," (BigBird model)"),jRe.forEach(t),GIo=i(H),U1=n(H,"LI",{});var DRe=s(U1);Tpe=n(DRe,"STRONG",{});var RTt=s(Tpe);OIo=r(RTt,"camembert"),RTt.forEach(t),VIo=r(DRe," \u2014 "),CV=n(DRe,"A",{href:!0});var PTt=s(CV);XIo=r(PTt,"CamembertForMaskedLM"),PTt.forEach(t),zIo=r(DRe," (CamemBERT model)"),DRe.forEach(t),WIo=i(H),J1=n(H,"LI",{});var GRe=s(J1);Mpe=n(GRe,"STRONG",{});var BTt=s(Mpe);QIo=r(BTt,"convbert"),BTt.forEach(t),HIo=r(GRe," \u2014 "),wV=n(GRe,"A",{href:!0});var ITt=s(wV);UIo=r(ITt,"ConvBertForMaskedLM"),ITt.forEach(t),JIo=r(GRe," (ConvBERT model)"),GRe.forEach(t),YIo=i(H),Y1=n(H,"LI",{});var ORe=s(Y1);Epe=n(ORe,"STRONG",{});var NTt=s(Epe);KIo=r(NTt,"data2vec-text"),NTt.forEach(t),ZIo=r(ORe," \u2014 "),AV=n(ORe,"A",{href:!0});var qTt=s(AV);eNo=r(qTt,"Data2VecTextForMaskedLM"),qTt.forEach(t),oNo=r(ORe," (Data2VecText model)"),ORe.forEach(t),rNo=i(H),K1=n(H,"LI",{});var VRe=s(K1);Cpe=n(VRe,"STRONG",{});var jTt=s(Cpe);tNo=r(jTt,"deberta"),jTt.forEach(t),aNo=r(VRe," \u2014 "),LV=n(VRe,"A",{href:!0});var DTt=s(LV);nNo=r(DTt,"DebertaForMaskedLM"),DTt.forEach(t),sNo=r(VRe," (DeBERTa model)"),VRe.forEach(t),lNo=i(H),Z1=n(H,"LI",{});var XRe=s(Z1);wpe=n(XRe,"STRONG",{});var GTt=s(wpe);iNo=r(GTt,"deberta-v2"),GTt.forEach(t),dNo=r(XRe," \u2014 "),yV=n(XRe,"A",{href:!0});var OTt=s(yV);cNo=r(OTt,"DebertaV2ForMaskedLM"),OTt.forEach(t),fNo=r(XRe," (DeBERTa-v2 model)"),XRe.forEach(t),mNo=i(H),eb=n(H,"LI",{});var zRe=s(eb);Ape=n(zRe,"STRONG",{});var VTt=s(Ape);gNo=r(VTt,"distilbert"),VTt.forEach(t),hNo=r(zRe," \u2014 "),xV=n(zRe,"A",{href:!0});var XTt=s(xV);pNo=r(XTt,"DistilBertForMaskedLM"),XTt.forEach(t),_No=r(zRe," (DistilBERT model)"),zRe.forEach(t),uNo=i(H),ob=n(H,"LI",{});var WRe=s(ob);Lpe=n(WRe,"STRONG",{});var zTt=s(Lpe);bNo=r(zTt,"electra"),zTt.forEach(t),vNo=r(WRe," \u2014 "),$V=n(WRe,"A",{href:!0});var WTt=s($V);FNo=r(WTt,"ElectraForMaskedLM"),WTt.forEach(t),TNo=r(WRe," (ELECTRA model)"),WRe.forEach(t),MNo=i(H),rb=n(H,"LI",{});var QRe=s(rb);ype=n(QRe,"STRONG",{});var QTt=s(ype);ENo=r(QTt,"flaubert"),QTt.forEach(t),CNo=r(QRe," \u2014 "),kV=n(QRe,"A",{href:!0});var HTt=s(kV);wNo=r(HTt,"FlaubertWithLMHeadModel"),HTt.forEach(t),ANo=r(QRe," (FlauBERT model)"),QRe.forEach(t),LNo=i(H),tb=n(H,"LI",{});var HRe=s(tb);xpe=n(HRe,"STRONG",{});var UTt=s(xpe);yNo=r(UTt,"fnet"),UTt.forEach(t),xNo=r(HRe," \u2014 "),SV=n(HRe,"A",{href:!0});var JTt=s(SV);$No=r(JTt,"FNetForMaskedLM"),JTt.forEach(t),kNo=r(HRe," (FNet model)"),HRe.forEach(t),SNo=i(H),ab=n(H,"LI",{});var URe=s(ab);$pe=n(URe,"STRONG",{});var YTt=s($pe);RNo=r(YTt,"funnel"),YTt.forEach(t),PNo=r(URe," \u2014 "),RV=n(URe,"A",{href:!0});var KTt=s(RV);BNo=r(KTt,"FunnelForMaskedLM"),KTt.forEach(t),INo=r(URe," (Funnel Transformer model)"),URe.forEach(t),NNo=i(H),nb=n(H,"LI",{});var JRe=s(nb);kpe=n(JRe,"STRONG",{});var ZTt=s(kpe);qNo=r(ZTt,"ibert"),ZTt.forEach(t),jNo=r(JRe," \u2014 "),PV=n(JRe,"A",{href:!0});var e8t=s(PV);DNo=r(e8t,"IBertForMaskedLM"),e8t.forEach(t),GNo=r(JRe," (I-BERT model)"),JRe.forEach(t),ONo=i(H),sb=n(H,"LI",{});var YRe=s(sb);Spe=n(YRe,"STRONG",{});var o8t=s(Spe);VNo=r(o8t,"layoutlm"),o8t.forEach(t),XNo=r(YRe," \u2014 "),BV=n(YRe,"A",{href:!0});var r8t=s(BV);zNo=r(r8t,"LayoutLMForMaskedLM"),r8t.forEach(t),WNo=r(YRe," (LayoutLM model)"),YRe.forEach(t),QNo=i(H),lb=n(H,"LI",{});var KRe=s(lb);Rpe=n(KRe,"STRONG",{});var t8t=s(Rpe);HNo=r(t8t,"longformer"),t8t.forEach(t),UNo=r(KRe," \u2014 "),IV=n(KRe,"A",{href:!0});var a8t=s(IV);JNo=r(a8t,"LongformerForMaskedLM"),a8t.forEach(t),YNo=r(KRe," (Longformer model)"),KRe.forEach(t),KNo=i(H),ib=n(H,"LI",{});var ZRe=s(ib);Ppe=n(ZRe,"STRONG",{});var n8t=s(Ppe);ZNo=r(n8t,"luke"),n8t.forEach(t),eqo=r(ZRe," \u2014 "),NV=n(ZRe,"A",{href:!0});var s8t=s(NV);oqo=r(s8t,"LukeForMaskedLM"),s8t.forEach(t),rqo=r(ZRe," (LUKE model)"),ZRe.forEach(t),tqo=i(H),db=n(H,"LI",{});var ePe=s(db);Bpe=n(ePe,"STRONG",{});var l8t=s(Bpe);aqo=r(l8t,"mbart"),l8t.forEach(t),nqo=r(ePe," \u2014 "),qV=n(ePe,"A",{href:!0});var i8t=s(qV);sqo=r(i8t,"MBartForConditionalGeneration"),i8t.forEach(t),lqo=r(ePe," (mBART model)"),ePe.forEach(t),iqo=i(H),cb=n(H,"LI",{});var oPe=s(cb);Ipe=n(oPe,"STRONG",{});var d8t=s(Ipe);dqo=r(d8t,"megatron-bert"),d8t.forEach(t),cqo=r(oPe," \u2014 "),jV=n(oPe,"A",{href:!0});var c8t=s(jV);fqo=r(c8t,"MegatronBertForMaskedLM"),c8t.forEach(t),mqo=r(oPe," (Megatron-BERT model)"),oPe.forEach(t),gqo=i(H),fb=n(H,"LI",{});var rPe=s(fb);Npe=n(rPe,"STRONG",{});var f8t=s(Npe);hqo=r(f8t,"mobilebert"),f8t.forEach(t),pqo=r(rPe," \u2014 "),DV=n(rPe,"A",{href:!0});var m8t=s(DV);_qo=r(m8t,"MobileBertForMaskedLM"),m8t.forEach(t),uqo=r(rPe," (MobileBERT model)"),rPe.forEach(t),bqo=i(H),mb=n(H,"LI",{});var tPe=s(mb);qpe=n(tPe,"STRONG",{});var g8t=s(qpe);vqo=r(g8t,"mpnet"),g8t.forEach(t),Fqo=r(tPe," \u2014 "),GV=n(tPe,"A",{href:!0});var h8t=s(GV);Tqo=r(h8t,"MPNetForMaskedLM"),h8t.forEach(t),Mqo=r(tPe," (MPNet model)"),tPe.forEach(t),Eqo=i(H),gb=n(H,"LI",{});var aPe=s(gb);jpe=n(aPe,"STRONG",{});var p8t=s(jpe);Cqo=r(p8t,"mvp"),p8t.forEach(t),wqo=r(aPe," \u2014 "),OV=n(aPe,"A",{href:!0});var _8t=s(OV);Aqo=r(_8t,"MvpForConditionalGeneration"),_8t.forEach(t),Lqo=r(aPe," (MVP model)"),aPe.forEach(t),yqo=i(H),hb=n(H,"LI",{});var nPe=s(hb);Dpe=n(nPe,"STRONG",{});var u8t=s(Dpe);xqo=r(u8t,"nezha"),u8t.forEach(t),$qo=r(nPe," \u2014 "),VV=n(nPe,"A",{href:!0});var b8t=s(VV);kqo=r(b8t,"NezhaForMaskedLM"),b8t.forEach(t),Sqo=r(nPe," (Nezha model)"),nPe.forEach(t),Rqo=i(H),pb=n(H,"LI",{});var sPe=s(pb);Gpe=n(sPe,"STRONG",{});var v8t=s(Gpe);Pqo=r(v8t,"nystromformer"),v8t.forEach(t),Bqo=r(sPe," \u2014 "),XV=n(sPe,"A",{href:!0});var F8t=s(XV);Iqo=r(F8t,"NystromformerForMaskedLM"),F8t.forEach(t),Nqo=r(sPe," (Nystr\xF6mformer model)"),sPe.forEach(t),qqo=i(H),_b=n(H,"LI",{});var lPe=s(_b);Ope=n(lPe,"STRONG",{});var T8t=s(Ope);jqo=r(T8t,"perceiver"),T8t.forEach(t),Dqo=r(lPe," \u2014 "),zV=n(lPe,"A",{href:!0});var M8t=s(zV);Gqo=r(M8t,"PerceiverForMaskedLM"),M8t.forEach(t),Oqo=r(lPe," (Perceiver model)"),lPe.forEach(t),Vqo=i(H),ub=n(H,"LI",{});var iPe=s(ub);Vpe=n(iPe,"STRONG",{});var E8t=s(Vpe);Xqo=r(E8t,"qdqbert"),E8t.forEach(t),zqo=r(iPe," \u2014 "),WV=n(iPe,"A",{href:!0});var C8t=s(WV);Wqo=r(C8t,"QDQBertForMaskedLM"),C8t.forEach(t),Qqo=r(iPe," (QDQBert model)"),iPe.forEach(t),Hqo=i(H),bb=n(H,"LI",{});var dPe=s(bb);Xpe=n(dPe,"STRONG",{});var w8t=s(Xpe);Uqo=r(w8t,"reformer"),w8t.forEach(t),Jqo=r(dPe," \u2014 "),QV=n(dPe,"A",{href:!0});var A8t=s(QV);Yqo=r(A8t,"ReformerForMaskedLM"),A8t.forEach(t),Kqo=r(dPe," (Reformer model)"),dPe.forEach(t),Zqo=i(H),vb=n(H,"LI",{});var cPe=s(vb);zpe=n(cPe,"STRONG",{});var L8t=s(zpe);ejo=r(L8t,"rembert"),L8t.forEach(t),ojo=r(cPe," \u2014 "),HV=n(cPe,"A",{href:!0});var y8t=s(HV);rjo=r(y8t,"RemBertForMaskedLM"),y8t.forEach(t),tjo=r(cPe," (RemBERT model)"),cPe.forEach(t),ajo=i(H),Fb=n(H,"LI",{});var fPe=s(Fb);Wpe=n(fPe,"STRONG",{});var x8t=s(Wpe);njo=r(x8t,"roberta"),x8t.forEach(t),sjo=r(fPe," \u2014 "),UV=n(fPe,"A",{href:!0});var $8t=s(UV);ljo=r($8t,"RobertaForMaskedLM"),$8t.forEach(t),ijo=r(fPe," (RoBERTa model)"),fPe.forEach(t),djo=i(H),Tb=n(H,"LI",{});var mPe=s(Tb);Qpe=n(mPe,"STRONG",{});var k8t=s(Qpe);cjo=r(k8t,"roformer"),k8t.forEach(t),fjo=r(mPe," \u2014 "),JV=n(mPe,"A",{href:!0});var S8t=s(JV);mjo=r(S8t,"RoFormerForMaskedLM"),S8t.forEach(t),gjo=r(mPe," (RoFormer model)"),mPe.forEach(t),hjo=i(H),Mb=n(H,"LI",{});var gPe=s(Mb);Hpe=n(gPe,"STRONG",{});var R8t=s(Hpe);pjo=r(R8t,"squeezebert"),R8t.forEach(t),_jo=r(gPe," \u2014 "),YV=n(gPe,"A",{href:!0});var P8t=s(YV);ujo=r(P8t,"SqueezeBertForMaskedLM"),P8t.forEach(t),bjo=r(gPe," (SqueezeBERT model)"),gPe.forEach(t),vjo=i(H),Eb=n(H,"LI",{});var hPe=s(Eb);Upe=n(hPe,"STRONG",{});var B8t=s(Upe);Fjo=r(B8t,"tapas"),B8t.forEach(t),Tjo=r(hPe," \u2014 "),KV=n(hPe,"A",{href:!0});var I8t=s(KV);Mjo=r(I8t,"TapasForMaskedLM"),I8t.forEach(t),Ejo=r(hPe," (TAPAS model)"),hPe.forEach(t),Cjo=i(H),Cb=n(H,"LI",{});var pPe=s(Cb);Jpe=n(pPe,"STRONG",{});var N8t=s(Jpe);wjo=r(N8t,"wav2vec2"),N8t.forEach(t),Ajo=r(pPe," \u2014 "),Ype=n(pPe,"CODE",{});var q8t=s(Ype);Ljo=r(q8t,"Wav2Vec2ForMaskedLM"),q8t.forEach(t),yjo=r(pPe," (Wav2Vec2 model)"),pPe.forEach(t),xjo=i(H),wb=n(H,"LI",{});var _Pe=s(wb);Kpe=n(_Pe,"STRONG",{});var j8t=s(Kpe);$jo=r(j8t,"xlm"),j8t.forEach(t),kjo=r(_Pe," \u2014 "),ZV=n(_Pe,"A",{href:!0});var D8t=s(ZV);Sjo=r(D8t,"XLMWithLMHeadModel"),D8t.forEach(t),Rjo=r(_Pe," (XLM model)"),_Pe.forEach(t),Pjo=i(H),Ab=n(H,"LI",{});var uPe=s(Ab);Zpe=n(uPe,"STRONG",{});var G8t=s(Zpe);Bjo=r(G8t,"xlm-roberta"),G8t.forEach(t),Ijo=r(uPe," \u2014 "),eX=n(uPe,"A",{href:!0});var O8t=s(eX);Njo=r(O8t,"XLMRobertaForMaskedLM"),O8t.forEach(t),qjo=r(uPe," (XLM-RoBERTa model)"),uPe.forEach(t),jjo=i(H),Lb=n(H,"LI",{});var bPe=s(Lb);e_e=n(bPe,"STRONG",{});var V8t=s(e_e);Djo=r(V8t,"xlm-roberta-xl"),V8t.forEach(t),Gjo=r(bPe," \u2014 "),oX=n(bPe,"A",{href:!0});var X8t=s(oX);Ojo=r(X8t,"XLMRobertaXLForMaskedLM"),X8t.forEach(t),Vjo=r(bPe," (XLM-RoBERTa-XL model)"),bPe.forEach(t),Xjo=i(H),yb=n(H,"LI",{});var vPe=s(yb);o_e=n(vPe,"STRONG",{});var z8t=s(o_e);zjo=r(z8t,"yoso"),z8t.forEach(t),Wjo=r(vPe," \u2014 "),rX=n(vPe,"A",{href:!0});var W8t=s(rX);Qjo=r(W8t,"YosoForMaskedLM"),W8t.forEach(t),Hjo=r(vPe," (YOSO model)"),vPe.forEach(t),H.forEach(t),Ujo=i(ca),xb=n(ca,"P",{});var FPe=s(xb);Jjo=r(FPe,"The model is set in evaluation mode by default using "),r_e=n(FPe,"CODE",{});var Q8t=s(r_e);Yjo=r(Q8t,"model.eval()"),Q8t.forEach(t),Kjo=r(FPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=n(FPe,"CODE",{});var H8t=s(t_e);Zjo=r(H8t,"model.train()"),H8t.forEach(t),FPe.forEach(t),eDo=i(ca),T($b.$$.fragment,ca),ca.forEach(t),il.forEach(t),Pze=i(f),rd=n(f,"H2",{class:!0});var DQe=s(rd);kb=n(DQe,"A",{id:!0,class:!0,href:!0});var U8t=s(kb);a_e=n(U8t,"SPAN",{});var J8t=s(a_e);T(hy.$$.fragment,J8t),J8t.forEach(t),U8t.forEach(t),oDo=i(DQe),n_e=n(DQe,"SPAN",{});var Y8t=s(n_e);rDo=r(Y8t,"AutoModelForSeq2SeqLM"),Y8t.forEach(t),DQe.forEach(t),Bze=i(f),Bo=n(f,"DIV",{class:!0});var dl=s(Bo);T(py.$$.fragment,dl),tDo=i(dl),td=n(dl,"P",{});var wte=s(td);aDo=r(wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tX=n(wte,"A",{href:!0});var K8t=s(tX);nDo=r(K8t,"from_pretrained()"),K8t.forEach(t),sDo=r(wte," class method or the "),aX=n(wte,"A",{href:!0});var Z8t=s(aX);lDo=r(Z8t,"from_config()"),Z8t.forEach(t),iDo=r(wte,` class
method.`),wte.forEach(t),dDo=i(dl),_y=n(dl,"P",{});var GQe=s(_y);cDo=r(GQe,"This class cannot be instantiated directly using "),s_e=n(GQe,"CODE",{});var eMt=s(s_e);fDo=r(eMt,"__init__()"),eMt.forEach(t),mDo=r(GQe," (throws an error)."),GQe.forEach(t),gDo=i(dl),mt=n(dl,"DIV",{class:!0});var RA=s(mt);T(uy.$$.fragment,RA),hDo=i(RA),l_e=n(RA,"P",{});var oMt=s(l_e);pDo=r(oMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oMt.forEach(t),_Do=i(RA),ad=n(RA,"P",{});var Ate=s(ad);uDo=r(Ate,`Note:
Loading a model from its configuration file does `),i_e=n(Ate,"STRONG",{});var rMt=s(i_e);bDo=r(rMt,"not"),rMt.forEach(t),vDo=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=n(Ate,"A",{href:!0});var tMt=s(nX);FDo=r(tMt,"from_pretrained()"),tMt.forEach(t),TDo=r(Ate," to load the model weights."),Ate.forEach(t),MDo=i(RA),T(Sb.$$.fragment,RA),RA.forEach(t),EDo=i(dl),oo=n(dl,"DIV",{class:!0});var fa=s(oo);T(by.$$.fragment,fa),CDo=i(fa),d_e=n(fa,"P",{});var aMt=s(d_e);wDo=r(aMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aMt.forEach(t),ADo=i(fa),Da=n(fa,"P",{});var PA=s(Da);LDo=r(PA,"The model class to instantiate is selected based on the "),c_e=n(PA,"CODE",{});var nMt=s(c_e);yDo=r(nMt,"model_type"),nMt.forEach(t),xDo=r(PA,` property of the config object (either
passed as an argument or loaded from `),f_e=n(PA,"CODE",{});var sMt=s(f_e);$Do=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),kDo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(PA,"CODE",{});var lMt=s(m_e);SDo=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),RDo=r(PA,":"),PA.forEach(t),PDo=i(fa),me=n(fa,"UL",{});var ue=s(me);Rb=n(ue,"LI",{});var TPe=s(Rb);g_e=n(TPe,"STRONG",{});var iMt=s(g_e);BDo=r(iMt,"bart"),iMt.forEach(t),IDo=r(TPe," \u2014 "),sX=n(TPe,"A",{href:!0});var dMt=s(sX);NDo=r(dMt,"BartForConditionalGeneration"),dMt.forEach(t),qDo=r(TPe," (BART model)"),TPe.forEach(t),jDo=i(ue),Pb=n(ue,"LI",{});var MPe=s(Pb);h_e=n(MPe,"STRONG",{});var cMt=s(h_e);DDo=r(cMt,"bigbird_pegasus"),cMt.forEach(t),GDo=r(MPe," \u2014 "),lX=n(MPe,"A",{href:!0});var fMt=s(lX);ODo=r(fMt,"BigBirdPegasusForConditionalGeneration"),fMt.forEach(t),VDo=r(MPe," (BigBird-Pegasus model)"),MPe.forEach(t),XDo=i(ue),Bb=n(ue,"LI",{});var EPe=s(Bb);p_e=n(EPe,"STRONG",{});var mMt=s(p_e);zDo=r(mMt,"blenderbot"),mMt.forEach(t),WDo=r(EPe," \u2014 "),iX=n(EPe,"A",{href:!0});var gMt=s(iX);QDo=r(gMt,"BlenderbotForConditionalGeneration"),gMt.forEach(t),HDo=r(EPe," (Blenderbot model)"),EPe.forEach(t),UDo=i(ue),Ib=n(ue,"LI",{});var CPe=s(Ib);__e=n(CPe,"STRONG",{});var hMt=s(__e);JDo=r(hMt,"blenderbot-small"),hMt.forEach(t),YDo=r(CPe," \u2014 "),dX=n(CPe,"A",{href:!0});var pMt=s(dX);KDo=r(pMt,"BlenderbotSmallForConditionalGeneration"),pMt.forEach(t),ZDo=r(CPe," (BlenderbotSmall model)"),CPe.forEach(t),eGo=i(ue),Nb=n(ue,"LI",{});var wPe=s(Nb);u_e=n(wPe,"STRONG",{});var _Mt=s(u_e);oGo=r(_Mt,"encoder-decoder"),_Mt.forEach(t),rGo=r(wPe," \u2014 "),cX=n(wPe,"A",{href:!0});var uMt=s(cX);tGo=r(uMt,"EncoderDecoderModel"),uMt.forEach(t),aGo=r(wPe," (Encoder decoder model)"),wPe.forEach(t),nGo=i(ue),qb=n(ue,"LI",{});var APe=s(qb);b_e=n(APe,"STRONG",{});var bMt=s(b_e);sGo=r(bMt,"fsmt"),bMt.forEach(t),lGo=r(APe," \u2014 "),fX=n(APe,"A",{href:!0});var vMt=s(fX);iGo=r(vMt,"FSMTForConditionalGeneration"),vMt.forEach(t),dGo=r(APe," (FairSeq Machine-Translation model)"),APe.forEach(t),cGo=i(ue),jb=n(ue,"LI",{});var LPe=s(jb);v_e=n(LPe,"STRONG",{});var FMt=s(v_e);fGo=r(FMt,"led"),FMt.forEach(t),mGo=r(LPe," \u2014 "),mX=n(LPe,"A",{href:!0});var TMt=s(mX);gGo=r(TMt,"LEDForConditionalGeneration"),TMt.forEach(t),hGo=r(LPe," (LED model)"),LPe.forEach(t),pGo=i(ue),Db=n(ue,"LI",{});var yPe=s(Db);F_e=n(yPe,"STRONG",{});var MMt=s(F_e);_Go=r(MMt,"longt5"),MMt.forEach(t),uGo=r(yPe," \u2014 "),gX=n(yPe,"A",{href:!0});var EMt=s(gX);bGo=r(EMt,"LongT5ForConditionalGeneration"),EMt.forEach(t),vGo=r(yPe," (LongT5 model)"),yPe.forEach(t),FGo=i(ue),Gb=n(ue,"LI",{});var xPe=s(Gb);T_e=n(xPe,"STRONG",{});var CMt=s(T_e);TGo=r(CMt,"m2m_100"),CMt.forEach(t),MGo=r(xPe," \u2014 "),hX=n(xPe,"A",{href:!0});var wMt=s(hX);EGo=r(wMt,"M2M100ForConditionalGeneration"),wMt.forEach(t),CGo=r(xPe," (M2M100 model)"),xPe.forEach(t),wGo=i(ue),Ob=n(ue,"LI",{});var $Pe=s(Ob);M_e=n($Pe,"STRONG",{});var AMt=s(M_e);AGo=r(AMt,"marian"),AMt.forEach(t),LGo=r($Pe," \u2014 "),pX=n($Pe,"A",{href:!0});var LMt=s(pX);yGo=r(LMt,"MarianMTModel"),LMt.forEach(t),xGo=r($Pe," (Marian model)"),$Pe.forEach(t),$Go=i(ue),Vb=n(ue,"LI",{});var kPe=s(Vb);E_e=n(kPe,"STRONG",{});var yMt=s(E_e);kGo=r(yMt,"mbart"),yMt.forEach(t),SGo=r(kPe," \u2014 "),_X=n(kPe,"A",{href:!0});var xMt=s(_X);RGo=r(xMt,"MBartForConditionalGeneration"),xMt.forEach(t),PGo=r(kPe," (mBART model)"),kPe.forEach(t),BGo=i(ue),Xb=n(ue,"LI",{});var SPe=s(Xb);C_e=n(SPe,"STRONG",{});var $Mt=s(C_e);IGo=r($Mt,"mt5"),$Mt.forEach(t),NGo=r(SPe," \u2014 "),uX=n(SPe,"A",{href:!0});var kMt=s(uX);qGo=r(kMt,"MT5ForConditionalGeneration"),kMt.forEach(t),jGo=r(SPe," (MT5 model)"),SPe.forEach(t),DGo=i(ue),zb=n(ue,"LI",{});var RPe=s(zb);w_e=n(RPe,"STRONG",{});var SMt=s(w_e);GGo=r(SMt,"mvp"),SMt.forEach(t),OGo=r(RPe," \u2014 "),bX=n(RPe,"A",{href:!0});var RMt=s(bX);VGo=r(RMt,"MvpForConditionalGeneration"),RMt.forEach(t),XGo=r(RPe," (MVP model)"),RPe.forEach(t),zGo=i(ue),Wb=n(ue,"LI",{});var PPe=s(Wb);A_e=n(PPe,"STRONG",{});var PMt=s(A_e);WGo=r(PMt,"nllb"),PMt.forEach(t),QGo=r(PPe," \u2014 "),vX=n(PPe,"A",{href:!0});var BMt=s(vX);HGo=r(BMt,"M2M100ForConditionalGeneration"),BMt.forEach(t),UGo=r(PPe," (NLLB model)"),PPe.forEach(t),JGo=i(ue),Qb=n(ue,"LI",{});var BPe=s(Qb);L_e=n(BPe,"STRONG",{});var IMt=s(L_e);YGo=r(IMt,"pegasus"),IMt.forEach(t),KGo=r(BPe," \u2014 "),FX=n(BPe,"A",{href:!0});var NMt=s(FX);ZGo=r(NMt,"PegasusForConditionalGeneration"),NMt.forEach(t),eOo=r(BPe," (Pegasus model)"),BPe.forEach(t),oOo=i(ue),Hb=n(ue,"LI",{});var IPe=s(Hb);y_e=n(IPe,"STRONG",{});var qMt=s(y_e);rOo=r(qMt,"plbart"),qMt.forEach(t),tOo=r(IPe," \u2014 "),TX=n(IPe,"A",{href:!0});var jMt=s(TX);aOo=r(jMt,"PLBartForConditionalGeneration"),jMt.forEach(t),nOo=r(IPe," (PLBart model)"),IPe.forEach(t),sOo=i(ue),Ub=n(ue,"LI",{});var NPe=s(Ub);x_e=n(NPe,"STRONG",{});var DMt=s(x_e);lOo=r(DMt,"prophetnet"),DMt.forEach(t),iOo=r(NPe," \u2014 "),MX=n(NPe,"A",{href:!0});var GMt=s(MX);dOo=r(GMt,"ProphetNetForConditionalGeneration"),GMt.forEach(t),cOo=r(NPe," (ProphetNet model)"),NPe.forEach(t),fOo=i(ue),Jb=n(ue,"LI",{});var qPe=s(Jb);$_e=n(qPe,"STRONG",{});var OMt=s($_e);mOo=r(OMt,"t5"),OMt.forEach(t),gOo=r(qPe," \u2014 "),EX=n(qPe,"A",{href:!0});var VMt=s(EX);hOo=r(VMt,"T5ForConditionalGeneration"),VMt.forEach(t),pOo=r(qPe," (T5 model)"),qPe.forEach(t),_Oo=i(ue),Yb=n(ue,"LI",{});var jPe=s(Yb);k_e=n(jPe,"STRONG",{});var XMt=s(k_e);uOo=r(XMt,"xlm-prophetnet"),XMt.forEach(t),bOo=r(jPe," \u2014 "),CX=n(jPe,"A",{href:!0});var zMt=s(CX);vOo=r(zMt,"XLMProphetNetForConditionalGeneration"),zMt.forEach(t),FOo=r(jPe," (XLM-ProphetNet model)"),jPe.forEach(t),ue.forEach(t),TOo=i(fa),Kb=n(fa,"P",{});var DPe=s(Kb);MOo=r(DPe,"The model is set in evaluation mode by default using "),S_e=n(DPe,"CODE",{});var WMt=s(S_e);EOo=r(WMt,"model.eval()"),WMt.forEach(t),COo=r(DPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=n(DPe,"CODE",{});var QMt=s(R_e);wOo=r(QMt,"model.train()"),QMt.forEach(t),DPe.forEach(t),AOo=i(fa),T(Zb.$$.fragment,fa),fa.forEach(t),dl.forEach(t),Ize=i(f),nd=n(f,"H2",{class:!0});var OQe=s(nd);ev=n(OQe,"A",{id:!0,class:!0,href:!0});var HMt=s(ev);P_e=n(HMt,"SPAN",{});var UMt=s(P_e);T(vy.$$.fragment,UMt),UMt.forEach(t),HMt.forEach(t),LOo=i(OQe),B_e=n(OQe,"SPAN",{});var JMt=s(B_e);yOo=r(JMt,"AutoModelForSequenceClassification"),JMt.forEach(t),OQe.forEach(t),Nze=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(Fy.$$.fragment,cl),xOo=i(cl),sd=n(cl,"P",{});var Lte=s(sd);$Oo=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wX=n(Lte,"A",{href:!0});var YMt=s(wX);kOo=r(YMt,"from_pretrained()"),YMt.forEach(t),SOo=r(Lte," class method or the "),AX=n(Lte,"A",{href:!0});var KMt=s(AX);ROo=r(KMt,"from_config()"),KMt.forEach(t),POo=r(Lte,` class
method.`),Lte.forEach(t),BOo=i(cl),Ty=n(cl,"P",{});var VQe=s(Ty);IOo=r(VQe,"This class cannot be instantiated directly using "),I_e=n(VQe,"CODE",{});var ZMt=s(I_e);NOo=r(ZMt,"__init__()"),ZMt.forEach(t),qOo=r(VQe," (throws an error)."),VQe.forEach(t),jOo=i(cl),gt=n(cl,"DIV",{class:!0});var BA=s(gt);T(My.$$.fragment,BA),DOo=i(BA),N_e=n(BA,"P",{});var e4t=s(N_e);GOo=r(e4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),e4t.forEach(t),OOo=i(BA),ld=n(BA,"P",{});var yte=s(ld);VOo=r(yte,`Note:
Loading a model from its configuration file does `),q_e=n(yte,"STRONG",{});var o4t=s(q_e);XOo=r(o4t,"not"),o4t.forEach(t),zOo=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(yte,"A",{href:!0});var r4t=s(LX);WOo=r(r4t,"from_pretrained()"),r4t.forEach(t),QOo=r(yte," to load the model weights."),yte.forEach(t),HOo=i(BA),T(ov.$$.fragment,BA),BA.forEach(t),UOo=i(cl),ro=n(cl,"DIV",{class:!0});var ma=s(ro);T(Ey.$$.fragment,ma),JOo=i(ma),j_e=n(ma,"P",{});var t4t=s(j_e);YOo=r(t4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t4t.forEach(t),KOo=i(ma),Ga=n(ma,"P",{});var IA=s(Ga);ZOo=r(IA,"The model class to instantiate is selected based on the "),D_e=n(IA,"CODE",{});var a4t=s(D_e);eVo=r(a4t,"model_type"),a4t.forEach(t),oVo=r(IA,` property of the config object (either
passed as an argument or loaded from `),G_e=n(IA,"CODE",{});var n4t=s(G_e);rVo=r(n4t,"pretrained_model_name_or_path"),n4t.forEach(t),tVo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(IA,"CODE",{});var s4t=s(O_e);aVo=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),nVo=r(IA,":"),IA.forEach(t),sVo=i(ma),B=n(ma,"UL",{});var j=s(B);rv=n(j,"LI",{});var GPe=s(rv);V_e=n(GPe,"STRONG",{});var l4t=s(V_e);lVo=r(l4t,"albert"),l4t.forEach(t),iVo=r(GPe," \u2014 "),yX=n(GPe,"A",{href:!0});var i4t=s(yX);dVo=r(i4t,"AlbertForSequenceClassification"),i4t.forEach(t),cVo=r(GPe," (ALBERT model)"),GPe.forEach(t),fVo=i(j),tv=n(j,"LI",{});var OPe=s(tv);X_e=n(OPe,"STRONG",{});var d4t=s(X_e);mVo=r(d4t,"bart"),d4t.forEach(t),gVo=r(OPe," \u2014 "),xX=n(OPe,"A",{href:!0});var c4t=s(xX);hVo=r(c4t,"BartForSequenceClassification"),c4t.forEach(t),pVo=r(OPe," (BART model)"),OPe.forEach(t),_Vo=i(j),av=n(j,"LI",{});var VPe=s(av);z_e=n(VPe,"STRONG",{});var f4t=s(z_e);uVo=r(f4t,"bert"),f4t.forEach(t),bVo=r(VPe," \u2014 "),$X=n(VPe,"A",{href:!0});var m4t=s($X);vVo=r(m4t,"BertForSequenceClassification"),m4t.forEach(t),FVo=r(VPe," (BERT model)"),VPe.forEach(t),TVo=i(j),nv=n(j,"LI",{});var XPe=s(nv);W_e=n(XPe,"STRONG",{});var g4t=s(W_e);MVo=r(g4t,"big_bird"),g4t.forEach(t),EVo=r(XPe," \u2014 "),kX=n(XPe,"A",{href:!0});var h4t=s(kX);CVo=r(h4t,"BigBirdForSequenceClassification"),h4t.forEach(t),wVo=r(XPe," (BigBird model)"),XPe.forEach(t),AVo=i(j),sv=n(j,"LI",{});var zPe=s(sv);Q_e=n(zPe,"STRONG",{});var p4t=s(Q_e);LVo=r(p4t,"bigbird_pegasus"),p4t.forEach(t),yVo=r(zPe," \u2014 "),SX=n(zPe,"A",{href:!0});var _4t=s(SX);xVo=r(_4t,"BigBirdPegasusForSequenceClassification"),_4t.forEach(t),$Vo=r(zPe," (BigBird-Pegasus model)"),zPe.forEach(t),kVo=i(j),lv=n(j,"LI",{});var WPe=s(lv);H_e=n(WPe,"STRONG",{});var u4t=s(H_e);SVo=r(u4t,"bloom"),u4t.forEach(t),RVo=r(WPe," \u2014 "),RX=n(WPe,"A",{href:!0});var b4t=s(RX);PVo=r(b4t,"BloomForSequenceClassification"),b4t.forEach(t),BVo=r(WPe," (BLOOM model)"),WPe.forEach(t),IVo=i(j),iv=n(j,"LI",{});var QPe=s(iv);U_e=n(QPe,"STRONG",{});var v4t=s(U_e);NVo=r(v4t,"camembert"),v4t.forEach(t),qVo=r(QPe," \u2014 "),PX=n(QPe,"A",{href:!0});var F4t=s(PX);jVo=r(F4t,"CamembertForSequenceClassification"),F4t.forEach(t),DVo=r(QPe," (CamemBERT model)"),QPe.forEach(t),GVo=i(j),dv=n(j,"LI",{});var HPe=s(dv);J_e=n(HPe,"STRONG",{});var T4t=s(J_e);OVo=r(T4t,"canine"),T4t.forEach(t),VVo=r(HPe," \u2014 "),BX=n(HPe,"A",{href:!0});var M4t=s(BX);XVo=r(M4t,"CanineForSequenceClassification"),M4t.forEach(t),zVo=r(HPe," (CANINE model)"),HPe.forEach(t),WVo=i(j),cv=n(j,"LI",{});var UPe=s(cv);Y_e=n(UPe,"STRONG",{});var E4t=s(Y_e);QVo=r(E4t,"convbert"),E4t.forEach(t),HVo=r(UPe," \u2014 "),IX=n(UPe,"A",{href:!0});var C4t=s(IX);UVo=r(C4t,"ConvBertForSequenceClassification"),C4t.forEach(t),JVo=r(UPe," (ConvBERT model)"),UPe.forEach(t),YVo=i(j),fv=n(j,"LI",{});var JPe=s(fv);K_e=n(JPe,"STRONG",{});var w4t=s(K_e);KVo=r(w4t,"ctrl"),w4t.forEach(t),ZVo=r(JPe," \u2014 "),NX=n(JPe,"A",{href:!0});var A4t=s(NX);eXo=r(A4t,"CTRLForSequenceClassification"),A4t.forEach(t),oXo=r(JPe," (CTRL model)"),JPe.forEach(t),rXo=i(j),mv=n(j,"LI",{});var YPe=s(mv);Z_e=n(YPe,"STRONG",{});var L4t=s(Z_e);tXo=r(L4t,"data2vec-text"),L4t.forEach(t),aXo=r(YPe," \u2014 "),qX=n(YPe,"A",{href:!0});var y4t=s(qX);nXo=r(y4t,"Data2VecTextForSequenceClassification"),y4t.forEach(t),sXo=r(YPe," (Data2VecText model)"),YPe.forEach(t),lXo=i(j),gv=n(j,"LI",{});var KPe=s(gv);eue=n(KPe,"STRONG",{});var x4t=s(eue);iXo=r(x4t,"deberta"),x4t.forEach(t),dXo=r(KPe," \u2014 "),jX=n(KPe,"A",{href:!0});var $4t=s(jX);cXo=r($4t,"DebertaForSequenceClassification"),$4t.forEach(t),fXo=r(KPe," (DeBERTa model)"),KPe.forEach(t),mXo=i(j),hv=n(j,"LI",{});var ZPe=s(hv);oue=n(ZPe,"STRONG",{});var k4t=s(oue);gXo=r(k4t,"deberta-v2"),k4t.forEach(t),hXo=r(ZPe," \u2014 "),DX=n(ZPe,"A",{href:!0});var S4t=s(DX);pXo=r(S4t,"DebertaV2ForSequenceClassification"),S4t.forEach(t),_Xo=r(ZPe," (DeBERTa-v2 model)"),ZPe.forEach(t),uXo=i(j),pv=n(j,"LI",{});var eBe=s(pv);rue=n(eBe,"STRONG",{});var R4t=s(rue);bXo=r(R4t,"distilbert"),R4t.forEach(t),vXo=r(eBe," \u2014 "),GX=n(eBe,"A",{href:!0});var P4t=s(GX);FXo=r(P4t,"DistilBertForSequenceClassification"),P4t.forEach(t),TXo=r(eBe," (DistilBERT model)"),eBe.forEach(t),MXo=i(j),_v=n(j,"LI",{});var oBe=s(_v);tue=n(oBe,"STRONG",{});var B4t=s(tue);EXo=r(B4t,"electra"),B4t.forEach(t),CXo=r(oBe," \u2014 "),OX=n(oBe,"A",{href:!0});var I4t=s(OX);wXo=r(I4t,"ElectraForSequenceClassification"),I4t.forEach(t),AXo=r(oBe," (ELECTRA model)"),oBe.forEach(t),LXo=i(j),uv=n(j,"LI",{});var rBe=s(uv);aue=n(rBe,"STRONG",{});var N4t=s(aue);yXo=r(N4t,"flaubert"),N4t.forEach(t),xXo=r(rBe," \u2014 "),VX=n(rBe,"A",{href:!0});var q4t=s(VX);$Xo=r(q4t,"FlaubertForSequenceClassification"),q4t.forEach(t),kXo=r(rBe," (FlauBERT model)"),rBe.forEach(t),SXo=i(j),bv=n(j,"LI",{});var tBe=s(bv);nue=n(tBe,"STRONG",{});var j4t=s(nue);RXo=r(j4t,"fnet"),j4t.forEach(t),PXo=r(tBe," \u2014 "),XX=n(tBe,"A",{href:!0});var D4t=s(XX);BXo=r(D4t,"FNetForSequenceClassification"),D4t.forEach(t),IXo=r(tBe," (FNet model)"),tBe.forEach(t),NXo=i(j),vv=n(j,"LI",{});var aBe=s(vv);sue=n(aBe,"STRONG",{});var G4t=s(sue);qXo=r(G4t,"funnel"),G4t.forEach(t),jXo=r(aBe," \u2014 "),zX=n(aBe,"A",{href:!0});var O4t=s(zX);DXo=r(O4t,"FunnelForSequenceClassification"),O4t.forEach(t),GXo=r(aBe," (Funnel Transformer model)"),aBe.forEach(t),OXo=i(j),Fv=n(j,"LI",{});var nBe=s(Fv);lue=n(nBe,"STRONG",{});var V4t=s(lue);VXo=r(V4t,"gpt2"),V4t.forEach(t),XXo=r(nBe," \u2014 "),WX=n(nBe,"A",{href:!0});var X4t=s(WX);zXo=r(X4t,"GPT2ForSequenceClassification"),X4t.forEach(t),WXo=r(nBe," (OpenAI GPT-2 model)"),nBe.forEach(t),QXo=i(j),Tv=n(j,"LI",{});var sBe=s(Tv);iue=n(sBe,"STRONG",{});var z4t=s(iue);HXo=r(z4t,"gpt_neo"),z4t.forEach(t),UXo=r(sBe," \u2014 "),QX=n(sBe,"A",{href:!0});var W4t=s(QX);JXo=r(W4t,"GPTNeoForSequenceClassification"),W4t.forEach(t),YXo=r(sBe," (GPT Neo model)"),sBe.forEach(t),KXo=i(j),Mv=n(j,"LI",{});var lBe=s(Mv);due=n(lBe,"STRONG",{});var Q4t=s(due);ZXo=r(Q4t,"gptj"),Q4t.forEach(t),ezo=r(lBe," \u2014 "),HX=n(lBe,"A",{href:!0});var H4t=s(HX);ozo=r(H4t,"GPTJForSequenceClassification"),H4t.forEach(t),rzo=r(lBe," (GPT-J model)"),lBe.forEach(t),tzo=i(j),Ev=n(j,"LI",{});var iBe=s(Ev);cue=n(iBe,"STRONG",{});var U4t=s(cue);azo=r(U4t,"ibert"),U4t.forEach(t),nzo=r(iBe," \u2014 "),UX=n(iBe,"A",{href:!0});var J4t=s(UX);szo=r(J4t,"IBertForSequenceClassification"),J4t.forEach(t),lzo=r(iBe," (I-BERT model)"),iBe.forEach(t),izo=i(j),Cv=n(j,"LI",{});var dBe=s(Cv);fue=n(dBe,"STRONG",{});var Y4t=s(fue);dzo=r(Y4t,"layoutlm"),Y4t.forEach(t),czo=r(dBe," \u2014 "),JX=n(dBe,"A",{href:!0});var K4t=s(JX);fzo=r(K4t,"LayoutLMForSequenceClassification"),K4t.forEach(t),mzo=r(dBe," (LayoutLM model)"),dBe.forEach(t),gzo=i(j),wv=n(j,"LI",{});var cBe=s(wv);mue=n(cBe,"STRONG",{});var Z4t=s(mue);hzo=r(Z4t,"layoutlmv2"),Z4t.forEach(t),pzo=r(cBe," \u2014 "),YX=n(cBe,"A",{href:!0});var eEt=s(YX);_zo=r(eEt,"LayoutLMv2ForSequenceClassification"),eEt.forEach(t),uzo=r(cBe," (LayoutLMv2 model)"),cBe.forEach(t),bzo=i(j),Av=n(j,"LI",{});var fBe=s(Av);gue=n(fBe,"STRONG",{});var oEt=s(gue);vzo=r(oEt,"layoutlmv3"),oEt.forEach(t),Fzo=r(fBe," \u2014 "),KX=n(fBe,"A",{href:!0});var rEt=s(KX);Tzo=r(rEt,"LayoutLMv3ForSequenceClassification"),rEt.forEach(t),Mzo=r(fBe," (LayoutLMv3 model)"),fBe.forEach(t),Ezo=i(j),Lv=n(j,"LI",{});var mBe=s(Lv);hue=n(mBe,"STRONG",{});var tEt=s(hue);Czo=r(tEt,"led"),tEt.forEach(t),wzo=r(mBe," \u2014 "),ZX=n(mBe,"A",{href:!0});var aEt=s(ZX);Azo=r(aEt,"LEDForSequenceClassification"),aEt.forEach(t),Lzo=r(mBe," (LED model)"),mBe.forEach(t),yzo=i(j),yv=n(j,"LI",{});var gBe=s(yv);pue=n(gBe,"STRONG",{});var nEt=s(pue);xzo=r(nEt,"longformer"),nEt.forEach(t),$zo=r(gBe," \u2014 "),ez=n(gBe,"A",{href:!0});var sEt=s(ez);kzo=r(sEt,"LongformerForSequenceClassification"),sEt.forEach(t),Szo=r(gBe," (Longformer model)"),gBe.forEach(t),Rzo=i(j),xv=n(j,"LI",{});var hBe=s(xv);_ue=n(hBe,"STRONG",{});var lEt=s(_ue);Pzo=r(lEt,"mbart"),lEt.forEach(t),Bzo=r(hBe," \u2014 "),oz=n(hBe,"A",{href:!0});var iEt=s(oz);Izo=r(iEt,"MBartForSequenceClassification"),iEt.forEach(t),Nzo=r(hBe," (mBART model)"),hBe.forEach(t),qzo=i(j),$v=n(j,"LI",{});var pBe=s($v);uue=n(pBe,"STRONG",{});var dEt=s(uue);jzo=r(dEt,"megatron-bert"),dEt.forEach(t),Dzo=r(pBe," \u2014 "),rz=n(pBe,"A",{href:!0});var cEt=s(rz);Gzo=r(cEt,"MegatronBertForSequenceClassification"),cEt.forEach(t),Ozo=r(pBe," (Megatron-BERT model)"),pBe.forEach(t),Vzo=i(j),kv=n(j,"LI",{});var _Be=s(kv);bue=n(_Be,"STRONG",{});var fEt=s(bue);Xzo=r(fEt,"mobilebert"),fEt.forEach(t),zzo=r(_Be," \u2014 "),tz=n(_Be,"A",{href:!0});var mEt=s(tz);Wzo=r(mEt,"MobileBertForSequenceClassification"),mEt.forEach(t),Qzo=r(_Be," (MobileBERT model)"),_Be.forEach(t),Hzo=i(j),Sv=n(j,"LI",{});var uBe=s(Sv);vue=n(uBe,"STRONG",{});var gEt=s(vue);Uzo=r(gEt,"mpnet"),gEt.forEach(t),Jzo=r(uBe," \u2014 "),az=n(uBe,"A",{href:!0});var hEt=s(az);Yzo=r(hEt,"MPNetForSequenceClassification"),hEt.forEach(t),Kzo=r(uBe," (MPNet model)"),uBe.forEach(t),Zzo=i(j),Rv=n(j,"LI",{});var bBe=s(Rv);Fue=n(bBe,"STRONG",{});var pEt=s(Fue);eWo=r(pEt,"mvp"),pEt.forEach(t),oWo=r(bBe," \u2014 "),nz=n(bBe,"A",{href:!0});var _Et=s(nz);rWo=r(_Et,"MvpForSequenceClassification"),_Et.forEach(t),tWo=r(bBe," (MVP model)"),bBe.forEach(t),aWo=i(j),Pv=n(j,"LI",{});var vBe=s(Pv);Tue=n(vBe,"STRONG",{});var uEt=s(Tue);nWo=r(uEt,"nezha"),uEt.forEach(t),sWo=r(vBe," \u2014 "),sz=n(vBe,"A",{href:!0});var bEt=s(sz);lWo=r(bEt,"NezhaForSequenceClassification"),bEt.forEach(t),iWo=r(vBe," (Nezha model)"),vBe.forEach(t),dWo=i(j),Bv=n(j,"LI",{});var FBe=s(Bv);Mue=n(FBe,"STRONG",{});var vEt=s(Mue);cWo=r(vEt,"nystromformer"),vEt.forEach(t),fWo=r(FBe," \u2014 "),lz=n(FBe,"A",{href:!0});var FEt=s(lz);mWo=r(FEt,"NystromformerForSequenceClassification"),FEt.forEach(t),gWo=r(FBe," (Nystr\xF6mformer model)"),FBe.forEach(t),hWo=i(j),Iv=n(j,"LI",{});var TBe=s(Iv);Eue=n(TBe,"STRONG",{});var TEt=s(Eue);pWo=r(TEt,"openai-gpt"),TEt.forEach(t),_Wo=r(TBe," \u2014 "),iz=n(TBe,"A",{href:!0});var MEt=s(iz);uWo=r(MEt,"OpenAIGPTForSequenceClassification"),MEt.forEach(t),bWo=r(TBe," (OpenAI GPT model)"),TBe.forEach(t),vWo=i(j),Nv=n(j,"LI",{});var MBe=s(Nv);Cue=n(MBe,"STRONG",{});var EEt=s(Cue);FWo=r(EEt,"opt"),EEt.forEach(t),TWo=r(MBe," \u2014 "),dz=n(MBe,"A",{href:!0});var CEt=s(dz);MWo=r(CEt,"OPTForSequenceClassification"),CEt.forEach(t),EWo=r(MBe," (OPT model)"),MBe.forEach(t),CWo=i(j),qv=n(j,"LI",{});var EBe=s(qv);wue=n(EBe,"STRONG",{});var wEt=s(wue);wWo=r(wEt,"perceiver"),wEt.forEach(t),AWo=r(EBe," \u2014 "),cz=n(EBe,"A",{href:!0});var AEt=s(cz);LWo=r(AEt,"PerceiverForSequenceClassification"),AEt.forEach(t),yWo=r(EBe," (Perceiver model)"),EBe.forEach(t),xWo=i(j),jv=n(j,"LI",{});var CBe=s(jv);Aue=n(CBe,"STRONG",{});var LEt=s(Aue);$Wo=r(LEt,"plbart"),LEt.forEach(t),kWo=r(CBe," \u2014 "),fz=n(CBe,"A",{href:!0});var yEt=s(fz);SWo=r(yEt,"PLBartForSequenceClassification"),yEt.forEach(t),RWo=r(CBe," (PLBart model)"),CBe.forEach(t),PWo=i(j),Dv=n(j,"LI",{});var wBe=s(Dv);Lue=n(wBe,"STRONG",{});var xEt=s(Lue);BWo=r(xEt,"qdqbert"),xEt.forEach(t),IWo=r(wBe," \u2014 "),mz=n(wBe,"A",{href:!0});var $Et=s(mz);NWo=r($Et,"QDQBertForSequenceClassification"),$Et.forEach(t),qWo=r(wBe," (QDQBert model)"),wBe.forEach(t),jWo=i(j),Gv=n(j,"LI",{});var ABe=s(Gv);yue=n(ABe,"STRONG",{});var kEt=s(yue);DWo=r(kEt,"reformer"),kEt.forEach(t),GWo=r(ABe," \u2014 "),gz=n(ABe,"A",{href:!0});var SEt=s(gz);OWo=r(SEt,"ReformerForSequenceClassification"),SEt.forEach(t),VWo=r(ABe," (Reformer model)"),ABe.forEach(t),XWo=i(j),Ov=n(j,"LI",{});var LBe=s(Ov);xue=n(LBe,"STRONG",{});var REt=s(xue);zWo=r(REt,"rembert"),REt.forEach(t),WWo=r(LBe," \u2014 "),hz=n(LBe,"A",{href:!0});var PEt=s(hz);QWo=r(PEt,"RemBertForSequenceClassification"),PEt.forEach(t),HWo=r(LBe," (RemBERT model)"),LBe.forEach(t),UWo=i(j),Vv=n(j,"LI",{});var yBe=s(Vv);$ue=n(yBe,"STRONG",{});var BEt=s($ue);JWo=r(BEt,"roberta"),BEt.forEach(t),YWo=r(yBe," \u2014 "),pz=n(yBe,"A",{href:!0});var IEt=s(pz);KWo=r(IEt,"RobertaForSequenceClassification"),IEt.forEach(t),ZWo=r(yBe," (RoBERTa model)"),yBe.forEach(t),eQo=i(j),Xv=n(j,"LI",{});var xBe=s(Xv);kue=n(xBe,"STRONG",{});var NEt=s(kue);oQo=r(NEt,"roformer"),NEt.forEach(t),rQo=r(xBe," \u2014 "),_z=n(xBe,"A",{href:!0});var qEt=s(_z);tQo=r(qEt,"RoFormerForSequenceClassification"),qEt.forEach(t),aQo=r(xBe," (RoFormer model)"),xBe.forEach(t),nQo=i(j),zv=n(j,"LI",{});var $Be=s(zv);Sue=n($Be,"STRONG",{});var jEt=s(Sue);sQo=r(jEt,"squeezebert"),jEt.forEach(t),lQo=r($Be," \u2014 "),uz=n($Be,"A",{href:!0});var DEt=s(uz);iQo=r(DEt,"SqueezeBertForSequenceClassification"),DEt.forEach(t),dQo=r($Be," (SqueezeBERT model)"),$Be.forEach(t),cQo=i(j),Wv=n(j,"LI",{});var kBe=s(Wv);Rue=n(kBe,"STRONG",{});var GEt=s(Rue);fQo=r(GEt,"tapas"),GEt.forEach(t),mQo=r(kBe," \u2014 "),bz=n(kBe,"A",{href:!0});var OEt=s(bz);gQo=r(OEt,"TapasForSequenceClassification"),OEt.forEach(t),hQo=r(kBe," (TAPAS model)"),kBe.forEach(t),pQo=i(j),Qv=n(j,"LI",{});var SBe=s(Qv);Pue=n(SBe,"STRONG",{});var VEt=s(Pue);_Qo=r(VEt,"transfo-xl"),VEt.forEach(t),uQo=r(SBe," \u2014 "),vz=n(SBe,"A",{href:!0});var XEt=s(vz);bQo=r(XEt,"TransfoXLForSequenceClassification"),XEt.forEach(t),vQo=r(SBe," (Transformer-XL model)"),SBe.forEach(t),FQo=i(j),Hv=n(j,"LI",{});var RBe=s(Hv);Bue=n(RBe,"STRONG",{});var zEt=s(Bue);TQo=r(zEt,"xlm"),zEt.forEach(t),MQo=r(RBe," \u2014 "),Fz=n(RBe,"A",{href:!0});var WEt=s(Fz);EQo=r(WEt,"XLMForSequenceClassification"),WEt.forEach(t),CQo=r(RBe," (XLM model)"),RBe.forEach(t),wQo=i(j),Uv=n(j,"LI",{});var PBe=s(Uv);Iue=n(PBe,"STRONG",{});var QEt=s(Iue);AQo=r(QEt,"xlm-roberta"),QEt.forEach(t),LQo=r(PBe," \u2014 "),Tz=n(PBe,"A",{href:!0});var HEt=s(Tz);yQo=r(HEt,"XLMRobertaForSequenceClassification"),HEt.forEach(t),xQo=r(PBe," (XLM-RoBERTa model)"),PBe.forEach(t),$Qo=i(j),Jv=n(j,"LI",{});var BBe=s(Jv);Nue=n(BBe,"STRONG",{});var UEt=s(Nue);kQo=r(UEt,"xlm-roberta-xl"),UEt.forEach(t),SQo=r(BBe," \u2014 "),Mz=n(BBe,"A",{href:!0});var JEt=s(Mz);RQo=r(JEt,"XLMRobertaXLForSequenceClassification"),JEt.forEach(t),PQo=r(BBe," (XLM-RoBERTa-XL model)"),BBe.forEach(t),BQo=i(j),Yv=n(j,"LI",{});var IBe=s(Yv);que=n(IBe,"STRONG",{});var YEt=s(que);IQo=r(YEt,"xlnet"),YEt.forEach(t),NQo=r(IBe," \u2014 "),Ez=n(IBe,"A",{href:!0});var KEt=s(Ez);qQo=r(KEt,"XLNetForSequenceClassification"),KEt.forEach(t),jQo=r(IBe," (XLNet model)"),IBe.forEach(t),DQo=i(j),Kv=n(j,"LI",{});var NBe=s(Kv);jue=n(NBe,"STRONG",{});var ZEt=s(jue);GQo=r(ZEt,"yoso"),ZEt.forEach(t),OQo=r(NBe," \u2014 "),Cz=n(NBe,"A",{href:!0});var eCt=s(Cz);VQo=r(eCt,"YosoForSequenceClassification"),eCt.forEach(t),XQo=r(NBe," (YOSO model)"),NBe.forEach(t),j.forEach(t),zQo=i(ma),Zv=n(ma,"P",{});var qBe=s(Zv);WQo=r(qBe,"The model is set in evaluation mode by default using "),Due=n(qBe,"CODE",{});var oCt=s(Due);QQo=r(oCt,"model.eval()"),oCt.forEach(t),HQo=r(qBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(qBe,"CODE",{});var rCt=s(Gue);UQo=r(rCt,"model.train()"),rCt.forEach(t),qBe.forEach(t),JQo=i(ma),T(e3.$$.fragment,ma),ma.forEach(t),cl.forEach(t),qze=i(f),id=n(f,"H2",{class:!0});var XQe=s(id);o3=n(XQe,"A",{id:!0,class:!0,href:!0});var tCt=s(o3);Oue=n(tCt,"SPAN",{});var aCt=s(Oue);T(Cy.$$.fragment,aCt),aCt.forEach(t),tCt.forEach(t),YQo=i(XQe),Vue=n(XQe,"SPAN",{});var nCt=s(Vue);KQo=r(nCt,"AutoModelForMultipleChoice"),nCt.forEach(t),XQe.forEach(t),jze=i(f),No=n(f,"DIV",{class:!0});var fl=s(No);T(wy.$$.fragment,fl),ZQo=i(fl),dd=n(fl,"P",{});var xte=s(dd);eHo=r(xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wz=n(xte,"A",{href:!0});var sCt=s(wz);oHo=r(sCt,"from_pretrained()"),sCt.forEach(t),rHo=r(xte," class method or the "),Az=n(xte,"A",{href:!0});var lCt=s(Az);tHo=r(lCt,"from_config()"),lCt.forEach(t),aHo=r(xte,` class
method.`),xte.forEach(t),nHo=i(fl),Ay=n(fl,"P",{});var zQe=s(Ay);sHo=r(zQe,"This class cannot be instantiated directly using "),Xue=n(zQe,"CODE",{});var iCt=s(Xue);lHo=r(iCt,"__init__()"),iCt.forEach(t),iHo=r(zQe," (throws an error)."),zQe.forEach(t),dHo=i(fl),ht=n(fl,"DIV",{class:!0});var NA=s(ht);T(Ly.$$.fragment,NA),cHo=i(NA),zue=n(NA,"P",{});var dCt=s(zue);fHo=r(dCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dCt.forEach(t),mHo=i(NA),cd=n(NA,"P",{});var $te=s(cd);gHo=r($te,`Note:
Loading a model from its configuration file does `),Wue=n($te,"STRONG",{});var cCt=s(Wue);hHo=r(cCt,"not"),cCt.forEach(t),pHo=r($te,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n($te,"A",{href:!0});var fCt=s(Lz);_Ho=r(fCt,"from_pretrained()"),fCt.forEach(t),uHo=r($te," to load the model weights."),$te.forEach(t),bHo=i(NA),T(r3.$$.fragment,NA),NA.forEach(t),vHo=i(fl),to=n(fl,"DIV",{class:!0});var ga=s(to);T(yy.$$.fragment,ga),FHo=i(ga),Que=n(ga,"P",{});var mCt=s(Que);THo=r(mCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mCt.forEach(t),MHo=i(ga),Oa=n(ga,"P",{});var qA=s(Oa);EHo=r(qA,"The model class to instantiate is selected based on the "),Hue=n(qA,"CODE",{});var gCt=s(Hue);CHo=r(gCt,"model_type"),gCt.forEach(t),wHo=r(qA,` property of the config object (either
passed as an argument or loaded from `),Uue=n(qA,"CODE",{});var hCt=s(Uue);AHo=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),LHo=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(qA,"CODE",{});var pCt=s(Jue);yHo=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),xHo=r(qA,":"),qA.forEach(t),$Ho=i(ga),Z=n(ga,"UL",{});var ee=s(Z);t3=n(ee,"LI",{});var jBe=s(t3);Yue=n(jBe,"STRONG",{});var _Ct=s(Yue);kHo=r(_Ct,"albert"),_Ct.forEach(t),SHo=r(jBe," \u2014 "),yz=n(jBe,"A",{href:!0});var uCt=s(yz);RHo=r(uCt,"AlbertForMultipleChoice"),uCt.forEach(t),PHo=r(jBe," (ALBERT model)"),jBe.forEach(t),BHo=i(ee),a3=n(ee,"LI",{});var DBe=s(a3);Kue=n(DBe,"STRONG",{});var bCt=s(Kue);IHo=r(bCt,"bert"),bCt.forEach(t),NHo=r(DBe," \u2014 "),xz=n(DBe,"A",{href:!0});var vCt=s(xz);qHo=r(vCt,"BertForMultipleChoice"),vCt.forEach(t),jHo=r(DBe," (BERT model)"),DBe.forEach(t),DHo=i(ee),n3=n(ee,"LI",{});var GBe=s(n3);Zue=n(GBe,"STRONG",{});var FCt=s(Zue);GHo=r(FCt,"big_bird"),FCt.forEach(t),OHo=r(GBe," \u2014 "),$z=n(GBe,"A",{href:!0});var TCt=s($z);VHo=r(TCt,"BigBirdForMultipleChoice"),TCt.forEach(t),XHo=r(GBe," (BigBird model)"),GBe.forEach(t),zHo=i(ee),s3=n(ee,"LI",{});var OBe=s(s3);e2e=n(OBe,"STRONG",{});var MCt=s(e2e);WHo=r(MCt,"camembert"),MCt.forEach(t),QHo=r(OBe," \u2014 "),kz=n(OBe,"A",{href:!0});var ECt=s(kz);HHo=r(ECt,"CamembertForMultipleChoice"),ECt.forEach(t),UHo=r(OBe," (CamemBERT model)"),OBe.forEach(t),JHo=i(ee),l3=n(ee,"LI",{});var VBe=s(l3);o2e=n(VBe,"STRONG",{});var CCt=s(o2e);YHo=r(CCt,"canine"),CCt.forEach(t),KHo=r(VBe," \u2014 "),Sz=n(VBe,"A",{href:!0});var wCt=s(Sz);ZHo=r(wCt,"CanineForMultipleChoice"),wCt.forEach(t),eUo=r(VBe," (CANINE model)"),VBe.forEach(t),oUo=i(ee),i3=n(ee,"LI",{});var XBe=s(i3);r2e=n(XBe,"STRONG",{});var ACt=s(r2e);rUo=r(ACt,"convbert"),ACt.forEach(t),tUo=r(XBe," \u2014 "),Rz=n(XBe,"A",{href:!0});var LCt=s(Rz);aUo=r(LCt,"ConvBertForMultipleChoice"),LCt.forEach(t),nUo=r(XBe," (ConvBERT model)"),XBe.forEach(t),sUo=i(ee),d3=n(ee,"LI",{});var zBe=s(d3);t2e=n(zBe,"STRONG",{});var yCt=s(t2e);lUo=r(yCt,"data2vec-text"),yCt.forEach(t),iUo=r(zBe," \u2014 "),Pz=n(zBe,"A",{href:!0});var xCt=s(Pz);dUo=r(xCt,"Data2VecTextForMultipleChoice"),xCt.forEach(t),cUo=r(zBe," (Data2VecText model)"),zBe.forEach(t),fUo=i(ee),c3=n(ee,"LI",{});var WBe=s(c3);a2e=n(WBe,"STRONG",{});var $Ct=s(a2e);mUo=r($Ct,"deberta-v2"),$Ct.forEach(t),gUo=r(WBe," \u2014 "),Bz=n(WBe,"A",{href:!0});var kCt=s(Bz);hUo=r(kCt,"DebertaV2ForMultipleChoice"),kCt.forEach(t),pUo=r(WBe," (DeBERTa-v2 model)"),WBe.forEach(t),_Uo=i(ee),f3=n(ee,"LI",{});var QBe=s(f3);n2e=n(QBe,"STRONG",{});var SCt=s(n2e);uUo=r(SCt,"distilbert"),SCt.forEach(t),bUo=r(QBe," \u2014 "),Iz=n(QBe,"A",{href:!0});var RCt=s(Iz);vUo=r(RCt,"DistilBertForMultipleChoice"),RCt.forEach(t),FUo=r(QBe," (DistilBERT model)"),QBe.forEach(t),TUo=i(ee),m3=n(ee,"LI",{});var HBe=s(m3);s2e=n(HBe,"STRONG",{});var PCt=s(s2e);MUo=r(PCt,"electra"),PCt.forEach(t),EUo=r(HBe," \u2014 "),Nz=n(HBe,"A",{href:!0});var BCt=s(Nz);CUo=r(BCt,"ElectraForMultipleChoice"),BCt.forEach(t),wUo=r(HBe," (ELECTRA model)"),HBe.forEach(t),AUo=i(ee),g3=n(ee,"LI",{});var UBe=s(g3);l2e=n(UBe,"STRONG",{});var ICt=s(l2e);LUo=r(ICt,"flaubert"),ICt.forEach(t),yUo=r(UBe," \u2014 "),qz=n(UBe,"A",{href:!0});var NCt=s(qz);xUo=r(NCt,"FlaubertForMultipleChoice"),NCt.forEach(t),$Uo=r(UBe," (FlauBERT model)"),UBe.forEach(t),kUo=i(ee),h3=n(ee,"LI",{});var JBe=s(h3);i2e=n(JBe,"STRONG",{});var qCt=s(i2e);SUo=r(qCt,"fnet"),qCt.forEach(t),RUo=r(JBe," \u2014 "),jz=n(JBe,"A",{href:!0});var jCt=s(jz);PUo=r(jCt,"FNetForMultipleChoice"),jCt.forEach(t),BUo=r(JBe," (FNet model)"),JBe.forEach(t),IUo=i(ee),p3=n(ee,"LI",{});var YBe=s(p3);d2e=n(YBe,"STRONG",{});var DCt=s(d2e);NUo=r(DCt,"funnel"),DCt.forEach(t),qUo=r(YBe," \u2014 "),Dz=n(YBe,"A",{href:!0});var GCt=s(Dz);jUo=r(GCt,"FunnelForMultipleChoice"),GCt.forEach(t),DUo=r(YBe," (Funnel Transformer model)"),YBe.forEach(t),GUo=i(ee),_3=n(ee,"LI",{});var KBe=s(_3);c2e=n(KBe,"STRONG",{});var OCt=s(c2e);OUo=r(OCt,"ibert"),OCt.forEach(t),VUo=r(KBe," \u2014 "),Gz=n(KBe,"A",{href:!0});var VCt=s(Gz);XUo=r(VCt,"IBertForMultipleChoice"),VCt.forEach(t),zUo=r(KBe," (I-BERT model)"),KBe.forEach(t),WUo=i(ee),u3=n(ee,"LI",{});var ZBe=s(u3);f2e=n(ZBe,"STRONG",{});var XCt=s(f2e);QUo=r(XCt,"longformer"),XCt.forEach(t),HUo=r(ZBe," \u2014 "),Oz=n(ZBe,"A",{href:!0});var zCt=s(Oz);UUo=r(zCt,"LongformerForMultipleChoice"),zCt.forEach(t),JUo=r(ZBe," (Longformer model)"),ZBe.forEach(t),YUo=i(ee),b3=n(ee,"LI",{});var eIe=s(b3);m2e=n(eIe,"STRONG",{});var WCt=s(m2e);KUo=r(WCt,"megatron-bert"),WCt.forEach(t),ZUo=r(eIe," \u2014 "),Vz=n(eIe,"A",{href:!0});var QCt=s(Vz);eJo=r(QCt,"MegatronBertForMultipleChoice"),QCt.forEach(t),oJo=r(eIe," (Megatron-BERT model)"),eIe.forEach(t),rJo=i(ee),v3=n(ee,"LI",{});var oIe=s(v3);g2e=n(oIe,"STRONG",{});var HCt=s(g2e);tJo=r(HCt,"mobilebert"),HCt.forEach(t),aJo=r(oIe," \u2014 "),Xz=n(oIe,"A",{href:!0});var UCt=s(Xz);nJo=r(UCt,"MobileBertForMultipleChoice"),UCt.forEach(t),sJo=r(oIe," (MobileBERT model)"),oIe.forEach(t),lJo=i(ee),F3=n(ee,"LI",{});var rIe=s(F3);h2e=n(rIe,"STRONG",{});var JCt=s(h2e);iJo=r(JCt,"mpnet"),JCt.forEach(t),dJo=r(rIe," \u2014 "),zz=n(rIe,"A",{href:!0});var YCt=s(zz);cJo=r(YCt,"MPNetForMultipleChoice"),YCt.forEach(t),fJo=r(rIe," (MPNet model)"),rIe.forEach(t),mJo=i(ee),T3=n(ee,"LI",{});var tIe=s(T3);p2e=n(tIe,"STRONG",{});var KCt=s(p2e);gJo=r(KCt,"nezha"),KCt.forEach(t),hJo=r(tIe," \u2014 "),Wz=n(tIe,"A",{href:!0});var ZCt=s(Wz);pJo=r(ZCt,"NezhaForMultipleChoice"),ZCt.forEach(t),_Jo=r(tIe," (Nezha model)"),tIe.forEach(t),uJo=i(ee),M3=n(ee,"LI",{});var aIe=s(M3);_2e=n(aIe,"STRONG",{});var e5t=s(_2e);bJo=r(e5t,"nystromformer"),e5t.forEach(t),vJo=r(aIe," \u2014 "),Qz=n(aIe,"A",{href:!0});var o5t=s(Qz);FJo=r(o5t,"NystromformerForMultipleChoice"),o5t.forEach(t),TJo=r(aIe," (Nystr\xF6mformer model)"),aIe.forEach(t),MJo=i(ee),E3=n(ee,"LI",{});var nIe=s(E3);u2e=n(nIe,"STRONG",{});var r5t=s(u2e);EJo=r(r5t,"qdqbert"),r5t.forEach(t),CJo=r(nIe," \u2014 "),Hz=n(nIe,"A",{href:!0});var t5t=s(Hz);wJo=r(t5t,"QDQBertForMultipleChoice"),t5t.forEach(t),AJo=r(nIe," (QDQBert model)"),nIe.forEach(t),LJo=i(ee),C3=n(ee,"LI",{});var sIe=s(C3);b2e=n(sIe,"STRONG",{});var a5t=s(b2e);yJo=r(a5t,"rembert"),a5t.forEach(t),xJo=r(sIe," \u2014 "),Uz=n(sIe,"A",{href:!0});var n5t=s(Uz);$Jo=r(n5t,"RemBertForMultipleChoice"),n5t.forEach(t),kJo=r(sIe," (RemBERT model)"),sIe.forEach(t),SJo=i(ee),w3=n(ee,"LI",{});var lIe=s(w3);v2e=n(lIe,"STRONG",{});var s5t=s(v2e);RJo=r(s5t,"roberta"),s5t.forEach(t),PJo=r(lIe," \u2014 "),Jz=n(lIe,"A",{href:!0});var l5t=s(Jz);BJo=r(l5t,"RobertaForMultipleChoice"),l5t.forEach(t),IJo=r(lIe," (RoBERTa model)"),lIe.forEach(t),NJo=i(ee),A3=n(ee,"LI",{});var iIe=s(A3);F2e=n(iIe,"STRONG",{});var i5t=s(F2e);qJo=r(i5t,"roformer"),i5t.forEach(t),jJo=r(iIe," \u2014 "),Yz=n(iIe,"A",{href:!0});var d5t=s(Yz);DJo=r(d5t,"RoFormerForMultipleChoice"),d5t.forEach(t),GJo=r(iIe," (RoFormer model)"),iIe.forEach(t),OJo=i(ee),L3=n(ee,"LI",{});var dIe=s(L3);T2e=n(dIe,"STRONG",{});var c5t=s(T2e);VJo=r(c5t,"squeezebert"),c5t.forEach(t),XJo=r(dIe," \u2014 "),Kz=n(dIe,"A",{href:!0});var f5t=s(Kz);zJo=r(f5t,"SqueezeBertForMultipleChoice"),f5t.forEach(t),WJo=r(dIe," (SqueezeBERT model)"),dIe.forEach(t),QJo=i(ee),y3=n(ee,"LI",{});var cIe=s(y3);M2e=n(cIe,"STRONG",{});var m5t=s(M2e);HJo=r(m5t,"xlm"),m5t.forEach(t),UJo=r(cIe," \u2014 "),Zz=n(cIe,"A",{href:!0});var g5t=s(Zz);JJo=r(g5t,"XLMForMultipleChoice"),g5t.forEach(t),YJo=r(cIe," (XLM model)"),cIe.forEach(t),KJo=i(ee),x3=n(ee,"LI",{});var fIe=s(x3);E2e=n(fIe,"STRONG",{});var h5t=s(E2e);ZJo=r(h5t,"xlm-roberta"),h5t.forEach(t),eYo=r(fIe," \u2014 "),eW=n(fIe,"A",{href:!0});var p5t=s(eW);oYo=r(p5t,"XLMRobertaForMultipleChoice"),p5t.forEach(t),rYo=r(fIe," (XLM-RoBERTa model)"),fIe.forEach(t),tYo=i(ee),$3=n(ee,"LI",{});var mIe=s($3);C2e=n(mIe,"STRONG",{});var _5t=s(C2e);aYo=r(_5t,"xlm-roberta-xl"),_5t.forEach(t),nYo=r(mIe," \u2014 "),oW=n(mIe,"A",{href:!0});var u5t=s(oW);sYo=r(u5t,"XLMRobertaXLForMultipleChoice"),u5t.forEach(t),lYo=r(mIe," (XLM-RoBERTa-XL model)"),mIe.forEach(t),iYo=i(ee),k3=n(ee,"LI",{});var gIe=s(k3);w2e=n(gIe,"STRONG",{});var b5t=s(w2e);dYo=r(b5t,"xlnet"),b5t.forEach(t),cYo=r(gIe," \u2014 "),rW=n(gIe,"A",{href:!0});var v5t=s(rW);fYo=r(v5t,"XLNetForMultipleChoice"),v5t.forEach(t),mYo=r(gIe," (XLNet model)"),gIe.forEach(t),gYo=i(ee),S3=n(ee,"LI",{});var hIe=s(S3);A2e=n(hIe,"STRONG",{});var F5t=s(A2e);hYo=r(F5t,"yoso"),F5t.forEach(t),pYo=r(hIe," \u2014 "),tW=n(hIe,"A",{href:!0});var T5t=s(tW);_Yo=r(T5t,"YosoForMultipleChoice"),T5t.forEach(t),uYo=r(hIe," (YOSO model)"),hIe.forEach(t),ee.forEach(t),bYo=i(ga),R3=n(ga,"P",{});var pIe=s(R3);vYo=r(pIe,"The model is set in evaluation mode by default using "),L2e=n(pIe,"CODE",{});var M5t=s(L2e);FYo=r(M5t,"model.eval()"),M5t.forEach(t),TYo=r(pIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y2e=n(pIe,"CODE",{});var E5t=s(y2e);MYo=r(E5t,"model.train()"),E5t.forEach(t),pIe.forEach(t),EYo=i(ga),T(P3.$$.fragment,ga),ga.forEach(t),fl.forEach(t),Dze=i(f),fd=n(f,"H2",{class:!0});var WQe=s(fd);B3=n(WQe,"A",{id:!0,class:!0,href:!0});var C5t=s(B3);x2e=n(C5t,"SPAN",{});var w5t=s(x2e);T(xy.$$.fragment,w5t),w5t.forEach(t),C5t.forEach(t),CYo=i(WQe),$2e=n(WQe,"SPAN",{});var A5t=s($2e);wYo=r(A5t,"AutoModelForNextSentencePrediction"),A5t.forEach(t),WQe.forEach(t),Gze=i(f),qo=n(f,"DIV",{class:!0});var ml=s(qo);T($y.$$.fragment,ml),AYo=i(ml),md=n(ml,"P",{});var kte=s(md);LYo=r(kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aW=n(kte,"A",{href:!0});var L5t=s(aW);yYo=r(L5t,"from_pretrained()"),L5t.forEach(t),xYo=r(kte," class method or the "),nW=n(kte,"A",{href:!0});var y5t=s(nW);$Yo=r(y5t,"from_config()"),y5t.forEach(t),kYo=r(kte,` class
method.`),kte.forEach(t),SYo=i(ml),ky=n(ml,"P",{});var QQe=s(ky);RYo=r(QQe,"This class cannot be instantiated directly using "),k2e=n(QQe,"CODE",{});var x5t=s(k2e);PYo=r(x5t,"__init__()"),x5t.forEach(t),BYo=r(QQe," (throws an error)."),QQe.forEach(t),IYo=i(ml),pt=n(ml,"DIV",{class:!0});var jA=s(pt);T(Sy.$$.fragment,jA),NYo=i(jA),S2e=n(jA,"P",{});var $5t=s(S2e);qYo=r($5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$5t.forEach(t),jYo=i(jA),gd=n(jA,"P",{});var Ste=s(gd);DYo=r(Ste,`Note:
Loading a model from its configuration file does `),R2e=n(Ste,"STRONG",{});var k5t=s(R2e);GYo=r(k5t,"not"),k5t.forEach(t),OYo=r(Ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(Ste,"A",{href:!0});var S5t=s(sW);VYo=r(S5t,"from_pretrained()"),S5t.forEach(t),XYo=r(Ste," to load the model weights."),Ste.forEach(t),zYo=i(jA),T(I3.$$.fragment,jA),jA.forEach(t),WYo=i(ml),ao=n(ml,"DIV",{class:!0});var ha=s(ao);T(Ry.$$.fragment,ha),QYo=i(ha),P2e=n(ha,"P",{});var R5t=s(P2e);HYo=r(R5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),R5t.forEach(t),UYo=i(ha),Va=n(ha,"P",{});var DA=s(Va);JYo=r(DA,"The model class to instantiate is selected based on the "),B2e=n(DA,"CODE",{});var P5t=s(B2e);YYo=r(P5t,"model_type"),P5t.forEach(t),KYo=r(DA,` property of the config object (either
passed as an argument or loaded from `),I2e=n(DA,"CODE",{});var B5t=s(I2e);ZYo=r(B5t,"pretrained_model_name_or_path"),B5t.forEach(t),eKo=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(DA,"CODE",{});var I5t=s(N2e);oKo=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),rKo=r(DA,":"),DA.forEach(t),tKo=i(ha),jo=n(ha,"UL",{});var pa=s(jo);N3=n(pa,"LI",{});var _Ie=s(N3);q2e=n(_Ie,"STRONG",{});var N5t=s(q2e);aKo=r(N5t,"bert"),N5t.forEach(t),nKo=r(_Ie," \u2014 "),lW=n(_Ie,"A",{href:!0});var q5t=s(lW);sKo=r(q5t,"BertForNextSentencePrediction"),q5t.forEach(t),lKo=r(_Ie," (BERT model)"),_Ie.forEach(t),iKo=i(pa),q3=n(pa,"LI",{});var uIe=s(q3);j2e=n(uIe,"STRONG",{});var j5t=s(j2e);dKo=r(j5t,"fnet"),j5t.forEach(t),cKo=r(uIe," \u2014 "),iW=n(uIe,"A",{href:!0});var D5t=s(iW);fKo=r(D5t,"FNetForNextSentencePrediction"),D5t.forEach(t),mKo=r(uIe," (FNet model)"),uIe.forEach(t),gKo=i(pa),j3=n(pa,"LI",{});var bIe=s(j3);D2e=n(bIe,"STRONG",{});var G5t=s(D2e);hKo=r(G5t,"megatron-bert"),G5t.forEach(t),pKo=r(bIe," \u2014 "),dW=n(bIe,"A",{href:!0});var O5t=s(dW);_Ko=r(O5t,"MegatronBertForNextSentencePrediction"),O5t.forEach(t),uKo=r(bIe," (Megatron-BERT model)"),bIe.forEach(t),bKo=i(pa),D3=n(pa,"LI",{});var vIe=s(D3);G2e=n(vIe,"STRONG",{});var V5t=s(G2e);vKo=r(V5t,"mobilebert"),V5t.forEach(t),FKo=r(vIe," \u2014 "),cW=n(vIe,"A",{href:!0});var X5t=s(cW);TKo=r(X5t,"MobileBertForNextSentencePrediction"),X5t.forEach(t),MKo=r(vIe," (MobileBERT model)"),vIe.forEach(t),EKo=i(pa),G3=n(pa,"LI",{});var FIe=s(G3);O2e=n(FIe,"STRONG",{});var z5t=s(O2e);CKo=r(z5t,"nezha"),z5t.forEach(t),wKo=r(FIe," \u2014 "),fW=n(FIe,"A",{href:!0});var W5t=s(fW);AKo=r(W5t,"NezhaForNextSentencePrediction"),W5t.forEach(t),LKo=r(FIe," (Nezha model)"),FIe.forEach(t),yKo=i(pa),O3=n(pa,"LI",{});var TIe=s(O3);V2e=n(TIe,"STRONG",{});var Q5t=s(V2e);xKo=r(Q5t,"qdqbert"),Q5t.forEach(t),$Ko=r(TIe," \u2014 "),mW=n(TIe,"A",{href:!0});var H5t=s(mW);kKo=r(H5t,"QDQBertForNextSentencePrediction"),H5t.forEach(t),SKo=r(TIe," (QDQBert model)"),TIe.forEach(t),pa.forEach(t),RKo=i(ha),V3=n(ha,"P",{});var MIe=s(V3);PKo=r(MIe,"The model is set in evaluation mode by default using "),X2e=n(MIe,"CODE",{});var U5t=s(X2e);BKo=r(U5t,"model.eval()"),U5t.forEach(t),IKo=r(MIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z2e=n(MIe,"CODE",{});var J5t=s(z2e);NKo=r(J5t,"model.train()"),J5t.forEach(t),MIe.forEach(t),qKo=i(ha),T(X3.$$.fragment,ha),ha.forEach(t),ml.forEach(t),Oze=i(f),hd=n(f,"H2",{class:!0});var HQe=s(hd);z3=n(HQe,"A",{id:!0,class:!0,href:!0});var Y5t=s(z3);W2e=n(Y5t,"SPAN",{});var K5t=s(W2e);T(Py.$$.fragment,K5t),K5t.forEach(t),Y5t.forEach(t),jKo=i(HQe),Q2e=n(HQe,"SPAN",{});var Z5t=s(Q2e);DKo=r(Z5t,"AutoModelForTokenClassification"),Z5t.forEach(t),HQe.forEach(t),Vze=i(f),Do=n(f,"DIV",{class:!0});var gl=s(Do);T(By.$$.fragment,gl),GKo=i(gl),pd=n(gl,"P",{});var Rte=s(pd);OKo=r(Rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gW=n(Rte,"A",{href:!0});var e0t=s(gW);VKo=r(e0t,"from_pretrained()"),e0t.forEach(t),XKo=r(Rte," class method or the "),hW=n(Rte,"A",{href:!0});var o0t=s(hW);zKo=r(o0t,"from_config()"),o0t.forEach(t),WKo=r(Rte,` class
method.`),Rte.forEach(t),QKo=i(gl),Iy=n(gl,"P",{});var UQe=s(Iy);HKo=r(UQe,"This class cannot be instantiated directly using "),H2e=n(UQe,"CODE",{});var r0t=s(H2e);UKo=r(r0t,"__init__()"),r0t.forEach(t),JKo=r(UQe," (throws an error)."),UQe.forEach(t),YKo=i(gl),_t=n(gl,"DIV",{class:!0});var GA=s(_t);T(Ny.$$.fragment,GA),KKo=i(GA),U2e=n(GA,"P",{});var t0t=s(U2e);ZKo=r(t0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t0t.forEach(t),eZo=i(GA),_d=n(GA,"P",{});var Pte=s(_d);oZo=r(Pte,`Note:
Loading a model from its configuration file does `),J2e=n(Pte,"STRONG",{});var a0t=s(J2e);rZo=r(a0t,"not"),a0t.forEach(t),tZo=r(Pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(Pte,"A",{href:!0});var n0t=s(pW);aZo=r(n0t,"from_pretrained()"),n0t.forEach(t),nZo=r(Pte," to load the model weights."),Pte.forEach(t),sZo=i(GA),T(W3.$$.fragment,GA),GA.forEach(t),lZo=i(gl),no=n(gl,"DIV",{class:!0});var _a=s(no);T(qy.$$.fragment,_a),iZo=i(_a),Y2e=n(_a,"P",{});var s0t=s(Y2e);dZo=r(s0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s0t.forEach(t),cZo=i(_a),Xa=n(_a,"P",{});var OA=s(Xa);fZo=r(OA,"The model class to instantiate is selected based on the "),K2e=n(OA,"CODE",{});var l0t=s(K2e);mZo=r(l0t,"model_type"),l0t.forEach(t),gZo=r(OA,` property of the config object (either
passed as an argument or loaded from `),Z2e=n(OA,"CODE",{});var i0t=s(Z2e);hZo=r(i0t,"pretrained_model_name_or_path"),i0t.forEach(t),pZo=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(OA,"CODE",{});var d0t=s(e1e);_Zo=r(d0t,"pretrained_model_name_or_path"),d0t.forEach(t),uZo=r(OA,":"),OA.forEach(t),bZo=i(_a),J=n(_a,"UL",{});var K=s(J);Q3=n(K,"LI",{});var EIe=s(Q3);o1e=n(EIe,"STRONG",{});var c0t=s(o1e);vZo=r(c0t,"albert"),c0t.forEach(t),FZo=r(EIe," \u2014 "),_W=n(EIe,"A",{href:!0});var f0t=s(_W);TZo=r(f0t,"AlbertForTokenClassification"),f0t.forEach(t),MZo=r(EIe," (ALBERT model)"),EIe.forEach(t),EZo=i(K),H3=n(K,"LI",{});var CIe=s(H3);r1e=n(CIe,"STRONG",{});var m0t=s(r1e);CZo=r(m0t,"bert"),m0t.forEach(t),wZo=r(CIe," \u2014 "),uW=n(CIe,"A",{href:!0});var g0t=s(uW);AZo=r(g0t,"BertForTokenClassification"),g0t.forEach(t),LZo=r(CIe," (BERT model)"),CIe.forEach(t),yZo=i(K),U3=n(K,"LI",{});var wIe=s(U3);t1e=n(wIe,"STRONG",{});var h0t=s(t1e);xZo=r(h0t,"big_bird"),h0t.forEach(t),$Zo=r(wIe," \u2014 "),bW=n(wIe,"A",{href:!0});var p0t=s(bW);kZo=r(p0t,"BigBirdForTokenClassification"),p0t.forEach(t),SZo=r(wIe," (BigBird model)"),wIe.forEach(t),RZo=i(K),J3=n(K,"LI",{});var AIe=s(J3);a1e=n(AIe,"STRONG",{});var _0t=s(a1e);PZo=r(_0t,"bloom"),_0t.forEach(t),BZo=r(AIe," \u2014 "),vW=n(AIe,"A",{href:!0});var u0t=s(vW);IZo=r(u0t,"BloomForTokenClassification"),u0t.forEach(t),NZo=r(AIe," (BLOOM model)"),AIe.forEach(t),qZo=i(K),Y3=n(K,"LI",{});var LIe=s(Y3);n1e=n(LIe,"STRONG",{});var b0t=s(n1e);jZo=r(b0t,"camembert"),b0t.forEach(t),DZo=r(LIe," \u2014 "),FW=n(LIe,"A",{href:!0});var v0t=s(FW);GZo=r(v0t,"CamembertForTokenClassification"),v0t.forEach(t),OZo=r(LIe," (CamemBERT model)"),LIe.forEach(t),VZo=i(K),K3=n(K,"LI",{});var yIe=s(K3);s1e=n(yIe,"STRONG",{});var F0t=s(s1e);XZo=r(F0t,"canine"),F0t.forEach(t),zZo=r(yIe," \u2014 "),TW=n(yIe,"A",{href:!0});var T0t=s(TW);WZo=r(T0t,"CanineForTokenClassification"),T0t.forEach(t),QZo=r(yIe," (CANINE model)"),yIe.forEach(t),HZo=i(K),Z3=n(K,"LI",{});var xIe=s(Z3);l1e=n(xIe,"STRONG",{});var M0t=s(l1e);UZo=r(M0t,"convbert"),M0t.forEach(t),JZo=r(xIe," \u2014 "),MW=n(xIe,"A",{href:!0});var E0t=s(MW);YZo=r(E0t,"ConvBertForTokenClassification"),E0t.forEach(t),KZo=r(xIe," (ConvBERT model)"),xIe.forEach(t),ZZo=i(K),eF=n(K,"LI",{});var $Ie=s(eF);i1e=n($Ie,"STRONG",{});var C0t=s(i1e);eer=r(C0t,"data2vec-text"),C0t.forEach(t),oer=r($Ie," \u2014 "),EW=n($Ie,"A",{href:!0});var w0t=s(EW);rer=r(w0t,"Data2VecTextForTokenClassification"),w0t.forEach(t),ter=r($Ie," (Data2VecText model)"),$Ie.forEach(t),aer=i(K),oF=n(K,"LI",{});var kIe=s(oF);d1e=n(kIe,"STRONG",{});var A0t=s(d1e);ner=r(A0t,"deberta"),A0t.forEach(t),ser=r(kIe," \u2014 "),CW=n(kIe,"A",{href:!0});var L0t=s(CW);ler=r(L0t,"DebertaForTokenClassification"),L0t.forEach(t),ier=r(kIe," (DeBERTa model)"),kIe.forEach(t),der=i(K),rF=n(K,"LI",{});var SIe=s(rF);c1e=n(SIe,"STRONG",{});var y0t=s(c1e);cer=r(y0t,"deberta-v2"),y0t.forEach(t),fer=r(SIe," \u2014 "),wW=n(SIe,"A",{href:!0});var x0t=s(wW);mer=r(x0t,"DebertaV2ForTokenClassification"),x0t.forEach(t),ger=r(SIe," (DeBERTa-v2 model)"),SIe.forEach(t),her=i(K),tF=n(K,"LI",{});var RIe=s(tF);f1e=n(RIe,"STRONG",{});var $0t=s(f1e);per=r($0t,"distilbert"),$0t.forEach(t),_er=r(RIe," \u2014 "),AW=n(RIe,"A",{href:!0});var k0t=s(AW);uer=r(k0t,"DistilBertForTokenClassification"),k0t.forEach(t),ber=r(RIe," (DistilBERT model)"),RIe.forEach(t),ver=i(K),aF=n(K,"LI",{});var PIe=s(aF);m1e=n(PIe,"STRONG",{});var S0t=s(m1e);Fer=r(S0t,"electra"),S0t.forEach(t),Ter=r(PIe," \u2014 "),LW=n(PIe,"A",{href:!0});var R0t=s(LW);Mer=r(R0t,"ElectraForTokenClassification"),R0t.forEach(t),Eer=r(PIe," (ELECTRA model)"),PIe.forEach(t),Cer=i(K),nF=n(K,"LI",{});var BIe=s(nF);g1e=n(BIe,"STRONG",{});var P0t=s(g1e);wer=r(P0t,"flaubert"),P0t.forEach(t),Aer=r(BIe," \u2014 "),yW=n(BIe,"A",{href:!0});var B0t=s(yW);Ler=r(B0t,"FlaubertForTokenClassification"),B0t.forEach(t),yer=r(BIe," (FlauBERT model)"),BIe.forEach(t),xer=i(K),sF=n(K,"LI",{});var IIe=s(sF);h1e=n(IIe,"STRONG",{});var I0t=s(h1e);$er=r(I0t,"fnet"),I0t.forEach(t),ker=r(IIe," \u2014 "),xW=n(IIe,"A",{href:!0});var N0t=s(xW);Ser=r(N0t,"FNetForTokenClassification"),N0t.forEach(t),Rer=r(IIe," (FNet model)"),IIe.forEach(t),Per=i(K),lF=n(K,"LI",{});var NIe=s(lF);p1e=n(NIe,"STRONG",{});var q0t=s(p1e);Ber=r(q0t,"funnel"),q0t.forEach(t),Ier=r(NIe," \u2014 "),$W=n(NIe,"A",{href:!0});var j0t=s($W);Ner=r(j0t,"FunnelForTokenClassification"),j0t.forEach(t),qer=r(NIe," (Funnel Transformer model)"),NIe.forEach(t),jer=i(K),iF=n(K,"LI",{});var qIe=s(iF);_1e=n(qIe,"STRONG",{});var D0t=s(_1e);Der=r(D0t,"gpt2"),D0t.forEach(t),Ger=r(qIe," \u2014 "),kW=n(qIe,"A",{href:!0});var G0t=s(kW);Oer=r(G0t,"GPT2ForTokenClassification"),G0t.forEach(t),Ver=r(qIe," (OpenAI GPT-2 model)"),qIe.forEach(t),Xer=i(K),dF=n(K,"LI",{});var jIe=s(dF);u1e=n(jIe,"STRONG",{});var O0t=s(u1e);zer=r(O0t,"ibert"),O0t.forEach(t),Wer=r(jIe," \u2014 "),SW=n(jIe,"A",{href:!0});var V0t=s(SW);Qer=r(V0t,"IBertForTokenClassification"),V0t.forEach(t),Her=r(jIe," (I-BERT model)"),jIe.forEach(t),Uer=i(K),cF=n(K,"LI",{});var DIe=s(cF);b1e=n(DIe,"STRONG",{});var X0t=s(b1e);Jer=r(X0t,"layoutlm"),X0t.forEach(t),Yer=r(DIe," \u2014 "),RW=n(DIe,"A",{href:!0});var z0t=s(RW);Ker=r(z0t,"LayoutLMForTokenClassification"),z0t.forEach(t),Zer=r(DIe," (LayoutLM model)"),DIe.forEach(t),eor=i(K),fF=n(K,"LI",{});var GIe=s(fF);v1e=n(GIe,"STRONG",{});var W0t=s(v1e);oor=r(W0t,"layoutlmv2"),W0t.forEach(t),ror=r(GIe," \u2014 "),PW=n(GIe,"A",{href:!0});var Q0t=s(PW);tor=r(Q0t,"LayoutLMv2ForTokenClassification"),Q0t.forEach(t),aor=r(GIe," (LayoutLMv2 model)"),GIe.forEach(t),nor=i(K),mF=n(K,"LI",{});var OIe=s(mF);F1e=n(OIe,"STRONG",{});var H0t=s(F1e);sor=r(H0t,"layoutlmv3"),H0t.forEach(t),lor=r(OIe," \u2014 "),BW=n(OIe,"A",{href:!0});var U0t=s(BW);ior=r(U0t,"LayoutLMv3ForTokenClassification"),U0t.forEach(t),dor=r(OIe," (LayoutLMv3 model)"),OIe.forEach(t),cor=i(K),gF=n(K,"LI",{});var VIe=s(gF);T1e=n(VIe,"STRONG",{});var J0t=s(T1e);mor=r(J0t,"longformer"),J0t.forEach(t),gor=r(VIe," \u2014 "),IW=n(VIe,"A",{href:!0});var Y0t=s(IW);hor=r(Y0t,"LongformerForTokenClassification"),Y0t.forEach(t),por=r(VIe," (Longformer model)"),VIe.forEach(t),_or=i(K),hF=n(K,"LI",{});var XIe=s(hF);M1e=n(XIe,"STRONG",{});var K0t=s(M1e);uor=r(K0t,"megatron-bert"),K0t.forEach(t),bor=r(XIe," \u2014 "),NW=n(XIe,"A",{href:!0});var Z0t=s(NW);vor=r(Z0t,"MegatronBertForTokenClassification"),Z0t.forEach(t),For=r(XIe," (Megatron-BERT model)"),XIe.forEach(t),Tor=i(K),pF=n(K,"LI",{});var zIe=s(pF);E1e=n(zIe,"STRONG",{});var ewt=s(E1e);Mor=r(ewt,"mobilebert"),ewt.forEach(t),Eor=r(zIe," \u2014 "),qW=n(zIe,"A",{href:!0});var owt=s(qW);Cor=r(owt,"MobileBertForTokenClassification"),owt.forEach(t),wor=r(zIe," (MobileBERT model)"),zIe.forEach(t),Aor=i(K),_F=n(K,"LI",{});var WIe=s(_F);C1e=n(WIe,"STRONG",{});var rwt=s(C1e);Lor=r(rwt,"mpnet"),rwt.forEach(t),yor=r(WIe," \u2014 "),jW=n(WIe,"A",{href:!0});var twt=s(jW);xor=r(twt,"MPNetForTokenClassification"),twt.forEach(t),$or=r(WIe," (MPNet model)"),WIe.forEach(t),kor=i(K),uF=n(K,"LI",{});var QIe=s(uF);w1e=n(QIe,"STRONG",{});var awt=s(w1e);Sor=r(awt,"nezha"),awt.forEach(t),Ror=r(QIe," \u2014 "),DW=n(QIe,"A",{href:!0});var nwt=s(DW);Por=r(nwt,"NezhaForTokenClassification"),nwt.forEach(t),Bor=r(QIe," (Nezha model)"),QIe.forEach(t),Ior=i(K),bF=n(K,"LI",{});var HIe=s(bF);A1e=n(HIe,"STRONG",{});var swt=s(A1e);Nor=r(swt,"nystromformer"),swt.forEach(t),qor=r(HIe," \u2014 "),GW=n(HIe,"A",{href:!0});var lwt=s(GW);jor=r(lwt,"NystromformerForTokenClassification"),lwt.forEach(t),Dor=r(HIe," (Nystr\xF6mformer model)"),HIe.forEach(t),Gor=i(K),vF=n(K,"LI",{});var UIe=s(vF);L1e=n(UIe,"STRONG",{});var iwt=s(L1e);Oor=r(iwt,"qdqbert"),iwt.forEach(t),Vor=r(UIe," \u2014 "),OW=n(UIe,"A",{href:!0});var dwt=s(OW);Xor=r(dwt,"QDQBertForTokenClassification"),dwt.forEach(t),zor=r(UIe," (QDQBert model)"),UIe.forEach(t),Wor=i(K),FF=n(K,"LI",{});var JIe=s(FF);y1e=n(JIe,"STRONG",{});var cwt=s(y1e);Qor=r(cwt,"rembert"),cwt.forEach(t),Hor=r(JIe," \u2014 "),VW=n(JIe,"A",{href:!0});var fwt=s(VW);Uor=r(fwt,"RemBertForTokenClassification"),fwt.forEach(t),Jor=r(JIe," (RemBERT model)"),JIe.forEach(t),Yor=i(K),TF=n(K,"LI",{});var YIe=s(TF);x1e=n(YIe,"STRONG",{});var mwt=s(x1e);Kor=r(mwt,"roberta"),mwt.forEach(t),Zor=r(YIe," \u2014 "),XW=n(YIe,"A",{href:!0});var gwt=s(XW);err=r(gwt,"RobertaForTokenClassification"),gwt.forEach(t),orr=r(YIe," (RoBERTa model)"),YIe.forEach(t),rrr=i(K),MF=n(K,"LI",{});var KIe=s(MF);$1e=n(KIe,"STRONG",{});var hwt=s($1e);trr=r(hwt,"roformer"),hwt.forEach(t),arr=r(KIe," \u2014 "),zW=n(KIe,"A",{href:!0});var pwt=s(zW);nrr=r(pwt,"RoFormerForTokenClassification"),pwt.forEach(t),srr=r(KIe," (RoFormer model)"),KIe.forEach(t),lrr=i(K),EF=n(K,"LI",{});var ZIe=s(EF);k1e=n(ZIe,"STRONG",{});var _wt=s(k1e);irr=r(_wt,"squeezebert"),_wt.forEach(t),drr=r(ZIe," \u2014 "),WW=n(ZIe,"A",{href:!0});var uwt=s(WW);crr=r(uwt,"SqueezeBertForTokenClassification"),uwt.forEach(t),frr=r(ZIe," (SqueezeBERT model)"),ZIe.forEach(t),mrr=i(K),CF=n(K,"LI",{});var eNe=s(CF);S1e=n(eNe,"STRONG",{});var bwt=s(S1e);grr=r(bwt,"xlm"),bwt.forEach(t),hrr=r(eNe," \u2014 "),QW=n(eNe,"A",{href:!0});var vwt=s(QW);prr=r(vwt,"XLMForTokenClassification"),vwt.forEach(t),_rr=r(eNe," (XLM model)"),eNe.forEach(t),urr=i(K),wF=n(K,"LI",{});var oNe=s(wF);R1e=n(oNe,"STRONG",{});var Fwt=s(R1e);brr=r(Fwt,"xlm-roberta"),Fwt.forEach(t),vrr=r(oNe," \u2014 "),HW=n(oNe,"A",{href:!0});var Twt=s(HW);Frr=r(Twt,"XLMRobertaForTokenClassification"),Twt.forEach(t),Trr=r(oNe," (XLM-RoBERTa model)"),oNe.forEach(t),Mrr=i(K),AF=n(K,"LI",{});var rNe=s(AF);P1e=n(rNe,"STRONG",{});var Mwt=s(P1e);Err=r(Mwt,"xlm-roberta-xl"),Mwt.forEach(t),Crr=r(rNe," \u2014 "),UW=n(rNe,"A",{href:!0});var Ewt=s(UW);wrr=r(Ewt,"XLMRobertaXLForTokenClassification"),Ewt.forEach(t),Arr=r(rNe," (XLM-RoBERTa-XL model)"),rNe.forEach(t),Lrr=i(K),LF=n(K,"LI",{});var tNe=s(LF);B1e=n(tNe,"STRONG",{});var Cwt=s(B1e);yrr=r(Cwt,"xlnet"),Cwt.forEach(t),xrr=r(tNe," \u2014 "),JW=n(tNe,"A",{href:!0});var wwt=s(JW);$rr=r(wwt,"XLNetForTokenClassification"),wwt.forEach(t),krr=r(tNe," (XLNet model)"),tNe.forEach(t),Srr=i(K),yF=n(K,"LI",{});var aNe=s(yF);I1e=n(aNe,"STRONG",{});var Awt=s(I1e);Rrr=r(Awt,"yoso"),Awt.forEach(t),Prr=r(aNe," \u2014 "),YW=n(aNe,"A",{href:!0});var Lwt=s(YW);Brr=r(Lwt,"YosoForTokenClassification"),Lwt.forEach(t),Irr=r(aNe," (YOSO model)"),aNe.forEach(t),K.forEach(t),Nrr=i(_a),xF=n(_a,"P",{});var nNe=s(xF);qrr=r(nNe,"The model is set in evaluation mode by default using "),N1e=n(nNe,"CODE",{});var ywt=s(N1e);jrr=r(ywt,"model.eval()"),ywt.forEach(t),Drr=r(nNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=n(nNe,"CODE",{});var xwt=s(q1e);Grr=r(xwt,"model.train()"),xwt.forEach(t),nNe.forEach(t),Orr=i(_a),T($F.$$.fragment,_a),_a.forEach(t),gl.forEach(t),Xze=i(f),ud=n(f,"H2",{class:!0});var JQe=s(ud);kF=n(JQe,"A",{id:!0,class:!0,href:!0});var $wt=s(kF);j1e=n($wt,"SPAN",{});var kwt=s(j1e);T(jy.$$.fragment,kwt),kwt.forEach(t),$wt.forEach(t),Vrr=i(JQe),D1e=n(JQe,"SPAN",{});var Swt=s(D1e);Xrr=r(Swt,"AutoModelForQuestionAnswering"),Swt.forEach(t),JQe.forEach(t),zze=i(f),Go=n(f,"DIV",{class:!0});var hl=s(Go);T(Dy.$$.fragment,hl),zrr=i(hl),bd=n(hl,"P",{});var Bte=s(bd);Wrr=r(Bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KW=n(Bte,"A",{href:!0});var Rwt=s(KW);Qrr=r(Rwt,"from_pretrained()"),Rwt.forEach(t),Hrr=r(Bte," class method or the "),ZW=n(Bte,"A",{href:!0});var Pwt=s(ZW);Urr=r(Pwt,"from_config()"),Pwt.forEach(t),Jrr=r(Bte,` class
method.`),Bte.forEach(t),Yrr=i(hl),Gy=n(hl,"P",{});var YQe=s(Gy);Krr=r(YQe,"This class cannot be instantiated directly using "),G1e=n(YQe,"CODE",{});var Bwt=s(G1e);Zrr=r(Bwt,"__init__()"),Bwt.forEach(t),etr=r(YQe," (throws an error)."),YQe.forEach(t),otr=i(hl),ut=n(hl,"DIV",{class:!0});var VA=s(ut);T(Oy.$$.fragment,VA),rtr=i(VA),O1e=n(VA,"P",{});var Iwt=s(O1e);ttr=r(Iwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Iwt.forEach(t),atr=i(VA),vd=n(VA,"P",{});var Ite=s(vd);ntr=r(Ite,`Note:
Loading a model from its configuration file does `),V1e=n(Ite,"STRONG",{});var Nwt=s(V1e);str=r(Nwt,"not"),Nwt.forEach(t),ltr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),eQ=n(Ite,"A",{href:!0});var qwt=s(eQ);itr=r(qwt,"from_pretrained()"),qwt.forEach(t),dtr=r(Ite," to load the model weights."),Ite.forEach(t),ctr=i(VA),T(SF.$$.fragment,VA),VA.forEach(t),ftr=i(hl),so=n(hl,"DIV",{class:!0});var ua=s(so);T(Vy.$$.fragment,ua),mtr=i(ua),X1e=n(ua,"P",{});var jwt=s(X1e);gtr=r(jwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jwt.forEach(t),htr=i(ua),za=n(ua,"P",{});var XA=s(za);ptr=r(XA,"The model class to instantiate is selected based on the "),z1e=n(XA,"CODE",{});var Dwt=s(z1e);_tr=r(Dwt,"model_type"),Dwt.forEach(t),utr=r(XA,` property of the config object (either
passed as an argument or loaded from `),W1e=n(XA,"CODE",{});var Gwt=s(W1e);btr=r(Gwt,"pretrained_model_name_or_path"),Gwt.forEach(t),vtr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=n(XA,"CODE",{});var Owt=s(Q1e);Ftr=r(Owt,"pretrained_model_name_or_path"),Owt.forEach(t),Ttr=r(XA,":"),XA.forEach(t),Mtr=i(ua),V=n(ua,"UL",{});var z=s(V);RF=n(z,"LI",{});var sNe=s(RF);H1e=n(sNe,"STRONG",{});var Vwt=s(H1e);Etr=r(Vwt,"albert"),Vwt.forEach(t),Ctr=r(sNe," \u2014 "),oQ=n(sNe,"A",{href:!0});var Xwt=s(oQ);wtr=r(Xwt,"AlbertForQuestionAnswering"),Xwt.forEach(t),Atr=r(sNe," (ALBERT model)"),sNe.forEach(t),Ltr=i(z),PF=n(z,"LI",{});var lNe=s(PF);U1e=n(lNe,"STRONG",{});var zwt=s(U1e);ytr=r(zwt,"bart"),zwt.forEach(t),xtr=r(lNe," \u2014 "),rQ=n(lNe,"A",{href:!0});var Wwt=s(rQ);$tr=r(Wwt,"BartForQuestionAnswering"),Wwt.forEach(t),ktr=r(lNe," (BART model)"),lNe.forEach(t),Str=i(z),BF=n(z,"LI",{});var iNe=s(BF);J1e=n(iNe,"STRONG",{});var Qwt=s(J1e);Rtr=r(Qwt,"bert"),Qwt.forEach(t),Ptr=r(iNe," \u2014 "),tQ=n(iNe,"A",{href:!0});var Hwt=s(tQ);Btr=r(Hwt,"BertForQuestionAnswering"),Hwt.forEach(t),Itr=r(iNe," (BERT model)"),iNe.forEach(t),Ntr=i(z),IF=n(z,"LI",{});var dNe=s(IF);Y1e=n(dNe,"STRONG",{});var Uwt=s(Y1e);qtr=r(Uwt,"big_bird"),Uwt.forEach(t),jtr=r(dNe," \u2014 "),aQ=n(dNe,"A",{href:!0});var Jwt=s(aQ);Dtr=r(Jwt,"BigBirdForQuestionAnswering"),Jwt.forEach(t),Gtr=r(dNe," (BigBird model)"),dNe.forEach(t),Otr=i(z),NF=n(z,"LI",{});var cNe=s(NF);K1e=n(cNe,"STRONG",{});var Ywt=s(K1e);Vtr=r(Ywt,"bigbird_pegasus"),Ywt.forEach(t),Xtr=r(cNe," \u2014 "),nQ=n(cNe,"A",{href:!0});var Kwt=s(nQ);ztr=r(Kwt,"BigBirdPegasusForQuestionAnswering"),Kwt.forEach(t),Wtr=r(cNe," (BigBird-Pegasus model)"),cNe.forEach(t),Qtr=i(z),qF=n(z,"LI",{});var fNe=s(qF);Z1e=n(fNe,"STRONG",{});var Zwt=s(Z1e);Htr=r(Zwt,"camembert"),Zwt.forEach(t),Utr=r(fNe," \u2014 "),sQ=n(fNe,"A",{href:!0});var eAt=s(sQ);Jtr=r(eAt,"CamembertForQuestionAnswering"),eAt.forEach(t),Ytr=r(fNe," (CamemBERT model)"),fNe.forEach(t),Ktr=i(z),jF=n(z,"LI",{});var mNe=s(jF);ebe=n(mNe,"STRONG",{});var oAt=s(ebe);Ztr=r(oAt,"canine"),oAt.forEach(t),ear=r(mNe," \u2014 "),lQ=n(mNe,"A",{href:!0});var rAt=s(lQ);oar=r(rAt,"CanineForQuestionAnswering"),rAt.forEach(t),rar=r(mNe," (CANINE model)"),mNe.forEach(t),tar=i(z),DF=n(z,"LI",{});var gNe=s(DF);obe=n(gNe,"STRONG",{});var tAt=s(obe);aar=r(tAt,"convbert"),tAt.forEach(t),nar=r(gNe," \u2014 "),iQ=n(gNe,"A",{href:!0});var aAt=s(iQ);sar=r(aAt,"ConvBertForQuestionAnswering"),aAt.forEach(t),lar=r(gNe," (ConvBERT model)"),gNe.forEach(t),iar=i(z),GF=n(z,"LI",{});var hNe=s(GF);rbe=n(hNe,"STRONG",{});var nAt=s(rbe);dar=r(nAt,"data2vec-text"),nAt.forEach(t),car=r(hNe," \u2014 "),dQ=n(hNe,"A",{href:!0});var sAt=s(dQ);far=r(sAt,"Data2VecTextForQuestionAnswering"),sAt.forEach(t),mar=r(hNe," (Data2VecText model)"),hNe.forEach(t),gar=i(z),OF=n(z,"LI",{});var pNe=s(OF);tbe=n(pNe,"STRONG",{});var lAt=s(tbe);har=r(lAt,"deberta"),lAt.forEach(t),par=r(pNe," \u2014 "),cQ=n(pNe,"A",{href:!0});var iAt=s(cQ);_ar=r(iAt,"DebertaForQuestionAnswering"),iAt.forEach(t),uar=r(pNe," (DeBERTa model)"),pNe.forEach(t),bar=i(z),VF=n(z,"LI",{});var _Ne=s(VF);abe=n(_Ne,"STRONG",{});var dAt=s(abe);Far=r(dAt,"deberta-v2"),dAt.forEach(t),Tar=r(_Ne," \u2014 "),fQ=n(_Ne,"A",{href:!0});var cAt=s(fQ);Mar=r(cAt,"DebertaV2ForQuestionAnswering"),cAt.forEach(t),Ear=r(_Ne," (DeBERTa-v2 model)"),_Ne.forEach(t),Car=i(z),XF=n(z,"LI",{});var uNe=s(XF);nbe=n(uNe,"STRONG",{});var fAt=s(nbe);war=r(fAt,"distilbert"),fAt.forEach(t),Aar=r(uNe," \u2014 "),mQ=n(uNe,"A",{href:!0});var mAt=s(mQ);Lar=r(mAt,"DistilBertForQuestionAnswering"),mAt.forEach(t),yar=r(uNe," (DistilBERT model)"),uNe.forEach(t),xar=i(z),zF=n(z,"LI",{});var bNe=s(zF);sbe=n(bNe,"STRONG",{});var gAt=s(sbe);$ar=r(gAt,"electra"),gAt.forEach(t),kar=r(bNe," \u2014 "),gQ=n(bNe,"A",{href:!0});var hAt=s(gQ);Sar=r(hAt,"ElectraForQuestionAnswering"),hAt.forEach(t),Rar=r(bNe," (ELECTRA model)"),bNe.forEach(t),Par=i(z),WF=n(z,"LI",{});var vNe=s(WF);lbe=n(vNe,"STRONG",{});var pAt=s(lbe);Bar=r(pAt,"flaubert"),pAt.forEach(t),Iar=r(vNe," \u2014 "),hQ=n(vNe,"A",{href:!0});var _At=s(hQ);Nar=r(_At,"FlaubertForQuestionAnsweringSimple"),_At.forEach(t),qar=r(vNe," (FlauBERT model)"),vNe.forEach(t),jar=i(z),QF=n(z,"LI",{});var FNe=s(QF);ibe=n(FNe,"STRONG",{});var uAt=s(ibe);Dar=r(uAt,"fnet"),uAt.forEach(t),Gar=r(FNe," \u2014 "),pQ=n(FNe,"A",{href:!0});var bAt=s(pQ);Oar=r(bAt,"FNetForQuestionAnswering"),bAt.forEach(t),Var=r(FNe," (FNet model)"),FNe.forEach(t),Xar=i(z),HF=n(z,"LI",{});var TNe=s(HF);dbe=n(TNe,"STRONG",{});var vAt=s(dbe);zar=r(vAt,"funnel"),vAt.forEach(t),War=r(TNe," \u2014 "),_Q=n(TNe,"A",{href:!0});var FAt=s(_Q);Qar=r(FAt,"FunnelForQuestionAnswering"),FAt.forEach(t),Har=r(TNe," (Funnel Transformer model)"),TNe.forEach(t),Uar=i(z),UF=n(z,"LI",{});var MNe=s(UF);cbe=n(MNe,"STRONG",{});var TAt=s(cbe);Jar=r(TAt,"gptj"),TAt.forEach(t),Yar=r(MNe," \u2014 "),uQ=n(MNe,"A",{href:!0});var MAt=s(uQ);Kar=r(MAt,"GPTJForQuestionAnswering"),MAt.forEach(t),Zar=r(MNe," (GPT-J model)"),MNe.forEach(t),enr=i(z),JF=n(z,"LI",{});var ENe=s(JF);fbe=n(ENe,"STRONG",{});var EAt=s(fbe);onr=r(EAt,"ibert"),EAt.forEach(t),rnr=r(ENe," \u2014 "),bQ=n(ENe,"A",{href:!0});var CAt=s(bQ);tnr=r(CAt,"IBertForQuestionAnswering"),CAt.forEach(t),anr=r(ENe," (I-BERT model)"),ENe.forEach(t),nnr=i(z),YF=n(z,"LI",{});var CNe=s(YF);mbe=n(CNe,"STRONG",{});var wAt=s(mbe);snr=r(wAt,"layoutlmv2"),wAt.forEach(t),lnr=r(CNe," \u2014 "),vQ=n(CNe,"A",{href:!0});var AAt=s(vQ);inr=r(AAt,"LayoutLMv2ForQuestionAnswering"),AAt.forEach(t),dnr=r(CNe," (LayoutLMv2 model)"),CNe.forEach(t),cnr=i(z),KF=n(z,"LI",{});var wNe=s(KF);gbe=n(wNe,"STRONG",{});var LAt=s(gbe);fnr=r(LAt,"layoutlmv3"),LAt.forEach(t),mnr=r(wNe," \u2014 "),FQ=n(wNe,"A",{href:!0});var yAt=s(FQ);gnr=r(yAt,"LayoutLMv3ForQuestionAnswering"),yAt.forEach(t),hnr=r(wNe," (LayoutLMv3 model)"),wNe.forEach(t),pnr=i(z),ZF=n(z,"LI",{});var ANe=s(ZF);hbe=n(ANe,"STRONG",{});var xAt=s(hbe);_nr=r(xAt,"led"),xAt.forEach(t),unr=r(ANe," \u2014 "),TQ=n(ANe,"A",{href:!0});var $At=s(TQ);bnr=r($At,"LEDForQuestionAnswering"),$At.forEach(t),vnr=r(ANe," (LED model)"),ANe.forEach(t),Fnr=i(z),e6=n(z,"LI",{});var LNe=s(e6);pbe=n(LNe,"STRONG",{});var kAt=s(pbe);Tnr=r(kAt,"longformer"),kAt.forEach(t),Mnr=r(LNe," \u2014 "),MQ=n(LNe,"A",{href:!0});var SAt=s(MQ);Enr=r(SAt,"LongformerForQuestionAnswering"),SAt.forEach(t),Cnr=r(LNe," (Longformer model)"),LNe.forEach(t),wnr=i(z),o6=n(z,"LI",{});var yNe=s(o6);_be=n(yNe,"STRONG",{});var RAt=s(_be);Anr=r(RAt,"lxmert"),RAt.forEach(t),Lnr=r(yNe," \u2014 "),EQ=n(yNe,"A",{href:!0});var PAt=s(EQ);ynr=r(PAt,"LxmertForQuestionAnswering"),PAt.forEach(t),xnr=r(yNe," (LXMERT model)"),yNe.forEach(t),$nr=i(z),r6=n(z,"LI",{});var xNe=s(r6);ube=n(xNe,"STRONG",{});var BAt=s(ube);knr=r(BAt,"mbart"),BAt.forEach(t),Snr=r(xNe," \u2014 "),CQ=n(xNe,"A",{href:!0});var IAt=s(CQ);Rnr=r(IAt,"MBartForQuestionAnswering"),IAt.forEach(t),Pnr=r(xNe," (mBART model)"),xNe.forEach(t),Bnr=i(z),t6=n(z,"LI",{});var $Ne=s(t6);bbe=n($Ne,"STRONG",{});var NAt=s(bbe);Inr=r(NAt,"megatron-bert"),NAt.forEach(t),Nnr=r($Ne," \u2014 "),wQ=n($Ne,"A",{href:!0});var qAt=s(wQ);qnr=r(qAt,"MegatronBertForQuestionAnswering"),qAt.forEach(t),jnr=r($Ne," (Megatron-BERT model)"),$Ne.forEach(t),Dnr=i(z),a6=n(z,"LI",{});var kNe=s(a6);vbe=n(kNe,"STRONG",{});var jAt=s(vbe);Gnr=r(jAt,"mobilebert"),jAt.forEach(t),Onr=r(kNe," \u2014 "),AQ=n(kNe,"A",{href:!0});var DAt=s(AQ);Vnr=r(DAt,"MobileBertForQuestionAnswering"),DAt.forEach(t),Xnr=r(kNe," (MobileBERT model)"),kNe.forEach(t),znr=i(z),n6=n(z,"LI",{});var SNe=s(n6);Fbe=n(SNe,"STRONG",{});var GAt=s(Fbe);Wnr=r(GAt,"mpnet"),GAt.forEach(t),Qnr=r(SNe," \u2014 "),LQ=n(SNe,"A",{href:!0});var OAt=s(LQ);Hnr=r(OAt,"MPNetForQuestionAnswering"),OAt.forEach(t),Unr=r(SNe," (MPNet model)"),SNe.forEach(t),Jnr=i(z),s6=n(z,"LI",{});var RNe=s(s6);Tbe=n(RNe,"STRONG",{});var VAt=s(Tbe);Ynr=r(VAt,"mvp"),VAt.forEach(t),Knr=r(RNe," \u2014 "),yQ=n(RNe,"A",{href:!0});var XAt=s(yQ);Znr=r(XAt,"MvpForQuestionAnswering"),XAt.forEach(t),esr=r(RNe," (MVP model)"),RNe.forEach(t),osr=i(z),l6=n(z,"LI",{});var PNe=s(l6);Mbe=n(PNe,"STRONG",{});var zAt=s(Mbe);rsr=r(zAt,"nezha"),zAt.forEach(t),tsr=r(PNe," \u2014 "),xQ=n(PNe,"A",{href:!0});var WAt=s(xQ);asr=r(WAt,"NezhaForQuestionAnswering"),WAt.forEach(t),nsr=r(PNe," (Nezha model)"),PNe.forEach(t),ssr=i(z),i6=n(z,"LI",{});var BNe=s(i6);Ebe=n(BNe,"STRONG",{});var QAt=s(Ebe);lsr=r(QAt,"nystromformer"),QAt.forEach(t),isr=r(BNe," \u2014 "),$Q=n(BNe,"A",{href:!0});var HAt=s($Q);dsr=r(HAt,"NystromformerForQuestionAnswering"),HAt.forEach(t),csr=r(BNe," (Nystr\xF6mformer model)"),BNe.forEach(t),fsr=i(z),d6=n(z,"LI",{});var INe=s(d6);Cbe=n(INe,"STRONG",{});var UAt=s(Cbe);msr=r(UAt,"qdqbert"),UAt.forEach(t),gsr=r(INe," \u2014 "),kQ=n(INe,"A",{href:!0});var JAt=s(kQ);hsr=r(JAt,"QDQBertForQuestionAnswering"),JAt.forEach(t),psr=r(INe," (QDQBert model)"),INe.forEach(t),_sr=i(z),c6=n(z,"LI",{});var NNe=s(c6);wbe=n(NNe,"STRONG",{});var YAt=s(wbe);usr=r(YAt,"reformer"),YAt.forEach(t),bsr=r(NNe," \u2014 "),SQ=n(NNe,"A",{href:!0});var KAt=s(SQ);vsr=r(KAt,"ReformerForQuestionAnswering"),KAt.forEach(t),Fsr=r(NNe," (Reformer model)"),NNe.forEach(t),Tsr=i(z),f6=n(z,"LI",{});var qNe=s(f6);Abe=n(qNe,"STRONG",{});var ZAt=s(Abe);Msr=r(ZAt,"rembert"),ZAt.forEach(t),Esr=r(qNe," \u2014 "),RQ=n(qNe,"A",{href:!0});var e7t=s(RQ);Csr=r(e7t,"RemBertForQuestionAnswering"),e7t.forEach(t),wsr=r(qNe," (RemBERT model)"),qNe.forEach(t),Asr=i(z),m6=n(z,"LI",{});var jNe=s(m6);Lbe=n(jNe,"STRONG",{});var o7t=s(Lbe);Lsr=r(o7t,"roberta"),o7t.forEach(t),ysr=r(jNe," \u2014 "),PQ=n(jNe,"A",{href:!0});var r7t=s(PQ);xsr=r(r7t,"RobertaForQuestionAnswering"),r7t.forEach(t),$sr=r(jNe," (RoBERTa model)"),jNe.forEach(t),ksr=i(z),g6=n(z,"LI",{});var DNe=s(g6);ybe=n(DNe,"STRONG",{});var t7t=s(ybe);Ssr=r(t7t,"roformer"),t7t.forEach(t),Rsr=r(DNe," \u2014 "),BQ=n(DNe,"A",{href:!0});var a7t=s(BQ);Psr=r(a7t,"RoFormerForQuestionAnswering"),a7t.forEach(t),Bsr=r(DNe," (RoFormer model)"),DNe.forEach(t),Isr=i(z),h6=n(z,"LI",{});var GNe=s(h6);xbe=n(GNe,"STRONG",{});var n7t=s(xbe);Nsr=r(n7t,"splinter"),n7t.forEach(t),qsr=r(GNe," \u2014 "),IQ=n(GNe,"A",{href:!0});var s7t=s(IQ);jsr=r(s7t,"SplinterForQuestionAnswering"),s7t.forEach(t),Dsr=r(GNe," (Splinter model)"),GNe.forEach(t),Gsr=i(z),p6=n(z,"LI",{});var ONe=s(p6);$be=n(ONe,"STRONG",{});var l7t=s($be);Osr=r(l7t,"squeezebert"),l7t.forEach(t),Vsr=r(ONe," \u2014 "),NQ=n(ONe,"A",{href:!0});var i7t=s(NQ);Xsr=r(i7t,"SqueezeBertForQuestionAnswering"),i7t.forEach(t),zsr=r(ONe," (SqueezeBERT model)"),ONe.forEach(t),Wsr=i(z),_6=n(z,"LI",{});var VNe=s(_6);kbe=n(VNe,"STRONG",{});var d7t=s(kbe);Qsr=r(d7t,"xlm"),d7t.forEach(t),Hsr=r(VNe," \u2014 "),qQ=n(VNe,"A",{href:!0});var c7t=s(qQ);Usr=r(c7t,"XLMForQuestionAnsweringSimple"),c7t.forEach(t),Jsr=r(VNe," (XLM model)"),VNe.forEach(t),Ysr=i(z),u6=n(z,"LI",{});var XNe=s(u6);Sbe=n(XNe,"STRONG",{});var f7t=s(Sbe);Ksr=r(f7t,"xlm-roberta"),f7t.forEach(t),Zsr=r(XNe," \u2014 "),jQ=n(XNe,"A",{href:!0});var m7t=s(jQ);elr=r(m7t,"XLMRobertaForQuestionAnswering"),m7t.forEach(t),olr=r(XNe," (XLM-RoBERTa model)"),XNe.forEach(t),rlr=i(z),b6=n(z,"LI",{});var zNe=s(b6);Rbe=n(zNe,"STRONG",{});var g7t=s(Rbe);tlr=r(g7t,"xlm-roberta-xl"),g7t.forEach(t),alr=r(zNe," \u2014 "),DQ=n(zNe,"A",{href:!0});var h7t=s(DQ);nlr=r(h7t,"XLMRobertaXLForQuestionAnswering"),h7t.forEach(t),slr=r(zNe," (XLM-RoBERTa-XL model)"),zNe.forEach(t),llr=i(z),v6=n(z,"LI",{});var WNe=s(v6);Pbe=n(WNe,"STRONG",{});var p7t=s(Pbe);ilr=r(p7t,"xlnet"),p7t.forEach(t),dlr=r(WNe," \u2014 "),GQ=n(WNe,"A",{href:!0});var _7t=s(GQ);clr=r(_7t,"XLNetForQuestionAnsweringSimple"),_7t.forEach(t),flr=r(WNe," (XLNet model)"),WNe.forEach(t),mlr=i(z),F6=n(z,"LI",{});var QNe=s(F6);Bbe=n(QNe,"STRONG",{});var u7t=s(Bbe);glr=r(u7t,"yoso"),u7t.forEach(t),hlr=r(QNe," \u2014 "),OQ=n(QNe,"A",{href:!0});var b7t=s(OQ);plr=r(b7t,"YosoForQuestionAnswering"),b7t.forEach(t),_lr=r(QNe," (YOSO model)"),QNe.forEach(t),z.forEach(t),ulr=i(ua),T6=n(ua,"P",{});var HNe=s(T6);blr=r(HNe,"The model is set in evaluation mode by default using "),Ibe=n(HNe,"CODE",{});var v7t=s(Ibe);vlr=r(v7t,"model.eval()"),v7t.forEach(t),Flr=r(HNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=n(HNe,"CODE",{});var F7t=s(Nbe);Tlr=r(F7t,"model.train()"),F7t.forEach(t),HNe.forEach(t),Mlr=i(ua),T(M6.$$.fragment,ua),ua.forEach(t),hl.forEach(t),Wze=i(f),Fd=n(f,"H2",{class:!0});var KQe=s(Fd);E6=n(KQe,"A",{id:!0,class:!0,href:!0});var T7t=s(E6);qbe=n(T7t,"SPAN",{});var M7t=s(qbe);T(Xy.$$.fragment,M7t),M7t.forEach(t),T7t.forEach(t),Elr=i(KQe),jbe=n(KQe,"SPAN",{});var E7t=s(jbe);Clr=r(E7t,"AutoModelForTableQuestionAnswering"),E7t.forEach(t),KQe.forEach(t),Qze=i(f),Oo=n(f,"DIV",{class:!0});var pl=s(Oo);T(zy.$$.fragment,pl),wlr=i(pl),Td=n(pl,"P",{});var Nte=s(Td);Alr=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),VQ=n(Nte,"A",{href:!0});var C7t=s(VQ);Llr=r(C7t,"from_pretrained()"),C7t.forEach(t),ylr=r(Nte," class method or the "),XQ=n(Nte,"A",{href:!0});var w7t=s(XQ);xlr=r(w7t,"from_config()"),w7t.forEach(t),$lr=r(Nte,` class
method.`),Nte.forEach(t),klr=i(pl),Wy=n(pl,"P",{});var ZQe=s(Wy);Slr=r(ZQe,"This class cannot be instantiated directly using "),Dbe=n(ZQe,"CODE",{});var A7t=s(Dbe);Rlr=r(A7t,"__init__()"),A7t.forEach(t),Plr=r(ZQe," (throws an error)."),ZQe.forEach(t),Blr=i(pl),bt=n(pl,"DIV",{class:!0});var zA=s(bt);T(Qy.$$.fragment,zA),Ilr=i(zA),Gbe=n(zA,"P",{});var L7t=s(Gbe);Nlr=r(L7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),L7t.forEach(t),qlr=i(zA),Md=n(zA,"P",{});var qte=s(Md);jlr=r(qte,`Note:
Loading a model from its configuration file does `),Obe=n(qte,"STRONG",{});var y7t=s(Obe);Dlr=r(y7t,"not"),y7t.forEach(t),Glr=r(qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=n(qte,"A",{href:!0});var x7t=s(zQ);Olr=r(x7t,"from_pretrained()"),x7t.forEach(t),Vlr=r(qte," to load the model weights."),qte.forEach(t),Xlr=i(zA),T(C6.$$.fragment,zA),zA.forEach(t),zlr=i(pl),lo=n(pl,"DIV",{class:!0});var ba=s(lo);T(Hy.$$.fragment,ba),Wlr=i(ba),Vbe=n(ba,"P",{});var $7t=s(Vbe);Qlr=r($7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$7t.forEach(t),Hlr=i(ba),Wa=n(ba,"P",{});var WA=s(Wa);Ulr=r(WA,"The model class to instantiate is selected based on the "),Xbe=n(WA,"CODE",{});var k7t=s(Xbe);Jlr=r(k7t,"model_type"),k7t.forEach(t),Ylr=r(WA,` property of the config object (either
passed as an argument or loaded from `),zbe=n(WA,"CODE",{});var S7t=s(zbe);Klr=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),Zlr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(WA,"CODE",{});var R7t=s(Wbe);eir=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),oir=r(WA,":"),WA.forEach(t),rir=i(ba),Qbe=n(ba,"UL",{});var P7t=s(Qbe);w6=n(P7t,"LI",{});var UNe=s(w6);Hbe=n(UNe,"STRONG",{});var B7t=s(Hbe);tir=r(B7t,"tapas"),B7t.forEach(t),air=r(UNe," \u2014 "),WQ=n(UNe,"A",{href:!0});var I7t=s(WQ);nir=r(I7t,"TapasForQuestionAnswering"),I7t.forEach(t),sir=r(UNe," (TAPAS model)"),UNe.forEach(t),P7t.forEach(t),lir=i(ba),A6=n(ba,"P",{});var JNe=s(A6);iir=r(JNe,"The model is set in evaluation mode by default using "),Ube=n(JNe,"CODE",{});var N7t=s(Ube);dir=r(N7t,"model.eval()"),N7t.forEach(t),cir=r(JNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=n(JNe,"CODE",{});var q7t=s(Jbe);fir=r(q7t,"model.train()"),q7t.forEach(t),JNe.forEach(t),mir=i(ba),T(L6.$$.fragment,ba),ba.forEach(t),pl.forEach(t),Hze=i(f),Ed=n(f,"H2",{class:!0});var eHe=s(Ed);y6=n(eHe,"A",{id:!0,class:!0,href:!0});var j7t=s(y6);Ybe=n(j7t,"SPAN",{});var D7t=s(Ybe);T(Uy.$$.fragment,D7t),D7t.forEach(t),j7t.forEach(t),gir=i(eHe),Kbe=n(eHe,"SPAN",{});var G7t=s(Kbe);hir=r(G7t,"AutoModelForImageClassification"),G7t.forEach(t),eHe.forEach(t),Uze=i(f),Vo=n(f,"DIV",{class:!0});var _l=s(Vo);T(Jy.$$.fragment,_l),pir=i(_l),Cd=n(_l,"P",{});var jte=s(Cd);_ir=r(jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QQ=n(jte,"A",{href:!0});var O7t=s(QQ);uir=r(O7t,"from_pretrained()"),O7t.forEach(t),bir=r(jte," class method or the "),HQ=n(jte,"A",{href:!0});var V7t=s(HQ);vir=r(V7t,"from_config()"),V7t.forEach(t),Fir=r(jte,` class
method.`),jte.forEach(t),Tir=i(_l),Yy=n(_l,"P",{});var oHe=s(Yy);Mir=r(oHe,"This class cannot be instantiated directly using "),Zbe=n(oHe,"CODE",{});var X7t=s(Zbe);Eir=r(X7t,"__init__()"),X7t.forEach(t),Cir=r(oHe," (throws an error)."),oHe.forEach(t),wir=i(_l),vt=n(_l,"DIV",{class:!0});var QA=s(vt);T(Ky.$$.fragment,QA),Air=i(QA),eve=n(QA,"P",{});var z7t=s(eve);Lir=r(z7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),z7t.forEach(t),yir=i(QA),wd=n(QA,"P",{});var Dte=s(wd);xir=r(Dte,`Note:
Loading a model from its configuration file does `),ove=n(Dte,"STRONG",{});var W7t=s(ove);$ir=r(W7t,"not"),W7t.forEach(t),kir=r(Dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=n(Dte,"A",{href:!0});var Q7t=s(UQ);Sir=r(Q7t,"from_pretrained()"),Q7t.forEach(t),Rir=r(Dte," to load the model weights."),Dte.forEach(t),Pir=i(QA),T(x6.$$.fragment,QA),QA.forEach(t),Bir=i(_l),io=n(_l,"DIV",{class:!0});var va=s(io);T(Zy.$$.fragment,va),Iir=i(va),rve=n(va,"P",{});var H7t=s(rve);Nir=r(H7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),H7t.forEach(t),qir=i(va),Qa=n(va,"P",{});var HA=s(Qa);jir=r(HA,"The model class to instantiate is selected based on the "),tve=n(HA,"CODE",{});var U7t=s(tve);Dir=r(U7t,"model_type"),U7t.forEach(t),Gir=r(HA,` property of the config object (either
passed as an argument or loaded from `),ave=n(HA,"CODE",{});var J7t=s(ave);Oir=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),Vir=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(HA,"CODE",{});var Y7t=s(nve);Xir=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),zir=r(HA,":"),HA.forEach(t),Wir=i(va),be=n(va,"UL",{});var Fe=s(be);$6=n(Fe,"LI",{});var YNe=s($6);sve=n(YNe,"STRONG",{});var K7t=s(sve);Qir=r(K7t,"beit"),K7t.forEach(t),Hir=r(YNe," \u2014 "),JQ=n(YNe,"A",{href:!0});var Z7t=s(JQ);Uir=r(Z7t,"BeitForImageClassification"),Z7t.forEach(t),Jir=r(YNe," (BEiT model)"),YNe.forEach(t),Yir=i(Fe),k6=n(Fe,"LI",{});var KNe=s(k6);lve=n(KNe,"STRONG",{});var eLt=s(lve);Kir=r(eLt,"convnext"),eLt.forEach(t),Zir=r(KNe," \u2014 "),YQ=n(KNe,"A",{href:!0});var oLt=s(YQ);edr=r(oLt,"ConvNextForImageClassification"),oLt.forEach(t),odr=r(KNe," (ConvNeXT model)"),KNe.forEach(t),rdr=i(Fe),S6=n(Fe,"LI",{});var ZNe=s(S6);ive=n(ZNe,"STRONG",{});var rLt=s(ive);tdr=r(rLt,"cvt"),rLt.forEach(t),adr=r(ZNe," \u2014 "),KQ=n(ZNe,"A",{href:!0});var tLt=s(KQ);ndr=r(tLt,"CvtForImageClassification"),tLt.forEach(t),sdr=r(ZNe," (CvT model)"),ZNe.forEach(t),ldr=i(Fe),R6=n(Fe,"LI",{});var eqe=s(R6);dve=n(eqe,"STRONG",{});var aLt=s(dve);idr=r(aLt,"data2vec-vision"),aLt.forEach(t),ddr=r(eqe," \u2014 "),ZQ=n(eqe,"A",{href:!0});var nLt=s(ZQ);cdr=r(nLt,"Data2VecVisionForImageClassification"),nLt.forEach(t),fdr=r(eqe," (Data2VecVision model)"),eqe.forEach(t),mdr=i(Fe),Ys=n(Fe,"LI",{});var YS=s(Ys);cve=n(YS,"STRONG",{});var sLt=s(cve);gdr=r(sLt,"deit"),sLt.forEach(t),hdr=r(YS," \u2014 "),eH=n(YS,"A",{href:!0});var lLt=s(eH);pdr=r(lLt,"DeiTForImageClassification"),lLt.forEach(t),_dr=r(YS," or "),oH=n(YS,"A",{href:!0});var iLt=s(oH);udr=r(iLt,"DeiTForImageClassificationWithTeacher"),iLt.forEach(t),bdr=r(YS," (DeiT model)"),YS.forEach(t),vdr=i(Fe),P6=n(Fe,"LI",{});var oqe=s(P6);fve=n(oqe,"STRONG",{});var dLt=s(fve);Fdr=r(dLt,"imagegpt"),dLt.forEach(t),Tdr=r(oqe," \u2014 "),rH=n(oqe,"A",{href:!0});var cLt=s(rH);Mdr=r(cLt,"ImageGPTForImageClassification"),cLt.forEach(t),Edr=r(oqe," (ImageGPT model)"),oqe.forEach(t),Cdr=i(Fe),Ks=n(Fe,"LI",{});var KS=s(Ks);mve=n(KS,"STRONG",{});var fLt=s(mve);wdr=r(fLt,"levit"),fLt.forEach(t),Adr=r(KS," \u2014 "),tH=n(KS,"A",{href:!0});var mLt=s(tH);Ldr=r(mLt,"LevitForImageClassification"),mLt.forEach(t),ydr=r(KS," or "),aH=n(KS,"A",{href:!0});var gLt=s(aH);xdr=r(gLt,"LevitForImageClassificationWithTeacher"),gLt.forEach(t),$dr=r(KS," (LeViT model)"),KS.forEach(t),kdr=i(Fe),B6=n(Fe,"LI",{});var rqe=s(B6);gve=n(rqe,"STRONG",{});var hLt=s(gve);Sdr=r(hLt,"mobilevit"),hLt.forEach(t),Rdr=r(rqe," \u2014 "),nH=n(rqe,"A",{href:!0});var pLt=s(nH);Pdr=r(pLt,"MobileViTForImageClassification"),pLt.forEach(t),Bdr=r(rqe," (MobileViT model)"),rqe.forEach(t),Idr=i(Fe),Ft=n(Fe,"LI",{});var Bf=s(Ft);hve=n(Bf,"STRONG",{});var _Lt=s(hve);Ndr=r(_Lt,"perceiver"),_Lt.forEach(t),qdr=r(Bf," \u2014 "),sH=n(Bf,"A",{href:!0});var uLt=s(sH);jdr=r(uLt,"PerceiverForImageClassificationLearned"),uLt.forEach(t),Ddr=r(Bf," or "),lH=n(Bf,"A",{href:!0});var bLt=s(lH);Gdr=r(bLt,"PerceiverForImageClassificationFourier"),bLt.forEach(t),Odr=r(Bf," or "),iH=n(Bf,"A",{href:!0});var vLt=s(iH);Vdr=r(vLt,"PerceiverForImageClassificationConvProcessing"),vLt.forEach(t),Xdr=r(Bf," (Perceiver model)"),Bf.forEach(t),zdr=i(Fe),I6=n(Fe,"LI",{});var tqe=s(I6);pve=n(tqe,"STRONG",{});var FLt=s(pve);Wdr=r(FLt,"poolformer"),FLt.forEach(t),Qdr=r(tqe," \u2014 "),dH=n(tqe,"A",{href:!0});var TLt=s(dH);Hdr=r(TLt,"PoolFormerForImageClassification"),TLt.forEach(t),Udr=r(tqe," (PoolFormer model)"),tqe.forEach(t),Jdr=i(Fe),N6=n(Fe,"LI",{});var aqe=s(N6);_ve=n(aqe,"STRONG",{});var MLt=s(_ve);Ydr=r(MLt,"regnet"),MLt.forEach(t),Kdr=r(aqe," \u2014 "),cH=n(aqe,"A",{href:!0});var ELt=s(cH);Zdr=r(ELt,"RegNetForImageClassification"),ELt.forEach(t),ecr=r(aqe," (RegNet model)"),aqe.forEach(t),ocr=i(Fe),q6=n(Fe,"LI",{});var nqe=s(q6);uve=n(nqe,"STRONG",{});var CLt=s(uve);rcr=r(CLt,"resnet"),CLt.forEach(t),tcr=r(nqe," \u2014 "),fH=n(nqe,"A",{href:!0});var wLt=s(fH);acr=r(wLt,"ResNetForImageClassification"),wLt.forEach(t),ncr=r(nqe," (ResNet model)"),nqe.forEach(t),scr=i(Fe),j6=n(Fe,"LI",{});var sqe=s(j6);bve=n(sqe,"STRONG",{});var ALt=s(bve);lcr=r(ALt,"segformer"),ALt.forEach(t),icr=r(sqe," \u2014 "),mH=n(sqe,"A",{href:!0});var LLt=s(mH);dcr=r(LLt,"SegformerForImageClassification"),LLt.forEach(t),ccr=r(sqe," (SegFormer model)"),sqe.forEach(t),fcr=i(Fe),D6=n(Fe,"LI",{});var lqe=s(D6);vve=n(lqe,"STRONG",{});var yLt=s(vve);mcr=r(yLt,"swin"),yLt.forEach(t),gcr=r(lqe," \u2014 "),gH=n(lqe,"A",{href:!0});var xLt=s(gH);hcr=r(xLt,"SwinForImageClassification"),xLt.forEach(t),pcr=r(lqe," (Swin Transformer model)"),lqe.forEach(t),_cr=i(Fe),G6=n(Fe,"LI",{});var iqe=s(G6);Fve=n(iqe,"STRONG",{});var $Lt=s(Fve);ucr=r($Lt,"swinv2"),$Lt.forEach(t),bcr=r(iqe," \u2014 "),hH=n(iqe,"A",{href:!0});var kLt=s(hH);vcr=r(kLt,"Swinv2ForImageClassification"),kLt.forEach(t),Fcr=r(iqe," (Swin Transformer V2 model)"),iqe.forEach(t),Tcr=i(Fe),O6=n(Fe,"LI",{});var dqe=s(O6);Tve=n(dqe,"STRONG",{});var SLt=s(Tve);Mcr=r(SLt,"van"),SLt.forEach(t),Ecr=r(dqe," \u2014 "),pH=n(dqe,"A",{href:!0});var RLt=s(pH);Ccr=r(RLt,"VanForImageClassification"),RLt.forEach(t),wcr=r(dqe," (VAN model)"),dqe.forEach(t),Acr=i(Fe),V6=n(Fe,"LI",{});var cqe=s(V6);Mve=n(cqe,"STRONG",{});var PLt=s(Mve);Lcr=r(PLt,"vit"),PLt.forEach(t),ycr=r(cqe," \u2014 "),_H=n(cqe,"A",{href:!0});var BLt=s(_H);xcr=r(BLt,"ViTForImageClassification"),BLt.forEach(t),$cr=r(cqe," (ViT model)"),cqe.forEach(t),Fe.forEach(t),kcr=i(va),X6=n(va,"P",{});var fqe=s(X6);Scr=r(fqe,"The model is set in evaluation mode by default using "),Eve=n(fqe,"CODE",{});var ILt=s(Eve);Rcr=r(ILt,"model.eval()"),ILt.forEach(t),Pcr=r(fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=n(fqe,"CODE",{});var NLt=s(Cve);Bcr=r(NLt,"model.train()"),NLt.forEach(t),fqe.forEach(t),Icr=i(va),T(z6.$$.fragment,va),va.forEach(t),_l.forEach(t),Jze=i(f),Ad=n(f,"H2",{class:!0});var rHe=s(Ad);W6=n(rHe,"A",{id:!0,class:!0,href:!0});var qLt=s(W6);wve=n(qLt,"SPAN",{});var jLt=s(wve);T(e9.$$.fragment,jLt),jLt.forEach(t),qLt.forEach(t),Ncr=i(rHe),Ave=n(rHe,"SPAN",{});var DLt=s(Ave);qcr=r(DLt,"AutoModelForVision2Seq"),DLt.forEach(t),rHe.forEach(t),Yze=i(f),Xo=n(f,"DIV",{class:!0});var ul=s(Xo);T(o9.$$.fragment,ul),jcr=i(ul),Ld=n(ul,"P",{});var Gte=s(Ld);Dcr=r(Gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uH=n(Gte,"A",{href:!0});var GLt=s(uH);Gcr=r(GLt,"from_pretrained()"),GLt.forEach(t),Ocr=r(Gte," class method or the "),bH=n(Gte,"A",{href:!0});var OLt=s(bH);Vcr=r(OLt,"from_config()"),OLt.forEach(t),Xcr=r(Gte,` class
method.`),Gte.forEach(t),zcr=i(ul),r9=n(ul,"P",{});var tHe=s(r9);Wcr=r(tHe,"This class cannot be instantiated directly using "),Lve=n(tHe,"CODE",{});var VLt=s(Lve);Qcr=r(VLt,"__init__()"),VLt.forEach(t),Hcr=r(tHe," (throws an error)."),tHe.forEach(t),Ucr=i(ul),Tt=n(ul,"DIV",{class:!0});var UA=s(Tt);T(t9.$$.fragment,UA),Jcr=i(UA),yve=n(UA,"P",{});var XLt=s(yve);Ycr=r(XLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XLt.forEach(t),Kcr=i(UA),yd=n(UA,"P",{});var Ote=s(yd);Zcr=r(Ote,`Note:
Loading a model from its configuration file does `),xve=n(Ote,"STRONG",{});var zLt=s(xve);efr=r(zLt,"not"),zLt.forEach(t),ofr=r(Ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(Ote,"A",{href:!0});var WLt=s(vH);rfr=r(WLt,"from_pretrained()"),WLt.forEach(t),tfr=r(Ote," to load the model weights."),Ote.forEach(t),afr=i(UA),T(Q6.$$.fragment,UA),UA.forEach(t),nfr=i(ul),co=n(ul,"DIV",{class:!0});var Fa=s(co);T(a9.$$.fragment,Fa),sfr=i(Fa),$ve=n(Fa,"P",{});var QLt=s($ve);lfr=r(QLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QLt.forEach(t),ifr=i(Fa),Ha=n(Fa,"P",{});var JA=s(Ha);dfr=r(JA,"The model class to instantiate is selected based on the "),kve=n(JA,"CODE",{});var HLt=s(kve);cfr=r(HLt,"model_type"),HLt.forEach(t),ffr=r(JA,` property of the config object (either
passed as an argument or loaded from `),Sve=n(JA,"CODE",{});var ULt=s(Sve);mfr=r(ULt,"pretrained_model_name_or_path"),ULt.forEach(t),gfr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(JA,"CODE",{});var JLt=s(Rve);hfr=r(JLt,"pretrained_model_name_or_path"),JLt.forEach(t),pfr=r(JA,":"),JA.forEach(t),_fr=i(Fa),Pve=n(Fa,"UL",{});var YLt=s(Pve);H6=n(YLt,"LI",{});var mqe=s(H6);Bve=n(mqe,"STRONG",{});var KLt=s(Bve);ufr=r(KLt,"vision-encoder-decoder"),KLt.forEach(t),bfr=r(mqe," \u2014 "),FH=n(mqe,"A",{href:!0});var ZLt=s(FH);vfr=r(ZLt,"VisionEncoderDecoderModel"),ZLt.forEach(t),Ffr=r(mqe," (Vision Encoder decoder model)"),mqe.forEach(t),YLt.forEach(t),Tfr=i(Fa),U6=n(Fa,"P",{});var gqe=s(U6);Mfr=r(gqe,"The model is set in evaluation mode by default using "),Ive=n(gqe,"CODE",{});var eyt=s(Ive);Efr=r(eyt,"model.eval()"),eyt.forEach(t),Cfr=r(gqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nve=n(gqe,"CODE",{});var oyt=s(Nve);wfr=r(oyt,"model.train()"),oyt.forEach(t),gqe.forEach(t),Afr=i(Fa),T(J6.$$.fragment,Fa),Fa.forEach(t),ul.forEach(t),Kze=i(f),xd=n(f,"H2",{class:!0});var aHe=s(xd);Y6=n(aHe,"A",{id:!0,class:!0,href:!0});var ryt=s(Y6);qve=n(ryt,"SPAN",{});var tyt=s(qve);T(n9.$$.fragment,tyt),tyt.forEach(t),ryt.forEach(t),Lfr=i(aHe),jve=n(aHe,"SPAN",{});var ayt=s(jve);yfr=r(ayt,"AutoModelForVisualQuestionAnswering"),ayt.forEach(t),aHe.forEach(t),Zze=i(f),zo=n(f,"DIV",{class:!0});var bl=s(zo);T(s9.$$.fragment,bl),xfr=i(bl),$d=n(bl,"P",{});var Vte=s($d);$fr=r(Vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),TH=n(Vte,"A",{href:!0});var nyt=s(TH);kfr=r(nyt,"from_pretrained()"),nyt.forEach(t),Sfr=r(Vte," class method or the "),MH=n(Vte,"A",{href:!0});var syt=s(MH);Rfr=r(syt,"from_config()"),syt.forEach(t),Pfr=r(Vte,` class
method.`),Vte.forEach(t),Bfr=i(bl),l9=n(bl,"P",{});var nHe=s(l9);Ifr=r(nHe,"This class cannot be instantiated directly using "),Dve=n(nHe,"CODE",{});var lyt=s(Dve);Nfr=r(lyt,"__init__()"),lyt.forEach(t),qfr=r(nHe," (throws an error)."),nHe.forEach(t),jfr=i(bl),Mt=n(bl,"DIV",{class:!0});var YA=s(Mt);T(i9.$$.fragment,YA),Dfr=i(YA),Gve=n(YA,"P",{});var iyt=s(Gve);Gfr=r(iyt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),iyt.forEach(t),Ofr=i(YA),kd=n(YA,"P",{});var Xte=s(kd);Vfr=r(Xte,`Note:
Loading a model from its configuration file does `),Ove=n(Xte,"STRONG",{});var dyt=s(Ove);Xfr=r(dyt,"not"),dyt.forEach(t),zfr=r(Xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(Xte,"A",{href:!0});var cyt=s(EH);Wfr=r(cyt,"from_pretrained()"),cyt.forEach(t),Qfr=r(Xte," to load the model weights."),Xte.forEach(t),Hfr=i(YA),T(K6.$$.fragment,YA),YA.forEach(t),Ufr=i(bl),fo=n(bl,"DIV",{class:!0});var Ta=s(fo);T(d9.$$.fragment,Ta),Jfr=i(Ta),Vve=n(Ta,"P",{});var fyt=s(Vve);Yfr=r(fyt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),fyt.forEach(t),Kfr=i(Ta),Ua=n(Ta,"P",{});var KA=s(Ua);Zfr=r(KA,"The model class to instantiate is selected based on the "),Xve=n(KA,"CODE",{});var myt=s(Xve);emr=r(myt,"model_type"),myt.forEach(t),omr=r(KA,` property of the config object (either
passed as an argument or loaded from `),zve=n(KA,"CODE",{});var gyt=s(zve);rmr=r(gyt,"pretrained_model_name_or_path"),gyt.forEach(t),tmr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(KA,"CODE",{});var hyt=s(Wve);amr=r(hyt,"pretrained_model_name_or_path"),hyt.forEach(t),nmr=r(KA,":"),KA.forEach(t),smr=i(Ta),Qve=n(Ta,"UL",{});var pyt=s(Qve);Z6=n(pyt,"LI",{});var hqe=s(Z6);Hve=n(hqe,"STRONG",{});var _yt=s(Hve);lmr=r(_yt,"vilt"),_yt.forEach(t),imr=r(hqe," \u2014 "),CH=n(hqe,"A",{href:!0});var uyt=s(CH);dmr=r(uyt,"ViltForQuestionAnswering"),uyt.forEach(t),cmr=r(hqe," (ViLT model)"),hqe.forEach(t),pyt.forEach(t),fmr=i(Ta),eT=n(Ta,"P",{});var pqe=s(eT);mmr=r(pqe,"The model is set in evaluation mode by default using "),Uve=n(pqe,"CODE",{});var byt=s(Uve);gmr=r(byt,"model.eval()"),byt.forEach(t),hmr=r(pqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jve=n(pqe,"CODE",{});var vyt=s(Jve);pmr=r(vyt,"model.train()"),vyt.forEach(t),pqe.forEach(t),_mr=i(Ta),T(oT.$$.fragment,Ta),Ta.forEach(t),bl.forEach(t),eWe=i(f),Sd=n(f,"H2",{class:!0});var sHe=s(Sd);rT=n(sHe,"A",{id:!0,class:!0,href:!0});var Fyt=s(rT);Yve=n(Fyt,"SPAN",{});var Tyt=s(Yve);T(c9.$$.fragment,Tyt),Tyt.forEach(t),Fyt.forEach(t),umr=i(sHe),Kve=n(sHe,"SPAN",{});var Myt=s(Kve);bmr=r(Myt,"AutoModelForAudioClassification"),Myt.forEach(t),sHe.forEach(t),oWe=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(f9.$$.fragment,vl),vmr=i(vl),Rd=n(vl,"P",{});var zte=s(Rd);Fmr=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wH=n(zte,"A",{href:!0});var Eyt=s(wH);Tmr=r(Eyt,"from_pretrained()"),Eyt.forEach(t),Mmr=r(zte," class method or the "),AH=n(zte,"A",{href:!0});var Cyt=s(AH);Emr=r(Cyt,"from_config()"),Cyt.forEach(t),Cmr=r(zte,` class
method.`),zte.forEach(t),wmr=i(vl),m9=n(vl,"P",{});var lHe=s(m9);Amr=r(lHe,"This class cannot be instantiated directly using "),Zve=n(lHe,"CODE",{});var wyt=s(Zve);Lmr=r(wyt,"__init__()"),wyt.forEach(t),ymr=r(lHe," (throws an error)."),lHe.forEach(t),xmr=i(vl),Et=n(vl,"DIV",{class:!0});var ZA=s(Et);T(g9.$$.fragment,ZA),$mr=i(ZA),e3e=n(ZA,"P",{});var Ayt=s(e3e);kmr=r(Ayt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ayt.forEach(t),Smr=i(ZA),Pd=n(ZA,"P",{});var Wte=s(Pd);Rmr=r(Wte,`Note:
Loading a model from its configuration file does `),o3e=n(Wte,"STRONG",{});var Lyt=s(o3e);Pmr=r(Lyt,"not"),Lyt.forEach(t),Bmr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(Wte,"A",{href:!0});var yyt=s(LH);Imr=r(yyt,"from_pretrained()"),yyt.forEach(t),Nmr=r(Wte," to load the model weights."),Wte.forEach(t),qmr=i(ZA),T(tT.$$.fragment,ZA),ZA.forEach(t),jmr=i(vl),mo=n(vl,"DIV",{class:!0});var Ma=s(mo);T(h9.$$.fragment,Ma),Dmr=i(Ma),r3e=n(Ma,"P",{});var xyt=s(r3e);Gmr=r(xyt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xyt.forEach(t),Omr=i(Ma),Ja=n(Ma,"P",{});var e7=s(Ja);Vmr=r(e7,"The model class to instantiate is selected based on the "),t3e=n(e7,"CODE",{});var $yt=s(t3e);Xmr=r($yt,"model_type"),$yt.forEach(t),zmr=r(e7,` property of the config object (either
passed as an argument or loaded from `),a3e=n(e7,"CODE",{});var kyt=s(a3e);Wmr=r(kyt,"pretrained_model_name_or_path"),kyt.forEach(t),Qmr=r(e7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=n(e7,"CODE",{});var Syt=s(n3e);Hmr=r(Syt,"pretrained_model_name_or_path"),Syt.forEach(t),Umr=r(e7,":"),e7.forEach(t),Jmr=i(Ma),Pe=n(Ma,"UL",{});var We=s(Pe);aT=n(We,"LI",{});var _qe=s(aT);s3e=n(_qe,"STRONG",{});var Ryt=s(s3e);Ymr=r(Ryt,"data2vec-audio"),Ryt.forEach(t),Kmr=r(_qe," \u2014 "),yH=n(_qe,"A",{href:!0});var Pyt=s(yH);Zmr=r(Pyt,"Data2VecAudioForSequenceClassification"),Pyt.forEach(t),egr=r(_qe," (Data2VecAudio model)"),_qe.forEach(t),ogr=i(We),nT=n(We,"LI",{});var uqe=s(nT);l3e=n(uqe,"STRONG",{});var Byt=s(l3e);rgr=r(Byt,"hubert"),Byt.forEach(t),tgr=r(uqe," \u2014 "),xH=n(uqe,"A",{href:!0});var Iyt=s(xH);agr=r(Iyt,"HubertForSequenceClassification"),Iyt.forEach(t),ngr=r(uqe," (Hubert model)"),uqe.forEach(t),sgr=i(We),sT=n(We,"LI",{});var bqe=s(sT);i3e=n(bqe,"STRONG",{});var Nyt=s(i3e);lgr=r(Nyt,"sew"),Nyt.forEach(t),igr=r(bqe," \u2014 "),$H=n(bqe,"A",{href:!0});var qyt=s($H);dgr=r(qyt,"SEWForSequenceClassification"),qyt.forEach(t),cgr=r(bqe," (SEW model)"),bqe.forEach(t),fgr=i(We),lT=n(We,"LI",{});var vqe=s(lT);d3e=n(vqe,"STRONG",{});var jyt=s(d3e);mgr=r(jyt,"sew-d"),jyt.forEach(t),ggr=r(vqe," \u2014 "),kH=n(vqe,"A",{href:!0});var Dyt=s(kH);hgr=r(Dyt,"SEWDForSequenceClassification"),Dyt.forEach(t),pgr=r(vqe," (SEW-D model)"),vqe.forEach(t),_gr=i(We),iT=n(We,"LI",{});var Fqe=s(iT);c3e=n(Fqe,"STRONG",{});var Gyt=s(c3e);ugr=r(Gyt,"unispeech"),Gyt.forEach(t),bgr=r(Fqe," \u2014 "),SH=n(Fqe,"A",{href:!0});var Oyt=s(SH);vgr=r(Oyt,"UniSpeechForSequenceClassification"),Oyt.forEach(t),Fgr=r(Fqe," (UniSpeech model)"),Fqe.forEach(t),Tgr=i(We),dT=n(We,"LI",{});var Tqe=s(dT);f3e=n(Tqe,"STRONG",{});var Vyt=s(f3e);Mgr=r(Vyt,"unispeech-sat"),Vyt.forEach(t),Egr=r(Tqe," \u2014 "),RH=n(Tqe,"A",{href:!0});var Xyt=s(RH);Cgr=r(Xyt,"UniSpeechSatForSequenceClassification"),Xyt.forEach(t),wgr=r(Tqe," (UniSpeechSat model)"),Tqe.forEach(t),Agr=i(We),cT=n(We,"LI",{});var Mqe=s(cT);m3e=n(Mqe,"STRONG",{});var zyt=s(m3e);Lgr=r(zyt,"wav2vec2"),zyt.forEach(t),ygr=r(Mqe," \u2014 "),PH=n(Mqe,"A",{href:!0});var Wyt=s(PH);xgr=r(Wyt,"Wav2Vec2ForSequenceClassification"),Wyt.forEach(t),$gr=r(Mqe," (Wav2Vec2 model)"),Mqe.forEach(t),kgr=i(We),fT=n(We,"LI",{});var Eqe=s(fT);g3e=n(Eqe,"STRONG",{});var Qyt=s(g3e);Sgr=r(Qyt,"wav2vec2-conformer"),Qyt.forEach(t),Rgr=r(Eqe," \u2014 "),BH=n(Eqe,"A",{href:!0});var Hyt=s(BH);Pgr=r(Hyt,"Wav2Vec2ConformerForSequenceClassification"),Hyt.forEach(t),Bgr=r(Eqe," (Wav2Vec2-Conformer model)"),Eqe.forEach(t),Igr=i(We),mT=n(We,"LI",{});var Cqe=s(mT);h3e=n(Cqe,"STRONG",{});var Uyt=s(h3e);Ngr=r(Uyt,"wavlm"),Uyt.forEach(t),qgr=r(Cqe," \u2014 "),IH=n(Cqe,"A",{href:!0});var Jyt=s(IH);jgr=r(Jyt,"WavLMForSequenceClassification"),Jyt.forEach(t),Dgr=r(Cqe," (WavLM model)"),Cqe.forEach(t),We.forEach(t),Ggr=i(Ma),gT=n(Ma,"P",{});var wqe=s(gT);Ogr=r(wqe,"The model is set in evaluation mode by default using "),p3e=n(wqe,"CODE",{});var Yyt=s(p3e);Vgr=r(Yyt,"model.eval()"),Yyt.forEach(t),Xgr=r(wqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_3e=n(wqe,"CODE",{});var Kyt=s(_3e);zgr=r(Kyt,"model.train()"),Kyt.forEach(t),wqe.forEach(t),Wgr=i(Ma),T(hT.$$.fragment,Ma),Ma.forEach(t),vl.forEach(t),rWe=i(f),Bd=n(f,"H2",{class:!0});var iHe=s(Bd);pT=n(iHe,"A",{id:!0,class:!0,href:!0});var Zyt=s(pT);u3e=n(Zyt,"SPAN",{});var e9t=s(u3e);T(p9.$$.fragment,e9t),e9t.forEach(t),Zyt.forEach(t),Qgr=i(iHe),b3e=n(iHe,"SPAN",{});var o9t=s(b3e);Hgr=r(o9t,"AutoModelForAudioFrameClassification"),o9t.forEach(t),iHe.forEach(t),tWe=i(f),Qo=n(f,"DIV",{class:!0});var Fl=s(Qo);T(_9.$$.fragment,Fl),Ugr=i(Fl),Id=n(Fl,"P",{});var Qte=s(Id);Jgr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),NH=n(Qte,"A",{href:!0});var r9t=s(NH);Ygr=r(r9t,"from_pretrained()"),r9t.forEach(t),Kgr=r(Qte," class method or the "),qH=n(Qte,"A",{href:!0});var t9t=s(qH);Zgr=r(t9t,"from_config()"),t9t.forEach(t),ehr=r(Qte,` class
method.`),Qte.forEach(t),ohr=i(Fl),u9=n(Fl,"P",{});var dHe=s(u9);rhr=r(dHe,"This class cannot be instantiated directly using "),v3e=n(dHe,"CODE",{});var a9t=s(v3e);thr=r(a9t,"__init__()"),a9t.forEach(t),ahr=r(dHe," (throws an error)."),dHe.forEach(t),nhr=i(Fl),Ct=n(Fl,"DIV",{class:!0});var o7=s(Ct);T(b9.$$.fragment,o7),shr=i(o7),F3e=n(o7,"P",{});var n9t=s(F3e);lhr=r(n9t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),n9t.forEach(t),ihr=i(o7),Nd=n(o7,"P",{});var Hte=s(Nd);dhr=r(Hte,`Note:
Loading a model from its configuration file does `),T3e=n(Hte,"STRONG",{});var s9t=s(T3e);chr=r(s9t,"not"),s9t.forEach(t),fhr=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(Hte,"A",{href:!0});var l9t=s(jH);mhr=r(l9t,"from_pretrained()"),l9t.forEach(t),ghr=r(Hte," to load the model weights."),Hte.forEach(t),hhr=i(o7),T(_T.$$.fragment,o7),o7.forEach(t),phr=i(Fl),go=n(Fl,"DIV",{class:!0});var Ea=s(go);T(v9.$$.fragment,Ea),_hr=i(Ea),M3e=n(Ea,"P",{});var i9t=s(M3e);uhr=r(i9t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),i9t.forEach(t),bhr=i(Ea),Ya=n(Ea,"P",{});var r7=s(Ya);vhr=r(r7,"The model class to instantiate is selected based on the "),E3e=n(r7,"CODE",{});var d9t=s(E3e);Fhr=r(d9t,"model_type"),d9t.forEach(t),Thr=r(r7,` property of the config object (either
passed as an argument or loaded from `),C3e=n(r7,"CODE",{});var c9t=s(C3e);Mhr=r(c9t,"pretrained_model_name_or_path"),c9t.forEach(t),Ehr=r(r7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=n(r7,"CODE",{});var f9t=s(w3e);Chr=r(f9t,"pretrained_model_name_or_path"),f9t.forEach(t),whr=r(r7,":"),r7.forEach(t),Ahr=i(Ea),rt=n(Ea,"UL",{});var Tl=s(rt);uT=n(Tl,"LI",{});var Aqe=s(uT);A3e=n(Aqe,"STRONG",{});var m9t=s(A3e);Lhr=r(m9t,"data2vec-audio"),m9t.forEach(t),yhr=r(Aqe," \u2014 "),DH=n(Aqe,"A",{href:!0});var g9t=s(DH);xhr=r(g9t,"Data2VecAudioForAudioFrameClassification"),g9t.forEach(t),$hr=r(Aqe," (Data2VecAudio model)"),Aqe.forEach(t),khr=i(Tl),bT=n(Tl,"LI",{});var Lqe=s(bT);L3e=n(Lqe,"STRONG",{});var h9t=s(L3e);Shr=r(h9t,"unispeech-sat"),h9t.forEach(t),Rhr=r(Lqe," \u2014 "),GH=n(Lqe,"A",{href:!0});var p9t=s(GH);Phr=r(p9t,"UniSpeechSatForAudioFrameClassification"),p9t.forEach(t),Bhr=r(Lqe," (UniSpeechSat model)"),Lqe.forEach(t),Ihr=i(Tl),vT=n(Tl,"LI",{});var yqe=s(vT);y3e=n(yqe,"STRONG",{});var _9t=s(y3e);Nhr=r(_9t,"wav2vec2"),_9t.forEach(t),qhr=r(yqe," \u2014 "),OH=n(yqe,"A",{href:!0});var u9t=s(OH);jhr=r(u9t,"Wav2Vec2ForAudioFrameClassification"),u9t.forEach(t),Dhr=r(yqe," (Wav2Vec2 model)"),yqe.forEach(t),Ghr=i(Tl),FT=n(Tl,"LI",{});var xqe=s(FT);x3e=n(xqe,"STRONG",{});var b9t=s(x3e);Ohr=r(b9t,"wav2vec2-conformer"),b9t.forEach(t),Vhr=r(xqe," \u2014 "),VH=n(xqe,"A",{href:!0});var v9t=s(VH);Xhr=r(v9t,"Wav2Vec2ConformerForAudioFrameClassification"),v9t.forEach(t),zhr=r(xqe," (Wav2Vec2-Conformer model)"),xqe.forEach(t),Whr=i(Tl),TT=n(Tl,"LI",{});var $qe=s(TT);$3e=n($qe,"STRONG",{});var F9t=s($3e);Qhr=r(F9t,"wavlm"),F9t.forEach(t),Hhr=r($qe," \u2014 "),XH=n($qe,"A",{href:!0});var T9t=s(XH);Uhr=r(T9t,"WavLMForAudioFrameClassification"),T9t.forEach(t),Jhr=r($qe," (WavLM model)"),$qe.forEach(t),Tl.forEach(t),Yhr=i(Ea),MT=n(Ea,"P",{});var kqe=s(MT);Khr=r(kqe,"The model is set in evaluation mode by default using "),k3e=n(kqe,"CODE",{});var M9t=s(k3e);Zhr=r(M9t,"model.eval()"),M9t.forEach(t),epr=r(kqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S3e=n(kqe,"CODE",{});var E9t=s(S3e);opr=r(E9t,"model.train()"),E9t.forEach(t),kqe.forEach(t),rpr=i(Ea),T(ET.$$.fragment,Ea),Ea.forEach(t),Fl.forEach(t),aWe=i(f),qd=n(f,"H2",{class:!0});var cHe=s(qd);CT=n(cHe,"A",{id:!0,class:!0,href:!0});var C9t=s(CT);R3e=n(C9t,"SPAN",{});var w9t=s(R3e);T(F9.$$.fragment,w9t),w9t.forEach(t),C9t.forEach(t),tpr=i(cHe),P3e=n(cHe,"SPAN",{});var A9t=s(P3e);apr=r(A9t,"AutoModelForCTC"),A9t.forEach(t),cHe.forEach(t),nWe=i(f),Ho=n(f,"DIV",{class:!0});var Ml=s(Ho);T(T9.$$.fragment,Ml),npr=i(Ml),jd=n(Ml,"P",{});var Ute=s(jd);spr=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),zH=n(Ute,"A",{href:!0});var L9t=s(zH);lpr=r(L9t,"from_pretrained()"),L9t.forEach(t),ipr=r(Ute," class method or the "),WH=n(Ute,"A",{href:!0});var y9t=s(WH);dpr=r(y9t,"from_config()"),y9t.forEach(t),cpr=r(Ute,` class
method.`),Ute.forEach(t),fpr=i(Ml),M9=n(Ml,"P",{});var fHe=s(M9);mpr=r(fHe,"This class cannot be instantiated directly using "),B3e=n(fHe,"CODE",{});var x9t=s(B3e);gpr=r(x9t,"__init__()"),x9t.forEach(t),hpr=r(fHe," (throws an error)."),fHe.forEach(t),ppr=i(Ml),wt=n(Ml,"DIV",{class:!0});var t7=s(wt);T(E9.$$.fragment,t7),_pr=i(t7),I3e=n(t7,"P",{});var $9t=s(I3e);upr=r($9t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$9t.forEach(t),bpr=i(t7),Dd=n(t7,"P",{});var Jte=s(Dd);vpr=r(Jte,`Note:
Loading a model from its configuration file does `),N3e=n(Jte,"STRONG",{});var k9t=s(N3e);Fpr=r(k9t,"not"),k9t.forEach(t),Tpr=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(Jte,"A",{href:!0});var S9t=s(QH);Mpr=r(S9t,"from_pretrained()"),S9t.forEach(t),Epr=r(Jte," to load the model weights."),Jte.forEach(t),Cpr=i(t7),T(wT.$$.fragment,t7),t7.forEach(t),wpr=i(Ml),ho=n(Ml,"DIV",{class:!0});var Ca=s(ho);T(C9.$$.fragment,Ca),Apr=i(Ca),q3e=n(Ca,"P",{});var R9t=s(q3e);Lpr=r(R9t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),R9t.forEach(t),ypr=i(Ca),Ka=n(Ca,"P",{});var a7=s(Ka);xpr=r(a7,"The model class to instantiate is selected based on the "),j3e=n(a7,"CODE",{});var P9t=s(j3e);$pr=r(P9t,"model_type"),P9t.forEach(t),kpr=r(a7,` property of the config object (either
passed as an argument or loaded from `),D3e=n(a7,"CODE",{});var B9t=s(D3e);Spr=r(B9t,"pretrained_model_name_or_path"),B9t.forEach(t),Rpr=r(a7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=n(a7,"CODE",{});var I9t=s(G3e);Ppr=r(I9t,"pretrained_model_name_or_path"),I9t.forEach(t),Bpr=r(a7,":"),a7.forEach(t),Ipr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);AT=n(Be,"LI",{});var Sqe=s(AT);O3e=n(Sqe,"STRONG",{});var N9t=s(O3e);Npr=r(N9t,"data2vec-audio"),N9t.forEach(t),qpr=r(Sqe," \u2014 "),HH=n(Sqe,"A",{href:!0});var q9t=s(HH);jpr=r(q9t,"Data2VecAudioForCTC"),q9t.forEach(t),Dpr=r(Sqe," (Data2VecAudio model)"),Sqe.forEach(t),Gpr=i(Be),LT=n(Be,"LI",{});var Rqe=s(LT);V3e=n(Rqe,"STRONG",{});var j9t=s(V3e);Opr=r(j9t,"hubert"),j9t.forEach(t),Vpr=r(Rqe," \u2014 "),UH=n(Rqe,"A",{href:!0});var D9t=s(UH);Xpr=r(D9t,"HubertForCTC"),D9t.forEach(t),zpr=r(Rqe," (Hubert model)"),Rqe.forEach(t),Wpr=i(Be),yT=n(Be,"LI",{});var Pqe=s(yT);X3e=n(Pqe,"STRONG",{});var G9t=s(X3e);Qpr=r(G9t,"mctct"),G9t.forEach(t),Hpr=r(Pqe," \u2014 "),JH=n(Pqe,"A",{href:!0});var O9t=s(JH);Upr=r(O9t,"MCTCTForCTC"),O9t.forEach(t),Jpr=r(Pqe," (M-CTC-T model)"),Pqe.forEach(t),Ypr=i(Be),xT=n(Be,"LI",{});var Bqe=s(xT);z3e=n(Bqe,"STRONG",{});var V9t=s(z3e);Kpr=r(V9t,"sew"),V9t.forEach(t),Zpr=r(Bqe," \u2014 "),YH=n(Bqe,"A",{href:!0});var X9t=s(YH);e_r=r(X9t,"SEWForCTC"),X9t.forEach(t),o_r=r(Bqe," (SEW model)"),Bqe.forEach(t),r_r=i(Be),$T=n(Be,"LI",{});var Iqe=s($T);W3e=n(Iqe,"STRONG",{});var z9t=s(W3e);t_r=r(z9t,"sew-d"),z9t.forEach(t),a_r=r(Iqe," \u2014 "),KH=n(Iqe,"A",{href:!0});var W9t=s(KH);n_r=r(W9t,"SEWDForCTC"),W9t.forEach(t),s_r=r(Iqe," (SEW-D model)"),Iqe.forEach(t),l_r=i(Be),kT=n(Be,"LI",{});var Nqe=s(kT);Q3e=n(Nqe,"STRONG",{});var Q9t=s(Q3e);i_r=r(Q9t,"unispeech"),Q9t.forEach(t),d_r=r(Nqe," \u2014 "),ZH=n(Nqe,"A",{href:!0});var H9t=s(ZH);c_r=r(H9t,"UniSpeechForCTC"),H9t.forEach(t),f_r=r(Nqe," (UniSpeech model)"),Nqe.forEach(t),m_r=i(Be),ST=n(Be,"LI",{});var qqe=s(ST);H3e=n(qqe,"STRONG",{});var U9t=s(H3e);g_r=r(U9t,"unispeech-sat"),U9t.forEach(t),h_r=r(qqe," \u2014 "),eU=n(qqe,"A",{href:!0});var J9t=s(eU);p_r=r(J9t,"UniSpeechSatForCTC"),J9t.forEach(t),__r=r(qqe," (UniSpeechSat model)"),qqe.forEach(t),u_r=i(Be),RT=n(Be,"LI",{});var jqe=s(RT);U3e=n(jqe,"STRONG",{});var Y9t=s(U3e);b_r=r(Y9t,"wav2vec2"),Y9t.forEach(t),v_r=r(jqe," \u2014 "),oU=n(jqe,"A",{href:!0});var K9t=s(oU);F_r=r(K9t,"Wav2Vec2ForCTC"),K9t.forEach(t),T_r=r(jqe," (Wav2Vec2 model)"),jqe.forEach(t),M_r=i(Be),PT=n(Be,"LI",{});var Dqe=s(PT);J3e=n(Dqe,"STRONG",{});var Z9t=s(J3e);E_r=r(Z9t,"wav2vec2-conformer"),Z9t.forEach(t),C_r=r(Dqe," \u2014 "),rU=n(Dqe,"A",{href:!0});var ext=s(rU);w_r=r(ext,"Wav2Vec2ConformerForCTC"),ext.forEach(t),A_r=r(Dqe," (Wav2Vec2-Conformer model)"),Dqe.forEach(t),L_r=i(Be),BT=n(Be,"LI",{});var Gqe=s(BT);Y3e=n(Gqe,"STRONG",{});var oxt=s(Y3e);y_r=r(oxt,"wavlm"),oxt.forEach(t),x_r=r(Gqe," \u2014 "),tU=n(Gqe,"A",{href:!0});var rxt=s(tU);$_r=r(rxt,"WavLMForCTC"),rxt.forEach(t),k_r=r(Gqe," (WavLM model)"),Gqe.forEach(t),Be.forEach(t),S_r=i(Ca),IT=n(Ca,"P",{});var Oqe=s(IT);R_r=r(Oqe,"The model is set in evaluation mode by default using "),K3e=n(Oqe,"CODE",{});var txt=s(K3e);P_r=r(txt,"model.eval()"),txt.forEach(t),B_r=r(Oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z3e=n(Oqe,"CODE",{});var axt=s(Z3e);I_r=r(axt,"model.train()"),axt.forEach(t),Oqe.forEach(t),N_r=i(Ca),T(NT.$$.fragment,Ca),Ca.forEach(t),Ml.forEach(t),sWe=i(f),Gd=n(f,"H2",{class:!0});var mHe=s(Gd);qT=n(mHe,"A",{id:!0,class:!0,href:!0});var nxt=s(qT);eFe=n(nxt,"SPAN",{});var sxt=s(eFe);T(w9.$$.fragment,sxt),sxt.forEach(t),nxt.forEach(t),q_r=i(mHe),oFe=n(mHe,"SPAN",{});var lxt=s(oFe);j_r=r(lxt,"AutoModelForSpeechSeq2Seq"),lxt.forEach(t),mHe.forEach(t),lWe=i(f),Uo=n(f,"DIV",{class:!0});var El=s(Uo);T(A9.$$.fragment,El),D_r=i(El),Od=n(El,"P",{});var Yte=s(Od);G_r=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aU=n(Yte,"A",{href:!0});var ixt=s(aU);O_r=r(ixt,"from_pretrained()"),ixt.forEach(t),V_r=r(Yte," class method or the "),nU=n(Yte,"A",{href:!0});var dxt=s(nU);X_r=r(dxt,"from_config()"),dxt.forEach(t),z_r=r(Yte,` class
method.`),Yte.forEach(t),W_r=i(El),L9=n(El,"P",{});var gHe=s(L9);Q_r=r(gHe,"This class cannot be instantiated directly using "),rFe=n(gHe,"CODE",{});var cxt=s(rFe);H_r=r(cxt,"__init__()"),cxt.forEach(t),U_r=r(gHe," (throws an error)."),gHe.forEach(t),J_r=i(El),At=n(El,"DIV",{class:!0});var n7=s(At);T(y9.$$.fragment,n7),Y_r=i(n7),tFe=n(n7,"P",{});var fxt=s(tFe);K_r=r(fxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fxt.forEach(t),Z_r=i(n7),Vd=n(n7,"P",{});var Kte=s(Vd);eur=r(Kte,`Note:
Loading a model from its configuration file does `),aFe=n(Kte,"STRONG",{});var mxt=s(aFe);our=r(mxt,"not"),mxt.forEach(t),rur=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(Kte,"A",{href:!0});var gxt=s(sU);tur=r(gxt,"from_pretrained()"),gxt.forEach(t),aur=r(Kte," to load the model weights."),Kte.forEach(t),nur=i(n7),T(jT.$$.fragment,n7),n7.forEach(t),sur=i(El),po=n(El,"DIV",{class:!0});var wa=s(po);T(x9.$$.fragment,wa),lur=i(wa),nFe=n(wa,"P",{});var hxt=s(nFe);iur=r(hxt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hxt.forEach(t),dur=i(wa),Za=n(wa,"P",{});var s7=s(Za);cur=r(s7,"The model class to instantiate is selected based on the "),sFe=n(s7,"CODE",{});var pxt=s(sFe);fur=r(pxt,"model_type"),pxt.forEach(t),mur=r(s7,` property of the config object (either
passed as an argument or loaded from `),lFe=n(s7,"CODE",{});var _xt=s(lFe);gur=r(_xt,"pretrained_model_name_or_path"),_xt.forEach(t),hur=r(s7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(s7,"CODE",{});var uxt=s(iFe);pur=r(uxt,"pretrained_model_name_or_path"),uxt.forEach(t),_ur=r(s7,":"),s7.forEach(t),uur=i(wa),$9=n(wa,"UL",{});var hHe=s($9);DT=n(hHe,"LI",{});var Vqe=s(DT);dFe=n(Vqe,"STRONG",{});var bxt=s(dFe);bur=r(bxt,"speech-encoder-decoder"),bxt.forEach(t),vur=r(Vqe," \u2014 "),lU=n(Vqe,"A",{href:!0});var vxt=s(lU);Fur=r(vxt,"SpeechEncoderDecoderModel"),vxt.forEach(t),Tur=r(Vqe," (Speech Encoder decoder model)"),Vqe.forEach(t),Mur=i(hHe),GT=n(hHe,"LI",{});var Xqe=s(GT);cFe=n(Xqe,"STRONG",{});var Fxt=s(cFe);Eur=r(Fxt,"speech_to_text"),Fxt.forEach(t),Cur=r(Xqe," \u2014 "),iU=n(Xqe,"A",{href:!0});var Txt=s(iU);wur=r(Txt,"Speech2TextForConditionalGeneration"),Txt.forEach(t),Aur=r(Xqe," (Speech2Text model)"),Xqe.forEach(t),hHe.forEach(t),Lur=i(wa),OT=n(wa,"P",{});var zqe=s(OT);yur=r(zqe,"The model is set in evaluation mode by default using "),fFe=n(zqe,"CODE",{});var Mxt=s(fFe);xur=r(Mxt,"model.eval()"),Mxt.forEach(t),$ur=r(zqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mFe=n(zqe,"CODE",{});var Ext=s(mFe);kur=r(Ext,"model.train()"),Ext.forEach(t),zqe.forEach(t),Sur=i(wa),T(VT.$$.fragment,wa),wa.forEach(t),El.forEach(t),iWe=i(f),Xd=n(f,"H2",{class:!0});var pHe=s(Xd);XT=n(pHe,"A",{id:!0,class:!0,href:!0});var Cxt=s(XT);gFe=n(Cxt,"SPAN",{});var wxt=s(gFe);T(k9.$$.fragment,wxt),wxt.forEach(t),Cxt.forEach(t),Rur=i(pHe),hFe=n(pHe,"SPAN",{});var Axt=s(hFe);Pur=r(Axt,"AutoModelForAudioXVector"),Axt.forEach(t),pHe.forEach(t),dWe=i(f),Jo=n(f,"DIV",{class:!0});var Cl=s(Jo);T(S9.$$.fragment,Cl),Bur=i(Cl),zd=n(Cl,"P",{});var Zte=s(zd);Iur=r(Zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),dU=n(Zte,"A",{href:!0});var Lxt=s(dU);Nur=r(Lxt,"from_pretrained()"),Lxt.forEach(t),qur=r(Zte," class method or the "),cU=n(Zte,"A",{href:!0});var yxt=s(cU);jur=r(yxt,"from_config()"),yxt.forEach(t),Dur=r(Zte,` class
method.`),Zte.forEach(t),Gur=i(Cl),R9=n(Cl,"P",{});var _He=s(R9);Our=r(_He,"This class cannot be instantiated directly using "),pFe=n(_He,"CODE",{});var xxt=s(pFe);Vur=r(xxt,"__init__()"),xxt.forEach(t),Xur=r(_He," (throws an error)."),_He.forEach(t),zur=i(Cl),Lt=n(Cl,"DIV",{class:!0});var l7=s(Lt);T(P9.$$.fragment,l7),Wur=i(l7),_Fe=n(l7,"P",{});var $xt=s(_Fe);Qur=r($xt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$xt.forEach(t),Hur=i(l7),Wd=n(l7,"P",{});var eae=s(Wd);Uur=r(eae,`Note:
Loading a model from its configuration file does `),uFe=n(eae,"STRONG",{});var kxt=s(uFe);Jur=r(kxt,"not"),kxt.forEach(t),Yur=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(eae,"A",{href:!0});var Sxt=s(fU);Kur=r(Sxt,"from_pretrained()"),Sxt.forEach(t),Zur=r(eae," to load the model weights."),eae.forEach(t),e2r=i(l7),T(zT.$$.fragment,l7),l7.forEach(t),o2r=i(Cl),_o=n(Cl,"DIV",{class:!0});var Aa=s(_o);T(B9.$$.fragment,Aa),r2r=i(Aa),bFe=n(Aa,"P",{});var Rxt=s(bFe);t2r=r(Rxt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rxt.forEach(t),a2r=i(Aa),en=n(Aa,"P",{});var i7=s(en);n2r=r(i7,"The model class to instantiate is selected based on the "),vFe=n(i7,"CODE",{});var Pxt=s(vFe);s2r=r(Pxt,"model_type"),Pxt.forEach(t),l2r=r(i7,` property of the config object (either
passed as an argument or loaded from `),FFe=n(i7,"CODE",{});var Bxt=s(FFe);i2r=r(Bxt,"pretrained_model_name_or_path"),Bxt.forEach(t),d2r=r(i7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(i7,"CODE",{});var Ixt=s(TFe);c2r=r(Ixt,"pretrained_model_name_or_path"),Ixt.forEach(t),f2r=r(i7,":"),i7.forEach(t),m2r=i(Aa),tt=n(Aa,"UL",{});var wl=s(tt);WT=n(wl,"LI",{});var Wqe=s(WT);MFe=n(Wqe,"STRONG",{});var Nxt=s(MFe);g2r=r(Nxt,"data2vec-audio"),Nxt.forEach(t),h2r=r(Wqe," \u2014 "),mU=n(Wqe,"A",{href:!0});var qxt=s(mU);p2r=r(qxt,"Data2VecAudioForXVector"),qxt.forEach(t),_2r=r(Wqe," (Data2VecAudio model)"),Wqe.forEach(t),u2r=i(wl),QT=n(wl,"LI",{});var Qqe=s(QT);EFe=n(Qqe,"STRONG",{});var jxt=s(EFe);b2r=r(jxt,"unispeech-sat"),jxt.forEach(t),v2r=r(Qqe," \u2014 "),gU=n(Qqe,"A",{href:!0});var Dxt=s(gU);F2r=r(Dxt,"UniSpeechSatForXVector"),Dxt.forEach(t),T2r=r(Qqe," (UniSpeechSat model)"),Qqe.forEach(t),M2r=i(wl),HT=n(wl,"LI",{});var Hqe=s(HT);CFe=n(Hqe,"STRONG",{});var Gxt=s(CFe);E2r=r(Gxt,"wav2vec2"),Gxt.forEach(t),C2r=r(Hqe," \u2014 "),hU=n(Hqe,"A",{href:!0});var Oxt=s(hU);w2r=r(Oxt,"Wav2Vec2ForXVector"),Oxt.forEach(t),A2r=r(Hqe," (Wav2Vec2 model)"),Hqe.forEach(t),L2r=i(wl),UT=n(wl,"LI",{});var Uqe=s(UT);wFe=n(Uqe,"STRONG",{});var Vxt=s(wFe);y2r=r(Vxt,"wav2vec2-conformer"),Vxt.forEach(t),x2r=r(Uqe," \u2014 "),pU=n(Uqe,"A",{href:!0});var Xxt=s(pU);$2r=r(Xxt,"Wav2Vec2ConformerForXVector"),Xxt.forEach(t),k2r=r(Uqe," (Wav2Vec2-Conformer model)"),Uqe.forEach(t),S2r=i(wl),JT=n(wl,"LI",{});var Jqe=s(JT);AFe=n(Jqe,"STRONG",{});var zxt=s(AFe);R2r=r(zxt,"wavlm"),zxt.forEach(t),P2r=r(Jqe," \u2014 "),_U=n(Jqe,"A",{href:!0});var Wxt=s(_U);B2r=r(Wxt,"WavLMForXVector"),Wxt.forEach(t),I2r=r(Jqe," (WavLM model)"),Jqe.forEach(t),wl.forEach(t),N2r=i(Aa),YT=n(Aa,"P",{});var Yqe=s(YT);q2r=r(Yqe,"The model is set in evaluation mode by default using "),LFe=n(Yqe,"CODE",{});var Qxt=s(LFe);j2r=r(Qxt,"model.eval()"),Qxt.forEach(t),D2r=r(Yqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yFe=n(Yqe,"CODE",{});var Hxt=s(yFe);G2r=r(Hxt,"model.train()"),Hxt.forEach(t),Yqe.forEach(t),O2r=i(Aa),T(KT.$$.fragment,Aa),Aa.forEach(t),Cl.forEach(t),cWe=i(f),Qd=n(f,"H2",{class:!0});var uHe=s(Qd);ZT=n(uHe,"A",{id:!0,class:!0,href:!0});var Uxt=s(ZT);xFe=n(Uxt,"SPAN",{});var Jxt=s(xFe);T(I9.$$.fragment,Jxt),Jxt.forEach(t),Uxt.forEach(t),V2r=i(uHe),$Fe=n(uHe,"SPAN",{});var Yxt=s($Fe);X2r=r(Yxt,"AutoModelForMaskedImageModeling"),Yxt.forEach(t),uHe.forEach(t),fWe=i(f),Yo=n(f,"DIV",{class:!0});var Al=s(Yo);T(N9.$$.fragment,Al),z2r=i(Al),Hd=n(Al,"P",{});var oae=s(Hd);W2r=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),uU=n(oae,"A",{href:!0});var Kxt=s(uU);Q2r=r(Kxt,"from_pretrained()"),Kxt.forEach(t),H2r=r(oae," class method or the "),bU=n(oae,"A",{href:!0});var Zxt=s(bU);U2r=r(Zxt,"from_config()"),Zxt.forEach(t),J2r=r(oae,` class
method.`),oae.forEach(t),Y2r=i(Al),q9=n(Al,"P",{});var bHe=s(q9);K2r=r(bHe,"This class cannot be instantiated directly using "),kFe=n(bHe,"CODE",{});var e$t=s(kFe);Z2r=r(e$t,"__init__()"),e$t.forEach(t),e1r=r(bHe," (throws an error)."),bHe.forEach(t),o1r=i(Al),yt=n(Al,"DIV",{class:!0});var d7=s(yt);T(j9.$$.fragment,d7),r1r=i(d7),SFe=n(d7,"P",{});var o$t=s(SFe);t1r=r(o$t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),o$t.forEach(t),a1r=i(d7),Ud=n(d7,"P",{});var rae=s(Ud);n1r=r(rae,`Note:
Loading a model from its configuration file does `),RFe=n(rae,"STRONG",{});var r$t=s(RFe);s1r=r(r$t,"not"),r$t.forEach(t),l1r=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(rae,"A",{href:!0});var t$t=s(vU);i1r=r(t$t,"from_pretrained()"),t$t.forEach(t),d1r=r(rae," to load the model weights."),rae.forEach(t),c1r=i(d7),T(e8.$$.fragment,d7),d7.forEach(t),f1r=i(Al),uo=n(Al,"DIV",{class:!0});var La=s(uo);T(D9.$$.fragment,La),m1r=i(La),PFe=n(La,"P",{});var a$t=s(PFe);g1r=r(a$t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),a$t.forEach(t),h1r=i(La),on=n(La,"P",{});var c7=s(on);p1r=r(c7,"The model class to instantiate is selected based on the "),BFe=n(c7,"CODE",{});var n$t=s(BFe);_1r=r(n$t,"model_type"),n$t.forEach(t),u1r=r(c7,` property of the config object (either
passed as an argument or loaded from `),IFe=n(c7,"CODE",{});var s$t=s(IFe);b1r=r(s$t,"pretrained_model_name_or_path"),s$t.forEach(t),v1r=r(c7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(c7,"CODE",{});var l$t=s(NFe);F1r=r(l$t,"pretrained_model_name_or_path"),l$t.forEach(t),T1r=r(c7,":"),c7.forEach(t),M1r=i(La),rn=n(La,"UL",{});var f7=s(rn);o8=n(f7,"LI",{});var Kqe=s(o8);qFe=n(Kqe,"STRONG",{});var i$t=s(qFe);E1r=r(i$t,"deit"),i$t.forEach(t),C1r=r(Kqe," \u2014 "),FU=n(Kqe,"A",{href:!0});var d$t=s(FU);w1r=r(d$t,"DeiTForMaskedImageModeling"),d$t.forEach(t),A1r=r(Kqe," (DeiT model)"),Kqe.forEach(t),L1r=i(f7),r8=n(f7,"LI",{});var Zqe=s(r8);jFe=n(Zqe,"STRONG",{});var c$t=s(jFe);y1r=r(c$t,"swin"),c$t.forEach(t),x1r=r(Zqe," \u2014 "),TU=n(Zqe,"A",{href:!0});var f$t=s(TU);$1r=r(f$t,"SwinForMaskedImageModeling"),f$t.forEach(t),k1r=r(Zqe," (Swin Transformer model)"),Zqe.forEach(t),S1r=i(f7),t8=n(f7,"LI",{});var eje=s(t8);DFe=n(eje,"STRONG",{});var m$t=s(DFe);R1r=r(m$t,"swinv2"),m$t.forEach(t),P1r=r(eje," \u2014 "),MU=n(eje,"A",{href:!0});var g$t=s(MU);B1r=r(g$t,"Swinv2ForMaskedImageModeling"),g$t.forEach(t),I1r=r(eje," (Swin Transformer V2 model)"),eje.forEach(t),N1r=i(f7),a8=n(f7,"LI",{});var oje=s(a8);GFe=n(oje,"STRONG",{});var h$t=s(GFe);q1r=r(h$t,"vit"),h$t.forEach(t),j1r=r(oje," \u2014 "),EU=n(oje,"A",{href:!0});var p$t=s(EU);D1r=r(p$t,"ViTForMaskedImageModeling"),p$t.forEach(t),G1r=r(oje," (ViT model)"),oje.forEach(t),f7.forEach(t),O1r=i(La),n8=n(La,"P",{});var rje=s(n8);V1r=r(rje,"The model is set in evaluation mode by default using "),OFe=n(rje,"CODE",{});var _$t=s(OFe);X1r=r(_$t,"model.eval()"),_$t.forEach(t),z1r=r(rje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=n(rje,"CODE",{});var u$t=s(VFe);W1r=r(u$t,"model.train()"),u$t.forEach(t),rje.forEach(t),Q1r=i(La),T(s8.$$.fragment,La),La.forEach(t),Al.forEach(t),mWe=i(f),Jd=n(f,"H2",{class:!0});var vHe=s(Jd);l8=n(vHe,"A",{id:!0,class:!0,href:!0});var b$t=s(l8);XFe=n(b$t,"SPAN",{});var v$t=s(XFe);T(G9.$$.fragment,v$t),v$t.forEach(t),b$t.forEach(t),H1r=i(vHe),zFe=n(vHe,"SPAN",{});var F$t=s(zFe);U1r=r(F$t,"AutoModelForObjectDetection"),F$t.forEach(t),vHe.forEach(t),gWe=i(f),Ko=n(f,"DIV",{class:!0});var Ll=s(Ko);T(O9.$$.fragment,Ll),J1r=i(Ll),Yd=n(Ll,"P",{});var tae=s(Yd);Y1r=r(tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),CU=n(tae,"A",{href:!0});var T$t=s(CU);K1r=r(T$t,"from_pretrained()"),T$t.forEach(t),Z1r=r(tae," class method or the "),wU=n(tae,"A",{href:!0});var M$t=s(wU);ebr=r(M$t,"from_config()"),M$t.forEach(t),obr=r(tae,` class
method.`),tae.forEach(t),rbr=i(Ll),V9=n(Ll,"P",{});var FHe=s(V9);tbr=r(FHe,"This class cannot be instantiated directly using "),WFe=n(FHe,"CODE",{});var E$t=s(WFe);abr=r(E$t,"__init__()"),E$t.forEach(t),nbr=r(FHe," (throws an error)."),FHe.forEach(t),sbr=i(Ll),xt=n(Ll,"DIV",{class:!0});var m7=s(xt);T(X9.$$.fragment,m7),lbr=i(m7),QFe=n(m7,"P",{});var C$t=s(QFe);ibr=r(C$t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),C$t.forEach(t),dbr=i(m7),Kd=n(m7,"P",{});var aae=s(Kd);cbr=r(aae,`Note:
Loading a model from its configuration file does `),HFe=n(aae,"STRONG",{});var w$t=s(HFe);fbr=r(w$t,"not"),w$t.forEach(t),mbr=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(aae,"A",{href:!0});var A$t=s(AU);gbr=r(A$t,"from_pretrained()"),A$t.forEach(t),hbr=r(aae," to load the model weights."),aae.forEach(t),pbr=i(m7),T(i8.$$.fragment,m7),m7.forEach(t),_br=i(Ll),bo=n(Ll,"DIV",{class:!0});var ya=s(bo);T(z9.$$.fragment,ya),ubr=i(ya),UFe=n(ya,"P",{});var L$t=s(UFe);bbr=r(L$t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),L$t.forEach(t),vbr=i(ya),tn=n(ya,"P",{});var g7=s(tn);Fbr=r(g7,"The model class to instantiate is selected based on the "),JFe=n(g7,"CODE",{});var y$t=s(JFe);Tbr=r(y$t,"model_type"),y$t.forEach(t),Mbr=r(g7,` property of the config object (either
passed as an argument or loaded from `),YFe=n(g7,"CODE",{});var x$t=s(YFe);Ebr=r(x$t,"pretrained_model_name_or_path"),x$t.forEach(t),Cbr=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(g7,"CODE",{});var $$t=s(KFe);wbr=r($$t,"pretrained_model_name_or_path"),$$t.forEach(t),Abr=r(g7,":"),g7.forEach(t),Lbr=i(ya),W9=n(ya,"UL",{});var THe=s(W9);d8=n(THe,"LI",{});var tje=s(d8);ZFe=n(tje,"STRONG",{});var k$t=s(ZFe);ybr=r(k$t,"detr"),k$t.forEach(t),xbr=r(tje," \u2014 "),LU=n(tje,"A",{href:!0});var S$t=s(LU);$br=r(S$t,"DetrForObjectDetection"),S$t.forEach(t),kbr=r(tje," (DETR model)"),tje.forEach(t),Sbr=i(THe),c8=n(THe,"LI",{});var aje=s(c8);e6e=n(aje,"STRONG",{});var R$t=s(e6e);Rbr=r(R$t,"yolos"),R$t.forEach(t),Pbr=r(aje," \u2014 "),yU=n(aje,"A",{href:!0});var P$t=s(yU);Bbr=r(P$t,"YolosForObjectDetection"),P$t.forEach(t),Ibr=r(aje," (YOLOS model)"),aje.forEach(t),THe.forEach(t),Nbr=i(ya),f8=n(ya,"P",{});var nje=s(f8);qbr=r(nje,"The model is set in evaluation mode by default using "),o6e=n(nje,"CODE",{});var B$t=s(o6e);jbr=r(B$t,"model.eval()"),B$t.forEach(t),Dbr=r(nje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r6e=n(nje,"CODE",{});var I$t=s(r6e);Gbr=r(I$t,"model.train()"),I$t.forEach(t),nje.forEach(t),Obr=i(ya),T(m8.$$.fragment,ya),ya.forEach(t),Ll.forEach(t),hWe=i(f),Zd=n(f,"H2",{class:!0});var MHe=s(Zd);g8=n(MHe,"A",{id:!0,class:!0,href:!0});var N$t=s(g8);t6e=n(N$t,"SPAN",{});var q$t=s(t6e);T(Q9.$$.fragment,q$t),q$t.forEach(t),N$t.forEach(t),Vbr=i(MHe),a6e=n(MHe,"SPAN",{});var j$t=s(a6e);Xbr=r(j$t,"AutoModelForImageSegmentation"),j$t.forEach(t),MHe.forEach(t),pWe=i(f),Zo=n(f,"DIV",{class:!0});var yl=s(Zo);T(H9.$$.fragment,yl),zbr=i(yl),ec=n(yl,"P",{});var nae=s(ec);Wbr=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),xU=n(nae,"A",{href:!0});var D$t=s(xU);Qbr=r(D$t,"from_pretrained()"),D$t.forEach(t),Hbr=r(nae," class method or the "),$U=n(nae,"A",{href:!0});var G$t=s($U);Ubr=r(G$t,"from_config()"),G$t.forEach(t),Jbr=r(nae,` class
method.`),nae.forEach(t),Ybr=i(yl),U9=n(yl,"P",{});var EHe=s(U9);Kbr=r(EHe,"This class cannot be instantiated directly using "),n6e=n(EHe,"CODE",{});var O$t=s(n6e);Zbr=r(O$t,"__init__()"),O$t.forEach(t),evr=r(EHe," (throws an error)."),EHe.forEach(t),ovr=i(yl),$t=n(yl,"DIV",{class:!0});var h7=s($t);T(J9.$$.fragment,h7),rvr=i(h7),s6e=n(h7,"P",{});var V$t=s(s6e);tvr=r(V$t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),V$t.forEach(t),avr=i(h7),oc=n(h7,"P",{});var sae=s(oc);nvr=r(sae,`Note:
Loading a model from its configuration file does `),l6e=n(sae,"STRONG",{});var X$t=s(l6e);svr=r(X$t,"not"),X$t.forEach(t),lvr=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(sae,"A",{href:!0});var z$t=s(kU);ivr=r(z$t,"from_pretrained()"),z$t.forEach(t),dvr=r(sae," to load the model weights."),sae.forEach(t),cvr=i(h7),T(h8.$$.fragment,h7),h7.forEach(t),fvr=i(yl),vo=n(yl,"DIV",{class:!0});var xa=s(vo);T(Y9.$$.fragment,xa),mvr=i(xa),i6e=n(xa,"P",{});var W$t=s(i6e);gvr=r(W$t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),W$t.forEach(t),hvr=i(xa),an=n(xa,"P",{});var p7=s(an);pvr=r(p7,"The model class to instantiate is selected based on the "),d6e=n(p7,"CODE",{});var Q$t=s(d6e);_vr=r(Q$t,"model_type"),Q$t.forEach(t),uvr=r(p7,` property of the config object (either
passed as an argument or loaded from `),c6e=n(p7,"CODE",{});var H$t=s(c6e);bvr=r(H$t,"pretrained_model_name_or_path"),H$t.forEach(t),vvr=r(p7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=n(p7,"CODE",{});var U$t=s(f6e);Fvr=r(U$t,"pretrained_model_name_or_path"),U$t.forEach(t),Tvr=r(p7,":"),p7.forEach(t),Mvr=i(xa),m6e=n(xa,"UL",{});var J$t=s(m6e);p8=n(J$t,"LI",{});var sje=s(p8);g6e=n(sje,"STRONG",{});var Y$t=s(g6e);Evr=r(Y$t,"detr"),Y$t.forEach(t),Cvr=r(sje," \u2014 "),SU=n(sje,"A",{href:!0});var K$t=s(SU);wvr=r(K$t,"DetrForSegmentation"),K$t.forEach(t),Avr=r(sje," (DETR model)"),sje.forEach(t),J$t.forEach(t),Lvr=i(xa),_8=n(xa,"P",{});var lje=s(_8);yvr=r(lje,"The model is set in evaluation mode by default using "),h6e=n(lje,"CODE",{});var Z$t=s(h6e);xvr=r(Z$t,"model.eval()"),Z$t.forEach(t),$vr=r(lje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p6e=n(lje,"CODE",{});var ekt=s(p6e);kvr=r(ekt,"model.train()"),ekt.forEach(t),lje.forEach(t),Svr=i(xa),T(u8.$$.fragment,xa),xa.forEach(t),yl.forEach(t),_We=i(f),rc=n(f,"H2",{class:!0});var CHe=s(rc);b8=n(CHe,"A",{id:!0,class:!0,href:!0});var okt=s(b8);_6e=n(okt,"SPAN",{});var rkt=s(_6e);T(K9.$$.fragment,rkt),rkt.forEach(t),okt.forEach(t),Rvr=i(CHe),u6e=n(CHe,"SPAN",{});var tkt=s(u6e);Pvr=r(tkt,"AutoModelForSemanticSegmentation"),tkt.forEach(t),CHe.forEach(t),uWe=i(f),er=n(f,"DIV",{class:!0});var xl=s(er);T(Z9.$$.fragment,xl),Bvr=i(xl),tc=n(xl,"P",{});var lae=s(tc);Ivr=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),RU=n(lae,"A",{href:!0});var akt=s(RU);Nvr=r(akt,"from_pretrained()"),akt.forEach(t),qvr=r(lae," class method or the "),PU=n(lae,"A",{href:!0});var nkt=s(PU);jvr=r(nkt,"from_config()"),nkt.forEach(t),Dvr=r(lae,` class
method.`),lae.forEach(t),Gvr=i(xl),ex=n(xl,"P",{});var wHe=s(ex);Ovr=r(wHe,"This class cannot be instantiated directly using "),b6e=n(wHe,"CODE",{});var skt=s(b6e);Vvr=r(skt,"__init__()"),skt.forEach(t),Xvr=r(wHe," (throws an error)."),wHe.forEach(t),zvr=i(xl),kt=n(xl,"DIV",{class:!0});var _7=s(kt);T(ox.$$.fragment,_7),Wvr=i(_7),v6e=n(_7,"P",{});var lkt=s(v6e);Qvr=r(lkt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),lkt.forEach(t),Hvr=i(_7),ac=n(_7,"P",{});var iae=s(ac);Uvr=r(iae,`Note:
Loading a model from its configuration file does `),F6e=n(iae,"STRONG",{});var ikt=s(F6e);Jvr=r(ikt,"not"),ikt.forEach(t),Yvr=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=n(iae,"A",{href:!0});var dkt=s(BU);Kvr=r(dkt,"from_pretrained()"),dkt.forEach(t),Zvr=r(iae," to load the model weights."),iae.forEach(t),e3r=i(_7),T(v8.$$.fragment,_7),_7.forEach(t),o3r=i(xl),Fo=n(xl,"DIV",{class:!0});var $a=s(Fo);T(rx.$$.fragment,$a),r3r=i($a),T6e=n($a,"P",{});var ckt=s(T6e);t3r=r(ckt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ckt.forEach(t),a3r=i($a),nn=n($a,"P",{});var u7=s(nn);n3r=r(u7,"The model class to instantiate is selected based on the "),M6e=n(u7,"CODE",{});var fkt=s(M6e);s3r=r(fkt,"model_type"),fkt.forEach(t),l3r=r(u7,` property of the config object (either
passed as an argument or loaded from `),E6e=n(u7,"CODE",{});var mkt=s(E6e);i3r=r(mkt,"pretrained_model_name_or_path"),mkt.forEach(t),d3r=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=n(u7,"CODE",{});var gkt=s(C6e);c3r=r(gkt,"pretrained_model_name_or_path"),gkt.forEach(t),f3r=r(u7,":"),u7.forEach(t),m3r=i($a),at=n($a,"UL",{});var $l=s(at);F8=n($l,"LI",{});var ije=s(F8);w6e=n(ije,"STRONG",{});var hkt=s(w6e);g3r=r(hkt,"beit"),hkt.forEach(t),h3r=r(ije," \u2014 "),IU=n(ije,"A",{href:!0});var pkt=s(IU);p3r=r(pkt,"BeitForSemanticSegmentation"),pkt.forEach(t),_3r=r(ije," (BEiT model)"),ije.forEach(t),u3r=i($l),T8=n($l,"LI",{});var dje=s(T8);A6e=n(dje,"STRONG",{});var _kt=s(A6e);b3r=r(_kt,"data2vec-vision"),_kt.forEach(t),v3r=r(dje," \u2014 "),NU=n(dje,"A",{href:!0});var ukt=s(NU);F3r=r(ukt,"Data2VecVisionForSemanticSegmentation"),ukt.forEach(t),T3r=r(dje," (Data2VecVision model)"),dje.forEach(t),M3r=i($l),M8=n($l,"LI",{});var cje=s(M8);L6e=n(cje,"STRONG",{});var bkt=s(L6e);E3r=r(bkt,"dpt"),bkt.forEach(t),C3r=r(cje," \u2014 "),qU=n(cje,"A",{href:!0});var vkt=s(qU);w3r=r(vkt,"DPTForSemanticSegmentation"),vkt.forEach(t),A3r=r(cje," (DPT model)"),cje.forEach(t),L3r=i($l),E8=n($l,"LI",{});var fje=s(E8);y6e=n(fje,"STRONG",{});var Fkt=s(y6e);y3r=r(Fkt,"mobilevit"),Fkt.forEach(t),x3r=r(fje," \u2014 "),jU=n(fje,"A",{href:!0});var Tkt=s(jU);$3r=r(Tkt,"MobileViTForSemanticSegmentation"),Tkt.forEach(t),k3r=r(fje," (MobileViT model)"),fje.forEach(t),S3r=i($l),C8=n($l,"LI",{});var mje=s(C8);x6e=n(mje,"STRONG",{});var Mkt=s(x6e);R3r=r(Mkt,"segformer"),Mkt.forEach(t),P3r=r(mje," \u2014 "),DU=n(mje,"A",{href:!0});var Ekt=s(DU);B3r=r(Ekt,"SegformerForSemanticSegmentation"),Ekt.forEach(t),I3r=r(mje," (SegFormer model)"),mje.forEach(t),$l.forEach(t),N3r=i($a),w8=n($a,"P",{});var gje=s(w8);q3r=r(gje,"The model is set in evaluation mode by default using "),$6e=n(gje,"CODE",{});var Ckt=s($6e);j3r=r(Ckt,"model.eval()"),Ckt.forEach(t),D3r=r(gje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k6e=n(gje,"CODE",{});var wkt=s(k6e);G3r=r(wkt,"model.train()"),wkt.forEach(t),gje.forEach(t),O3r=i($a),T(A8.$$.fragment,$a),$a.forEach(t),xl.forEach(t),bWe=i(f),nc=n(f,"H2",{class:!0});var AHe=s(nc);L8=n(AHe,"A",{id:!0,class:!0,href:!0});var Akt=s(L8);S6e=n(Akt,"SPAN",{});var Lkt=s(S6e);T(tx.$$.fragment,Lkt),Lkt.forEach(t),Akt.forEach(t),V3r=i(AHe),R6e=n(AHe,"SPAN",{});var ykt=s(R6e);X3r=r(ykt,"AutoModelForInstanceSegmentation"),ykt.forEach(t),AHe.forEach(t),vWe=i(f),or=n(f,"DIV",{class:!0});var kl=s(or);T(ax.$$.fragment,kl),z3r=i(kl),sc=n(kl,"P",{});var dae=s(sc);W3r=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),GU=n(dae,"A",{href:!0});var xkt=s(GU);Q3r=r(xkt,"from_pretrained()"),xkt.forEach(t),H3r=r(dae," class method or the "),OU=n(dae,"A",{href:!0});var $kt=s(OU);U3r=r($kt,"from_config()"),$kt.forEach(t),J3r=r(dae,` class
method.`),dae.forEach(t),Y3r=i(kl),nx=n(kl,"P",{});var LHe=s(nx);K3r=r(LHe,"This class cannot be instantiated directly using "),P6e=n(LHe,"CODE",{});var kkt=s(P6e);Z3r=r(kkt,"__init__()"),kkt.forEach(t),eFr=r(LHe," (throws an error)."),LHe.forEach(t),oFr=i(kl),St=n(kl,"DIV",{class:!0});var b7=s(St);T(sx.$$.fragment,b7),rFr=i(b7),B6e=n(b7,"P",{});var Skt=s(B6e);tFr=r(Skt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Skt.forEach(t),aFr=i(b7),lc=n(b7,"P",{});var cae=s(lc);nFr=r(cae,`Note:
Loading a model from its configuration file does `),I6e=n(cae,"STRONG",{});var Rkt=s(I6e);sFr=r(Rkt,"not"),Rkt.forEach(t),lFr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(cae,"A",{href:!0});var Pkt=s(VU);iFr=r(Pkt,"from_pretrained()"),Pkt.forEach(t),dFr=r(cae," to load the model weights."),cae.forEach(t),cFr=i(b7),T(y8.$$.fragment,b7),b7.forEach(t),fFr=i(kl),To=n(kl,"DIV",{class:!0});var ka=s(To);T(lx.$$.fragment,ka),mFr=i(ka),N6e=n(ka,"P",{});var Bkt=s(N6e);gFr=r(Bkt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Bkt.forEach(t),hFr=i(ka),sn=n(ka,"P",{});var v7=s(sn);pFr=r(v7,"The model class to instantiate is selected based on the "),q6e=n(v7,"CODE",{});var Ikt=s(q6e);_Fr=r(Ikt,"model_type"),Ikt.forEach(t),uFr=r(v7,` property of the config object (either
passed as an argument or loaded from `),j6e=n(v7,"CODE",{});var Nkt=s(j6e);bFr=r(Nkt,"pretrained_model_name_or_path"),Nkt.forEach(t),vFr=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D6e=n(v7,"CODE",{});var qkt=s(D6e);FFr=r(qkt,"pretrained_model_name_or_path"),qkt.forEach(t),TFr=r(v7,":"),v7.forEach(t),MFr=i(ka),G6e=n(ka,"UL",{});var jkt=s(G6e);x8=n(jkt,"LI",{});var hje=s(x8);O6e=n(hje,"STRONG",{});var Dkt=s(O6e);EFr=r(Dkt,"maskformer"),Dkt.forEach(t),CFr=r(hje," \u2014 "),XU=n(hje,"A",{href:!0});var Gkt=s(XU);wFr=r(Gkt,"MaskFormerForInstanceSegmentation"),Gkt.forEach(t),AFr=r(hje," (MaskFormer model)"),hje.forEach(t),jkt.forEach(t),LFr=i(ka),$8=n(ka,"P",{});var pje=s($8);yFr=r(pje,"The model is set in evaluation mode by default using "),V6e=n(pje,"CODE",{});var Okt=s(V6e);xFr=r(Okt,"model.eval()"),Okt.forEach(t),$Fr=r(pje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X6e=n(pje,"CODE",{});var Vkt=s(X6e);kFr=r(Vkt,"model.train()"),Vkt.forEach(t),pje.forEach(t),SFr=i(ka),T(k8.$$.fragment,ka),ka.forEach(t),kl.forEach(t),FWe=i(f),ic=n(f,"H2",{class:!0});var yHe=s(ic);S8=n(yHe,"A",{id:!0,class:!0,href:!0});var Xkt=s(S8);z6e=n(Xkt,"SPAN",{});var zkt=s(z6e);T(ix.$$.fragment,zkt),zkt.forEach(t),Xkt.forEach(t),RFr=i(yHe),W6e=n(yHe,"SPAN",{});var Wkt=s(W6e);PFr=r(Wkt,"TFAutoModel"),Wkt.forEach(t),yHe.forEach(t),TWe=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(dx.$$.fragment,Sl),BFr=i(Sl),dc=n(Sl,"P",{});var fae=s(dc);IFr=r(fae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zU=n(fae,"A",{href:!0});var Qkt=s(zU);NFr=r(Qkt,"from_pretrained()"),Qkt.forEach(t),qFr=r(fae," class method or the "),WU=n(fae,"A",{href:!0});var Hkt=s(WU);jFr=r(Hkt,"from_config()"),Hkt.forEach(t),DFr=r(fae,` class
method.`),fae.forEach(t),GFr=i(Sl),cx=n(Sl,"P",{});var xHe=s(cx);OFr=r(xHe,"This class cannot be instantiated directly using "),Q6e=n(xHe,"CODE",{});var Ukt=s(Q6e);VFr=r(Ukt,"__init__()"),Ukt.forEach(t),XFr=r(xHe," (throws an error)."),xHe.forEach(t),zFr=i(Sl),Rt=n(Sl,"DIV",{class:!0});var F7=s(Rt);T(fx.$$.fragment,F7),WFr=i(F7),H6e=n(F7,"P",{});var Jkt=s(H6e);QFr=r(Jkt,"Instantiates one of the base model classes of the library from a configuration."),Jkt.forEach(t),HFr=i(F7),cc=n(F7,"P",{});var mae=s(cc);UFr=r(mae,`Note:
Loading a model from its configuration file does `),U6e=n(mae,"STRONG",{});var Ykt=s(U6e);JFr=r(Ykt,"not"),Ykt.forEach(t),YFr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(mae,"A",{href:!0});var Kkt=s(QU);KFr=r(Kkt,"from_pretrained()"),Kkt.forEach(t),ZFr=r(mae," to load the model weights."),mae.forEach(t),e6r=i(F7),T(R8.$$.fragment,F7),F7.forEach(t),o6r=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(mx.$$.fragment,Rl),r6r=i(Rl),J6e=n(Rl,"P",{});var Zkt=s(J6e);t6r=r(Zkt,"Instantiate one of the base model classes of the library from a pretrained model."),Zkt.forEach(t),a6r=i(Rl),ln=n(Rl,"P",{});var T7=s(ln);n6r=r(T7,"The model class to instantiate is selected based on the "),Y6e=n(T7,"CODE",{});var eSt=s(Y6e);s6r=r(eSt,"model_type"),eSt.forEach(t),l6r=r(T7,` property of the config object (either
passed as an argument or loaded from `),K6e=n(T7,"CODE",{});var oSt=s(K6e);i6r=r(oSt,"pretrained_model_name_or_path"),oSt.forEach(t),d6r=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=n(T7,"CODE",{});var rSt=s(Z6e);c6r=r(rSt,"pretrained_model_name_or_path"),rSt.forEach(t),f6r=r(T7,":"),T7.forEach(t),m6r=i(Rl),I=n(Rl,"UL",{});var D=s(I);P8=n(D,"LI",{});var _je=s(P8);eTe=n(_je,"STRONG",{});var tSt=s(eTe);g6r=r(tSt,"albert"),tSt.forEach(t),h6r=r(_je," \u2014 "),HU=n(_je,"A",{href:!0});var aSt=s(HU);p6r=r(aSt,"TFAlbertModel"),aSt.forEach(t),_6r=r(_je," (ALBERT model)"),_je.forEach(t),u6r=i(D),B8=n(D,"LI",{});var uje=s(B8);oTe=n(uje,"STRONG",{});var nSt=s(oTe);b6r=r(nSt,"bart"),nSt.forEach(t),v6r=r(uje," \u2014 "),UU=n(uje,"A",{href:!0});var sSt=s(UU);F6r=r(sSt,"TFBartModel"),sSt.forEach(t),T6r=r(uje," (BART model)"),uje.forEach(t),M6r=i(D),I8=n(D,"LI",{});var bje=s(I8);rTe=n(bje,"STRONG",{});var lSt=s(rTe);E6r=r(lSt,"bert"),lSt.forEach(t),C6r=r(bje," \u2014 "),JU=n(bje,"A",{href:!0});var iSt=s(JU);w6r=r(iSt,"TFBertModel"),iSt.forEach(t),A6r=r(bje," (BERT model)"),bje.forEach(t),L6r=i(D),N8=n(D,"LI",{});var vje=s(N8);tTe=n(vje,"STRONG",{});var dSt=s(tTe);y6r=r(dSt,"blenderbot"),dSt.forEach(t),x6r=r(vje," \u2014 "),YU=n(vje,"A",{href:!0});var cSt=s(YU);$6r=r(cSt,"TFBlenderbotModel"),cSt.forEach(t),k6r=r(vje," (Blenderbot model)"),vje.forEach(t),S6r=i(D),q8=n(D,"LI",{});var Fje=s(q8);aTe=n(Fje,"STRONG",{});var fSt=s(aTe);R6r=r(fSt,"blenderbot-small"),fSt.forEach(t),P6r=r(Fje," \u2014 "),KU=n(Fje,"A",{href:!0});var mSt=s(KU);B6r=r(mSt,"TFBlenderbotSmallModel"),mSt.forEach(t),I6r=r(Fje," (BlenderbotSmall model)"),Fje.forEach(t),N6r=i(D),j8=n(D,"LI",{});var Tje=s(j8);nTe=n(Tje,"STRONG",{});var gSt=s(nTe);q6r=r(gSt,"camembert"),gSt.forEach(t),j6r=r(Tje," \u2014 "),ZU=n(Tje,"A",{href:!0});var hSt=s(ZU);D6r=r(hSt,"TFCamembertModel"),hSt.forEach(t),G6r=r(Tje," (CamemBERT model)"),Tje.forEach(t),O6r=i(D),D8=n(D,"LI",{});var Mje=s(D8);sTe=n(Mje,"STRONG",{});var pSt=s(sTe);V6r=r(pSt,"clip"),pSt.forEach(t),X6r=r(Mje," \u2014 "),eJ=n(Mje,"A",{href:!0});var _St=s(eJ);z6r=r(_St,"TFCLIPModel"),_St.forEach(t),W6r=r(Mje," (CLIP model)"),Mje.forEach(t),Q6r=i(D),G8=n(D,"LI",{});var Eje=s(G8);lTe=n(Eje,"STRONG",{});var uSt=s(lTe);H6r=r(uSt,"convbert"),uSt.forEach(t),U6r=r(Eje," \u2014 "),oJ=n(Eje,"A",{href:!0});var bSt=s(oJ);J6r=r(bSt,"TFConvBertModel"),bSt.forEach(t),Y6r=r(Eje," (ConvBERT model)"),Eje.forEach(t),K6r=i(D),O8=n(D,"LI",{});var Cje=s(O8);iTe=n(Cje,"STRONG",{});var vSt=s(iTe);Z6r=r(vSt,"convnext"),vSt.forEach(t),eTr=r(Cje," \u2014 "),rJ=n(Cje,"A",{href:!0});var FSt=s(rJ);oTr=r(FSt,"TFConvNextModel"),FSt.forEach(t),rTr=r(Cje," (ConvNeXT model)"),Cje.forEach(t),tTr=i(D),V8=n(D,"LI",{});var wje=s(V8);dTe=n(wje,"STRONG",{});var TSt=s(dTe);aTr=r(TSt,"ctrl"),TSt.forEach(t),nTr=r(wje," \u2014 "),tJ=n(wje,"A",{href:!0});var MSt=s(tJ);sTr=r(MSt,"TFCTRLModel"),MSt.forEach(t),lTr=r(wje," (CTRL model)"),wje.forEach(t),iTr=i(D),X8=n(D,"LI",{});var Aje=s(X8);cTe=n(Aje,"STRONG",{});var ESt=s(cTe);dTr=r(ESt,"data2vec-vision"),ESt.forEach(t),cTr=r(Aje," \u2014 "),aJ=n(Aje,"A",{href:!0});var CSt=s(aJ);fTr=r(CSt,"TFData2VecVisionModel"),CSt.forEach(t),mTr=r(Aje," (Data2VecVision model)"),Aje.forEach(t),gTr=i(D),z8=n(D,"LI",{});var Lje=s(z8);fTe=n(Lje,"STRONG",{});var wSt=s(fTe);hTr=r(wSt,"deberta"),wSt.forEach(t),pTr=r(Lje," \u2014 "),nJ=n(Lje,"A",{href:!0});var ASt=s(nJ);_Tr=r(ASt,"TFDebertaModel"),ASt.forEach(t),uTr=r(Lje," (DeBERTa model)"),Lje.forEach(t),bTr=i(D),W8=n(D,"LI",{});var yje=s(W8);mTe=n(yje,"STRONG",{});var LSt=s(mTe);vTr=r(LSt,"deberta-v2"),LSt.forEach(t),FTr=r(yje," \u2014 "),sJ=n(yje,"A",{href:!0});var ySt=s(sJ);TTr=r(ySt,"TFDebertaV2Model"),ySt.forEach(t),MTr=r(yje," (DeBERTa-v2 model)"),yje.forEach(t),ETr=i(D),Q8=n(D,"LI",{});var xje=s(Q8);gTe=n(xje,"STRONG",{});var xSt=s(gTe);CTr=r(xSt,"deit"),xSt.forEach(t),wTr=r(xje," \u2014 "),lJ=n(xje,"A",{href:!0});var $St=s(lJ);ATr=r($St,"TFDeiTModel"),$St.forEach(t),LTr=r(xje," (DeiT model)"),xje.forEach(t),yTr=i(D),H8=n(D,"LI",{});var $je=s(H8);hTe=n($je,"STRONG",{});var kSt=s(hTe);xTr=r(kSt,"distilbert"),kSt.forEach(t),$Tr=r($je," \u2014 "),iJ=n($je,"A",{href:!0});var SSt=s(iJ);kTr=r(SSt,"TFDistilBertModel"),SSt.forEach(t),STr=r($je," (DistilBERT model)"),$je.forEach(t),RTr=i(D),U8=n(D,"LI",{});var kje=s(U8);pTe=n(kje,"STRONG",{});var RSt=s(pTe);PTr=r(RSt,"dpr"),RSt.forEach(t),BTr=r(kje," \u2014 "),dJ=n(kje,"A",{href:!0});var PSt=s(dJ);ITr=r(PSt,"TFDPRQuestionEncoder"),PSt.forEach(t),NTr=r(kje," (DPR model)"),kje.forEach(t),qTr=i(D),J8=n(D,"LI",{});var Sje=s(J8);_Te=n(Sje,"STRONG",{});var BSt=s(_Te);jTr=r(BSt,"electra"),BSt.forEach(t),DTr=r(Sje," \u2014 "),cJ=n(Sje,"A",{href:!0});var ISt=s(cJ);GTr=r(ISt,"TFElectraModel"),ISt.forEach(t),OTr=r(Sje," (ELECTRA model)"),Sje.forEach(t),VTr=i(D),Y8=n(D,"LI",{});var Rje=s(Y8);uTe=n(Rje,"STRONG",{});var NSt=s(uTe);XTr=r(NSt,"flaubert"),NSt.forEach(t),zTr=r(Rje," \u2014 "),fJ=n(Rje,"A",{href:!0});var qSt=s(fJ);WTr=r(qSt,"TFFlaubertModel"),qSt.forEach(t),QTr=r(Rje," (FlauBERT model)"),Rje.forEach(t),HTr=i(D),Zs=n(D,"LI",{});var ZS=s(Zs);bTe=n(ZS,"STRONG",{});var jSt=s(bTe);UTr=r(jSt,"funnel"),jSt.forEach(t),JTr=r(ZS," \u2014 "),mJ=n(ZS,"A",{href:!0});var DSt=s(mJ);YTr=r(DSt,"TFFunnelModel"),DSt.forEach(t),KTr=r(ZS," or "),gJ=n(ZS,"A",{href:!0});var GSt=s(gJ);ZTr=r(GSt,"TFFunnelBaseModel"),GSt.forEach(t),e8r=r(ZS," (Funnel Transformer model)"),ZS.forEach(t),o8r=i(D),K8=n(D,"LI",{});var Pje=s(K8);vTe=n(Pje,"STRONG",{});var OSt=s(vTe);r8r=r(OSt,"gpt2"),OSt.forEach(t),t8r=r(Pje," \u2014 "),hJ=n(Pje,"A",{href:!0});var VSt=s(hJ);a8r=r(VSt,"TFGPT2Model"),VSt.forEach(t),n8r=r(Pje," (OpenAI GPT-2 model)"),Pje.forEach(t),s8r=i(D),Z8=n(D,"LI",{});var Bje=s(Z8);FTe=n(Bje,"STRONG",{});var XSt=s(FTe);l8r=r(XSt,"gptj"),XSt.forEach(t),i8r=r(Bje," \u2014 "),pJ=n(Bje,"A",{href:!0});var zSt=s(pJ);d8r=r(zSt,"TFGPTJModel"),zSt.forEach(t),c8r=r(Bje," (GPT-J model)"),Bje.forEach(t),f8r=i(D),eM=n(D,"LI",{});var Ije=s(eM);TTe=n(Ije,"STRONG",{});var WSt=s(TTe);m8r=r(WSt,"hubert"),WSt.forEach(t),g8r=r(Ije," \u2014 "),_J=n(Ije,"A",{href:!0});var QSt=s(_J);h8r=r(QSt,"TFHubertModel"),QSt.forEach(t),p8r=r(Ije," (Hubert model)"),Ije.forEach(t),_8r=i(D),oM=n(D,"LI",{});var Nje=s(oM);MTe=n(Nje,"STRONG",{});var HSt=s(MTe);u8r=r(HSt,"layoutlm"),HSt.forEach(t),b8r=r(Nje," \u2014 "),uJ=n(Nje,"A",{href:!0});var USt=s(uJ);v8r=r(USt,"TFLayoutLMModel"),USt.forEach(t),F8r=r(Nje," (LayoutLM model)"),Nje.forEach(t),T8r=i(D),rM=n(D,"LI",{});var qje=s(rM);ETe=n(qje,"STRONG",{});var JSt=s(ETe);M8r=r(JSt,"led"),JSt.forEach(t),E8r=r(qje," \u2014 "),bJ=n(qje,"A",{href:!0});var YSt=s(bJ);C8r=r(YSt,"TFLEDModel"),YSt.forEach(t),w8r=r(qje," (LED model)"),qje.forEach(t),A8r=i(D),tM=n(D,"LI",{});var jje=s(tM);CTe=n(jje,"STRONG",{});var KSt=s(CTe);L8r=r(KSt,"longformer"),KSt.forEach(t),y8r=r(jje," \u2014 "),vJ=n(jje,"A",{href:!0});var ZSt=s(vJ);x8r=r(ZSt,"TFLongformerModel"),ZSt.forEach(t),$8r=r(jje," (Longformer model)"),jje.forEach(t),k8r=i(D),aM=n(D,"LI",{});var Dje=s(aM);wTe=n(Dje,"STRONG",{});var eRt=s(wTe);S8r=r(eRt,"lxmert"),eRt.forEach(t),R8r=r(Dje," \u2014 "),FJ=n(Dje,"A",{href:!0});var oRt=s(FJ);P8r=r(oRt,"TFLxmertModel"),oRt.forEach(t),B8r=r(Dje," (LXMERT model)"),Dje.forEach(t),I8r=i(D),nM=n(D,"LI",{});var Gje=s(nM);ATe=n(Gje,"STRONG",{});var rRt=s(ATe);N8r=r(rRt,"marian"),rRt.forEach(t),q8r=r(Gje," \u2014 "),TJ=n(Gje,"A",{href:!0});var tRt=s(TJ);j8r=r(tRt,"TFMarianModel"),tRt.forEach(t),D8r=r(Gje," (Marian model)"),Gje.forEach(t),G8r=i(D),sM=n(D,"LI",{});var Oje=s(sM);LTe=n(Oje,"STRONG",{});var aRt=s(LTe);O8r=r(aRt,"mbart"),aRt.forEach(t),V8r=r(Oje," \u2014 "),MJ=n(Oje,"A",{href:!0});var nRt=s(MJ);X8r=r(nRt,"TFMBartModel"),nRt.forEach(t),z8r=r(Oje," (mBART model)"),Oje.forEach(t),W8r=i(D),lM=n(D,"LI",{});var Vje=s(lM);yTe=n(Vje,"STRONG",{});var sRt=s(yTe);Q8r=r(sRt,"mobilebert"),sRt.forEach(t),H8r=r(Vje," \u2014 "),EJ=n(Vje,"A",{href:!0});var lRt=s(EJ);U8r=r(lRt,"TFMobileBertModel"),lRt.forEach(t),J8r=r(Vje," (MobileBERT model)"),Vje.forEach(t),Y8r=i(D),iM=n(D,"LI",{});var Xje=s(iM);xTe=n(Xje,"STRONG",{});var iRt=s(xTe);K8r=r(iRt,"mpnet"),iRt.forEach(t),Z8r=r(Xje," \u2014 "),CJ=n(Xje,"A",{href:!0});var dRt=s(CJ);eMr=r(dRt,"TFMPNetModel"),dRt.forEach(t),oMr=r(Xje," (MPNet model)"),Xje.forEach(t),rMr=i(D),dM=n(D,"LI",{});var zje=s(dM);$Te=n(zje,"STRONG",{});var cRt=s($Te);tMr=r(cRt,"mt5"),cRt.forEach(t),aMr=r(zje," \u2014 "),wJ=n(zje,"A",{href:!0});var fRt=s(wJ);nMr=r(fRt,"TFMT5Model"),fRt.forEach(t),sMr=r(zje," (MT5 model)"),zje.forEach(t),lMr=i(D),cM=n(D,"LI",{});var Wje=s(cM);kTe=n(Wje,"STRONG",{});var mRt=s(kTe);iMr=r(mRt,"openai-gpt"),mRt.forEach(t),dMr=r(Wje," \u2014 "),AJ=n(Wje,"A",{href:!0});var gRt=s(AJ);cMr=r(gRt,"TFOpenAIGPTModel"),gRt.forEach(t),fMr=r(Wje," (OpenAI GPT model)"),Wje.forEach(t),mMr=i(D),fM=n(D,"LI",{});var Qje=s(fM);STe=n(Qje,"STRONG",{});var hRt=s(STe);gMr=r(hRt,"opt"),hRt.forEach(t),hMr=r(Qje," \u2014 "),LJ=n(Qje,"A",{href:!0});var pRt=s(LJ);pMr=r(pRt,"TFOPTModel"),pRt.forEach(t),_Mr=r(Qje," (OPT model)"),Qje.forEach(t),uMr=i(D),mM=n(D,"LI",{});var Hje=s(mM);RTe=n(Hje,"STRONG",{});var _Rt=s(RTe);bMr=r(_Rt,"pegasus"),_Rt.forEach(t),vMr=r(Hje," \u2014 "),yJ=n(Hje,"A",{href:!0});var uRt=s(yJ);FMr=r(uRt,"TFPegasusModel"),uRt.forEach(t),TMr=r(Hje," (Pegasus model)"),Hje.forEach(t),MMr=i(D),gM=n(D,"LI",{});var Uje=s(gM);PTe=n(Uje,"STRONG",{});var bRt=s(PTe);EMr=r(bRt,"regnet"),bRt.forEach(t),CMr=r(Uje," \u2014 "),xJ=n(Uje,"A",{href:!0});var vRt=s(xJ);wMr=r(vRt,"TFRegNetModel"),vRt.forEach(t),AMr=r(Uje," (RegNet model)"),Uje.forEach(t),LMr=i(D),hM=n(D,"LI",{});var Jje=s(hM);BTe=n(Jje,"STRONG",{});var FRt=s(BTe);yMr=r(FRt,"rembert"),FRt.forEach(t),xMr=r(Jje," \u2014 "),$J=n(Jje,"A",{href:!0});var TRt=s($J);$Mr=r(TRt,"TFRemBertModel"),TRt.forEach(t),kMr=r(Jje," (RemBERT model)"),Jje.forEach(t),SMr=i(D),pM=n(D,"LI",{});var Yje=s(pM);ITe=n(Yje,"STRONG",{});var MRt=s(ITe);RMr=r(MRt,"resnet"),MRt.forEach(t),PMr=r(Yje," \u2014 "),kJ=n(Yje,"A",{href:!0});var ERt=s(kJ);BMr=r(ERt,"TFResNetModel"),ERt.forEach(t),IMr=r(Yje," (ResNet model)"),Yje.forEach(t),NMr=i(D),_M=n(D,"LI",{});var Kje=s(_M);NTe=n(Kje,"STRONG",{});var CRt=s(NTe);qMr=r(CRt,"roberta"),CRt.forEach(t),jMr=r(Kje," \u2014 "),SJ=n(Kje,"A",{href:!0});var wRt=s(SJ);DMr=r(wRt,"TFRobertaModel"),wRt.forEach(t),GMr=r(Kje," (RoBERTa model)"),Kje.forEach(t),OMr=i(D),uM=n(D,"LI",{});var Zje=s(uM);qTe=n(Zje,"STRONG",{});var ARt=s(qTe);VMr=r(ARt,"roformer"),ARt.forEach(t),XMr=r(Zje," \u2014 "),RJ=n(Zje,"A",{href:!0});var LRt=s(RJ);zMr=r(LRt,"TFRoFormerModel"),LRt.forEach(t),WMr=r(Zje," (RoFormer model)"),Zje.forEach(t),QMr=i(D),bM=n(D,"LI",{});var eDe=s(bM);jTe=n(eDe,"STRONG",{});var yRt=s(jTe);HMr=r(yRt,"segformer"),yRt.forEach(t),UMr=r(eDe," \u2014 "),PJ=n(eDe,"A",{href:!0});var xRt=s(PJ);JMr=r(xRt,"TFSegformerModel"),xRt.forEach(t),YMr=r(eDe," (SegFormer model)"),eDe.forEach(t),KMr=i(D),vM=n(D,"LI",{});var oDe=s(vM);DTe=n(oDe,"STRONG",{});var $Rt=s(DTe);ZMr=r($Rt,"speech_to_text"),$Rt.forEach(t),e4r=r(oDe," \u2014 "),BJ=n(oDe,"A",{href:!0});var kRt=s(BJ);o4r=r(kRt,"TFSpeech2TextModel"),kRt.forEach(t),r4r=r(oDe," (Speech2Text model)"),oDe.forEach(t),t4r=i(D),FM=n(D,"LI",{});var rDe=s(FM);GTe=n(rDe,"STRONG",{});var SRt=s(GTe);a4r=r(SRt,"swin"),SRt.forEach(t),n4r=r(rDe," \u2014 "),IJ=n(rDe,"A",{href:!0});var RRt=s(IJ);s4r=r(RRt,"TFSwinModel"),RRt.forEach(t),l4r=r(rDe," (Swin Transformer model)"),rDe.forEach(t),i4r=i(D),TM=n(D,"LI",{});var tDe=s(TM);OTe=n(tDe,"STRONG",{});var PRt=s(OTe);d4r=r(PRt,"t5"),PRt.forEach(t),c4r=r(tDe," \u2014 "),NJ=n(tDe,"A",{href:!0});var BRt=s(NJ);f4r=r(BRt,"TFT5Model"),BRt.forEach(t),m4r=r(tDe," (T5 model)"),tDe.forEach(t),g4r=i(D),MM=n(D,"LI",{});var aDe=s(MM);VTe=n(aDe,"STRONG",{});var IRt=s(VTe);h4r=r(IRt,"tapas"),IRt.forEach(t),p4r=r(aDe," \u2014 "),qJ=n(aDe,"A",{href:!0});var NRt=s(qJ);_4r=r(NRt,"TFTapasModel"),NRt.forEach(t),u4r=r(aDe," (TAPAS model)"),aDe.forEach(t),b4r=i(D),EM=n(D,"LI",{});var nDe=s(EM);XTe=n(nDe,"STRONG",{});var qRt=s(XTe);v4r=r(qRt,"transfo-xl"),qRt.forEach(t),F4r=r(nDe," \u2014 "),jJ=n(nDe,"A",{href:!0});var jRt=s(jJ);T4r=r(jRt,"TFTransfoXLModel"),jRt.forEach(t),M4r=r(nDe," (Transformer-XL model)"),nDe.forEach(t),E4r=i(D),CM=n(D,"LI",{});var sDe=s(CM);zTe=n(sDe,"STRONG",{});var DRt=s(zTe);C4r=r(DRt,"vit"),DRt.forEach(t),w4r=r(sDe," \u2014 "),DJ=n(sDe,"A",{href:!0});var GRt=s(DJ);A4r=r(GRt,"TFViTModel"),GRt.forEach(t),L4r=r(sDe," (ViT model)"),sDe.forEach(t),y4r=i(D),wM=n(D,"LI",{});var lDe=s(wM);WTe=n(lDe,"STRONG",{});var ORt=s(WTe);x4r=r(ORt,"vit_mae"),ORt.forEach(t),$4r=r(lDe," \u2014 "),GJ=n(lDe,"A",{href:!0});var VRt=s(GJ);k4r=r(VRt,"TFViTMAEModel"),VRt.forEach(t),S4r=r(lDe," (ViTMAE model)"),lDe.forEach(t),R4r=i(D),AM=n(D,"LI",{});var iDe=s(AM);QTe=n(iDe,"STRONG",{});var XRt=s(QTe);P4r=r(XRt,"wav2vec2"),XRt.forEach(t),B4r=r(iDe," \u2014 "),OJ=n(iDe,"A",{href:!0});var zRt=s(OJ);I4r=r(zRt,"TFWav2Vec2Model"),zRt.forEach(t),N4r=r(iDe," (Wav2Vec2 model)"),iDe.forEach(t),q4r=i(D),LM=n(D,"LI",{});var dDe=s(LM);HTe=n(dDe,"STRONG",{});var WRt=s(HTe);j4r=r(WRt,"xlm"),WRt.forEach(t),D4r=r(dDe," \u2014 "),VJ=n(dDe,"A",{href:!0});var QRt=s(VJ);G4r=r(QRt,"TFXLMModel"),QRt.forEach(t),O4r=r(dDe," (XLM model)"),dDe.forEach(t),V4r=i(D),yM=n(D,"LI",{});var cDe=s(yM);UTe=n(cDe,"STRONG",{});var HRt=s(UTe);X4r=r(HRt,"xlm-roberta"),HRt.forEach(t),z4r=r(cDe," \u2014 "),XJ=n(cDe,"A",{href:!0});var URt=s(XJ);W4r=r(URt,"TFXLMRobertaModel"),URt.forEach(t),Q4r=r(cDe," (XLM-RoBERTa model)"),cDe.forEach(t),H4r=i(D),xM=n(D,"LI",{});var fDe=s(xM);JTe=n(fDe,"STRONG",{});var JRt=s(JTe);U4r=r(JRt,"xlnet"),JRt.forEach(t),J4r=r(fDe," \u2014 "),zJ=n(fDe,"A",{href:!0});var YRt=s(zJ);Y4r=r(YRt,"TFXLNetModel"),YRt.forEach(t),K4r=r(fDe," (XLNet model)"),fDe.forEach(t),D.forEach(t),Z4r=i(Rl),T($M.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),MWe=i(f),fc=n(f,"H2",{class:!0});var $He=s(fc);kM=n($He,"A",{id:!0,class:!0,href:!0});var KRt=s(kM);YTe=n(KRt,"SPAN",{});var ZRt=s(YTe);T(gx.$$.fragment,ZRt),ZRt.forEach(t),KRt.forEach(t),eEr=i($He),KTe=n($He,"SPAN",{});var ePt=s(KTe);oEr=r(ePt,"TFAutoModelForPreTraining"),ePt.forEach(t),$He.forEach(t),EWe=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(hx.$$.fragment,Pl),rEr=i(Pl),mc=n(Pl,"P",{});var gae=s(mc);tEr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WJ=n(gae,"A",{href:!0});var oPt=s(WJ);aEr=r(oPt,"from_pretrained()"),oPt.forEach(t),nEr=r(gae," class method or the "),QJ=n(gae,"A",{href:!0});var rPt=s(QJ);sEr=r(rPt,"from_config()"),rPt.forEach(t),lEr=r(gae,` class
method.`),gae.forEach(t),iEr=i(Pl),px=n(Pl,"P",{});var kHe=s(px);dEr=r(kHe,"This class cannot be instantiated directly using "),ZTe=n(kHe,"CODE",{});var tPt=s(ZTe);cEr=r(tPt,"__init__()"),tPt.forEach(t),fEr=r(kHe," (throws an error)."),kHe.forEach(t),mEr=i(Pl),Pt=n(Pl,"DIV",{class:!0});var M7=s(Pt);T(_x.$$.fragment,M7),gEr=i(M7),e8e=n(M7,"P",{});var aPt=s(e8e);hEr=r(aPt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aPt.forEach(t),pEr=i(M7),gc=n(M7,"P",{});var hae=s(gc);_Er=r(hae,`Note:
Loading a model from its configuration file does `),o8e=n(hae,"STRONG",{});var nPt=s(o8e);uEr=r(nPt,"not"),nPt.forEach(t),bEr=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(hae,"A",{href:!0});var sPt=s(HJ);vEr=r(sPt,"from_pretrained()"),sPt.forEach(t),FEr=r(hae," to load the model weights."),hae.forEach(t),TEr=i(M7),T(SM.$$.fragment,M7),M7.forEach(t),MEr=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(ux.$$.fragment,Bl),EEr=i(Bl),r8e=n(Bl,"P",{});var lPt=s(r8e);CEr=r(lPt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lPt.forEach(t),wEr=i(Bl),dn=n(Bl,"P",{});var E7=s(dn);AEr=r(E7,"The model class to instantiate is selected based on the "),t8e=n(E7,"CODE",{});var iPt=s(t8e);LEr=r(iPt,"model_type"),iPt.forEach(t),yEr=r(E7,` property of the config object (either
passed as an argument or loaded from `),a8e=n(E7,"CODE",{});var dPt=s(a8e);xEr=r(dPt,"pretrained_model_name_or_path"),dPt.forEach(t),$Er=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n8e=n(E7,"CODE",{});var cPt=s(n8e);kEr=r(cPt,"pretrained_model_name_or_path"),cPt.forEach(t),SEr=r(E7,":"),E7.forEach(t),REr=i(Bl),se=n(Bl,"UL",{});var le=s(se);RM=n(le,"LI",{});var mDe=s(RM);s8e=n(mDe,"STRONG",{});var fPt=s(s8e);PEr=r(fPt,"albert"),fPt.forEach(t),BEr=r(mDe," \u2014 "),UJ=n(mDe,"A",{href:!0});var mPt=s(UJ);IEr=r(mPt,"TFAlbertForPreTraining"),mPt.forEach(t),NEr=r(mDe," (ALBERT model)"),mDe.forEach(t),qEr=i(le),PM=n(le,"LI",{});var gDe=s(PM);l8e=n(gDe,"STRONG",{});var gPt=s(l8e);jEr=r(gPt,"bart"),gPt.forEach(t),DEr=r(gDe," \u2014 "),JJ=n(gDe,"A",{href:!0});var hPt=s(JJ);GEr=r(hPt,"TFBartForConditionalGeneration"),hPt.forEach(t),OEr=r(gDe," (BART model)"),gDe.forEach(t),VEr=i(le),BM=n(le,"LI",{});var hDe=s(BM);i8e=n(hDe,"STRONG",{});var pPt=s(i8e);XEr=r(pPt,"bert"),pPt.forEach(t),zEr=r(hDe," \u2014 "),YJ=n(hDe,"A",{href:!0});var _Pt=s(YJ);WEr=r(_Pt,"TFBertForPreTraining"),_Pt.forEach(t),QEr=r(hDe," (BERT model)"),hDe.forEach(t),HEr=i(le),IM=n(le,"LI",{});var pDe=s(IM);d8e=n(pDe,"STRONG",{});var uPt=s(d8e);UEr=r(uPt,"camembert"),uPt.forEach(t),JEr=r(pDe," \u2014 "),KJ=n(pDe,"A",{href:!0});var bPt=s(KJ);YEr=r(bPt,"TFCamembertForMaskedLM"),bPt.forEach(t),KEr=r(pDe," (CamemBERT model)"),pDe.forEach(t),ZEr=i(le),NM=n(le,"LI",{});var _De=s(NM);c8e=n(_De,"STRONG",{});var vPt=s(c8e);eCr=r(vPt,"ctrl"),vPt.forEach(t),oCr=r(_De," \u2014 "),ZJ=n(_De,"A",{href:!0});var FPt=s(ZJ);rCr=r(FPt,"TFCTRLLMHeadModel"),FPt.forEach(t),tCr=r(_De," (CTRL model)"),_De.forEach(t),aCr=i(le),qM=n(le,"LI",{});var uDe=s(qM);f8e=n(uDe,"STRONG",{});var TPt=s(f8e);nCr=r(TPt,"distilbert"),TPt.forEach(t),sCr=r(uDe," \u2014 "),eY=n(uDe,"A",{href:!0});var MPt=s(eY);lCr=r(MPt,"TFDistilBertForMaskedLM"),MPt.forEach(t),iCr=r(uDe," (DistilBERT model)"),uDe.forEach(t),dCr=i(le),jM=n(le,"LI",{});var bDe=s(jM);m8e=n(bDe,"STRONG",{});var EPt=s(m8e);cCr=r(EPt,"electra"),EPt.forEach(t),fCr=r(bDe," \u2014 "),oY=n(bDe,"A",{href:!0});var CPt=s(oY);mCr=r(CPt,"TFElectraForPreTraining"),CPt.forEach(t),gCr=r(bDe," (ELECTRA model)"),bDe.forEach(t),hCr=i(le),DM=n(le,"LI",{});var vDe=s(DM);g8e=n(vDe,"STRONG",{});var wPt=s(g8e);pCr=r(wPt,"flaubert"),wPt.forEach(t),_Cr=r(vDe," \u2014 "),rY=n(vDe,"A",{href:!0});var APt=s(rY);uCr=r(APt,"TFFlaubertWithLMHeadModel"),APt.forEach(t),bCr=r(vDe," (FlauBERT model)"),vDe.forEach(t),vCr=i(le),GM=n(le,"LI",{});var FDe=s(GM);h8e=n(FDe,"STRONG",{});var LPt=s(h8e);FCr=r(LPt,"funnel"),LPt.forEach(t),TCr=r(FDe," \u2014 "),tY=n(FDe,"A",{href:!0});var yPt=s(tY);MCr=r(yPt,"TFFunnelForPreTraining"),yPt.forEach(t),ECr=r(FDe," (Funnel Transformer model)"),FDe.forEach(t),CCr=i(le),OM=n(le,"LI",{});var TDe=s(OM);p8e=n(TDe,"STRONG",{});var xPt=s(p8e);wCr=r(xPt,"gpt2"),xPt.forEach(t),ACr=r(TDe," \u2014 "),aY=n(TDe,"A",{href:!0});var $Pt=s(aY);LCr=r($Pt,"TFGPT2LMHeadModel"),$Pt.forEach(t),yCr=r(TDe," (OpenAI GPT-2 model)"),TDe.forEach(t),xCr=i(le),VM=n(le,"LI",{});var MDe=s(VM);_8e=n(MDe,"STRONG",{});var kPt=s(_8e);$Cr=r(kPt,"layoutlm"),kPt.forEach(t),kCr=r(MDe," \u2014 "),nY=n(MDe,"A",{href:!0});var SPt=s(nY);SCr=r(SPt,"TFLayoutLMForMaskedLM"),SPt.forEach(t),RCr=r(MDe," (LayoutLM model)"),MDe.forEach(t),PCr=i(le),XM=n(le,"LI",{});var EDe=s(XM);u8e=n(EDe,"STRONG",{});var RPt=s(u8e);BCr=r(RPt,"lxmert"),RPt.forEach(t),ICr=r(EDe," \u2014 "),sY=n(EDe,"A",{href:!0});var PPt=s(sY);NCr=r(PPt,"TFLxmertForPreTraining"),PPt.forEach(t),qCr=r(EDe," (LXMERT model)"),EDe.forEach(t),jCr=i(le),zM=n(le,"LI",{});var CDe=s(zM);b8e=n(CDe,"STRONG",{});var BPt=s(b8e);DCr=r(BPt,"mobilebert"),BPt.forEach(t),GCr=r(CDe," \u2014 "),lY=n(CDe,"A",{href:!0});var IPt=s(lY);OCr=r(IPt,"TFMobileBertForPreTraining"),IPt.forEach(t),VCr=r(CDe," (MobileBERT model)"),CDe.forEach(t),XCr=i(le),WM=n(le,"LI",{});var wDe=s(WM);v8e=n(wDe,"STRONG",{});var NPt=s(v8e);zCr=r(NPt,"mpnet"),NPt.forEach(t),WCr=r(wDe," \u2014 "),iY=n(wDe,"A",{href:!0});var qPt=s(iY);QCr=r(qPt,"TFMPNetForMaskedLM"),qPt.forEach(t),HCr=r(wDe," (MPNet model)"),wDe.forEach(t),UCr=i(le),QM=n(le,"LI",{});var ADe=s(QM);F8e=n(ADe,"STRONG",{});var jPt=s(F8e);JCr=r(jPt,"openai-gpt"),jPt.forEach(t),YCr=r(ADe," \u2014 "),dY=n(ADe,"A",{href:!0});var DPt=s(dY);KCr=r(DPt,"TFOpenAIGPTLMHeadModel"),DPt.forEach(t),ZCr=r(ADe," (OpenAI GPT model)"),ADe.forEach(t),e5r=i(le),HM=n(le,"LI",{});var LDe=s(HM);T8e=n(LDe,"STRONG",{});var GPt=s(T8e);o5r=r(GPt,"roberta"),GPt.forEach(t),r5r=r(LDe," \u2014 "),cY=n(LDe,"A",{href:!0});var OPt=s(cY);t5r=r(OPt,"TFRobertaForMaskedLM"),OPt.forEach(t),a5r=r(LDe," (RoBERTa model)"),LDe.forEach(t),n5r=i(le),UM=n(le,"LI",{});var yDe=s(UM);M8e=n(yDe,"STRONG",{});var VPt=s(M8e);s5r=r(VPt,"t5"),VPt.forEach(t),l5r=r(yDe," \u2014 "),fY=n(yDe,"A",{href:!0});var XPt=s(fY);i5r=r(XPt,"TFT5ForConditionalGeneration"),XPt.forEach(t),d5r=r(yDe," (T5 model)"),yDe.forEach(t),c5r=i(le),JM=n(le,"LI",{});var xDe=s(JM);E8e=n(xDe,"STRONG",{});var zPt=s(E8e);f5r=r(zPt,"tapas"),zPt.forEach(t),m5r=r(xDe," \u2014 "),mY=n(xDe,"A",{href:!0});var WPt=s(mY);g5r=r(WPt,"TFTapasForMaskedLM"),WPt.forEach(t),h5r=r(xDe," (TAPAS model)"),xDe.forEach(t),p5r=i(le),YM=n(le,"LI",{});var $De=s(YM);C8e=n($De,"STRONG",{});var QPt=s(C8e);_5r=r(QPt,"transfo-xl"),QPt.forEach(t),u5r=r($De," \u2014 "),gY=n($De,"A",{href:!0});var HPt=s(gY);b5r=r(HPt,"TFTransfoXLLMHeadModel"),HPt.forEach(t),v5r=r($De," (Transformer-XL model)"),$De.forEach(t),F5r=i(le),KM=n(le,"LI",{});var kDe=s(KM);w8e=n(kDe,"STRONG",{});var UPt=s(w8e);T5r=r(UPt,"vit_mae"),UPt.forEach(t),M5r=r(kDe," \u2014 "),hY=n(kDe,"A",{href:!0});var JPt=s(hY);E5r=r(JPt,"TFViTMAEForPreTraining"),JPt.forEach(t),C5r=r(kDe," (ViTMAE model)"),kDe.forEach(t),w5r=i(le),ZM=n(le,"LI",{});var SDe=s(ZM);A8e=n(SDe,"STRONG",{});var YPt=s(A8e);A5r=r(YPt,"xlm"),YPt.forEach(t),L5r=r(SDe," \u2014 "),pY=n(SDe,"A",{href:!0});var KPt=s(pY);y5r=r(KPt,"TFXLMWithLMHeadModel"),KPt.forEach(t),x5r=r(SDe," (XLM model)"),SDe.forEach(t),$5r=i(le),e4=n(le,"LI",{});var RDe=s(e4);L8e=n(RDe,"STRONG",{});var ZPt=s(L8e);k5r=r(ZPt,"xlm-roberta"),ZPt.forEach(t),S5r=r(RDe," \u2014 "),_Y=n(RDe,"A",{href:!0});var eBt=s(_Y);R5r=r(eBt,"TFXLMRobertaForMaskedLM"),eBt.forEach(t),P5r=r(RDe," (XLM-RoBERTa model)"),RDe.forEach(t),B5r=i(le),o4=n(le,"LI",{});var PDe=s(o4);y8e=n(PDe,"STRONG",{});var oBt=s(y8e);I5r=r(oBt,"xlnet"),oBt.forEach(t),N5r=r(PDe," \u2014 "),uY=n(PDe,"A",{href:!0});var rBt=s(uY);q5r=r(rBt,"TFXLNetLMHeadModel"),rBt.forEach(t),j5r=r(PDe," (XLNet model)"),PDe.forEach(t),le.forEach(t),D5r=i(Bl),T(r4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),CWe=i(f),hc=n(f,"H2",{class:!0});var SHe=s(hc);t4=n(SHe,"A",{id:!0,class:!0,href:!0});var tBt=s(t4);x8e=n(tBt,"SPAN",{});var aBt=s(x8e);T(bx.$$.fragment,aBt),aBt.forEach(t),tBt.forEach(t),G5r=i(SHe),$8e=n(SHe,"SPAN",{});var nBt=s($8e);O5r=r(nBt,"TFAutoModelForCausalLM"),nBt.forEach(t),SHe.forEach(t),wWe=i(f),ar=n(f,"DIV",{class:!0});var Il=s(ar);T(vx.$$.fragment,Il),V5r=i(Il),pc=n(Il,"P",{});var pae=s(pc);X5r=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bY=n(pae,"A",{href:!0});var sBt=s(bY);z5r=r(sBt,"from_pretrained()"),sBt.forEach(t),W5r=r(pae," class method or the "),vY=n(pae,"A",{href:!0});var lBt=s(vY);Q5r=r(lBt,"from_config()"),lBt.forEach(t),H5r=r(pae,` class
method.`),pae.forEach(t),U5r=i(Il),Fx=n(Il,"P",{});var RHe=s(Fx);J5r=r(RHe,"This class cannot be instantiated directly using "),k8e=n(RHe,"CODE",{});var iBt=s(k8e);Y5r=r(iBt,"__init__()"),iBt.forEach(t),K5r=r(RHe," (throws an error)."),RHe.forEach(t),Z5r=i(Il),Bt=n(Il,"DIV",{class:!0});var C7=s(Bt);T(Tx.$$.fragment,C7),e0r=i(C7),S8e=n(C7,"P",{});var dBt=s(S8e);o0r=r(dBt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dBt.forEach(t),r0r=i(C7),_c=n(C7,"P",{});var _ae=s(_c);t0r=r(_ae,`Note:
Loading a model from its configuration file does `),R8e=n(_ae,"STRONG",{});var cBt=s(R8e);a0r=r(cBt,"not"),cBt.forEach(t),n0r=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(_ae,"A",{href:!0});var fBt=s(FY);s0r=r(fBt,"from_pretrained()"),fBt.forEach(t),l0r=r(_ae," to load the model weights."),_ae.forEach(t),i0r=i(C7),T(a4.$$.fragment,C7),C7.forEach(t),d0r=i(Il),Sr=n(Il,"DIV",{class:!0});var Nl=s(Sr);T(Mx.$$.fragment,Nl),c0r=i(Nl),P8e=n(Nl,"P",{});var mBt=s(P8e);f0r=r(mBt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mBt.forEach(t),m0r=i(Nl),cn=n(Nl,"P",{});var w7=s(cn);g0r=r(w7,"The model class to instantiate is selected based on the "),B8e=n(w7,"CODE",{});var gBt=s(B8e);h0r=r(gBt,"model_type"),gBt.forEach(t),p0r=r(w7,` property of the config object (either
passed as an argument or loaded from `),I8e=n(w7,"CODE",{});var hBt=s(I8e);_0r=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),u0r=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=n(w7,"CODE",{});var pBt=s(N8e);b0r=r(pBt,"pretrained_model_name_or_path"),pBt.forEach(t),v0r=r(w7,":"),w7.forEach(t),F0r=i(Nl),Me=n(Nl,"UL",{});var Ce=s(Me);n4=n(Ce,"LI",{});var BDe=s(n4);q8e=n(BDe,"STRONG",{});var _Bt=s(q8e);T0r=r(_Bt,"bert"),_Bt.forEach(t),M0r=r(BDe," \u2014 "),TY=n(BDe,"A",{href:!0});var uBt=s(TY);E0r=r(uBt,"TFBertLMHeadModel"),uBt.forEach(t),C0r=r(BDe," (BERT model)"),BDe.forEach(t),w0r=i(Ce),s4=n(Ce,"LI",{});var IDe=s(s4);j8e=n(IDe,"STRONG",{});var bBt=s(j8e);A0r=r(bBt,"camembert"),bBt.forEach(t),L0r=r(IDe," \u2014 "),MY=n(IDe,"A",{href:!0});var vBt=s(MY);y0r=r(vBt,"TFCamembertForCausalLM"),vBt.forEach(t),x0r=r(IDe," (CamemBERT model)"),IDe.forEach(t),$0r=i(Ce),l4=n(Ce,"LI",{});var NDe=s(l4);D8e=n(NDe,"STRONG",{});var FBt=s(D8e);k0r=r(FBt,"ctrl"),FBt.forEach(t),S0r=r(NDe," \u2014 "),EY=n(NDe,"A",{href:!0});var TBt=s(EY);R0r=r(TBt,"TFCTRLLMHeadModel"),TBt.forEach(t),P0r=r(NDe," (CTRL model)"),NDe.forEach(t),B0r=i(Ce),i4=n(Ce,"LI",{});var qDe=s(i4);G8e=n(qDe,"STRONG",{});var MBt=s(G8e);I0r=r(MBt,"gpt2"),MBt.forEach(t),N0r=r(qDe," \u2014 "),CY=n(qDe,"A",{href:!0});var EBt=s(CY);q0r=r(EBt,"TFGPT2LMHeadModel"),EBt.forEach(t),j0r=r(qDe," (OpenAI GPT-2 model)"),qDe.forEach(t),D0r=i(Ce),d4=n(Ce,"LI",{});var jDe=s(d4);O8e=n(jDe,"STRONG",{});var CBt=s(O8e);G0r=r(CBt,"gptj"),CBt.forEach(t),O0r=r(jDe," \u2014 "),wY=n(jDe,"A",{href:!0});var wBt=s(wY);V0r=r(wBt,"TFGPTJForCausalLM"),wBt.forEach(t),X0r=r(jDe," (GPT-J model)"),jDe.forEach(t),z0r=i(Ce),c4=n(Ce,"LI",{});var DDe=s(c4);V8e=n(DDe,"STRONG",{});var ABt=s(V8e);W0r=r(ABt,"openai-gpt"),ABt.forEach(t),Q0r=r(DDe," \u2014 "),AY=n(DDe,"A",{href:!0});var LBt=s(AY);H0r=r(LBt,"TFOpenAIGPTLMHeadModel"),LBt.forEach(t),U0r=r(DDe," (OpenAI GPT model)"),DDe.forEach(t),J0r=i(Ce),f4=n(Ce,"LI",{});var GDe=s(f4);X8e=n(GDe,"STRONG",{});var yBt=s(X8e);Y0r=r(yBt,"opt"),yBt.forEach(t),K0r=r(GDe," \u2014 "),LY=n(GDe,"A",{href:!0});var xBt=s(LY);Z0r=r(xBt,"TFOPTForCausalLM"),xBt.forEach(t),ewr=r(GDe," (OPT model)"),GDe.forEach(t),owr=i(Ce),m4=n(Ce,"LI",{});var ODe=s(m4);z8e=n(ODe,"STRONG",{});var $Bt=s(z8e);rwr=r($Bt,"rembert"),$Bt.forEach(t),twr=r(ODe," \u2014 "),yY=n(ODe,"A",{href:!0});var kBt=s(yY);awr=r(kBt,"TFRemBertForCausalLM"),kBt.forEach(t),nwr=r(ODe," (RemBERT model)"),ODe.forEach(t),swr=i(Ce),g4=n(Ce,"LI",{});var VDe=s(g4);W8e=n(VDe,"STRONG",{});var SBt=s(W8e);lwr=r(SBt,"roberta"),SBt.forEach(t),iwr=r(VDe," \u2014 "),xY=n(VDe,"A",{href:!0});var RBt=s(xY);dwr=r(RBt,"TFRobertaForCausalLM"),RBt.forEach(t),cwr=r(VDe," (RoBERTa model)"),VDe.forEach(t),fwr=i(Ce),h4=n(Ce,"LI",{});var XDe=s(h4);Q8e=n(XDe,"STRONG",{});var PBt=s(Q8e);mwr=r(PBt,"roformer"),PBt.forEach(t),gwr=r(XDe," \u2014 "),$Y=n(XDe,"A",{href:!0});var BBt=s($Y);hwr=r(BBt,"TFRoFormerForCausalLM"),BBt.forEach(t),pwr=r(XDe," (RoFormer model)"),XDe.forEach(t),_wr=i(Ce),p4=n(Ce,"LI",{});var zDe=s(p4);H8e=n(zDe,"STRONG",{});var IBt=s(H8e);uwr=r(IBt,"transfo-xl"),IBt.forEach(t),bwr=r(zDe," \u2014 "),kY=n(zDe,"A",{href:!0});var NBt=s(kY);vwr=r(NBt,"TFTransfoXLLMHeadModel"),NBt.forEach(t),Fwr=r(zDe," (Transformer-XL model)"),zDe.forEach(t),Twr=i(Ce),_4=n(Ce,"LI",{});var WDe=s(_4);U8e=n(WDe,"STRONG",{});var qBt=s(U8e);Mwr=r(qBt,"xlm"),qBt.forEach(t),Ewr=r(WDe," \u2014 "),SY=n(WDe,"A",{href:!0});var jBt=s(SY);Cwr=r(jBt,"TFXLMWithLMHeadModel"),jBt.forEach(t),wwr=r(WDe," (XLM model)"),WDe.forEach(t),Awr=i(Ce),u4=n(Ce,"LI",{});var QDe=s(u4);J8e=n(QDe,"STRONG",{});var DBt=s(J8e);Lwr=r(DBt,"xlnet"),DBt.forEach(t),ywr=r(QDe," \u2014 "),RY=n(QDe,"A",{href:!0});var GBt=s(RY);xwr=r(GBt,"TFXLNetLMHeadModel"),GBt.forEach(t),$wr=r(QDe," (XLNet model)"),QDe.forEach(t),Ce.forEach(t),kwr=i(Nl),T(b4.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),AWe=i(f),uc=n(f,"H2",{class:!0});var PHe=s(uc);v4=n(PHe,"A",{id:!0,class:!0,href:!0});var OBt=s(v4);Y8e=n(OBt,"SPAN",{});var VBt=s(Y8e);T(Ex.$$.fragment,VBt),VBt.forEach(t),OBt.forEach(t),Swr=i(PHe),K8e=n(PHe,"SPAN",{});var XBt=s(K8e);Rwr=r(XBt,"TFAutoModelForImageClassification"),XBt.forEach(t),PHe.forEach(t),LWe=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(Cx.$$.fragment,ql),Pwr=i(ql),bc=n(ql,"P",{});var uae=s(bc);Bwr=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PY=n(uae,"A",{href:!0});var zBt=s(PY);Iwr=r(zBt,"from_pretrained()"),zBt.forEach(t),Nwr=r(uae," class method or the "),BY=n(uae,"A",{href:!0});var WBt=s(BY);qwr=r(WBt,"from_config()"),WBt.forEach(t),jwr=r(uae,` class
method.`),uae.forEach(t),Dwr=i(ql),wx=n(ql,"P",{});var BHe=s(wx);Gwr=r(BHe,"This class cannot be instantiated directly using "),Z8e=n(BHe,"CODE",{});var QBt=s(Z8e);Owr=r(QBt,"__init__()"),QBt.forEach(t),Vwr=r(BHe," (throws an error)."),BHe.forEach(t),Xwr=i(ql),It=n(ql,"DIV",{class:!0});var A7=s(It);T(Ax.$$.fragment,A7),zwr=i(A7),eMe=n(A7,"P",{});var HBt=s(eMe);Wwr=r(HBt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),HBt.forEach(t),Qwr=i(A7),vc=n(A7,"P",{});var bae=s(vc);Hwr=r(bae,`Note:
Loading a model from its configuration file does `),oMe=n(bae,"STRONG",{});var UBt=s(oMe);Uwr=r(UBt,"not"),UBt.forEach(t),Jwr=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(bae,"A",{href:!0});var JBt=s(IY);Ywr=r(JBt,"from_pretrained()"),JBt.forEach(t),Kwr=r(bae," to load the model weights."),bae.forEach(t),Zwr=i(A7),T(F4.$$.fragment,A7),A7.forEach(t),eAr=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(Lx.$$.fragment,jl),oAr=i(jl),rMe=n(jl,"P",{});var YBt=s(rMe);rAr=r(YBt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),YBt.forEach(t),tAr=i(jl),fn=n(jl,"P",{});var L7=s(fn);aAr=r(L7,"The model class to instantiate is selected based on the "),tMe=n(L7,"CODE",{});var KBt=s(tMe);nAr=r(KBt,"model_type"),KBt.forEach(t),sAr=r(L7,` property of the config object (either
passed as an argument or loaded from `),aMe=n(L7,"CODE",{});var ZBt=s(aMe);lAr=r(ZBt,"pretrained_model_name_or_path"),ZBt.forEach(t),iAr=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(L7,"CODE",{});var eIt=s(nMe);dAr=r(eIt,"pretrained_model_name_or_path"),eIt.forEach(t),cAr=r(L7,":"),L7.forEach(t),fAr=i(jl),Ve=n(jl,"UL",{});var Mo=s(Ve);T4=n(Mo,"LI",{});var HDe=s(T4);sMe=n(HDe,"STRONG",{});var oIt=s(sMe);mAr=r(oIt,"convnext"),oIt.forEach(t),gAr=r(HDe," \u2014 "),NY=n(HDe,"A",{href:!0});var rIt=s(NY);hAr=r(rIt,"TFConvNextForImageClassification"),rIt.forEach(t),pAr=r(HDe," (ConvNeXT model)"),HDe.forEach(t),_Ar=i(Mo),M4=n(Mo,"LI",{});var UDe=s(M4);lMe=n(UDe,"STRONG",{});var tIt=s(lMe);uAr=r(tIt,"data2vec-vision"),tIt.forEach(t),bAr=r(UDe," \u2014 "),qY=n(UDe,"A",{href:!0});var aIt=s(qY);vAr=r(aIt,"TFData2VecVisionForImageClassification"),aIt.forEach(t),FAr=r(UDe," (Data2VecVision model)"),UDe.forEach(t),TAr=i(Mo),el=n(Mo,"LI",{});var eR=s(el);iMe=n(eR,"STRONG",{});var nIt=s(iMe);MAr=r(nIt,"deit"),nIt.forEach(t),EAr=r(eR," \u2014 "),jY=n(eR,"A",{href:!0});var sIt=s(jY);CAr=r(sIt,"TFDeiTForImageClassification"),sIt.forEach(t),wAr=r(eR," or "),DY=n(eR,"A",{href:!0});var lIt=s(DY);AAr=r(lIt,"TFDeiTForImageClassificationWithTeacher"),lIt.forEach(t),LAr=r(eR," (DeiT model)"),eR.forEach(t),yAr=i(Mo),E4=n(Mo,"LI",{});var JDe=s(E4);dMe=n(JDe,"STRONG",{});var iIt=s(dMe);xAr=r(iIt,"regnet"),iIt.forEach(t),$Ar=r(JDe," \u2014 "),GY=n(JDe,"A",{href:!0});var dIt=s(GY);kAr=r(dIt,"TFRegNetForImageClassification"),dIt.forEach(t),SAr=r(JDe," (RegNet model)"),JDe.forEach(t),RAr=i(Mo),C4=n(Mo,"LI",{});var YDe=s(C4);cMe=n(YDe,"STRONG",{});var cIt=s(cMe);PAr=r(cIt,"resnet"),cIt.forEach(t),BAr=r(YDe," \u2014 "),OY=n(YDe,"A",{href:!0});var fIt=s(OY);IAr=r(fIt,"TFResNetForImageClassification"),fIt.forEach(t),NAr=r(YDe," (ResNet model)"),YDe.forEach(t),qAr=i(Mo),w4=n(Mo,"LI",{});var KDe=s(w4);fMe=n(KDe,"STRONG",{});var mIt=s(fMe);jAr=r(mIt,"segformer"),mIt.forEach(t),DAr=r(KDe," \u2014 "),VY=n(KDe,"A",{href:!0});var gIt=s(VY);GAr=r(gIt,"TFSegformerForImageClassification"),gIt.forEach(t),OAr=r(KDe," (SegFormer model)"),KDe.forEach(t),VAr=i(Mo),A4=n(Mo,"LI",{});var ZDe=s(A4);mMe=n(ZDe,"STRONG",{});var hIt=s(mMe);XAr=r(hIt,"swin"),hIt.forEach(t),zAr=r(ZDe," \u2014 "),XY=n(ZDe,"A",{href:!0});var pIt=s(XY);WAr=r(pIt,"TFSwinForImageClassification"),pIt.forEach(t),QAr=r(ZDe," (Swin Transformer model)"),ZDe.forEach(t),HAr=i(Mo),L4=n(Mo,"LI",{});var eGe=s(L4);gMe=n(eGe,"STRONG",{});var _It=s(gMe);UAr=r(_It,"vit"),_It.forEach(t),JAr=r(eGe," \u2014 "),zY=n(eGe,"A",{href:!0});var uIt=s(zY);YAr=r(uIt,"TFViTForImageClassification"),uIt.forEach(t),KAr=r(eGe," (ViT model)"),eGe.forEach(t),Mo.forEach(t),ZAr=i(jl),T(y4.$$.fragment,jl),jl.forEach(t),ql.forEach(t),yWe=i(f),Fc=n(f,"H2",{class:!0});var IHe=s(Fc);x4=n(IHe,"A",{id:!0,class:!0,href:!0});var bIt=s(x4);hMe=n(bIt,"SPAN",{});var vIt=s(hMe);T(yx.$$.fragment,vIt),vIt.forEach(t),bIt.forEach(t),e7r=i(IHe),pMe=n(IHe,"SPAN",{});var FIt=s(pMe);o7r=r(FIt,"TFAutoModelForMaskedLM"),FIt.forEach(t),IHe.forEach(t),xWe=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(xx.$$.fragment,Dl),r7r=i(Dl),Tc=n(Dl,"P",{});var vae=s(Tc);t7r=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WY=n(vae,"A",{href:!0});var TIt=s(WY);a7r=r(TIt,"from_pretrained()"),TIt.forEach(t),n7r=r(vae," class method or the "),QY=n(vae,"A",{href:!0});var MIt=s(QY);s7r=r(MIt,"from_config()"),MIt.forEach(t),l7r=r(vae,` class
method.`),vae.forEach(t),i7r=i(Dl),$x=n(Dl,"P",{});var NHe=s($x);d7r=r(NHe,"This class cannot be instantiated directly using "),_Me=n(NHe,"CODE",{});var EIt=s(_Me);c7r=r(EIt,"__init__()"),EIt.forEach(t),f7r=r(NHe," (throws an error)."),NHe.forEach(t),m7r=i(Dl),Nt=n(Dl,"DIV",{class:!0});var y7=s(Nt);T(kx.$$.fragment,y7),g7r=i(y7),uMe=n(y7,"P",{});var CIt=s(uMe);h7r=r(CIt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),CIt.forEach(t),p7r=i(y7),Mc=n(y7,"P",{});var Fae=s(Mc);_7r=r(Fae,`Note:
Loading a model from its configuration file does `),bMe=n(Fae,"STRONG",{});var wIt=s(bMe);u7r=r(wIt,"not"),wIt.forEach(t),b7r=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Fae,"A",{href:!0});var AIt=s(HY);v7r=r(AIt,"from_pretrained()"),AIt.forEach(t),F7r=r(Fae," to load the model weights."),Fae.forEach(t),T7r=i(y7),T($4.$$.fragment,y7),y7.forEach(t),M7r=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Sx.$$.fragment,Gl),E7r=i(Gl),vMe=n(Gl,"P",{});var LIt=s(vMe);C7r=r(LIt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LIt.forEach(t),w7r=i(Gl),mn=n(Gl,"P",{});var x7=s(mn);A7r=r(x7,"The model class to instantiate is selected based on the "),FMe=n(x7,"CODE",{});var yIt=s(FMe);L7r=r(yIt,"model_type"),yIt.forEach(t),y7r=r(x7,` property of the config object (either
passed as an argument or loaded from `),TMe=n(x7,"CODE",{});var xIt=s(TMe);x7r=r(xIt,"pretrained_model_name_or_path"),xIt.forEach(t),$7r=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(x7,"CODE",{});var $It=s(MMe);k7r=r($It,"pretrained_model_name_or_path"),$It.forEach(t),S7r=r(x7,":"),x7.forEach(t),R7r=i(Gl),ie=n(Gl,"UL",{});var ge=s(ie);k4=n(ge,"LI",{});var oGe=s(k4);EMe=n(oGe,"STRONG",{});var kIt=s(EMe);P7r=r(kIt,"albert"),kIt.forEach(t),B7r=r(oGe," \u2014 "),UY=n(oGe,"A",{href:!0});var SIt=s(UY);I7r=r(SIt,"TFAlbertForMaskedLM"),SIt.forEach(t),N7r=r(oGe," (ALBERT model)"),oGe.forEach(t),q7r=i(ge),S4=n(ge,"LI",{});var rGe=s(S4);CMe=n(rGe,"STRONG",{});var RIt=s(CMe);j7r=r(RIt,"bert"),RIt.forEach(t),D7r=r(rGe," \u2014 "),JY=n(rGe,"A",{href:!0});var PIt=s(JY);G7r=r(PIt,"TFBertForMaskedLM"),PIt.forEach(t),O7r=r(rGe," (BERT model)"),rGe.forEach(t),V7r=i(ge),R4=n(ge,"LI",{});var tGe=s(R4);wMe=n(tGe,"STRONG",{});var BIt=s(wMe);X7r=r(BIt,"camembert"),BIt.forEach(t),z7r=r(tGe," \u2014 "),YY=n(tGe,"A",{href:!0});var IIt=s(YY);W7r=r(IIt,"TFCamembertForMaskedLM"),IIt.forEach(t),Q7r=r(tGe," (CamemBERT model)"),tGe.forEach(t),H7r=i(ge),P4=n(ge,"LI",{});var aGe=s(P4);AMe=n(aGe,"STRONG",{});var NIt=s(AMe);U7r=r(NIt,"convbert"),NIt.forEach(t),J7r=r(aGe," \u2014 "),KY=n(aGe,"A",{href:!0});var qIt=s(KY);Y7r=r(qIt,"TFConvBertForMaskedLM"),qIt.forEach(t),K7r=r(aGe," (ConvBERT model)"),aGe.forEach(t),Z7r=i(ge),B4=n(ge,"LI",{});var nGe=s(B4);LMe=n(nGe,"STRONG",{});var jIt=s(LMe);eLr=r(jIt,"deberta"),jIt.forEach(t),oLr=r(nGe," \u2014 "),ZY=n(nGe,"A",{href:!0});var DIt=s(ZY);rLr=r(DIt,"TFDebertaForMaskedLM"),DIt.forEach(t),tLr=r(nGe," (DeBERTa model)"),nGe.forEach(t),aLr=i(ge),I4=n(ge,"LI",{});var sGe=s(I4);yMe=n(sGe,"STRONG",{});var GIt=s(yMe);nLr=r(GIt,"deberta-v2"),GIt.forEach(t),sLr=r(sGe," \u2014 "),eK=n(sGe,"A",{href:!0});var OIt=s(eK);lLr=r(OIt,"TFDebertaV2ForMaskedLM"),OIt.forEach(t),iLr=r(sGe," (DeBERTa-v2 model)"),sGe.forEach(t),dLr=i(ge),N4=n(ge,"LI",{});var lGe=s(N4);xMe=n(lGe,"STRONG",{});var VIt=s(xMe);cLr=r(VIt,"distilbert"),VIt.forEach(t),fLr=r(lGe," \u2014 "),oK=n(lGe,"A",{href:!0});var XIt=s(oK);mLr=r(XIt,"TFDistilBertForMaskedLM"),XIt.forEach(t),gLr=r(lGe," (DistilBERT model)"),lGe.forEach(t),hLr=i(ge),q4=n(ge,"LI",{});var iGe=s(q4);$Me=n(iGe,"STRONG",{});var zIt=s($Me);pLr=r(zIt,"electra"),zIt.forEach(t),_Lr=r(iGe," \u2014 "),rK=n(iGe,"A",{href:!0});var WIt=s(rK);uLr=r(WIt,"TFElectraForMaskedLM"),WIt.forEach(t),bLr=r(iGe," (ELECTRA model)"),iGe.forEach(t),vLr=i(ge),j4=n(ge,"LI",{});var dGe=s(j4);kMe=n(dGe,"STRONG",{});var QIt=s(kMe);FLr=r(QIt,"flaubert"),QIt.forEach(t),TLr=r(dGe," \u2014 "),tK=n(dGe,"A",{href:!0});var HIt=s(tK);MLr=r(HIt,"TFFlaubertWithLMHeadModel"),HIt.forEach(t),ELr=r(dGe," (FlauBERT model)"),dGe.forEach(t),CLr=i(ge),D4=n(ge,"LI",{});var cGe=s(D4);SMe=n(cGe,"STRONG",{});var UIt=s(SMe);wLr=r(UIt,"funnel"),UIt.forEach(t),ALr=r(cGe," \u2014 "),aK=n(cGe,"A",{href:!0});var JIt=s(aK);LLr=r(JIt,"TFFunnelForMaskedLM"),JIt.forEach(t),yLr=r(cGe," (Funnel Transformer model)"),cGe.forEach(t),xLr=i(ge),G4=n(ge,"LI",{});var fGe=s(G4);RMe=n(fGe,"STRONG",{});var YIt=s(RMe);$Lr=r(YIt,"layoutlm"),YIt.forEach(t),kLr=r(fGe," \u2014 "),nK=n(fGe,"A",{href:!0});var KIt=s(nK);SLr=r(KIt,"TFLayoutLMForMaskedLM"),KIt.forEach(t),RLr=r(fGe," (LayoutLM model)"),fGe.forEach(t),PLr=i(ge),O4=n(ge,"LI",{});var mGe=s(O4);PMe=n(mGe,"STRONG",{});var ZIt=s(PMe);BLr=r(ZIt,"longformer"),ZIt.forEach(t),ILr=r(mGe," \u2014 "),sK=n(mGe,"A",{href:!0});var eNt=s(sK);NLr=r(eNt,"TFLongformerForMaskedLM"),eNt.forEach(t),qLr=r(mGe," (Longformer model)"),mGe.forEach(t),jLr=i(ge),V4=n(ge,"LI",{});var gGe=s(V4);BMe=n(gGe,"STRONG",{});var oNt=s(BMe);DLr=r(oNt,"mobilebert"),oNt.forEach(t),GLr=r(gGe," \u2014 "),lK=n(gGe,"A",{href:!0});var rNt=s(lK);OLr=r(rNt,"TFMobileBertForMaskedLM"),rNt.forEach(t),VLr=r(gGe," (MobileBERT model)"),gGe.forEach(t),XLr=i(ge),X4=n(ge,"LI",{});var hGe=s(X4);IMe=n(hGe,"STRONG",{});var tNt=s(IMe);zLr=r(tNt,"mpnet"),tNt.forEach(t),WLr=r(hGe," \u2014 "),iK=n(hGe,"A",{href:!0});var aNt=s(iK);QLr=r(aNt,"TFMPNetForMaskedLM"),aNt.forEach(t),HLr=r(hGe," (MPNet model)"),hGe.forEach(t),ULr=i(ge),z4=n(ge,"LI",{});var pGe=s(z4);NMe=n(pGe,"STRONG",{});var nNt=s(NMe);JLr=r(nNt,"rembert"),nNt.forEach(t),YLr=r(pGe," \u2014 "),dK=n(pGe,"A",{href:!0});var sNt=s(dK);KLr=r(sNt,"TFRemBertForMaskedLM"),sNt.forEach(t),ZLr=r(pGe," (RemBERT model)"),pGe.forEach(t),eyr=i(ge),W4=n(ge,"LI",{});var _Ge=s(W4);qMe=n(_Ge,"STRONG",{});var lNt=s(qMe);oyr=r(lNt,"roberta"),lNt.forEach(t),ryr=r(_Ge," \u2014 "),cK=n(_Ge,"A",{href:!0});var iNt=s(cK);tyr=r(iNt,"TFRobertaForMaskedLM"),iNt.forEach(t),ayr=r(_Ge," (RoBERTa model)"),_Ge.forEach(t),nyr=i(ge),Q4=n(ge,"LI",{});var uGe=s(Q4);jMe=n(uGe,"STRONG",{});var dNt=s(jMe);syr=r(dNt,"roformer"),dNt.forEach(t),lyr=r(uGe," \u2014 "),fK=n(uGe,"A",{href:!0});var cNt=s(fK);iyr=r(cNt,"TFRoFormerForMaskedLM"),cNt.forEach(t),dyr=r(uGe," (RoFormer model)"),uGe.forEach(t),cyr=i(ge),H4=n(ge,"LI",{});var bGe=s(H4);DMe=n(bGe,"STRONG",{});var fNt=s(DMe);fyr=r(fNt,"tapas"),fNt.forEach(t),myr=r(bGe," \u2014 "),mK=n(bGe,"A",{href:!0});var mNt=s(mK);gyr=r(mNt,"TFTapasForMaskedLM"),mNt.forEach(t),hyr=r(bGe," (TAPAS model)"),bGe.forEach(t),pyr=i(ge),U4=n(ge,"LI",{});var vGe=s(U4);GMe=n(vGe,"STRONG",{});var gNt=s(GMe);_yr=r(gNt,"xlm"),gNt.forEach(t),uyr=r(vGe," \u2014 "),gK=n(vGe,"A",{href:!0});var hNt=s(gK);byr=r(hNt,"TFXLMWithLMHeadModel"),hNt.forEach(t),vyr=r(vGe," (XLM model)"),vGe.forEach(t),Fyr=i(ge),J4=n(ge,"LI",{});var FGe=s(J4);OMe=n(FGe,"STRONG",{});var pNt=s(OMe);Tyr=r(pNt,"xlm-roberta"),pNt.forEach(t),Myr=r(FGe," \u2014 "),hK=n(FGe,"A",{href:!0});var _Nt=s(hK);Eyr=r(_Nt,"TFXLMRobertaForMaskedLM"),_Nt.forEach(t),Cyr=r(FGe," (XLM-RoBERTa model)"),FGe.forEach(t),ge.forEach(t),wyr=i(Gl),T(Y4.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),$We=i(f),Ec=n(f,"H2",{class:!0});var qHe=s(Ec);K4=n(qHe,"A",{id:!0,class:!0,href:!0});var uNt=s(K4);VMe=n(uNt,"SPAN",{});var bNt=s(VMe);T(Rx.$$.fragment,bNt),bNt.forEach(t),uNt.forEach(t),Ayr=i(qHe),XMe=n(qHe,"SPAN",{});var vNt=s(XMe);Lyr=r(vNt,"TFAutoModelForSeq2SeqLM"),vNt.forEach(t),qHe.forEach(t),kWe=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(Px.$$.fragment,Ol),yyr=i(Ol),Cc=n(Ol,"P",{});var Tae=s(Cc);xyr=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pK=n(Tae,"A",{href:!0});var FNt=s(pK);$yr=r(FNt,"from_pretrained()"),FNt.forEach(t),kyr=r(Tae," class method or the "),_K=n(Tae,"A",{href:!0});var TNt=s(_K);Syr=r(TNt,"from_config()"),TNt.forEach(t),Ryr=r(Tae,` class
method.`),Tae.forEach(t),Pyr=i(Ol),Bx=n(Ol,"P",{});var jHe=s(Bx);Byr=r(jHe,"This class cannot be instantiated directly using "),zMe=n(jHe,"CODE",{});var MNt=s(zMe);Iyr=r(MNt,"__init__()"),MNt.forEach(t),Nyr=r(jHe," (throws an error)."),jHe.forEach(t),qyr=i(Ol),qt=n(Ol,"DIV",{class:!0});var $7=s(qt);T(Ix.$$.fragment,$7),jyr=i($7),WMe=n($7,"P",{});var ENt=s(WMe);Dyr=r(ENt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ENt.forEach(t),Gyr=i($7),wc=n($7,"P",{});var Mae=s(wc);Oyr=r(Mae,`Note:
Loading a model from its configuration file does `),QMe=n(Mae,"STRONG",{});var CNt=s(QMe);Vyr=r(CNt,"not"),CNt.forEach(t),Xyr=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Mae,"A",{href:!0});var wNt=s(uK);zyr=r(wNt,"from_pretrained()"),wNt.forEach(t),Wyr=r(Mae," to load the model weights."),Mae.forEach(t),Qyr=i($7),T(Z4.$$.fragment,$7),$7.forEach(t),Hyr=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(Nx.$$.fragment,Vl),Uyr=i(Vl),HMe=n(Vl,"P",{});var ANt=s(HMe);Jyr=r(ANt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ANt.forEach(t),Yyr=i(Vl),gn=n(Vl,"P",{});var k7=s(gn);Kyr=r(k7,"The model class to instantiate is selected based on the "),UMe=n(k7,"CODE",{});var LNt=s(UMe);Zyr=r(LNt,"model_type"),LNt.forEach(t),e9r=r(k7,` property of the config object (either
passed as an argument or loaded from `),JMe=n(k7,"CODE",{});var yNt=s(JMe);o9r=r(yNt,"pretrained_model_name_or_path"),yNt.forEach(t),r9r=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(k7,"CODE",{});var xNt=s(YMe);t9r=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),a9r=r(k7,":"),k7.forEach(t),n9r=i(Vl),ye=n(Vl,"UL",{});var Ie=s(ye);eE=n(Ie,"LI",{});var TGe=s(eE);KMe=n(TGe,"STRONG",{});var $Nt=s(KMe);s9r=r($Nt,"bart"),$Nt.forEach(t),l9r=r(TGe," \u2014 "),bK=n(TGe,"A",{href:!0});var kNt=s(bK);i9r=r(kNt,"TFBartForConditionalGeneration"),kNt.forEach(t),d9r=r(TGe," (BART model)"),TGe.forEach(t),c9r=i(Ie),oE=n(Ie,"LI",{});var MGe=s(oE);ZMe=n(MGe,"STRONG",{});var SNt=s(ZMe);f9r=r(SNt,"blenderbot"),SNt.forEach(t),m9r=r(MGe," \u2014 "),vK=n(MGe,"A",{href:!0});var RNt=s(vK);g9r=r(RNt,"TFBlenderbotForConditionalGeneration"),RNt.forEach(t),h9r=r(MGe," (Blenderbot model)"),MGe.forEach(t),p9r=i(Ie),rE=n(Ie,"LI",{});var EGe=s(rE);e4e=n(EGe,"STRONG",{});var PNt=s(e4e);_9r=r(PNt,"blenderbot-small"),PNt.forEach(t),u9r=r(EGe," \u2014 "),FK=n(EGe,"A",{href:!0});var BNt=s(FK);b9r=r(BNt,"TFBlenderbotSmallForConditionalGeneration"),BNt.forEach(t),v9r=r(EGe," (BlenderbotSmall model)"),EGe.forEach(t),F9r=i(Ie),tE=n(Ie,"LI",{});var CGe=s(tE);o4e=n(CGe,"STRONG",{});var INt=s(o4e);T9r=r(INt,"encoder-decoder"),INt.forEach(t),M9r=r(CGe," \u2014 "),TK=n(CGe,"A",{href:!0});var NNt=s(TK);E9r=r(NNt,"TFEncoderDecoderModel"),NNt.forEach(t),C9r=r(CGe," (Encoder decoder model)"),CGe.forEach(t),w9r=i(Ie),aE=n(Ie,"LI",{});var wGe=s(aE);r4e=n(wGe,"STRONG",{});var qNt=s(r4e);A9r=r(qNt,"led"),qNt.forEach(t),L9r=r(wGe," \u2014 "),MK=n(wGe,"A",{href:!0});var jNt=s(MK);y9r=r(jNt,"TFLEDForConditionalGeneration"),jNt.forEach(t),x9r=r(wGe," (LED model)"),wGe.forEach(t),$9r=i(Ie),nE=n(Ie,"LI",{});var AGe=s(nE);t4e=n(AGe,"STRONG",{});var DNt=s(t4e);k9r=r(DNt,"marian"),DNt.forEach(t),S9r=r(AGe," \u2014 "),EK=n(AGe,"A",{href:!0});var GNt=s(EK);R9r=r(GNt,"TFMarianMTModel"),GNt.forEach(t),P9r=r(AGe," (Marian model)"),AGe.forEach(t),B9r=i(Ie),sE=n(Ie,"LI",{});var LGe=s(sE);a4e=n(LGe,"STRONG",{});var ONt=s(a4e);I9r=r(ONt,"mbart"),ONt.forEach(t),N9r=r(LGe," \u2014 "),CK=n(LGe,"A",{href:!0});var VNt=s(CK);q9r=r(VNt,"TFMBartForConditionalGeneration"),VNt.forEach(t),j9r=r(LGe," (mBART model)"),LGe.forEach(t),D9r=i(Ie),lE=n(Ie,"LI",{});var yGe=s(lE);n4e=n(yGe,"STRONG",{});var XNt=s(n4e);G9r=r(XNt,"mt5"),XNt.forEach(t),O9r=r(yGe," \u2014 "),wK=n(yGe,"A",{href:!0});var zNt=s(wK);V9r=r(zNt,"TFMT5ForConditionalGeneration"),zNt.forEach(t),X9r=r(yGe," (MT5 model)"),yGe.forEach(t),z9r=i(Ie),iE=n(Ie,"LI",{});var xGe=s(iE);s4e=n(xGe,"STRONG",{});var WNt=s(s4e);W9r=r(WNt,"pegasus"),WNt.forEach(t),Q9r=r(xGe," \u2014 "),AK=n(xGe,"A",{href:!0});var QNt=s(AK);H9r=r(QNt,"TFPegasusForConditionalGeneration"),QNt.forEach(t),U9r=r(xGe," (Pegasus model)"),xGe.forEach(t),J9r=i(Ie),dE=n(Ie,"LI",{});var $Ge=s(dE);l4e=n($Ge,"STRONG",{});var HNt=s(l4e);Y9r=r(HNt,"t5"),HNt.forEach(t),K9r=r($Ge," \u2014 "),LK=n($Ge,"A",{href:!0});var UNt=s(LK);Z9r=r(UNt,"TFT5ForConditionalGeneration"),UNt.forEach(t),exr=r($Ge," (T5 model)"),$Ge.forEach(t),Ie.forEach(t),oxr=i(Vl),T(cE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),SWe=i(f),Ac=n(f,"H2",{class:!0});var DHe=s(Ac);fE=n(DHe,"A",{id:!0,class:!0,href:!0});var JNt=s(fE);i4e=n(JNt,"SPAN",{});var YNt=s(i4e);T(qx.$$.fragment,YNt),YNt.forEach(t),JNt.forEach(t),rxr=i(DHe),d4e=n(DHe,"SPAN",{});var KNt=s(d4e);txr=r(KNt,"TFAutoModelForSequenceClassification"),KNt.forEach(t),DHe.forEach(t),RWe=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T(jx.$$.fragment,Xl),axr=i(Xl),Lc=n(Xl,"P",{});var Eae=s(Lc);nxr=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yK=n(Eae,"A",{href:!0});var ZNt=s(yK);sxr=r(ZNt,"from_pretrained()"),ZNt.forEach(t),lxr=r(Eae," class method or the "),xK=n(Eae,"A",{href:!0});var eqt=s(xK);ixr=r(eqt,"from_config()"),eqt.forEach(t),dxr=r(Eae,` class
method.`),Eae.forEach(t),cxr=i(Xl),Dx=n(Xl,"P",{});var GHe=s(Dx);fxr=r(GHe,"This class cannot be instantiated directly using "),c4e=n(GHe,"CODE",{});var oqt=s(c4e);mxr=r(oqt,"__init__()"),oqt.forEach(t),gxr=r(GHe," (throws an error)."),GHe.forEach(t),hxr=i(Xl),jt=n(Xl,"DIV",{class:!0});var S7=s(jt);T(Gx.$$.fragment,S7),pxr=i(S7),f4e=n(S7,"P",{});var rqt=s(f4e);_xr=r(rqt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rqt.forEach(t),uxr=i(S7),yc=n(S7,"P",{});var Cae=s(yc);bxr=r(Cae,`Note:
Loading a model from its configuration file does `),m4e=n(Cae,"STRONG",{});var tqt=s(m4e);vxr=r(tqt,"not"),tqt.forEach(t),Fxr=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=n(Cae,"A",{href:!0});var aqt=s($K);Txr=r(aqt,"from_pretrained()"),aqt.forEach(t),Mxr=r(Cae," to load the model weights."),Cae.forEach(t),Exr=i(S7),T(mE.$$.fragment,S7),S7.forEach(t),Cxr=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T(Ox.$$.fragment,zl),wxr=i(zl),g4e=n(zl,"P",{});var nqt=s(g4e);Axr=r(nqt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nqt.forEach(t),Lxr=i(zl),hn=n(zl,"P",{});var R7=s(hn);yxr=r(R7,"The model class to instantiate is selected based on the "),h4e=n(R7,"CODE",{});var sqt=s(h4e);xxr=r(sqt,"model_type"),sqt.forEach(t),$xr=r(R7,` property of the config object (either
passed as an argument or loaded from `),p4e=n(R7,"CODE",{});var lqt=s(p4e);kxr=r(lqt,"pretrained_model_name_or_path"),lqt.forEach(t),Sxr=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=n(R7,"CODE",{});var iqt=s(_4e);Rxr=r(iqt,"pretrained_model_name_or_path"),iqt.forEach(t),Pxr=r(R7,":"),R7.forEach(t),Bxr=i(zl),te=n(zl,"UL",{});var ne=s(te);gE=n(ne,"LI",{});var kGe=s(gE);u4e=n(kGe,"STRONG",{});var dqt=s(u4e);Ixr=r(dqt,"albert"),dqt.forEach(t),Nxr=r(kGe," \u2014 "),kK=n(kGe,"A",{href:!0});var cqt=s(kK);qxr=r(cqt,"TFAlbertForSequenceClassification"),cqt.forEach(t),jxr=r(kGe," (ALBERT model)"),kGe.forEach(t),Dxr=i(ne),hE=n(ne,"LI",{});var SGe=s(hE);b4e=n(SGe,"STRONG",{});var fqt=s(b4e);Gxr=r(fqt,"bert"),fqt.forEach(t),Oxr=r(SGe," \u2014 "),SK=n(SGe,"A",{href:!0});var mqt=s(SK);Vxr=r(mqt,"TFBertForSequenceClassification"),mqt.forEach(t),Xxr=r(SGe," (BERT model)"),SGe.forEach(t),zxr=i(ne),pE=n(ne,"LI",{});var RGe=s(pE);v4e=n(RGe,"STRONG",{});var gqt=s(v4e);Wxr=r(gqt,"camembert"),gqt.forEach(t),Qxr=r(RGe," \u2014 "),RK=n(RGe,"A",{href:!0});var hqt=s(RK);Hxr=r(hqt,"TFCamembertForSequenceClassification"),hqt.forEach(t),Uxr=r(RGe," (CamemBERT model)"),RGe.forEach(t),Jxr=i(ne),_E=n(ne,"LI",{});var PGe=s(_E);F4e=n(PGe,"STRONG",{});var pqt=s(F4e);Yxr=r(pqt,"convbert"),pqt.forEach(t),Kxr=r(PGe," \u2014 "),PK=n(PGe,"A",{href:!0});var _qt=s(PK);Zxr=r(_qt,"TFConvBertForSequenceClassification"),_qt.forEach(t),e$r=r(PGe," (ConvBERT model)"),PGe.forEach(t),o$r=i(ne),uE=n(ne,"LI",{});var BGe=s(uE);T4e=n(BGe,"STRONG",{});var uqt=s(T4e);r$r=r(uqt,"ctrl"),uqt.forEach(t),t$r=r(BGe," \u2014 "),BK=n(BGe,"A",{href:!0});var bqt=s(BK);a$r=r(bqt,"TFCTRLForSequenceClassification"),bqt.forEach(t),n$r=r(BGe," (CTRL model)"),BGe.forEach(t),s$r=i(ne),bE=n(ne,"LI",{});var IGe=s(bE);M4e=n(IGe,"STRONG",{});var vqt=s(M4e);l$r=r(vqt,"deberta"),vqt.forEach(t),i$r=r(IGe," \u2014 "),IK=n(IGe,"A",{href:!0});var Fqt=s(IK);d$r=r(Fqt,"TFDebertaForSequenceClassification"),Fqt.forEach(t),c$r=r(IGe," (DeBERTa model)"),IGe.forEach(t),f$r=i(ne),vE=n(ne,"LI",{});var NGe=s(vE);E4e=n(NGe,"STRONG",{});var Tqt=s(E4e);m$r=r(Tqt,"deberta-v2"),Tqt.forEach(t),g$r=r(NGe," \u2014 "),NK=n(NGe,"A",{href:!0});var Mqt=s(NK);h$r=r(Mqt,"TFDebertaV2ForSequenceClassification"),Mqt.forEach(t),p$r=r(NGe," (DeBERTa-v2 model)"),NGe.forEach(t),_$r=i(ne),FE=n(ne,"LI",{});var qGe=s(FE);C4e=n(qGe,"STRONG",{});var Eqt=s(C4e);u$r=r(Eqt,"distilbert"),Eqt.forEach(t),b$r=r(qGe," \u2014 "),qK=n(qGe,"A",{href:!0});var Cqt=s(qK);v$r=r(Cqt,"TFDistilBertForSequenceClassification"),Cqt.forEach(t),F$r=r(qGe," (DistilBERT model)"),qGe.forEach(t),T$r=i(ne),TE=n(ne,"LI",{});var jGe=s(TE);w4e=n(jGe,"STRONG",{});var wqt=s(w4e);M$r=r(wqt,"electra"),wqt.forEach(t),E$r=r(jGe," \u2014 "),jK=n(jGe,"A",{href:!0});var Aqt=s(jK);C$r=r(Aqt,"TFElectraForSequenceClassification"),Aqt.forEach(t),w$r=r(jGe," (ELECTRA model)"),jGe.forEach(t),A$r=i(ne),ME=n(ne,"LI",{});var DGe=s(ME);A4e=n(DGe,"STRONG",{});var Lqt=s(A4e);L$r=r(Lqt,"flaubert"),Lqt.forEach(t),y$r=r(DGe," \u2014 "),DK=n(DGe,"A",{href:!0});var yqt=s(DK);x$r=r(yqt,"TFFlaubertForSequenceClassification"),yqt.forEach(t),$$r=r(DGe," (FlauBERT model)"),DGe.forEach(t),k$r=i(ne),EE=n(ne,"LI",{});var GGe=s(EE);L4e=n(GGe,"STRONG",{});var xqt=s(L4e);S$r=r(xqt,"funnel"),xqt.forEach(t),R$r=r(GGe," \u2014 "),GK=n(GGe,"A",{href:!0});var $qt=s(GK);P$r=r($qt,"TFFunnelForSequenceClassification"),$qt.forEach(t),B$r=r(GGe," (Funnel Transformer model)"),GGe.forEach(t),I$r=i(ne),CE=n(ne,"LI",{});var OGe=s(CE);y4e=n(OGe,"STRONG",{});var kqt=s(y4e);N$r=r(kqt,"gpt2"),kqt.forEach(t),q$r=r(OGe," \u2014 "),OK=n(OGe,"A",{href:!0});var Sqt=s(OK);j$r=r(Sqt,"TFGPT2ForSequenceClassification"),Sqt.forEach(t),D$r=r(OGe," (OpenAI GPT-2 model)"),OGe.forEach(t),G$r=i(ne),wE=n(ne,"LI",{});var VGe=s(wE);x4e=n(VGe,"STRONG",{});var Rqt=s(x4e);O$r=r(Rqt,"gptj"),Rqt.forEach(t),V$r=r(VGe," \u2014 "),VK=n(VGe,"A",{href:!0});var Pqt=s(VK);X$r=r(Pqt,"TFGPTJForSequenceClassification"),Pqt.forEach(t),z$r=r(VGe," (GPT-J model)"),VGe.forEach(t),W$r=i(ne),AE=n(ne,"LI",{});var XGe=s(AE);$4e=n(XGe,"STRONG",{});var Bqt=s($4e);Q$r=r(Bqt,"layoutlm"),Bqt.forEach(t),H$r=r(XGe," \u2014 "),XK=n(XGe,"A",{href:!0});var Iqt=s(XK);U$r=r(Iqt,"TFLayoutLMForSequenceClassification"),Iqt.forEach(t),J$r=r(XGe," (LayoutLM model)"),XGe.forEach(t),Y$r=i(ne),LE=n(ne,"LI",{});var zGe=s(LE);k4e=n(zGe,"STRONG",{});var Nqt=s(k4e);K$r=r(Nqt,"longformer"),Nqt.forEach(t),Z$r=r(zGe," \u2014 "),zK=n(zGe,"A",{href:!0});var qqt=s(zK);ekr=r(qqt,"TFLongformerForSequenceClassification"),qqt.forEach(t),okr=r(zGe," (Longformer model)"),zGe.forEach(t),rkr=i(ne),yE=n(ne,"LI",{});var WGe=s(yE);S4e=n(WGe,"STRONG",{});var jqt=s(S4e);tkr=r(jqt,"mobilebert"),jqt.forEach(t),akr=r(WGe," \u2014 "),WK=n(WGe,"A",{href:!0});var Dqt=s(WK);nkr=r(Dqt,"TFMobileBertForSequenceClassification"),Dqt.forEach(t),skr=r(WGe," (MobileBERT model)"),WGe.forEach(t),lkr=i(ne),xE=n(ne,"LI",{});var QGe=s(xE);R4e=n(QGe,"STRONG",{});var Gqt=s(R4e);ikr=r(Gqt,"mpnet"),Gqt.forEach(t),dkr=r(QGe," \u2014 "),QK=n(QGe,"A",{href:!0});var Oqt=s(QK);ckr=r(Oqt,"TFMPNetForSequenceClassification"),Oqt.forEach(t),fkr=r(QGe," (MPNet model)"),QGe.forEach(t),mkr=i(ne),$E=n(ne,"LI",{});var HGe=s($E);P4e=n(HGe,"STRONG",{});var Vqt=s(P4e);gkr=r(Vqt,"openai-gpt"),Vqt.forEach(t),hkr=r(HGe," \u2014 "),HK=n(HGe,"A",{href:!0});var Xqt=s(HK);pkr=r(Xqt,"TFOpenAIGPTForSequenceClassification"),Xqt.forEach(t),_kr=r(HGe," (OpenAI GPT model)"),HGe.forEach(t),ukr=i(ne),kE=n(ne,"LI",{});var UGe=s(kE);B4e=n(UGe,"STRONG",{});var zqt=s(B4e);bkr=r(zqt,"rembert"),zqt.forEach(t),vkr=r(UGe," \u2014 "),UK=n(UGe,"A",{href:!0});var Wqt=s(UK);Fkr=r(Wqt,"TFRemBertForSequenceClassification"),Wqt.forEach(t),Tkr=r(UGe," (RemBERT model)"),UGe.forEach(t),Mkr=i(ne),SE=n(ne,"LI",{});var JGe=s(SE);I4e=n(JGe,"STRONG",{});var Qqt=s(I4e);Ekr=r(Qqt,"roberta"),Qqt.forEach(t),Ckr=r(JGe," \u2014 "),JK=n(JGe,"A",{href:!0});var Hqt=s(JK);wkr=r(Hqt,"TFRobertaForSequenceClassification"),Hqt.forEach(t),Akr=r(JGe," (RoBERTa model)"),JGe.forEach(t),Lkr=i(ne),RE=n(ne,"LI",{});var YGe=s(RE);N4e=n(YGe,"STRONG",{});var Uqt=s(N4e);ykr=r(Uqt,"roformer"),Uqt.forEach(t),xkr=r(YGe," \u2014 "),YK=n(YGe,"A",{href:!0});var Jqt=s(YK);$kr=r(Jqt,"TFRoFormerForSequenceClassification"),Jqt.forEach(t),kkr=r(YGe," (RoFormer model)"),YGe.forEach(t),Skr=i(ne),PE=n(ne,"LI",{});var KGe=s(PE);q4e=n(KGe,"STRONG",{});var Yqt=s(q4e);Rkr=r(Yqt,"tapas"),Yqt.forEach(t),Pkr=r(KGe," \u2014 "),KK=n(KGe,"A",{href:!0});var Kqt=s(KK);Bkr=r(Kqt,"TFTapasForSequenceClassification"),Kqt.forEach(t),Ikr=r(KGe," (TAPAS model)"),KGe.forEach(t),Nkr=i(ne),BE=n(ne,"LI",{});var ZGe=s(BE);j4e=n(ZGe,"STRONG",{});var Zqt=s(j4e);qkr=r(Zqt,"transfo-xl"),Zqt.forEach(t),jkr=r(ZGe," \u2014 "),ZK=n(ZGe,"A",{href:!0});var ejt=s(ZK);Dkr=r(ejt,"TFTransfoXLForSequenceClassification"),ejt.forEach(t),Gkr=r(ZGe," (Transformer-XL model)"),ZGe.forEach(t),Okr=i(ne),IE=n(ne,"LI",{});var eOe=s(IE);D4e=n(eOe,"STRONG",{});var ojt=s(D4e);Vkr=r(ojt,"xlm"),ojt.forEach(t),Xkr=r(eOe," \u2014 "),eZ=n(eOe,"A",{href:!0});var rjt=s(eZ);zkr=r(rjt,"TFXLMForSequenceClassification"),rjt.forEach(t),Wkr=r(eOe," (XLM model)"),eOe.forEach(t),Qkr=i(ne),NE=n(ne,"LI",{});var oOe=s(NE);G4e=n(oOe,"STRONG",{});var tjt=s(G4e);Hkr=r(tjt,"xlm-roberta"),tjt.forEach(t),Ukr=r(oOe," \u2014 "),oZ=n(oOe,"A",{href:!0});var ajt=s(oZ);Jkr=r(ajt,"TFXLMRobertaForSequenceClassification"),ajt.forEach(t),Ykr=r(oOe," (XLM-RoBERTa model)"),oOe.forEach(t),Kkr=i(ne),qE=n(ne,"LI",{});var rOe=s(qE);O4e=n(rOe,"STRONG",{});var njt=s(O4e);Zkr=r(njt,"xlnet"),njt.forEach(t),eSr=r(rOe," \u2014 "),rZ=n(rOe,"A",{href:!0});var sjt=s(rZ);oSr=r(sjt,"TFXLNetForSequenceClassification"),sjt.forEach(t),rSr=r(rOe," (XLNet model)"),rOe.forEach(t),ne.forEach(t),tSr=i(zl),T(jE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),PWe=i(f),xc=n(f,"H2",{class:!0});var OHe=s(xc);DE=n(OHe,"A",{id:!0,class:!0,href:!0});var ljt=s(DE);V4e=n(ljt,"SPAN",{});var ijt=s(V4e);T(Vx.$$.fragment,ijt),ijt.forEach(t),ljt.forEach(t),aSr=i(OHe),X4e=n(OHe,"SPAN",{});var djt=s(X4e);nSr=r(djt,"TFAutoModelForMultipleChoice"),djt.forEach(t),OHe.forEach(t),BWe=i(f),dr=n(f,"DIV",{class:!0});var Wl=s(dr);T(Xx.$$.fragment,Wl),sSr=i(Wl),$c=n(Wl,"P",{});var wae=s($c);lSr=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tZ=n(wae,"A",{href:!0});var cjt=s(tZ);iSr=r(cjt,"from_pretrained()"),cjt.forEach(t),dSr=r(wae," class method or the "),aZ=n(wae,"A",{href:!0});var fjt=s(aZ);cSr=r(fjt,"from_config()"),fjt.forEach(t),fSr=r(wae,` class
method.`),wae.forEach(t),mSr=i(Wl),zx=n(Wl,"P",{});var VHe=s(zx);gSr=r(VHe,"This class cannot be instantiated directly using "),z4e=n(VHe,"CODE",{});var mjt=s(z4e);hSr=r(mjt,"__init__()"),mjt.forEach(t),pSr=r(VHe," (throws an error)."),VHe.forEach(t),_Sr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var P7=s(Dt);T(Wx.$$.fragment,P7),uSr=i(P7),W4e=n(P7,"P",{});var gjt=s(W4e);bSr=r(gjt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gjt.forEach(t),vSr=i(P7),kc=n(P7,"P",{});var Aae=s(kc);FSr=r(Aae,`Note:
Loading a model from its configuration file does `),Q4e=n(Aae,"STRONG",{});var hjt=s(Q4e);TSr=r(hjt,"not"),hjt.forEach(t),MSr=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(Aae,"A",{href:!0});var pjt=s(nZ);ESr=r(pjt,"from_pretrained()"),pjt.forEach(t),CSr=r(Aae," to load the model weights."),Aae.forEach(t),wSr=i(P7),T(GE.$$.fragment,P7),P7.forEach(t),ASr=i(Wl),Nr=n(Wl,"DIV",{class:!0});var Ql=s(Nr);T(Qx.$$.fragment,Ql),LSr=i(Ql),H4e=n(Ql,"P",{});var _jt=s(H4e);ySr=r(_jt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_jt.forEach(t),xSr=i(Ql),pn=n(Ql,"P",{});var B7=s(pn);$Sr=r(B7,"The model class to instantiate is selected based on the "),U4e=n(B7,"CODE",{});var ujt=s(U4e);kSr=r(ujt,"model_type"),ujt.forEach(t),SSr=r(B7,` property of the config object (either
passed as an argument or loaded from `),J4e=n(B7,"CODE",{});var bjt=s(J4e);RSr=r(bjt,"pretrained_model_name_or_path"),bjt.forEach(t),PSr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=n(B7,"CODE",{});var vjt=s(Y4e);BSr=r(vjt,"pretrained_model_name_or_path"),vjt.forEach(t),ISr=r(B7,":"),B7.forEach(t),NSr=i(Ql),ve=n(Ql,"UL",{});var Te=s(ve);OE=n(Te,"LI",{});var tOe=s(OE);K4e=n(tOe,"STRONG",{});var Fjt=s(K4e);qSr=r(Fjt,"albert"),Fjt.forEach(t),jSr=r(tOe," \u2014 "),sZ=n(tOe,"A",{href:!0});var Tjt=s(sZ);DSr=r(Tjt,"TFAlbertForMultipleChoice"),Tjt.forEach(t),GSr=r(tOe," (ALBERT model)"),tOe.forEach(t),OSr=i(Te),VE=n(Te,"LI",{});var aOe=s(VE);Z4e=n(aOe,"STRONG",{});var Mjt=s(Z4e);VSr=r(Mjt,"bert"),Mjt.forEach(t),XSr=r(aOe," \u2014 "),lZ=n(aOe,"A",{href:!0});var Ejt=s(lZ);zSr=r(Ejt,"TFBertForMultipleChoice"),Ejt.forEach(t),WSr=r(aOe," (BERT model)"),aOe.forEach(t),QSr=i(Te),XE=n(Te,"LI",{});var nOe=s(XE);eEe=n(nOe,"STRONG",{});var Cjt=s(eEe);HSr=r(Cjt,"camembert"),Cjt.forEach(t),USr=r(nOe," \u2014 "),iZ=n(nOe,"A",{href:!0});var wjt=s(iZ);JSr=r(wjt,"TFCamembertForMultipleChoice"),wjt.forEach(t),YSr=r(nOe," (CamemBERT model)"),nOe.forEach(t),KSr=i(Te),zE=n(Te,"LI",{});var sOe=s(zE);oEe=n(sOe,"STRONG",{});var Ajt=s(oEe);ZSr=r(Ajt,"convbert"),Ajt.forEach(t),eRr=r(sOe," \u2014 "),dZ=n(sOe,"A",{href:!0});var Ljt=s(dZ);oRr=r(Ljt,"TFConvBertForMultipleChoice"),Ljt.forEach(t),rRr=r(sOe," (ConvBERT model)"),sOe.forEach(t),tRr=i(Te),WE=n(Te,"LI",{});var lOe=s(WE);rEe=n(lOe,"STRONG",{});var yjt=s(rEe);aRr=r(yjt,"distilbert"),yjt.forEach(t),nRr=r(lOe," \u2014 "),cZ=n(lOe,"A",{href:!0});var xjt=s(cZ);sRr=r(xjt,"TFDistilBertForMultipleChoice"),xjt.forEach(t),lRr=r(lOe," (DistilBERT model)"),lOe.forEach(t),iRr=i(Te),QE=n(Te,"LI",{});var iOe=s(QE);tEe=n(iOe,"STRONG",{});var $jt=s(tEe);dRr=r($jt,"electra"),$jt.forEach(t),cRr=r(iOe," \u2014 "),fZ=n(iOe,"A",{href:!0});var kjt=s(fZ);fRr=r(kjt,"TFElectraForMultipleChoice"),kjt.forEach(t),mRr=r(iOe," (ELECTRA model)"),iOe.forEach(t),gRr=i(Te),HE=n(Te,"LI",{});var dOe=s(HE);aEe=n(dOe,"STRONG",{});var Sjt=s(aEe);hRr=r(Sjt,"flaubert"),Sjt.forEach(t),pRr=r(dOe," \u2014 "),mZ=n(dOe,"A",{href:!0});var Rjt=s(mZ);_Rr=r(Rjt,"TFFlaubertForMultipleChoice"),Rjt.forEach(t),uRr=r(dOe," (FlauBERT model)"),dOe.forEach(t),bRr=i(Te),UE=n(Te,"LI",{});var cOe=s(UE);nEe=n(cOe,"STRONG",{});var Pjt=s(nEe);vRr=r(Pjt,"funnel"),Pjt.forEach(t),FRr=r(cOe," \u2014 "),gZ=n(cOe,"A",{href:!0});var Bjt=s(gZ);TRr=r(Bjt,"TFFunnelForMultipleChoice"),Bjt.forEach(t),MRr=r(cOe," (Funnel Transformer model)"),cOe.forEach(t),ERr=i(Te),JE=n(Te,"LI",{});var fOe=s(JE);sEe=n(fOe,"STRONG",{});var Ijt=s(sEe);CRr=r(Ijt,"longformer"),Ijt.forEach(t),wRr=r(fOe," \u2014 "),hZ=n(fOe,"A",{href:!0});var Njt=s(hZ);ARr=r(Njt,"TFLongformerForMultipleChoice"),Njt.forEach(t),LRr=r(fOe," (Longformer model)"),fOe.forEach(t),yRr=i(Te),YE=n(Te,"LI",{});var mOe=s(YE);lEe=n(mOe,"STRONG",{});var qjt=s(lEe);xRr=r(qjt,"mobilebert"),qjt.forEach(t),$Rr=r(mOe," \u2014 "),pZ=n(mOe,"A",{href:!0});var jjt=s(pZ);kRr=r(jjt,"TFMobileBertForMultipleChoice"),jjt.forEach(t),SRr=r(mOe," (MobileBERT model)"),mOe.forEach(t),RRr=i(Te),KE=n(Te,"LI",{});var gOe=s(KE);iEe=n(gOe,"STRONG",{});var Djt=s(iEe);PRr=r(Djt,"mpnet"),Djt.forEach(t),BRr=r(gOe," \u2014 "),_Z=n(gOe,"A",{href:!0});var Gjt=s(_Z);IRr=r(Gjt,"TFMPNetForMultipleChoice"),Gjt.forEach(t),NRr=r(gOe," (MPNet model)"),gOe.forEach(t),qRr=i(Te),ZE=n(Te,"LI",{});var hOe=s(ZE);dEe=n(hOe,"STRONG",{});var Ojt=s(dEe);jRr=r(Ojt,"rembert"),Ojt.forEach(t),DRr=r(hOe," \u2014 "),uZ=n(hOe,"A",{href:!0});var Vjt=s(uZ);GRr=r(Vjt,"TFRemBertForMultipleChoice"),Vjt.forEach(t),ORr=r(hOe," (RemBERT model)"),hOe.forEach(t),VRr=i(Te),eC=n(Te,"LI",{});var pOe=s(eC);cEe=n(pOe,"STRONG",{});var Xjt=s(cEe);XRr=r(Xjt,"roberta"),Xjt.forEach(t),zRr=r(pOe," \u2014 "),bZ=n(pOe,"A",{href:!0});var zjt=s(bZ);WRr=r(zjt,"TFRobertaForMultipleChoice"),zjt.forEach(t),QRr=r(pOe," (RoBERTa model)"),pOe.forEach(t),HRr=i(Te),oC=n(Te,"LI",{});var _Oe=s(oC);fEe=n(_Oe,"STRONG",{});var Wjt=s(fEe);URr=r(Wjt,"roformer"),Wjt.forEach(t),JRr=r(_Oe," \u2014 "),vZ=n(_Oe,"A",{href:!0});var Qjt=s(vZ);YRr=r(Qjt,"TFRoFormerForMultipleChoice"),Qjt.forEach(t),KRr=r(_Oe," (RoFormer model)"),_Oe.forEach(t),ZRr=i(Te),rC=n(Te,"LI",{});var uOe=s(rC);mEe=n(uOe,"STRONG",{});var Hjt=s(mEe);ePr=r(Hjt,"xlm"),Hjt.forEach(t),oPr=r(uOe," \u2014 "),FZ=n(uOe,"A",{href:!0});var Ujt=s(FZ);rPr=r(Ujt,"TFXLMForMultipleChoice"),Ujt.forEach(t),tPr=r(uOe," (XLM model)"),uOe.forEach(t),aPr=i(Te),tC=n(Te,"LI",{});var bOe=s(tC);gEe=n(bOe,"STRONG",{});var Jjt=s(gEe);nPr=r(Jjt,"xlm-roberta"),Jjt.forEach(t),sPr=r(bOe," \u2014 "),TZ=n(bOe,"A",{href:!0});var Yjt=s(TZ);lPr=r(Yjt,"TFXLMRobertaForMultipleChoice"),Yjt.forEach(t),iPr=r(bOe," (XLM-RoBERTa model)"),bOe.forEach(t),dPr=i(Te),aC=n(Te,"LI",{});var vOe=s(aC);hEe=n(vOe,"STRONG",{});var Kjt=s(hEe);cPr=r(Kjt,"xlnet"),Kjt.forEach(t),fPr=r(vOe," \u2014 "),MZ=n(vOe,"A",{href:!0});var Zjt=s(MZ);mPr=r(Zjt,"TFXLNetForMultipleChoice"),Zjt.forEach(t),gPr=r(vOe," (XLNet model)"),vOe.forEach(t),Te.forEach(t),hPr=i(Ql),T(nC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),IWe=i(f),Sc=n(f,"H2",{class:!0});var XHe=s(Sc);sC=n(XHe,"A",{id:!0,class:!0,href:!0});var eDt=s(sC);pEe=n(eDt,"SPAN",{});var oDt=s(pEe);T(Hx.$$.fragment,oDt),oDt.forEach(t),eDt.forEach(t),pPr=i(XHe),_Ee=n(XHe,"SPAN",{});var rDt=s(_Ee);_Pr=r(rDt,"TFAutoModelForNextSentencePrediction"),rDt.forEach(t),XHe.forEach(t),NWe=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(Ux.$$.fragment,Hl),uPr=i(Hl),Rc=n(Hl,"P",{});var Lae=s(Rc);bPr=r(Lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EZ=n(Lae,"A",{href:!0});var tDt=s(EZ);vPr=r(tDt,"from_pretrained()"),tDt.forEach(t),FPr=r(Lae," class method or the "),CZ=n(Lae,"A",{href:!0});var aDt=s(CZ);TPr=r(aDt,"from_config()"),aDt.forEach(t),MPr=r(Lae,` class
method.`),Lae.forEach(t),EPr=i(Hl),Jx=n(Hl,"P",{});var zHe=s(Jx);CPr=r(zHe,"This class cannot be instantiated directly using "),uEe=n(zHe,"CODE",{});var nDt=s(uEe);wPr=r(nDt,"__init__()"),nDt.forEach(t),APr=r(zHe," (throws an error)."),zHe.forEach(t),LPr=i(Hl),Gt=n(Hl,"DIV",{class:!0});var I7=s(Gt);T(Yx.$$.fragment,I7),yPr=i(I7),bEe=n(I7,"P",{});var sDt=s(bEe);xPr=r(sDt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sDt.forEach(t),$Pr=i(I7),Pc=n(I7,"P",{});var yae=s(Pc);kPr=r(yae,`Note:
Loading a model from its configuration file does `),vEe=n(yae,"STRONG",{});var lDt=s(vEe);SPr=r(lDt,"not"),lDt.forEach(t),RPr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(yae,"A",{href:!0});var iDt=s(wZ);PPr=r(iDt,"from_pretrained()"),iDt.forEach(t),BPr=r(yae," to load the model weights."),yae.forEach(t),IPr=i(I7),T(lC.$$.fragment,I7),I7.forEach(t),NPr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(Kx.$$.fragment,Ul),qPr=i(Ul),FEe=n(Ul,"P",{});var dDt=s(FEe);jPr=r(dDt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dDt.forEach(t),DPr=i(Ul),_n=n(Ul,"P",{});var N7=s(_n);GPr=r(N7,"The model class to instantiate is selected based on the "),TEe=n(N7,"CODE",{});var cDt=s(TEe);OPr=r(cDt,"model_type"),cDt.forEach(t),VPr=r(N7,` property of the config object (either
passed as an argument or loaded from `),MEe=n(N7,"CODE",{});var fDt=s(MEe);XPr=r(fDt,"pretrained_model_name_or_path"),fDt.forEach(t),zPr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=n(N7,"CODE",{});var mDt=s(EEe);WPr=r(mDt,"pretrained_model_name_or_path"),mDt.forEach(t),QPr=r(N7,":"),N7.forEach(t),HPr=i(Ul),Zx=n(Ul,"UL",{});var WHe=s(Zx);iC=n(WHe,"LI",{});var FOe=s(iC);CEe=n(FOe,"STRONG",{});var gDt=s(CEe);UPr=r(gDt,"bert"),gDt.forEach(t),JPr=r(FOe," \u2014 "),AZ=n(FOe,"A",{href:!0});var hDt=s(AZ);YPr=r(hDt,"TFBertForNextSentencePrediction"),hDt.forEach(t),KPr=r(FOe," (BERT model)"),FOe.forEach(t),ZPr=i(WHe),dC=n(WHe,"LI",{});var TOe=s(dC);wEe=n(TOe,"STRONG",{});var pDt=s(wEe);eBr=r(pDt,"mobilebert"),pDt.forEach(t),oBr=r(TOe," \u2014 "),LZ=n(TOe,"A",{href:!0});var _Dt=s(LZ);rBr=r(_Dt,"TFMobileBertForNextSentencePrediction"),_Dt.forEach(t),tBr=r(TOe," (MobileBERT model)"),TOe.forEach(t),WHe.forEach(t),aBr=i(Ul),T(cC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),qWe=i(f),Bc=n(f,"H2",{class:!0});var QHe=s(Bc);fC=n(QHe,"A",{id:!0,class:!0,href:!0});var uDt=s(fC);AEe=n(uDt,"SPAN",{});var bDt=s(AEe);T(e$.$$.fragment,bDt),bDt.forEach(t),uDt.forEach(t),nBr=i(QHe),LEe=n(QHe,"SPAN",{});var vDt=s(LEe);sBr=r(vDt,"TFAutoModelForTableQuestionAnswering"),vDt.forEach(t),QHe.forEach(t),jWe=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(o$.$$.fragment,Jl),lBr=i(Jl),Ic=n(Jl,"P",{});var xae=s(Ic);iBr=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yZ=n(xae,"A",{href:!0});var FDt=s(yZ);dBr=r(FDt,"from_pretrained()"),FDt.forEach(t),cBr=r(xae," class method or the "),xZ=n(xae,"A",{href:!0});var TDt=s(xZ);fBr=r(TDt,"from_config()"),TDt.forEach(t),mBr=r(xae,` class
method.`),xae.forEach(t),gBr=i(Jl),r$=n(Jl,"P",{});var HHe=s(r$);hBr=r(HHe,"This class cannot be instantiated directly using "),yEe=n(HHe,"CODE",{});var MDt=s(yEe);pBr=r(MDt,"__init__()"),MDt.forEach(t),_Br=r(HHe," (throws an error)."),HHe.forEach(t),uBr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var q7=s(Ot);T(t$.$$.fragment,q7),bBr=i(q7),xEe=n(q7,"P",{});var EDt=s(xEe);vBr=r(EDt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),EDt.forEach(t),FBr=i(q7),Nc=n(q7,"P",{});var $ae=s(Nc);TBr=r($ae,`Note:
Loading a model from its configuration file does `),$Ee=n($ae,"STRONG",{});var CDt=s($Ee);MBr=r(CDt,"not"),CDt.forEach(t),EBr=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=n($ae,"A",{href:!0});var wDt=s($Z);CBr=r(wDt,"from_pretrained()"),wDt.forEach(t),wBr=r($ae," to load the model weights."),$ae.forEach(t),ABr=i(q7),T(mC.$$.fragment,q7),q7.forEach(t),LBr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(a$.$$.fragment,Yl),yBr=i(Yl),kEe=n(Yl,"P",{});var ADt=s(kEe);xBr=r(ADt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ADt.forEach(t),$Br=i(Yl),un=n(Yl,"P",{});var j7=s(un);kBr=r(j7,"The model class to instantiate is selected based on the "),SEe=n(j7,"CODE",{});var LDt=s(SEe);SBr=r(LDt,"model_type"),LDt.forEach(t),RBr=r(j7,` property of the config object (either
passed as an argument or loaded from `),REe=n(j7,"CODE",{});var yDt=s(REe);PBr=r(yDt,"pretrained_model_name_or_path"),yDt.forEach(t),BBr=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=n(j7,"CODE",{});var xDt=s(PEe);IBr=r(xDt,"pretrained_model_name_or_path"),xDt.forEach(t),NBr=r(j7,":"),j7.forEach(t),qBr=i(Yl),BEe=n(Yl,"UL",{});var $Dt=s(BEe);gC=n($Dt,"LI",{});var MOe=s(gC);IEe=n(MOe,"STRONG",{});var kDt=s(IEe);jBr=r(kDt,"tapas"),kDt.forEach(t),DBr=r(MOe," \u2014 "),kZ=n(MOe,"A",{href:!0});var SDt=s(kZ);GBr=r(SDt,"TFTapasForQuestionAnswering"),SDt.forEach(t),OBr=r(MOe," (TAPAS model)"),MOe.forEach(t),$Dt.forEach(t),VBr=i(Yl),T(hC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),DWe=i(f),qc=n(f,"H2",{class:!0});var UHe=s(qc);pC=n(UHe,"A",{id:!0,class:!0,href:!0});var RDt=s(pC);NEe=n(RDt,"SPAN",{});var PDt=s(NEe);T(n$.$$.fragment,PDt),PDt.forEach(t),RDt.forEach(t),XBr=i(UHe),qEe=n(UHe,"SPAN",{});var BDt=s(qEe);zBr=r(BDt,"TFAutoModelForTokenClassification"),BDt.forEach(t),UHe.forEach(t),GWe=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(s$.$$.fragment,Kl),WBr=i(Kl),jc=n(Kl,"P",{});var kae=s(jc);QBr=r(kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SZ=n(kae,"A",{href:!0});var IDt=s(SZ);HBr=r(IDt,"from_pretrained()"),IDt.forEach(t),UBr=r(kae," class method or the "),RZ=n(kae,"A",{href:!0});var NDt=s(RZ);JBr=r(NDt,"from_config()"),NDt.forEach(t),YBr=r(kae,` class
method.`),kae.forEach(t),KBr=i(Kl),l$=n(Kl,"P",{});var JHe=s(l$);ZBr=r(JHe,"This class cannot be instantiated directly using "),jEe=n(JHe,"CODE",{});var qDt=s(jEe);eIr=r(qDt,"__init__()"),qDt.forEach(t),oIr=r(JHe," (throws an error)."),JHe.forEach(t),rIr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var D7=s(Vt);T(i$.$$.fragment,D7),tIr=i(D7),DEe=n(D7,"P",{});var jDt=s(DEe);aIr=r(jDt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jDt.forEach(t),nIr=i(D7),Dc=n(D7,"P",{});var Sae=s(Dc);sIr=r(Sae,`Note:
Loading a model from its configuration file does `),GEe=n(Sae,"STRONG",{});var DDt=s(GEe);lIr=r(DDt,"not"),DDt.forEach(t),iIr=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(Sae,"A",{href:!0});var GDt=s(PZ);dIr=r(GDt,"from_pretrained()"),GDt.forEach(t),cIr=r(Sae," to load the model weights."),Sae.forEach(t),fIr=i(D7),T(_C.$$.fragment,D7),D7.forEach(t),mIr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(d$.$$.fragment,Zl),gIr=i(Zl),OEe=n(Zl,"P",{});var ODt=s(OEe);hIr=r(ODt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ODt.forEach(t),pIr=i(Zl),bn=n(Zl,"P",{});var G7=s(bn);_Ir=r(G7,"The model class to instantiate is selected based on the "),VEe=n(G7,"CODE",{});var VDt=s(VEe);uIr=r(VDt,"model_type"),VDt.forEach(t),bIr=r(G7,` property of the config object (either
passed as an argument or loaded from `),XEe=n(G7,"CODE",{});var XDt=s(XEe);vIr=r(XDt,"pretrained_model_name_or_path"),XDt.forEach(t),FIr=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=n(G7,"CODE",{});var zDt=s(zEe);TIr=r(zDt,"pretrained_model_name_or_path"),zDt.forEach(t),MIr=r(G7,":"),G7.forEach(t),EIr=i(Zl),de=n(Zl,"UL",{});var he=s(de);uC=n(he,"LI",{});var EOe=s(uC);WEe=n(EOe,"STRONG",{});var WDt=s(WEe);CIr=r(WDt,"albert"),WDt.forEach(t),wIr=r(EOe," \u2014 "),BZ=n(EOe,"A",{href:!0});var QDt=s(BZ);AIr=r(QDt,"TFAlbertForTokenClassification"),QDt.forEach(t),LIr=r(EOe," (ALBERT model)"),EOe.forEach(t),yIr=i(he),bC=n(he,"LI",{});var COe=s(bC);QEe=n(COe,"STRONG",{});var HDt=s(QEe);xIr=r(HDt,"bert"),HDt.forEach(t),$Ir=r(COe," \u2014 "),IZ=n(COe,"A",{href:!0});var UDt=s(IZ);kIr=r(UDt,"TFBertForTokenClassification"),UDt.forEach(t),SIr=r(COe," (BERT model)"),COe.forEach(t),RIr=i(he),vC=n(he,"LI",{});var wOe=s(vC);HEe=n(wOe,"STRONG",{});var JDt=s(HEe);PIr=r(JDt,"camembert"),JDt.forEach(t),BIr=r(wOe," \u2014 "),NZ=n(wOe,"A",{href:!0});var YDt=s(NZ);IIr=r(YDt,"TFCamembertForTokenClassification"),YDt.forEach(t),NIr=r(wOe," (CamemBERT model)"),wOe.forEach(t),qIr=i(he),FC=n(he,"LI",{});var AOe=s(FC);UEe=n(AOe,"STRONG",{});var KDt=s(UEe);jIr=r(KDt,"convbert"),KDt.forEach(t),DIr=r(AOe," \u2014 "),qZ=n(AOe,"A",{href:!0});var ZDt=s(qZ);GIr=r(ZDt,"TFConvBertForTokenClassification"),ZDt.forEach(t),OIr=r(AOe," (ConvBERT model)"),AOe.forEach(t),VIr=i(he),TC=n(he,"LI",{});var LOe=s(TC);JEe=n(LOe,"STRONG",{});var eGt=s(JEe);XIr=r(eGt,"deberta"),eGt.forEach(t),zIr=r(LOe," \u2014 "),jZ=n(LOe,"A",{href:!0});var oGt=s(jZ);WIr=r(oGt,"TFDebertaForTokenClassification"),oGt.forEach(t),QIr=r(LOe," (DeBERTa model)"),LOe.forEach(t),HIr=i(he),MC=n(he,"LI",{});var yOe=s(MC);YEe=n(yOe,"STRONG",{});var rGt=s(YEe);UIr=r(rGt,"deberta-v2"),rGt.forEach(t),JIr=r(yOe," \u2014 "),DZ=n(yOe,"A",{href:!0});var tGt=s(DZ);YIr=r(tGt,"TFDebertaV2ForTokenClassification"),tGt.forEach(t),KIr=r(yOe," (DeBERTa-v2 model)"),yOe.forEach(t),ZIr=i(he),EC=n(he,"LI",{});var xOe=s(EC);KEe=n(xOe,"STRONG",{});var aGt=s(KEe);eNr=r(aGt,"distilbert"),aGt.forEach(t),oNr=r(xOe," \u2014 "),GZ=n(xOe,"A",{href:!0});var nGt=s(GZ);rNr=r(nGt,"TFDistilBertForTokenClassification"),nGt.forEach(t),tNr=r(xOe," (DistilBERT model)"),xOe.forEach(t),aNr=i(he),CC=n(he,"LI",{});var $Oe=s(CC);ZEe=n($Oe,"STRONG",{});var sGt=s(ZEe);nNr=r(sGt,"electra"),sGt.forEach(t),sNr=r($Oe," \u2014 "),OZ=n($Oe,"A",{href:!0});var lGt=s(OZ);lNr=r(lGt,"TFElectraForTokenClassification"),lGt.forEach(t),iNr=r($Oe," (ELECTRA model)"),$Oe.forEach(t),dNr=i(he),wC=n(he,"LI",{});var kOe=s(wC);eCe=n(kOe,"STRONG",{});var iGt=s(eCe);cNr=r(iGt,"flaubert"),iGt.forEach(t),fNr=r(kOe," \u2014 "),VZ=n(kOe,"A",{href:!0});var dGt=s(VZ);mNr=r(dGt,"TFFlaubertForTokenClassification"),dGt.forEach(t),gNr=r(kOe," (FlauBERT model)"),kOe.forEach(t),hNr=i(he),AC=n(he,"LI",{});var SOe=s(AC);oCe=n(SOe,"STRONG",{});var cGt=s(oCe);pNr=r(cGt,"funnel"),cGt.forEach(t),_Nr=r(SOe," \u2014 "),XZ=n(SOe,"A",{href:!0});var fGt=s(XZ);uNr=r(fGt,"TFFunnelForTokenClassification"),fGt.forEach(t),bNr=r(SOe," (Funnel Transformer model)"),SOe.forEach(t),vNr=i(he),LC=n(he,"LI",{});var ROe=s(LC);rCe=n(ROe,"STRONG",{});var mGt=s(rCe);FNr=r(mGt,"layoutlm"),mGt.forEach(t),TNr=r(ROe," \u2014 "),zZ=n(ROe,"A",{href:!0});var gGt=s(zZ);MNr=r(gGt,"TFLayoutLMForTokenClassification"),gGt.forEach(t),ENr=r(ROe," (LayoutLM model)"),ROe.forEach(t),CNr=i(he),yC=n(he,"LI",{});var POe=s(yC);tCe=n(POe,"STRONG",{});var hGt=s(tCe);wNr=r(hGt,"longformer"),hGt.forEach(t),ANr=r(POe," \u2014 "),WZ=n(POe,"A",{href:!0});var pGt=s(WZ);LNr=r(pGt,"TFLongformerForTokenClassification"),pGt.forEach(t),yNr=r(POe," (Longformer model)"),POe.forEach(t),xNr=i(he),xC=n(he,"LI",{});var BOe=s(xC);aCe=n(BOe,"STRONG",{});var _Gt=s(aCe);$Nr=r(_Gt,"mobilebert"),_Gt.forEach(t),kNr=r(BOe," \u2014 "),QZ=n(BOe,"A",{href:!0});var uGt=s(QZ);SNr=r(uGt,"TFMobileBertForTokenClassification"),uGt.forEach(t),RNr=r(BOe," (MobileBERT model)"),BOe.forEach(t),PNr=i(he),$C=n(he,"LI",{});var IOe=s($C);nCe=n(IOe,"STRONG",{});var bGt=s(nCe);BNr=r(bGt,"mpnet"),bGt.forEach(t),INr=r(IOe," \u2014 "),HZ=n(IOe,"A",{href:!0});var vGt=s(HZ);NNr=r(vGt,"TFMPNetForTokenClassification"),vGt.forEach(t),qNr=r(IOe," (MPNet model)"),IOe.forEach(t),jNr=i(he),kC=n(he,"LI",{});var NOe=s(kC);sCe=n(NOe,"STRONG",{});var FGt=s(sCe);DNr=r(FGt,"rembert"),FGt.forEach(t),GNr=r(NOe," \u2014 "),UZ=n(NOe,"A",{href:!0});var TGt=s(UZ);ONr=r(TGt,"TFRemBertForTokenClassification"),TGt.forEach(t),VNr=r(NOe," (RemBERT model)"),NOe.forEach(t),XNr=i(he),SC=n(he,"LI",{});var qOe=s(SC);lCe=n(qOe,"STRONG",{});var MGt=s(lCe);zNr=r(MGt,"roberta"),MGt.forEach(t),WNr=r(qOe," \u2014 "),JZ=n(qOe,"A",{href:!0});var EGt=s(JZ);QNr=r(EGt,"TFRobertaForTokenClassification"),EGt.forEach(t),HNr=r(qOe," (RoBERTa model)"),qOe.forEach(t),UNr=i(he),RC=n(he,"LI",{});var jOe=s(RC);iCe=n(jOe,"STRONG",{});var CGt=s(iCe);JNr=r(CGt,"roformer"),CGt.forEach(t),YNr=r(jOe," \u2014 "),YZ=n(jOe,"A",{href:!0});var wGt=s(YZ);KNr=r(wGt,"TFRoFormerForTokenClassification"),wGt.forEach(t),ZNr=r(jOe," (RoFormer model)"),jOe.forEach(t),eqr=i(he),PC=n(he,"LI",{});var DOe=s(PC);dCe=n(DOe,"STRONG",{});var AGt=s(dCe);oqr=r(AGt,"xlm"),AGt.forEach(t),rqr=r(DOe," \u2014 "),KZ=n(DOe,"A",{href:!0});var LGt=s(KZ);tqr=r(LGt,"TFXLMForTokenClassification"),LGt.forEach(t),aqr=r(DOe," (XLM model)"),DOe.forEach(t),nqr=i(he),BC=n(he,"LI",{});var GOe=s(BC);cCe=n(GOe,"STRONG",{});var yGt=s(cCe);sqr=r(yGt,"xlm-roberta"),yGt.forEach(t),lqr=r(GOe," \u2014 "),ZZ=n(GOe,"A",{href:!0});var xGt=s(ZZ);iqr=r(xGt,"TFXLMRobertaForTokenClassification"),xGt.forEach(t),dqr=r(GOe," (XLM-RoBERTa model)"),GOe.forEach(t),cqr=i(he),IC=n(he,"LI",{});var OOe=s(IC);fCe=n(OOe,"STRONG",{});var $Gt=s(fCe);fqr=r($Gt,"xlnet"),$Gt.forEach(t),mqr=r(OOe," \u2014 "),eee=n(OOe,"A",{href:!0});var kGt=s(eee);gqr=r(kGt,"TFXLNetForTokenClassification"),kGt.forEach(t),hqr=r(OOe," (XLNet model)"),OOe.forEach(t),he.forEach(t),pqr=i(Zl),T(NC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),OWe=i(f),Gc=n(f,"H2",{class:!0});var YHe=s(Gc);qC=n(YHe,"A",{id:!0,class:!0,href:!0});var SGt=s(qC);mCe=n(SGt,"SPAN",{});var RGt=s(mCe);T(c$.$$.fragment,RGt),RGt.forEach(t),SGt.forEach(t),_qr=i(YHe),gCe=n(YHe,"SPAN",{});var PGt=s(gCe);uqr=r(PGt,"TFAutoModelForQuestionAnswering"),PGt.forEach(t),YHe.forEach(t),VWe=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(f$.$$.fragment,ei),bqr=i(ei),Oc=n(ei,"P",{});var Rae=s(Oc);vqr=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oee=n(Rae,"A",{href:!0});var BGt=s(oee);Fqr=r(BGt,"from_pretrained()"),BGt.forEach(t),Tqr=r(Rae," class method or the "),ree=n(Rae,"A",{href:!0});var IGt=s(ree);Mqr=r(IGt,"from_config()"),IGt.forEach(t),Eqr=r(Rae,` class
method.`),Rae.forEach(t),Cqr=i(ei),m$=n(ei,"P",{});var KHe=s(m$);wqr=r(KHe,"This class cannot be instantiated directly using "),hCe=n(KHe,"CODE",{});var NGt=s(hCe);Aqr=r(NGt,"__init__()"),NGt.forEach(t),Lqr=r(KHe," (throws an error)."),KHe.forEach(t),yqr=i(ei),Xt=n(ei,"DIV",{class:!0});var O7=s(Xt);T(g$.$$.fragment,O7),xqr=i(O7),pCe=n(O7,"P",{});var qGt=s(pCe);$qr=r(qGt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qGt.forEach(t),kqr=i(O7),Vc=n(O7,"P",{});var Pae=s(Vc);Sqr=r(Pae,`Note:
Loading a model from its configuration file does `),_Ce=n(Pae,"STRONG",{});var jGt=s(_Ce);Rqr=r(jGt,"not"),jGt.forEach(t),Pqr=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),tee=n(Pae,"A",{href:!0});var DGt=s(tee);Bqr=r(DGt,"from_pretrained()"),DGt.forEach(t),Iqr=r(Pae," to load the model weights."),Pae.forEach(t),Nqr=i(O7),T(jC.$$.fragment,O7),O7.forEach(t),qqr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(h$.$$.fragment,oi),jqr=i(oi),uCe=n(oi,"P",{});var GGt=s(uCe);Dqr=r(GGt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GGt.forEach(t),Gqr=i(oi),vn=n(oi,"P",{});var V7=s(vn);Oqr=r(V7,"The model class to instantiate is selected based on the "),bCe=n(V7,"CODE",{});var OGt=s(bCe);Vqr=r(OGt,"model_type"),OGt.forEach(t),Xqr=r(V7,` property of the config object (either
passed as an argument or loaded from `),vCe=n(V7,"CODE",{});var VGt=s(vCe);zqr=r(VGt,"pretrained_model_name_or_path"),VGt.forEach(t),Wqr=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=n(V7,"CODE",{});var XGt=s(FCe);Qqr=r(XGt,"pretrained_model_name_or_path"),XGt.forEach(t),Hqr=r(V7,":"),V7.forEach(t),Uqr=i(oi),ce=n(oi,"UL",{});var pe=s(ce);DC=n(pe,"LI",{});var VOe=s(DC);TCe=n(VOe,"STRONG",{});var zGt=s(TCe);Jqr=r(zGt,"albert"),zGt.forEach(t),Yqr=r(VOe," \u2014 "),aee=n(VOe,"A",{href:!0});var WGt=s(aee);Kqr=r(WGt,"TFAlbertForQuestionAnswering"),WGt.forEach(t),Zqr=r(VOe," (ALBERT model)"),VOe.forEach(t),ejr=i(pe),GC=n(pe,"LI",{});var XOe=s(GC);MCe=n(XOe,"STRONG",{});var QGt=s(MCe);ojr=r(QGt,"bert"),QGt.forEach(t),rjr=r(XOe," \u2014 "),nee=n(XOe,"A",{href:!0});var HGt=s(nee);tjr=r(HGt,"TFBertForQuestionAnswering"),HGt.forEach(t),ajr=r(XOe," (BERT model)"),XOe.forEach(t),njr=i(pe),OC=n(pe,"LI",{});var zOe=s(OC);ECe=n(zOe,"STRONG",{});var UGt=s(ECe);sjr=r(UGt,"camembert"),UGt.forEach(t),ljr=r(zOe," \u2014 "),see=n(zOe,"A",{href:!0});var JGt=s(see);ijr=r(JGt,"TFCamembertForQuestionAnswering"),JGt.forEach(t),djr=r(zOe," (CamemBERT model)"),zOe.forEach(t),cjr=i(pe),VC=n(pe,"LI",{});var WOe=s(VC);CCe=n(WOe,"STRONG",{});var YGt=s(CCe);fjr=r(YGt,"convbert"),YGt.forEach(t),mjr=r(WOe," \u2014 "),lee=n(WOe,"A",{href:!0});var KGt=s(lee);gjr=r(KGt,"TFConvBertForQuestionAnswering"),KGt.forEach(t),hjr=r(WOe," (ConvBERT model)"),WOe.forEach(t),pjr=i(pe),XC=n(pe,"LI",{});var QOe=s(XC);wCe=n(QOe,"STRONG",{});var ZGt=s(wCe);_jr=r(ZGt,"deberta"),ZGt.forEach(t),ujr=r(QOe," \u2014 "),iee=n(QOe,"A",{href:!0});var eOt=s(iee);bjr=r(eOt,"TFDebertaForQuestionAnswering"),eOt.forEach(t),vjr=r(QOe," (DeBERTa model)"),QOe.forEach(t),Fjr=i(pe),zC=n(pe,"LI",{});var HOe=s(zC);ACe=n(HOe,"STRONG",{});var oOt=s(ACe);Tjr=r(oOt,"deberta-v2"),oOt.forEach(t),Mjr=r(HOe," \u2014 "),dee=n(HOe,"A",{href:!0});var rOt=s(dee);Ejr=r(rOt,"TFDebertaV2ForQuestionAnswering"),rOt.forEach(t),Cjr=r(HOe," (DeBERTa-v2 model)"),HOe.forEach(t),wjr=i(pe),WC=n(pe,"LI",{});var UOe=s(WC);LCe=n(UOe,"STRONG",{});var tOt=s(LCe);Ajr=r(tOt,"distilbert"),tOt.forEach(t),Ljr=r(UOe," \u2014 "),cee=n(UOe,"A",{href:!0});var aOt=s(cee);yjr=r(aOt,"TFDistilBertForQuestionAnswering"),aOt.forEach(t),xjr=r(UOe," (DistilBERT model)"),UOe.forEach(t),$jr=i(pe),QC=n(pe,"LI",{});var JOe=s(QC);yCe=n(JOe,"STRONG",{});var nOt=s(yCe);kjr=r(nOt,"electra"),nOt.forEach(t),Sjr=r(JOe," \u2014 "),fee=n(JOe,"A",{href:!0});var sOt=s(fee);Rjr=r(sOt,"TFElectraForQuestionAnswering"),sOt.forEach(t),Pjr=r(JOe," (ELECTRA model)"),JOe.forEach(t),Bjr=i(pe),HC=n(pe,"LI",{});var YOe=s(HC);xCe=n(YOe,"STRONG",{});var lOt=s(xCe);Ijr=r(lOt,"flaubert"),lOt.forEach(t),Njr=r(YOe," \u2014 "),mee=n(YOe,"A",{href:!0});var iOt=s(mee);qjr=r(iOt,"TFFlaubertForQuestionAnsweringSimple"),iOt.forEach(t),jjr=r(YOe," (FlauBERT model)"),YOe.forEach(t),Djr=i(pe),UC=n(pe,"LI",{});var KOe=s(UC);$Ce=n(KOe,"STRONG",{});var dOt=s($Ce);Gjr=r(dOt,"funnel"),dOt.forEach(t),Ojr=r(KOe," \u2014 "),gee=n(KOe,"A",{href:!0});var cOt=s(gee);Vjr=r(cOt,"TFFunnelForQuestionAnswering"),cOt.forEach(t),Xjr=r(KOe," (Funnel Transformer model)"),KOe.forEach(t),zjr=i(pe),JC=n(pe,"LI",{});var ZOe=s(JC);kCe=n(ZOe,"STRONG",{});var fOt=s(kCe);Wjr=r(fOt,"gptj"),fOt.forEach(t),Qjr=r(ZOe," \u2014 "),hee=n(ZOe,"A",{href:!0});var mOt=s(hee);Hjr=r(mOt,"TFGPTJForQuestionAnswering"),mOt.forEach(t),Ujr=r(ZOe," (GPT-J model)"),ZOe.forEach(t),Jjr=i(pe),YC=n(pe,"LI",{});var eVe=s(YC);SCe=n(eVe,"STRONG",{});var gOt=s(SCe);Yjr=r(gOt,"longformer"),gOt.forEach(t),Kjr=r(eVe," \u2014 "),pee=n(eVe,"A",{href:!0});var hOt=s(pee);Zjr=r(hOt,"TFLongformerForQuestionAnswering"),hOt.forEach(t),eDr=r(eVe," (Longformer model)"),eVe.forEach(t),oDr=i(pe),KC=n(pe,"LI",{});var oVe=s(KC);RCe=n(oVe,"STRONG",{});var pOt=s(RCe);rDr=r(pOt,"mobilebert"),pOt.forEach(t),tDr=r(oVe," \u2014 "),_ee=n(oVe,"A",{href:!0});var _Ot=s(_ee);aDr=r(_Ot,"TFMobileBertForQuestionAnswering"),_Ot.forEach(t),nDr=r(oVe," (MobileBERT model)"),oVe.forEach(t),sDr=i(pe),ZC=n(pe,"LI",{});var rVe=s(ZC);PCe=n(rVe,"STRONG",{});var uOt=s(PCe);lDr=r(uOt,"mpnet"),uOt.forEach(t),iDr=r(rVe," \u2014 "),uee=n(rVe,"A",{href:!0});var bOt=s(uee);dDr=r(bOt,"TFMPNetForQuestionAnswering"),bOt.forEach(t),cDr=r(rVe," (MPNet model)"),rVe.forEach(t),fDr=i(pe),e5=n(pe,"LI",{});var tVe=s(e5);BCe=n(tVe,"STRONG",{});var vOt=s(BCe);mDr=r(vOt,"rembert"),vOt.forEach(t),gDr=r(tVe," \u2014 "),bee=n(tVe,"A",{href:!0});var FOt=s(bee);hDr=r(FOt,"TFRemBertForQuestionAnswering"),FOt.forEach(t),pDr=r(tVe," (RemBERT model)"),tVe.forEach(t),_Dr=i(pe),o5=n(pe,"LI",{});var aVe=s(o5);ICe=n(aVe,"STRONG",{});var TOt=s(ICe);uDr=r(TOt,"roberta"),TOt.forEach(t),bDr=r(aVe," \u2014 "),vee=n(aVe,"A",{href:!0});var MOt=s(vee);vDr=r(MOt,"TFRobertaForQuestionAnswering"),MOt.forEach(t),FDr=r(aVe," (RoBERTa model)"),aVe.forEach(t),TDr=i(pe),r5=n(pe,"LI",{});var nVe=s(r5);NCe=n(nVe,"STRONG",{});var EOt=s(NCe);MDr=r(EOt,"roformer"),EOt.forEach(t),EDr=r(nVe," \u2014 "),Fee=n(nVe,"A",{href:!0});var COt=s(Fee);CDr=r(COt,"TFRoFormerForQuestionAnswering"),COt.forEach(t),wDr=r(nVe," (RoFormer model)"),nVe.forEach(t),ADr=i(pe),t5=n(pe,"LI",{});var sVe=s(t5);qCe=n(sVe,"STRONG",{});var wOt=s(qCe);LDr=r(wOt,"xlm"),wOt.forEach(t),yDr=r(sVe," \u2014 "),Tee=n(sVe,"A",{href:!0});var AOt=s(Tee);xDr=r(AOt,"TFXLMForQuestionAnsweringSimple"),AOt.forEach(t),$Dr=r(sVe," (XLM model)"),sVe.forEach(t),kDr=i(pe),a5=n(pe,"LI",{});var lVe=s(a5);jCe=n(lVe,"STRONG",{});var LOt=s(jCe);SDr=r(LOt,"xlm-roberta"),LOt.forEach(t),RDr=r(lVe," \u2014 "),Mee=n(lVe,"A",{href:!0});var yOt=s(Mee);PDr=r(yOt,"TFXLMRobertaForQuestionAnswering"),yOt.forEach(t),BDr=r(lVe," (XLM-RoBERTa model)"),lVe.forEach(t),IDr=i(pe),n5=n(pe,"LI",{});var iVe=s(n5);DCe=n(iVe,"STRONG",{});var xOt=s(DCe);NDr=r(xOt,"xlnet"),xOt.forEach(t),qDr=r(iVe," \u2014 "),Eee=n(iVe,"A",{href:!0});var $Ot=s(Eee);jDr=r($Ot,"TFXLNetForQuestionAnsweringSimple"),$Ot.forEach(t),DDr=r(iVe," (XLNet model)"),iVe.forEach(t),pe.forEach(t),GDr=i(oi),T(s5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),XWe=i(f),Xc=n(f,"H2",{class:!0});var ZHe=s(Xc);l5=n(ZHe,"A",{id:!0,class:!0,href:!0});var kOt=s(l5);GCe=n(kOt,"SPAN",{});var SOt=s(GCe);T(p$.$$.fragment,SOt),SOt.forEach(t),kOt.forEach(t),ODr=i(ZHe),OCe=n(ZHe,"SPAN",{});var ROt=s(OCe);VDr=r(ROt,"TFAutoModelForVision2Seq"),ROt.forEach(t),ZHe.forEach(t),zWe=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(_$.$$.fragment,ri),XDr=i(ri),zc=n(ri,"P",{});var Bae=s(zc);zDr=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cee=n(Bae,"A",{href:!0});var POt=s(Cee);WDr=r(POt,"from_pretrained()"),POt.forEach(t),QDr=r(Bae," class method or the "),wee=n(Bae,"A",{href:!0});var BOt=s(wee);HDr=r(BOt,"from_config()"),BOt.forEach(t),UDr=r(Bae,` class
method.`),Bae.forEach(t),JDr=i(ri),u$=n(ri,"P",{});var eUe=s(u$);YDr=r(eUe,"This class cannot be instantiated directly using "),VCe=n(eUe,"CODE",{});var IOt=s(VCe);KDr=r(IOt,"__init__()"),IOt.forEach(t),ZDr=r(eUe," (throws an error)."),eUe.forEach(t),eGr=i(ri),zt=n(ri,"DIV",{class:!0});var X7=s(zt);T(b$.$$.fragment,X7),oGr=i(X7),XCe=n(X7,"P",{});var NOt=s(XCe);rGr=r(NOt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NOt.forEach(t),tGr=i(X7),Wc=n(X7,"P",{});var Iae=s(Wc);aGr=r(Iae,`Note:
Loading a model from its configuration file does `),zCe=n(Iae,"STRONG",{});var qOt=s(zCe);nGr=r(qOt,"not"),qOt.forEach(t),sGr=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=n(Iae,"A",{href:!0});var jOt=s(Aee);lGr=r(jOt,"from_pretrained()"),jOt.forEach(t),iGr=r(Iae," to load the model weights."),Iae.forEach(t),dGr=i(X7),T(i5.$$.fragment,X7),X7.forEach(t),cGr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(v$.$$.fragment,ti),fGr=i(ti),WCe=n(ti,"P",{});var DOt=s(WCe);mGr=r(DOt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DOt.forEach(t),gGr=i(ti),Fn=n(ti,"P",{});var z7=s(Fn);hGr=r(z7,"The model class to instantiate is selected based on the "),QCe=n(z7,"CODE",{});var GOt=s(QCe);pGr=r(GOt,"model_type"),GOt.forEach(t),_Gr=r(z7,` property of the config object (either
passed as an argument or loaded from `),HCe=n(z7,"CODE",{});var OOt=s(HCe);uGr=r(OOt,"pretrained_model_name_or_path"),OOt.forEach(t),bGr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UCe=n(z7,"CODE",{});var VOt=s(UCe);vGr=r(VOt,"pretrained_model_name_or_path"),VOt.forEach(t),FGr=r(z7,":"),z7.forEach(t),TGr=i(ti),JCe=n(ti,"UL",{});var XOt=s(JCe);d5=n(XOt,"LI",{});var dVe=s(d5);YCe=n(dVe,"STRONG",{});var zOt=s(YCe);MGr=r(zOt,"vision-encoder-decoder"),zOt.forEach(t),EGr=r(dVe," \u2014 "),Lee=n(dVe,"A",{href:!0});var WOt=s(Lee);CGr=r(WOt,"TFVisionEncoderDecoderModel"),WOt.forEach(t),wGr=r(dVe," (Vision Encoder decoder model)"),dVe.forEach(t),XOt.forEach(t),AGr=i(ti),T(c5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),WWe=i(f),Qc=n(f,"H2",{class:!0});var oUe=s(Qc);f5=n(oUe,"A",{id:!0,class:!0,href:!0});var QOt=s(f5);KCe=n(QOt,"SPAN",{});var HOt=s(KCe);T(F$.$$.fragment,HOt),HOt.forEach(t),QOt.forEach(t),LGr=i(oUe),ZCe=n(oUe,"SPAN",{});var UOt=s(ZCe);yGr=r(UOt,"TFAutoModelForSpeechSeq2Seq"),UOt.forEach(t),oUe.forEach(t),QWe=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(T$.$$.fragment,ai),xGr=i(ai),Hc=n(ai,"P",{});var Nae=s(Hc);$Gr=r(Nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yee=n(Nae,"A",{href:!0});var JOt=s(yee);kGr=r(JOt,"from_pretrained()"),JOt.forEach(t),SGr=r(Nae," class method or the "),xee=n(Nae,"A",{href:!0});var YOt=s(xee);RGr=r(YOt,"from_config()"),YOt.forEach(t),PGr=r(Nae,` class
method.`),Nae.forEach(t),BGr=i(ai),M$=n(ai,"P",{});var rUe=s(M$);IGr=r(rUe,"This class cannot be instantiated directly using "),e5e=n(rUe,"CODE",{});var KOt=s(e5e);NGr=r(KOt,"__init__()"),KOt.forEach(t),qGr=r(rUe," (throws an error)."),rUe.forEach(t),jGr=i(ai),Wt=n(ai,"DIV",{class:!0});var W7=s(Wt);T(E$.$$.fragment,W7),DGr=i(W7),o5e=n(W7,"P",{});var ZOt=s(o5e);GGr=r(ZOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ZOt.forEach(t),OGr=i(W7),Uc=n(W7,"P",{});var qae=s(Uc);VGr=r(qae,`Note:
Loading a model from its configuration file does `),r5e=n(qae,"STRONG",{});var eVt=s(r5e);XGr=r(eVt,"not"),eVt.forEach(t),zGr=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=n(qae,"A",{href:!0});var oVt=s($ee);WGr=r(oVt,"from_pretrained()"),oVt.forEach(t),QGr=r(qae," to load the model weights."),qae.forEach(t),HGr=i(W7),T(m5.$$.fragment,W7),W7.forEach(t),UGr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(C$.$$.fragment,ni),JGr=i(ni),t5e=n(ni,"P",{});var rVt=s(t5e);YGr=r(rVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rVt.forEach(t),KGr=i(ni),Tn=n(ni,"P",{});var Q7=s(Tn);ZGr=r(Q7,"The model class to instantiate is selected based on the "),a5e=n(Q7,"CODE",{});var tVt=s(a5e);eOr=r(tVt,"model_type"),tVt.forEach(t),oOr=r(Q7,` property of the config object (either
passed as an argument or loaded from `),n5e=n(Q7,"CODE",{});var aVt=s(n5e);rOr=r(aVt,"pretrained_model_name_or_path"),aVt.forEach(t),tOr=r(Q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(Q7,"CODE",{});var nVt=s(s5e);aOr=r(nVt,"pretrained_model_name_or_path"),nVt.forEach(t),nOr=r(Q7,":"),Q7.forEach(t),sOr=i(ni),l5e=n(ni,"UL",{});var sVt=s(l5e);g5=n(sVt,"LI",{});var cVe=s(g5);i5e=n(cVe,"STRONG",{});var lVt=s(i5e);lOr=r(lVt,"speech_to_text"),lVt.forEach(t),iOr=r(cVe," \u2014 "),kee=n(cVe,"A",{href:!0});var iVt=s(kee);dOr=r(iVt,"TFSpeech2TextForConditionalGeneration"),iVt.forEach(t),cOr=r(cVe," (Speech2Text model)"),cVe.forEach(t),sVt.forEach(t),fOr=i(ni),T(h5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),HWe=i(f),Jc=n(f,"H2",{class:!0});var tUe=s(Jc);p5=n(tUe,"A",{id:!0,class:!0,href:!0});var dVt=s(p5);d5e=n(dVt,"SPAN",{});var cVt=s(d5e);T(w$.$$.fragment,cVt),cVt.forEach(t),dVt.forEach(t),mOr=i(tUe),c5e=n(tUe,"SPAN",{});var fVt=s(c5e);gOr=r(fVt,"FlaxAutoModel"),fVt.forEach(t),tUe.forEach(t),UWe=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(A$.$$.fragment,si),hOr=i(si),Yc=n(si,"P",{});var jae=s(Yc);pOr=r(jae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),See=n(jae,"A",{href:!0});var mVt=s(See);_Or=r(mVt,"from_pretrained()"),mVt.forEach(t),uOr=r(jae," class method or the "),Ree=n(jae,"A",{href:!0});var gVt=s(Ree);bOr=r(gVt,"from_config()"),gVt.forEach(t),vOr=r(jae,` class
method.`),jae.forEach(t),FOr=i(si),L$=n(si,"P",{});var aUe=s(L$);TOr=r(aUe,"This class cannot be instantiated directly using "),f5e=n(aUe,"CODE",{});var hVt=s(f5e);MOr=r(hVt,"__init__()"),hVt.forEach(t),EOr=r(aUe," (throws an error)."),aUe.forEach(t),COr=i(si),Qt=n(si,"DIV",{class:!0});var H7=s(Qt);T(y$.$$.fragment,H7),wOr=i(H7),m5e=n(H7,"P",{});var pVt=s(m5e);AOr=r(pVt,"Instantiates one of the base model classes of the library from a configuration."),pVt.forEach(t),LOr=i(H7),Kc=n(H7,"P",{});var Dae=s(Kc);yOr=r(Dae,`Note:
Loading a model from its configuration file does `),g5e=n(Dae,"STRONG",{});var _Vt=s(g5e);xOr=r(_Vt,"not"),_Vt.forEach(t),$Or=r(Dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(Dae,"A",{href:!0});var uVt=s(Pee);kOr=r(uVt,"from_pretrained()"),uVt.forEach(t),SOr=r(Dae," to load the model weights."),Dae.forEach(t),ROr=i(H7),T(_5.$$.fragment,H7),H7.forEach(t),POr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(x$.$$.fragment,li),BOr=i(li),h5e=n(li,"P",{});var bVt=s(h5e);IOr=r(bVt,"Instantiate one of the base model classes of the library from a pretrained model."),bVt.forEach(t),NOr=i(li),Mn=n(li,"P",{});var U7=s(Mn);qOr=r(U7,"The model class to instantiate is selected based on the "),p5e=n(U7,"CODE",{});var vVt=s(p5e);jOr=r(vVt,"model_type"),vVt.forEach(t),DOr=r(U7,` property of the config object (either
passed as an argument or loaded from `),_5e=n(U7,"CODE",{});var FVt=s(_5e);GOr=r(FVt,"pretrained_model_name_or_path"),FVt.forEach(t),OOr=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n(U7,"CODE",{});var TVt=s(u5e);VOr=r(TVt,"pretrained_model_name_or_path"),TVt.forEach(t),XOr=r(U7,":"),U7.forEach(t),zOr=i(li),oe=n(li,"UL",{});var ae=s(oe);u5=n(ae,"LI",{});var fVe=s(u5);b5e=n(fVe,"STRONG",{});var MVt=s(b5e);WOr=r(MVt,"albert"),MVt.forEach(t),QOr=r(fVe," \u2014 "),Bee=n(fVe,"A",{href:!0});var EVt=s(Bee);HOr=r(EVt,"FlaxAlbertModel"),EVt.forEach(t),UOr=r(fVe," (ALBERT model)"),fVe.forEach(t),JOr=i(ae),b5=n(ae,"LI",{});var mVe=s(b5);v5e=n(mVe,"STRONG",{});var CVt=s(v5e);YOr=r(CVt,"bart"),CVt.forEach(t),KOr=r(mVe," \u2014 "),Iee=n(mVe,"A",{href:!0});var wVt=s(Iee);ZOr=r(wVt,"FlaxBartModel"),wVt.forEach(t),eVr=r(mVe," (BART model)"),mVe.forEach(t),oVr=i(ae),v5=n(ae,"LI",{});var gVe=s(v5);F5e=n(gVe,"STRONG",{});var AVt=s(F5e);rVr=r(AVt,"beit"),AVt.forEach(t),tVr=r(gVe," \u2014 "),Nee=n(gVe,"A",{href:!0});var LVt=s(Nee);aVr=r(LVt,"FlaxBeitModel"),LVt.forEach(t),nVr=r(gVe," (BEiT model)"),gVe.forEach(t),sVr=i(ae),F5=n(ae,"LI",{});var hVe=s(F5);T5e=n(hVe,"STRONG",{});var yVt=s(T5e);lVr=r(yVt,"bert"),yVt.forEach(t),iVr=r(hVe," \u2014 "),qee=n(hVe,"A",{href:!0});var xVt=s(qee);dVr=r(xVt,"FlaxBertModel"),xVt.forEach(t),cVr=r(hVe," (BERT model)"),hVe.forEach(t),fVr=i(ae),T5=n(ae,"LI",{});var pVe=s(T5);M5e=n(pVe,"STRONG",{});var $Vt=s(M5e);mVr=r($Vt,"big_bird"),$Vt.forEach(t),gVr=r(pVe," \u2014 "),jee=n(pVe,"A",{href:!0});var kVt=s(jee);hVr=r(kVt,"FlaxBigBirdModel"),kVt.forEach(t),pVr=r(pVe," (BigBird model)"),pVe.forEach(t),_Vr=i(ae),M5=n(ae,"LI",{});var _Ve=s(M5);E5e=n(_Ve,"STRONG",{});var SVt=s(E5e);uVr=r(SVt,"blenderbot"),SVt.forEach(t),bVr=r(_Ve," \u2014 "),Dee=n(_Ve,"A",{href:!0});var RVt=s(Dee);vVr=r(RVt,"FlaxBlenderbotModel"),RVt.forEach(t),FVr=r(_Ve," (Blenderbot model)"),_Ve.forEach(t),TVr=i(ae),E5=n(ae,"LI",{});var uVe=s(E5);C5e=n(uVe,"STRONG",{});var PVt=s(C5e);MVr=r(PVt,"blenderbot-small"),PVt.forEach(t),EVr=r(uVe," \u2014 "),Gee=n(uVe,"A",{href:!0});var BVt=s(Gee);CVr=r(BVt,"FlaxBlenderbotSmallModel"),BVt.forEach(t),wVr=r(uVe," (BlenderbotSmall model)"),uVe.forEach(t),AVr=i(ae),C5=n(ae,"LI",{});var bVe=s(C5);w5e=n(bVe,"STRONG",{});var IVt=s(w5e);LVr=r(IVt,"clip"),IVt.forEach(t),yVr=r(bVe," \u2014 "),Oee=n(bVe,"A",{href:!0});var NVt=s(Oee);xVr=r(NVt,"FlaxCLIPModel"),NVt.forEach(t),$Vr=r(bVe," (CLIP model)"),bVe.forEach(t),kVr=i(ae),w5=n(ae,"LI",{});var vVe=s(w5);A5e=n(vVe,"STRONG",{});var qVt=s(A5e);SVr=r(qVt,"distilbert"),qVt.forEach(t),RVr=r(vVe," \u2014 "),Vee=n(vVe,"A",{href:!0});var jVt=s(Vee);PVr=r(jVt,"FlaxDistilBertModel"),jVt.forEach(t),BVr=r(vVe," (DistilBERT model)"),vVe.forEach(t),IVr=i(ae),A5=n(ae,"LI",{});var FVe=s(A5);L5e=n(FVe,"STRONG",{});var DVt=s(L5e);NVr=r(DVt,"electra"),DVt.forEach(t),qVr=r(FVe," \u2014 "),Xee=n(FVe,"A",{href:!0});var GVt=s(Xee);jVr=r(GVt,"FlaxElectraModel"),GVt.forEach(t),DVr=r(FVe," (ELECTRA model)"),FVe.forEach(t),GVr=i(ae),L5=n(ae,"LI",{});var TVe=s(L5);y5e=n(TVe,"STRONG",{});var OVt=s(y5e);OVr=r(OVt,"gpt2"),OVt.forEach(t),VVr=r(TVe," \u2014 "),zee=n(TVe,"A",{href:!0});var VVt=s(zee);XVr=r(VVt,"FlaxGPT2Model"),VVt.forEach(t),zVr=r(TVe," (OpenAI GPT-2 model)"),TVe.forEach(t),WVr=i(ae),y5=n(ae,"LI",{});var MVe=s(y5);x5e=n(MVe,"STRONG",{});var XVt=s(x5e);QVr=r(XVt,"gpt_neo"),XVt.forEach(t),HVr=r(MVe," \u2014 "),Wee=n(MVe,"A",{href:!0});var zVt=s(Wee);UVr=r(zVt,"FlaxGPTNeoModel"),zVt.forEach(t),JVr=r(MVe," (GPT Neo model)"),MVe.forEach(t),YVr=i(ae),x5=n(ae,"LI",{});var EVe=s(x5);$5e=n(EVe,"STRONG",{});var WVt=s($5e);KVr=r(WVt,"gptj"),WVt.forEach(t),ZVr=r(EVe," \u2014 "),Qee=n(EVe,"A",{href:!0});var QVt=s(Qee);eXr=r(QVt,"FlaxGPTJModel"),QVt.forEach(t),oXr=r(EVe," (GPT-J model)"),EVe.forEach(t),rXr=i(ae),$5=n(ae,"LI",{});var CVe=s($5);k5e=n(CVe,"STRONG",{});var HVt=s(k5e);tXr=r(HVt,"longt5"),HVt.forEach(t),aXr=r(CVe," \u2014 "),Hee=n(CVe,"A",{href:!0});var UVt=s(Hee);nXr=r(UVt,"FlaxLongT5Model"),UVt.forEach(t),sXr=r(CVe," (LongT5 model)"),CVe.forEach(t),lXr=i(ae),k5=n(ae,"LI",{});var wVe=s(k5);S5e=n(wVe,"STRONG",{});var JVt=s(S5e);iXr=r(JVt,"marian"),JVt.forEach(t),dXr=r(wVe," \u2014 "),Uee=n(wVe,"A",{href:!0});var YVt=s(Uee);cXr=r(YVt,"FlaxMarianModel"),YVt.forEach(t),fXr=r(wVe," (Marian model)"),wVe.forEach(t),mXr=i(ae),S5=n(ae,"LI",{});var AVe=s(S5);R5e=n(AVe,"STRONG",{});var KVt=s(R5e);gXr=r(KVt,"mbart"),KVt.forEach(t),hXr=r(AVe," \u2014 "),Jee=n(AVe,"A",{href:!0});var ZVt=s(Jee);pXr=r(ZVt,"FlaxMBartModel"),ZVt.forEach(t),_Xr=r(AVe," (mBART model)"),AVe.forEach(t),uXr=i(ae),R5=n(ae,"LI",{});var LVe=s(R5);P5e=n(LVe,"STRONG",{});var eXt=s(P5e);bXr=r(eXt,"mt5"),eXt.forEach(t),vXr=r(LVe," \u2014 "),Yee=n(LVe,"A",{href:!0});var oXt=s(Yee);FXr=r(oXt,"FlaxMT5Model"),oXt.forEach(t),TXr=r(LVe," (MT5 model)"),LVe.forEach(t),MXr=i(ae),P5=n(ae,"LI",{});var yVe=s(P5);B5e=n(yVe,"STRONG",{});var rXt=s(B5e);EXr=r(rXt,"opt"),rXt.forEach(t),CXr=r(yVe," \u2014 "),Kee=n(yVe,"A",{href:!0});var tXt=s(Kee);wXr=r(tXt,"FlaxOPTModel"),tXt.forEach(t),AXr=r(yVe," (OPT model)"),yVe.forEach(t),LXr=i(ae),B5=n(ae,"LI",{});var xVe=s(B5);I5e=n(xVe,"STRONG",{});var aXt=s(I5e);yXr=r(aXt,"pegasus"),aXt.forEach(t),xXr=r(xVe," \u2014 "),Zee=n(xVe,"A",{href:!0});var nXt=s(Zee);$Xr=r(nXt,"FlaxPegasusModel"),nXt.forEach(t),kXr=r(xVe," (Pegasus model)"),xVe.forEach(t),SXr=i(ae),I5=n(ae,"LI",{});var $Ve=s(I5);N5e=n($Ve,"STRONG",{});var sXt=s(N5e);RXr=r(sXt,"roberta"),sXt.forEach(t),PXr=r($Ve," \u2014 "),eoe=n($Ve,"A",{href:!0});var lXt=s(eoe);BXr=r(lXt,"FlaxRobertaModel"),lXt.forEach(t),IXr=r($Ve," (RoBERTa model)"),$Ve.forEach(t),NXr=i(ae),N5=n(ae,"LI",{});var kVe=s(N5);q5e=n(kVe,"STRONG",{});var iXt=s(q5e);qXr=r(iXt,"roformer"),iXt.forEach(t),jXr=r(kVe," \u2014 "),ooe=n(kVe,"A",{href:!0});var dXt=s(ooe);DXr=r(dXt,"FlaxRoFormerModel"),dXt.forEach(t),GXr=r(kVe," (RoFormer model)"),kVe.forEach(t),OXr=i(ae),q5=n(ae,"LI",{});var SVe=s(q5);j5e=n(SVe,"STRONG",{});var cXt=s(j5e);VXr=r(cXt,"t5"),cXt.forEach(t),XXr=r(SVe," \u2014 "),roe=n(SVe,"A",{href:!0});var fXt=s(roe);zXr=r(fXt,"FlaxT5Model"),fXt.forEach(t),WXr=r(SVe," (T5 model)"),SVe.forEach(t),QXr=i(ae),j5=n(ae,"LI",{});var RVe=s(j5);D5e=n(RVe,"STRONG",{});var mXt=s(D5e);HXr=r(mXt,"vision-text-dual-encoder"),mXt.forEach(t),UXr=r(RVe," \u2014 "),toe=n(RVe,"A",{href:!0});var gXt=s(toe);JXr=r(gXt,"FlaxVisionTextDualEncoderModel"),gXt.forEach(t),YXr=r(RVe," (VisionTextDualEncoder model)"),RVe.forEach(t),KXr=i(ae),D5=n(ae,"LI",{});var PVe=s(D5);G5e=n(PVe,"STRONG",{});var hXt=s(G5e);ZXr=r(hXt,"vit"),hXt.forEach(t),ezr=r(PVe," \u2014 "),aoe=n(PVe,"A",{href:!0});var pXt=s(aoe);ozr=r(pXt,"FlaxViTModel"),pXt.forEach(t),rzr=r(PVe," (ViT model)"),PVe.forEach(t),tzr=i(ae),G5=n(ae,"LI",{});var BVe=s(G5);O5e=n(BVe,"STRONG",{});var _Xt=s(O5e);azr=r(_Xt,"wav2vec2"),_Xt.forEach(t),nzr=r(BVe," \u2014 "),noe=n(BVe,"A",{href:!0});var uXt=s(noe);szr=r(uXt,"FlaxWav2Vec2Model"),uXt.forEach(t),lzr=r(BVe," (Wav2Vec2 model)"),BVe.forEach(t),izr=i(ae),O5=n(ae,"LI",{});var IVe=s(O5);V5e=n(IVe,"STRONG",{});var bXt=s(V5e);dzr=r(bXt,"xglm"),bXt.forEach(t),czr=r(IVe," \u2014 "),soe=n(IVe,"A",{href:!0});var vXt=s(soe);fzr=r(vXt,"FlaxXGLMModel"),vXt.forEach(t),mzr=r(IVe," (XGLM model)"),IVe.forEach(t),gzr=i(ae),V5=n(ae,"LI",{});var NVe=s(V5);X5e=n(NVe,"STRONG",{});var FXt=s(X5e);hzr=r(FXt,"xlm-roberta"),FXt.forEach(t),pzr=r(NVe," \u2014 "),loe=n(NVe,"A",{href:!0});var TXt=s(loe);_zr=r(TXt,"FlaxXLMRobertaModel"),TXt.forEach(t),uzr=r(NVe," (XLM-RoBERTa model)"),NVe.forEach(t),ae.forEach(t),bzr=i(li),T(X5.$$.fragment,li),li.forEach(t),si.forEach(t),JWe=i(f),Zc=n(f,"H2",{class:!0});var nUe=s(Zc);z5=n(nUe,"A",{id:!0,class:!0,href:!0});var MXt=s(z5);z5e=n(MXt,"SPAN",{});var EXt=s(z5e);T($$.$$.fragment,EXt),EXt.forEach(t),MXt.forEach(t),vzr=i(nUe),W5e=n(nUe,"SPAN",{});var CXt=s(W5e);Fzr=r(CXt,"FlaxAutoModelForCausalLM"),CXt.forEach(t),nUe.forEach(t),YWe=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T(k$.$$.fragment,ii),Tzr=i(ii),ef=n(ii,"P",{});var Gae=s(ef);Mzr=r(Gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ioe=n(Gae,"A",{href:!0});var wXt=s(ioe);Ezr=r(wXt,"from_pretrained()"),wXt.forEach(t),Czr=r(Gae," class method or the "),doe=n(Gae,"A",{href:!0});var AXt=s(doe);wzr=r(AXt,"from_config()"),AXt.forEach(t),Azr=r(Gae,` class
method.`),Gae.forEach(t),Lzr=i(ii),S$=n(ii,"P",{});var sUe=s(S$);yzr=r(sUe,"This class cannot be instantiated directly using "),Q5e=n(sUe,"CODE",{});var LXt=s(Q5e);xzr=r(LXt,"__init__()"),LXt.forEach(t),$zr=r(sUe," (throws an error)."),sUe.forEach(t),kzr=i(ii),Ht=n(ii,"DIV",{class:!0});var J7=s(Ht);T(R$.$$.fragment,J7),Szr=i(J7),H5e=n(J7,"P",{});var yXt=s(H5e);Rzr=r(yXt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yXt.forEach(t),Pzr=i(J7),of=n(J7,"P",{});var Oae=s(of);Bzr=r(Oae,`Note:
Loading a model from its configuration file does `),U5e=n(Oae,"STRONG",{});var xXt=s(U5e);Izr=r(xXt,"not"),xXt.forEach(t),Nzr=r(Oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=n(Oae,"A",{href:!0});var $Xt=s(coe);qzr=r($Xt,"from_pretrained()"),$Xt.forEach(t),jzr=r(Oae," to load the model weights."),Oae.forEach(t),Dzr=i(J7),T(W5.$$.fragment,J7),J7.forEach(t),Gzr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(P$.$$.fragment,di),Ozr=i(di),J5e=n(di,"P",{});var kXt=s(J5e);Vzr=r(kXt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kXt.forEach(t),Xzr=i(di),En=n(di,"P",{});var Y7=s(En);zzr=r(Y7,"The model class to instantiate is selected based on the "),Y5e=n(Y7,"CODE",{});var SXt=s(Y5e);Wzr=r(SXt,"model_type"),SXt.forEach(t),Qzr=r(Y7,` property of the config object (either
passed as an argument or loaded from `),K5e=n(Y7,"CODE",{});var RXt=s(K5e);Hzr=r(RXt,"pretrained_model_name_or_path"),RXt.forEach(t),Uzr=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=n(Y7,"CODE",{});var PXt=s(Z5e);Jzr=r(PXt,"pretrained_model_name_or_path"),PXt.forEach(t),Yzr=r(Y7,":"),Y7.forEach(t),Kzr=i(di),xe=n(di,"UL",{});var Ne=s(xe);Q5=n(Ne,"LI",{});var qVe=s(Q5);e0e=n(qVe,"STRONG",{});var BXt=s(e0e);Zzr=r(BXt,"bart"),BXt.forEach(t),eWr=r(qVe," \u2014 "),foe=n(qVe,"A",{href:!0});var IXt=s(foe);oWr=r(IXt,"FlaxBartForCausalLM"),IXt.forEach(t),rWr=r(qVe," (BART model)"),qVe.forEach(t),tWr=i(Ne),H5=n(Ne,"LI",{});var jVe=s(H5);o0e=n(jVe,"STRONG",{});var NXt=s(o0e);aWr=r(NXt,"bert"),NXt.forEach(t),nWr=r(jVe," \u2014 "),moe=n(jVe,"A",{href:!0});var qXt=s(moe);sWr=r(qXt,"FlaxBertForCausalLM"),qXt.forEach(t),lWr=r(jVe," (BERT model)"),jVe.forEach(t),iWr=i(Ne),U5=n(Ne,"LI",{});var DVe=s(U5);r0e=n(DVe,"STRONG",{});var jXt=s(r0e);dWr=r(jXt,"big_bird"),jXt.forEach(t),cWr=r(DVe," \u2014 "),goe=n(DVe,"A",{href:!0});var DXt=s(goe);fWr=r(DXt,"FlaxBigBirdForCausalLM"),DXt.forEach(t),mWr=r(DVe," (BigBird model)"),DVe.forEach(t),gWr=i(Ne),J5=n(Ne,"LI",{});var GVe=s(J5);t0e=n(GVe,"STRONG",{});var GXt=s(t0e);hWr=r(GXt,"electra"),GXt.forEach(t),pWr=r(GVe," \u2014 "),hoe=n(GVe,"A",{href:!0});var OXt=s(hoe);_Wr=r(OXt,"FlaxElectraForCausalLM"),OXt.forEach(t),uWr=r(GVe," (ELECTRA model)"),GVe.forEach(t),bWr=i(Ne),Y5=n(Ne,"LI",{});var OVe=s(Y5);a0e=n(OVe,"STRONG",{});var VXt=s(a0e);vWr=r(VXt,"gpt2"),VXt.forEach(t),FWr=r(OVe," \u2014 "),poe=n(OVe,"A",{href:!0});var XXt=s(poe);TWr=r(XXt,"FlaxGPT2LMHeadModel"),XXt.forEach(t),MWr=r(OVe," (OpenAI GPT-2 model)"),OVe.forEach(t),EWr=i(Ne),K5=n(Ne,"LI",{});var VVe=s(K5);n0e=n(VVe,"STRONG",{});var zXt=s(n0e);CWr=r(zXt,"gpt_neo"),zXt.forEach(t),wWr=r(VVe," \u2014 "),_oe=n(VVe,"A",{href:!0});var WXt=s(_oe);AWr=r(WXt,"FlaxGPTNeoForCausalLM"),WXt.forEach(t),LWr=r(VVe," (GPT Neo model)"),VVe.forEach(t),yWr=i(Ne),Z5=n(Ne,"LI",{});var XVe=s(Z5);s0e=n(XVe,"STRONG",{});var QXt=s(s0e);xWr=r(QXt,"gptj"),QXt.forEach(t),$Wr=r(XVe," \u2014 "),uoe=n(XVe,"A",{href:!0});var HXt=s(uoe);kWr=r(HXt,"FlaxGPTJForCausalLM"),HXt.forEach(t),SWr=r(XVe," (GPT-J model)"),XVe.forEach(t),RWr=i(Ne),e0=n(Ne,"LI",{});var zVe=s(e0);l0e=n(zVe,"STRONG",{});var UXt=s(l0e);PWr=r(UXt,"opt"),UXt.forEach(t),BWr=r(zVe," \u2014 "),boe=n(zVe,"A",{href:!0});var JXt=s(boe);IWr=r(JXt,"FlaxOPTForCausalLM"),JXt.forEach(t),NWr=r(zVe," (OPT model)"),zVe.forEach(t),qWr=i(Ne),o0=n(Ne,"LI",{});var WVe=s(o0);i0e=n(WVe,"STRONG",{});var YXt=s(i0e);jWr=r(YXt,"roberta"),YXt.forEach(t),DWr=r(WVe," \u2014 "),voe=n(WVe,"A",{href:!0});var KXt=s(voe);GWr=r(KXt,"FlaxRobertaForCausalLM"),KXt.forEach(t),OWr=r(WVe," (RoBERTa model)"),WVe.forEach(t),VWr=i(Ne),r0=n(Ne,"LI",{});var QVe=s(r0);d0e=n(QVe,"STRONG",{});var ZXt=s(d0e);XWr=r(ZXt,"xglm"),ZXt.forEach(t),zWr=r(QVe," \u2014 "),Foe=n(QVe,"A",{href:!0});var ezt=s(Foe);WWr=r(ezt,"FlaxXGLMForCausalLM"),ezt.forEach(t),QWr=r(QVe," (XGLM model)"),QVe.forEach(t),Ne.forEach(t),HWr=i(di),T(t0.$$.fragment,di),di.forEach(t),ii.forEach(t),KWe=i(f),rf=n(f,"H2",{class:!0});var lUe=s(rf);a0=n(lUe,"A",{id:!0,class:!0,href:!0});var ozt=s(a0);c0e=n(ozt,"SPAN",{});var rzt=s(c0e);T(B$.$$.fragment,rzt),rzt.forEach(t),ozt.forEach(t),UWr=i(lUe),f0e=n(lUe,"SPAN",{});var tzt=s(f0e);JWr=r(tzt,"FlaxAutoModelForPreTraining"),tzt.forEach(t),lUe.forEach(t),ZWe=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T(I$.$$.fragment,ci),YWr=i(ci),tf=n(ci,"P",{});var Vae=s(tf);KWr=r(Vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Toe=n(Vae,"A",{href:!0});var azt=s(Toe);ZWr=r(azt,"from_pretrained()"),azt.forEach(t),eQr=r(Vae," class method or the "),Moe=n(Vae,"A",{href:!0});var nzt=s(Moe);oQr=r(nzt,"from_config()"),nzt.forEach(t),rQr=r(Vae,` class
method.`),Vae.forEach(t),tQr=i(ci),N$=n(ci,"P",{});var iUe=s(N$);aQr=r(iUe,"This class cannot be instantiated directly using "),m0e=n(iUe,"CODE",{});var szt=s(m0e);nQr=r(szt,"__init__()"),szt.forEach(t),sQr=r(iUe," (throws an error)."),iUe.forEach(t),lQr=i(ci),Ut=n(ci,"DIV",{class:!0});var K7=s(Ut);T(q$.$$.fragment,K7),iQr=i(K7),g0e=n(K7,"P",{});var lzt=s(g0e);dQr=r(lzt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lzt.forEach(t),cQr=i(K7),af=n(K7,"P",{});var Xae=s(af);fQr=r(Xae,`Note:
Loading a model from its configuration file does `),h0e=n(Xae,"STRONG",{});var izt=s(h0e);mQr=r(izt,"not"),izt.forEach(t),gQr=r(Xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=n(Xae,"A",{href:!0});var dzt=s(Eoe);hQr=r(dzt,"from_pretrained()"),dzt.forEach(t),pQr=r(Xae," to load the model weights."),Xae.forEach(t),_Qr=i(K7),T(n0.$$.fragment,K7),K7.forEach(t),uQr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T(j$.$$.fragment,fi),bQr=i(fi),p0e=n(fi,"P",{});var czt=s(p0e);vQr=r(czt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),czt.forEach(t),FQr=i(fi),Cn=n(fi,"P",{});var Z7=s(Cn);TQr=r(Z7,"The model class to instantiate is selected based on the "),_0e=n(Z7,"CODE",{});var fzt=s(_0e);MQr=r(fzt,"model_type"),fzt.forEach(t),EQr=r(Z7,` property of the config object (either
passed as an argument or loaded from `),u0e=n(Z7,"CODE",{});var mzt=s(u0e);CQr=r(mzt,"pretrained_model_name_or_path"),mzt.forEach(t),wQr=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b0e=n(Z7,"CODE",{});var gzt=s(b0e);AQr=r(gzt,"pretrained_model_name_or_path"),gzt.forEach(t),LQr=r(Z7,":"),Z7.forEach(t),yQr=i(fi),Ee=n(fi,"UL",{});var we=s(Ee);s0=n(we,"LI",{});var HVe=s(s0);v0e=n(HVe,"STRONG",{});var hzt=s(v0e);xQr=r(hzt,"albert"),hzt.forEach(t),$Qr=r(HVe," \u2014 "),Coe=n(HVe,"A",{href:!0});var pzt=s(Coe);kQr=r(pzt,"FlaxAlbertForPreTraining"),pzt.forEach(t),SQr=r(HVe," (ALBERT model)"),HVe.forEach(t),RQr=i(we),l0=n(we,"LI",{});var UVe=s(l0);F0e=n(UVe,"STRONG",{});var _zt=s(F0e);PQr=r(_zt,"bart"),_zt.forEach(t),BQr=r(UVe," \u2014 "),woe=n(UVe,"A",{href:!0});var uzt=s(woe);IQr=r(uzt,"FlaxBartForConditionalGeneration"),uzt.forEach(t),NQr=r(UVe," (BART model)"),UVe.forEach(t),qQr=i(we),i0=n(we,"LI",{});var JVe=s(i0);T0e=n(JVe,"STRONG",{});var bzt=s(T0e);jQr=r(bzt,"bert"),bzt.forEach(t),DQr=r(JVe," \u2014 "),Aoe=n(JVe,"A",{href:!0});var vzt=s(Aoe);GQr=r(vzt,"FlaxBertForPreTraining"),vzt.forEach(t),OQr=r(JVe," (BERT model)"),JVe.forEach(t),VQr=i(we),d0=n(we,"LI",{});var YVe=s(d0);M0e=n(YVe,"STRONG",{});var Fzt=s(M0e);XQr=r(Fzt,"big_bird"),Fzt.forEach(t),zQr=r(YVe," \u2014 "),Loe=n(YVe,"A",{href:!0});var Tzt=s(Loe);WQr=r(Tzt,"FlaxBigBirdForPreTraining"),Tzt.forEach(t),QQr=r(YVe," (BigBird model)"),YVe.forEach(t),HQr=i(we),c0=n(we,"LI",{});var KVe=s(c0);E0e=n(KVe,"STRONG",{});var Mzt=s(E0e);UQr=r(Mzt,"electra"),Mzt.forEach(t),JQr=r(KVe," \u2014 "),yoe=n(KVe,"A",{href:!0});var Ezt=s(yoe);YQr=r(Ezt,"FlaxElectraForPreTraining"),Ezt.forEach(t),KQr=r(KVe," (ELECTRA model)"),KVe.forEach(t),ZQr=i(we),f0=n(we,"LI",{});var ZVe=s(f0);C0e=n(ZVe,"STRONG",{});var Czt=s(C0e);eHr=r(Czt,"longt5"),Czt.forEach(t),oHr=r(ZVe," \u2014 "),xoe=n(ZVe,"A",{href:!0});var wzt=s(xoe);rHr=r(wzt,"FlaxLongT5ForConditionalGeneration"),wzt.forEach(t),tHr=r(ZVe," (LongT5 model)"),ZVe.forEach(t),aHr=i(we),m0=n(we,"LI",{});var eXe=s(m0);w0e=n(eXe,"STRONG",{});var Azt=s(w0e);nHr=r(Azt,"mbart"),Azt.forEach(t),sHr=r(eXe," \u2014 "),$oe=n(eXe,"A",{href:!0});var Lzt=s($oe);lHr=r(Lzt,"FlaxMBartForConditionalGeneration"),Lzt.forEach(t),iHr=r(eXe," (mBART model)"),eXe.forEach(t),dHr=i(we),g0=n(we,"LI",{});var oXe=s(g0);A0e=n(oXe,"STRONG",{});var yzt=s(A0e);cHr=r(yzt,"mt5"),yzt.forEach(t),fHr=r(oXe," \u2014 "),koe=n(oXe,"A",{href:!0});var xzt=s(koe);mHr=r(xzt,"FlaxMT5ForConditionalGeneration"),xzt.forEach(t),gHr=r(oXe," (MT5 model)"),oXe.forEach(t),hHr=i(we),h0=n(we,"LI",{});var rXe=s(h0);L0e=n(rXe,"STRONG",{});var $zt=s(L0e);pHr=r($zt,"roberta"),$zt.forEach(t),_Hr=r(rXe," \u2014 "),Soe=n(rXe,"A",{href:!0});var kzt=s(Soe);uHr=r(kzt,"FlaxRobertaForMaskedLM"),kzt.forEach(t),bHr=r(rXe," (RoBERTa model)"),rXe.forEach(t),vHr=i(we),p0=n(we,"LI",{});var tXe=s(p0);y0e=n(tXe,"STRONG",{});var Szt=s(y0e);FHr=r(Szt,"roformer"),Szt.forEach(t),THr=r(tXe," \u2014 "),Roe=n(tXe,"A",{href:!0});var Rzt=s(Roe);MHr=r(Rzt,"FlaxRoFormerForMaskedLM"),Rzt.forEach(t),EHr=r(tXe," (RoFormer model)"),tXe.forEach(t),CHr=i(we),_0=n(we,"LI",{});var aXe=s(_0);x0e=n(aXe,"STRONG",{});var Pzt=s(x0e);wHr=r(Pzt,"t5"),Pzt.forEach(t),AHr=r(aXe," \u2014 "),Poe=n(aXe,"A",{href:!0});var Bzt=s(Poe);LHr=r(Bzt,"FlaxT5ForConditionalGeneration"),Bzt.forEach(t),yHr=r(aXe," (T5 model)"),aXe.forEach(t),xHr=i(we),u0=n(we,"LI",{});var nXe=s(u0);$0e=n(nXe,"STRONG",{});var Izt=s($0e);$Hr=r(Izt,"wav2vec2"),Izt.forEach(t),kHr=r(nXe," \u2014 "),Boe=n(nXe,"A",{href:!0});var Nzt=s(Boe);SHr=r(Nzt,"FlaxWav2Vec2ForPreTraining"),Nzt.forEach(t),RHr=r(nXe," (Wav2Vec2 model)"),nXe.forEach(t),PHr=i(we),b0=n(we,"LI",{});var sXe=s(b0);k0e=n(sXe,"STRONG",{});var qzt=s(k0e);BHr=r(qzt,"xlm-roberta"),qzt.forEach(t),IHr=r(sXe," \u2014 "),Ioe=n(sXe,"A",{href:!0});var jzt=s(Ioe);NHr=r(jzt,"FlaxXLMRobertaForMaskedLM"),jzt.forEach(t),qHr=r(sXe," (XLM-RoBERTa model)"),sXe.forEach(t),we.forEach(t),jHr=i(fi),T(v0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),eQe=i(f),nf=n(f,"H2",{class:!0});var dUe=s(nf);F0=n(dUe,"A",{id:!0,class:!0,href:!0});var Dzt=s(F0);S0e=n(Dzt,"SPAN",{});var Gzt=s(S0e);T(D$.$$.fragment,Gzt),Gzt.forEach(t),Dzt.forEach(t),DHr=i(dUe),R0e=n(dUe,"SPAN",{});var Ozt=s(R0e);GHr=r(Ozt,"FlaxAutoModelForMaskedLM"),Ozt.forEach(t),dUe.forEach(t),oQe=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(G$.$$.fragment,mi),OHr=i(mi),sf=n(mi,"P",{});var zae=s(sf);VHr=r(zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Noe=n(zae,"A",{href:!0});var Vzt=s(Noe);XHr=r(Vzt,"from_pretrained()"),Vzt.forEach(t),zHr=r(zae," class method or the "),qoe=n(zae,"A",{href:!0});var Xzt=s(qoe);WHr=r(Xzt,"from_config()"),Xzt.forEach(t),QHr=r(zae,` class
method.`),zae.forEach(t),HHr=i(mi),O$=n(mi,"P",{});var cUe=s(O$);UHr=r(cUe,"This class cannot be instantiated directly using "),P0e=n(cUe,"CODE",{});var zzt=s(P0e);JHr=r(zzt,"__init__()"),zzt.forEach(t),YHr=r(cUe," (throws an error)."),cUe.forEach(t),KHr=i(mi),Jt=n(mi,"DIV",{class:!0});var eL=s(Jt);T(V$.$$.fragment,eL),ZHr=i(eL),B0e=n(eL,"P",{});var Wzt=s(B0e);eUr=r(Wzt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wzt.forEach(t),oUr=i(eL),lf=n(eL,"P",{});var Wae=s(lf);rUr=r(Wae,`Note:
Loading a model from its configuration file does `),I0e=n(Wae,"STRONG",{});var Qzt=s(I0e);tUr=r(Qzt,"not"),Qzt.forEach(t),aUr=r(Wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=n(Wae,"A",{href:!0});var Hzt=s(joe);nUr=r(Hzt,"from_pretrained()"),Hzt.forEach(t),sUr=r(Wae," to load the model weights."),Wae.forEach(t),lUr=i(eL),T(T0.$$.fragment,eL),eL.forEach(t),iUr=i(mi),Qr=n(mi,"DIV",{class:!0});var gi=s(Qr);T(X$.$$.fragment,gi),dUr=i(gi),N0e=n(gi,"P",{});var Uzt=s(N0e);cUr=r(Uzt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Uzt.forEach(t),fUr=i(gi),wn=n(gi,"P",{});var oL=s(wn);mUr=r(oL,"The model class to instantiate is selected based on the "),q0e=n(oL,"CODE",{});var Jzt=s(q0e);gUr=r(Jzt,"model_type"),Jzt.forEach(t),hUr=r(oL,` property of the config object (either
passed as an argument or loaded from `),j0e=n(oL,"CODE",{});var Yzt=s(j0e);pUr=r(Yzt,"pretrained_model_name_or_path"),Yzt.forEach(t),_Ur=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=n(oL,"CODE",{});var Kzt=s(D0e);uUr=r(Kzt,"pretrained_model_name_or_path"),Kzt.forEach(t),bUr=r(oL,":"),oL.forEach(t),vUr=i(gi),$e=n(gi,"UL",{});var qe=s($e);M0=n(qe,"LI",{});var lXe=s(M0);G0e=n(lXe,"STRONG",{});var Zzt=s(G0e);FUr=r(Zzt,"albert"),Zzt.forEach(t),TUr=r(lXe," \u2014 "),Doe=n(lXe,"A",{href:!0});var eWt=s(Doe);MUr=r(eWt,"FlaxAlbertForMaskedLM"),eWt.forEach(t),EUr=r(lXe," (ALBERT model)"),lXe.forEach(t),CUr=i(qe),E0=n(qe,"LI",{});var iXe=s(E0);O0e=n(iXe,"STRONG",{});var oWt=s(O0e);wUr=r(oWt,"bart"),oWt.forEach(t),AUr=r(iXe," \u2014 "),Goe=n(iXe,"A",{href:!0});var rWt=s(Goe);LUr=r(rWt,"FlaxBartForConditionalGeneration"),rWt.forEach(t),yUr=r(iXe," (BART model)"),iXe.forEach(t),xUr=i(qe),C0=n(qe,"LI",{});var dXe=s(C0);V0e=n(dXe,"STRONG",{});var tWt=s(V0e);$Ur=r(tWt,"bert"),tWt.forEach(t),kUr=r(dXe," \u2014 "),Ooe=n(dXe,"A",{href:!0});var aWt=s(Ooe);SUr=r(aWt,"FlaxBertForMaskedLM"),aWt.forEach(t),RUr=r(dXe," (BERT model)"),dXe.forEach(t),PUr=i(qe),w0=n(qe,"LI",{});var cXe=s(w0);X0e=n(cXe,"STRONG",{});var nWt=s(X0e);BUr=r(nWt,"big_bird"),nWt.forEach(t),IUr=r(cXe," \u2014 "),Voe=n(cXe,"A",{href:!0});var sWt=s(Voe);NUr=r(sWt,"FlaxBigBirdForMaskedLM"),sWt.forEach(t),qUr=r(cXe," (BigBird model)"),cXe.forEach(t),jUr=i(qe),A0=n(qe,"LI",{});var fXe=s(A0);z0e=n(fXe,"STRONG",{});var lWt=s(z0e);DUr=r(lWt,"distilbert"),lWt.forEach(t),GUr=r(fXe," \u2014 "),Xoe=n(fXe,"A",{href:!0});var iWt=s(Xoe);OUr=r(iWt,"FlaxDistilBertForMaskedLM"),iWt.forEach(t),VUr=r(fXe," (DistilBERT model)"),fXe.forEach(t),XUr=i(qe),L0=n(qe,"LI",{});var mXe=s(L0);W0e=n(mXe,"STRONG",{});var dWt=s(W0e);zUr=r(dWt,"electra"),dWt.forEach(t),WUr=r(mXe," \u2014 "),zoe=n(mXe,"A",{href:!0});var cWt=s(zoe);QUr=r(cWt,"FlaxElectraForMaskedLM"),cWt.forEach(t),HUr=r(mXe," (ELECTRA model)"),mXe.forEach(t),UUr=i(qe),y0=n(qe,"LI",{});var gXe=s(y0);Q0e=n(gXe,"STRONG",{});var fWt=s(Q0e);JUr=r(fWt,"mbart"),fWt.forEach(t),YUr=r(gXe," \u2014 "),Woe=n(gXe,"A",{href:!0});var mWt=s(Woe);KUr=r(mWt,"FlaxMBartForConditionalGeneration"),mWt.forEach(t),ZUr=r(gXe," (mBART model)"),gXe.forEach(t),eJr=i(qe),x0=n(qe,"LI",{});var hXe=s(x0);H0e=n(hXe,"STRONG",{});var gWt=s(H0e);oJr=r(gWt,"roberta"),gWt.forEach(t),rJr=r(hXe," \u2014 "),Qoe=n(hXe,"A",{href:!0});var hWt=s(Qoe);tJr=r(hWt,"FlaxRobertaForMaskedLM"),hWt.forEach(t),aJr=r(hXe," (RoBERTa model)"),hXe.forEach(t),nJr=i(qe),$0=n(qe,"LI",{});var pXe=s($0);U0e=n(pXe,"STRONG",{});var pWt=s(U0e);sJr=r(pWt,"roformer"),pWt.forEach(t),lJr=r(pXe," \u2014 "),Hoe=n(pXe,"A",{href:!0});var _Wt=s(Hoe);iJr=r(_Wt,"FlaxRoFormerForMaskedLM"),_Wt.forEach(t),dJr=r(pXe," (RoFormer model)"),pXe.forEach(t),cJr=i(qe),k0=n(qe,"LI",{});var _Xe=s(k0);J0e=n(_Xe,"STRONG",{});var uWt=s(J0e);fJr=r(uWt,"xlm-roberta"),uWt.forEach(t),mJr=r(_Xe," \u2014 "),Uoe=n(_Xe,"A",{href:!0});var bWt=s(Uoe);gJr=r(bWt,"FlaxXLMRobertaForMaskedLM"),bWt.forEach(t),hJr=r(_Xe," (XLM-RoBERTa model)"),_Xe.forEach(t),qe.forEach(t),pJr=i(gi),T(S0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),rQe=i(f),df=n(f,"H2",{class:!0});var fUe=s(df);R0=n(fUe,"A",{id:!0,class:!0,href:!0});var vWt=s(R0);Y0e=n(vWt,"SPAN",{});var FWt=s(Y0e);T(z$.$$.fragment,FWt),FWt.forEach(t),vWt.forEach(t),_Jr=i(fUe),K0e=n(fUe,"SPAN",{});var TWt=s(K0e);uJr=r(TWt,"FlaxAutoModelForSeq2SeqLM"),TWt.forEach(t),fUe.forEach(t),tQe=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(W$.$$.fragment,hi),bJr=i(hi),cf=n(hi,"P",{});var Qae=s(cf);vJr=r(Qae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Joe=n(Qae,"A",{href:!0});var MWt=s(Joe);FJr=r(MWt,"from_pretrained()"),MWt.forEach(t),TJr=r(Qae," class method or the "),Yoe=n(Qae,"A",{href:!0});var EWt=s(Yoe);MJr=r(EWt,"from_config()"),EWt.forEach(t),EJr=r(Qae,` class
method.`),Qae.forEach(t),CJr=i(hi),Q$=n(hi,"P",{});var mUe=s(Q$);wJr=r(mUe,"This class cannot be instantiated directly using "),Z0e=n(mUe,"CODE",{});var CWt=s(Z0e);AJr=r(CWt,"__init__()"),CWt.forEach(t),LJr=r(mUe," (throws an error)."),mUe.forEach(t),yJr=i(hi),Yt=n(hi,"DIV",{class:!0});var rL=s(Yt);T(H$.$$.fragment,rL),xJr=i(rL),ewe=n(rL,"P",{});var wWt=s(ewe);$Jr=r(wWt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wWt.forEach(t),kJr=i(rL),ff=n(rL,"P",{});var Hae=s(ff);SJr=r(Hae,`Note:
Loading a model from its configuration file does `),owe=n(Hae,"STRONG",{});var AWt=s(owe);RJr=r(AWt,"not"),AWt.forEach(t),PJr=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=n(Hae,"A",{href:!0});var LWt=s(Koe);BJr=r(LWt,"from_pretrained()"),LWt.forEach(t),IJr=r(Hae," to load the model weights."),Hae.forEach(t),NJr=i(rL),T(P0.$$.fragment,rL),rL.forEach(t),qJr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(U$.$$.fragment,pi),jJr=i(pi),rwe=n(pi,"P",{});var yWt=s(rwe);DJr=r(yWt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yWt.forEach(t),GJr=i(pi),An=n(pi,"P",{});var tL=s(An);OJr=r(tL,"The model class to instantiate is selected based on the "),twe=n(tL,"CODE",{});var xWt=s(twe);VJr=r(xWt,"model_type"),xWt.forEach(t),XJr=r(tL,` property of the config object (either
passed as an argument or loaded from `),awe=n(tL,"CODE",{});var $Wt=s(awe);zJr=r($Wt,"pretrained_model_name_or_path"),$Wt.forEach(t),WJr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nwe=n(tL,"CODE",{});var kWt=s(nwe);QJr=r(kWt,"pretrained_model_name_or_path"),kWt.forEach(t),HJr=r(tL,":"),tL.forEach(t),UJr=i(pi),ke=n(pi,"UL",{});var je=s(ke);B0=n(je,"LI",{});var uXe=s(B0);swe=n(uXe,"STRONG",{});var SWt=s(swe);JJr=r(SWt,"bart"),SWt.forEach(t),YJr=r(uXe," \u2014 "),Zoe=n(uXe,"A",{href:!0});var RWt=s(Zoe);KJr=r(RWt,"FlaxBartForConditionalGeneration"),RWt.forEach(t),ZJr=r(uXe," (BART model)"),uXe.forEach(t),eYr=i(je),I0=n(je,"LI",{});var bXe=s(I0);lwe=n(bXe,"STRONG",{});var PWt=s(lwe);oYr=r(PWt,"blenderbot"),PWt.forEach(t),rYr=r(bXe," \u2014 "),ere=n(bXe,"A",{href:!0});var BWt=s(ere);tYr=r(BWt,"FlaxBlenderbotForConditionalGeneration"),BWt.forEach(t),aYr=r(bXe," (Blenderbot model)"),bXe.forEach(t),nYr=i(je),N0=n(je,"LI",{});var vXe=s(N0);iwe=n(vXe,"STRONG",{});var IWt=s(iwe);sYr=r(IWt,"blenderbot-small"),IWt.forEach(t),lYr=r(vXe," \u2014 "),ore=n(vXe,"A",{href:!0});var NWt=s(ore);iYr=r(NWt,"FlaxBlenderbotSmallForConditionalGeneration"),NWt.forEach(t),dYr=r(vXe," (BlenderbotSmall model)"),vXe.forEach(t),cYr=i(je),q0=n(je,"LI",{});var FXe=s(q0);dwe=n(FXe,"STRONG",{});var qWt=s(dwe);fYr=r(qWt,"encoder-decoder"),qWt.forEach(t),mYr=r(FXe," \u2014 "),rre=n(FXe,"A",{href:!0});var jWt=s(rre);gYr=r(jWt,"FlaxEncoderDecoderModel"),jWt.forEach(t),hYr=r(FXe," (Encoder decoder model)"),FXe.forEach(t),pYr=i(je),j0=n(je,"LI",{});var TXe=s(j0);cwe=n(TXe,"STRONG",{});var DWt=s(cwe);_Yr=r(DWt,"longt5"),DWt.forEach(t),uYr=r(TXe," \u2014 "),tre=n(TXe,"A",{href:!0});var GWt=s(tre);bYr=r(GWt,"FlaxLongT5ForConditionalGeneration"),GWt.forEach(t),vYr=r(TXe," (LongT5 model)"),TXe.forEach(t),FYr=i(je),D0=n(je,"LI",{});var MXe=s(D0);fwe=n(MXe,"STRONG",{});var OWt=s(fwe);TYr=r(OWt,"marian"),OWt.forEach(t),MYr=r(MXe," \u2014 "),are=n(MXe,"A",{href:!0});var VWt=s(are);EYr=r(VWt,"FlaxMarianMTModel"),VWt.forEach(t),CYr=r(MXe," (Marian model)"),MXe.forEach(t),wYr=i(je),G0=n(je,"LI",{});var EXe=s(G0);mwe=n(EXe,"STRONG",{});var XWt=s(mwe);AYr=r(XWt,"mbart"),XWt.forEach(t),LYr=r(EXe," \u2014 "),nre=n(EXe,"A",{href:!0});var zWt=s(nre);yYr=r(zWt,"FlaxMBartForConditionalGeneration"),zWt.forEach(t),xYr=r(EXe," (mBART model)"),EXe.forEach(t),$Yr=i(je),O0=n(je,"LI",{});var CXe=s(O0);gwe=n(CXe,"STRONG",{});var WWt=s(gwe);kYr=r(WWt,"mt5"),WWt.forEach(t),SYr=r(CXe," \u2014 "),sre=n(CXe,"A",{href:!0});var QWt=s(sre);RYr=r(QWt,"FlaxMT5ForConditionalGeneration"),QWt.forEach(t),PYr=r(CXe," (MT5 model)"),CXe.forEach(t),BYr=i(je),V0=n(je,"LI",{});var wXe=s(V0);hwe=n(wXe,"STRONG",{});var HWt=s(hwe);IYr=r(HWt,"pegasus"),HWt.forEach(t),NYr=r(wXe," \u2014 "),lre=n(wXe,"A",{href:!0});var UWt=s(lre);qYr=r(UWt,"FlaxPegasusForConditionalGeneration"),UWt.forEach(t),jYr=r(wXe," (Pegasus model)"),wXe.forEach(t),DYr=i(je),X0=n(je,"LI",{});var AXe=s(X0);pwe=n(AXe,"STRONG",{});var JWt=s(pwe);GYr=r(JWt,"t5"),JWt.forEach(t),OYr=r(AXe," \u2014 "),ire=n(AXe,"A",{href:!0});var YWt=s(ire);VYr=r(YWt,"FlaxT5ForConditionalGeneration"),YWt.forEach(t),XYr=r(AXe," (T5 model)"),AXe.forEach(t),je.forEach(t),zYr=i(pi),T(z0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),aQe=i(f),mf=n(f,"H2",{class:!0});var gUe=s(mf);W0=n(gUe,"A",{id:!0,class:!0,href:!0});var KWt=s(W0);_we=n(KWt,"SPAN",{});var ZWt=s(_we);T(J$.$$.fragment,ZWt),ZWt.forEach(t),KWt.forEach(t),WYr=i(gUe),uwe=n(gUe,"SPAN",{});var eQt=s(uwe);QYr=r(eQt,"FlaxAutoModelForSequenceClassification"),eQt.forEach(t),gUe.forEach(t),nQe=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(Y$.$$.fragment,_i),HYr=i(_i),gf=n(_i,"P",{});var Uae=s(gf);UYr=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dre=n(Uae,"A",{href:!0});var oQt=s(dre);JYr=r(oQt,"from_pretrained()"),oQt.forEach(t),YYr=r(Uae," class method or the "),cre=n(Uae,"A",{href:!0});var rQt=s(cre);KYr=r(rQt,"from_config()"),rQt.forEach(t),ZYr=r(Uae,` class
method.`),Uae.forEach(t),eKr=i(_i),K$=n(_i,"P",{});var hUe=s(K$);oKr=r(hUe,"This class cannot be instantiated directly using "),bwe=n(hUe,"CODE",{});var tQt=s(bwe);rKr=r(tQt,"__init__()"),tQt.forEach(t),tKr=r(hUe," (throws an error)."),hUe.forEach(t),aKr=i(_i),Kt=n(_i,"DIV",{class:!0});var aL=s(Kt);T(Z$.$$.fragment,aL),nKr=i(aL),vwe=n(aL,"P",{});var aQt=s(vwe);sKr=r(aQt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aQt.forEach(t),lKr=i(aL),hf=n(aL,"P",{});var Jae=s(hf);iKr=r(Jae,`Note:
Loading a model from its configuration file does `),Fwe=n(Jae,"STRONG",{});var nQt=s(Fwe);dKr=r(nQt,"not"),nQt.forEach(t),cKr=r(Jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=n(Jae,"A",{href:!0});var sQt=s(fre);fKr=r(sQt,"from_pretrained()"),sQt.forEach(t),mKr=r(Jae," to load the model weights."),Jae.forEach(t),gKr=i(aL),T(Q0.$$.fragment,aL),aL.forEach(t),hKr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(ek.$$.fragment,ui),pKr=i(ui),Twe=n(ui,"P",{});var lQt=s(Twe);_Kr=r(lQt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lQt.forEach(t),uKr=i(ui),Ln=n(ui,"P",{});var nL=s(Ln);bKr=r(nL,"The model class to instantiate is selected based on the "),Mwe=n(nL,"CODE",{});var iQt=s(Mwe);vKr=r(iQt,"model_type"),iQt.forEach(t),FKr=r(nL,` property of the config object (either
passed as an argument or loaded from `),Ewe=n(nL,"CODE",{});var dQt=s(Ewe);TKr=r(dQt,"pretrained_model_name_or_path"),dQt.forEach(t),MKr=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cwe=n(nL,"CODE",{});var cQt=s(Cwe);EKr=r(cQt,"pretrained_model_name_or_path"),cQt.forEach(t),CKr=r(nL,":"),nL.forEach(t),wKr=i(ui),Se=n(ui,"UL",{});var De=s(Se);H0=n(De,"LI",{});var LXe=s(H0);wwe=n(LXe,"STRONG",{});var fQt=s(wwe);AKr=r(fQt,"albert"),fQt.forEach(t),LKr=r(LXe," \u2014 "),mre=n(LXe,"A",{href:!0});var mQt=s(mre);yKr=r(mQt,"FlaxAlbertForSequenceClassification"),mQt.forEach(t),xKr=r(LXe," (ALBERT model)"),LXe.forEach(t),$Kr=i(De),U0=n(De,"LI",{});var yXe=s(U0);Awe=n(yXe,"STRONG",{});var gQt=s(Awe);kKr=r(gQt,"bart"),gQt.forEach(t),SKr=r(yXe," \u2014 "),gre=n(yXe,"A",{href:!0});var hQt=s(gre);RKr=r(hQt,"FlaxBartForSequenceClassification"),hQt.forEach(t),PKr=r(yXe," (BART model)"),yXe.forEach(t),BKr=i(De),J0=n(De,"LI",{});var xXe=s(J0);Lwe=n(xXe,"STRONG",{});var pQt=s(Lwe);IKr=r(pQt,"bert"),pQt.forEach(t),NKr=r(xXe," \u2014 "),hre=n(xXe,"A",{href:!0});var _Qt=s(hre);qKr=r(_Qt,"FlaxBertForSequenceClassification"),_Qt.forEach(t),jKr=r(xXe," (BERT model)"),xXe.forEach(t),DKr=i(De),Y0=n(De,"LI",{});var $Xe=s(Y0);ywe=n($Xe,"STRONG",{});var uQt=s(ywe);GKr=r(uQt,"big_bird"),uQt.forEach(t),OKr=r($Xe," \u2014 "),pre=n($Xe,"A",{href:!0});var bQt=s(pre);VKr=r(bQt,"FlaxBigBirdForSequenceClassification"),bQt.forEach(t),XKr=r($Xe," (BigBird model)"),$Xe.forEach(t),zKr=i(De),K0=n(De,"LI",{});var kXe=s(K0);xwe=n(kXe,"STRONG",{});var vQt=s(xwe);WKr=r(vQt,"distilbert"),vQt.forEach(t),QKr=r(kXe," \u2014 "),_re=n(kXe,"A",{href:!0});var FQt=s(_re);HKr=r(FQt,"FlaxDistilBertForSequenceClassification"),FQt.forEach(t),UKr=r(kXe," (DistilBERT model)"),kXe.forEach(t),JKr=i(De),Z0=n(De,"LI",{});var SXe=s(Z0);$we=n(SXe,"STRONG",{});var TQt=s($we);YKr=r(TQt,"electra"),TQt.forEach(t),KKr=r(SXe," \u2014 "),ure=n(SXe,"A",{href:!0});var MQt=s(ure);ZKr=r(MQt,"FlaxElectraForSequenceClassification"),MQt.forEach(t),eZr=r(SXe," (ELECTRA model)"),SXe.forEach(t),oZr=i(De),ew=n(De,"LI",{});var RXe=s(ew);kwe=n(RXe,"STRONG",{});var EQt=s(kwe);rZr=r(EQt,"mbart"),EQt.forEach(t),tZr=r(RXe," \u2014 "),bre=n(RXe,"A",{href:!0});var CQt=s(bre);aZr=r(CQt,"FlaxMBartForSequenceClassification"),CQt.forEach(t),nZr=r(RXe," (mBART model)"),RXe.forEach(t),sZr=i(De),ow=n(De,"LI",{});var PXe=s(ow);Swe=n(PXe,"STRONG",{});var wQt=s(Swe);lZr=r(wQt,"roberta"),wQt.forEach(t),iZr=r(PXe," \u2014 "),vre=n(PXe,"A",{href:!0});var AQt=s(vre);dZr=r(AQt,"FlaxRobertaForSequenceClassification"),AQt.forEach(t),cZr=r(PXe," (RoBERTa model)"),PXe.forEach(t),fZr=i(De),rw=n(De,"LI",{});var BXe=s(rw);Rwe=n(BXe,"STRONG",{});var LQt=s(Rwe);mZr=r(LQt,"roformer"),LQt.forEach(t),gZr=r(BXe," \u2014 "),Fre=n(BXe,"A",{href:!0});var yQt=s(Fre);hZr=r(yQt,"FlaxRoFormerForSequenceClassification"),yQt.forEach(t),pZr=r(BXe," (RoFormer model)"),BXe.forEach(t),_Zr=i(De),tw=n(De,"LI",{});var IXe=s(tw);Pwe=n(IXe,"STRONG",{});var xQt=s(Pwe);uZr=r(xQt,"xlm-roberta"),xQt.forEach(t),bZr=r(IXe," \u2014 "),Tre=n(IXe,"A",{href:!0});var $Qt=s(Tre);vZr=r($Qt,"FlaxXLMRobertaForSequenceClassification"),$Qt.forEach(t),FZr=r(IXe," (XLM-RoBERTa model)"),IXe.forEach(t),De.forEach(t),TZr=i(ui),T(aw.$$.fragment,ui),ui.forEach(t),_i.forEach(t),sQe=i(f),pf=n(f,"H2",{class:!0});var pUe=s(pf);nw=n(pUe,"A",{id:!0,class:!0,href:!0});var kQt=s(nw);Bwe=n(kQt,"SPAN",{});var SQt=s(Bwe);T(ok.$$.fragment,SQt),SQt.forEach(t),kQt.forEach(t),MZr=i(pUe),Iwe=n(pUe,"SPAN",{});var RQt=s(Iwe);EZr=r(RQt,"FlaxAutoModelForQuestionAnswering"),RQt.forEach(t),pUe.forEach(t),lQe=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(rk.$$.fragment,bi),CZr=i(bi),_f=n(bi,"P",{});var Yae=s(_f);wZr=r(Yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Mre=n(Yae,"A",{href:!0});var PQt=s(Mre);AZr=r(PQt,"from_pretrained()"),PQt.forEach(t),LZr=r(Yae," class method or the "),Ere=n(Yae,"A",{href:!0});var BQt=s(Ere);yZr=r(BQt,"from_config()"),BQt.forEach(t),xZr=r(Yae,` class
method.`),Yae.forEach(t),$Zr=i(bi),tk=n(bi,"P",{});var _Ue=s(tk);kZr=r(_Ue,"This class cannot be instantiated directly using "),Nwe=n(_Ue,"CODE",{});var IQt=s(Nwe);SZr=r(IQt,"__init__()"),IQt.forEach(t),RZr=r(_Ue," (throws an error)."),_Ue.forEach(t),PZr=i(bi),Zt=n(bi,"DIV",{class:!0});var sL=s(Zt);T(ak.$$.fragment,sL),BZr=i(sL),qwe=n(sL,"P",{});var NQt=s(qwe);IZr=r(NQt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NQt.forEach(t),NZr=i(sL),uf=n(sL,"P",{});var Kae=s(uf);qZr=r(Kae,`Note:
Loading a model from its configuration file does `),jwe=n(Kae,"STRONG",{});var qQt=s(jwe);jZr=r(qQt,"not"),qQt.forEach(t),DZr=r(Kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=n(Kae,"A",{href:!0});var jQt=s(Cre);GZr=r(jQt,"from_pretrained()"),jQt.forEach(t),OZr=r(Kae," to load the model weights."),Kae.forEach(t),VZr=i(sL),T(sw.$$.fragment,sL),sL.forEach(t),XZr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(nk.$$.fragment,vi),zZr=i(vi),Dwe=n(vi,"P",{});var DQt=s(Dwe);WZr=r(DQt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DQt.forEach(t),QZr=i(vi),yn=n(vi,"P",{});var lL=s(yn);HZr=r(lL,"The model class to instantiate is selected based on the "),Gwe=n(lL,"CODE",{});var GQt=s(Gwe);UZr=r(GQt,"model_type"),GQt.forEach(t),JZr=r(lL,` property of the config object (either
passed as an argument or loaded from `),Owe=n(lL,"CODE",{});var OQt=s(Owe);YZr=r(OQt,"pretrained_model_name_or_path"),OQt.forEach(t),KZr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vwe=n(lL,"CODE",{});var VQt=s(Vwe);ZZr=r(VQt,"pretrained_model_name_or_path"),VQt.forEach(t),eet=r(lL,":"),lL.forEach(t),oet=i(vi),Re=n(vi,"UL",{});var Ge=s(Re);lw=n(Ge,"LI",{});var NXe=s(lw);Xwe=n(NXe,"STRONG",{});var XQt=s(Xwe);ret=r(XQt,"albert"),XQt.forEach(t),tet=r(NXe," \u2014 "),wre=n(NXe,"A",{href:!0});var zQt=s(wre);aet=r(zQt,"FlaxAlbertForQuestionAnswering"),zQt.forEach(t),net=r(NXe," (ALBERT model)"),NXe.forEach(t),set=i(Ge),iw=n(Ge,"LI",{});var qXe=s(iw);zwe=n(qXe,"STRONG",{});var WQt=s(zwe);iet=r(WQt,"bart"),WQt.forEach(t),det=r(qXe," \u2014 "),Are=n(qXe,"A",{href:!0});var QQt=s(Are);cet=r(QQt,"FlaxBartForQuestionAnswering"),QQt.forEach(t),fet=r(qXe," (BART model)"),qXe.forEach(t),met=i(Ge),dw=n(Ge,"LI",{});var jXe=s(dw);Wwe=n(jXe,"STRONG",{});var HQt=s(Wwe);get=r(HQt,"bert"),HQt.forEach(t),het=r(jXe," \u2014 "),Lre=n(jXe,"A",{href:!0});var UQt=s(Lre);pet=r(UQt,"FlaxBertForQuestionAnswering"),UQt.forEach(t),_et=r(jXe," (BERT model)"),jXe.forEach(t),uet=i(Ge),cw=n(Ge,"LI",{});var DXe=s(cw);Qwe=n(DXe,"STRONG",{});var JQt=s(Qwe);bet=r(JQt,"big_bird"),JQt.forEach(t),vet=r(DXe," \u2014 "),yre=n(DXe,"A",{href:!0});var YQt=s(yre);Fet=r(YQt,"FlaxBigBirdForQuestionAnswering"),YQt.forEach(t),Tet=r(DXe," (BigBird model)"),DXe.forEach(t),Met=i(Ge),fw=n(Ge,"LI",{});var GXe=s(fw);Hwe=n(GXe,"STRONG",{});var KQt=s(Hwe);Eet=r(KQt,"distilbert"),KQt.forEach(t),Cet=r(GXe," \u2014 "),xre=n(GXe,"A",{href:!0});var ZQt=s(xre);wet=r(ZQt,"FlaxDistilBertForQuestionAnswering"),ZQt.forEach(t),Aet=r(GXe," (DistilBERT model)"),GXe.forEach(t),Let=i(Ge),mw=n(Ge,"LI",{});var OXe=s(mw);Uwe=n(OXe,"STRONG",{});var eHt=s(Uwe);yet=r(eHt,"electra"),eHt.forEach(t),xet=r(OXe," \u2014 "),$re=n(OXe,"A",{href:!0});var oHt=s($re);$et=r(oHt,"FlaxElectraForQuestionAnswering"),oHt.forEach(t),ket=r(OXe," (ELECTRA model)"),OXe.forEach(t),Set=i(Ge),gw=n(Ge,"LI",{});var VXe=s(gw);Jwe=n(VXe,"STRONG",{});var rHt=s(Jwe);Ret=r(rHt,"mbart"),rHt.forEach(t),Pet=r(VXe," \u2014 "),kre=n(VXe,"A",{href:!0});var tHt=s(kre);Bet=r(tHt,"FlaxMBartForQuestionAnswering"),tHt.forEach(t),Iet=r(VXe," (mBART model)"),VXe.forEach(t),Net=i(Ge),hw=n(Ge,"LI",{});var XXe=s(hw);Ywe=n(XXe,"STRONG",{});var aHt=s(Ywe);qet=r(aHt,"roberta"),aHt.forEach(t),jet=r(XXe," \u2014 "),Sre=n(XXe,"A",{href:!0});var nHt=s(Sre);Det=r(nHt,"FlaxRobertaForQuestionAnswering"),nHt.forEach(t),Get=r(XXe," (RoBERTa model)"),XXe.forEach(t),Oet=i(Ge),pw=n(Ge,"LI",{});var zXe=s(pw);Kwe=n(zXe,"STRONG",{});var sHt=s(Kwe);Vet=r(sHt,"roformer"),sHt.forEach(t),Xet=r(zXe," \u2014 "),Rre=n(zXe,"A",{href:!0});var lHt=s(Rre);zet=r(lHt,"FlaxRoFormerForQuestionAnswering"),lHt.forEach(t),Wet=r(zXe," (RoFormer model)"),zXe.forEach(t),Qet=i(Ge),_w=n(Ge,"LI",{});var WXe=s(_w);Zwe=n(WXe,"STRONG",{});var iHt=s(Zwe);Het=r(iHt,"xlm-roberta"),iHt.forEach(t),Uet=r(WXe," \u2014 "),Pre=n(WXe,"A",{href:!0});var dHt=s(Pre);Jet=r(dHt,"FlaxXLMRobertaForQuestionAnswering"),dHt.forEach(t),Yet=r(WXe," (XLM-RoBERTa model)"),WXe.forEach(t),Ge.forEach(t),Ket=i(vi),T(uw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),iQe=i(f),bf=n(f,"H2",{class:!0});var uUe=s(bf);bw=n(uUe,"A",{id:!0,class:!0,href:!0});var cHt=s(bw);eAe=n(cHt,"SPAN",{});var fHt=s(eAe);T(sk.$$.fragment,fHt),fHt.forEach(t),cHt.forEach(t),Zet=i(uUe),oAe=n(uUe,"SPAN",{});var mHt=s(oAe);eot=r(mHt,"FlaxAutoModelForTokenClassification"),mHt.forEach(t),uUe.forEach(t),dQe=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(lk.$$.fragment,Fi),oot=i(Fi),vf=n(Fi,"P",{});var Zae=s(vf);rot=r(Zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bre=n(Zae,"A",{href:!0});var gHt=s(Bre);tot=r(gHt,"from_pretrained()"),gHt.forEach(t),aot=r(Zae," class method or the "),Ire=n(Zae,"A",{href:!0});var hHt=s(Ire);not=r(hHt,"from_config()"),hHt.forEach(t),sot=r(Zae,` class
method.`),Zae.forEach(t),lot=i(Fi),ik=n(Fi,"P",{});var bUe=s(ik);iot=r(bUe,"This class cannot be instantiated directly using "),rAe=n(bUe,"CODE",{});var pHt=s(rAe);dot=r(pHt,"__init__()"),pHt.forEach(t),cot=r(bUe," (throws an error)."),bUe.forEach(t),fot=i(Fi),ea=n(Fi,"DIV",{class:!0});var iL=s(ea);T(dk.$$.fragment,iL),mot=i(iL),tAe=n(iL,"P",{});var _Ht=s(tAe);got=r(_Ht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Ht.forEach(t),hot=i(iL),Ff=n(iL,"P",{});var ene=s(Ff);pot=r(ene,`Note:
Loading a model from its configuration file does `),aAe=n(ene,"STRONG",{});var uHt=s(aAe);_ot=r(uHt,"not"),uHt.forEach(t),uot=r(ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nre=n(ene,"A",{href:!0});var bHt=s(Nre);bot=r(bHt,"from_pretrained()"),bHt.forEach(t),vot=r(ene," to load the model weights."),ene.forEach(t),Fot=i(iL),T(vw.$$.fragment,iL),iL.forEach(t),Tot=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(ck.$$.fragment,Ti),Mot=i(Ti),nAe=n(Ti,"P",{});var vHt=s(nAe);Eot=r(vHt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vHt.forEach(t),Cot=i(Ti),xn=n(Ti,"P",{});var dL=s(xn);wot=r(dL,"The model class to instantiate is selected based on the "),sAe=n(dL,"CODE",{});var FHt=s(sAe);Aot=r(FHt,"model_type"),FHt.forEach(t),Lot=r(dL,` property of the config object (either
passed as an argument or loaded from `),lAe=n(dL,"CODE",{});var THt=s(lAe);yot=r(THt,"pretrained_model_name_or_path"),THt.forEach(t),xot=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iAe=n(dL,"CODE",{});var MHt=s(iAe);$ot=r(MHt,"pretrained_model_name_or_path"),MHt.forEach(t),kot=r(dL,":"),dL.forEach(t),Sot=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);Fw=n(Eo,"LI",{});var QXe=s(Fw);dAe=n(QXe,"STRONG",{});var EHt=s(dAe);Rot=r(EHt,"albert"),EHt.forEach(t),Pot=r(QXe," \u2014 "),qre=n(QXe,"A",{href:!0});var CHt=s(qre);Bot=r(CHt,"FlaxAlbertForTokenClassification"),CHt.forEach(t),Iot=r(QXe," (ALBERT model)"),QXe.forEach(t),Not=i(Eo),Tw=n(Eo,"LI",{});var HXe=s(Tw);cAe=n(HXe,"STRONG",{});var wHt=s(cAe);qot=r(wHt,"bert"),wHt.forEach(t),jot=r(HXe," \u2014 "),jre=n(HXe,"A",{href:!0});var AHt=s(jre);Dot=r(AHt,"FlaxBertForTokenClassification"),AHt.forEach(t),Got=r(HXe," (BERT model)"),HXe.forEach(t),Oot=i(Eo),Mw=n(Eo,"LI",{});var UXe=s(Mw);fAe=n(UXe,"STRONG",{});var LHt=s(fAe);Vot=r(LHt,"big_bird"),LHt.forEach(t),Xot=r(UXe," \u2014 "),Dre=n(UXe,"A",{href:!0});var yHt=s(Dre);zot=r(yHt,"FlaxBigBirdForTokenClassification"),yHt.forEach(t),Wot=r(UXe," (BigBird model)"),UXe.forEach(t),Qot=i(Eo),Ew=n(Eo,"LI",{});var JXe=s(Ew);mAe=n(JXe,"STRONG",{});var xHt=s(mAe);Hot=r(xHt,"distilbert"),xHt.forEach(t),Uot=r(JXe," \u2014 "),Gre=n(JXe,"A",{href:!0});var $Ht=s(Gre);Jot=r($Ht,"FlaxDistilBertForTokenClassification"),$Ht.forEach(t),Yot=r(JXe," (DistilBERT model)"),JXe.forEach(t),Kot=i(Eo),Cw=n(Eo,"LI",{});var YXe=s(Cw);gAe=n(YXe,"STRONG",{});var kHt=s(gAe);Zot=r(kHt,"electra"),kHt.forEach(t),ert=r(YXe," \u2014 "),Ore=n(YXe,"A",{href:!0});var SHt=s(Ore);ort=r(SHt,"FlaxElectraForTokenClassification"),SHt.forEach(t),rrt=r(YXe," (ELECTRA model)"),YXe.forEach(t),trt=i(Eo),ww=n(Eo,"LI",{});var KXe=s(ww);hAe=n(KXe,"STRONG",{});var RHt=s(hAe);art=r(RHt,"roberta"),RHt.forEach(t),nrt=r(KXe," \u2014 "),Vre=n(KXe,"A",{href:!0});var PHt=s(Vre);srt=r(PHt,"FlaxRobertaForTokenClassification"),PHt.forEach(t),lrt=r(KXe," (RoBERTa model)"),KXe.forEach(t),irt=i(Eo),Aw=n(Eo,"LI",{});var ZXe=s(Aw);pAe=n(ZXe,"STRONG",{});var BHt=s(pAe);drt=r(BHt,"roformer"),BHt.forEach(t),crt=r(ZXe," \u2014 "),Xre=n(ZXe,"A",{href:!0});var IHt=s(Xre);frt=r(IHt,"FlaxRoFormerForTokenClassification"),IHt.forEach(t),mrt=r(ZXe," (RoFormer model)"),ZXe.forEach(t),grt=i(Eo),Lw=n(Eo,"LI",{});var eze=s(Lw);_Ae=n(eze,"STRONG",{});var NHt=s(_Ae);hrt=r(NHt,"xlm-roberta"),NHt.forEach(t),prt=r(eze," \u2014 "),zre=n(eze,"A",{href:!0});var qHt=s(zre);_rt=r(qHt,"FlaxXLMRobertaForTokenClassification"),qHt.forEach(t),urt=r(eze," (XLM-RoBERTa model)"),eze.forEach(t),Eo.forEach(t),brt=i(Ti),T(yw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),cQe=i(f),Tf=n(f,"H2",{class:!0});var vUe=s(Tf);xw=n(vUe,"A",{id:!0,class:!0,href:!0});var jHt=s(xw);uAe=n(jHt,"SPAN",{});var DHt=s(uAe);T(fk.$$.fragment,DHt),DHt.forEach(t),jHt.forEach(t),vrt=i(vUe),bAe=n(vUe,"SPAN",{});var GHt=s(bAe);Frt=r(GHt,"FlaxAutoModelForMultipleChoice"),GHt.forEach(t),vUe.forEach(t),fQe=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(mk.$$.fragment,Mi),Trt=i(Mi),Mf=n(Mi,"P",{});var one=s(Mf);Mrt=r(one,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Wre=n(one,"A",{href:!0});var OHt=s(Wre);Ert=r(OHt,"from_pretrained()"),OHt.forEach(t),Crt=r(one," class method or the "),Qre=n(one,"A",{href:!0});var VHt=s(Qre);wrt=r(VHt,"from_config()"),VHt.forEach(t),Art=r(one,` class
method.`),one.forEach(t),Lrt=i(Mi),gk=n(Mi,"P",{});var FUe=s(gk);yrt=r(FUe,"This class cannot be instantiated directly using "),vAe=n(FUe,"CODE",{});var XHt=s(vAe);xrt=r(XHt,"__init__()"),XHt.forEach(t),$rt=r(FUe," (throws an error)."),FUe.forEach(t),krt=i(Mi),oa=n(Mi,"DIV",{class:!0});var cL=s(oa);T(hk.$$.fragment,cL),Srt=i(cL),FAe=n(cL,"P",{});var zHt=s(FAe);Rrt=r(zHt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zHt.forEach(t),Prt=i(cL),Ef=n(cL,"P",{});var rne=s(Ef);Brt=r(rne,`Note:
Loading a model from its configuration file does `),TAe=n(rne,"STRONG",{});var WHt=s(TAe);Irt=r(WHt,"not"),WHt.forEach(t),Nrt=r(rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hre=n(rne,"A",{href:!0});var QHt=s(Hre);qrt=r(QHt,"from_pretrained()"),QHt.forEach(t),jrt=r(rne," to load the model weights."),rne.forEach(t),Drt=i(cL),T($w.$$.fragment,cL),cL.forEach(t),Grt=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(pk.$$.fragment,Ei),Ort=i(Ei),MAe=n(Ei,"P",{});var HHt=s(MAe);Vrt=r(HHt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HHt.forEach(t),Xrt=i(Ei),$n=n(Ei,"P",{});var fL=s($n);zrt=r(fL,"The model class to instantiate is selected based on the "),EAe=n(fL,"CODE",{});var UHt=s(EAe);Wrt=r(UHt,"model_type"),UHt.forEach(t),Qrt=r(fL,` property of the config object (either
passed as an argument or loaded from `),CAe=n(fL,"CODE",{});var JHt=s(CAe);Hrt=r(JHt,"pretrained_model_name_or_path"),JHt.forEach(t),Urt=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wAe=n(fL,"CODE",{});var YHt=s(wAe);Jrt=r(YHt,"pretrained_model_name_or_path"),YHt.forEach(t),Yrt=r(fL,":"),fL.forEach(t),Krt=i(Ei),ze=n(Ei,"UL",{});var Co=s(ze);kw=n(Co,"LI",{});var oze=s(kw);AAe=n(oze,"STRONG",{});var KHt=s(AAe);Zrt=r(KHt,"albert"),KHt.forEach(t),ett=r(oze," \u2014 "),Ure=n(oze,"A",{href:!0});var ZHt=s(Ure);ott=r(ZHt,"FlaxAlbertForMultipleChoice"),ZHt.forEach(t),rtt=r(oze," (ALBERT model)"),oze.forEach(t),ttt=i(Co),Sw=n(Co,"LI",{});var rze=s(Sw);LAe=n(rze,"STRONG",{});var eUt=s(LAe);att=r(eUt,"bert"),eUt.forEach(t),ntt=r(rze," \u2014 "),Jre=n(rze,"A",{href:!0});var oUt=s(Jre);stt=r(oUt,"FlaxBertForMultipleChoice"),oUt.forEach(t),ltt=r(rze," (BERT model)"),rze.forEach(t),itt=i(Co),Rw=n(Co,"LI",{});var tze=s(Rw);yAe=n(tze,"STRONG",{});var rUt=s(yAe);dtt=r(rUt,"big_bird"),rUt.forEach(t),ctt=r(tze," \u2014 "),Yre=n(tze,"A",{href:!0});var tUt=s(Yre);ftt=r(tUt,"FlaxBigBirdForMultipleChoice"),tUt.forEach(t),mtt=r(tze," (BigBird model)"),tze.forEach(t),gtt=i(Co),Pw=n(Co,"LI",{});var aze=s(Pw);xAe=n(aze,"STRONG",{});var aUt=s(xAe);htt=r(aUt,"distilbert"),aUt.forEach(t),ptt=r(aze," \u2014 "),Kre=n(aze,"A",{href:!0});var nUt=s(Kre);_tt=r(nUt,"FlaxDistilBertForMultipleChoice"),nUt.forEach(t),utt=r(aze," (DistilBERT model)"),aze.forEach(t),btt=i(Co),Bw=n(Co,"LI",{});var nze=s(Bw);$Ae=n(nze,"STRONG",{});var sUt=s($Ae);vtt=r(sUt,"electra"),sUt.forEach(t),Ftt=r(nze," \u2014 "),Zre=n(nze,"A",{href:!0});var lUt=s(Zre);Ttt=r(lUt,"FlaxElectraForMultipleChoice"),lUt.forEach(t),Mtt=r(nze," (ELECTRA model)"),nze.forEach(t),Ett=i(Co),Iw=n(Co,"LI",{});var sze=s(Iw);kAe=n(sze,"STRONG",{});var iUt=s(kAe);Ctt=r(iUt,"roberta"),iUt.forEach(t),wtt=r(sze," \u2014 "),ete=n(sze,"A",{href:!0});var dUt=s(ete);Att=r(dUt,"FlaxRobertaForMultipleChoice"),dUt.forEach(t),Ltt=r(sze," (RoBERTa model)"),sze.forEach(t),ytt=i(Co),Nw=n(Co,"LI",{});var lze=s(Nw);SAe=n(lze,"STRONG",{});var cUt=s(SAe);xtt=r(cUt,"roformer"),cUt.forEach(t),$tt=r(lze," \u2014 "),ote=n(lze,"A",{href:!0});var fUt=s(ote);ktt=r(fUt,"FlaxRoFormerForMultipleChoice"),fUt.forEach(t),Stt=r(lze," (RoFormer model)"),lze.forEach(t),Rtt=i(Co),qw=n(Co,"LI",{});var ize=s(qw);RAe=n(ize,"STRONG",{});var mUt=s(RAe);Ptt=r(mUt,"xlm-roberta"),mUt.forEach(t),Btt=r(ize," \u2014 "),rte=n(ize,"A",{href:!0});var gUt=s(rte);Itt=r(gUt,"FlaxXLMRobertaForMultipleChoice"),gUt.forEach(t),Ntt=r(ize," (XLM-RoBERTa model)"),ize.forEach(t),Co.forEach(t),qtt=i(Ei),T(jw.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),mQe=i(f),Cf=n(f,"H2",{class:!0});var TUe=s(Cf);Dw=n(TUe,"A",{id:!0,class:!0,href:!0});var hUt=s(Dw);PAe=n(hUt,"SPAN",{});var pUt=s(PAe);T(_k.$$.fragment,pUt),pUt.forEach(t),hUt.forEach(t),jtt=i(TUe),BAe=n(TUe,"SPAN",{});var _Ut=s(BAe);Dtt=r(_Ut,"FlaxAutoModelForNextSentencePrediction"),_Ut.forEach(t),TUe.forEach(t),gQe=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(uk.$$.fragment,Ci),Gtt=i(Ci),wf=n(Ci,"P",{});var tne=s(wf);Ott=r(tne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tte=n(tne,"A",{href:!0});var uUt=s(tte);Vtt=r(uUt,"from_pretrained()"),uUt.forEach(t),Xtt=r(tne," class method or the "),ate=n(tne,"A",{href:!0});var bUt=s(ate);ztt=r(bUt,"from_config()"),bUt.forEach(t),Wtt=r(tne,` class
method.`),tne.forEach(t),Qtt=i(Ci),bk=n(Ci,"P",{});var MUe=s(bk);Htt=r(MUe,"This class cannot be instantiated directly using "),IAe=n(MUe,"CODE",{});var vUt=s(IAe);Utt=r(vUt,"__init__()"),vUt.forEach(t),Jtt=r(MUe," (throws an error)."),MUe.forEach(t),Ytt=i(Ci),ra=n(Ci,"DIV",{class:!0});var mL=s(ra);T(vk.$$.fragment,mL),Ktt=i(mL),NAe=n(mL,"P",{});var FUt=s(NAe);Ztt=r(FUt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FUt.forEach(t),eat=i(mL),Af=n(mL,"P",{});var ane=s(Af);oat=r(ane,`Note:
Loading a model from its configuration file does `),qAe=n(ane,"STRONG",{});var TUt=s(qAe);rat=r(TUt,"not"),TUt.forEach(t),tat=r(ane,` load the model weights. It only affects the
model\u2019s configuration. Use `),nte=n(ane,"A",{href:!0});var MUt=s(nte);aat=r(MUt,"from_pretrained()"),MUt.forEach(t),nat=r(ane," to load the model weights."),ane.forEach(t),sat=i(mL),T(Gw.$$.fragment,mL),mL.forEach(t),lat=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(Fk.$$.fragment,wi),iat=i(wi),jAe=n(wi,"P",{});var EUt=s(jAe);dat=r(EUt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EUt.forEach(t),cat=i(wi),kn=n(wi,"P",{});var gL=s(kn);fat=r(gL,"The model class to instantiate is selected based on the "),DAe=n(gL,"CODE",{});var CUt=s(DAe);mat=r(CUt,"model_type"),CUt.forEach(t),gat=r(gL,` property of the config object (either
passed as an argument or loaded from `),GAe=n(gL,"CODE",{});var wUt=s(GAe);hat=r(wUt,"pretrained_model_name_or_path"),wUt.forEach(t),pat=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OAe=n(gL,"CODE",{});var AUt=s(OAe);_at=r(AUt,"pretrained_model_name_or_path"),AUt.forEach(t),uat=r(gL,":"),gL.forEach(t),bat=i(wi),VAe=n(wi,"UL",{});var LUt=s(VAe);Ow=n(LUt,"LI",{});var dze=s(Ow);XAe=n(dze,"STRONG",{});var yUt=s(XAe);vat=r(yUt,"bert"),yUt.forEach(t),Fat=r(dze," \u2014 "),ste=n(dze,"A",{href:!0});var xUt=s(ste);Tat=r(xUt,"FlaxBertForNextSentencePrediction"),xUt.forEach(t),Mat=r(dze," (BERT model)"),dze.forEach(t),LUt.forEach(t),Eat=i(wi),T(Vw.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),hQe=i(f),Lf=n(f,"H2",{class:!0});var EUe=s(Lf);Xw=n(EUe,"A",{id:!0,class:!0,href:!0});var $Ut=s(Xw);zAe=n($Ut,"SPAN",{});var kUt=s(zAe);T(Tk.$$.fragment,kUt),kUt.forEach(t),$Ut.forEach(t),Cat=i(EUe),WAe=n(EUe,"SPAN",{});var SUt=s(WAe);wat=r(SUt,"FlaxAutoModelForImageClassification"),SUt.forEach(t),EUe.forEach(t),pQe=i(f),Ar=n(f,"DIV",{class:!0});var Ai=s(Ar);T(Mk.$$.fragment,Ai),Aat=i(Ai),yf=n(Ai,"P",{});var nne=s(yf);Lat=r(nne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lte=n(nne,"A",{href:!0});var RUt=s(lte);yat=r(RUt,"from_pretrained()"),RUt.forEach(t),xat=r(nne," class method or the "),ite=n(nne,"A",{href:!0});var PUt=s(ite);$at=r(PUt,"from_config()"),PUt.forEach(t),kat=r(nne,` class
method.`),nne.forEach(t),Sat=i(Ai),Ek=n(Ai,"P",{});var CUe=s(Ek);Rat=r(CUe,"This class cannot be instantiated directly using "),QAe=n(CUe,"CODE",{});var BUt=s(QAe);Pat=r(BUt,"__init__()"),BUt.forEach(t),Bat=r(CUe," (throws an error)."),CUe.forEach(t),Iat=i(Ai),ta=n(Ai,"DIV",{class:!0});var hL=s(ta);T(Ck.$$.fragment,hL),Nat=i(hL),HAe=n(hL,"P",{});var IUt=s(HAe);qat=r(IUt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),IUt.forEach(t),jat=i(hL),xf=n(hL,"P",{});var sne=s(xf);Dat=r(sne,`Note:
Loading a model from its configuration file does `),UAe=n(sne,"STRONG",{});var NUt=s(UAe);Gat=r(NUt,"not"),NUt.forEach(t),Oat=r(sne,` load the model weights. It only affects the
model\u2019s configuration. Use `),dte=n(sne,"A",{href:!0});var qUt=s(dte);Vat=r(qUt,"from_pretrained()"),qUt.forEach(t),Xat=r(sne," to load the model weights."),sne.forEach(t),zat=i(hL),T(zw.$$.fragment,hL),hL.forEach(t),Wat=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(wk.$$.fragment,Li),Qat=i(Li),JAe=n(Li,"P",{});var jUt=s(JAe);Hat=r(jUt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jUt.forEach(t),Uat=i(Li),Sn=n(Li,"P",{});var pL=s(Sn);Jat=r(pL,"The model class to instantiate is selected based on the "),YAe=n(pL,"CODE",{});var DUt=s(YAe);Yat=r(DUt,"model_type"),DUt.forEach(t),Kat=r(pL,` property of the config object (either
passed as an argument or loaded from `),KAe=n(pL,"CODE",{});var GUt=s(KAe);Zat=r(GUt,"pretrained_model_name_or_path"),GUt.forEach(t),ent=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZAe=n(pL,"CODE",{});var OUt=s(ZAe);ont=r(OUt,"pretrained_model_name_or_path"),OUt.forEach(t),rnt=r(pL,":"),pL.forEach(t),tnt=i(Li),Ak=n(Li,"UL",{});var wUe=s(Ak);Ww=n(wUe,"LI",{});var cze=s(Ww);e7e=n(cze,"STRONG",{});var VUt=s(e7e);ant=r(VUt,"beit"),VUt.forEach(t),nnt=r(cze," \u2014 "),cte=n(cze,"A",{href:!0});var XUt=s(cte);snt=r(XUt,"FlaxBeitForImageClassification"),XUt.forEach(t),lnt=r(cze," (BEiT model)"),cze.forEach(t),int=i(wUe),Qw=n(wUe,"LI",{});var fze=s(Qw);o7e=n(fze,"STRONG",{});var zUt=s(o7e);dnt=r(zUt,"vit"),zUt.forEach(t),cnt=r(fze," \u2014 "),fte=n(fze,"A",{href:!0});var WUt=s(fte);fnt=r(WUt,"FlaxViTForImageClassification"),WUt.forEach(t),mnt=r(fze," (ViT model)"),fze.forEach(t),wUe.forEach(t),gnt=i(Li),T(Hw.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),_Qe=i(f),$f=n(f,"H2",{class:!0});var AUe=s($f);Uw=n(AUe,"A",{id:!0,class:!0,href:!0});var QUt=s(Uw);r7e=n(QUt,"SPAN",{});var HUt=s(r7e);T(Lk.$$.fragment,HUt),HUt.forEach(t),QUt.forEach(t),hnt=i(AUe),t7e=n(AUe,"SPAN",{});var UUt=s(t7e);pnt=r(UUt,"FlaxAutoModelForVision2Seq"),UUt.forEach(t),AUe.forEach(t),uQe=i(f),Lr=n(f,"DIV",{class:!0});var yi=s(Lr);T(yk.$$.fragment,yi),_nt=i(yi),kf=n(yi,"P",{});var lne=s(kf);unt=r(lne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mte=n(lne,"A",{href:!0});var JUt=s(mte);bnt=r(JUt,"from_pretrained()"),JUt.forEach(t),vnt=r(lne," class method or the "),gte=n(lne,"A",{href:!0});var YUt=s(gte);Fnt=r(YUt,"from_config()"),YUt.forEach(t),Tnt=r(lne,` class
method.`),lne.forEach(t),Mnt=i(yi),xk=n(yi,"P",{});var LUe=s(xk);Ent=r(LUe,"This class cannot be instantiated directly using "),a7e=n(LUe,"CODE",{});var KUt=s(a7e);Cnt=r(KUt,"__init__()"),KUt.forEach(t),wnt=r(LUe," (throws an error)."),LUe.forEach(t),Ant=i(yi),aa=n(yi,"DIV",{class:!0});var _L=s(aa);T($k.$$.fragment,_L),Lnt=i(_L),n7e=n(_L,"P",{});var ZUt=s(n7e);ynt=r(ZUt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZUt.forEach(t),xnt=i(_L),Sf=n(_L,"P",{});var ine=s(Sf);$nt=r(ine,`Note:
Loading a model from its configuration file does `),s7e=n(ine,"STRONG",{});var eJt=s(s7e);knt=r(eJt,"not"),eJt.forEach(t),Snt=r(ine,` load the model weights. It only affects the
model\u2019s configuration. Use `),hte=n(ine,"A",{href:!0});var oJt=s(hte);Rnt=r(oJt,"from_pretrained()"),oJt.forEach(t),Pnt=r(ine," to load the model weights."),ine.forEach(t),Bnt=i(_L),T(Jw.$$.fragment,_L),_L.forEach(t),Int=i(yi),ot=n(yi,"DIV",{class:!0});var xi=s(ot);T(kk.$$.fragment,xi),Nnt=i(xi),l7e=n(xi,"P",{});var rJt=s(l7e);qnt=r(rJt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rJt.forEach(t),jnt=i(xi),Rn=n(xi,"P",{});var uL=s(Rn);Dnt=r(uL,"The model class to instantiate is selected based on the "),i7e=n(uL,"CODE",{});var tJt=s(i7e);Gnt=r(tJt,"model_type"),tJt.forEach(t),Ont=r(uL,` property of the config object (either
passed as an argument or loaded from `),d7e=n(uL,"CODE",{});var aJt=s(d7e);Vnt=r(aJt,"pretrained_model_name_or_path"),aJt.forEach(t),Xnt=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=n(uL,"CODE",{});var nJt=s(c7e);znt=r(nJt,"pretrained_model_name_or_path"),nJt.forEach(t),Wnt=r(uL,":"),uL.forEach(t),Qnt=i(xi),f7e=n(xi,"UL",{});var sJt=s(f7e);Yw=n(sJt,"LI",{});var mze=s(Yw);m7e=n(mze,"STRONG",{});var lJt=s(m7e);Hnt=r(lJt,"vision-encoder-decoder"),lJt.forEach(t),Unt=r(mze," \u2014 "),pte=n(mze,"A",{href:!0});var iJt=s(pte);Jnt=r(iJt,"FlaxVisionEncoderDecoderModel"),iJt.forEach(t),Ynt=r(mze," (Vision Encoder decoder model)"),mze.forEach(t),sJt.forEach(t),Knt=i(xi),T(Kw.$$.fragment,xi),xi.forEach(t),yi.forEach(t),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(hKt)),d(m,"id","auto-classes"),d(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m,"href","#auto-classes"),d(p,"class","relative group"),d(Bn,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.AutoConfig"),d(Nn,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.AutoModel"),d(qn,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.AutoTokenizer"),d(Ii,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertModel"),d(Df,"id","extending-the-auto-classes"),d(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Df,"href","#extending-the-auto-classes"),d(Ni,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(qi,"class","relative group"),d(lR,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(iR,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertConfig"),d(dR,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartConfig"),d(cR,"href","/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitConfig"),d(fR,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertConfig"),d(mR,"href","/docs/transformers/pr_18326/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(gR,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdConfig"),d(hR,"href","/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(pR,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(_R,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(uR,"href","/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomConfig"),d(bR,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertConfig"),d(vR,"href","/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineConfig"),d(FR,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPConfig"),d(TR,"href","/docs/transformers/pr_18326/en/model_doc/codegen#transformers.CodeGenConfig"),d(MR,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertConfig"),d(ER,"href","/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextConfig"),d(CR,"href","/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLConfig"),d(wR,"href","/docs/transformers/pr_18326/en/model_doc/cvt#transformers.CvtConfig"),d(AR,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(LR,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(yR,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(xR,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaConfig"),d($R,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(kR,"href","/docs/transformers/pr_18326/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(SR,"href","/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTConfig"),d(RR,"href","/docs/transformers/pr_18326/en/model_doc/detr#transformers.DetrConfig"),d(PR,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertConfig"),d(BR,"href","/docs/transformers/pr_18326/en/model_doc/dpr#transformers.DPRConfig"),d(IR,"href","/docs/transformers/pr_18326/en/model_doc/dpt#transformers.DPTConfig"),d(NR,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraConfig"),d(qR,"href","/docs/transformers/pr_18326/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(jR,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertConfig"),d(DR,"href","/docs/transformers/pr_18326/en/model_doc/flava#transformers.FlavaConfig"),d(GR,"href","/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetConfig"),d(OR,"href","/docs/transformers/pr_18326/en/model_doc/fsmt#transformers.FSMTConfig"),d(VR,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelConfig"),d(XR,"href","/docs/transformers/pr_18326/en/model_doc/glpn#transformers.GLPNConfig"),d(zR,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Config"),d(WR,"href","/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(QR,"href","/docs/transformers/pr_18326/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(HR,"href","/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJConfig"),d(UR,"href","/docs/transformers/pr_18326/en/model_doc/groupvit#transformers.GroupViTConfig"),d(JR,"href","/docs/transformers/pr_18326/en/model_doc/hubert#transformers.HubertConfig"),d(YR,"href","/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertConfig"),d(KR,"href","/docs/transformers/pr_18326/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(ZR,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(eP,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(oP,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),d(rP,"href","/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDConfig"),d(tP,"href","/docs/transformers/pr_18326/en/model_doc/levit#transformers.LevitConfig"),d(aP,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerConfig"),d(nP,"href","/docs/transformers/pr_18326/en/model_doc/longt5#transformers.LongT5Config"),d(sP,"href","/docs/transformers/pr_18326/en/model_doc/luke#transformers.LukeConfig"),d(lP,"href","/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertConfig"),d(iP,"href","/docs/transformers/pr_18326/en/model_doc/m2m_100#transformers.M2M100Config"),d(dP,"href","/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianConfig"),d(cP,"href","/docs/transformers/pr_18326/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(fP,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartConfig"),d(mP,"href","/docs/transformers/pr_18326/en/model_doc/mctct#transformers.MCTCTConfig"),d(gP,"href","/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(hP,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(pP,"href","/docs/transformers/pr_18326/en/model_doc/mobilevit#transformers.MobileViTConfig"),d(_P,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetConfig"),d(uP,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.MT5Config"),d(bP,"href","/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpConfig"),d(vP,"href","/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaConfig"),d(FP,"href","/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(TP,"href","/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(MP,"href","/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTConfig"),d(EP,"href","/docs/transformers/pr_18326/en/model_doc/owlvit#transformers.OwlViTConfig"),d(CP,"href","/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusConfig"),d(wP,"href","/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverConfig"),d(AP,"href","/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartConfig"),d(LP,"href","/docs/transformers/pr_18326/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(yP,"href","/docs/transformers/pr_18326/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(xP,"href","/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertConfig"),d($P,"href","/docs/transformers/pr_18326/en/model_doc/rag#transformers.RagConfig"),d(kP,"href","/docs/transformers/pr_18326/en/model_doc/realm#transformers.RealmConfig"),d(SP,"href","/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerConfig"),d(RP,"href","/docs/transformers/pr_18326/en/model_doc/regnet#transformers.RegNetConfig"),d(PP,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertConfig"),d(BP,"href","/docs/transformers/pr_18326/en/model_doc/resnet#transformers.ResNetConfig"),d(IP,"href","/docs/transformers/pr_18326/en/model_doc/retribert#transformers.RetriBertConfig"),d(NP,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaConfig"),d(qP,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerConfig"),d(jP,"href","/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerConfig"),d(DP,"href","/docs/transformers/pr_18326/en/model_doc/sew#transformers.SEWConfig"),d(GP,"href","/docs/transformers/pr_18326/en/model_doc/sew-d#transformers.SEWDConfig"),d(OP,"href","/docs/transformers/pr_18326/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(VP,"href","/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(XP,"href","/docs/transformers/pr_18326/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(zP,"href","/docs/transformers/pr_18326/en/model_doc/splinter#transformers.SplinterConfig"),d(WP,"href","/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(QP,"href","/docs/transformers/pr_18326/en/model_doc/swin#transformers.SwinConfig"),d(HP,"href","/docs/transformers/pr_18326/en/model_doc/swinv2#transformers.Swinv2Config"),d(UP,"href","/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Config"),d(JP,"href","/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasConfig"),d(YP,"href","/docs/transformers/pr_18326/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),d(KP,"href","/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(ZP,"href","/docs/transformers/pr_18326/en/model_doc/trocr#transformers.TrOCRConfig"),d(eB,"href","/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(oB,"href","/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(rB,"href","/docs/transformers/pr_18326/en/model_doc/van#transformers.VanConfig"),d(tB,"href","/docs/transformers/pr_18326/en/model_doc/vilt#transformers.ViltConfig"),d(aB,"href","/docs/transformers/pr_18326/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(nB,"href","/docs/transformers/pr_18326/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(sB,"href","/docs/transformers/pr_18326/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(lB,"href","/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTConfig"),d(iB,"href","/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(dB,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(cB,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),d(fB,"href","/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMConfig"),d(mB,"href","/docs/transformers/pr_18326/en/model_doc/xglm#transformers.XGLMConfig"),d(gB,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMConfig"),d(hB,"href","/docs/transformers/pr_18326/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(pB,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(_B,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(uB,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetConfig"),d(bB,"href","/docs/transformers/pr_18326/en/model_doc/yolos#transformers.YolosConfig"),d(vB,"href","/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoConfig"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(th,"id","transformers.AutoTokenizer"),d(th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(th,"href","#transformers.AutoTokenizer"),d(Di,"class","relative group"),d(FB,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(TB,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertTokenizer"),d(MB,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(EB,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartTokenizer"),d(CB,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartTokenizerFast"),d(wB,"href","/docs/transformers/pr_18326/en/model_doc/barthez#transformers.BarthezTokenizer"),d(AB,"href","/docs/transformers/pr_18326/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(LB,"href","/docs/transformers/pr_18326/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(yB,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertTokenizer"),d(xB,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertTokenizerFast"),d($B,"href","/docs/transformers/pr_18326/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(kB,"href","/docs/transformers/pr_18326/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(SB,"href","/docs/transformers/pr_18326/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(RB,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(PB,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(BB,"href","/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(IB,"href","/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(NB,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(qB,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(jB,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(DB,"href","/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomTokenizerFast"),d(GB,"href","/docs/transformers/pr_18326/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(OB,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertTokenizer"),d(VB,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(XB,"href","/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineTokenizer"),d(zB,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPTokenizer"),d(WB,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(QB,"href","/docs/transformers/pr_18326/en/model_doc/codegen#transformers.CodeGenTokenizer"),d(HB,"href","/docs/transformers/pr_18326/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),d(UB,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(JB,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(YB,"href","/docs/transformers/pr_18326/en/model_doc/cpm#transformers.CpmTokenizer"),d(KB,"href","/docs/transformers/pr_18326/en/model_doc/cpm#transformers.CpmTokenizerFast"),d(ZB,"href","/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(eI,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaTokenizer"),d(oI,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(rI,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaTokenizer"),d(tI,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(aI,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(nI,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(sI,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(lI,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(iI,"href","/docs/transformers/pr_18326/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(dI,"href","/docs/transformers/pr_18326/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(cI,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraTokenizer"),d(fI,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(mI,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(gI,"href","/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetTokenizer"),d(hI,"href","/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(pI,"href","/docs/transformers/pr_18326/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(_I,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelTokenizer"),d(uI,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(bI,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(vI,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(FI,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(TI,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(MI,"href","/docs/transformers/pr_18326/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(EI,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(CI,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(wI,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPTokenizer"),d(AI,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(LI,"href","/docs/transformers/pr_18326/en/model_doc/herbert#transformers.HerbertTokenizer"),d(yI,"href","/docs/transformers/pr_18326/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(xI,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d($I,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaTokenizer"),d(kI,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(SI,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(RI,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(PI,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(BI,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(II,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(NI,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d(qI,"href","/docs/transformers/pr_18326/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(jI,"href","/docs/transformers/pr_18326/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(DI,"href","/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDTokenizer"),d(GI,"href","/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDTokenizerFast"),d(OI,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerTokenizer"),d(VI,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(XI,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.T5Tokenizer"),d(zI,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.T5TokenizerFast"),d(WI,"href","/docs/transformers/pr_18326/en/model_doc/luke#transformers.LukeTokenizer"),d(QI,"href","/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(HI,"href","/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(UI,"href","/docs/transformers/pr_18326/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(JI,"href","/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianTokenizer"),d(YI,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartTokenizer"),d(KI,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(ZI,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(eN,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(oN,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertTokenizer"),d(rN,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertTokenizerFast"),d(tN,"href","/docs/transformers/pr_18326/en/model_doc/mluke#transformers.MLukeTokenizer"),d(aN,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(nN,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(sN,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(lN,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(iN,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.T5Tokenizer"),d(dN,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.T5TokenizerFast"),d(cN,"href","/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpTokenizer"),d(fN,"href","/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpTokenizerFast"),d(mN,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertTokenizer"),d(gN,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertTokenizerFast"),d(hN,"href","/docs/transformers/pr_18326/en/model_doc/nllb#transformers.NllbTokenizer"),d(pN,"href","/docs/transformers/pr_18326/en/model_doc/nllb#transformers.NllbTokenizerFast"),d(_N,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertTokenizer"),d(uN,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(bN,"href","/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(vN,"href","/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(FN,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(TN,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPTokenizer"),d(MN,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(EN,"href","/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(CN,"href","/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(wN,"href","/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(AN,"href","/docs/transformers/pr_18326/en/model_doc/phobert#transformers.PhobertTokenizer"),d(LN,"href","/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartTokenizer"),d(yN,"href","/docs/transformers/pr_18326/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(xN,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertTokenizer"),d($N,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertTokenizerFast"),d(kN,"href","/docs/transformers/pr_18326/en/model_doc/rag#transformers.RagTokenizer"),d(SN,"href","/docs/transformers/pr_18326/en/model_doc/realm#transformers.RealmTokenizer"),d(RN,"href","/docs/transformers/pr_18326/en/model_doc/realm#transformers.RealmTokenizerFast"),d(PN,"href","/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerTokenizer"),d(BN,"href","/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(IN,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertTokenizer"),d(NN,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(qN,"href","/docs/transformers/pr_18326/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(jN,"href","/docs/transformers/pr_18326/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(DN,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaTokenizer"),d(GN,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(ON,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(VN,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(XN,"href","/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(zN,"href","/docs/transformers/pr_18326/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(WN,"href","/docs/transformers/pr_18326/en/model_doc/splinter#transformers.SplinterTokenizer"),d(QN,"href","/docs/transformers/pr_18326/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(HN,"href","/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(UN,"href","/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(JN,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.T5Tokenizer"),d(YN,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.T5TokenizerFast"),d(KN,"href","/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasTokenizer"),d(ZN,"href","/docs/transformers/pr_18326/en/model_doc/tapex#transformers.TapexTokenizer"),d(eq,"href","/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(oq,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertTokenizer"),d(rq,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertTokenizerFast"),d(tq,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertTokenizer"),d(aq,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertTokenizerFast"),d(nq,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(sq,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(lq,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(iq,"href","/docs/transformers/pr_18326/en/model_doc/xglm#transformers.XGLMTokenizer"),d(dq,"href","/docs/transformers/pr_18326/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(cq,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMTokenizer"),d(fq,"href","/docs/transformers/pr_18326/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(mq,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(gq,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(hq,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaTokenizer"),d(pq,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(_q,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(uq,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(bq,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertTokenizer"),d(vq,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"id","transformers.AutoFeatureExtractor"),d(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jh,"href","#transformers.AutoFeatureExtractor"),d(Gi,"class","relative group"),d(Fq,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(Tq,"href","/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Mq,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Eq,"href","/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Cq,"href","/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(wq,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Aq,"href","/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Lq,"href","/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(yq,"href","/docs/transformers/pr_18326/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(xq,"href","/docs/transformers/pr_18326/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d($q,"href","/docs/transformers/pr_18326/en/model_doc/flava#transformers.FlavaFeatureExtractor"),d(kq,"href","/docs/transformers/pr_18326/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(Sq,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Rq,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Pq,"href","/docs/transformers/pr_18326/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(Bq,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(Iq,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),d(Nq,"href","/docs/transformers/pr_18326/en/model_doc/levit#transformers.LevitFeatureExtractor"),d(qq,"href","/docs/transformers/pr_18326/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(jq,"href","/docs/transformers/pr_18326/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),d(Dq,"href","/docs/transformers/pr_18326/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),d(Gq,"href","/docs/transformers/pr_18326/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Oq,"href","/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Vq,"href","/docs/transformers/pr_18326/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Xq,"href","/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(zq,"href","/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Wq,"href","/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Qq,"href","/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(Hq,"href","/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Uq,"href","/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Jq,"href","/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Yq,"href","/docs/transformers/pr_18326/en/model_doc/vilt#transformers.ViltFeatureExtractor"),d(Kq,"href","/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Zq,"href","/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(ej,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(oj,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(rj,"href","/docs/transformers/pr_18326/en/model_doc/yolos#transformers.YolosFeatureExtractor"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wp,"id","transformers.AutoProcessor"),d(wp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wp,"href","#transformers.AutoProcessor"),d(Oi,"class","relative group"),d(tj,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(aj,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPProcessor"),d(nj,"href","/docs/transformers/pr_18326/en/model_doc/flava#transformers.FlavaProcessor"),d(sj,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPProcessor"),d(lj,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(ij,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),d(dj,"href","/docs/transformers/pr_18326/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(cj,"href","/docs/transformers/pr_18326/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(fj,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(mj,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(gj,"href","/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(hj,"href","/docs/transformers/pr_18326/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(pj,"href","/docs/transformers/pr_18326/en/model_doc/trocr#transformers.TrOCRProcessor"),d(_j,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(uj,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(bj,"href","/docs/transformers/pr_18326/en/model_doc/vilt#transformers.ViltProcessor"),d(vj,"href","/docs/transformers/pr_18326/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(Fj,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Tj,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Mj,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hp,"id","transformers.AutoModel"),d(Hp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hp,"href","#transformers.AutoModel"),d(Xi,"class","relative group"),d(Ej,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Cj,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wj,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Aj,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertModel"),d(Lj,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartModel"),d(yj,"href","/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitModel"),d(xj,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertModel"),d($j,"href","/docs/transformers/pr_18326/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(kj,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdModel"),d(Sj,"href","/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Rj,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Pj,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Bj,"href","/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomModel"),d(Ij,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertModel"),d(Nj,"href","/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineModel"),d(qj,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.CLIPModel"),d(jj,"href","/docs/transformers/pr_18326/en/model_doc/codegen#transformers.CodeGenModel"),d(Dj,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertModel"),d(Gj,"href","/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextModel"),d(Oj,"href","/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLModel"),d(Vj,"href","/docs/transformers/pr_18326/en/model_doc/cvt#transformers.CvtModel"),d(Xj,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(zj,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(Wj,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(Qj,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaModel"),d(Hj,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(Uj,"href","/docs/transformers/pr_18326/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(Jj,"href","/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTModel"),d(Yj,"href","/docs/transformers/pr_18326/en/model_doc/detr#transformers.DetrModel"),d(Kj,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertModel"),d(Zj,"href","/docs/transformers/pr_18326/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(eD,"href","/docs/transformers/pr_18326/en/model_doc/dpt#transformers.DPTModel"),d(oD,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraModel"),d(rD,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertModel"),d(tD,"href","/docs/transformers/pr_18326/en/model_doc/flava#transformers.FlavaModel"),d(aD,"href","/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetModel"),d(nD,"href","/docs/transformers/pr_18326/en/model_doc/fsmt#transformers.FSMTModel"),d(sD,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelModel"),d(lD,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelBaseModel"),d(iD,"href","/docs/transformers/pr_18326/en/model_doc/glpn#transformers.GLPNModel"),d(dD,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2Model"),d(cD,"href","/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(fD,"href","/docs/transformers/pr_18326/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(mD,"href","/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJModel"),d(gD,"href","/docs/transformers/pr_18326/en/model_doc/groupvit#transformers.GroupViTModel"),d(hD,"href","/docs/transformers/pr_18326/en/model_doc/hubert#transformers.HubertModel"),d(pD,"href","/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertModel"),d(_D,"href","/docs/transformers/pr_18326/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(uD,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(bD,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(vD,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),d(FD,"href","/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDModel"),d(TD,"href","/docs/transformers/pr_18326/en/model_doc/levit#transformers.LevitModel"),d(MD,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerModel"),d(ED,"href","/docs/transformers/pr_18326/en/model_doc/longt5#transformers.LongT5Model"),d(CD,"href","/docs/transformers/pr_18326/en/model_doc/luke#transformers.LukeModel"),d(wD,"href","/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertModel"),d(AD,"href","/docs/transformers/pr_18326/en/model_doc/m2m_100#transformers.M2M100Model"),d(LD,"href","/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianModel"),d(yD,"href","/docs/transformers/pr_18326/en/model_doc/maskformer#transformers.MaskFormerModel"),d(xD,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartModel"),d($D,"href","/docs/transformers/pr_18326/en/model_doc/mctct#transformers.MCTCTModel"),d(kD,"href","/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(SD,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertModel"),d(RD,"href","/docs/transformers/pr_18326/en/model_doc/mobilevit#transformers.MobileViTModel"),d(PD,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetModel"),d(BD,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.MT5Model"),d(ID,"href","/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpModel"),d(ND,"href","/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaModel"),d(qD,"href","/docs/transformers/pr_18326/en/model_doc/m2m_100#transformers.M2M100Model"),d(jD,"href","/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerModel"),d(DD,"href","/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(GD,"href","/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTModel"),d(OD,"href","/docs/transformers/pr_18326/en/model_doc/owlvit#transformers.OwlViTModel"),d(VD,"href","/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusModel"),d(XD,"href","/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverModel"),d(zD,"href","/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartModel"),d(WD,"href","/docs/transformers/pr_18326/en/model_doc/poolformer#transformers.PoolFormerModel"),d(QD,"href","/docs/transformers/pr_18326/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(HD,"href","/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertModel"),d(UD,"href","/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerModel"),d(JD,"href","/docs/transformers/pr_18326/en/model_doc/regnet#transformers.RegNetModel"),d(YD,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertModel"),d(KD,"href","/docs/transformers/pr_18326/en/model_doc/resnet#transformers.ResNetModel"),d(ZD,"href","/docs/transformers/pr_18326/en/model_doc/retribert#transformers.RetriBertModel"),d(eG,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaModel"),d(oG,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerModel"),d(rG,"href","/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerModel"),d(tG,"href","/docs/transformers/pr_18326/en/model_doc/sew#transformers.SEWModel"),d(aG,"href","/docs/transformers/pr_18326/en/model_doc/sew-d#transformers.SEWDModel"),d(nG,"href","/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(sG,"href","/docs/transformers/pr_18326/en/model_doc/splinter#transformers.SplinterModel"),d(lG,"href","/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(iG,"href","/docs/transformers/pr_18326/en/model_doc/swin#transformers.SwinModel"),d(dG,"href","/docs/transformers/pr_18326/en/model_doc/swinv2#transformers.Swinv2Model"),d(cG,"href","/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5Model"),d(fG,"href","/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasModel"),d(mG,"href","/docs/transformers/pr_18326/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),d(gG,"href","/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(hG,"href","/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechModel"),d(pG,"href","/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(_G,"href","/docs/transformers/pr_18326/en/model_doc/van#transformers.VanModel"),d(uG,"href","/docs/transformers/pr_18326/en/model_doc/vilt#transformers.ViltModel"),d(bG,"href","/docs/transformers/pr_18326/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(vG,"href","/docs/transformers/pr_18326/en/model_doc/visual_bert#transformers.VisualBertModel"),d(FG,"href","/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTModel"),d(TG,"href","/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(MG,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(EG,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),d(CG,"href","/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMModel"),d(wG,"href","/docs/transformers/pr_18326/en/model_doc/xglm#transformers.XGLMModel"),d(AG,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMModel"),d(LG,"href","/docs/transformers/pr_18326/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(yG,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(xG,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d($G,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetModel"),d(kG,"href","/docs/transformers/pr_18326/en/model_doc/yolos#transformers.YolosModel"),d(SG,"href","/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoModel"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t2,"id","transformers.AutoModelForPreTraining"),d(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t2,"href","#transformers.AutoModelForPreTraining"),d(Qi,"class","relative group"),d(RG,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PG,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BG,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IG,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertForPreTraining"),d(NG,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(qG,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForPreTraining"),d(jG,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(DG,"href","/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomForCausalLM"),d(GG,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(OG,"href","/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(VG,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(XG,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(zG,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(WG,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(QG,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForPreTraining"),d(HG,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(UG,"href","/docs/transformers/pr_18326/en/model_doc/flava#transformers.FlavaForPreTraining"),d(JG,"href","/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForPreTraining"),d(YG,"href","/docs/transformers/pr_18326/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(KG,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(ZG,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(eO,"href","/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(oO,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(rO,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(tO,"href","/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(aO,"href","/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(nO,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(sO,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(lO,"href","/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(iO,"href","/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForPreTraining"),d(dO,"href","/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(cO,"href","/docs/transformers/pr_18326/en/model_doc/retribert#transformers.RetriBertModel"),d(fO,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(mO,"href","/docs/transformers/pr_18326/en/model_doc/splinter#transformers.SplinterForPreTraining"),d(gO,"href","/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(hO,"href","/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(pO,"href","/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(_O,"href","/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(uO,"href","/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(bO,"href","/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(vO,"href","/docs/transformers/pr_18326/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(FO,"href","/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(TO,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(MO,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),d(EO,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(CO,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(wO,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(AO,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K2,"id","transformers.AutoModelForCausalLM"),d(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K2,"href","#transformers.AutoModelForCausalLM"),d(Ji,"class","relative group"),d(LO,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yO,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xO,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($O,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartForCausalLM"),d(kO,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertLMHeadModel"),d(SO,"href","/docs/transformers/pr_18326/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(RO,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(PO,"href","/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(BO,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(IO,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(NO,"href","/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomForCausalLM"),d(qO,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(jO,"href","/docs/transformers/pr_18326/en/model_doc/codegen#transformers.CodeGenForCausalLM"),d(DO,"href","/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(GO,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(OO,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForCausalLM"),d(VO,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(XO,"href","/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(zO,"href","/docs/transformers/pr_18326/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(WO,"href","/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(QO,"href","/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianForCausalLM"),d(HO,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartForCausalLM"),d(UO,"href","/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(JO,"href","/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpForCausalLM"),d(YO,"href","/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(KO,"href","/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTForCausalLM"),d(ZO,"href","/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(eV,"href","/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(oV,"href","/docs/transformers/pr_18326/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(rV,"href","/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(tV,"href","/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(aV,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(nV,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(sV,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(lV,"href","/docs/transformers/pr_18326/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(iV,"href","/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(dV,"href","/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(cV,"href","/docs/transformers/pr_18326/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(fV,"href","/docs/transformers/pr_18326/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(mV,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(gV,"href","/docs/transformers/pr_18326/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(hV,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(pV,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(_V,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V1,"id","transformers.AutoModelForMaskedLM"),d(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V1,"href","#transformers.AutoModelForMaskedLM"),d(Zi,"class","relative group"),d(uV,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bV,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vV,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FV,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(TV,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(MV,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForMaskedLM"),d(EV,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(CV,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(wV,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(AV,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(LV,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(yV,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(xV,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d($V,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(kV,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(SV,"href","/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(RV,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(PV,"href","/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(BV,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(IV,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(NV,"href","/docs/transformers/pr_18326/en/model_doc/luke#transformers.LukeForMaskedLM"),d(qV,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(jV,"href","/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(DV,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(GV,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(OV,"href","/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(VV,"href","/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForMaskedLM"),d(XV,"href","/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(zV,"href","/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(WV,"href","/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(QV,"href","/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(HV,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(UV,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(JV,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(YV,"href","/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(KV,"href","/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(ZV,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(eX,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(oX,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(rX,"href","/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kb,"id","transformers.AutoModelForSeq2SeqLM"),d(kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kb,"href","#transformers.AutoModelForSeq2SeqLM"),d(rd,"class","relative group"),d(tX,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aX,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nX,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sX,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(lX,"href","/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(iX,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(dX,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(cX,"href","/docs/transformers/pr_18326/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(fX,"href","/docs/transformers/pr_18326/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(mX,"href","/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(gX,"href","/docs/transformers/pr_18326/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(hX,"href","/docs/transformers/pr_18326/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(pX,"href","/docs/transformers/pr_18326/en/model_doc/marian#transformers.MarianMTModel"),d(_X,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(uX,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(bX,"href","/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(vX,"href","/docs/transformers/pr_18326/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(FX,"href","/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(TX,"href","/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(MX,"href","/docs/transformers/pr_18326/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(EX,"href","/docs/transformers/pr_18326/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(CX,"href","/docs/transformers/pr_18326/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ev,"id","transformers.AutoModelForSequenceClassification"),d(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ev,"href","#transformers.AutoModelForSequenceClassification"),d(nd,"class","relative group"),d(wX,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AX,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LX,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yX,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(xX,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartForSequenceClassification"),d($X,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForSequenceClassification"),d(kX,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(SX,"href","/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(RX,"href","/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomForSequenceClassification"),d(PX,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(BX,"href","/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(IX,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(NX,"href","/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(qX,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(jX,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(DX,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(GX,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(OX,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(VX,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(XX,"href","/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(zX,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(WX,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(QX,"href","/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(HX,"href","/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(UX,"href","/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(JX,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(YX,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(KX,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDForSequenceClassification"),d(ez,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(oz,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(rz,"href","/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(tz,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(az,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(nz,"href","/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpForSequenceClassification"),d(sz,"href","/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),d(lz,"href","/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(iz,"href","/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(dz,"href","/docs/transformers/pr_18326/en/model_doc/opt#transformers.OPTForSequenceClassification"),d(cz,"href","/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(fz,"href","/docs/transformers/pr_18326/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(mz,"href","/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(gz,"href","/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(hz,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(pz,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(_z,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(uz,"href","/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(bz,"href","/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(vz,"href","/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(Cz,"href","/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o3,"id","transformers.AutoModelForMultipleChoice"),d(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o3,"href","#transformers.AutoModelForMultipleChoice"),d(id,"class","relative group"),d(wz,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Az,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Lz,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yz,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(xz,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForMultipleChoice"),d($z,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(kz,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(qz,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(jz,"href","/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(zz,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Hz,"href","/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Jz,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Yz,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Kz,"href","/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Zz,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(eW,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(oW,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(rW,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(tW,"href","/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(B3,"id","transformers.AutoModelForNextSentencePrediction"),d(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B3,"href","#transformers.AutoModelForNextSentencePrediction"),d(fd,"class","relative group"),d(aW,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nW,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sW,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lW,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(iW,"href","/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(dW,"href","/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(cW,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(fW,"href","/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),d(mW,"href","/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z3,"id","transformers.AutoModelForTokenClassification"),d(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z3,"href","#transformers.AutoModelForTokenClassification"),d(hd,"class","relative group"),d(gW,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hW,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pW,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_W,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(uW,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForTokenClassification"),d(bW,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(vW,"href","/docs/transformers/pr_18326/en/model_doc/bloom#transformers.BloomForTokenClassification"),d(FW,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(TW,"href","/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineForTokenClassification"),d(MW,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(EW,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(CW,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(wW,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(AW,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(LW,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(yW,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(xW,"href","/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForTokenClassification"),d($W,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(kW,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(SW,"href","/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(RW,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(PW,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(BW,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),d(IW,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(NW,"href","/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(qW,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(jW,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(DW,"href","/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForTokenClassification"),d(GW,"href","/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(OW,"href","/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(VW,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(XW,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(zW,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(WW,"href","/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(QW,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(HW,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(UW,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(JW,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(YW,"href","/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kF,"id","transformers.AutoModelForQuestionAnswering"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.AutoModelForQuestionAnswering"),d(ud,"class","relative group"),d(KW,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZW,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eQ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oQ,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_18326/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_18326/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(pQ,"href","/docs/transformers/pr_18326/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_18326/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_18326/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_18326/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_18326/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_18326/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_18326/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_18326/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_18326/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_18326/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_18326/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(IQ,"href","/docs/transformers/pr_18326/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(NQ,"href","/docs/transformers/pr_18326/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(qQ,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(jQ,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(DQ,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(GQ,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(OQ,"href","/docs/transformers/pr_18326/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E6,"id","transformers.AutoModelForTableQuestionAnswering"),d(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E6,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Fd,"class","relative group"),d(VQ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XQ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zQ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WQ,"href","/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y6,"id","transformers.AutoModelForImageClassification"),d(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y6,"href","#transformers.AutoModelForImageClassification"),d(Ed,"class","relative group"),d(QQ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HQ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UQ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JQ,"href","/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitForImageClassification"),d(YQ,"href","/docs/transformers/pr_18326/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(KQ,"href","/docs/transformers/pr_18326/en/model_doc/cvt#transformers.CvtForImageClassification"),d(ZQ,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(eH,"href","/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTForImageClassification"),d(oH,"href","/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(rH,"href","/docs/transformers/pr_18326/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(tH,"href","/docs/transformers/pr_18326/en/model_doc/levit#transformers.LevitForImageClassification"),d(aH,"href","/docs/transformers/pr_18326/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),d(nH,"href","/docs/transformers/pr_18326/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(sH,"href","/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(lH,"href","/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(iH,"href","/docs/transformers/pr_18326/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(dH,"href","/docs/transformers/pr_18326/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(cH,"href","/docs/transformers/pr_18326/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(fH,"href","/docs/transformers/pr_18326/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(mH,"href","/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(gH,"href","/docs/transformers/pr_18326/en/model_doc/swin#transformers.SwinForImageClassification"),d(hH,"href","/docs/transformers/pr_18326/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),d(pH,"href","/docs/transformers/pr_18326/en/model_doc/van#transformers.VanForImageClassification"),d(_H,"href","/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTForImageClassification"),d(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W6,"id","transformers.AutoModelForVision2Seq"),d(W6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W6,"href","#transformers.AutoModelForVision2Seq"),d(Ad,"class","relative group"),d(uH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FH,"href","/docs/transformers/pr_18326/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y6,"id","transformers.AutoModelForVisualQuestionAnswering"),d(Y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y6,"href","#transformers.AutoModelForVisualQuestionAnswering"),d(xd,"class","relative group"),d(TH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CH,"href","/docs/transformers/pr_18326/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rT,"id","transformers.AutoModelForAudioClassification"),d(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rT,"href","#transformers.AutoModelForAudioClassification"),d(Sd,"class","relative group"),d(wH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yH,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(xH,"href","/docs/transformers/pr_18326/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d($H,"href","/docs/transformers/pr_18326/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(kH,"href","/docs/transformers/pr_18326/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(SH,"href","/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(RH,"href","/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(PH,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(BH,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),d(IH,"href","/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pT,"id","transformers.AutoModelForAudioFrameClassification"),d(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pT,"href","#transformers.AutoModelForAudioFrameClassification"),d(Bd,"class","relative group"),d(NH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DH,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(GH,"href","/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(OH,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(VH,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),d(XH,"href","/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CT,"id","transformers.AutoModelForCTC"),d(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CT,"href","#transformers.AutoModelForCTC"),d(qd,"class","relative group"),d(zH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QH,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HH,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(UH,"href","/docs/transformers/pr_18326/en/model_doc/hubert#transformers.HubertForCTC"),d(JH,"href","/docs/transformers/pr_18326/en/model_doc/mctct#transformers.MCTCTForCTC"),d(YH,"href","/docs/transformers/pr_18326/en/model_doc/sew#transformers.SEWForCTC"),d(KH,"href","/docs/transformers/pr_18326/en/model_doc/sew-d#transformers.SEWDForCTC"),d(ZH,"href","/docs/transformers/pr_18326/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(eU,"href","/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(oU,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(rU,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),d(tU,"href","/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMForCTC"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qT,"id","transformers.AutoModelForSpeechSeq2Seq"),d(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qT,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Gd,"class","relative group"),d(aU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lU,"href","/docs/transformers/pr_18326/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(iU,"href","/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XT,"id","transformers.AutoModelForAudioXVector"),d(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XT,"href","#transformers.AutoModelForAudioXVector"),d(Xd,"class","relative group"),d(dU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mU,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(gU,"href","/docs/transformers/pr_18326/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(hU,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(pU,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),d(_U,"href","/docs/transformers/pr_18326/en/model_doc/wavlm#transformers.WavLMForXVector"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZT,"id","transformers.AutoModelForMaskedImageModeling"),d(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZT,"href","#transformers.AutoModelForMaskedImageModeling"),d(Qd,"class","relative group"),d(uU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FU,"href","/docs/transformers/pr_18326/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(TU,"href","/docs/transformers/pr_18326/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(MU,"href","/docs/transformers/pr_18326/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),d(EU,"href","/docs/transformers/pr_18326/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l8,"id","transformers.AutoModelForObjectDetection"),d(l8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l8,"href","#transformers.AutoModelForObjectDetection"),d(Jd,"class","relative group"),d(CU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LU,"href","/docs/transformers/pr_18326/en/model_doc/detr#transformers.DetrForObjectDetection"),d(yU,"href","/docs/transformers/pr_18326/en/model_doc/yolos#transformers.YolosForObjectDetection"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(g8,"id","transformers.AutoModelForImageSegmentation"),d(g8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g8,"href","#transformers.AutoModelForImageSegmentation"),d(Zd,"class","relative group"),d(xU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($U,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SU,"href","/docs/transformers/pr_18326/en/model_doc/detr#transformers.DetrForSegmentation"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(b8,"id","transformers.AutoModelForSemanticSegmentation"),d(b8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b8,"href","#transformers.AutoModelForSemanticSegmentation"),d(rc,"class","relative group"),d(RU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IU,"href","/docs/transformers/pr_18326/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(NU,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(qU,"href","/docs/transformers/pr_18326/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(jU,"href","/docs/transformers/pr_18326/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d(DU,"href","/docs/transformers/pr_18326/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L8,"id","transformers.AutoModelForInstanceSegmentation"),d(L8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L8,"href","#transformers.AutoModelForInstanceSegmentation"),d(nc,"class","relative group"),d(GU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XU,"href","/docs/transformers/pr_18326/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S8,"id","transformers.TFAutoModel"),d(S8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S8,"href","#transformers.TFAutoModel"),d(ic,"class","relative group"),d(zU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QU,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HU,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertModel"),d(UU,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.TFBartModel"),d(JU,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertModel"),d(YU,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(KU,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(ZU,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertModel"),d(eJ,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.TFCLIPModel"),d(oJ,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.TFConvBertModel"),d(rJ,"href","/docs/transformers/pr_18326/en/model_doc/convnext#transformers.TFConvNextModel"),d(tJ,"href","/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.TFCTRLModel"),d(aJ,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),d(nJ,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.TFDebertaModel"),d(sJ,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(lJ,"href","/docs/transformers/pr_18326/en/model_doc/deit#transformers.TFDeiTModel"),d(iJ,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(dJ,"href","/docs/transformers/pr_18326/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(cJ,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraModel"),d(fJ,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(mJ,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelModel"),d(gJ,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(hJ,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.TFGPT2Model"),d(pJ,"href","/docs/transformers/pr_18326/en/model_doc/gptj#transformers.TFGPTJModel"),d(_J,"href","/docs/transformers/pr_18326/en/model_doc/hubert#transformers.TFHubertModel"),d(uJ,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(bJ,"href","/docs/transformers/pr_18326/en/model_doc/led#transformers.TFLEDModel"),d(vJ,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.TFLongformerModel"),d(FJ,"href","/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.TFLxmertModel"),d(TJ,"href","/docs/transformers/pr_18326/en/model_doc/marian#transformers.TFMarianModel"),d(MJ,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.TFMBartModel"),d(EJ,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(CJ,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetModel"),d(wJ,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.TFMT5Model"),d(AJ,"href","/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(LJ,"href","/docs/transformers/pr_18326/en/model_doc/opt#transformers.TFOPTModel"),d(yJ,"href","/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.TFPegasusModel"),d(xJ,"href","/docs/transformers/pr_18326/en/model_doc/regnet#transformers.TFRegNetModel"),d($J,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertModel"),d(kJ,"href","/docs/transformers/pr_18326/en/model_doc/resnet#transformers.TFResNetModel"),d(SJ,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaModel"),d(RJ,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerModel"),d(PJ,"href","/docs/transformers/pr_18326/en/model_doc/segformer#transformers.TFSegformerModel"),d(BJ,"href","/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(IJ,"href","/docs/transformers/pr_18326/en/model_doc/swin#transformers.TFSwinModel"),d(NJ,"href","/docs/transformers/pr_18326/en/model_doc/t5#transformers.TFT5Model"),d(qJ,"href","/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TFTapasModel"),d(jJ,"href","/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(DJ,"href","/docs/transformers/pr_18326/en/model_doc/vit#transformers.TFViTModel"),d(GJ,"href","/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(OJ,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(VJ,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMModel"),d(XJ,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(zJ,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetModel"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kM,"id","transformers.TFAutoModelForPreTraining"),d(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kM,"href","#transformers.TFAutoModelForPreTraining"),d(fc,"class","relative group"),d(WJ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QJ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HJ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UJ,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(JJ,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(YJ,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForPreTraining"),d(KJ,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(ZJ,"href","/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(eY,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(oY,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(rY,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(tY,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(aY,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(nY,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(sY,"href","/docs/transformers/pr_18326/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(lY,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(iY,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(dY,"href","/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(cY,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(fY,"href","/docs/transformers/pr_18326/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(mY,"href","/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(gY,"href","/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(hY,"href","/docs/transformers/pr_18326/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(pY,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(_Y,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(uY,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t4,"id","transformers.TFAutoModelForCausalLM"),d(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t4,"href","#transformers.TFAutoModelForCausalLM"),d(hc,"class","relative group"),d(bY,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vY,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FY,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TY,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(MY,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(EY,"href","/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(CY,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(wY,"href","/docs/transformers/pr_18326/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(AY,"href","/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(LY,"href","/docs/transformers/pr_18326/en/model_doc/opt#transformers.TFOPTForCausalLM"),d(yY,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(xY,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d($Y,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(kY,"href","/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(SY,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(RY,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v4,"id","transformers.TFAutoModelForImageClassification"),d(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v4,"href","#transformers.TFAutoModelForImageClassification"),d(uc,"class","relative group"),d(PY,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BY,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IY,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NY,"href","/docs/transformers/pr_18326/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(qY,"href","/docs/transformers/pr_18326/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),d(jY,"href","/docs/transformers/pr_18326/en/model_doc/deit#transformers.TFDeiTForImageClassification"),d(DY,"href","/docs/transformers/pr_18326/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),d(GY,"href","/docs/transformers/pr_18326/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),d(OY,"href","/docs/transformers/pr_18326/en/model_doc/resnet#transformers.TFResNetForImageClassification"),d(VY,"href","/docs/transformers/pr_18326/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),d(XY,"href","/docs/transformers/pr_18326/en/model_doc/swin#transformers.TFSwinForImageClassification"),d(zY,"href","/docs/transformers/pr_18326/en/model_doc/vit#transformers.TFViTForImageClassification"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x4,"id","transformers.TFAutoModelForMaskedLM"),d(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x4,"href","#transformers.TFAutoModelForMaskedLM"),d(Fc,"class","relative group"),d(WY,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QY,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HY,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UY,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(JY,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(YY,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(KY,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(ZY,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(eK,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(oK,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(rK,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(tK,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(aK,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(nK,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(sK,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(lK,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(iK,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(dK,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(cK,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(fK,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(mK,"href","/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(gK,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(hK,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K4,"id","transformers.TFAutoModelForSeq2SeqLM"),d(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K4,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ec,"class","relative group"),d(pK,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_K,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uK,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bK,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(vK,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(FK,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(TK,"href","/docs/transformers/pr_18326/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(MK,"href","/docs/transformers/pr_18326/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(EK,"href","/docs/transformers/pr_18326/en/model_doc/marian#transformers.TFMarianMTModel"),d(CK,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(wK,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(AK,"href","/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(LK,"href","/docs/transformers/pr_18326/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fE,"id","transformers.TFAutoModelForSequenceClassification"),d(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fE,"href","#transformers.TFAutoModelForSequenceClassification"),d(Ac,"class","relative group"),d(yK,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xK,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($K,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kK,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(SK,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(RK,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(PK,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(BK,"href","/docs/transformers/pr_18326/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(IK,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(NK,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(qK,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(jK,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(DK,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(GK,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(OK,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(VK,"href","/docs/transformers/pr_18326/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(XK,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(zK,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(WK,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(QK,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(HK,"href","/docs/transformers/pr_18326/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(UK,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(JK,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(YK,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(KK,"href","/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(ZK,"href","/docs/transformers/pr_18326/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(eZ,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(oZ,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(rZ,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DE,"id","transformers.TFAutoModelForMultipleChoice"),d(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DE,"href","#transformers.TFAutoModelForMultipleChoice"),d(xc,"class","relative group"),d(tZ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aZ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nZ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sZ,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(lZ,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(iZ,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(dZ,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(cZ,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(fZ,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(mZ,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(gZ,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(hZ,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(pZ,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(_Z,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(uZ,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(bZ,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(vZ,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(FZ,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(TZ,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(MZ,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sC,"id","transformers.TFAutoModelForNextSentencePrediction"),d(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sC,"href","#transformers.TFAutoModelForNextSentencePrediction"),d(Sc,"class","relative group"),d(EZ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CZ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wZ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AZ,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),d(LZ,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fC,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Bc,"class","relative group"),d(yZ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xZ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($Z,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kZ,"href","/docs/transformers/pr_18326/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pC,"id","transformers.TFAutoModelForTokenClassification"),d(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pC,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(SZ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RZ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PZ,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BZ,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(IZ,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(NZ,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(qZ,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(jZ,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(DZ,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(GZ,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(OZ,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(VZ,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(XZ,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(zZ,"href","/docs/transformers/pr_18326/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(WZ,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(QZ,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(HZ,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(UZ,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(JZ,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(YZ,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(KZ,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(ZZ,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(eee,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qC,"id","transformers.TFAutoModelForQuestionAnswering"),d(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qC,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Gc,"class","relative group"),d(oee,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ree,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tee,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aee,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(nee,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(see,"href","/docs/transformers/pr_18326/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(lee,"href","/docs/transformers/pr_18326/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(iee,"href","/docs/transformers/pr_18326/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(dee,"href","/docs/transformers/pr_18326/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(cee,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(fee,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(mee,"href","/docs/transformers/pr_18326/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(gee,"href","/docs/transformers/pr_18326/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(hee,"href","/docs/transformers/pr_18326/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(pee,"href","/docs/transformers/pr_18326/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(_ee,"href","/docs/transformers/pr_18326/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(uee,"href","/docs/transformers/pr_18326/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(bee,"href","/docs/transformers/pr_18326/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(vee,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(Fee,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(Tee,"href","/docs/transformers/pr_18326/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(Mee,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(Eee,"href","/docs/transformers/pr_18326/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l5,"id","transformers.TFAutoModelForVision2Seq"),d(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l5,"href","#transformers.TFAutoModelForVision2Seq"),d(Xc,"class","relative group"),d(Cee,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wee,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Aee,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lee,"href","/docs/transformers/pr_18326/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Qc,"class","relative group"),d(yee,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xee,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($ee,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kee,"href","/docs/transformers/pr_18326/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(p5,"id","transformers.FlaxAutoModel"),d(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p5,"href","#transformers.FlaxAutoModel"),d(Jc,"class","relative group"),d(See,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ree,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Pee,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bee,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertModel"),d(Iee,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartModel"),d(Nee,"href","/docs/transformers/pr_18326/en/model_doc/beit#transformers.FlaxBeitModel"),d(qee,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertModel"),d(jee,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(Dee,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(Gee,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(Oee,"href","/docs/transformers/pr_18326/en/model_doc/clip#transformers.FlaxCLIPModel"),d(Vee,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(Xee,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraModel"),d(zee,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(Wee,"href","/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(Qee,"href","/docs/transformers/pr_18326/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(Hee,"href","/docs/transformers/pr_18326/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(Uee,"href","/docs/transformers/pr_18326/en/model_doc/marian#transformers.FlaxMarianModel"),d(Jee,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.FlaxMBartModel"),d(Yee,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.FlaxMT5Model"),d(Kee,"href","/docs/transformers/pr_18326/en/model_doc/opt#transformers.FlaxOPTModel"),d(Zee,"href","/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(eoe,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(ooe,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(roe,"href","/docs/transformers/pr_18326/en/model_doc/t5#transformers.FlaxT5Model"),d(toe,"href","/docs/transformers/pr_18326/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(aoe,"href","/docs/transformers/pr_18326/en/model_doc/vit#transformers.FlaxViTModel"),d(noe,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(soe,"href","/docs/transformers/pr_18326/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(loe,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z5,"id","transformers.FlaxAutoModelForCausalLM"),d(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z5,"href","#transformers.FlaxAutoModelForCausalLM"),d(Zc,"class","relative group"),d(ioe,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(doe,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(coe,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(foe,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(moe,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForCausalLM"),d(goe,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),d(hoe,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),d(poe,"href","/docs/transformers/pr_18326/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(_oe,"href","/docs/transformers/pr_18326/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(uoe,"href","/docs/transformers/pr_18326/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(boe,"href","/docs/transformers/pr_18326/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),d(voe,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),d(Foe,"href","/docs/transformers/pr_18326/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a0,"id","transformers.FlaxAutoModelForPreTraining"),d(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a0,"href","#transformers.FlaxAutoModelForPreTraining"),d(rf,"class","relative group"),d(Toe,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Moe,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Eoe,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Coe,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(woe,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Aoe,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(Loe,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(yoe,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(xoe,"href","/docs/transformers/pr_18326/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d($oe,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(koe,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Soe,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Roe,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Poe,"href","/docs/transformers/pr_18326/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Boe,"href","/docs/transformers/pr_18326/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Ioe,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F0,"id","transformers.FlaxAutoModelForMaskedLM"),d(F0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F0,"href","#transformers.FlaxAutoModelForMaskedLM"),d(nf,"class","relative group"),d(Noe,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qoe,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(joe,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Doe,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(Goe,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Ooe,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(Voe,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(Xoe,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(zoe,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(Woe,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Qoe,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Hoe,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Uoe,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(df,"class","relative group"),d(Joe,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yoe,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Koe,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zoe,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(ere,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(ore,"href","/docs/transformers/pr_18326/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(rre,"href","/docs/transformers/pr_18326/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(tre,"href","/docs/transformers/pr_18326/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(are,"href","/docs/transformers/pr_18326/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(nre,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(sre,"href","/docs/transformers/pr_18326/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(lre,"href","/docs/transformers/pr_18326/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(ire,"href","/docs/transformers/pr_18326/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W0,"id","transformers.FlaxAutoModelForSequenceClassification"),d(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W0,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(mf,"class","relative group"),d(dre,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cre,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fre,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mre,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(gre,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(hre,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(pre,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(_re,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(ure,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(bre,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(vre,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(Fre,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(Tre,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nw,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(pf,"class","relative group"),d(Mre,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ere,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Cre,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wre,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(Are,"href","/docs/transformers/pr_18326/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(Lre,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(yre,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(xre,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d($re,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(kre,"href","/docs/transformers/pr_18326/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Sre,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Rre,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Pre,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bw,"id","transformers.FlaxAutoModelForTokenClassification"),d(bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bw,"href","#transformers.FlaxAutoModelForTokenClassification"),d(bf,"class","relative group"),d(Bre,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ire,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Nre,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qre,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(jre,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Dre,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Gre,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Ore,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Vre,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Xre,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(zre,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xw,"id","transformers.FlaxAutoModelForMultipleChoice"),d(xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xw,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Tf,"class","relative group"),d(Wre,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qre,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Hre,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ure,"href","/docs/transformers/pr_18326/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Jre,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Yre,"href","/docs/transformers/pr_18326/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Kre,"href","/docs/transformers/pr_18326/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Zre,"href","/docs/transformers/pr_18326/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(ete,"href","/docs/transformers/pr_18326/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(ote,"href","/docs/transformers/pr_18326/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(rte,"href","/docs/transformers/pr_18326/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(Dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Cf,"class","relative group"),d(tte,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ate,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nte,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ste,"href","/docs/transformers/pr_18326/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xw,"id","transformers.FlaxAutoModelForImageClassification"),d(Xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xw,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lf,"class","relative group"),d(lte,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ite,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dte,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cte,"href","/docs/transformers/pr_18326/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(fte,"href","/docs/transformers/pr_18326/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uw,"id","transformers.FlaxAutoModelForVision2Seq"),d(Uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uw,"href","#transformers.FlaxAutoModelForVision2Seq"),d($f,"class","relative group"),d(mte,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gte,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hte,"href","/docs/transformers/pr_18326/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pte,"href","/docs/transformers/pr_18326/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(c,_,null),e(p,h),e(p,wo),e(wo,$i),b(f,If,u),b(f,lt,u),e(lt,ki),e(lt,Si),e(Si,bL),e(lt,Nf),b(f,Oe,u),b(f,Qe,u),e(Qe,Ri),e(Qe,Bn),e(Bn,vL),e(Qe,In),e(Qe,Nn),e(Nn,FL),e(Qe,Pi),e(Qe,qn),e(qn,TL),e(Qe,Bi),b(f,qf,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,oR),e(Ae,Ii),e(Ii,rR),e(Ae,tR),b(f,Ao,u),b(f,Ra,u),e(Ra,aR),e(Ra,jf),e(jf,nR),e(Ra,yUe),b(f,gze,u),b(f,Ni,u),e(Ni,Df),e(Df,dne),M(ML,dne,null),e(Ni,xUe),e(Ni,cne),e(cne,$Ue),b(f,hze,u),b(f,jn,u),e(jn,kUe),e(jn,fne),e(fne,SUe),e(jn,RUe),e(jn,mne),e(mne,PUe),e(jn,BUe),b(f,pze,u),M(EL,f,u),b(f,_ze,u),b(f,sR,u),e(sR,IUe),b(f,uze,u),M(Gf,f,u),b(f,bze,u),b(f,qi,u),e(qi,Of),e(Of,gne),M(CL,gne,null),e(qi,NUe),e(qi,hne),e(hne,qUe),b(f,vze,u),b(f,Lo,u),M(wL,Lo,null),e(Lo,jUe),e(Lo,AL),e(AL,DUe),e(AL,lR),e(lR,GUe),e(AL,OUe),e(Lo,VUe),e(Lo,LL),e(LL,XUe),e(LL,pne),e(pne,zUe),e(LL,WUe),e(Lo,QUe),e(Lo,yr),M(yL,yr,null),e(yr,HUe),e(yr,_ne),e(_ne,UUe),e(yr,JUe),e(yr,ji),e(ji,YUe),e(ji,une),e(une,KUe),e(ji,ZUe),e(ji,bne),e(bne,eJe),e(ji,oJe),e(yr,rJe),e(yr,A),e(A,Vf),e(Vf,vne),e(vne,tJe),e(Vf,aJe),e(Vf,iR),e(iR,nJe),e(Vf,sJe),e(A,lJe),e(A,Xf),e(Xf,Fne),e(Fne,iJe),e(Xf,dJe),e(Xf,dR),e(dR,cJe),e(Xf,fJe),e(A,mJe),e(A,zf),e(zf,Tne),e(Tne,gJe),e(zf,hJe),e(zf,cR),e(cR,pJe),e(zf,_Je),e(A,uJe),e(A,Wf),e(Wf,Mne),e(Mne,bJe),e(Wf,vJe),e(Wf,fR),e(fR,FJe),e(Wf,TJe),e(A,MJe),e(A,Qf),e(Qf,Ene),e(Ene,EJe),e(Qf,CJe),e(Qf,mR),e(mR,wJe),e(Qf,AJe),e(A,LJe),e(A,Hf),e(Hf,Cne),e(Cne,yJe),e(Hf,xJe),e(Hf,gR),e(gR,$Je),e(Hf,kJe),e(A,SJe),e(A,Uf),e(Uf,wne),e(wne,RJe),e(Uf,PJe),e(Uf,hR),e(hR,BJe),e(Uf,IJe),e(A,NJe),e(A,Jf),e(Jf,Ane),e(Ane,qJe),e(Jf,jJe),e(Jf,pR),e(pR,DJe),e(Jf,GJe),e(A,OJe),e(A,Yf),e(Yf,Lne),e(Lne,VJe),e(Yf,XJe),e(Yf,_R),e(_R,zJe),e(Yf,WJe),e(A,QJe),e(A,Kf),e(Kf,yne),e(yne,HJe),e(Kf,UJe),e(Kf,uR),e(uR,JJe),e(Kf,YJe),e(A,KJe),e(A,Zf),e(Zf,xne),e(xne,ZJe),e(Zf,eYe),e(Zf,bR),e(bR,oYe),e(Zf,rYe),e(A,tYe),e(A,em),e(em,$ne),e($ne,aYe),e(em,nYe),e(em,vR),e(vR,sYe),e(em,lYe),e(A,iYe),e(A,om),e(om,kne),e(kne,dYe),e(om,cYe),e(om,FR),e(FR,fYe),e(om,mYe),e(A,gYe),e(A,rm),e(rm,Sne),e(Sne,hYe),e(rm,pYe),e(rm,TR),e(TR,_Ye),e(rm,uYe),e(A,bYe),e(A,tm),e(tm,Rne),e(Rne,vYe),e(tm,FYe),e(tm,MR),e(MR,TYe),e(tm,MYe),e(A,EYe),e(A,am),e(am,Pne),e(Pne,CYe),e(am,wYe),e(am,ER),e(ER,AYe),e(am,LYe),e(A,yYe),e(A,nm),e(nm,Bne),e(Bne,xYe),e(nm,$Ye),e(nm,CR),e(CR,kYe),e(nm,SYe),e(A,RYe),e(A,sm),e(sm,Ine),e(Ine,PYe),e(sm,BYe),e(sm,wR),e(wR,IYe),e(sm,NYe),e(A,qYe),e(A,lm),e(lm,Nne),e(Nne,jYe),e(lm,DYe),e(lm,AR),e(AR,GYe),e(lm,OYe),e(A,VYe),e(A,im),e(im,qne),e(qne,XYe),e(im,zYe),e(im,LR),e(LR,WYe),e(im,QYe),e(A,HYe),e(A,dm),e(dm,jne),e(jne,UYe),e(dm,JYe),e(dm,yR),e(yR,YYe),e(dm,KYe),e(A,ZYe),e(A,cm),e(cm,Dne),e(Dne,eKe),e(cm,oKe),e(cm,xR),e(xR,rKe),e(cm,tKe),e(A,aKe),e(A,fm),e(fm,Gne),e(Gne,nKe),e(fm,sKe),e(fm,$R),e($R,lKe),e(fm,iKe),e(A,dKe),e(A,mm),e(mm,One),e(One,cKe),e(mm,fKe),e(mm,kR),e(kR,mKe),e(mm,gKe),e(A,hKe),e(A,gm),e(gm,Vne),e(Vne,pKe),e(gm,_Ke),e(gm,SR),e(SR,uKe),e(gm,bKe),e(A,vKe),e(A,hm),e(hm,Xne),e(Xne,FKe),e(hm,TKe),e(hm,RR),e(RR,MKe),e(hm,EKe),e(A,CKe),e(A,pm),e(pm,zne),e(zne,wKe),e(pm,AKe),e(pm,PR),e(PR,LKe),e(pm,yKe),e(A,xKe),e(A,_m),e(_m,Wne),e(Wne,$Ke),e(_m,kKe),e(_m,BR),e(BR,SKe),e(_m,RKe),e(A,PKe),e(A,um),e(um,Qne),e(Qne,BKe),e(um,IKe),e(um,IR),e(IR,NKe),e(um,qKe),e(A,jKe),e(A,bm),e(bm,Hne),e(Hne,DKe),e(bm,GKe),e(bm,NR),e(NR,OKe),e(bm,VKe),e(A,XKe),e(A,vm),e(vm,Une),e(Une,zKe),e(vm,WKe),e(vm,qR),e(qR,QKe),e(vm,HKe),e(A,UKe),e(A,Fm),e(Fm,Jne),e(Jne,JKe),e(Fm,YKe),e(Fm,jR),e(jR,KKe),e(Fm,ZKe),e(A,eZe),e(A,Tm),e(Tm,Yne),e(Yne,oZe),e(Tm,rZe),e(Tm,DR),e(DR,tZe),e(Tm,aZe),e(A,nZe),e(A,Mm),e(Mm,Kne),e(Kne,sZe),e(Mm,lZe),e(Mm,GR),e(GR,iZe),e(Mm,dZe),e(A,cZe),e(A,Em),e(Em,Zne),e(Zne,fZe),e(Em,mZe),e(Em,OR),e(OR,gZe),e(Em,hZe),e(A,pZe),e(A,Cm),e(Cm,ese),e(ese,_Ze),e(Cm,uZe),e(Cm,VR),e(VR,bZe),e(Cm,vZe),e(A,FZe),e(A,wm),e(wm,ose),e(ose,TZe),e(wm,MZe),e(wm,XR),e(XR,EZe),e(wm,CZe),e(A,wZe),e(A,Am),e(Am,rse),e(rse,AZe),e(Am,LZe),e(Am,zR),e(zR,yZe),e(Am,xZe),e(A,$Ze),e(A,Lm),e(Lm,tse),e(tse,kZe),e(Lm,SZe),e(Lm,WR),e(WR,RZe),e(Lm,PZe),e(A,BZe),e(A,ym),e(ym,ase),e(ase,IZe),e(ym,NZe),e(ym,QR),e(QR,qZe),e(ym,jZe),e(A,DZe),e(A,xm),e(xm,nse),e(nse,GZe),e(xm,OZe),e(xm,HR),e(HR,VZe),e(xm,XZe),e(A,zZe),e(A,$m),e($m,sse),e(sse,WZe),e($m,QZe),e($m,UR),e(UR,HZe),e($m,UZe),e(A,JZe),e(A,km),e(km,lse),e(lse,YZe),e(km,KZe),e(km,JR),e(JR,ZZe),e(km,eeo),e(A,oeo),e(A,Sm),e(Sm,ise),e(ise,reo),e(Sm,teo),e(Sm,YR),e(YR,aeo),e(Sm,neo),e(A,seo),e(A,Rm),e(Rm,dse),e(dse,leo),e(Rm,ieo),e(Rm,KR),e(KR,deo),e(Rm,ceo),e(A,feo),e(A,Pm),e(Pm,cse),e(cse,meo),e(Pm,geo),e(Pm,ZR),e(ZR,heo),e(Pm,peo),e(A,_eo),e(A,Bm),e(Bm,fse),e(fse,ueo),e(Bm,beo),e(Bm,eP),e(eP,veo),e(Bm,Feo),e(A,Teo),e(A,Im),e(Im,mse),e(mse,Meo),e(Im,Eeo),e(Im,oP),e(oP,Ceo),e(Im,weo),e(A,Aeo),e(A,Nm),e(Nm,gse),e(gse,Leo),e(Nm,yeo),e(Nm,rP),e(rP,xeo),e(Nm,$eo),e(A,keo),e(A,qm),e(qm,hse),e(hse,Seo),e(qm,Reo),e(qm,tP),e(tP,Peo),e(qm,Beo),e(A,Ieo),e(A,jm),e(jm,pse),e(pse,Neo),e(jm,qeo),e(jm,aP),e(aP,jeo),e(jm,Deo),e(A,Geo),e(A,Dm),e(Dm,_se),e(_se,Oeo),e(Dm,Veo),e(Dm,nP),e(nP,Xeo),e(Dm,zeo),e(A,Weo),e(A,Gm),e(Gm,use),e(use,Qeo),e(Gm,Heo),e(Gm,sP),e(sP,Ueo),e(Gm,Jeo),e(A,Yeo),e(A,Om),e(Om,bse),e(bse,Keo),e(Om,Zeo),e(Om,lP),e(lP,eoo),e(Om,ooo),e(A,roo),e(A,Vm),e(Vm,vse),e(vse,too),e(Vm,aoo),e(Vm,iP),e(iP,noo),e(Vm,soo),e(A,loo),e(A,Xm),e(Xm,Fse),e(Fse,ioo),e(Xm,doo),e(Xm,dP),e(dP,coo),e(Xm,foo),e(A,moo),e(A,zm),e(zm,Tse),e(Tse,goo),e(zm,hoo),e(zm,cP),e(cP,poo),e(zm,_oo),e(A,uoo),e(A,Wm),e(Wm,Mse),e(Mse,boo),e(Wm,voo),e(Wm,fP),e(fP,Foo),e(Wm,Too),e(A,Moo),e(A,Qm),e(Qm,Ese),e(Ese,Eoo),e(Qm,Coo),e(Qm,mP),e(mP,woo),e(Qm,Aoo),e(A,Loo),e(A,Hm),e(Hm,Cse),e(Cse,yoo),e(Hm,xoo),e(Hm,gP),e(gP,$oo),e(Hm,koo),e(A,Soo),e(A,Um),e(Um,wse),e(wse,Roo),e(Um,Poo),e(Um,hP),e(hP,Boo),e(Um,Ioo),e(A,Noo),e(A,Jm),e(Jm,Ase),e(Ase,qoo),e(Jm,joo),e(Jm,pP),e(pP,Doo),e(Jm,Goo),e(A,Ooo),e(A,Ym),e(Ym,Lse),e(Lse,Voo),e(Ym,Xoo),e(Ym,_P),e(_P,zoo),e(Ym,Woo),e(A,Qoo),e(A,Km),e(Km,yse),e(yse,Hoo),e(Km,Uoo),e(Km,uP),e(uP,Joo),e(Km,Yoo),e(A,Koo),e(A,Zm),e(Zm,xse),e(xse,Zoo),e(Zm,ero),e(Zm,bP),e(bP,oro),e(Zm,rro),e(A,tro),e(A,eg),e(eg,$se),e($se,aro),e(eg,nro),e(eg,vP),e(vP,sro),e(eg,lro),e(A,iro),e(A,og),e(og,kse),e(kse,dro),e(og,cro),e(og,FP),e(FP,fro),e(og,mro),e(A,gro),e(A,rg),e(rg,Sse),e(Sse,hro),e(rg,pro),e(rg,TP),e(TP,_ro),e(rg,uro),e(A,bro),e(A,tg),e(tg,Rse),e(Rse,vro),e(tg,Fro),e(tg,MP),e(MP,Tro),e(tg,Mro),e(A,Ero),e(A,ag),e(ag,Pse),e(Pse,Cro),e(ag,wro),e(ag,EP),e(EP,Aro),e(ag,Lro),e(A,yro),e(A,ng),e(ng,Bse),e(Bse,xro),e(ng,$ro),e(ng,CP),e(CP,kro),e(ng,Sro),e(A,Rro),e(A,sg),e(sg,Ise),e(Ise,Pro),e(sg,Bro),e(sg,wP),e(wP,Iro),e(sg,Nro),e(A,qro),e(A,lg),e(lg,Nse),e(Nse,jro),e(lg,Dro),e(lg,AP),e(AP,Gro),e(lg,Oro),e(A,Vro),e(A,ig),e(ig,qse),e(qse,Xro),e(ig,zro),e(ig,LP),e(LP,Wro),e(ig,Qro),e(A,Hro),e(A,dg),e(dg,jse),e(jse,Uro),e(dg,Jro),e(dg,yP),e(yP,Yro),e(dg,Kro),e(A,Zro),e(A,cg),e(cg,Dse),e(Dse,eto),e(cg,oto),e(cg,xP),e(xP,rto),e(cg,tto),e(A,ato),e(A,fg),e(fg,Gse),e(Gse,nto),e(fg,sto),e(fg,$P),e($P,lto),e(fg,ito),e(A,dto),e(A,mg),e(mg,Ose),e(Ose,cto),e(mg,fto),e(mg,kP),e(kP,mto),e(mg,gto),e(A,hto),e(A,gg),e(gg,Vse),e(Vse,pto),e(gg,_to),e(gg,SP),e(SP,uto),e(gg,bto),e(A,vto),e(A,hg),e(hg,Xse),e(Xse,Fto),e(hg,Tto),e(hg,RP),e(RP,Mto),e(hg,Eto),e(A,Cto),e(A,pg),e(pg,zse),e(zse,wto),e(pg,Ato),e(pg,PP),e(PP,Lto),e(pg,yto),e(A,xto),e(A,_g),e(_g,Wse),e(Wse,$to),e(_g,kto),e(_g,BP),e(BP,Sto),e(_g,Rto),e(A,Pto),e(A,ug),e(ug,Qse),e(Qse,Bto),e(ug,Ito),e(ug,IP),e(IP,Nto),e(ug,qto),e(A,jto),e(A,bg),e(bg,Hse),e(Hse,Dto),e(bg,Gto),e(bg,NP),e(NP,Oto),e(bg,Vto),e(A,Xto),e(A,vg),e(vg,Use),e(Use,zto),e(vg,Wto),e(vg,qP),e(qP,Qto),e(vg,Hto),e(A,Uto),e(A,Fg),e(Fg,Jse),e(Jse,Jto),e(Fg,Yto),e(Fg,jP),e(jP,Kto),e(Fg,Zto),e(A,eao),e(A,Tg),e(Tg,Yse),e(Yse,oao),e(Tg,rao),e(Tg,DP),e(DP,tao),e(Tg,aao),e(A,nao),e(A,Mg),e(Mg,Kse),e(Kse,sao),e(Mg,lao),e(Mg,GP),e(GP,iao),e(Mg,dao),e(A,cao),e(A,Eg),e(Eg,Zse),e(Zse,fao),e(Eg,mao),e(Eg,OP),e(OP,gao),e(Eg,hao),e(A,pao),e(A,Cg),e(Cg,ele),e(ele,_ao),e(Cg,uao),e(Cg,VP),e(VP,bao),e(Cg,vao),e(A,Fao),e(A,wg),e(wg,ole),e(ole,Tao),e(wg,Mao),e(wg,XP),e(XP,Eao),e(wg,Cao),e(A,wao),e(A,Ag),e(Ag,rle),e(rle,Aao),e(Ag,Lao),e(Ag,zP),e(zP,yao),e(Ag,xao),e(A,$ao),e(A,Lg),e(Lg,tle),e(tle,kao),e(Lg,Sao),e(Lg,WP),e(WP,Rao),e(Lg,Pao),e(A,Bao),e(A,yg),e(yg,ale),e(ale,Iao),e(yg,Nao),e(yg,QP),e(QP,qao),e(yg,jao),e(A,Dao),e(A,xg),e(xg,nle),e(nle,Gao),e(xg,Oao),e(xg,HP),e(HP,Vao),e(xg,Xao),e(A,zao),e(A,$g),e($g,sle),e(sle,Wao),e($g,Qao),e($g,UP),e(UP,Hao),e($g,Uao),e(A,Jao),e(A,kg),e(kg,lle),e(lle,Yao),e(kg,Kao),e(kg,JP),e(JP,Zao),e(kg,eno),e(A,ono),e(A,Sg),e(Sg,ile),e(ile,rno),e(Sg,tno),e(Sg,YP),e(YP,ano),e(Sg,nno),e(A,sno),e(A,Rg),e(Rg,dle),e(dle,lno),e(Rg,ino),e(Rg,KP),e(KP,dno),e(Rg,cno),e(A,fno),e(A,Pg),e(Pg,cle),e(cle,mno),e(Pg,gno),e(Pg,ZP),e(ZP,hno),e(Pg,pno),e(A,_no),e(A,Bg),e(Bg,fle),e(fle,uno),e(Bg,bno),e(Bg,eB),e(eB,vno),e(Bg,Fno),e(A,Tno),e(A,Ig),e(Ig,mle),e(mle,Mno),e(Ig,Eno),e(Ig,oB),e(oB,Cno),e(Ig,wno),e(A,Ano),e(A,Ng),e(Ng,gle),e(gle,Lno),e(Ng,yno),e(Ng,rB),e(rB,xno),e(Ng,$no),e(A,kno),e(A,qg),e(qg,hle),e(hle,Sno),e(qg,Rno),e(qg,tB),e(tB,Pno),e(qg,Bno),e(A,Ino),e(A,jg),e(jg,ple),e(ple,Nno),e(jg,qno),e(jg,aB),e(aB,jno),e(jg,Dno),e(A,Gno),e(A,Dg),e(Dg,_le),e(_le,Ono),e(Dg,Vno),e(Dg,nB),e(nB,Xno),e(Dg,zno),e(A,Wno),e(A,Gg),e(Gg,ule),e(ule,Qno),e(Gg,Hno),e(Gg,sB),e(sB,Uno),e(Gg,Jno),e(A,Yno),e(A,Og),e(Og,ble),e(ble,Kno),e(Og,Zno),e(Og,lB),e(lB,eso),e(Og,oso),e(A,rso),e(A,Vg),e(Vg,vle),e(vle,tso),e(Vg,aso),e(Vg,iB),e(iB,nso),e(Vg,sso),e(A,lso),e(A,Xg),e(Xg,Fle),e(Fle,iso),e(Xg,dso),e(Xg,dB),e(dB,cso),e(Xg,fso),e(A,mso),e(A,zg),e(zg,Tle),e(Tle,gso),e(zg,hso),e(zg,cB),e(cB,pso),e(zg,_so),e(A,uso),e(A,Wg),e(Wg,Mle),e(Mle,bso),e(Wg,vso),e(Wg,fB),e(fB,Fso),e(Wg,Tso),e(A,Mso),e(A,Qg),e(Qg,Ele),e(Ele,Eso),e(Qg,Cso),e(Qg,mB),e(mB,wso),e(Qg,Aso),e(A,Lso),e(A,Hg),e(Hg,Cle),e(Cle,yso),e(Hg,xso),e(Hg,gB),e(gB,$so),e(Hg,kso),e(A,Sso),e(A,Ug),e(Ug,wle),e(wle,Rso),e(Ug,Pso),e(Ug,hB),e(hB,Bso),e(Ug,Iso),e(A,Nso),e(A,Jg),e(Jg,Ale),e(Ale,qso),e(Jg,jso),e(Jg,pB),e(pB,Dso),e(Jg,Gso),e(A,Oso),e(A,Yg),e(Yg,Lle),e(Lle,Vso),e(Yg,Xso),e(Yg,_B),e(_B,zso),e(Yg,Wso),e(A,Qso),e(A,Kg),e(Kg,yle),e(yle,Hso),e(Kg,Uso),e(Kg,uB),e(uB,Jso),e(Kg,Yso),e(A,Kso),e(A,Zg),e(Zg,xle),e(xle,Zso),e(Zg,elo),e(Zg,bB),e(bB,olo),e(Zg,rlo),e(A,tlo),e(A,eh),e(eh,$le),e($le,alo),e(eh,nlo),e(eh,vB),e(vB,slo),e(eh,llo),e(yr,ilo),M(oh,yr,null),e(Lo,dlo),e(Lo,rh),M(xL,rh,null),e(rh,clo),e(rh,kle),e(kle,flo),b(f,Fze,u),b(f,Di,u),e(Di,th),e(th,Sle),M($L,Sle,null),e(Di,mlo),e(Di,Rle),e(Rle,glo),b(f,Tze,u),b(f,yo,u),M(kL,yo,null),e(yo,hlo),e(yo,SL),e(SL,plo),e(SL,FB),e(FB,_lo),e(SL,ulo),e(yo,blo),e(yo,RL),e(RL,vlo),e(RL,Ple),e(Ple,Flo),e(RL,Tlo),e(yo,Mlo),e(yo,xr),M(PL,xr,null),e(xr,Elo),e(xr,Ble),e(Ble,Clo),e(xr,wlo),e(xr,Pa),e(Pa,Alo),e(Pa,Ile),e(Ile,Llo),e(Pa,ylo),e(Pa,Nle),e(Nle,xlo),e(Pa,$lo),e(Pa,qle),e(qle,klo),e(Pa,Slo),e(xr,Rlo),e(xr,k),e(k,Dn),e(Dn,jle),e(jle,Plo),e(Dn,Blo),e(Dn,TB),e(TB,Ilo),e(Dn,Nlo),e(Dn,MB),e(MB,qlo),e(Dn,jlo),e(k,Dlo),e(k,Gn),e(Gn,Dle),e(Dle,Glo),e(Gn,Olo),e(Gn,EB),e(EB,Vlo),e(Gn,Xlo),e(Gn,CB),e(CB,zlo),e(Gn,Wlo),e(k,Qlo),e(k,On),e(On,Gle),e(Gle,Hlo),e(On,Ulo),e(On,wB),e(wB,Jlo),e(On,Ylo),e(On,AB),e(AB,Klo),e(On,Zlo),e(k,eio),e(k,ah),e(ah,Ole),e(Ole,oio),e(ah,rio),e(ah,LB),e(LB,tio),e(ah,aio),e(k,nio),e(k,Vn),e(Vn,Vle),e(Vle,sio),e(Vn,lio),e(Vn,yB),e(yB,iio),e(Vn,dio),e(Vn,xB),e(xB,cio),e(Vn,fio),e(k,mio),e(k,nh),e(nh,Xle),e(Xle,gio),e(nh,hio),e(nh,$B),e($B,pio),e(nh,_io),e(k,uio),e(k,sh),e(sh,zle),e(zle,bio),e(sh,vio),e(sh,kB),e(kB,Fio),e(sh,Tio),e(k,Mio),e(k,lh),e(lh,Wle),e(Wle,Eio),e(lh,Cio),e(lh,SB),e(SB,wio),e(lh,Aio),e(k,Lio),e(k,Xn),e(Xn,Qle),e(Qle,yio),e(Xn,xio),e(Xn,RB),e(RB,$io),e(Xn,kio),e(Xn,PB),e(PB,Sio),e(Xn,Rio),e(k,Pio),e(k,zn),e(zn,Hle),e(Hle,Bio),e(zn,Iio),e(zn,BB),e(BB,Nio),e(zn,qio),e(zn,IB),e(IB,jio),e(zn,Dio),e(k,Gio),e(k,Wn),e(Wn,Ule),e(Ule,Oio),e(Wn,Vio),e(Wn,NB),e(NB,Xio),e(Wn,zio),e(Wn,qB),e(qB,Wio),e(Wn,Qio),e(k,Hio),e(k,ih),e(ih,Jle),e(Jle,Uio),e(ih,Jio),e(ih,jB),e(jB,Yio),e(ih,Kio),e(k,Zio),e(k,dh),e(dh,Yle),e(Yle,edo),e(dh,odo),e(dh,DB),e(DB,rdo),e(dh,tdo),e(k,ado),e(k,ch),e(ch,Kle),e(Kle,ndo),e(ch,sdo),e(ch,GB),e(GB,ldo),e(ch,ido),e(k,ddo),e(k,Qn),e(Qn,Zle),e(Zle,cdo),e(Qn,fdo),e(Qn,OB),e(OB,mdo),e(Qn,gdo),e(Qn,VB),e(VB,hdo),e(Qn,pdo),e(k,_do),e(k,fh),e(fh,eie),e(eie,udo),e(fh,bdo),e(fh,XB),e(XB,vdo),e(fh,Fdo),e(k,Tdo),e(k,Hn),e(Hn,oie),e(oie,Mdo),e(Hn,Edo),e(Hn,zB),e(zB,Cdo),e(Hn,wdo),e(Hn,WB),e(WB,Ado),e(Hn,Ldo),e(k,ydo),e(k,Un),e(Un,rie),e(rie,xdo),e(Un,$do),e(Un,QB),e(QB,kdo),e(Un,Sdo),e(Un,HB),e(HB,Rdo),e(Un,Pdo),e(k,Bdo),e(k,Jn),e(Jn,tie),e(tie,Ido),e(Jn,Ndo),e(Jn,UB),e(UB,qdo),e(Jn,jdo),e(Jn,JB),e(JB,Ddo),e(Jn,Gdo),e(k,Odo),e(k,Yn),e(Yn,aie),e(aie,Vdo),e(Yn,Xdo),e(Yn,YB),e(YB,zdo),e(Yn,Wdo),e(Yn,KB),e(KB,Qdo),e(Yn,Hdo),e(k,Udo),e(k,mh),e(mh,nie),e(nie,Jdo),e(mh,Ydo),e(mh,ZB),e(ZB,Kdo),e(mh,Zdo),e(k,eco),e(k,Kn),e(Kn,sie),e(sie,oco),e(Kn,rco),e(Kn,eI),e(eI,tco),e(Kn,aco),e(Kn,oI),e(oI,nco),e(Kn,sco),e(k,lco),e(k,Zn),e(Zn,lie),e(lie,ico),e(Zn,dco),e(Zn,rI),e(rI,cco),e(Zn,fco),e(Zn,tI),e(tI,mco),e(Zn,gco),e(k,hco),e(k,es),e(es,iie),e(iie,pco),e(es,_co),e(es,aI),e(aI,uco),e(es,bco),e(es,nI),e(nI,vco),e(es,Fco),e(k,Tco),e(k,os),e(os,die),e(die,Mco),e(os,Eco),e(os,sI),e(sI,Cco),e(os,wco),e(os,lI),e(lI,Aco),e(os,Lco),e(k,yco),e(k,rs),e(rs,cie),e(cie,xco),e(rs,$co),e(rs,iI),e(iI,kco),e(rs,Sco),e(rs,dI),e(dI,Rco),e(rs,Pco),e(k,Bco),e(k,ts),e(ts,fie),e(fie,Ico),e(ts,Nco),e(ts,cI),e(cI,qco),e(ts,jco),e(ts,fI),e(fI,Dco),e(ts,Gco),e(k,Oco),e(k,gh),e(gh,mie),e(mie,Vco),e(gh,Xco),e(gh,mI),e(mI,zco),e(gh,Wco),e(k,Qco),e(k,as),e(as,gie),e(gie,Hco),e(as,Uco),e(as,gI),e(gI,Jco),e(as,Yco),e(as,hI),e(hI,Kco),e(as,Zco),e(k,efo),e(k,hh),e(hh,hie),e(hie,ofo),e(hh,rfo),e(hh,pI),e(pI,tfo),e(hh,afo),e(k,nfo),e(k,ns),e(ns,pie),e(pie,sfo),e(ns,lfo),e(ns,_I),e(_I,ifo),e(ns,dfo),e(ns,uI),e(uI,cfo),e(ns,ffo),e(k,mfo),e(k,ss),e(ss,_ie),e(_ie,gfo),e(ss,hfo),e(ss,bI),e(bI,pfo),e(ss,_fo),e(ss,vI),e(vI,ufo),e(ss,bfo),e(k,vfo),e(k,ls),e(ls,uie),e(uie,Ffo),e(ls,Tfo),e(ls,FI),e(FI,Mfo),e(ls,Efo),e(ls,TI),e(TI,Cfo),e(ls,wfo),e(k,Afo),e(k,ph),e(ph,bie),e(bie,Lfo),e(ph,yfo),e(ph,MI),e(MI,xfo),e(ph,$fo),e(k,kfo),e(k,is),e(is,vie),e(vie,Sfo),e(is,Rfo),e(is,EI),e(EI,Pfo),e(is,Bfo),e(is,CI),e(CI,Ifo),e(is,Nfo),e(k,qfo),e(k,ds),e(ds,Fie),e(Fie,jfo),e(ds,Dfo),e(ds,wI),e(wI,Gfo),e(ds,Ofo),e(ds,AI),e(AI,Vfo),e(ds,Xfo),e(k,zfo),e(k,cs),e(cs,Tie),e(Tie,Wfo),e(cs,Qfo),e(cs,LI),e(LI,Hfo),e(cs,Ufo),e(cs,yI),e(yI,Jfo),e(cs,Yfo),e(k,Kfo),e(k,_h),e(_h,Mie),e(Mie,Zfo),e(_h,emo),e(_h,xI),e(xI,omo),e(_h,rmo),e(k,tmo),e(k,fs),e(fs,Eie),e(Eie,amo),e(fs,nmo),e(fs,$I),e($I,smo),e(fs,lmo),e(fs,kI),e(kI,imo),e(fs,dmo),e(k,cmo),e(k,ms),e(ms,Cie),e(Cie,fmo),e(ms,mmo),e(ms,SI),e(SI,gmo),e(ms,hmo),e(ms,RI),e(RI,pmo),e(ms,_mo),e(k,umo),e(k,gs),e(gs,wie),e(wie,bmo),e(gs,vmo),e(gs,PI),e(PI,Fmo),e(gs,Tmo),e(gs,BI),e(BI,Mmo),e(gs,Emo),e(k,Cmo),e(k,hs),e(hs,Aie),e(Aie,wmo),e(hs,Amo),e(hs,II),e(II,Lmo),e(hs,ymo),e(hs,NI),e(NI,xmo),e(hs,$mo),e(k,kmo),e(k,ps),e(ps,Lie),e(Lie,Smo),e(ps,Rmo),e(ps,qI),e(qI,Pmo),e(ps,Bmo),e(ps,jI),e(jI,Imo),e(ps,Nmo),e(k,qmo),e(k,_s),e(_s,yie),e(yie,jmo),e(_s,Dmo),e(_s,DI),e(DI,Gmo),e(_s,Omo),e(_s,GI),e(GI,Vmo),e(_s,Xmo),e(k,zmo),e(k,us),e(us,xie),e(xie,Wmo),e(us,Qmo),e(us,OI),e(OI,Hmo),e(us,Umo),e(us,VI),e(VI,Jmo),e(us,Ymo),e(k,Kmo),e(k,bs),e(bs,$ie),e($ie,Zmo),e(bs,ego),e(bs,XI),e(XI,ogo),e(bs,rgo),e(bs,zI),e(zI,tgo),e(bs,ago),e(k,ngo),e(k,uh),e(uh,kie),e(kie,sgo),e(uh,lgo),e(uh,WI),e(WI,igo),e(uh,dgo),e(k,cgo),e(k,vs),e(vs,Sie),e(Sie,fgo),e(vs,mgo),e(vs,QI),e(QI,ggo),e(vs,hgo),e(vs,HI),e(HI,pgo),e(vs,_go),e(k,ugo),e(k,bh),e(bh,Rie),e(Rie,bgo),e(bh,vgo),e(bh,UI),e(UI,Fgo),e(bh,Tgo),e(k,Mgo),e(k,vh),e(vh,Pie),e(Pie,Ego),e(vh,Cgo),e(vh,JI),e(JI,wgo),e(vh,Ago),e(k,Lgo),e(k,Fs),e(Fs,Bie),e(Bie,ygo),e(Fs,xgo),e(Fs,YI),e(YI,$go),e(Fs,kgo),e(Fs,KI),e(KI,Sgo),e(Fs,Rgo),e(k,Pgo),e(k,Ts),e(Ts,Iie),e(Iie,Bgo),e(Ts,Igo),e(Ts,ZI),e(ZI,Ngo),e(Ts,qgo),e(Ts,eN),e(eN,jgo),e(Ts,Dgo),e(k,Ggo),e(k,Ms),e(Ms,Nie),e(Nie,Ogo),e(Ms,Vgo),e(Ms,oN),e(oN,Xgo),e(Ms,zgo),e(Ms,rN),e(rN,Wgo),e(Ms,Qgo),e(k,Hgo),e(k,Fh),e(Fh,qie),e(qie,Ugo),e(Fh,Jgo),e(Fh,tN),e(tN,Ygo),e(Fh,Kgo),e(k,Zgo),e(k,Es),e(Es,jie),e(jie,eho),e(Es,oho),e(Es,aN),e(aN,rho),e(Es,tho),e(Es,nN),e(nN,aho),e(Es,nho),e(k,sho),e(k,Cs),e(Cs,Die),e(Die,lho),e(Cs,iho),e(Cs,sN),e(sN,dho),e(Cs,cho),e(Cs,lN),e(lN,fho),e(Cs,mho),e(k,gho),e(k,ws),e(ws,Gie),e(Gie,hho),e(ws,pho),e(ws,iN),e(iN,_ho),e(ws,uho),e(ws,dN),e(dN,bho),e(ws,vho),e(k,Fho),e(k,As),e(As,Oie),e(Oie,Tho),e(As,Mho),e(As,cN),e(cN,Eho),e(As,Cho),e(As,fN),e(fN,who),e(As,Aho),e(k,Lho),e(k,Ls),e(Ls,Vie),e(Vie,yho),e(Ls,xho),e(Ls,mN),e(mN,$ho),e(Ls,kho),e(Ls,gN),e(gN,Sho),e(Ls,Rho),e(k,Pho),e(k,ys),e(ys,Xie),e(Xie,Bho),e(ys,Iho),e(ys,hN),e(hN,Nho),e(ys,qho),e(ys,pN),e(pN,jho),e(ys,Dho),e(k,Gho),e(k,xs),e(xs,zie),e(zie,Oho),e(xs,Vho),e(xs,_N),e(_N,Xho),e(xs,zho),e(xs,uN),e(uN,Who),e(xs,Qho),e(k,Hho),e(k,$s),e($s,Wie),e(Wie,Uho),e($s,Jho),e($s,bN),e(bN,Yho),e($s,Kho),e($s,vN),e(vN,Zho),e($s,epo),e(k,opo),e(k,Th),e(Th,Qie),e(Qie,rpo),e(Th,tpo),e(Th,FN),e(FN,apo),e(Th,npo),e(k,spo),e(k,ks),e(ks,Hie),e(Hie,lpo),e(ks,ipo),e(ks,TN),e(TN,dpo),e(ks,cpo),e(ks,MN),e(MN,fpo),e(ks,mpo),e(k,gpo),e(k,Ss),e(Ss,Uie),e(Uie,hpo),e(Ss,ppo),e(Ss,EN),e(EN,_po),e(Ss,upo),e(Ss,CN),e(CN,bpo),e(Ss,vpo),e(k,Fpo),e(k,Mh),e(Mh,Jie),e(Jie,Tpo),e(Mh,Mpo),e(Mh,wN),e(wN,Epo),e(Mh,Cpo),e(k,wpo),e(k,Eh),e(Eh,Yie),e(Yie,Apo),e(Eh,Lpo),e(Eh,AN),e(AN,ypo),e(Eh,xpo),e(k,$po),e(k,Ch),e(Ch,Kie),e(Kie,kpo),e(Ch,Spo),e(Ch,LN),e(LN,Rpo),e(Ch,Ppo),e(k,Bpo),e(k,wh),e(wh,Zie),e(Zie,Ipo),e(wh,Npo),e(wh,yN),e(yN,qpo),e(wh,jpo),e(k,Dpo),e(k,Rs),e(Rs,ede),e(ede,Gpo),e(Rs,Opo),e(Rs,xN),e(xN,Vpo),e(Rs,Xpo),e(Rs,$N),e($N,zpo),e(Rs,Wpo),e(k,Qpo),e(k,Ah),e(Ah,ode),e(ode,Hpo),e(Ah,Upo),e(Ah,kN),e(kN,Jpo),e(Ah,Ypo),e(k,Kpo),e(k,Ps),e(Ps,rde),e(rde,Zpo),e(Ps,e_o),e(Ps,SN),e(SN,o_o),e(Ps,r_o),e(Ps,RN),e(RN,t_o),e(Ps,a_o),e(k,n_o),e(k,Bs),e(Bs,tde),e(tde,s_o),e(Bs,l_o),e(Bs,PN),e(PN,i_o),e(Bs,d_o),e(Bs,BN),e(BN,c_o),e(Bs,f_o),e(k,m_o),e(k,Is),e(Is,ade),e(ade,g_o),e(Is,h_o),e(Is,IN),e(IN,p_o),e(Is,__o),e(Is,NN),e(NN,u_o),e(Is,b_o),e(k,v_o),e(k,Ns),e(Ns,nde),e(nde,F_o),e(Ns,T_o),e(Ns,qN),e(qN,M_o),e(Ns,E_o),e(Ns,jN),e(jN,C_o),e(Ns,w_o),e(k,A_o),e(k,qs),e(qs,sde),e(sde,L_o),e(qs,y_o),e(qs,DN),e(DN,x_o),e(qs,$_o),e(qs,GN),e(GN,k_o),e(qs,S_o),e(k,R_o),e(k,js),e(js,lde),e(lde,P_o),e(js,B_o),e(js,ON),e(ON,I_o),e(js,N_o),e(js,VN),e(VN,q_o),e(js,j_o),e(k,D_o),e(k,Lh),e(Lh,ide),e(ide,G_o),e(Lh,O_o),e(Lh,XN),e(XN,V_o),e(Lh,X_o),e(k,z_o),e(k,yh),e(yh,dde),e(dde,W_o),e(yh,Q_o),e(yh,zN),e(zN,H_o),e(yh,U_o),e(k,J_o),e(k,Ds),e(Ds,cde),e(cde,Y_o),e(Ds,K_o),e(Ds,WN),e(WN,Z_o),e(Ds,euo),e(Ds,QN),e(QN,ouo),e(Ds,ruo),e(k,tuo),e(k,Gs),e(Gs,fde),e(fde,auo),e(Gs,nuo),e(Gs,HN),e(HN,suo),e(Gs,luo),e(Gs,UN),e(UN,iuo),e(Gs,duo),e(k,cuo),e(k,Os),e(Os,mde),e(mde,fuo),e(Os,muo),e(Os,JN),e(JN,guo),e(Os,huo),e(Os,YN),e(YN,puo),e(Os,_uo),e(k,uuo),e(k,xh),e(xh,gde),e(gde,buo),e(xh,vuo),e(xh,KN),e(KN,Fuo),e(xh,Tuo),e(k,Muo),e(k,$h),e($h,hde),e(hde,Euo),e($h,Cuo),e($h,ZN),e(ZN,wuo),e($h,Auo),e(k,Luo),e(k,kh),e(kh,pde),e(pde,yuo),e(kh,xuo),e(kh,eq),e(eq,$uo),e(kh,kuo),e(k,Suo),e(k,Vs),e(Vs,_de),e(_de,Ruo),e(Vs,Puo),e(Vs,oq),e(oq,Buo),e(Vs,Iuo),e(Vs,rq),e(rq,Nuo),e(Vs,quo),e(k,juo),e(k,Xs),e(Xs,ude),e(ude,Duo),e(Xs,Guo),e(Xs,tq),e(tq,Ouo),e(Xs,Vuo),e(Xs,aq),e(aq,Xuo),e(Xs,zuo),e(k,Wuo),e(k,Sh),e(Sh,bde),e(bde,Quo),e(Sh,Huo),e(Sh,nq),e(nq,Uuo),e(Sh,Juo),e(k,Yuo),e(k,Rh),e(Rh,vde),e(vde,Kuo),e(Rh,Zuo),e(Rh,sq),e(sq,e2o),e(Rh,o2o),e(k,r2o),e(k,Ph),e(Ph,Fde),e(Fde,t2o),e(Ph,a2o),e(Ph,lq),e(lq,n2o),e(Ph,s2o),e(k,l2o),e(k,zs),e(zs,Tde),e(Tde,i2o),e(zs,d2o),e(zs,iq),e(iq,c2o),e(zs,f2o),e(zs,dq),e(dq,m2o),e(zs,g2o),e(k,h2o),e(k,Bh),e(Bh,Mde),e(Mde,p2o),e(Bh,_2o),e(Bh,cq),e(cq,u2o),e(Bh,b2o),e(k,v2o),e(k,Ih),e(Ih,Ede),e(Ede,F2o),e(Ih,T2o),e(Ih,fq),e(fq,M2o),e(Ih,E2o),e(k,C2o),e(k,Ws),e(Ws,Cde),e(Cde,w2o),e(Ws,A2o),e(Ws,mq),e(mq,L2o),e(Ws,y2o),e(Ws,gq),e(gq,x2o),e(Ws,$2o),e(k,k2o),e(k,Qs),e(Qs,wde),e(wde,S2o),e(Qs,R2o),e(Qs,hq),e(hq,P2o),e(Qs,B2o),e(Qs,pq),e(pq,I2o),e(Qs,N2o),e(k,q2o),e(k,Hs),e(Hs,Ade),e(Ade,j2o),e(Hs,D2o),e(Hs,_q),e(_q,G2o),e(Hs,O2o),e(Hs,uq),e(uq,V2o),e(Hs,X2o),e(k,z2o),e(k,Us),e(Us,Lde),e(Lde,W2o),e(Us,Q2o),e(Us,bq),e(bq,H2o),e(Us,U2o),e(Us,vq),e(vq,J2o),e(Us,Y2o),e(xr,K2o),M(Nh,xr,null),e(yo,Z2o),e(yo,qh),M(BL,qh,null),e(qh,e1o),e(qh,yde),e(yde,o1o),b(f,Mze,u),b(f,Gi,u),e(Gi,jh),e(jh,xde),M(IL,xde,null),e(Gi,r1o),e(Gi,$de),e($de,t1o),b(f,Eze,u),b(f,xo,u),M(NL,xo,null),e(xo,a1o),e(xo,qL),e(qL,n1o),e(qL,Fq),e(Fq,s1o),e(qL,l1o),e(xo,i1o),e(xo,jL),e(jL,d1o),e(jL,kde),e(kde,c1o),e(jL,f1o),e(xo,m1o),e(xo,Ue),M(DL,Ue,null),e(Ue,g1o),e(Ue,Sde),e(Sde,h1o),e(Ue,p1o),e(Ue,Ba),e(Ba,_1o),e(Ba,Rde),e(Rde,u1o),e(Ba,b1o),e(Ba,Pde),e(Pde,v1o),e(Ba,F1o),e(Ba,Bde),e(Bde,T1o),e(Ba,M1o),e(Ue,E1o),e(Ue,U),e(U,Dh),e(Dh,Ide),e(Ide,C1o),e(Dh,w1o),e(Dh,Tq),e(Tq,A1o),e(Dh,L1o),e(U,y1o),e(U,Gh),e(Gh,Nde),e(Nde,x1o),e(Gh,$1o),e(Gh,Mq),e(Mq,k1o),e(Gh,S1o),e(U,R1o),e(U,Oh),e(Oh,qde),e(qde,P1o),e(Oh,B1o),e(Oh,Eq),e(Eq,I1o),e(Oh,N1o),e(U,q1o),e(U,Vh),e(Vh,jde),e(jde,j1o),e(Vh,D1o),e(Vh,Cq),e(Cq,G1o),e(Vh,O1o),e(U,V1o),e(U,Xh),e(Xh,Dde),e(Dde,X1o),e(Xh,z1o),e(Xh,wq),e(wq,W1o),e(Xh,Q1o),e(U,H1o),e(U,zh),e(zh,Gde),e(Gde,U1o),e(zh,J1o),e(zh,Aq),e(Aq,Y1o),e(zh,K1o),e(U,Z1o),e(U,Wh),e(Wh,Ode),e(Ode,ebo),e(Wh,obo),e(Wh,Lq),e(Lq,rbo),e(Wh,tbo),e(U,abo),e(U,Qh),e(Qh,Vde),e(Vde,nbo),e(Qh,sbo),e(Qh,yq),e(yq,lbo),e(Qh,ibo),e(U,dbo),e(U,Hh),e(Hh,Xde),e(Xde,cbo),e(Hh,fbo),e(Hh,xq),e(xq,mbo),e(Hh,gbo),e(U,hbo),e(U,Uh),e(Uh,zde),e(zde,pbo),e(Uh,_bo),e(Uh,$q),e($q,ubo),e(Uh,bbo),e(U,vbo),e(U,Jh),e(Jh,Wde),e(Wde,Fbo),e(Jh,Tbo),e(Jh,kq),e(kq,Mbo),e(Jh,Ebo),e(U,Cbo),e(U,Yh),e(Yh,Qde),e(Qde,wbo),e(Yh,Abo),e(Yh,Sq),e(Sq,Lbo),e(Yh,ybo),e(U,xbo),e(U,Kh),e(Kh,Hde),e(Hde,$bo),e(Kh,kbo),e(Kh,Rq),e(Rq,Sbo),e(Kh,Rbo),e(U,Pbo),e(U,Zh),e(Zh,Ude),e(Ude,Bbo),e(Zh,Ibo),e(Zh,Pq),e(Pq,Nbo),e(Zh,qbo),e(U,jbo),e(U,ep),e(ep,Jde),e(Jde,Dbo),e(ep,Gbo),e(ep,Bq),e(Bq,Obo),e(ep,Vbo),e(U,Xbo),e(U,op),e(op,Yde),e(Yde,zbo),e(op,Wbo),e(op,Iq),e(Iq,Qbo),e(op,Hbo),e(U,Ubo),e(U,rp),e(rp,Kde),e(Kde,Jbo),e(rp,Ybo),e(rp,Nq),e(Nq,Kbo),e(rp,Zbo),e(U,evo),e(U,tp),e(tp,Zde),e(Zde,ovo),e(tp,rvo),e(tp,qq),e(qq,tvo),e(tp,avo),e(U,nvo),e(U,ap),e(ap,ece),e(ece,svo),e(ap,lvo),e(ap,jq),e(jq,ivo),e(ap,dvo),e(U,cvo),e(U,np),e(np,oce),e(oce,fvo),e(np,mvo),e(np,Dq),e(Dq,gvo),e(np,hvo),e(U,pvo),e(U,sp),e(sp,rce),e(rce,_vo),e(sp,uvo),e(sp,Gq),e(Gq,bvo),e(sp,vvo),e(U,Fvo),e(U,lp),e(lp,tce),e(tce,Tvo),e(lp,Mvo),e(lp,Oq),e(Oq,Evo),e(lp,Cvo),e(U,wvo),e(U,ip),e(ip,ace),e(ace,Avo),e(ip,Lvo),e(ip,Vq),e(Vq,yvo),e(ip,xvo),e(U,$vo),e(U,dp),e(dp,nce),e(nce,kvo),e(dp,Svo),e(dp,Xq),e(Xq,Rvo),e(dp,Pvo),e(U,Bvo),e(U,cp),e(cp,sce),e(sce,Ivo),e(cp,Nvo),e(cp,zq),e(zq,qvo),e(cp,jvo),e(U,Dvo),e(U,fp),e(fp,lce),e(lce,Gvo),e(fp,Ovo),e(fp,Wq),e(Wq,Vvo),e(fp,Xvo),e(U,zvo),e(U,mp),e(mp,ice),e(ice,Wvo),e(mp,Qvo),e(mp,Qq),e(Qq,Hvo),e(mp,Uvo),e(U,Jvo),e(U,gp),e(gp,dce),e(dce,Yvo),e(gp,Kvo),e(gp,Hq),e(Hq,Zvo),e(gp,e3o),e(U,o3o),e(U,hp),e(hp,cce),e(cce,r3o),e(hp,t3o),e(hp,Uq),e(Uq,a3o),e(hp,n3o),e(U,s3o),e(U,pp),e(pp,fce),e(fce,l3o),e(pp,i3o),e(pp,Jq),e(Jq,d3o),e(pp,c3o),e(U,f3o),e(U,_p),e(_p,mce),e(mce,m3o),e(_p,g3o),e(_p,Yq),e(Yq,h3o),e(_p,p3o),e(U,_3o),e(U,up),e(up,gce),e(gce,u3o),e(up,b3o),e(up,Kq),e(Kq,v3o),e(up,F3o),e(U,T3o),e(U,bp),e(bp,hce),e(hce,M3o),e(bp,E3o),e(bp,Zq),e(Zq,C3o),e(bp,w3o),e(U,A3o),e(U,vp),e(vp,pce),e(pce,L3o),e(vp,y3o),e(vp,ej),e(ej,x3o),e(vp,$3o),e(U,k3o),e(U,Fp),e(Fp,_ce),e(_ce,S3o),e(Fp,R3o),e(Fp,oj),e(oj,P3o),e(Fp,B3o),e(U,I3o),e(U,Tp),e(Tp,uce),e(uce,N3o),e(Tp,q3o),e(Tp,rj),e(rj,j3o),e(Tp,D3o),e(Ue,G3o),M(Mp,Ue,null),e(Ue,O3o),M(Ep,Ue,null),e(xo,V3o),e(xo,Cp),M(GL,Cp,null),e(Cp,X3o),e(Cp,bce),e(bce,z3o),b(f,Cze,u),b(f,Oi,u),e(Oi,wp),e(wp,vce),M(OL,vce,null),e(Oi,W3o),e(Oi,Fce),e(Fce,Q3o),b(f,wze,u),b(f,$o,u),M(VL,$o,null),e($o,H3o),e($o,XL),e(XL,U3o),e(XL,tj),e(tj,J3o),e(XL,Y3o),e($o,K3o),e($o,zL),e(zL,Z3o),e(zL,Tce),e(Tce,eFo),e(zL,oFo),e($o,rFo),e($o,Je),M(WL,Je,null),e(Je,tFo),e(Je,Mce),e(Mce,aFo),e(Je,nFo),e(Je,Vi),e(Vi,sFo),e(Vi,Ece),e(Ece,lFo),e(Vi,iFo),e(Vi,Cce),e(Cce,dFo),e(Vi,cFo),e(Je,fFo),e(Je,fe),e(fe,Ap),e(Ap,wce),e(wce,mFo),e(Ap,gFo),e(Ap,aj),e(aj,hFo),e(Ap,pFo),e(fe,_Fo),e(fe,Lp),e(Lp,Ace),e(Ace,uFo),e(Lp,bFo),e(Lp,nj),e(nj,vFo),e(Lp,FFo),e(fe,TFo),e(fe,yp),e(yp,Lce),e(Lce,MFo),e(yp,EFo),e(yp,sj),e(sj,CFo),e(yp,wFo),e(fe,AFo),e(fe,xp),e(xp,yce),e(yce,LFo),e(xp,yFo),e(xp,lj),e(lj,xFo),e(xp,$Fo),e(fe,kFo),e(fe,$p),e($p,xce),e(xce,SFo),e($p,RFo),e($p,ij),e(ij,PFo),e($p,BFo),e(fe,IFo),e(fe,kp),e(kp,$ce),e($ce,NFo),e(kp,qFo),e(kp,dj),e(dj,jFo),e(kp,DFo),e(fe,GFo),e(fe,Sp),e(Sp,kce),e(kce,OFo),e(Sp,VFo),e(Sp,cj),e(cj,XFo),e(Sp,zFo),e(fe,WFo),e(fe,Rp),e(Rp,Sce),e(Sce,QFo),e(Rp,HFo),e(Rp,fj),e(fj,UFo),e(Rp,JFo),e(fe,YFo),e(fe,Pp),e(Pp,Rce),e(Rce,KFo),e(Pp,ZFo),e(Pp,mj),e(mj,e6o),e(Pp,o6o),e(fe,r6o),e(fe,Bp),e(Bp,Pce),e(Pce,t6o),e(Bp,a6o),e(Bp,gj),e(gj,n6o),e(Bp,s6o),e(fe,l6o),e(fe,Ip),e(Ip,Bce),e(Bce,i6o),e(Ip,d6o),e(Ip,hj),e(hj,c6o),e(Ip,f6o),e(fe,m6o),e(fe,Np),e(Np,Ice),e(Ice,g6o),e(Np,h6o),e(Np,pj),e(pj,p6o),e(Np,_6o),e(fe,u6o),e(fe,qp),e(qp,Nce),e(Nce,b6o),e(qp,v6o),e(qp,_j),e(_j,F6o),e(qp,T6o),e(fe,M6o),e(fe,jp),e(jp,qce),e(qce,E6o),e(jp,C6o),e(jp,uj),e(uj,w6o),e(jp,A6o),e(fe,L6o),e(fe,Dp),e(Dp,jce),e(jce,y6o),e(Dp,x6o),e(Dp,bj),e(bj,$6o),e(Dp,k6o),e(fe,S6o),e(fe,Gp),e(Gp,Dce),e(Dce,R6o),e(Gp,P6o),e(Gp,vj),e(vj,B6o),e(Gp,I6o),e(fe,N6o),e(fe,Op),e(Op,Gce),e(Gce,q6o),e(Op,j6o),e(Op,Fj),e(Fj,D6o),e(Op,G6o),e(fe,O6o),e(fe,Vp),e(Vp,Oce),e(Oce,V6o),e(Vp,X6o),e(Vp,Tj),e(Tj,z6o),e(Vp,W6o),e(fe,Q6o),e(fe,Xp),e(Xp,Vce),e(Vce,H6o),e(Xp,U6o),e(Xp,Mj),e(Mj,J6o),e(Xp,Y6o),e(Je,K6o),M(zp,Je,null),e(Je,Z6o),M(Wp,Je,null),e($o,eTo),e($o,Qp),M(QL,Qp,null),e(Qp,oTo),e(Qp,Xce),e(Xce,rTo),b(f,Aze,u),b(f,Xi,u),e(Xi,Hp),e(Hp,zce),M(HL,zce,null),e(Xi,tTo),e(Xi,Wce),e(Wce,aTo),b(f,Lze,u),b(f,ko,u),M(UL,ko,null),e(ko,nTo),e(ko,zi),e(zi,sTo),e(zi,Ej),e(Ej,lTo),e(zi,iTo),e(zi,Cj),e(Cj,dTo),e(zi,cTo),e(ko,fTo),e(ko,JL),e(JL,mTo),e(JL,Qce),e(Qce,gTo),e(JL,hTo),e(ko,pTo),e(ko,it),M(YL,it,null),e(it,_To),e(it,Hce),e(Hce,uTo),e(it,bTo),e(it,Wi),e(Wi,vTo),e(Wi,Uce),e(Uce,FTo),e(Wi,TTo),e(Wi,wj),e(wj,MTo),e(Wi,ETo),e(it,CTo),M(Up,it,null),e(ko,wTo),e(ko,Ye),M(KL,Ye,null),e(Ye,ATo),e(Ye,Jce),e(Jce,LTo),e(Ye,yTo),e(Ye,Ia),e(Ia,xTo),e(Ia,Yce),e(Yce,$To),e(Ia,kTo),e(Ia,Kce),e(Kce,STo),e(Ia,RTo),e(Ia,Zce),e(Zce,PTo),e(Ia,BTo),e(Ye,ITo),e(Ye,y),e(y,Jp),e(Jp,efe),e(efe,NTo),e(Jp,qTo),e(Jp,Aj),e(Aj,jTo),e(Jp,DTo),e(y,GTo),e(y,Yp),e(Yp,ofe),e(ofe,OTo),e(Yp,VTo),e(Yp,Lj),e(Lj,XTo),e(Yp,zTo),e(y,WTo),e(y,Kp),e(Kp,rfe),e(rfe,QTo),e(Kp,HTo),e(Kp,yj),e(yj,UTo),e(Kp,JTo),e(y,YTo),e(y,Zp),e(Zp,tfe),e(tfe,KTo),e(Zp,ZTo),e(Zp,xj),e(xj,e8o),e(Zp,o8o),e(y,r8o),e(y,e_),e(e_,afe),e(afe,t8o),e(e_,a8o),e(e_,$j),e($j,n8o),e(e_,s8o),e(y,l8o),e(y,o_),e(o_,nfe),e(nfe,i8o),e(o_,d8o),e(o_,kj),e(kj,c8o),e(o_,f8o),e(y,m8o),e(y,r_),e(r_,sfe),e(sfe,g8o),e(r_,h8o),e(r_,Sj),e(Sj,p8o),e(r_,_8o),e(y,u8o),e(y,t_),e(t_,lfe),e(lfe,b8o),e(t_,v8o),e(t_,Rj),e(Rj,F8o),e(t_,T8o),e(y,M8o),e(y,a_),e(a_,ife),e(ife,E8o),e(a_,C8o),e(a_,Pj),e(Pj,w8o),e(a_,A8o),e(y,L8o),e(y,n_),e(n_,dfe),e(dfe,y8o),e(n_,x8o),e(n_,Bj),e(Bj,$8o),e(n_,k8o),e(y,S8o),e(y,s_),e(s_,cfe),e(cfe,R8o),e(s_,P8o),e(s_,Ij),e(Ij,B8o),e(s_,I8o),e(y,N8o),e(y,l_),e(l_,ffe),e(ffe,q8o),e(l_,j8o),e(l_,Nj),e(Nj,D8o),e(l_,G8o),e(y,O8o),e(y,i_),e(i_,mfe),e(mfe,V8o),e(i_,X8o),e(i_,qj),e(qj,z8o),e(i_,W8o),e(y,Q8o),e(y,d_),e(d_,gfe),e(gfe,H8o),e(d_,U8o),e(d_,jj),e(jj,J8o),e(d_,Y8o),e(y,K8o),e(y,c_),e(c_,hfe),e(hfe,Z8o),e(c_,eMo),e(c_,Dj),e(Dj,oMo),e(c_,rMo),e(y,tMo),e(y,f_),e(f_,pfe),e(pfe,aMo),e(f_,nMo),e(f_,Gj),e(Gj,sMo),e(f_,lMo),e(y,iMo),e(y,m_),e(m_,_fe),e(_fe,dMo),e(m_,cMo),e(m_,Oj),e(Oj,fMo),e(m_,mMo),e(y,gMo),e(y,g_),e(g_,ufe),e(ufe,hMo),e(g_,pMo),e(g_,Vj),e(Vj,_Mo),e(g_,uMo),e(y,bMo),e(y,h_),e(h_,bfe),e(bfe,vMo),e(h_,FMo),e(h_,Xj),e(Xj,TMo),e(h_,MMo),e(y,EMo),e(y,p_),e(p_,vfe),e(vfe,CMo),e(p_,wMo),e(p_,zj),e(zj,AMo),e(p_,LMo),e(y,yMo),e(y,__),e(__,Ffe),e(Ffe,xMo),e(__,$Mo),e(__,Wj),e(Wj,kMo),e(__,SMo),e(y,RMo),e(y,u_),e(u_,Tfe),e(Tfe,PMo),e(u_,BMo),e(u_,Qj),e(Qj,IMo),e(u_,NMo),e(y,qMo),e(y,b_),e(b_,Mfe),e(Mfe,jMo),e(b_,DMo),e(b_,Hj),e(Hj,GMo),e(b_,OMo),e(y,VMo),e(y,v_),e(v_,Efe),e(Efe,XMo),e(v_,zMo),e(v_,Uj),e(Uj,WMo),e(v_,QMo),e(y,HMo),e(y,F_),e(F_,Cfe),e(Cfe,UMo),e(F_,JMo),e(F_,Jj),e(Jj,YMo),e(F_,KMo),e(y,ZMo),e(y,T_),e(T_,wfe),e(wfe,e4o),e(T_,o4o),e(T_,Yj),e(Yj,r4o),e(T_,t4o),e(y,a4o),e(y,M_),e(M_,Afe),e(Afe,n4o),e(M_,s4o),e(M_,Kj),e(Kj,l4o),e(M_,i4o),e(y,d4o),e(y,E_),e(E_,Lfe),e(Lfe,c4o),e(E_,f4o),e(E_,Zj),e(Zj,m4o),e(E_,g4o),e(y,h4o),e(y,C_),e(C_,yfe),e(yfe,p4o),e(C_,_4o),e(C_,eD),e(eD,u4o),e(C_,b4o),e(y,v4o),e(y,w_),e(w_,xfe),e(xfe,F4o),e(w_,T4o),e(w_,oD),e(oD,M4o),e(w_,E4o),e(y,C4o),e(y,A_),e(A_,$fe),e($fe,w4o),e(A_,A4o),e(A_,rD),e(rD,L4o),e(A_,y4o),e(y,x4o),e(y,L_),e(L_,kfe),e(kfe,$4o),e(L_,k4o),e(L_,tD),e(tD,S4o),e(L_,R4o),e(y,P4o),e(y,y_),e(y_,Sfe),e(Sfe,B4o),e(y_,I4o),e(y_,aD),e(aD,N4o),e(y_,q4o),e(y,j4o),e(y,x_),e(x_,Rfe),e(Rfe,D4o),e(x_,G4o),e(x_,nD),e(nD,O4o),e(x_,V4o),e(y,X4o),e(y,Js),e(Js,Pfe),e(Pfe,z4o),e(Js,W4o),e(Js,sD),e(sD,Q4o),e(Js,H4o),e(Js,lD),e(lD,U4o),e(Js,J4o),e(y,Y4o),e(y,$_),e($_,Bfe),e(Bfe,K4o),e($_,Z4o),e($_,iD),e(iD,eEo),e($_,oEo),e(y,rEo),e(y,k_),e(k_,Ife),e(Ife,tEo),e(k_,aEo),e(k_,dD),e(dD,nEo),e(k_,sEo),e(y,lEo),e(y,S_),e(S_,Nfe),e(Nfe,iEo),e(S_,dEo),e(S_,cD),e(cD,cEo),e(S_,fEo),e(y,mEo),e(y,R_),e(R_,qfe),e(qfe,gEo),e(R_,hEo),e(R_,fD),e(fD,pEo),e(R_,_Eo),e(y,uEo),e(y,P_),e(P_,jfe),e(jfe,bEo),e(P_,vEo),e(P_,mD),e(mD,FEo),e(P_,TEo),e(y,MEo),e(y,B_),e(B_,Dfe),e(Dfe,EEo),e(B_,CEo),e(B_,gD),e(gD,wEo),e(B_,AEo),e(y,LEo),e(y,I_),e(I_,Gfe),e(Gfe,yEo),e(I_,xEo),e(I_,hD),e(hD,$Eo),e(I_,kEo),e(y,SEo),e(y,N_),e(N_,Ofe),e(Ofe,REo),e(N_,PEo),e(N_,pD),e(pD,BEo),e(N_,IEo),e(y,NEo),e(y,q_),e(q_,Vfe),e(Vfe,qEo),e(q_,jEo),e(q_,_D),e(_D,DEo),e(q_,GEo),e(y,OEo),e(y,j_),e(j_,Xfe),e(Xfe,VEo),e(j_,XEo),e(j_,uD),e(uD,zEo),e(j_,WEo),e(y,QEo),e(y,D_),e(D_,zfe),e(zfe,HEo),e(D_,UEo),e(D_,bD),e(bD,JEo),e(D_,YEo),e(y,KEo),e(y,G_),e(G_,Wfe),e(Wfe,ZEo),e(G_,eCo),e(G_,vD),e(vD,oCo),e(G_,rCo),e(y,tCo),e(y,O_),e(O_,Qfe),e(Qfe,aCo),e(O_,nCo),e(O_,FD),e(FD,sCo),e(O_,lCo),e(y,iCo),e(y,V_),e(V_,Hfe),e(Hfe,dCo),e(V_,cCo),e(V_,TD),e(TD,fCo),e(V_,mCo),e(y,gCo),e(y,X_),e(X_,Ufe),e(Ufe,hCo),e(X_,pCo),e(X_,MD),e(MD,_Co),e(X_,uCo),e(y,bCo),e(y,z_),e(z_,Jfe),e(Jfe,vCo),e(z_,FCo),e(z_,ED),e(ED,TCo),e(z_,MCo),e(y,ECo),e(y,W_),e(W_,Yfe),e(Yfe,CCo),e(W_,wCo),e(W_,CD),e(CD,ACo),e(W_,LCo),e(y,yCo),e(y,Q_),e(Q_,Kfe),e(Kfe,xCo),e(Q_,$Co),e(Q_,wD),e(wD,kCo),e(Q_,SCo),e(y,RCo),e(y,H_),e(H_,Zfe),e(Zfe,PCo),e(H_,BCo),e(H_,AD),e(AD,ICo),e(H_,NCo),e(y,qCo),e(y,U_),e(U_,eme),e(eme,jCo),e(U_,DCo),e(U_,LD),e(LD,GCo),e(U_,OCo),e(y,VCo),e(y,J_),e(J_,ome),e(ome,XCo),e(J_,zCo),e(J_,yD),e(yD,WCo),e(J_,QCo),e(y,HCo),e(y,Y_),e(Y_,rme),e(rme,UCo),e(Y_,JCo),e(Y_,xD),e(xD,YCo),e(Y_,KCo),e(y,ZCo),e(y,K_),e(K_,tme),e(tme,e5o),e(K_,o5o),e(K_,$D),e($D,r5o),e(K_,t5o),e(y,a5o),e(y,Z_),e(Z_,ame),e(ame,n5o),e(Z_,s5o),e(Z_,kD),e(kD,l5o),e(Z_,i5o),e(y,d5o),e(y,eu),e(eu,nme),e(nme,c5o),e(eu,f5o),e(eu,SD),e(SD,m5o),e(eu,g5o),e(y,h5o),e(y,ou),e(ou,sme),e(sme,p5o),e(ou,_5o),e(ou,RD),e(RD,u5o),e(ou,b5o),e(y,v5o),e(y,ru),e(ru,lme),e(lme,F5o),e(ru,T5o),e(ru,PD),e(PD,M5o),e(ru,E5o),e(y,C5o),e(y,tu),e(tu,ime),e(ime,w5o),e(tu,A5o),e(tu,BD),e(BD,L5o),e(tu,y5o),e(y,x5o),e(y,au),e(au,dme),e(dme,$5o),e(au,k5o),e(au,ID),e(ID,S5o),e(au,R5o),e(y,P5o),e(y,nu),e(nu,cme),e(cme,B5o),e(nu,I5o),e(nu,ND),e(ND,N5o),e(nu,q5o),e(y,j5o),e(y,su),e(su,fme),e(fme,D5o),e(su,G5o),e(su,qD),e(qD,O5o),e(su,V5o),e(y,X5o),e(y,lu),e(lu,mme),e(mme,z5o),e(lu,W5o),e(lu,jD),e(jD,Q5o),e(lu,H5o),e(y,U5o),e(y,iu),e(iu,gme),e(gme,J5o),e(iu,Y5o),e(iu,DD),e(DD,K5o),e(iu,Z5o),e(y,e0o),e(y,du),e(du,hme),e(hme,o0o),e(du,r0o),e(du,GD),e(GD,t0o),e(du,a0o),e(y,n0o),e(y,cu),e(cu,pme),e(pme,s0o),e(cu,l0o),e(cu,OD),e(OD,i0o),e(cu,d0o),e(y,c0o),e(y,fu),e(fu,_me),e(_me,f0o),e(fu,m0o),e(fu,VD),e(VD,g0o),e(fu,h0o),e(y,p0o),e(y,mu),e(mu,ume),e(ume,_0o),e(mu,u0o),e(mu,XD),e(XD,b0o),e(mu,v0o),e(y,F0o),e(y,gu),e(gu,bme),e(bme,T0o),e(gu,M0o),e(gu,zD),e(zD,E0o),e(gu,C0o),e(y,w0o),e(y,hu),e(hu,vme),e(vme,A0o),e(hu,L0o),e(hu,WD),e(WD,y0o),e(hu,x0o),e(y,$0o),e(y,pu),e(pu,Fme),e(Fme,k0o),e(pu,S0o),e(pu,QD),e(QD,R0o),e(pu,P0o),e(y,B0o),e(y,_u),e(_u,Tme),e(Tme,I0o),e(_u,N0o),e(_u,HD),e(HD,q0o),e(_u,j0o),e(y,D0o),e(y,uu),e(uu,Mme),e(Mme,G0o),e(uu,O0o),e(uu,UD),e(UD,V0o),e(uu,X0o),e(y,z0o),e(y,bu),e(bu,Eme),e(Eme,W0o),e(bu,Q0o),e(bu,JD),e(JD,H0o),e(bu,U0o),e(y,J0o),e(y,vu),e(vu,Cme),e(Cme,Y0o),e(vu,K0o),e(vu,YD),e(YD,Z0o),e(vu,ewo),e(y,owo),e(y,Fu),e(Fu,wme),e(wme,rwo),e(Fu,two),e(Fu,KD),e(KD,awo),e(Fu,nwo),e(y,swo),e(y,Tu),e(Tu,Ame),e(Ame,lwo),e(Tu,iwo),e(Tu,ZD),e(ZD,dwo),e(Tu,cwo),e(y,fwo),e(y,Mu),e(Mu,Lme),e(Lme,mwo),e(Mu,gwo),e(Mu,eG),e(eG,hwo),e(Mu,pwo),e(y,_wo),e(y,Eu),e(Eu,yme),e(yme,uwo),e(Eu,bwo),e(Eu,oG),e(oG,vwo),e(Eu,Fwo),e(y,Two),e(y,Cu),e(Cu,xme),e(xme,Mwo),e(Cu,Ewo),e(Cu,rG),e(rG,Cwo),e(Cu,wwo),e(y,Awo),e(y,wu),e(wu,$me),e($me,Lwo),e(wu,ywo),e(wu,tG),e(tG,xwo),e(wu,$wo),e(y,kwo),e(y,Au),e(Au,kme),e(kme,Swo),e(Au,Rwo),e(Au,aG),e(aG,Pwo),e(Au,Bwo),e(y,Iwo),e(y,Lu),e(Lu,Sme),e(Sme,Nwo),e(Lu,qwo),e(Lu,nG),e(nG,jwo),e(Lu,Dwo),e(y,Gwo),e(y,yu),e(yu,Rme),e(Rme,Owo),e(yu,Vwo),e(yu,sG),e(sG,Xwo),e(yu,zwo),e(y,Wwo),e(y,xu),e(xu,Pme),e(Pme,Qwo),e(xu,Hwo),e(xu,lG),e(lG,Uwo),e(xu,Jwo),e(y,Ywo),e(y,$u),e($u,Bme),e(Bme,Kwo),e($u,Zwo),e($u,iG),e(iG,eAo),e($u,oAo),e(y,rAo),e(y,ku),e(ku,Ime),e(Ime,tAo),e(ku,aAo),e(ku,dG),e(dG,nAo),e(ku,sAo),e(y,lAo),e(y,Su),e(Su,Nme),e(Nme,iAo),e(Su,dAo),e(Su,cG),e(cG,cAo),e(Su,fAo),e(y,mAo),e(y,Ru),e(Ru,qme),e(qme,gAo),e(Ru,hAo),e(Ru,fG),e(fG,pAo),e(Ru,_Ao),e(y,uAo),e(y,Pu),e(Pu,jme),e(jme,bAo),e(Pu,vAo),e(Pu,mG),e(mG,FAo),e(Pu,TAo),e(y,MAo),e(y,Bu),e(Bu,Dme),e(Dme,EAo),e(Bu,CAo),e(Bu,gG),e(gG,wAo),e(Bu,AAo),e(y,LAo),e(y,Iu),e(Iu,Gme),e(Gme,yAo),e(Iu,xAo),e(Iu,hG),e(hG,$Ao),e(Iu,kAo),e(y,SAo),e(y,Nu),e(Nu,Ome),e(Ome,RAo),e(Nu,PAo),e(Nu,pG),e(pG,BAo),e(Nu,IAo),e(y,NAo),e(y,qu),e(qu,Vme),e(Vme,qAo),e(qu,jAo),e(qu,_G),e(_G,DAo),e(qu,GAo),e(y,OAo),e(y,ju),e(ju,Xme),e(Xme,VAo),e(ju,XAo),e(ju,uG),e(uG,zAo),e(ju,WAo),e(y,QAo),e(y,Du),e(Du,zme),e(zme,HAo),e(Du,UAo),e(Du,bG),e(bG,JAo),e(Du,YAo),e(y,KAo),e(y,Gu),e(Gu,Wme),e(Wme,ZAo),e(Gu,e7o),e(Gu,vG),e(vG,o7o),e(Gu,r7o),e(y,t7o),e(y,Ou),e(Ou,Qme),e(Qme,a7o),e(Ou,n7o),e(Ou,FG),e(FG,s7o),e(Ou,l7o),e(y,i7o),e(y,Vu),e(Vu,Hme),e(Hme,d7o),e(Vu,c7o),e(Vu,TG),e(TG,f7o),e(Vu,m7o),e(y,g7o),e(y,Xu),e(Xu,Ume),e(Ume,h7o),e(Xu,p7o),e(Xu,MG),e(MG,_7o),e(Xu,u7o),e(y,b7o),e(y,zu),e(zu,Jme),e(Jme,v7o),e(zu,F7o),e(zu,EG),e(EG,T7o),e(zu,M7o),e(y,E7o),e(y,Wu),e(Wu,Yme),e(Yme,C7o),e(Wu,w7o),e(Wu,CG),e(CG,A7o),e(Wu,L7o),e(y,y7o),e(y,Qu),e(Qu,Kme),e(Kme,x7o),e(Qu,$7o),e(Qu,wG),e(wG,k7o),e(Qu,S7o),e(y,R7o),e(y,Hu),e(Hu,Zme),e(Zme,P7o),e(Hu,B7o),e(Hu,AG),e(AG,I7o),e(Hu,N7o),e(y,q7o),e(y,Uu),e(Uu,ege),e(ege,j7o),e(Uu,D7o),e(Uu,LG),e(LG,G7o),e(Uu,O7o),e(y,V7o),e(y,Ju),e(Ju,oge),e(oge,X7o),e(Ju,z7o),e(Ju,yG),e(yG,W7o),e(Ju,Q7o),e(y,H7o),e(y,Yu),e(Yu,rge),e(rge,U7o),e(Yu,J7o),e(Yu,xG),e(xG,Y7o),e(Yu,K7o),e(y,Z7o),e(y,Ku),e(Ku,tge),e(tge,eLo),e(Ku,oLo),e(Ku,$G),e($G,rLo),e(Ku,tLo),e(y,aLo),e(y,Zu),e(Zu,age),e(age,nLo),e(Zu,sLo),e(Zu,kG),e(kG,lLo),e(Zu,iLo),e(y,dLo),e(y,e2),e(e2,nge),e(nge,cLo),e(e2,fLo),e(e2,SG),e(SG,mLo),e(e2,gLo),e(Ye,hLo),e(Ye,o2),e(o2,pLo),e(o2,sge),e(sge,_Lo),e(o2,uLo),e(o2,lge),e(lge,bLo),e(Ye,vLo),M(r2,Ye,null),b(f,yze,u),b(f,Qi,u),e(Qi,t2),e(t2,ige),M(ZL,ige,null),e(Qi,FLo),e(Qi,dge),e(dge,TLo),b(f,xze,u),b(f,So,u),M(ey,So,null),e(So,MLo),e(So,Hi),e(Hi,ELo),e(Hi,RG),e(RG,CLo),e(Hi,wLo),e(Hi,PG),e(PG,ALo),e(Hi,LLo),e(So,yLo),e(So,oy),e(oy,xLo),e(oy,cge),e(cge,$Lo),e(oy,kLo),e(So,SLo),e(So,dt),M(ry,dt,null),e(dt,RLo),e(dt,fge),e(fge,PLo),e(dt,BLo),e(dt,Ui),e(Ui,ILo),e(Ui,mge),e(mge,NLo),e(Ui,qLo),e(Ui,BG),e(BG,jLo),e(Ui,DLo),e(dt,GLo),M(a2,dt,null),e(So,OLo),e(So,Ke),M(ty,Ke,null),e(Ke,VLo),e(Ke,gge),e(gge,XLo),e(Ke,zLo),e(Ke,Na),e(Na,WLo),e(Na,hge),e(hge,QLo),e(Na,HLo),e(Na,pge),e(pge,ULo),e(Na,JLo),e(Na,_ge),e(_ge,YLo),e(Na,KLo),e(Ke,ZLo),e(Ke,G),e(G,n2),e(n2,uge),e(uge,eyo),e(n2,oyo),e(n2,IG),e(IG,ryo),e(n2,tyo),e(G,ayo),e(G,s2),e(s2,bge),e(bge,nyo),e(s2,syo),e(s2,NG),e(NG,lyo),e(s2,iyo),e(G,dyo),e(G,l2),e(l2,vge),e(vge,cyo),e(l2,fyo),e(l2,qG),e(qG,myo),e(l2,gyo),e(G,hyo),e(G,i2),e(i2,Fge),e(Fge,pyo),e(i2,_yo),e(i2,jG),e(jG,uyo),e(i2,byo),e(G,vyo),e(G,d2),e(d2,Tge),e(Tge,Fyo),e(d2,Tyo),e(d2,DG),e(DG,Myo),e(d2,Eyo),e(G,Cyo),e(G,c2),e(c2,Mge),e(Mge,wyo),e(c2,Ayo),e(c2,GG),e(GG,Lyo),e(c2,yyo),e(G,xyo),e(G,f2),e(f2,Ege),e(Ege,$yo),e(f2,kyo),e(f2,OG),e(OG,Syo),e(f2,Ryo),e(G,Pyo),e(G,m2),e(m2,Cge),e(Cge,Byo),e(m2,Iyo),e(m2,VG),e(VG,Nyo),e(m2,qyo),e(G,jyo),e(G,g2),e(g2,wge),e(wge,Dyo),e(g2,Gyo),e(g2,XG),e(XG,Oyo),e(g2,Vyo),e(G,Xyo),e(G,h2),e(h2,Age),e(Age,zyo),e(h2,Wyo),e(h2,zG),e(zG,Qyo),e(h2,Hyo),e(G,Uyo),e(G,p2),e(p2,Lge),e(Lge,Jyo),e(p2,Yyo),e(p2,WG),e(WG,Kyo),e(p2,Zyo),e(G,e9o),e(G,_2),e(_2,yge),e(yge,o9o),e(_2,r9o),e(_2,QG),e(QG,t9o),e(_2,a9o),e(G,n9o),e(G,u2),e(u2,xge),e(xge,s9o),e(u2,l9o),e(u2,HG),e(HG,i9o),e(u2,d9o),e(G,c9o),e(G,b2),e(b2,$ge),e($ge,f9o),e(b2,m9o),e(b2,UG),e(UG,g9o),e(b2,h9o),e(G,p9o),e(G,v2),e(v2,kge),e(kge,_9o),e(v2,u9o),e(v2,JG),e(JG,b9o),e(v2,v9o),e(G,F9o),e(G,F2),e(F2,Sge),e(Sge,T9o),e(F2,M9o),e(F2,YG),e(YG,E9o),e(F2,C9o),e(G,w9o),e(G,T2),e(T2,Rge),e(Rge,A9o),e(T2,L9o),e(T2,KG),e(KG,y9o),e(T2,x9o),e(G,$9o),e(G,M2),e(M2,Pge),e(Pge,k9o),e(M2,S9o),e(M2,ZG),e(ZG,R9o),e(M2,P9o),e(G,B9o),e(G,E2),e(E2,Bge),e(Bge,I9o),e(E2,N9o),e(E2,eO),e(eO,q9o),e(E2,j9o),e(G,D9o),e(G,C2),e(C2,Ige),e(Ige,G9o),e(C2,O9o),e(C2,oO),e(oO,V9o),e(C2,X9o),e(G,z9o),e(G,w2),e(w2,Nge),e(Nge,W9o),e(w2,Q9o),e(w2,rO),e(rO,H9o),e(w2,U9o),e(G,J9o),e(G,A2),e(A2,qge),e(qge,Y9o),e(A2,K9o),e(A2,tO),e(tO,Z9o),e(A2,exo),e(G,oxo),e(G,L2),e(L2,jge),e(jge,rxo),e(L2,txo),e(L2,aO),e(aO,axo),e(L2,nxo),e(G,sxo),e(G,y2),e(y2,Dge),e(Dge,lxo),e(y2,ixo),e(y2,nO),e(nO,dxo),e(y2,cxo),e(G,fxo),e(G,x2),e(x2,Gge),e(Gge,mxo),e(x2,gxo),e(x2,sO),e(sO,hxo),e(x2,pxo),e(G,_xo),e(G,$2),e($2,Oge),e(Oge,uxo),e($2,bxo),e($2,lO),e(lO,vxo),e($2,Fxo),e(G,Txo),e(G,k2),e(k2,Vge),e(Vge,Mxo),e(k2,Exo),e(k2,iO),e(iO,Cxo),e(k2,wxo),e(G,Axo),e(G,S2),e(S2,Xge),e(Xge,Lxo),e(S2,yxo),e(S2,dO),e(dO,xxo),e(S2,$xo),e(G,kxo),e(G,R2),e(R2,zge),e(zge,Sxo),e(R2,Rxo),e(R2,cO),e(cO,Pxo),e(R2,Bxo),e(G,Ixo),e(G,P2),e(P2,Wge),e(Wge,Nxo),e(P2,qxo),e(P2,fO),e(fO,jxo),e(P2,Dxo),e(G,Gxo),e(G,B2),e(B2,Qge),e(Qge,Oxo),e(B2,Vxo),e(B2,mO),e(mO,Xxo),e(B2,zxo),e(G,Wxo),e(G,I2),e(I2,Hge),e(Hge,Qxo),e(I2,Hxo),e(I2,gO),e(gO,Uxo),e(I2,Jxo),e(G,Yxo),e(G,N2),e(N2,Uge),e(Uge,Kxo),e(N2,Zxo),e(N2,hO),e(hO,e$o),e(N2,o$o),e(G,r$o),e(G,q2),e(q2,Jge),e(Jge,t$o),e(q2,a$o),e(q2,pO),e(pO,n$o),e(q2,s$o),e(G,l$o),e(G,j2),e(j2,Yge),e(Yge,i$o),e(j2,d$o),e(j2,_O),e(_O,c$o),e(j2,f$o),e(G,m$o),e(G,D2),e(D2,Kge),e(Kge,g$o),e(D2,h$o),e(D2,uO),e(uO,p$o),e(D2,_$o),e(G,u$o),e(G,G2),e(G2,Zge),e(Zge,b$o),e(G2,v$o),e(G2,bO),e(bO,F$o),e(G2,T$o),e(G,M$o),e(G,O2),e(O2,ehe),e(ehe,E$o),e(O2,C$o),e(O2,vO),e(vO,w$o),e(O2,A$o),e(G,L$o),e(G,V2),e(V2,ohe),e(ohe,y$o),e(V2,x$o),e(V2,FO),e(FO,$$o),e(V2,k$o),e(G,S$o),e(G,X2),e(X2,rhe),e(rhe,R$o),e(X2,P$o),e(X2,TO),e(TO,B$o),e(X2,I$o),e(G,N$o),e(G,z2),e(z2,the),e(the,q$o),e(z2,j$o),e(z2,MO),e(MO,D$o),e(z2,G$o),e(G,O$o),e(G,W2),e(W2,ahe),e(ahe,V$o),e(W2,X$o),e(W2,EO),e(EO,z$o),e(W2,W$o),e(G,Q$o),e(G,Q2),e(Q2,nhe),e(nhe,H$o),e(Q2,U$o),e(Q2,CO),e(CO,J$o),e(Q2,Y$o),e(G,K$o),e(G,H2),e(H2,she),e(she,Z$o),e(H2,eko),e(H2,wO),e(wO,oko),e(H2,rko),e(G,tko),e(G,U2),e(U2,lhe),e(lhe,ako),e(U2,nko),e(U2,AO),e(AO,sko),e(U2,lko),e(Ke,iko),e(Ke,J2),e(J2,dko),e(J2,ihe),e(ihe,cko),e(J2,fko),e(J2,dhe),e(dhe,mko),e(Ke,gko),M(Y2,Ke,null),b(f,$ze,u),b(f,Ji,u),e(Ji,K2),e(K2,che),M(ay,che,null),e(Ji,hko),e(Ji,fhe),e(fhe,pko),b(f,kze,u),b(f,Ro,u),M(ny,Ro,null),e(Ro,_ko),e(Ro,Yi),e(Yi,uko),e(Yi,LO),e(LO,bko),e(Yi,vko),e(Yi,yO),e(yO,Fko),e(Yi,Tko),e(Ro,Mko),e(Ro,sy),e(sy,Eko),e(sy,mhe),e(mhe,Cko),e(sy,wko),e(Ro,Ako),e(Ro,ct),M(ly,ct,null),e(ct,Lko),e(ct,ghe),e(ghe,yko),e(ct,xko),e(ct,Ki),e(Ki,$ko),e(Ki,hhe),e(hhe,kko),e(Ki,Sko),e(Ki,xO),e(xO,Rko),e(Ki,Pko),e(ct,Bko),M(Z2,ct,null),e(Ro,Iko),e(Ro,Ze),M(iy,Ze,null),e(Ze,Nko),e(Ze,phe),e(phe,qko),e(Ze,jko),e(Ze,qa),e(qa,Dko),e(qa,_he),e(_he,Gko),e(qa,Oko),e(qa,uhe),e(uhe,Vko),e(qa,Xko),e(qa,bhe),e(bhe,zko),e(qa,Wko),e(Ze,Qko),e(Ze,X),e(X,e1),e(e1,vhe),e(vhe,Hko),e(e1,Uko),e(e1,$O),e($O,Jko),e(e1,Yko),e(X,Kko),e(X,o1),e(o1,Fhe),e(Fhe,Zko),e(o1,eSo),e(o1,kO),e(kO,oSo),e(o1,rSo),e(X,tSo),e(X,r1),e(r1,The),e(The,aSo),e(r1,nSo),e(r1,SO),e(SO,sSo),e(r1,lSo),e(X,iSo),e(X,t1),e(t1,Mhe),e(Mhe,dSo),e(t1,cSo),e(t1,RO),e(RO,fSo),e(t1,mSo),e(X,gSo),e(X,a1),e(a1,Ehe),e(Ehe,hSo),e(a1,pSo),e(a1,PO),e(PO,_So),e(a1,uSo),e(X,bSo),e(X,n1),e(n1,Che),e(Che,vSo),e(n1,FSo),e(n1,BO),e(BO,TSo),e(n1,MSo),e(X,ESo),e(X,s1),e(s1,whe),e(whe,CSo),e(s1,wSo),e(s1,IO),e(IO,ASo),e(s1,LSo),e(X,ySo),e(X,l1),e(l1,Ahe),e(Ahe,xSo),e(l1,$So),e(l1,NO),e(NO,kSo),e(l1,SSo),e(X,RSo),e(X,i1),e(i1,Lhe),e(Lhe,PSo),e(i1,BSo),e(i1,qO),e(qO,ISo),e(i1,NSo),e(X,qSo),e(X,d1),e(d1,yhe),e(yhe,jSo),e(d1,DSo),e(d1,jO),e(jO,GSo),e(d1,OSo),e(X,VSo),e(X,c1),e(c1,xhe),e(xhe,XSo),e(c1,zSo),e(c1,DO),e(DO,WSo),e(c1,QSo),e(X,HSo),e(X,f1),e(f1,$he),e($he,USo),e(f1,JSo),e(f1,GO),e(GO,YSo),e(f1,KSo),e(X,ZSo),e(X,m1),e(m1,khe),e(khe,eRo),e(m1,oRo),e(m1,OO),e(OO,rRo),e(m1,tRo),e(X,aRo),e(X,g1),e(g1,She),e(She,nRo),e(g1,sRo),e(g1,VO),e(VO,lRo),e(g1,iRo),e(X,dRo),e(X,h1),e(h1,Rhe),e(Rhe,cRo),e(h1,fRo),e(h1,XO),e(XO,mRo),e(h1,gRo),e(X,hRo),e(X,p1),e(p1,Phe),e(Phe,pRo),e(p1,_Ro),e(p1,zO),e(zO,uRo),e(p1,bRo),e(X,vRo),e(X,_1),e(_1,Bhe),e(Bhe,FRo),e(_1,TRo),e(_1,WO),e(WO,MRo),e(_1,ERo),e(X,CRo),e(X,u1),e(u1,Ihe),e(Ihe,wRo),e(u1,ARo),e(u1,QO),e(QO,LRo),e(u1,yRo),e(X,xRo),e(X,b1),e(b1,Nhe),e(Nhe,$Ro),e(b1,kRo),e(b1,HO),e(HO,SRo),e(b1,RRo),e(X,PRo),e(X,v1),e(v1,qhe),e(qhe,BRo),e(v1,IRo),e(v1,UO),e(UO,NRo),e(v1,qRo),e(X,jRo),e(X,F1),e(F1,jhe),e(jhe,DRo),e(F1,GRo),e(F1,JO),e(JO,ORo),e(F1,VRo),e(X,XRo),e(X,T1),e(T1,Dhe),e(Dhe,zRo),e(T1,WRo),e(T1,YO),e(YO,QRo),e(T1,HRo),e(X,URo),e(X,M1),e(M1,Ghe),e(Ghe,JRo),e(M1,YRo),e(M1,KO),e(KO,KRo),e(M1,ZRo),e(X,ePo),e(X,E1),e(E1,Ohe),e(Ohe,oPo),e(E1,rPo),e(E1,ZO),e(ZO,tPo),e(E1,aPo),e(X,nPo),e(X,C1),e(C1,Vhe),e(Vhe,sPo),e(C1,lPo),e(C1,eV),e(eV,iPo),e(C1,dPo),e(X,cPo),e(X,w1),e(w1,Xhe),e(Xhe,fPo),e(w1,mPo),e(w1,oV),e(oV,gPo),e(w1,hPo),e(X,pPo),e(X,A1),e(A1,zhe),e(zhe,_Po),e(A1,uPo),e(A1,rV),e(rV,bPo),e(A1,vPo),e(X,FPo),e(X,L1),e(L1,Whe),e(Whe,TPo),e(L1,MPo),e(L1,tV),e(tV,EPo),e(L1,CPo),e(X,wPo),e(X,y1),e(y1,Qhe),e(Qhe,APo),e(y1,LPo),e(y1,aV),e(aV,yPo),e(y1,xPo),e(X,$Po),e(X,x1),e(x1,Hhe),e(Hhe,kPo),e(x1,SPo),e(x1,nV),e(nV,RPo),e(x1,PPo),e(X,BPo),e(X,$1),e($1,Uhe),e(Uhe,IPo),e($1,NPo),e($1,sV),e(sV,qPo),e($1,jPo),e(X,DPo),e(X,k1),e(k1,Jhe),e(Jhe,GPo),e(k1,OPo),e(k1,lV),e(lV,VPo),e(k1,XPo),e(X,zPo),e(X,S1),e(S1,Yhe),e(Yhe,WPo),e(S1,QPo),e(S1,iV),e(iV,HPo),e(S1,UPo),e(X,JPo),e(X,R1),e(R1,Khe),e(Khe,YPo),e(R1,KPo),e(R1,dV),e(dV,ZPo),e(R1,eBo),e(X,oBo),e(X,P1),e(P1,Zhe),e(Zhe,rBo),e(P1,tBo),e(P1,cV),e(cV,aBo),e(P1,nBo),e(X,sBo),e(X,B1),e(B1,epe),e(epe,lBo),e(B1,iBo),e(B1,fV),e(fV,dBo),e(B1,cBo),e(X,fBo),e(X,I1),e(I1,ope),e(ope,mBo),e(I1,gBo),e(I1,mV),e(mV,hBo),e(I1,pBo),e(X,_Bo),e(X,N1),e(N1,rpe),e(rpe,uBo),e(N1,bBo),e(N1,gV),e(gV,vBo),e(N1,FBo),e(X,TBo),e(X,q1),e(q1,tpe),e(tpe,MBo),e(q1,EBo),e(q1,hV),e(hV,CBo),e(q1,wBo),e(X,ABo),e(X,j1),e(j1,ape),e(ape,LBo),e(j1,yBo),e(j1,pV),e(pV,xBo),e(j1,$Bo),e(X,kBo),e(X,D1),e(D1,npe),e(npe,SBo),e(D1,RBo),e(D1,_V),e(_V,PBo),e(D1,BBo),e(Ze,IBo),e(Ze,G1),e(G1,NBo),e(G1,spe),e(spe,qBo),e(G1,jBo),e(G1,lpe),e(lpe,DBo),e(Ze,GBo),M(O1,Ze,null),b(f,Sze,u),b(f,Zi,u),e(Zi,V1),e(V1,ipe),M(dy,ipe,null),e(Zi,OBo),e(Zi,dpe),e(dpe,VBo),b(f,Rze,u),b(f,Po,u),M(cy,Po,null),e(Po,XBo),e(Po,ed),e(ed,zBo),e(ed,uV),e(uV,WBo),e(ed,QBo),e(ed,bV),e(bV,HBo),e(ed,UBo),e(Po,JBo),e(Po,fy),e(fy,YBo),e(fy,cpe),e(cpe,KBo),e(fy,ZBo),e(Po,eIo),e(Po,ft),M(my,ft,null),e(ft,oIo),e(ft,fpe),e(fpe,rIo),e(ft,tIo),e(ft,od),e(od,aIo),e(od,mpe),e(mpe,nIo),e(od,sIo),e(od,vV),e(vV,lIo),e(od,iIo),e(ft,dIo),M(X1,ft,null),e(Po,cIo),e(Po,eo),M(gy,eo,null),e(eo,fIo),e(eo,gpe),e(gpe,mIo),e(eo,gIo),e(eo,ja),e(ja,hIo),e(ja,hpe),e(hpe,pIo),e(ja,_Io),e(ja,ppe),e(ppe,uIo),e(ja,bIo),e(ja,_pe),e(_pe,vIo),e(ja,FIo),e(eo,TIo),e(eo,Q),e(Q,z1),e(z1,upe),e(upe,MIo),e(z1,EIo),e(z1,FV),e(FV,CIo),e(z1,wIo),e(Q,AIo),e(Q,W1),e(W1,bpe),e(bpe,LIo),e(W1,yIo),e(W1,TV),e(TV,xIo),e(W1,$Io),e(Q,kIo),e(Q,Q1),e(Q1,vpe),e(vpe,SIo),e(Q1,RIo),e(Q1,MV),e(MV,PIo),e(Q1,BIo),e(Q,IIo),e(Q,H1),e(H1,Fpe),e(Fpe,NIo),e(H1,qIo),e(H1,EV),e(EV,jIo),e(H1,DIo),e(Q,GIo),e(Q,U1),e(U1,Tpe),e(Tpe,OIo),e(U1,VIo),e(U1,CV),e(CV,XIo),e(U1,zIo),e(Q,WIo),e(Q,J1),e(J1,Mpe),e(Mpe,QIo),e(J1,HIo),e(J1,wV),e(wV,UIo),e(J1,JIo),e(Q,YIo),e(Q,Y1),e(Y1,Epe),e(Epe,KIo),e(Y1,ZIo),e(Y1,AV),e(AV,eNo),e(Y1,oNo),e(Q,rNo),e(Q,K1),e(K1,Cpe),e(Cpe,tNo),e(K1,aNo),e(K1,LV),e(LV,nNo),e(K1,sNo),e(Q,lNo),e(Q,Z1),e(Z1,wpe),e(wpe,iNo),e(Z1,dNo),e(Z1,yV),e(yV,cNo),e(Z1,fNo),e(Q,mNo),e(Q,eb),e(eb,Ape),e(Ape,gNo),e(eb,hNo),e(eb,xV),e(xV,pNo),e(eb,_No),e(Q,uNo),e(Q,ob),e(ob,Lpe),e(Lpe,bNo),e(ob,vNo),e(ob,$V),e($V,FNo),e(ob,TNo),e(Q,MNo),e(Q,rb),e(rb,ype),e(ype,ENo),e(rb,CNo),e(rb,kV),e(kV,wNo),e(rb,ANo),e(Q,LNo),e(Q,tb),e(tb,xpe),e(xpe,yNo),e(tb,xNo),e(tb,SV),e(SV,$No),e(tb,kNo),e(Q,SNo),e(Q,ab),e(ab,$pe),e($pe,RNo),e(ab,PNo),e(ab,RV),e(RV,BNo),e(ab,INo),e(Q,NNo),e(Q,nb),e(nb,kpe),e(kpe,qNo),e(nb,jNo),e(nb,PV),e(PV,DNo),e(nb,GNo),e(Q,ONo),e(Q,sb),e(sb,Spe),e(Spe,VNo),e(sb,XNo),e(sb,BV),e(BV,zNo),e(sb,WNo),e(Q,QNo),e(Q,lb),e(lb,Rpe),e(Rpe,HNo),e(lb,UNo),e(lb,IV),e(IV,JNo),e(lb,YNo),e(Q,KNo),e(Q,ib),e(ib,Ppe),e(Ppe,ZNo),e(ib,eqo),e(ib,NV),e(NV,oqo),e(ib,rqo),e(Q,tqo),e(Q,db),e(db,Bpe),e(Bpe,aqo),e(db,nqo),e(db,qV),e(qV,sqo),e(db,lqo),e(Q,iqo),e(Q,cb),e(cb,Ipe),e(Ipe,dqo),e(cb,cqo),e(cb,jV),e(jV,fqo),e(cb,mqo),e(Q,gqo),e(Q,fb),e(fb,Npe),e(Npe,hqo),e(fb,pqo),e(fb,DV),e(DV,_qo),e(fb,uqo),e(Q,bqo),e(Q,mb),e(mb,qpe),e(qpe,vqo),e(mb,Fqo),e(mb,GV),e(GV,Tqo),e(mb,Mqo),e(Q,Eqo),e(Q,gb),e(gb,jpe),e(jpe,Cqo),e(gb,wqo),e(gb,OV),e(OV,Aqo),e(gb,Lqo),e(Q,yqo),e(Q,hb),e(hb,Dpe),e(Dpe,xqo),e(hb,$qo),e(hb,VV),e(VV,kqo),e(hb,Sqo),e(Q,Rqo),e(Q,pb),e(pb,Gpe),e(Gpe,Pqo),e(pb,Bqo),e(pb,XV),e(XV,Iqo),e(pb,Nqo),e(Q,qqo),e(Q,_b),e(_b,Ope),e(Ope,jqo),e(_b,Dqo),e(_b,zV),e(zV,Gqo),e(_b,Oqo),e(Q,Vqo),e(Q,ub),e(ub,Vpe),e(Vpe,Xqo),e(ub,zqo),e(ub,WV),e(WV,Wqo),e(ub,Qqo),e(Q,Hqo),e(Q,bb),e(bb,Xpe),e(Xpe,Uqo),e(bb,Jqo),e(bb,QV),e(QV,Yqo),e(bb,Kqo),e(Q,Zqo),e(Q,vb),e(vb,zpe),e(zpe,ejo),e(vb,ojo),e(vb,HV),e(HV,rjo),e(vb,tjo),e(Q,ajo),e(Q,Fb),e(Fb,Wpe),e(Wpe,njo),e(Fb,sjo),e(Fb,UV),e(UV,ljo),e(Fb,ijo),e(Q,djo),e(Q,Tb),e(Tb,Qpe),e(Qpe,cjo),e(Tb,fjo),e(Tb,JV),e(JV,mjo),e(Tb,gjo),e(Q,hjo),e(Q,Mb),e(Mb,Hpe),e(Hpe,pjo),e(Mb,_jo),e(Mb,YV),e(YV,ujo),e(Mb,bjo),e(Q,vjo),e(Q,Eb),e(Eb,Upe),e(Upe,Fjo),e(Eb,Tjo),e(Eb,KV),e(KV,Mjo),e(Eb,Ejo),e(Q,Cjo),e(Q,Cb),e(Cb,Jpe),e(Jpe,wjo),e(Cb,Ajo),e(Cb,Ype),e(Ype,Ljo),e(Cb,yjo),e(Q,xjo),e(Q,wb),e(wb,Kpe),e(Kpe,$jo),e(wb,kjo),e(wb,ZV),e(ZV,Sjo),e(wb,Rjo),e(Q,Pjo),e(Q,Ab),e(Ab,Zpe),e(Zpe,Bjo),e(Ab,Ijo),e(Ab,eX),e(eX,Njo),e(Ab,qjo),e(Q,jjo),e(Q,Lb),e(Lb,e_e),e(e_e,Djo),e(Lb,Gjo),e(Lb,oX),e(oX,Ojo),e(Lb,Vjo),e(Q,Xjo),e(Q,yb),e(yb,o_e),e(o_e,zjo),e(yb,Wjo),e(yb,rX),e(rX,Qjo),e(yb,Hjo),e(eo,Ujo),e(eo,xb),e(xb,Jjo),e(xb,r_e),e(r_e,Yjo),e(xb,Kjo),e(xb,t_e),e(t_e,Zjo),e(eo,eDo),M($b,eo,null),b(f,Pze,u),b(f,rd,u),e(rd,kb),e(kb,a_e),M(hy,a_e,null),e(rd,oDo),e(rd,n_e),e(n_e,rDo),b(f,Bze,u),b(f,Bo,u),M(py,Bo,null),e(Bo,tDo),e(Bo,td),e(td,aDo),e(td,tX),e(tX,nDo),e(td,sDo),e(td,aX),e(aX,lDo),e(td,iDo),e(Bo,dDo),e(Bo,_y),e(_y,cDo),e(_y,s_e),e(s_e,fDo),e(_y,mDo),e(Bo,gDo),e(Bo,mt),M(uy,mt,null),e(mt,hDo),e(mt,l_e),e(l_e,pDo),e(mt,_Do),e(mt,ad),e(ad,uDo),e(ad,i_e),e(i_e,bDo),e(ad,vDo),e(ad,nX),e(nX,FDo),e(ad,TDo),e(mt,MDo),M(Sb,mt,null),e(Bo,EDo),e(Bo,oo),M(by,oo,null),e(oo,CDo),e(oo,d_e),e(d_e,wDo),e(oo,ADo),e(oo,Da),e(Da,LDo),e(Da,c_e),e(c_e,yDo),e(Da,xDo),e(Da,f_e),e(f_e,$Do),e(Da,kDo),e(Da,m_e),e(m_e,SDo),e(Da,RDo),e(oo,PDo),e(oo,me),e(me,Rb),e(Rb,g_e),e(g_e,BDo),e(Rb,IDo),e(Rb,sX),e(sX,NDo),e(Rb,qDo),e(me,jDo),e(me,Pb),e(Pb,h_e),e(h_e,DDo),e(Pb,GDo),e(Pb,lX),e(lX,ODo),e(Pb,VDo),e(me,XDo),e(me,Bb),e(Bb,p_e),e(p_e,zDo),e(Bb,WDo),e(Bb,iX),e(iX,QDo),e(Bb,HDo),e(me,UDo),e(me,Ib),e(Ib,__e),e(__e,JDo),e(Ib,YDo),e(Ib,dX),e(dX,KDo),e(Ib,ZDo),e(me,eGo),e(me,Nb),e(Nb,u_e),e(u_e,oGo),e(Nb,rGo),e(Nb,cX),e(cX,tGo),e(Nb,aGo),e(me,nGo),e(me,qb),e(qb,b_e),e(b_e,sGo),e(qb,lGo),e(qb,fX),e(fX,iGo),e(qb,dGo),e(me,cGo),e(me,jb),e(jb,v_e),e(v_e,fGo),e(jb,mGo),e(jb,mX),e(mX,gGo),e(jb,hGo),e(me,pGo),e(me,Db),e(Db,F_e),e(F_e,_Go),e(Db,uGo),e(Db,gX),e(gX,bGo),e(Db,vGo),e(me,FGo),e(me,Gb),e(Gb,T_e),e(T_e,TGo),e(Gb,MGo),e(Gb,hX),e(hX,EGo),e(Gb,CGo),e(me,wGo),e(me,Ob),e(Ob,M_e),e(M_e,AGo),e(Ob,LGo),e(Ob,pX),e(pX,yGo),e(Ob,xGo),e(me,$Go),e(me,Vb),e(Vb,E_e),e(E_e,kGo),e(Vb,SGo),e(Vb,_X),e(_X,RGo),e(Vb,PGo),e(me,BGo),e(me,Xb),e(Xb,C_e),e(C_e,IGo),e(Xb,NGo),e(Xb,uX),e(uX,qGo),e(Xb,jGo),e(me,DGo),e(me,zb),e(zb,w_e),e(w_e,GGo),e(zb,OGo),e(zb,bX),e(bX,VGo),e(zb,XGo),e(me,zGo),e(me,Wb),e(Wb,A_e),e(A_e,WGo),e(Wb,QGo),e(Wb,vX),e(vX,HGo),e(Wb,UGo),e(me,JGo),e(me,Qb),e(Qb,L_e),e(L_e,YGo),e(Qb,KGo),e(Qb,FX),e(FX,ZGo),e(Qb,eOo),e(me,oOo),e(me,Hb),e(Hb,y_e),e(y_e,rOo),e(Hb,tOo),e(Hb,TX),e(TX,aOo),e(Hb,nOo),e(me,sOo),e(me,Ub),e(Ub,x_e),e(x_e,lOo),e(Ub,iOo),e(Ub,MX),e(MX,dOo),e(Ub,cOo),e(me,fOo),e(me,Jb),e(Jb,$_e),e($_e,mOo),e(Jb,gOo),e(Jb,EX),e(EX,hOo),e(Jb,pOo),e(me,_Oo),e(me,Yb),e(Yb,k_e),e(k_e,uOo),e(Yb,bOo),e(Yb,CX),e(CX,vOo),e(Yb,FOo),e(oo,TOo),e(oo,Kb),e(Kb,MOo),e(Kb,S_e),e(S_e,EOo),e(Kb,COo),e(Kb,R_e),e(R_e,wOo),e(oo,AOo),M(Zb,oo,null),b(f,Ize,u),b(f,nd,u),e(nd,ev),e(ev,P_e),M(vy,P_e,null),e(nd,LOo),e(nd,B_e),e(B_e,yOo),b(f,Nze,u),b(f,Io,u),M(Fy,Io,null),e(Io,xOo),e(Io,sd),e(sd,$Oo),e(sd,wX),e(wX,kOo),e(sd,SOo),e(sd,AX),e(AX,ROo),e(sd,POo),e(Io,BOo),e(Io,Ty),e(Ty,IOo),e(Ty,I_e),e(I_e,NOo),e(Ty,qOo),e(Io,jOo),e(Io,gt),M(My,gt,null),e(gt,DOo),e(gt,N_e),e(N_e,GOo),e(gt,OOo),e(gt,ld),e(ld,VOo),e(ld,q_e),e(q_e,XOo),e(ld,zOo),e(ld,LX),e(LX,WOo),e(ld,QOo),e(gt,HOo),M(ov,gt,null),e(Io,UOo),e(Io,ro),M(Ey,ro,null),e(ro,JOo),e(ro,j_e),e(j_e,YOo),e(ro,KOo),e(ro,Ga),e(Ga,ZOo),e(Ga,D_e),e(D_e,eVo),e(Ga,oVo),e(Ga,G_e),e(G_e,rVo),e(Ga,tVo),e(Ga,O_e),e(O_e,aVo),e(Ga,nVo),e(ro,sVo),e(ro,B),e(B,rv),e(rv,V_e),e(V_e,lVo),e(rv,iVo),e(rv,yX),e(yX,dVo),e(rv,cVo),e(B,fVo),e(B,tv),e(tv,X_e),e(X_e,mVo),e(tv,gVo),e(tv,xX),e(xX,hVo),e(tv,pVo),e(B,_Vo),e(B,av),e(av,z_e),e(z_e,uVo),e(av,bVo),e(av,$X),e($X,vVo),e(av,FVo),e(B,TVo),e(B,nv),e(nv,W_e),e(W_e,MVo),e(nv,EVo),e(nv,kX),e(kX,CVo),e(nv,wVo),e(B,AVo),e(B,sv),e(sv,Q_e),e(Q_e,LVo),e(sv,yVo),e(sv,SX),e(SX,xVo),e(sv,$Vo),e(B,kVo),e(B,lv),e(lv,H_e),e(H_e,SVo),e(lv,RVo),e(lv,RX),e(RX,PVo),e(lv,BVo),e(B,IVo),e(B,iv),e(iv,U_e),e(U_e,NVo),e(iv,qVo),e(iv,PX),e(PX,jVo),e(iv,DVo),e(B,GVo),e(B,dv),e(dv,J_e),e(J_e,OVo),e(dv,VVo),e(dv,BX),e(BX,XVo),e(dv,zVo),e(B,WVo),e(B,cv),e(cv,Y_e),e(Y_e,QVo),e(cv,HVo),e(cv,IX),e(IX,UVo),e(cv,JVo),e(B,YVo),e(B,fv),e(fv,K_e),e(K_e,KVo),e(fv,ZVo),e(fv,NX),e(NX,eXo),e(fv,oXo),e(B,rXo),e(B,mv),e(mv,Z_e),e(Z_e,tXo),e(mv,aXo),e(mv,qX),e(qX,nXo),e(mv,sXo),e(B,lXo),e(B,gv),e(gv,eue),e(eue,iXo),e(gv,dXo),e(gv,jX),e(jX,cXo),e(gv,fXo),e(B,mXo),e(B,hv),e(hv,oue),e(oue,gXo),e(hv,hXo),e(hv,DX),e(DX,pXo),e(hv,_Xo),e(B,uXo),e(B,pv),e(pv,rue),e(rue,bXo),e(pv,vXo),e(pv,GX),e(GX,FXo),e(pv,TXo),e(B,MXo),e(B,_v),e(_v,tue),e(tue,EXo),e(_v,CXo),e(_v,OX),e(OX,wXo),e(_v,AXo),e(B,LXo),e(B,uv),e(uv,aue),e(aue,yXo),e(uv,xXo),e(uv,VX),e(VX,$Xo),e(uv,kXo),e(B,SXo),e(B,bv),e(bv,nue),e(nue,RXo),e(bv,PXo),e(bv,XX),e(XX,BXo),e(bv,IXo),e(B,NXo),e(B,vv),e(vv,sue),e(sue,qXo),e(vv,jXo),e(vv,zX),e(zX,DXo),e(vv,GXo),e(B,OXo),e(B,Fv),e(Fv,lue),e(lue,VXo),e(Fv,XXo),e(Fv,WX),e(WX,zXo),e(Fv,WXo),e(B,QXo),e(B,Tv),e(Tv,iue),e(iue,HXo),e(Tv,UXo),e(Tv,QX),e(QX,JXo),e(Tv,YXo),e(B,KXo),e(B,Mv),e(Mv,due),e(due,ZXo),e(Mv,ezo),e(Mv,HX),e(HX,ozo),e(Mv,rzo),e(B,tzo),e(B,Ev),e(Ev,cue),e(cue,azo),e(Ev,nzo),e(Ev,UX),e(UX,szo),e(Ev,lzo),e(B,izo),e(B,Cv),e(Cv,fue),e(fue,dzo),e(Cv,czo),e(Cv,JX),e(JX,fzo),e(Cv,mzo),e(B,gzo),e(B,wv),e(wv,mue),e(mue,hzo),e(wv,pzo),e(wv,YX),e(YX,_zo),e(wv,uzo),e(B,bzo),e(B,Av),e(Av,gue),e(gue,vzo),e(Av,Fzo),e(Av,KX),e(KX,Tzo),e(Av,Mzo),e(B,Ezo),e(B,Lv),e(Lv,hue),e(hue,Czo),e(Lv,wzo),e(Lv,ZX),e(ZX,Azo),e(Lv,Lzo),e(B,yzo),e(B,yv),e(yv,pue),e(pue,xzo),e(yv,$zo),e(yv,ez),e(ez,kzo),e(yv,Szo),e(B,Rzo),e(B,xv),e(xv,_ue),e(_ue,Pzo),e(xv,Bzo),e(xv,oz),e(oz,Izo),e(xv,Nzo),e(B,qzo),e(B,$v),e($v,uue),e(uue,jzo),e($v,Dzo),e($v,rz),e(rz,Gzo),e($v,Ozo),e(B,Vzo),e(B,kv),e(kv,bue),e(bue,Xzo),e(kv,zzo),e(kv,tz),e(tz,Wzo),e(kv,Qzo),e(B,Hzo),e(B,Sv),e(Sv,vue),e(vue,Uzo),e(Sv,Jzo),e(Sv,az),e(az,Yzo),e(Sv,Kzo),e(B,Zzo),e(B,Rv),e(Rv,Fue),e(Fue,eWo),e(Rv,oWo),e(Rv,nz),e(nz,rWo),e(Rv,tWo),e(B,aWo),e(B,Pv),e(Pv,Tue),e(Tue,nWo),e(Pv,sWo),e(Pv,sz),e(sz,lWo),e(Pv,iWo),e(B,dWo),e(B,Bv),e(Bv,Mue),e(Mue,cWo),e(Bv,fWo),e(Bv,lz),e(lz,mWo),e(Bv,gWo),e(B,hWo),e(B,Iv),e(Iv,Eue),e(Eue,pWo),e(Iv,_Wo),e(Iv,iz),e(iz,uWo),e(Iv,bWo),e(B,vWo),e(B,Nv),e(Nv,Cue),e(Cue,FWo),e(Nv,TWo),e(Nv,dz),e(dz,MWo),e(Nv,EWo),e(B,CWo),e(B,qv),e(qv,wue),e(wue,wWo),e(qv,AWo),e(qv,cz),e(cz,LWo),e(qv,yWo),e(B,xWo),e(B,jv),e(jv,Aue),e(Aue,$Wo),e(jv,kWo),e(jv,fz),e(fz,SWo),e(jv,RWo),e(B,PWo),e(B,Dv),e(Dv,Lue),e(Lue,BWo),e(Dv,IWo),e(Dv,mz),e(mz,NWo),e(Dv,qWo),e(B,jWo),e(B,Gv),e(Gv,yue),e(yue,DWo),e(Gv,GWo),e(Gv,gz),e(gz,OWo),e(Gv,VWo),e(B,XWo),e(B,Ov),e(Ov,xue),e(xue,zWo),e(Ov,WWo),e(Ov,hz),e(hz,QWo),e(Ov,HWo),e(B,UWo),e(B,Vv),e(Vv,$ue),e($ue,JWo),e(Vv,YWo),e(Vv,pz),e(pz,KWo),e(Vv,ZWo),e(B,eQo),e(B,Xv),e(Xv,kue),e(kue,oQo),e(Xv,rQo),e(Xv,_z),e(_z,tQo),e(Xv,aQo),e(B,nQo),e(B,zv),e(zv,Sue),e(Sue,sQo),e(zv,lQo),e(zv,uz),e(uz,iQo),e(zv,dQo),e(B,cQo),e(B,Wv),e(Wv,Rue),e(Rue,fQo),e(Wv,mQo),e(Wv,bz),e(bz,gQo),e(Wv,hQo),e(B,pQo),e(B,Qv),e(Qv,Pue),e(Pue,_Qo),e(Qv,uQo),e(Qv,vz),e(vz,bQo),e(Qv,vQo),e(B,FQo),e(B,Hv),e(Hv,Bue),e(Bue,TQo),e(Hv,MQo),e(Hv,Fz),e(Fz,EQo),e(Hv,CQo),e(B,wQo),e(B,Uv),e(Uv,Iue),e(Iue,AQo),e(Uv,LQo),e(Uv,Tz),e(Tz,yQo),e(Uv,xQo),e(B,$Qo),e(B,Jv),e(Jv,Nue),e(Nue,kQo),e(Jv,SQo),e(Jv,Mz),e(Mz,RQo),e(Jv,PQo),e(B,BQo),e(B,Yv),e(Yv,que),e(que,IQo),e(Yv,NQo),e(Yv,Ez),e(Ez,qQo),e(Yv,jQo),e(B,DQo),e(B,Kv),e(Kv,jue),e(jue,GQo),e(Kv,OQo),e(Kv,Cz),e(Cz,VQo),e(Kv,XQo),e(ro,zQo),e(ro,Zv),e(Zv,WQo),e(Zv,Due),e(Due,QQo),e(Zv,HQo),e(Zv,Gue),e(Gue,UQo),e(ro,JQo),M(e3,ro,null),b(f,qze,u),b(f,id,u),e(id,o3),e(o3,Oue),M(Cy,Oue,null),e(id,YQo),e(id,Vue),e(Vue,KQo),b(f,jze,u),b(f,No,u),M(wy,No,null),e(No,ZQo),e(No,dd),e(dd,eHo),e(dd,wz),e(wz,oHo),e(dd,rHo),e(dd,Az),e(Az,tHo),e(dd,aHo),e(No,nHo),e(No,Ay),e(Ay,sHo),e(Ay,Xue),e(Xue,lHo),e(Ay,iHo),e(No,dHo),e(No,ht),M(Ly,ht,null),e(ht,cHo),e(ht,zue),e(zue,fHo),e(ht,mHo),e(ht,cd),e(cd,gHo),e(cd,Wue),e(Wue,hHo),e(cd,pHo),e(cd,Lz),e(Lz,_Ho),e(cd,uHo),e(ht,bHo),M(r3,ht,null),e(No,vHo),e(No,to),M(yy,to,null),e(to,FHo),e(to,Que),e(Que,THo),e(to,MHo),e(to,Oa),e(Oa,EHo),e(Oa,Hue),e(Hue,CHo),e(Oa,wHo),e(Oa,Uue),e(Uue,AHo),e(Oa,LHo),e(Oa,Jue),e(Jue,yHo),e(Oa,xHo),e(to,$Ho),e(to,Z),e(Z,t3),e(t3,Yue),e(Yue,kHo),e(t3,SHo),e(t3,yz),e(yz,RHo),e(t3,PHo),e(Z,BHo),e(Z,a3),e(a3,Kue),e(Kue,IHo),e(a3,NHo),e(a3,xz),e(xz,qHo),e(a3,jHo),e(Z,DHo),e(Z,n3),e(n3,Zue),e(Zue,GHo),e(n3,OHo),e(n3,$z),e($z,VHo),e(n3,XHo),e(Z,zHo),e(Z,s3),e(s3,e2e),e(e2e,WHo),e(s3,QHo),e(s3,kz),e(kz,HHo),e(s3,UHo),e(Z,JHo),e(Z,l3),e(l3,o2e),e(o2e,YHo),e(l3,KHo),e(l3,Sz),e(Sz,ZHo),e(l3,eUo),e(Z,oUo),e(Z,i3),e(i3,r2e),e(r2e,rUo),e(i3,tUo),e(i3,Rz),e(Rz,aUo),e(i3,nUo),e(Z,sUo),e(Z,d3),e(d3,t2e),e(t2e,lUo),e(d3,iUo),e(d3,Pz),e(Pz,dUo),e(d3,cUo),e(Z,fUo),e(Z,c3),e(c3,a2e),e(a2e,mUo),e(c3,gUo),e(c3,Bz),e(Bz,hUo),e(c3,pUo),e(Z,_Uo),e(Z,f3),e(f3,n2e),e(n2e,uUo),e(f3,bUo),e(f3,Iz),e(Iz,vUo),e(f3,FUo),e(Z,TUo),e(Z,m3),e(m3,s2e),e(s2e,MUo),e(m3,EUo),e(m3,Nz),e(Nz,CUo),e(m3,wUo),e(Z,AUo),e(Z,g3),e(g3,l2e),e(l2e,LUo),e(g3,yUo),e(g3,qz),e(qz,xUo),e(g3,$Uo),e(Z,kUo),e(Z,h3),e(h3,i2e),e(i2e,SUo),e(h3,RUo),e(h3,jz),e(jz,PUo),e(h3,BUo),e(Z,IUo),e(Z,p3),e(p3,d2e),e(d2e,NUo),e(p3,qUo),e(p3,Dz),e(Dz,jUo),e(p3,DUo),e(Z,GUo),e(Z,_3),e(_3,c2e),e(c2e,OUo),e(_3,VUo),e(_3,Gz),e(Gz,XUo),e(_3,zUo),e(Z,WUo),e(Z,u3),e(u3,f2e),e(f2e,QUo),e(u3,HUo),e(u3,Oz),e(Oz,UUo),e(u3,JUo),e(Z,YUo),e(Z,b3),e(b3,m2e),e(m2e,KUo),e(b3,ZUo),e(b3,Vz),e(Vz,eJo),e(b3,oJo),e(Z,rJo),e(Z,v3),e(v3,g2e),e(g2e,tJo),e(v3,aJo),e(v3,Xz),e(Xz,nJo),e(v3,sJo),e(Z,lJo),e(Z,F3),e(F3,h2e),e(h2e,iJo),e(F3,dJo),e(F3,zz),e(zz,cJo),e(F3,fJo),e(Z,mJo),e(Z,T3),e(T3,p2e),e(p2e,gJo),e(T3,hJo),e(T3,Wz),e(Wz,pJo),e(T3,_Jo),e(Z,uJo),e(Z,M3),e(M3,_2e),e(_2e,bJo),e(M3,vJo),e(M3,Qz),e(Qz,FJo),e(M3,TJo),e(Z,MJo),e(Z,E3),e(E3,u2e),e(u2e,EJo),e(E3,CJo),e(E3,Hz),e(Hz,wJo),e(E3,AJo),e(Z,LJo),e(Z,C3),e(C3,b2e),e(b2e,yJo),e(C3,xJo),e(C3,Uz),e(Uz,$Jo),e(C3,kJo),e(Z,SJo),e(Z,w3),e(w3,v2e),e(v2e,RJo),e(w3,PJo),e(w3,Jz),e(Jz,BJo),e(w3,IJo),e(Z,NJo),e(Z,A3),e(A3,F2e),e(F2e,qJo),e(A3,jJo),e(A3,Yz),e(Yz,DJo),e(A3,GJo),e(Z,OJo),e(Z,L3),e(L3,T2e),e(T2e,VJo),e(L3,XJo),e(L3,Kz),e(Kz,zJo),e(L3,WJo),e(Z,QJo),e(Z,y3),e(y3,M2e),e(M2e,HJo),e(y3,UJo),e(y3,Zz),e(Zz,JJo),e(y3,YJo),e(Z,KJo),e(Z,x3),e(x3,E2e),e(E2e,ZJo),e(x3,eYo),e(x3,eW),e(eW,oYo),e(x3,rYo),e(Z,tYo),e(Z,$3),e($3,C2e),e(C2e,aYo),e($3,nYo),e($3,oW),e(oW,sYo),e($3,lYo),e(Z,iYo),e(Z,k3),e(k3,w2e),e(w2e,dYo),e(k3,cYo),e(k3,rW),e(rW,fYo),e(k3,mYo),e(Z,gYo),e(Z,S3),e(S3,A2e),e(A2e,hYo),e(S3,pYo),e(S3,tW),e(tW,_Yo),e(S3,uYo),e(to,bYo),e(to,R3),e(R3,vYo),e(R3,L2e),e(L2e,FYo),e(R3,TYo),e(R3,y2e),e(y2e,MYo),e(to,EYo),M(P3,to,null),b(f,Dze,u),b(f,fd,u),e(fd,B3),e(B3,x2e),M(xy,x2e,null),e(fd,CYo),e(fd,$2e),e($2e,wYo),b(f,Gze,u),b(f,qo,u),M($y,qo,null),e(qo,AYo),e(qo,md),e(md,LYo),e(md,aW),e(aW,yYo),e(md,xYo),e(md,nW),e(nW,$Yo),e(md,kYo),e(qo,SYo),e(qo,ky),e(ky,RYo),e(ky,k2e),e(k2e,PYo),e(ky,BYo),e(qo,IYo),e(qo,pt),M(Sy,pt,null),e(pt,NYo),e(pt,S2e),e(S2e,qYo),e(pt,jYo),e(pt,gd),e(gd,DYo),e(gd,R2e),e(R2e,GYo),e(gd,OYo),e(gd,sW),e(sW,VYo),e(gd,XYo),e(pt,zYo),M(I3,pt,null),e(qo,WYo),e(qo,ao),M(Ry,ao,null),e(ao,QYo),e(ao,P2e),e(P2e,HYo),e(ao,UYo),e(ao,Va),e(Va,JYo),e(Va,B2e),e(B2e,YYo),e(Va,KYo),e(Va,I2e),e(I2e,ZYo),e(Va,eKo),e(Va,N2e),e(N2e,oKo),e(Va,rKo),e(ao,tKo),e(ao,jo),e(jo,N3),e(N3,q2e),e(q2e,aKo),e(N3,nKo),e(N3,lW),e(lW,sKo),e(N3,lKo),e(jo,iKo),e(jo,q3),e(q3,j2e),e(j2e,dKo),e(q3,cKo),e(q3,iW),e(iW,fKo),e(q3,mKo),e(jo,gKo),e(jo,j3),e(j3,D2e),e(D2e,hKo),e(j3,pKo),e(j3,dW),e(dW,_Ko),e(j3,uKo),e(jo,bKo),e(jo,D3),e(D3,G2e),e(G2e,vKo),e(D3,FKo),e(D3,cW),e(cW,TKo),e(D3,MKo),e(jo,EKo),e(jo,G3),e(G3,O2e),e(O2e,CKo),e(G3,wKo),e(G3,fW),e(fW,AKo),e(G3,LKo),e(jo,yKo),e(jo,O3),e(O3,V2e),e(V2e,xKo),e(O3,$Ko),e(O3,mW),e(mW,kKo),e(O3,SKo),e(ao,RKo),e(ao,V3),e(V3,PKo),e(V3,X2e),e(X2e,BKo),e(V3,IKo),e(V3,z2e),e(z2e,NKo),e(ao,qKo),M(X3,ao,null),b(f,Oze,u),b(f,hd,u),e(hd,z3),e(z3,W2e),M(Py,W2e,null),e(hd,jKo),e(hd,Q2e),e(Q2e,DKo),b(f,Vze,u),b(f,Do,u),M(By,Do,null),e(Do,GKo),e(Do,pd),e(pd,OKo),e(pd,gW),e(gW,VKo),e(pd,XKo),e(pd,hW),e(hW,zKo),e(pd,WKo),e(Do,QKo),e(Do,Iy),e(Iy,HKo),e(Iy,H2e),e(H2e,UKo),e(Iy,JKo),e(Do,YKo),e(Do,_t),M(Ny,_t,null),e(_t,KKo),e(_t,U2e),e(U2e,ZKo),e(_t,eZo),e(_t,_d),e(_d,oZo),e(_d,J2e),e(J2e,rZo),e(_d,tZo),e(_d,pW),e(pW,aZo),e(_d,nZo),e(_t,sZo),M(W3,_t,null),e(Do,lZo),e(Do,no),M(qy,no,null),e(no,iZo),e(no,Y2e),e(Y2e,dZo),e(no,cZo),e(no,Xa),e(Xa,fZo),e(Xa,K2e),e(K2e,mZo),e(Xa,gZo),e(Xa,Z2e),e(Z2e,hZo),e(Xa,pZo),e(Xa,e1e),e(e1e,_Zo),e(Xa,uZo),e(no,bZo),e(no,J),e(J,Q3),e(Q3,o1e),e(o1e,vZo),e(Q3,FZo),e(Q3,_W),e(_W,TZo),e(Q3,MZo),e(J,EZo),e(J,H3),e(H3,r1e),e(r1e,CZo),e(H3,wZo),e(H3,uW),e(uW,AZo),e(H3,LZo),e(J,yZo),e(J,U3),e(U3,t1e),e(t1e,xZo),e(U3,$Zo),e(U3,bW),e(bW,kZo),e(U3,SZo),e(J,RZo),e(J,J3),e(J3,a1e),e(a1e,PZo),e(J3,BZo),e(J3,vW),e(vW,IZo),e(J3,NZo),e(J,qZo),e(J,Y3),e(Y3,n1e),e(n1e,jZo),e(Y3,DZo),e(Y3,FW),e(FW,GZo),e(Y3,OZo),e(J,VZo),e(J,K3),e(K3,s1e),e(s1e,XZo),e(K3,zZo),e(K3,TW),e(TW,WZo),e(K3,QZo),e(J,HZo),e(J,Z3),e(Z3,l1e),e(l1e,UZo),e(Z3,JZo),e(Z3,MW),e(MW,YZo),e(Z3,KZo),e(J,ZZo),e(J,eF),e(eF,i1e),e(i1e,eer),e(eF,oer),e(eF,EW),e(EW,rer),e(eF,ter),e(J,aer),e(J,oF),e(oF,d1e),e(d1e,ner),e(oF,ser),e(oF,CW),e(CW,ler),e(oF,ier),e(J,der),e(J,rF),e(rF,c1e),e(c1e,cer),e(rF,fer),e(rF,wW),e(wW,mer),e(rF,ger),e(J,her),e(J,tF),e(tF,f1e),e(f1e,per),e(tF,_er),e(tF,AW),e(AW,uer),e(tF,ber),e(J,ver),e(J,aF),e(aF,m1e),e(m1e,Fer),e(aF,Ter),e(aF,LW),e(LW,Mer),e(aF,Eer),e(J,Cer),e(J,nF),e(nF,g1e),e(g1e,wer),e(nF,Aer),e(nF,yW),e(yW,Ler),e(nF,yer),e(J,xer),e(J,sF),e(sF,h1e),e(h1e,$er),e(sF,ker),e(sF,xW),e(xW,Ser),e(sF,Rer),e(J,Per),e(J,lF),e(lF,p1e),e(p1e,Ber),e(lF,Ier),e(lF,$W),e($W,Ner),e(lF,qer),e(J,jer),e(J,iF),e(iF,_1e),e(_1e,Der),e(iF,Ger),e(iF,kW),e(kW,Oer),e(iF,Ver),e(J,Xer),e(J,dF),e(dF,u1e),e(u1e,zer),e(dF,Wer),e(dF,SW),e(SW,Qer),e(dF,Her),e(J,Uer),e(J,cF),e(cF,b1e),e(b1e,Jer),e(cF,Yer),e(cF,RW),e(RW,Ker),e(cF,Zer),e(J,eor),e(J,fF),e(fF,v1e),e(v1e,oor),e(fF,ror),e(fF,PW),e(PW,tor),e(fF,aor),e(J,nor),e(J,mF),e(mF,F1e),e(F1e,sor),e(mF,lor),e(mF,BW),e(BW,ior),e(mF,dor),e(J,cor),e(J,gF),e(gF,T1e),e(T1e,mor),e(gF,gor),e(gF,IW),e(IW,hor),e(gF,por),e(J,_or),e(J,hF),e(hF,M1e),e(M1e,uor),e(hF,bor),e(hF,NW),e(NW,vor),e(hF,For),e(J,Tor),e(J,pF),e(pF,E1e),e(E1e,Mor),e(pF,Eor),e(pF,qW),e(qW,Cor),e(pF,wor),e(J,Aor),e(J,_F),e(_F,C1e),e(C1e,Lor),e(_F,yor),e(_F,jW),e(jW,xor),e(_F,$or),e(J,kor),e(J,uF),e(uF,w1e),e(w1e,Sor),e(uF,Ror),e(uF,DW),e(DW,Por),e(uF,Bor),e(J,Ior),e(J,bF),e(bF,A1e),e(A1e,Nor),e(bF,qor),e(bF,GW),e(GW,jor),e(bF,Dor),e(J,Gor),e(J,vF),e(vF,L1e),e(L1e,Oor),e(vF,Vor),e(vF,OW),e(OW,Xor),e(vF,zor),e(J,Wor),e(J,FF),e(FF,y1e),e(y1e,Qor),e(FF,Hor),e(FF,VW),e(VW,Uor),e(FF,Jor),e(J,Yor),e(J,TF),e(TF,x1e),e(x1e,Kor),e(TF,Zor),e(TF,XW),e(XW,err),e(TF,orr),e(J,rrr),e(J,MF),e(MF,$1e),e($1e,trr),e(MF,arr),e(MF,zW),e(zW,nrr),e(MF,srr),e(J,lrr),e(J,EF),e(EF,k1e),e(k1e,irr),e(EF,drr),e(EF,WW),e(WW,crr),e(EF,frr),e(J,mrr),e(J,CF),e(CF,S1e),e(S1e,grr),e(CF,hrr),e(CF,QW),e(QW,prr),e(CF,_rr),e(J,urr),e(J,wF),e(wF,R1e),e(R1e,brr),e(wF,vrr),e(wF,HW),e(HW,Frr),e(wF,Trr),e(J,Mrr),e(J,AF),e(AF,P1e),e(P1e,Err),e(AF,Crr),e(AF,UW),e(UW,wrr),e(AF,Arr),e(J,Lrr),e(J,LF),e(LF,B1e),e(B1e,yrr),e(LF,xrr),e(LF,JW),e(JW,$rr),e(LF,krr),e(J,Srr),e(J,yF),e(yF,I1e),e(I1e,Rrr),e(yF,Prr),e(yF,YW),e(YW,Brr),e(yF,Irr),e(no,Nrr),e(no,xF),e(xF,qrr),e(xF,N1e),e(N1e,jrr),e(xF,Drr),e(xF,q1e),e(q1e,Grr),e(no,Orr),M($F,no,null),b(f,Xze,u),b(f,ud,u),e(ud,kF),e(kF,j1e),M(jy,j1e,null),e(ud,Vrr),e(ud,D1e),e(D1e,Xrr),b(f,zze,u),b(f,Go,u),M(Dy,Go,null),e(Go,zrr),e(Go,bd),e(bd,Wrr),e(bd,KW),e(KW,Qrr),e(bd,Hrr),e(bd,ZW),e(ZW,Urr),e(bd,Jrr),e(Go,Yrr),e(Go,Gy),e(Gy,Krr),e(Gy,G1e),e(G1e,Zrr),e(Gy,etr),e(Go,otr),e(Go,ut),M(Oy,ut,null),e(ut,rtr),e(ut,O1e),e(O1e,ttr),e(ut,atr),e(ut,vd),e(vd,ntr),e(vd,V1e),e(V1e,str),e(vd,ltr),e(vd,eQ),e(eQ,itr),e(vd,dtr),e(ut,ctr),M(SF,ut,null),e(Go,ftr),e(Go,so),M(Vy,so,null),e(so,mtr),e(so,X1e),e(X1e,gtr),e(so,htr),e(so,za),e(za,ptr),e(za,z1e),e(z1e,_tr),e(za,utr),e(za,W1e),e(W1e,btr),e(za,vtr),e(za,Q1e),e(Q1e,Ftr),e(za,Ttr),e(so,Mtr),e(so,V),e(V,RF),e(RF,H1e),e(H1e,Etr),e(RF,Ctr),e(RF,oQ),e(oQ,wtr),e(RF,Atr),e(V,Ltr),e(V,PF),e(PF,U1e),e(U1e,ytr),e(PF,xtr),e(PF,rQ),e(rQ,$tr),e(PF,ktr),e(V,Str),e(V,BF),e(BF,J1e),e(J1e,Rtr),e(BF,Ptr),e(BF,tQ),e(tQ,Btr),e(BF,Itr),e(V,Ntr),e(V,IF),e(IF,Y1e),e(Y1e,qtr),e(IF,jtr),e(IF,aQ),e(aQ,Dtr),e(IF,Gtr),e(V,Otr),e(V,NF),e(NF,K1e),e(K1e,Vtr),e(NF,Xtr),e(NF,nQ),e(nQ,ztr),e(NF,Wtr),e(V,Qtr),e(V,qF),e(qF,Z1e),e(Z1e,Htr),e(qF,Utr),e(qF,sQ),e(sQ,Jtr),e(qF,Ytr),e(V,Ktr),e(V,jF),e(jF,ebe),e(ebe,Ztr),e(jF,ear),e(jF,lQ),e(lQ,oar),e(jF,rar),e(V,tar),e(V,DF),e(DF,obe),e(obe,aar),e(DF,nar),e(DF,iQ),e(iQ,sar),e(DF,lar),e(V,iar),e(V,GF),e(GF,rbe),e(rbe,dar),e(GF,car),e(GF,dQ),e(dQ,far),e(GF,mar),e(V,gar),e(V,OF),e(OF,tbe),e(tbe,har),e(OF,par),e(OF,cQ),e(cQ,_ar),e(OF,uar),e(V,bar),e(V,VF),e(VF,abe),e(abe,Far),e(VF,Tar),e(VF,fQ),e(fQ,Mar),e(VF,Ear),e(V,Car),e(V,XF),e(XF,nbe),e(nbe,war),e(XF,Aar),e(XF,mQ),e(mQ,Lar),e(XF,yar),e(V,xar),e(V,zF),e(zF,sbe),e(sbe,$ar),e(zF,kar),e(zF,gQ),e(gQ,Sar),e(zF,Rar),e(V,Par),e(V,WF),e(WF,lbe),e(lbe,Bar),e(WF,Iar),e(WF,hQ),e(hQ,Nar),e(WF,qar),e(V,jar),e(V,QF),e(QF,ibe),e(ibe,Dar),e(QF,Gar),e(QF,pQ),e(pQ,Oar),e(QF,Var),e(V,Xar),e(V,HF),e(HF,dbe),e(dbe,zar),e(HF,War),e(HF,_Q),e(_Q,Qar),e(HF,Har),e(V,Uar),e(V,UF),e(UF,cbe),e(cbe,Jar),e(UF,Yar),e(UF,uQ),e(uQ,Kar),e(UF,Zar),e(V,enr),e(V,JF),e(JF,fbe),e(fbe,onr),e(JF,rnr),e(JF,bQ),e(bQ,tnr),e(JF,anr),e(V,nnr),e(V,YF),e(YF,mbe),e(mbe,snr),e(YF,lnr),e(YF,vQ),e(vQ,inr),e(YF,dnr),e(V,cnr),e(V,KF),e(KF,gbe),e(gbe,fnr),e(KF,mnr),e(KF,FQ),e(FQ,gnr),e(KF,hnr),e(V,pnr),e(V,ZF),e(ZF,hbe),e(hbe,_nr),e(ZF,unr),e(ZF,TQ),e(TQ,bnr),e(ZF,vnr),e(V,Fnr),e(V,e6),e(e6,pbe),e(pbe,Tnr),e(e6,Mnr),e(e6,MQ),e(MQ,Enr),e(e6,Cnr),e(V,wnr),e(V,o6),e(o6,_be),e(_be,Anr),e(o6,Lnr),e(o6,EQ),e(EQ,ynr),e(o6,xnr),e(V,$nr),e(V,r6),e(r6,ube),e(ube,knr),e(r6,Snr),e(r6,CQ),e(CQ,Rnr),e(r6,Pnr),e(V,Bnr),e(V,t6),e(t6,bbe),e(bbe,Inr),e(t6,Nnr),e(t6,wQ),e(wQ,qnr),e(t6,jnr),e(V,Dnr),e(V,a6),e(a6,vbe),e(vbe,Gnr),e(a6,Onr),e(a6,AQ),e(AQ,Vnr),e(a6,Xnr),e(V,znr),e(V,n6),e(n6,Fbe),e(Fbe,Wnr),e(n6,Qnr),e(n6,LQ),e(LQ,Hnr),e(n6,Unr),e(V,Jnr),e(V,s6),e(s6,Tbe),e(Tbe,Ynr),e(s6,Knr),e(s6,yQ),e(yQ,Znr),e(s6,esr),e(V,osr),e(V,l6),e(l6,Mbe),e(Mbe,rsr),e(l6,tsr),e(l6,xQ),e(xQ,asr),e(l6,nsr),e(V,ssr),e(V,i6),e(i6,Ebe),e(Ebe,lsr),e(i6,isr),e(i6,$Q),e($Q,dsr),e(i6,csr),e(V,fsr),e(V,d6),e(d6,Cbe),e(Cbe,msr),e(d6,gsr),e(d6,kQ),e(kQ,hsr),e(d6,psr),e(V,_sr),e(V,c6),e(c6,wbe),e(wbe,usr),e(c6,bsr),e(c6,SQ),e(SQ,vsr),e(c6,Fsr),e(V,Tsr),e(V,f6),e(f6,Abe),e(Abe,Msr),e(f6,Esr),e(f6,RQ),e(RQ,Csr),e(f6,wsr),e(V,Asr),e(V,m6),e(m6,Lbe),e(Lbe,Lsr),e(m6,ysr),e(m6,PQ),e(PQ,xsr),e(m6,$sr),e(V,ksr),e(V,g6),e(g6,ybe),e(ybe,Ssr),e(g6,Rsr),e(g6,BQ),e(BQ,Psr),e(g6,Bsr),e(V,Isr),e(V,h6),e(h6,xbe),e(xbe,Nsr),e(h6,qsr),e(h6,IQ),e(IQ,jsr),e(h6,Dsr),e(V,Gsr),e(V,p6),e(p6,$be),e($be,Osr),e(p6,Vsr),e(p6,NQ),e(NQ,Xsr),e(p6,zsr),e(V,Wsr),e(V,_6),e(_6,kbe),e(kbe,Qsr),e(_6,Hsr),e(_6,qQ),e(qQ,Usr),e(_6,Jsr),e(V,Ysr),e(V,u6),e(u6,Sbe),e(Sbe,Ksr),e(u6,Zsr),e(u6,jQ),e(jQ,elr),e(u6,olr),e(V,rlr),e(V,b6),e(b6,Rbe),e(Rbe,tlr),e(b6,alr),e(b6,DQ),e(DQ,nlr),e(b6,slr),e(V,llr),e(V,v6),e(v6,Pbe),e(Pbe,ilr),e(v6,dlr),e(v6,GQ),e(GQ,clr),e(v6,flr),e(V,mlr),e(V,F6),e(F6,Bbe),e(Bbe,glr),e(F6,hlr),e(F6,OQ),e(OQ,plr),e(F6,_lr),e(so,ulr),e(so,T6),e(T6,blr),e(T6,Ibe),e(Ibe,vlr),e(T6,Flr),e(T6,Nbe),e(Nbe,Tlr),e(so,Mlr),M(M6,so,null),b(f,Wze,u),b(f,Fd,u),e(Fd,E6),e(E6,qbe),M(Xy,qbe,null),e(Fd,Elr),e(Fd,jbe),e(jbe,Clr),b(f,Qze,u),b(f,Oo,u),M(zy,Oo,null),e(Oo,wlr),e(Oo,Td),e(Td,Alr),e(Td,VQ),e(VQ,Llr),e(Td,ylr),e(Td,XQ),e(XQ,xlr),e(Td,$lr),e(Oo,klr),e(Oo,Wy),e(Wy,Slr),e(Wy,Dbe),e(Dbe,Rlr),e(Wy,Plr),e(Oo,Blr),e(Oo,bt),M(Qy,bt,null),e(bt,Ilr),e(bt,Gbe),e(Gbe,Nlr),e(bt,qlr),e(bt,Md),e(Md,jlr),e(Md,Obe),e(Obe,Dlr),e(Md,Glr),e(Md,zQ),e(zQ,Olr),e(Md,Vlr),e(bt,Xlr),M(C6,bt,null),e(Oo,zlr),e(Oo,lo),M(Hy,lo,null),e(lo,Wlr),e(lo,Vbe),e(Vbe,Qlr),e(lo,Hlr),e(lo,Wa),e(Wa,Ulr),e(Wa,Xbe),e(Xbe,Jlr),e(Wa,Ylr),e(Wa,zbe),e(zbe,Klr),e(Wa,Zlr),e(Wa,Wbe),e(Wbe,eir),e(Wa,oir),e(lo,rir),e(lo,Qbe),e(Qbe,w6),e(w6,Hbe),e(Hbe,tir),e(w6,air),e(w6,WQ),e(WQ,nir),e(w6,sir),e(lo,lir),e(lo,A6),e(A6,iir),e(A6,Ube),e(Ube,dir),e(A6,cir),e(A6,Jbe),e(Jbe,fir),e(lo,mir),M(L6,lo,null),b(f,Hze,u),b(f,Ed,u),e(Ed,y6),e(y6,Ybe),M(Uy,Ybe,null),e(Ed,gir),e(Ed,Kbe),e(Kbe,hir),b(f,Uze,u),b(f,Vo,u),M(Jy,Vo,null),e(Vo,pir),e(Vo,Cd),e(Cd,_ir),e(Cd,QQ),e(QQ,uir),e(Cd,bir),e(Cd,HQ),e(HQ,vir),e(Cd,Fir),e(Vo,Tir),e(Vo,Yy),e(Yy,Mir),e(Yy,Zbe),e(Zbe,Eir),e(Yy,Cir),e(Vo,wir),e(Vo,vt),M(Ky,vt,null),e(vt,Air),e(vt,eve),e(eve,Lir),e(vt,yir),e(vt,wd),e(wd,xir),e(wd,ove),e(ove,$ir),e(wd,kir),e(wd,UQ),e(UQ,Sir),e(wd,Rir),e(vt,Pir),M(x6,vt,null),e(Vo,Bir),e(Vo,io),M(Zy,io,null),e(io,Iir),e(io,rve),e(rve,Nir),e(io,qir),e(io,Qa),e(Qa,jir),e(Qa,tve),e(tve,Dir),e(Qa,Gir),e(Qa,ave),e(ave,Oir),e(Qa,Vir),e(Qa,nve),e(nve,Xir),e(Qa,zir),e(io,Wir),e(io,be),e(be,$6),e($6,sve),e(sve,Qir),e($6,Hir),e($6,JQ),e(JQ,Uir),e($6,Jir),e(be,Yir),e(be,k6),e(k6,lve),e(lve,Kir),e(k6,Zir),e(k6,YQ),e(YQ,edr),e(k6,odr),e(be,rdr),e(be,S6),e(S6,ive),e(ive,tdr),e(S6,adr),e(S6,KQ),e(KQ,ndr),e(S6,sdr),e(be,ldr),e(be,R6),e(R6,dve),e(dve,idr),e(R6,ddr),e(R6,ZQ),e(ZQ,cdr),e(R6,fdr),e(be,mdr),e(be,Ys),e(Ys,cve),e(cve,gdr),e(Ys,hdr),e(Ys,eH),e(eH,pdr),e(Ys,_dr),e(Ys,oH),e(oH,udr),e(Ys,bdr),e(be,vdr),e(be,P6),e(P6,fve),e(fve,Fdr),e(P6,Tdr),e(P6,rH),e(rH,Mdr),e(P6,Edr),e(be,Cdr),e(be,Ks),e(Ks,mve),e(mve,wdr),e(Ks,Adr),e(Ks,tH),e(tH,Ldr),e(Ks,ydr),e(Ks,aH),e(aH,xdr),e(Ks,$dr),e(be,kdr),e(be,B6),e(B6,gve),e(gve,Sdr),e(B6,Rdr),e(B6,nH),e(nH,Pdr),e(B6,Bdr),e(be,Idr),e(be,Ft),e(Ft,hve),e(hve,Ndr),e(Ft,qdr),e(Ft,sH),e(sH,jdr),e(Ft,Ddr),e(Ft,lH),e(lH,Gdr),e(Ft,Odr),e(Ft,iH),e(iH,Vdr),e(Ft,Xdr),e(be,zdr),e(be,I6),e(I6,pve),e(pve,Wdr),e(I6,Qdr),e(I6,dH),e(dH,Hdr),e(I6,Udr),e(be,Jdr),e(be,N6),e(N6,_ve),e(_ve,Ydr),e(N6,Kdr),e(N6,cH),e(cH,Zdr),e(N6,ecr),e(be,ocr),e(be,q6),e(q6,uve),e(uve,rcr),e(q6,tcr),e(q6,fH),e(fH,acr),e(q6,ncr),e(be,scr),e(be,j6),e(j6,bve),e(bve,lcr),e(j6,icr),e(j6,mH),e(mH,dcr),e(j6,ccr),e(be,fcr),e(be,D6),e(D6,vve),e(vve,mcr),e(D6,gcr),e(D6,gH),e(gH,hcr),e(D6,pcr),e(be,_cr),e(be,G6),e(G6,Fve),e(Fve,ucr),e(G6,bcr),e(G6,hH),e(hH,vcr),e(G6,Fcr),e(be,Tcr),e(be,O6),e(O6,Tve),e(Tve,Mcr),e(O6,Ecr),e(O6,pH),e(pH,Ccr),e(O6,wcr),e(be,Acr),e(be,V6),e(V6,Mve),e(Mve,Lcr),e(V6,ycr),e(V6,_H),e(_H,xcr),e(V6,$cr),e(io,kcr),e(io,X6),e(X6,Scr),e(X6,Eve),e(Eve,Rcr),e(X6,Pcr),e(X6,Cve),e(Cve,Bcr),e(io,Icr),M(z6,io,null),b(f,Jze,u),b(f,Ad,u),e(Ad,W6),e(W6,wve),M(e9,wve,null),e(Ad,Ncr),e(Ad,Ave),e(Ave,qcr),b(f,Yze,u),b(f,Xo,u),M(o9,Xo,null),e(Xo,jcr),e(Xo,Ld),e(Ld,Dcr),e(Ld,uH),e(uH,Gcr),e(Ld,Ocr),e(Ld,bH),e(bH,Vcr),e(Ld,Xcr),e(Xo,zcr),e(Xo,r9),e(r9,Wcr),e(r9,Lve),e(Lve,Qcr),e(r9,Hcr),e(Xo,Ucr),e(Xo,Tt),M(t9,Tt,null),e(Tt,Jcr),e(Tt,yve),e(yve,Ycr),e(Tt,Kcr),e(Tt,yd),e(yd,Zcr),e(yd,xve),e(xve,efr),e(yd,ofr),e(yd,vH),e(vH,rfr),e(yd,tfr),e(Tt,afr),M(Q6,Tt,null),e(Xo,nfr),e(Xo,co),M(a9,co,null),e(co,sfr),e(co,$ve),e($ve,lfr),e(co,ifr),e(co,Ha),e(Ha,dfr),e(Ha,kve),e(kve,cfr),e(Ha,ffr),e(Ha,Sve),e(Sve,mfr),e(Ha,gfr),e(Ha,Rve),e(Rve,hfr),e(Ha,pfr),e(co,_fr),e(co,Pve),e(Pve,H6),e(H6,Bve),e(Bve,ufr),e(H6,bfr),e(H6,FH),e(FH,vfr),e(H6,Ffr),e(co,Tfr),e(co,U6),e(U6,Mfr),e(U6,Ive),e(Ive,Efr),e(U6,Cfr),e(U6,Nve),e(Nve,wfr),e(co,Afr),M(J6,co,null),b(f,Kze,u),b(f,xd,u),e(xd,Y6),e(Y6,qve),M(n9,qve,null),e(xd,Lfr),e(xd,jve),e(jve,yfr),b(f,Zze,u),b(f,zo,u),M(s9,zo,null),e(zo,xfr),e(zo,$d),e($d,$fr),e($d,TH),e(TH,kfr),e($d,Sfr),e($d,MH),e(MH,Rfr),e($d,Pfr),e(zo,Bfr),e(zo,l9),e(l9,Ifr),e(l9,Dve),e(Dve,Nfr),e(l9,qfr),e(zo,jfr),e(zo,Mt),M(i9,Mt,null),e(Mt,Dfr),e(Mt,Gve),e(Gve,Gfr),e(Mt,Ofr),e(Mt,kd),e(kd,Vfr),e(kd,Ove),e(Ove,Xfr),e(kd,zfr),e(kd,EH),e(EH,Wfr),e(kd,Qfr),e(Mt,Hfr),M(K6,Mt,null),e(zo,Ufr),e(zo,fo),M(d9,fo,null),e(fo,Jfr),e(fo,Vve),e(Vve,Yfr),e(fo,Kfr),e(fo,Ua),e(Ua,Zfr),e(Ua,Xve),e(Xve,emr),e(Ua,omr),e(Ua,zve),e(zve,rmr),e(Ua,tmr),e(Ua,Wve),e(Wve,amr),e(Ua,nmr),e(fo,smr),e(fo,Qve),e(Qve,Z6),e(Z6,Hve),e(Hve,lmr),e(Z6,imr),e(Z6,CH),e(CH,dmr),e(Z6,cmr),e(fo,fmr),e(fo,eT),e(eT,mmr),e(eT,Uve),e(Uve,gmr),e(eT,hmr),e(eT,Jve),e(Jve,pmr),e(fo,_mr),M(oT,fo,null),b(f,eWe,u),b(f,Sd,u),e(Sd,rT),e(rT,Yve),M(c9,Yve,null),e(Sd,umr),e(Sd,Kve),e(Kve,bmr),b(f,oWe,u),b(f,Wo,u),M(f9,Wo,null),e(Wo,vmr),e(Wo,Rd),e(Rd,Fmr),e(Rd,wH),e(wH,Tmr),e(Rd,Mmr),e(Rd,AH),e(AH,Emr),e(Rd,Cmr),e(Wo,wmr),e(Wo,m9),e(m9,Amr),e(m9,Zve),e(Zve,Lmr),e(m9,ymr),e(Wo,xmr),e(Wo,Et),M(g9,Et,null),e(Et,$mr),e(Et,e3e),e(e3e,kmr),e(Et,Smr),e(Et,Pd),e(Pd,Rmr),e(Pd,o3e),e(o3e,Pmr),e(Pd,Bmr),e(Pd,LH),e(LH,Imr),e(Pd,Nmr),e(Et,qmr),M(tT,Et,null),e(Wo,jmr),e(Wo,mo),M(h9,mo,null),e(mo,Dmr),e(mo,r3e),e(r3e,Gmr),e(mo,Omr),e(mo,Ja),e(Ja,Vmr),e(Ja,t3e),e(t3e,Xmr),e(Ja,zmr),e(Ja,a3e),e(a3e,Wmr),e(Ja,Qmr),e(Ja,n3e),e(n3e,Hmr),e(Ja,Umr),e(mo,Jmr),e(mo,Pe),e(Pe,aT),e(aT,s3e),e(s3e,Ymr),e(aT,Kmr),e(aT,yH),e(yH,Zmr),e(aT,egr),e(Pe,ogr),e(Pe,nT),e(nT,l3e),e(l3e,rgr),e(nT,tgr),e(nT,xH),e(xH,agr),e(nT,ngr),e(Pe,sgr),e(Pe,sT),e(sT,i3e),e(i3e,lgr),e(sT,igr),e(sT,$H),e($H,dgr),e(sT,cgr),e(Pe,fgr),e(Pe,lT),e(lT,d3e),e(d3e,mgr),e(lT,ggr),e(lT,kH),e(kH,hgr),e(lT,pgr),e(Pe,_gr),e(Pe,iT),e(iT,c3e),e(c3e,ugr),e(iT,bgr),e(iT,SH),e(SH,vgr),e(iT,Fgr),e(Pe,Tgr),e(Pe,dT),e(dT,f3e),e(f3e,Mgr),e(dT,Egr),e(dT,RH),e(RH,Cgr),e(dT,wgr),e(Pe,Agr),e(Pe,cT),e(cT,m3e),e(m3e,Lgr),e(cT,ygr),e(cT,PH),e(PH,xgr),e(cT,$gr),e(Pe,kgr),e(Pe,fT),e(fT,g3e),e(g3e,Sgr),e(fT,Rgr),e(fT,BH),e(BH,Pgr),e(fT,Bgr),e(Pe,Igr),e(Pe,mT),e(mT,h3e),e(h3e,Ngr),e(mT,qgr),e(mT,IH),e(IH,jgr),e(mT,Dgr),e(mo,Ggr),e(mo,gT),e(gT,Ogr),e(gT,p3e),e(p3e,Vgr),e(gT,Xgr),e(gT,_3e),e(_3e,zgr),e(mo,Wgr),M(hT,mo,null),b(f,rWe,u),b(f,Bd,u),e(Bd,pT),e(pT,u3e),M(p9,u3e,null),e(Bd,Qgr),e(Bd,b3e),e(b3e,Hgr),b(f,tWe,u),b(f,Qo,u),M(_9,Qo,null),e(Qo,Ugr),e(Qo,Id),e(Id,Jgr),e(Id,NH),e(NH,Ygr),e(Id,Kgr),e(Id,qH),e(qH,Zgr),e(Id,ehr),e(Qo,ohr),e(Qo,u9),e(u9,rhr),e(u9,v3e),e(v3e,thr),e(u9,ahr),e(Qo,nhr),e(Qo,Ct),M(b9,Ct,null),e(Ct,shr),e(Ct,F3e),e(F3e,lhr),e(Ct,ihr),e(Ct,Nd),e(Nd,dhr),e(Nd,T3e),e(T3e,chr),e(Nd,fhr),e(Nd,jH),e(jH,mhr),e(Nd,ghr),e(Ct,hhr),M(_T,Ct,null),e(Qo,phr),e(Qo,go),M(v9,go,null),e(go,_hr),e(go,M3e),e(M3e,uhr),e(go,bhr),e(go,Ya),e(Ya,vhr),e(Ya,E3e),e(E3e,Fhr),e(Ya,Thr),e(Ya,C3e),e(C3e,Mhr),e(Ya,Ehr),e(Ya,w3e),e(w3e,Chr),e(Ya,whr),e(go,Ahr),e(go,rt),e(rt,uT),e(uT,A3e),e(A3e,Lhr),e(uT,yhr),e(uT,DH),e(DH,xhr),e(uT,$hr),e(rt,khr),e(rt,bT),e(bT,L3e),e(L3e,Shr),e(bT,Rhr),e(bT,GH),e(GH,Phr),e(bT,Bhr),e(rt,Ihr),e(rt,vT),e(vT,y3e),e(y3e,Nhr),e(vT,qhr),e(vT,OH),e(OH,jhr),e(vT,Dhr),e(rt,Ghr),e(rt,FT),e(FT,x3e),e(x3e,Ohr),e(FT,Vhr),e(FT,VH),e(VH,Xhr),e(FT,zhr),e(rt,Whr),e(rt,TT),e(TT,$3e),e($3e,Qhr),e(TT,Hhr),e(TT,XH),e(XH,Uhr),e(TT,Jhr),e(go,Yhr),e(go,MT),e(MT,Khr),e(MT,k3e),e(k3e,Zhr),e(MT,epr),e(MT,S3e),e(S3e,opr),e(go,rpr),M(ET,go,null),b(f,aWe,u),b(f,qd,u),e(qd,CT),e(CT,R3e),M(F9,R3e,null),e(qd,tpr),e(qd,P3e),e(P3e,apr),b(f,nWe,u),b(f,Ho,u),M(T9,Ho,null),e(Ho,npr),e(Ho,jd),e(jd,spr),e(jd,zH),e(zH,lpr),e(jd,ipr),e(jd,WH),e(WH,dpr),e(jd,cpr),e(Ho,fpr),e(Ho,M9),e(M9,mpr),e(M9,B3e),e(B3e,gpr),e(M9,hpr),e(Ho,ppr),e(Ho,wt),M(E9,wt,null),e(wt,_pr),e(wt,I3e),e(I3e,upr),e(wt,bpr),e(wt,Dd),e(Dd,vpr),e(Dd,N3e),e(N3e,Fpr),e(Dd,Tpr),e(Dd,QH),e(QH,Mpr),e(Dd,Epr),e(wt,Cpr),M(wT,wt,null),e(Ho,wpr),e(Ho,ho),M(C9,ho,null),e(ho,Apr),e(ho,q3e),e(q3e,Lpr),e(ho,ypr),e(ho,Ka),e(Ka,xpr),e(Ka,j3e),e(j3e,$pr),e(Ka,kpr),e(Ka,D3e),e(D3e,Spr),e(Ka,Rpr),e(Ka,G3e),e(G3e,Ppr),e(Ka,Bpr),e(ho,Ipr),e(ho,Le),e(Le,AT),e(AT,O3e),e(O3e,Npr),e(AT,qpr),e(AT,HH),e(HH,jpr),e(AT,Dpr),e(Le,Gpr),e(Le,LT),e(LT,V3e),e(V3e,Opr),e(LT,Vpr),e(LT,UH),e(UH,Xpr),e(LT,zpr),e(Le,Wpr),e(Le,yT),e(yT,X3e),e(X3e,Qpr),e(yT,Hpr),e(yT,JH),e(JH,Upr),e(yT,Jpr),e(Le,Ypr),e(Le,xT),e(xT,z3e),e(z3e,Kpr),e(xT,Zpr),e(xT,YH),e(YH,e_r),e(xT,o_r),e(Le,r_r),e(Le,$T),e($T,W3e),e(W3e,t_r),e($T,a_r),e($T,KH),e(KH,n_r),e($T,s_r),e(Le,l_r),e(Le,kT),e(kT,Q3e),e(Q3e,i_r),e(kT,d_r),e(kT,ZH),e(ZH,c_r),e(kT,f_r),e(Le,m_r),e(Le,ST),e(ST,H3e),e(H3e,g_r),e(ST,h_r),e(ST,eU),e(eU,p_r),e(ST,__r),e(Le,u_r),e(Le,RT),e(RT,U3e),e(U3e,b_r),e(RT,v_r),e(RT,oU),e(oU,F_r),e(RT,T_r),e(Le,M_r),e(Le,PT),e(PT,J3e),e(J3e,E_r),e(PT,C_r),e(PT,rU),e(rU,w_r),e(PT,A_r),e(Le,L_r),e(Le,BT),e(BT,Y3e),e(Y3e,y_r),e(BT,x_r),e(BT,tU),e(tU,$_r),e(BT,k_r),e(ho,S_r),e(ho,IT),e(IT,R_r),e(IT,K3e),e(K3e,P_r),e(IT,B_r),e(IT,Z3e),e(Z3e,I_r),e(ho,N_r),M(NT,ho,null),b(f,sWe,u),b(f,Gd,u),e(Gd,qT),e(qT,eFe),M(w9,eFe,null),e(Gd,q_r),e(Gd,oFe),e(oFe,j_r),b(f,lWe,u),b(f,Uo,u),M(A9,Uo,null),e(Uo,D_r),e(Uo,Od),e(Od,G_r),e(Od,aU),e(aU,O_r),e(Od,V_r),e(Od,nU),e(nU,X_r),e(Od,z_r),e(Uo,W_r),e(Uo,L9),e(L9,Q_r),e(L9,rFe),e(rFe,H_r),e(L9,U_r),e(Uo,J_r),e(Uo,At),M(y9,At,null),e(At,Y_r),e(At,tFe),e(tFe,K_r),e(At,Z_r),e(At,Vd),e(Vd,eur),e(Vd,aFe),e(aFe,our),e(Vd,rur),e(Vd,sU),e(sU,tur),e(Vd,aur),e(At,nur),M(jT,At,null),e(Uo,sur),e(Uo,po),M(x9,po,null),e(po,lur),e(po,nFe),e(nFe,iur),e(po,dur),e(po,Za),e(Za,cur),e(Za,sFe),e(sFe,fur),e(Za,mur),e(Za,lFe),e(lFe,gur),e(Za,hur),e(Za,iFe),e(iFe,pur),e(Za,_ur),e(po,uur),e(po,$9),e($9,DT),e(DT,dFe),e(dFe,bur),e(DT,vur),e(DT,lU),e(lU,Fur),e(DT,Tur),e($9,Mur),e($9,GT),e(GT,cFe),e(cFe,Eur),e(GT,Cur),e(GT,iU),e(iU,wur),e(GT,Aur),e(po,Lur),e(po,OT),e(OT,yur),e(OT,fFe),e(fFe,xur),e(OT,$ur),e(OT,mFe),e(mFe,kur),e(po,Sur),M(VT,po,null),b(f,iWe,u),b(f,Xd,u),e(Xd,XT),e(XT,gFe),M(k9,gFe,null),e(Xd,Rur),e(Xd,hFe),e(hFe,Pur),b(f,dWe,u),b(f,Jo,u),M(S9,Jo,null),e(Jo,Bur),e(Jo,zd),e(zd,Iur),e(zd,dU),e(dU,Nur),e(zd,qur),e(zd,cU),e(cU,jur),e(zd,Dur),e(Jo,Gur),e(Jo,R9),e(R9,Our),e(R9,pFe),e(pFe,Vur),e(R9,Xur),e(Jo,zur),e(Jo,Lt),M(P9,Lt,null),e(Lt,Wur),e(Lt,_Fe),e(_Fe,Qur),e(Lt,Hur),e(Lt,Wd),e(Wd,Uur),e(Wd,uFe),e(uFe,Jur),e(Wd,Yur),e(Wd,fU),e(fU,Kur),e(Wd,Zur),e(Lt,e2r),M(zT,Lt,null),e(Jo,o2r),e(Jo,_o),M(B9,_o,null),e(_o,r2r),e(_o,bFe),e(bFe,t2r),e(_o,a2r),e(_o,en),e(en,n2r),e(en,vFe),e(vFe,s2r),e(en,l2r),e(en,FFe),e(FFe,i2r),e(en,d2r),e(en,TFe),e(TFe,c2r),e(en,f2r),e(_o,m2r),e(_o,tt),e(tt,WT),e(WT,MFe),e(MFe,g2r),e(WT,h2r),e(WT,mU),e(mU,p2r),e(WT,_2r),e(tt,u2r),e(tt,QT),e(QT,EFe),e(EFe,b2r),e(QT,v2r),e(QT,gU),e(gU,F2r),e(QT,T2r),e(tt,M2r),e(tt,HT),e(HT,CFe),e(CFe,E2r),e(HT,C2r),e(HT,hU),e(hU,w2r),e(HT,A2r),e(tt,L2r),e(tt,UT),e(UT,wFe),e(wFe,y2r),e(UT,x2r),e(UT,pU),e(pU,$2r),e(UT,k2r),e(tt,S2r),e(tt,JT),e(JT,AFe),e(AFe,R2r),e(JT,P2r),e(JT,_U),e(_U,B2r),e(JT,I2r),e(_o,N2r),e(_o,YT),e(YT,q2r),e(YT,LFe),e(LFe,j2r),e(YT,D2r),e(YT,yFe),e(yFe,G2r),e(_o,O2r),M(KT,_o,null),b(f,cWe,u),b(f,Qd,u),e(Qd,ZT),e(ZT,xFe),M(I9,xFe,null),e(Qd,V2r),e(Qd,$Fe),e($Fe,X2r),b(f,fWe,u),b(f,Yo,u),M(N9,Yo,null),e(Yo,z2r),e(Yo,Hd),e(Hd,W2r),e(Hd,uU),e(uU,Q2r),e(Hd,H2r),e(Hd,bU),e(bU,U2r),e(Hd,J2r),e(Yo,Y2r),e(Yo,q9),e(q9,K2r),e(q9,kFe),e(kFe,Z2r),e(q9,e1r),e(Yo,o1r),e(Yo,yt),M(j9,yt,null),e(yt,r1r),e(yt,SFe),e(SFe,t1r),e(yt,a1r),e(yt,Ud),e(Ud,n1r),e(Ud,RFe),e(RFe,s1r),e(Ud,l1r),e(Ud,vU),e(vU,i1r),e(Ud,d1r),e(yt,c1r),M(e8,yt,null),e(Yo,f1r),e(Yo,uo),M(D9,uo,null),e(uo,m1r),e(uo,PFe),e(PFe,g1r),e(uo,h1r),e(uo,on),e(on,p1r),e(on,BFe),e(BFe,_1r),e(on,u1r),e(on,IFe),e(IFe,b1r),e(on,v1r),e(on,NFe),e(NFe,F1r),e(on,T1r),e(uo,M1r),e(uo,rn),e(rn,o8),e(o8,qFe),e(qFe,E1r),e(o8,C1r),e(o8,FU),e(FU,w1r),e(o8,A1r),e(rn,L1r),e(rn,r8),e(r8,jFe),e(jFe,y1r),e(r8,x1r),e(r8,TU),e(TU,$1r),e(r8,k1r),e(rn,S1r),e(rn,t8),e(t8,DFe),e(DFe,R1r),e(t8,P1r),e(t8,MU),e(MU,B1r),e(t8,I1r),e(rn,N1r),e(rn,a8),e(a8,GFe),e(GFe,q1r),e(a8,j1r),e(a8,EU),e(EU,D1r),e(a8,G1r),e(uo,O1r),e(uo,n8),e(n8,V1r),e(n8,OFe),e(OFe,X1r),e(n8,z1r),e(n8,VFe),e(VFe,W1r),e(uo,Q1r),M(s8,uo,null),b(f,mWe,u),b(f,Jd,u),e(Jd,l8),e(l8,XFe),M(G9,XFe,null),e(Jd,H1r),e(Jd,zFe),e(zFe,U1r),b(f,gWe,u),b(f,Ko,u),M(O9,Ko,null),e(Ko,J1r),e(Ko,Yd),e(Yd,Y1r),e(Yd,CU),e(CU,K1r),e(Yd,Z1r),e(Yd,wU),e(wU,ebr),e(Yd,obr),e(Ko,rbr),e(Ko,V9),e(V9,tbr),e(V9,WFe),e(WFe,abr),e(V9,nbr),e(Ko,sbr),e(Ko,xt),M(X9,xt,null),e(xt,lbr),e(xt,QFe),e(QFe,ibr),e(xt,dbr),e(xt,Kd),e(Kd,cbr),e(Kd,HFe),e(HFe,fbr),e(Kd,mbr),e(Kd,AU),e(AU,gbr),e(Kd,hbr),e(xt,pbr),M(i8,xt,null),e(Ko,_br),e(Ko,bo),M(z9,bo,null),e(bo,ubr),e(bo,UFe),e(UFe,bbr),e(bo,vbr),e(bo,tn),e(tn,Fbr),e(tn,JFe),e(JFe,Tbr),e(tn,Mbr),e(tn,YFe),e(YFe,Ebr),e(tn,Cbr),e(tn,KFe),e(KFe,wbr),e(tn,Abr),e(bo,Lbr),e(bo,W9),e(W9,d8),e(d8,ZFe),e(ZFe,ybr),e(d8,xbr),e(d8,LU),e(LU,$br),e(d8,kbr),e(W9,Sbr),e(W9,c8),e(c8,e6e),e(e6e,Rbr),e(c8,Pbr),e(c8,yU),e(yU,Bbr),e(c8,Ibr),e(bo,Nbr),e(bo,f8),e(f8,qbr),e(f8,o6e),e(o6e,jbr),e(f8,Dbr),e(f8,r6e),e(r6e,Gbr),e(bo,Obr),M(m8,bo,null),b(f,hWe,u),b(f,Zd,u),e(Zd,g8),e(g8,t6e),M(Q9,t6e,null),e(Zd,Vbr),e(Zd,a6e),e(a6e,Xbr),b(f,pWe,u),b(f,Zo,u),M(H9,Zo,null),e(Zo,zbr),e(Zo,ec),e(ec,Wbr),e(ec,xU),e(xU,Qbr),e(ec,Hbr),e(ec,$U),e($U,Ubr),e(ec,Jbr),e(Zo,Ybr),e(Zo,U9),e(U9,Kbr),e(U9,n6e),e(n6e,Zbr),e(U9,evr),e(Zo,ovr),e(Zo,$t),M(J9,$t,null),e($t,rvr),e($t,s6e),e(s6e,tvr),e($t,avr),e($t,oc),e(oc,nvr),e(oc,l6e),e(l6e,svr),e(oc,lvr),e(oc,kU),e(kU,ivr),e(oc,dvr),e($t,cvr),M(h8,$t,null),e(Zo,fvr),e(Zo,vo),M(Y9,vo,null),e(vo,mvr),e(vo,i6e),e(i6e,gvr),e(vo,hvr),e(vo,an),e(an,pvr),e(an,d6e),e(d6e,_vr),e(an,uvr),e(an,c6e),e(c6e,bvr),e(an,vvr),e(an,f6e),e(f6e,Fvr),e(an,Tvr),e(vo,Mvr),e(vo,m6e),e(m6e,p8),e(p8,g6e),e(g6e,Evr),e(p8,Cvr),e(p8,SU),e(SU,wvr),e(p8,Avr),e(vo,Lvr),e(vo,_8),e(_8,yvr),e(_8,h6e),e(h6e,xvr),e(_8,$vr),e(_8,p6e),e(p6e,kvr),e(vo,Svr),M(u8,vo,null),b(f,_We,u),b(f,rc,u),e(rc,b8),e(b8,_6e),M(K9,_6e,null),e(rc,Rvr),e(rc,u6e),e(u6e,Pvr),b(f,uWe,u),b(f,er,u),M(Z9,er,null),e(er,Bvr),e(er,tc),e(tc,Ivr),e(tc,RU),e(RU,Nvr),e(tc,qvr),e(tc,PU),e(PU,jvr),e(tc,Dvr),e(er,Gvr),e(er,ex),e(ex,Ovr),e(ex,b6e),e(b6e,Vvr),e(ex,Xvr),e(er,zvr),e(er,kt),M(ox,kt,null),e(kt,Wvr),e(kt,v6e),e(v6e,Qvr),e(kt,Hvr),e(kt,ac),e(ac,Uvr),e(ac,F6e),e(F6e,Jvr),e(ac,Yvr),e(ac,BU),e(BU,Kvr),e(ac,Zvr),e(kt,e3r),M(v8,kt,null),e(er,o3r),e(er,Fo),M(rx,Fo,null),e(Fo,r3r),e(Fo,T6e),e(T6e,t3r),e(Fo,a3r),e(Fo,nn),e(nn,n3r),e(nn,M6e),e(M6e,s3r),e(nn,l3r),e(nn,E6e),e(E6e,i3r),e(nn,d3r),e(nn,C6e),e(C6e,c3r),e(nn,f3r),e(Fo,m3r),e(Fo,at),e(at,F8),e(F8,w6e),e(w6e,g3r),e(F8,h3r),e(F8,IU),e(IU,p3r),e(F8,_3r),e(at,u3r),e(at,T8),e(T8,A6e),e(A6e,b3r),e(T8,v3r),e(T8,NU),e(NU,F3r),e(T8,T3r),e(at,M3r),e(at,M8),e(M8,L6e),e(L6e,E3r),e(M8,C3r),e(M8,qU),e(qU,w3r),e(M8,A3r),e(at,L3r),e(at,E8),e(E8,y6e),e(y6e,y3r),e(E8,x3r),e(E8,jU),e(jU,$3r),e(E8,k3r),e(at,S3r),e(at,C8),e(C8,x6e),e(x6e,R3r),e(C8,P3r),e(C8,DU),e(DU,B3r),e(C8,I3r),e(Fo,N3r),e(Fo,w8),e(w8,q3r),e(w8,$6e),e($6e,j3r),e(w8,D3r),e(w8,k6e),e(k6e,G3r),e(Fo,O3r),M(A8,Fo,null),b(f,bWe,u),b(f,nc,u),e(nc,L8),e(L8,S6e),M(tx,S6e,null),e(nc,V3r),e(nc,R6e),e(R6e,X3r),b(f,vWe,u),b(f,or,u),M(ax,or,null),e(or,z3r),e(or,sc),e(sc,W3r),e(sc,GU),e(GU,Q3r),e(sc,H3r),e(sc,OU),e(OU,U3r),e(sc,J3r),e(or,Y3r),e(or,nx),e(nx,K3r),e(nx,P6e),e(P6e,Z3r),e(nx,eFr),e(or,oFr),e(or,St),M(sx,St,null),e(St,rFr),e(St,B6e),e(B6e,tFr),e(St,aFr),e(St,lc),e(lc,nFr),e(lc,I6e),e(I6e,sFr),e(lc,lFr),e(lc,VU),e(VU,iFr),e(lc,dFr),e(St,cFr),M(y8,St,null),e(or,fFr),e(or,To),M(lx,To,null),e(To,mFr),e(To,N6e),e(N6e,gFr),e(To,hFr),e(To,sn),e(sn,pFr),e(sn,q6e),e(q6e,_Fr),e(sn,uFr),e(sn,j6e),e(j6e,bFr),e(sn,vFr),e(sn,D6e),e(D6e,FFr),e(sn,TFr),e(To,MFr),e(To,G6e),e(G6e,x8),e(x8,O6e),e(O6e,EFr),e(x8,CFr),e(x8,XU),e(XU,wFr),e(x8,AFr),e(To,LFr),e(To,$8),e($8,yFr),e($8,V6e),e(V6e,xFr),e($8,$Fr),e($8,X6e),e(X6e,kFr),e(To,SFr),M(k8,To,null),b(f,FWe,u),b(f,ic,u),e(ic,S8),e(S8,z6e),M(ix,z6e,null),e(ic,RFr),e(ic,W6e),e(W6e,PFr),b(f,TWe,u),b(f,rr,u),M(dx,rr,null),e(rr,BFr),e(rr,dc),e(dc,IFr),e(dc,zU),e(zU,NFr),e(dc,qFr),e(dc,WU),e(WU,jFr),e(dc,DFr),e(rr,GFr),e(rr,cx),e(cx,OFr),e(cx,Q6e),e(Q6e,VFr),e(cx,XFr),e(rr,zFr),e(rr,Rt),M(fx,Rt,null),e(Rt,WFr),e(Rt,H6e),e(H6e,QFr),e(Rt,HFr),e(Rt,cc),e(cc,UFr),e(cc,U6e),e(U6e,JFr),e(cc,YFr),e(cc,QU),e(QU,KFr),e(cc,ZFr),e(Rt,e6r),M(R8,Rt,null),e(rr,o6r),e(rr,$r),M(mx,$r,null),e($r,r6r),e($r,J6e),e(J6e,t6r),e($r,a6r),e($r,ln),e(ln,n6r),e(ln,Y6e),e(Y6e,s6r),e(ln,l6r),e(ln,K6e),e(K6e,i6r),e(ln,d6r),e(ln,Z6e),e(Z6e,c6r),e(ln,f6r),e($r,m6r),e($r,I),e(I,P8),e(P8,eTe),e(eTe,g6r),e(P8,h6r),e(P8,HU),e(HU,p6r),e(P8,_6r),e(I,u6r),e(I,B8),e(B8,oTe),e(oTe,b6r),e(B8,v6r),e(B8,UU),e(UU,F6r),e(B8,T6r),e(I,M6r),e(I,I8),e(I8,rTe),e(rTe,E6r),e(I8,C6r),e(I8,JU),e(JU,w6r),e(I8,A6r),e(I,L6r),e(I,N8),e(N8,tTe),e(tTe,y6r),e(N8,x6r),e(N8,YU),e(YU,$6r),e(N8,k6r),e(I,S6r),e(I,q8),e(q8,aTe),e(aTe,R6r),e(q8,P6r),e(q8,KU),e(KU,B6r),e(q8,I6r),e(I,N6r),e(I,j8),e(j8,nTe),e(nTe,q6r),e(j8,j6r),e(j8,ZU),e(ZU,D6r),e(j8,G6r),e(I,O6r),e(I,D8),e(D8,sTe),e(sTe,V6r),e(D8,X6r),e(D8,eJ),e(eJ,z6r),e(D8,W6r),e(I,Q6r),e(I,G8),e(G8,lTe),e(lTe,H6r),e(G8,U6r),e(G8,oJ),e(oJ,J6r),e(G8,Y6r),e(I,K6r),e(I,O8),e(O8,iTe),e(iTe,Z6r),e(O8,eTr),e(O8,rJ),e(rJ,oTr),e(O8,rTr),e(I,tTr),e(I,V8),e(V8,dTe),e(dTe,aTr),e(V8,nTr),e(V8,tJ),e(tJ,sTr),e(V8,lTr),e(I,iTr),e(I,X8),e(X8,cTe),e(cTe,dTr),e(X8,cTr),e(X8,aJ),e(aJ,fTr),e(X8,mTr),e(I,gTr),e(I,z8),e(z8,fTe),e(fTe,hTr),e(z8,pTr),e(z8,nJ),e(nJ,_Tr),e(z8,uTr),e(I,bTr),e(I,W8),e(W8,mTe),e(mTe,vTr),e(W8,FTr),e(W8,sJ),e(sJ,TTr),e(W8,MTr),e(I,ETr),e(I,Q8),e(Q8,gTe),e(gTe,CTr),e(Q8,wTr),e(Q8,lJ),e(lJ,ATr),e(Q8,LTr),e(I,yTr),e(I,H8),e(H8,hTe),e(hTe,xTr),e(H8,$Tr),e(H8,iJ),e(iJ,kTr),e(H8,STr),e(I,RTr),e(I,U8),e(U8,pTe),e(pTe,PTr),e(U8,BTr),e(U8,dJ),e(dJ,ITr),e(U8,NTr),e(I,qTr),e(I,J8),e(J8,_Te),e(_Te,jTr),e(J8,DTr),e(J8,cJ),e(cJ,GTr),e(J8,OTr),e(I,VTr),e(I,Y8),e(Y8,uTe),e(uTe,XTr),e(Y8,zTr),e(Y8,fJ),e(fJ,WTr),e(Y8,QTr),e(I,HTr),e(I,Zs),e(Zs,bTe),e(bTe,UTr),e(Zs,JTr),e(Zs,mJ),e(mJ,YTr),e(Zs,KTr),e(Zs,gJ),e(gJ,ZTr),e(Zs,e8r),e(I,o8r),e(I,K8),e(K8,vTe),e(vTe,r8r),e(K8,t8r),e(K8,hJ),e(hJ,a8r),e(K8,n8r),e(I,s8r),e(I,Z8),e(Z8,FTe),e(FTe,l8r),e(Z8,i8r),e(Z8,pJ),e(pJ,d8r),e(Z8,c8r),e(I,f8r),e(I,eM),e(eM,TTe),e(TTe,m8r),e(eM,g8r),e(eM,_J),e(_J,h8r),e(eM,p8r),e(I,_8r),e(I,oM),e(oM,MTe),e(MTe,u8r),e(oM,b8r),e(oM,uJ),e(uJ,v8r),e(oM,F8r),e(I,T8r),e(I,rM),e(rM,ETe),e(ETe,M8r),e(rM,E8r),e(rM,bJ),e(bJ,C8r),e(rM,w8r),e(I,A8r),e(I,tM),e(tM,CTe),e(CTe,L8r),e(tM,y8r),e(tM,vJ),e(vJ,x8r),e(tM,$8r),e(I,k8r),e(I,aM),e(aM,wTe),e(wTe,S8r),e(aM,R8r),e(aM,FJ),e(FJ,P8r),e(aM,B8r),e(I,I8r),e(I,nM),e(nM,ATe),e(ATe,N8r),e(nM,q8r),e(nM,TJ),e(TJ,j8r),e(nM,D8r),e(I,G8r),e(I,sM),e(sM,LTe),e(LTe,O8r),e(sM,V8r),e(sM,MJ),e(MJ,X8r),e(sM,z8r),e(I,W8r),e(I,lM),e(lM,yTe),e(yTe,Q8r),e(lM,H8r),e(lM,EJ),e(EJ,U8r),e(lM,J8r),e(I,Y8r),e(I,iM),e(iM,xTe),e(xTe,K8r),e(iM,Z8r),e(iM,CJ),e(CJ,eMr),e(iM,oMr),e(I,rMr),e(I,dM),e(dM,$Te),e($Te,tMr),e(dM,aMr),e(dM,wJ),e(wJ,nMr),e(dM,sMr),e(I,lMr),e(I,cM),e(cM,kTe),e(kTe,iMr),e(cM,dMr),e(cM,AJ),e(AJ,cMr),e(cM,fMr),e(I,mMr),e(I,fM),e(fM,STe),e(STe,gMr),e(fM,hMr),e(fM,LJ),e(LJ,pMr),e(fM,_Mr),e(I,uMr),e(I,mM),e(mM,RTe),e(RTe,bMr),e(mM,vMr),e(mM,yJ),e(yJ,FMr),e(mM,TMr),e(I,MMr),e(I,gM),e(gM,PTe),e(PTe,EMr),e(gM,CMr),e(gM,xJ),e(xJ,wMr),e(gM,AMr),e(I,LMr),e(I,hM),e(hM,BTe),e(BTe,yMr),e(hM,xMr),e(hM,$J),e($J,$Mr),e(hM,kMr),e(I,SMr),e(I,pM),e(pM,ITe),e(ITe,RMr),e(pM,PMr),e(pM,kJ),e(kJ,BMr),e(pM,IMr),e(I,NMr),e(I,_M),e(_M,NTe),e(NTe,qMr),e(_M,jMr),e(_M,SJ),e(SJ,DMr),e(_M,GMr),e(I,OMr),e(I,uM),e(uM,qTe),e(qTe,VMr),e(uM,XMr),e(uM,RJ),e(RJ,zMr),e(uM,WMr),e(I,QMr),e(I,bM),e(bM,jTe),e(jTe,HMr),e(bM,UMr),e(bM,PJ),e(PJ,JMr),e(bM,YMr),e(I,KMr),e(I,vM),e(vM,DTe),e(DTe,ZMr),e(vM,e4r),e(vM,BJ),e(BJ,o4r),e(vM,r4r),e(I,t4r),e(I,FM),e(FM,GTe),e(GTe,a4r),e(FM,n4r),e(FM,IJ),e(IJ,s4r),e(FM,l4r),e(I,i4r),e(I,TM),e(TM,OTe),e(OTe,d4r),e(TM,c4r),e(TM,NJ),e(NJ,f4r),e(TM,m4r),e(I,g4r),e(I,MM),e(MM,VTe),e(VTe,h4r),e(MM,p4r),e(MM,qJ),e(qJ,_4r),e(MM,u4r),e(I,b4r),e(I,EM),e(EM,XTe),e(XTe,v4r),e(EM,F4r),e(EM,jJ),e(jJ,T4r),e(EM,M4r),e(I,E4r),e(I,CM),e(CM,zTe),e(zTe,C4r),e(CM,w4r),e(CM,DJ),e(DJ,A4r),e(CM,L4r),e(I,y4r),e(I,wM),e(wM,WTe),e(WTe,x4r),e(wM,$4r),e(wM,GJ),e(GJ,k4r),e(wM,S4r),e(I,R4r),e(I,AM),e(AM,QTe),e(QTe,P4r),e(AM,B4r),e(AM,OJ),e(OJ,I4r),e(AM,N4r),e(I,q4r),e(I,LM),e(LM,HTe),e(HTe,j4r),e(LM,D4r),e(LM,VJ),e(VJ,G4r),e(LM,O4r),e(I,V4r),e(I,yM),e(yM,UTe),e(UTe,X4r),e(yM,z4r),e(yM,XJ),e(XJ,W4r),e(yM,Q4r),e(I,H4r),e(I,xM),e(xM,JTe),e(JTe,U4r),e(xM,J4r),e(xM,zJ),e(zJ,Y4r),e(xM,K4r),e($r,Z4r),M($M,$r,null),b(f,MWe,u),b(f,fc,u),e(fc,kM),e(kM,YTe),M(gx,YTe,null),e(fc,eEr),e(fc,KTe),e(KTe,oEr),b(f,EWe,u),b(f,tr,u),M(hx,tr,null),e(tr,rEr),e(tr,mc),e(mc,tEr),e(mc,WJ),e(WJ,aEr),e(mc,nEr),e(mc,QJ),e(QJ,sEr),e(mc,lEr),e(tr,iEr),e(tr,px),e(px,dEr),e(px,ZTe),e(ZTe,cEr),e(px,fEr),e(tr,mEr),e(tr,Pt),M(_x,Pt,null),e(Pt,gEr),e(Pt,e8e),e(e8e,hEr),e(Pt,pEr),e(Pt,gc),e(gc,_Er),e(gc,o8e),e(o8e,uEr),e(gc,bEr),e(gc,HJ),e(HJ,vEr),e(gc,FEr),e(Pt,TEr),M(SM,Pt,null),e(tr,MEr),e(tr,kr),M(ux,kr,null),e(kr,EEr),e(kr,r8e),e(r8e,CEr),e(kr,wEr),e(kr,dn),e(dn,AEr),e(dn,t8e),e(t8e,LEr),e(dn,yEr),e(dn,a8e),e(a8e,xEr),e(dn,$Er),e(dn,n8e),e(n8e,kEr),e(dn,SEr),e(kr,REr),e(kr,se),e(se,RM),e(RM,s8e),e(s8e,PEr),e(RM,BEr),e(RM,UJ),e(UJ,IEr),e(RM,NEr),e(se,qEr),e(se,PM),e(PM,l8e),e(l8e,jEr),e(PM,DEr),e(PM,JJ),e(JJ,GEr),e(PM,OEr),e(se,VEr),e(se,BM),e(BM,i8e),e(i8e,XEr),e(BM,zEr),e(BM,YJ),e(YJ,WEr),e(BM,QEr),e(se,HEr),e(se,IM),e(IM,d8e),e(d8e,UEr),e(IM,JEr),e(IM,KJ),e(KJ,YEr),e(IM,KEr),e(se,ZEr),e(se,NM),e(NM,c8e),e(c8e,eCr),e(NM,oCr),e(NM,ZJ),e(ZJ,rCr),e(NM,tCr),e(se,aCr),e(se,qM),e(qM,f8e),e(f8e,nCr),e(qM,sCr),e(qM,eY),e(eY,lCr),e(qM,iCr),e(se,dCr),e(se,jM),e(jM,m8e),e(m8e,cCr),e(jM,fCr),e(jM,oY),e(oY,mCr),e(jM,gCr),e(se,hCr),e(se,DM),e(DM,g8e),e(g8e,pCr),e(DM,_Cr),e(DM,rY),e(rY,uCr),e(DM,bCr),e(se,vCr),e(se,GM),e(GM,h8e),e(h8e,FCr),e(GM,TCr),e(GM,tY),e(tY,MCr),e(GM,ECr),e(se,CCr),e(se,OM),e(OM,p8e),e(p8e,wCr),e(OM,ACr),e(OM,aY),e(aY,LCr),e(OM,yCr),e(se,xCr),e(se,VM),e(VM,_8e),e(_8e,$Cr),e(VM,kCr),e(VM,nY),e(nY,SCr),e(VM,RCr),e(se,PCr),e(se,XM),e(XM,u8e),e(u8e,BCr),e(XM,ICr),e(XM,sY),e(sY,NCr),e(XM,qCr),e(se,jCr),e(se,zM),e(zM,b8e),e(b8e,DCr),e(zM,GCr),e(zM,lY),e(lY,OCr),e(zM,VCr),e(se,XCr),e(se,WM),e(WM,v8e),e(v8e,zCr),e(WM,WCr),e(WM,iY),e(iY,QCr),e(WM,HCr),e(se,UCr),e(se,QM),e(QM,F8e),e(F8e,JCr),e(QM,YCr),e(QM,dY),e(dY,KCr),e(QM,ZCr),e(se,e5r),e(se,HM),e(HM,T8e),e(T8e,o5r),e(HM,r5r),e(HM,cY),e(cY,t5r),e(HM,a5r),e(se,n5r),e(se,UM),e(UM,M8e),e(M8e,s5r),e(UM,l5r),e(UM,fY),e(fY,i5r),e(UM,d5r),e(se,c5r),e(se,JM),e(JM,E8e),e(E8e,f5r),e(JM,m5r),e(JM,mY),e(mY,g5r),e(JM,h5r),e(se,p5r),e(se,YM),e(YM,C8e),e(C8e,_5r),e(YM,u5r),e(YM,gY),e(gY,b5r),e(YM,v5r),e(se,F5r),e(se,KM),e(KM,w8e),e(w8e,T5r),e(KM,M5r),e(KM,hY),e(hY,E5r),e(KM,C5r),e(se,w5r),e(se,ZM),e(ZM,A8e),e(A8e,A5r),e(ZM,L5r),e(ZM,pY),e(pY,y5r),e(ZM,x5r),e(se,$5r),e(se,e4),e(e4,L8e),e(L8e,k5r),e(e4,S5r),e(e4,_Y),e(_Y,R5r),e(e4,P5r),e(se,B5r),e(se,o4),e(o4,y8e),e(y8e,I5r),e(o4,N5r),e(o4,uY),e(uY,q5r),e(o4,j5r),e(kr,D5r),M(r4,kr,null),b(f,CWe,u),b(f,hc,u),e(hc,t4),e(t4,x8e),M(bx,x8e,null),e(hc,G5r),e(hc,$8e),e($8e,O5r),b(f,wWe,u),b(f,ar,u),M(vx,ar,null),e(ar,V5r),e(ar,pc),e(pc,X5r),e(pc,bY),e(bY,z5r),e(pc,W5r),e(pc,vY),e(vY,Q5r),e(pc,H5r),e(ar,U5r),e(ar,Fx),e(Fx,J5r),e(Fx,k8e),e(k8e,Y5r),e(Fx,K5r),e(ar,Z5r),e(ar,Bt),M(Tx,Bt,null),e(Bt,e0r),e(Bt,S8e),e(S8e,o0r),e(Bt,r0r),e(Bt,_c),e(_c,t0r),e(_c,R8e),e(R8e,a0r),e(_c,n0r),e(_c,FY),e(FY,s0r),e(_c,l0r),e(Bt,i0r),M(a4,Bt,null),e(ar,d0r),e(ar,Sr),M(Mx,Sr,null),e(Sr,c0r),e(Sr,P8e),e(P8e,f0r),e(Sr,m0r),e(Sr,cn),e(cn,g0r),e(cn,B8e),e(B8e,h0r),e(cn,p0r),e(cn,I8e),e(I8e,_0r),e(cn,u0r),e(cn,N8e),e(N8e,b0r),e(cn,v0r),e(Sr,F0r),e(Sr,Me),e(Me,n4),e(n4,q8e),e(q8e,T0r),e(n4,M0r),e(n4,TY),e(TY,E0r),e(n4,C0r),e(Me,w0r),e(Me,s4),e(s4,j8e),e(j8e,A0r),e(s4,L0r),e(s4,MY),e(MY,y0r),e(s4,x0r),e(Me,$0r),e(Me,l4),e(l4,D8e),e(D8e,k0r),e(l4,S0r),e(l4,EY),e(EY,R0r),e(l4,P0r),e(Me,B0r),e(Me,i4),e(i4,G8e),e(G8e,I0r),e(i4,N0r),e(i4,CY),e(CY,q0r),e(i4,j0r),e(Me,D0r),e(Me,d4),e(d4,O8e),e(O8e,G0r),e(d4,O0r),e(d4,wY),e(wY,V0r),e(d4,X0r),e(Me,z0r),e(Me,c4),e(c4,V8e),e(V8e,W0r),e(c4,Q0r),e(c4,AY),e(AY,H0r),e(c4,U0r),e(Me,J0r),e(Me,f4),e(f4,X8e),e(X8e,Y0r),e(f4,K0r),e(f4,LY),e(LY,Z0r),e(f4,ewr),e(Me,owr),e(Me,m4),e(m4,z8e),e(z8e,rwr),e(m4,twr),e(m4,yY),e(yY,awr),e(m4,nwr),e(Me,swr),e(Me,g4),e(g4,W8e),e(W8e,lwr),e(g4,iwr),e(g4,xY),e(xY,dwr),e(g4,cwr),e(Me,fwr),e(Me,h4),e(h4,Q8e),e(Q8e,mwr),e(h4,gwr),e(h4,$Y),e($Y,hwr),e(h4,pwr),e(Me,_wr),e(Me,p4),e(p4,H8e),e(H8e,uwr),e(p4,bwr),e(p4,kY),e(kY,vwr),e(p4,Fwr),e(Me,Twr),e(Me,_4),e(_4,U8e),e(U8e,Mwr),e(_4,Ewr),e(_4,SY),e(SY,Cwr),e(_4,wwr),e(Me,Awr),e(Me,u4),e(u4,J8e),e(J8e,Lwr),e(u4,ywr),e(u4,RY),e(RY,xwr),e(u4,$wr),e(Sr,kwr),M(b4,Sr,null),b(f,AWe,u),b(f,uc,u),e(uc,v4),e(v4,Y8e),M(Ex,Y8e,null),e(uc,Swr),e(uc,K8e),e(K8e,Rwr),b(f,LWe,u),b(f,nr,u),M(Cx,nr,null),e(nr,Pwr),e(nr,bc),e(bc,Bwr),e(bc,PY),e(PY,Iwr),e(bc,Nwr),e(bc,BY),e(BY,qwr),e(bc,jwr),e(nr,Dwr),e(nr,wx),e(wx,Gwr),e(wx,Z8e),e(Z8e,Owr),e(wx,Vwr),e(nr,Xwr),e(nr,It),M(Ax,It,null),e(It,zwr),e(It,eMe),e(eMe,Wwr),e(It,Qwr),e(It,vc),e(vc,Hwr),e(vc,oMe),e(oMe,Uwr),e(vc,Jwr),e(vc,IY),e(IY,Ywr),e(vc,Kwr),e(It,Zwr),M(F4,It,null),e(nr,eAr),e(nr,Rr),M(Lx,Rr,null),e(Rr,oAr),e(Rr,rMe),e(rMe,rAr),e(Rr,tAr),e(Rr,fn),e(fn,aAr),e(fn,tMe),e(tMe,nAr),e(fn,sAr),e(fn,aMe),e(aMe,lAr),e(fn,iAr),e(fn,nMe),e(nMe,dAr),e(fn,cAr),e(Rr,fAr),e(Rr,Ve),e(Ve,T4),e(T4,sMe),e(sMe,mAr),e(T4,gAr),e(T4,NY),e(NY,hAr),e(T4,pAr),e(Ve,_Ar),e(Ve,M4),e(M4,lMe),e(lMe,uAr),e(M4,bAr),e(M4,qY),e(qY,vAr),e(M4,FAr),e(Ve,TAr),e(Ve,el),e(el,iMe),e(iMe,MAr),e(el,EAr),e(el,jY),e(jY,CAr),e(el,wAr),e(el,DY),e(DY,AAr),e(el,LAr),e(Ve,yAr),e(Ve,E4),e(E4,dMe),e(dMe,xAr),e(E4,$Ar),e(E4,GY),e(GY,kAr),e(E4,SAr),e(Ve,RAr),e(Ve,C4),e(C4,cMe),e(cMe,PAr),e(C4,BAr),e(C4,OY),e(OY,IAr),e(C4,NAr),e(Ve,qAr),e(Ve,w4),e(w4,fMe),e(fMe,jAr),e(w4,DAr),e(w4,VY),e(VY,GAr),e(w4,OAr),e(Ve,VAr),e(Ve,A4),e(A4,mMe),e(mMe,XAr),e(A4,zAr),e(A4,XY),e(XY,WAr),e(A4,QAr),e(Ve,HAr),e(Ve,L4),e(L4,gMe),e(gMe,UAr),e(L4,JAr),e(L4,zY),e(zY,YAr),e(L4,KAr),e(Rr,ZAr),M(y4,Rr,null),b(f,yWe,u),b(f,Fc,u),e(Fc,x4),e(x4,hMe),M(yx,hMe,null),e(Fc,e7r),e(Fc,pMe),e(pMe,o7r),b(f,xWe,u),b(f,sr,u),M(xx,sr,null),e(sr,r7r),e(sr,Tc),e(Tc,t7r),e(Tc,WY),e(WY,a7r),e(Tc,n7r),e(Tc,QY),e(QY,s7r),e(Tc,l7r),e(sr,i7r),e(sr,$x),e($x,d7r),e($x,_Me),e(_Me,c7r),e($x,f7r),e(sr,m7r),e(sr,Nt),M(kx,Nt,null),e(Nt,g7r),e(Nt,uMe),e(uMe,h7r),e(Nt,p7r),e(Nt,Mc),e(Mc,_7r),e(Mc,bMe),e(bMe,u7r),e(Mc,b7r),e(Mc,HY),e(HY,v7r),e(Mc,F7r),e(Nt,T7r),M($4,Nt,null),e(sr,M7r),e(sr,Pr),M(Sx,Pr,null),e(Pr,E7r),e(Pr,vMe),e(vMe,C7r),e(Pr,w7r),e(Pr,mn),e(mn,A7r),e(mn,FMe),e(FMe,L7r),e(mn,y7r),e(mn,TMe),e(TMe,x7r),e(mn,$7r),e(mn,MMe),e(MMe,k7r),e(mn,S7r),e(Pr,R7r),e(Pr,ie),e(ie,k4),e(k4,EMe),e(EMe,P7r),e(k4,B7r),e(k4,UY),e(UY,I7r),e(k4,N7r),e(ie,q7r),e(ie,S4),e(S4,CMe),e(CMe,j7r),e(S4,D7r),e(S4,JY),e(JY,G7r),e(S4,O7r),e(ie,V7r),e(ie,R4),e(R4,wMe),e(wMe,X7r),e(R4,z7r),e(R4,YY),e(YY,W7r),e(R4,Q7r),e(ie,H7r),e(ie,P4),e(P4,AMe),e(AMe,U7r),e(P4,J7r),e(P4,KY),e(KY,Y7r),e(P4,K7r),e(ie,Z7r),e(ie,B4),e(B4,LMe),e(LMe,eLr),e(B4,oLr),e(B4,ZY),e(ZY,rLr),e(B4,tLr),e(ie,aLr),e(ie,I4),e(I4,yMe),e(yMe,nLr),e(I4,sLr),e(I4,eK),e(eK,lLr),e(I4,iLr),e(ie,dLr),e(ie,N4),e(N4,xMe),e(xMe,cLr),e(N4,fLr),e(N4,oK),e(oK,mLr),e(N4,gLr),e(ie,hLr),e(ie,q4),e(q4,$Me),e($Me,pLr),e(q4,_Lr),e(q4,rK),e(rK,uLr),e(q4,bLr),e(ie,vLr),e(ie,j4),e(j4,kMe),e(kMe,FLr),e(j4,TLr),e(j4,tK),e(tK,MLr),e(j4,ELr),e(ie,CLr),e(ie,D4),e(D4,SMe),e(SMe,wLr),e(D4,ALr),e(D4,aK),e(aK,LLr),e(D4,yLr),e(ie,xLr),e(ie,G4),e(G4,RMe),e(RMe,$Lr),e(G4,kLr),e(G4,nK),e(nK,SLr),e(G4,RLr),e(ie,PLr),e(ie,O4),e(O4,PMe),e(PMe,BLr),e(O4,ILr),e(O4,sK),e(sK,NLr),e(O4,qLr),e(ie,jLr),e(ie,V4),e(V4,BMe),e(BMe,DLr),e(V4,GLr),e(V4,lK),e(lK,OLr),e(V4,VLr),e(ie,XLr),e(ie,X4),e(X4,IMe),e(IMe,zLr),e(X4,WLr),e(X4,iK),e(iK,QLr),e(X4,HLr),e(ie,ULr),e(ie,z4),e(z4,NMe),e(NMe,JLr),e(z4,YLr),e(z4,dK),e(dK,KLr),e(z4,ZLr),e(ie,eyr),e(ie,W4),e(W4,qMe),e(qMe,oyr),e(W4,ryr),e(W4,cK),e(cK,tyr),e(W4,ayr),e(ie,nyr),e(ie,Q4),e(Q4,jMe),e(jMe,syr),e(Q4,lyr),e(Q4,fK),e(fK,iyr),e(Q4,dyr),e(ie,cyr),e(ie,H4),e(H4,DMe),e(DMe,fyr),e(H4,myr),e(H4,mK),e(mK,gyr),e(H4,hyr),e(ie,pyr),e(ie,U4),e(U4,GMe),e(GMe,_yr),e(U4,uyr),e(U4,gK),e(gK,byr),e(U4,vyr),e(ie,Fyr),e(ie,J4),e(J4,OMe),e(OMe,Tyr),e(J4,Myr),e(J4,hK),e(hK,Eyr),e(J4,Cyr),e(Pr,wyr),M(Y4,Pr,null),b(f,$We,u),b(f,Ec,u),e(Ec,K4),e(K4,VMe),M(Rx,VMe,null),e(Ec,Ayr),e(Ec,XMe),e(XMe,Lyr),b(f,kWe,u),b(f,lr,u),M(Px,lr,null),e(lr,yyr),e(lr,Cc),e(Cc,xyr),e(Cc,pK),e(pK,$yr),e(Cc,kyr),e(Cc,_K),e(_K,Syr),e(Cc,Ryr),e(lr,Pyr),e(lr,Bx),e(Bx,Byr),e(Bx,zMe),e(zMe,Iyr),e(Bx,Nyr),e(lr,qyr),e(lr,qt),M(Ix,qt,null),e(qt,jyr),e(qt,WMe),e(WMe,Dyr),e(qt,Gyr),e(qt,wc),e(wc,Oyr),e(wc,QMe),e(QMe,Vyr),e(wc,Xyr),e(wc,uK),e(uK,zyr),e(wc,Wyr),e(qt,Qyr),M(Z4,qt,null),e(lr,Hyr),e(lr,Br),M(Nx,Br,null),e(Br,Uyr),e(Br,HMe),e(HMe,Jyr),e(Br,Yyr),e(Br,gn),e(gn,Kyr),e(gn,UMe),e(UMe,Zyr),e(gn,e9r),e(gn,JMe),e(JMe,o9r),e(gn,r9r),e(gn,YMe),e(YMe,t9r),e(gn,a9r),e(Br,n9r),e(Br,ye),e(ye,eE),e(eE,KMe),e(KMe,s9r),e(eE,l9r),e(eE,bK),e(bK,i9r),e(eE,d9r),e(ye,c9r),e(ye,oE),e(oE,ZMe),e(ZMe,f9r),e(oE,m9r),e(oE,vK),e(vK,g9r),e(oE,h9r),e(ye,p9r),e(ye,rE),e(rE,e4e),e(e4e,_9r),e(rE,u9r),e(rE,FK),e(FK,b9r),e(rE,v9r),e(ye,F9r),e(ye,tE),e(tE,o4e),e(o4e,T9r),e(tE,M9r),e(tE,TK),e(TK,E9r),e(tE,C9r),e(ye,w9r),e(ye,aE),e(aE,r4e),e(r4e,A9r),e(aE,L9r),e(aE,MK),e(MK,y9r),e(aE,x9r),e(ye,$9r),e(ye,nE),e(nE,t4e),e(t4e,k9r),e(nE,S9r),e(nE,EK),e(EK,R9r),e(nE,P9r),e(ye,B9r),e(ye,sE),e(sE,a4e),e(a4e,I9r),e(sE,N9r),e(sE,CK),e(CK,q9r),e(sE,j9r),e(ye,D9r),e(ye,lE),e(lE,n4e),e(n4e,G9r),e(lE,O9r),e(lE,wK),e(wK,V9r),e(lE,X9r),e(ye,z9r),e(ye,iE),e(iE,s4e),e(s4e,W9r),e(iE,Q9r),e(iE,AK),e(AK,H9r),e(iE,U9r),e(ye,J9r),e(ye,dE),e(dE,l4e),e(l4e,Y9r),e(dE,K9r),e(dE,LK),e(LK,Z9r),e(dE,exr),e(Br,oxr),M(cE,Br,null),b(f,SWe,u),b(f,Ac,u),e(Ac,fE),e(fE,i4e),M(qx,i4e,null),e(Ac,rxr),e(Ac,d4e),e(d4e,txr),b(f,RWe,u),b(f,ir,u),M(jx,ir,null),e(ir,axr),e(ir,Lc),e(Lc,nxr),e(Lc,yK),e(yK,sxr),e(Lc,lxr),e(Lc,xK),e(xK,ixr),e(Lc,dxr),e(ir,cxr),e(ir,Dx),e(Dx,fxr),e(Dx,c4e),e(c4e,mxr),e(Dx,gxr),e(ir,hxr),e(ir,jt),M(Gx,jt,null),e(jt,pxr),e(jt,f4e),e(f4e,_xr),e(jt,uxr),e(jt,yc),e(yc,bxr),e(yc,m4e),e(m4e,vxr),e(yc,Fxr),e(yc,$K),e($K,Txr),e(yc,Mxr),e(jt,Exr),M(mE,jt,null),e(ir,Cxr),e(ir,Ir),M(Ox,Ir,null),e(Ir,wxr),e(Ir,g4e),e(g4e,Axr),e(Ir,Lxr),e(Ir,hn),e(hn,yxr),e(hn,h4e),e(h4e,xxr),e(hn,$xr),e(hn,p4e),e(p4e,kxr),e(hn,Sxr),e(hn,_4e),e(_4e,Rxr),e(hn,Pxr),e(Ir,Bxr),e(Ir,te),e(te,gE),e(gE,u4e),e(u4e,Ixr),e(gE,Nxr),e(gE,kK),e(kK,qxr),e(gE,jxr),e(te,Dxr),e(te,hE),e(hE,b4e),e(b4e,Gxr),e(hE,Oxr),e(hE,SK),e(SK,Vxr),e(hE,Xxr),e(te,zxr),e(te,pE),e(pE,v4e),e(v4e,Wxr),e(pE,Qxr),e(pE,RK),e(RK,Hxr),e(pE,Uxr),e(te,Jxr),e(te,_E),e(_E,F4e),e(F4e,Yxr),e(_E,Kxr),e(_E,PK),e(PK,Zxr),e(_E,e$r),e(te,o$r),e(te,uE),e(uE,T4e),e(T4e,r$r),e(uE,t$r),e(uE,BK),e(BK,a$r),e(uE,n$r),e(te,s$r),e(te,bE),e(bE,M4e),e(M4e,l$r),e(bE,i$r),e(bE,IK),e(IK,d$r),e(bE,c$r),e(te,f$r),e(te,vE),e(vE,E4e),e(E4e,m$r),e(vE,g$r),e(vE,NK),e(NK,h$r),e(vE,p$r),e(te,_$r),e(te,FE),e(FE,C4e),e(C4e,u$r),e(FE,b$r),e(FE,qK),e(qK,v$r),e(FE,F$r),e(te,T$r),e(te,TE),e(TE,w4e),e(w4e,M$r),e(TE,E$r),e(TE,jK),e(jK,C$r),e(TE,w$r),e(te,A$r),e(te,ME),e(ME,A4e),e(A4e,L$r),e(ME,y$r),e(ME,DK),e(DK,x$r),e(ME,$$r),e(te,k$r),e(te,EE),e(EE,L4e),e(L4e,S$r),e(EE,R$r),e(EE,GK),e(GK,P$r),e(EE,B$r),e(te,I$r),e(te,CE),e(CE,y4e),e(y4e,N$r),e(CE,q$r),e(CE,OK),e(OK,j$r),e(CE,D$r),e(te,G$r),e(te,wE),e(wE,x4e),e(x4e,O$r),e(wE,V$r),e(wE,VK),e(VK,X$r),e(wE,z$r),e(te,W$r),e(te,AE),e(AE,$4e),e($4e,Q$r),e(AE,H$r),e(AE,XK),e(XK,U$r),e(AE,J$r),e(te,Y$r),e(te,LE),e(LE,k4e),e(k4e,K$r),e(LE,Z$r),e(LE,zK),e(zK,ekr),e(LE,okr),e(te,rkr),e(te,yE),e(yE,S4e),e(S4e,tkr),e(yE,akr),e(yE,WK),e(WK,nkr),e(yE,skr),e(te,lkr),e(te,xE),e(xE,R4e),e(R4e,ikr),e(xE,dkr),e(xE,QK),e(QK,ckr),e(xE,fkr),e(te,mkr),e(te,$E),e($E,P4e),e(P4e,gkr),e($E,hkr),e($E,HK),e(HK,pkr),e($E,_kr),e(te,ukr),e(te,kE),e(kE,B4e),e(B4e,bkr),e(kE,vkr),e(kE,UK),e(UK,Fkr),e(kE,Tkr),e(te,Mkr),e(te,SE),e(SE,I4e),e(I4e,Ekr),e(SE,Ckr),e(SE,JK),e(JK,wkr),e(SE,Akr),e(te,Lkr),e(te,RE),e(RE,N4e),e(N4e,ykr),e(RE,xkr),e(RE,YK),e(YK,$kr),e(RE,kkr),e(te,Skr),e(te,PE),e(PE,q4e),e(q4e,Rkr),e(PE,Pkr),e(PE,KK),e(KK,Bkr),e(PE,Ikr),e(te,Nkr),e(te,BE),e(BE,j4e),e(j4e,qkr),e(BE,jkr),e(BE,ZK),e(ZK,Dkr),e(BE,Gkr),e(te,Okr),e(te,IE),e(IE,D4e),e(D4e,Vkr),e(IE,Xkr),e(IE,eZ),e(eZ,zkr),e(IE,Wkr),e(te,Qkr),e(te,NE),e(NE,G4e),e(G4e,Hkr),e(NE,Ukr),e(NE,oZ),e(oZ,Jkr),e(NE,Ykr),e(te,Kkr),e(te,qE),e(qE,O4e),e(O4e,Zkr),e(qE,eSr),e(qE,rZ),e(rZ,oSr),e(qE,rSr),e(Ir,tSr),M(jE,Ir,null),b(f,PWe,u),b(f,xc,u),e(xc,DE),e(DE,V4e),M(Vx,V4e,null),e(xc,aSr),e(xc,X4e),e(X4e,nSr),b(f,BWe,u),b(f,dr,u),M(Xx,dr,null),e(dr,sSr),e(dr,$c),e($c,lSr),e($c,tZ),e(tZ,iSr),e($c,dSr),e($c,aZ),e(aZ,cSr),e($c,fSr),e(dr,mSr),e(dr,zx),e(zx,gSr),e(zx,z4e),e(z4e,hSr),e(zx,pSr),e(dr,_Sr),e(dr,Dt),M(Wx,Dt,null),e(Dt,uSr),e(Dt,W4e),e(W4e,bSr),e(Dt,vSr),e(Dt,kc),e(kc,FSr),e(kc,Q4e),e(Q4e,TSr),e(kc,MSr),e(kc,nZ),e(nZ,ESr),e(kc,CSr),e(Dt,wSr),M(GE,Dt,null),e(dr,ASr),e(dr,Nr),M(Qx,Nr,null),e(Nr,LSr),e(Nr,H4e),e(H4e,ySr),e(Nr,xSr),e(Nr,pn),e(pn,$Sr),e(pn,U4e),e(U4e,kSr),e(pn,SSr),e(pn,J4e),e(J4e,RSr),e(pn,PSr),e(pn,Y4e),e(Y4e,BSr),e(pn,ISr),e(Nr,NSr),e(Nr,ve),e(ve,OE),e(OE,K4e),e(K4e,qSr),e(OE,jSr),e(OE,sZ),e(sZ,DSr),e(OE,GSr),e(ve,OSr),e(ve,VE),e(VE,Z4e),e(Z4e,VSr),e(VE,XSr),e(VE,lZ),e(lZ,zSr),e(VE,WSr),e(ve,QSr),e(ve,XE),e(XE,eEe),e(eEe,HSr),e(XE,USr),e(XE,iZ),e(iZ,JSr),e(XE,YSr),e(ve,KSr),e(ve,zE),e(zE,oEe),e(oEe,ZSr),e(zE,eRr),e(zE,dZ),e(dZ,oRr),e(zE,rRr),e(ve,tRr),e(ve,WE),e(WE,rEe),e(rEe,aRr),e(WE,nRr),e(WE,cZ),e(cZ,sRr),e(WE,lRr),e(ve,iRr),e(ve,QE),e(QE,tEe),e(tEe,dRr),e(QE,cRr),e(QE,fZ),e(fZ,fRr),e(QE,mRr),e(ve,gRr),e(ve,HE),e(HE,aEe),e(aEe,hRr),e(HE,pRr),e(HE,mZ),e(mZ,_Rr),e(HE,uRr),e(ve,bRr),e(ve,UE),e(UE,nEe),e(nEe,vRr),e(UE,FRr),e(UE,gZ),e(gZ,TRr),e(UE,MRr),e(ve,ERr),e(ve,JE),e(JE,sEe),e(sEe,CRr),e(JE,wRr),e(JE,hZ),e(hZ,ARr),e(JE,LRr),e(ve,yRr),e(ve,YE),e(YE,lEe),e(lEe,xRr),e(YE,$Rr),e(YE,pZ),e(pZ,kRr),e(YE,SRr),e(ve,RRr),e(ve,KE),e(KE,iEe),e(iEe,PRr),e(KE,BRr),e(KE,_Z),e(_Z,IRr),e(KE,NRr),e(ve,qRr),e(ve,ZE),e(ZE,dEe),e(dEe,jRr),e(ZE,DRr),e(ZE,uZ),e(uZ,GRr),e(ZE,ORr),e(ve,VRr),e(ve,eC),e(eC,cEe),e(cEe,XRr),e(eC,zRr),e(eC,bZ),e(bZ,WRr),e(eC,QRr),e(ve,HRr),e(ve,oC),e(oC,fEe),e(fEe,URr),e(oC,JRr),e(oC,vZ),e(vZ,YRr),e(oC,KRr),e(ve,ZRr),e(ve,rC),e(rC,mEe),e(mEe,ePr),e(rC,oPr),e(rC,FZ),e(FZ,rPr),e(rC,tPr),e(ve,aPr),e(ve,tC),e(tC,gEe),e(gEe,nPr),e(tC,sPr),e(tC,TZ),e(TZ,lPr),e(tC,iPr),e(ve,dPr),e(ve,aC),e(aC,hEe),e(hEe,cPr),e(aC,fPr),e(aC,MZ),e(MZ,mPr),e(aC,gPr),e(Nr,hPr),M(nC,Nr,null),b(f,IWe,u),b(f,Sc,u),e(Sc,sC),e(sC,pEe),M(Hx,pEe,null),e(Sc,pPr),e(Sc,_Ee),e(_Ee,_Pr),b(f,NWe,u),b(f,cr,u),M(Ux,cr,null),e(cr,uPr),e(cr,Rc),e(Rc,bPr),e(Rc,EZ),e(EZ,vPr),e(Rc,FPr),e(Rc,CZ),e(CZ,TPr),e(Rc,MPr),e(cr,EPr),e(cr,Jx),e(Jx,CPr),e(Jx,uEe),e(uEe,wPr),e(Jx,APr),e(cr,LPr),e(cr,Gt),M(Yx,Gt,null),e(Gt,yPr),e(Gt,bEe),e(bEe,xPr),e(Gt,$Pr),e(Gt,Pc),e(Pc,kPr),e(Pc,vEe),e(vEe,SPr),e(Pc,RPr),e(Pc,wZ),e(wZ,PPr),e(Pc,BPr),e(Gt,IPr),M(lC,Gt,null),e(cr,NPr),e(cr,qr),M(Kx,qr,null),e(qr,qPr),e(qr,FEe),e(FEe,jPr),e(qr,DPr),e(qr,_n),e(_n,GPr),e(_n,TEe),e(TEe,OPr),e(_n,VPr),e(_n,MEe),e(MEe,XPr),e(_n,zPr),e(_n,EEe),e(EEe,WPr),e(_n,QPr),e(qr,HPr),e(qr,Zx),e(Zx,iC),e(iC,CEe),e(CEe,UPr),e(iC,JPr),e(iC,AZ),e(AZ,YPr),e(iC,KPr),e(Zx,ZPr),e(Zx,dC),e(dC,wEe),e(wEe,eBr),e(dC,oBr),e(dC,LZ),e(LZ,rBr),e(dC,tBr),e(qr,aBr),M(cC,qr,null),b(f,qWe,u),b(f,Bc,u),e(Bc,fC),e(fC,AEe),M(e$,AEe,null),e(Bc,nBr),e(Bc,LEe),e(LEe,sBr),b(f,jWe,u),b(f,fr,u),M(o$,fr,null),e(fr,lBr),e(fr,Ic),e(Ic,iBr),e(Ic,yZ),e(yZ,dBr),e(Ic,cBr),e(Ic,xZ),e(xZ,fBr),e(Ic,mBr),e(fr,gBr),e(fr,r$),e(r$,hBr),e(r$,yEe),e(yEe,pBr),e(r$,_Br),e(fr,uBr),e(fr,Ot),M(t$,Ot,null),e(Ot,bBr),e(Ot,xEe),e(xEe,vBr),e(Ot,FBr),e(Ot,Nc),e(Nc,TBr),e(Nc,$Ee),e($Ee,MBr),e(Nc,EBr),e(Nc,$Z),e($Z,CBr),e(Nc,wBr),e(Ot,ABr),M(mC,Ot,null),e(fr,LBr),e(fr,jr),M(a$,jr,null),e(jr,yBr),e(jr,kEe),e(kEe,xBr),e(jr,$Br),e(jr,un),e(un,kBr),e(un,SEe),e(SEe,SBr),e(un,RBr),e(un,REe),e(REe,PBr),e(un,BBr),e(un,PEe),e(PEe,IBr),e(un,NBr),e(jr,qBr),e(jr,BEe),e(BEe,gC),e(gC,IEe),e(IEe,jBr),e(gC,DBr),e(gC,kZ),e(kZ,GBr),e(gC,OBr),e(jr,VBr),M(hC,jr,null),b(f,DWe,u),b(f,qc,u),e(qc,pC),e(pC,NEe),M(n$,NEe,null),e(qc,XBr),e(qc,qEe),e(qEe,zBr),b(f,GWe,u),b(f,mr,u),M(s$,mr,null),e(mr,WBr),e(mr,jc),e(jc,QBr),e(jc,SZ),e(SZ,HBr),e(jc,UBr),e(jc,RZ),e(RZ,JBr),e(jc,YBr),e(mr,KBr),e(mr,l$),e(l$,ZBr),e(l$,jEe),e(jEe,eIr),e(l$,oIr),e(mr,rIr),e(mr,Vt),M(i$,Vt,null),e(Vt,tIr),e(Vt,DEe),e(DEe,aIr),e(Vt,nIr),e(Vt,Dc),e(Dc,sIr),e(Dc,GEe),e(GEe,lIr),e(Dc,iIr),e(Dc,PZ),e(PZ,dIr),e(Dc,cIr),e(Vt,fIr),M(_C,Vt,null),e(mr,mIr),e(mr,Dr),M(d$,Dr,null),e(Dr,gIr),e(Dr,OEe),e(OEe,hIr),e(Dr,pIr),e(Dr,bn),e(bn,_Ir),e(bn,VEe),e(VEe,uIr),e(bn,bIr),e(bn,XEe),e(XEe,vIr),e(bn,FIr),e(bn,zEe),e(zEe,TIr),e(bn,MIr),e(Dr,EIr),e(Dr,de),e(de,uC),e(uC,WEe),e(WEe,CIr),e(uC,wIr),e(uC,BZ),e(BZ,AIr),e(uC,LIr),e(de,yIr),e(de,bC),e(bC,QEe),e(QEe,xIr),e(bC,$Ir),e(bC,IZ),e(IZ,kIr),e(bC,SIr),e(de,RIr),e(de,vC),e(vC,HEe),e(HEe,PIr),e(vC,BIr),e(vC,NZ),e(NZ,IIr),e(vC,NIr),e(de,qIr),e(de,FC),e(FC,UEe),e(UEe,jIr),e(FC,DIr),e(FC,qZ),e(qZ,GIr),e(FC,OIr),e(de,VIr),e(de,TC),e(TC,JEe),e(JEe,XIr),e(TC,zIr),e(TC,jZ),e(jZ,WIr),e(TC,QIr),e(de,HIr),e(de,MC),e(MC,YEe),e(YEe,UIr),e(MC,JIr),e(MC,DZ),e(DZ,YIr),e(MC,KIr),e(de,ZIr),e(de,EC),e(EC,KEe),e(KEe,eNr),e(EC,oNr),e(EC,GZ),e(GZ,rNr),e(EC,tNr),e(de,aNr),e(de,CC),e(CC,ZEe),e(ZEe,nNr),e(CC,sNr),e(CC,OZ),e(OZ,lNr),e(CC,iNr),e(de,dNr),e(de,wC),e(wC,eCe),e(eCe,cNr),e(wC,fNr),e(wC,VZ),e(VZ,mNr),e(wC,gNr),e(de,hNr),e(de,AC),e(AC,oCe),e(oCe,pNr),e(AC,_Nr),e(AC,XZ),e(XZ,uNr),e(AC,bNr),e(de,vNr),e(de,LC),e(LC,rCe),e(rCe,FNr),e(LC,TNr),e(LC,zZ),e(zZ,MNr),e(LC,ENr),e(de,CNr),e(de,yC),e(yC,tCe),e(tCe,wNr),e(yC,ANr),e(yC,WZ),e(WZ,LNr),e(yC,yNr),e(de,xNr),e(de,xC),e(xC,aCe),e(aCe,$Nr),e(xC,kNr),e(xC,QZ),e(QZ,SNr),e(xC,RNr),e(de,PNr),e(de,$C),e($C,nCe),e(nCe,BNr),e($C,INr),e($C,HZ),e(HZ,NNr),e($C,qNr),e(de,jNr),e(de,kC),e(kC,sCe),e(sCe,DNr),e(kC,GNr),e(kC,UZ),e(UZ,ONr),e(kC,VNr),e(de,XNr),e(de,SC),e(SC,lCe),e(lCe,zNr),e(SC,WNr),e(SC,JZ),e(JZ,QNr),e(SC,HNr),e(de,UNr),e(de,RC),e(RC,iCe),e(iCe,JNr),e(RC,YNr),e(RC,YZ),e(YZ,KNr),e(RC,ZNr),e(de,eqr),e(de,PC),e(PC,dCe),e(dCe,oqr),e(PC,rqr),e(PC,KZ),e(KZ,tqr),e(PC,aqr),e(de,nqr),e(de,BC),e(BC,cCe),e(cCe,sqr),e(BC,lqr),e(BC,ZZ),e(ZZ,iqr),e(BC,dqr),e(de,cqr),e(de,IC),e(IC,fCe),e(fCe,fqr),e(IC,mqr),e(IC,eee),e(eee,gqr),e(IC,hqr),e(Dr,pqr),M(NC,Dr,null),b(f,OWe,u),b(f,Gc,u),e(Gc,qC),e(qC,mCe),M(c$,mCe,null),e(Gc,_qr),e(Gc,gCe),e(gCe,uqr),b(f,VWe,u),b(f,gr,u),M(f$,gr,null),e(gr,bqr),e(gr,Oc),e(Oc,vqr),e(Oc,oee),e(oee,Fqr),e(Oc,Tqr),e(Oc,ree),e(ree,Mqr),e(Oc,Eqr),e(gr,Cqr),e(gr,m$),e(m$,wqr),e(m$,hCe),e(hCe,Aqr),e(m$,Lqr),e(gr,yqr),e(gr,Xt),M(g$,Xt,null),e(Xt,xqr),e(Xt,pCe),e(pCe,$qr),e(Xt,kqr),e(Xt,Vc),e(Vc,Sqr),e(Vc,_Ce),e(_Ce,Rqr),e(Vc,Pqr),e(Vc,tee),e(tee,Bqr),e(Vc,Iqr),e(Xt,Nqr),M(jC,Xt,null),e(gr,qqr),e(gr,Gr),M(h$,Gr,null),e(Gr,jqr),e(Gr,uCe),e(uCe,Dqr),e(Gr,Gqr),e(Gr,vn),e(vn,Oqr),e(vn,bCe),e(bCe,Vqr),e(vn,Xqr),e(vn,vCe),e(vCe,zqr),e(vn,Wqr),e(vn,FCe),e(FCe,Qqr),e(vn,Hqr),e(Gr,Uqr),e(Gr,ce),e(ce,DC),e(DC,TCe),e(TCe,Jqr),e(DC,Yqr),e(DC,aee),e(aee,Kqr),e(DC,Zqr),e(ce,ejr),e(ce,GC),e(GC,MCe),e(MCe,ojr),e(GC,rjr),e(GC,nee),e(nee,tjr),e(GC,ajr),e(ce,njr),e(ce,OC),e(OC,ECe),e(ECe,sjr),e(OC,ljr),e(OC,see),e(see,ijr),e(OC,djr),e(ce,cjr),e(ce,VC),e(VC,CCe),e(CCe,fjr),e(VC,mjr),e(VC,lee),e(lee,gjr),e(VC,hjr),e(ce,pjr),e(ce,XC),e(XC,wCe),e(wCe,_jr),e(XC,ujr),e(XC,iee),e(iee,bjr),e(XC,vjr),e(ce,Fjr),e(ce,zC),e(zC,ACe),e(ACe,Tjr),e(zC,Mjr),e(zC,dee),e(dee,Ejr),e(zC,Cjr),e(ce,wjr),e(ce,WC),e(WC,LCe),e(LCe,Ajr),e(WC,Ljr),e(WC,cee),e(cee,yjr),e(WC,xjr),e(ce,$jr),e(ce,QC),e(QC,yCe),e(yCe,kjr),e(QC,Sjr),e(QC,fee),e(fee,Rjr),e(QC,Pjr),e(ce,Bjr),e(ce,HC),e(HC,xCe),e(xCe,Ijr),e(HC,Njr),e(HC,mee),e(mee,qjr),e(HC,jjr),e(ce,Djr),e(ce,UC),e(UC,$Ce),e($Ce,Gjr),e(UC,Ojr),e(UC,gee),e(gee,Vjr),e(UC,Xjr),e(ce,zjr),e(ce,JC),e(JC,kCe),e(kCe,Wjr),e(JC,Qjr),e(JC,hee),e(hee,Hjr),e(JC,Ujr),e(ce,Jjr),e(ce,YC),e(YC,SCe),e(SCe,Yjr),e(YC,Kjr),e(YC,pee),e(pee,Zjr),e(YC,eDr),e(ce,oDr),e(ce,KC),e(KC,RCe),e(RCe,rDr),e(KC,tDr),e(KC,_ee),e(_ee,aDr),e(KC,nDr),e(ce,sDr),e(ce,ZC),e(ZC,PCe),e(PCe,lDr),e(ZC,iDr),e(ZC,uee),e(uee,dDr),e(ZC,cDr),e(ce,fDr),e(ce,e5),e(e5,BCe),e(BCe,mDr),e(e5,gDr),e(e5,bee),e(bee,hDr),e(e5,pDr),e(ce,_Dr),e(ce,o5),e(o5,ICe),e(ICe,uDr),e(o5,bDr),e(o5,vee),e(vee,vDr),e(o5,FDr),e(ce,TDr),e(ce,r5),e(r5,NCe),e(NCe,MDr),e(r5,EDr),e(r5,Fee),e(Fee,CDr),e(r5,wDr),e(ce,ADr),e(ce,t5),e(t5,qCe),e(qCe,LDr),e(t5,yDr),e(t5,Tee),e(Tee,xDr),e(t5,$Dr),e(ce,kDr),e(ce,a5),e(a5,jCe),e(jCe,SDr),e(a5,RDr),e(a5,Mee),e(Mee,PDr),e(a5,BDr),e(ce,IDr),e(ce,n5),e(n5,DCe),e(DCe,NDr),e(n5,qDr),e(n5,Eee),e(Eee,jDr),e(n5,DDr),e(Gr,GDr),M(s5,Gr,null),b(f,XWe,u),b(f,Xc,u),e(Xc,l5),e(l5,GCe),M(p$,GCe,null),e(Xc,ODr),e(Xc,OCe),e(OCe,VDr),b(f,zWe,u),b(f,hr,u),M(_$,hr,null),e(hr,XDr),e(hr,zc),e(zc,zDr),e(zc,Cee),e(Cee,WDr),e(zc,QDr),e(zc,wee),e(wee,HDr),e(zc,UDr),e(hr,JDr),e(hr,u$),e(u$,YDr),e(u$,VCe),e(VCe,KDr),e(u$,ZDr),e(hr,eGr),e(hr,zt),M(b$,zt,null),e(zt,oGr),e(zt,XCe),e(XCe,rGr),e(zt,tGr),e(zt,Wc),e(Wc,aGr),e(Wc,zCe),e(zCe,nGr),e(Wc,sGr),e(Wc,Aee),e(Aee,lGr),e(Wc,iGr),e(zt,dGr),M(i5,zt,null),e(hr,cGr),e(hr,Or),M(v$,Or,null),e(Or,fGr),e(Or,WCe),e(WCe,mGr),e(Or,gGr),e(Or,Fn),e(Fn,hGr),e(Fn,QCe),e(QCe,pGr),e(Fn,_Gr),e(Fn,HCe),e(HCe,uGr),e(Fn,bGr),e(Fn,UCe),e(UCe,vGr),e(Fn,FGr),e(Or,TGr),e(Or,JCe),e(JCe,d5),e(d5,YCe),e(YCe,MGr),e(d5,EGr),e(d5,Lee),e(Lee,CGr),e(d5,wGr),e(Or,AGr),M(c5,Or,null),b(f,WWe,u),b(f,Qc,u),e(Qc,f5),e(f5,KCe),M(F$,KCe,null),e(Qc,LGr),e(Qc,ZCe),e(ZCe,yGr),b(f,QWe,u),b(f,pr,u),M(T$,pr,null),e(pr,xGr),e(pr,Hc),e(Hc,$Gr),e(Hc,yee),e(yee,kGr),e(Hc,SGr),e(Hc,xee),e(xee,RGr),e(Hc,PGr),e(pr,BGr),e(pr,M$),e(M$,IGr),e(M$,e5e),e(e5e,NGr),e(M$,qGr),e(pr,jGr),e(pr,Wt),M(E$,Wt,null),e(Wt,DGr),e(Wt,o5e),e(o5e,GGr),e(Wt,OGr),e(Wt,Uc),e(Uc,VGr),e(Uc,r5e),e(r5e,XGr),e(Uc,zGr),e(Uc,$ee),e($ee,WGr),e(Uc,QGr),e(Wt,HGr),M(m5,Wt,null),e(pr,UGr),e(pr,Vr),M(C$,Vr,null),e(Vr,JGr),e(Vr,t5e),e(t5e,YGr),e(Vr,KGr),e(Vr,Tn),e(Tn,ZGr),e(Tn,a5e),e(a5e,eOr),e(Tn,oOr),e(Tn,n5e),e(n5e,rOr),e(Tn,tOr),e(Tn,s5e),e(s5e,aOr),e(Tn,nOr),e(Vr,sOr),e(Vr,l5e),e(l5e,g5),e(g5,i5e),e(i5e,lOr),e(g5,iOr),e(g5,kee),e(kee,dOr),e(g5,cOr),e(Vr,fOr),M(h5,Vr,null),b(f,HWe,u),b(f,Jc,u),e(Jc,p5),e(p5,d5e),M(w$,d5e,null),e(Jc,mOr),e(Jc,c5e),e(c5e,gOr),b(f,UWe,u),b(f,_r,u),M(A$,_r,null),e(_r,hOr),e(_r,Yc),e(Yc,pOr),e(Yc,See),e(See,_Or),e(Yc,uOr),e(Yc,Ree),e(Ree,bOr),e(Yc,vOr),e(_r,FOr),e(_r,L$),e(L$,TOr),e(L$,f5e),e(f5e,MOr),e(L$,EOr),e(_r,COr),e(_r,Qt),M(y$,Qt,null),e(Qt,wOr),e(Qt,m5e),e(m5e,AOr),e(Qt,LOr),e(Qt,Kc),e(Kc,yOr),e(Kc,g5e),e(g5e,xOr),e(Kc,$Or),e(Kc,Pee),e(Pee,kOr),e(Kc,SOr),e(Qt,ROr),M(_5,Qt,null),e(_r,POr),e(_r,Xr),M(x$,Xr,null),e(Xr,BOr),e(Xr,h5e),e(h5e,IOr),e(Xr,NOr),e(Xr,Mn),e(Mn,qOr),e(Mn,p5e),e(p5e,jOr),e(Mn,DOr),e(Mn,_5e),e(_5e,GOr),e(Mn,OOr),e(Mn,u5e),e(u5e,VOr),e(Mn,XOr),e(Xr,zOr),e(Xr,oe),e(oe,u5),e(u5,b5e),e(b5e,WOr),e(u5,QOr),e(u5,Bee),e(Bee,HOr),e(u5,UOr),e(oe,JOr),e(oe,b5),e(b5,v5e),e(v5e,YOr),e(b5,KOr),e(b5,Iee),e(Iee,ZOr),e(b5,eVr),e(oe,oVr),e(oe,v5),e(v5,F5e),e(F5e,rVr),e(v5,tVr),e(v5,Nee),e(Nee,aVr),e(v5,nVr),e(oe,sVr),e(oe,F5),e(F5,T5e),e(T5e,lVr),e(F5,iVr),e(F5,qee),e(qee,dVr),e(F5,cVr),e(oe,fVr),e(oe,T5),e(T5,M5e),e(M5e,mVr),e(T5,gVr),e(T5,jee),e(jee,hVr),e(T5,pVr),e(oe,_Vr),e(oe,M5),e(M5,E5e),e(E5e,uVr),e(M5,bVr),e(M5,Dee),e(Dee,vVr),e(M5,FVr),e(oe,TVr),e(oe,E5),e(E5,C5e),e(C5e,MVr),e(E5,EVr),e(E5,Gee),e(Gee,CVr),e(E5,wVr),e(oe,AVr),e(oe,C5),e(C5,w5e),e(w5e,LVr),e(C5,yVr),e(C5,Oee),e(Oee,xVr),e(C5,$Vr),e(oe,kVr),e(oe,w5),e(w5,A5e),e(A5e,SVr),e(w5,RVr),e(w5,Vee),e(Vee,PVr),e(w5,BVr),e(oe,IVr),e(oe,A5),e(A5,L5e),e(L5e,NVr),e(A5,qVr),e(A5,Xee),e(Xee,jVr),e(A5,DVr),e(oe,GVr),e(oe,L5),e(L5,y5e),e(y5e,OVr),e(L5,VVr),e(L5,zee),e(zee,XVr),e(L5,zVr),e(oe,WVr),e(oe,y5),e(y5,x5e),e(x5e,QVr),e(y5,HVr),e(y5,Wee),e(Wee,UVr),e(y5,JVr),e(oe,YVr),e(oe,x5),e(x5,$5e),e($5e,KVr),e(x5,ZVr),e(x5,Qee),e(Qee,eXr),e(x5,oXr),e(oe,rXr),e(oe,$5),e($5,k5e),e(k5e,tXr),e($5,aXr),e($5,Hee),e(Hee,nXr),e($5,sXr),e(oe,lXr),e(oe,k5),e(k5,S5e),e(S5e,iXr),e(k5,dXr),e(k5,Uee),e(Uee,cXr),e(k5,fXr),e(oe,mXr),e(oe,S5),e(S5,R5e),e(R5e,gXr),e(S5,hXr),e(S5,Jee),e(Jee,pXr),e(S5,_Xr),e(oe,uXr),e(oe,R5),e(R5,P5e),e(P5e,bXr),e(R5,vXr),e(R5,Yee),e(Yee,FXr),e(R5,TXr),e(oe,MXr),e(oe,P5),e(P5,B5e),e(B5e,EXr),e(P5,CXr),e(P5,Kee),e(Kee,wXr),e(P5,AXr),e(oe,LXr),e(oe,B5),e(B5,I5e),e(I5e,yXr),e(B5,xXr),e(B5,Zee),e(Zee,$Xr),e(B5,kXr),e(oe,SXr),e(oe,I5),e(I5,N5e),e(N5e,RXr),e(I5,PXr),e(I5,eoe),e(eoe,BXr),e(I5,IXr),e(oe,NXr),e(oe,N5),e(N5,q5e),e(q5e,qXr),e(N5,jXr),e(N5,ooe),e(ooe,DXr),e(N5,GXr),e(oe,OXr),e(oe,q5),e(q5,j5e),e(j5e,VXr),e(q5,XXr),e(q5,roe),e(roe,zXr),e(q5,WXr),e(oe,QXr),e(oe,j5),e(j5,D5e),e(D5e,HXr),e(j5,UXr),e(j5,toe),e(toe,JXr),e(j5,YXr),e(oe,KXr),e(oe,D5),e(D5,G5e),e(G5e,ZXr),e(D5,ezr),e(D5,aoe),e(aoe,ozr),e(D5,rzr),e(oe,tzr),e(oe,G5),e(G5,O5e),e(O5e,azr),e(G5,nzr),e(G5,noe),e(noe,szr),e(G5,lzr),e(oe,izr),e(oe,O5),e(O5,V5e),e(V5e,dzr),e(O5,czr),e(O5,soe),e(soe,fzr),e(O5,mzr),e(oe,gzr),e(oe,V5),e(V5,X5e),e(X5e,hzr),e(V5,pzr),e(V5,loe),e(loe,_zr),e(V5,uzr),e(Xr,bzr),M(X5,Xr,null),b(f,JWe,u),b(f,Zc,u),e(Zc,z5),e(z5,z5e),M($$,z5e,null),e(Zc,vzr),e(Zc,W5e),e(W5e,Fzr),b(f,YWe,u),b(f,ur,u),M(k$,ur,null),e(ur,Tzr),e(ur,ef),e(ef,Mzr),e(ef,ioe),e(ioe,Ezr),e(ef,Czr),e(ef,doe),e(doe,wzr),e(ef,Azr),e(ur,Lzr),e(ur,S$),e(S$,yzr),e(S$,Q5e),e(Q5e,xzr),e(S$,$zr),e(ur,kzr),e(ur,Ht),M(R$,Ht,null),e(Ht,Szr),e(Ht,H5e),e(H5e,Rzr),e(Ht,Pzr),e(Ht,of),e(of,Bzr),e(of,U5e),e(U5e,Izr),e(of,Nzr),e(of,coe),e(coe,qzr),e(of,jzr),e(Ht,Dzr),M(W5,Ht,null),e(ur,Gzr),e(ur,zr),M(P$,zr,null),e(zr,Ozr),e(zr,J5e),e(J5e,Vzr),e(zr,Xzr),e(zr,En),e(En,zzr),e(En,Y5e),e(Y5e,Wzr),e(En,Qzr),e(En,K5e),e(K5e,Hzr),e(En,Uzr),e(En,Z5e),e(Z5e,Jzr),e(En,Yzr),e(zr,Kzr),e(zr,xe),e(xe,Q5),e(Q5,e0e),e(e0e,Zzr),e(Q5,eWr),e(Q5,foe),e(foe,oWr),e(Q5,rWr),e(xe,tWr),e(xe,H5),e(H5,o0e),e(o0e,aWr),e(H5,nWr),e(H5,moe),e(moe,sWr),e(H5,lWr),e(xe,iWr),e(xe,U5),e(U5,r0e),e(r0e,dWr),e(U5,cWr),e(U5,goe),e(goe,fWr),e(U5,mWr),e(xe,gWr),e(xe,J5),e(J5,t0e),e(t0e,hWr),e(J5,pWr),e(J5,hoe),e(hoe,_Wr),e(J5,uWr),e(xe,bWr),e(xe,Y5),e(Y5,a0e),e(a0e,vWr),e(Y5,FWr),e(Y5,poe),e(poe,TWr),e(Y5,MWr),e(xe,EWr),e(xe,K5),e(K5,n0e),e(n0e,CWr),e(K5,wWr),e(K5,_oe),e(_oe,AWr),e(K5,LWr),e(xe,yWr),e(xe,Z5),e(Z5,s0e),e(s0e,xWr),e(Z5,$Wr),e(Z5,uoe),e(uoe,kWr),e(Z5,SWr),e(xe,RWr),e(xe,e0),e(e0,l0e),e(l0e,PWr),e(e0,BWr),e(e0,boe),e(boe,IWr),e(e0,NWr),e(xe,qWr),e(xe,o0),e(o0,i0e),e(i0e,jWr),e(o0,DWr),e(o0,voe),e(voe,GWr),e(o0,OWr),e(xe,VWr),e(xe,r0),e(r0,d0e),e(d0e,XWr),e(r0,zWr),e(r0,Foe),e(Foe,WWr),e(r0,QWr),e(zr,HWr),M(t0,zr,null),b(f,KWe,u),b(f,rf,u),e(rf,a0),e(a0,c0e),M(B$,c0e,null),e(rf,UWr),e(rf,f0e),e(f0e,JWr),b(f,ZWe,u),b(f,br,u),M(I$,br,null),e(br,YWr),e(br,tf),e(tf,KWr),e(tf,Toe),e(Toe,ZWr),e(tf,eQr),e(tf,Moe),e(Moe,oQr),e(tf,rQr),e(br,tQr),e(br,N$),e(N$,aQr),e(N$,m0e),e(m0e,nQr),e(N$,sQr),e(br,lQr),e(br,Ut),M(q$,Ut,null),e(Ut,iQr),e(Ut,g0e),e(g0e,dQr),e(Ut,cQr),e(Ut,af),e(af,fQr),e(af,h0e),e(h0e,mQr),e(af,gQr),e(af,Eoe),e(Eoe,hQr),e(af,pQr),e(Ut,_Qr),M(n0,Ut,null),e(br,uQr),e(br,Wr),M(j$,Wr,null),e(Wr,bQr),e(Wr,p0e),e(p0e,vQr),e(Wr,FQr),e(Wr,Cn),e(Cn,TQr),e(Cn,_0e),e(_0e,MQr),e(Cn,EQr),e(Cn,u0e),e(u0e,CQr),e(Cn,wQr),e(Cn,b0e),e(b0e,AQr),e(Cn,LQr),e(Wr,yQr),e(Wr,Ee),e(Ee,s0),e(s0,v0e),e(v0e,xQr),e(s0,$Qr),e(s0,Coe),e(Coe,kQr),e(s0,SQr),e(Ee,RQr),e(Ee,l0),e(l0,F0e),e(F0e,PQr),e(l0,BQr),e(l0,woe),e(woe,IQr),e(l0,NQr),e(Ee,qQr),e(Ee,i0),e(i0,T0e),e(T0e,jQr),e(i0,DQr),e(i0,Aoe),e(Aoe,GQr),e(i0,OQr),e(Ee,VQr),e(Ee,d0),e(d0,M0e),e(M0e,XQr),e(d0,zQr),e(d0,Loe),e(Loe,WQr),e(d0,QQr),e(Ee,HQr),e(Ee,c0),e(c0,E0e),e(E0e,UQr),e(c0,JQr),e(c0,yoe),e(yoe,YQr),e(c0,KQr),e(Ee,ZQr),e(Ee,f0),e(f0,C0e),e(C0e,eHr),e(f0,oHr),e(f0,xoe),e(xoe,rHr),e(f0,tHr),e(Ee,aHr),e(Ee,m0),e(m0,w0e),e(w0e,nHr),e(m0,sHr),e(m0,$oe),e($oe,lHr),e(m0,iHr),e(Ee,dHr),e(Ee,g0),e(g0,A0e),e(A0e,cHr),e(g0,fHr),e(g0,koe),e(koe,mHr),e(g0,gHr),e(Ee,hHr),e(Ee,h0),e(h0,L0e),e(L0e,pHr),e(h0,_Hr),e(h0,Soe),e(Soe,uHr),e(h0,bHr),e(Ee,vHr),e(Ee,p0),e(p0,y0e),e(y0e,FHr),e(p0,THr),e(p0,Roe),e(Roe,MHr),e(p0,EHr),e(Ee,CHr),e(Ee,_0),e(_0,x0e),e(x0e,wHr),e(_0,AHr),e(_0,Poe),e(Poe,LHr),e(_0,yHr),e(Ee,xHr),e(Ee,u0),e(u0,$0e),e($0e,$Hr),e(u0,kHr),e(u0,Boe),e(Boe,SHr),e(u0,RHr),e(Ee,PHr),e(Ee,b0),e(b0,k0e),e(k0e,BHr),e(b0,IHr),e(b0,Ioe),e(Ioe,NHr),e(b0,qHr),e(Wr,jHr),M(v0,Wr,null),b(f,eQe,u),b(f,nf,u),e(nf,F0),e(F0,S0e),M(D$,S0e,null),e(nf,DHr),e(nf,R0e),e(R0e,GHr),b(f,oQe,u),b(f,vr,u),M(G$,vr,null),e(vr,OHr),e(vr,sf),e(sf,VHr),e(sf,Noe),e(Noe,XHr),e(sf,zHr),e(sf,qoe),e(qoe,WHr),e(sf,QHr),e(vr,HHr),e(vr,O$),e(O$,UHr),e(O$,P0e),e(P0e,JHr),e(O$,YHr),e(vr,KHr),e(vr,Jt),M(V$,Jt,null),e(Jt,ZHr),e(Jt,B0e),e(B0e,eUr),e(Jt,oUr),e(Jt,lf),e(lf,rUr),e(lf,I0e),e(I0e,tUr),e(lf,aUr),e(lf,joe),e(joe,nUr),e(lf,sUr),e(Jt,lUr),M(T0,Jt,null),e(vr,iUr),e(vr,Qr),M(X$,Qr,null),e(Qr,dUr),e(Qr,N0e),e(N0e,cUr),e(Qr,fUr),e(Qr,wn),e(wn,mUr),e(wn,q0e),e(q0e,gUr),e(wn,hUr),e(wn,j0e),e(j0e,pUr),e(wn,_Ur),e(wn,D0e),e(D0e,uUr),e(wn,bUr),e(Qr,vUr),e(Qr,$e),e($e,M0),e(M0,G0e),e(G0e,FUr),e(M0,TUr),e(M0,Doe),e(Doe,MUr),e(M0,EUr),e($e,CUr),e($e,E0),e(E0,O0e),e(O0e,wUr),e(E0,AUr),e(E0,Goe),e(Goe,LUr),e(E0,yUr),e($e,xUr),e($e,C0),e(C0,V0e),e(V0e,$Ur),e(C0,kUr),e(C0,Ooe),e(Ooe,SUr),e(C0,RUr),e($e,PUr),e($e,w0),e(w0,X0e),e(X0e,BUr),e(w0,IUr),e(w0,Voe),e(Voe,NUr),e(w0,qUr),e($e,jUr),e($e,A0),e(A0,z0e),e(z0e,DUr),e(A0,GUr),e(A0,Xoe),e(Xoe,OUr),e(A0,VUr),e($e,XUr),e($e,L0),e(L0,W0e),e(W0e,zUr),e(L0,WUr),e(L0,zoe),e(zoe,QUr),e(L0,HUr),e($e,UUr),e($e,y0),e(y0,Q0e),e(Q0e,JUr),e(y0,YUr),e(y0,Woe),e(Woe,KUr),e(y0,ZUr),e($e,eJr),e($e,x0),e(x0,H0e),e(H0e,oJr),e(x0,rJr),e(x0,Qoe),e(Qoe,tJr),e(x0,aJr),e($e,nJr),e($e,$0),e($0,U0e),e(U0e,sJr),e($0,lJr),e($0,Hoe),e(Hoe,iJr),e($0,dJr),e($e,cJr),e($e,k0),e(k0,J0e),e(J0e,fJr),e(k0,mJr),e(k0,Uoe),e(Uoe,gJr),e(k0,hJr),e(Qr,pJr),M(S0,Qr,null),b(f,rQe,u),b(f,df,u),e(df,R0),e(R0,Y0e),M(z$,Y0e,null),e(df,_Jr),e(df,K0e),e(K0e,uJr),b(f,tQe,u),b(f,Fr,u),M(W$,Fr,null),e(Fr,bJr),e(Fr,cf),e(cf,vJr),e(cf,Joe),e(Joe,FJr),e(cf,TJr),e(cf,Yoe),e(Yoe,MJr),e(cf,EJr),e(Fr,CJr),e(Fr,Q$),e(Q$,wJr),e(Q$,Z0e),e(Z0e,AJr),e(Q$,LJr),e(Fr,yJr),e(Fr,Yt),M(H$,Yt,null),e(Yt,xJr),e(Yt,ewe),e(ewe,$Jr),e(Yt,kJr),e(Yt,ff),e(ff,SJr),e(ff,owe),e(owe,RJr),e(ff,PJr),e(ff,Koe),e(Koe,BJr),e(ff,IJr),e(Yt,NJr),M(P0,Yt,null),e(Fr,qJr),e(Fr,Hr),M(U$,Hr,null),e(Hr,jJr),e(Hr,rwe),e(rwe,DJr),e(Hr,GJr),e(Hr,An),e(An,OJr),e(An,twe),e(twe,VJr),e(An,XJr),e(An,awe),e(awe,zJr),e(An,WJr),e(An,nwe),e(nwe,QJr),e(An,HJr),e(Hr,UJr),e(Hr,ke),e(ke,B0),e(B0,swe),e(swe,JJr),e(B0,YJr),e(B0,Zoe),e(Zoe,KJr),e(B0,ZJr),e(ke,eYr),e(ke,I0),e(I0,lwe),e(lwe,oYr),e(I0,rYr),e(I0,ere),e(ere,tYr),e(I0,aYr),e(ke,nYr),e(ke,N0),e(N0,iwe),e(iwe,sYr),e(N0,lYr),e(N0,ore),e(ore,iYr),e(N0,dYr),e(ke,cYr),e(ke,q0),e(q0,dwe),e(dwe,fYr),e(q0,mYr),e(q0,rre),e(rre,gYr),e(q0,hYr),e(ke,pYr),e(ke,j0),e(j0,cwe),e(cwe,_Yr),e(j0,uYr),e(j0,tre),e(tre,bYr),e(j0,vYr),e(ke,FYr),e(ke,D0),e(D0,fwe),e(fwe,TYr),e(D0,MYr),e(D0,are),e(are,EYr),e(D0,CYr),e(ke,wYr),e(ke,G0),e(G0,mwe),e(mwe,AYr),e(G0,LYr),e(G0,nre),e(nre,yYr),e(G0,xYr),e(ke,$Yr),e(ke,O0),e(O0,gwe),e(gwe,kYr),e(O0,SYr),e(O0,sre),e(sre,RYr),e(O0,PYr),e(ke,BYr),e(ke,V0),e(V0,hwe),e(hwe,IYr),e(V0,NYr),e(V0,lre),e(lre,qYr),e(V0,jYr),e(ke,DYr),e(ke,X0),e(X0,pwe),e(pwe,GYr),e(X0,OYr),e(X0,ire),e(ire,VYr),e(X0,XYr),e(Hr,zYr),M(z0,Hr,null),b(f,aQe,u),b(f,mf,u),e(mf,W0),e(W0,_we),M(J$,_we,null),e(mf,WYr),e(mf,uwe),e(uwe,QYr),b(f,nQe,u),b(f,Tr,u),M(Y$,Tr,null),e(Tr,HYr),e(Tr,gf),e(gf,UYr),e(gf,dre),e(dre,JYr),e(gf,YYr),e(gf,cre),e(cre,KYr),e(gf,ZYr),e(Tr,eKr),e(Tr,K$),e(K$,oKr),e(K$,bwe),e(bwe,rKr),e(K$,tKr),e(Tr,aKr),e(Tr,Kt),M(Z$,Kt,null),e(Kt,nKr),e(Kt,vwe),e(vwe,sKr),e(Kt,lKr),e(Kt,hf),e(hf,iKr),e(hf,Fwe),e(Fwe,dKr),e(hf,cKr),e(hf,fre),e(fre,fKr),e(hf,mKr),e(Kt,gKr),M(Q0,Kt,null),e(Tr,hKr),e(Tr,Ur),M(ek,Ur,null),e(Ur,pKr),e(Ur,Twe),e(Twe,_Kr),e(Ur,uKr),e(Ur,Ln),e(Ln,bKr),e(Ln,Mwe),e(Mwe,vKr),e(Ln,FKr),e(Ln,Ewe),e(Ewe,TKr),e(Ln,MKr),e(Ln,Cwe),e(Cwe,EKr),e(Ln,CKr),e(Ur,wKr),e(Ur,Se),e(Se,H0),e(H0,wwe),e(wwe,AKr),e(H0,LKr),e(H0,mre),e(mre,yKr),e(H0,xKr),e(Se,$Kr),e(Se,U0),e(U0,Awe),e(Awe,kKr),e(U0,SKr),e(U0,gre),e(gre,RKr),e(U0,PKr),e(Se,BKr),e(Se,J0),e(J0,Lwe),e(Lwe,IKr),e(J0,NKr),e(J0,hre),e(hre,qKr),e(J0,jKr),e(Se,DKr),e(Se,Y0),e(Y0,ywe),e(ywe,GKr),e(Y0,OKr),e(Y0,pre),e(pre,VKr),e(Y0,XKr),e(Se,zKr),e(Se,K0),e(K0,xwe),e(xwe,WKr),e(K0,QKr),e(K0,_re),e(_re,HKr),e(K0,UKr),e(Se,JKr),e(Se,Z0),e(Z0,$we),e($we,YKr),e(Z0,KKr),e(Z0,ure),e(ure,ZKr),e(Z0,eZr),e(Se,oZr),e(Se,ew),e(ew,kwe),e(kwe,rZr),e(ew,tZr),e(ew,bre),e(bre,aZr),e(ew,nZr),e(Se,sZr),e(Se,ow),e(ow,Swe),e(Swe,lZr),e(ow,iZr),e(ow,vre),e(vre,dZr),e(ow,cZr),e(Se,fZr),e(Se,rw),e(rw,Rwe),e(Rwe,mZr),e(rw,gZr),e(rw,Fre),e(Fre,hZr),e(rw,pZr),e(Se,_Zr),e(Se,tw),e(tw,Pwe),e(Pwe,uZr),e(tw,bZr),e(tw,Tre),e(Tre,vZr),e(tw,FZr),e(Ur,TZr),M(aw,Ur,null),b(f,sQe,u),b(f,pf,u),e(pf,nw),e(nw,Bwe),M(ok,Bwe,null),e(pf,MZr),e(pf,Iwe),e(Iwe,EZr),b(f,lQe,u),b(f,Mr,u),M(rk,Mr,null),e(Mr,CZr),e(Mr,_f),e(_f,wZr),e(_f,Mre),e(Mre,AZr),e(_f,LZr),e(_f,Ere),e(Ere,yZr),e(_f,xZr),e(Mr,$Zr),e(Mr,tk),e(tk,kZr),e(tk,Nwe),e(Nwe,SZr),e(tk,RZr),e(Mr,PZr),e(Mr,Zt),M(ak,Zt,null),e(Zt,BZr),e(Zt,qwe),e(qwe,IZr),e(Zt,NZr),e(Zt,uf),e(uf,qZr),e(uf,jwe),e(jwe,jZr),e(uf,DZr),e(uf,Cre),e(Cre,GZr),e(uf,OZr),e(Zt,VZr),M(sw,Zt,null),e(Mr,XZr),e(Mr,Jr),M(nk,Jr,null),e(Jr,zZr),e(Jr,Dwe),e(Dwe,WZr),e(Jr,QZr),e(Jr,yn),e(yn,HZr),e(yn,Gwe),e(Gwe,UZr),e(yn,JZr),e(yn,Owe),e(Owe,YZr),e(yn,KZr),e(yn,Vwe),e(Vwe,ZZr),e(yn,eet),e(Jr,oet),e(Jr,Re),e(Re,lw),e(lw,Xwe),e(Xwe,ret),e(lw,tet),e(lw,wre),e(wre,aet),e(lw,net),e(Re,set),e(Re,iw),e(iw,zwe),e(zwe,iet),e(iw,det),e(iw,Are),e(Are,cet),e(iw,fet),e(Re,met),e(Re,dw),e(dw,Wwe),e(Wwe,get),e(dw,het),e(dw,Lre),e(Lre,pet),e(dw,_et),e(Re,uet),e(Re,cw),e(cw,Qwe),e(Qwe,bet),e(cw,vet),e(cw,yre),e(yre,Fet),e(cw,Tet),e(Re,Met),e(Re,fw),e(fw,Hwe),e(Hwe,Eet),e(fw,Cet),e(fw,xre),e(xre,wet),e(fw,Aet),e(Re,Let),e(Re,mw),e(mw,Uwe),e(Uwe,yet),e(mw,xet),e(mw,$re),e($re,$et),e(mw,ket),e(Re,Set),e(Re,gw),e(gw,Jwe),e(Jwe,Ret),e(gw,Pet),e(gw,kre),e(kre,Bet),e(gw,Iet),e(Re,Net),e(Re,hw),e(hw,Ywe),e(Ywe,qet),e(hw,jet),e(hw,Sre),e(Sre,Det),e(hw,Get),e(Re,Oet),e(Re,pw),e(pw,Kwe),e(Kwe,Vet),e(pw,Xet),e(pw,Rre),e(Rre,zet),e(pw,Wet),e(Re,Qet),e(Re,_w),e(_w,Zwe),e(Zwe,Het),e(_w,Uet),e(_w,Pre),e(Pre,Jet),e(_w,Yet),e(Jr,Ket),M(uw,Jr,null),b(f,iQe,u),b(f,bf,u),e(bf,bw),e(bw,eAe),M(sk,eAe,null),e(bf,Zet),e(bf,oAe),e(oAe,eot),b(f,dQe,u),b(f,Er,u),M(lk,Er,null),e(Er,oot),e(Er,vf),e(vf,rot),e(vf,Bre),e(Bre,tot),e(vf,aot),e(vf,Ire),e(Ire,not),e(vf,sot),e(Er,lot),e(Er,ik),e(ik,iot),e(ik,rAe),e(rAe,dot),e(ik,cot),e(Er,fot),e(Er,ea),M(dk,ea,null),e(ea,mot),e(ea,tAe),e(tAe,got),e(ea,hot),e(ea,Ff),e(Ff,pot),e(Ff,aAe),e(aAe,_ot),e(Ff,uot),e(Ff,Nre),e(Nre,bot),e(Ff,vot),e(ea,Fot),M(vw,ea,null),e(Er,Tot),e(Er,Yr),M(ck,Yr,null),e(Yr,Mot),e(Yr,nAe),e(nAe,Eot),e(Yr,Cot),e(Yr,xn),e(xn,wot),e(xn,sAe),e(sAe,Aot),e(xn,Lot),e(xn,lAe),e(lAe,yot),e(xn,xot),e(xn,iAe),e(iAe,$ot),e(xn,kot),e(Yr,Sot),e(Yr,Xe),e(Xe,Fw),e(Fw,dAe),e(dAe,Rot),e(Fw,Pot),e(Fw,qre),e(qre,Bot),e(Fw,Iot),e(Xe,Not),e(Xe,Tw),e(Tw,cAe),e(cAe,qot),e(Tw,jot),e(Tw,jre),e(jre,Dot),e(Tw,Got),e(Xe,Oot),e(Xe,Mw),e(Mw,fAe),e(fAe,Vot),e(Mw,Xot),e(Mw,Dre),e(Dre,zot),e(Mw,Wot),e(Xe,Qot),e(Xe,Ew),e(Ew,mAe),e(mAe,Hot),e(Ew,Uot),e(Ew,Gre),e(Gre,Jot),e(Ew,Yot),e(Xe,Kot),e(Xe,Cw),e(Cw,gAe),e(gAe,Zot),e(Cw,ert),e(Cw,Ore),e(Ore,ort),e(Cw,rrt),e(Xe,trt),e(Xe,ww),e(ww,hAe),e(hAe,art),e(ww,nrt),e(ww,Vre),e(Vre,srt),e(ww,lrt),e(Xe,irt),e(Xe,Aw),e(Aw,pAe),e(pAe,drt),e(Aw,crt),e(Aw,Xre),e(Xre,frt),e(Aw,mrt),e(Xe,grt),e(Xe,Lw),e(Lw,_Ae),e(_Ae,hrt),e(Lw,prt),e(Lw,zre),e(zre,_rt),e(Lw,urt),e(Yr,brt),M(yw,Yr,null),b(f,cQe,u),b(f,Tf,u),e(Tf,xw),e(xw,uAe),M(fk,uAe,null),e(Tf,vrt),e(Tf,bAe),e(bAe,Frt),b(f,fQe,u),b(f,Cr,u),M(mk,Cr,null),e(Cr,Trt),e(Cr,Mf),e(Mf,Mrt),e(Mf,Wre),e(Wre,Ert),e(Mf,Crt),e(Mf,Qre),e(Qre,wrt),e(Mf,Art),e(Cr,Lrt),e(Cr,gk),e(gk,yrt),e(gk,vAe),e(vAe,xrt),e(gk,$rt),e(Cr,krt),e(Cr,oa),M(hk,oa,null),e(oa,Srt),e(oa,FAe),e(FAe,Rrt),e(oa,Prt),e(oa,Ef),e(Ef,Brt),e(Ef,TAe),e(TAe,Irt),e(Ef,Nrt),e(Ef,Hre),e(Hre,qrt),e(Ef,jrt),e(oa,Drt),M($w,oa,null),e(Cr,Grt),e(Cr,Kr),M(pk,Kr,null),e(Kr,Ort),e(Kr,MAe),e(MAe,Vrt),e(Kr,Xrt),e(Kr,$n),e($n,zrt),e($n,EAe),e(EAe,Wrt),e($n,Qrt),e($n,CAe),e(CAe,Hrt),e($n,Urt),e($n,wAe),e(wAe,Jrt),e($n,Yrt),e(Kr,Krt),e(Kr,ze),e(ze,kw),e(kw,AAe),e(AAe,Zrt),e(kw,ett),e(kw,Ure),e(Ure,ott),e(kw,rtt),e(ze,ttt),e(ze,Sw),e(Sw,LAe),e(LAe,att),e(Sw,ntt),e(Sw,Jre),e(Jre,stt),e(Sw,ltt),e(ze,itt),e(ze,Rw),e(Rw,yAe),e(yAe,dtt),e(Rw,ctt),e(Rw,Yre),e(Yre,ftt),e(Rw,mtt),e(ze,gtt),e(ze,Pw),e(Pw,xAe),e(xAe,htt),e(Pw,ptt),e(Pw,Kre),e(Kre,_tt),e(Pw,utt),e(ze,btt),e(ze,Bw),e(Bw,$Ae),e($Ae,vtt),e(Bw,Ftt),e(Bw,Zre),e(Zre,Ttt),e(Bw,Mtt),e(ze,Ett),e(ze,Iw),e(Iw,kAe),e(kAe,Ctt),e(Iw,wtt),e(Iw,ete),e(ete,Att),e(Iw,Ltt),e(ze,ytt),e(ze,Nw),e(Nw,SAe),e(SAe,xtt),e(Nw,$tt),e(Nw,ote),e(ote,ktt),e(Nw,Stt),e(ze,Rtt),e(ze,qw),e(qw,RAe),e(RAe,Ptt),e(qw,Btt),e(qw,rte),e(rte,Itt),e(qw,Ntt),e(Kr,qtt),M(jw,Kr,null),b(f,mQe,u),b(f,Cf,u),e(Cf,Dw),e(Dw,PAe),M(_k,PAe,null),e(Cf,jtt),e(Cf,BAe),e(BAe,Dtt),b(f,gQe,u),b(f,wr,u),M(uk,wr,null),e(wr,Gtt),e(wr,wf),e(wf,Ott),e(wf,tte),e(tte,Vtt),e(wf,Xtt),e(wf,ate),e(ate,ztt),e(wf,Wtt),e(wr,Qtt),e(wr,bk),e(bk,Htt),e(bk,IAe),e(IAe,Utt),e(bk,Jtt),e(wr,Ytt),e(wr,ra),M(vk,ra,null),e(ra,Ktt),e(ra,NAe),e(NAe,Ztt),e(ra,eat),e(ra,Af),e(Af,oat),e(Af,qAe),e(qAe,rat),e(Af,tat),e(Af,nte),e(nte,aat),e(Af,nat),e(ra,sat),M(Gw,ra,null),e(wr,lat),e(wr,Zr),M(Fk,Zr,null),e(Zr,iat),e(Zr,jAe),e(jAe,dat),e(Zr,cat),e(Zr,kn),e(kn,fat),e(kn,DAe),e(DAe,mat),e(kn,gat),e(kn,GAe),e(GAe,hat),e(kn,pat),e(kn,OAe),e(OAe,_at),e(kn,uat),e(Zr,bat),e(Zr,VAe),e(VAe,Ow),e(Ow,XAe),e(XAe,vat),e(Ow,Fat),e(Ow,ste),e(ste,Tat),e(Ow,Mat),e(Zr,Eat),M(Vw,Zr,null),b(f,hQe,u),b(f,Lf,u),e(Lf,Xw),e(Xw,zAe),M(Tk,zAe,null),e(Lf,Cat),e(Lf,WAe),e(WAe,wat),b(f,pQe,u),b(f,Ar,u),M(Mk,Ar,null),e(Ar,Aat),e(Ar,yf),e(yf,Lat),e(yf,lte),e(lte,yat),e(yf,xat),e(yf,ite),e(ite,$at),e(yf,kat),e(Ar,Sat),e(Ar,Ek),e(Ek,Rat),e(Ek,QAe),e(QAe,Pat),e(Ek,Bat),e(Ar,Iat),e(Ar,ta),M(Ck,ta,null),e(ta,Nat),e(ta,HAe),e(HAe,qat),e(ta,jat),e(ta,xf),e(xf,Dat),e(xf,UAe),e(UAe,Gat),e(xf,Oat),e(xf,dte),e(dte,Vat),e(xf,Xat),e(ta,zat),M(zw,ta,null),e(Ar,Wat),e(Ar,et),M(wk,et,null),e(et,Qat),e(et,JAe),e(JAe,Hat),e(et,Uat),e(et,Sn),e(Sn,Jat),e(Sn,YAe),e(YAe,Yat),e(Sn,Kat),e(Sn,KAe),e(KAe,Zat),e(Sn,ent),e(Sn,ZAe),e(ZAe,ont),e(Sn,rnt),e(et,tnt),e(et,Ak),e(Ak,Ww),e(Ww,e7e),e(e7e,ant),e(Ww,nnt),e(Ww,cte),e(cte,snt),e(Ww,lnt),e(Ak,int),e(Ak,Qw),e(Qw,o7e),e(o7e,dnt),e(Qw,cnt),e(Qw,fte),e(fte,fnt),e(Qw,mnt),e(et,gnt),M(Hw,et,null),b(f,_Qe,u),b(f,$f,u),e($f,Uw),e(Uw,r7e),M(Lk,r7e,null),e($f,hnt),e($f,t7e),e(t7e,pnt),b(f,uQe,u),b(f,Lr,u),M(yk,Lr,null),e(Lr,_nt),e(Lr,kf),e(kf,unt),e(kf,mte),e(mte,bnt),e(kf,vnt),e(kf,gte),e(gte,Fnt),e(kf,Tnt),e(Lr,Mnt),e(Lr,xk),e(xk,Ent),e(xk,a7e),e(a7e,Cnt),e(xk,wnt),e(Lr,Ant),e(Lr,aa),M($k,aa,null),e(aa,Lnt),e(aa,n7e),e(n7e,ynt),e(aa,xnt),e(aa,Sf),e(Sf,$nt),e(Sf,s7e),e(s7e,knt),e(Sf,Snt),e(Sf,hte),e(hte,Rnt),e(Sf,Pnt),e(aa,Bnt),M(Jw,aa,null),e(Lr,Int),e(Lr,ot),M(kk,ot,null),e(ot,Nnt),e(ot,l7e),e(l7e,qnt),e(ot,jnt),e(ot,Rn),e(Rn,Dnt),e(Rn,i7e),e(i7e,Gnt),e(Rn,Ont),e(Rn,d7e),e(d7e,Vnt),e(Rn,Xnt),e(Rn,c7e),e(c7e,znt),e(Rn,Wnt),e(ot,Qnt),e(ot,f7e),e(f7e,Yw),e(Yw,m7e),e(m7e,Hnt),e(Yw,Unt),e(Yw,pte),e(pte,Jnt),e(Yw,Ynt),e(ot,Knt),M(Kw,ot,null),bQe=!0},p(f,[u]){const Sk={};u&2&&(Sk.$$scope={dirty:u,ctx:f}),Gf.$set(Sk);const g7e={};u&2&&(g7e.$$scope={dirty:u,ctx:f}),oh.$set(g7e);const h7e={};u&2&&(h7e.$$scope={dirty:u,ctx:f}),Nh.$set(h7e);const p7e={};u&2&&(p7e.$$scope={dirty:u,ctx:f}),Mp.$set(p7e);const Rk={};u&2&&(Rk.$$scope={dirty:u,ctx:f}),Ep.$set(Rk);const _7e={};u&2&&(_7e.$$scope={dirty:u,ctx:f}),zp.$set(_7e);const Pn={};u&2&&(Pn.$$scope={dirty:u,ctx:f}),Wp.$set(Pn);const u7e={};u&2&&(u7e.$$scope={dirty:u,ctx:f}),Up.$set(u7e);const b7e={};u&2&&(b7e.$$scope={dirty:u,ctx:f}),r2.$set(b7e);const v7e={};u&2&&(v7e.$$scope={dirty:u,ctx:f}),a2.$set(v7e);const Pk={};u&2&&(Pk.$$scope={dirty:u,ctx:f}),Y2.$set(Pk);const F7e={};u&2&&(F7e.$$scope={dirty:u,ctx:f}),Z2.$set(F7e);const Bk={};u&2&&(Bk.$$scope={dirty:u,ctx:f}),O1.$set(Bk);const T7e={};u&2&&(T7e.$$scope={dirty:u,ctx:f}),X1.$set(T7e);const Ik={};u&2&&(Ik.$$scope={dirty:u,ctx:f}),$b.$set(Ik);const M7e={};u&2&&(M7e.$$scope={dirty:u,ctx:f}),Sb.$set(M7e);const E7e={};u&2&&(E7e.$$scope={dirty:u,ctx:f}),Zb.$set(E7e);const C7e={};u&2&&(C7e.$$scope={dirty:u,ctx:f}),ov.$set(C7e);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),e3.$set(Rf);const w7e={};u&2&&(w7e.$$scope={dirty:u,ctx:f}),r3.$set(w7e);const A7e={};u&2&&(A7e.$$scope={dirty:u,ctx:f}),P3.$set(A7e);const L7e={};u&2&&(L7e.$$scope={dirty:u,ctx:f}),I3.$set(L7e);const Nk={};u&2&&(Nk.$$scope={dirty:u,ctx:f}),X3.$set(Nk);const y7e={};u&2&&(y7e.$$scope={dirty:u,ctx:f}),W3.$set(y7e);const x7e={};u&2&&(x7e.$$scope={dirty:u,ctx:f}),$F.$set(x7e);const $7e={};u&2&&($7e.$$scope={dirty:u,ctx:f}),SF.$set($7e);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),M6.$set(nt);const qk={};u&2&&(qk.$$scope={dirty:u,ctx:f}),C6.$set(qk);const k7e={};u&2&&(k7e.$$scope={dirty:u,ctx:f}),L6.$set(k7e);const jk={};u&2&&(jk.$$scope={dirty:u,ctx:f}),x6.$set(jk);const S7e={};u&2&&(S7e.$$scope={dirty:u,ctx:f}),z6.$set(S7e);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),Q6.$set(st);const R7e={};u&2&&(R7e.$$scope={dirty:u,ctx:f}),J6.$set(R7e);const Pf={};u&2&&(Pf.$$scope={dirty:u,ctx:f}),K6.$set(Pf);const P7e={};u&2&&(P7e.$$scope={dirty:u,ctx:f}),oT.$set(P7e);const B7e={};u&2&&(B7e.$$scope={dirty:u,ctx:f}),tT.$set(B7e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),hT.$set(L);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),_T.$set(Zw);const I7e={};u&2&&(I7e.$$scope={dirty:u,ctx:f}),ET.$set(I7e);const N7e={};u&2&&(N7e.$$scope={dirty:u,ctx:f}),wT.$set(N7e);const eA={};u&2&&(eA.$$scope={dirty:u,ctx:f}),NT.$set(eA);const q7e={};u&2&&(q7e.$$scope={dirty:u,ctx:f}),jT.$set(q7e);const j7e={};u&2&&(j7e.$$scope={dirty:u,ctx:f}),VT.$set(j7e);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),zT.$set(oA);const D7e={};u&2&&(D7e.$$scope={dirty:u,ctx:f}),KT.$set(D7e);const G7e={};u&2&&(G7e.$$scope={dirty:u,ctx:f}),e8.$set(G7e);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),s8.$set(rA);const O7e={};u&2&&(O7e.$$scope={dirty:u,ctx:f}),i8.$set(O7e);const V7e={};u&2&&(V7e.$$scope={dirty:u,ctx:f}),m8.$set(V7e);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),h8.$set(tA);const X7e={};u&2&&(X7e.$$scope={dirty:u,ctx:f}),u8.$set(X7e);const z7e={};u&2&&(z7e.$$scope={dirty:u,ctx:f}),v8.$set(z7e);const aA={};u&2&&(aA.$$scope={dirty:u,ctx:f}),A8.$set(aA);const W7e={};u&2&&(W7e.$$scope={dirty:u,ctx:f}),y8.$set(W7e);const Q7e={};u&2&&(Q7e.$$scope={dirty:u,ctx:f}),k8.$set(Q7e);const nA={};u&2&&(nA.$$scope={dirty:u,ctx:f}),R8.$set(nA);const H7e={};u&2&&(H7e.$$scope={dirty:u,ctx:f}),$M.$set(H7e);const U7e={};u&2&&(U7e.$$scope={dirty:u,ctx:f}),SM.$set(U7e);const sA={};u&2&&(sA.$$scope={dirty:u,ctx:f}),r4.$set(sA);const J7e={};u&2&&(J7e.$$scope={dirty:u,ctx:f}),a4.$set(J7e);const Y7e={};u&2&&(Y7e.$$scope={dirty:u,ctx:f}),b4.$set(Y7e);const lA={};u&2&&(lA.$$scope={dirty:u,ctx:f}),F4.$set(lA);const K7e={};u&2&&(K7e.$$scope={dirty:u,ctx:f}),y4.$set(K7e);const Z7e={};u&2&&(Z7e.$$scope={dirty:u,ctx:f}),$4.$set(Z7e);const iA={};u&2&&(iA.$$scope={dirty:u,ctx:f}),Y4.$set(iA);const eLe={};u&2&&(eLe.$$scope={dirty:u,ctx:f}),Z4.$set(eLe);const oLe={};u&2&&(oLe.$$scope={dirty:u,ctx:f}),cE.$set(oLe);const dA={};u&2&&(dA.$$scope={dirty:u,ctx:f}),mE.$set(dA);const rLe={};u&2&&(rLe.$$scope={dirty:u,ctx:f}),jE.$set(rLe);const tLe={};u&2&&(tLe.$$scope={dirty:u,ctx:f}),GE.$set(tLe);const cA={};u&2&&(cA.$$scope={dirty:u,ctx:f}),nC.$set(cA);const aLe={};u&2&&(aLe.$$scope={dirty:u,ctx:f}),lC.$set(aLe);const nLe={};u&2&&(nLe.$$scope={dirty:u,ctx:f}),cC.$set(nLe);const fA={};u&2&&(fA.$$scope={dirty:u,ctx:f}),mC.$set(fA);const sLe={};u&2&&(sLe.$$scope={dirty:u,ctx:f}),hC.$set(sLe);const lLe={};u&2&&(lLe.$$scope={dirty:u,ctx:f}),_C.$set(lLe);const mA={};u&2&&(mA.$$scope={dirty:u,ctx:f}),NC.$set(mA);const iLe={};u&2&&(iLe.$$scope={dirty:u,ctx:f}),jC.$set(iLe);const dLe={};u&2&&(dLe.$$scope={dirty:u,ctx:f}),s5.$set(dLe);const gA={};u&2&&(gA.$$scope={dirty:u,ctx:f}),i5.$set(gA);const cLe={};u&2&&(cLe.$$scope={dirty:u,ctx:f}),c5.$set(cLe);const fLe={};u&2&&(fLe.$$scope={dirty:u,ctx:f}),m5.$set(fLe);const hA={};u&2&&(hA.$$scope={dirty:u,ctx:f}),h5.$set(hA);const mLe={};u&2&&(mLe.$$scope={dirty:u,ctx:f}),_5.$set(mLe);const gLe={};u&2&&(gLe.$$scope={dirty:u,ctx:f}),X5.$set(gLe);const pA={};u&2&&(pA.$$scope={dirty:u,ctx:f}),W5.$set(pA);const hLe={};u&2&&(hLe.$$scope={dirty:u,ctx:f}),t0.$set(hLe);const pLe={};u&2&&(pLe.$$scope={dirty:u,ctx:f}),n0.$set(pLe);const _A={};u&2&&(_A.$$scope={dirty:u,ctx:f}),v0.$set(_A);const _Le={};u&2&&(_Le.$$scope={dirty:u,ctx:f}),T0.$set(_Le);const uLe={};u&2&&(uLe.$$scope={dirty:u,ctx:f}),S0.$set(uLe);const uA={};u&2&&(uA.$$scope={dirty:u,ctx:f}),P0.$set(uA);const bLe={};u&2&&(bLe.$$scope={dirty:u,ctx:f}),z0.$set(bLe);const vLe={};u&2&&(vLe.$$scope={dirty:u,ctx:f}),Q0.$set(vLe);const bA={};u&2&&(bA.$$scope={dirty:u,ctx:f}),aw.$set(bA);const FLe={};u&2&&(FLe.$$scope={dirty:u,ctx:f}),sw.$set(FLe);const TLe={};u&2&&(TLe.$$scope={dirty:u,ctx:f}),uw.$set(TLe);const vA={};u&2&&(vA.$$scope={dirty:u,ctx:f}),vw.$set(vA);const MLe={};u&2&&(MLe.$$scope={dirty:u,ctx:f}),yw.$set(MLe);const ELe={};u&2&&(ELe.$$scope={dirty:u,ctx:f}),$w.$set(ELe);const FA={};u&2&&(FA.$$scope={dirty:u,ctx:f}),jw.$set(FA);const CLe={};u&2&&(CLe.$$scope={dirty:u,ctx:f}),Gw.$set(CLe);const wLe={};u&2&&(wLe.$$scope={dirty:u,ctx:f}),Vw.$set(wLe);const TA={};u&2&&(TA.$$scope={dirty:u,ctx:f}),zw.$set(TA);const ALe={};u&2&&(ALe.$$scope={dirty:u,ctx:f}),Hw.$set(ALe);const LLe={};u&2&&(LLe.$$scope={dirty:u,ctx:f}),Jw.$set(LLe);const MA={};u&2&&(MA.$$scope={dirty:u,ctx:f}),Kw.$set(MA)},i(f){bQe||(E(c.$$.fragment,f),E(Sa.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(Gf.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(oh.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(PL.$$.fragment,f),E(Nh.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(Mp.$$.fragment,f),E(Ep.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(WL.$$.fragment,f),E(zp.$$.fragment,f),E(Wp.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(Up.$$.fragment,f),E(KL.$$.fragment,f),E(r2.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(a2.$$.fragment,f),E(ty.$$.fragment,f),E(Y2.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(Z2.$$.fragment,f),E(iy.$$.fragment,f),E(O1.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(X1.$$.fragment,f),E(gy.$$.fragment,f),E($b.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(Sb.$$.fragment,f),E(by.$$.fragment,f),E(Zb.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(ov.$$.fragment,f),E(Ey.$$.fragment,f),E(e3.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ly.$$.fragment,f),E(r3.$$.fragment,f),E(yy.$$.fragment,f),E(P3.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(I3.$$.fragment,f),E(Ry.$$.fragment,f),E(X3.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(W3.$$.fragment,f),E(qy.$$.fragment,f),E($F.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(SF.$$.fragment,f),E(Vy.$$.fragment,f),E(M6.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(C6.$$.fragment,f),E(Hy.$$.fragment,f),E(L6.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(x6.$$.fragment,f),E(Zy.$$.fragment,f),E(z6.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(Q6.$$.fragment,f),E(a9.$$.fragment,f),E(J6.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(K6.$$.fragment,f),E(d9.$$.fragment,f),E(oT.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(tT.$$.fragment,f),E(h9.$$.fragment,f),E(hT.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(_T.$$.fragment,f),E(v9.$$.fragment,f),E(ET.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(wT.$$.fragment,f),E(C9.$$.fragment,f),E(NT.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(jT.$$.fragment,f),E(x9.$$.fragment,f),E(VT.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(zT.$$.fragment,f),E(B9.$$.fragment,f),E(KT.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(e8.$$.fragment,f),E(D9.$$.fragment,f),E(s8.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(i8.$$.fragment,f),E(z9.$$.fragment,f),E(m8.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(h8.$$.fragment,f),E(Y9.$$.fragment,f),E(u8.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(v8.$$.fragment,f),E(rx.$$.fragment,f),E(A8.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(y8.$$.fragment,f),E(lx.$$.fragment,f),E(k8.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(R8.$$.fragment,f),E(mx.$$.fragment,f),E($M.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(SM.$$.fragment,f),E(ux.$$.fragment,f),E(r4.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(a4.$$.fragment,f),E(Mx.$$.fragment,f),E(b4.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(F4.$$.fragment,f),E(Lx.$$.fragment,f),E(y4.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E($4.$$.fragment,f),E(Sx.$$.fragment,f),E(Y4.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(Z4.$$.fragment,f),E(Nx.$$.fragment,f),E(cE.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(mE.$$.fragment,f),E(Ox.$$.fragment,f),E(jE.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Wx.$$.fragment,f),E(GE.$$.fragment,f),E(Qx.$$.fragment,f),E(nC.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(lC.$$.fragment,f),E(Kx.$$.fragment,f),E(cC.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(mC.$$.fragment,f),E(a$.$$.fragment,f),E(hC.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(_C.$$.fragment,f),E(d$.$$.fragment,f),E(NC.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(jC.$$.fragment,f),E(h$.$$.fragment,f),E(s5.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(i5.$$.fragment,f),E(v$.$$.fragment,f),E(c5.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(m5.$$.fragment,f),E(C$.$$.fragment,f),E(h5.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(_5.$$.fragment,f),E(x$.$$.fragment,f),E(X5.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(W5.$$.fragment,f),E(P$.$$.fragment,f),E(t0.$$.fragment,f),E(B$.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E(n0.$$.fragment,f),E(j$.$$.fragment,f),E(v0.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E(T0.$$.fragment,f),E(X$.$$.fragment,f),E(S0.$$.fragment,f),E(z$.$$.fragment,f),E(W$.$$.fragment,f),E(H$.$$.fragment,f),E(P0.$$.fragment,f),E(U$.$$.fragment,f),E(z0.$$.fragment,f),E(J$.$$.fragment,f),E(Y$.$$.fragment,f),E(Z$.$$.fragment,f),E(Q0.$$.fragment,f),E(ek.$$.fragment,f),E(aw.$$.fragment,f),E(ok.$$.fragment,f),E(rk.$$.fragment,f),E(ak.$$.fragment,f),E(sw.$$.fragment,f),E(nk.$$.fragment,f),E(uw.$$.fragment,f),E(sk.$$.fragment,f),E(lk.$$.fragment,f),E(dk.$$.fragment,f),E(vw.$$.fragment,f),E(ck.$$.fragment,f),E(yw.$$.fragment,f),E(fk.$$.fragment,f),E(mk.$$.fragment,f),E(hk.$$.fragment,f),E($w.$$.fragment,f),E(pk.$$.fragment,f),E(jw.$$.fragment,f),E(_k.$$.fragment,f),E(uk.$$.fragment,f),E(vk.$$.fragment,f),E(Gw.$$.fragment,f),E(Fk.$$.fragment,f),E(Vw.$$.fragment,f),E(Tk.$$.fragment,f),E(Mk.$$.fragment,f),E(Ck.$$.fragment,f),E(zw.$$.fragment,f),E(wk.$$.fragment,f),E(Hw.$$.fragment,f),E(Lk.$$.fragment,f),E(yk.$$.fragment,f),E($k.$$.fragment,f),E(Jw.$$.fragment,f),E(kk.$$.fragment,f),E(Kw.$$.fragment,f),bQe=!0)},o(f){C(c.$$.fragment,f),C(Sa.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(Gf.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(oh.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(PL.$$.fragment,f),C(Nh.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(Mp.$$.fragment,f),C(Ep.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(WL.$$.fragment,f),C(zp.$$.fragment,f),C(Wp.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(Up.$$.fragment,f),C(KL.$$.fragment,f),C(r2.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(a2.$$.fragment,f),C(ty.$$.fragment,f),C(Y2.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(Z2.$$.fragment,f),C(iy.$$.fragment,f),C(O1.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(X1.$$.fragment,f),C(gy.$$.fragment,f),C($b.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(Sb.$$.fragment,f),C(by.$$.fragment,f),C(Zb.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(ov.$$.fragment,f),C(Ey.$$.fragment,f),C(e3.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ly.$$.fragment,f),C(r3.$$.fragment,f),C(yy.$$.fragment,f),C(P3.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(I3.$$.fragment,f),C(Ry.$$.fragment,f),C(X3.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(W3.$$.fragment,f),C(qy.$$.fragment,f),C($F.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(SF.$$.fragment,f),C(Vy.$$.fragment,f),C(M6.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(C6.$$.fragment,f),C(Hy.$$.fragment,f),C(L6.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(x6.$$.fragment,f),C(Zy.$$.fragment,f),C(z6.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(Q6.$$.fragment,f),C(a9.$$.fragment,f),C(J6.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(K6.$$.fragment,f),C(d9.$$.fragment,f),C(oT.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(tT.$$.fragment,f),C(h9.$$.fragment,f),C(hT.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(_T.$$.fragment,f),C(v9.$$.fragment,f),C(ET.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(wT.$$.fragment,f),C(C9.$$.fragment,f),C(NT.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(jT.$$.fragment,f),C(x9.$$.fragment,f),C(VT.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(zT.$$.fragment,f),C(B9.$$.fragment,f),C(KT.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(e8.$$.fragment,f),C(D9.$$.fragment,f),C(s8.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(i8.$$.fragment,f),C(z9.$$.fragment,f),C(m8.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(h8.$$.fragment,f),C(Y9.$$.fragment,f),C(u8.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(v8.$$.fragment,f),C(rx.$$.fragment,f),C(A8.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(y8.$$.fragment,f),C(lx.$$.fragment,f),C(k8.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(R8.$$.fragment,f),C(mx.$$.fragment,f),C($M.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(SM.$$.fragment,f),C(ux.$$.fragment,f),C(r4.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(a4.$$.fragment,f),C(Mx.$$.fragment,f),C(b4.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(F4.$$.fragment,f),C(Lx.$$.fragment,f),C(y4.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C($4.$$.fragment,f),C(Sx.$$.fragment,f),C(Y4.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(Z4.$$.fragment,f),C(Nx.$$.fragment,f),C(cE.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(mE.$$.fragment,f),C(Ox.$$.fragment,f),C(jE.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Wx.$$.fragment,f),C(GE.$$.fragment,f),C(Qx.$$.fragment,f),C(nC.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(lC.$$.fragment,f),C(Kx.$$.fragment,f),C(cC.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(mC.$$.fragment,f),C(a$.$$.fragment,f),C(hC.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(_C.$$.fragment,f),C(d$.$$.fragment,f),C(NC.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(jC.$$.fragment,f),C(h$.$$.fragment,f),C(s5.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(i5.$$.fragment,f),C(v$.$$.fragment,f),C(c5.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(m5.$$.fragment,f),C(C$.$$.fragment,f),C(h5.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(_5.$$.fragment,f),C(x$.$$.fragment,f),C(X5.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(W5.$$.fragment,f),C(P$.$$.fragment,f),C(t0.$$.fragment,f),C(B$.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C(n0.$$.fragment,f),C(j$.$$.fragment,f),C(v0.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C(T0.$$.fragment,f),C(X$.$$.fragment,f),C(S0.$$.fragment,f),C(z$.$$.fragment,f),C(W$.$$.fragment,f),C(H$.$$.fragment,f),C(P0.$$.fragment,f),C(U$.$$.fragment,f),C(z0.$$.fragment,f),C(J$.$$.fragment,f),C(Y$.$$.fragment,f),C(Z$.$$.fragment,f),C(Q0.$$.fragment,f),C(ek.$$.fragment,f),C(aw.$$.fragment,f),C(ok.$$.fragment,f),C(rk.$$.fragment,f),C(ak.$$.fragment,f),C(sw.$$.fragment,f),C(nk.$$.fragment,f),C(uw.$$.fragment,f),C(sk.$$.fragment,f),C(lk.$$.fragment,f),C(dk.$$.fragment,f),C(vw.$$.fragment,f),C(ck.$$.fragment,f),C(yw.$$.fragment,f),C(fk.$$.fragment,f),C(mk.$$.fragment,f),C(hk.$$.fragment,f),C($w.$$.fragment,f),C(pk.$$.fragment,f),C(jw.$$.fragment,f),C(_k.$$.fragment,f),C(uk.$$.fragment,f),C(vk.$$.fragment,f),C(Gw.$$.fragment,f),C(Fk.$$.fragment,f),C(Vw.$$.fragment,f),C(Tk.$$.fragment,f),C(Mk.$$.fragment,f),C(Ck.$$.fragment,f),C(zw.$$.fragment,f),C(wk.$$.fragment,f),C(Hw.$$.fragment,f),C(Lk.$$.fragment,f),C(yk.$$.fragment,f),C($k.$$.fragment,f),C(Jw.$$.fragment,f),C(kk.$$.fragment,f),C(Kw.$$.fragment,f),bQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(c),f&&t(If),f&&t(lt),f&&t(Oe),f&&t(Qe),f&&t(qf),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(Ao),f&&t(Ra),f&&t(gze),f&&t(Ni),w(ML),f&&t(hze),f&&t(jn),f&&t(pze),w(EL,f),f&&t(_ze),f&&t(sR),f&&t(uze),w(Gf,f),f&&t(bze),f&&t(qi),w(CL),f&&t(vze),f&&t(Lo),w(wL),w(yL),w(oh),w(xL),f&&t(Fze),f&&t(Di),w($L),f&&t(Tze),f&&t(yo),w(kL),w(PL),w(Nh),w(BL),f&&t(Mze),f&&t(Gi),w(IL),f&&t(Eze),f&&t(xo),w(NL),w(DL),w(Mp),w(Ep),w(GL),f&&t(Cze),f&&t(Oi),w(OL),f&&t(wze),f&&t($o),w(VL),w(WL),w(zp),w(Wp),w(QL),f&&t(Aze),f&&t(Xi),w(HL),f&&t(Lze),f&&t(ko),w(UL),w(YL),w(Up),w(KL),w(r2),f&&t(yze),f&&t(Qi),w(ZL),f&&t(xze),f&&t(So),w(ey),w(ry),w(a2),w(ty),w(Y2),f&&t($ze),f&&t(Ji),w(ay),f&&t(kze),f&&t(Ro),w(ny),w(ly),w(Z2),w(iy),w(O1),f&&t(Sze),f&&t(Zi),w(dy),f&&t(Rze),f&&t(Po),w(cy),w(my),w(X1),w(gy),w($b),f&&t(Pze),f&&t(rd),w(hy),f&&t(Bze),f&&t(Bo),w(py),w(uy),w(Sb),w(by),w(Zb),f&&t(Ize),f&&t(nd),w(vy),f&&t(Nze),f&&t(Io),w(Fy),w(My),w(ov),w(Ey),w(e3),f&&t(qze),f&&t(id),w(Cy),f&&t(jze),f&&t(No),w(wy),w(Ly),w(r3),w(yy),w(P3),f&&t(Dze),f&&t(fd),w(xy),f&&t(Gze),f&&t(qo),w($y),w(Sy),w(I3),w(Ry),w(X3),f&&t(Oze),f&&t(hd),w(Py),f&&t(Vze),f&&t(Do),w(By),w(Ny),w(W3),w(qy),w($F),f&&t(Xze),f&&t(ud),w(jy),f&&t(zze),f&&t(Go),w(Dy),w(Oy),w(SF),w(Vy),w(M6),f&&t(Wze),f&&t(Fd),w(Xy),f&&t(Qze),f&&t(Oo),w(zy),w(Qy),w(C6),w(Hy),w(L6),f&&t(Hze),f&&t(Ed),w(Uy),f&&t(Uze),f&&t(Vo),w(Jy),w(Ky),w(x6),w(Zy),w(z6),f&&t(Jze),f&&t(Ad),w(e9),f&&t(Yze),f&&t(Xo),w(o9),w(t9),w(Q6),w(a9),w(J6),f&&t(Kze),f&&t(xd),w(n9),f&&t(Zze),f&&t(zo),w(s9),w(i9),w(K6),w(d9),w(oT),f&&t(eWe),f&&t(Sd),w(c9),f&&t(oWe),f&&t(Wo),w(f9),w(g9),w(tT),w(h9),w(hT),f&&t(rWe),f&&t(Bd),w(p9),f&&t(tWe),f&&t(Qo),w(_9),w(b9),w(_T),w(v9),w(ET),f&&t(aWe),f&&t(qd),w(F9),f&&t(nWe),f&&t(Ho),w(T9),w(E9),w(wT),w(C9),w(NT),f&&t(sWe),f&&t(Gd),w(w9),f&&t(lWe),f&&t(Uo),w(A9),w(y9),w(jT),w(x9),w(VT),f&&t(iWe),f&&t(Xd),w(k9),f&&t(dWe),f&&t(Jo),w(S9),w(P9),w(zT),w(B9),w(KT),f&&t(cWe),f&&t(Qd),w(I9),f&&t(fWe),f&&t(Yo),w(N9),w(j9),w(e8),w(D9),w(s8),f&&t(mWe),f&&t(Jd),w(G9),f&&t(gWe),f&&t(Ko),w(O9),w(X9),w(i8),w(z9),w(m8),f&&t(hWe),f&&t(Zd),w(Q9),f&&t(pWe),f&&t(Zo),w(H9),w(J9),w(h8),w(Y9),w(u8),f&&t(_We),f&&t(rc),w(K9),f&&t(uWe),f&&t(er),w(Z9),w(ox),w(v8),w(rx),w(A8),f&&t(bWe),f&&t(nc),w(tx),f&&t(vWe),f&&t(or),w(ax),w(sx),w(y8),w(lx),w(k8),f&&t(FWe),f&&t(ic),w(ix),f&&t(TWe),f&&t(rr),w(dx),w(fx),w(R8),w(mx),w($M),f&&t(MWe),f&&t(fc),w(gx),f&&t(EWe),f&&t(tr),w(hx),w(_x),w(SM),w(ux),w(r4),f&&t(CWe),f&&t(hc),w(bx),f&&t(wWe),f&&t(ar),w(vx),w(Tx),w(a4),w(Mx),w(b4),f&&t(AWe),f&&t(uc),w(Ex),f&&t(LWe),f&&t(nr),w(Cx),w(Ax),w(F4),w(Lx),w(y4),f&&t(yWe),f&&t(Fc),w(yx),f&&t(xWe),f&&t(sr),w(xx),w(kx),w($4),w(Sx),w(Y4),f&&t($We),f&&t(Ec),w(Rx),f&&t(kWe),f&&t(lr),w(Px),w(Ix),w(Z4),w(Nx),w(cE),f&&t(SWe),f&&t(Ac),w(qx),f&&t(RWe),f&&t(ir),w(jx),w(Gx),w(mE),w(Ox),w(jE),f&&t(PWe),f&&t(xc),w(Vx),f&&t(BWe),f&&t(dr),w(Xx),w(Wx),w(GE),w(Qx),w(nC),f&&t(IWe),f&&t(Sc),w(Hx),f&&t(NWe),f&&t(cr),w(Ux),w(Yx),w(lC),w(Kx),w(cC),f&&t(qWe),f&&t(Bc),w(e$),f&&t(jWe),f&&t(fr),w(o$),w(t$),w(mC),w(a$),w(hC),f&&t(DWe),f&&t(qc),w(n$),f&&t(GWe),f&&t(mr),w(s$),w(i$),w(_C),w(d$),w(NC),f&&t(OWe),f&&t(Gc),w(c$),f&&t(VWe),f&&t(gr),w(f$),w(g$),w(jC),w(h$),w(s5),f&&t(XWe),f&&t(Xc),w(p$),f&&t(zWe),f&&t(hr),w(_$),w(b$),w(i5),w(v$),w(c5),f&&t(WWe),f&&t(Qc),w(F$),f&&t(QWe),f&&t(pr),w(T$),w(E$),w(m5),w(C$),w(h5),f&&t(HWe),f&&t(Jc),w(w$),f&&t(UWe),f&&t(_r),w(A$),w(y$),w(_5),w(x$),w(X5),f&&t(JWe),f&&t(Zc),w($$),f&&t(YWe),f&&t(ur),w(k$),w(R$),w(W5),w(P$),w(t0),f&&t(KWe),f&&t(rf),w(B$),f&&t(ZWe),f&&t(br),w(I$),w(q$),w(n0),w(j$),w(v0),f&&t(eQe),f&&t(nf),w(D$),f&&t(oQe),f&&t(vr),w(G$),w(V$),w(T0),w(X$),w(S0),f&&t(rQe),f&&t(df),w(z$),f&&t(tQe),f&&t(Fr),w(W$),w(H$),w(P0),w(U$),w(z0),f&&t(aQe),f&&t(mf),w(J$),f&&t(nQe),f&&t(Tr),w(Y$),w(Z$),w(Q0),w(ek),w(aw),f&&t(sQe),f&&t(pf),w(ok),f&&t(lQe),f&&t(Mr),w(rk),w(ak),w(sw),w(nk),w(uw),f&&t(iQe),f&&t(bf),w(sk),f&&t(dQe),f&&t(Er),w(lk),w(dk),w(vw),w(ck),w(yw),f&&t(cQe),f&&t(Tf),w(fk),f&&t(fQe),f&&t(Cr),w(mk),w(hk),w($w),w(pk),w(jw),f&&t(mQe),f&&t(Cf),w(_k),f&&t(gQe),f&&t(wr),w(uk),w(vk),w(Gw),w(Fk),w(Vw),f&&t(hQe),f&&t(Lf),w(Tk),f&&t(pQe),f&&t(Ar),w(Mk),w(Ck),w(zw),w(wk),w(Hw),f&&t(_Qe),f&&t($f),w(Lk),f&&t(uQe),f&&t(Lr),w(yk),w($k),w(Jw),w(kk),w(Kw)}}}const hKt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function pKt($){return gJt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class MKt extends dJt{constructor(g){super();cJt(this,g,pKt,gKt,fJt,{})}}export{MKt as default,hKt as metadata};
