import{S as ota,i as rta,s as tta,e as a,k as l,w as F,t as o,M as ata,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as nta,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as jft}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function sta($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,fL,om,Ve,Ue,zi,Xn,mL,zn,Wn,gL,Wi,Qn,hL,Qi,rm,ja;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),em=o("model_type"),ft=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),fL=o(")."),om=l(),Ve=a("p"),Ue=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),mL=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),gL=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),hL=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),rm=o("NewModelConfig"),ja=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var nP=s(p);m=r(nP,"NewModelConfig"),nP.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var sP=s(Oi);em=r(sP,"model_type"),sP.forEach(t),ft=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var lP=s(Vi);Xi=r(lP,'"new-model"'),lP.forEach(t),fL=r(Ae,")."),Ae.forEach(t),om=i(He),Ve=n(He,"P",{});var Lo=s(Ve);Ue=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),mL=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var iP=s(zn);Wn=r(iP,"PreTrainedModel"),iP.forEach(t),gL=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var tm=s(Wi);Qn=r(tm,"config_class"),tm.forEach(t),hL=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var dP=s(Qi);rm=r(dP,"NewModelConfig"),dP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,em),e(g,ft),e(g,Vi),e(Vi,Xi),e(g,fL),b(He,om,Ae),b(He,Ve,Ae),e(Ve,Ue),e(Ve,zi),e(zi,Xn),e(Ve,mL),e(Ve,zn),e(zn,Wn),e(Ve,gL),e(Ve,Wi),e(Wi,Qn),e(Ve,hL),e(Ve,Qi),e(Qi,rm),e(Ve,ja)},d(He){He&&t(g),He&&t(om),He&&t(Ve)}}}function lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dta($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fta($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ena($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ona($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ana($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ina($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dna($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,fL,om,Ve,Ue,zi,Xn,mL,zn,Wn,gL,Wi,Qn,hL,Qi,rm,ja,He,Ae,nP,Ui,sP,lP,Lo,Da,iP,tm,dP,bKe,UQe,Hi,am,Dse,pL,vKe,Gse,FKe,HQe,Un,TKe,Ose,MKe,EKe,Vse,CKe,wKe,JQe,_L,YQe,cP,AKe,KQe,nm,ZQe,Ji,sm,Xse,uL,LKe,zse,yKe,eUe,yo,bL,xKe,vL,$Ke,fP,kKe,SKe,RKe,FL,PKe,Wse,BKe,IKe,NKe,kr,TL,qKe,Qse,jKe,DKe,Yi,GKe,Use,OKe,VKe,Hse,XKe,zKe,WKe,A,lm,Jse,QKe,UKe,mP,HKe,JKe,YKe,im,Yse,KKe,ZKe,gP,eZe,oZe,rZe,dm,Kse,tZe,aZe,hP,nZe,sZe,lZe,cm,Zse,iZe,dZe,pP,cZe,fZe,mZe,fm,ele,gZe,hZe,_P,pZe,_Ze,uZe,mm,ole,bZe,vZe,uP,FZe,TZe,MZe,gm,rle,EZe,CZe,bP,wZe,AZe,LZe,hm,tle,yZe,xZe,vP,$Ze,kZe,SZe,pm,ale,RZe,PZe,FP,BZe,IZe,NZe,_m,nle,qZe,jZe,TP,DZe,GZe,OZe,um,sle,VZe,XZe,MP,zZe,WZe,QZe,bm,lle,UZe,HZe,EP,JZe,YZe,KZe,vm,ile,ZZe,eeo,CP,oeo,reo,teo,Fm,dle,aeo,neo,wP,seo,leo,ieo,Tm,cle,deo,ceo,AP,feo,meo,geo,Mm,fle,heo,peo,LP,_eo,ueo,beo,Em,mle,veo,Feo,yP,Teo,Meo,Eeo,Cm,gle,Ceo,weo,xP,Aeo,Leo,yeo,wm,hle,xeo,$eo,$P,keo,Seo,Reo,Am,ple,Peo,Beo,kP,Ieo,Neo,qeo,Lm,_le,jeo,Deo,SP,Geo,Oeo,Veo,ym,ule,Xeo,zeo,RP,Weo,Qeo,Ueo,xm,ble,Heo,Jeo,PP,Yeo,Keo,Zeo,$m,vle,eoo,ooo,BP,roo,too,aoo,km,Fle,noo,soo,IP,loo,ioo,doo,Sm,Tle,coo,foo,NP,moo,goo,hoo,Rm,Mle,poo,_oo,qP,uoo,boo,voo,Pm,Ele,Foo,Too,jP,Moo,Eoo,Coo,Bm,Cle,woo,Aoo,DP,Loo,yoo,xoo,Im,wle,$oo,koo,GP,Soo,Roo,Poo,Nm,Ale,Boo,Ioo,OP,Noo,qoo,joo,qm,Lle,Doo,Goo,VP,Ooo,Voo,Xoo,jm,yle,zoo,Woo,XP,Qoo,Uoo,Hoo,Dm,xle,Joo,Yoo,zP,Koo,Zoo,ero,Gm,$le,oro,rro,WP,tro,aro,nro,Om,kle,sro,lro,QP,iro,dro,cro,Vm,Sle,fro,mro,UP,gro,hro,pro,Xm,Rle,_ro,uro,HP,bro,vro,Fro,zm,Ple,Tro,Mro,JP,Ero,Cro,wro,Wm,Ble,Aro,Lro,YP,yro,xro,$ro,Qm,Ile,kro,Sro,KP,Rro,Pro,Bro,Um,Nle,Iro,Nro,ZP,qro,jro,Dro,Hm,qle,Gro,Oro,eB,Vro,Xro,zro,Jm,jle,Wro,Qro,oB,Uro,Hro,Jro,Ym,Dle,Yro,Kro,rB,Zro,eto,oto,Km,Gle,rto,tto,tB,ato,nto,sto,Zm,Ole,lto,ito,aB,dto,cto,fto,eg,Vle,mto,gto,nB,hto,pto,_to,og,Xle,uto,bto,sB,vto,Fto,Tto,rg,zle,Mto,Eto,lB,Cto,wto,Ato,tg,Wle,Lto,yto,iB,xto,$to,kto,ag,Qle,Sto,Rto,dB,Pto,Bto,Ito,ng,Ule,Nto,qto,cB,jto,Dto,Gto,sg,Hle,Oto,Vto,fB,Xto,zto,Wto,lg,Jle,Qto,Uto,mB,Hto,Jto,Yto,ig,Yle,Kto,Zto,gB,eao,oao,rao,dg,Kle,tao,aao,hB,nao,sao,lao,cg,Zle,iao,dao,pB,cao,fao,mao,fg,eie,gao,hao,_B,pao,_ao,uao,mg,oie,bao,vao,uB,Fao,Tao,Mao,gg,rie,Eao,Cao,bB,wao,Aao,Lao,hg,tie,yao,xao,vB,$ao,kao,Sao,pg,aie,Rao,Pao,FB,Bao,Iao,Nao,_g,nie,qao,jao,TB,Dao,Gao,Oao,ug,sie,Vao,Xao,MB,zao,Wao,Qao,bg,lie,Uao,Hao,EB,Jao,Yao,Kao,vg,iie,Zao,eno,CB,ono,rno,tno,Fg,die,ano,nno,wB,sno,lno,ino,Tg,cie,dno,cno,AB,fno,mno,gno,Mg,fie,hno,pno,LB,_no,uno,bno,Eg,mie,vno,Fno,yB,Tno,Mno,Eno,Cg,gie,Cno,wno,xB,Ano,Lno,yno,wg,hie,xno,$no,$B,kno,Sno,Rno,Ag,pie,Pno,Bno,kB,Ino,Nno,qno,Lg,_ie,jno,Dno,SB,Gno,Ono,Vno,yg,uie,Xno,zno,RB,Wno,Qno,Uno,xg,bie,Hno,Jno,PB,Yno,Kno,Zno,$g,vie,eso,oso,BB,rso,tso,aso,kg,Fie,nso,sso,IB,lso,iso,dso,Sg,Tie,cso,fso,NB,mso,gso,hso,Rg,Mie,pso,_so,qB,uso,bso,vso,Pg,Eie,Fso,Tso,jB,Mso,Eso,Cso,Bg,Cie,wso,Aso,DB,Lso,yso,xso,Ig,wie,$so,kso,GB,Sso,Rso,Pso,Ng,Aie,Bso,Iso,OB,Nso,qso,jso,qg,Lie,Dso,Gso,VB,Oso,Vso,Xso,jg,yie,zso,Wso,XB,Qso,Uso,Hso,Dg,xie,Jso,Yso,zB,Kso,Zso,elo,Gg,$ie,olo,rlo,WB,tlo,alo,nlo,Og,kie,slo,llo,QB,ilo,dlo,clo,Vg,Sie,flo,mlo,UB,glo,hlo,plo,Xg,Rie,_lo,ulo,HB,blo,vlo,Flo,zg,Pie,Tlo,Mlo,JB,Elo,Clo,wlo,Wg,Bie,Alo,Llo,YB,ylo,xlo,$lo,Qg,Iie,klo,Slo,KB,Rlo,Plo,Blo,Ug,Nie,Ilo,Nlo,ZB,qlo,jlo,Dlo,Hg,qie,Glo,Olo,eI,Vlo,Xlo,zlo,Jg,jie,Wlo,Qlo,oI,Ulo,Hlo,Jlo,Yg,Die,Ylo,Klo,rI,Zlo,eio,oio,Kg,Gie,rio,tio,tI,aio,nio,sio,Zg,Oie,lio,iio,aI,dio,cio,fio,eh,Vie,mio,gio,nI,hio,pio,_io,oh,Xie,uio,bio,sI,vio,Fio,Tio,rh,zie,Mio,Eio,lI,Cio,wio,Aio,th,Wie,Lio,yio,iI,xio,$io,kio,ah,Qie,Sio,Rio,dI,Pio,Bio,Iio,nh,Uie,Nio,qio,cI,jio,Dio,Gio,sh,Hie,Oio,Vio,fI,Xio,zio,Wio,lh,Jie,Qio,Uio,mI,Hio,Jio,Yio,ih,Yie,Kio,Zio,gI,edo,odo,rdo,dh,Kie,tdo,ado,hI,ndo,sdo,ldo,ch,Zie,ido,ddo,pI,cdo,fdo,mdo,fh,ede,gdo,hdo,_I,pdo,_do,udo,mh,ode,bdo,vdo,uI,Fdo,Tdo,Mdo,gh,rde,Edo,Cdo,bI,wdo,Ado,Ldo,hh,tde,ydo,xdo,vI,$do,kdo,Sdo,ph,ade,Rdo,Pdo,FI,Bdo,Ido,Ndo,_h,nde,qdo,jdo,TI,Ddo,Gdo,Odo,uh,sde,Vdo,Xdo,MI,zdo,Wdo,Qdo,bh,lde,Udo,Hdo,EI,Jdo,Ydo,Kdo,vh,ide,Zdo,eco,CI,oco,rco,tco,Fh,dde,aco,nco,wI,sco,lco,ico,Th,dco,Mh,ML,cco,cde,fco,oUe,Ki,Eh,fde,EL,mco,mde,gco,rUe,xo,CL,hco,wL,pco,AI,_co,uco,bco,AL,vco,gde,Fco,Tco,Mco,Sr,LL,Eco,hde,Cco,wco,Ga,Aco,pde,Lco,yco,_de,xco,$co,ude,kco,Sco,Rco,k,Hn,bde,Pco,Bco,LI,Ico,Nco,yI,qco,jco,Dco,Jn,vde,Gco,Oco,xI,Vco,Xco,$I,zco,Wco,Qco,Yn,Fde,Uco,Hco,kI,Jco,Yco,SI,Kco,Zco,efo,Ch,Tde,ofo,rfo,RI,tfo,afo,nfo,Kn,Mde,sfo,lfo,PI,ifo,dfo,BI,cfo,ffo,mfo,wh,Ede,gfo,hfo,II,pfo,_fo,ufo,Ah,Cde,bfo,vfo,NI,Ffo,Tfo,Mfo,Lh,wde,Efo,Cfo,qI,wfo,Afo,Lfo,Zn,Ade,yfo,xfo,jI,$fo,kfo,DI,Sfo,Rfo,Pfo,es,Lde,Bfo,Ifo,GI,Nfo,qfo,OI,jfo,Dfo,Gfo,os,yde,Ofo,Vfo,VI,Xfo,zfo,XI,Wfo,Qfo,Ufo,yh,xde,Hfo,Jfo,zI,Yfo,Kfo,Zfo,xh,$de,emo,omo,WI,rmo,tmo,amo,$h,kde,nmo,smo,QI,lmo,imo,dmo,rs,Sde,cmo,fmo,UI,mmo,gmo,HI,hmo,pmo,_mo,kh,Rde,umo,bmo,JI,vmo,Fmo,Tmo,ts,Pde,Mmo,Emo,YI,Cmo,wmo,KI,Amo,Lmo,ymo,as,Bde,xmo,$mo,ZI,kmo,Smo,eN,Rmo,Pmo,Bmo,ns,Ide,Imo,Nmo,oN,qmo,jmo,rN,Dmo,Gmo,Omo,ss,Nde,Vmo,Xmo,tN,zmo,Wmo,aN,Qmo,Umo,Hmo,Sh,qde,Jmo,Ymo,nN,Kmo,Zmo,ego,ls,jde,ogo,rgo,sN,tgo,ago,lN,ngo,sgo,lgo,is,Dde,igo,dgo,iN,cgo,fgo,dN,mgo,ggo,hgo,ds,Gde,pgo,_go,cN,ugo,bgo,fN,vgo,Fgo,Tgo,cs,Ode,Mgo,Ego,mN,Cgo,wgo,gN,Ago,Lgo,ygo,fs,Vde,xgo,$go,hN,kgo,Sgo,pN,Rgo,Pgo,Bgo,ms,Xde,Igo,Ngo,_N,qgo,jgo,uN,Dgo,Ggo,Ogo,Rh,zde,Vgo,Xgo,bN,zgo,Wgo,Qgo,gs,Wde,Ugo,Hgo,vN,Jgo,Ygo,FN,Kgo,Zgo,eho,Ph,Qde,oho,rho,TN,tho,aho,nho,hs,Ude,sho,lho,MN,iho,dho,EN,cho,fho,mho,ps,Hde,gho,hho,CN,pho,_ho,wN,uho,bho,vho,_s,Jde,Fho,Tho,AN,Mho,Eho,LN,Cho,who,Aho,Bh,Yde,Lho,yho,yN,xho,$ho,kho,us,Kde,Sho,Rho,xN,Pho,Bho,$N,Iho,Nho,qho,bs,Zde,jho,Dho,kN,Gho,Oho,SN,Vho,Xho,zho,vs,ece,Who,Qho,RN,Uho,Hho,PN,Jho,Yho,Kho,Ih,oce,Zho,epo,BN,opo,rpo,tpo,Fs,rce,apo,npo,IN,spo,lpo,NN,ipo,dpo,cpo,Ts,tce,fpo,mpo,qN,gpo,hpo,jN,ppo,_po,upo,Ms,ace,bpo,vpo,DN,Fpo,Tpo,GN,Mpo,Epo,Cpo,Es,nce,wpo,Apo,ON,Lpo,ypo,VN,xpo,$po,kpo,Cs,sce,Spo,Rpo,XN,Ppo,Bpo,zN,Ipo,Npo,qpo,ws,lce,jpo,Dpo,WN,Gpo,Opo,QN,Vpo,Xpo,zpo,As,ice,Wpo,Qpo,UN,Upo,Hpo,HN,Jpo,Ypo,Kpo,Ls,dce,Zpo,e_o,JN,o_o,r_o,YN,t_o,a_o,n_o,Nh,cce,s_o,l_o,KN,i_o,d_o,c_o,ys,fce,f_o,m_o,ZN,g_o,h_o,eq,p_o,__o,u_o,qh,mce,b_o,v_o,oq,F_o,T_o,M_o,jh,gce,E_o,C_o,rq,w_o,A_o,L_o,xs,hce,y_o,x_o,tq,$_o,k_o,aq,S_o,R_o,P_o,$s,pce,B_o,I_o,nq,N_o,q_o,sq,j_o,D_o,G_o,ks,_ce,O_o,V_o,lq,X_o,z_o,iq,W_o,Q_o,U_o,Dh,uce,H_o,J_o,dq,Y_o,K_o,Z_o,Ss,bce,euo,ouo,cq,ruo,tuo,fq,auo,nuo,suo,Rs,vce,luo,iuo,mq,duo,cuo,gq,fuo,muo,guo,Ps,Fce,huo,puo,hq,_uo,uuo,pq,buo,vuo,Fuo,Bs,Tce,Tuo,Muo,_q,Euo,Cuo,uq,wuo,Auo,Luo,Is,Mce,yuo,xuo,bq,$uo,kuo,vq,Suo,Ruo,Puo,Ns,Ece,Buo,Iuo,Fq,Nuo,quo,Tq,juo,Duo,Guo,qs,Cce,Ouo,Vuo,Mq,Xuo,zuo,Eq,Wuo,Quo,Uuo,js,wce,Huo,Juo,Cq,Yuo,Kuo,wq,Zuo,e1o,o1o,Gh,Ace,r1o,t1o,Aq,a1o,n1o,s1o,Ds,Lce,l1o,i1o,Lq,d1o,c1o,yq,f1o,m1o,g1o,Gs,yce,h1o,p1o,xq,_1o,u1o,$q,b1o,v1o,F1o,Oh,xce,T1o,M1o,kq,E1o,C1o,w1o,Vh,$ce,A1o,L1o,Sq,y1o,x1o,$1o,Xh,kce,k1o,S1o,Rq,R1o,P1o,B1o,zh,Sce,I1o,N1o,Pq,q1o,j1o,D1o,Os,Rce,G1o,O1o,Bq,V1o,X1o,Iq,z1o,W1o,Q1o,Wh,Pce,U1o,H1o,Nq,J1o,Y1o,K1o,Vs,Bce,Z1o,e2o,qq,o2o,r2o,jq,t2o,a2o,n2o,Xs,Ice,s2o,l2o,Dq,i2o,d2o,Gq,c2o,f2o,m2o,zs,Nce,g2o,h2o,Oq,p2o,_2o,Vq,u2o,b2o,v2o,Ws,qce,F2o,T2o,Xq,M2o,E2o,zq,C2o,w2o,A2o,Qs,jce,L2o,y2o,Wq,x2o,$2o,Qq,k2o,S2o,R2o,Us,Dce,P2o,B2o,Uq,I2o,N2o,Hq,q2o,j2o,D2o,Qh,Gce,G2o,O2o,Jq,V2o,X2o,z2o,Uh,Oce,W2o,Q2o,Yq,U2o,H2o,J2o,Hs,Vce,Y2o,K2o,Kq,Z2o,ebo,Zq,obo,rbo,tbo,Js,Xce,abo,nbo,ej,sbo,lbo,oj,ibo,dbo,cbo,Ys,zce,fbo,mbo,rj,gbo,hbo,tj,pbo,_bo,ubo,Hh,Wce,bbo,vbo,aj,Fbo,Tbo,Mbo,Jh,Qce,Ebo,Cbo,nj,wbo,Abo,Lbo,Yh,Uce,ybo,xbo,sj,$bo,kbo,Sbo,Ks,Hce,Rbo,Pbo,lj,Bbo,Ibo,ij,Nbo,qbo,jbo,Zs,Jce,Dbo,Gbo,dj,Obo,Vbo,cj,Xbo,zbo,Wbo,Kh,Yce,Qbo,Ubo,fj,Hbo,Jbo,Ybo,Zh,Kce,Kbo,Zbo,mj,evo,ovo,rvo,ep,Zce,tvo,avo,gj,nvo,svo,lvo,el,efe,ivo,dvo,hj,cvo,fvo,pj,mvo,gvo,hvo,op,ofe,pvo,_vo,_j,uvo,bvo,vvo,rp,rfe,Fvo,Tvo,uj,Mvo,Evo,Cvo,ol,tfe,wvo,Avo,bj,Lvo,yvo,vj,xvo,$vo,kvo,rl,afe,Svo,Rvo,Fj,Pvo,Bvo,Tj,Ivo,Nvo,qvo,tl,nfe,jvo,Dvo,Mj,Gvo,Ovo,Ej,Vvo,Xvo,zvo,al,sfe,Wvo,Qvo,Cj,Uvo,Hvo,wj,Jvo,Yvo,Kvo,tp,Zvo,ap,yL,e5o,lfe,o5o,tUe,Zi,np,ife,xL,r5o,dfe,t5o,aUe,$o,$L,a5o,kL,n5o,Aj,s5o,l5o,i5o,SL,d5o,cfe,c5o,f5o,m5o,Je,RL,g5o,ffe,h5o,p5o,Oa,_5o,mfe,u5o,b5o,gfe,v5o,F5o,hfe,T5o,M5o,E5o,Q,sp,pfe,C5o,w5o,Lj,A5o,L5o,y5o,lp,_fe,x5o,$5o,yj,k5o,S5o,R5o,ip,ufe,P5o,B5o,xj,I5o,N5o,q5o,dp,bfe,j5o,D5o,$j,G5o,O5o,V5o,cp,vfe,X5o,z5o,kj,W5o,Q5o,U5o,fp,Ffe,H5o,J5o,Sj,Y5o,K5o,Z5o,mp,Tfe,eFo,oFo,Rj,rFo,tFo,aFo,gp,Mfe,nFo,sFo,Pj,lFo,iFo,dFo,hp,Efe,cFo,fFo,Bj,mFo,gFo,hFo,pp,Cfe,pFo,_Fo,Ij,uFo,bFo,vFo,_p,wfe,FFo,TFo,Nj,MFo,EFo,CFo,up,Afe,wFo,AFo,qj,LFo,yFo,xFo,bp,Lfe,$Fo,kFo,jj,SFo,RFo,PFo,vp,yfe,BFo,IFo,Dj,NFo,qFo,jFo,Fp,xfe,DFo,GFo,Gj,OFo,VFo,XFo,Tp,$fe,zFo,WFo,Oj,QFo,UFo,HFo,Mp,kfe,JFo,YFo,Vj,KFo,ZFo,eTo,Ep,Sfe,oTo,rTo,Xj,tTo,aTo,nTo,Cp,Rfe,sTo,lTo,zj,iTo,dTo,cTo,wp,Pfe,fTo,mTo,Wj,gTo,hTo,pTo,Ap,Bfe,_To,uTo,Qj,bTo,vTo,FTo,Lp,Ife,TTo,MTo,Uj,ETo,CTo,wTo,yp,Nfe,ATo,LTo,Hj,yTo,xTo,$To,xp,qfe,kTo,STo,Jj,RTo,PTo,BTo,$p,jfe,ITo,NTo,Yj,qTo,jTo,DTo,kp,Dfe,GTo,OTo,Kj,VTo,XTo,zTo,Sp,Gfe,WTo,QTo,Zj,UTo,HTo,JTo,Rp,Ofe,YTo,KTo,eD,ZTo,e7o,o7o,Pp,Vfe,r7o,t7o,oD,a7o,n7o,s7o,Bp,Xfe,l7o,i7o,rD,d7o,c7o,f7o,Ip,zfe,m7o,g7o,tD,h7o,p7o,_7o,Np,Wfe,u7o,b7o,aD,v7o,F7o,T7o,qp,Qfe,M7o,E7o,nD,C7o,w7o,A7o,jp,Ufe,L7o,y7o,sD,x7o,$7o,k7o,Dp,Hfe,S7o,R7o,lD,P7o,B7o,I7o,Gp,Jfe,N7o,q7o,iD,j7o,D7o,G7o,Op,Yfe,O7o,V7o,dD,X7o,z7o,W7o,Vp,Kfe,Q7o,U7o,cD,H7o,J7o,Y7o,Xp,K7o,zp,Z7o,Wp,PL,e8o,Zfe,o8o,nUe,ed,Qp,eme,BL,r8o,ome,t8o,sUe,ko,IL,a8o,NL,n8o,fD,s8o,l8o,i8o,qL,d8o,rme,c8o,f8o,m8o,Ye,jL,g8o,tme,h8o,p8o,od,_8o,ame,u8o,b8o,nme,v8o,F8o,T8o,ie,Up,sme,M8o,E8o,mD,C8o,w8o,A8o,Hp,lme,L8o,y8o,gD,x8o,$8o,k8o,Jp,ime,S8o,R8o,hD,P8o,B8o,I8o,Yp,dme,N8o,q8o,pD,j8o,D8o,G8o,Kp,cme,O8o,V8o,_D,X8o,z8o,W8o,Zp,fme,Q8o,U8o,uD,H8o,J8o,Y8o,e_,mme,K8o,Z8o,bD,e9o,o9o,r9o,o_,gme,t9o,a9o,vD,n9o,s9o,l9o,r_,hme,i9o,d9o,FD,c9o,f9o,m9o,t_,pme,g9o,h9o,TD,p9o,_9o,u9o,a_,_me,b9o,v9o,MD,F9o,T9o,M9o,n_,ume,E9o,C9o,ED,w9o,A9o,L9o,s_,bme,y9o,x9o,CD,$9o,k9o,S9o,l_,vme,R9o,P9o,wD,B9o,I9o,N9o,i_,Fme,q9o,j9o,AD,D9o,G9o,O9o,d_,Tme,V9o,X9o,LD,z9o,W9o,Q9o,c_,Mme,U9o,H9o,yD,J9o,Y9o,K9o,f_,Eme,Z9o,eMo,xD,oMo,rMo,tMo,m_,Cme,aMo,nMo,$D,sMo,lMo,iMo,g_,wme,dMo,cMo,kD,fMo,mMo,gMo,h_,hMo,p_,pMo,__,DL,_Mo,Ame,uMo,lUe,rd,u_,Lme,GL,bMo,yme,vMo,iUe,So,OL,FMo,td,TMo,SD,MMo,EMo,RD,CMo,wMo,AMo,VL,LMo,xme,yMo,xMo,$Mo,mt,XL,kMo,$me,SMo,RMo,ad,PMo,kme,BMo,IMo,PD,NMo,qMo,jMo,b_,DMo,Ke,zL,GMo,Sme,OMo,VMo,Va,XMo,Rme,zMo,WMo,Pme,QMo,UMo,Bme,HMo,JMo,YMo,y,v_,Ime,KMo,ZMo,BD,eEo,oEo,rEo,F_,Nme,tEo,aEo,ID,nEo,sEo,lEo,T_,qme,iEo,dEo,ND,cEo,fEo,mEo,M_,jme,gEo,hEo,qD,pEo,_Eo,uEo,E_,Dme,bEo,vEo,jD,FEo,TEo,MEo,C_,Gme,EEo,CEo,DD,wEo,AEo,LEo,w_,Ome,yEo,xEo,GD,$Eo,kEo,SEo,A_,Vme,REo,PEo,OD,BEo,IEo,NEo,L_,Xme,qEo,jEo,VD,DEo,GEo,OEo,y_,zme,VEo,XEo,XD,zEo,WEo,QEo,x_,Wme,UEo,HEo,zD,JEo,YEo,KEo,$_,Qme,ZEo,e4o,WD,o4o,r4o,t4o,k_,Ume,a4o,n4o,QD,s4o,l4o,i4o,S_,Hme,d4o,c4o,UD,f4o,m4o,g4o,R_,Jme,h4o,p4o,HD,_4o,u4o,b4o,P_,Yme,v4o,F4o,JD,T4o,M4o,E4o,B_,Kme,C4o,w4o,YD,A4o,L4o,y4o,I_,Zme,x4o,$4o,KD,k4o,S4o,R4o,N_,ege,P4o,B4o,ZD,I4o,N4o,q4o,q_,oge,j4o,D4o,eG,G4o,O4o,V4o,j_,rge,X4o,z4o,oG,W4o,Q4o,U4o,D_,tge,H4o,J4o,rG,Y4o,K4o,Z4o,G_,age,eCo,oCo,tG,rCo,tCo,aCo,O_,nge,nCo,sCo,aG,lCo,iCo,dCo,V_,sge,cCo,fCo,nG,mCo,gCo,hCo,X_,lge,pCo,_Co,sG,uCo,bCo,vCo,z_,ige,FCo,TCo,lG,MCo,ECo,CCo,W_,dge,wCo,ACo,iG,LCo,yCo,xCo,Q_,cge,$Co,kCo,dG,SCo,RCo,PCo,U_,fge,BCo,ICo,cG,NCo,qCo,jCo,H_,mge,DCo,GCo,fG,OCo,VCo,XCo,J_,gge,zCo,WCo,mG,QCo,UCo,HCo,Y_,hge,JCo,YCo,gG,KCo,ZCo,e3o,K_,pge,o3o,r3o,hG,t3o,a3o,n3o,Z_,_ge,s3o,l3o,pG,i3o,d3o,c3o,nl,uge,f3o,m3o,_G,g3o,h3o,uG,p3o,_3o,u3o,eu,bge,b3o,v3o,bG,F3o,T3o,M3o,ou,vge,E3o,C3o,vG,w3o,A3o,L3o,ru,Fge,y3o,x3o,FG,$3o,k3o,S3o,tu,Tge,R3o,P3o,TG,B3o,I3o,N3o,au,Mge,q3o,j3o,MG,D3o,G3o,O3o,nu,Ege,V3o,X3o,EG,z3o,W3o,Q3o,su,Cge,U3o,H3o,CG,J3o,Y3o,K3o,lu,wge,Z3o,e0o,wG,o0o,r0o,t0o,iu,Age,a0o,n0o,AG,s0o,l0o,i0o,du,Lge,d0o,c0o,LG,f0o,m0o,g0o,cu,yge,h0o,p0o,yG,_0o,u0o,b0o,fu,xge,v0o,F0o,xG,T0o,M0o,E0o,mu,$ge,C0o,w0o,$G,A0o,L0o,y0o,gu,kge,x0o,$0o,kG,k0o,S0o,R0o,hu,Sge,P0o,B0o,SG,I0o,N0o,q0o,pu,Rge,j0o,D0o,RG,G0o,O0o,V0o,_u,Pge,X0o,z0o,PG,W0o,Q0o,U0o,uu,Bge,H0o,J0o,BG,Y0o,K0o,Z0o,bu,Ige,ewo,owo,IG,rwo,two,awo,vu,Nge,nwo,swo,NG,lwo,iwo,dwo,Fu,qge,cwo,fwo,qG,mwo,gwo,hwo,Tu,jge,pwo,_wo,jG,uwo,bwo,vwo,Mu,Dge,Fwo,Two,DG,Mwo,Ewo,Cwo,Eu,Gge,wwo,Awo,GG,Lwo,ywo,xwo,Cu,Oge,$wo,kwo,OG,Swo,Rwo,Pwo,wu,Vge,Bwo,Iwo,VG,Nwo,qwo,jwo,Au,Xge,Dwo,Gwo,XG,Owo,Vwo,Xwo,Lu,zge,zwo,Wwo,zG,Qwo,Uwo,Hwo,yu,Wge,Jwo,Ywo,WG,Kwo,Zwo,e6o,xu,Qge,o6o,r6o,QG,t6o,a6o,n6o,$u,Uge,s6o,l6o,UG,i6o,d6o,c6o,ku,Hge,f6o,m6o,HG,g6o,h6o,p6o,Su,Jge,_6o,u6o,JG,b6o,v6o,F6o,Ru,Yge,T6o,M6o,YG,E6o,C6o,w6o,Pu,Kge,A6o,L6o,KG,y6o,x6o,$6o,Bu,Zge,k6o,S6o,ZG,R6o,P6o,B6o,Iu,ehe,I6o,N6o,eO,q6o,j6o,D6o,Nu,ohe,G6o,O6o,oO,V6o,X6o,z6o,qu,rhe,W6o,Q6o,rO,U6o,H6o,J6o,ju,the,Y6o,K6o,tO,Z6o,eAo,oAo,Du,ahe,rAo,tAo,aO,aAo,nAo,sAo,Gu,nhe,lAo,iAo,nO,dAo,cAo,fAo,Ou,she,mAo,gAo,sO,hAo,pAo,_Ao,Vu,lhe,uAo,bAo,lO,vAo,FAo,TAo,Xu,ihe,MAo,EAo,iO,CAo,wAo,AAo,zu,dhe,LAo,yAo,dO,xAo,$Ao,kAo,Wu,che,SAo,RAo,cO,PAo,BAo,IAo,Qu,fhe,NAo,qAo,fO,jAo,DAo,GAo,Uu,mhe,OAo,VAo,mO,XAo,zAo,WAo,Hu,ghe,QAo,UAo,gO,HAo,JAo,YAo,Ju,hhe,KAo,ZAo,hO,eLo,oLo,rLo,Yu,phe,tLo,aLo,pO,nLo,sLo,lLo,Ku,_he,iLo,dLo,_O,cLo,fLo,mLo,Zu,uhe,gLo,hLo,uO,pLo,_Lo,uLo,e1,bhe,bLo,vLo,bO,FLo,TLo,MLo,o1,vhe,ELo,CLo,vO,wLo,ALo,LLo,r1,Fhe,yLo,xLo,FO,$Lo,kLo,SLo,t1,The,RLo,PLo,TO,BLo,ILo,NLo,a1,Mhe,qLo,jLo,MO,DLo,GLo,OLo,n1,Ehe,VLo,XLo,EO,zLo,WLo,QLo,s1,Che,ULo,HLo,CO,JLo,YLo,KLo,l1,whe,ZLo,eyo,wO,oyo,ryo,tyo,i1,Ahe,ayo,nyo,AO,syo,lyo,iyo,d1,Lhe,dyo,cyo,LO,fyo,myo,gyo,c1,yhe,hyo,pyo,yO,_yo,uyo,byo,f1,xhe,vyo,Fyo,xO,Tyo,Myo,Eyo,m1,$he,Cyo,wyo,$O,Ayo,Lyo,yyo,g1,khe,xyo,$yo,kO,kyo,Syo,Ryo,h1,She,Pyo,Byo,SO,Iyo,Nyo,qyo,p1,Rhe,jyo,Dyo,RO,Gyo,Oyo,Vyo,_1,Phe,Xyo,zyo,PO,Wyo,Qyo,Uyo,u1,Bhe,Hyo,Jyo,BO,Yyo,Kyo,Zyo,b1,Ihe,exo,oxo,IO,rxo,txo,axo,v1,Nhe,nxo,sxo,NO,lxo,ixo,dxo,F1,qhe,cxo,fxo,qO,mxo,gxo,hxo,T1,jhe,pxo,_xo,jO,uxo,bxo,vxo,M1,Dhe,Fxo,Txo,DO,Mxo,Exo,Cxo,E1,Ghe,wxo,Axo,GO,Lxo,yxo,xxo,C1,Ohe,$xo,kxo,OO,Sxo,Rxo,Pxo,w1,Vhe,Bxo,Ixo,VO,Nxo,qxo,jxo,A1,Dxo,Xhe,Gxo,Oxo,zhe,Vxo,Xxo,L1,dUe,nd,y1,Whe,WL,zxo,Qhe,Wxo,cUe,Ro,QL,Qxo,sd,Uxo,XO,Hxo,Jxo,zO,Yxo,Kxo,Zxo,UL,e$o,Uhe,o$o,r$o,t$o,gt,HL,a$o,Hhe,n$o,s$o,ld,l$o,Jhe,i$o,d$o,WO,c$o,f$o,m$o,x1,g$o,Ze,JL,h$o,Yhe,p$o,_$o,Xa,u$o,Khe,b$o,v$o,Zhe,F$o,T$o,epe,M$o,E$o,C$o,G,$1,ope,w$o,A$o,QO,L$o,y$o,x$o,k1,rpe,$$o,k$o,UO,S$o,R$o,P$o,S1,tpe,B$o,I$o,HO,N$o,q$o,j$o,R1,ape,D$o,G$o,JO,O$o,V$o,X$o,P1,npe,z$o,W$o,YO,Q$o,U$o,H$o,B1,spe,J$o,Y$o,KO,K$o,Z$o,eko,I1,lpe,oko,rko,ZO,tko,ako,nko,N1,ipe,sko,lko,eV,iko,dko,cko,q1,dpe,fko,mko,oV,gko,hko,pko,j1,cpe,_ko,uko,rV,bko,vko,Fko,D1,fpe,Tko,Mko,tV,Eko,Cko,wko,G1,mpe,Ako,Lko,aV,yko,xko,$ko,O1,gpe,kko,Sko,nV,Rko,Pko,Bko,V1,hpe,Iko,Nko,sV,qko,jko,Dko,X1,ppe,Gko,Oko,lV,Vko,Xko,zko,z1,_pe,Wko,Qko,iV,Uko,Hko,Jko,W1,upe,Yko,Kko,dV,Zko,eSo,oSo,Q1,bpe,rSo,tSo,cV,aSo,nSo,sSo,U1,vpe,lSo,iSo,fV,dSo,cSo,fSo,H1,Fpe,mSo,gSo,mV,hSo,pSo,_So,J1,Tpe,uSo,bSo,gV,vSo,FSo,TSo,Y1,Mpe,MSo,ESo,hV,CSo,wSo,ASo,K1,Epe,LSo,ySo,pV,xSo,$So,kSo,Z1,Cpe,SSo,RSo,_V,PSo,BSo,ISo,e2,wpe,NSo,qSo,uV,jSo,DSo,GSo,o2,Ape,OSo,VSo,bV,XSo,zSo,WSo,r2,Lpe,QSo,USo,vV,HSo,JSo,YSo,t2,ype,KSo,ZSo,FV,eRo,oRo,rRo,a2,xpe,tRo,aRo,TV,nRo,sRo,lRo,n2,$pe,iRo,dRo,MV,cRo,fRo,mRo,s2,kpe,gRo,hRo,EV,pRo,_Ro,uRo,l2,Spe,bRo,vRo,CV,FRo,TRo,MRo,i2,Rpe,ERo,CRo,wV,wRo,ARo,LRo,d2,Ppe,yRo,xRo,AV,$Ro,kRo,SRo,c2,Bpe,RRo,PRo,LV,BRo,IRo,NRo,f2,Ipe,qRo,jRo,yV,DRo,GRo,ORo,m2,Npe,VRo,XRo,xV,zRo,WRo,QRo,g2,qpe,URo,HRo,$V,JRo,YRo,KRo,h2,jpe,ZRo,ePo,kV,oPo,rPo,tPo,p2,Dpe,aPo,nPo,SV,sPo,lPo,iPo,_2,Gpe,dPo,cPo,RV,fPo,mPo,gPo,u2,Ope,hPo,pPo,PV,_Po,uPo,bPo,b2,Vpe,vPo,FPo,BV,TPo,MPo,EPo,v2,Xpe,CPo,wPo,IV,APo,LPo,yPo,F2,zpe,xPo,$Po,NV,kPo,SPo,RPo,T2,Wpe,PPo,BPo,qV,IPo,NPo,qPo,M2,Qpe,jPo,DPo,jV,GPo,OPo,VPo,E2,XPo,Upe,zPo,WPo,Hpe,QPo,UPo,C2,fUe,id,w2,Jpe,YL,HPo,Ype,JPo,mUe,Po,KL,YPo,dd,KPo,DV,ZPo,eBo,GV,oBo,rBo,tBo,ZL,aBo,Kpe,nBo,sBo,lBo,ht,ey,iBo,Zpe,dBo,cBo,cd,fBo,e_e,mBo,gBo,OV,hBo,pBo,_Bo,A2,uBo,eo,oy,bBo,o_e,vBo,FBo,za,TBo,r_e,MBo,EBo,t_e,CBo,wBo,a_e,ABo,LBo,yBo,z,L2,n_e,xBo,$Bo,VV,kBo,SBo,RBo,y2,s_e,PBo,BBo,XV,IBo,NBo,qBo,x2,l_e,jBo,DBo,zV,GBo,OBo,VBo,$2,i_e,XBo,zBo,WV,WBo,QBo,UBo,k2,d_e,HBo,JBo,QV,YBo,KBo,ZBo,S2,c_e,eIo,oIo,UV,rIo,tIo,aIo,R2,f_e,nIo,sIo,HV,lIo,iIo,dIo,P2,m_e,cIo,fIo,JV,mIo,gIo,hIo,B2,g_e,pIo,_Io,YV,uIo,bIo,vIo,I2,h_e,FIo,TIo,KV,MIo,EIo,CIo,N2,p_e,wIo,AIo,ZV,LIo,yIo,xIo,q2,__e,$Io,kIo,eX,SIo,RIo,PIo,j2,u_e,BIo,IIo,oX,NIo,qIo,jIo,D2,b_e,DIo,GIo,rX,OIo,VIo,XIo,G2,v_e,zIo,WIo,tX,QIo,UIo,HIo,O2,F_e,JIo,YIo,aX,KIo,ZIo,eNo,V2,T_e,oNo,rNo,nX,tNo,aNo,nNo,X2,M_e,sNo,lNo,sX,iNo,dNo,cNo,z2,E_e,fNo,mNo,lX,gNo,hNo,pNo,W2,C_e,_No,uNo,iX,bNo,vNo,FNo,Q2,w_e,TNo,MNo,dX,ENo,CNo,wNo,U2,A_e,ANo,LNo,cX,yNo,xNo,$No,H2,L_e,kNo,SNo,fX,RNo,PNo,BNo,J2,y_e,INo,NNo,mX,qNo,jNo,DNo,Y2,x_e,GNo,ONo,gX,VNo,XNo,zNo,K2,$_e,WNo,QNo,hX,UNo,HNo,JNo,Z2,k_e,YNo,KNo,pX,ZNo,eqo,oqo,eb,S_e,rqo,tqo,_X,aqo,nqo,sqo,ob,R_e,lqo,iqo,uX,dqo,cqo,fqo,rb,P_e,mqo,gqo,bX,hqo,pqo,_qo,tb,B_e,uqo,bqo,vX,vqo,Fqo,Tqo,ab,I_e,Mqo,Eqo,FX,Cqo,wqo,Aqo,nb,N_e,Lqo,yqo,TX,xqo,$qo,kqo,sb,q_e,Sqo,Rqo,MX,Pqo,Bqo,Iqo,lb,j_e,Nqo,qqo,EX,jqo,Dqo,Gqo,ib,D_e,Oqo,Vqo,CX,Xqo,zqo,Wqo,db,G_e,Qqo,Uqo,wX,Hqo,Jqo,Yqo,cb,O_e,Kqo,Zqo,AX,ejo,ojo,rjo,fb,V_e,tjo,ajo,LX,njo,sjo,ljo,mb,X_e,ijo,djo,yX,cjo,fjo,mjo,gb,gjo,z_e,hjo,pjo,W_e,_jo,ujo,hb,gUe,fd,pb,Q_e,ry,bjo,U_e,vjo,hUe,Bo,ty,Fjo,md,Tjo,xX,Mjo,Ejo,$X,Cjo,wjo,Ajo,ay,Ljo,H_e,yjo,xjo,$jo,pt,ny,kjo,J_e,Sjo,Rjo,gd,Pjo,Y_e,Bjo,Ijo,kX,Njo,qjo,jjo,_b,Djo,oo,sy,Gjo,K_e,Ojo,Vjo,Wa,Xjo,Z_e,zjo,Wjo,eue,Qjo,Ujo,oue,Hjo,Jjo,Yjo,U,ub,rue,Kjo,Zjo,SX,eDo,oDo,rDo,bb,tue,tDo,aDo,RX,nDo,sDo,lDo,vb,aue,iDo,dDo,PX,cDo,fDo,mDo,Fb,nue,gDo,hDo,BX,pDo,_Do,uDo,Tb,sue,bDo,vDo,IX,FDo,TDo,MDo,Mb,lue,EDo,CDo,NX,wDo,ADo,LDo,Eb,iue,yDo,xDo,qX,$Do,kDo,SDo,Cb,due,RDo,PDo,jX,BDo,IDo,NDo,wb,cue,qDo,jDo,DX,DDo,GDo,ODo,Ab,fue,VDo,XDo,GX,zDo,WDo,QDo,Lb,mue,UDo,HDo,OX,JDo,YDo,KDo,yb,gue,ZDo,eGo,VX,oGo,rGo,tGo,xb,hue,aGo,nGo,XX,sGo,lGo,iGo,$b,pue,dGo,cGo,zX,fGo,mGo,gGo,kb,_ue,hGo,pGo,WX,_Go,uGo,bGo,Sb,uue,vGo,FGo,QX,TGo,MGo,EGo,Rb,bue,CGo,wGo,UX,AGo,LGo,yGo,Pb,vue,xGo,$Go,HX,kGo,SGo,RGo,Bb,Fue,PGo,BGo,JX,IGo,NGo,qGo,Ib,Tue,jGo,DGo,YX,GGo,OGo,VGo,Nb,Mue,XGo,zGo,KX,WGo,QGo,UGo,qb,Eue,HGo,JGo,ZX,YGo,KGo,ZGo,jb,Cue,eOo,oOo,ez,rOo,tOo,aOo,Db,wue,nOo,sOo,oz,lOo,iOo,dOo,Gb,Aue,cOo,fOo,rz,mOo,gOo,hOo,Ob,Lue,pOo,_Oo,tz,uOo,bOo,vOo,Vb,yue,FOo,TOo,az,MOo,EOo,COo,Xb,xue,wOo,AOo,nz,LOo,yOo,xOo,zb,$ue,$Oo,kOo,sz,SOo,ROo,POo,Wb,kue,BOo,IOo,lz,NOo,qOo,jOo,Qb,Sue,DOo,GOo,iz,OOo,VOo,XOo,Ub,Rue,zOo,WOo,dz,QOo,UOo,HOo,Hb,Pue,JOo,YOo,cz,KOo,ZOo,eVo,Jb,Bue,oVo,rVo,Iue,tVo,aVo,nVo,Yb,Nue,sVo,lVo,fz,iVo,dVo,cVo,Kb,que,fVo,mVo,mz,gVo,hVo,pVo,Zb,jue,_Vo,uVo,gz,bVo,vVo,FVo,ev,Due,TVo,MVo,hz,EVo,CVo,wVo,ov,AVo,Gue,LVo,yVo,Oue,xVo,$Vo,rv,pUe,hd,tv,Vue,ly,kVo,Xue,SVo,_Ue,Io,iy,RVo,pd,PVo,pz,BVo,IVo,_z,NVo,qVo,jVo,dy,DVo,zue,GVo,OVo,VVo,_t,cy,XVo,Wue,zVo,WVo,_d,QVo,Que,UVo,HVo,uz,JVo,YVo,KVo,av,ZVo,ro,fy,eXo,Uue,oXo,rXo,Qa,tXo,Hue,aXo,nXo,Jue,sXo,lXo,Yue,iXo,dXo,cXo,me,nv,Kue,fXo,mXo,bz,gXo,hXo,pXo,sv,Zue,_Xo,uXo,vz,bXo,vXo,FXo,lv,e1e,TXo,MXo,Fz,EXo,CXo,wXo,iv,o1e,AXo,LXo,Tz,yXo,xXo,$Xo,dv,r1e,kXo,SXo,Mz,RXo,PXo,BXo,cv,t1e,IXo,NXo,Ez,qXo,jXo,DXo,fv,a1e,GXo,OXo,Cz,VXo,XXo,zXo,mv,n1e,WXo,QXo,wz,UXo,HXo,JXo,gv,s1e,YXo,KXo,Az,ZXo,ezo,ozo,hv,l1e,rzo,tzo,Lz,azo,nzo,szo,pv,i1e,lzo,izo,yz,dzo,czo,fzo,_v,d1e,mzo,gzo,xz,hzo,pzo,_zo,uv,c1e,uzo,bzo,$z,vzo,Fzo,Tzo,bv,f1e,Mzo,Ezo,kz,Czo,wzo,Azo,vv,m1e,Lzo,yzo,Sz,xzo,$zo,kzo,Fv,g1e,Szo,Rzo,Rz,Pzo,Bzo,Izo,Tv,h1e,Nzo,qzo,Pz,jzo,Dzo,Gzo,Mv,p1e,Ozo,Vzo,Bz,Xzo,zzo,Wzo,Ev,_1e,Qzo,Uzo,Iz,Hzo,Jzo,Yzo,Cv,Kzo,u1e,Zzo,eWo,b1e,oWo,rWo,wv,uUe,ud,Av,v1e,my,tWo,F1e,aWo,bUe,No,gy,nWo,bd,sWo,Nz,lWo,iWo,qz,dWo,cWo,fWo,hy,mWo,T1e,gWo,hWo,pWo,ut,py,_Wo,M1e,uWo,bWo,vd,vWo,E1e,FWo,TWo,jz,MWo,EWo,CWo,Lv,wWo,to,_y,AWo,C1e,LWo,yWo,Ua,xWo,w1e,$Wo,kWo,A1e,SWo,RWo,L1e,PWo,BWo,IWo,N,yv,y1e,NWo,qWo,Dz,jWo,DWo,GWo,xv,x1e,OWo,VWo,Gz,XWo,zWo,WWo,$v,$1e,QWo,UWo,Oz,HWo,JWo,YWo,kv,k1e,KWo,ZWo,Vz,eQo,oQo,rQo,Sv,S1e,tQo,aQo,Xz,nQo,sQo,lQo,Rv,R1e,iQo,dQo,zz,cQo,fQo,mQo,Pv,P1e,gQo,hQo,Wz,pQo,_Qo,uQo,Bv,B1e,bQo,vQo,Qz,FQo,TQo,MQo,Iv,I1e,EQo,CQo,Uz,wQo,AQo,LQo,Nv,N1e,yQo,xQo,Hz,$Qo,kQo,SQo,qv,q1e,RQo,PQo,Jz,BQo,IQo,NQo,jv,j1e,qQo,jQo,Yz,DQo,GQo,OQo,Dv,D1e,VQo,XQo,Kz,zQo,WQo,QQo,Gv,G1e,UQo,HQo,Zz,JQo,YQo,KQo,Ov,O1e,ZQo,eUo,eW,oUo,rUo,tUo,Vv,V1e,aUo,nUo,oW,sUo,lUo,iUo,Xv,X1e,dUo,cUo,rW,fUo,mUo,gUo,zv,z1e,hUo,pUo,tW,_Uo,uUo,bUo,Wv,W1e,vUo,FUo,aW,TUo,MUo,EUo,Qv,Q1e,CUo,wUo,nW,AUo,LUo,yUo,Uv,U1e,xUo,$Uo,sW,kUo,SUo,RUo,Hv,H1e,PUo,BUo,lW,IUo,NUo,qUo,Jv,J1e,jUo,DUo,iW,GUo,OUo,VUo,Yv,Y1e,XUo,zUo,dW,WUo,QUo,UUo,Kv,K1e,HUo,JUo,cW,YUo,KUo,ZUo,Zv,Z1e,eHo,oHo,fW,rHo,tHo,aHo,e5,e2e,nHo,sHo,mW,lHo,iHo,dHo,o5,o2e,cHo,fHo,gW,mHo,gHo,hHo,r5,r2e,pHo,_Ho,hW,uHo,bHo,vHo,t5,t2e,FHo,THo,pW,MHo,EHo,CHo,a5,a2e,wHo,AHo,_W,LHo,yHo,xHo,n5,n2e,$Ho,kHo,uW,SHo,RHo,PHo,s5,s2e,BHo,IHo,bW,NHo,qHo,jHo,l5,l2e,DHo,GHo,vW,OHo,VHo,XHo,i5,i2e,zHo,WHo,FW,QHo,UHo,HHo,d5,d2e,JHo,YHo,TW,KHo,ZHo,eJo,c5,c2e,oJo,rJo,MW,tJo,aJo,nJo,f5,f2e,sJo,lJo,EW,iJo,dJo,cJo,m5,m2e,fJo,mJo,CW,gJo,hJo,pJo,g5,g2e,_Jo,uJo,wW,bJo,vJo,FJo,h5,h2e,TJo,MJo,AW,EJo,CJo,wJo,p5,p2e,AJo,LJo,LW,yJo,xJo,$Jo,_5,_2e,kJo,SJo,yW,RJo,PJo,BJo,u5,u2e,IJo,NJo,xW,qJo,jJo,DJo,b5,b2e,GJo,OJo,$W,VJo,XJo,zJo,v5,v2e,WJo,QJo,kW,UJo,HJo,JJo,F5,F2e,YJo,KJo,SW,ZJo,eYo,oYo,T5,T2e,rYo,tYo,RW,aYo,nYo,sYo,M5,M2e,lYo,iYo,PW,dYo,cYo,fYo,E5,E2e,mYo,gYo,BW,hYo,pYo,_Yo,C5,C2e,uYo,bYo,IW,vYo,FYo,TYo,w5,w2e,MYo,EYo,NW,CYo,wYo,AYo,A5,LYo,A2e,yYo,xYo,L2e,$Yo,kYo,L5,vUe,Fd,y5,y2e,uy,SYo,x2e,RYo,FUe,qo,by,PYo,Td,BYo,qW,IYo,NYo,jW,qYo,jYo,DYo,vy,GYo,$2e,OYo,VYo,XYo,bt,Fy,zYo,k2e,WYo,QYo,Md,UYo,S2e,HYo,JYo,DW,YYo,KYo,ZYo,x5,eKo,ao,Ty,oKo,R2e,rKo,tKo,Ha,aKo,P2e,nKo,sKo,B2e,lKo,iKo,I2e,dKo,cKo,fKo,Z,$5,N2e,mKo,gKo,GW,hKo,pKo,_Ko,k5,q2e,uKo,bKo,OW,vKo,FKo,TKo,S5,j2e,MKo,EKo,VW,CKo,wKo,AKo,R5,D2e,LKo,yKo,XW,xKo,$Ko,kKo,P5,G2e,SKo,RKo,zW,PKo,BKo,IKo,B5,O2e,NKo,qKo,WW,jKo,DKo,GKo,I5,V2e,OKo,VKo,QW,XKo,zKo,WKo,N5,X2e,QKo,UKo,UW,HKo,JKo,YKo,q5,z2e,KKo,ZKo,HW,eZo,oZo,rZo,j5,W2e,tZo,aZo,JW,nZo,sZo,lZo,D5,Q2e,iZo,dZo,YW,cZo,fZo,mZo,G5,U2e,gZo,hZo,KW,pZo,_Zo,uZo,O5,H2e,bZo,vZo,ZW,FZo,TZo,MZo,V5,J2e,EZo,CZo,eQ,wZo,AZo,LZo,X5,Y2e,yZo,xZo,oQ,$Zo,kZo,SZo,z5,K2e,RZo,PZo,rQ,BZo,IZo,NZo,W5,Z2e,qZo,jZo,tQ,DZo,GZo,OZo,Q5,ebe,VZo,XZo,aQ,zZo,WZo,QZo,U5,obe,UZo,HZo,nQ,JZo,YZo,KZo,H5,rbe,ZZo,eer,sQ,oer,rer,ter,J5,tbe,aer,ner,lQ,ser,ler,ier,Y5,abe,der,cer,iQ,fer,mer,ger,K5,nbe,her,per,dQ,_er,uer,ber,Z5,sbe,ver,Fer,cQ,Ter,Mer,Eer,eF,lbe,Cer,wer,fQ,Aer,Ler,yer,oF,ibe,xer,$er,mQ,ker,Ser,Rer,rF,dbe,Per,Ber,gQ,Ier,Ner,qer,tF,cbe,jer,Der,hQ,Ger,Oer,Ver,aF,fbe,Xer,zer,pQ,Wer,Qer,Uer,nF,mbe,Her,Jer,_Q,Yer,Ker,Zer,sF,gbe,eor,oor,uQ,ror,tor,aor,lF,nor,hbe,sor,lor,pbe,ior,dor,iF,TUe,Ed,dF,_be,My,cor,ube,mor,MUe,jo,Ey,gor,Cd,hor,bQ,por,_or,vQ,uor,bor,vor,Cy,For,bbe,Tor,Mor,Eor,vt,wy,Cor,vbe,wor,Aor,wd,Lor,Fbe,yor,xor,FQ,$or,kor,Sor,cF,Ror,no,Ay,Por,Tbe,Bor,Ior,Ja,Nor,Mbe,qor,jor,Ebe,Dor,Gor,Cbe,Oor,Vor,Xor,Do,fF,wbe,zor,Wor,TQ,Qor,Uor,Hor,mF,Abe,Jor,Yor,MQ,Kor,Zor,err,gF,Lbe,orr,rrr,EQ,trr,arr,nrr,hF,ybe,srr,lrr,CQ,irr,drr,crr,pF,xbe,frr,mrr,wQ,grr,hrr,prr,_F,$be,_rr,urr,AQ,brr,vrr,Frr,uF,Trr,kbe,Mrr,Err,Sbe,Crr,wrr,bF,EUe,Ad,vF,Rbe,Ly,Arr,Pbe,Lrr,CUe,Go,yy,yrr,Ld,xrr,LQ,$rr,krr,yQ,Srr,Rrr,Prr,xy,Brr,Bbe,Irr,Nrr,qrr,Ft,$y,jrr,Ibe,Drr,Grr,yd,Orr,Nbe,Vrr,Xrr,xQ,zrr,Wrr,Qrr,FF,Urr,so,ky,Hrr,qbe,Jrr,Yrr,Ya,Krr,jbe,Zrr,etr,Dbe,otr,rtr,Gbe,ttr,atr,ntr,H,TF,Obe,str,ltr,$Q,itr,dtr,ctr,MF,Vbe,ftr,mtr,kQ,gtr,htr,ptr,EF,Xbe,_tr,utr,SQ,btr,vtr,Ftr,CF,zbe,Ttr,Mtr,RQ,Etr,Ctr,wtr,wF,Wbe,Atr,Ltr,PQ,ytr,xtr,$tr,AF,Qbe,ktr,Str,BQ,Rtr,Ptr,Btr,LF,Ube,Itr,Ntr,IQ,qtr,jtr,Dtr,yF,Hbe,Gtr,Otr,NQ,Vtr,Xtr,ztr,xF,Jbe,Wtr,Qtr,qQ,Utr,Htr,Jtr,$F,Ybe,Ytr,Ktr,jQ,Ztr,ear,oar,kF,Kbe,rar,tar,DQ,aar,nar,sar,SF,Zbe,lar,iar,GQ,dar,car,far,RF,eve,mar,gar,OQ,har,par,_ar,PF,ove,uar,bar,VQ,Far,Tar,Mar,BF,rve,Ear,Car,XQ,war,Aar,Lar,IF,tve,yar,xar,zQ,$ar,kar,Sar,NF,ave,Rar,Par,WQ,Bar,Iar,Nar,qF,nve,qar,jar,QQ,Dar,Gar,Oar,jF,sve,Var,Xar,UQ,zar,War,Qar,DF,lve,Uar,Har,HQ,Jar,Yar,Kar,GF,ive,Zar,enr,JQ,onr,rnr,tnr,OF,dve,anr,nnr,YQ,snr,lnr,inr,VF,cve,dnr,cnr,KQ,fnr,mnr,gnr,XF,fve,hnr,pnr,ZQ,_nr,unr,bnr,zF,mve,vnr,Fnr,eU,Tnr,Mnr,Enr,WF,gve,Cnr,wnr,oU,Anr,Lnr,ynr,QF,hve,xnr,$nr,rU,knr,Snr,Rnr,UF,pve,Pnr,Bnr,tU,Inr,Nnr,qnr,HF,_ve,jnr,Dnr,aU,Gnr,Onr,Vnr,JF,uve,Xnr,znr,nU,Wnr,Qnr,Unr,YF,bve,Hnr,Jnr,sU,Ynr,Knr,Znr,KF,vve,esr,osr,lU,rsr,tsr,asr,ZF,Fve,nsr,ssr,iU,lsr,isr,dsr,eT,Tve,csr,fsr,dU,msr,gsr,hsr,oT,Mve,psr,_sr,cU,usr,bsr,vsr,rT,Eve,Fsr,Tsr,fU,Msr,Esr,Csr,tT,Cve,wsr,Asr,mU,Lsr,ysr,xsr,aT,$sr,wve,ksr,Ssr,Ave,Rsr,Psr,nT,wUe,xd,sT,Lve,Sy,Bsr,yve,Isr,AUe,Oo,Ry,Nsr,$d,qsr,gU,jsr,Dsr,hU,Gsr,Osr,Vsr,Py,Xsr,xve,zsr,Wsr,Qsr,Tt,By,Usr,$ve,Hsr,Jsr,kd,Ysr,kve,Ksr,Zsr,pU,elr,olr,rlr,lT,tlr,lo,Iy,alr,Sve,nlr,slr,Ka,llr,Rve,ilr,dlr,Pve,clr,flr,Bve,mlr,glr,hlr,V,iT,Ive,plr,_lr,_U,ulr,blr,vlr,dT,Nve,Flr,Tlr,uU,Mlr,Elr,Clr,cT,qve,wlr,Alr,bU,Llr,ylr,xlr,fT,jve,$lr,klr,vU,Slr,Rlr,Plr,mT,Dve,Blr,Ilr,FU,Nlr,qlr,jlr,gT,Gve,Dlr,Glr,TU,Olr,Vlr,Xlr,hT,Ove,zlr,Wlr,MU,Qlr,Ulr,Hlr,pT,Vve,Jlr,Ylr,EU,Klr,Zlr,eir,_T,Xve,oir,rir,CU,tir,air,nir,uT,zve,sir,lir,wU,iir,dir,cir,bT,Wve,fir,mir,AU,gir,hir,pir,vT,Qve,_ir,uir,LU,bir,vir,Fir,FT,Uve,Tir,Mir,yU,Eir,Cir,wir,TT,Hve,Air,Lir,xU,yir,xir,$ir,MT,Jve,kir,Sir,$U,Rir,Pir,Bir,ET,Yve,Iir,Nir,kU,qir,jir,Dir,CT,Kve,Gir,Oir,SU,Vir,Xir,zir,wT,Zve,Wir,Qir,RU,Uir,Hir,Jir,AT,e5e,Yir,Kir,PU,Zir,edr,odr,LT,o5e,rdr,tdr,BU,adr,ndr,sdr,yT,r5e,ldr,idr,IU,ddr,cdr,fdr,xT,t5e,mdr,gdr,NU,hdr,pdr,_dr,$T,a5e,udr,bdr,qU,vdr,Fdr,Tdr,kT,n5e,Mdr,Edr,jU,Cdr,wdr,Adr,ST,s5e,Ldr,ydr,DU,xdr,$dr,kdr,RT,l5e,Sdr,Rdr,GU,Pdr,Bdr,Idr,PT,i5e,Ndr,qdr,OU,jdr,Ddr,Gdr,BT,d5e,Odr,Vdr,VU,Xdr,zdr,Wdr,IT,c5e,Qdr,Udr,XU,Hdr,Jdr,Ydr,NT,f5e,Kdr,Zdr,zU,ecr,ocr,rcr,qT,m5e,tcr,acr,WU,ncr,scr,lcr,jT,g5e,icr,dcr,QU,ccr,fcr,mcr,DT,h5e,gcr,hcr,UU,pcr,_cr,ucr,GT,p5e,bcr,vcr,HU,Fcr,Tcr,Mcr,OT,_5e,Ecr,Ccr,JU,wcr,Acr,Lcr,VT,u5e,ycr,xcr,YU,$cr,kcr,Scr,XT,b5e,Rcr,Pcr,KU,Bcr,Icr,Ncr,zT,v5e,qcr,jcr,ZU,Dcr,Gcr,Ocr,WT,F5e,Vcr,Xcr,eH,zcr,Wcr,Qcr,QT,T5e,Ucr,Hcr,oH,Jcr,Ycr,Kcr,UT,M5e,Zcr,efr,rH,ofr,rfr,tfr,HT,E5e,afr,nfr,tH,sfr,lfr,ifr,JT,C5e,dfr,cfr,aH,ffr,mfr,gfr,YT,hfr,w5e,pfr,_fr,A5e,ufr,bfr,KT,LUe,Sd,ZT,L5e,Ny,vfr,y5e,Ffr,yUe,Vo,qy,Tfr,Rd,Mfr,nH,Efr,Cfr,sH,wfr,Afr,Lfr,jy,yfr,x5e,xfr,$fr,kfr,Mt,Dy,Sfr,$5e,Rfr,Pfr,Pd,Bfr,k5e,Ifr,Nfr,lH,qfr,jfr,Dfr,e7,Gfr,io,Gy,Ofr,S5e,Vfr,Xfr,Za,zfr,R5e,Wfr,Qfr,P5e,Ufr,Hfr,B5e,Jfr,Yfr,Kfr,I5e,o7,N5e,Zfr,emr,iH,omr,rmr,tmr,r7,amr,q5e,nmr,smr,j5e,lmr,imr,t7,xUe,Bd,a7,D5e,Oy,dmr,G5e,cmr,$Ue,Xo,Vy,fmr,Id,mmr,dH,gmr,hmr,cH,pmr,_mr,umr,Xy,bmr,O5e,vmr,Fmr,Tmr,Et,zy,Mmr,V5e,Emr,Cmr,Nd,wmr,X5e,Amr,Lmr,fH,ymr,xmr,$mr,n7,kmr,co,Wy,Smr,z5e,Rmr,Pmr,en,Bmr,W5e,Imr,Nmr,Q5e,qmr,jmr,U5e,Dmr,Gmr,Omr,be,s7,H5e,Vmr,Xmr,mH,zmr,Wmr,Qmr,l7,J5e,Umr,Hmr,gH,Jmr,Ymr,Kmr,i7,Y5e,Zmr,egr,hH,ogr,rgr,tgr,d7,K5e,agr,ngr,pH,sgr,lgr,igr,sl,Z5e,dgr,cgr,_H,fgr,mgr,uH,ggr,hgr,pgr,c7,eFe,_gr,ugr,bH,bgr,vgr,Fgr,ll,oFe,Tgr,Mgr,vH,Egr,Cgr,FH,wgr,Agr,Lgr,f7,rFe,ygr,xgr,TH,$gr,kgr,Sgr,Ct,tFe,Rgr,Pgr,MH,Bgr,Igr,EH,Ngr,qgr,CH,jgr,Dgr,Ggr,m7,aFe,Ogr,Vgr,wH,Xgr,zgr,Wgr,g7,nFe,Qgr,Ugr,AH,Hgr,Jgr,Ygr,h7,sFe,Kgr,Zgr,LH,ehr,ohr,rhr,p7,lFe,thr,ahr,yH,nhr,shr,lhr,_7,iFe,ihr,dhr,xH,chr,fhr,mhr,u7,dFe,ghr,hhr,$H,phr,_hr,uhr,b7,cFe,bhr,vhr,kH,Fhr,Thr,Mhr,v7,fFe,Ehr,Chr,SH,whr,Ahr,Lhr,F7,yhr,mFe,xhr,$hr,gFe,khr,Shr,T7,kUe,qd,M7,hFe,Qy,Rhr,pFe,Phr,SUe,zo,Uy,Bhr,jd,Ihr,RH,Nhr,qhr,PH,jhr,Dhr,Ghr,Hy,Ohr,_Fe,Vhr,Xhr,zhr,wt,Jy,Whr,uFe,Qhr,Uhr,Dd,Hhr,bFe,Jhr,Yhr,BH,Khr,Zhr,epr,E7,opr,fo,Yy,rpr,vFe,tpr,apr,on,npr,FFe,spr,lpr,TFe,ipr,dpr,MFe,cpr,fpr,mpr,EFe,C7,CFe,gpr,hpr,IH,ppr,_pr,upr,w7,bpr,wFe,vpr,Fpr,AFe,Tpr,Mpr,A7,RUe,Gd,L7,LFe,Ky,Epr,yFe,Cpr,PUe,Wo,Zy,wpr,Od,Apr,NH,Lpr,ypr,qH,xpr,$pr,kpr,ex,Spr,xFe,Rpr,Ppr,Bpr,At,ox,Ipr,$Fe,Npr,qpr,Vd,jpr,kFe,Dpr,Gpr,jH,Opr,Vpr,Xpr,y7,zpr,mo,rx,Wpr,SFe,Qpr,Upr,rn,Hpr,RFe,Jpr,Ypr,PFe,Kpr,Zpr,BFe,e_r,o_r,r_r,IFe,x7,NFe,t_r,a_r,DH,n_r,s_r,l_r,$7,i_r,qFe,d_r,c_r,jFe,f_r,m_r,k7,BUe,Xd,S7,DFe,tx,g_r,GFe,h_r,IUe,Qo,ax,p_r,zd,__r,GH,u_r,b_r,OH,v_r,F_r,T_r,nx,M_r,OFe,E_r,C_r,w_r,Lt,sx,A_r,VFe,L_r,y_r,Wd,x_r,XFe,$_r,k_r,VH,S_r,R_r,P_r,R7,B_r,go,lx,I_r,zFe,N_r,q_r,tn,j_r,WFe,D_r,G_r,QFe,O_r,V_r,UFe,X_r,z_r,W_r,HFe,P7,JFe,Q_r,U_r,XH,H_r,J_r,Y_r,B7,K_r,YFe,Z_r,eur,KFe,our,rur,I7,NUe,Qd,N7,ZFe,ix,tur,eTe,aur,qUe,Uo,dx,nur,Ud,sur,zH,lur,iur,WH,dur,cur,fur,cx,mur,oTe,gur,hur,pur,yt,fx,_ur,rTe,uur,bur,Hd,vur,tTe,Fur,Tur,QH,Mur,Eur,Cur,q7,wur,ho,mx,Aur,aTe,Lur,yur,an,xur,nTe,$ur,kur,sTe,Sur,Rur,lTe,Pur,Bur,Iur,Pe,j7,iTe,Nur,qur,UH,jur,Dur,Gur,D7,dTe,Our,Vur,HH,Xur,zur,Wur,G7,cTe,Qur,Uur,JH,Hur,Jur,Yur,O7,fTe,Kur,Zur,YH,e1r,o1r,r1r,V7,mTe,t1r,a1r,KH,n1r,s1r,l1r,X7,gTe,i1r,d1r,ZH,c1r,f1r,m1r,z7,hTe,g1r,h1r,eJ,p1r,_1r,u1r,W7,pTe,b1r,v1r,oJ,F1r,T1r,M1r,Q7,_Te,E1r,C1r,rJ,w1r,A1r,L1r,U7,y1r,uTe,x1r,$1r,bTe,k1r,S1r,H7,jUe,Jd,J7,vTe,gx,R1r,FTe,P1r,DUe,Ho,hx,B1r,Yd,I1r,tJ,N1r,q1r,aJ,j1r,D1r,G1r,px,O1r,TTe,V1r,X1r,z1r,xt,_x,W1r,MTe,Q1r,U1r,Kd,H1r,ETe,J1r,Y1r,nJ,K1r,Z1r,e2r,Y7,o2r,po,ux,r2r,CTe,t2r,a2r,nn,n2r,wTe,s2r,l2r,ATe,i2r,d2r,LTe,c2r,f2r,m2r,st,K7,yTe,g2r,h2r,sJ,p2r,_2r,u2r,Z7,xTe,b2r,v2r,lJ,F2r,T2r,M2r,e8,$Te,E2r,C2r,iJ,w2r,A2r,L2r,o8,kTe,y2r,x2r,dJ,$2r,k2r,S2r,r8,STe,R2r,P2r,cJ,B2r,I2r,N2r,t8,q2r,RTe,j2r,D2r,PTe,G2r,O2r,a8,GUe,Zd,n8,BTe,bx,V2r,ITe,X2r,OUe,Jo,vx,z2r,ec,W2r,fJ,Q2r,U2r,mJ,H2r,J2r,Y2r,Fx,K2r,NTe,Z2r,ebr,obr,$t,Tx,rbr,qTe,tbr,abr,oc,nbr,jTe,sbr,lbr,gJ,ibr,dbr,cbr,s8,fbr,_o,Mx,mbr,DTe,gbr,hbr,sn,pbr,GTe,_br,ubr,OTe,bbr,vbr,VTe,Fbr,Tbr,Mbr,Le,l8,XTe,Ebr,Cbr,hJ,wbr,Abr,Lbr,i8,zTe,ybr,xbr,pJ,$br,kbr,Sbr,d8,WTe,Rbr,Pbr,_J,Bbr,Ibr,Nbr,c8,QTe,qbr,jbr,uJ,Dbr,Gbr,Obr,f8,UTe,Vbr,Xbr,bJ,zbr,Wbr,Qbr,m8,HTe,Ubr,Hbr,vJ,Jbr,Ybr,Kbr,g8,JTe,Zbr,evr,FJ,ovr,rvr,tvr,h8,YTe,avr,nvr,TJ,svr,lvr,ivr,p8,KTe,dvr,cvr,MJ,fvr,mvr,gvr,_8,ZTe,hvr,pvr,EJ,_vr,uvr,bvr,u8,vvr,e7e,Fvr,Tvr,o7e,Mvr,Evr,b8,VUe,rc,v8,r7e,Ex,Cvr,t7e,wvr,XUe,Yo,Cx,Avr,tc,Lvr,CJ,yvr,xvr,wJ,$vr,kvr,Svr,wx,Rvr,a7e,Pvr,Bvr,Ivr,kt,Ax,Nvr,n7e,qvr,jvr,ac,Dvr,s7e,Gvr,Ovr,AJ,Vvr,Xvr,zvr,F8,Wvr,uo,Lx,Qvr,l7e,Uvr,Hvr,ln,Jvr,i7e,Yvr,Kvr,d7e,Zvr,e5r,c7e,o5r,r5r,t5r,yx,T8,f7e,a5r,n5r,LJ,s5r,l5r,i5r,M8,m7e,d5r,c5r,yJ,f5r,m5r,g5r,E8,h5r,g7e,p5r,_5r,h7e,u5r,b5r,C8,zUe,nc,w8,p7e,xx,v5r,_7e,F5r,WUe,Ko,$x,T5r,sc,M5r,xJ,E5r,C5r,$J,w5r,A5r,L5r,kx,y5r,u7e,x5r,$5r,k5r,St,Sx,S5r,b7e,R5r,P5r,lc,B5r,v7e,I5r,N5r,kJ,q5r,j5r,D5r,A8,G5r,bo,Rx,O5r,F7e,V5r,X5r,dn,z5r,T7e,W5r,Q5r,M7e,U5r,H5r,E7e,J5r,Y5r,K5r,lt,L8,C7e,Z5r,eFr,SJ,oFr,rFr,tFr,y8,w7e,aFr,nFr,RJ,sFr,lFr,iFr,x8,A7e,dFr,cFr,PJ,fFr,mFr,gFr,$8,L7e,hFr,pFr,BJ,_Fr,uFr,bFr,k8,y7e,vFr,FFr,IJ,TFr,MFr,EFr,S8,CFr,x7e,wFr,AFr,$7e,LFr,yFr,R8,QUe,ic,P8,k7e,Px,xFr,S7e,$Fr,UUe,Zo,Bx,kFr,dc,SFr,NJ,RFr,PFr,qJ,BFr,IFr,NFr,Ix,qFr,R7e,jFr,DFr,GFr,Rt,Nx,OFr,P7e,VFr,XFr,cc,zFr,B7e,WFr,QFr,jJ,UFr,HFr,JFr,B8,YFr,vo,qx,KFr,I7e,ZFr,eTr,cn,oTr,N7e,rTr,tTr,q7e,aTr,nTr,j7e,sTr,lTr,iTr,fn,I8,D7e,dTr,cTr,DJ,fTr,mTr,gTr,N8,G7e,hTr,pTr,GJ,_Tr,uTr,bTr,q8,O7e,vTr,FTr,OJ,TTr,MTr,ETr,j8,V7e,CTr,wTr,VJ,ATr,LTr,yTr,D8,xTr,X7e,$Tr,kTr,z7e,STr,RTr,G8,HUe,fc,O8,W7e,jx,PTr,Q7e,BTr,JUe,er,Dx,ITr,mc,NTr,XJ,qTr,jTr,zJ,DTr,GTr,OTr,Gx,VTr,U7e,XTr,zTr,WTr,Pt,Ox,QTr,H7e,UTr,HTr,gc,JTr,J7e,YTr,KTr,WJ,ZTr,e7r,o7r,V8,r7r,Fo,Vx,t7r,Y7e,a7r,n7r,mn,s7r,K7e,l7r,i7r,Z7e,d7r,c7r,e8e,f7r,m7r,g7r,Xx,X8,o8e,h7r,p7r,QJ,_7r,u7r,b7r,z8,r8e,v7r,F7r,UJ,T7r,M7r,E7r,W8,C7r,t8e,w7r,A7r,a8e,L7r,y7r,Q8,YUe,hc,U8,n8e,zx,x7r,s8e,$7r,KUe,or,Wx,k7r,pc,S7r,HJ,R7r,P7r,JJ,B7r,I7r,N7r,Qx,q7r,l8e,j7r,D7r,G7r,Bt,Ux,O7r,i8e,V7r,X7r,_c,z7r,d8e,W7r,Q7r,YJ,U7r,H7r,J7r,H8,Y7r,To,Hx,K7r,c8e,Z7r,e8r,gn,o8r,f8e,r8r,t8r,m8e,a8r,n8r,g8e,s8r,l8r,i8r,h8e,J8,p8e,d8r,c8r,KJ,f8r,m8r,g8r,Y8,h8r,_8e,p8r,_8r,u8e,u8r,b8r,K8,ZUe,uc,Z8,b8e,Jx,v8r,v8e,F8r,eHe,rr,Yx,T8r,bc,M8r,ZJ,E8r,C8r,eY,w8r,A8r,L8r,Kx,y8r,F8e,x8r,$8r,k8r,It,Zx,S8r,T8e,R8r,P8r,vc,B8r,M8e,I8r,N8r,oY,q8r,j8r,D8r,e9,G8r,Mo,e$,O8r,E8e,V8r,X8r,hn,z8r,C8e,W8r,Q8r,w8e,U8r,H8r,A8e,J8r,Y8r,K8r,it,o9,L8e,Z8r,e9r,rY,o9r,r9r,t9r,r9,y8e,a9r,n9r,tY,s9r,l9r,i9r,t9,x8e,d9r,c9r,aY,f9r,m9r,g9r,a9,$8e,h9r,p9r,nY,_9r,u9r,b9r,n9,k8e,v9r,F9r,sY,T9r,M9r,E9r,s9,C9r,S8e,w9r,A9r,R8e,L9r,y9r,l9,oHe,Fc,i9,P8e,o$,x9r,B8e,$9r,rHe,tr,r$,k9r,Tc,S9r,lY,R9r,P9r,iY,B9r,I9r,N9r,t$,q9r,I8e,j9r,D9r,G9r,Nt,a$,O9r,N8e,V9r,X9r,Mc,z9r,q8e,W9r,Q9r,dY,U9r,H9r,J9r,d9,Y9r,Eo,n$,K9r,j8e,Z9r,eMr,pn,oMr,D8e,rMr,tMr,G8e,aMr,nMr,O8e,sMr,lMr,iMr,V8e,c9,X8e,dMr,cMr,cY,fMr,mMr,gMr,f9,hMr,z8e,pMr,_Mr,W8e,uMr,bMr,m9,tHe,Ec,g9,Q8e,s$,vMr,U8e,FMr,aHe,ar,l$,TMr,Cc,MMr,fY,EMr,CMr,mY,wMr,AMr,LMr,i$,yMr,H8e,xMr,$Mr,kMr,qt,d$,SMr,J8e,RMr,PMr,wc,BMr,Y8e,IMr,NMr,gY,qMr,jMr,DMr,h9,GMr,Rr,c$,OMr,K8e,VMr,XMr,_n,zMr,Z8e,WMr,QMr,e9e,UMr,HMr,o9e,JMr,YMr,KMr,q,p9,r9e,ZMr,eEr,hY,oEr,rEr,tEr,_9,t9e,aEr,nEr,pY,sEr,lEr,iEr,u9,a9e,dEr,cEr,_Y,fEr,mEr,gEr,b9,n9e,hEr,pEr,uY,_Er,uEr,bEr,v9,s9e,vEr,FEr,bY,TEr,MEr,EEr,F9,l9e,CEr,wEr,vY,AEr,LEr,yEr,T9,i9e,xEr,$Er,FY,kEr,SEr,REr,M9,d9e,PEr,BEr,TY,IEr,NEr,qEr,E9,c9e,jEr,DEr,MY,GEr,OEr,VEr,C9,f9e,XEr,zEr,EY,WEr,QEr,UEr,w9,m9e,HEr,JEr,CY,YEr,KEr,ZEr,A9,g9e,e4r,o4r,wY,r4r,t4r,a4r,L9,h9e,n4r,s4r,AY,l4r,i4r,d4r,y9,p9e,c4r,f4r,LY,m4r,g4r,h4r,x9,_9e,p4r,_4r,yY,u4r,b4r,v4r,$9,u9e,F4r,T4r,xY,M4r,E4r,C4r,k9,b9e,w4r,A4r,$Y,L4r,y4r,x4r,S9,v9e,$4r,k4r,kY,S4r,R4r,P4r,R9,F9e,B4r,I4r,SY,N4r,q4r,j4r,il,T9e,D4r,G4r,RY,O4r,V4r,PY,X4r,z4r,W4r,P9,M9e,Q4r,U4r,BY,H4r,J4r,Y4r,B9,E9e,K4r,Z4r,IY,eCr,oCr,rCr,I9,C9e,tCr,aCr,NY,nCr,sCr,lCr,N9,w9e,iCr,dCr,qY,cCr,fCr,mCr,q9,A9e,gCr,hCr,jY,pCr,_Cr,uCr,j9,L9e,bCr,vCr,DY,FCr,TCr,MCr,D9,y9e,ECr,CCr,GY,wCr,ACr,LCr,G9,x9e,yCr,xCr,OY,$Cr,kCr,SCr,O9,$9e,RCr,PCr,VY,BCr,ICr,NCr,V9,k9e,qCr,jCr,XY,DCr,GCr,OCr,X9,S9e,VCr,XCr,zY,zCr,WCr,QCr,z9,R9e,UCr,HCr,WY,JCr,YCr,KCr,W9,P9e,ZCr,e3r,QY,o3r,r3r,t3r,Q9,B9e,a3r,n3r,UY,s3r,l3r,i3r,U9,I9e,d3r,c3r,HY,f3r,m3r,g3r,H9,N9e,h3r,p3r,JY,_3r,u3r,b3r,J9,q9e,v3r,F3r,YY,T3r,M3r,E3r,Y9,j9e,C3r,w3r,KY,A3r,L3r,y3r,K9,D9e,x3r,$3r,ZY,k3r,S3r,R3r,Z9,G9e,P3r,B3r,eK,I3r,N3r,q3r,eM,O9e,j3r,D3r,oK,G3r,O3r,V3r,oM,V9e,X3r,z3r,rK,W3r,Q3r,U3r,rM,X9e,H3r,J3r,tK,Y3r,K3r,Z3r,tM,z9e,e0r,o0r,aK,r0r,t0r,a0r,aM,W9e,n0r,s0r,nK,l0r,i0r,d0r,nM,Q9e,c0r,f0r,sK,m0r,g0r,h0r,sM,U9e,p0r,_0r,lK,u0r,b0r,v0r,lM,H9e,F0r,T0r,iK,M0r,E0r,C0r,iM,J9e,w0r,A0r,dK,L0r,y0r,x0r,dM,Y9e,$0r,k0r,cK,S0r,R0r,P0r,cM,K9e,B0r,I0r,fK,N0r,q0r,j0r,fM,Z9e,D0r,G0r,mK,O0r,V0r,X0r,mM,nHe,Ac,gM,eMe,f$,z0r,oMe,W0r,sHe,nr,m$,Q0r,Lc,U0r,gK,H0r,J0r,hK,Y0r,K0r,Z0r,g$,ewr,rMe,owr,rwr,twr,jt,h$,awr,tMe,nwr,swr,yc,lwr,aMe,iwr,dwr,pK,cwr,fwr,mwr,hM,gwr,Pr,p$,hwr,nMe,pwr,_wr,un,uwr,sMe,bwr,vwr,lMe,Fwr,Twr,iMe,Mwr,Ewr,Cwr,se,pM,dMe,wwr,Awr,_K,Lwr,ywr,xwr,_M,cMe,$wr,kwr,uK,Swr,Rwr,Pwr,uM,fMe,Bwr,Iwr,bK,Nwr,qwr,jwr,bM,mMe,Dwr,Gwr,vK,Owr,Vwr,Xwr,vM,gMe,zwr,Wwr,FK,Qwr,Uwr,Hwr,FM,hMe,Jwr,Ywr,TK,Kwr,Zwr,e6r,TM,pMe,o6r,r6r,MK,t6r,a6r,n6r,MM,_Me,s6r,l6r,EK,i6r,d6r,c6r,EM,uMe,f6r,m6r,CK,g6r,h6r,p6r,CM,bMe,_6r,u6r,wK,b6r,v6r,F6r,wM,vMe,T6r,M6r,AK,E6r,C6r,w6r,AM,FMe,A6r,L6r,LK,y6r,x6r,$6r,LM,TMe,k6r,S6r,yK,R6r,P6r,B6r,yM,MMe,I6r,N6r,xK,q6r,j6r,D6r,xM,EMe,G6r,O6r,$K,V6r,X6r,z6r,$M,CMe,W6r,Q6r,kK,U6r,H6r,J6r,kM,wMe,Y6r,K6r,SK,Z6r,eAr,oAr,SM,AMe,rAr,tAr,RK,aAr,nAr,sAr,RM,LMe,lAr,iAr,PK,dAr,cAr,fAr,PM,yMe,mAr,gAr,BK,hAr,pAr,_Ar,BM,xMe,uAr,bAr,IK,vAr,FAr,TAr,IM,$Me,MAr,EAr,NK,CAr,wAr,AAr,NM,kMe,LAr,yAr,qK,xAr,$Ar,kAr,qM,lHe,xc,jM,SMe,_$,SAr,RMe,RAr,iHe,sr,u$,PAr,$c,BAr,jK,IAr,NAr,DK,qAr,jAr,DAr,b$,GAr,PMe,OAr,VAr,XAr,Dt,v$,zAr,BMe,WAr,QAr,kc,UAr,IMe,HAr,JAr,GK,YAr,KAr,ZAr,DM,eLr,Br,F$,oLr,NMe,rLr,tLr,bn,aLr,qMe,nLr,sLr,jMe,lLr,iLr,DMe,dLr,cLr,fLr,Me,GM,GMe,mLr,gLr,OK,hLr,pLr,_Lr,OM,OMe,uLr,bLr,VK,vLr,FLr,TLr,VM,VMe,MLr,ELr,XK,CLr,wLr,ALr,XM,XMe,LLr,yLr,zK,xLr,$Lr,kLr,zM,zMe,SLr,RLr,WK,PLr,BLr,ILr,WM,WMe,NLr,qLr,QK,jLr,DLr,GLr,QM,QMe,OLr,VLr,UK,XLr,zLr,WLr,UM,UMe,QLr,ULr,HK,HLr,JLr,YLr,HM,HMe,KLr,ZLr,JK,eyr,oyr,ryr,JM,JMe,tyr,ayr,YK,nyr,syr,lyr,YM,YMe,iyr,dyr,KK,cyr,fyr,myr,KM,KMe,gyr,hyr,ZK,pyr,_yr,uyr,ZM,ZMe,byr,vyr,eZ,Fyr,Tyr,Myr,eE,dHe,Sc,oE,eEe,T$,Eyr,oEe,Cyr,cHe,lr,M$,wyr,Rc,Ayr,oZ,Lyr,yyr,rZ,xyr,$yr,kyr,E$,Syr,rEe,Ryr,Pyr,Byr,Gt,C$,Iyr,tEe,Nyr,qyr,Pc,jyr,aEe,Dyr,Gyr,tZ,Oyr,Vyr,Xyr,rE,zyr,Ir,w$,Wyr,nEe,Qyr,Uyr,vn,Hyr,sEe,Jyr,Yyr,lEe,Kyr,Zyr,iEe,exr,oxr,rxr,Be,tE,dEe,txr,axr,aZ,nxr,sxr,lxr,aE,cEe,ixr,dxr,nZ,cxr,fxr,mxr,nE,fEe,gxr,hxr,sZ,pxr,_xr,uxr,dl,mEe,bxr,vxr,lZ,Fxr,Txr,iZ,Mxr,Exr,Cxr,sE,gEe,wxr,Axr,dZ,Lxr,yxr,xxr,lE,hEe,$xr,kxr,cZ,Sxr,Rxr,Pxr,iE,pEe,Bxr,Ixr,fZ,Nxr,qxr,jxr,dE,_Ee,Dxr,Gxr,mZ,Oxr,Vxr,Xxr,cE,uEe,zxr,Wxr,gZ,Qxr,Uxr,Hxr,fE,fHe,Bc,mE,bEe,A$,Jxr,vEe,Yxr,mHe,ir,L$,Kxr,Ic,Zxr,hZ,e$r,o$r,pZ,r$r,t$r,a$r,y$,n$r,FEe,s$r,l$r,i$r,Ot,x$,d$r,TEe,c$r,f$r,Nc,m$r,MEe,g$r,h$r,_Z,p$r,_$r,u$r,gE,b$r,Nr,$$,v$r,EEe,F$r,T$r,Fn,M$r,CEe,E$r,C$r,wEe,w$r,A$r,AEe,L$r,y$r,x$r,k$,hE,LEe,$$r,k$r,uZ,S$r,R$r,P$r,pE,yEe,B$r,I$r,bZ,N$r,q$r,j$r,_E,gHe,qc,uE,xEe,S$,D$r,$Ee,G$r,hHe,dr,R$,O$r,jc,V$r,vZ,X$r,z$r,FZ,W$r,Q$r,U$r,P$,H$r,kEe,J$r,Y$r,K$r,Vt,B$,Z$r,SEe,ekr,okr,Dc,rkr,REe,tkr,akr,TZ,nkr,skr,lkr,bE,ikr,qr,I$,dkr,PEe,ckr,fkr,Tn,mkr,BEe,gkr,hkr,IEe,pkr,_kr,NEe,ukr,bkr,vkr,de,vE,qEe,Fkr,Tkr,MZ,Mkr,Ekr,Ckr,FE,jEe,wkr,Akr,EZ,Lkr,ykr,xkr,TE,DEe,$kr,kkr,CZ,Skr,Rkr,Pkr,ME,GEe,Bkr,Ikr,wZ,Nkr,qkr,jkr,EE,OEe,Dkr,Gkr,AZ,Okr,Vkr,Xkr,CE,VEe,zkr,Wkr,LZ,Qkr,Ukr,Hkr,wE,XEe,Jkr,Ykr,yZ,Kkr,Zkr,eSr,AE,zEe,oSr,rSr,xZ,tSr,aSr,nSr,LE,WEe,sSr,lSr,$Z,iSr,dSr,cSr,yE,QEe,fSr,mSr,kZ,gSr,hSr,pSr,xE,UEe,_Sr,uSr,SZ,bSr,vSr,FSr,$E,HEe,TSr,MSr,RZ,ESr,CSr,wSr,kE,JEe,ASr,LSr,PZ,ySr,xSr,$Sr,SE,YEe,kSr,SSr,BZ,RSr,PSr,BSr,RE,KEe,ISr,NSr,IZ,qSr,jSr,DSr,PE,ZEe,GSr,OSr,NZ,VSr,XSr,zSr,BE,e4e,WSr,QSr,qZ,USr,HSr,JSr,IE,o4e,YSr,KSr,jZ,ZSr,eRr,oRr,NE,r4e,rRr,tRr,DZ,aRr,nRr,sRr,qE,t4e,lRr,iRr,GZ,dRr,cRr,fRr,jE,pHe,Gc,DE,a4e,N$,mRr,n4e,gRr,_He,cr,q$,hRr,Oc,pRr,OZ,_Rr,uRr,VZ,bRr,vRr,FRr,j$,TRr,s4e,MRr,ERr,CRr,Xt,D$,wRr,l4e,ARr,LRr,Vc,yRr,i4e,xRr,$Rr,XZ,kRr,SRr,RRr,GE,PRr,jr,G$,BRr,d4e,IRr,NRr,Mn,qRr,c4e,jRr,DRr,f4e,GRr,ORr,m4e,VRr,XRr,zRr,ye,OE,g4e,WRr,QRr,zZ,URr,HRr,JRr,VE,h4e,YRr,KRr,WZ,ZRr,ePr,oPr,XE,p4e,rPr,tPr,QZ,aPr,nPr,sPr,zE,_4e,lPr,iPr,UZ,dPr,cPr,fPr,WE,u4e,mPr,gPr,HZ,hPr,pPr,_Pr,QE,b4e,uPr,bPr,JZ,vPr,FPr,TPr,UE,v4e,MPr,EPr,YZ,CPr,wPr,APr,HE,F4e,LPr,yPr,KZ,xPr,$Pr,kPr,JE,T4e,SPr,RPr,ZZ,PPr,BPr,IPr,YE,M4e,NPr,qPr,eee,jPr,DPr,GPr,KE,uHe,Xc,ZE,E4e,O$,OPr,C4e,VPr,bHe,fr,V$,XPr,zc,zPr,oee,WPr,QPr,ree,UPr,HPr,JPr,X$,YPr,w4e,KPr,ZPr,eBr,zt,z$,oBr,A4e,rBr,tBr,Wc,aBr,L4e,nBr,sBr,tee,lBr,iBr,dBr,e4,cBr,Dr,W$,fBr,y4e,mBr,gBr,En,hBr,x4e,pBr,_Br,$4e,uBr,bBr,k4e,vBr,FBr,TBr,te,o4,S4e,MBr,EBr,aee,CBr,wBr,ABr,r4,R4e,LBr,yBr,nee,xBr,$Br,kBr,t4,P4e,SBr,RBr,see,PBr,BBr,IBr,a4,B4e,NBr,qBr,lee,jBr,DBr,GBr,n4,I4e,OBr,VBr,iee,XBr,zBr,WBr,s4,N4e,QBr,UBr,dee,HBr,JBr,YBr,l4,q4e,KBr,ZBr,cee,eIr,oIr,rIr,i4,j4e,tIr,aIr,fee,nIr,sIr,lIr,d4,D4e,iIr,dIr,mee,cIr,fIr,mIr,c4,G4e,gIr,hIr,gee,pIr,_Ir,uIr,f4,O4e,bIr,vIr,hee,FIr,TIr,MIr,m4,V4e,EIr,CIr,pee,wIr,AIr,LIr,g4,X4e,yIr,xIr,_ee,$Ir,kIr,SIr,h4,z4e,RIr,PIr,uee,BIr,IIr,NIr,p4,W4e,qIr,jIr,bee,DIr,GIr,OIr,_4,Q4e,VIr,XIr,vee,zIr,WIr,QIr,u4,U4e,UIr,HIr,Fee,JIr,YIr,KIr,b4,H4e,ZIr,eNr,Tee,oNr,rNr,tNr,v4,J4e,aNr,nNr,Mee,sNr,lNr,iNr,F4,Y4e,dNr,cNr,Eee,fNr,mNr,gNr,T4,K4e,hNr,pNr,Cee,_Nr,uNr,bNr,M4,Z4e,vNr,FNr,wee,TNr,MNr,ENr,E4,eCe,CNr,wNr,Aee,ANr,LNr,yNr,C4,oCe,xNr,$Nr,Lee,kNr,SNr,RNr,w4,rCe,PNr,BNr,yee,INr,NNr,qNr,A4,tCe,jNr,DNr,xee,GNr,ONr,VNr,L4,vHe,Qc,y4,aCe,Q$,XNr,nCe,zNr,FHe,mr,U$,WNr,Uc,QNr,$ee,UNr,HNr,kee,JNr,YNr,KNr,H$,ZNr,sCe,eqr,oqr,rqr,Wt,J$,tqr,lCe,aqr,nqr,Hc,sqr,iCe,lqr,iqr,See,dqr,cqr,fqr,x4,mqr,Gr,Y$,gqr,dCe,hqr,pqr,Cn,_qr,cCe,uqr,bqr,fCe,vqr,Fqr,mCe,Tqr,Mqr,Eqr,ve,$4,gCe,Cqr,wqr,Ree,Aqr,Lqr,yqr,k4,hCe,xqr,$qr,Pee,kqr,Sqr,Rqr,S4,pCe,Pqr,Bqr,Bee,Iqr,Nqr,qqr,R4,_Ce,jqr,Dqr,Iee,Gqr,Oqr,Vqr,P4,uCe,Xqr,zqr,Nee,Wqr,Qqr,Uqr,B4,bCe,Hqr,Jqr,qee,Yqr,Kqr,Zqr,I4,vCe,ejr,ojr,jee,rjr,tjr,ajr,N4,FCe,njr,sjr,Dee,ljr,ijr,djr,q4,TCe,cjr,fjr,Gee,mjr,gjr,hjr,j4,MCe,pjr,_jr,Oee,ujr,bjr,vjr,D4,ECe,Fjr,Tjr,Vee,Mjr,Ejr,Cjr,G4,CCe,wjr,Ajr,Xee,Ljr,yjr,xjr,O4,wCe,$jr,kjr,zee,Sjr,Rjr,Pjr,V4,ACe,Bjr,Ijr,Wee,Njr,qjr,jjr,X4,LCe,Djr,Gjr,Qee,Ojr,Vjr,Xjr,z4,yCe,zjr,Wjr,Uee,Qjr,Ujr,Hjr,W4,xCe,Jjr,Yjr,Hee,Kjr,Zjr,eDr,Q4,THe,Jc,U4,$Ce,K$,oDr,kCe,rDr,MHe,gr,Z$,tDr,Yc,aDr,Jee,nDr,sDr,Yee,lDr,iDr,dDr,ek,cDr,SCe,fDr,mDr,gDr,Qt,ok,hDr,RCe,pDr,_Dr,Kc,uDr,PCe,bDr,vDr,Kee,FDr,TDr,MDr,H4,EDr,Or,rk,CDr,BCe,wDr,ADr,wn,LDr,ICe,yDr,xDr,NCe,$Dr,kDr,qCe,SDr,RDr,PDr,tk,J4,jCe,BDr,IDr,Zee,NDr,qDr,jDr,Y4,DCe,DDr,GDr,eoe,ODr,VDr,XDr,K4,EHe,Zc,Z4,GCe,ak,zDr,OCe,WDr,CHe,hr,nk,QDr,ef,UDr,ooe,HDr,JDr,roe,YDr,KDr,ZDr,sk,eGr,VCe,oGr,rGr,tGr,Ut,lk,aGr,XCe,nGr,sGr,of,lGr,zCe,iGr,dGr,toe,cGr,fGr,mGr,eC,gGr,Vr,ik,hGr,WCe,pGr,_Gr,An,uGr,QCe,bGr,vGr,UCe,FGr,TGr,HCe,MGr,EGr,CGr,JCe,oC,YCe,wGr,AGr,aoe,LGr,yGr,xGr,rC,wHe,rf,tC,KCe,dk,$Gr,ZCe,kGr,AHe,pr,ck,SGr,tf,RGr,noe,PGr,BGr,soe,IGr,NGr,qGr,fk,jGr,e3e,DGr,GGr,OGr,Ht,mk,VGr,o3e,XGr,zGr,af,WGr,r3e,QGr,UGr,loe,HGr,JGr,YGr,aC,KGr,Xr,gk,ZGr,t3e,eOr,oOr,Ln,rOr,a3e,tOr,aOr,n3e,nOr,sOr,s3e,lOr,iOr,dOr,ce,nC,l3e,cOr,fOr,ioe,mOr,gOr,hOr,sC,i3e,pOr,_Or,doe,uOr,bOr,vOr,lC,d3e,FOr,TOr,coe,MOr,EOr,COr,iC,c3e,wOr,AOr,foe,LOr,yOr,xOr,dC,f3e,$Or,kOr,moe,SOr,ROr,POr,cC,m3e,BOr,IOr,goe,NOr,qOr,jOr,fC,g3e,DOr,GOr,hoe,OOr,VOr,XOr,mC,h3e,zOr,WOr,poe,QOr,UOr,HOr,gC,p3e,JOr,YOr,_oe,KOr,ZOr,eVr,hC,_3e,oVr,rVr,uoe,tVr,aVr,nVr,pC,u3e,sVr,lVr,boe,iVr,dVr,cVr,_C,b3e,fVr,mVr,voe,gVr,hVr,pVr,uC,v3e,_Vr,uVr,Foe,bVr,vVr,FVr,bC,F3e,TVr,MVr,Toe,EVr,CVr,wVr,vC,T3e,AVr,LVr,Moe,yVr,xVr,$Vr,FC,M3e,kVr,SVr,Eoe,RVr,PVr,BVr,TC,E3e,IVr,NVr,Coe,qVr,jVr,DVr,MC,C3e,GVr,OVr,woe,VVr,XVr,zVr,EC,w3e,WVr,QVr,Aoe,UVr,HVr,JVr,CC,A3e,YVr,KVr,Loe,ZVr,eXr,oXr,wC,LHe,nf,AC,L3e,hk,rXr,y3e,tXr,yHe,_r,pk,aXr,sf,nXr,yoe,sXr,lXr,xoe,iXr,dXr,cXr,_k,fXr,x3e,mXr,gXr,hXr,Jt,uk,pXr,$3e,_Xr,uXr,lf,bXr,k3e,vXr,FXr,$oe,TXr,MXr,EXr,LC,CXr,zr,bk,wXr,S3e,AXr,LXr,yn,yXr,R3e,xXr,$Xr,P3e,kXr,SXr,B3e,RXr,PXr,BXr,fe,yC,I3e,IXr,NXr,koe,qXr,jXr,DXr,xC,N3e,GXr,OXr,Soe,VXr,XXr,zXr,$C,q3e,WXr,QXr,Roe,UXr,HXr,JXr,kC,j3e,YXr,KXr,Poe,ZXr,ezr,ozr,SC,D3e,rzr,tzr,Boe,azr,nzr,szr,RC,G3e,lzr,izr,Ioe,dzr,czr,fzr,PC,O3e,mzr,gzr,Noe,hzr,pzr,_zr,BC,V3e,uzr,bzr,qoe,vzr,Fzr,Tzr,IC,X3e,Mzr,Ezr,joe,Czr,wzr,Azr,NC,z3e,Lzr,yzr,Doe,xzr,$zr,kzr,qC,W3e,Szr,Rzr,Goe,Pzr,Bzr,Izr,jC,Q3e,Nzr,qzr,Ooe,jzr,Dzr,Gzr,DC,U3e,Ozr,Vzr,Voe,Xzr,zzr,Wzr,GC,H3e,Qzr,Uzr,Xoe,Hzr,Jzr,Yzr,OC,J3e,Kzr,Zzr,zoe,eWr,oWr,rWr,VC,Y3e,tWr,aWr,Woe,nWr,sWr,lWr,XC,K3e,iWr,dWr,Qoe,cWr,fWr,mWr,zC,Z3e,gWr,hWr,Uoe,pWr,_Wr,uWr,WC,e0e,bWr,vWr,Hoe,FWr,TWr,MWr,QC,o0e,EWr,CWr,Joe,wWr,AWr,LWr,UC,xHe,df,HC,r0e,vk,yWr,t0e,xWr,$He,ur,Fk,$Wr,cf,kWr,Yoe,SWr,RWr,Koe,PWr,BWr,IWr,Tk,NWr,a0e,qWr,jWr,DWr,Yt,Mk,GWr,n0e,OWr,VWr,ff,XWr,s0e,zWr,WWr,Zoe,QWr,UWr,HWr,JC,JWr,Wr,Ek,YWr,l0e,KWr,ZWr,xn,eQr,i0e,oQr,rQr,d0e,tQr,aQr,c0e,nQr,sQr,lQr,f0e,YC,m0e,iQr,dQr,ere,cQr,fQr,mQr,KC,kHe,mf,ZC,g0e,Ck,gQr,h0e,hQr,SHe,br,wk,pQr,gf,_Qr,ore,uQr,bQr,rre,vQr,FQr,TQr,Ak,MQr,p0e,EQr,CQr,wQr,Kt,Lk,AQr,_0e,LQr,yQr,hf,xQr,u0e,$Qr,kQr,tre,SQr,RQr,PQr,e3,BQr,Qr,yk,IQr,b0e,NQr,qQr,$n,jQr,v0e,DQr,GQr,F0e,OQr,VQr,T0e,XQr,zQr,WQr,M0e,o3,E0e,QQr,UQr,are,HQr,JQr,YQr,r3,RHe,pf,t3,C0e,xk,KQr,w0e,ZQr,PHe,vr,$k,eUr,_f,oUr,nre,rUr,tUr,sre,aUr,nUr,sUr,kk,lUr,A0e,iUr,dUr,cUr,Zt,Sk,fUr,L0e,mUr,gUr,uf,hUr,y0e,pUr,_Ur,lre,uUr,bUr,vUr,a3,FUr,Ur,Rk,TUr,x0e,MUr,EUr,kn,CUr,$0e,wUr,AUr,k0e,LUr,yUr,S0e,xUr,$Ur,kUr,re,n3,R0e,SUr,RUr,ire,PUr,BUr,IUr,s3,P0e,NUr,qUr,dre,jUr,DUr,GUr,l3,B0e,OUr,VUr,cre,XUr,zUr,WUr,i3,I0e,QUr,UUr,fre,HUr,JUr,YUr,d3,N0e,KUr,ZUr,mre,eHr,oHr,rHr,c3,q0e,tHr,aHr,gre,nHr,sHr,lHr,f3,j0e,iHr,dHr,hre,cHr,fHr,mHr,m3,D0e,gHr,hHr,pre,pHr,_Hr,uHr,g3,G0e,bHr,vHr,_re,FHr,THr,MHr,h3,O0e,EHr,CHr,ure,wHr,AHr,LHr,p3,V0e,yHr,xHr,bre,$Hr,kHr,SHr,_3,X0e,RHr,PHr,vre,BHr,IHr,NHr,u3,z0e,qHr,jHr,Fre,DHr,GHr,OHr,b3,W0e,VHr,XHr,Tre,zHr,WHr,QHr,v3,Q0e,UHr,HHr,Mre,JHr,YHr,KHr,F3,U0e,ZHr,eJr,Ere,oJr,rJr,tJr,T3,H0e,aJr,nJr,Cre,sJr,lJr,iJr,M3,J0e,dJr,cJr,wre,fJr,mJr,gJr,E3,Y0e,hJr,pJr,Are,_Jr,uJr,bJr,C3,K0e,vJr,FJr,Lre,TJr,MJr,EJr,w3,Z0e,CJr,wJr,yre,AJr,LJr,yJr,A3,ewe,xJr,$Jr,xre,kJr,SJr,RJr,L3,owe,PJr,BJr,$re,IJr,NJr,qJr,y3,rwe,jJr,DJr,kre,GJr,OJr,VJr,x3,twe,XJr,zJr,Sre,WJr,QJr,UJr,$3,awe,HJr,JJr,Rre,YJr,KJr,ZJr,k3,nwe,eYr,oYr,Pre,rYr,tYr,aYr,S3,BHe,bf,R3,swe,Pk,nYr,lwe,sYr,IHe,Fr,Bk,lYr,vf,iYr,Bre,dYr,cYr,Ire,fYr,mYr,gYr,Ik,hYr,iwe,pYr,_Yr,uYr,ea,Nk,bYr,dwe,vYr,FYr,Ff,TYr,cwe,MYr,EYr,Nre,CYr,wYr,AYr,P3,LYr,Hr,qk,yYr,fwe,xYr,$Yr,Sn,kYr,mwe,SYr,RYr,gwe,PYr,BYr,hwe,IYr,NYr,qYr,xe,B3,pwe,jYr,DYr,qre,GYr,OYr,VYr,I3,_we,XYr,zYr,jre,WYr,QYr,UYr,N3,uwe,HYr,JYr,Dre,YYr,KYr,ZYr,q3,bwe,eKr,oKr,Gre,rKr,tKr,aKr,j3,vwe,nKr,sKr,Ore,lKr,iKr,dKr,D3,Fwe,cKr,fKr,Vre,mKr,gKr,hKr,G3,Twe,pKr,_Kr,Xre,uKr,bKr,vKr,O3,Mwe,FKr,TKr,zre,MKr,EKr,CKr,V3,Ewe,wKr,AKr,Wre,LKr,yKr,xKr,X3,Cwe,$Kr,kKr,Qre,SKr,RKr,PKr,z3,NHe,Tf,W3,wwe,jk,BKr,Awe,IKr,qHe,Tr,Dk,NKr,Mf,qKr,Ure,jKr,DKr,Hre,GKr,OKr,VKr,Gk,XKr,Lwe,zKr,WKr,QKr,oa,Ok,UKr,ywe,HKr,JKr,Ef,YKr,xwe,KKr,ZKr,Jre,eZr,oZr,rZr,Q3,tZr,Jr,Vk,aZr,$we,nZr,sZr,Rn,lZr,kwe,iZr,dZr,Swe,cZr,fZr,Rwe,mZr,gZr,hZr,Ee,U3,Pwe,pZr,_Zr,Yre,uZr,bZr,vZr,H3,Bwe,FZr,TZr,Kre,MZr,EZr,CZr,J3,Iwe,wZr,AZr,Zre,LZr,yZr,xZr,Y3,Nwe,$Zr,kZr,ete,SZr,RZr,PZr,K3,qwe,BZr,IZr,ote,NZr,qZr,jZr,Z3,jwe,DZr,GZr,rte,OZr,VZr,XZr,e0,Dwe,zZr,WZr,tte,QZr,UZr,HZr,o0,Gwe,JZr,YZr,ate,KZr,ZZr,eet,r0,Owe,oet,ret,nte,tet,aet,net,t0,Vwe,set,iet,ste,det,cet,fet,a0,Xwe,met,get,lte,het,pet,_et,n0,zwe,uet,bet,ite,vet,Fet,Tet,s0,Wwe,Met,Eet,dte,Cet,wet,Aet,l0,jHe,Cf,i0,Qwe,Xk,Let,Uwe,yet,DHe,Mr,zk,xet,wf,$et,cte,ket,Set,fte,Ret,Pet,Bet,Wk,Iet,Hwe,Net,qet,jet,ra,Qk,Det,Jwe,Get,Oet,Af,Vet,Ywe,Xet,zet,mte,Wet,Qet,Uet,d0,Het,Yr,Uk,Jet,Kwe,Yet,Ket,Pn,Zet,Zwe,eot,oot,e6e,rot,tot,o6e,aot,not,sot,$e,c0,r6e,lot,iot,gte,dot,cot,fot,f0,t6e,mot,got,hte,hot,pot,_ot,m0,a6e,uot,bot,pte,vot,Fot,Tot,g0,n6e,Mot,Eot,_te,Cot,wot,Aot,h0,s6e,Lot,yot,ute,xot,$ot,kot,p0,l6e,Sot,Rot,bte,Pot,Bot,Iot,_0,i6e,Not,qot,vte,jot,Dot,Got,u0,d6e,Oot,Vot,Fte,Xot,zot,Wot,b0,c6e,Qot,Uot,Tte,Hot,Jot,Yot,v0,f6e,Kot,Zot,Mte,ert,ort,rrt,F0,GHe,Lf,T0,m6e,Hk,trt,g6e,art,OHe,Er,Jk,nrt,yf,srt,Ete,lrt,irt,Cte,drt,crt,frt,Yk,mrt,h6e,grt,hrt,prt,ta,Kk,_rt,p6e,urt,brt,xf,vrt,_6e,Frt,Trt,wte,Mrt,Ert,Crt,M0,wrt,Kr,Zk,Art,u6e,Lrt,yrt,Bn,xrt,b6e,$rt,krt,v6e,Srt,Rrt,F6e,Prt,Brt,Irt,ke,E0,T6e,Nrt,qrt,Ate,jrt,Drt,Grt,C0,M6e,Ort,Vrt,Lte,Xrt,zrt,Wrt,w0,E6e,Qrt,Urt,yte,Hrt,Jrt,Yrt,A0,C6e,Krt,Zrt,xte,ett,ott,rtt,L0,w6e,ttt,att,$te,ntt,stt,ltt,y0,A6e,itt,dtt,kte,ctt,ftt,mtt,x0,L6e,gtt,htt,Ste,ptt,_tt,utt,$0,y6e,btt,vtt,Rte,Ftt,Ttt,Mtt,k0,x6e,Ett,Ctt,Pte,wtt,Att,Ltt,S0,$6e,ytt,xtt,Bte,$tt,ktt,Stt,R0,VHe,$f,P0,k6e,eS,Rtt,S6e,Ptt,XHe,Cr,oS,Btt,kf,Itt,Ite,Ntt,qtt,Nte,jtt,Dtt,Gtt,rS,Ott,R6e,Vtt,Xtt,ztt,aa,tS,Wtt,P6e,Qtt,Utt,Sf,Htt,B6e,Jtt,Ytt,qte,Ktt,Ztt,eat,B0,oat,Zr,aS,rat,I6e,tat,aat,In,nat,N6e,sat,lat,q6e,iat,dat,j6e,cat,fat,mat,Se,I0,D6e,gat,hat,jte,pat,_at,uat,N0,G6e,bat,vat,Dte,Fat,Tat,Mat,q0,O6e,Eat,Cat,Gte,wat,Aat,Lat,j0,V6e,yat,xat,Ote,$at,kat,Sat,D0,X6e,Rat,Pat,Vte,Bat,Iat,Nat,G0,z6e,qat,jat,Xte,Dat,Gat,Oat,O0,W6e,Vat,Xat,zte,zat,Wat,Qat,V0,Q6e,Uat,Hat,Wte,Jat,Yat,Kat,X0,U6e,Zat,ent,Qte,ont,rnt,tnt,z0,H6e,ant,nnt,Ute,snt,lnt,int,W0,zHe,Rf,Q0,J6e,nS,dnt,Y6e,cnt,WHe,wr,sS,fnt,Pf,mnt,Hte,gnt,hnt,Jte,pnt,_nt,unt,lS,bnt,K6e,vnt,Fnt,Tnt,na,iS,Mnt,Z6e,Ent,Cnt,Bf,wnt,eAe,Ant,Lnt,Yte,ynt,xnt,$nt,U0,knt,et,dS,Snt,oAe,Rnt,Pnt,Nn,Bnt,rAe,Int,Nnt,tAe,qnt,jnt,aAe,Dnt,Gnt,Ont,Re,H0,nAe,Vnt,Xnt,Kte,znt,Wnt,Qnt,J0,sAe,Unt,Hnt,Zte,Jnt,Ynt,Knt,Y0,lAe,Znt,est,eae,ost,rst,tst,K0,iAe,ast,nst,oae,sst,lst,ist,Z0,dAe,dst,cst,rae,fst,mst,gst,ew,cAe,hst,pst,tae,_st,ust,bst,ow,fAe,vst,Fst,aae,Tst,Mst,Est,rw,mAe,Cst,wst,nae,Ast,Lst,yst,tw,gAe,xst,$st,sae,kst,Sst,Rst,aw,hAe,Pst,Bst,lae,Ist,Nst,qst,nw,QHe,If,sw,pAe,cS,jst,_Ae,Dst,UHe,Ar,fS,Gst,Nf,Ost,iae,Vst,Xst,dae,zst,Wst,Qst,mS,Ust,uAe,Hst,Jst,Yst,sa,gS,Kst,bAe,Zst,elt,qf,olt,vAe,rlt,tlt,cae,alt,nlt,slt,lw,llt,ot,hS,ilt,FAe,dlt,clt,qn,flt,TAe,mlt,glt,MAe,hlt,plt,EAe,_lt,ult,blt,Xe,iw,CAe,vlt,Flt,fae,Tlt,Mlt,Elt,dw,wAe,Clt,wlt,mae,Alt,Llt,ylt,cw,AAe,xlt,$lt,gae,klt,Slt,Rlt,fw,LAe,Plt,Blt,hae,Ilt,Nlt,qlt,mw,yAe,jlt,Dlt,pae,Glt,Olt,Vlt,gw,xAe,Xlt,zlt,_ae,Wlt,Qlt,Ult,hw,$Ae,Hlt,Jlt,uae,Ylt,Klt,Zlt,pw,kAe,eit,oit,bae,rit,tit,ait,_w,HHe,jf,uw,SAe,pS,nit,RAe,sit,JHe,Lr,_S,lit,Df,iit,vae,dit,cit,Fae,fit,mit,git,uS,hit,PAe,pit,_it,uit,la,bS,bit,BAe,vit,Fit,Gf,Tit,IAe,Mit,Eit,Tae,Cit,wit,Ait,bw,Lit,rt,vS,yit,NAe,xit,$it,jn,kit,qAe,Sit,Rit,jAe,Pit,Bit,DAe,Iit,Nit,qit,ze,vw,GAe,jit,Dit,Mae,Git,Oit,Vit,Fw,OAe,Xit,zit,Eae,Wit,Qit,Uit,Tw,VAe,Hit,Jit,Cae,Yit,Kit,Zit,Mw,XAe,edt,odt,wae,rdt,tdt,adt,Ew,zAe,ndt,sdt,Aae,ldt,idt,ddt,Cw,WAe,cdt,fdt,Lae,mdt,gdt,hdt,ww,QAe,pdt,_dt,yae,udt,bdt,vdt,Aw,UAe,Fdt,Tdt,xae,Mdt,Edt,Cdt,Lw,YHe,Of,yw,HAe,FS,wdt,JAe,Adt,KHe,yr,TS,Ldt,Vf,ydt,$ae,xdt,$dt,kae,kdt,Sdt,Rdt,MS,Pdt,YAe,Bdt,Idt,Ndt,ia,ES,qdt,KAe,jdt,Ddt,Xf,Gdt,ZAe,Odt,Vdt,Sae,Xdt,zdt,Wdt,xw,Qdt,tt,CS,Udt,eLe,Hdt,Jdt,Dn,Ydt,oLe,Kdt,Zdt,rLe,ect,oct,tLe,rct,tct,act,aLe,$w,nLe,nct,sct,Rae,lct,ict,dct,kw,ZHe,zf,Sw,sLe,wS,cct,lLe,fct,eJe,xr,AS,mct,Wf,gct,Pae,hct,pct,Bae,_ct,uct,bct,LS,vct,iLe,Fct,Tct,Mct,da,yS,Ect,dLe,Cct,wct,Qf,Act,cLe,Lct,yct,Iae,xct,$ct,kct,Rw,Sct,at,xS,Rct,fLe,Pct,Bct,Gn,Ict,mLe,Nct,qct,gLe,jct,Dct,hLe,Gct,Oct,Vct,$S,Pw,pLe,Xct,zct,Nae,Wct,Qct,Uct,Bw,_Le,Hct,Jct,qae,Yct,Kct,Zct,Iw,oJe,Uf,Nw,uLe,kS,eft,bLe,oft,rJe,$r,SS,rft,Hf,tft,jae,aft,nft,Dae,sft,lft,ift,RS,dft,vLe,cft,fft,mft,ca,PS,gft,FLe,hft,pft,Jf,_ft,TLe,uft,bft,Gae,vft,Fft,Tft,qw,Mft,nt,BS,Eft,MLe,Cft,wft,On,Aft,ELe,Lft,yft,CLe,xft,$ft,wLe,kft,Sft,Rft,ALe,jw,LLe,Pft,Bft,Oae,Ift,Nft,qft,Dw,tJe;return d=new oe({}),ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),pL=new oe({}),_L=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),nm=new jft({props:{warning:!0,$$slots:{default:[sta]},$$scope:{ctx:$}}}),uL=new oe({}),bL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/configuration_auto.py#L625"}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/configuration_auto.py#L648"}}),Th=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[lta]},$$scope:{ctx:$}}}),ML=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/configuration_auto.py#L771"}}),EL=new oe({}),CL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/tokenization_auto.py#L418"}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18597/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/tokenization_auto.py#L432"}}),tp=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ita]},$$scope:{ctx:$}}}),yL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/tokenization_auto.py#L633"}}),xL=new oe({}),$L=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18597/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),Xp=new jft({props:{$$slots:{default:[dta]},$$scope:{ctx:$}}}),zp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[cta]},$$scope:{ctx:$}}}),PL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),BL=new oe({}),IL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/processing_auto.py#L91"}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/processing_auto.py#L105"}}),h_=new jft({props:{$$slots:{default:[fta]},$$scope:{ctx:$}}}),p_=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[mta]},$$scope:{ctx:$}}}),DL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/processing_auto.py#L258"}}),GL=new oe({}),OL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L808"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),b_=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[gta]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),L1=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[hta]},$$scope:{ctx:$}}}),WL=new oe({}),QL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L815"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),x1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[pta]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),C2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[_ta]},$$scope:{ctx:$}}}),YL=new oe({}),KL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L830"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),A2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[uta]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),hb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bta]},$$scope:{ctx:$}}}),ry=new oe({}),ty=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L837"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),_b=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[vta]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),rv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Fta]},$$scope:{ctx:$}}}),ly=new oe({}),iy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L844"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),av=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Tta]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Mta]},$$scope:{ctx:$}}}),my=new oe({}),gy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L853"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Eta]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Cta]},$$scope:{ctx:$}}}),uy=new oe({}),by=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L898"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[wta]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ata]},$$scope:{ctx:$}}}),My=new oe({}),Ey=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L905"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Lta]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[yta]},$$scope:{ctx:$}}}),Ly=new oe({}),yy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L891"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[xta]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$ta]},$$scope:{ctx:$}}}),Sy=new oe({}),Ry=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L862"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kta]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Sta]},$$scope:{ctx:$}}}),Ny=new oe({}),qy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L869"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Rta]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Pta]},$$scope:{ctx:$}}}),Oy=new oe({}),Vy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L914"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18597/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Bta]},$$scope:{ctx:$}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),T7=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ita]},$$scope:{ctx:$}}}),Qy=new oe({}),Uy=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L953"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),E7=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[Nta]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),A7=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[qta]},$$scope:{ctx:$}}}),Ky=new oe({}),Zy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L960"}}),ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),y7=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[jta]},$$scope:{ctx:$}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Dta]},$$scope:{ctx:$}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L880"}}),sx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Gta]},$$scope:{ctx:$}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Ota]},$$scope:{ctx:$}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L967"}}),fx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Vta]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),H7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Xta]},$$scope:{ctx:$}}}),gx=new oe({}),hx=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L990"}}),_x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),Y7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[zta]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Wta]},$$scope:{ctx:$}}}),bx=new oe({}),vx=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L974"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Qta]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Uta]},$$scope:{ctx:$}}}),Ex=new oe({}),Cx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L981"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Hta]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),C8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Jta]},$$scope:{ctx:$}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L999"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),A8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Yta]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),R8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Kta]},$$scope:{ctx:$}}}),Px=new oe({}),Bx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L1006"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),B8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Zta]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),G8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[eaa]},$$scope:{ctx:$}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L946"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),V8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[oaa]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),Q8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[raa]},$$scope:{ctx:$}}}),zx=new oe({}),Wx=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L921"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),H8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[taa]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),K8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[aaa]},$$scope:{ctx:$}}}),Jx=new oe({}),Yx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L928"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),e9=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[naa]},$$scope:{ctx:$}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),l9=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[saa]},$$scope:{ctx:$}}}),o$=new oe({}),r$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_auto.py#L937"}}),a$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),d9=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[laa]},$$scope:{ctx:$}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),m9=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[iaa]},$$scope:{ctx:$}}}),s$=new oe({}),l$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),d$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/cvt#transformers.TFCvtModel">TFCvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),h9=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[daa]},$$scope:{ctx:$}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[caa]},$$scope:{ctx:$}}}),f$=new oe({}),m$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L425"}}),h$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[faa]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[maa]},$$scope:{ctx:$}}}),_$=new oe({}),u$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),v$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[gaa]},$$scope:{ctx:$}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[haa]},$$scope:{ctx:$}}}),T$=new oe({}),M$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),C$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/cvt#transformers.TFCvtForImageClassification">TFCvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18597/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[paa]},$$scope:{ctx:$}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_aa]},$$scope:{ctx:$}}}),A$=new oe({}),L$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),x$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[uaa]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[baa]},$$scope:{ctx:$}}}),S$=new oe({}),R$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L481"}}),B$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[vaa]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Faa]},$$scope:{ctx:$}}}),N$=new oe({}),q$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L488"}}),D$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Taa]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Maa]},$$scope:{ctx:$}}}),O$=new oe({}),V$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),z$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Eaa]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Caa]},$$scope:{ctx:$}}}),Q$=new oe({}),U$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L533"}}),J$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[waa]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Aaa]},$$scope:{ctx:$}}}),K$=new oe({}),Z$=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L540"}}),ok=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),H4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Laa]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[yaa]},$$scope:{ctx:$}}}),ak=new oe({}),nk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L513"}}),lk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xaa]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$aa]},$$scope:{ctx:$}}}),dk=new oe({}),ck=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L524"}}),mk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[kaa]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Saa]},$$scope:{ctx:$}}}),hk=new oe({}),pk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L506"}}),uk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Raa]},$$scope:{ctx:$}}}),bk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Paa]},$$scope:{ctx:$}}}),vk=new oe({}),Fk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L474"}}),Mk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Baa]},$$scope:{ctx:$}}}),Ek=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Iaa]},$$scope:{ctx:$}}}),Ck=new oe({}),wk=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_tf_auto.py#L549"}}),Lk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Naa]},$$scope:{ctx:$}}}),yk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qaa]},$$scope:{ctx:$}}}),xk=new oe({}),$k=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Sk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[jaa]},$$scope:{ctx:$}}}),Rk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Daa]},$$scope:{ctx:$}}}),Pk=new oe({}),Bk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Nk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Gaa]},$$scope:{ctx:$}}}),qk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Oaa]},$$scope:{ctx:$}}}),jk=new oe({}),Dk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Ok=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Vaa]},$$scope:{ctx:$}}}),Vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Xaa]},$$scope:{ctx:$}}}),Xk=new oe({}),zk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Qk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[zaa]},$$scope:{ctx:$}}}),Uk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Waa]},$$scope:{ctx:$}}}),Hk=new oe({}),Jk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Kk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Qaa]},$$scope:{ctx:$}}}),Zk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Uaa]},$$scope:{ctx:$}}}),eS=new oe({}),oS=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),tS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Haa]},$$scope:{ctx:$}}}),aS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Jaa]},$$scope:{ctx:$}}}),nS=new oe({}),sS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),iS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),U0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Yaa]},$$scope:{ctx:$}}}),dS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Kaa]},$$scope:{ctx:$}}}),cS=new oe({}),fS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),gS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Zaa]},$$scope:{ctx:$}}}),hS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ena]},$$scope:{ctx:$}}}),pS=new oe({}),_S=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),bS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ona]},$$scope:{ctx:$}}}),vS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rna]},$$scope:{ctx:$}}}),FS=new oe({}),TS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ES=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tna]},$$scope:{ctx:$}}}),CS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ana]},$$scope:{ctx:$}}}),wS=new oe({}),AS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),yS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[nna]},$$scope:{ctx:$}}}),xS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),Iw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sna]},$$scope:{ctx:$}}}),kS=new oe({}),SS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),PS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18597/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18597/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[lna]},$$scope:{ctx:$}}}),BS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18597/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18597/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18597/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ina]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),em=l(),ft=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),fL=o("from_pretrained()"),om=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),Ue=a("p"),zi=o("Instantiating one of "),Xn=a("a"),mL=o("AutoConfig"),zn=o(", "),Wn=a("a"),gL=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),hL=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),rm=l(),F(ja.$$.fragment),He=l(),Ae=a("p"),nP=o("will create a model that is an instance of "),Ui=a("a"),sP=o("BertModel"),lP=o("."),Lo=l(),Da=a("p"),iP=o("There is one class of "),tm=a("code"),dP=o("AutoModel"),bKe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),UQe=l(),Hi=a("h2"),am=a("a"),Dse=a("span"),F(pL.$$.fragment),vKe=l(),Gse=a("span"),FKe=o("Extending the Auto Classes"),HQe=l(),Un=a("p"),TKe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ose=a("code"),MKe=o("NewModel"),EKe=o(", make sure you have a "),Vse=a("code"),CKe=o("NewModelConfig"),wKe=o(` then you can add those to the auto
classes like this:`),JQe=l(),F(_L.$$.fragment),YQe=l(),cP=a("p"),AKe=o("You will then be able to use the auto classes like you would usually do!"),KQe=l(),F(nm.$$.fragment),ZQe=l(),Ji=a("h2"),sm=a("a"),Xse=a("span"),F(uL.$$.fragment),LKe=l(),zse=a("span"),yKe=o("AutoConfig"),eUe=l(),yo=a("div"),F(bL.$$.fragment),xKe=l(),vL=a("p"),$Ke=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fP=a("a"),kKe=o("from_pretrained()"),SKe=o(" class method."),RKe=l(),FL=a("p"),PKe=o("This class cannot be instantiated directly using "),Wse=a("code"),BKe=o("__init__()"),IKe=o(" (throws an error)."),NKe=l(),kr=a("div"),F(TL.$$.fragment),qKe=l(),Qse=a("p"),jKe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),DKe=l(),Yi=a("p"),GKe=o("The configuration class to instantiate is selected based on the "),Use=a("code"),OKe=o("model_type"),VKe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Hse=a("code"),XKe=o("pretrained_model_name_or_path"),zKe=o(":"),WKe=l(),A=a("ul"),lm=a("li"),Jse=a("strong"),QKe=o("albert"),UKe=o(" \u2014 "),mP=a("a"),HKe=o("AlbertConfig"),JKe=o(" (ALBERT model)"),YKe=l(),im=a("li"),Yse=a("strong"),KKe=o("bart"),ZKe=o(" \u2014 "),gP=a("a"),eZe=o("BartConfig"),oZe=o(" (BART model)"),rZe=l(),dm=a("li"),Kse=a("strong"),tZe=o("beit"),aZe=o(" \u2014 "),hP=a("a"),nZe=o("BeitConfig"),sZe=o(" (BEiT model)"),lZe=l(),cm=a("li"),Zse=a("strong"),iZe=o("bert"),dZe=o(" \u2014 "),pP=a("a"),cZe=o("BertConfig"),fZe=o(" (BERT model)"),mZe=l(),fm=a("li"),ele=a("strong"),gZe=o("bert-generation"),hZe=o(" \u2014 "),_P=a("a"),pZe=o("BertGenerationConfig"),_Ze=o(" (Bert Generation model)"),uZe=l(),mm=a("li"),ole=a("strong"),bZe=o("big_bird"),vZe=o(" \u2014 "),uP=a("a"),FZe=o("BigBirdConfig"),TZe=o(" (BigBird model)"),MZe=l(),gm=a("li"),rle=a("strong"),EZe=o("bigbird_pegasus"),CZe=o(" \u2014 "),bP=a("a"),wZe=o("BigBirdPegasusConfig"),AZe=o(" (BigBird-Pegasus model)"),LZe=l(),hm=a("li"),tle=a("strong"),yZe=o("blenderbot"),xZe=o(" \u2014 "),vP=a("a"),$Ze=o("BlenderbotConfig"),kZe=o(" (Blenderbot model)"),SZe=l(),pm=a("li"),ale=a("strong"),RZe=o("blenderbot-small"),PZe=o(" \u2014 "),FP=a("a"),BZe=o("BlenderbotSmallConfig"),IZe=o(" (BlenderbotSmall model)"),NZe=l(),_m=a("li"),nle=a("strong"),qZe=o("bloom"),jZe=o(" \u2014 "),TP=a("a"),DZe=o("BloomConfig"),GZe=o(" (BLOOM model)"),OZe=l(),um=a("li"),sle=a("strong"),VZe=o("camembert"),XZe=o(" \u2014 "),MP=a("a"),zZe=o("CamembertConfig"),WZe=o(" (CamemBERT model)"),QZe=l(),bm=a("li"),lle=a("strong"),UZe=o("canine"),HZe=o(" \u2014 "),EP=a("a"),JZe=o("CanineConfig"),YZe=o(" (CANINE model)"),KZe=l(),vm=a("li"),ile=a("strong"),ZZe=o("clip"),eeo=o(" \u2014 "),CP=a("a"),oeo=o("CLIPConfig"),reo=o(" (CLIP model)"),teo=l(),Fm=a("li"),dle=a("strong"),aeo=o("codegen"),neo=o(" \u2014 "),wP=a("a"),seo=o("CodeGenConfig"),leo=o(" (CodeGen model)"),ieo=l(),Tm=a("li"),cle=a("strong"),deo=o("convbert"),ceo=o(" \u2014 "),AP=a("a"),feo=o("ConvBertConfig"),meo=o(" (ConvBERT model)"),geo=l(),Mm=a("li"),fle=a("strong"),heo=o("convnext"),peo=o(" \u2014 "),LP=a("a"),_eo=o("ConvNextConfig"),ueo=o(" (ConvNeXT model)"),beo=l(),Em=a("li"),mle=a("strong"),veo=o("ctrl"),Feo=o(" \u2014 "),yP=a("a"),Teo=o("CTRLConfig"),Meo=o(" (CTRL model)"),Eeo=l(),Cm=a("li"),gle=a("strong"),Ceo=o("cvt"),weo=o(" \u2014 "),xP=a("a"),Aeo=o("CvtConfig"),Leo=o(" (CvT model)"),yeo=l(),wm=a("li"),hle=a("strong"),xeo=o("data2vec-audio"),$eo=o(" \u2014 "),$P=a("a"),keo=o("Data2VecAudioConfig"),Seo=o(" (Data2VecAudio model)"),Reo=l(),Am=a("li"),ple=a("strong"),Peo=o("data2vec-text"),Beo=o(" \u2014 "),kP=a("a"),Ieo=o("Data2VecTextConfig"),Neo=o(" (Data2VecText model)"),qeo=l(),Lm=a("li"),_le=a("strong"),jeo=o("data2vec-vision"),Deo=o(" \u2014 "),SP=a("a"),Geo=o("Data2VecVisionConfig"),Oeo=o(" (Data2VecVision model)"),Veo=l(),ym=a("li"),ule=a("strong"),Xeo=o("deberta"),zeo=o(" \u2014 "),RP=a("a"),Weo=o("DebertaConfig"),Qeo=o(" (DeBERTa model)"),Ueo=l(),xm=a("li"),ble=a("strong"),Heo=o("deberta-v2"),Jeo=o(" \u2014 "),PP=a("a"),Yeo=o("DebertaV2Config"),Keo=o(" (DeBERTa-v2 model)"),Zeo=l(),$m=a("li"),vle=a("strong"),eoo=o("decision_transformer"),ooo=o(" \u2014 "),BP=a("a"),roo=o("DecisionTransformerConfig"),too=o(" (Decision Transformer model)"),aoo=l(),km=a("li"),Fle=a("strong"),noo=o("deit"),soo=o(" \u2014 "),IP=a("a"),loo=o("DeiTConfig"),ioo=o(" (DeiT model)"),doo=l(),Sm=a("li"),Tle=a("strong"),coo=o("detr"),foo=o(" \u2014 "),NP=a("a"),moo=o("DetrConfig"),goo=o(" (DETR model)"),hoo=l(),Rm=a("li"),Mle=a("strong"),poo=o("distilbert"),_oo=o(" \u2014 "),qP=a("a"),uoo=o("DistilBertConfig"),boo=o(" (DistilBERT model)"),voo=l(),Pm=a("li"),Ele=a("strong"),Foo=o("donut-swin"),Too=o(" \u2014 "),jP=a("a"),Moo=o("DonutSwinConfig"),Eoo=o(" (DonutSwin model)"),Coo=l(),Bm=a("li"),Cle=a("strong"),woo=o("dpr"),Aoo=o(" \u2014 "),DP=a("a"),Loo=o("DPRConfig"),yoo=o(" (DPR model)"),xoo=l(),Im=a("li"),wle=a("strong"),$oo=o("dpt"),koo=o(" \u2014 "),GP=a("a"),Soo=o("DPTConfig"),Roo=o(" (DPT model)"),Poo=l(),Nm=a("li"),Ale=a("strong"),Boo=o("electra"),Ioo=o(" \u2014 "),OP=a("a"),Noo=o("ElectraConfig"),qoo=o(" (ELECTRA model)"),joo=l(),qm=a("li"),Lle=a("strong"),Doo=o("encoder-decoder"),Goo=o(" \u2014 "),VP=a("a"),Ooo=o("EncoderDecoderConfig"),Voo=o(" (Encoder decoder model)"),Xoo=l(),jm=a("li"),yle=a("strong"),zoo=o("flaubert"),Woo=o(" \u2014 "),XP=a("a"),Qoo=o("FlaubertConfig"),Uoo=o(" (FlauBERT model)"),Hoo=l(),Dm=a("li"),xle=a("strong"),Joo=o("flava"),Yoo=o(" \u2014 "),zP=a("a"),Koo=o("FlavaConfig"),Zoo=o(" (FLAVA model)"),ero=l(),Gm=a("li"),$le=a("strong"),oro=o("fnet"),rro=o(" \u2014 "),WP=a("a"),tro=o("FNetConfig"),aro=o(" (FNet model)"),nro=l(),Om=a("li"),kle=a("strong"),sro=o("fsmt"),lro=o(" \u2014 "),QP=a("a"),iro=o("FSMTConfig"),dro=o(" (FairSeq Machine-Translation model)"),cro=l(),Vm=a("li"),Sle=a("strong"),fro=o("funnel"),mro=o(" \u2014 "),UP=a("a"),gro=o("FunnelConfig"),hro=o(" (Funnel Transformer model)"),pro=l(),Xm=a("li"),Rle=a("strong"),_ro=o("glpn"),uro=o(" \u2014 "),HP=a("a"),bro=o("GLPNConfig"),vro=o(" (GLPN model)"),Fro=l(),zm=a("li"),Ple=a("strong"),Tro=o("gpt2"),Mro=o(" \u2014 "),JP=a("a"),Ero=o("GPT2Config"),Cro=o(" (OpenAI GPT-2 model)"),wro=l(),Wm=a("li"),Ble=a("strong"),Aro=o("gpt_neo"),Lro=o(" \u2014 "),YP=a("a"),yro=o("GPTNeoConfig"),xro=o(" (GPT Neo model)"),$ro=l(),Qm=a("li"),Ile=a("strong"),kro=o("gpt_neox"),Sro=o(" \u2014 "),KP=a("a"),Rro=o("GPTNeoXConfig"),Pro=o(" (GPT NeoX model)"),Bro=l(),Um=a("li"),Nle=a("strong"),Iro=o("gptj"),Nro=o(" \u2014 "),ZP=a("a"),qro=o("GPTJConfig"),jro=o(" (GPT-J model)"),Dro=l(),Hm=a("li"),qle=a("strong"),Gro=o("groupvit"),Oro=o(" \u2014 "),eB=a("a"),Vro=o("GroupViTConfig"),Xro=o(" (GroupViT model)"),zro=l(),Jm=a("li"),jle=a("strong"),Wro=o("hubert"),Qro=o(" \u2014 "),oB=a("a"),Uro=o("HubertConfig"),Hro=o(" (Hubert model)"),Jro=l(),Ym=a("li"),Dle=a("strong"),Yro=o("ibert"),Kro=o(" \u2014 "),rB=a("a"),Zro=o("IBertConfig"),eto=o(" (I-BERT model)"),oto=l(),Km=a("li"),Gle=a("strong"),rto=o("imagegpt"),tto=o(" \u2014 "),tB=a("a"),ato=o("ImageGPTConfig"),nto=o(" (ImageGPT model)"),sto=l(),Zm=a("li"),Ole=a("strong"),lto=o("layoutlm"),ito=o(" \u2014 "),aB=a("a"),dto=o("LayoutLMConfig"),cto=o(" (LayoutLM model)"),fto=l(),eg=a("li"),Vle=a("strong"),mto=o("layoutlmv2"),gto=o(" \u2014 "),nB=a("a"),hto=o("LayoutLMv2Config"),pto=o(" (LayoutLMv2 model)"),_to=l(),og=a("li"),Xle=a("strong"),uto=o("layoutlmv3"),bto=o(" \u2014 "),sB=a("a"),vto=o("LayoutLMv3Config"),Fto=o(" (LayoutLMv3 model)"),Tto=l(),rg=a("li"),zle=a("strong"),Mto=o("led"),Eto=o(" \u2014 "),lB=a("a"),Cto=o("LEDConfig"),wto=o(" (LED model)"),Ato=l(),tg=a("li"),Wle=a("strong"),Lto=o("levit"),yto=o(" \u2014 "),iB=a("a"),xto=o("LevitConfig"),$to=o(" (LeViT model)"),kto=l(),ag=a("li"),Qle=a("strong"),Sto=o("longformer"),Rto=o(" \u2014 "),dB=a("a"),Pto=o("LongformerConfig"),Bto=o(" (Longformer model)"),Ito=l(),ng=a("li"),Ule=a("strong"),Nto=o("longt5"),qto=o(" \u2014 "),cB=a("a"),jto=o("LongT5Config"),Dto=o(" (LongT5 model)"),Gto=l(),sg=a("li"),Hle=a("strong"),Oto=o("luke"),Vto=o(" \u2014 "),fB=a("a"),Xto=o("LukeConfig"),zto=o(" (LUKE model)"),Wto=l(),lg=a("li"),Jle=a("strong"),Qto=o("lxmert"),Uto=o(" \u2014 "),mB=a("a"),Hto=o("LxmertConfig"),Jto=o(" (LXMERT model)"),Yto=l(),ig=a("li"),Yle=a("strong"),Kto=o("m2m_100"),Zto=o(" \u2014 "),gB=a("a"),eao=o("M2M100Config"),oao=o(" (M2M100 model)"),rao=l(),dg=a("li"),Kle=a("strong"),tao=o("marian"),aao=o(" \u2014 "),hB=a("a"),nao=o("MarianConfig"),sao=o(" (Marian model)"),lao=l(),cg=a("li"),Zle=a("strong"),iao=o("maskformer"),dao=o(" \u2014 "),pB=a("a"),cao=o("MaskFormerConfig"),fao=o(" (MaskFormer model)"),mao=l(),fg=a("li"),eie=a("strong"),gao=o("mbart"),hao=o(" \u2014 "),_B=a("a"),pao=o("MBartConfig"),_ao=o(" (mBART model)"),uao=l(),mg=a("li"),oie=a("strong"),bao=o("mctct"),vao=o(" \u2014 "),uB=a("a"),Fao=o("MCTCTConfig"),Tao=o(" (M-CTC-T model)"),Mao=l(),gg=a("li"),rie=a("strong"),Eao=o("megatron-bert"),Cao=o(" \u2014 "),bB=a("a"),wao=o("MegatronBertConfig"),Aao=o(" (Megatron-BERT model)"),Lao=l(),hg=a("li"),tie=a("strong"),yao=o("mobilebert"),xao=o(" \u2014 "),vB=a("a"),$ao=o("MobileBertConfig"),kao=o(" (MobileBERT model)"),Sao=l(),pg=a("li"),aie=a("strong"),Rao=o("mobilevit"),Pao=o(" \u2014 "),FB=a("a"),Bao=o("MobileViTConfig"),Iao=o(" (MobileViT model)"),Nao=l(),_g=a("li"),nie=a("strong"),qao=o("mpnet"),jao=o(" \u2014 "),TB=a("a"),Dao=o("MPNetConfig"),Gao=o(" (MPNet model)"),Oao=l(),ug=a("li"),sie=a("strong"),Vao=o("mt5"),Xao=o(" \u2014 "),MB=a("a"),zao=o("MT5Config"),Wao=o(" (MT5 model)"),Qao=l(),bg=a("li"),lie=a("strong"),Uao=o("mvp"),Hao=o(" \u2014 "),EB=a("a"),Jao=o("MvpConfig"),Yao=o(" (MVP model)"),Kao=l(),vg=a("li"),iie=a("strong"),Zao=o("nezha"),eno=o(" \u2014 "),CB=a("a"),ono=o("NezhaConfig"),rno=o(" (Nezha model)"),tno=l(),Fg=a("li"),die=a("strong"),ano=o("nystromformer"),nno=o(" \u2014 "),wB=a("a"),sno=o("NystromformerConfig"),lno=o(" (Nystr\xF6mformer model)"),ino=l(),Tg=a("li"),cie=a("strong"),dno=o("openai-gpt"),cno=o(" \u2014 "),AB=a("a"),fno=o("OpenAIGPTConfig"),mno=o(" (OpenAI GPT model)"),gno=l(),Mg=a("li"),fie=a("strong"),hno=o("opt"),pno=o(" \u2014 "),LB=a("a"),_no=o("OPTConfig"),uno=o(" (OPT model)"),bno=l(),Eg=a("li"),mie=a("strong"),vno=o("owlvit"),Fno=o(" \u2014 "),yB=a("a"),Tno=o("OwlViTConfig"),Mno=o(" (OWL-ViT model)"),Eno=l(),Cg=a("li"),gie=a("strong"),Cno=o("pegasus"),wno=o(" \u2014 "),xB=a("a"),Ano=o("PegasusConfig"),Lno=o(" (Pegasus model)"),yno=l(),wg=a("li"),hie=a("strong"),xno=o("perceiver"),$no=o(" \u2014 "),$B=a("a"),kno=o("PerceiverConfig"),Sno=o(" (Perceiver model)"),Rno=l(),Ag=a("li"),pie=a("strong"),Pno=o("plbart"),Bno=o(" \u2014 "),kB=a("a"),Ino=o("PLBartConfig"),Nno=o(" (PLBart model)"),qno=l(),Lg=a("li"),_ie=a("strong"),jno=o("poolformer"),Dno=o(" \u2014 "),SB=a("a"),Gno=o("PoolFormerConfig"),Ono=o(" (PoolFormer model)"),Vno=l(),yg=a("li"),uie=a("strong"),Xno=o("prophetnet"),zno=o(" \u2014 "),RB=a("a"),Wno=o("ProphetNetConfig"),Qno=o(" (ProphetNet model)"),Uno=l(),xg=a("li"),bie=a("strong"),Hno=o("qdqbert"),Jno=o(" \u2014 "),PB=a("a"),Yno=o("QDQBertConfig"),Kno=o(" (QDQBert model)"),Zno=l(),$g=a("li"),vie=a("strong"),eso=o("rag"),oso=o(" \u2014 "),BB=a("a"),rso=o("RagConfig"),tso=o(" (RAG model)"),aso=l(),kg=a("li"),Fie=a("strong"),nso=o("realm"),sso=o(" \u2014 "),IB=a("a"),lso=o("RealmConfig"),iso=o(" (REALM model)"),dso=l(),Sg=a("li"),Tie=a("strong"),cso=o("reformer"),fso=o(" \u2014 "),NB=a("a"),mso=o("ReformerConfig"),gso=o(" (Reformer model)"),hso=l(),Rg=a("li"),Mie=a("strong"),pso=o("regnet"),_so=o(" \u2014 "),qB=a("a"),uso=o("RegNetConfig"),bso=o(" (RegNet model)"),vso=l(),Pg=a("li"),Eie=a("strong"),Fso=o("rembert"),Tso=o(" \u2014 "),jB=a("a"),Mso=o("RemBertConfig"),Eso=o(" (RemBERT model)"),Cso=l(),Bg=a("li"),Cie=a("strong"),wso=o("resnet"),Aso=o(" \u2014 "),DB=a("a"),Lso=o("ResNetConfig"),yso=o(" (ResNet model)"),xso=l(),Ig=a("li"),wie=a("strong"),$so=o("retribert"),kso=o(" \u2014 "),GB=a("a"),Sso=o("RetriBertConfig"),Rso=o(" (RetriBERT model)"),Pso=l(),Ng=a("li"),Aie=a("strong"),Bso=o("roberta"),Iso=o(" \u2014 "),OB=a("a"),Nso=o("RobertaConfig"),qso=o(" (RoBERTa model)"),jso=l(),qg=a("li"),Lie=a("strong"),Dso=o("roformer"),Gso=o(" \u2014 "),VB=a("a"),Oso=o("RoFormerConfig"),Vso=o(" (RoFormer model)"),Xso=l(),jg=a("li"),yie=a("strong"),zso=o("segformer"),Wso=o(" \u2014 "),XB=a("a"),Qso=o("SegformerConfig"),Uso=o(" (SegFormer model)"),Hso=l(),Dg=a("li"),xie=a("strong"),Jso=o("sew"),Yso=o(" \u2014 "),zB=a("a"),Kso=o("SEWConfig"),Zso=o(" (SEW model)"),elo=l(),Gg=a("li"),$ie=a("strong"),olo=o("sew-d"),rlo=o(" \u2014 "),WB=a("a"),tlo=o("SEWDConfig"),alo=o(" (SEW-D model)"),nlo=l(),Og=a("li"),kie=a("strong"),slo=o("speech-encoder-decoder"),llo=o(" \u2014 "),QB=a("a"),ilo=o("SpeechEncoderDecoderConfig"),dlo=o(" (Speech Encoder decoder model)"),clo=l(),Vg=a("li"),Sie=a("strong"),flo=o("speech_to_text"),mlo=o(" \u2014 "),UB=a("a"),glo=o("Speech2TextConfig"),hlo=o(" (Speech2Text model)"),plo=l(),Xg=a("li"),Rie=a("strong"),_lo=o("speech_to_text_2"),ulo=o(" \u2014 "),HB=a("a"),blo=o("Speech2Text2Config"),vlo=o(" (Speech2Text2 model)"),Flo=l(),zg=a("li"),Pie=a("strong"),Tlo=o("splinter"),Mlo=o(" \u2014 "),JB=a("a"),Elo=o("SplinterConfig"),Clo=o(" (Splinter model)"),wlo=l(),Wg=a("li"),Bie=a("strong"),Alo=o("squeezebert"),Llo=o(" \u2014 "),YB=a("a"),ylo=o("SqueezeBertConfig"),xlo=o(" (SqueezeBERT model)"),$lo=l(),Qg=a("li"),Iie=a("strong"),klo=o("swin"),Slo=o(" \u2014 "),KB=a("a"),Rlo=o("SwinConfig"),Plo=o(" (Swin Transformer model)"),Blo=l(),Ug=a("li"),Nie=a("strong"),Ilo=o("swinv2"),Nlo=o(" \u2014 "),ZB=a("a"),qlo=o("Swinv2Config"),jlo=o(" (Swin Transformer V2 model)"),Dlo=l(),Hg=a("li"),qie=a("strong"),Glo=o("t5"),Olo=o(" \u2014 "),eI=a("a"),Vlo=o("T5Config"),Xlo=o(" (T5 model)"),zlo=l(),Jg=a("li"),jie=a("strong"),Wlo=o("tapas"),Qlo=o(" \u2014 "),oI=a("a"),Ulo=o("TapasConfig"),Hlo=o(" (TAPAS model)"),Jlo=l(),Yg=a("li"),Die=a("strong"),Ylo=o("trajectory_transformer"),Klo=o(" \u2014 "),rI=a("a"),Zlo=o("TrajectoryTransformerConfig"),eio=o(" (Trajectory Transformer model)"),oio=l(),Kg=a("li"),Gie=a("strong"),rio=o("transfo-xl"),tio=o(" \u2014 "),tI=a("a"),aio=o("TransfoXLConfig"),nio=o(" (Transformer-XL model)"),sio=l(),Zg=a("li"),Oie=a("strong"),lio=o("trocr"),iio=o(" \u2014 "),aI=a("a"),dio=o("TrOCRConfig"),cio=o(" (TrOCR model)"),fio=l(),eh=a("li"),Vie=a("strong"),mio=o("unispeech"),gio=o(" \u2014 "),nI=a("a"),hio=o("UniSpeechConfig"),pio=o(" (UniSpeech model)"),_io=l(),oh=a("li"),Xie=a("strong"),uio=o("unispeech-sat"),bio=o(" \u2014 "),sI=a("a"),vio=o("UniSpeechSatConfig"),Fio=o(" (UniSpeechSat model)"),Tio=l(),rh=a("li"),zie=a("strong"),Mio=o("van"),Eio=o(" \u2014 "),lI=a("a"),Cio=o("VanConfig"),wio=o(" (VAN model)"),Aio=l(),th=a("li"),Wie=a("strong"),Lio=o("videomae"),yio=o(" \u2014 "),iI=a("a"),xio=o("VideoMAEConfig"),$io=o(" (VideoMAE model)"),kio=l(),ah=a("li"),Qie=a("strong"),Sio=o("vilt"),Rio=o(" \u2014 "),dI=a("a"),Pio=o("ViltConfig"),Bio=o(" (ViLT model)"),Iio=l(),nh=a("li"),Uie=a("strong"),Nio=o("vision-encoder-decoder"),qio=o(" \u2014 "),cI=a("a"),jio=o("VisionEncoderDecoderConfig"),Dio=o(" (Vision Encoder decoder model)"),Gio=l(),sh=a("li"),Hie=a("strong"),Oio=o("vision-text-dual-encoder"),Vio=o(" \u2014 "),fI=a("a"),Xio=o("VisionTextDualEncoderConfig"),zio=o(" (VisionTextDualEncoder model)"),Wio=l(),lh=a("li"),Jie=a("strong"),Qio=o("visual_bert"),Uio=o(" \u2014 "),mI=a("a"),Hio=o("VisualBertConfig"),Jio=o(" (VisualBERT model)"),Yio=l(),ih=a("li"),Yie=a("strong"),Kio=o("vit"),Zio=o(" \u2014 "),gI=a("a"),edo=o("ViTConfig"),odo=o(" (ViT model)"),rdo=l(),dh=a("li"),Kie=a("strong"),tdo=o("vit_mae"),ado=o(" \u2014 "),hI=a("a"),ndo=o("ViTMAEConfig"),sdo=o(" (ViTMAE model)"),ldo=l(),ch=a("li"),Zie=a("strong"),ido=o("wav2vec2"),ddo=o(" \u2014 "),pI=a("a"),cdo=o("Wav2Vec2Config"),fdo=o(" (Wav2Vec2 model)"),mdo=l(),fh=a("li"),ede=a("strong"),gdo=o("wav2vec2-conformer"),hdo=o(" \u2014 "),_I=a("a"),pdo=o("Wav2Vec2ConformerConfig"),_do=o(" (Wav2Vec2-Conformer model)"),udo=l(),mh=a("li"),ode=a("strong"),bdo=o("wavlm"),vdo=o(" \u2014 "),uI=a("a"),Fdo=o("WavLMConfig"),Tdo=o(" (WavLM model)"),Mdo=l(),gh=a("li"),rde=a("strong"),Edo=o("xglm"),Cdo=o(" \u2014 "),bI=a("a"),wdo=o("XGLMConfig"),Ado=o(" (XGLM model)"),Ldo=l(),hh=a("li"),tde=a("strong"),ydo=o("xlm"),xdo=o(" \u2014 "),vI=a("a"),$do=o("XLMConfig"),kdo=o(" (XLM model)"),Sdo=l(),ph=a("li"),ade=a("strong"),Rdo=o("xlm-prophetnet"),Pdo=o(" \u2014 "),FI=a("a"),Bdo=o("XLMProphetNetConfig"),Ido=o(" (XLM-ProphetNet model)"),Ndo=l(),_h=a("li"),nde=a("strong"),qdo=o("xlm-roberta"),jdo=o(" \u2014 "),TI=a("a"),Ddo=o("XLMRobertaConfig"),Gdo=o(" (XLM-RoBERTa model)"),Odo=l(),uh=a("li"),sde=a("strong"),Vdo=o("xlm-roberta-xl"),Xdo=o(" \u2014 "),MI=a("a"),zdo=o("XLMRobertaXLConfig"),Wdo=o(" (XLM-RoBERTa-XL model)"),Qdo=l(),bh=a("li"),lde=a("strong"),Udo=o("xlnet"),Hdo=o(" \u2014 "),EI=a("a"),Jdo=o("XLNetConfig"),Ydo=o(" (XLNet model)"),Kdo=l(),vh=a("li"),ide=a("strong"),Zdo=o("yolos"),eco=o(" \u2014 "),CI=a("a"),oco=o("YolosConfig"),rco=o(" (YOLOS model)"),tco=l(),Fh=a("li"),dde=a("strong"),aco=o("yoso"),nco=o(" \u2014 "),wI=a("a"),sco=o("YosoConfig"),lco=o(" (YOSO model)"),ico=l(),F(Th.$$.fragment),dco=l(),Mh=a("div"),F(ML.$$.fragment),cco=l(),cde=a("p"),fco=o("Register a new configuration for this class."),oUe=l(),Ki=a("h2"),Eh=a("a"),fde=a("span"),F(EL.$$.fragment),mco=l(),mde=a("span"),gco=o("AutoTokenizer"),rUe=l(),xo=a("div"),F(CL.$$.fragment),hco=l(),wL=a("p"),pco=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),AI=a("a"),_co=o("AutoTokenizer.from_pretrained()"),uco=o(" class method."),bco=l(),AL=a("p"),vco=o("This class cannot be instantiated directly using "),gde=a("code"),Fco=o("__init__()"),Tco=o(" (throws an error)."),Mco=l(),Sr=a("div"),F(LL.$$.fragment),Eco=l(),hde=a("p"),Cco=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),wco=l(),Ga=a("p"),Aco=o("The tokenizer class to instantiate is selected based on the "),pde=a("code"),Lco=o("model_type"),yco=o(` property of the config object (either
passed as an argument or loaded from `),_de=a("code"),xco=o("pretrained_model_name_or_path"),$co=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=a("code"),kco=o("pretrained_model_name_or_path"),Sco=o(":"),Rco=l(),k=a("ul"),Hn=a("li"),bde=a("strong"),Pco=o("albert"),Bco=o(" \u2014 "),LI=a("a"),Ico=o("AlbertTokenizer"),Nco=o(" or "),yI=a("a"),qco=o("AlbertTokenizerFast"),jco=o(" (ALBERT model)"),Dco=l(),Jn=a("li"),vde=a("strong"),Gco=o("bart"),Oco=o(" \u2014 "),xI=a("a"),Vco=o("BartTokenizer"),Xco=o(" or "),$I=a("a"),zco=o("BartTokenizerFast"),Wco=o(" (BART model)"),Qco=l(),Yn=a("li"),Fde=a("strong"),Uco=o("barthez"),Hco=o(" \u2014 "),kI=a("a"),Jco=o("BarthezTokenizer"),Yco=o(" or "),SI=a("a"),Kco=o("BarthezTokenizerFast"),Zco=o(" (BARThez model)"),efo=l(),Ch=a("li"),Tde=a("strong"),ofo=o("bartpho"),rfo=o(" \u2014 "),RI=a("a"),tfo=o("BartphoTokenizer"),afo=o(" (BARTpho model)"),nfo=l(),Kn=a("li"),Mde=a("strong"),sfo=o("bert"),lfo=o(" \u2014 "),PI=a("a"),ifo=o("BertTokenizer"),dfo=o(" or "),BI=a("a"),cfo=o("BertTokenizerFast"),ffo=o(" (BERT model)"),mfo=l(),wh=a("li"),Ede=a("strong"),gfo=o("bert-generation"),hfo=o(" \u2014 "),II=a("a"),pfo=o("BertGenerationTokenizer"),_fo=o(" (Bert Generation model)"),ufo=l(),Ah=a("li"),Cde=a("strong"),bfo=o("bert-japanese"),vfo=o(" \u2014 "),NI=a("a"),Ffo=o("BertJapaneseTokenizer"),Tfo=o(" (BertJapanese model)"),Mfo=l(),Lh=a("li"),wde=a("strong"),Efo=o("bertweet"),Cfo=o(" \u2014 "),qI=a("a"),wfo=o("BertweetTokenizer"),Afo=o(" (BERTweet model)"),Lfo=l(),Zn=a("li"),Ade=a("strong"),yfo=o("big_bird"),xfo=o(" \u2014 "),jI=a("a"),$fo=o("BigBirdTokenizer"),kfo=o(" or "),DI=a("a"),Sfo=o("BigBirdTokenizerFast"),Rfo=o(" (BigBird model)"),Pfo=l(),es=a("li"),Lde=a("strong"),Bfo=o("bigbird_pegasus"),Ifo=o(" \u2014 "),GI=a("a"),Nfo=o("PegasusTokenizer"),qfo=o(" or "),OI=a("a"),jfo=o("PegasusTokenizerFast"),Dfo=o(" (BigBird-Pegasus model)"),Gfo=l(),os=a("li"),yde=a("strong"),Ofo=o("blenderbot"),Vfo=o(" \u2014 "),VI=a("a"),Xfo=o("BlenderbotTokenizer"),zfo=o(" or "),XI=a("a"),Wfo=o("BlenderbotTokenizerFast"),Qfo=o(" (Blenderbot model)"),Ufo=l(),yh=a("li"),xde=a("strong"),Hfo=o("blenderbot-small"),Jfo=o(" \u2014 "),zI=a("a"),Yfo=o("BlenderbotSmallTokenizer"),Kfo=o(" (BlenderbotSmall model)"),Zfo=l(),xh=a("li"),$de=a("strong"),emo=o("bloom"),omo=o(" \u2014 "),WI=a("a"),rmo=o("BloomTokenizerFast"),tmo=o(" (BLOOM model)"),amo=l(),$h=a("li"),kde=a("strong"),nmo=o("byt5"),smo=o(" \u2014 "),QI=a("a"),lmo=o("ByT5Tokenizer"),imo=o(" (ByT5 model)"),dmo=l(),rs=a("li"),Sde=a("strong"),cmo=o("camembert"),fmo=o(" \u2014 "),UI=a("a"),mmo=o("CamembertTokenizer"),gmo=o(" or "),HI=a("a"),hmo=o("CamembertTokenizerFast"),pmo=o(" (CamemBERT model)"),_mo=l(),kh=a("li"),Rde=a("strong"),umo=o("canine"),bmo=o(" \u2014 "),JI=a("a"),vmo=o("CanineTokenizer"),Fmo=o(" (CANINE model)"),Tmo=l(),ts=a("li"),Pde=a("strong"),Mmo=o("clip"),Emo=o(" \u2014 "),YI=a("a"),Cmo=o("CLIPTokenizer"),wmo=o(" or "),KI=a("a"),Amo=o("CLIPTokenizerFast"),Lmo=o(" (CLIP model)"),ymo=l(),as=a("li"),Bde=a("strong"),xmo=o("codegen"),$mo=o(" \u2014 "),ZI=a("a"),kmo=o("CodeGenTokenizer"),Smo=o(" or "),eN=a("a"),Rmo=o("CodeGenTokenizerFast"),Pmo=o(" (CodeGen model)"),Bmo=l(),ns=a("li"),Ide=a("strong"),Imo=o("convbert"),Nmo=o(" \u2014 "),oN=a("a"),qmo=o("ConvBertTokenizer"),jmo=o(" or "),rN=a("a"),Dmo=o("ConvBertTokenizerFast"),Gmo=o(" (ConvBERT model)"),Omo=l(),ss=a("li"),Nde=a("strong"),Vmo=o("cpm"),Xmo=o(" \u2014 "),tN=a("a"),zmo=o("CpmTokenizer"),Wmo=o(" or "),aN=a("a"),Qmo=o("CpmTokenizerFast"),Umo=o(" (CPM model)"),Hmo=l(),Sh=a("li"),qde=a("strong"),Jmo=o("ctrl"),Ymo=o(" \u2014 "),nN=a("a"),Kmo=o("CTRLTokenizer"),Zmo=o(" (CTRL model)"),ego=l(),ls=a("li"),jde=a("strong"),ogo=o("data2vec-text"),rgo=o(" \u2014 "),sN=a("a"),tgo=o("RobertaTokenizer"),ago=o(" or "),lN=a("a"),ngo=o("RobertaTokenizerFast"),sgo=o(" (Data2VecText model)"),lgo=l(),is=a("li"),Dde=a("strong"),igo=o("deberta"),dgo=o(" \u2014 "),iN=a("a"),cgo=o("DebertaTokenizer"),fgo=o(" or "),dN=a("a"),mgo=o("DebertaTokenizerFast"),ggo=o(" (DeBERTa model)"),hgo=l(),ds=a("li"),Gde=a("strong"),pgo=o("deberta-v2"),_go=o(" \u2014 "),cN=a("a"),ugo=o("DebertaV2Tokenizer"),bgo=o(" or "),fN=a("a"),vgo=o("DebertaV2TokenizerFast"),Fgo=o(" (DeBERTa-v2 model)"),Tgo=l(),cs=a("li"),Ode=a("strong"),Mgo=o("distilbert"),Ego=o(" \u2014 "),mN=a("a"),Cgo=o("DistilBertTokenizer"),wgo=o(" or "),gN=a("a"),Ago=o("DistilBertTokenizerFast"),Lgo=o(" (DistilBERT model)"),ygo=l(),fs=a("li"),Vde=a("strong"),xgo=o("dpr"),$go=o(" \u2014 "),hN=a("a"),kgo=o("DPRQuestionEncoderTokenizer"),Sgo=o(" or "),pN=a("a"),Rgo=o("DPRQuestionEncoderTokenizerFast"),Pgo=o(" (DPR model)"),Bgo=l(),ms=a("li"),Xde=a("strong"),Igo=o("electra"),Ngo=o(" \u2014 "),_N=a("a"),qgo=o("ElectraTokenizer"),jgo=o(" or "),uN=a("a"),Dgo=o("ElectraTokenizerFast"),Ggo=o(" (ELECTRA model)"),Ogo=l(),Rh=a("li"),zde=a("strong"),Vgo=o("flaubert"),Xgo=o(" \u2014 "),bN=a("a"),zgo=o("FlaubertTokenizer"),Wgo=o(" (FlauBERT model)"),Qgo=l(),gs=a("li"),Wde=a("strong"),Ugo=o("fnet"),Hgo=o(" \u2014 "),vN=a("a"),Jgo=o("FNetTokenizer"),Ygo=o(" or "),FN=a("a"),Kgo=o("FNetTokenizerFast"),Zgo=o(" (FNet model)"),eho=l(),Ph=a("li"),Qde=a("strong"),oho=o("fsmt"),rho=o(" \u2014 "),TN=a("a"),tho=o("FSMTTokenizer"),aho=o(" (FairSeq Machine-Translation model)"),nho=l(),hs=a("li"),Ude=a("strong"),sho=o("funnel"),lho=o(" \u2014 "),MN=a("a"),iho=o("FunnelTokenizer"),dho=o(" or "),EN=a("a"),cho=o("FunnelTokenizerFast"),fho=o(" (Funnel Transformer model)"),mho=l(),ps=a("li"),Hde=a("strong"),gho=o("gpt2"),hho=o(" \u2014 "),CN=a("a"),pho=o("GPT2Tokenizer"),_ho=o(" or "),wN=a("a"),uho=o("GPT2TokenizerFast"),bho=o(" (OpenAI GPT-2 model)"),vho=l(),_s=a("li"),Jde=a("strong"),Fho=o("gpt_neo"),Tho=o(" \u2014 "),AN=a("a"),Mho=o("GPT2Tokenizer"),Eho=o(" or "),LN=a("a"),Cho=o("GPT2TokenizerFast"),who=o(" (GPT Neo model)"),Aho=l(),Bh=a("li"),Yde=a("strong"),Lho=o("gpt_neox"),yho=o(" \u2014 "),yN=a("a"),xho=o("GPTNeoXTokenizerFast"),$ho=o(" (GPT NeoX model)"),kho=l(),us=a("li"),Kde=a("strong"),Sho=o("gptj"),Rho=o(" \u2014 "),xN=a("a"),Pho=o("GPT2Tokenizer"),Bho=o(" or "),$N=a("a"),Iho=o("GPT2TokenizerFast"),Nho=o(" (GPT-J model)"),qho=l(),bs=a("li"),Zde=a("strong"),jho=o("groupvit"),Dho=o(" \u2014 "),kN=a("a"),Gho=o("CLIPTokenizer"),Oho=o(" or "),SN=a("a"),Vho=o("CLIPTokenizerFast"),Xho=o(" (GroupViT model)"),zho=l(),vs=a("li"),ece=a("strong"),Who=o("herbert"),Qho=o(" \u2014 "),RN=a("a"),Uho=o("HerbertTokenizer"),Hho=o(" or "),PN=a("a"),Jho=o("HerbertTokenizerFast"),Yho=o(" (HerBERT model)"),Kho=l(),Ih=a("li"),oce=a("strong"),Zho=o("hubert"),epo=o(" \u2014 "),BN=a("a"),opo=o("Wav2Vec2CTCTokenizer"),rpo=o(" (Hubert model)"),tpo=l(),Fs=a("li"),rce=a("strong"),apo=o("ibert"),npo=o(" \u2014 "),IN=a("a"),spo=o("RobertaTokenizer"),lpo=o(" or "),NN=a("a"),ipo=o("RobertaTokenizerFast"),dpo=o(" (I-BERT model)"),cpo=l(),Ts=a("li"),tce=a("strong"),fpo=o("layoutlm"),mpo=o(" \u2014 "),qN=a("a"),gpo=o("LayoutLMTokenizer"),hpo=o(" or "),jN=a("a"),ppo=o("LayoutLMTokenizerFast"),_po=o(" (LayoutLM model)"),upo=l(),Ms=a("li"),ace=a("strong"),bpo=o("layoutlmv2"),vpo=o(" \u2014 "),DN=a("a"),Fpo=o("LayoutLMv2Tokenizer"),Tpo=o(" or "),GN=a("a"),Mpo=o("LayoutLMv2TokenizerFast"),Epo=o(" (LayoutLMv2 model)"),Cpo=l(),Es=a("li"),nce=a("strong"),wpo=o("layoutlmv3"),Apo=o(" \u2014 "),ON=a("a"),Lpo=o("LayoutLMv3Tokenizer"),ypo=o(" or "),VN=a("a"),xpo=o("LayoutLMv3TokenizerFast"),$po=o(" (LayoutLMv3 model)"),kpo=l(),Cs=a("li"),sce=a("strong"),Spo=o("layoutxlm"),Rpo=o(" \u2014 "),XN=a("a"),Ppo=o("LayoutXLMTokenizer"),Bpo=o(" or "),zN=a("a"),Ipo=o("LayoutXLMTokenizerFast"),Npo=o(" (LayoutXLM model)"),qpo=l(),ws=a("li"),lce=a("strong"),jpo=o("led"),Dpo=o(" \u2014 "),WN=a("a"),Gpo=o("LEDTokenizer"),Opo=o(" or "),QN=a("a"),Vpo=o("LEDTokenizerFast"),Xpo=o(" (LED model)"),zpo=l(),As=a("li"),ice=a("strong"),Wpo=o("longformer"),Qpo=o(" \u2014 "),UN=a("a"),Upo=o("LongformerTokenizer"),Hpo=o(" or "),HN=a("a"),Jpo=o("LongformerTokenizerFast"),Ypo=o(" (Longformer model)"),Kpo=l(),Ls=a("li"),dce=a("strong"),Zpo=o("longt5"),e_o=o(" \u2014 "),JN=a("a"),o_o=o("T5Tokenizer"),r_o=o(" or "),YN=a("a"),t_o=o("T5TokenizerFast"),a_o=o(" (LongT5 model)"),n_o=l(),Nh=a("li"),cce=a("strong"),s_o=o("luke"),l_o=o(" \u2014 "),KN=a("a"),i_o=o("LukeTokenizer"),d_o=o(" (LUKE model)"),c_o=l(),ys=a("li"),fce=a("strong"),f_o=o("lxmert"),m_o=o(" \u2014 "),ZN=a("a"),g_o=o("LxmertTokenizer"),h_o=o(" or "),eq=a("a"),p_o=o("LxmertTokenizerFast"),__o=o(" (LXMERT model)"),u_o=l(),qh=a("li"),mce=a("strong"),b_o=o("m2m_100"),v_o=o(" \u2014 "),oq=a("a"),F_o=o("M2M100Tokenizer"),T_o=o(" (M2M100 model)"),M_o=l(),jh=a("li"),gce=a("strong"),E_o=o("marian"),C_o=o(" \u2014 "),rq=a("a"),w_o=o("MarianTokenizer"),A_o=o(" (Marian model)"),L_o=l(),xs=a("li"),hce=a("strong"),y_o=o("mbart"),x_o=o(" \u2014 "),tq=a("a"),$_o=o("MBartTokenizer"),k_o=o(" or "),aq=a("a"),S_o=o("MBartTokenizerFast"),R_o=o(" (mBART model)"),P_o=l(),$s=a("li"),pce=a("strong"),B_o=o("mbart50"),I_o=o(" \u2014 "),nq=a("a"),N_o=o("MBart50Tokenizer"),q_o=o(" or "),sq=a("a"),j_o=o("MBart50TokenizerFast"),D_o=o(" (mBART-50 model)"),G_o=l(),ks=a("li"),_ce=a("strong"),O_o=o("megatron-bert"),V_o=o(" \u2014 "),lq=a("a"),X_o=o("BertTokenizer"),z_o=o(" or "),iq=a("a"),W_o=o("BertTokenizerFast"),Q_o=o(" (Megatron-BERT model)"),U_o=l(),Dh=a("li"),uce=a("strong"),H_o=o("mluke"),J_o=o(" \u2014 "),dq=a("a"),Y_o=o("MLukeTokenizer"),K_o=o(" (mLUKE model)"),Z_o=l(),Ss=a("li"),bce=a("strong"),euo=o("mobilebert"),ouo=o(" \u2014 "),cq=a("a"),ruo=o("MobileBertTokenizer"),tuo=o(" or "),fq=a("a"),auo=o("MobileBertTokenizerFast"),nuo=o(" (MobileBERT model)"),suo=l(),Rs=a("li"),vce=a("strong"),luo=o("mpnet"),iuo=o(" \u2014 "),mq=a("a"),duo=o("MPNetTokenizer"),cuo=o(" or "),gq=a("a"),fuo=o("MPNetTokenizerFast"),muo=o(" (MPNet model)"),guo=l(),Ps=a("li"),Fce=a("strong"),huo=o("mt5"),puo=o(" \u2014 "),hq=a("a"),_uo=o("MT5Tokenizer"),uuo=o(" or "),pq=a("a"),buo=o("MT5TokenizerFast"),vuo=o(" (MT5 model)"),Fuo=l(),Bs=a("li"),Tce=a("strong"),Tuo=o("mvp"),Muo=o(" \u2014 "),_q=a("a"),Euo=o("MvpTokenizer"),Cuo=o(" or "),uq=a("a"),wuo=o("MvpTokenizerFast"),Auo=o(" (MVP model)"),Luo=l(),Is=a("li"),Mce=a("strong"),yuo=o("nezha"),xuo=o(" \u2014 "),bq=a("a"),$uo=o("BertTokenizer"),kuo=o(" or "),vq=a("a"),Suo=o("BertTokenizerFast"),Ruo=o(" (Nezha model)"),Puo=l(),Ns=a("li"),Ece=a("strong"),Buo=o("nllb"),Iuo=o(" \u2014 "),Fq=a("a"),Nuo=o("NllbTokenizer"),quo=o(" or "),Tq=a("a"),juo=o("NllbTokenizerFast"),Duo=o(" (NLLB model)"),Guo=l(),qs=a("li"),Cce=a("strong"),Ouo=o("nystromformer"),Vuo=o(" \u2014 "),Mq=a("a"),Xuo=o("AlbertTokenizer"),zuo=o(" or "),Eq=a("a"),Wuo=o("AlbertTokenizerFast"),Quo=o(" (Nystr\xF6mformer model)"),Uuo=l(),js=a("li"),wce=a("strong"),Huo=o("openai-gpt"),Juo=o(" \u2014 "),Cq=a("a"),Yuo=o("OpenAIGPTTokenizer"),Kuo=o(" or "),wq=a("a"),Zuo=o("OpenAIGPTTokenizerFast"),e1o=o(" (OpenAI GPT model)"),o1o=l(),Gh=a("li"),Ace=a("strong"),r1o=o("opt"),t1o=o(" \u2014 "),Aq=a("a"),a1o=o("GPT2Tokenizer"),n1o=o(" (OPT model)"),s1o=l(),Ds=a("li"),Lce=a("strong"),l1o=o("owlvit"),i1o=o(" \u2014 "),Lq=a("a"),d1o=o("CLIPTokenizer"),c1o=o(" or "),yq=a("a"),f1o=o("CLIPTokenizerFast"),m1o=o(" (OWL-ViT model)"),g1o=l(),Gs=a("li"),yce=a("strong"),h1o=o("pegasus"),p1o=o(" \u2014 "),xq=a("a"),_1o=o("PegasusTokenizer"),u1o=o(" or "),$q=a("a"),b1o=o("PegasusTokenizerFast"),v1o=o(" (Pegasus model)"),F1o=l(),Oh=a("li"),xce=a("strong"),T1o=o("perceiver"),M1o=o(" \u2014 "),kq=a("a"),E1o=o("PerceiverTokenizer"),C1o=o(" (Perceiver model)"),w1o=l(),Vh=a("li"),$ce=a("strong"),A1o=o("phobert"),L1o=o(" \u2014 "),Sq=a("a"),y1o=o("PhobertTokenizer"),x1o=o(" (PhoBERT model)"),$1o=l(),Xh=a("li"),kce=a("strong"),k1o=o("plbart"),S1o=o(" \u2014 "),Rq=a("a"),R1o=o("PLBartTokenizer"),P1o=o(" (PLBart model)"),B1o=l(),zh=a("li"),Sce=a("strong"),I1o=o("prophetnet"),N1o=o(" \u2014 "),Pq=a("a"),q1o=o("ProphetNetTokenizer"),j1o=o(" (ProphetNet model)"),D1o=l(),Os=a("li"),Rce=a("strong"),G1o=o("qdqbert"),O1o=o(" \u2014 "),Bq=a("a"),V1o=o("BertTokenizer"),X1o=o(" or "),Iq=a("a"),z1o=o("BertTokenizerFast"),W1o=o(" (QDQBert model)"),Q1o=l(),Wh=a("li"),Pce=a("strong"),U1o=o("rag"),H1o=o(" \u2014 "),Nq=a("a"),J1o=o("RagTokenizer"),Y1o=o(" (RAG model)"),K1o=l(),Vs=a("li"),Bce=a("strong"),Z1o=o("realm"),e2o=o(" \u2014 "),qq=a("a"),o2o=o("RealmTokenizer"),r2o=o(" or "),jq=a("a"),t2o=o("RealmTokenizerFast"),a2o=o(" (REALM model)"),n2o=l(),Xs=a("li"),Ice=a("strong"),s2o=o("reformer"),l2o=o(" \u2014 "),Dq=a("a"),i2o=o("ReformerTokenizer"),d2o=o(" or "),Gq=a("a"),c2o=o("ReformerTokenizerFast"),f2o=o(" (Reformer model)"),m2o=l(),zs=a("li"),Nce=a("strong"),g2o=o("rembert"),h2o=o(" \u2014 "),Oq=a("a"),p2o=o("RemBertTokenizer"),_2o=o(" or "),Vq=a("a"),u2o=o("RemBertTokenizerFast"),b2o=o(" (RemBERT model)"),v2o=l(),Ws=a("li"),qce=a("strong"),F2o=o("retribert"),T2o=o(" \u2014 "),Xq=a("a"),M2o=o("RetriBertTokenizer"),E2o=o(" or "),zq=a("a"),C2o=o("RetriBertTokenizerFast"),w2o=o(" (RetriBERT model)"),A2o=l(),Qs=a("li"),jce=a("strong"),L2o=o("roberta"),y2o=o(" \u2014 "),Wq=a("a"),x2o=o("RobertaTokenizer"),$2o=o(" or "),Qq=a("a"),k2o=o("RobertaTokenizerFast"),S2o=o(" (RoBERTa model)"),R2o=l(),Us=a("li"),Dce=a("strong"),P2o=o("roformer"),B2o=o(" \u2014 "),Uq=a("a"),I2o=o("RoFormerTokenizer"),N2o=o(" or "),Hq=a("a"),q2o=o("RoFormerTokenizerFast"),j2o=o(" (RoFormer model)"),D2o=l(),Qh=a("li"),Gce=a("strong"),G2o=o("speech_to_text"),O2o=o(" \u2014 "),Jq=a("a"),V2o=o("Speech2TextTokenizer"),X2o=o(" (Speech2Text model)"),z2o=l(),Uh=a("li"),Oce=a("strong"),W2o=o("speech_to_text_2"),Q2o=o(" \u2014 "),Yq=a("a"),U2o=o("Speech2Text2Tokenizer"),H2o=o(" (Speech2Text2 model)"),J2o=l(),Hs=a("li"),Vce=a("strong"),Y2o=o("splinter"),K2o=o(" \u2014 "),Kq=a("a"),Z2o=o("SplinterTokenizer"),ebo=o(" or "),Zq=a("a"),obo=o("SplinterTokenizerFast"),rbo=o(" (Splinter model)"),tbo=l(),Js=a("li"),Xce=a("strong"),abo=o("squeezebert"),nbo=o(" \u2014 "),ej=a("a"),sbo=o("SqueezeBertTokenizer"),lbo=o(" or "),oj=a("a"),ibo=o("SqueezeBertTokenizerFast"),dbo=o(" (SqueezeBERT model)"),cbo=l(),Ys=a("li"),zce=a("strong"),fbo=o("t5"),mbo=o(" \u2014 "),rj=a("a"),gbo=o("T5Tokenizer"),hbo=o(" or "),tj=a("a"),pbo=o("T5TokenizerFast"),_bo=o(" (T5 model)"),ubo=l(),Hh=a("li"),Wce=a("strong"),bbo=o("tapas"),vbo=o(" \u2014 "),aj=a("a"),Fbo=o("TapasTokenizer"),Tbo=o(" (TAPAS model)"),Mbo=l(),Jh=a("li"),Qce=a("strong"),Ebo=o("tapex"),Cbo=o(" \u2014 "),nj=a("a"),wbo=o("TapexTokenizer"),Abo=o(" (TAPEX model)"),Lbo=l(),Yh=a("li"),Uce=a("strong"),ybo=o("transfo-xl"),xbo=o(" \u2014 "),sj=a("a"),$bo=o("TransfoXLTokenizer"),kbo=o(" (Transformer-XL model)"),Sbo=l(),Ks=a("li"),Hce=a("strong"),Rbo=o("vilt"),Pbo=o(" \u2014 "),lj=a("a"),Bbo=o("BertTokenizer"),Ibo=o(" or "),ij=a("a"),Nbo=o("BertTokenizerFast"),qbo=o(" (ViLT model)"),jbo=l(),Zs=a("li"),Jce=a("strong"),Dbo=o("visual_bert"),Gbo=o(" \u2014 "),dj=a("a"),Obo=o("BertTokenizer"),Vbo=o(" or "),cj=a("a"),Xbo=o("BertTokenizerFast"),zbo=o(" (VisualBERT model)"),Wbo=l(),Kh=a("li"),Yce=a("strong"),Qbo=o("wav2vec2"),Ubo=o(" \u2014 "),fj=a("a"),Hbo=o("Wav2Vec2CTCTokenizer"),Jbo=o(" (Wav2Vec2 model)"),Ybo=l(),Zh=a("li"),Kce=a("strong"),Kbo=o("wav2vec2-conformer"),Zbo=o(" \u2014 "),mj=a("a"),evo=o("Wav2Vec2CTCTokenizer"),ovo=o(" (Wav2Vec2-Conformer model)"),rvo=l(),ep=a("li"),Zce=a("strong"),tvo=o("wav2vec2_phoneme"),avo=o(" \u2014 "),gj=a("a"),nvo=o("Wav2Vec2PhonemeCTCTokenizer"),svo=o(" (Wav2Vec2Phoneme model)"),lvo=l(),el=a("li"),efe=a("strong"),ivo=o("xglm"),dvo=o(" \u2014 "),hj=a("a"),cvo=o("XGLMTokenizer"),fvo=o(" or "),pj=a("a"),mvo=o("XGLMTokenizerFast"),gvo=o(" (XGLM model)"),hvo=l(),op=a("li"),ofe=a("strong"),pvo=o("xlm"),_vo=o(" \u2014 "),_j=a("a"),uvo=o("XLMTokenizer"),bvo=o(" (XLM model)"),vvo=l(),rp=a("li"),rfe=a("strong"),Fvo=o("xlm-prophetnet"),Tvo=o(" \u2014 "),uj=a("a"),Mvo=o("XLMProphetNetTokenizer"),Evo=o(" (XLM-ProphetNet model)"),Cvo=l(),ol=a("li"),tfe=a("strong"),wvo=o("xlm-roberta"),Avo=o(" \u2014 "),bj=a("a"),Lvo=o("XLMRobertaTokenizer"),yvo=o(" or "),vj=a("a"),xvo=o("XLMRobertaTokenizerFast"),$vo=o(" (XLM-RoBERTa model)"),kvo=l(),rl=a("li"),afe=a("strong"),Svo=o("xlm-roberta-xl"),Rvo=o(" \u2014 "),Fj=a("a"),Pvo=o("RobertaTokenizer"),Bvo=o(" or "),Tj=a("a"),Ivo=o("RobertaTokenizerFast"),Nvo=o(" (XLM-RoBERTa-XL model)"),qvo=l(),tl=a("li"),nfe=a("strong"),jvo=o("xlnet"),Dvo=o(" \u2014 "),Mj=a("a"),Gvo=o("XLNetTokenizer"),Ovo=o(" or "),Ej=a("a"),Vvo=o("XLNetTokenizerFast"),Xvo=o(" (XLNet model)"),zvo=l(),al=a("li"),sfe=a("strong"),Wvo=o("yoso"),Qvo=o(" \u2014 "),Cj=a("a"),Uvo=o("AlbertTokenizer"),Hvo=o(" or "),wj=a("a"),Jvo=o("AlbertTokenizerFast"),Yvo=o(" (YOSO model)"),Kvo=l(),F(tp.$$.fragment),Zvo=l(),ap=a("div"),F(yL.$$.fragment),e5o=l(),lfe=a("p"),o5o=o("Register a new tokenizer in this mapping."),tUe=l(),Zi=a("h2"),np=a("a"),ife=a("span"),F(xL.$$.fragment),r5o=l(),dfe=a("span"),t5o=o("AutoFeatureExtractor"),aUe=l(),$o=a("div"),F($L.$$.fragment),a5o=l(),kL=a("p"),n5o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Aj=a("a"),s5o=o("AutoFeatureExtractor.from_pretrained()"),l5o=o(" class method."),i5o=l(),SL=a("p"),d5o=o("This class cannot be instantiated directly using "),cfe=a("code"),c5o=o("__init__()"),f5o=o(" (throws an error)."),m5o=l(),Je=a("div"),F(RL.$$.fragment),g5o=l(),ffe=a("p"),h5o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),p5o=l(),Oa=a("p"),_5o=o("The feature extractor class to instantiate is selected based on the "),mfe=a("code"),u5o=o("model_type"),b5o=o(` property of the config object
(either passed as an argument or loaded from `),gfe=a("code"),v5o=o("pretrained_model_name_or_path"),F5o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hfe=a("code"),T5o=o("pretrained_model_name_or_path"),M5o=o(":"),E5o=l(),Q=a("ul"),sp=a("li"),pfe=a("strong"),C5o=o("beit"),w5o=o(" \u2014 "),Lj=a("a"),A5o=o("BeitFeatureExtractor"),L5o=o(" (BEiT model)"),y5o=l(),lp=a("li"),_fe=a("strong"),x5o=o("clip"),$5o=o(" \u2014 "),yj=a("a"),k5o=o("CLIPFeatureExtractor"),S5o=o(" (CLIP model)"),R5o=l(),ip=a("li"),ufe=a("strong"),P5o=o("convnext"),B5o=o(" \u2014 "),xj=a("a"),I5o=o("ConvNextFeatureExtractor"),N5o=o(" (ConvNeXT model)"),q5o=l(),dp=a("li"),bfe=a("strong"),j5o=o("cvt"),D5o=o(" \u2014 "),$j=a("a"),G5o=o("ConvNextFeatureExtractor"),O5o=o(" (CvT model)"),V5o=l(),cp=a("li"),vfe=a("strong"),X5o=o("data2vec-audio"),z5o=o(" \u2014 "),kj=a("a"),W5o=o("Wav2Vec2FeatureExtractor"),Q5o=o(" (Data2VecAudio model)"),U5o=l(),fp=a("li"),Ffe=a("strong"),H5o=o("data2vec-vision"),J5o=o(" \u2014 "),Sj=a("a"),Y5o=o("BeitFeatureExtractor"),K5o=o(" (Data2VecVision model)"),Z5o=l(),mp=a("li"),Tfe=a("strong"),eFo=o("deit"),oFo=o(" \u2014 "),Rj=a("a"),rFo=o("DeiTFeatureExtractor"),tFo=o(" (DeiT model)"),aFo=l(),gp=a("li"),Mfe=a("strong"),nFo=o("detr"),sFo=o(" \u2014 "),Pj=a("a"),lFo=o("DetrFeatureExtractor"),iFo=o(" (DETR model)"),dFo=l(),hp=a("li"),Efe=a("strong"),cFo=o("donut"),fFo=o(" \u2014 "),Bj=a("a"),mFo=o("DonutFeatureExtractor"),gFo=o(" (Donut model)"),hFo=l(),pp=a("li"),Cfe=a("strong"),pFo=o("dpt"),_Fo=o(" \u2014 "),Ij=a("a"),uFo=o("DPTFeatureExtractor"),bFo=o(" (DPT model)"),vFo=l(),_p=a("li"),wfe=a("strong"),FFo=o("flava"),TFo=o(" \u2014 "),Nj=a("a"),MFo=o("FlavaFeatureExtractor"),EFo=o(" (FLAVA model)"),CFo=l(),up=a("li"),Afe=a("strong"),wFo=o("glpn"),AFo=o(" \u2014 "),qj=a("a"),LFo=o("GLPNFeatureExtractor"),yFo=o(" (GLPN model)"),xFo=l(),bp=a("li"),Lfe=a("strong"),$Fo=o("groupvit"),kFo=o(" \u2014 "),jj=a("a"),SFo=o("CLIPFeatureExtractor"),RFo=o(" (GroupViT model)"),PFo=l(),vp=a("li"),yfe=a("strong"),BFo=o("hubert"),IFo=o(" \u2014 "),Dj=a("a"),NFo=o("Wav2Vec2FeatureExtractor"),qFo=o(" (Hubert model)"),jFo=l(),Fp=a("li"),xfe=a("strong"),DFo=o("imagegpt"),GFo=o(" \u2014 "),Gj=a("a"),OFo=o("ImageGPTFeatureExtractor"),VFo=o(" (ImageGPT model)"),XFo=l(),Tp=a("li"),$fe=a("strong"),zFo=o("layoutlmv2"),WFo=o(" \u2014 "),Oj=a("a"),QFo=o("LayoutLMv2FeatureExtractor"),UFo=o(" (LayoutLMv2 model)"),HFo=l(),Mp=a("li"),kfe=a("strong"),JFo=o("layoutlmv3"),YFo=o(" \u2014 "),Vj=a("a"),KFo=o("LayoutLMv3FeatureExtractor"),ZFo=o(" (LayoutLMv3 model)"),eTo=l(),Ep=a("li"),Sfe=a("strong"),oTo=o("levit"),rTo=o(" \u2014 "),Xj=a("a"),tTo=o("LevitFeatureExtractor"),aTo=o(" (LeViT model)"),nTo=l(),Cp=a("li"),Rfe=a("strong"),sTo=o("maskformer"),lTo=o(" \u2014 "),zj=a("a"),iTo=o("MaskFormerFeatureExtractor"),dTo=o(" (MaskFormer model)"),cTo=l(),wp=a("li"),Pfe=a("strong"),fTo=o("mctct"),mTo=o(" \u2014 "),Wj=a("a"),gTo=o("MCTCTFeatureExtractor"),hTo=o(" (M-CTC-T model)"),pTo=l(),Ap=a("li"),Bfe=a("strong"),_To=o("mobilevit"),uTo=o(" \u2014 "),Qj=a("a"),bTo=o("MobileViTFeatureExtractor"),vTo=o(" (MobileViT model)"),FTo=l(),Lp=a("li"),Ife=a("strong"),TTo=o("owlvit"),MTo=o(" \u2014 "),Uj=a("a"),ETo=o("OwlViTFeatureExtractor"),CTo=o(" (OWL-ViT model)"),wTo=l(),yp=a("li"),Nfe=a("strong"),ATo=o("perceiver"),LTo=o(" \u2014 "),Hj=a("a"),yTo=o("PerceiverFeatureExtractor"),xTo=o(" (Perceiver model)"),$To=l(),xp=a("li"),qfe=a("strong"),kTo=o("poolformer"),STo=o(" \u2014 "),Jj=a("a"),RTo=o("PoolFormerFeatureExtractor"),PTo=o(" (PoolFormer model)"),BTo=l(),$p=a("li"),jfe=a("strong"),ITo=o("regnet"),NTo=o(" \u2014 "),Yj=a("a"),qTo=o("ConvNextFeatureExtractor"),jTo=o(" (RegNet model)"),DTo=l(),kp=a("li"),Dfe=a("strong"),GTo=o("resnet"),OTo=o(" \u2014 "),Kj=a("a"),VTo=o("ConvNextFeatureExtractor"),XTo=o(" (ResNet model)"),zTo=l(),Sp=a("li"),Gfe=a("strong"),WTo=o("segformer"),QTo=o(" \u2014 "),Zj=a("a"),UTo=o("SegformerFeatureExtractor"),HTo=o(" (SegFormer model)"),JTo=l(),Rp=a("li"),Ofe=a("strong"),YTo=o("speech_to_text"),KTo=o(" \u2014 "),eD=a("a"),ZTo=o("Speech2TextFeatureExtractor"),e7o=o(" (Speech2Text model)"),o7o=l(),Pp=a("li"),Vfe=a("strong"),r7o=o("swin"),t7o=o(" \u2014 "),oD=a("a"),a7o=o("ViTFeatureExtractor"),n7o=o(" (Swin Transformer model)"),s7o=l(),Bp=a("li"),Xfe=a("strong"),l7o=o("swinv2"),i7o=o(" \u2014 "),rD=a("a"),d7o=o("ViTFeatureExtractor"),c7o=o(" (Swin Transformer V2 model)"),f7o=l(),Ip=a("li"),zfe=a("strong"),m7o=o("van"),g7o=o(" \u2014 "),tD=a("a"),h7o=o("ConvNextFeatureExtractor"),p7o=o(" (VAN model)"),_7o=l(),Np=a("li"),Wfe=a("strong"),u7o=o("videomae"),b7o=o(" \u2014 "),aD=a("a"),v7o=o("ViTFeatureExtractor"),F7o=o(" (VideoMAE model)"),T7o=l(),qp=a("li"),Qfe=a("strong"),M7o=o("vilt"),E7o=o(" \u2014 "),nD=a("a"),C7o=o("ViltFeatureExtractor"),w7o=o(" (ViLT model)"),A7o=l(),jp=a("li"),Ufe=a("strong"),L7o=o("vit"),y7o=o(" \u2014 "),sD=a("a"),x7o=o("ViTFeatureExtractor"),$7o=o(" (ViT model)"),k7o=l(),Dp=a("li"),Hfe=a("strong"),S7o=o("vit_mae"),R7o=o(" \u2014 "),lD=a("a"),P7o=o("ViTFeatureExtractor"),B7o=o(" (ViTMAE model)"),I7o=l(),Gp=a("li"),Jfe=a("strong"),N7o=o("wav2vec2"),q7o=o(" \u2014 "),iD=a("a"),j7o=o("Wav2Vec2FeatureExtractor"),D7o=o(" (Wav2Vec2 model)"),G7o=l(),Op=a("li"),Yfe=a("strong"),O7o=o("wav2vec2-conformer"),V7o=o(" \u2014 "),dD=a("a"),X7o=o("Wav2Vec2FeatureExtractor"),z7o=o(" (Wav2Vec2-Conformer model)"),W7o=l(),Vp=a("li"),Kfe=a("strong"),Q7o=o("yolos"),U7o=o(" \u2014 "),cD=a("a"),H7o=o("YolosFeatureExtractor"),J7o=o(" (YOLOS model)"),Y7o=l(),F(Xp.$$.fragment),K7o=l(),F(zp.$$.fragment),Z7o=l(),Wp=a("div"),F(PL.$$.fragment),e8o=l(),Zfe=a("p"),o8o=o("Register a new feature extractor for this class."),nUe=l(),ed=a("h2"),Qp=a("a"),eme=a("span"),F(BL.$$.fragment),r8o=l(),ome=a("span"),t8o=o("AutoProcessor"),sUe=l(),ko=a("div"),F(IL.$$.fragment),a8o=l(),NL=a("p"),n8o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fD=a("a"),s8o=o("AutoProcessor.from_pretrained()"),l8o=o(" class method."),i8o=l(),qL=a("p"),d8o=o("This class cannot be instantiated directly using "),rme=a("code"),c8o=o("__init__()"),f8o=o(" (throws an error)."),m8o=l(),Ye=a("div"),F(jL.$$.fragment),g8o=l(),tme=a("p"),h8o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),p8o=l(),od=a("p"),_8o=o("The processor class to instantiate is selected based on the "),ame=a("code"),u8o=o("model_type"),b8o=o(` property of the config object (either
passed as an argument or loaded from `),nme=a("code"),v8o=o("pretrained_model_name_or_path"),F8o=o(" if possible):"),T8o=l(),ie=a("ul"),Up=a("li"),sme=a("strong"),M8o=o("clip"),E8o=o(" \u2014 "),mD=a("a"),C8o=o("CLIPProcessor"),w8o=o(" (CLIP model)"),A8o=l(),Hp=a("li"),lme=a("strong"),L8o=o("donut"),y8o=o(" \u2014 "),gD=a("a"),x8o=o("DonutProcessor"),$8o=o(" (Donut model)"),k8o=l(),Jp=a("li"),ime=a("strong"),S8o=o("flava"),R8o=o(" \u2014 "),hD=a("a"),P8o=o("FlavaProcessor"),B8o=o(" (FLAVA model)"),I8o=l(),Yp=a("li"),dme=a("strong"),N8o=o("groupvit"),q8o=o(" \u2014 "),pD=a("a"),j8o=o("CLIPProcessor"),D8o=o(" (GroupViT model)"),G8o=l(),Kp=a("li"),cme=a("strong"),O8o=o("layoutlmv2"),V8o=o(" \u2014 "),_D=a("a"),X8o=o("LayoutLMv2Processor"),z8o=o(" (LayoutLMv2 model)"),W8o=l(),Zp=a("li"),fme=a("strong"),Q8o=o("layoutlmv3"),U8o=o(" \u2014 "),uD=a("a"),H8o=o("LayoutLMv3Processor"),J8o=o(" (LayoutLMv3 model)"),Y8o=l(),e_=a("li"),mme=a("strong"),K8o=o("layoutxlm"),Z8o=o(" \u2014 "),bD=a("a"),e9o=o("LayoutXLMProcessor"),o9o=o(" (LayoutXLM model)"),r9o=l(),o_=a("li"),gme=a("strong"),t9o=o("owlvit"),a9o=o(" \u2014 "),vD=a("a"),n9o=o("OwlViTProcessor"),s9o=o(" (OWL-ViT model)"),l9o=l(),r_=a("li"),hme=a("strong"),i9o=o("sew"),d9o=o(" \u2014 "),FD=a("a"),c9o=o("Wav2Vec2Processor"),f9o=o(" (SEW model)"),m9o=l(),t_=a("li"),pme=a("strong"),g9o=o("sew-d"),h9o=o(" \u2014 "),TD=a("a"),p9o=o("Wav2Vec2Processor"),_9o=o(" (SEW-D model)"),u9o=l(),a_=a("li"),_me=a("strong"),b9o=o("speech_to_text"),v9o=o(" \u2014 "),MD=a("a"),F9o=o("Speech2TextProcessor"),T9o=o(" (Speech2Text model)"),M9o=l(),n_=a("li"),ume=a("strong"),E9o=o("speech_to_text_2"),C9o=o(" \u2014 "),ED=a("a"),w9o=o("Speech2Text2Processor"),A9o=o(" (Speech2Text2 model)"),L9o=l(),s_=a("li"),bme=a("strong"),y9o=o("trocr"),x9o=o(" \u2014 "),CD=a("a"),$9o=o("TrOCRProcessor"),k9o=o(" (TrOCR model)"),S9o=l(),l_=a("li"),vme=a("strong"),R9o=o("unispeech"),P9o=o(" \u2014 "),wD=a("a"),B9o=o("Wav2Vec2Processor"),I9o=o(" (UniSpeech model)"),N9o=l(),i_=a("li"),Fme=a("strong"),q9o=o("unispeech-sat"),j9o=o(" \u2014 "),AD=a("a"),D9o=o("Wav2Vec2Processor"),G9o=o(" (UniSpeechSat model)"),O9o=l(),d_=a("li"),Tme=a("strong"),V9o=o("vilt"),X9o=o(" \u2014 "),LD=a("a"),z9o=o("ViltProcessor"),W9o=o(" (ViLT model)"),Q9o=l(),c_=a("li"),Mme=a("strong"),U9o=o("vision-text-dual-encoder"),H9o=o(" \u2014 "),yD=a("a"),J9o=o("VisionTextDualEncoderProcessor"),Y9o=o(" (VisionTextDualEncoder model)"),K9o=l(),f_=a("li"),Eme=a("strong"),Z9o=o("wav2vec2"),eMo=o(" \u2014 "),xD=a("a"),oMo=o("Wav2Vec2Processor"),rMo=o(" (Wav2Vec2 model)"),tMo=l(),m_=a("li"),Cme=a("strong"),aMo=o("wav2vec2-conformer"),nMo=o(" \u2014 "),$D=a("a"),sMo=o("Wav2Vec2Processor"),lMo=o(" (Wav2Vec2-Conformer model)"),iMo=l(),g_=a("li"),wme=a("strong"),dMo=o("wavlm"),cMo=o(" \u2014 "),kD=a("a"),fMo=o("Wav2Vec2Processor"),mMo=o(" (WavLM model)"),gMo=l(),F(h_.$$.fragment),hMo=l(),F(p_.$$.fragment),pMo=l(),__=a("div"),F(DL.$$.fragment),_Mo=l(),Ame=a("p"),uMo=o("Register a new processor for this class."),lUe=l(),rd=a("h2"),u_=a("a"),Lme=a("span"),F(GL.$$.fragment),bMo=l(),yme=a("span"),vMo=o("AutoModel"),iUe=l(),So=a("div"),F(OL.$$.fragment),FMo=l(),td=a("p"),TMo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SD=a("a"),MMo=o("from_pretrained()"),EMo=o(" class method or the "),RD=a("a"),CMo=o("from_config()"),wMo=o(` class
method.`),AMo=l(),VL=a("p"),LMo=o("This class cannot be instantiated directly using "),xme=a("code"),yMo=o("__init__()"),xMo=o(" (throws an error)."),$Mo=l(),mt=a("div"),F(XL.$$.fragment),kMo=l(),$me=a("p"),SMo=o("Instantiates one of the base model classes of the library from a configuration."),RMo=l(),ad=a("p"),PMo=o(`Note:
Loading a model from its configuration file does `),kme=a("strong"),BMo=o("not"),IMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PD=a("a"),NMo=o("from_pretrained()"),qMo=o(" to load the model weights."),jMo=l(),F(b_.$$.fragment),DMo=l(),Ke=a("div"),F(zL.$$.fragment),GMo=l(),Sme=a("p"),OMo=o("Instantiate one of the base model classes of the library from a pretrained model."),VMo=l(),Va=a("p"),XMo=o("The model class to instantiate is selected based on the "),Rme=a("code"),zMo=o("model_type"),WMo=o(` property of the config object (either
passed as an argument or loaded from `),Pme=a("code"),QMo=o("pretrained_model_name_or_path"),UMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=a("code"),HMo=o("pretrained_model_name_or_path"),JMo=o(":"),YMo=l(),y=a("ul"),v_=a("li"),Ime=a("strong"),KMo=o("albert"),ZMo=o(" \u2014 "),BD=a("a"),eEo=o("AlbertModel"),oEo=o(" (ALBERT model)"),rEo=l(),F_=a("li"),Nme=a("strong"),tEo=o("bart"),aEo=o(" \u2014 "),ID=a("a"),nEo=o("BartModel"),sEo=o(" (BART model)"),lEo=l(),T_=a("li"),qme=a("strong"),iEo=o("beit"),dEo=o(" \u2014 "),ND=a("a"),cEo=o("BeitModel"),fEo=o(" (BEiT model)"),mEo=l(),M_=a("li"),jme=a("strong"),gEo=o("bert"),hEo=o(" \u2014 "),qD=a("a"),pEo=o("BertModel"),_Eo=o(" (BERT model)"),uEo=l(),E_=a("li"),Dme=a("strong"),bEo=o("bert-generation"),vEo=o(" \u2014 "),jD=a("a"),FEo=o("BertGenerationEncoder"),TEo=o(" (Bert Generation model)"),MEo=l(),C_=a("li"),Gme=a("strong"),EEo=o("big_bird"),CEo=o(" \u2014 "),DD=a("a"),wEo=o("BigBirdModel"),AEo=o(" (BigBird model)"),LEo=l(),w_=a("li"),Ome=a("strong"),yEo=o("bigbird_pegasus"),xEo=o(" \u2014 "),GD=a("a"),$Eo=o("BigBirdPegasusModel"),kEo=o(" (BigBird-Pegasus model)"),SEo=l(),A_=a("li"),Vme=a("strong"),REo=o("blenderbot"),PEo=o(" \u2014 "),OD=a("a"),BEo=o("BlenderbotModel"),IEo=o(" (Blenderbot model)"),NEo=l(),L_=a("li"),Xme=a("strong"),qEo=o("blenderbot-small"),jEo=o(" \u2014 "),VD=a("a"),DEo=o("BlenderbotSmallModel"),GEo=o(" (BlenderbotSmall model)"),OEo=l(),y_=a("li"),zme=a("strong"),VEo=o("bloom"),XEo=o(" \u2014 "),XD=a("a"),zEo=o("BloomModel"),WEo=o(" (BLOOM model)"),QEo=l(),x_=a("li"),Wme=a("strong"),UEo=o("camembert"),HEo=o(" \u2014 "),zD=a("a"),JEo=o("CamembertModel"),YEo=o(" (CamemBERT model)"),KEo=l(),$_=a("li"),Qme=a("strong"),ZEo=o("canine"),e4o=o(" \u2014 "),WD=a("a"),o4o=o("CanineModel"),r4o=o(" (CANINE model)"),t4o=l(),k_=a("li"),Ume=a("strong"),a4o=o("clip"),n4o=o(" \u2014 "),QD=a("a"),s4o=o("CLIPModel"),l4o=o(" (CLIP model)"),i4o=l(),S_=a("li"),Hme=a("strong"),d4o=o("codegen"),c4o=o(" \u2014 "),UD=a("a"),f4o=o("CodeGenModel"),m4o=o(" (CodeGen model)"),g4o=l(),R_=a("li"),Jme=a("strong"),h4o=o("convbert"),p4o=o(" \u2014 "),HD=a("a"),_4o=o("ConvBertModel"),u4o=o(" (ConvBERT model)"),b4o=l(),P_=a("li"),Yme=a("strong"),v4o=o("convnext"),F4o=o(" \u2014 "),JD=a("a"),T4o=o("ConvNextModel"),M4o=o(" (ConvNeXT model)"),E4o=l(),B_=a("li"),Kme=a("strong"),C4o=o("ctrl"),w4o=o(" \u2014 "),YD=a("a"),A4o=o("CTRLModel"),L4o=o(" (CTRL model)"),y4o=l(),I_=a("li"),Zme=a("strong"),x4o=o("cvt"),$4o=o(" \u2014 "),KD=a("a"),k4o=o("CvtModel"),S4o=o(" (CvT model)"),R4o=l(),N_=a("li"),ege=a("strong"),P4o=o("data2vec-audio"),B4o=o(" \u2014 "),ZD=a("a"),I4o=o("Data2VecAudioModel"),N4o=o(" (Data2VecAudio model)"),q4o=l(),q_=a("li"),oge=a("strong"),j4o=o("data2vec-text"),D4o=o(" \u2014 "),eG=a("a"),G4o=o("Data2VecTextModel"),O4o=o(" (Data2VecText model)"),V4o=l(),j_=a("li"),rge=a("strong"),X4o=o("data2vec-vision"),z4o=o(" \u2014 "),oG=a("a"),W4o=o("Data2VecVisionModel"),Q4o=o(" (Data2VecVision model)"),U4o=l(),D_=a("li"),tge=a("strong"),H4o=o("deberta"),J4o=o(" \u2014 "),rG=a("a"),Y4o=o("DebertaModel"),K4o=o(" (DeBERTa model)"),Z4o=l(),G_=a("li"),age=a("strong"),eCo=o("deberta-v2"),oCo=o(" \u2014 "),tG=a("a"),rCo=o("DebertaV2Model"),tCo=o(" (DeBERTa-v2 model)"),aCo=l(),O_=a("li"),nge=a("strong"),nCo=o("decision_transformer"),sCo=o(" \u2014 "),aG=a("a"),lCo=o("DecisionTransformerModel"),iCo=o(" (Decision Transformer model)"),dCo=l(),V_=a("li"),sge=a("strong"),cCo=o("deit"),fCo=o(" \u2014 "),nG=a("a"),mCo=o("DeiTModel"),gCo=o(" (DeiT model)"),hCo=l(),X_=a("li"),lge=a("strong"),pCo=o("detr"),_Co=o(" \u2014 "),sG=a("a"),uCo=o("DetrModel"),bCo=o(" (DETR model)"),vCo=l(),z_=a("li"),ige=a("strong"),FCo=o("distilbert"),TCo=o(" \u2014 "),lG=a("a"),MCo=o("DistilBertModel"),ECo=o(" (DistilBERT model)"),CCo=l(),W_=a("li"),dge=a("strong"),wCo=o("donut-swin"),ACo=o(" \u2014 "),iG=a("a"),LCo=o("DonutSwinModel"),yCo=o(" (DonutSwin model)"),xCo=l(),Q_=a("li"),cge=a("strong"),$Co=o("dpr"),kCo=o(" \u2014 "),dG=a("a"),SCo=o("DPRQuestionEncoder"),RCo=o(" (DPR model)"),PCo=l(),U_=a("li"),fge=a("strong"),BCo=o("dpt"),ICo=o(" \u2014 "),cG=a("a"),NCo=o("DPTModel"),qCo=o(" (DPT model)"),jCo=l(),H_=a("li"),mge=a("strong"),DCo=o("electra"),GCo=o(" \u2014 "),fG=a("a"),OCo=o("ElectraModel"),VCo=o(" (ELECTRA model)"),XCo=l(),J_=a("li"),gge=a("strong"),zCo=o("flaubert"),WCo=o(" \u2014 "),mG=a("a"),QCo=o("FlaubertModel"),UCo=o(" (FlauBERT model)"),HCo=l(),Y_=a("li"),hge=a("strong"),JCo=o("flava"),YCo=o(" \u2014 "),gG=a("a"),KCo=o("FlavaModel"),ZCo=o(" (FLAVA model)"),e3o=l(),K_=a("li"),pge=a("strong"),o3o=o("fnet"),r3o=o(" \u2014 "),hG=a("a"),t3o=o("FNetModel"),a3o=o(" (FNet model)"),n3o=l(),Z_=a("li"),_ge=a("strong"),s3o=o("fsmt"),l3o=o(" \u2014 "),pG=a("a"),i3o=o("FSMTModel"),d3o=o(" (FairSeq Machine-Translation model)"),c3o=l(),nl=a("li"),uge=a("strong"),f3o=o("funnel"),m3o=o(" \u2014 "),_G=a("a"),g3o=o("FunnelModel"),h3o=o(" or "),uG=a("a"),p3o=o("FunnelBaseModel"),_3o=o(" (Funnel Transformer model)"),u3o=l(),eu=a("li"),bge=a("strong"),b3o=o("glpn"),v3o=o(" \u2014 "),bG=a("a"),F3o=o("GLPNModel"),T3o=o(" (GLPN model)"),M3o=l(),ou=a("li"),vge=a("strong"),E3o=o("gpt2"),C3o=o(" \u2014 "),vG=a("a"),w3o=o("GPT2Model"),A3o=o(" (OpenAI GPT-2 model)"),L3o=l(),ru=a("li"),Fge=a("strong"),y3o=o("gpt_neo"),x3o=o(" \u2014 "),FG=a("a"),$3o=o("GPTNeoModel"),k3o=o(" (GPT Neo model)"),S3o=l(),tu=a("li"),Tge=a("strong"),R3o=o("gpt_neox"),P3o=o(" \u2014 "),TG=a("a"),B3o=o("GPTNeoXModel"),I3o=o(" (GPT NeoX model)"),N3o=l(),au=a("li"),Mge=a("strong"),q3o=o("gptj"),j3o=o(" \u2014 "),MG=a("a"),D3o=o("GPTJModel"),G3o=o(" (GPT-J model)"),O3o=l(),nu=a("li"),Ege=a("strong"),V3o=o("groupvit"),X3o=o(" \u2014 "),EG=a("a"),z3o=o("GroupViTModel"),W3o=o(" (GroupViT model)"),Q3o=l(),su=a("li"),Cge=a("strong"),U3o=o("hubert"),H3o=o(" \u2014 "),CG=a("a"),J3o=o("HubertModel"),Y3o=o(" (Hubert model)"),K3o=l(),lu=a("li"),wge=a("strong"),Z3o=o("ibert"),e0o=o(" \u2014 "),wG=a("a"),o0o=o("IBertModel"),r0o=o(" (I-BERT model)"),t0o=l(),iu=a("li"),Age=a("strong"),a0o=o("imagegpt"),n0o=o(" \u2014 "),AG=a("a"),s0o=o("ImageGPTModel"),l0o=o(" (ImageGPT model)"),i0o=l(),du=a("li"),Lge=a("strong"),d0o=o("layoutlm"),c0o=o(" \u2014 "),LG=a("a"),f0o=o("LayoutLMModel"),m0o=o(" (LayoutLM model)"),g0o=l(),cu=a("li"),yge=a("strong"),h0o=o("layoutlmv2"),p0o=o(" \u2014 "),yG=a("a"),_0o=o("LayoutLMv2Model"),u0o=o(" (LayoutLMv2 model)"),b0o=l(),fu=a("li"),xge=a("strong"),v0o=o("layoutlmv3"),F0o=o(" \u2014 "),xG=a("a"),T0o=o("LayoutLMv3Model"),M0o=o(" (LayoutLMv3 model)"),E0o=l(),mu=a("li"),$ge=a("strong"),C0o=o("led"),w0o=o(" \u2014 "),$G=a("a"),A0o=o("LEDModel"),L0o=o(" (LED model)"),y0o=l(),gu=a("li"),kge=a("strong"),x0o=o("levit"),$0o=o(" \u2014 "),kG=a("a"),k0o=o("LevitModel"),S0o=o(" (LeViT model)"),R0o=l(),hu=a("li"),Sge=a("strong"),P0o=o("longformer"),B0o=o(" \u2014 "),SG=a("a"),I0o=o("LongformerModel"),N0o=o(" (Longformer model)"),q0o=l(),pu=a("li"),Rge=a("strong"),j0o=o("longt5"),D0o=o(" \u2014 "),RG=a("a"),G0o=o("LongT5Model"),O0o=o(" (LongT5 model)"),V0o=l(),_u=a("li"),Pge=a("strong"),X0o=o("luke"),z0o=o(" \u2014 "),PG=a("a"),W0o=o("LukeModel"),Q0o=o(" (LUKE model)"),U0o=l(),uu=a("li"),Bge=a("strong"),H0o=o("lxmert"),J0o=o(" \u2014 "),BG=a("a"),Y0o=o("LxmertModel"),K0o=o(" (LXMERT model)"),Z0o=l(),bu=a("li"),Ige=a("strong"),ewo=o("m2m_100"),owo=o(" \u2014 "),IG=a("a"),rwo=o("M2M100Model"),two=o(" (M2M100 model)"),awo=l(),vu=a("li"),Nge=a("strong"),nwo=o("marian"),swo=o(" \u2014 "),NG=a("a"),lwo=o("MarianModel"),iwo=o(" (Marian model)"),dwo=l(),Fu=a("li"),qge=a("strong"),cwo=o("maskformer"),fwo=o(" \u2014 "),qG=a("a"),mwo=o("MaskFormerModel"),gwo=o(" (MaskFormer model)"),hwo=l(),Tu=a("li"),jge=a("strong"),pwo=o("mbart"),_wo=o(" \u2014 "),jG=a("a"),uwo=o("MBartModel"),bwo=o(" (mBART model)"),vwo=l(),Mu=a("li"),Dge=a("strong"),Fwo=o("mctct"),Two=o(" \u2014 "),DG=a("a"),Mwo=o("MCTCTModel"),Ewo=o(" (M-CTC-T model)"),Cwo=l(),Eu=a("li"),Gge=a("strong"),wwo=o("megatron-bert"),Awo=o(" \u2014 "),GG=a("a"),Lwo=o("MegatronBertModel"),ywo=o(" (Megatron-BERT model)"),xwo=l(),Cu=a("li"),Oge=a("strong"),$wo=o("mobilebert"),kwo=o(" \u2014 "),OG=a("a"),Swo=o("MobileBertModel"),Rwo=o(" (MobileBERT model)"),Pwo=l(),wu=a("li"),Vge=a("strong"),Bwo=o("mobilevit"),Iwo=o(" \u2014 "),VG=a("a"),Nwo=o("MobileViTModel"),qwo=o(" (MobileViT model)"),jwo=l(),Au=a("li"),Xge=a("strong"),Dwo=o("mpnet"),Gwo=o(" \u2014 "),XG=a("a"),Owo=o("MPNetModel"),Vwo=o(" (MPNet model)"),Xwo=l(),Lu=a("li"),zge=a("strong"),zwo=o("mt5"),Wwo=o(" \u2014 "),zG=a("a"),Qwo=o("MT5Model"),Uwo=o(" (MT5 model)"),Hwo=l(),yu=a("li"),Wge=a("strong"),Jwo=o("mvp"),Ywo=o(" \u2014 "),WG=a("a"),Kwo=o("MvpModel"),Zwo=o(" (MVP model)"),e6o=l(),xu=a("li"),Qge=a("strong"),o6o=o("nezha"),r6o=o(" \u2014 "),QG=a("a"),t6o=o("NezhaModel"),a6o=o(" (Nezha model)"),n6o=l(),$u=a("li"),Uge=a("strong"),s6o=o("nllb"),l6o=o(" \u2014 "),UG=a("a"),i6o=o("M2M100Model"),d6o=o(" (NLLB model)"),c6o=l(),ku=a("li"),Hge=a("strong"),f6o=o("nystromformer"),m6o=o(" \u2014 "),HG=a("a"),g6o=o("NystromformerModel"),h6o=o(" (Nystr\xF6mformer model)"),p6o=l(),Su=a("li"),Jge=a("strong"),_6o=o("openai-gpt"),u6o=o(" \u2014 "),JG=a("a"),b6o=o("OpenAIGPTModel"),v6o=o(" (OpenAI GPT model)"),F6o=l(),Ru=a("li"),Yge=a("strong"),T6o=o("opt"),M6o=o(" \u2014 "),YG=a("a"),E6o=o("OPTModel"),C6o=o(" (OPT model)"),w6o=l(),Pu=a("li"),Kge=a("strong"),A6o=o("owlvit"),L6o=o(" \u2014 "),KG=a("a"),y6o=o("OwlViTModel"),x6o=o(" (OWL-ViT model)"),$6o=l(),Bu=a("li"),Zge=a("strong"),k6o=o("pegasus"),S6o=o(" \u2014 "),ZG=a("a"),R6o=o("PegasusModel"),P6o=o(" (Pegasus model)"),B6o=l(),Iu=a("li"),ehe=a("strong"),I6o=o("perceiver"),N6o=o(" \u2014 "),eO=a("a"),q6o=o("PerceiverModel"),j6o=o(" (Perceiver model)"),D6o=l(),Nu=a("li"),ohe=a("strong"),G6o=o("plbart"),O6o=o(" \u2014 "),oO=a("a"),V6o=o("PLBartModel"),X6o=o(" (PLBart model)"),z6o=l(),qu=a("li"),rhe=a("strong"),W6o=o("poolformer"),Q6o=o(" \u2014 "),rO=a("a"),U6o=o("PoolFormerModel"),H6o=o(" (PoolFormer model)"),J6o=l(),ju=a("li"),the=a("strong"),Y6o=o("prophetnet"),K6o=o(" \u2014 "),tO=a("a"),Z6o=o("ProphetNetModel"),eAo=o(" (ProphetNet model)"),oAo=l(),Du=a("li"),ahe=a("strong"),rAo=o("qdqbert"),tAo=o(" \u2014 "),aO=a("a"),aAo=o("QDQBertModel"),nAo=o(" (QDQBert model)"),sAo=l(),Gu=a("li"),nhe=a("strong"),lAo=o("reformer"),iAo=o(" \u2014 "),nO=a("a"),dAo=o("ReformerModel"),cAo=o(" (Reformer model)"),fAo=l(),Ou=a("li"),she=a("strong"),mAo=o("regnet"),gAo=o(" \u2014 "),sO=a("a"),hAo=o("RegNetModel"),pAo=o(" (RegNet model)"),_Ao=l(),Vu=a("li"),lhe=a("strong"),uAo=o("rembert"),bAo=o(" \u2014 "),lO=a("a"),vAo=o("RemBertModel"),FAo=o(" (RemBERT model)"),TAo=l(),Xu=a("li"),ihe=a("strong"),MAo=o("resnet"),EAo=o(" \u2014 "),iO=a("a"),CAo=o("ResNetModel"),wAo=o(" (ResNet model)"),AAo=l(),zu=a("li"),dhe=a("strong"),LAo=o("retribert"),yAo=o(" \u2014 "),dO=a("a"),xAo=o("RetriBertModel"),$Ao=o(" (RetriBERT model)"),kAo=l(),Wu=a("li"),che=a("strong"),SAo=o("roberta"),RAo=o(" \u2014 "),cO=a("a"),PAo=o("RobertaModel"),BAo=o(" (RoBERTa model)"),IAo=l(),Qu=a("li"),fhe=a("strong"),NAo=o("roformer"),qAo=o(" \u2014 "),fO=a("a"),jAo=o("RoFormerModel"),DAo=o(" (RoFormer model)"),GAo=l(),Uu=a("li"),mhe=a("strong"),OAo=o("segformer"),VAo=o(" \u2014 "),mO=a("a"),XAo=o("SegformerModel"),zAo=o(" (SegFormer model)"),WAo=l(),Hu=a("li"),ghe=a("strong"),QAo=o("sew"),UAo=o(" \u2014 "),gO=a("a"),HAo=o("SEWModel"),JAo=o(" (SEW model)"),YAo=l(),Ju=a("li"),hhe=a("strong"),KAo=o("sew-d"),ZAo=o(" \u2014 "),hO=a("a"),eLo=o("SEWDModel"),oLo=o(" (SEW-D model)"),rLo=l(),Yu=a("li"),phe=a("strong"),tLo=o("speech_to_text"),aLo=o(" \u2014 "),pO=a("a"),nLo=o("Speech2TextModel"),sLo=o(" (Speech2Text model)"),lLo=l(),Ku=a("li"),_he=a("strong"),iLo=o("splinter"),dLo=o(" \u2014 "),_O=a("a"),cLo=o("SplinterModel"),fLo=o(" (Splinter model)"),mLo=l(),Zu=a("li"),uhe=a("strong"),gLo=o("squeezebert"),hLo=o(" \u2014 "),uO=a("a"),pLo=o("SqueezeBertModel"),_Lo=o(" (SqueezeBERT model)"),uLo=l(),e1=a("li"),bhe=a("strong"),bLo=o("swin"),vLo=o(" \u2014 "),bO=a("a"),FLo=o("SwinModel"),TLo=o(" (Swin Transformer model)"),MLo=l(),o1=a("li"),vhe=a("strong"),ELo=o("swinv2"),CLo=o(" \u2014 "),vO=a("a"),wLo=o("Swinv2Model"),ALo=o(" (Swin Transformer V2 model)"),LLo=l(),r1=a("li"),Fhe=a("strong"),yLo=o("t5"),xLo=o(" \u2014 "),FO=a("a"),$Lo=o("T5Model"),kLo=o(" (T5 model)"),SLo=l(),t1=a("li"),The=a("strong"),RLo=o("tapas"),PLo=o(" \u2014 "),TO=a("a"),BLo=o("TapasModel"),ILo=o(" (TAPAS model)"),NLo=l(),a1=a("li"),Mhe=a("strong"),qLo=o("trajectory_transformer"),jLo=o(" \u2014 "),MO=a("a"),DLo=o("TrajectoryTransformerModel"),GLo=o(" (Trajectory Transformer model)"),OLo=l(),n1=a("li"),Ehe=a("strong"),VLo=o("transfo-xl"),XLo=o(" \u2014 "),EO=a("a"),zLo=o("TransfoXLModel"),WLo=o(" (Transformer-XL model)"),QLo=l(),s1=a("li"),Che=a("strong"),ULo=o("unispeech"),HLo=o(" \u2014 "),CO=a("a"),JLo=o("UniSpeechModel"),YLo=o(" (UniSpeech model)"),KLo=l(),l1=a("li"),whe=a("strong"),ZLo=o("unispeech-sat"),eyo=o(" \u2014 "),wO=a("a"),oyo=o("UniSpeechSatModel"),ryo=o(" (UniSpeechSat model)"),tyo=l(),i1=a("li"),Ahe=a("strong"),ayo=o("van"),nyo=o(" \u2014 "),AO=a("a"),syo=o("VanModel"),lyo=o(" (VAN model)"),iyo=l(),d1=a("li"),Lhe=a("strong"),dyo=o("videomae"),cyo=o(" \u2014 "),LO=a("a"),fyo=o("VideoMAEModel"),myo=o(" (VideoMAE model)"),gyo=l(),c1=a("li"),yhe=a("strong"),hyo=o("vilt"),pyo=o(" \u2014 "),yO=a("a"),_yo=o("ViltModel"),uyo=o(" (ViLT model)"),byo=l(),f1=a("li"),xhe=a("strong"),vyo=o("vision-text-dual-encoder"),Fyo=o(" \u2014 "),xO=a("a"),Tyo=o("VisionTextDualEncoderModel"),Myo=o(" (VisionTextDualEncoder model)"),Eyo=l(),m1=a("li"),$he=a("strong"),Cyo=o("visual_bert"),wyo=o(" \u2014 "),$O=a("a"),Ayo=o("VisualBertModel"),Lyo=o(" (VisualBERT model)"),yyo=l(),g1=a("li"),khe=a("strong"),xyo=o("vit"),$yo=o(" \u2014 "),kO=a("a"),kyo=o("ViTModel"),Syo=o(" (ViT model)"),Ryo=l(),h1=a("li"),She=a("strong"),Pyo=o("vit_mae"),Byo=o(" \u2014 "),SO=a("a"),Iyo=o("ViTMAEModel"),Nyo=o(" (ViTMAE model)"),qyo=l(),p1=a("li"),Rhe=a("strong"),jyo=o("wav2vec2"),Dyo=o(" \u2014 "),RO=a("a"),Gyo=o("Wav2Vec2Model"),Oyo=o(" (Wav2Vec2 model)"),Vyo=l(),_1=a("li"),Phe=a("strong"),Xyo=o("wav2vec2-conformer"),zyo=o(" \u2014 "),PO=a("a"),Wyo=o("Wav2Vec2ConformerModel"),Qyo=o(" (Wav2Vec2-Conformer model)"),Uyo=l(),u1=a("li"),Bhe=a("strong"),Hyo=o("wavlm"),Jyo=o(" \u2014 "),BO=a("a"),Yyo=o("WavLMModel"),Kyo=o(" (WavLM model)"),Zyo=l(),b1=a("li"),Ihe=a("strong"),exo=o("xglm"),oxo=o(" \u2014 "),IO=a("a"),rxo=o("XGLMModel"),txo=o(" (XGLM model)"),axo=l(),v1=a("li"),Nhe=a("strong"),nxo=o("xlm"),sxo=o(" \u2014 "),NO=a("a"),lxo=o("XLMModel"),ixo=o(" (XLM model)"),dxo=l(),F1=a("li"),qhe=a("strong"),cxo=o("xlm-prophetnet"),fxo=o(" \u2014 "),qO=a("a"),mxo=o("XLMProphetNetModel"),gxo=o(" (XLM-ProphetNet model)"),hxo=l(),T1=a("li"),jhe=a("strong"),pxo=o("xlm-roberta"),_xo=o(" \u2014 "),jO=a("a"),uxo=o("XLMRobertaModel"),bxo=o(" (XLM-RoBERTa model)"),vxo=l(),M1=a("li"),Dhe=a("strong"),Fxo=o("xlm-roberta-xl"),Txo=o(" \u2014 "),DO=a("a"),Mxo=o("XLMRobertaXLModel"),Exo=o(" (XLM-RoBERTa-XL model)"),Cxo=l(),E1=a("li"),Ghe=a("strong"),wxo=o("xlnet"),Axo=o(" \u2014 "),GO=a("a"),Lxo=o("XLNetModel"),yxo=o(" (XLNet model)"),xxo=l(),C1=a("li"),Ohe=a("strong"),$xo=o("yolos"),kxo=o(" \u2014 "),OO=a("a"),Sxo=o("YolosModel"),Rxo=o(" (YOLOS model)"),Pxo=l(),w1=a("li"),Vhe=a("strong"),Bxo=o("yoso"),Ixo=o(" \u2014 "),VO=a("a"),Nxo=o("YosoModel"),qxo=o(" (YOSO model)"),jxo=l(),A1=a("p"),Dxo=o("The model is set in evaluation mode by default using "),Xhe=a("code"),Gxo=o("model.eval()"),Oxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=a("code"),Vxo=o("model.train()"),Xxo=l(),F(L1.$$.fragment),dUe=l(),nd=a("h2"),y1=a("a"),Whe=a("span"),F(WL.$$.fragment),zxo=l(),Qhe=a("span"),Wxo=o("AutoModelForPreTraining"),cUe=l(),Ro=a("div"),F(QL.$$.fragment),Qxo=l(),sd=a("p"),Uxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XO=a("a"),Hxo=o("from_pretrained()"),Jxo=o(" class method or the "),zO=a("a"),Yxo=o("from_config()"),Kxo=o(` class
method.`),Zxo=l(),UL=a("p"),e$o=o("This class cannot be instantiated directly using "),Uhe=a("code"),o$o=o("__init__()"),r$o=o(" (throws an error)."),t$o=l(),gt=a("div"),F(HL.$$.fragment),a$o=l(),Hhe=a("p"),n$o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),s$o=l(),ld=a("p"),l$o=o(`Note:
Loading a model from its configuration file does `),Jhe=a("strong"),i$o=o("not"),d$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),c$o=o("from_pretrained()"),f$o=o(" to load the model weights."),m$o=l(),F(x1.$$.fragment),g$o=l(),Ze=a("div"),F(JL.$$.fragment),h$o=l(),Yhe=a("p"),p$o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_$o=l(),Xa=a("p"),u$o=o("The model class to instantiate is selected based on the "),Khe=a("code"),b$o=o("model_type"),v$o=o(` property of the config object (either
passed as an argument or loaded from `),Zhe=a("code"),F$o=o("pretrained_model_name_or_path"),T$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=a("code"),M$o=o("pretrained_model_name_or_path"),E$o=o(":"),C$o=l(),G=a("ul"),$1=a("li"),ope=a("strong"),w$o=o("albert"),A$o=o(" \u2014 "),QO=a("a"),L$o=o("AlbertForPreTraining"),y$o=o(" (ALBERT model)"),x$o=l(),k1=a("li"),rpe=a("strong"),$$o=o("bart"),k$o=o(" \u2014 "),UO=a("a"),S$o=o("BartForConditionalGeneration"),R$o=o(" (BART model)"),P$o=l(),S1=a("li"),tpe=a("strong"),B$o=o("bert"),I$o=o(" \u2014 "),HO=a("a"),N$o=o("BertForPreTraining"),q$o=o(" (BERT model)"),j$o=l(),R1=a("li"),ape=a("strong"),D$o=o("big_bird"),G$o=o(" \u2014 "),JO=a("a"),O$o=o("BigBirdForPreTraining"),V$o=o(" (BigBird model)"),X$o=l(),P1=a("li"),npe=a("strong"),z$o=o("bloom"),W$o=o(" \u2014 "),YO=a("a"),Q$o=o("BloomForCausalLM"),U$o=o(" (BLOOM model)"),H$o=l(),B1=a("li"),spe=a("strong"),J$o=o("camembert"),Y$o=o(" \u2014 "),KO=a("a"),K$o=o("CamembertForMaskedLM"),Z$o=o(" (CamemBERT model)"),eko=l(),I1=a("li"),lpe=a("strong"),oko=o("ctrl"),rko=o(" \u2014 "),ZO=a("a"),tko=o("CTRLLMHeadModel"),ako=o(" (CTRL model)"),nko=l(),N1=a("li"),ipe=a("strong"),sko=o("data2vec-text"),lko=o(" \u2014 "),eV=a("a"),iko=o("Data2VecTextForMaskedLM"),dko=o(" (Data2VecText model)"),cko=l(),q1=a("li"),dpe=a("strong"),fko=o("deberta"),mko=o(" \u2014 "),oV=a("a"),gko=o("DebertaForMaskedLM"),hko=o(" (DeBERTa model)"),pko=l(),j1=a("li"),cpe=a("strong"),_ko=o("deberta-v2"),uko=o(" \u2014 "),rV=a("a"),bko=o("DebertaV2ForMaskedLM"),vko=o(" (DeBERTa-v2 model)"),Fko=l(),D1=a("li"),fpe=a("strong"),Tko=o("distilbert"),Mko=o(" \u2014 "),tV=a("a"),Eko=o("DistilBertForMaskedLM"),Cko=o(" (DistilBERT model)"),wko=l(),G1=a("li"),mpe=a("strong"),Ako=o("electra"),Lko=o(" \u2014 "),aV=a("a"),yko=o("ElectraForPreTraining"),xko=o(" (ELECTRA model)"),$ko=l(),O1=a("li"),gpe=a("strong"),kko=o("flaubert"),Sko=o(" \u2014 "),nV=a("a"),Rko=o("FlaubertWithLMHeadModel"),Pko=o(" (FlauBERT model)"),Bko=l(),V1=a("li"),hpe=a("strong"),Iko=o("flava"),Nko=o(" \u2014 "),sV=a("a"),qko=o("FlavaForPreTraining"),jko=o(" (FLAVA model)"),Dko=l(),X1=a("li"),ppe=a("strong"),Gko=o("fnet"),Oko=o(" \u2014 "),lV=a("a"),Vko=o("FNetForPreTraining"),Xko=o(" (FNet model)"),zko=l(),z1=a("li"),_pe=a("strong"),Wko=o("fsmt"),Qko=o(" \u2014 "),iV=a("a"),Uko=o("FSMTForConditionalGeneration"),Hko=o(" (FairSeq Machine-Translation model)"),Jko=l(),W1=a("li"),upe=a("strong"),Yko=o("funnel"),Kko=o(" \u2014 "),dV=a("a"),Zko=o("FunnelForPreTraining"),eSo=o(" (Funnel Transformer model)"),oSo=l(),Q1=a("li"),bpe=a("strong"),rSo=o("gpt2"),tSo=o(" \u2014 "),cV=a("a"),aSo=o("GPT2LMHeadModel"),nSo=o(" (OpenAI GPT-2 model)"),sSo=l(),U1=a("li"),vpe=a("strong"),lSo=o("ibert"),iSo=o(" \u2014 "),fV=a("a"),dSo=o("IBertForMaskedLM"),cSo=o(" (I-BERT model)"),fSo=l(),H1=a("li"),Fpe=a("strong"),mSo=o("layoutlm"),gSo=o(" \u2014 "),mV=a("a"),hSo=o("LayoutLMForMaskedLM"),pSo=o(" (LayoutLM model)"),_So=l(),J1=a("li"),Tpe=a("strong"),uSo=o("longformer"),bSo=o(" \u2014 "),gV=a("a"),vSo=o("LongformerForMaskedLM"),FSo=o(" (Longformer model)"),TSo=l(),Y1=a("li"),Mpe=a("strong"),MSo=o("luke"),ESo=o(" \u2014 "),hV=a("a"),CSo=o("LukeForMaskedLM"),wSo=o(" (LUKE model)"),ASo=l(),K1=a("li"),Epe=a("strong"),LSo=o("lxmert"),ySo=o(" \u2014 "),pV=a("a"),xSo=o("LxmertForPreTraining"),$So=o(" (LXMERT model)"),kSo=l(),Z1=a("li"),Cpe=a("strong"),SSo=o("megatron-bert"),RSo=o(" \u2014 "),_V=a("a"),PSo=o("MegatronBertForPreTraining"),BSo=o(" (Megatron-BERT model)"),ISo=l(),e2=a("li"),wpe=a("strong"),NSo=o("mobilebert"),qSo=o(" \u2014 "),uV=a("a"),jSo=o("MobileBertForPreTraining"),DSo=o(" (MobileBERT model)"),GSo=l(),o2=a("li"),Ape=a("strong"),OSo=o("mpnet"),VSo=o(" \u2014 "),bV=a("a"),XSo=o("MPNetForMaskedLM"),zSo=o(" (MPNet model)"),WSo=l(),r2=a("li"),Lpe=a("strong"),QSo=o("mvp"),USo=o(" \u2014 "),vV=a("a"),HSo=o("MvpForConditionalGeneration"),JSo=o(" (MVP model)"),YSo=l(),t2=a("li"),ype=a("strong"),KSo=o("nezha"),ZSo=o(" \u2014 "),FV=a("a"),eRo=o("NezhaForPreTraining"),oRo=o(" (Nezha model)"),rRo=l(),a2=a("li"),xpe=a("strong"),tRo=o("openai-gpt"),aRo=o(" \u2014 "),TV=a("a"),nRo=o("OpenAIGPTLMHeadModel"),sRo=o(" (OpenAI GPT model)"),lRo=l(),n2=a("li"),$pe=a("strong"),iRo=o("retribert"),dRo=o(" \u2014 "),MV=a("a"),cRo=o("RetriBertModel"),fRo=o(" (RetriBERT model)"),mRo=l(),s2=a("li"),kpe=a("strong"),gRo=o("roberta"),hRo=o(" \u2014 "),EV=a("a"),pRo=o("RobertaForMaskedLM"),_Ro=o(" (RoBERTa model)"),uRo=l(),l2=a("li"),Spe=a("strong"),bRo=o("splinter"),vRo=o(" \u2014 "),CV=a("a"),FRo=o("SplinterForPreTraining"),TRo=o(" (Splinter model)"),MRo=l(),i2=a("li"),Rpe=a("strong"),ERo=o("squeezebert"),CRo=o(" \u2014 "),wV=a("a"),wRo=o("SqueezeBertForMaskedLM"),ARo=o(" (SqueezeBERT model)"),LRo=l(),d2=a("li"),Ppe=a("strong"),yRo=o("t5"),xRo=o(" \u2014 "),AV=a("a"),$Ro=o("T5ForConditionalGeneration"),kRo=o(" (T5 model)"),SRo=l(),c2=a("li"),Bpe=a("strong"),RRo=o("tapas"),PRo=o(" \u2014 "),LV=a("a"),BRo=o("TapasForMaskedLM"),IRo=o(" (TAPAS model)"),NRo=l(),f2=a("li"),Ipe=a("strong"),qRo=o("transfo-xl"),jRo=o(" \u2014 "),yV=a("a"),DRo=o("TransfoXLLMHeadModel"),GRo=o(" (Transformer-XL model)"),ORo=l(),m2=a("li"),Npe=a("strong"),VRo=o("unispeech"),XRo=o(" \u2014 "),xV=a("a"),zRo=o("UniSpeechForPreTraining"),WRo=o(" (UniSpeech model)"),QRo=l(),g2=a("li"),qpe=a("strong"),URo=o("unispeech-sat"),HRo=o(" \u2014 "),$V=a("a"),JRo=o("UniSpeechSatForPreTraining"),YRo=o(" (UniSpeechSat model)"),KRo=l(),h2=a("li"),jpe=a("strong"),ZRo=o("videomae"),ePo=o(" \u2014 "),kV=a("a"),oPo=o("VideoMAEForPreTraining"),rPo=o(" (VideoMAE model)"),tPo=l(),p2=a("li"),Dpe=a("strong"),aPo=o("visual_bert"),nPo=o(" \u2014 "),SV=a("a"),sPo=o("VisualBertForPreTraining"),lPo=o(" (VisualBERT model)"),iPo=l(),_2=a("li"),Gpe=a("strong"),dPo=o("vit_mae"),cPo=o(" \u2014 "),RV=a("a"),fPo=o("ViTMAEForPreTraining"),mPo=o(" (ViTMAE model)"),gPo=l(),u2=a("li"),Ope=a("strong"),hPo=o("wav2vec2"),pPo=o(" \u2014 "),PV=a("a"),_Po=o("Wav2Vec2ForPreTraining"),uPo=o(" (Wav2Vec2 model)"),bPo=l(),b2=a("li"),Vpe=a("strong"),vPo=o("wav2vec2-conformer"),FPo=o(" \u2014 "),BV=a("a"),TPo=o("Wav2Vec2ConformerForPreTraining"),MPo=o(" (Wav2Vec2-Conformer model)"),EPo=l(),v2=a("li"),Xpe=a("strong"),CPo=o("xlm"),wPo=o(" \u2014 "),IV=a("a"),APo=o("XLMWithLMHeadModel"),LPo=o(" (XLM model)"),yPo=l(),F2=a("li"),zpe=a("strong"),xPo=o("xlm-roberta"),$Po=o(" \u2014 "),NV=a("a"),kPo=o("XLMRobertaForMaskedLM"),SPo=o(" (XLM-RoBERTa model)"),RPo=l(),T2=a("li"),Wpe=a("strong"),PPo=o("xlm-roberta-xl"),BPo=o(" \u2014 "),qV=a("a"),IPo=o("XLMRobertaXLForMaskedLM"),NPo=o(" (XLM-RoBERTa-XL model)"),qPo=l(),M2=a("li"),Qpe=a("strong"),jPo=o("xlnet"),DPo=o(" \u2014 "),jV=a("a"),GPo=o("XLNetLMHeadModel"),OPo=o(" (XLNet model)"),VPo=l(),E2=a("p"),XPo=o("The model is set in evaluation mode by default using "),Upe=a("code"),zPo=o("model.eval()"),WPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),QPo=o("model.train()"),UPo=l(),F(C2.$$.fragment),fUe=l(),id=a("h2"),w2=a("a"),Jpe=a("span"),F(YL.$$.fragment),HPo=l(),Ype=a("span"),JPo=o("AutoModelForCausalLM"),mUe=l(),Po=a("div"),F(KL.$$.fragment),YPo=l(),dd=a("p"),KPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DV=a("a"),ZPo=o("from_pretrained()"),eBo=o(" class method or the "),GV=a("a"),oBo=o("from_config()"),rBo=o(` class
method.`),tBo=l(),ZL=a("p"),aBo=o("This class cannot be instantiated directly using "),Kpe=a("code"),nBo=o("__init__()"),sBo=o(" (throws an error)."),lBo=l(),ht=a("div"),F(ey.$$.fragment),iBo=l(),Zpe=a("p"),dBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cBo=l(),cd=a("p"),fBo=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),mBo=o("not"),gBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),hBo=o("from_pretrained()"),pBo=o(" to load the model weights."),_Bo=l(),F(A2.$$.fragment),uBo=l(),eo=a("div"),F(oy.$$.fragment),bBo=l(),o_e=a("p"),vBo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FBo=l(),za=a("p"),TBo=o("The model class to instantiate is selected based on the "),r_e=a("code"),MBo=o("model_type"),EBo=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),CBo=o("pretrained_model_name_or_path"),wBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),ABo=o("pretrained_model_name_or_path"),LBo=o(":"),yBo=l(),z=a("ul"),L2=a("li"),n_e=a("strong"),xBo=o("bart"),$Bo=o(" \u2014 "),VV=a("a"),kBo=o("BartForCausalLM"),SBo=o(" (BART model)"),RBo=l(),y2=a("li"),s_e=a("strong"),PBo=o("bert"),BBo=o(" \u2014 "),XV=a("a"),IBo=o("BertLMHeadModel"),NBo=o(" (BERT model)"),qBo=l(),x2=a("li"),l_e=a("strong"),jBo=o("bert-generation"),DBo=o(" \u2014 "),zV=a("a"),GBo=o("BertGenerationDecoder"),OBo=o(" (Bert Generation model)"),VBo=l(),$2=a("li"),i_e=a("strong"),XBo=o("big_bird"),zBo=o(" \u2014 "),WV=a("a"),WBo=o("BigBirdForCausalLM"),QBo=o(" (BigBird model)"),UBo=l(),k2=a("li"),d_e=a("strong"),HBo=o("bigbird_pegasus"),JBo=o(" \u2014 "),QV=a("a"),YBo=o("BigBirdPegasusForCausalLM"),KBo=o(" (BigBird-Pegasus model)"),ZBo=l(),S2=a("li"),c_e=a("strong"),eIo=o("blenderbot"),oIo=o(" \u2014 "),UV=a("a"),rIo=o("BlenderbotForCausalLM"),tIo=o(" (Blenderbot model)"),aIo=l(),R2=a("li"),f_e=a("strong"),nIo=o("blenderbot-small"),sIo=o(" \u2014 "),HV=a("a"),lIo=o("BlenderbotSmallForCausalLM"),iIo=o(" (BlenderbotSmall model)"),dIo=l(),P2=a("li"),m_e=a("strong"),cIo=o("bloom"),fIo=o(" \u2014 "),JV=a("a"),mIo=o("BloomForCausalLM"),gIo=o(" (BLOOM model)"),hIo=l(),B2=a("li"),g_e=a("strong"),pIo=o("camembert"),_Io=o(" \u2014 "),YV=a("a"),uIo=o("CamembertForCausalLM"),bIo=o(" (CamemBERT model)"),vIo=l(),I2=a("li"),h_e=a("strong"),FIo=o("codegen"),TIo=o(" \u2014 "),KV=a("a"),MIo=o("CodeGenForCausalLM"),EIo=o(" (CodeGen model)"),CIo=l(),N2=a("li"),p_e=a("strong"),wIo=o("ctrl"),AIo=o(" \u2014 "),ZV=a("a"),LIo=o("CTRLLMHeadModel"),yIo=o(" (CTRL model)"),xIo=l(),q2=a("li"),__e=a("strong"),$Io=o("data2vec-text"),kIo=o(" \u2014 "),eX=a("a"),SIo=o("Data2VecTextForCausalLM"),RIo=o(" (Data2VecText model)"),PIo=l(),j2=a("li"),u_e=a("strong"),BIo=o("electra"),IIo=o(" \u2014 "),oX=a("a"),NIo=o("ElectraForCausalLM"),qIo=o(" (ELECTRA model)"),jIo=l(),D2=a("li"),b_e=a("strong"),DIo=o("gpt2"),GIo=o(" \u2014 "),rX=a("a"),OIo=o("GPT2LMHeadModel"),VIo=o(" (OpenAI GPT-2 model)"),XIo=l(),G2=a("li"),v_e=a("strong"),zIo=o("gpt_neo"),WIo=o(" \u2014 "),tX=a("a"),QIo=o("GPTNeoForCausalLM"),UIo=o(" (GPT Neo model)"),HIo=l(),O2=a("li"),F_e=a("strong"),JIo=o("gpt_neox"),YIo=o(" \u2014 "),aX=a("a"),KIo=o("GPTNeoXForCausalLM"),ZIo=o(" (GPT NeoX model)"),eNo=l(),V2=a("li"),T_e=a("strong"),oNo=o("gptj"),rNo=o(" \u2014 "),nX=a("a"),tNo=o("GPTJForCausalLM"),aNo=o(" (GPT-J model)"),nNo=l(),X2=a("li"),M_e=a("strong"),sNo=o("marian"),lNo=o(" \u2014 "),sX=a("a"),iNo=o("MarianForCausalLM"),dNo=o(" (Marian model)"),cNo=l(),z2=a("li"),E_e=a("strong"),fNo=o("mbart"),mNo=o(" \u2014 "),lX=a("a"),gNo=o("MBartForCausalLM"),hNo=o(" (mBART model)"),pNo=l(),W2=a("li"),C_e=a("strong"),_No=o("megatron-bert"),uNo=o(" \u2014 "),iX=a("a"),bNo=o("MegatronBertForCausalLM"),vNo=o(" (Megatron-BERT model)"),FNo=l(),Q2=a("li"),w_e=a("strong"),TNo=o("mvp"),MNo=o(" \u2014 "),dX=a("a"),ENo=o("MvpForCausalLM"),CNo=o(" (MVP model)"),wNo=l(),U2=a("li"),A_e=a("strong"),ANo=o("openai-gpt"),LNo=o(" \u2014 "),cX=a("a"),yNo=o("OpenAIGPTLMHeadModel"),xNo=o(" (OpenAI GPT model)"),$No=l(),H2=a("li"),L_e=a("strong"),kNo=o("opt"),SNo=o(" \u2014 "),fX=a("a"),RNo=o("OPTForCausalLM"),PNo=o(" (OPT model)"),BNo=l(),J2=a("li"),y_e=a("strong"),INo=o("pegasus"),NNo=o(" \u2014 "),mX=a("a"),qNo=o("PegasusForCausalLM"),jNo=o(" (Pegasus model)"),DNo=l(),Y2=a("li"),x_e=a("strong"),GNo=o("plbart"),ONo=o(" \u2014 "),gX=a("a"),VNo=o("PLBartForCausalLM"),XNo=o(" (PLBart model)"),zNo=l(),K2=a("li"),$_e=a("strong"),WNo=o("prophetnet"),QNo=o(" \u2014 "),hX=a("a"),UNo=o("ProphetNetForCausalLM"),HNo=o(" (ProphetNet model)"),JNo=l(),Z2=a("li"),k_e=a("strong"),YNo=o("qdqbert"),KNo=o(" \u2014 "),pX=a("a"),ZNo=o("QDQBertLMHeadModel"),eqo=o(" (QDQBert model)"),oqo=l(),eb=a("li"),S_e=a("strong"),rqo=o("reformer"),tqo=o(" \u2014 "),_X=a("a"),aqo=o("ReformerModelWithLMHead"),nqo=o(" (Reformer model)"),sqo=l(),ob=a("li"),R_e=a("strong"),lqo=o("rembert"),iqo=o(" \u2014 "),uX=a("a"),dqo=o("RemBertForCausalLM"),cqo=o(" (RemBERT model)"),fqo=l(),rb=a("li"),P_e=a("strong"),mqo=o("roberta"),gqo=o(" \u2014 "),bX=a("a"),hqo=o("RobertaForCausalLM"),pqo=o(" (RoBERTa model)"),_qo=l(),tb=a("li"),B_e=a("strong"),uqo=o("roformer"),bqo=o(" \u2014 "),vX=a("a"),vqo=o("RoFormerForCausalLM"),Fqo=o(" (RoFormer model)"),Tqo=l(),ab=a("li"),I_e=a("strong"),Mqo=o("speech_to_text_2"),Eqo=o(" \u2014 "),FX=a("a"),Cqo=o("Speech2Text2ForCausalLM"),wqo=o(" (Speech2Text2 model)"),Aqo=l(),nb=a("li"),N_e=a("strong"),Lqo=o("transfo-xl"),yqo=o(" \u2014 "),TX=a("a"),xqo=o("TransfoXLLMHeadModel"),$qo=o(" (Transformer-XL model)"),kqo=l(),sb=a("li"),q_e=a("strong"),Sqo=o("trocr"),Rqo=o(" \u2014 "),MX=a("a"),Pqo=o("TrOCRForCausalLM"),Bqo=o(" (TrOCR model)"),Iqo=l(),lb=a("li"),j_e=a("strong"),Nqo=o("xglm"),qqo=o(" \u2014 "),EX=a("a"),jqo=o("XGLMForCausalLM"),Dqo=o(" (XGLM model)"),Gqo=l(),ib=a("li"),D_e=a("strong"),Oqo=o("xlm"),Vqo=o(" \u2014 "),CX=a("a"),Xqo=o("XLMWithLMHeadModel"),zqo=o(" (XLM model)"),Wqo=l(),db=a("li"),G_e=a("strong"),Qqo=o("xlm-prophetnet"),Uqo=o(" \u2014 "),wX=a("a"),Hqo=o("XLMProphetNetForCausalLM"),Jqo=o(" (XLM-ProphetNet model)"),Yqo=l(),cb=a("li"),O_e=a("strong"),Kqo=o("xlm-roberta"),Zqo=o(" \u2014 "),AX=a("a"),ejo=o("XLMRobertaForCausalLM"),ojo=o(" (XLM-RoBERTa model)"),rjo=l(),fb=a("li"),V_e=a("strong"),tjo=o("xlm-roberta-xl"),ajo=o(" \u2014 "),LX=a("a"),njo=o("XLMRobertaXLForCausalLM"),sjo=o(" (XLM-RoBERTa-XL model)"),ljo=l(),mb=a("li"),X_e=a("strong"),ijo=o("xlnet"),djo=o(" \u2014 "),yX=a("a"),cjo=o("XLNetLMHeadModel"),fjo=o(" (XLNet model)"),mjo=l(),gb=a("p"),gjo=o("The model is set in evaluation mode by default using "),z_e=a("code"),hjo=o("model.eval()"),pjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),_jo=o("model.train()"),ujo=l(),F(hb.$$.fragment),gUe=l(),fd=a("h2"),pb=a("a"),Q_e=a("span"),F(ry.$$.fragment),bjo=l(),U_e=a("span"),vjo=o("AutoModelForMaskedLM"),hUe=l(),Bo=a("div"),F(ty.$$.fragment),Fjo=l(),md=a("p"),Tjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xX=a("a"),Mjo=o("from_pretrained()"),Ejo=o(" class method or the "),$X=a("a"),Cjo=o("from_config()"),wjo=o(` class
method.`),Ajo=l(),ay=a("p"),Ljo=o("This class cannot be instantiated directly using "),H_e=a("code"),yjo=o("__init__()"),xjo=o(" (throws an error)."),$jo=l(),pt=a("div"),F(ny.$$.fragment),kjo=l(),J_e=a("p"),Sjo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rjo=l(),gd=a("p"),Pjo=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Bjo=o("not"),Ijo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=a("a"),Njo=o("from_pretrained()"),qjo=o(" to load the model weights."),jjo=l(),F(_b.$$.fragment),Djo=l(),oo=a("div"),F(sy.$$.fragment),Gjo=l(),K_e=a("p"),Ojo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vjo=l(),Wa=a("p"),Xjo=o("The model class to instantiate is selected based on the "),Z_e=a("code"),zjo=o("model_type"),Wjo=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),Qjo=o("pretrained_model_name_or_path"),Ujo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),Hjo=o("pretrained_model_name_or_path"),Jjo=o(":"),Yjo=l(),U=a("ul"),ub=a("li"),rue=a("strong"),Kjo=o("albert"),Zjo=o(" \u2014 "),SX=a("a"),eDo=o("AlbertForMaskedLM"),oDo=o(" (ALBERT model)"),rDo=l(),bb=a("li"),tue=a("strong"),tDo=o("bart"),aDo=o(" \u2014 "),RX=a("a"),nDo=o("BartForConditionalGeneration"),sDo=o(" (BART model)"),lDo=l(),vb=a("li"),aue=a("strong"),iDo=o("bert"),dDo=o(" \u2014 "),PX=a("a"),cDo=o("BertForMaskedLM"),fDo=o(" (BERT model)"),mDo=l(),Fb=a("li"),nue=a("strong"),gDo=o("big_bird"),hDo=o(" \u2014 "),BX=a("a"),pDo=o("BigBirdForMaskedLM"),_Do=o(" (BigBird model)"),uDo=l(),Tb=a("li"),sue=a("strong"),bDo=o("camembert"),vDo=o(" \u2014 "),IX=a("a"),FDo=o("CamembertForMaskedLM"),TDo=o(" (CamemBERT model)"),MDo=l(),Mb=a("li"),lue=a("strong"),EDo=o("convbert"),CDo=o(" \u2014 "),NX=a("a"),wDo=o("ConvBertForMaskedLM"),ADo=o(" (ConvBERT model)"),LDo=l(),Eb=a("li"),iue=a("strong"),yDo=o("data2vec-text"),xDo=o(" \u2014 "),qX=a("a"),$Do=o("Data2VecTextForMaskedLM"),kDo=o(" (Data2VecText model)"),SDo=l(),Cb=a("li"),due=a("strong"),RDo=o("deberta"),PDo=o(" \u2014 "),jX=a("a"),BDo=o("DebertaForMaskedLM"),IDo=o(" (DeBERTa model)"),NDo=l(),wb=a("li"),cue=a("strong"),qDo=o("deberta-v2"),jDo=o(" \u2014 "),DX=a("a"),DDo=o("DebertaV2ForMaskedLM"),GDo=o(" (DeBERTa-v2 model)"),ODo=l(),Ab=a("li"),fue=a("strong"),VDo=o("distilbert"),XDo=o(" \u2014 "),GX=a("a"),zDo=o("DistilBertForMaskedLM"),WDo=o(" (DistilBERT model)"),QDo=l(),Lb=a("li"),mue=a("strong"),UDo=o("electra"),HDo=o(" \u2014 "),OX=a("a"),JDo=o("ElectraForMaskedLM"),YDo=o(" (ELECTRA model)"),KDo=l(),yb=a("li"),gue=a("strong"),ZDo=o("flaubert"),eGo=o(" \u2014 "),VX=a("a"),oGo=o("FlaubertWithLMHeadModel"),rGo=o(" (FlauBERT model)"),tGo=l(),xb=a("li"),hue=a("strong"),aGo=o("fnet"),nGo=o(" \u2014 "),XX=a("a"),sGo=o("FNetForMaskedLM"),lGo=o(" (FNet model)"),iGo=l(),$b=a("li"),pue=a("strong"),dGo=o("funnel"),cGo=o(" \u2014 "),zX=a("a"),fGo=o("FunnelForMaskedLM"),mGo=o(" (Funnel Transformer model)"),gGo=l(),kb=a("li"),_ue=a("strong"),hGo=o("ibert"),pGo=o(" \u2014 "),WX=a("a"),_Go=o("IBertForMaskedLM"),uGo=o(" (I-BERT model)"),bGo=l(),Sb=a("li"),uue=a("strong"),vGo=o("layoutlm"),FGo=o(" \u2014 "),QX=a("a"),TGo=o("LayoutLMForMaskedLM"),MGo=o(" (LayoutLM model)"),EGo=l(),Rb=a("li"),bue=a("strong"),CGo=o("longformer"),wGo=o(" \u2014 "),UX=a("a"),AGo=o("LongformerForMaskedLM"),LGo=o(" (Longformer model)"),yGo=l(),Pb=a("li"),vue=a("strong"),xGo=o("luke"),$Go=o(" \u2014 "),HX=a("a"),kGo=o("LukeForMaskedLM"),SGo=o(" (LUKE model)"),RGo=l(),Bb=a("li"),Fue=a("strong"),PGo=o("mbart"),BGo=o(" \u2014 "),JX=a("a"),IGo=o("MBartForConditionalGeneration"),NGo=o(" (mBART model)"),qGo=l(),Ib=a("li"),Tue=a("strong"),jGo=o("megatron-bert"),DGo=o(" \u2014 "),YX=a("a"),GGo=o("MegatronBertForMaskedLM"),OGo=o(" (Megatron-BERT model)"),VGo=l(),Nb=a("li"),Mue=a("strong"),XGo=o("mobilebert"),zGo=o(" \u2014 "),KX=a("a"),WGo=o("MobileBertForMaskedLM"),QGo=o(" (MobileBERT model)"),UGo=l(),qb=a("li"),Eue=a("strong"),HGo=o("mpnet"),JGo=o(" \u2014 "),ZX=a("a"),YGo=o("MPNetForMaskedLM"),KGo=o(" (MPNet model)"),ZGo=l(),jb=a("li"),Cue=a("strong"),eOo=o("mvp"),oOo=o(" \u2014 "),ez=a("a"),rOo=o("MvpForConditionalGeneration"),tOo=o(" (MVP model)"),aOo=l(),Db=a("li"),wue=a("strong"),nOo=o("nezha"),sOo=o(" \u2014 "),oz=a("a"),lOo=o("NezhaForMaskedLM"),iOo=o(" (Nezha model)"),dOo=l(),Gb=a("li"),Aue=a("strong"),cOo=o("nystromformer"),fOo=o(" \u2014 "),rz=a("a"),mOo=o("NystromformerForMaskedLM"),gOo=o(" (Nystr\xF6mformer model)"),hOo=l(),Ob=a("li"),Lue=a("strong"),pOo=o("perceiver"),_Oo=o(" \u2014 "),tz=a("a"),uOo=o("PerceiverForMaskedLM"),bOo=o(" (Perceiver model)"),vOo=l(),Vb=a("li"),yue=a("strong"),FOo=o("qdqbert"),TOo=o(" \u2014 "),az=a("a"),MOo=o("QDQBertForMaskedLM"),EOo=o(" (QDQBert model)"),COo=l(),Xb=a("li"),xue=a("strong"),wOo=o("reformer"),AOo=o(" \u2014 "),nz=a("a"),LOo=o("ReformerForMaskedLM"),yOo=o(" (Reformer model)"),xOo=l(),zb=a("li"),$ue=a("strong"),$Oo=o("rembert"),kOo=o(" \u2014 "),sz=a("a"),SOo=o("RemBertForMaskedLM"),ROo=o(" (RemBERT model)"),POo=l(),Wb=a("li"),kue=a("strong"),BOo=o("roberta"),IOo=o(" \u2014 "),lz=a("a"),NOo=o("RobertaForMaskedLM"),qOo=o(" (RoBERTa model)"),jOo=l(),Qb=a("li"),Sue=a("strong"),DOo=o("roformer"),GOo=o(" \u2014 "),iz=a("a"),OOo=o("RoFormerForMaskedLM"),VOo=o(" (RoFormer model)"),XOo=l(),Ub=a("li"),Rue=a("strong"),zOo=o("squeezebert"),WOo=o(" \u2014 "),dz=a("a"),QOo=o("SqueezeBertForMaskedLM"),UOo=o(" (SqueezeBERT model)"),HOo=l(),Hb=a("li"),Pue=a("strong"),JOo=o("tapas"),YOo=o(" \u2014 "),cz=a("a"),KOo=o("TapasForMaskedLM"),ZOo=o(" (TAPAS model)"),eVo=l(),Jb=a("li"),Bue=a("strong"),oVo=o("wav2vec2"),rVo=o(" \u2014 "),Iue=a("code"),tVo=o("Wav2Vec2ForMaskedLM"),aVo=o(" (Wav2Vec2 model)"),nVo=l(),Yb=a("li"),Nue=a("strong"),sVo=o("xlm"),lVo=o(" \u2014 "),fz=a("a"),iVo=o("XLMWithLMHeadModel"),dVo=o(" (XLM model)"),cVo=l(),Kb=a("li"),que=a("strong"),fVo=o("xlm-roberta"),mVo=o(" \u2014 "),mz=a("a"),gVo=o("XLMRobertaForMaskedLM"),hVo=o(" (XLM-RoBERTa model)"),pVo=l(),Zb=a("li"),jue=a("strong"),_Vo=o("xlm-roberta-xl"),uVo=o(" \u2014 "),gz=a("a"),bVo=o("XLMRobertaXLForMaskedLM"),vVo=o(" (XLM-RoBERTa-XL model)"),FVo=l(),ev=a("li"),Due=a("strong"),TVo=o("yoso"),MVo=o(" \u2014 "),hz=a("a"),EVo=o("YosoForMaskedLM"),CVo=o(" (YOSO model)"),wVo=l(),ov=a("p"),AVo=o("The model is set in evaluation mode by default using "),Gue=a("code"),LVo=o("model.eval()"),yVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),xVo=o("model.train()"),$Vo=l(),F(rv.$$.fragment),pUe=l(),hd=a("h2"),tv=a("a"),Vue=a("span"),F(ly.$$.fragment),kVo=l(),Xue=a("span"),SVo=o("AutoModelForSeq2SeqLM"),_Ue=l(),Io=a("div"),F(iy.$$.fragment),RVo=l(),pd=a("p"),PVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pz=a("a"),BVo=o("from_pretrained()"),IVo=o(" class method or the "),_z=a("a"),NVo=o("from_config()"),qVo=o(` class
method.`),jVo=l(),dy=a("p"),DVo=o("This class cannot be instantiated directly using "),zue=a("code"),GVo=o("__init__()"),OVo=o(" (throws an error)."),VVo=l(),_t=a("div"),F(cy.$$.fragment),XVo=l(),Wue=a("p"),zVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WVo=l(),_d=a("p"),QVo=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),UVo=o("not"),HVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),JVo=o("from_pretrained()"),YVo=o(" to load the model weights."),KVo=l(),F(av.$$.fragment),ZVo=l(),ro=a("div"),F(fy.$$.fragment),eXo=l(),Uue=a("p"),oXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rXo=l(),Qa=a("p"),tXo=o("The model class to instantiate is selected based on the "),Hue=a("code"),aXo=o("model_type"),nXo=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),sXo=o("pretrained_model_name_or_path"),lXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),iXo=o("pretrained_model_name_or_path"),dXo=o(":"),cXo=l(),me=a("ul"),nv=a("li"),Kue=a("strong"),fXo=o("bart"),mXo=o(" \u2014 "),bz=a("a"),gXo=o("BartForConditionalGeneration"),hXo=o(" (BART model)"),pXo=l(),sv=a("li"),Zue=a("strong"),_Xo=o("bigbird_pegasus"),uXo=o(" \u2014 "),vz=a("a"),bXo=o("BigBirdPegasusForConditionalGeneration"),vXo=o(" (BigBird-Pegasus model)"),FXo=l(),lv=a("li"),e1e=a("strong"),TXo=o("blenderbot"),MXo=o(" \u2014 "),Fz=a("a"),EXo=o("BlenderbotForConditionalGeneration"),CXo=o(" (Blenderbot model)"),wXo=l(),iv=a("li"),o1e=a("strong"),AXo=o("blenderbot-small"),LXo=o(" \u2014 "),Tz=a("a"),yXo=o("BlenderbotSmallForConditionalGeneration"),xXo=o(" (BlenderbotSmall model)"),$Xo=l(),dv=a("li"),r1e=a("strong"),kXo=o("encoder-decoder"),SXo=o(" \u2014 "),Mz=a("a"),RXo=o("EncoderDecoderModel"),PXo=o(" (Encoder decoder model)"),BXo=l(),cv=a("li"),t1e=a("strong"),IXo=o("fsmt"),NXo=o(" \u2014 "),Ez=a("a"),qXo=o("FSMTForConditionalGeneration"),jXo=o(" (FairSeq Machine-Translation model)"),DXo=l(),fv=a("li"),a1e=a("strong"),GXo=o("led"),OXo=o(" \u2014 "),Cz=a("a"),VXo=o("LEDForConditionalGeneration"),XXo=o(" (LED model)"),zXo=l(),mv=a("li"),n1e=a("strong"),WXo=o("longt5"),QXo=o(" \u2014 "),wz=a("a"),UXo=o("LongT5ForConditionalGeneration"),HXo=o(" (LongT5 model)"),JXo=l(),gv=a("li"),s1e=a("strong"),YXo=o("m2m_100"),KXo=o(" \u2014 "),Az=a("a"),ZXo=o("M2M100ForConditionalGeneration"),ezo=o(" (M2M100 model)"),ozo=l(),hv=a("li"),l1e=a("strong"),rzo=o("marian"),tzo=o(" \u2014 "),Lz=a("a"),azo=o("MarianMTModel"),nzo=o(" (Marian model)"),szo=l(),pv=a("li"),i1e=a("strong"),lzo=o("mbart"),izo=o(" \u2014 "),yz=a("a"),dzo=o("MBartForConditionalGeneration"),czo=o(" (mBART model)"),fzo=l(),_v=a("li"),d1e=a("strong"),mzo=o("mt5"),gzo=o(" \u2014 "),xz=a("a"),hzo=o("MT5ForConditionalGeneration"),pzo=o(" (MT5 model)"),_zo=l(),uv=a("li"),c1e=a("strong"),uzo=o("mvp"),bzo=o(" \u2014 "),$z=a("a"),vzo=o("MvpForConditionalGeneration"),Fzo=o(" (MVP model)"),Tzo=l(),bv=a("li"),f1e=a("strong"),Mzo=o("nllb"),Ezo=o(" \u2014 "),kz=a("a"),Czo=o("M2M100ForConditionalGeneration"),wzo=o(" (NLLB model)"),Azo=l(),vv=a("li"),m1e=a("strong"),Lzo=o("pegasus"),yzo=o(" \u2014 "),Sz=a("a"),xzo=o("PegasusForConditionalGeneration"),$zo=o(" (Pegasus model)"),kzo=l(),Fv=a("li"),g1e=a("strong"),Szo=o("plbart"),Rzo=o(" \u2014 "),Rz=a("a"),Pzo=o("PLBartForConditionalGeneration"),Bzo=o(" (PLBart model)"),Izo=l(),Tv=a("li"),h1e=a("strong"),Nzo=o("prophetnet"),qzo=o(" \u2014 "),Pz=a("a"),jzo=o("ProphetNetForConditionalGeneration"),Dzo=o(" (ProphetNet model)"),Gzo=l(),Mv=a("li"),p1e=a("strong"),Ozo=o("t5"),Vzo=o(" \u2014 "),Bz=a("a"),Xzo=o("T5ForConditionalGeneration"),zzo=o(" (T5 model)"),Wzo=l(),Ev=a("li"),_1e=a("strong"),Qzo=o("xlm-prophetnet"),Uzo=o(" \u2014 "),Iz=a("a"),Hzo=o("XLMProphetNetForConditionalGeneration"),Jzo=o(" (XLM-ProphetNet model)"),Yzo=l(),Cv=a("p"),Kzo=o("The model is set in evaluation mode by default using "),u1e=a("code"),Zzo=o("model.eval()"),eWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=a("code"),oWo=o("model.train()"),rWo=l(),F(wv.$$.fragment),uUe=l(),ud=a("h2"),Av=a("a"),v1e=a("span"),F(my.$$.fragment),tWo=l(),F1e=a("span"),aWo=o("AutoModelForSequenceClassification"),bUe=l(),No=a("div"),F(gy.$$.fragment),nWo=l(),bd=a("p"),sWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nz=a("a"),lWo=o("from_pretrained()"),iWo=o(" class method or the "),qz=a("a"),dWo=o("from_config()"),cWo=o(` class
method.`),fWo=l(),hy=a("p"),mWo=o("This class cannot be instantiated directly using "),T1e=a("code"),gWo=o("__init__()"),hWo=o(" (throws an error)."),pWo=l(),ut=a("div"),F(py.$$.fragment),_Wo=l(),M1e=a("p"),uWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bWo=l(),vd=a("p"),vWo=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),FWo=o("not"),TWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),MWo=o("from_pretrained()"),EWo=o(" to load the model weights."),CWo=l(),F(Lv.$$.fragment),wWo=l(),to=a("div"),F(_y.$$.fragment),AWo=l(),C1e=a("p"),LWo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yWo=l(),Ua=a("p"),xWo=o("The model class to instantiate is selected based on the "),w1e=a("code"),$Wo=o("model_type"),kWo=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),SWo=o("pretrained_model_name_or_path"),RWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),PWo=o("pretrained_model_name_or_path"),BWo=o(":"),IWo=l(),N=a("ul"),yv=a("li"),y1e=a("strong"),NWo=o("albert"),qWo=o(" \u2014 "),Dz=a("a"),jWo=o("AlbertForSequenceClassification"),DWo=o(" (ALBERT model)"),GWo=l(),xv=a("li"),x1e=a("strong"),OWo=o("bart"),VWo=o(" \u2014 "),Gz=a("a"),XWo=o("BartForSequenceClassification"),zWo=o(" (BART model)"),WWo=l(),$v=a("li"),$1e=a("strong"),QWo=o("bert"),UWo=o(" \u2014 "),Oz=a("a"),HWo=o("BertForSequenceClassification"),JWo=o(" (BERT model)"),YWo=l(),kv=a("li"),k1e=a("strong"),KWo=o("big_bird"),ZWo=o(" \u2014 "),Vz=a("a"),eQo=o("BigBirdForSequenceClassification"),oQo=o(" (BigBird model)"),rQo=l(),Sv=a("li"),S1e=a("strong"),tQo=o("bigbird_pegasus"),aQo=o(" \u2014 "),Xz=a("a"),nQo=o("BigBirdPegasusForSequenceClassification"),sQo=o(" (BigBird-Pegasus model)"),lQo=l(),Rv=a("li"),R1e=a("strong"),iQo=o("bloom"),dQo=o(" \u2014 "),zz=a("a"),cQo=o("BloomForSequenceClassification"),fQo=o(" (BLOOM model)"),mQo=l(),Pv=a("li"),P1e=a("strong"),gQo=o("camembert"),hQo=o(" \u2014 "),Wz=a("a"),pQo=o("CamembertForSequenceClassification"),_Qo=o(" (CamemBERT model)"),uQo=l(),Bv=a("li"),B1e=a("strong"),bQo=o("canine"),vQo=o(" \u2014 "),Qz=a("a"),FQo=o("CanineForSequenceClassification"),TQo=o(" (CANINE model)"),MQo=l(),Iv=a("li"),I1e=a("strong"),EQo=o("convbert"),CQo=o(" \u2014 "),Uz=a("a"),wQo=o("ConvBertForSequenceClassification"),AQo=o(" (ConvBERT model)"),LQo=l(),Nv=a("li"),N1e=a("strong"),yQo=o("ctrl"),xQo=o(" \u2014 "),Hz=a("a"),$Qo=o("CTRLForSequenceClassification"),kQo=o(" (CTRL model)"),SQo=l(),qv=a("li"),q1e=a("strong"),RQo=o("data2vec-text"),PQo=o(" \u2014 "),Jz=a("a"),BQo=o("Data2VecTextForSequenceClassification"),IQo=o(" (Data2VecText model)"),NQo=l(),jv=a("li"),j1e=a("strong"),qQo=o("deberta"),jQo=o(" \u2014 "),Yz=a("a"),DQo=o("DebertaForSequenceClassification"),GQo=o(" (DeBERTa model)"),OQo=l(),Dv=a("li"),D1e=a("strong"),VQo=o("deberta-v2"),XQo=o(" \u2014 "),Kz=a("a"),zQo=o("DebertaV2ForSequenceClassification"),WQo=o(" (DeBERTa-v2 model)"),QQo=l(),Gv=a("li"),G1e=a("strong"),UQo=o("distilbert"),HQo=o(" \u2014 "),Zz=a("a"),JQo=o("DistilBertForSequenceClassification"),YQo=o(" (DistilBERT model)"),KQo=l(),Ov=a("li"),O1e=a("strong"),ZQo=o("electra"),eUo=o(" \u2014 "),eW=a("a"),oUo=o("ElectraForSequenceClassification"),rUo=o(" (ELECTRA model)"),tUo=l(),Vv=a("li"),V1e=a("strong"),aUo=o("flaubert"),nUo=o(" \u2014 "),oW=a("a"),sUo=o("FlaubertForSequenceClassification"),lUo=o(" (FlauBERT model)"),iUo=l(),Xv=a("li"),X1e=a("strong"),dUo=o("fnet"),cUo=o(" \u2014 "),rW=a("a"),fUo=o("FNetForSequenceClassification"),mUo=o(" (FNet model)"),gUo=l(),zv=a("li"),z1e=a("strong"),hUo=o("funnel"),pUo=o(" \u2014 "),tW=a("a"),_Uo=o("FunnelForSequenceClassification"),uUo=o(" (Funnel Transformer model)"),bUo=l(),Wv=a("li"),W1e=a("strong"),vUo=o("gpt2"),FUo=o(" \u2014 "),aW=a("a"),TUo=o("GPT2ForSequenceClassification"),MUo=o(" (OpenAI GPT-2 model)"),EUo=l(),Qv=a("li"),Q1e=a("strong"),CUo=o("gpt_neo"),wUo=o(" \u2014 "),nW=a("a"),AUo=o("GPTNeoForSequenceClassification"),LUo=o(" (GPT Neo model)"),yUo=l(),Uv=a("li"),U1e=a("strong"),xUo=o("gptj"),$Uo=o(" \u2014 "),sW=a("a"),kUo=o("GPTJForSequenceClassification"),SUo=o(" (GPT-J model)"),RUo=l(),Hv=a("li"),H1e=a("strong"),PUo=o("ibert"),BUo=o(" \u2014 "),lW=a("a"),IUo=o("IBertForSequenceClassification"),NUo=o(" (I-BERT model)"),qUo=l(),Jv=a("li"),J1e=a("strong"),jUo=o("layoutlm"),DUo=o(" \u2014 "),iW=a("a"),GUo=o("LayoutLMForSequenceClassification"),OUo=o(" (LayoutLM model)"),VUo=l(),Yv=a("li"),Y1e=a("strong"),XUo=o("layoutlmv2"),zUo=o(" \u2014 "),dW=a("a"),WUo=o("LayoutLMv2ForSequenceClassification"),QUo=o(" (LayoutLMv2 model)"),UUo=l(),Kv=a("li"),K1e=a("strong"),HUo=o("layoutlmv3"),JUo=o(" \u2014 "),cW=a("a"),YUo=o("LayoutLMv3ForSequenceClassification"),KUo=o(" (LayoutLMv3 model)"),ZUo=l(),Zv=a("li"),Z1e=a("strong"),eHo=o("led"),oHo=o(" \u2014 "),fW=a("a"),rHo=o("LEDForSequenceClassification"),tHo=o(" (LED model)"),aHo=l(),e5=a("li"),e2e=a("strong"),nHo=o("longformer"),sHo=o(" \u2014 "),mW=a("a"),lHo=o("LongformerForSequenceClassification"),iHo=o(" (Longformer model)"),dHo=l(),o5=a("li"),o2e=a("strong"),cHo=o("luke"),fHo=o(" \u2014 "),gW=a("a"),mHo=o("LukeForSequenceClassification"),gHo=o(" (LUKE model)"),hHo=l(),r5=a("li"),r2e=a("strong"),pHo=o("mbart"),_Ho=o(" \u2014 "),hW=a("a"),uHo=o("MBartForSequenceClassification"),bHo=o(" (mBART model)"),vHo=l(),t5=a("li"),t2e=a("strong"),FHo=o("megatron-bert"),THo=o(" \u2014 "),pW=a("a"),MHo=o("MegatronBertForSequenceClassification"),EHo=o(" (Megatron-BERT model)"),CHo=l(),a5=a("li"),a2e=a("strong"),wHo=o("mobilebert"),AHo=o(" \u2014 "),_W=a("a"),LHo=o("MobileBertForSequenceClassification"),yHo=o(" (MobileBERT model)"),xHo=l(),n5=a("li"),n2e=a("strong"),$Ho=o("mpnet"),kHo=o(" \u2014 "),uW=a("a"),SHo=o("MPNetForSequenceClassification"),RHo=o(" (MPNet model)"),PHo=l(),s5=a("li"),s2e=a("strong"),BHo=o("mvp"),IHo=o(" \u2014 "),bW=a("a"),NHo=o("MvpForSequenceClassification"),qHo=o(" (MVP model)"),jHo=l(),l5=a("li"),l2e=a("strong"),DHo=o("nezha"),GHo=o(" \u2014 "),vW=a("a"),OHo=o("NezhaForSequenceClassification"),VHo=o(" (Nezha model)"),XHo=l(),i5=a("li"),i2e=a("strong"),zHo=o("nystromformer"),WHo=o(" \u2014 "),FW=a("a"),QHo=o("NystromformerForSequenceClassification"),UHo=o(" (Nystr\xF6mformer model)"),HHo=l(),d5=a("li"),d2e=a("strong"),JHo=o("openai-gpt"),YHo=o(" \u2014 "),TW=a("a"),KHo=o("OpenAIGPTForSequenceClassification"),ZHo=o(" (OpenAI GPT model)"),eJo=l(),c5=a("li"),c2e=a("strong"),oJo=o("opt"),rJo=o(" \u2014 "),MW=a("a"),tJo=o("OPTForSequenceClassification"),aJo=o(" (OPT model)"),nJo=l(),f5=a("li"),f2e=a("strong"),sJo=o("perceiver"),lJo=o(" \u2014 "),EW=a("a"),iJo=o("PerceiverForSequenceClassification"),dJo=o(" (Perceiver model)"),cJo=l(),m5=a("li"),m2e=a("strong"),fJo=o("plbart"),mJo=o(" \u2014 "),CW=a("a"),gJo=o("PLBartForSequenceClassification"),hJo=o(" (PLBart model)"),pJo=l(),g5=a("li"),g2e=a("strong"),_Jo=o("qdqbert"),uJo=o(" \u2014 "),wW=a("a"),bJo=o("QDQBertForSequenceClassification"),vJo=o(" (QDQBert model)"),FJo=l(),h5=a("li"),h2e=a("strong"),TJo=o("reformer"),MJo=o(" \u2014 "),AW=a("a"),EJo=o("ReformerForSequenceClassification"),CJo=o(" (Reformer model)"),wJo=l(),p5=a("li"),p2e=a("strong"),AJo=o("rembert"),LJo=o(" \u2014 "),LW=a("a"),yJo=o("RemBertForSequenceClassification"),xJo=o(" (RemBERT model)"),$Jo=l(),_5=a("li"),_2e=a("strong"),kJo=o("roberta"),SJo=o(" \u2014 "),yW=a("a"),RJo=o("RobertaForSequenceClassification"),PJo=o(" (RoBERTa model)"),BJo=l(),u5=a("li"),u2e=a("strong"),IJo=o("roformer"),NJo=o(" \u2014 "),xW=a("a"),qJo=o("RoFormerForSequenceClassification"),jJo=o(" (RoFormer model)"),DJo=l(),b5=a("li"),b2e=a("strong"),GJo=o("squeezebert"),OJo=o(" \u2014 "),$W=a("a"),VJo=o("SqueezeBertForSequenceClassification"),XJo=o(" (SqueezeBERT model)"),zJo=l(),v5=a("li"),v2e=a("strong"),WJo=o("tapas"),QJo=o(" \u2014 "),kW=a("a"),UJo=o("TapasForSequenceClassification"),HJo=o(" (TAPAS model)"),JJo=l(),F5=a("li"),F2e=a("strong"),YJo=o("transfo-xl"),KJo=o(" \u2014 "),SW=a("a"),ZJo=o("TransfoXLForSequenceClassification"),eYo=o(" (Transformer-XL model)"),oYo=l(),T5=a("li"),T2e=a("strong"),rYo=o("xlm"),tYo=o(" \u2014 "),RW=a("a"),aYo=o("XLMForSequenceClassification"),nYo=o(" (XLM model)"),sYo=l(),M5=a("li"),M2e=a("strong"),lYo=o("xlm-roberta"),iYo=o(" \u2014 "),PW=a("a"),dYo=o("XLMRobertaForSequenceClassification"),cYo=o(" (XLM-RoBERTa model)"),fYo=l(),E5=a("li"),E2e=a("strong"),mYo=o("xlm-roberta-xl"),gYo=o(" \u2014 "),BW=a("a"),hYo=o("XLMRobertaXLForSequenceClassification"),pYo=o(" (XLM-RoBERTa-XL model)"),_Yo=l(),C5=a("li"),C2e=a("strong"),uYo=o("xlnet"),bYo=o(" \u2014 "),IW=a("a"),vYo=o("XLNetForSequenceClassification"),FYo=o(" (XLNet model)"),TYo=l(),w5=a("li"),w2e=a("strong"),MYo=o("yoso"),EYo=o(" \u2014 "),NW=a("a"),CYo=o("YosoForSequenceClassification"),wYo=o(" (YOSO model)"),AYo=l(),A5=a("p"),LYo=o("The model is set in evaluation mode by default using "),A2e=a("code"),yYo=o("model.eval()"),xYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=a("code"),$Yo=o("model.train()"),kYo=l(),F(L5.$$.fragment),vUe=l(),Fd=a("h2"),y5=a("a"),y2e=a("span"),F(uy.$$.fragment),SYo=l(),x2e=a("span"),RYo=o("AutoModelForMultipleChoice"),FUe=l(),qo=a("div"),F(by.$$.fragment),PYo=l(),Td=a("p"),BYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qW=a("a"),IYo=o("from_pretrained()"),NYo=o(" class method or the "),jW=a("a"),qYo=o("from_config()"),jYo=o(` class
method.`),DYo=l(),vy=a("p"),GYo=o("This class cannot be instantiated directly using "),$2e=a("code"),OYo=o("__init__()"),VYo=o(" (throws an error)."),XYo=l(),bt=a("div"),F(Fy.$$.fragment),zYo=l(),k2e=a("p"),WYo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QYo=l(),Md=a("p"),UYo=o(`Note:
Loading a model from its configuration file does `),S2e=a("strong"),HYo=o("not"),JYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),YYo=o("from_pretrained()"),KYo=o(" to load the model weights."),ZYo=l(),F(x5.$$.fragment),eKo=l(),ao=a("div"),F(Ty.$$.fragment),oKo=l(),R2e=a("p"),rKo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tKo=l(),Ha=a("p"),aKo=o("The model class to instantiate is selected based on the "),P2e=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),B2e=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),fKo=l(),Z=a("ul"),$5=a("li"),N2e=a("strong"),mKo=o("albert"),gKo=o(" \u2014 "),GW=a("a"),hKo=o("AlbertForMultipleChoice"),pKo=o(" (ALBERT model)"),_Ko=l(),k5=a("li"),q2e=a("strong"),uKo=o("bert"),bKo=o(" \u2014 "),OW=a("a"),vKo=o("BertForMultipleChoice"),FKo=o(" (BERT model)"),TKo=l(),S5=a("li"),j2e=a("strong"),MKo=o("big_bird"),EKo=o(" \u2014 "),VW=a("a"),CKo=o("BigBirdForMultipleChoice"),wKo=o(" (BigBird model)"),AKo=l(),R5=a("li"),D2e=a("strong"),LKo=o("camembert"),yKo=o(" \u2014 "),XW=a("a"),xKo=o("CamembertForMultipleChoice"),$Ko=o(" (CamemBERT model)"),kKo=l(),P5=a("li"),G2e=a("strong"),SKo=o("canine"),RKo=o(" \u2014 "),zW=a("a"),PKo=o("CanineForMultipleChoice"),BKo=o(" (CANINE model)"),IKo=l(),B5=a("li"),O2e=a("strong"),NKo=o("convbert"),qKo=o(" \u2014 "),WW=a("a"),jKo=o("ConvBertForMultipleChoice"),DKo=o(" (ConvBERT model)"),GKo=l(),I5=a("li"),V2e=a("strong"),OKo=o("data2vec-text"),VKo=o(" \u2014 "),QW=a("a"),XKo=o("Data2VecTextForMultipleChoice"),zKo=o(" (Data2VecText model)"),WKo=l(),N5=a("li"),X2e=a("strong"),QKo=o("deberta-v2"),UKo=o(" \u2014 "),UW=a("a"),HKo=o("DebertaV2ForMultipleChoice"),JKo=o(" (DeBERTa-v2 model)"),YKo=l(),q5=a("li"),z2e=a("strong"),KKo=o("distilbert"),ZKo=o(" \u2014 "),HW=a("a"),eZo=o("DistilBertForMultipleChoice"),oZo=o(" (DistilBERT model)"),rZo=l(),j5=a("li"),W2e=a("strong"),tZo=o("electra"),aZo=o(" \u2014 "),JW=a("a"),nZo=o("ElectraForMultipleChoice"),sZo=o(" (ELECTRA model)"),lZo=l(),D5=a("li"),Q2e=a("strong"),iZo=o("flaubert"),dZo=o(" \u2014 "),YW=a("a"),cZo=o("FlaubertForMultipleChoice"),fZo=o(" (FlauBERT model)"),mZo=l(),G5=a("li"),U2e=a("strong"),gZo=o("fnet"),hZo=o(" \u2014 "),KW=a("a"),pZo=o("FNetForMultipleChoice"),_Zo=o(" (FNet model)"),uZo=l(),O5=a("li"),H2e=a("strong"),bZo=o("funnel"),vZo=o(" \u2014 "),ZW=a("a"),FZo=o("FunnelForMultipleChoice"),TZo=o(" (Funnel Transformer model)"),MZo=l(),V5=a("li"),J2e=a("strong"),EZo=o("ibert"),CZo=o(" \u2014 "),eQ=a("a"),wZo=o("IBertForMultipleChoice"),AZo=o(" (I-BERT model)"),LZo=l(),X5=a("li"),Y2e=a("strong"),yZo=o("longformer"),xZo=o(" \u2014 "),oQ=a("a"),$Zo=o("LongformerForMultipleChoice"),kZo=o(" (Longformer model)"),SZo=l(),z5=a("li"),K2e=a("strong"),RZo=o("luke"),PZo=o(" \u2014 "),rQ=a("a"),BZo=o("LukeForMultipleChoice"),IZo=o(" (LUKE model)"),NZo=l(),W5=a("li"),Z2e=a("strong"),qZo=o("megatron-bert"),jZo=o(" \u2014 "),tQ=a("a"),DZo=o("MegatronBertForMultipleChoice"),GZo=o(" (Megatron-BERT model)"),OZo=l(),Q5=a("li"),ebe=a("strong"),VZo=o("mobilebert"),XZo=o(" \u2014 "),aQ=a("a"),zZo=o("MobileBertForMultipleChoice"),WZo=o(" (MobileBERT model)"),QZo=l(),U5=a("li"),obe=a("strong"),UZo=o("mpnet"),HZo=o(" \u2014 "),nQ=a("a"),JZo=o("MPNetForMultipleChoice"),YZo=o(" (MPNet model)"),KZo=l(),H5=a("li"),rbe=a("strong"),ZZo=o("nezha"),eer=o(" \u2014 "),sQ=a("a"),oer=o("NezhaForMultipleChoice"),rer=o(" (Nezha model)"),ter=l(),J5=a("li"),tbe=a("strong"),aer=o("nystromformer"),ner=o(" \u2014 "),lQ=a("a"),ser=o("NystromformerForMultipleChoice"),ler=o(" (Nystr\xF6mformer model)"),ier=l(),Y5=a("li"),abe=a("strong"),der=o("qdqbert"),cer=o(" \u2014 "),iQ=a("a"),fer=o("QDQBertForMultipleChoice"),mer=o(" (QDQBert model)"),ger=l(),K5=a("li"),nbe=a("strong"),her=o("rembert"),per=o(" \u2014 "),dQ=a("a"),_er=o("RemBertForMultipleChoice"),uer=o(" (RemBERT model)"),ber=l(),Z5=a("li"),sbe=a("strong"),ver=o("roberta"),Fer=o(" \u2014 "),cQ=a("a"),Ter=o("RobertaForMultipleChoice"),Mer=o(" (RoBERTa model)"),Eer=l(),eF=a("li"),lbe=a("strong"),Cer=o("roformer"),wer=o(" \u2014 "),fQ=a("a"),Aer=o("RoFormerForMultipleChoice"),Ler=o(" (RoFormer model)"),yer=l(),oF=a("li"),ibe=a("strong"),xer=o("squeezebert"),$er=o(" \u2014 "),mQ=a("a"),ker=o("SqueezeBertForMultipleChoice"),Ser=o(" (SqueezeBERT model)"),Rer=l(),rF=a("li"),dbe=a("strong"),Per=o("xlm"),Ber=o(" \u2014 "),gQ=a("a"),Ier=o("XLMForMultipleChoice"),Ner=o(" (XLM model)"),qer=l(),tF=a("li"),cbe=a("strong"),jer=o("xlm-roberta"),Der=o(" \u2014 "),hQ=a("a"),Ger=o("XLMRobertaForMultipleChoice"),Oer=o(" (XLM-RoBERTa model)"),Ver=l(),aF=a("li"),fbe=a("strong"),Xer=o("xlm-roberta-xl"),zer=o(" \u2014 "),pQ=a("a"),Wer=o("XLMRobertaXLForMultipleChoice"),Qer=o(" (XLM-RoBERTa-XL model)"),Uer=l(),nF=a("li"),mbe=a("strong"),Her=o("xlnet"),Jer=o(" \u2014 "),_Q=a("a"),Yer=o("XLNetForMultipleChoice"),Ker=o(" (XLNet model)"),Zer=l(),sF=a("li"),gbe=a("strong"),eor=o("yoso"),oor=o(" \u2014 "),uQ=a("a"),ror=o("YosoForMultipleChoice"),tor=o(" (YOSO model)"),aor=l(),lF=a("p"),nor=o("The model is set in evaluation mode by default using "),hbe=a("code"),sor=o("model.eval()"),lor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pbe=a("code"),ior=o("model.train()"),dor=l(),F(iF.$$.fragment),TUe=l(),Ed=a("h2"),dF=a("a"),_be=a("span"),F(My.$$.fragment),cor=l(),ube=a("span"),mor=o("AutoModelForNextSentencePrediction"),MUe=l(),jo=a("div"),F(Ey.$$.fragment),gor=l(),Cd=a("p"),hor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bQ=a("a"),por=o("from_pretrained()"),_or=o(" class method or the "),vQ=a("a"),uor=o("from_config()"),bor=o(` class
method.`),vor=l(),Cy=a("p"),For=o("This class cannot be instantiated directly using "),bbe=a("code"),Tor=o("__init__()"),Mor=o(" (throws an error)."),Eor=l(),vt=a("div"),F(wy.$$.fragment),Cor=l(),vbe=a("p"),wor=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Aor=l(),wd=a("p"),Lor=o(`Note:
Loading a model from its configuration file does `),Fbe=a("strong"),yor=o("not"),xor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),$or=o("from_pretrained()"),kor=o(" to load the model weights."),Sor=l(),F(cF.$$.fragment),Ror=l(),no=a("div"),F(Ay.$$.fragment),Por=l(),Tbe=a("p"),Bor=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ior=l(),Ja=a("p"),Nor=o("The model class to instantiate is selected based on the "),Mbe=a("code"),qor=o("model_type"),jor=o(` property of the config object (either
passed as an argument or loaded from `),Ebe=a("code"),Dor=o("pretrained_model_name_or_path"),Gor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=a("code"),Oor=o("pretrained_model_name_or_path"),Vor=o(":"),Xor=l(),Do=a("ul"),fF=a("li"),wbe=a("strong"),zor=o("bert"),Wor=o(" \u2014 "),TQ=a("a"),Qor=o("BertForNextSentencePrediction"),Uor=o(" (BERT model)"),Hor=l(),mF=a("li"),Abe=a("strong"),Jor=o("fnet"),Yor=o(" \u2014 "),MQ=a("a"),Kor=o("FNetForNextSentencePrediction"),Zor=o(" (FNet model)"),err=l(),gF=a("li"),Lbe=a("strong"),orr=o("megatron-bert"),rrr=o(" \u2014 "),EQ=a("a"),trr=o("MegatronBertForNextSentencePrediction"),arr=o(" (Megatron-BERT model)"),nrr=l(),hF=a("li"),ybe=a("strong"),srr=o("mobilebert"),lrr=o(" \u2014 "),CQ=a("a"),irr=o("MobileBertForNextSentencePrediction"),drr=o(" (MobileBERT model)"),crr=l(),pF=a("li"),xbe=a("strong"),frr=o("nezha"),mrr=o(" \u2014 "),wQ=a("a"),grr=o("NezhaForNextSentencePrediction"),hrr=o(" (Nezha model)"),prr=l(),_F=a("li"),$be=a("strong"),_rr=o("qdqbert"),urr=o(" \u2014 "),AQ=a("a"),brr=o("QDQBertForNextSentencePrediction"),vrr=o(" (QDQBert model)"),Frr=l(),uF=a("p"),Trr=o("The model is set in evaluation mode by default using "),kbe=a("code"),Mrr=o("model.eval()"),Err=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=a("code"),Crr=o("model.train()"),wrr=l(),F(bF.$$.fragment),EUe=l(),Ad=a("h2"),vF=a("a"),Rbe=a("span"),F(Ly.$$.fragment),Arr=l(),Pbe=a("span"),Lrr=o("AutoModelForTokenClassification"),CUe=l(),Go=a("div"),F(yy.$$.fragment),yrr=l(),Ld=a("p"),xrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LQ=a("a"),$rr=o("from_pretrained()"),krr=o(" class method or the "),yQ=a("a"),Srr=o("from_config()"),Rrr=o(` class
method.`),Prr=l(),xy=a("p"),Brr=o("This class cannot be instantiated directly using "),Bbe=a("code"),Irr=o("__init__()"),Nrr=o(" (throws an error)."),qrr=l(),Ft=a("div"),F($y.$$.fragment),jrr=l(),Ibe=a("p"),Drr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Grr=l(),yd=a("p"),Orr=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),Vrr=o("not"),Xrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),zrr=o("from_pretrained()"),Wrr=o(" to load the model weights."),Qrr=l(),F(FF.$$.fragment),Urr=l(),so=a("div"),F(ky.$$.fragment),Hrr=l(),qbe=a("p"),Jrr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yrr=l(),Ya=a("p"),Krr=o("The model class to instantiate is selected based on the "),jbe=a("code"),Zrr=o("model_type"),etr=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),otr=o("pretrained_model_name_or_path"),rtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),ttr=o("pretrained_model_name_or_path"),atr=o(":"),ntr=l(),H=a("ul"),TF=a("li"),Obe=a("strong"),str=o("albert"),ltr=o(" \u2014 "),$Q=a("a"),itr=o("AlbertForTokenClassification"),dtr=o(" (ALBERT model)"),ctr=l(),MF=a("li"),Vbe=a("strong"),ftr=o("bert"),mtr=o(" \u2014 "),kQ=a("a"),gtr=o("BertForTokenClassification"),htr=o(" (BERT model)"),ptr=l(),EF=a("li"),Xbe=a("strong"),_tr=o("big_bird"),utr=o(" \u2014 "),SQ=a("a"),btr=o("BigBirdForTokenClassification"),vtr=o(" (BigBird model)"),Ftr=l(),CF=a("li"),zbe=a("strong"),Ttr=o("bloom"),Mtr=o(" \u2014 "),RQ=a("a"),Etr=o("BloomForTokenClassification"),Ctr=o(" (BLOOM model)"),wtr=l(),wF=a("li"),Wbe=a("strong"),Atr=o("camembert"),Ltr=o(" \u2014 "),PQ=a("a"),ytr=o("CamembertForTokenClassification"),xtr=o(" (CamemBERT model)"),$tr=l(),AF=a("li"),Qbe=a("strong"),ktr=o("canine"),Str=o(" \u2014 "),BQ=a("a"),Rtr=o("CanineForTokenClassification"),Ptr=o(" (CANINE model)"),Btr=l(),LF=a("li"),Ube=a("strong"),Itr=o("convbert"),Ntr=o(" \u2014 "),IQ=a("a"),qtr=o("ConvBertForTokenClassification"),jtr=o(" (ConvBERT model)"),Dtr=l(),yF=a("li"),Hbe=a("strong"),Gtr=o("data2vec-text"),Otr=o(" \u2014 "),NQ=a("a"),Vtr=o("Data2VecTextForTokenClassification"),Xtr=o(" (Data2VecText model)"),ztr=l(),xF=a("li"),Jbe=a("strong"),Wtr=o("deberta"),Qtr=o(" \u2014 "),qQ=a("a"),Utr=o("DebertaForTokenClassification"),Htr=o(" (DeBERTa model)"),Jtr=l(),$F=a("li"),Ybe=a("strong"),Ytr=o("deberta-v2"),Ktr=o(" \u2014 "),jQ=a("a"),Ztr=o("DebertaV2ForTokenClassification"),ear=o(" (DeBERTa-v2 model)"),oar=l(),kF=a("li"),Kbe=a("strong"),rar=o("distilbert"),tar=o(" \u2014 "),DQ=a("a"),aar=o("DistilBertForTokenClassification"),nar=o(" (DistilBERT model)"),sar=l(),SF=a("li"),Zbe=a("strong"),lar=o("electra"),iar=o(" \u2014 "),GQ=a("a"),dar=o("ElectraForTokenClassification"),car=o(" (ELECTRA model)"),far=l(),RF=a("li"),eve=a("strong"),mar=o("flaubert"),gar=o(" \u2014 "),OQ=a("a"),har=o("FlaubertForTokenClassification"),par=o(" (FlauBERT model)"),_ar=l(),PF=a("li"),ove=a("strong"),uar=o("fnet"),bar=o(" \u2014 "),VQ=a("a"),Far=o("FNetForTokenClassification"),Tar=o(" (FNet model)"),Mar=l(),BF=a("li"),rve=a("strong"),Ear=o("funnel"),Car=o(" \u2014 "),XQ=a("a"),war=o("FunnelForTokenClassification"),Aar=o(" (Funnel Transformer model)"),Lar=l(),IF=a("li"),tve=a("strong"),yar=o("gpt2"),xar=o(" \u2014 "),zQ=a("a"),$ar=o("GPT2ForTokenClassification"),kar=o(" (OpenAI GPT-2 model)"),Sar=l(),NF=a("li"),ave=a("strong"),Rar=o("ibert"),Par=o(" \u2014 "),WQ=a("a"),Bar=o("IBertForTokenClassification"),Iar=o(" (I-BERT model)"),Nar=l(),qF=a("li"),nve=a("strong"),qar=o("layoutlm"),jar=o(" \u2014 "),QQ=a("a"),Dar=o("LayoutLMForTokenClassification"),Gar=o(" (LayoutLM model)"),Oar=l(),jF=a("li"),sve=a("strong"),Var=o("layoutlmv2"),Xar=o(" \u2014 "),UQ=a("a"),zar=o("LayoutLMv2ForTokenClassification"),War=o(" (LayoutLMv2 model)"),Qar=l(),DF=a("li"),lve=a("strong"),Uar=o("layoutlmv3"),Har=o(" \u2014 "),HQ=a("a"),Jar=o("LayoutLMv3ForTokenClassification"),Yar=o(" (LayoutLMv3 model)"),Kar=l(),GF=a("li"),ive=a("strong"),Zar=o("longformer"),enr=o(" \u2014 "),JQ=a("a"),onr=o("LongformerForTokenClassification"),rnr=o(" (Longformer model)"),tnr=l(),OF=a("li"),dve=a("strong"),anr=o("luke"),nnr=o(" \u2014 "),YQ=a("a"),snr=o("LukeForTokenClassification"),lnr=o(" (LUKE model)"),inr=l(),VF=a("li"),cve=a("strong"),dnr=o("megatron-bert"),cnr=o(" \u2014 "),KQ=a("a"),fnr=o("MegatronBertForTokenClassification"),mnr=o(" (Megatron-BERT model)"),gnr=l(),XF=a("li"),fve=a("strong"),hnr=o("mobilebert"),pnr=o(" \u2014 "),ZQ=a("a"),_nr=o("MobileBertForTokenClassification"),unr=o(" (MobileBERT model)"),bnr=l(),zF=a("li"),mve=a("strong"),vnr=o("mpnet"),Fnr=o(" \u2014 "),eU=a("a"),Tnr=o("MPNetForTokenClassification"),Mnr=o(" (MPNet model)"),Enr=l(),WF=a("li"),gve=a("strong"),Cnr=o("nezha"),wnr=o(" \u2014 "),oU=a("a"),Anr=o("NezhaForTokenClassification"),Lnr=o(" (Nezha model)"),ynr=l(),QF=a("li"),hve=a("strong"),xnr=o("nystromformer"),$nr=o(" \u2014 "),rU=a("a"),knr=o("NystromformerForTokenClassification"),Snr=o(" (Nystr\xF6mformer model)"),Rnr=l(),UF=a("li"),pve=a("strong"),Pnr=o("qdqbert"),Bnr=o(" \u2014 "),tU=a("a"),Inr=o("QDQBertForTokenClassification"),Nnr=o(" (QDQBert model)"),qnr=l(),HF=a("li"),_ve=a("strong"),jnr=o("rembert"),Dnr=o(" \u2014 "),aU=a("a"),Gnr=o("RemBertForTokenClassification"),Onr=o(" (RemBERT model)"),Vnr=l(),JF=a("li"),uve=a("strong"),Xnr=o("roberta"),znr=o(" \u2014 "),nU=a("a"),Wnr=o("RobertaForTokenClassification"),Qnr=o(" (RoBERTa model)"),Unr=l(),YF=a("li"),bve=a("strong"),Hnr=o("roformer"),Jnr=o(" \u2014 "),sU=a("a"),Ynr=o("RoFormerForTokenClassification"),Knr=o(" (RoFormer model)"),Znr=l(),KF=a("li"),vve=a("strong"),esr=o("squeezebert"),osr=o(" \u2014 "),lU=a("a"),rsr=o("SqueezeBertForTokenClassification"),tsr=o(" (SqueezeBERT model)"),asr=l(),ZF=a("li"),Fve=a("strong"),nsr=o("xlm"),ssr=o(" \u2014 "),iU=a("a"),lsr=o("XLMForTokenClassification"),isr=o(" (XLM model)"),dsr=l(),eT=a("li"),Tve=a("strong"),csr=o("xlm-roberta"),fsr=o(" \u2014 "),dU=a("a"),msr=o("XLMRobertaForTokenClassification"),gsr=o(" (XLM-RoBERTa model)"),hsr=l(),oT=a("li"),Mve=a("strong"),psr=o("xlm-roberta-xl"),_sr=o(" \u2014 "),cU=a("a"),usr=o("XLMRobertaXLForTokenClassification"),bsr=o(" (XLM-RoBERTa-XL model)"),vsr=l(),rT=a("li"),Eve=a("strong"),Fsr=o("xlnet"),Tsr=o(" \u2014 "),fU=a("a"),Msr=o("XLNetForTokenClassification"),Esr=o(" (XLNet model)"),Csr=l(),tT=a("li"),Cve=a("strong"),wsr=o("yoso"),Asr=o(" \u2014 "),mU=a("a"),Lsr=o("YosoForTokenClassification"),ysr=o(" (YOSO model)"),xsr=l(),aT=a("p"),$sr=o("The model is set in evaluation mode by default using "),wve=a("code"),ksr=o("model.eval()"),Ssr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=a("code"),Rsr=o("model.train()"),Psr=l(),F(nT.$$.fragment),wUe=l(),xd=a("h2"),sT=a("a"),Lve=a("span"),F(Sy.$$.fragment),Bsr=l(),yve=a("span"),Isr=o("AutoModelForQuestionAnswering"),AUe=l(),Oo=a("div"),F(Ry.$$.fragment),Nsr=l(),$d=a("p"),qsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gU=a("a"),jsr=o("from_pretrained()"),Dsr=o(" class method or the "),hU=a("a"),Gsr=o("from_config()"),Osr=o(` class
method.`),Vsr=l(),Py=a("p"),Xsr=o("This class cannot be instantiated directly using "),xve=a("code"),zsr=o("__init__()"),Wsr=o(" (throws an error)."),Qsr=l(),Tt=a("div"),F(By.$$.fragment),Usr=l(),$ve=a("p"),Hsr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jsr=l(),kd=a("p"),Ysr=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),Ksr=o("not"),Zsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),elr=o("from_pretrained()"),olr=o(" to load the model weights."),rlr=l(),F(lT.$$.fragment),tlr=l(),lo=a("div"),F(Iy.$$.fragment),alr=l(),Sve=a("p"),nlr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),slr=l(),Ka=a("p"),llr=o("The model class to instantiate is selected based on the "),Rve=a("code"),ilr=o("model_type"),dlr=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),clr=o("pretrained_model_name_or_path"),flr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),mlr=o("pretrained_model_name_or_path"),glr=o(":"),hlr=l(),V=a("ul"),iT=a("li"),Ive=a("strong"),plr=o("albert"),_lr=o(" \u2014 "),_U=a("a"),ulr=o("AlbertForQuestionAnswering"),blr=o(" (ALBERT model)"),vlr=l(),dT=a("li"),Nve=a("strong"),Flr=o("bart"),Tlr=o(" \u2014 "),uU=a("a"),Mlr=o("BartForQuestionAnswering"),Elr=o(" (BART model)"),Clr=l(),cT=a("li"),qve=a("strong"),wlr=o("bert"),Alr=o(" \u2014 "),bU=a("a"),Llr=o("BertForQuestionAnswering"),ylr=o(" (BERT model)"),xlr=l(),fT=a("li"),jve=a("strong"),$lr=o("big_bird"),klr=o(" \u2014 "),vU=a("a"),Slr=o("BigBirdForQuestionAnswering"),Rlr=o(" (BigBird model)"),Plr=l(),mT=a("li"),Dve=a("strong"),Blr=o("bigbird_pegasus"),Ilr=o(" \u2014 "),FU=a("a"),Nlr=o("BigBirdPegasusForQuestionAnswering"),qlr=o(" (BigBird-Pegasus model)"),jlr=l(),gT=a("li"),Gve=a("strong"),Dlr=o("camembert"),Glr=o(" \u2014 "),TU=a("a"),Olr=o("CamembertForQuestionAnswering"),Vlr=o(" (CamemBERT model)"),Xlr=l(),hT=a("li"),Ove=a("strong"),zlr=o("canine"),Wlr=o(" \u2014 "),MU=a("a"),Qlr=o("CanineForQuestionAnswering"),Ulr=o(" (CANINE model)"),Hlr=l(),pT=a("li"),Vve=a("strong"),Jlr=o("convbert"),Ylr=o(" \u2014 "),EU=a("a"),Klr=o("ConvBertForQuestionAnswering"),Zlr=o(" (ConvBERT model)"),eir=l(),_T=a("li"),Xve=a("strong"),oir=o("data2vec-text"),rir=o(" \u2014 "),CU=a("a"),tir=o("Data2VecTextForQuestionAnswering"),air=o(" (Data2VecText model)"),nir=l(),uT=a("li"),zve=a("strong"),sir=o("deberta"),lir=o(" \u2014 "),wU=a("a"),iir=o("DebertaForQuestionAnswering"),dir=o(" (DeBERTa model)"),cir=l(),bT=a("li"),Wve=a("strong"),fir=o("deberta-v2"),mir=o(" \u2014 "),AU=a("a"),gir=o("DebertaV2ForQuestionAnswering"),hir=o(" (DeBERTa-v2 model)"),pir=l(),vT=a("li"),Qve=a("strong"),_ir=o("distilbert"),uir=o(" \u2014 "),LU=a("a"),bir=o("DistilBertForQuestionAnswering"),vir=o(" (DistilBERT model)"),Fir=l(),FT=a("li"),Uve=a("strong"),Tir=o("electra"),Mir=o(" \u2014 "),yU=a("a"),Eir=o("ElectraForQuestionAnswering"),Cir=o(" (ELECTRA model)"),wir=l(),TT=a("li"),Hve=a("strong"),Air=o("flaubert"),Lir=o(" \u2014 "),xU=a("a"),yir=o("FlaubertForQuestionAnsweringSimple"),xir=o(" (FlauBERT model)"),$ir=l(),MT=a("li"),Jve=a("strong"),kir=o("fnet"),Sir=o(" \u2014 "),$U=a("a"),Rir=o("FNetForQuestionAnswering"),Pir=o(" (FNet model)"),Bir=l(),ET=a("li"),Yve=a("strong"),Iir=o("funnel"),Nir=o(" \u2014 "),kU=a("a"),qir=o("FunnelForQuestionAnswering"),jir=o(" (Funnel Transformer model)"),Dir=l(),CT=a("li"),Kve=a("strong"),Gir=o("gptj"),Oir=o(" \u2014 "),SU=a("a"),Vir=o("GPTJForQuestionAnswering"),Xir=o(" (GPT-J model)"),zir=l(),wT=a("li"),Zve=a("strong"),Wir=o("ibert"),Qir=o(" \u2014 "),RU=a("a"),Uir=o("IBertForQuestionAnswering"),Hir=o(" (I-BERT model)"),Jir=l(),AT=a("li"),e5e=a("strong"),Yir=o("layoutlmv2"),Kir=o(" \u2014 "),PU=a("a"),Zir=o("LayoutLMv2ForQuestionAnswering"),edr=o(" (LayoutLMv2 model)"),odr=l(),LT=a("li"),o5e=a("strong"),rdr=o("layoutlmv3"),tdr=o(" \u2014 "),BU=a("a"),adr=o("LayoutLMv3ForQuestionAnswering"),ndr=o(" (LayoutLMv3 model)"),sdr=l(),yT=a("li"),r5e=a("strong"),ldr=o("led"),idr=o(" \u2014 "),IU=a("a"),ddr=o("LEDForQuestionAnswering"),cdr=o(" (LED model)"),fdr=l(),xT=a("li"),t5e=a("strong"),mdr=o("longformer"),gdr=o(" \u2014 "),NU=a("a"),hdr=o("LongformerForQuestionAnswering"),pdr=o(" (Longformer model)"),_dr=l(),$T=a("li"),a5e=a("strong"),udr=o("luke"),bdr=o(" \u2014 "),qU=a("a"),vdr=o("LukeForQuestionAnswering"),Fdr=o(" (LUKE model)"),Tdr=l(),kT=a("li"),n5e=a("strong"),Mdr=o("lxmert"),Edr=o(" \u2014 "),jU=a("a"),Cdr=o("LxmertForQuestionAnswering"),wdr=o(" (LXMERT model)"),Adr=l(),ST=a("li"),s5e=a("strong"),Ldr=o("mbart"),ydr=o(" \u2014 "),DU=a("a"),xdr=o("MBartForQuestionAnswering"),$dr=o(" (mBART model)"),kdr=l(),RT=a("li"),l5e=a("strong"),Sdr=o("megatron-bert"),Rdr=o(" \u2014 "),GU=a("a"),Pdr=o("MegatronBertForQuestionAnswering"),Bdr=o(" (Megatron-BERT model)"),Idr=l(),PT=a("li"),i5e=a("strong"),Ndr=o("mobilebert"),qdr=o(" \u2014 "),OU=a("a"),jdr=o("MobileBertForQuestionAnswering"),Ddr=o(" (MobileBERT model)"),Gdr=l(),BT=a("li"),d5e=a("strong"),Odr=o("mpnet"),Vdr=o(" \u2014 "),VU=a("a"),Xdr=o("MPNetForQuestionAnswering"),zdr=o(" (MPNet model)"),Wdr=l(),IT=a("li"),c5e=a("strong"),Qdr=o("mvp"),Udr=o(" \u2014 "),XU=a("a"),Hdr=o("MvpForQuestionAnswering"),Jdr=o(" (MVP model)"),Ydr=l(),NT=a("li"),f5e=a("strong"),Kdr=o("nezha"),Zdr=o(" \u2014 "),zU=a("a"),ecr=o("NezhaForQuestionAnswering"),ocr=o(" (Nezha model)"),rcr=l(),qT=a("li"),m5e=a("strong"),tcr=o("nystromformer"),acr=o(" \u2014 "),WU=a("a"),ncr=o("NystromformerForQuestionAnswering"),scr=o(" (Nystr\xF6mformer model)"),lcr=l(),jT=a("li"),g5e=a("strong"),icr=o("qdqbert"),dcr=o(" \u2014 "),QU=a("a"),ccr=o("QDQBertForQuestionAnswering"),fcr=o(" (QDQBert model)"),mcr=l(),DT=a("li"),h5e=a("strong"),gcr=o("reformer"),hcr=o(" \u2014 "),UU=a("a"),pcr=o("ReformerForQuestionAnswering"),_cr=o(" (Reformer model)"),ucr=l(),GT=a("li"),p5e=a("strong"),bcr=o("rembert"),vcr=o(" \u2014 "),HU=a("a"),Fcr=o("RemBertForQuestionAnswering"),Tcr=o(" (RemBERT model)"),Mcr=l(),OT=a("li"),_5e=a("strong"),Ecr=o("roberta"),Ccr=o(" \u2014 "),JU=a("a"),wcr=o("RobertaForQuestionAnswering"),Acr=o(" (RoBERTa model)"),Lcr=l(),VT=a("li"),u5e=a("strong"),ycr=o("roformer"),xcr=o(" \u2014 "),YU=a("a"),$cr=o("RoFormerForQuestionAnswering"),kcr=o(" (RoFormer model)"),Scr=l(),XT=a("li"),b5e=a("strong"),Rcr=o("splinter"),Pcr=o(" \u2014 "),KU=a("a"),Bcr=o("SplinterForQuestionAnswering"),Icr=o(" (Splinter model)"),Ncr=l(),zT=a("li"),v5e=a("strong"),qcr=o("squeezebert"),jcr=o(" \u2014 "),ZU=a("a"),Dcr=o("SqueezeBertForQuestionAnswering"),Gcr=o(" (SqueezeBERT model)"),Ocr=l(),WT=a("li"),F5e=a("strong"),Vcr=o("xlm"),Xcr=o(" \u2014 "),eH=a("a"),zcr=o("XLMForQuestionAnsweringSimple"),Wcr=o(" (XLM model)"),Qcr=l(),QT=a("li"),T5e=a("strong"),Ucr=o("xlm-roberta"),Hcr=o(" \u2014 "),oH=a("a"),Jcr=o("XLMRobertaForQuestionAnswering"),Ycr=o(" (XLM-RoBERTa model)"),Kcr=l(),UT=a("li"),M5e=a("strong"),Zcr=o("xlm-roberta-xl"),efr=o(" \u2014 "),rH=a("a"),ofr=o("XLMRobertaXLForQuestionAnswering"),rfr=o(" (XLM-RoBERTa-XL model)"),tfr=l(),HT=a("li"),E5e=a("strong"),afr=o("xlnet"),nfr=o(" \u2014 "),tH=a("a"),sfr=o("XLNetForQuestionAnsweringSimple"),lfr=o(" (XLNet model)"),ifr=l(),JT=a("li"),C5e=a("strong"),dfr=o("yoso"),cfr=o(" \u2014 "),aH=a("a"),ffr=o("YosoForQuestionAnswering"),mfr=o(" (YOSO model)"),gfr=l(),YT=a("p"),hfr=o("The model is set in evaluation mode by default using "),w5e=a("code"),pfr=o("model.eval()"),_fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A5e=a("code"),ufr=o("model.train()"),bfr=l(),F(KT.$$.fragment),LUe=l(),Sd=a("h2"),ZT=a("a"),L5e=a("span"),F(Ny.$$.fragment),vfr=l(),y5e=a("span"),Ffr=o("AutoModelForTableQuestionAnswering"),yUe=l(),Vo=a("div"),F(qy.$$.fragment),Tfr=l(),Rd=a("p"),Mfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nH=a("a"),Efr=o("from_pretrained()"),Cfr=o(" class method or the "),sH=a("a"),wfr=o("from_config()"),Afr=o(` class
method.`),Lfr=l(),jy=a("p"),yfr=o("This class cannot be instantiated directly using "),x5e=a("code"),xfr=o("__init__()"),$fr=o(" (throws an error)."),kfr=l(),Mt=a("div"),F(Dy.$$.fragment),Sfr=l(),$5e=a("p"),Rfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Pfr=l(),Pd=a("p"),Bfr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),Ifr=o("not"),Nfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),qfr=o("from_pretrained()"),jfr=o(" to load the model weights."),Dfr=l(),F(e7.$$.fragment),Gfr=l(),io=a("div"),F(Gy.$$.fragment),Ofr=l(),S5e=a("p"),Vfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Xfr=l(),Za=a("p"),zfr=o("The model class to instantiate is selected based on the "),R5e=a("code"),Wfr=o("model_type"),Qfr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),Ufr=o("pretrained_model_name_or_path"),Hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(":"),Kfr=l(),I5e=a("ul"),o7=a("li"),N5e=a("strong"),Zfr=o("tapas"),emr=o(" \u2014 "),iH=a("a"),omr=o("TapasForQuestionAnswering"),rmr=o(" (TAPAS model)"),tmr=l(),r7=a("p"),amr=o("The model is set in evaluation mode by default using "),q5e=a("code"),nmr=o("model.eval()"),smr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j5e=a("code"),lmr=o("model.train()"),imr=l(),F(t7.$$.fragment),xUe=l(),Bd=a("h2"),a7=a("a"),D5e=a("span"),F(Oy.$$.fragment),dmr=l(),G5e=a("span"),cmr=o("AutoModelForImageClassification"),$Ue=l(),Xo=a("div"),F(Vy.$$.fragment),fmr=l(),Id=a("p"),mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dH=a("a"),gmr=o("from_pretrained()"),hmr=o(" class method or the "),cH=a("a"),pmr=o("from_config()"),_mr=o(` class
method.`),umr=l(),Xy=a("p"),bmr=o("This class cannot be instantiated directly using "),O5e=a("code"),vmr=o("__init__()"),Fmr=o(" (throws an error)."),Tmr=l(),Et=a("div"),F(zy.$$.fragment),Mmr=l(),V5e=a("p"),Emr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cmr=l(),Nd=a("p"),wmr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),Amr=o("not"),Lmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),ymr=o("from_pretrained()"),xmr=o(" to load the model weights."),$mr=l(),F(n7.$$.fragment),kmr=l(),co=a("div"),F(Wy.$$.fragment),Smr=l(),z5e=a("p"),Rmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pmr=l(),en=a("p"),Bmr=o("The model class to instantiate is selected based on the "),W5e=a("code"),Imr=o("model_type"),Nmr=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),qmr=o("pretrained_model_name_or_path"),jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(":"),Omr=l(),be=a("ul"),s7=a("li"),H5e=a("strong"),Vmr=o("beit"),Xmr=o(" \u2014 "),mH=a("a"),zmr=o("BeitForImageClassification"),Wmr=o(" (BEiT model)"),Qmr=l(),l7=a("li"),J5e=a("strong"),Umr=o("convnext"),Hmr=o(" \u2014 "),gH=a("a"),Jmr=o("ConvNextForImageClassification"),Ymr=o(" (ConvNeXT model)"),Kmr=l(),i7=a("li"),Y5e=a("strong"),Zmr=o("cvt"),egr=o(" \u2014 "),hH=a("a"),ogr=o("CvtForImageClassification"),rgr=o(" (CvT model)"),tgr=l(),d7=a("li"),K5e=a("strong"),agr=o("data2vec-vision"),ngr=o(" \u2014 "),pH=a("a"),sgr=o("Data2VecVisionForImageClassification"),lgr=o(" (Data2VecVision model)"),igr=l(),sl=a("li"),Z5e=a("strong"),dgr=o("deit"),cgr=o(" \u2014 "),_H=a("a"),fgr=o("DeiTForImageClassification"),mgr=o(" or "),uH=a("a"),ggr=o("DeiTForImageClassificationWithTeacher"),hgr=o(" (DeiT model)"),pgr=l(),c7=a("li"),eFe=a("strong"),_gr=o("imagegpt"),ugr=o(" \u2014 "),bH=a("a"),bgr=o("ImageGPTForImageClassification"),vgr=o(" (ImageGPT model)"),Fgr=l(),ll=a("li"),oFe=a("strong"),Tgr=o("levit"),Mgr=o(" \u2014 "),vH=a("a"),Egr=o("LevitForImageClassification"),Cgr=o(" or "),FH=a("a"),wgr=o("LevitForImageClassificationWithTeacher"),Agr=o(" (LeViT model)"),Lgr=l(),f7=a("li"),rFe=a("strong"),ygr=o("mobilevit"),xgr=o(" \u2014 "),TH=a("a"),$gr=o("MobileViTForImageClassification"),kgr=o(" (MobileViT model)"),Sgr=l(),Ct=a("li"),tFe=a("strong"),Rgr=o("perceiver"),Pgr=o(" \u2014 "),MH=a("a"),Bgr=o("PerceiverForImageClassificationLearned"),Igr=o(" or "),EH=a("a"),Ngr=o("PerceiverForImageClassificationFourier"),qgr=o(" or "),CH=a("a"),jgr=o("PerceiverForImageClassificationConvProcessing"),Dgr=o(" (Perceiver model)"),Ggr=l(),m7=a("li"),aFe=a("strong"),Ogr=o("poolformer"),Vgr=o(" \u2014 "),wH=a("a"),Xgr=o("PoolFormerForImageClassification"),zgr=o(" (PoolFormer model)"),Wgr=l(),g7=a("li"),nFe=a("strong"),Qgr=o("regnet"),Ugr=o(" \u2014 "),AH=a("a"),Hgr=o("RegNetForImageClassification"),Jgr=o(" (RegNet model)"),Ygr=l(),h7=a("li"),sFe=a("strong"),Kgr=o("resnet"),Zgr=o(" \u2014 "),LH=a("a"),ehr=o("ResNetForImageClassification"),ohr=o(" (ResNet model)"),rhr=l(),p7=a("li"),lFe=a("strong"),thr=o("segformer"),ahr=o(" \u2014 "),yH=a("a"),nhr=o("SegformerForImageClassification"),shr=o(" (SegFormer model)"),lhr=l(),_7=a("li"),iFe=a("strong"),ihr=o("swin"),dhr=o(" \u2014 "),xH=a("a"),chr=o("SwinForImageClassification"),fhr=o(" (Swin Transformer model)"),mhr=l(),u7=a("li"),dFe=a("strong"),ghr=o("swinv2"),hhr=o(" \u2014 "),$H=a("a"),phr=o("Swinv2ForImageClassification"),_hr=o(" (Swin Transformer V2 model)"),uhr=l(),b7=a("li"),cFe=a("strong"),bhr=o("van"),vhr=o(" \u2014 "),kH=a("a"),Fhr=o("VanForImageClassification"),Thr=o(" (VAN model)"),Mhr=l(),v7=a("li"),fFe=a("strong"),Ehr=o("vit"),Chr=o(" \u2014 "),SH=a("a"),whr=o("ViTForImageClassification"),Ahr=o(" (ViT model)"),Lhr=l(),F7=a("p"),yhr=o("The model is set in evaluation mode by default using "),mFe=a("code"),xhr=o("model.eval()"),$hr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=a("code"),khr=o("model.train()"),Shr=l(),F(T7.$$.fragment),kUe=l(),qd=a("h2"),M7=a("a"),hFe=a("span"),F(Qy.$$.fragment),Rhr=l(),pFe=a("span"),Phr=o("AutoModelForVideoClassification"),SUe=l(),zo=a("div"),F(Uy.$$.fragment),Bhr=l(),jd=a("p"),Ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),RH=a("a"),Nhr=o("from_pretrained()"),qhr=o(" class method or the "),PH=a("a"),jhr=o("from_config()"),Dhr=o(` class
method.`),Ghr=l(),Hy=a("p"),Ohr=o("This class cannot be instantiated directly using "),_Fe=a("code"),Vhr=o("__init__()"),Xhr=o(" (throws an error)."),zhr=l(),wt=a("div"),F(Jy.$$.fragment),Whr=l(),uFe=a("p"),Qhr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Uhr=l(),Dd=a("p"),Hhr=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),Jhr=o("not"),Yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),Khr=o("from_pretrained()"),Zhr=o(" to load the model weights."),epr=l(),F(E7.$$.fragment),opr=l(),fo=a("div"),F(Yy.$$.fragment),rpr=l(),vFe=a("p"),tpr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),apr=l(),on=a("p"),npr=o("The model class to instantiate is selected based on the "),FFe=a("code"),spr=o("model_type"),lpr=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),ipr=o("pretrained_model_name_or_path"),dpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),cpr=o("pretrained_model_name_or_path"),fpr=o(":"),mpr=l(),EFe=a("ul"),C7=a("li"),CFe=a("strong"),gpr=o("videomae"),hpr=o(" \u2014 "),IH=a("a"),ppr=o("VideoMAEForVideoClassification"),_pr=o(" (VideoMAE model)"),upr=l(),w7=a("p"),bpr=o("The model is set in evaluation mode by default using "),wFe=a("code"),vpr=o("model.eval()"),Fpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AFe=a("code"),Tpr=o("model.train()"),Mpr=l(),F(A7.$$.fragment),RUe=l(),Gd=a("h2"),L7=a("a"),LFe=a("span"),F(Ky.$$.fragment),Epr=l(),yFe=a("span"),Cpr=o("AutoModelForVision2Seq"),PUe=l(),Wo=a("div"),F(Zy.$$.fragment),wpr=l(),Od=a("p"),Apr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NH=a("a"),Lpr=o("from_pretrained()"),ypr=o(" class method or the "),qH=a("a"),xpr=o("from_config()"),$pr=o(` class
method.`),kpr=l(),ex=a("p"),Spr=o("This class cannot be instantiated directly using "),xFe=a("code"),Rpr=o("__init__()"),Ppr=o(" (throws an error)."),Bpr=l(),At=a("div"),F(ox.$$.fragment),Ipr=l(),$Fe=a("p"),Npr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qpr=l(),Vd=a("p"),jpr=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),Dpr=o("not"),Gpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),Opr=o("from_pretrained()"),Vpr=o(" to load the model weights."),Xpr=l(),F(y7.$$.fragment),zpr=l(),mo=a("div"),F(rx.$$.fragment),Wpr=l(),SFe=a("p"),Qpr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Upr=l(),rn=a("p"),Hpr=o("The model class to instantiate is selected based on the "),RFe=a("code"),Jpr=o("model_type"),Ypr=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),Kpr=o("pretrained_model_name_or_path"),Zpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),e_r=o("pretrained_model_name_or_path"),o_r=o(":"),r_r=l(),IFe=a("ul"),x7=a("li"),NFe=a("strong"),t_r=o("vision-encoder-decoder"),a_r=o(" \u2014 "),DH=a("a"),n_r=o("VisionEncoderDecoderModel"),s_r=o(" (Vision Encoder decoder model)"),l_r=l(),$7=a("p"),i_r=o("The model is set in evaluation mode by default using "),qFe=a("code"),d_r=o("model.eval()"),c_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jFe=a("code"),f_r=o("model.train()"),m_r=l(),F(k7.$$.fragment),BUe=l(),Xd=a("h2"),S7=a("a"),DFe=a("span"),F(tx.$$.fragment),g_r=l(),GFe=a("span"),h_r=o("AutoModelForVisualQuestionAnswering"),IUe=l(),Qo=a("div"),F(ax.$$.fragment),p_r=l(),zd=a("p"),__r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),GH=a("a"),u_r=o("from_pretrained()"),b_r=o(" class method or the "),OH=a("a"),v_r=o("from_config()"),F_r=o(` class
method.`),T_r=l(),nx=a("p"),M_r=o("This class cannot be instantiated directly using "),OFe=a("code"),E_r=o("__init__()"),C_r=o(" (throws an error)."),w_r=l(),Lt=a("div"),F(sx.$$.fragment),A_r=l(),VFe=a("p"),L_r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),y_r=l(),Wd=a("p"),x_r=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),$_r=o("not"),k_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),S_r=o("from_pretrained()"),R_r=o(" to load the model weights."),P_r=l(),F(R7.$$.fragment),B_r=l(),go=a("div"),F(lx.$$.fragment),I_r=l(),zFe=a("p"),N_r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),q_r=l(),tn=a("p"),j_r=o("The model class to instantiate is selected based on the "),WFe=a("code"),D_r=o("model_type"),G_r=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),O_r=o("pretrained_model_name_or_path"),V_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),X_r=o("pretrained_model_name_or_path"),z_r=o(":"),W_r=l(),HFe=a("ul"),P7=a("li"),JFe=a("strong"),Q_r=o("vilt"),U_r=o(" \u2014 "),XH=a("a"),H_r=o("ViltForQuestionAnswering"),J_r=o(" (ViLT model)"),Y_r=l(),B7=a("p"),K_r=o("The model is set in evaluation mode by default using "),YFe=a("code"),Z_r=o("model.eval()"),eur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KFe=a("code"),our=o("model.train()"),rur=l(),F(I7.$$.fragment),NUe=l(),Qd=a("h2"),N7=a("a"),ZFe=a("span"),F(ix.$$.fragment),tur=l(),eTe=a("span"),aur=o("AutoModelForAudioClassification"),qUe=l(),Uo=a("div"),F(dx.$$.fragment),nur=l(),Ud=a("p"),sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),zH=a("a"),lur=o("from_pretrained()"),iur=o(" class method or the "),WH=a("a"),dur=o("from_config()"),cur=o(` class
method.`),fur=l(),cx=a("p"),mur=o("This class cannot be instantiated directly using "),oTe=a("code"),gur=o("__init__()"),hur=o(" (throws an error)."),pur=l(),yt=a("div"),F(fx.$$.fragment),_ur=l(),rTe=a("p"),uur=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bur=l(),Hd=a("p"),vur=o(`Note:
Loading a model from its configuration file does `),tTe=a("strong"),Fur=o("not"),Tur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),Mur=o("from_pretrained()"),Eur=o(" to load the model weights."),Cur=l(),F(q7.$$.fragment),wur=l(),ho=a("div"),F(mx.$$.fragment),Aur=l(),aTe=a("p"),Lur=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),yur=l(),an=a("p"),xur=o("The model class to instantiate is selected based on the "),nTe=a("code"),$ur=o("model_type"),kur=o(` property of the config object (either
passed as an argument or loaded from `),sTe=a("code"),Sur=o("pretrained_model_name_or_path"),Rur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),Pur=o("pretrained_model_name_or_path"),Bur=o(":"),Iur=l(),Pe=a("ul"),j7=a("li"),iTe=a("strong"),Nur=o("data2vec-audio"),qur=o(" \u2014 "),UH=a("a"),jur=o("Data2VecAudioForSequenceClassification"),Dur=o(" (Data2VecAudio model)"),Gur=l(),D7=a("li"),dTe=a("strong"),Our=o("hubert"),Vur=o(" \u2014 "),HH=a("a"),Xur=o("HubertForSequenceClassification"),zur=o(" (Hubert model)"),Wur=l(),G7=a("li"),cTe=a("strong"),Qur=o("sew"),Uur=o(" \u2014 "),JH=a("a"),Hur=o("SEWForSequenceClassification"),Jur=o(" (SEW model)"),Yur=l(),O7=a("li"),fTe=a("strong"),Kur=o("sew-d"),Zur=o(" \u2014 "),YH=a("a"),e1r=o("SEWDForSequenceClassification"),o1r=o(" (SEW-D model)"),r1r=l(),V7=a("li"),mTe=a("strong"),t1r=o("unispeech"),a1r=o(" \u2014 "),KH=a("a"),n1r=o("UniSpeechForSequenceClassification"),s1r=o(" (UniSpeech model)"),l1r=l(),X7=a("li"),gTe=a("strong"),i1r=o("unispeech-sat"),d1r=o(" \u2014 "),ZH=a("a"),c1r=o("UniSpeechSatForSequenceClassification"),f1r=o(" (UniSpeechSat model)"),m1r=l(),z7=a("li"),hTe=a("strong"),g1r=o("wav2vec2"),h1r=o(" \u2014 "),eJ=a("a"),p1r=o("Wav2Vec2ForSequenceClassification"),_1r=o(" (Wav2Vec2 model)"),u1r=l(),W7=a("li"),pTe=a("strong"),b1r=o("wav2vec2-conformer"),v1r=o(" \u2014 "),oJ=a("a"),F1r=o("Wav2Vec2ConformerForSequenceClassification"),T1r=o(" (Wav2Vec2-Conformer model)"),M1r=l(),Q7=a("li"),_Te=a("strong"),E1r=o("wavlm"),C1r=o(" \u2014 "),rJ=a("a"),w1r=o("WavLMForSequenceClassification"),A1r=o(" (WavLM model)"),L1r=l(),U7=a("p"),y1r=o("The model is set in evaluation mode by default using "),uTe=a("code"),x1r=o("model.eval()"),$1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bTe=a("code"),k1r=o("model.train()"),S1r=l(),F(H7.$$.fragment),jUe=l(),Jd=a("h2"),J7=a("a"),vTe=a("span"),F(gx.$$.fragment),R1r=l(),FTe=a("span"),P1r=o("AutoModelForAudioFrameClassification"),DUe=l(),Ho=a("div"),F(hx.$$.fragment),B1r=l(),Yd=a("p"),I1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),tJ=a("a"),N1r=o("from_pretrained()"),q1r=o(" class method or the "),aJ=a("a"),j1r=o("from_config()"),D1r=o(` class
method.`),G1r=l(),px=a("p"),O1r=o("This class cannot be instantiated directly using "),TTe=a("code"),V1r=o("__init__()"),X1r=o(" (throws an error)."),z1r=l(),xt=a("div"),F(_x.$$.fragment),W1r=l(),MTe=a("p"),Q1r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),U1r=l(),Kd=a("p"),H1r=o(`Note:
Loading a model from its configuration file does `),ETe=a("strong"),J1r=o("not"),Y1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),K1r=o("from_pretrained()"),Z1r=o(" to load the model weights."),e2r=l(),F(Y7.$$.fragment),o2r=l(),po=a("div"),F(ux.$$.fragment),r2r=l(),CTe=a("p"),t2r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),a2r=l(),nn=a("p"),n2r=o("The model class to instantiate is selected based on the "),wTe=a("code"),s2r=o("model_type"),l2r=o(` property of the config object (either
passed as an argument or loaded from `),ATe=a("code"),i2r=o("pretrained_model_name_or_path"),d2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=a("code"),c2r=o("pretrained_model_name_or_path"),f2r=o(":"),m2r=l(),st=a("ul"),K7=a("li"),yTe=a("strong"),g2r=o("data2vec-audio"),h2r=o(" \u2014 "),sJ=a("a"),p2r=o("Data2VecAudioForAudioFrameClassification"),_2r=o(" (Data2VecAudio model)"),u2r=l(),Z7=a("li"),xTe=a("strong"),b2r=o("unispeech-sat"),v2r=o(" \u2014 "),lJ=a("a"),F2r=o("UniSpeechSatForAudioFrameClassification"),T2r=o(" (UniSpeechSat model)"),M2r=l(),e8=a("li"),$Te=a("strong"),E2r=o("wav2vec2"),C2r=o(" \u2014 "),iJ=a("a"),w2r=o("Wav2Vec2ForAudioFrameClassification"),A2r=o(" (Wav2Vec2 model)"),L2r=l(),o8=a("li"),kTe=a("strong"),y2r=o("wav2vec2-conformer"),x2r=o(" \u2014 "),dJ=a("a"),$2r=o("Wav2Vec2ConformerForAudioFrameClassification"),k2r=o(" (Wav2Vec2-Conformer model)"),S2r=l(),r8=a("li"),STe=a("strong"),R2r=o("wavlm"),P2r=o(" \u2014 "),cJ=a("a"),B2r=o("WavLMForAudioFrameClassification"),I2r=o(" (WavLM model)"),N2r=l(),t8=a("p"),q2r=o("The model is set in evaluation mode by default using "),RTe=a("code"),j2r=o("model.eval()"),D2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PTe=a("code"),G2r=o("model.train()"),O2r=l(),F(a8.$$.fragment),GUe=l(),Zd=a("h2"),n8=a("a"),BTe=a("span"),F(bx.$$.fragment),V2r=l(),ITe=a("span"),X2r=o("AutoModelForCTC"),OUe=l(),Jo=a("div"),F(vx.$$.fragment),z2r=l(),ec=a("p"),W2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fJ=a("a"),Q2r=o("from_pretrained()"),U2r=o(" class method or the "),mJ=a("a"),H2r=o("from_config()"),J2r=o(` class
method.`),Y2r=l(),Fx=a("p"),K2r=o("This class cannot be instantiated directly using "),NTe=a("code"),Z2r=o("__init__()"),ebr=o(" (throws an error)."),obr=l(),$t=a("div"),F(Tx.$$.fragment),rbr=l(),qTe=a("p"),tbr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),abr=l(),oc=a("p"),nbr=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),sbr=o("not"),lbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),ibr=o("from_pretrained()"),dbr=o(" to load the model weights."),cbr=l(),F(s8.$$.fragment),fbr=l(),_o=a("div"),F(Mx.$$.fragment),mbr=l(),DTe=a("p"),gbr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hbr=l(),sn=a("p"),pbr=o("The model class to instantiate is selected based on the "),GTe=a("code"),_br=o("model_type"),ubr=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),bbr=o("pretrained_model_name_or_path"),vbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),Fbr=o("pretrained_model_name_or_path"),Tbr=o(":"),Mbr=l(),Le=a("ul"),l8=a("li"),XTe=a("strong"),Ebr=o("data2vec-audio"),Cbr=o(" \u2014 "),hJ=a("a"),wbr=o("Data2VecAudioForCTC"),Abr=o(" (Data2VecAudio model)"),Lbr=l(),i8=a("li"),zTe=a("strong"),ybr=o("hubert"),xbr=o(" \u2014 "),pJ=a("a"),$br=o("HubertForCTC"),kbr=o(" (Hubert model)"),Sbr=l(),d8=a("li"),WTe=a("strong"),Rbr=o("mctct"),Pbr=o(" \u2014 "),_J=a("a"),Bbr=o("MCTCTForCTC"),Ibr=o(" (M-CTC-T model)"),Nbr=l(),c8=a("li"),QTe=a("strong"),qbr=o("sew"),jbr=o(" \u2014 "),uJ=a("a"),Dbr=o("SEWForCTC"),Gbr=o(" (SEW model)"),Obr=l(),f8=a("li"),UTe=a("strong"),Vbr=o("sew-d"),Xbr=o(" \u2014 "),bJ=a("a"),zbr=o("SEWDForCTC"),Wbr=o(" (SEW-D model)"),Qbr=l(),m8=a("li"),HTe=a("strong"),Ubr=o("unispeech"),Hbr=o(" \u2014 "),vJ=a("a"),Jbr=o("UniSpeechForCTC"),Ybr=o(" (UniSpeech model)"),Kbr=l(),g8=a("li"),JTe=a("strong"),Zbr=o("unispeech-sat"),evr=o(" \u2014 "),FJ=a("a"),ovr=o("UniSpeechSatForCTC"),rvr=o(" (UniSpeechSat model)"),tvr=l(),h8=a("li"),YTe=a("strong"),avr=o("wav2vec2"),nvr=o(" \u2014 "),TJ=a("a"),svr=o("Wav2Vec2ForCTC"),lvr=o(" (Wav2Vec2 model)"),ivr=l(),p8=a("li"),KTe=a("strong"),dvr=o("wav2vec2-conformer"),cvr=o(" \u2014 "),MJ=a("a"),fvr=o("Wav2Vec2ConformerForCTC"),mvr=o(" (Wav2Vec2-Conformer model)"),gvr=l(),_8=a("li"),ZTe=a("strong"),hvr=o("wavlm"),pvr=o(" \u2014 "),EJ=a("a"),_vr=o("WavLMForCTC"),uvr=o(" (WavLM model)"),bvr=l(),u8=a("p"),vvr=o("The model is set in evaluation mode by default using "),e7e=a("code"),Fvr=o("model.eval()"),Tvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o7e=a("code"),Mvr=o("model.train()"),Evr=l(),F(b8.$$.fragment),VUe=l(),rc=a("h2"),v8=a("a"),r7e=a("span"),F(Ex.$$.fragment),Cvr=l(),t7e=a("span"),wvr=o("AutoModelForSpeechSeq2Seq"),XUe=l(),Yo=a("div"),F(Cx.$$.fragment),Avr=l(),tc=a("p"),Lvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),CJ=a("a"),yvr=o("from_pretrained()"),xvr=o(" class method or the "),wJ=a("a"),$vr=o("from_config()"),kvr=o(` class
method.`),Svr=l(),wx=a("p"),Rvr=o("This class cannot be instantiated directly using "),a7e=a("code"),Pvr=o("__init__()"),Bvr=o(" (throws an error)."),Ivr=l(),kt=a("div"),F(Ax.$$.fragment),Nvr=l(),n7e=a("p"),qvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jvr=l(),ac=a("p"),Dvr=o(`Note:
Loading a model from its configuration file does `),s7e=a("strong"),Gvr=o("not"),Ovr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=a("a"),Vvr=o("from_pretrained()"),Xvr=o(" to load the model weights."),zvr=l(),F(F8.$$.fragment),Wvr=l(),uo=a("div"),F(Lx.$$.fragment),Qvr=l(),l7e=a("p"),Uvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Hvr=l(),ln=a("p"),Jvr=o("The model class to instantiate is selected based on the "),i7e=a("code"),Yvr=o("model_type"),Kvr=o(` property of the config object (either
passed as an argument or loaded from `),d7e=a("code"),Zvr=o("pretrained_model_name_or_path"),e5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=a("code"),o5r=o("pretrained_model_name_or_path"),r5r=o(":"),t5r=l(),yx=a("ul"),T8=a("li"),f7e=a("strong"),a5r=o("speech-encoder-decoder"),n5r=o(" \u2014 "),LJ=a("a"),s5r=o("SpeechEncoderDecoderModel"),l5r=o(" (Speech Encoder decoder model)"),i5r=l(),M8=a("li"),m7e=a("strong"),d5r=o("speech_to_text"),c5r=o(" \u2014 "),yJ=a("a"),f5r=o("Speech2TextForConditionalGeneration"),m5r=o(" (Speech2Text model)"),g5r=l(),E8=a("p"),h5r=o("The model is set in evaluation mode by default using "),g7e=a("code"),p5r=o("model.eval()"),_5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h7e=a("code"),u5r=o("model.train()"),b5r=l(),F(C8.$$.fragment),zUe=l(),nc=a("h2"),w8=a("a"),p7e=a("span"),F(xx.$$.fragment),v5r=l(),_7e=a("span"),F5r=o("AutoModelForAudioXVector"),WUe=l(),Ko=a("div"),F($x.$$.fragment),T5r=l(),sc=a("p"),M5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xJ=a("a"),E5r=o("from_pretrained()"),C5r=o(" class method or the "),$J=a("a"),w5r=o("from_config()"),A5r=o(` class
method.`),L5r=l(),kx=a("p"),y5r=o("This class cannot be instantiated directly using "),u7e=a("code"),x5r=o("__init__()"),$5r=o(" (throws an error)."),k5r=l(),St=a("div"),F(Sx.$$.fragment),S5r=l(),b7e=a("p"),R5r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),P5r=l(),lc=a("p"),B5r=o(`Note:
Loading a model from its configuration file does `),v7e=a("strong"),I5r=o("not"),N5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),q5r=o("from_pretrained()"),j5r=o(" to load the model weights."),D5r=l(),F(A8.$$.fragment),G5r=l(),bo=a("div"),F(Rx.$$.fragment),O5r=l(),F7e=a("p"),V5r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),X5r=l(),dn=a("p"),z5r=o("The model class to instantiate is selected based on the "),T7e=a("code"),W5r=o("model_type"),Q5r=o(` property of the config object (either
passed as an argument or loaded from `),M7e=a("code"),U5r=o("pretrained_model_name_or_path"),H5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(":"),K5r=l(),lt=a("ul"),L8=a("li"),C7e=a("strong"),Z5r=o("data2vec-audio"),eFr=o(" \u2014 "),SJ=a("a"),oFr=o("Data2VecAudioForXVector"),rFr=o(" (Data2VecAudio model)"),tFr=l(),y8=a("li"),w7e=a("strong"),aFr=o("unispeech-sat"),nFr=o(" \u2014 "),RJ=a("a"),sFr=o("UniSpeechSatForXVector"),lFr=o(" (UniSpeechSat model)"),iFr=l(),x8=a("li"),A7e=a("strong"),dFr=o("wav2vec2"),cFr=o(" \u2014 "),PJ=a("a"),fFr=o("Wav2Vec2ForXVector"),mFr=o(" (Wav2Vec2 model)"),gFr=l(),$8=a("li"),L7e=a("strong"),hFr=o("wav2vec2-conformer"),pFr=o(" \u2014 "),BJ=a("a"),_Fr=o("Wav2Vec2ConformerForXVector"),uFr=o(" (Wav2Vec2-Conformer model)"),bFr=l(),k8=a("li"),y7e=a("strong"),vFr=o("wavlm"),FFr=o(" \u2014 "),IJ=a("a"),TFr=o("WavLMForXVector"),MFr=o(" (WavLM model)"),EFr=l(),S8=a("p"),CFr=o("The model is set in evaluation mode by default using "),x7e=a("code"),wFr=o("model.eval()"),AFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$7e=a("code"),LFr=o("model.train()"),yFr=l(),F(R8.$$.fragment),QUe=l(),ic=a("h2"),P8=a("a"),k7e=a("span"),F(Px.$$.fragment),xFr=l(),S7e=a("span"),$Fr=o("AutoModelForMaskedImageModeling"),UUe=l(),Zo=a("div"),F(Bx.$$.fragment),kFr=l(),dc=a("p"),SFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),NJ=a("a"),RFr=o("from_pretrained()"),PFr=o(" class method or the "),qJ=a("a"),BFr=o("from_config()"),IFr=o(` class
method.`),NFr=l(),Ix=a("p"),qFr=o("This class cannot be instantiated directly using "),R7e=a("code"),jFr=o("__init__()"),DFr=o(" (throws an error)."),GFr=l(),Rt=a("div"),F(Nx.$$.fragment),OFr=l(),P7e=a("p"),VFr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),XFr=l(),cc=a("p"),zFr=o(`Note:
Loading a model from its configuration file does `),B7e=a("strong"),WFr=o("not"),QFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),UFr=o("from_pretrained()"),HFr=o(" to load the model weights."),JFr=l(),F(B8.$$.fragment),YFr=l(),vo=a("div"),F(qx.$$.fragment),KFr=l(),I7e=a("p"),ZFr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),eTr=l(),cn=a("p"),oTr=o("The model class to instantiate is selected based on the "),N7e=a("code"),rTr=o("model_type"),tTr=o(` property of the config object (either
passed as an argument or loaded from `),q7e=a("code"),aTr=o("pretrained_model_name_or_path"),nTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),sTr=o("pretrained_model_name_or_path"),lTr=o(":"),iTr=l(),fn=a("ul"),I8=a("li"),D7e=a("strong"),dTr=o("deit"),cTr=o(" \u2014 "),DJ=a("a"),fTr=o("DeiTForMaskedImageModeling"),mTr=o(" (DeiT model)"),gTr=l(),N8=a("li"),G7e=a("strong"),hTr=o("swin"),pTr=o(" \u2014 "),GJ=a("a"),_Tr=o("SwinForMaskedImageModeling"),uTr=o(" (Swin Transformer model)"),bTr=l(),q8=a("li"),O7e=a("strong"),vTr=o("swinv2"),FTr=o(" \u2014 "),OJ=a("a"),TTr=o("Swinv2ForMaskedImageModeling"),MTr=o(" (Swin Transformer V2 model)"),ETr=l(),j8=a("li"),V7e=a("strong"),CTr=o("vit"),wTr=o(" \u2014 "),VJ=a("a"),ATr=o("ViTForMaskedImageModeling"),LTr=o(" (ViT model)"),yTr=l(),D8=a("p"),xTr=o("The model is set in evaluation mode by default using "),X7e=a("code"),$Tr=o("model.eval()"),kTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z7e=a("code"),STr=o("model.train()"),RTr=l(),F(G8.$$.fragment),HUe=l(),fc=a("h2"),O8=a("a"),W7e=a("span"),F(jx.$$.fragment),PTr=l(),Q7e=a("span"),BTr=o("AutoModelForObjectDetection"),JUe=l(),er=a("div"),F(Dx.$$.fragment),ITr=l(),mc=a("p"),NTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XJ=a("a"),qTr=o("from_pretrained()"),jTr=o(" class method or the "),zJ=a("a"),DTr=o("from_config()"),GTr=o(` class
method.`),OTr=l(),Gx=a("p"),VTr=o("This class cannot be instantiated directly using "),U7e=a("code"),XTr=o("__init__()"),zTr=o(" (throws an error)."),WTr=l(),Pt=a("div"),F(Ox.$$.fragment),QTr=l(),H7e=a("p"),UTr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),HTr=l(),gc=a("p"),JTr=o(`Note:
Loading a model from its configuration file does `),J7e=a("strong"),YTr=o("not"),KTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),ZTr=o("from_pretrained()"),e7r=o(" to load the model weights."),o7r=l(),F(V8.$$.fragment),r7r=l(),Fo=a("div"),F(Vx.$$.fragment),t7r=l(),Y7e=a("p"),a7r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),n7r=l(),mn=a("p"),s7r=o("The model class to instantiate is selected based on the "),K7e=a("code"),l7r=o("model_type"),i7r=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),d7r=o("pretrained_model_name_or_path"),c7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=a("code"),f7r=o("pretrained_model_name_or_path"),m7r=o(":"),g7r=l(),Xx=a("ul"),X8=a("li"),o8e=a("strong"),h7r=o("detr"),p7r=o(" \u2014 "),QJ=a("a"),_7r=o("DetrForObjectDetection"),u7r=o(" (DETR model)"),b7r=l(),z8=a("li"),r8e=a("strong"),v7r=o("yolos"),F7r=o(" \u2014 "),UJ=a("a"),T7r=o("YolosForObjectDetection"),M7r=o(" (YOLOS model)"),E7r=l(),W8=a("p"),C7r=o("The model is set in evaluation mode by default using "),t8e=a("code"),w7r=o("model.eval()"),A7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a8e=a("code"),L7r=o("model.train()"),y7r=l(),F(Q8.$$.fragment),YUe=l(),hc=a("h2"),U8=a("a"),n8e=a("span"),F(zx.$$.fragment),x7r=l(),s8e=a("span"),$7r=o("AutoModelForImageSegmentation"),KUe=l(),or=a("div"),F(Wx.$$.fragment),k7r=l(),pc=a("p"),S7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),HJ=a("a"),R7r=o("from_pretrained()"),P7r=o(" class method or the "),JJ=a("a"),B7r=o("from_config()"),I7r=o(` class
method.`),N7r=l(),Qx=a("p"),q7r=o("This class cannot be instantiated directly using "),l8e=a("code"),j7r=o("__init__()"),D7r=o(" (throws an error)."),G7r=l(),Bt=a("div"),F(Ux.$$.fragment),O7r=l(),i8e=a("p"),V7r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),X7r=l(),_c=a("p"),z7r=o(`Note:
Loading a model from its configuration file does `),d8e=a("strong"),W7r=o("not"),Q7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),U7r=o("from_pretrained()"),H7r=o(" to load the model weights."),J7r=l(),F(H8.$$.fragment),Y7r=l(),To=a("div"),F(Hx.$$.fragment),K7r=l(),c8e=a("p"),Z7r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),e8r=l(),gn=a("p"),o8r=o("The model class to instantiate is selected based on the "),f8e=a("code"),r8r=o("model_type"),t8r=o(` property of the config object (either
passed as an argument or loaded from `),m8e=a("code"),a8r=o("pretrained_model_name_or_path"),n8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=a("code"),s8r=o("pretrained_model_name_or_path"),l8r=o(":"),i8r=l(),h8e=a("ul"),J8=a("li"),p8e=a("strong"),d8r=o("detr"),c8r=o(" \u2014 "),KJ=a("a"),f8r=o("DetrForSegmentation"),m8r=o(" (DETR model)"),g8r=l(),Y8=a("p"),h8r=o("The model is set in evaluation mode by default using "),_8e=a("code"),p8r=o("model.eval()"),_8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u8e=a("code"),u8r=o("model.train()"),b8r=l(),F(K8.$$.fragment),ZUe=l(),uc=a("h2"),Z8=a("a"),b8e=a("span"),F(Jx.$$.fragment),v8r=l(),v8e=a("span"),F8r=o("AutoModelForSemanticSegmentation"),eHe=l(),rr=a("div"),F(Yx.$$.fragment),T8r=l(),bc=a("p"),M8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZJ=a("a"),E8r=o("from_pretrained()"),C8r=o(" class method or the "),eY=a("a"),w8r=o("from_config()"),A8r=o(` class
method.`),L8r=l(),Kx=a("p"),y8r=o("This class cannot be instantiated directly using "),F8e=a("code"),x8r=o("__init__()"),$8r=o(" (throws an error)."),k8r=l(),It=a("div"),F(Zx.$$.fragment),S8r=l(),T8e=a("p"),R8r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),P8r=l(),vc=a("p"),B8r=o(`Note:
Loading a model from its configuration file does `),M8e=a("strong"),I8r=o("not"),N8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),q8r=o("from_pretrained()"),j8r=o(" to load the model weights."),D8r=l(),F(e9.$$.fragment),G8r=l(),Mo=a("div"),F(e$.$$.fragment),O8r=l(),E8e=a("p"),V8r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),X8r=l(),hn=a("p"),z8r=o("The model class to instantiate is selected based on the "),C8e=a("code"),W8r=o("model_type"),Q8r=o(` property of the config object (either
passed as an argument or loaded from `),w8e=a("code"),U8r=o("pretrained_model_name_or_path"),H8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=a("code"),J8r=o("pretrained_model_name_or_path"),Y8r=o(":"),K8r=l(),it=a("ul"),o9=a("li"),L8e=a("strong"),Z8r=o("beit"),e9r=o(" \u2014 "),rY=a("a"),o9r=o("BeitForSemanticSegmentation"),r9r=o(" (BEiT model)"),t9r=l(),r9=a("li"),y8e=a("strong"),a9r=o("data2vec-vision"),n9r=o(" \u2014 "),tY=a("a"),s9r=o("Data2VecVisionForSemanticSegmentation"),l9r=o(" (Data2VecVision model)"),i9r=l(),t9=a("li"),x8e=a("strong"),d9r=o("dpt"),c9r=o(" \u2014 "),aY=a("a"),f9r=o("DPTForSemanticSegmentation"),m9r=o(" (DPT model)"),g9r=l(),a9=a("li"),$8e=a("strong"),h9r=o("mobilevit"),p9r=o(" \u2014 "),nY=a("a"),_9r=o("MobileViTForSemanticSegmentation"),u9r=o(" (MobileViT model)"),b9r=l(),n9=a("li"),k8e=a("strong"),v9r=o("segformer"),F9r=o(" \u2014 "),sY=a("a"),T9r=o("SegformerForSemanticSegmentation"),M9r=o(" (SegFormer model)"),E9r=l(),s9=a("p"),C9r=o("The model is set in evaluation mode by default using "),S8e=a("code"),w9r=o("model.eval()"),A9r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R8e=a("code"),L9r=o("model.train()"),y9r=l(),F(l9.$$.fragment),oHe=l(),Fc=a("h2"),i9=a("a"),P8e=a("span"),F(o$.$$.fragment),x9r=l(),B8e=a("span"),$9r=o("AutoModelForInstanceSegmentation"),rHe=l(),tr=a("div"),F(r$.$$.fragment),k9r=l(),Tc=a("p"),S9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),lY=a("a"),R9r=o("from_pretrained()"),P9r=o(" class method or the "),iY=a("a"),B9r=o("from_config()"),I9r=o(` class
method.`),N9r=l(),t$=a("p"),q9r=o("This class cannot be instantiated directly using "),I8e=a("code"),j9r=o("__init__()"),D9r=o(" (throws an error)."),G9r=l(),Nt=a("div"),F(a$.$$.fragment),O9r=l(),N8e=a("p"),V9r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),X9r=l(),Mc=a("p"),z9r=o(`Note:
Loading a model from its configuration file does `),q8e=a("strong"),W9r=o("not"),Q9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),U9r=o("from_pretrained()"),H9r=o(" to load the model weights."),J9r=l(),F(d9.$$.fragment),Y9r=l(),Eo=a("div"),F(n$.$$.fragment),K9r=l(),j8e=a("p"),Z9r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),eMr=l(),pn=a("p"),oMr=o("The model class to instantiate is selected based on the "),D8e=a("code"),rMr=o("model_type"),tMr=o(` property of the config object (either
passed as an argument or loaded from `),G8e=a("code"),aMr=o("pretrained_model_name_or_path"),nMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O8e=a("code"),sMr=o("pretrained_model_name_or_path"),lMr=o(":"),iMr=l(),V8e=a("ul"),c9=a("li"),X8e=a("strong"),dMr=o("maskformer"),cMr=o(" \u2014 "),cY=a("a"),fMr=o("MaskFormerForInstanceSegmentation"),mMr=o(" (MaskFormer model)"),gMr=l(),f9=a("p"),hMr=o("The model is set in evaluation mode by default using "),z8e=a("code"),pMr=o("model.eval()"),_Mr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W8e=a("code"),uMr=o("model.train()"),bMr=l(),F(m9.$$.fragment),tHe=l(),Ec=a("h2"),g9=a("a"),Q8e=a("span"),F(s$.$$.fragment),vMr=l(),U8e=a("span"),FMr=o("TFAutoModel"),aHe=l(),ar=a("div"),F(l$.$$.fragment),TMr=l(),Cc=a("p"),MMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fY=a("a"),EMr=o("from_pretrained()"),CMr=o(" class method or the "),mY=a("a"),wMr=o("from_config()"),AMr=o(` class
method.`),LMr=l(),i$=a("p"),yMr=o("This class cannot be instantiated directly using "),H8e=a("code"),xMr=o("__init__()"),$Mr=o(" (throws an error)."),kMr=l(),qt=a("div"),F(d$.$$.fragment),SMr=l(),J8e=a("p"),RMr=o("Instantiates one of the base model classes of the library from a configuration."),PMr=l(),wc=a("p"),BMr=o(`Note:
Loading a model from its configuration file does `),Y8e=a("strong"),IMr=o("not"),NMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),qMr=o("from_pretrained()"),jMr=o(" to load the model weights."),DMr=l(),F(h9.$$.fragment),GMr=l(),Rr=a("div"),F(c$.$$.fragment),OMr=l(),K8e=a("p"),VMr=o("Instantiate one of the base model classes of the library from a pretrained model."),XMr=l(),_n=a("p"),zMr=o("The model class to instantiate is selected based on the "),Z8e=a("code"),WMr=o("model_type"),QMr=o(` property of the config object (either
passed as an argument or loaded from `),e9e=a("code"),UMr=o("pretrained_model_name_or_path"),HMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=a("code"),JMr=o("pretrained_model_name_or_path"),YMr=o(":"),KMr=l(),q=a("ul"),p9=a("li"),r9e=a("strong"),ZMr=o("albert"),eEr=o(" \u2014 "),hY=a("a"),oEr=o("TFAlbertModel"),rEr=o(" (ALBERT model)"),tEr=l(),_9=a("li"),t9e=a("strong"),aEr=o("bart"),nEr=o(" \u2014 "),pY=a("a"),sEr=o("TFBartModel"),lEr=o(" (BART model)"),iEr=l(),u9=a("li"),a9e=a("strong"),dEr=o("bert"),cEr=o(" \u2014 "),_Y=a("a"),fEr=o("TFBertModel"),mEr=o(" (BERT model)"),gEr=l(),b9=a("li"),n9e=a("strong"),hEr=o("blenderbot"),pEr=o(" \u2014 "),uY=a("a"),_Er=o("TFBlenderbotModel"),uEr=o(" (Blenderbot model)"),bEr=l(),v9=a("li"),s9e=a("strong"),vEr=o("blenderbot-small"),FEr=o(" \u2014 "),bY=a("a"),TEr=o("TFBlenderbotSmallModel"),MEr=o(" (BlenderbotSmall model)"),EEr=l(),F9=a("li"),l9e=a("strong"),CEr=o("camembert"),wEr=o(" \u2014 "),vY=a("a"),AEr=o("TFCamembertModel"),LEr=o(" (CamemBERT model)"),yEr=l(),T9=a("li"),i9e=a("strong"),xEr=o("clip"),$Er=o(" \u2014 "),FY=a("a"),kEr=o("TFCLIPModel"),SEr=o(" (CLIP model)"),REr=l(),M9=a("li"),d9e=a("strong"),PEr=o("convbert"),BEr=o(" \u2014 "),TY=a("a"),IEr=o("TFConvBertModel"),NEr=o(" (ConvBERT model)"),qEr=l(),E9=a("li"),c9e=a("strong"),jEr=o("convnext"),DEr=o(" \u2014 "),MY=a("a"),GEr=o("TFConvNextModel"),OEr=o(" (ConvNeXT model)"),VEr=l(),C9=a("li"),f9e=a("strong"),XEr=o("ctrl"),zEr=o(" \u2014 "),EY=a("a"),WEr=o("TFCTRLModel"),QEr=o(" (CTRL model)"),UEr=l(),w9=a("li"),m9e=a("strong"),HEr=o("cvt"),JEr=o(" \u2014 "),CY=a("a"),YEr=o("TFCvtModel"),KEr=o(" (CvT model)"),ZEr=l(),A9=a("li"),g9e=a("strong"),e4r=o("data2vec-vision"),o4r=o(" \u2014 "),wY=a("a"),r4r=o("TFData2VecVisionModel"),t4r=o(" (Data2VecVision model)"),a4r=l(),L9=a("li"),h9e=a("strong"),n4r=o("deberta"),s4r=o(" \u2014 "),AY=a("a"),l4r=o("TFDebertaModel"),i4r=o(" (DeBERTa model)"),d4r=l(),y9=a("li"),p9e=a("strong"),c4r=o("deberta-v2"),f4r=o(" \u2014 "),LY=a("a"),m4r=o("TFDebertaV2Model"),g4r=o(" (DeBERTa-v2 model)"),h4r=l(),x9=a("li"),_9e=a("strong"),p4r=o("deit"),_4r=o(" \u2014 "),yY=a("a"),u4r=o("TFDeiTModel"),b4r=o(" (DeiT model)"),v4r=l(),$9=a("li"),u9e=a("strong"),F4r=o("distilbert"),T4r=o(" \u2014 "),xY=a("a"),M4r=o("TFDistilBertModel"),E4r=o(" (DistilBERT model)"),C4r=l(),k9=a("li"),b9e=a("strong"),w4r=o("dpr"),A4r=o(" \u2014 "),$Y=a("a"),L4r=o("TFDPRQuestionEncoder"),y4r=o(" (DPR model)"),x4r=l(),S9=a("li"),v9e=a("strong"),$4r=o("electra"),k4r=o(" \u2014 "),kY=a("a"),S4r=o("TFElectraModel"),R4r=o(" (ELECTRA model)"),P4r=l(),R9=a("li"),F9e=a("strong"),B4r=o("flaubert"),I4r=o(" \u2014 "),SY=a("a"),N4r=o("TFFlaubertModel"),q4r=o(" (FlauBERT model)"),j4r=l(),il=a("li"),T9e=a("strong"),D4r=o("funnel"),G4r=o(" \u2014 "),RY=a("a"),O4r=o("TFFunnelModel"),V4r=o(" or "),PY=a("a"),X4r=o("TFFunnelBaseModel"),z4r=o(" (Funnel Transformer model)"),W4r=l(),P9=a("li"),M9e=a("strong"),Q4r=o("gpt2"),U4r=o(" \u2014 "),BY=a("a"),H4r=o("TFGPT2Model"),J4r=o(" (OpenAI GPT-2 model)"),Y4r=l(),B9=a("li"),E9e=a("strong"),K4r=o("gptj"),Z4r=o(" \u2014 "),IY=a("a"),eCr=o("TFGPTJModel"),oCr=o(" (GPT-J model)"),rCr=l(),I9=a("li"),C9e=a("strong"),tCr=o("hubert"),aCr=o(" \u2014 "),NY=a("a"),nCr=o("TFHubertModel"),sCr=o(" (Hubert model)"),lCr=l(),N9=a("li"),w9e=a("strong"),iCr=o("layoutlm"),dCr=o(" \u2014 "),qY=a("a"),cCr=o("TFLayoutLMModel"),fCr=o(" (LayoutLM model)"),mCr=l(),q9=a("li"),A9e=a("strong"),gCr=o("led"),hCr=o(" \u2014 "),jY=a("a"),pCr=o("TFLEDModel"),_Cr=o(" (LED model)"),uCr=l(),j9=a("li"),L9e=a("strong"),bCr=o("longformer"),vCr=o(" \u2014 "),DY=a("a"),FCr=o("TFLongformerModel"),TCr=o(" (Longformer model)"),MCr=l(),D9=a("li"),y9e=a("strong"),ECr=o("lxmert"),CCr=o(" \u2014 "),GY=a("a"),wCr=o("TFLxmertModel"),ACr=o(" (LXMERT model)"),LCr=l(),G9=a("li"),x9e=a("strong"),yCr=o("marian"),xCr=o(" \u2014 "),OY=a("a"),$Cr=o("TFMarianModel"),kCr=o(" (Marian model)"),SCr=l(),O9=a("li"),$9e=a("strong"),RCr=o("mbart"),PCr=o(" \u2014 "),VY=a("a"),BCr=o("TFMBartModel"),ICr=o(" (mBART model)"),NCr=l(),V9=a("li"),k9e=a("strong"),qCr=o("mobilebert"),jCr=o(" \u2014 "),XY=a("a"),DCr=o("TFMobileBertModel"),GCr=o(" (MobileBERT model)"),OCr=l(),X9=a("li"),S9e=a("strong"),VCr=o("mpnet"),XCr=o(" \u2014 "),zY=a("a"),zCr=o("TFMPNetModel"),WCr=o(" (MPNet model)"),QCr=l(),z9=a("li"),R9e=a("strong"),UCr=o("mt5"),HCr=o(" \u2014 "),WY=a("a"),JCr=o("TFMT5Model"),YCr=o(" (MT5 model)"),KCr=l(),W9=a("li"),P9e=a("strong"),ZCr=o("openai-gpt"),e3r=o(" \u2014 "),QY=a("a"),o3r=o("TFOpenAIGPTModel"),r3r=o(" (OpenAI GPT model)"),t3r=l(),Q9=a("li"),B9e=a("strong"),a3r=o("opt"),n3r=o(" \u2014 "),UY=a("a"),s3r=o("TFOPTModel"),l3r=o(" (OPT model)"),i3r=l(),U9=a("li"),I9e=a("strong"),d3r=o("pegasus"),c3r=o(" \u2014 "),HY=a("a"),f3r=o("TFPegasusModel"),m3r=o(" (Pegasus model)"),g3r=l(),H9=a("li"),N9e=a("strong"),h3r=o("regnet"),p3r=o(" \u2014 "),JY=a("a"),_3r=o("TFRegNetModel"),u3r=o(" (RegNet model)"),b3r=l(),J9=a("li"),q9e=a("strong"),v3r=o("rembert"),F3r=o(" \u2014 "),YY=a("a"),T3r=o("TFRemBertModel"),M3r=o(" (RemBERT model)"),E3r=l(),Y9=a("li"),j9e=a("strong"),C3r=o("resnet"),w3r=o(" \u2014 "),KY=a("a"),A3r=o("TFResNetModel"),L3r=o(" (ResNet model)"),y3r=l(),K9=a("li"),D9e=a("strong"),x3r=o("roberta"),$3r=o(" \u2014 "),ZY=a("a"),k3r=o("TFRobertaModel"),S3r=o(" (RoBERTa model)"),R3r=l(),Z9=a("li"),G9e=a("strong"),P3r=o("roformer"),B3r=o(" \u2014 "),eK=a("a"),I3r=o("TFRoFormerModel"),N3r=o(" (RoFormer model)"),q3r=l(),eM=a("li"),O9e=a("strong"),j3r=o("segformer"),D3r=o(" \u2014 "),oK=a("a"),G3r=o("TFSegformerModel"),O3r=o(" (SegFormer model)"),V3r=l(),oM=a("li"),V9e=a("strong"),X3r=o("speech_to_text"),z3r=o(" \u2014 "),rK=a("a"),W3r=o("TFSpeech2TextModel"),Q3r=o(" (Speech2Text model)"),U3r=l(),rM=a("li"),X9e=a("strong"),H3r=o("swin"),J3r=o(" \u2014 "),tK=a("a"),Y3r=o("TFSwinModel"),K3r=o(" (Swin Transformer model)"),Z3r=l(),tM=a("li"),z9e=a("strong"),e0r=o("t5"),o0r=o(" \u2014 "),aK=a("a"),r0r=o("TFT5Model"),t0r=o(" (T5 model)"),a0r=l(),aM=a("li"),W9e=a("strong"),n0r=o("tapas"),s0r=o(" \u2014 "),nK=a("a"),l0r=o("TFTapasModel"),i0r=o(" (TAPAS model)"),d0r=l(),nM=a("li"),Q9e=a("strong"),c0r=o("transfo-xl"),f0r=o(" \u2014 "),sK=a("a"),m0r=o("TFTransfoXLModel"),g0r=o(" (Transformer-XL model)"),h0r=l(),sM=a("li"),U9e=a("strong"),p0r=o("vit"),_0r=o(" \u2014 "),lK=a("a"),u0r=o("TFViTModel"),b0r=o(" (ViT model)"),v0r=l(),lM=a("li"),H9e=a("strong"),F0r=o("vit_mae"),T0r=o(" \u2014 "),iK=a("a"),M0r=o("TFViTMAEModel"),E0r=o(" (ViTMAE model)"),C0r=l(),iM=a("li"),J9e=a("strong"),w0r=o("wav2vec2"),A0r=o(" \u2014 "),dK=a("a"),L0r=o("TFWav2Vec2Model"),y0r=o(" (Wav2Vec2 model)"),x0r=l(),dM=a("li"),Y9e=a("strong"),$0r=o("xlm"),k0r=o(" \u2014 "),cK=a("a"),S0r=o("TFXLMModel"),R0r=o(" (XLM model)"),P0r=l(),cM=a("li"),K9e=a("strong"),B0r=o("xlm-roberta"),I0r=o(" \u2014 "),fK=a("a"),N0r=o("TFXLMRobertaModel"),q0r=o(" (XLM-RoBERTa model)"),j0r=l(),fM=a("li"),Z9e=a("strong"),D0r=o("xlnet"),G0r=o(" \u2014 "),mK=a("a"),O0r=o("TFXLNetModel"),V0r=o(" (XLNet model)"),X0r=l(),F(mM.$$.fragment),nHe=l(),Ac=a("h2"),gM=a("a"),eMe=a("span"),F(f$.$$.fragment),z0r=l(),oMe=a("span"),W0r=o("TFAutoModelForPreTraining"),sHe=l(),nr=a("div"),F(m$.$$.fragment),Q0r=l(),Lc=a("p"),U0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gK=a("a"),H0r=o("from_pretrained()"),J0r=o(" class method or the "),hK=a("a"),Y0r=o("from_config()"),K0r=o(` class
method.`),Z0r=l(),g$=a("p"),ewr=o("This class cannot be instantiated directly using "),rMe=a("code"),owr=o("__init__()"),rwr=o(" (throws an error)."),twr=l(),jt=a("div"),F(h$.$$.fragment),awr=l(),tMe=a("p"),nwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),swr=l(),yc=a("p"),lwr=o(`Note:
Loading a model from its configuration file does `),aMe=a("strong"),iwr=o("not"),dwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),cwr=o("from_pretrained()"),fwr=o(" to load the model weights."),mwr=l(),F(hM.$$.fragment),gwr=l(),Pr=a("div"),F(p$.$$.fragment),hwr=l(),nMe=a("p"),pwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_wr=l(),un=a("p"),uwr=o("The model class to instantiate is selected based on the "),sMe=a("code"),bwr=o("model_type"),vwr=o(` property of the config object (either
passed as an argument or loaded from `),lMe=a("code"),Fwr=o("pretrained_model_name_or_path"),Twr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=a("code"),Mwr=o("pretrained_model_name_or_path"),Ewr=o(":"),Cwr=l(),se=a("ul"),pM=a("li"),dMe=a("strong"),wwr=o("albert"),Awr=o(" \u2014 "),_K=a("a"),Lwr=o("TFAlbertForPreTraining"),ywr=o(" (ALBERT model)"),xwr=l(),_M=a("li"),cMe=a("strong"),$wr=o("bart"),kwr=o(" \u2014 "),uK=a("a"),Swr=o("TFBartForConditionalGeneration"),Rwr=o(" (BART model)"),Pwr=l(),uM=a("li"),fMe=a("strong"),Bwr=o("bert"),Iwr=o(" \u2014 "),bK=a("a"),Nwr=o("TFBertForPreTraining"),qwr=o(" (BERT model)"),jwr=l(),bM=a("li"),mMe=a("strong"),Dwr=o("camembert"),Gwr=o(" \u2014 "),vK=a("a"),Owr=o("TFCamembertForMaskedLM"),Vwr=o(" (CamemBERT model)"),Xwr=l(),vM=a("li"),gMe=a("strong"),zwr=o("ctrl"),Wwr=o(" \u2014 "),FK=a("a"),Qwr=o("TFCTRLLMHeadModel"),Uwr=o(" (CTRL model)"),Hwr=l(),FM=a("li"),hMe=a("strong"),Jwr=o("distilbert"),Ywr=o(" \u2014 "),TK=a("a"),Kwr=o("TFDistilBertForMaskedLM"),Zwr=o(" (DistilBERT model)"),e6r=l(),TM=a("li"),pMe=a("strong"),o6r=o("electra"),r6r=o(" \u2014 "),MK=a("a"),t6r=o("TFElectraForPreTraining"),a6r=o(" (ELECTRA model)"),n6r=l(),MM=a("li"),_Me=a("strong"),s6r=o("flaubert"),l6r=o(" \u2014 "),EK=a("a"),i6r=o("TFFlaubertWithLMHeadModel"),d6r=o(" (FlauBERT model)"),c6r=l(),EM=a("li"),uMe=a("strong"),f6r=o("funnel"),m6r=o(" \u2014 "),CK=a("a"),g6r=o("TFFunnelForPreTraining"),h6r=o(" (Funnel Transformer model)"),p6r=l(),CM=a("li"),bMe=a("strong"),_6r=o("gpt2"),u6r=o(" \u2014 "),wK=a("a"),b6r=o("TFGPT2LMHeadModel"),v6r=o(" (OpenAI GPT-2 model)"),F6r=l(),wM=a("li"),vMe=a("strong"),T6r=o("layoutlm"),M6r=o(" \u2014 "),AK=a("a"),E6r=o("TFLayoutLMForMaskedLM"),C6r=o(" (LayoutLM model)"),w6r=l(),AM=a("li"),FMe=a("strong"),A6r=o("lxmert"),L6r=o(" \u2014 "),LK=a("a"),y6r=o("TFLxmertForPreTraining"),x6r=o(" (LXMERT model)"),$6r=l(),LM=a("li"),TMe=a("strong"),k6r=o("mobilebert"),S6r=o(" \u2014 "),yK=a("a"),R6r=o("TFMobileBertForPreTraining"),P6r=o(" (MobileBERT model)"),B6r=l(),yM=a("li"),MMe=a("strong"),I6r=o("mpnet"),N6r=o(" \u2014 "),xK=a("a"),q6r=o("TFMPNetForMaskedLM"),j6r=o(" (MPNet model)"),D6r=l(),xM=a("li"),EMe=a("strong"),G6r=o("openai-gpt"),O6r=o(" \u2014 "),$K=a("a"),V6r=o("TFOpenAIGPTLMHeadModel"),X6r=o(" (OpenAI GPT model)"),z6r=l(),$M=a("li"),CMe=a("strong"),W6r=o("roberta"),Q6r=o(" \u2014 "),kK=a("a"),U6r=o("TFRobertaForMaskedLM"),H6r=o(" (RoBERTa model)"),J6r=l(),kM=a("li"),wMe=a("strong"),Y6r=o("t5"),K6r=o(" \u2014 "),SK=a("a"),Z6r=o("TFT5ForConditionalGeneration"),eAr=o(" (T5 model)"),oAr=l(),SM=a("li"),AMe=a("strong"),rAr=o("tapas"),tAr=o(" \u2014 "),RK=a("a"),aAr=o("TFTapasForMaskedLM"),nAr=o(" (TAPAS model)"),sAr=l(),RM=a("li"),LMe=a("strong"),lAr=o("transfo-xl"),iAr=o(" \u2014 "),PK=a("a"),dAr=o("TFTransfoXLLMHeadModel"),cAr=o(" (Transformer-XL model)"),fAr=l(),PM=a("li"),yMe=a("strong"),mAr=o("vit_mae"),gAr=o(" \u2014 "),BK=a("a"),hAr=o("TFViTMAEForPreTraining"),pAr=o(" (ViTMAE model)"),_Ar=l(),BM=a("li"),xMe=a("strong"),uAr=o("xlm"),bAr=o(" \u2014 "),IK=a("a"),vAr=o("TFXLMWithLMHeadModel"),FAr=o(" (XLM model)"),TAr=l(),IM=a("li"),$Me=a("strong"),MAr=o("xlm-roberta"),EAr=o(" \u2014 "),NK=a("a"),CAr=o("TFXLMRobertaForMaskedLM"),wAr=o(" (XLM-RoBERTa model)"),AAr=l(),NM=a("li"),kMe=a("strong"),LAr=o("xlnet"),yAr=o(" \u2014 "),qK=a("a"),xAr=o("TFXLNetLMHeadModel"),$Ar=o(" (XLNet model)"),kAr=l(),F(qM.$$.fragment),lHe=l(),xc=a("h2"),jM=a("a"),SMe=a("span"),F(_$.$$.fragment),SAr=l(),RMe=a("span"),RAr=o("TFAutoModelForCausalLM"),iHe=l(),sr=a("div"),F(u$.$$.fragment),PAr=l(),$c=a("p"),BAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jK=a("a"),IAr=o("from_pretrained()"),NAr=o(" class method or the "),DK=a("a"),qAr=o("from_config()"),jAr=o(` class
method.`),DAr=l(),b$=a("p"),GAr=o("This class cannot be instantiated directly using "),PMe=a("code"),OAr=o("__init__()"),VAr=o(" (throws an error)."),XAr=l(),Dt=a("div"),F(v$.$$.fragment),zAr=l(),BMe=a("p"),WAr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QAr=l(),kc=a("p"),UAr=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),HAr=o("not"),JAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=a("a"),YAr=o("from_pretrained()"),KAr=o(" to load the model weights."),ZAr=l(),F(DM.$$.fragment),eLr=l(),Br=a("div"),F(F$.$$.fragment),oLr=l(),NMe=a("p"),rLr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tLr=l(),bn=a("p"),aLr=o("The model class to instantiate is selected based on the "),qMe=a("code"),nLr=o("model_type"),sLr=o(` property of the config object (either
passed as an argument or loaded from `),jMe=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=a("code"),dLr=o("pretrained_model_name_or_path"),cLr=o(":"),fLr=l(),Me=a("ul"),GM=a("li"),GMe=a("strong"),mLr=o("bert"),gLr=o(" \u2014 "),OK=a("a"),hLr=o("TFBertLMHeadModel"),pLr=o(" (BERT model)"),_Lr=l(),OM=a("li"),OMe=a("strong"),uLr=o("camembert"),bLr=o(" \u2014 "),VK=a("a"),vLr=o("TFCamembertForCausalLM"),FLr=o(" (CamemBERT model)"),TLr=l(),VM=a("li"),VMe=a("strong"),MLr=o("ctrl"),ELr=o(" \u2014 "),XK=a("a"),CLr=o("TFCTRLLMHeadModel"),wLr=o(" (CTRL model)"),ALr=l(),XM=a("li"),XMe=a("strong"),LLr=o("gpt2"),yLr=o(" \u2014 "),zK=a("a"),xLr=o("TFGPT2LMHeadModel"),$Lr=o(" (OpenAI GPT-2 model)"),kLr=l(),zM=a("li"),zMe=a("strong"),SLr=o("gptj"),RLr=o(" \u2014 "),WK=a("a"),PLr=o("TFGPTJForCausalLM"),BLr=o(" (GPT-J model)"),ILr=l(),WM=a("li"),WMe=a("strong"),NLr=o("openai-gpt"),qLr=o(" \u2014 "),QK=a("a"),jLr=o("TFOpenAIGPTLMHeadModel"),DLr=o(" (OpenAI GPT model)"),GLr=l(),QM=a("li"),QMe=a("strong"),OLr=o("opt"),VLr=o(" \u2014 "),UK=a("a"),XLr=o("TFOPTForCausalLM"),zLr=o(" (OPT model)"),WLr=l(),UM=a("li"),UMe=a("strong"),QLr=o("rembert"),ULr=o(" \u2014 "),HK=a("a"),HLr=o("TFRemBertForCausalLM"),JLr=o(" (RemBERT model)"),YLr=l(),HM=a("li"),HMe=a("strong"),KLr=o("roberta"),ZLr=o(" \u2014 "),JK=a("a"),eyr=o("TFRobertaForCausalLM"),oyr=o(" (RoBERTa model)"),ryr=l(),JM=a("li"),JMe=a("strong"),tyr=o("roformer"),ayr=o(" \u2014 "),YK=a("a"),nyr=o("TFRoFormerForCausalLM"),syr=o(" (RoFormer model)"),lyr=l(),YM=a("li"),YMe=a("strong"),iyr=o("transfo-xl"),dyr=o(" \u2014 "),KK=a("a"),cyr=o("TFTransfoXLLMHeadModel"),fyr=o(" (Transformer-XL model)"),myr=l(),KM=a("li"),KMe=a("strong"),gyr=o("xlm"),hyr=o(" \u2014 "),ZK=a("a"),pyr=o("TFXLMWithLMHeadModel"),_yr=o(" (XLM model)"),uyr=l(),ZM=a("li"),ZMe=a("strong"),byr=o("xlnet"),vyr=o(" \u2014 "),eZ=a("a"),Fyr=o("TFXLNetLMHeadModel"),Tyr=o(" (XLNet model)"),Myr=l(),F(eE.$$.fragment),dHe=l(),Sc=a("h2"),oE=a("a"),eEe=a("span"),F(T$.$$.fragment),Eyr=l(),oEe=a("span"),Cyr=o("TFAutoModelForImageClassification"),cHe=l(),lr=a("div"),F(M$.$$.fragment),wyr=l(),Rc=a("p"),Ayr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oZ=a("a"),Lyr=o("from_pretrained()"),yyr=o(" class method or the "),rZ=a("a"),xyr=o("from_config()"),$yr=o(` class
method.`),kyr=l(),E$=a("p"),Syr=o("This class cannot be instantiated directly using "),rEe=a("code"),Ryr=o("__init__()"),Pyr=o(" (throws an error)."),Byr=l(),Gt=a("div"),F(C$.$$.fragment),Iyr=l(),tEe=a("p"),Nyr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qyr=l(),Pc=a("p"),jyr=o(`Note:
Loading a model from its configuration file does `),aEe=a("strong"),Dyr=o("not"),Gyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),Oyr=o("from_pretrained()"),Vyr=o(" to load the model weights."),Xyr=l(),F(rE.$$.fragment),zyr=l(),Ir=a("div"),F(w$.$$.fragment),Wyr=l(),nEe=a("p"),Qyr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Uyr=l(),vn=a("p"),Hyr=o("The model class to instantiate is selected based on the "),sEe=a("code"),Jyr=o("model_type"),Yyr=o(` property of the config object (either
passed as an argument or loaded from `),lEe=a("code"),Kyr=o("pretrained_model_name_or_path"),Zyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=a("code"),exr=o("pretrained_model_name_or_path"),oxr=o(":"),rxr=l(),Be=a("ul"),tE=a("li"),dEe=a("strong"),txr=o("convnext"),axr=o(" \u2014 "),aZ=a("a"),nxr=o("TFConvNextForImageClassification"),sxr=o(" (ConvNeXT model)"),lxr=l(),aE=a("li"),cEe=a("strong"),ixr=o("cvt"),dxr=o(" \u2014 "),nZ=a("a"),cxr=o("TFCvtForImageClassification"),fxr=o(" (CvT model)"),mxr=l(),nE=a("li"),fEe=a("strong"),gxr=o("data2vec-vision"),hxr=o(" \u2014 "),sZ=a("a"),pxr=o("TFData2VecVisionForImageClassification"),_xr=o(" (Data2VecVision model)"),uxr=l(),dl=a("li"),mEe=a("strong"),bxr=o("deit"),vxr=o(" \u2014 "),lZ=a("a"),Fxr=o("TFDeiTForImageClassification"),Txr=o(" or "),iZ=a("a"),Mxr=o("TFDeiTForImageClassificationWithTeacher"),Exr=o(" (DeiT model)"),Cxr=l(),sE=a("li"),gEe=a("strong"),wxr=o("regnet"),Axr=o(" \u2014 "),dZ=a("a"),Lxr=o("TFRegNetForImageClassification"),yxr=o(" (RegNet model)"),xxr=l(),lE=a("li"),hEe=a("strong"),$xr=o("resnet"),kxr=o(" \u2014 "),cZ=a("a"),Sxr=o("TFResNetForImageClassification"),Rxr=o(" (ResNet model)"),Pxr=l(),iE=a("li"),pEe=a("strong"),Bxr=o("segformer"),Ixr=o(" \u2014 "),fZ=a("a"),Nxr=o("TFSegformerForImageClassification"),qxr=o(" (SegFormer model)"),jxr=l(),dE=a("li"),_Ee=a("strong"),Dxr=o("swin"),Gxr=o(" \u2014 "),mZ=a("a"),Oxr=o("TFSwinForImageClassification"),Vxr=o(" (Swin Transformer model)"),Xxr=l(),cE=a("li"),uEe=a("strong"),zxr=o("vit"),Wxr=o(" \u2014 "),gZ=a("a"),Qxr=o("TFViTForImageClassification"),Uxr=o(" (ViT model)"),Hxr=l(),F(fE.$$.fragment),fHe=l(),Bc=a("h2"),mE=a("a"),bEe=a("span"),F(A$.$$.fragment),Jxr=l(),vEe=a("span"),Yxr=o("TFAutoModelForSemanticSegmentation"),mHe=l(),ir=a("div"),F(L$.$$.fragment),Kxr=l(),Ic=a("p"),Zxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hZ=a("a"),e$r=o("from_pretrained()"),o$r=o(" class method or the "),pZ=a("a"),r$r=o("from_config()"),t$r=o(` class
method.`),a$r=l(),y$=a("p"),n$r=o("This class cannot be instantiated directly using "),FEe=a("code"),s$r=o("__init__()"),l$r=o(" (throws an error)."),i$r=l(),Ot=a("div"),F(x$.$$.fragment),d$r=l(),TEe=a("p"),c$r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),f$r=l(),Nc=a("p"),m$r=o(`Note:
Loading a model from its configuration file does `),MEe=a("strong"),g$r=o("not"),h$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),p$r=o("from_pretrained()"),_$r=o(" to load the model weights."),u$r=l(),F(gE.$$.fragment),b$r=l(),Nr=a("div"),F($$.$$.fragment),v$r=l(),EEe=a("p"),F$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),T$r=l(),Fn=a("p"),M$r=o("The model class to instantiate is selected based on the "),CEe=a("code"),E$r=o("model_type"),C$r=o(` property of the config object (either
passed as an argument or loaded from `),wEe=a("code"),w$r=o("pretrained_model_name_or_path"),A$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=a("code"),L$r=o("pretrained_model_name_or_path"),y$r=o(":"),x$r=l(),k$=a("ul"),hE=a("li"),LEe=a("strong"),$$r=o("data2vec-vision"),k$r=o(" \u2014 "),uZ=a("a"),S$r=o("TFData2VecVisionForSemanticSegmentation"),R$r=o(" (Data2VecVision model)"),P$r=l(),pE=a("li"),yEe=a("strong"),B$r=o("segformer"),I$r=o(" \u2014 "),bZ=a("a"),N$r=o("TFSegformerForSemanticSegmentation"),q$r=o(" (SegFormer model)"),j$r=l(),F(_E.$$.fragment),gHe=l(),qc=a("h2"),uE=a("a"),xEe=a("span"),F(S$.$$.fragment),D$r=l(),$Ee=a("span"),G$r=o("TFAutoModelForMaskedLM"),hHe=l(),dr=a("div"),F(R$.$$.fragment),O$r=l(),jc=a("p"),V$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vZ=a("a"),X$r=o("from_pretrained()"),z$r=o(" class method or the "),FZ=a("a"),W$r=o("from_config()"),Q$r=o(` class
method.`),U$r=l(),P$=a("p"),H$r=o("This class cannot be instantiated directly using "),kEe=a("code"),J$r=o("__init__()"),Y$r=o(" (throws an error)."),K$r=l(),Vt=a("div"),F(B$.$$.fragment),Z$r=l(),SEe=a("p"),ekr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),okr=l(),Dc=a("p"),rkr=o(`Note:
Loading a model from its configuration file does `),REe=a("strong"),tkr=o("not"),akr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),nkr=o("from_pretrained()"),skr=o(" to load the model weights."),lkr=l(),F(bE.$$.fragment),ikr=l(),qr=a("div"),F(I$.$$.fragment),dkr=l(),PEe=a("p"),ckr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fkr=l(),Tn=a("p"),mkr=o("The model class to instantiate is selected based on the "),BEe=a("code"),gkr=o("model_type"),hkr=o(` property of the config object (either
passed as an argument or loaded from `),IEe=a("code"),pkr=o("pretrained_model_name_or_path"),_kr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NEe=a("code"),ukr=o("pretrained_model_name_or_path"),bkr=o(":"),vkr=l(),de=a("ul"),vE=a("li"),qEe=a("strong"),Fkr=o("albert"),Tkr=o(" \u2014 "),MZ=a("a"),Mkr=o("TFAlbertForMaskedLM"),Ekr=o(" (ALBERT model)"),Ckr=l(),FE=a("li"),jEe=a("strong"),wkr=o("bert"),Akr=o(" \u2014 "),EZ=a("a"),Lkr=o("TFBertForMaskedLM"),ykr=o(" (BERT model)"),xkr=l(),TE=a("li"),DEe=a("strong"),$kr=o("camembert"),kkr=o(" \u2014 "),CZ=a("a"),Skr=o("TFCamembertForMaskedLM"),Rkr=o(" (CamemBERT model)"),Pkr=l(),ME=a("li"),GEe=a("strong"),Bkr=o("convbert"),Ikr=o(" \u2014 "),wZ=a("a"),Nkr=o("TFConvBertForMaskedLM"),qkr=o(" (ConvBERT model)"),jkr=l(),EE=a("li"),OEe=a("strong"),Dkr=o("deberta"),Gkr=o(" \u2014 "),AZ=a("a"),Okr=o("TFDebertaForMaskedLM"),Vkr=o(" (DeBERTa model)"),Xkr=l(),CE=a("li"),VEe=a("strong"),zkr=o("deberta-v2"),Wkr=o(" \u2014 "),LZ=a("a"),Qkr=o("TFDebertaV2ForMaskedLM"),Ukr=o(" (DeBERTa-v2 model)"),Hkr=l(),wE=a("li"),XEe=a("strong"),Jkr=o("distilbert"),Ykr=o(" \u2014 "),yZ=a("a"),Kkr=o("TFDistilBertForMaskedLM"),Zkr=o(" (DistilBERT model)"),eSr=l(),AE=a("li"),zEe=a("strong"),oSr=o("electra"),rSr=o(" \u2014 "),xZ=a("a"),tSr=o("TFElectraForMaskedLM"),aSr=o(" (ELECTRA model)"),nSr=l(),LE=a("li"),WEe=a("strong"),sSr=o("flaubert"),lSr=o(" \u2014 "),$Z=a("a"),iSr=o("TFFlaubertWithLMHeadModel"),dSr=o(" (FlauBERT model)"),cSr=l(),yE=a("li"),QEe=a("strong"),fSr=o("funnel"),mSr=o(" \u2014 "),kZ=a("a"),gSr=o("TFFunnelForMaskedLM"),hSr=o(" (Funnel Transformer model)"),pSr=l(),xE=a("li"),UEe=a("strong"),_Sr=o("layoutlm"),uSr=o(" \u2014 "),SZ=a("a"),bSr=o("TFLayoutLMForMaskedLM"),vSr=o(" (LayoutLM model)"),FSr=l(),$E=a("li"),HEe=a("strong"),TSr=o("longformer"),MSr=o(" \u2014 "),RZ=a("a"),ESr=o("TFLongformerForMaskedLM"),CSr=o(" (Longformer model)"),wSr=l(),kE=a("li"),JEe=a("strong"),ASr=o("mobilebert"),LSr=o(" \u2014 "),PZ=a("a"),ySr=o("TFMobileBertForMaskedLM"),xSr=o(" (MobileBERT model)"),$Sr=l(),SE=a("li"),YEe=a("strong"),kSr=o("mpnet"),SSr=o(" \u2014 "),BZ=a("a"),RSr=o("TFMPNetForMaskedLM"),PSr=o(" (MPNet model)"),BSr=l(),RE=a("li"),KEe=a("strong"),ISr=o("rembert"),NSr=o(" \u2014 "),IZ=a("a"),qSr=o("TFRemBertForMaskedLM"),jSr=o(" (RemBERT model)"),DSr=l(),PE=a("li"),ZEe=a("strong"),GSr=o("roberta"),OSr=o(" \u2014 "),NZ=a("a"),VSr=o("TFRobertaForMaskedLM"),XSr=o(" (RoBERTa model)"),zSr=l(),BE=a("li"),e4e=a("strong"),WSr=o("roformer"),QSr=o(" \u2014 "),qZ=a("a"),USr=o("TFRoFormerForMaskedLM"),HSr=o(" (RoFormer model)"),JSr=l(),IE=a("li"),o4e=a("strong"),YSr=o("tapas"),KSr=o(" \u2014 "),jZ=a("a"),ZSr=o("TFTapasForMaskedLM"),eRr=o(" (TAPAS model)"),oRr=l(),NE=a("li"),r4e=a("strong"),rRr=o("xlm"),tRr=o(" \u2014 "),DZ=a("a"),aRr=o("TFXLMWithLMHeadModel"),nRr=o(" (XLM model)"),sRr=l(),qE=a("li"),t4e=a("strong"),lRr=o("xlm-roberta"),iRr=o(" \u2014 "),GZ=a("a"),dRr=o("TFXLMRobertaForMaskedLM"),cRr=o(" (XLM-RoBERTa model)"),fRr=l(),F(jE.$$.fragment),pHe=l(),Gc=a("h2"),DE=a("a"),a4e=a("span"),F(N$.$$.fragment),mRr=l(),n4e=a("span"),gRr=o("TFAutoModelForSeq2SeqLM"),_He=l(),cr=a("div"),F(q$.$$.fragment),hRr=l(),Oc=a("p"),pRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OZ=a("a"),_Rr=o("from_pretrained()"),uRr=o(" class method or the "),VZ=a("a"),bRr=o("from_config()"),vRr=o(` class
method.`),FRr=l(),j$=a("p"),TRr=o("This class cannot be instantiated directly using "),s4e=a("code"),MRr=o("__init__()"),ERr=o(" (throws an error)."),CRr=l(),Xt=a("div"),F(D$.$$.fragment),wRr=l(),l4e=a("p"),ARr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LRr=l(),Vc=a("p"),yRr=o(`Note:
Loading a model from its configuration file does `),i4e=a("strong"),xRr=o("not"),$Rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),kRr=o("from_pretrained()"),SRr=o(" to load the model weights."),RRr=l(),F(GE.$$.fragment),PRr=l(),jr=a("div"),F(G$.$$.fragment),BRr=l(),d4e=a("p"),IRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NRr=l(),Mn=a("p"),qRr=o("The model class to instantiate is selected based on the "),c4e=a("code"),jRr=o("model_type"),DRr=o(` property of the config object (either
passed as an argument or loaded from `),f4e=a("code"),GRr=o("pretrained_model_name_or_path"),ORr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(":"),zRr=l(),ye=a("ul"),OE=a("li"),g4e=a("strong"),WRr=o("bart"),QRr=o(" \u2014 "),zZ=a("a"),URr=o("TFBartForConditionalGeneration"),HRr=o(" (BART model)"),JRr=l(),VE=a("li"),h4e=a("strong"),YRr=o("blenderbot"),KRr=o(" \u2014 "),WZ=a("a"),ZRr=o("TFBlenderbotForConditionalGeneration"),ePr=o(" (Blenderbot model)"),oPr=l(),XE=a("li"),p4e=a("strong"),rPr=o("blenderbot-small"),tPr=o(" \u2014 "),QZ=a("a"),aPr=o("TFBlenderbotSmallForConditionalGeneration"),nPr=o(" (BlenderbotSmall model)"),sPr=l(),zE=a("li"),_4e=a("strong"),lPr=o("encoder-decoder"),iPr=o(" \u2014 "),UZ=a("a"),dPr=o("TFEncoderDecoderModel"),cPr=o(" (Encoder decoder model)"),fPr=l(),WE=a("li"),u4e=a("strong"),mPr=o("led"),gPr=o(" \u2014 "),HZ=a("a"),hPr=o("TFLEDForConditionalGeneration"),pPr=o(" (LED model)"),_Pr=l(),QE=a("li"),b4e=a("strong"),uPr=o("marian"),bPr=o(" \u2014 "),JZ=a("a"),vPr=o("TFMarianMTModel"),FPr=o(" (Marian model)"),TPr=l(),UE=a("li"),v4e=a("strong"),MPr=o("mbart"),EPr=o(" \u2014 "),YZ=a("a"),CPr=o("TFMBartForConditionalGeneration"),wPr=o(" (mBART model)"),APr=l(),HE=a("li"),F4e=a("strong"),LPr=o("mt5"),yPr=o(" \u2014 "),KZ=a("a"),xPr=o("TFMT5ForConditionalGeneration"),$Pr=o(" (MT5 model)"),kPr=l(),JE=a("li"),T4e=a("strong"),SPr=o("pegasus"),RPr=o(" \u2014 "),ZZ=a("a"),PPr=o("TFPegasusForConditionalGeneration"),BPr=o(" (Pegasus model)"),IPr=l(),YE=a("li"),M4e=a("strong"),NPr=o("t5"),qPr=o(" \u2014 "),eee=a("a"),jPr=o("TFT5ForConditionalGeneration"),DPr=o(" (T5 model)"),GPr=l(),F(KE.$$.fragment),uHe=l(),Xc=a("h2"),ZE=a("a"),E4e=a("span"),F(O$.$$.fragment),OPr=l(),C4e=a("span"),VPr=o("TFAutoModelForSequenceClassification"),bHe=l(),fr=a("div"),F(V$.$$.fragment),XPr=l(),zc=a("p"),zPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oee=a("a"),WPr=o("from_pretrained()"),QPr=o(" class method or the "),ree=a("a"),UPr=o("from_config()"),HPr=o(` class
method.`),JPr=l(),X$=a("p"),YPr=o("This class cannot be instantiated directly using "),w4e=a("code"),KPr=o("__init__()"),ZPr=o(" (throws an error)."),eBr=l(),zt=a("div"),F(z$.$$.fragment),oBr=l(),A4e=a("p"),rBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tBr=l(),Wc=a("p"),aBr=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),nBr=o("not"),sBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tee=a("a"),lBr=o("from_pretrained()"),iBr=o(" to load the model weights."),dBr=l(),F(e4.$$.fragment),cBr=l(),Dr=a("div"),F(W$.$$.fragment),fBr=l(),y4e=a("p"),mBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gBr=l(),En=a("p"),hBr=o("The model class to instantiate is selected based on the "),x4e=a("code"),pBr=o("model_type"),_Br=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),uBr=o("pretrained_model_name_or_path"),bBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(":"),TBr=l(),te=a("ul"),o4=a("li"),S4e=a("strong"),MBr=o("albert"),EBr=o(" \u2014 "),aee=a("a"),CBr=o("TFAlbertForSequenceClassification"),wBr=o(" (ALBERT model)"),ABr=l(),r4=a("li"),R4e=a("strong"),LBr=o("bert"),yBr=o(" \u2014 "),nee=a("a"),xBr=o("TFBertForSequenceClassification"),$Br=o(" (BERT model)"),kBr=l(),t4=a("li"),P4e=a("strong"),SBr=o("camembert"),RBr=o(" \u2014 "),see=a("a"),PBr=o("TFCamembertForSequenceClassification"),BBr=o(" (CamemBERT model)"),IBr=l(),a4=a("li"),B4e=a("strong"),NBr=o("convbert"),qBr=o(" \u2014 "),lee=a("a"),jBr=o("TFConvBertForSequenceClassification"),DBr=o(" (ConvBERT model)"),GBr=l(),n4=a("li"),I4e=a("strong"),OBr=o("ctrl"),VBr=o(" \u2014 "),iee=a("a"),XBr=o("TFCTRLForSequenceClassification"),zBr=o(" (CTRL model)"),WBr=l(),s4=a("li"),N4e=a("strong"),QBr=o("deberta"),UBr=o(" \u2014 "),dee=a("a"),HBr=o("TFDebertaForSequenceClassification"),JBr=o(" (DeBERTa model)"),YBr=l(),l4=a("li"),q4e=a("strong"),KBr=o("deberta-v2"),ZBr=o(" \u2014 "),cee=a("a"),eIr=o("TFDebertaV2ForSequenceClassification"),oIr=o(" (DeBERTa-v2 model)"),rIr=l(),i4=a("li"),j4e=a("strong"),tIr=o("distilbert"),aIr=o(" \u2014 "),fee=a("a"),nIr=o("TFDistilBertForSequenceClassification"),sIr=o(" (DistilBERT model)"),lIr=l(),d4=a("li"),D4e=a("strong"),iIr=o("electra"),dIr=o(" \u2014 "),mee=a("a"),cIr=o("TFElectraForSequenceClassification"),fIr=o(" (ELECTRA model)"),mIr=l(),c4=a("li"),G4e=a("strong"),gIr=o("flaubert"),hIr=o(" \u2014 "),gee=a("a"),pIr=o("TFFlaubertForSequenceClassification"),_Ir=o(" (FlauBERT model)"),uIr=l(),f4=a("li"),O4e=a("strong"),bIr=o("funnel"),vIr=o(" \u2014 "),hee=a("a"),FIr=o("TFFunnelForSequenceClassification"),TIr=o(" (Funnel Transformer model)"),MIr=l(),m4=a("li"),V4e=a("strong"),EIr=o("gpt2"),CIr=o(" \u2014 "),pee=a("a"),wIr=o("TFGPT2ForSequenceClassification"),AIr=o(" (OpenAI GPT-2 model)"),LIr=l(),g4=a("li"),X4e=a("strong"),yIr=o("gptj"),xIr=o(" \u2014 "),_ee=a("a"),$Ir=o("TFGPTJForSequenceClassification"),kIr=o(" (GPT-J model)"),SIr=l(),h4=a("li"),z4e=a("strong"),RIr=o("layoutlm"),PIr=o(" \u2014 "),uee=a("a"),BIr=o("TFLayoutLMForSequenceClassification"),IIr=o(" (LayoutLM model)"),NIr=l(),p4=a("li"),W4e=a("strong"),qIr=o("longformer"),jIr=o(" \u2014 "),bee=a("a"),DIr=o("TFLongformerForSequenceClassification"),GIr=o(" (Longformer model)"),OIr=l(),_4=a("li"),Q4e=a("strong"),VIr=o("mobilebert"),XIr=o(" \u2014 "),vee=a("a"),zIr=o("TFMobileBertForSequenceClassification"),WIr=o(" (MobileBERT model)"),QIr=l(),u4=a("li"),U4e=a("strong"),UIr=o("mpnet"),HIr=o(" \u2014 "),Fee=a("a"),JIr=o("TFMPNetForSequenceClassification"),YIr=o(" (MPNet model)"),KIr=l(),b4=a("li"),H4e=a("strong"),ZIr=o("openai-gpt"),eNr=o(" \u2014 "),Tee=a("a"),oNr=o("TFOpenAIGPTForSequenceClassification"),rNr=o(" (OpenAI GPT model)"),tNr=l(),v4=a("li"),J4e=a("strong"),aNr=o("rembert"),nNr=o(" \u2014 "),Mee=a("a"),sNr=o("TFRemBertForSequenceClassification"),lNr=o(" (RemBERT model)"),iNr=l(),F4=a("li"),Y4e=a("strong"),dNr=o("roberta"),cNr=o(" \u2014 "),Eee=a("a"),fNr=o("TFRobertaForSequenceClassification"),mNr=o(" (RoBERTa model)"),gNr=l(),T4=a("li"),K4e=a("strong"),hNr=o("roformer"),pNr=o(" \u2014 "),Cee=a("a"),_Nr=o("TFRoFormerForSequenceClassification"),uNr=o(" (RoFormer model)"),bNr=l(),M4=a("li"),Z4e=a("strong"),vNr=o("tapas"),FNr=o(" \u2014 "),wee=a("a"),TNr=o("TFTapasForSequenceClassification"),MNr=o(" (TAPAS model)"),ENr=l(),E4=a("li"),eCe=a("strong"),CNr=o("transfo-xl"),wNr=o(" \u2014 "),Aee=a("a"),ANr=o("TFTransfoXLForSequenceClassification"),LNr=o(" (Transformer-XL model)"),yNr=l(),C4=a("li"),oCe=a("strong"),xNr=o("xlm"),$Nr=o(" \u2014 "),Lee=a("a"),kNr=o("TFXLMForSequenceClassification"),SNr=o(" (XLM model)"),RNr=l(),w4=a("li"),rCe=a("strong"),PNr=o("xlm-roberta"),BNr=o(" \u2014 "),yee=a("a"),INr=o("TFXLMRobertaForSequenceClassification"),NNr=o(" (XLM-RoBERTa model)"),qNr=l(),A4=a("li"),tCe=a("strong"),jNr=o("xlnet"),DNr=o(" \u2014 "),xee=a("a"),GNr=o("TFXLNetForSequenceClassification"),ONr=o(" (XLNet model)"),VNr=l(),F(L4.$$.fragment),vHe=l(),Qc=a("h2"),y4=a("a"),aCe=a("span"),F(Q$.$$.fragment),XNr=l(),nCe=a("span"),zNr=o("TFAutoModelForMultipleChoice"),FHe=l(),mr=a("div"),F(U$.$$.fragment),WNr=l(),Uc=a("p"),QNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$ee=a("a"),UNr=o("from_pretrained()"),HNr=o(" class method or the "),kee=a("a"),JNr=o("from_config()"),YNr=o(` class
method.`),KNr=l(),H$=a("p"),ZNr=o("This class cannot be instantiated directly using "),sCe=a("code"),eqr=o("__init__()"),oqr=o(" (throws an error)."),rqr=l(),Wt=a("div"),F(J$.$$.fragment),tqr=l(),lCe=a("p"),aqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nqr=l(),Hc=a("p"),sqr=o(`Note:
Loading a model from its configuration file does `),iCe=a("strong"),lqr=o("not"),iqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("a"),dqr=o("from_pretrained()"),cqr=o(" to load the model weights."),fqr=l(),F(x4.$$.fragment),mqr=l(),Gr=a("div"),F(Y$.$$.fragment),gqr=l(),dCe=a("p"),hqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pqr=l(),Cn=a("p"),_qr=o("The model class to instantiate is selected based on the "),cCe=a("code"),uqr=o("model_type"),bqr=o(` property of the config object (either
passed as an argument or loaded from `),fCe=a("code"),vqr=o("pretrained_model_name_or_path"),Fqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=a("code"),Tqr=o("pretrained_model_name_or_path"),Mqr=o(":"),Eqr=l(),ve=a("ul"),$4=a("li"),gCe=a("strong"),Cqr=o("albert"),wqr=o(" \u2014 "),Ree=a("a"),Aqr=o("TFAlbertForMultipleChoice"),Lqr=o(" (ALBERT model)"),yqr=l(),k4=a("li"),hCe=a("strong"),xqr=o("bert"),$qr=o(" \u2014 "),Pee=a("a"),kqr=o("TFBertForMultipleChoice"),Sqr=o(" (BERT model)"),Rqr=l(),S4=a("li"),pCe=a("strong"),Pqr=o("camembert"),Bqr=o(" \u2014 "),Bee=a("a"),Iqr=o("TFCamembertForMultipleChoice"),Nqr=o(" (CamemBERT model)"),qqr=l(),R4=a("li"),_Ce=a("strong"),jqr=o("convbert"),Dqr=o(" \u2014 "),Iee=a("a"),Gqr=o("TFConvBertForMultipleChoice"),Oqr=o(" (ConvBERT model)"),Vqr=l(),P4=a("li"),uCe=a("strong"),Xqr=o("distilbert"),zqr=o(" \u2014 "),Nee=a("a"),Wqr=o("TFDistilBertForMultipleChoice"),Qqr=o(" (DistilBERT model)"),Uqr=l(),B4=a("li"),bCe=a("strong"),Hqr=o("electra"),Jqr=o(" \u2014 "),qee=a("a"),Yqr=o("TFElectraForMultipleChoice"),Kqr=o(" (ELECTRA model)"),Zqr=l(),I4=a("li"),vCe=a("strong"),ejr=o("flaubert"),ojr=o(" \u2014 "),jee=a("a"),rjr=o("TFFlaubertForMultipleChoice"),tjr=o(" (FlauBERT model)"),ajr=l(),N4=a("li"),FCe=a("strong"),njr=o("funnel"),sjr=o(" \u2014 "),Dee=a("a"),ljr=o("TFFunnelForMultipleChoice"),ijr=o(" (Funnel Transformer model)"),djr=l(),q4=a("li"),TCe=a("strong"),cjr=o("longformer"),fjr=o(" \u2014 "),Gee=a("a"),mjr=o("TFLongformerForMultipleChoice"),gjr=o(" (Longformer model)"),hjr=l(),j4=a("li"),MCe=a("strong"),pjr=o("mobilebert"),_jr=o(" \u2014 "),Oee=a("a"),ujr=o("TFMobileBertForMultipleChoice"),bjr=o(" (MobileBERT model)"),vjr=l(),D4=a("li"),ECe=a("strong"),Fjr=o("mpnet"),Tjr=o(" \u2014 "),Vee=a("a"),Mjr=o("TFMPNetForMultipleChoice"),Ejr=o(" (MPNet model)"),Cjr=l(),G4=a("li"),CCe=a("strong"),wjr=o("rembert"),Ajr=o(" \u2014 "),Xee=a("a"),Ljr=o("TFRemBertForMultipleChoice"),yjr=o(" (RemBERT model)"),xjr=l(),O4=a("li"),wCe=a("strong"),$jr=o("roberta"),kjr=o(" \u2014 "),zee=a("a"),Sjr=o("TFRobertaForMultipleChoice"),Rjr=o(" (RoBERTa model)"),Pjr=l(),V4=a("li"),ACe=a("strong"),Bjr=o("roformer"),Ijr=o(" \u2014 "),Wee=a("a"),Njr=o("TFRoFormerForMultipleChoice"),qjr=o(" (RoFormer model)"),jjr=l(),X4=a("li"),LCe=a("strong"),Djr=o("xlm"),Gjr=o(" \u2014 "),Qee=a("a"),Ojr=o("TFXLMForMultipleChoice"),Vjr=o(" (XLM model)"),Xjr=l(),z4=a("li"),yCe=a("strong"),zjr=o("xlm-roberta"),Wjr=o(" \u2014 "),Uee=a("a"),Qjr=o("TFXLMRobertaForMultipleChoice"),Ujr=o(" (XLM-RoBERTa model)"),Hjr=l(),W4=a("li"),xCe=a("strong"),Jjr=o("xlnet"),Yjr=o(" \u2014 "),Hee=a("a"),Kjr=o("TFXLNetForMultipleChoice"),Zjr=o(" (XLNet model)"),eDr=l(),F(Q4.$$.fragment),THe=l(),Jc=a("h2"),U4=a("a"),$Ce=a("span"),F(K$.$$.fragment),oDr=l(),kCe=a("span"),rDr=o("TFAutoModelForNextSentencePrediction"),MHe=l(),gr=a("div"),F(Z$.$$.fragment),tDr=l(),Yc=a("p"),aDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jee=a("a"),nDr=o("from_pretrained()"),sDr=o(" class method or the "),Yee=a("a"),lDr=o("from_config()"),iDr=o(` class
method.`),dDr=l(),ek=a("p"),cDr=o("This class cannot be instantiated directly using "),SCe=a("code"),fDr=o("__init__()"),mDr=o(" (throws an error)."),gDr=l(),Qt=a("div"),F(ok.$$.fragment),hDr=l(),RCe=a("p"),pDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Dr=l(),Kc=a("p"),uDr=o(`Note:
Loading a model from its configuration file does `),PCe=a("strong"),bDr=o("not"),vDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=a("a"),FDr=o("from_pretrained()"),TDr=o(" to load the model weights."),MDr=l(),F(H4.$$.fragment),EDr=l(),Or=a("div"),F(rk.$$.fragment),CDr=l(),BCe=a("p"),wDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ADr=l(),wn=a("p"),LDr=o("The model class to instantiate is selected based on the "),ICe=a("code"),yDr=o("model_type"),xDr=o(` property of the config object (either
passed as an argument or loaded from `),NCe=a("code"),$Dr=o("pretrained_model_name_or_path"),kDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qCe=a("code"),SDr=o("pretrained_model_name_or_path"),RDr=o(":"),PDr=l(),tk=a("ul"),J4=a("li"),jCe=a("strong"),BDr=o("bert"),IDr=o(" \u2014 "),Zee=a("a"),NDr=o("TFBertForNextSentencePrediction"),qDr=o(" (BERT model)"),jDr=l(),Y4=a("li"),DCe=a("strong"),DDr=o("mobilebert"),GDr=o(" \u2014 "),eoe=a("a"),ODr=o("TFMobileBertForNextSentencePrediction"),VDr=o(" (MobileBERT model)"),XDr=l(),F(K4.$$.fragment),EHe=l(),Zc=a("h2"),Z4=a("a"),GCe=a("span"),F(ak.$$.fragment),zDr=l(),OCe=a("span"),WDr=o("TFAutoModelForTableQuestionAnswering"),CHe=l(),hr=a("div"),F(nk.$$.fragment),QDr=l(),ef=a("p"),UDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ooe=a("a"),HDr=o("from_pretrained()"),JDr=o(" class method or the "),roe=a("a"),YDr=o("from_config()"),KDr=o(` class
method.`),ZDr=l(),sk=a("p"),eGr=o("This class cannot be instantiated directly using "),VCe=a("code"),oGr=o("__init__()"),rGr=o(" (throws an error)."),tGr=l(),Ut=a("div"),F(lk.$$.fragment),aGr=l(),XCe=a("p"),nGr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sGr=l(),of=a("p"),lGr=o(`Note:
Loading a model from its configuration file does `),zCe=a("strong"),iGr=o("not"),dGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=a("a"),cGr=o("from_pretrained()"),fGr=o(" to load the model weights."),mGr=l(),F(eC.$$.fragment),gGr=l(),Vr=a("div"),F(ik.$$.fragment),hGr=l(),WCe=a("p"),pGr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_Gr=l(),An=a("p"),uGr=o("The model class to instantiate is selected based on the "),QCe=a("code"),bGr=o("model_type"),vGr=o(` property of the config object (either
passed as an argument or loaded from `),UCe=a("code"),FGr=o("pretrained_model_name_or_path"),TGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=a("code"),MGr=o("pretrained_model_name_or_path"),EGr=o(":"),CGr=l(),JCe=a("ul"),oC=a("li"),YCe=a("strong"),wGr=o("tapas"),AGr=o(" \u2014 "),aoe=a("a"),LGr=o("TFTapasForQuestionAnswering"),yGr=o(" (TAPAS model)"),xGr=l(),F(rC.$$.fragment),wHe=l(),rf=a("h2"),tC=a("a"),KCe=a("span"),F(dk.$$.fragment),$Gr=l(),ZCe=a("span"),kGr=o("TFAutoModelForTokenClassification"),AHe=l(),pr=a("div"),F(ck.$$.fragment),SGr=l(),tf=a("p"),RGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),noe=a("a"),PGr=o("from_pretrained()"),BGr=o(" class method or the "),soe=a("a"),IGr=o("from_config()"),NGr=o(` class
method.`),qGr=l(),fk=a("p"),jGr=o("This class cannot be instantiated directly using "),e3e=a("code"),DGr=o("__init__()"),GGr=o(" (throws an error)."),OGr=l(),Ht=a("div"),F(mk.$$.fragment),VGr=l(),o3e=a("p"),XGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zGr=l(),af=a("p"),WGr=o(`Note:
Loading a model from its configuration file does `),r3e=a("strong"),QGr=o("not"),UGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=a("a"),HGr=o("from_pretrained()"),JGr=o(" to load the model weights."),YGr=l(),F(aC.$$.fragment),KGr=l(),Xr=a("div"),F(gk.$$.fragment),ZGr=l(),t3e=a("p"),eOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oOr=l(),Ln=a("p"),rOr=o("The model class to instantiate is selected based on the "),a3e=a("code"),tOr=o("model_type"),aOr=o(` property of the config object (either
passed as an argument or loaded from `),n3e=a("code"),nOr=o("pretrained_model_name_or_path"),sOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=a("code"),lOr=o("pretrained_model_name_or_path"),iOr=o(":"),dOr=l(),ce=a("ul"),nC=a("li"),l3e=a("strong"),cOr=o("albert"),fOr=o(" \u2014 "),ioe=a("a"),mOr=o("TFAlbertForTokenClassification"),gOr=o(" (ALBERT model)"),hOr=l(),sC=a("li"),i3e=a("strong"),pOr=o("bert"),_Or=o(" \u2014 "),doe=a("a"),uOr=o("TFBertForTokenClassification"),bOr=o(" (BERT model)"),vOr=l(),lC=a("li"),d3e=a("strong"),FOr=o("camembert"),TOr=o(" \u2014 "),coe=a("a"),MOr=o("TFCamembertForTokenClassification"),EOr=o(" (CamemBERT model)"),COr=l(),iC=a("li"),c3e=a("strong"),wOr=o("convbert"),AOr=o(" \u2014 "),foe=a("a"),LOr=o("TFConvBertForTokenClassification"),yOr=o(" (ConvBERT model)"),xOr=l(),dC=a("li"),f3e=a("strong"),$Or=o("deberta"),kOr=o(" \u2014 "),moe=a("a"),SOr=o("TFDebertaForTokenClassification"),ROr=o(" (DeBERTa model)"),POr=l(),cC=a("li"),m3e=a("strong"),BOr=o("deberta-v2"),IOr=o(" \u2014 "),goe=a("a"),NOr=o("TFDebertaV2ForTokenClassification"),qOr=o(" (DeBERTa-v2 model)"),jOr=l(),fC=a("li"),g3e=a("strong"),DOr=o("distilbert"),GOr=o(" \u2014 "),hoe=a("a"),OOr=o("TFDistilBertForTokenClassification"),VOr=o(" (DistilBERT model)"),XOr=l(),mC=a("li"),h3e=a("strong"),zOr=o("electra"),WOr=o(" \u2014 "),poe=a("a"),QOr=o("TFElectraForTokenClassification"),UOr=o(" (ELECTRA model)"),HOr=l(),gC=a("li"),p3e=a("strong"),JOr=o("flaubert"),YOr=o(" \u2014 "),_oe=a("a"),KOr=o("TFFlaubertForTokenClassification"),ZOr=o(" (FlauBERT model)"),eVr=l(),hC=a("li"),_3e=a("strong"),oVr=o("funnel"),rVr=o(" \u2014 "),uoe=a("a"),tVr=o("TFFunnelForTokenClassification"),aVr=o(" (Funnel Transformer model)"),nVr=l(),pC=a("li"),u3e=a("strong"),sVr=o("layoutlm"),lVr=o(" \u2014 "),boe=a("a"),iVr=o("TFLayoutLMForTokenClassification"),dVr=o(" (LayoutLM model)"),cVr=l(),_C=a("li"),b3e=a("strong"),fVr=o("longformer"),mVr=o(" \u2014 "),voe=a("a"),gVr=o("TFLongformerForTokenClassification"),hVr=o(" (Longformer model)"),pVr=l(),uC=a("li"),v3e=a("strong"),_Vr=o("mobilebert"),uVr=o(" \u2014 "),Foe=a("a"),bVr=o("TFMobileBertForTokenClassification"),vVr=o(" (MobileBERT model)"),FVr=l(),bC=a("li"),F3e=a("strong"),TVr=o("mpnet"),MVr=o(" \u2014 "),Toe=a("a"),EVr=o("TFMPNetForTokenClassification"),CVr=o(" (MPNet model)"),wVr=l(),vC=a("li"),T3e=a("strong"),AVr=o("rembert"),LVr=o(" \u2014 "),Moe=a("a"),yVr=o("TFRemBertForTokenClassification"),xVr=o(" (RemBERT model)"),$Vr=l(),FC=a("li"),M3e=a("strong"),kVr=o("roberta"),SVr=o(" \u2014 "),Eoe=a("a"),RVr=o("TFRobertaForTokenClassification"),PVr=o(" (RoBERTa model)"),BVr=l(),TC=a("li"),E3e=a("strong"),IVr=o("roformer"),NVr=o(" \u2014 "),Coe=a("a"),qVr=o("TFRoFormerForTokenClassification"),jVr=o(" (RoFormer model)"),DVr=l(),MC=a("li"),C3e=a("strong"),GVr=o("xlm"),OVr=o(" \u2014 "),woe=a("a"),VVr=o("TFXLMForTokenClassification"),XVr=o(" (XLM model)"),zVr=l(),EC=a("li"),w3e=a("strong"),WVr=o("xlm-roberta"),QVr=o(" \u2014 "),Aoe=a("a"),UVr=o("TFXLMRobertaForTokenClassification"),HVr=o(" (XLM-RoBERTa model)"),JVr=l(),CC=a("li"),A3e=a("strong"),YVr=o("xlnet"),KVr=o(" \u2014 "),Loe=a("a"),ZVr=o("TFXLNetForTokenClassification"),eXr=o(" (XLNet model)"),oXr=l(),F(wC.$$.fragment),LHe=l(),nf=a("h2"),AC=a("a"),L3e=a("span"),F(hk.$$.fragment),rXr=l(),y3e=a("span"),tXr=o("TFAutoModelForQuestionAnswering"),yHe=l(),_r=a("div"),F(pk.$$.fragment),aXr=l(),sf=a("p"),nXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yoe=a("a"),sXr=o("from_pretrained()"),lXr=o(" class method or the "),xoe=a("a"),iXr=o("from_config()"),dXr=o(` class
method.`),cXr=l(),_k=a("p"),fXr=o("This class cannot be instantiated directly using "),x3e=a("code"),mXr=o("__init__()"),gXr=o(" (throws an error)."),hXr=l(),Jt=a("div"),F(uk.$$.fragment),pXr=l(),$3e=a("p"),_Xr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uXr=l(),lf=a("p"),bXr=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),vXr=o("not"),FXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=a("a"),TXr=o("from_pretrained()"),MXr=o(" to load the model weights."),EXr=l(),F(LC.$$.fragment),CXr=l(),zr=a("div"),F(bk.$$.fragment),wXr=l(),S3e=a("p"),AXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LXr=l(),yn=a("p"),yXr=o("The model class to instantiate is selected based on the "),R3e=a("code"),xXr=o("model_type"),$Xr=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),kXr=o("pretrained_model_name_or_path"),SXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),RXr=o("pretrained_model_name_or_path"),PXr=o(":"),BXr=l(),fe=a("ul"),yC=a("li"),I3e=a("strong"),IXr=o("albert"),NXr=o(" \u2014 "),koe=a("a"),qXr=o("TFAlbertForQuestionAnswering"),jXr=o(" (ALBERT model)"),DXr=l(),xC=a("li"),N3e=a("strong"),GXr=o("bert"),OXr=o(" \u2014 "),Soe=a("a"),VXr=o("TFBertForQuestionAnswering"),XXr=o(" (BERT model)"),zXr=l(),$C=a("li"),q3e=a("strong"),WXr=o("camembert"),QXr=o(" \u2014 "),Roe=a("a"),UXr=o("TFCamembertForQuestionAnswering"),HXr=o(" (CamemBERT model)"),JXr=l(),kC=a("li"),j3e=a("strong"),YXr=o("convbert"),KXr=o(" \u2014 "),Poe=a("a"),ZXr=o("TFConvBertForQuestionAnswering"),ezr=o(" (ConvBERT model)"),ozr=l(),SC=a("li"),D3e=a("strong"),rzr=o("deberta"),tzr=o(" \u2014 "),Boe=a("a"),azr=o("TFDebertaForQuestionAnswering"),nzr=o(" (DeBERTa model)"),szr=l(),RC=a("li"),G3e=a("strong"),lzr=o("deberta-v2"),izr=o(" \u2014 "),Ioe=a("a"),dzr=o("TFDebertaV2ForQuestionAnswering"),czr=o(" (DeBERTa-v2 model)"),fzr=l(),PC=a("li"),O3e=a("strong"),mzr=o("distilbert"),gzr=o(" \u2014 "),Noe=a("a"),hzr=o("TFDistilBertForQuestionAnswering"),pzr=o(" (DistilBERT model)"),_zr=l(),BC=a("li"),V3e=a("strong"),uzr=o("electra"),bzr=o(" \u2014 "),qoe=a("a"),vzr=o("TFElectraForQuestionAnswering"),Fzr=o(" (ELECTRA model)"),Tzr=l(),IC=a("li"),X3e=a("strong"),Mzr=o("flaubert"),Ezr=o(" \u2014 "),joe=a("a"),Czr=o("TFFlaubertForQuestionAnsweringSimple"),wzr=o(" (FlauBERT model)"),Azr=l(),NC=a("li"),z3e=a("strong"),Lzr=o("funnel"),yzr=o(" \u2014 "),Doe=a("a"),xzr=o("TFFunnelForQuestionAnswering"),$zr=o(" (Funnel Transformer model)"),kzr=l(),qC=a("li"),W3e=a("strong"),Szr=o("gptj"),Rzr=o(" \u2014 "),Goe=a("a"),Pzr=o("TFGPTJForQuestionAnswering"),Bzr=o(" (GPT-J model)"),Izr=l(),jC=a("li"),Q3e=a("strong"),Nzr=o("longformer"),qzr=o(" \u2014 "),Ooe=a("a"),jzr=o("TFLongformerForQuestionAnswering"),Dzr=o(" (Longformer model)"),Gzr=l(),DC=a("li"),U3e=a("strong"),Ozr=o("mobilebert"),Vzr=o(" \u2014 "),Voe=a("a"),Xzr=o("TFMobileBertForQuestionAnswering"),zzr=o(" (MobileBERT model)"),Wzr=l(),GC=a("li"),H3e=a("strong"),Qzr=o("mpnet"),Uzr=o(" \u2014 "),Xoe=a("a"),Hzr=o("TFMPNetForQuestionAnswering"),Jzr=o(" (MPNet model)"),Yzr=l(),OC=a("li"),J3e=a("strong"),Kzr=o("rembert"),Zzr=o(" \u2014 "),zoe=a("a"),eWr=o("TFRemBertForQuestionAnswering"),oWr=o(" (RemBERT model)"),rWr=l(),VC=a("li"),Y3e=a("strong"),tWr=o("roberta"),aWr=o(" \u2014 "),Woe=a("a"),nWr=o("TFRobertaForQuestionAnswering"),sWr=o(" (RoBERTa model)"),lWr=l(),XC=a("li"),K3e=a("strong"),iWr=o("roformer"),dWr=o(" \u2014 "),Qoe=a("a"),cWr=o("TFRoFormerForQuestionAnswering"),fWr=o(" (RoFormer model)"),mWr=l(),zC=a("li"),Z3e=a("strong"),gWr=o("xlm"),hWr=o(" \u2014 "),Uoe=a("a"),pWr=o("TFXLMForQuestionAnsweringSimple"),_Wr=o(" (XLM model)"),uWr=l(),WC=a("li"),e0e=a("strong"),bWr=o("xlm-roberta"),vWr=o(" \u2014 "),Hoe=a("a"),FWr=o("TFXLMRobertaForQuestionAnswering"),TWr=o(" (XLM-RoBERTa model)"),MWr=l(),QC=a("li"),o0e=a("strong"),EWr=o("xlnet"),CWr=o(" \u2014 "),Joe=a("a"),wWr=o("TFXLNetForQuestionAnsweringSimple"),AWr=o(" (XLNet model)"),LWr=l(),F(UC.$$.fragment),xHe=l(),df=a("h2"),HC=a("a"),r0e=a("span"),F(vk.$$.fragment),yWr=l(),t0e=a("span"),xWr=o("TFAutoModelForVision2Seq"),$He=l(),ur=a("div"),F(Fk.$$.fragment),$Wr=l(),cf=a("p"),kWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Yoe=a("a"),SWr=o("from_pretrained()"),RWr=o(" class method or the "),Koe=a("a"),PWr=o("from_config()"),BWr=o(` class
method.`),IWr=l(),Tk=a("p"),NWr=o("This class cannot be instantiated directly using "),a0e=a("code"),qWr=o("__init__()"),jWr=o(" (throws an error)."),DWr=l(),Yt=a("div"),F(Mk.$$.fragment),GWr=l(),n0e=a("p"),OWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VWr=l(),ff=a("p"),XWr=o(`Note:
Loading a model from its configuration file does `),s0e=a("strong"),zWr=o("not"),WWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("a"),QWr=o("from_pretrained()"),UWr=o(" to load the model weights."),HWr=l(),F(JC.$$.fragment),JWr=l(),Wr=a("div"),F(Ek.$$.fragment),YWr=l(),l0e=a("p"),KWr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZWr=l(),xn=a("p"),eQr=o("The model class to instantiate is selected based on the "),i0e=a("code"),oQr=o("model_type"),rQr=o(` property of the config object (either
passed as an argument or loaded from `),d0e=a("code"),tQr=o("pretrained_model_name_or_path"),aQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c0e=a("code"),nQr=o("pretrained_model_name_or_path"),sQr=o(":"),lQr=l(),f0e=a("ul"),YC=a("li"),m0e=a("strong"),iQr=o("vision-encoder-decoder"),dQr=o(" \u2014 "),ere=a("a"),cQr=o("TFVisionEncoderDecoderModel"),fQr=o(" (Vision Encoder decoder model)"),mQr=l(),F(KC.$$.fragment),kHe=l(),mf=a("h2"),ZC=a("a"),g0e=a("span"),F(Ck.$$.fragment),gQr=l(),h0e=a("span"),hQr=o("TFAutoModelForSpeechSeq2Seq"),SHe=l(),br=a("div"),F(wk.$$.fragment),pQr=l(),gf=a("p"),_Qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ore=a("a"),uQr=o("from_pretrained()"),bQr=o(" class method or the "),rre=a("a"),vQr=o("from_config()"),FQr=o(` class
method.`),TQr=l(),Ak=a("p"),MQr=o("This class cannot be instantiated directly using "),p0e=a("code"),EQr=o("__init__()"),CQr=o(" (throws an error)."),wQr=l(),Kt=a("div"),F(Lk.$$.fragment),AQr=l(),_0e=a("p"),LQr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yQr=l(),hf=a("p"),xQr=o(`Note:
Loading a model from its configuration file does `),u0e=a("strong"),$Qr=o("not"),kQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=a("a"),SQr=o("from_pretrained()"),RQr=o(" to load the model weights."),PQr=l(),F(e3.$$.fragment),BQr=l(),Qr=a("div"),F(yk.$$.fragment),IQr=l(),b0e=a("p"),NQr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qQr=l(),$n=a("p"),jQr=o("The model class to instantiate is selected based on the "),v0e=a("code"),DQr=o("model_type"),GQr=o(` property of the config object (either
passed as an argument or loaded from `),F0e=a("code"),OQr=o("pretrained_model_name_or_path"),VQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=a("code"),XQr=o("pretrained_model_name_or_path"),zQr=o(":"),WQr=l(),M0e=a("ul"),o3=a("li"),E0e=a("strong"),QQr=o("speech_to_text"),UQr=o(" \u2014 "),are=a("a"),HQr=o("TFSpeech2TextForConditionalGeneration"),JQr=o(" (Speech2Text model)"),YQr=l(),F(r3.$$.fragment),RHe=l(),pf=a("h2"),t3=a("a"),C0e=a("span"),F(xk.$$.fragment),KQr=l(),w0e=a("span"),ZQr=o("FlaxAutoModel"),PHe=l(),vr=a("div"),F($k.$$.fragment),eUr=l(),_f=a("p"),oUr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nre=a("a"),rUr=o("from_pretrained()"),tUr=o(" class method or the "),sre=a("a"),aUr=o("from_config()"),nUr=o(` class
method.`),sUr=l(),kk=a("p"),lUr=o("This class cannot be instantiated directly using "),A0e=a("code"),iUr=o("__init__()"),dUr=o(" (throws an error)."),cUr=l(),Zt=a("div"),F(Sk.$$.fragment),fUr=l(),L0e=a("p"),mUr=o("Instantiates one of the base model classes of the library from a configuration."),gUr=l(),uf=a("p"),hUr=o(`Note:
Loading a model from its configuration file does `),y0e=a("strong"),pUr=o("not"),_Ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=a("a"),uUr=o("from_pretrained()"),bUr=o(" to load the model weights."),vUr=l(),F(a3.$$.fragment),FUr=l(),Ur=a("div"),F(Rk.$$.fragment),TUr=l(),x0e=a("p"),MUr=o("Instantiate one of the base model classes of the library from a pretrained model."),EUr=l(),kn=a("p"),CUr=o("The model class to instantiate is selected based on the "),$0e=a("code"),wUr=o("model_type"),AUr=o(` property of the config object (either
passed as an argument or loaded from `),k0e=a("code"),LUr=o("pretrained_model_name_or_path"),yUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=a("code"),xUr=o("pretrained_model_name_or_path"),$Ur=o(":"),kUr=l(),re=a("ul"),n3=a("li"),R0e=a("strong"),SUr=o("albert"),RUr=o(" \u2014 "),ire=a("a"),PUr=o("FlaxAlbertModel"),BUr=o(" (ALBERT model)"),IUr=l(),s3=a("li"),P0e=a("strong"),NUr=o("bart"),qUr=o(" \u2014 "),dre=a("a"),jUr=o("FlaxBartModel"),DUr=o(" (BART model)"),GUr=l(),l3=a("li"),B0e=a("strong"),OUr=o("beit"),VUr=o(" \u2014 "),cre=a("a"),XUr=o("FlaxBeitModel"),zUr=o(" (BEiT model)"),WUr=l(),i3=a("li"),I0e=a("strong"),QUr=o("bert"),UUr=o(" \u2014 "),fre=a("a"),HUr=o("FlaxBertModel"),JUr=o(" (BERT model)"),YUr=l(),d3=a("li"),N0e=a("strong"),KUr=o("big_bird"),ZUr=o(" \u2014 "),mre=a("a"),eHr=o("FlaxBigBirdModel"),oHr=o(" (BigBird model)"),rHr=l(),c3=a("li"),q0e=a("strong"),tHr=o("blenderbot"),aHr=o(" \u2014 "),gre=a("a"),nHr=o("FlaxBlenderbotModel"),sHr=o(" (Blenderbot model)"),lHr=l(),f3=a("li"),j0e=a("strong"),iHr=o("blenderbot-small"),dHr=o(" \u2014 "),hre=a("a"),cHr=o("FlaxBlenderbotSmallModel"),fHr=o(" (BlenderbotSmall model)"),mHr=l(),m3=a("li"),D0e=a("strong"),gHr=o("clip"),hHr=o(" \u2014 "),pre=a("a"),pHr=o("FlaxCLIPModel"),_Hr=o(" (CLIP model)"),uHr=l(),g3=a("li"),G0e=a("strong"),bHr=o("distilbert"),vHr=o(" \u2014 "),_re=a("a"),FHr=o("FlaxDistilBertModel"),THr=o(" (DistilBERT model)"),MHr=l(),h3=a("li"),O0e=a("strong"),EHr=o("electra"),CHr=o(" \u2014 "),ure=a("a"),wHr=o("FlaxElectraModel"),AHr=o(" (ELECTRA model)"),LHr=l(),p3=a("li"),V0e=a("strong"),yHr=o("gpt2"),xHr=o(" \u2014 "),bre=a("a"),$Hr=o("FlaxGPT2Model"),kHr=o(" (OpenAI GPT-2 model)"),SHr=l(),_3=a("li"),X0e=a("strong"),RHr=o("gpt_neo"),PHr=o(" \u2014 "),vre=a("a"),BHr=o("FlaxGPTNeoModel"),IHr=o(" (GPT Neo model)"),NHr=l(),u3=a("li"),z0e=a("strong"),qHr=o("gptj"),jHr=o(" \u2014 "),Fre=a("a"),DHr=o("FlaxGPTJModel"),GHr=o(" (GPT-J model)"),OHr=l(),b3=a("li"),W0e=a("strong"),VHr=o("longt5"),XHr=o(" \u2014 "),Tre=a("a"),zHr=o("FlaxLongT5Model"),WHr=o(" (LongT5 model)"),QHr=l(),v3=a("li"),Q0e=a("strong"),UHr=o("marian"),HHr=o(" \u2014 "),Mre=a("a"),JHr=o("FlaxMarianModel"),YHr=o(" (Marian model)"),KHr=l(),F3=a("li"),U0e=a("strong"),ZHr=o("mbart"),eJr=o(" \u2014 "),Ere=a("a"),oJr=o("FlaxMBartModel"),rJr=o(" (mBART model)"),tJr=l(),T3=a("li"),H0e=a("strong"),aJr=o("mt5"),nJr=o(" \u2014 "),Cre=a("a"),sJr=o("FlaxMT5Model"),lJr=o(" (MT5 model)"),iJr=l(),M3=a("li"),J0e=a("strong"),dJr=o("opt"),cJr=o(" \u2014 "),wre=a("a"),fJr=o("FlaxOPTModel"),mJr=o(" (OPT model)"),gJr=l(),E3=a("li"),Y0e=a("strong"),hJr=o("pegasus"),pJr=o(" \u2014 "),Are=a("a"),_Jr=o("FlaxPegasusModel"),uJr=o(" (Pegasus model)"),bJr=l(),C3=a("li"),K0e=a("strong"),vJr=o("roberta"),FJr=o(" \u2014 "),Lre=a("a"),TJr=o("FlaxRobertaModel"),MJr=o(" (RoBERTa model)"),EJr=l(),w3=a("li"),Z0e=a("strong"),CJr=o("roformer"),wJr=o(" \u2014 "),yre=a("a"),AJr=o("FlaxRoFormerModel"),LJr=o(" (RoFormer model)"),yJr=l(),A3=a("li"),ewe=a("strong"),xJr=o("t5"),$Jr=o(" \u2014 "),xre=a("a"),kJr=o("FlaxT5Model"),SJr=o(" (T5 model)"),RJr=l(),L3=a("li"),owe=a("strong"),PJr=o("vision-text-dual-encoder"),BJr=o(" \u2014 "),$re=a("a"),IJr=o("FlaxVisionTextDualEncoderModel"),NJr=o(" (VisionTextDualEncoder model)"),qJr=l(),y3=a("li"),rwe=a("strong"),jJr=o("vit"),DJr=o(" \u2014 "),kre=a("a"),GJr=o("FlaxViTModel"),OJr=o(" (ViT model)"),VJr=l(),x3=a("li"),twe=a("strong"),XJr=o("wav2vec2"),zJr=o(" \u2014 "),Sre=a("a"),WJr=o("FlaxWav2Vec2Model"),QJr=o(" (Wav2Vec2 model)"),UJr=l(),$3=a("li"),awe=a("strong"),HJr=o("xglm"),JJr=o(" \u2014 "),Rre=a("a"),YJr=o("FlaxXGLMModel"),KJr=o(" (XGLM model)"),ZJr=l(),k3=a("li"),nwe=a("strong"),eYr=o("xlm-roberta"),oYr=o(" \u2014 "),Pre=a("a"),rYr=o("FlaxXLMRobertaModel"),tYr=o(" (XLM-RoBERTa model)"),aYr=l(),F(S3.$$.fragment),BHe=l(),bf=a("h2"),R3=a("a"),swe=a("span"),F(Pk.$$.fragment),nYr=l(),lwe=a("span"),sYr=o("FlaxAutoModelForCausalLM"),IHe=l(),Fr=a("div"),F(Bk.$$.fragment),lYr=l(),vf=a("p"),iYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bre=a("a"),dYr=o("from_pretrained()"),cYr=o(" class method or the "),Ire=a("a"),fYr=o("from_config()"),mYr=o(` class
method.`),gYr=l(),Ik=a("p"),hYr=o("This class cannot be instantiated directly using "),iwe=a("code"),pYr=o("__init__()"),_Yr=o(" (throws an error)."),uYr=l(),ea=a("div"),F(Nk.$$.fragment),bYr=l(),dwe=a("p"),vYr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FYr=l(),Ff=a("p"),TYr=o(`Note:
Loading a model from its configuration file does `),cwe=a("strong"),MYr=o("not"),EYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nre=a("a"),CYr=o("from_pretrained()"),wYr=o(" to load the model weights."),AYr=l(),F(P3.$$.fragment),LYr=l(),Hr=a("div"),F(qk.$$.fragment),yYr=l(),fwe=a("p"),xYr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Yr=l(),Sn=a("p"),kYr=o("The model class to instantiate is selected based on the "),mwe=a("code"),SYr=o("model_type"),RYr=o(` property of the config object (either
passed as an argument or loaded from `),gwe=a("code"),PYr=o("pretrained_model_name_or_path"),BYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hwe=a("code"),IYr=o("pretrained_model_name_or_path"),NYr=o(":"),qYr=l(),xe=a("ul"),B3=a("li"),pwe=a("strong"),jYr=o("bart"),DYr=o(" \u2014 "),qre=a("a"),GYr=o("FlaxBartForCausalLM"),OYr=o(" (BART model)"),VYr=l(),I3=a("li"),_we=a("strong"),XYr=o("bert"),zYr=o(" \u2014 "),jre=a("a"),WYr=o("FlaxBertForCausalLM"),QYr=o(" (BERT model)"),UYr=l(),N3=a("li"),uwe=a("strong"),HYr=o("big_bird"),JYr=o(" \u2014 "),Dre=a("a"),YYr=o("FlaxBigBirdForCausalLM"),KYr=o(" (BigBird model)"),ZYr=l(),q3=a("li"),bwe=a("strong"),eKr=o("electra"),oKr=o(" \u2014 "),Gre=a("a"),rKr=o("FlaxElectraForCausalLM"),tKr=o(" (ELECTRA model)"),aKr=l(),j3=a("li"),vwe=a("strong"),nKr=o("gpt2"),sKr=o(" \u2014 "),Ore=a("a"),lKr=o("FlaxGPT2LMHeadModel"),iKr=o(" (OpenAI GPT-2 model)"),dKr=l(),D3=a("li"),Fwe=a("strong"),cKr=o("gpt_neo"),fKr=o(" \u2014 "),Vre=a("a"),mKr=o("FlaxGPTNeoForCausalLM"),gKr=o(" (GPT Neo model)"),hKr=l(),G3=a("li"),Twe=a("strong"),pKr=o("gptj"),_Kr=o(" \u2014 "),Xre=a("a"),uKr=o("FlaxGPTJForCausalLM"),bKr=o(" (GPT-J model)"),vKr=l(),O3=a("li"),Mwe=a("strong"),FKr=o("opt"),TKr=o(" \u2014 "),zre=a("a"),MKr=o("FlaxOPTForCausalLM"),EKr=o(" (OPT model)"),CKr=l(),V3=a("li"),Ewe=a("strong"),wKr=o("roberta"),AKr=o(" \u2014 "),Wre=a("a"),LKr=o("FlaxRobertaForCausalLM"),yKr=o(" (RoBERTa model)"),xKr=l(),X3=a("li"),Cwe=a("strong"),$Kr=o("xglm"),kKr=o(" \u2014 "),Qre=a("a"),SKr=o("FlaxXGLMForCausalLM"),RKr=o(" (XGLM model)"),PKr=l(),F(z3.$$.fragment),NHe=l(),Tf=a("h2"),W3=a("a"),wwe=a("span"),F(jk.$$.fragment),BKr=l(),Awe=a("span"),IKr=o("FlaxAutoModelForPreTraining"),qHe=l(),Tr=a("div"),F(Dk.$$.fragment),NKr=l(),Mf=a("p"),qKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ure=a("a"),jKr=o("from_pretrained()"),DKr=o(" class method or the "),Hre=a("a"),GKr=o("from_config()"),OKr=o(` class
method.`),VKr=l(),Gk=a("p"),XKr=o("This class cannot be instantiated directly using "),Lwe=a("code"),zKr=o("__init__()"),WKr=o(" (throws an error)."),QKr=l(),oa=a("div"),F(Ok.$$.fragment),UKr=l(),ywe=a("p"),HKr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JKr=l(),Ef=a("p"),YKr=o(`Note:
Loading a model from its configuration file does `),xwe=a("strong"),KKr=o("not"),ZKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=a("a"),eZr=o("from_pretrained()"),oZr=o(" to load the model weights."),rZr=l(),F(Q3.$$.fragment),tZr=l(),Jr=a("div"),F(Vk.$$.fragment),aZr=l(),$we=a("p"),nZr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sZr=l(),Rn=a("p"),lZr=o("The model class to instantiate is selected based on the "),kwe=a("code"),iZr=o("model_type"),dZr=o(` property of the config object (either
passed as an argument or loaded from `),Swe=a("code"),cZr=o("pretrained_model_name_or_path"),fZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rwe=a("code"),mZr=o("pretrained_model_name_or_path"),gZr=o(":"),hZr=l(),Ee=a("ul"),U3=a("li"),Pwe=a("strong"),pZr=o("albert"),_Zr=o(" \u2014 "),Yre=a("a"),uZr=o("FlaxAlbertForPreTraining"),bZr=o(" (ALBERT model)"),vZr=l(),H3=a("li"),Bwe=a("strong"),FZr=o("bart"),TZr=o(" \u2014 "),Kre=a("a"),MZr=o("FlaxBartForConditionalGeneration"),EZr=o(" (BART model)"),CZr=l(),J3=a("li"),Iwe=a("strong"),wZr=o("bert"),AZr=o(" \u2014 "),Zre=a("a"),LZr=o("FlaxBertForPreTraining"),yZr=o(" (BERT model)"),xZr=l(),Y3=a("li"),Nwe=a("strong"),$Zr=o("big_bird"),kZr=o(" \u2014 "),ete=a("a"),SZr=o("FlaxBigBirdForPreTraining"),RZr=o(" (BigBird model)"),PZr=l(),K3=a("li"),qwe=a("strong"),BZr=o("electra"),IZr=o(" \u2014 "),ote=a("a"),NZr=o("FlaxElectraForPreTraining"),qZr=o(" (ELECTRA model)"),jZr=l(),Z3=a("li"),jwe=a("strong"),DZr=o("longt5"),GZr=o(" \u2014 "),rte=a("a"),OZr=o("FlaxLongT5ForConditionalGeneration"),VZr=o(" (LongT5 model)"),XZr=l(),e0=a("li"),Dwe=a("strong"),zZr=o("mbart"),WZr=o(" \u2014 "),tte=a("a"),QZr=o("FlaxMBartForConditionalGeneration"),UZr=o(" (mBART model)"),HZr=l(),o0=a("li"),Gwe=a("strong"),JZr=o("mt5"),YZr=o(" \u2014 "),ate=a("a"),KZr=o("FlaxMT5ForConditionalGeneration"),ZZr=o(" (MT5 model)"),eet=l(),r0=a("li"),Owe=a("strong"),oet=o("roberta"),ret=o(" \u2014 "),nte=a("a"),tet=o("FlaxRobertaForMaskedLM"),aet=o(" (RoBERTa model)"),net=l(),t0=a("li"),Vwe=a("strong"),set=o("roformer"),iet=o(" \u2014 "),ste=a("a"),det=o("FlaxRoFormerForMaskedLM"),cet=o(" (RoFormer model)"),fet=l(),a0=a("li"),Xwe=a("strong"),met=o("t5"),get=o(" \u2014 "),lte=a("a"),het=o("FlaxT5ForConditionalGeneration"),pet=o(" (T5 model)"),_et=l(),n0=a("li"),zwe=a("strong"),uet=o("wav2vec2"),bet=o(" \u2014 "),ite=a("a"),vet=o("FlaxWav2Vec2ForPreTraining"),Fet=o(" (Wav2Vec2 model)"),Tet=l(),s0=a("li"),Wwe=a("strong"),Met=o("xlm-roberta"),Eet=o(" \u2014 "),dte=a("a"),Cet=o("FlaxXLMRobertaForMaskedLM"),wet=o(" (XLM-RoBERTa model)"),Aet=l(),F(l0.$$.fragment),jHe=l(),Cf=a("h2"),i0=a("a"),Qwe=a("span"),F(Xk.$$.fragment),Let=l(),Uwe=a("span"),yet=o("FlaxAutoModelForMaskedLM"),DHe=l(),Mr=a("div"),F(zk.$$.fragment),xet=l(),wf=a("p"),$et=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cte=a("a"),ket=o("from_pretrained()"),Set=o(" class method or the "),fte=a("a"),Ret=o("from_config()"),Pet=o(` class
method.`),Bet=l(),Wk=a("p"),Iet=o("This class cannot be instantiated directly using "),Hwe=a("code"),Net=o("__init__()"),qet=o(" (throws an error)."),jet=l(),ra=a("div"),F(Qk.$$.fragment),Det=l(),Jwe=a("p"),Get=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Oet=l(),Af=a("p"),Vet=o(`Note:
Loading a model from its configuration file does `),Ywe=a("strong"),Xet=o("not"),zet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=a("a"),Wet=o("from_pretrained()"),Qet=o(" to load the model weights."),Uet=l(),F(d0.$$.fragment),Het=l(),Yr=a("div"),F(Uk.$$.fragment),Jet=l(),Kwe=a("p"),Yet=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ket=l(),Pn=a("p"),Zet=o("The model class to instantiate is selected based on the "),Zwe=a("code"),eot=o("model_type"),oot=o(` property of the config object (either
passed as an argument or loaded from `),e6e=a("code"),rot=o("pretrained_model_name_or_path"),tot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=a("code"),aot=o("pretrained_model_name_or_path"),not=o(":"),sot=l(),$e=a("ul"),c0=a("li"),r6e=a("strong"),lot=o("albert"),iot=o(" \u2014 "),gte=a("a"),dot=o("FlaxAlbertForMaskedLM"),cot=o(" (ALBERT model)"),fot=l(),f0=a("li"),t6e=a("strong"),mot=o("bart"),got=o(" \u2014 "),hte=a("a"),hot=o("FlaxBartForConditionalGeneration"),pot=o(" (BART model)"),_ot=l(),m0=a("li"),a6e=a("strong"),uot=o("bert"),bot=o(" \u2014 "),pte=a("a"),vot=o("FlaxBertForMaskedLM"),Fot=o(" (BERT model)"),Tot=l(),g0=a("li"),n6e=a("strong"),Mot=o("big_bird"),Eot=o(" \u2014 "),_te=a("a"),Cot=o("FlaxBigBirdForMaskedLM"),wot=o(" (BigBird model)"),Aot=l(),h0=a("li"),s6e=a("strong"),Lot=o("distilbert"),yot=o(" \u2014 "),ute=a("a"),xot=o("FlaxDistilBertForMaskedLM"),$ot=o(" (DistilBERT model)"),kot=l(),p0=a("li"),l6e=a("strong"),Sot=o("electra"),Rot=o(" \u2014 "),bte=a("a"),Pot=o("FlaxElectraForMaskedLM"),Bot=o(" (ELECTRA model)"),Iot=l(),_0=a("li"),i6e=a("strong"),Not=o("mbart"),qot=o(" \u2014 "),vte=a("a"),jot=o("FlaxMBartForConditionalGeneration"),Dot=o(" (mBART model)"),Got=l(),u0=a("li"),d6e=a("strong"),Oot=o("roberta"),Vot=o(" \u2014 "),Fte=a("a"),Xot=o("FlaxRobertaForMaskedLM"),zot=o(" (RoBERTa model)"),Wot=l(),b0=a("li"),c6e=a("strong"),Qot=o("roformer"),Uot=o(" \u2014 "),Tte=a("a"),Hot=o("FlaxRoFormerForMaskedLM"),Jot=o(" (RoFormer model)"),Yot=l(),v0=a("li"),f6e=a("strong"),Kot=o("xlm-roberta"),Zot=o(" \u2014 "),Mte=a("a"),ert=o("FlaxXLMRobertaForMaskedLM"),ort=o(" (XLM-RoBERTa model)"),rrt=l(),F(F0.$$.fragment),GHe=l(),Lf=a("h2"),T0=a("a"),m6e=a("span"),F(Hk.$$.fragment),trt=l(),g6e=a("span"),art=o("FlaxAutoModelForSeq2SeqLM"),OHe=l(),Er=a("div"),F(Jk.$$.fragment),nrt=l(),yf=a("p"),srt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ete=a("a"),lrt=o("from_pretrained()"),irt=o(" class method or the "),Cte=a("a"),drt=o("from_config()"),crt=o(` class
method.`),frt=l(),Yk=a("p"),mrt=o("This class cannot be instantiated directly using "),h6e=a("code"),grt=o("__init__()"),hrt=o(" (throws an error)."),prt=l(),ta=a("div"),F(Kk.$$.fragment),_rt=l(),p6e=a("p"),urt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),brt=l(),xf=a("p"),vrt=o(`Note:
Loading a model from its configuration file does `),_6e=a("strong"),Frt=o("not"),Trt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=a("a"),Mrt=o("from_pretrained()"),Ert=o(" to load the model weights."),Crt=l(),F(M0.$$.fragment),wrt=l(),Kr=a("div"),F(Zk.$$.fragment),Art=l(),u6e=a("p"),Lrt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yrt=l(),Bn=a("p"),xrt=o("The model class to instantiate is selected based on the "),b6e=a("code"),$rt=o("model_type"),krt=o(` property of the config object (either
passed as an argument or loaded from `),v6e=a("code"),Srt=o("pretrained_model_name_or_path"),Rrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=a("code"),Prt=o("pretrained_model_name_or_path"),Brt=o(":"),Irt=l(),ke=a("ul"),E0=a("li"),T6e=a("strong"),Nrt=o("bart"),qrt=o(" \u2014 "),Ate=a("a"),jrt=o("FlaxBartForConditionalGeneration"),Drt=o(" (BART model)"),Grt=l(),C0=a("li"),M6e=a("strong"),Ort=o("blenderbot"),Vrt=o(" \u2014 "),Lte=a("a"),Xrt=o("FlaxBlenderbotForConditionalGeneration"),zrt=o(" (Blenderbot model)"),Wrt=l(),w0=a("li"),E6e=a("strong"),Qrt=o("blenderbot-small"),Urt=o(" \u2014 "),yte=a("a"),Hrt=o("FlaxBlenderbotSmallForConditionalGeneration"),Jrt=o(" (BlenderbotSmall model)"),Yrt=l(),A0=a("li"),C6e=a("strong"),Krt=o("encoder-decoder"),Zrt=o(" \u2014 "),xte=a("a"),ett=o("FlaxEncoderDecoderModel"),ott=o(" (Encoder decoder model)"),rtt=l(),L0=a("li"),w6e=a("strong"),ttt=o("longt5"),att=o(" \u2014 "),$te=a("a"),ntt=o("FlaxLongT5ForConditionalGeneration"),stt=o(" (LongT5 model)"),ltt=l(),y0=a("li"),A6e=a("strong"),itt=o("marian"),dtt=o(" \u2014 "),kte=a("a"),ctt=o("FlaxMarianMTModel"),ftt=o(" (Marian model)"),mtt=l(),x0=a("li"),L6e=a("strong"),gtt=o("mbart"),htt=o(" \u2014 "),Ste=a("a"),ptt=o("FlaxMBartForConditionalGeneration"),_tt=o(" (mBART model)"),utt=l(),$0=a("li"),y6e=a("strong"),btt=o("mt5"),vtt=o(" \u2014 "),Rte=a("a"),Ftt=o("FlaxMT5ForConditionalGeneration"),Ttt=o(" (MT5 model)"),Mtt=l(),k0=a("li"),x6e=a("strong"),Ett=o("pegasus"),Ctt=o(" \u2014 "),Pte=a("a"),wtt=o("FlaxPegasusForConditionalGeneration"),Att=o(" (Pegasus model)"),Ltt=l(),S0=a("li"),$6e=a("strong"),ytt=o("t5"),xtt=o(" \u2014 "),Bte=a("a"),$tt=o("FlaxT5ForConditionalGeneration"),ktt=o(" (T5 model)"),Stt=l(),F(R0.$$.fragment),VHe=l(),$f=a("h2"),P0=a("a"),k6e=a("span"),F(eS.$$.fragment),Rtt=l(),S6e=a("span"),Ptt=o("FlaxAutoModelForSequenceClassification"),XHe=l(),Cr=a("div"),F(oS.$$.fragment),Btt=l(),kf=a("p"),Itt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ite=a("a"),Ntt=o("from_pretrained()"),qtt=o(" class method or the "),Nte=a("a"),jtt=o("from_config()"),Dtt=o(` class
method.`),Gtt=l(),rS=a("p"),Ott=o("This class cannot be instantiated directly using "),R6e=a("code"),Vtt=o("__init__()"),Xtt=o(" (throws an error)."),ztt=l(),aa=a("div"),F(tS.$$.fragment),Wtt=l(),P6e=a("p"),Qtt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Utt=l(),Sf=a("p"),Htt=o(`Note:
Loading a model from its configuration file does `),B6e=a("strong"),Jtt=o("not"),Ytt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qte=a("a"),Ktt=o("from_pretrained()"),Ztt=o(" to load the model weights."),eat=l(),F(B0.$$.fragment),oat=l(),Zr=a("div"),F(aS.$$.fragment),rat=l(),I6e=a("p"),tat=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aat=l(),In=a("p"),nat=o("The model class to instantiate is selected based on the "),N6e=a("code"),sat=o("model_type"),lat=o(` property of the config object (either
passed as an argument or loaded from `),q6e=a("code"),iat=o("pretrained_model_name_or_path"),dat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j6e=a("code"),cat=o("pretrained_model_name_or_path"),fat=o(":"),mat=l(),Se=a("ul"),I0=a("li"),D6e=a("strong"),gat=o("albert"),hat=o(" \u2014 "),jte=a("a"),pat=o("FlaxAlbertForSequenceClassification"),_at=o(" (ALBERT model)"),uat=l(),N0=a("li"),G6e=a("strong"),bat=o("bart"),vat=o(" \u2014 "),Dte=a("a"),Fat=o("FlaxBartForSequenceClassification"),Tat=o(" (BART model)"),Mat=l(),q0=a("li"),O6e=a("strong"),Eat=o("bert"),Cat=o(" \u2014 "),Gte=a("a"),wat=o("FlaxBertForSequenceClassification"),Aat=o(" (BERT model)"),Lat=l(),j0=a("li"),V6e=a("strong"),yat=o("big_bird"),xat=o(" \u2014 "),Ote=a("a"),$at=o("FlaxBigBirdForSequenceClassification"),kat=o(" (BigBird model)"),Sat=l(),D0=a("li"),X6e=a("strong"),Rat=o("distilbert"),Pat=o(" \u2014 "),Vte=a("a"),Bat=o("FlaxDistilBertForSequenceClassification"),Iat=o(" (DistilBERT model)"),Nat=l(),G0=a("li"),z6e=a("strong"),qat=o("electra"),jat=o(" \u2014 "),Xte=a("a"),Dat=o("FlaxElectraForSequenceClassification"),Gat=o(" (ELECTRA model)"),Oat=l(),O0=a("li"),W6e=a("strong"),Vat=o("mbart"),Xat=o(" \u2014 "),zte=a("a"),zat=o("FlaxMBartForSequenceClassification"),Wat=o(" (mBART model)"),Qat=l(),V0=a("li"),Q6e=a("strong"),Uat=o("roberta"),Hat=o(" \u2014 "),Wte=a("a"),Jat=o("FlaxRobertaForSequenceClassification"),Yat=o(" (RoBERTa model)"),Kat=l(),X0=a("li"),U6e=a("strong"),Zat=o("roformer"),ent=o(" \u2014 "),Qte=a("a"),ont=o("FlaxRoFormerForSequenceClassification"),rnt=o(" (RoFormer model)"),tnt=l(),z0=a("li"),H6e=a("strong"),ant=o("xlm-roberta"),nnt=o(" \u2014 "),Ute=a("a"),snt=o("FlaxXLMRobertaForSequenceClassification"),lnt=o(" (XLM-RoBERTa model)"),int=l(),F(W0.$$.fragment),zHe=l(),Rf=a("h2"),Q0=a("a"),J6e=a("span"),F(nS.$$.fragment),dnt=l(),Y6e=a("span"),cnt=o("FlaxAutoModelForQuestionAnswering"),WHe=l(),wr=a("div"),F(sS.$$.fragment),fnt=l(),Pf=a("p"),mnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hte=a("a"),gnt=o("from_pretrained()"),hnt=o(" class method or the "),Jte=a("a"),pnt=o("from_config()"),_nt=o(` class
method.`),unt=l(),lS=a("p"),bnt=o("This class cannot be instantiated directly using "),K6e=a("code"),vnt=o("__init__()"),Fnt=o(" (throws an error)."),Tnt=l(),na=a("div"),F(iS.$$.fragment),Mnt=l(),Z6e=a("p"),Ent=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cnt=l(),Bf=a("p"),wnt=o(`Note:
Loading a model from its configuration file does `),eAe=a("strong"),Ant=o("not"),Lnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yte=a("a"),ynt=o("from_pretrained()"),xnt=o(" to load the model weights."),$nt=l(),F(U0.$$.fragment),knt=l(),et=a("div"),F(dS.$$.fragment),Snt=l(),oAe=a("p"),Rnt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pnt=l(),Nn=a("p"),Bnt=o("The model class to instantiate is selected based on the "),rAe=a("code"),Int=o("model_type"),Nnt=o(` property of the config object (either
passed as an argument or loaded from `),tAe=a("code"),qnt=o("pretrained_model_name_or_path"),jnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aAe=a("code"),Dnt=o("pretrained_model_name_or_path"),Gnt=o(":"),Ont=l(),Re=a("ul"),H0=a("li"),nAe=a("strong"),Vnt=o("albert"),Xnt=o(" \u2014 "),Kte=a("a"),znt=o("FlaxAlbertForQuestionAnswering"),Wnt=o(" (ALBERT model)"),Qnt=l(),J0=a("li"),sAe=a("strong"),Unt=o("bart"),Hnt=o(" \u2014 "),Zte=a("a"),Jnt=o("FlaxBartForQuestionAnswering"),Ynt=o(" (BART model)"),Knt=l(),Y0=a("li"),lAe=a("strong"),Znt=o("bert"),est=o(" \u2014 "),eae=a("a"),ost=o("FlaxBertForQuestionAnswering"),rst=o(" (BERT model)"),tst=l(),K0=a("li"),iAe=a("strong"),ast=o("big_bird"),nst=o(" \u2014 "),oae=a("a"),sst=o("FlaxBigBirdForQuestionAnswering"),lst=o(" (BigBird model)"),ist=l(),Z0=a("li"),dAe=a("strong"),dst=o("distilbert"),cst=o(" \u2014 "),rae=a("a"),fst=o("FlaxDistilBertForQuestionAnswering"),mst=o(" (DistilBERT model)"),gst=l(),ew=a("li"),cAe=a("strong"),hst=o("electra"),pst=o(" \u2014 "),tae=a("a"),_st=o("FlaxElectraForQuestionAnswering"),ust=o(" (ELECTRA model)"),bst=l(),ow=a("li"),fAe=a("strong"),vst=o("mbart"),Fst=o(" \u2014 "),aae=a("a"),Tst=o("FlaxMBartForQuestionAnswering"),Mst=o(" (mBART model)"),Est=l(),rw=a("li"),mAe=a("strong"),Cst=o("roberta"),wst=o(" \u2014 "),nae=a("a"),Ast=o("FlaxRobertaForQuestionAnswering"),Lst=o(" (RoBERTa model)"),yst=l(),tw=a("li"),gAe=a("strong"),xst=o("roformer"),$st=o(" \u2014 "),sae=a("a"),kst=o("FlaxRoFormerForQuestionAnswering"),Sst=o(" (RoFormer model)"),Rst=l(),aw=a("li"),hAe=a("strong"),Pst=o("xlm-roberta"),Bst=o(" \u2014 "),lae=a("a"),Ist=o("FlaxXLMRobertaForQuestionAnswering"),Nst=o(" (XLM-RoBERTa model)"),qst=l(),F(nw.$$.fragment),QHe=l(),If=a("h2"),sw=a("a"),pAe=a("span"),F(cS.$$.fragment),jst=l(),_Ae=a("span"),Dst=o("FlaxAutoModelForTokenClassification"),UHe=l(),Ar=a("div"),F(fS.$$.fragment),Gst=l(),Nf=a("p"),Ost=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iae=a("a"),Vst=o("from_pretrained()"),Xst=o(" class method or the "),dae=a("a"),zst=o("from_config()"),Wst=o(` class
method.`),Qst=l(),mS=a("p"),Ust=o("This class cannot be instantiated directly using "),uAe=a("code"),Hst=o("__init__()"),Jst=o(" (throws an error)."),Yst=l(),sa=a("div"),F(gS.$$.fragment),Kst=l(),bAe=a("p"),Zst=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),elt=l(),qf=a("p"),olt=o(`Note:
Loading a model from its configuration file does `),vAe=a("strong"),rlt=o("not"),tlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cae=a("a"),alt=o("from_pretrained()"),nlt=o(" to load the model weights."),slt=l(),F(lw.$$.fragment),llt=l(),ot=a("div"),F(hS.$$.fragment),ilt=l(),FAe=a("p"),dlt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),clt=l(),qn=a("p"),flt=o("The model class to instantiate is selected based on the "),TAe=a("code"),mlt=o("model_type"),glt=o(` property of the config object (either
passed as an argument or loaded from `),MAe=a("code"),hlt=o("pretrained_model_name_or_path"),plt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EAe=a("code"),_lt=o("pretrained_model_name_or_path"),ult=o(":"),blt=l(),Xe=a("ul"),iw=a("li"),CAe=a("strong"),vlt=o("albert"),Flt=o(" \u2014 "),fae=a("a"),Tlt=o("FlaxAlbertForTokenClassification"),Mlt=o(" (ALBERT model)"),Elt=l(),dw=a("li"),wAe=a("strong"),Clt=o("bert"),wlt=o(" \u2014 "),mae=a("a"),Alt=o("FlaxBertForTokenClassification"),Llt=o(" (BERT model)"),ylt=l(),cw=a("li"),AAe=a("strong"),xlt=o("big_bird"),$lt=o(" \u2014 "),gae=a("a"),klt=o("FlaxBigBirdForTokenClassification"),Slt=o(" (BigBird model)"),Rlt=l(),fw=a("li"),LAe=a("strong"),Plt=o("distilbert"),Blt=o(" \u2014 "),hae=a("a"),Ilt=o("FlaxDistilBertForTokenClassification"),Nlt=o(" (DistilBERT model)"),qlt=l(),mw=a("li"),yAe=a("strong"),jlt=o("electra"),Dlt=o(" \u2014 "),pae=a("a"),Glt=o("FlaxElectraForTokenClassification"),Olt=o(" (ELECTRA model)"),Vlt=l(),gw=a("li"),xAe=a("strong"),Xlt=o("roberta"),zlt=o(" \u2014 "),_ae=a("a"),Wlt=o("FlaxRobertaForTokenClassification"),Qlt=o(" (RoBERTa model)"),Ult=l(),hw=a("li"),$Ae=a("strong"),Hlt=o("roformer"),Jlt=o(" \u2014 "),uae=a("a"),Ylt=o("FlaxRoFormerForTokenClassification"),Klt=o(" (RoFormer model)"),Zlt=l(),pw=a("li"),kAe=a("strong"),eit=o("xlm-roberta"),oit=o(" \u2014 "),bae=a("a"),rit=o("FlaxXLMRobertaForTokenClassification"),tit=o(" (XLM-RoBERTa model)"),ait=l(),F(_w.$$.fragment),HHe=l(),jf=a("h2"),uw=a("a"),SAe=a("span"),F(pS.$$.fragment),nit=l(),RAe=a("span"),sit=o("FlaxAutoModelForMultipleChoice"),JHe=l(),Lr=a("div"),F(_S.$$.fragment),lit=l(),Df=a("p"),iit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vae=a("a"),dit=o("from_pretrained()"),cit=o(" class method or the "),Fae=a("a"),fit=o("from_config()"),mit=o(` class
method.`),git=l(),uS=a("p"),hit=o("This class cannot be instantiated directly using "),PAe=a("code"),pit=o("__init__()"),_it=o(" (throws an error)."),uit=l(),la=a("div"),F(bS.$$.fragment),bit=l(),BAe=a("p"),vit=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fit=l(),Gf=a("p"),Tit=o(`Note:
Loading a model from its configuration file does `),IAe=a("strong"),Mit=o("not"),Eit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tae=a("a"),Cit=o("from_pretrained()"),wit=o(" to load the model weights."),Ait=l(),F(bw.$$.fragment),Lit=l(),rt=a("div"),F(vS.$$.fragment),yit=l(),NAe=a("p"),xit=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$it=l(),jn=a("p"),kit=o("The model class to instantiate is selected based on the "),qAe=a("code"),Sit=o("model_type"),Rit=o(` property of the config object (either
passed as an argument or loaded from `),jAe=a("code"),Pit=o("pretrained_model_name_or_path"),Bit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DAe=a("code"),Iit=o("pretrained_model_name_or_path"),Nit=o(":"),qit=l(),ze=a("ul"),vw=a("li"),GAe=a("strong"),jit=o("albert"),Dit=o(" \u2014 "),Mae=a("a"),Git=o("FlaxAlbertForMultipleChoice"),Oit=o(" (ALBERT model)"),Vit=l(),Fw=a("li"),OAe=a("strong"),Xit=o("bert"),zit=o(" \u2014 "),Eae=a("a"),Wit=o("FlaxBertForMultipleChoice"),Qit=o(" (BERT model)"),Uit=l(),Tw=a("li"),VAe=a("strong"),Hit=o("big_bird"),Jit=o(" \u2014 "),Cae=a("a"),Yit=o("FlaxBigBirdForMultipleChoice"),Kit=o(" (BigBird model)"),Zit=l(),Mw=a("li"),XAe=a("strong"),edt=o("distilbert"),odt=o(" \u2014 "),wae=a("a"),rdt=o("FlaxDistilBertForMultipleChoice"),tdt=o(" (DistilBERT model)"),adt=l(),Ew=a("li"),zAe=a("strong"),ndt=o("electra"),sdt=o(" \u2014 "),Aae=a("a"),ldt=o("FlaxElectraForMultipleChoice"),idt=o(" (ELECTRA model)"),ddt=l(),Cw=a("li"),WAe=a("strong"),cdt=o("roberta"),fdt=o(" \u2014 "),Lae=a("a"),mdt=o("FlaxRobertaForMultipleChoice"),gdt=o(" (RoBERTa model)"),hdt=l(),ww=a("li"),QAe=a("strong"),pdt=o("roformer"),_dt=o(" \u2014 "),yae=a("a"),udt=o("FlaxRoFormerForMultipleChoice"),bdt=o(" (RoFormer model)"),vdt=l(),Aw=a("li"),UAe=a("strong"),Fdt=o("xlm-roberta"),Tdt=o(" \u2014 "),xae=a("a"),Mdt=o("FlaxXLMRobertaForMultipleChoice"),Edt=o(" (XLM-RoBERTa model)"),Cdt=l(),F(Lw.$$.fragment),YHe=l(),Of=a("h2"),yw=a("a"),HAe=a("span"),F(FS.$$.fragment),wdt=l(),JAe=a("span"),Adt=o("FlaxAutoModelForNextSentencePrediction"),KHe=l(),yr=a("div"),F(TS.$$.fragment),Ldt=l(),Vf=a("p"),ydt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$ae=a("a"),xdt=o("from_pretrained()"),$dt=o(" class method or the "),kae=a("a"),kdt=o("from_config()"),Sdt=o(` class
method.`),Rdt=l(),MS=a("p"),Pdt=o("This class cannot be instantiated directly using "),YAe=a("code"),Bdt=o("__init__()"),Idt=o(" (throws an error)."),Ndt=l(),ia=a("div"),F(ES.$$.fragment),qdt=l(),KAe=a("p"),jdt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ddt=l(),Xf=a("p"),Gdt=o(`Note:
Loading a model from its configuration file does `),ZAe=a("strong"),Odt=o("not"),Vdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=a("a"),Xdt=o("from_pretrained()"),zdt=o(" to load the model weights."),Wdt=l(),F(xw.$$.fragment),Qdt=l(),tt=a("div"),F(CS.$$.fragment),Udt=l(),eLe=a("p"),Hdt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jdt=l(),Dn=a("p"),Ydt=o("The model class to instantiate is selected based on the "),oLe=a("code"),Kdt=o("model_type"),Zdt=o(` property of the config object (either
passed as an argument or loaded from `),rLe=a("code"),ect=o("pretrained_model_name_or_path"),oct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tLe=a("code"),rct=o("pretrained_model_name_or_path"),tct=o(":"),act=l(),aLe=a("ul"),$w=a("li"),nLe=a("strong"),nct=o("bert"),sct=o(" \u2014 "),Rae=a("a"),lct=o("FlaxBertForNextSentencePrediction"),ict=o(" (BERT model)"),dct=l(),F(kw.$$.fragment),ZHe=l(),zf=a("h2"),Sw=a("a"),sLe=a("span"),F(wS.$$.fragment),cct=l(),lLe=a("span"),fct=o("FlaxAutoModelForImageClassification"),eJe=l(),xr=a("div"),F(AS.$$.fragment),mct=l(),Wf=a("p"),gct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Pae=a("a"),hct=o("from_pretrained()"),pct=o(" class method or the "),Bae=a("a"),_ct=o("from_config()"),uct=o(` class
method.`),bct=l(),LS=a("p"),vct=o("This class cannot be instantiated directly using "),iLe=a("code"),Fct=o("__init__()"),Tct=o(" (throws an error)."),Mct=l(),da=a("div"),F(yS.$$.fragment),Ect=l(),dLe=a("p"),Cct=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wct=l(),Qf=a("p"),Act=o(`Note:
Loading a model from its configuration file does `),cLe=a("strong"),Lct=o("not"),yct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iae=a("a"),xct=o("from_pretrained()"),$ct=o(" to load the model weights."),kct=l(),F(Rw.$$.fragment),Sct=l(),at=a("div"),F(xS.$$.fragment),Rct=l(),fLe=a("p"),Pct=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bct=l(),Gn=a("p"),Ict=o("The model class to instantiate is selected based on the "),mLe=a("code"),Nct=o("model_type"),qct=o(` property of the config object (either
passed as an argument or loaded from `),gLe=a("code"),jct=o("pretrained_model_name_or_path"),Dct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hLe=a("code"),Gct=o("pretrained_model_name_or_path"),Oct=o(":"),Vct=l(),$S=a("ul"),Pw=a("li"),pLe=a("strong"),Xct=o("beit"),zct=o(" \u2014 "),Nae=a("a"),Wct=o("FlaxBeitForImageClassification"),Qct=o(" (BEiT model)"),Uct=l(),Bw=a("li"),_Le=a("strong"),Hct=o("vit"),Jct=o(" \u2014 "),qae=a("a"),Yct=o("FlaxViTForImageClassification"),Kct=o(" (ViT model)"),Zct=l(),F(Iw.$$.fragment),oJe=l(),Uf=a("h2"),Nw=a("a"),uLe=a("span"),F(kS.$$.fragment),eft=l(),bLe=a("span"),oft=o("FlaxAutoModelForVision2Seq"),rJe=l(),$r=a("div"),F(SS.$$.fragment),rft=l(),Hf=a("p"),tft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jae=a("a"),aft=o("from_pretrained()"),nft=o(" class method or the "),Dae=a("a"),sft=o("from_config()"),lft=o(` class
method.`),ift=l(),RS=a("p"),dft=o("This class cannot be instantiated directly using "),vLe=a("code"),cft=o("__init__()"),fft=o(" (throws an error)."),mft=l(),ca=a("div"),F(PS.$$.fragment),gft=l(),FLe=a("p"),hft=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pft=l(),Jf=a("p"),_ft=o(`Note:
Loading a model from its configuration file does `),TLe=a("strong"),uft=o("not"),bft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gae=a("a"),vft=o("from_pretrained()"),Fft=o(" to load the model weights."),Tft=l(),F(qw.$$.fragment),Mft=l(),nt=a("div"),F(BS.$$.fragment),Eft=l(),MLe=a("p"),Cft=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wft=l(),On=a("p"),Aft=o("The model class to instantiate is selected based on the "),ELe=a("code"),Lft=o("model_type"),yft=o(` property of the config object (either
passed as an argument or loaded from `),CLe=a("code"),xft=o("pretrained_model_name_or_path"),$ft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wLe=a("code"),kft=o("pretrained_model_name_or_path"),Sft=o(":"),Rft=l(),ALe=a("ul"),jw=a("li"),LLe=a("strong"),Pft=o("vision-encoder-decoder"),Bft=o(" \u2014 "),Oae=a("a"),Ift=o("FlaxVisionEncoderDecoderModel"),Nft=o(" (Vision Encoder decoder model)"),qft=l(),F(Dw.$$.fragment),this.h()},l(f){const u=ata('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var IS=s(p);m=n(IS,"A",{id:!0,class:!0,href:!0});var yLe=s(m);_=n(yLe,"SPAN",{});var xLe=s(_);T(d.$$.fragment,xLe),xLe.forEach(t),yLe.forEach(t),h=i(IS),Ao=n(IS,"SPAN",{});var $Le=s(Ao);Oi=r($Le,"Auto Classes"),$Le.forEach(t),IS.forEach(t),em=i(f),ft=n(f,"P",{});var NS=s(ft);Vi=r(NS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(NS,"CODE",{});var kLe=s(Xi);fL=r(kLe,"from_pretrained()"),kLe.forEach(t),om=r(NS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),NS.forEach(t),Ve=i(f),Ue=n(f,"P",{});var Vn=s(Ue);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var SLe=s(Xn);mL=r(SLe,"AutoConfig"),SLe.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var RLe=s(Wn);gL=r(RLe,"AutoModel"),RLe.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var PLe=s(Qn);hL=r(PLe,"AutoTokenizer"),PLe.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),rm=i(f),T(ja.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var qS=s(Ae);nP=r(qS,"will create a model that is an instance of "),Ui=n(qS,"A",{href:!0});var BLe=s(Ui);sP=r(BLe,"BertModel"),BLe.forEach(t),lP=r(qS,"."),qS.forEach(t),Lo=i(f),Da=n(f,"P",{});var jS=s(Da);iP=r(jS,"There is one class of "),tm=n(jS,"CODE",{});var ILe=s(tm);dP=r(ILe,"AutoModel"),ILe.forEach(t),bKe=r(jS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jS.forEach(t),UQe=i(f),Hi=n(f,"H2",{class:!0});var DS=s(Hi);am=n(DS,"A",{id:!0,class:!0,href:!0});var NLe=s(am);Dse=n(NLe,"SPAN",{});var qLe=s(Dse);T(pL.$$.fragment,qLe),qLe.forEach(t),NLe.forEach(t),vKe=i(DS),Gse=n(DS,"SPAN",{});var jLe=s(Gse);FKe=r(jLe,"Extending the Auto Classes"),jLe.forEach(t),DS.forEach(t),HQe=i(f),Un=n(f,"P",{});var Yf=s(Un);TKe=r(Yf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ose=n(Yf,"CODE",{});var DLe=s(Ose);MKe=r(DLe,"NewModel"),DLe.forEach(t),EKe=r(Yf,", make sure you have a "),Vse=n(Yf,"CODE",{});var GLe=s(Vse);CKe=r(GLe,"NewModelConfig"),GLe.forEach(t),wKe=r(Yf,` then you can add those to the auto
classes like this:`),Yf.forEach(t),JQe=i(f),T(_L.$$.fragment,f),YQe=i(f),cP=n(f,"P",{});var OLe=s(cP);AKe=r(OLe,"You will then be able to use the auto classes like you would usually do!"),OLe.forEach(t),KQe=i(f),T(nm.$$.fragment,f),ZQe=i(f),Ji=n(f,"H2",{class:!0});var GS=s(Ji);sm=n(GS,"A",{id:!0,class:!0,href:!0});var VLe=s(sm);Xse=n(VLe,"SPAN",{});var XLe=s(Xse);T(uL.$$.fragment,XLe),XLe.forEach(t),VLe.forEach(t),LKe=i(GS),zse=n(GS,"SPAN",{});var zLe=s(zse);yKe=r(zLe,"AutoConfig"),zLe.forEach(t),GS.forEach(t),eUe=i(f),yo=n(f,"DIV",{class:!0});var dt=s(yo);T(bL.$$.fragment,dt),xKe=i(dt),vL=n(dt,"P",{});var OS=s(vL);$Ke=r(OS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fP=n(OS,"A",{href:!0});var WLe=s(fP);kKe=r(WLe,"from_pretrained()"),WLe.forEach(t),SKe=r(OS," class method."),OS.forEach(t),RKe=i(dt),FL=n(dt,"P",{});var VS=s(FL);PKe=r(VS,"This class cannot be instantiated directly using "),Wse=n(VS,"CODE",{});var QLe=s(Wse);BKe=r(QLe,"__init__()"),QLe.forEach(t),IKe=r(VS," (throws an error)."),VS.forEach(t),NKe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(TL.$$.fragment,ct),qKe=i(ct),Qse=n(ct,"P",{});var ULe=s(Qse);jKe=r(ULe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ULe.forEach(t),DKe=i(ct),Yi=n(ct,"P",{});var Kf=s(Yi);GKe=r(Kf,"The configuration class to instantiate is selected based on the "),Use=n(Kf,"CODE",{});var HLe=s(Use);OKe=r(HLe,"model_type"),HLe.forEach(t),VKe=r(Kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Hse=n(Kf,"CODE",{});var JLe=s(Hse);XKe=r(JLe,"pretrained_model_name_or_path"),JLe.forEach(t),zKe=r(Kf,":"),Kf.forEach(t),WKe=i(ct),A=n(ct,"UL",{});var L=s(A);lm=n(L,"LI",{});var Gw=s(lm);Jse=n(Gw,"STRONG",{});var YLe=s(Jse);QKe=r(YLe,"albert"),YLe.forEach(t),UKe=r(Gw," \u2014 "),mP=n(Gw,"A",{href:!0});var KLe=s(mP);HKe=r(KLe,"AlbertConfig"),KLe.forEach(t),JKe=r(Gw," (ALBERT model)"),Gw.forEach(t),YKe=i(L),im=n(L,"LI",{});var Ow=s(im);Yse=n(Ow,"STRONG",{});var ZLe=s(Yse);KKe=r(ZLe,"bart"),ZLe.forEach(t),ZKe=r(Ow," \u2014 "),gP=n(Ow,"A",{href:!0});var eye=s(gP);eZe=r(eye,"BartConfig"),eye.forEach(t),oZe=r(Ow," (BART model)"),Ow.forEach(t),rZe=i(L),dm=n(L,"LI",{});var Vw=s(dm);Kse=n(Vw,"STRONG",{});var oye=s(Kse);tZe=r(oye,"beit"),oye.forEach(t),aZe=r(Vw," \u2014 "),hP=n(Vw,"A",{href:!0});var rye=s(hP);nZe=r(rye,"BeitConfig"),rye.forEach(t),sZe=r(Vw," (BEiT model)"),Vw.forEach(t),lZe=i(L),cm=n(L,"LI",{});var Xw=s(cm);Zse=n(Xw,"STRONG",{});var tye=s(Zse);iZe=r(tye,"bert"),tye.forEach(t),dZe=r(Xw," \u2014 "),pP=n(Xw,"A",{href:!0});var aye=s(pP);cZe=r(aye,"BertConfig"),aye.forEach(t),fZe=r(Xw," (BERT model)"),Xw.forEach(t),mZe=i(L),fm=n(L,"LI",{});var zw=s(fm);ele=n(zw,"STRONG",{});var nye=s(ele);gZe=r(nye,"bert-generation"),nye.forEach(t),hZe=r(zw," \u2014 "),_P=n(zw,"A",{href:!0});var sye=s(_P);pZe=r(sye,"BertGenerationConfig"),sye.forEach(t),_Ze=r(zw," (Bert Generation model)"),zw.forEach(t),uZe=i(L),mm=n(L,"LI",{});var Ww=s(mm);ole=n(Ww,"STRONG",{});var lye=s(ole);bZe=r(lye,"big_bird"),lye.forEach(t),vZe=r(Ww," \u2014 "),uP=n(Ww,"A",{href:!0});var iye=s(uP);FZe=r(iye,"BigBirdConfig"),iye.forEach(t),TZe=r(Ww," (BigBird model)"),Ww.forEach(t),MZe=i(L),gm=n(L,"LI",{});var Qw=s(gm);rle=n(Qw,"STRONG",{});var dye=s(rle);EZe=r(dye,"bigbird_pegasus"),dye.forEach(t),CZe=r(Qw," \u2014 "),bP=n(Qw,"A",{href:!0});var cye=s(bP);wZe=r(cye,"BigBirdPegasusConfig"),cye.forEach(t),AZe=r(Qw," (BigBird-Pegasus model)"),Qw.forEach(t),LZe=i(L),hm=n(L,"LI",{});var Uw=s(hm);tle=n(Uw,"STRONG",{});var fye=s(tle);yZe=r(fye,"blenderbot"),fye.forEach(t),xZe=r(Uw," \u2014 "),vP=n(Uw,"A",{href:!0});var mye=s(vP);$Ze=r(mye,"BlenderbotConfig"),mye.forEach(t),kZe=r(Uw," (Blenderbot model)"),Uw.forEach(t),SZe=i(L),pm=n(L,"LI",{});var Hw=s(pm);ale=n(Hw,"STRONG",{});var gye=s(ale);RZe=r(gye,"blenderbot-small"),gye.forEach(t),PZe=r(Hw," \u2014 "),FP=n(Hw,"A",{href:!0});var hye=s(FP);BZe=r(hye,"BlenderbotSmallConfig"),hye.forEach(t),IZe=r(Hw," (BlenderbotSmall model)"),Hw.forEach(t),NZe=i(L),_m=n(L,"LI",{});var Jw=s(_m);nle=n(Jw,"STRONG",{});var pye=s(nle);qZe=r(pye,"bloom"),pye.forEach(t),jZe=r(Jw," \u2014 "),TP=n(Jw,"A",{href:!0});var _ye=s(TP);DZe=r(_ye,"BloomConfig"),_ye.forEach(t),GZe=r(Jw," (BLOOM model)"),Jw.forEach(t),OZe=i(L),um=n(L,"LI",{});var Yw=s(um);sle=n(Yw,"STRONG",{});var uye=s(sle);VZe=r(uye,"camembert"),uye.forEach(t),XZe=r(Yw," \u2014 "),MP=n(Yw,"A",{href:!0});var bye=s(MP);zZe=r(bye,"CamembertConfig"),bye.forEach(t),WZe=r(Yw," (CamemBERT model)"),Yw.forEach(t),QZe=i(L),bm=n(L,"LI",{});var Kw=s(bm);lle=n(Kw,"STRONG",{});var vye=s(lle);UZe=r(vye,"canine"),vye.forEach(t),HZe=r(Kw," \u2014 "),EP=n(Kw,"A",{href:!0});var Fye=s(EP);JZe=r(Fye,"CanineConfig"),Fye.forEach(t),YZe=r(Kw," (CANINE model)"),Kw.forEach(t),KZe=i(L),vm=n(L,"LI",{});var Zw=s(vm);ile=n(Zw,"STRONG",{});var Tye=s(ile);ZZe=r(Tye,"clip"),Tye.forEach(t),eeo=r(Zw," \u2014 "),CP=n(Zw,"A",{href:!0});var Mye=s(CP);oeo=r(Mye,"CLIPConfig"),Mye.forEach(t),reo=r(Zw," (CLIP model)"),Zw.forEach(t),teo=i(L),Fm=n(L,"LI",{});var e6=s(Fm);dle=n(e6,"STRONG",{});var Eye=s(dle);aeo=r(Eye,"codegen"),Eye.forEach(t),neo=r(e6," \u2014 "),wP=n(e6,"A",{href:!0});var Cye=s(wP);seo=r(Cye,"CodeGenConfig"),Cye.forEach(t),leo=r(e6," (CodeGen model)"),e6.forEach(t),ieo=i(L),Tm=n(L,"LI",{});var o6=s(Tm);cle=n(o6,"STRONG",{});var wye=s(cle);deo=r(wye,"convbert"),wye.forEach(t),ceo=r(o6," \u2014 "),AP=n(o6,"A",{href:!0});var Aye=s(AP);feo=r(Aye,"ConvBertConfig"),Aye.forEach(t),meo=r(o6," (ConvBERT model)"),o6.forEach(t),geo=i(L),Mm=n(L,"LI",{});var r6=s(Mm);fle=n(r6,"STRONG",{});var Lye=s(fle);heo=r(Lye,"convnext"),Lye.forEach(t),peo=r(r6," \u2014 "),LP=n(r6,"A",{href:!0});var yye=s(LP);_eo=r(yye,"ConvNextConfig"),yye.forEach(t),ueo=r(r6," (ConvNeXT model)"),r6.forEach(t),beo=i(L),Em=n(L,"LI",{});var t6=s(Em);mle=n(t6,"STRONG",{});var xye=s(mle);veo=r(xye,"ctrl"),xye.forEach(t),Feo=r(t6," \u2014 "),yP=n(t6,"A",{href:!0});var $ye=s(yP);Teo=r($ye,"CTRLConfig"),$ye.forEach(t),Meo=r(t6," (CTRL model)"),t6.forEach(t),Eeo=i(L),Cm=n(L,"LI",{});var a6=s(Cm);gle=n(a6,"STRONG",{});var kye=s(gle);Ceo=r(kye,"cvt"),kye.forEach(t),weo=r(a6," \u2014 "),xP=n(a6,"A",{href:!0});var Sye=s(xP);Aeo=r(Sye,"CvtConfig"),Sye.forEach(t),Leo=r(a6," (CvT model)"),a6.forEach(t),yeo=i(L),wm=n(L,"LI",{});var n6=s(wm);hle=n(n6,"STRONG",{});var Rye=s(hle);xeo=r(Rye,"data2vec-audio"),Rye.forEach(t),$eo=r(n6," \u2014 "),$P=n(n6,"A",{href:!0});var Pye=s($P);keo=r(Pye,"Data2VecAudioConfig"),Pye.forEach(t),Seo=r(n6," (Data2VecAudio model)"),n6.forEach(t),Reo=i(L),Am=n(L,"LI",{});var s6=s(Am);ple=n(s6,"STRONG",{});var Bye=s(ple);Peo=r(Bye,"data2vec-text"),Bye.forEach(t),Beo=r(s6," \u2014 "),kP=n(s6,"A",{href:!0});var Iye=s(kP);Ieo=r(Iye,"Data2VecTextConfig"),Iye.forEach(t),Neo=r(s6," (Data2VecText model)"),s6.forEach(t),qeo=i(L),Lm=n(L,"LI",{});var l6=s(Lm);_le=n(l6,"STRONG",{});var Nye=s(_le);jeo=r(Nye,"data2vec-vision"),Nye.forEach(t),Deo=r(l6," \u2014 "),SP=n(l6,"A",{href:!0});var qye=s(SP);Geo=r(qye,"Data2VecVisionConfig"),qye.forEach(t),Oeo=r(l6," (Data2VecVision model)"),l6.forEach(t),Veo=i(L),ym=n(L,"LI",{});var i6=s(ym);ule=n(i6,"STRONG",{});var jye=s(ule);Xeo=r(jye,"deberta"),jye.forEach(t),zeo=r(i6," \u2014 "),RP=n(i6,"A",{href:!0});var Dye=s(RP);Weo=r(Dye,"DebertaConfig"),Dye.forEach(t),Qeo=r(i6," (DeBERTa model)"),i6.forEach(t),Ueo=i(L),xm=n(L,"LI",{});var d6=s(xm);ble=n(d6,"STRONG",{});var Gye=s(ble);Heo=r(Gye,"deberta-v2"),Gye.forEach(t),Jeo=r(d6," \u2014 "),PP=n(d6,"A",{href:!0});var Oye=s(PP);Yeo=r(Oye,"DebertaV2Config"),Oye.forEach(t),Keo=r(d6," (DeBERTa-v2 model)"),d6.forEach(t),Zeo=i(L),$m=n(L,"LI",{});var c6=s($m);vle=n(c6,"STRONG",{});var Vye=s(vle);eoo=r(Vye,"decision_transformer"),Vye.forEach(t),ooo=r(c6," \u2014 "),BP=n(c6,"A",{href:!0});var Xye=s(BP);roo=r(Xye,"DecisionTransformerConfig"),Xye.forEach(t),too=r(c6," (Decision Transformer model)"),c6.forEach(t),aoo=i(L),km=n(L,"LI",{});var f6=s(km);Fle=n(f6,"STRONG",{});var zye=s(Fle);noo=r(zye,"deit"),zye.forEach(t),soo=r(f6," \u2014 "),IP=n(f6,"A",{href:!0});var Dft=s(IP);loo=r(Dft,"DeiTConfig"),Dft.forEach(t),ioo=r(f6," (DeiT model)"),f6.forEach(t),doo=i(L),Sm=n(L,"LI",{});var Wye=s(Sm);Tle=n(Wye,"STRONG",{});var Gft=s(Tle);coo=r(Gft,"detr"),Gft.forEach(t),foo=r(Wye," \u2014 "),NP=n(Wye,"A",{href:!0});var Oft=s(NP);moo=r(Oft,"DetrConfig"),Oft.forEach(t),goo=r(Wye," (DETR model)"),Wye.forEach(t),hoo=i(L),Rm=n(L,"LI",{});var Qye=s(Rm);Mle=n(Qye,"STRONG",{});var Vft=s(Mle);poo=r(Vft,"distilbert"),Vft.forEach(t),_oo=r(Qye," \u2014 "),qP=n(Qye,"A",{href:!0});var Xft=s(qP);uoo=r(Xft,"DistilBertConfig"),Xft.forEach(t),boo=r(Qye," (DistilBERT model)"),Qye.forEach(t),voo=i(L),Pm=n(L,"LI",{});var Uye=s(Pm);Ele=n(Uye,"STRONG",{});var zft=s(Ele);Foo=r(zft,"donut-swin"),zft.forEach(t),Too=r(Uye," \u2014 "),jP=n(Uye,"A",{href:!0});var Wft=s(jP);Moo=r(Wft,"DonutSwinConfig"),Wft.forEach(t),Eoo=r(Uye," (DonutSwin model)"),Uye.forEach(t),Coo=i(L),Bm=n(L,"LI",{});var Hye=s(Bm);Cle=n(Hye,"STRONG",{});var Qft=s(Cle);woo=r(Qft,"dpr"),Qft.forEach(t),Aoo=r(Hye," \u2014 "),DP=n(Hye,"A",{href:!0});var Uft=s(DP);Loo=r(Uft,"DPRConfig"),Uft.forEach(t),yoo=r(Hye," (DPR model)"),Hye.forEach(t),xoo=i(L),Im=n(L,"LI",{});var Jye=s(Im);wle=n(Jye,"STRONG",{});var Hft=s(wle);$oo=r(Hft,"dpt"),Hft.forEach(t),koo=r(Jye," \u2014 "),GP=n(Jye,"A",{href:!0});var Jft=s(GP);Soo=r(Jft,"DPTConfig"),Jft.forEach(t),Roo=r(Jye," (DPT model)"),Jye.forEach(t),Poo=i(L),Nm=n(L,"LI",{});var Yye=s(Nm);Ale=n(Yye,"STRONG",{});var Yft=s(Ale);Boo=r(Yft,"electra"),Yft.forEach(t),Ioo=r(Yye," \u2014 "),OP=n(Yye,"A",{href:!0});var Kft=s(OP);Noo=r(Kft,"ElectraConfig"),Kft.forEach(t),qoo=r(Yye," (ELECTRA model)"),Yye.forEach(t),joo=i(L),qm=n(L,"LI",{});var Kye=s(qm);Lle=n(Kye,"STRONG",{});var Zft=s(Lle);Doo=r(Zft,"encoder-decoder"),Zft.forEach(t),Goo=r(Kye," \u2014 "),VP=n(Kye,"A",{href:!0});var emt=s(VP);Ooo=r(emt,"EncoderDecoderConfig"),emt.forEach(t),Voo=r(Kye," (Encoder decoder model)"),Kye.forEach(t),Xoo=i(L),jm=n(L,"LI",{});var Zye=s(jm);yle=n(Zye,"STRONG",{});var omt=s(yle);zoo=r(omt,"flaubert"),omt.forEach(t),Woo=r(Zye," \u2014 "),XP=n(Zye,"A",{href:!0});var rmt=s(XP);Qoo=r(rmt,"FlaubertConfig"),rmt.forEach(t),Uoo=r(Zye," (FlauBERT model)"),Zye.forEach(t),Hoo=i(L),Dm=n(L,"LI",{});var exe=s(Dm);xle=n(exe,"STRONG",{});var tmt=s(xle);Joo=r(tmt,"flava"),tmt.forEach(t),Yoo=r(exe," \u2014 "),zP=n(exe,"A",{href:!0});var amt=s(zP);Koo=r(amt,"FlavaConfig"),amt.forEach(t),Zoo=r(exe," (FLAVA model)"),exe.forEach(t),ero=i(L),Gm=n(L,"LI",{});var oxe=s(Gm);$le=n(oxe,"STRONG",{});var nmt=s($le);oro=r(nmt,"fnet"),nmt.forEach(t),rro=r(oxe," \u2014 "),WP=n(oxe,"A",{href:!0});var smt=s(WP);tro=r(smt,"FNetConfig"),smt.forEach(t),aro=r(oxe," (FNet model)"),oxe.forEach(t),nro=i(L),Om=n(L,"LI",{});var rxe=s(Om);kle=n(rxe,"STRONG",{});var lmt=s(kle);sro=r(lmt,"fsmt"),lmt.forEach(t),lro=r(rxe," \u2014 "),QP=n(rxe,"A",{href:!0});var imt=s(QP);iro=r(imt,"FSMTConfig"),imt.forEach(t),dro=r(rxe," (FairSeq Machine-Translation model)"),rxe.forEach(t),cro=i(L),Vm=n(L,"LI",{});var txe=s(Vm);Sle=n(txe,"STRONG",{});var dmt=s(Sle);fro=r(dmt,"funnel"),dmt.forEach(t),mro=r(txe," \u2014 "),UP=n(txe,"A",{href:!0});var cmt=s(UP);gro=r(cmt,"FunnelConfig"),cmt.forEach(t),hro=r(txe," (Funnel Transformer model)"),txe.forEach(t),pro=i(L),Xm=n(L,"LI",{});var axe=s(Xm);Rle=n(axe,"STRONG",{});var fmt=s(Rle);_ro=r(fmt,"glpn"),fmt.forEach(t),uro=r(axe," \u2014 "),HP=n(axe,"A",{href:!0});var mmt=s(HP);bro=r(mmt,"GLPNConfig"),mmt.forEach(t),vro=r(axe," (GLPN model)"),axe.forEach(t),Fro=i(L),zm=n(L,"LI",{});var nxe=s(zm);Ple=n(nxe,"STRONG",{});var gmt=s(Ple);Tro=r(gmt,"gpt2"),gmt.forEach(t),Mro=r(nxe," \u2014 "),JP=n(nxe,"A",{href:!0});var hmt=s(JP);Ero=r(hmt,"GPT2Config"),hmt.forEach(t),Cro=r(nxe," (OpenAI GPT-2 model)"),nxe.forEach(t),wro=i(L),Wm=n(L,"LI",{});var sxe=s(Wm);Ble=n(sxe,"STRONG",{});var pmt=s(Ble);Aro=r(pmt,"gpt_neo"),pmt.forEach(t),Lro=r(sxe," \u2014 "),YP=n(sxe,"A",{href:!0});var _mt=s(YP);yro=r(_mt,"GPTNeoConfig"),_mt.forEach(t),xro=r(sxe," (GPT Neo model)"),sxe.forEach(t),$ro=i(L),Qm=n(L,"LI",{});var lxe=s(Qm);Ile=n(lxe,"STRONG",{});var umt=s(Ile);kro=r(umt,"gpt_neox"),umt.forEach(t),Sro=r(lxe," \u2014 "),KP=n(lxe,"A",{href:!0});var bmt=s(KP);Rro=r(bmt,"GPTNeoXConfig"),bmt.forEach(t),Pro=r(lxe," (GPT NeoX model)"),lxe.forEach(t),Bro=i(L),Um=n(L,"LI",{});var ixe=s(Um);Nle=n(ixe,"STRONG",{});var vmt=s(Nle);Iro=r(vmt,"gptj"),vmt.forEach(t),Nro=r(ixe," \u2014 "),ZP=n(ixe,"A",{href:!0});var Fmt=s(ZP);qro=r(Fmt,"GPTJConfig"),Fmt.forEach(t),jro=r(ixe," (GPT-J model)"),ixe.forEach(t),Dro=i(L),Hm=n(L,"LI",{});var dxe=s(Hm);qle=n(dxe,"STRONG",{});var Tmt=s(qle);Gro=r(Tmt,"groupvit"),Tmt.forEach(t),Oro=r(dxe," \u2014 "),eB=n(dxe,"A",{href:!0});var Mmt=s(eB);Vro=r(Mmt,"GroupViTConfig"),Mmt.forEach(t),Xro=r(dxe," (GroupViT model)"),dxe.forEach(t),zro=i(L),Jm=n(L,"LI",{});var cxe=s(Jm);jle=n(cxe,"STRONG",{});var Emt=s(jle);Wro=r(Emt,"hubert"),Emt.forEach(t),Qro=r(cxe," \u2014 "),oB=n(cxe,"A",{href:!0});var Cmt=s(oB);Uro=r(Cmt,"HubertConfig"),Cmt.forEach(t),Hro=r(cxe," (Hubert model)"),cxe.forEach(t),Jro=i(L),Ym=n(L,"LI",{});var fxe=s(Ym);Dle=n(fxe,"STRONG",{});var wmt=s(Dle);Yro=r(wmt,"ibert"),wmt.forEach(t),Kro=r(fxe," \u2014 "),rB=n(fxe,"A",{href:!0});var Amt=s(rB);Zro=r(Amt,"IBertConfig"),Amt.forEach(t),eto=r(fxe," (I-BERT model)"),fxe.forEach(t),oto=i(L),Km=n(L,"LI",{});var mxe=s(Km);Gle=n(mxe,"STRONG",{});var Lmt=s(Gle);rto=r(Lmt,"imagegpt"),Lmt.forEach(t),tto=r(mxe," \u2014 "),tB=n(mxe,"A",{href:!0});var ymt=s(tB);ato=r(ymt,"ImageGPTConfig"),ymt.forEach(t),nto=r(mxe," (ImageGPT model)"),mxe.forEach(t),sto=i(L),Zm=n(L,"LI",{});var gxe=s(Zm);Ole=n(gxe,"STRONG",{});var xmt=s(Ole);lto=r(xmt,"layoutlm"),xmt.forEach(t),ito=r(gxe," \u2014 "),aB=n(gxe,"A",{href:!0});var $mt=s(aB);dto=r($mt,"LayoutLMConfig"),$mt.forEach(t),cto=r(gxe," (LayoutLM model)"),gxe.forEach(t),fto=i(L),eg=n(L,"LI",{});var hxe=s(eg);Vle=n(hxe,"STRONG",{});var kmt=s(Vle);mto=r(kmt,"layoutlmv2"),kmt.forEach(t),gto=r(hxe," \u2014 "),nB=n(hxe,"A",{href:!0});var Smt=s(nB);hto=r(Smt,"LayoutLMv2Config"),Smt.forEach(t),pto=r(hxe," (LayoutLMv2 model)"),hxe.forEach(t),_to=i(L),og=n(L,"LI",{});var pxe=s(og);Xle=n(pxe,"STRONG",{});var Rmt=s(Xle);uto=r(Rmt,"layoutlmv3"),Rmt.forEach(t),bto=r(pxe," \u2014 "),sB=n(pxe,"A",{href:!0});var Pmt=s(sB);vto=r(Pmt,"LayoutLMv3Config"),Pmt.forEach(t),Fto=r(pxe," (LayoutLMv3 model)"),pxe.forEach(t),Tto=i(L),rg=n(L,"LI",{});var _xe=s(rg);zle=n(_xe,"STRONG",{});var Bmt=s(zle);Mto=r(Bmt,"led"),Bmt.forEach(t),Eto=r(_xe," \u2014 "),lB=n(_xe,"A",{href:!0});var Imt=s(lB);Cto=r(Imt,"LEDConfig"),Imt.forEach(t),wto=r(_xe," (LED model)"),_xe.forEach(t),Ato=i(L),tg=n(L,"LI",{});var uxe=s(tg);Wle=n(uxe,"STRONG",{});var Nmt=s(Wle);Lto=r(Nmt,"levit"),Nmt.forEach(t),yto=r(uxe," \u2014 "),iB=n(uxe,"A",{href:!0});var qmt=s(iB);xto=r(qmt,"LevitConfig"),qmt.forEach(t),$to=r(uxe," (LeViT model)"),uxe.forEach(t),kto=i(L),ag=n(L,"LI",{});var bxe=s(ag);Qle=n(bxe,"STRONG",{});var jmt=s(Qle);Sto=r(jmt,"longformer"),jmt.forEach(t),Rto=r(bxe," \u2014 "),dB=n(bxe,"A",{href:!0});var Dmt=s(dB);Pto=r(Dmt,"LongformerConfig"),Dmt.forEach(t),Bto=r(bxe," (Longformer model)"),bxe.forEach(t),Ito=i(L),ng=n(L,"LI",{});var vxe=s(ng);Ule=n(vxe,"STRONG",{});var Gmt=s(Ule);Nto=r(Gmt,"longt5"),Gmt.forEach(t),qto=r(vxe," \u2014 "),cB=n(vxe,"A",{href:!0});var Omt=s(cB);jto=r(Omt,"LongT5Config"),Omt.forEach(t),Dto=r(vxe," (LongT5 model)"),vxe.forEach(t),Gto=i(L),sg=n(L,"LI",{});var Fxe=s(sg);Hle=n(Fxe,"STRONG",{});var Vmt=s(Hle);Oto=r(Vmt,"luke"),Vmt.forEach(t),Vto=r(Fxe," \u2014 "),fB=n(Fxe,"A",{href:!0});var Xmt=s(fB);Xto=r(Xmt,"LukeConfig"),Xmt.forEach(t),zto=r(Fxe," (LUKE model)"),Fxe.forEach(t),Wto=i(L),lg=n(L,"LI",{});var Txe=s(lg);Jle=n(Txe,"STRONG",{});var zmt=s(Jle);Qto=r(zmt,"lxmert"),zmt.forEach(t),Uto=r(Txe," \u2014 "),mB=n(Txe,"A",{href:!0});var Wmt=s(mB);Hto=r(Wmt,"LxmertConfig"),Wmt.forEach(t),Jto=r(Txe," (LXMERT model)"),Txe.forEach(t),Yto=i(L),ig=n(L,"LI",{});var Mxe=s(ig);Yle=n(Mxe,"STRONG",{});var Qmt=s(Yle);Kto=r(Qmt,"m2m_100"),Qmt.forEach(t),Zto=r(Mxe," \u2014 "),gB=n(Mxe,"A",{href:!0});var Umt=s(gB);eao=r(Umt,"M2M100Config"),Umt.forEach(t),oao=r(Mxe," (M2M100 model)"),Mxe.forEach(t),rao=i(L),dg=n(L,"LI",{});var Exe=s(dg);Kle=n(Exe,"STRONG",{});var Hmt=s(Kle);tao=r(Hmt,"marian"),Hmt.forEach(t),aao=r(Exe," \u2014 "),hB=n(Exe,"A",{href:!0});var Jmt=s(hB);nao=r(Jmt,"MarianConfig"),Jmt.forEach(t),sao=r(Exe," (Marian model)"),Exe.forEach(t),lao=i(L),cg=n(L,"LI",{});var Cxe=s(cg);Zle=n(Cxe,"STRONG",{});var Ymt=s(Zle);iao=r(Ymt,"maskformer"),Ymt.forEach(t),dao=r(Cxe," \u2014 "),pB=n(Cxe,"A",{href:!0});var Kmt=s(pB);cao=r(Kmt,"MaskFormerConfig"),Kmt.forEach(t),fao=r(Cxe," (MaskFormer model)"),Cxe.forEach(t),mao=i(L),fg=n(L,"LI",{});var wxe=s(fg);eie=n(wxe,"STRONG",{});var Zmt=s(eie);gao=r(Zmt,"mbart"),Zmt.forEach(t),hao=r(wxe," \u2014 "),_B=n(wxe,"A",{href:!0});var egt=s(_B);pao=r(egt,"MBartConfig"),egt.forEach(t),_ao=r(wxe," (mBART model)"),wxe.forEach(t),uao=i(L),mg=n(L,"LI",{});var Axe=s(mg);oie=n(Axe,"STRONG",{});var ogt=s(oie);bao=r(ogt,"mctct"),ogt.forEach(t),vao=r(Axe," \u2014 "),uB=n(Axe,"A",{href:!0});var rgt=s(uB);Fao=r(rgt,"MCTCTConfig"),rgt.forEach(t),Tao=r(Axe," (M-CTC-T model)"),Axe.forEach(t),Mao=i(L),gg=n(L,"LI",{});var Lxe=s(gg);rie=n(Lxe,"STRONG",{});var tgt=s(rie);Eao=r(tgt,"megatron-bert"),tgt.forEach(t),Cao=r(Lxe," \u2014 "),bB=n(Lxe,"A",{href:!0});var agt=s(bB);wao=r(agt,"MegatronBertConfig"),agt.forEach(t),Aao=r(Lxe," (Megatron-BERT model)"),Lxe.forEach(t),Lao=i(L),hg=n(L,"LI",{});var yxe=s(hg);tie=n(yxe,"STRONG",{});var ngt=s(tie);yao=r(ngt,"mobilebert"),ngt.forEach(t),xao=r(yxe," \u2014 "),vB=n(yxe,"A",{href:!0});var sgt=s(vB);$ao=r(sgt,"MobileBertConfig"),sgt.forEach(t),kao=r(yxe," (MobileBERT model)"),yxe.forEach(t),Sao=i(L),pg=n(L,"LI",{});var xxe=s(pg);aie=n(xxe,"STRONG",{});var lgt=s(aie);Rao=r(lgt,"mobilevit"),lgt.forEach(t),Pao=r(xxe," \u2014 "),FB=n(xxe,"A",{href:!0});var igt=s(FB);Bao=r(igt,"MobileViTConfig"),igt.forEach(t),Iao=r(xxe," (MobileViT model)"),xxe.forEach(t),Nao=i(L),_g=n(L,"LI",{});var $xe=s(_g);nie=n($xe,"STRONG",{});var dgt=s(nie);qao=r(dgt,"mpnet"),dgt.forEach(t),jao=r($xe," \u2014 "),TB=n($xe,"A",{href:!0});var cgt=s(TB);Dao=r(cgt,"MPNetConfig"),cgt.forEach(t),Gao=r($xe," (MPNet model)"),$xe.forEach(t),Oao=i(L),ug=n(L,"LI",{});var kxe=s(ug);sie=n(kxe,"STRONG",{});var fgt=s(sie);Vao=r(fgt,"mt5"),fgt.forEach(t),Xao=r(kxe," \u2014 "),MB=n(kxe,"A",{href:!0});var mgt=s(MB);zao=r(mgt,"MT5Config"),mgt.forEach(t),Wao=r(kxe," (MT5 model)"),kxe.forEach(t),Qao=i(L),bg=n(L,"LI",{});var Sxe=s(bg);lie=n(Sxe,"STRONG",{});var ggt=s(lie);Uao=r(ggt,"mvp"),ggt.forEach(t),Hao=r(Sxe," \u2014 "),EB=n(Sxe,"A",{href:!0});var hgt=s(EB);Jao=r(hgt,"MvpConfig"),hgt.forEach(t),Yao=r(Sxe," (MVP model)"),Sxe.forEach(t),Kao=i(L),vg=n(L,"LI",{});var Rxe=s(vg);iie=n(Rxe,"STRONG",{});var pgt=s(iie);Zao=r(pgt,"nezha"),pgt.forEach(t),eno=r(Rxe," \u2014 "),CB=n(Rxe,"A",{href:!0});var _gt=s(CB);ono=r(_gt,"NezhaConfig"),_gt.forEach(t),rno=r(Rxe," (Nezha model)"),Rxe.forEach(t),tno=i(L),Fg=n(L,"LI",{});var Pxe=s(Fg);die=n(Pxe,"STRONG",{});var ugt=s(die);ano=r(ugt,"nystromformer"),ugt.forEach(t),nno=r(Pxe," \u2014 "),wB=n(Pxe,"A",{href:!0});var bgt=s(wB);sno=r(bgt,"NystromformerConfig"),bgt.forEach(t),lno=r(Pxe," (Nystr\xF6mformer model)"),Pxe.forEach(t),ino=i(L),Tg=n(L,"LI",{});var Bxe=s(Tg);cie=n(Bxe,"STRONG",{});var vgt=s(cie);dno=r(vgt,"openai-gpt"),vgt.forEach(t),cno=r(Bxe," \u2014 "),AB=n(Bxe,"A",{href:!0});var Fgt=s(AB);fno=r(Fgt,"OpenAIGPTConfig"),Fgt.forEach(t),mno=r(Bxe," (OpenAI GPT model)"),Bxe.forEach(t),gno=i(L),Mg=n(L,"LI",{});var Ixe=s(Mg);fie=n(Ixe,"STRONG",{});var Tgt=s(fie);hno=r(Tgt,"opt"),Tgt.forEach(t),pno=r(Ixe," \u2014 "),LB=n(Ixe,"A",{href:!0});var Mgt=s(LB);_no=r(Mgt,"OPTConfig"),Mgt.forEach(t),uno=r(Ixe," (OPT model)"),Ixe.forEach(t),bno=i(L),Eg=n(L,"LI",{});var Nxe=s(Eg);mie=n(Nxe,"STRONG",{});var Egt=s(mie);vno=r(Egt,"owlvit"),Egt.forEach(t),Fno=r(Nxe," \u2014 "),yB=n(Nxe,"A",{href:!0});var Cgt=s(yB);Tno=r(Cgt,"OwlViTConfig"),Cgt.forEach(t),Mno=r(Nxe," (OWL-ViT model)"),Nxe.forEach(t),Eno=i(L),Cg=n(L,"LI",{});var qxe=s(Cg);gie=n(qxe,"STRONG",{});var wgt=s(gie);Cno=r(wgt,"pegasus"),wgt.forEach(t),wno=r(qxe," \u2014 "),xB=n(qxe,"A",{href:!0});var Agt=s(xB);Ano=r(Agt,"PegasusConfig"),Agt.forEach(t),Lno=r(qxe," (Pegasus model)"),qxe.forEach(t),yno=i(L),wg=n(L,"LI",{});var jxe=s(wg);hie=n(jxe,"STRONG",{});var Lgt=s(hie);xno=r(Lgt,"perceiver"),Lgt.forEach(t),$no=r(jxe," \u2014 "),$B=n(jxe,"A",{href:!0});var ygt=s($B);kno=r(ygt,"PerceiverConfig"),ygt.forEach(t),Sno=r(jxe," (Perceiver model)"),jxe.forEach(t),Rno=i(L),Ag=n(L,"LI",{});var Dxe=s(Ag);pie=n(Dxe,"STRONG",{});var xgt=s(pie);Pno=r(xgt,"plbart"),xgt.forEach(t),Bno=r(Dxe," \u2014 "),kB=n(Dxe,"A",{href:!0});var $gt=s(kB);Ino=r($gt,"PLBartConfig"),$gt.forEach(t),Nno=r(Dxe," (PLBart model)"),Dxe.forEach(t),qno=i(L),Lg=n(L,"LI",{});var Gxe=s(Lg);_ie=n(Gxe,"STRONG",{});var kgt=s(_ie);jno=r(kgt,"poolformer"),kgt.forEach(t),Dno=r(Gxe," \u2014 "),SB=n(Gxe,"A",{href:!0});var Sgt=s(SB);Gno=r(Sgt,"PoolFormerConfig"),Sgt.forEach(t),Ono=r(Gxe," (PoolFormer model)"),Gxe.forEach(t),Vno=i(L),yg=n(L,"LI",{});var Oxe=s(yg);uie=n(Oxe,"STRONG",{});var Rgt=s(uie);Xno=r(Rgt,"prophetnet"),Rgt.forEach(t),zno=r(Oxe," \u2014 "),RB=n(Oxe,"A",{href:!0});var Pgt=s(RB);Wno=r(Pgt,"ProphetNetConfig"),Pgt.forEach(t),Qno=r(Oxe," (ProphetNet model)"),Oxe.forEach(t),Uno=i(L),xg=n(L,"LI",{});var Vxe=s(xg);bie=n(Vxe,"STRONG",{});var Bgt=s(bie);Hno=r(Bgt,"qdqbert"),Bgt.forEach(t),Jno=r(Vxe," \u2014 "),PB=n(Vxe,"A",{href:!0});var Igt=s(PB);Yno=r(Igt,"QDQBertConfig"),Igt.forEach(t),Kno=r(Vxe," (QDQBert model)"),Vxe.forEach(t),Zno=i(L),$g=n(L,"LI",{});var Xxe=s($g);vie=n(Xxe,"STRONG",{});var Ngt=s(vie);eso=r(Ngt,"rag"),Ngt.forEach(t),oso=r(Xxe," \u2014 "),BB=n(Xxe,"A",{href:!0});var qgt=s(BB);rso=r(qgt,"RagConfig"),qgt.forEach(t),tso=r(Xxe," (RAG model)"),Xxe.forEach(t),aso=i(L),kg=n(L,"LI",{});var zxe=s(kg);Fie=n(zxe,"STRONG",{});var jgt=s(Fie);nso=r(jgt,"realm"),jgt.forEach(t),sso=r(zxe," \u2014 "),IB=n(zxe,"A",{href:!0});var Dgt=s(IB);lso=r(Dgt,"RealmConfig"),Dgt.forEach(t),iso=r(zxe," (REALM model)"),zxe.forEach(t),dso=i(L),Sg=n(L,"LI",{});var Wxe=s(Sg);Tie=n(Wxe,"STRONG",{});var Ggt=s(Tie);cso=r(Ggt,"reformer"),Ggt.forEach(t),fso=r(Wxe," \u2014 "),NB=n(Wxe,"A",{href:!0});var Ogt=s(NB);mso=r(Ogt,"ReformerConfig"),Ogt.forEach(t),gso=r(Wxe," (Reformer model)"),Wxe.forEach(t),hso=i(L),Rg=n(L,"LI",{});var Qxe=s(Rg);Mie=n(Qxe,"STRONG",{});var Vgt=s(Mie);pso=r(Vgt,"regnet"),Vgt.forEach(t),_so=r(Qxe," \u2014 "),qB=n(Qxe,"A",{href:!0});var Xgt=s(qB);uso=r(Xgt,"RegNetConfig"),Xgt.forEach(t),bso=r(Qxe," (RegNet model)"),Qxe.forEach(t),vso=i(L),Pg=n(L,"LI",{});var Uxe=s(Pg);Eie=n(Uxe,"STRONG",{});var zgt=s(Eie);Fso=r(zgt,"rembert"),zgt.forEach(t),Tso=r(Uxe," \u2014 "),jB=n(Uxe,"A",{href:!0});var Wgt=s(jB);Mso=r(Wgt,"RemBertConfig"),Wgt.forEach(t),Eso=r(Uxe," (RemBERT model)"),Uxe.forEach(t),Cso=i(L),Bg=n(L,"LI",{});var Hxe=s(Bg);Cie=n(Hxe,"STRONG",{});var Qgt=s(Cie);wso=r(Qgt,"resnet"),Qgt.forEach(t),Aso=r(Hxe," \u2014 "),DB=n(Hxe,"A",{href:!0});var Ugt=s(DB);Lso=r(Ugt,"ResNetConfig"),Ugt.forEach(t),yso=r(Hxe," (ResNet model)"),Hxe.forEach(t),xso=i(L),Ig=n(L,"LI",{});var Jxe=s(Ig);wie=n(Jxe,"STRONG",{});var Hgt=s(wie);$so=r(Hgt,"retribert"),Hgt.forEach(t),kso=r(Jxe," \u2014 "),GB=n(Jxe,"A",{href:!0});var Jgt=s(GB);Sso=r(Jgt,"RetriBertConfig"),Jgt.forEach(t),Rso=r(Jxe," (RetriBERT model)"),Jxe.forEach(t),Pso=i(L),Ng=n(L,"LI",{});var Yxe=s(Ng);Aie=n(Yxe,"STRONG",{});var Ygt=s(Aie);Bso=r(Ygt,"roberta"),Ygt.forEach(t),Iso=r(Yxe," \u2014 "),OB=n(Yxe,"A",{href:!0});var Kgt=s(OB);Nso=r(Kgt,"RobertaConfig"),Kgt.forEach(t),qso=r(Yxe," (RoBERTa model)"),Yxe.forEach(t),jso=i(L),qg=n(L,"LI",{});var Kxe=s(qg);Lie=n(Kxe,"STRONG",{});var Zgt=s(Lie);Dso=r(Zgt,"roformer"),Zgt.forEach(t),Gso=r(Kxe," \u2014 "),VB=n(Kxe,"A",{href:!0});var eht=s(VB);Oso=r(eht,"RoFormerConfig"),eht.forEach(t),Vso=r(Kxe," (RoFormer model)"),Kxe.forEach(t),Xso=i(L),jg=n(L,"LI",{});var Zxe=s(jg);yie=n(Zxe,"STRONG",{});var oht=s(yie);zso=r(oht,"segformer"),oht.forEach(t),Wso=r(Zxe," \u2014 "),XB=n(Zxe,"A",{href:!0});var rht=s(XB);Qso=r(rht,"SegformerConfig"),rht.forEach(t),Uso=r(Zxe," (SegFormer model)"),Zxe.forEach(t),Hso=i(L),Dg=n(L,"LI",{});var e$e=s(Dg);xie=n(e$e,"STRONG",{});var tht=s(xie);Jso=r(tht,"sew"),tht.forEach(t),Yso=r(e$e," \u2014 "),zB=n(e$e,"A",{href:!0});var aht=s(zB);Kso=r(aht,"SEWConfig"),aht.forEach(t),Zso=r(e$e," (SEW model)"),e$e.forEach(t),elo=i(L),Gg=n(L,"LI",{});var o$e=s(Gg);$ie=n(o$e,"STRONG",{});var nht=s($ie);olo=r(nht,"sew-d"),nht.forEach(t),rlo=r(o$e," \u2014 "),WB=n(o$e,"A",{href:!0});var sht=s(WB);tlo=r(sht,"SEWDConfig"),sht.forEach(t),alo=r(o$e," (SEW-D model)"),o$e.forEach(t),nlo=i(L),Og=n(L,"LI",{});var r$e=s(Og);kie=n(r$e,"STRONG",{});var lht=s(kie);slo=r(lht,"speech-encoder-decoder"),lht.forEach(t),llo=r(r$e," \u2014 "),QB=n(r$e,"A",{href:!0});var iht=s(QB);ilo=r(iht,"SpeechEncoderDecoderConfig"),iht.forEach(t),dlo=r(r$e," (Speech Encoder decoder model)"),r$e.forEach(t),clo=i(L),Vg=n(L,"LI",{});var t$e=s(Vg);Sie=n(t$e,"STRONG",{});var dht=s(Sie);flo=r(dht,"speech_to_text"),dht.forEach(t),mlo=r(t$e," \u2014 "),UB=n(t$e,"A",{href:!0});var cht=s(UB);glo=r(cht,"Speech2TextConfig"),cht.forEach(t),hlo=r(t$e," (Speech2Text model)"),t$e.forEach(t),plo=i(L),Xg=n(L,"LI",{});var a$e=s(Xg);Rie=n(a$e,"STRONG",{});var fht=s(Rie);_lo=r(fht,"speech_to_text_2"),fht.forEach(t),ulo=r(a$e," \u2014 "),HB=n(a$e,"A",{href:!0});var mht=s(HB);blo=r(mht,"Speech2Text2Config"),mht.forEach(t),vlo=r(a$e," (Speech2Text2 model)"),a$e.forEach(t),Flo=i(L),zg=n(L,"LI",{});var n$e=s(zg);Pie=n(n$e,"STRONG",{});var ght=s(Pie);Tlo=r(ght,"splinter"),ght.forEach(t),Mlo=r(n$e," \u2014 "),JB=n(n$e,"A",{href:!0});var hht=s(JB);Elo=r(hht,"SplinterConfig"),hht.forEach(t),Clo=r(n$e," (Splinter model)"),n$e.forEach(t),wlo=i(L),Wg=n(L,"LI",{});var s$e=s(Wg);Bie=n(s$e,"STRONG",{});var pht=s(Bie);Alo=r(pht,"squeezebert"),pht.forEach(t),Llo=r(s$e," \u2014 "),YB=n(s$e,"A",{href:!0});var _ht=s(YB);ylo=r(_ht,"SqueezeBertConfig"),_ht.forEach(t),xlo=r(s$e," (SqueezeBERT model)"),s$e.forEach(t),$lo=i(L),Qg=n(L,"LI",{});var l$e=s(Qg);Iie=n(l$e,"STRONG",{});var uht=s(Iie);klo=r(uht,"swin"),uht.forEach(t),Slo=r(l$e," \u2014 "),KB=n(l$e,"A",{href:!0});var bht=s(KB);Rlo=r(bht,"SwinConfig"),bht.forEach(t),Plo=r(l$e," (Swin Transformer model)"),l$e.forEach(t),Blo=i(L),Ug=n(L,"LI",{});var i$e=s(Ug);Nie=n(i$e,"STRONG",{});var vht=s(Nie);Ilo=r(vht,"swinv2"),vht.forEach(t),Nlo=r(i$e," \u2014 "),ZB=n(i$e,"A",{href:!0});var Fht=s(ZB);qlo=r(Fht,"Swinv2Config"),Fht.forEach(t),jlo=r(i$e," (Swin Transformer V2 model)"),i$e.forEach(t),Dlo=i(L),Hg=n(L,"LI",{});var d$e=s(Hg);qie=n(d$e,"STRONG",{});var Tht=s(qie);Glo=r(Tht,"t5"),Tht.forEach(t),Olo=r(d$e," \u2014 "),eI=n(d$e,"A",{href:!0});var Mht=s(eI);Vlo=r(Mht,"T5Config"),Mht.forEach(t),Xlo=r(d$e," (T5 model)"),d$e.forEach(t),zlo=i(L),Jg=n(L,"LI",{});var c$e=s(Jg);jie=n(c$e,"STRONG",{});var Eht=s(jie);Wlo=r(Eht,"tapas"),Eht.forEach(t),Qlo=r(c$e," \u2014 "),oI=n(c$e,"A",{href:!0});var Cht=s(oI);Ulo=r(Cht,"TapasConfig"),Cht.forEach(t),Hlo=r(c$e," (TAPAS model)"),c$e.forEach(t),Jlo=i(L),Yg=n(L,"LI",{});var f$e=s(Yg);Die=n(f$e,"STRONG",{});var wht=s(Die);Ylo=r(wht,"trajectory_transformer"),wht.forEach(t),Klo=r(f$e," \u2014 "),rI=n(f$e,"A",{href:!0});var Aht=s(rI);Zlo=r(Aht,"TrajectoryTransformerConfig"),Aht.forEach(t),eio=r(f$e," (Trajectory Transformer model)"),f$e.forEach(t),oio=i(L),Kg=n(L,"LI",{});var m$e=s(Kg);Gie=n(m$e,"STRONG",{});var Lht=s(Gie);rio=r(Lht,"transfo-xl"),Lht.forEach(t),tio=r(m$e," \u2014 "),tI=n(m$e,"A",{href:!0});var yht=s(tI);aio=r(yht,"TransfoXLConfig"),yht.forEach(t),nio=r(m$e," (Transformer-XL model)"),m$e.forEach(t),sio=i(L),Zg=n(L,"LI",{});var g$e=s(Zg);Oie=n(g$e,"STRONG",{});var xht=s(Oie);lio=r(xht,"trocr"),xht.forEach(t),iio=r(g$e," \u2014 "),aI=n(g$e,"A",{href:!0});var $ht=s(aI);dio=r($ht,"TrOCRConfig"),$ht.forEach(t),cio=r(g$e," (TrOCR model)"),g$e.forEach(t),fio=i(L),eh=n(L,"LI",{});var h$e=s(eh);Vie=n(h$e,"STRONG",{});var kht=s(Vie);mio=r(kht,"unispeech"),kht.forEach(t),gio=r(h$e," \u2014 "),nI=n(h$e,"A",{href:!0});var Sht=s(nI);hio=r(Sht,"UniSpeechConfig"),Sht.forEach(t),pio=r(h$e," (UniSpeech model)"),h$e.forEach(t),_io=i(L),oh=n(L,"LI",{});var p$e=s(oh);Xie=n(p$e,"STRONG",{});var Rht=s(Xie);uio=r(Rht,"unispeech-sat"),Rht.forEach(t),bio=r(p$e," \u2014 "),sI=n(p$e,"A",{href:!0});var Pht=s(sI);vio=r(Pht,"UniSpeechSatConfig"),Pht.forEach(t),Fio=r(p$e," (UniSpeechSat model)"),p$e.forEach(t),Tio=i(L),rh=n(L,"LI",{});var _$e=s(rh);zie=n(_$e,"STRONG",{});var Bht=s(zie);Mio=r(Bht,"van"),Bht.forEach(t),Eio=r(_$e," \u2014 "),lI=n(_$e,"A",{href:!0});var Iht=s(lI);Cio=r(Iht,"VanConfig"),Iht.forEach(t),wio=r(_$e," (VAN model)"),_$e.forEach(t),Aio=i(L),th=n(L,"LI",{});var u$e=s(th);Wie=n(u$e,"STRONG",{});var Nht=s(Wie);Lio=r(Nht,"videomae"),Nht.forEach(t),yio=r(u$e," \u2014 "),iI=n(u$e,"A",{href:!0});var qht=s(iI);xio=r(qht,"VideoMAEConfig"),qht.forEach(t),$io=r(u$e," (VideoMAE model)"),u$e.forEach(t),kio=i(L),ah=n(L,"LI",{});var b$e=s(ah);Qie=n(b$e,"STRONG",{});var jht=s(Qie);Sio=r(jht,"vilt"),jht.forEach(t),Rio=r(b$e," \u2014 "),dI=n(b$e,"A",{href:!0});var Dht=s(dI);Pio=r(Dht,"ViltConfig"),Dht.forEach(t),Bio=r(b$e," (ViLT model)"),b$e.forEach(t),Iio=i(L),nh=n(L,"LI",{});var v$e=s(nh);Uie=n(v$e,"STRONG",{});var Ght=s(Uie);Nio=r(Ght,"vision-encoder-decoder"),Ght.forEach(t),qio=r(v$e," \u2014 "),cI=n(v$e,"A",{href:!0});var Oht=s(cI);jio=r(Oht,"VisionEncoderDecoderConfig"),Oht.forEach(t),Dio=r(v$e," (Vision Encoder decoder model)"),v$e.forEach(t),Gio=i(L),sh=n(L,"LI",{});var F$e=s(sh);Hie=n(F$e,"STRONG",{});var Vht=s(Hie);Oio=r(Vht,"vision-text-dual-encoder"),Vht.forEach(t),Vio=r(F$e," \u2014 "),fI=n(F$e,"A",{href:!0});var Xht=s(fI);Xio=r(Xht,"VisionTextDualEncoderConfig"),Xht.forEach(t),zio=r(F$e," (VisionTextDualEncoder model)"),F$e.forEach(t),Wio=i(L),lh=n(L,"LI",{});var T$e=s(lh);Jie=n(T$e,"STRONG",{});var zht=s(Jie);Qio=r(zht,"visual_bert"),zht.forEach(t),Uio=r(T$e," \u2014 "),mI=n(T$e,"A",{href:!0});var Wht=s(mI);Hio=r(Wht,"VisualBertConfig"),Wht.forEach(t),Jio=r(T$e," (VisualBERT model)"),T$e.forEach(t),Yio=i(L),ih=n(L,"LI",{});var M$e=s(ih);Yie=n(M$e,"STRONG",{});var Qht=s(Yie);Kio=r(Qht,"vit"),Qht.forEach(t),Zio=r(M$e," \u2014 "),gI=n(M$e,"A",{href:!0});var Uht=s(gI);edo=r(Uht,"ViTConfig"),Uht.forEach(t),odo=r(M$e," (ViT model)"),M$e.forEach(t),rdo=i(L),dh=n(L,"LI",{});var E$e=s(dh);Kie=n(E$e,"STRONG",{});var Hht=s(Kie);tdo=r(Hht,"vit_mae"),Hht.forEach(t),ado=r(E$e," \u2014 "),hI=n(E$e,"A",{href:!0});var Jht=s(hI);ndo=r(Jht,"ViTMAEConfig"),Jht.forEach(t),sdo=r(E$e," (ViTMAE model)"),E$e.forEach(t),ldo=i(L),ch=n(L,"LI",{});var C$e=s(ch);Zie=n(C$e,"STRONG",{});var Yht=s(Zie);ido=r(Yht,"wav2vec2"),Yht.forEach(t),ddo=r(C$e," \u2014 "),pI=n(C$e,"A",{href:!0});var Kht=s(pI);cdo=r(Kht,"Wav2Vec2Config"),Kht.forEach(t),fdo=r(C$e," (Wav2Vec2 model)"),C$e.forEach(t),mdo=i(L),fh=n(L,"LI",{});var w$e=s(fh);ede=n(w$e,"STRONG",{});var Zht=s(ede);gdo=r(Zht,"wav2vec2-conformer"),Zht.forEach(t),hdo=r(w$e," \u2014 "),_I=n(w$e,"A",{href:!0});var ept=s(_I);pdo=r(ept,"Wav2Vec2ConformerConfig"),ept.forEach(t),_do=r(w$e," (Wav2Vec2-Conformer model)"),w$e.forEach(t),udo=i(L),mh=n(L,"LI",{});var A$e=s(mh);ode=n(A$e,"STRONG",{});var opt=s(ode);bdo=r(opt,"wavlm"),opt.forEach(t),vdo=r(A$e," \u2014 "),uI=n(A$e,"A",{href:!0});var rpt=s(uI);Fdo=r(rpt,"WavLMConfig"),rpt.forEach(t),Tdo=r(A$e," (WavLM model)"),A$e.forEach(t),Mdo=i(L),gh=n(L,"LI",{});var L$e=s(gh);rde=n(L$e,"STRONG",{});var tpt=s(rde);Edo=r(tpt,"xglm"),tpt.forEach(t),Cdo=r(L$e," \u2014 "),bI=n(L$e,"A",{href:!0});var apt=s(bI);wdo=r(apt,"XGLMConfig"),apt.forEach(t),Ado=r(L$e," (XGLM model)"),L$e.forEach(t),Ldo=i(L),hh=n(L,"LI",{});var y$e=s(hh);tde=n(y$e,"STRONG",{});var npt=s(tde);ydo=r(npt,"xlm"),npt.forEach(t),xdo=r(y$e," \u2014 "),vI=n(y$e,"A",{href:!0});var spt=s(vI);$do=r(spt,"XLMConfig"),spt.forEach(t),kdo=r(y$e," (XLM model)"),y$e.forEach(t),Sdo=i(L),ph=n(L,"LI",{});var x$e=s(ph);ade=n(x$e,"STRONG",{});var lpt=s(ade);Rdo=r(lpt,"xlm-prophetnet"),lpt.forEach(t),Pdo=r(x$e," \u2014 "),FI=n(x$e,"A",{href:!0});var ipt=s(FI);Bdo=r(ipt,"XLMProphetNetConfig"),ipt.forEach(t),Ido=r(x$e," (XLM-ProphetNet model)"),x$e.forEach(t),Ndo=i(L),_h=n(L,"LI",{});var $$e=s(_h);nde=n($$e,"STRONG",{});var dpt=s(nde);qdo=r(dpt,"xlm-roberta"),dpt.forEach(t),jdo=r($$e," \u2014 "),TI=n($$e,"A",{href:!0});var cpt=s(TI);Ddo=r(cpt,"XLMRobertaConfig"),cpt.forEach(t),Gdo=r($$e," (XLM-RoBERTa model)"),$$e.forEach(t),Odo=i(L),uh=n(L,"LI",{});var k$e=s(uh);sde=n(k$e,"STRONG",{});var fpt=s(sde);Vdo=r(fpt,"xlm-roberta-xl"),fpt.forEach(t),Xdo=r(k$e," \u2014 "),MI=n(k$e,"A",{href:!0});var mpt=s(MI);zdo=r(mpt,"XLMRobertaXLConfig"),mpt.forEach(t),Wdo=r(k$e," (XLM-RoBERTa-XL model)"),k$e.forEach(t),Qdo=i(L),bh=n(L,"LI",{});var S$e=s(bh);lde=n(S$e,"STRONG",{});var gpt=s(lde);Udo=r(gpt,"xlnet"),gpt.forEach(t),Hdo=r(S$e," \u2014 "),EI=n(S$e,"A",{href:!0});var hpt=s(EI);Jdo=r(hpt,"XLNetConfig"),hpt.forEach(t),Ydo=r(S$e," (XLNet model)"),S$e.forEach(t),Kdo=i(L),vh=n(L,"LI",{});var R$e=s(vh);ide=n(R$e,"STRONG",{});var ppt=s(ide);Zdo=r(ppt,"yolos"),ppt.forEach(t),eco=r(R$e," \u2014 "),CI=n(R$e,"A",{href:!0});var _pt=s(CI);oco=r(_pt,"YolosConfig"),_pt.forEach(t),rco=r(R$e," (YOLOS model)"),R$e.forEach(t),tco=i(L),Fh=n(L,"LI",{});var P$e=s(Fh);dde=n(P$e,"STRONG",{});var upt=s(dde);aco=r(upt,"yoso"),upt.forEach(t),nco=r(P$e," \u2014 "),wI=n(P$e,"A",{href:!0});var bpt=s(wI);sco=r(bpt,"YosoConfig"),bpt.forEach(t),lco=r(P$e," (YOSO model)"),P$e.forEach(t),L.forEach(t),ico=i(ct),T(Th.$$.fragment,ct),ct.forEach(t),dco=i(dt),Mh=n(dt,"DIV",{class:!0});var aJe=s(Mh);T(ML.$$.fragment,aJe),cco=i(aJe),cde=n(aJe,"P",{});var vpt=s(cde);fco=r(vpt,"Register a new configuration for this class."),vpt.forEach(t),aJe.forEach(t),dt.forEach(t),oUe=i(f),Ki=n(f,"H2",{class:!0});var nJe=s(Ki);Eh=n(nJe,"A",{id:!0,class:!0,href:!0});var Fpt=s(Eh);fde=n(Fpt,"SPAN",{});var Tpt=s(fde);T(EL.$$.fragment,Tpt),Tpt.forEach(t),Fpt.forEach(t),mco=i(nJe),mde=n(nJe,"SPAN",{});var Mpt=s(mde);gco=r(Mpt,"AutoTokenizer"),Mpt.forEach(t),nJe.forEach(t),rUe=i(f),xo=n(f,"DIV",{class:!0});var cl=s(xo);T(CL.$$.fragment,cl),hco=i(cl),wL=n(cl,"P",{});var sJe=s(wL);pco=r(sJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),AI=n(sJe,"A",{href:!0});var Ept=s(AI);_co=r(Ept,"AutoTokenizer.from_pretrained()"),Ept.forEach(t),uco=r(sJe," class method."),sJe.forEach(t),bco=i(cl),AL=n(cl,"P",{});var lJe=s(AL);vco=r(lJe,"This class cannot be instantiated directly using "),gde=n(lJe,"CODE",{});var Cpt=s(gde);Fco=r(Cpt,"__init__()"),Cpt.forEach(t),Tco=r(lJe," (throws an error)."),lJe.forEach(t),Mco=i(cl),Sr=n(cl,"DIV",{class:!0});var fl=s(Sr);T(LL.$$.fragment,fl),Eco=i(fl),hde=n(fl,"P",{});var wpt=s(hde);Cco=r(wpt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),wpt.forEach(t),wco=i(fl),Ga=n(fl,"P",{});var m6=s(Ga);Aco=r(m6,"The tokenizer class to instantiate is selected based on the "),pde=n(m6,"CODE",{});var Apt=s(pde);Lco=r(Apt,"model_type"),Apt.forEach(t),yco=r(m6,` property of the config object (either
passed as an argument or loaded from `),_de=n(m6,"CODE",{});var Lpt=s(_de);xco=r(Lpt,"pretrained_model_name_or_path"),Lpt.forEach(t),$co=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=n(m6,"CODE",{});var ypt=s(ude);kco=r(ypt,"pretrained_model_name_or_path"),ypt.forEach(t),Sco=r(m6,":"),m6.forEach(t),Rco=i(fl),k=n(fl,"UL",{});var S=s(k);Hn=n(S,"LI",{});var XS=s(Hn);bde=n(XS,"STRONG",{});var xpt=s(bde);Pco=r(xpt,"albert"),xpt.forEach(t),Bco=r(XS," \u2014 "),LI=n(XS,"A",{href:!0});var $pt=s(LI);Ico=r($pt,"AlbertTokenizer"),$pt.forEach(t),Nco=r(XS," or "),yI=n(XS,"A",{href:!0});var kpt=s(yI);qco=r(kpt,"AlbertTokenizerFast"),kpt.forEach(t),jco=r(XS," (ALBERT model)"),XS.forEach(t),Dco=i(S),Jn=n(S,"LI",{});var zS=s(Jn);vde=n(zS,"STRONG",{});var Spt=s(vde);Gco=r(Spt,"bart"),Spt.forEach(t),Oco=r(zS," \u2014 "),xI=n(zS,"A",{href:!0});var Rpt=s(xI);Vco=r(Rpt,"BartTokenizer"),Rpt.forEach(t),Xco=r(zS," or "),$I=n(zS,"A",{href:!0});var Ppt=s($I);zco=r(Ppt,"BartTokenizerFast"),Ppt.forEach(t),Wco=r(zS," (BART model)"),zS.forEach(t),Qco=i(S),Yn=n(S,"LI",{});var WS=s(Yn);Fde=n(WS,"STRONG",{});var Bpt=s(Fde);Uco=r(Bpt,"barthez"),Bpt.forEach(t),Hco=r(WS," \u2014 "),kI=n(WS,"A",{href:!0});var Ipt=s(kI);Jco=r(Ipt,"BarthezTokenizer"),Ipt.forEach(t),Yco=r(WS," or "),SI=n(WS,"A",{href:!0});var Npt=s(SI);Kco=r(Npt,"BarthezTokenizerFast"),Npt.forEach(t),Zco=r(WS," (BARThez model)"),WS.forEach(t),efo=i(S),Ch=n(S,"LI",{});var B$e=s(Ch);Tde=n(B$e,"STRONG",{});var qpt=s(Tde);ofo=r(qpt,"bartpho"),qpt.forEach(t),rfo=r(B$e," \u2014 "),RI=n(B$e,"A",{href:!0});var jpt=s(RI);tfo=r(jpt,"BartphoTokenizer"),jpt.forEach(t),afo=r(B$e," (BARTpho model)"),B$e.forEach(t),nfo=i(S),Kn=n(S,"LI",{});var QS=s(Kn);Mde=n(QS,"STRONG",{});var Dpt=s(Mde);sfo=r(Dpt,"bert"),Dpt.forEach(t),lfo=r(QS," \u2014 "),PI=n(QS,"A",{href:!0});var Gpt=s(PI);ifo=r(Gpt,"BertTokenizer"),Gpt.forEach(t),dfo=r(QS," or "),BI=n(QS,"A",{href:!0});var Opt=s(BI);cfo=r(Opt,"BertTokenizerFast"),Opt.forEach(t),ffo=r(QS," (BERT model)"),QS.forEach(t),mfo=i(S),wh=n(S,"LI",{});var I$e=s(wh);Ede=n(I$e,"STRONG",{});var Vpt=s(Ede);gfo=r(Vpt,"bert-generation"),Vpt.forEach(t),hfo=r(I$e," \u2014 "),II=n(I$e,"A",{href:!0});var Xpt=s(II);pfo=r(Xpt,"BertGenerationTokenizer"),Xpt.forEach(t),_fo=r(I$e," (Bert Generation model)"),I$e.forEach(t),ufo=i(S),Ah=n(S,"LI",{});var N$e=s(Ah);Cde=n(N$e,"STRONG",{});var zpt=s(Cde);bfo=r(zpt,"bert-japanese"),zpt.forEach(t),vfo=r(N$e," \u2014 "),NI=n(N$e,"A",{href:!0});var Wpt=s(NI);Ffo=r(Wpt,"BertJapaneseTokenizer"),Wpt.forEach(t),Tfo=r(N$e," (BertJapanese model)"),N$e.forEach(t),Mfo=i(S),Lh=n(S,"LI",{});var q$e=s(Lh);wde=n(q$e,"STRONG",{});var Qpt=s(wde);Efo=r(Qpt,"bertweet"),Qpt.forEach(t),Cfo=r(q$e," \u2014 "),qI=n(q$e,"A",{href:!0});var Upt=s(qI);wfo=r(Upt,"BertweetTokenizer"),Upt.forEach(t),Afo=r(q$e," (BERTweet model)"),q$e.forEach(t),Lfo=i(S),Zn=n(S,"LI",{});var US=s(Zn);Ade=n(US,"STRONG",{});var Hpt=s(Ade);yfo=r(Hpt,"big_bird"),Hpt.forEach(t),xfo=r(US," \u2014 "),jI=n(US,"A",{href:!0});var Jpt=s(jI);$fo=r(Jpt,"BigBirdTokenizer"),Jpt.forEach(t),kfo=r(US," or "),DI=n(US,"A",{href:!0});var Ypt=s(DI);Sfo=r(Ypt,"BigBirdTokenizerFast"),Ypt.forEach(t),Rfo=r(US," (BigBird model)"),US.forEach(t),Pfo=i(S),es=n(S,"LI",{});var HS=s(es);Lde=n(HS,"STRONG",{});var Kpt=s(Lde);Bfo=r(Kpt,"bigbird_pegasus"),Kpt.forEach(t),Ifo=r(HS," \u2014 "),GI=n(HS,"A",{href:!0});var Zpt=s(GI);Nfo=r(Zpt,"PegasusTokenizer"),Zpt.forEach(t),qfo=r(HS," or "),OI=n(HS,"A",{href:!0});var e_t=s(OI);jfo=r(e_t,"PegasusTokenizerFast"),e_t.forEach(t),Dfo=r(HS," (BigBird-Pegasus model)"),HS.forEach(t),Gfo=i(S),os=n(S,"LI",{});var JS=s(os);yde=n(JS,"STRONG",{});var o_t=s(yde);Ofo=r(o_t,"blenderbot"),o_t.forEach(t),Vfo=r(JS," \u2014 "),VI=n(JS,"A",{href:!0});var r_t=s(VI);Xfo=r(r_t,"BlenderbotTokenizer"),r_t.forEach(t),zfo=r(JS," or "),XI=n(JS,"A",{href:!0});var t_t=s(XI);Wfo=r(t_t,"BlenderbotTokenizerFast"),t_t.forEach(t),Qfo=r(JS," (Blenderbot model)"),JS.forEach(t),Ufo=i(S),yh=n(S,"LI",{});var j$e=s(yh);xde=n(j$e,"STRONG",{});var a_t=s(xde);Hfo=r(a_t,"blenderbot-small"),a_t.forEach(t),Jfo=r(j$e," \u2014 "),zI=n(j$e,"A",{href:!0});var n_t=s(zI);Yfo=r(n_t,"BlenderbotSmallTokenizer"),n_t.forEach(t),Kfo=r(j$e," (BlenderbotSmall model)"),j$e.forEach(t),Zfo=i(S),xh=n(S,"LI",{});var D$e=s(xh);$de=n(D$e,"STRONG",{});var s_t=s($de);emo=r(s_t,"bloom"),s_t.forEach(t),omo=r(D$e," \u2014 "),WI=n(D$e,"A",{href:!0});var l_t=s(WI);rmo=r(l_t,"BloomTokenizerFast"),l_t.forEach(t),tmo=r(D$e," (BLOOM model)"),D$e.forEach(t),amo=i(S),$h=n(S,"LI",{});var G$e=s($h);kde=n(G$e,"STRONG",{});var i_t=s(kde);nmo=r(i_t,"byt5"),i_t.forEach(t),smo=r(G$e," \u2014 "),QI=n(G$e,"A",{href:!0});var d_t=s(QI);lmo=r(d_t,"ByT5Tokenizer"),d_t.forEach(t),imo=r(G$e," (ByT5 model)"),G$e.forEach(t),dmo=i(S),rs=n(S,"LI",{});var YS=s(rs);Sde=n(YS,"STRONG",{});var c_t=s(Sde);cmo=r(c_t,"camembert"),c_t.forEach(t),fmo=r(YS," \u2014 "),UI=n(YS,"A",{href:!0});var f_t=s(UI);mmo=r(f_t,"CamembertTokenizer"),f_t.forEach(t),gmo=r(YS," or "),HI=n(YS,"A",{href:!0});var m_t=s(HI);hmo=r(m_t,"CamembertTokenizerFast"),m_t.forEach(t),pmo=r(YS," (CamemBERT model)"),YS.forEach(t),_mo=i(S),kh=n(S,"LI",{});var O$e=s(kh);Rde=n(O$e,"STRONG",{});var g_t=s(Rde);umo=r(g_t,"canine"),g_t.forEach(t),bmo=r(O$e," \u2014 "),JI=n(O$e,"A",{href:!0});var h_t=s(JI);vmo=r(h_t,"CanineTokenizer"),h_t.forEach(t),Fmo=r(O$e," (CANINE model)"),O$e.forEach(t),Tmo=i(S),ts=n(S,"LI",{});var KS=s(ts);Pde=n(KS,"STRONG",{});var p_t=s(Pde);Mmo=r(p_t,"clip"),p_t.forEach(t),Emo=r(KS," \u2014 "),YI=n(KS,"A",{href:!0});var __t=s(YI);Cmo=r(__t,"CLIPTokenizer"),__t.forEach(t),wmo=r(KS," or "),KI=n(KS,"A",{href:!0});var u_t=s(KI);Amo=r(u_t,"CLIPTokenizerFast"),u_t.forEach(t),Lmo=r(KS," (CLIP model)"),KS.forEach(t),ymo=i(S),as=n(S,"LI",{});var ZS=s(as);Bde=n(ZS,"STRONG",{});var b_t=s(Bde);xmo=r(b_t,"codegen"),b_t.forEach(t),$mo=r(ZS," \u2014 "),ZI=n(ZS,"A",{href:!0});var v_t=s(ZI);kmo=r(v_t,"CodeGenTokenizer"),v_t.forEach(t),Smo=r(ZS," or "),eN=n(ZS,"A",{href:!0});var F_t=s(eN);Rmo=r(F_t,"CodeGenTokenizerFast"),F_t.forEach(t),Pmo=r(ZS," (CodeGen model)"),ZS.forEach(t),Bmo=i(S),ns=n(S,"LI",{});var eR=s(ns);Ide=n(eR,"STRONG",{});var T_t=s(Ide);Imo=r(T_t,"convbert"),T_t.forEach(t),Nmo=r(eR," \u2014 "),oN=n(eR,"A",{href:!0});var M_t=s(oN);qmo=r(M_t,"ConvBertTokenizer"),M_t.forEach(t),jmo=r(eR," or "),rN=n(eR,"A",{href:!0});var E_t=s(rN);Dmo=r(E_t,"ConvBertTokenizerFast"),E_t.forEach(t),Gmo=r(eR," (ConvBERT model)"),eR.forEach(t),Omo=i(S),ss=n(S,"LI",{});var oR=s(ss);Nde=n(oR,"STRONG",{});var C_t=s(Nde);Vmo=r(C_t,"cpm"),C_t.forEach(t),Xmo=r(oR," \u2014 "),tN=n(oR,"A",{href:!0});var w_t=s(tN);zmo=r(w_t,"CpmTokenizer"),w_t.forEach(t),Wmo=r(oR," or "),aN=n(oR,"A",{href:!0});var A_t=s(aN);Qmo=r(A_t,"CpmTokenizerFast"),A_t.forEach(t),Umo=r(oR," (CPM model)"),oR.forEach(t),Hmo=i(S),Sh=n(S,"LI",{});var V$e=s(Sh);qde=n(V$e,"STRONG",{});var L_t=s(qde);Jmo=r(L_t,"ctrl"),L_t.forEach(t),Ymo=r(V$e," \u2014 "),nN=n(V$e,"A",{href:!0});var y_t=s(nN);Kmo=r(y_t,"CTRLTokenizer"),y_t.forEach(t),Zmo=r(V$e," (CTRL model)"),V$e.forEach(t),ego=i(S),ls=n(S,"LI",{});var rR=s(ls);jde=n(rR,"STRONG",{});var x_t=s(jde);ogo=r(x_t,"data2vec-text"),x_t.forEach(t),rgo=r(rR," \u2014 "),sN=n(rR,"A",{href:!0});var $_t=s(sN);tgo=r($_t,"RobertaTokenizer"),$_t.forEach(t),ago=r(rR," or "),lN=n(rR,"A",{href:!0});var k_t=s(lN);ngo=r(k_t,"RobertaTokenizerFast"),k_t.forEach(t),sgo=r(rR," (Data2VecText model)"),rR.forEach(t),lgo=i(S),is=n(S,"LI",{});var tR=s(is);Dde=n(tR,"STRONG",{});var S_t=s(Dde);igo=r(S_t,"deberta"),S_t.forEach(t),dgo=r(tR," \u2014 "),iN=n(tR,"A",{href:!0});var R_t=s(iN);cgo=r(R_t,"DebertaTokenizer"),R_t.forEach(t),fgo=r(tR," or "),dN=n(tR,"A",{href:!0});var P_t=s(dN);mgo=r(P_t,"DebertaTokenizerFast"),P_t.forEach(t),ggo=r(tR," (DeBERTa model)"),tR.forEach(t),hgo=i(S),ds=n(S,"LI",{});var aR=s(ds);Gde=n(aR,"STRONG",{});var B_t=s(Gde);pgo=r(B_t,"deberta-v2"),B_t.forEach(t),_go=r(aR," \u2014 "),cN=n(aR,"A",{href:!0});var I_t=s(cN);ugo=r(I_t,"DebertaV2Tokenizer"),I_t.forEach(t),bgo=r(aR," or "),fN=n(aR,"A",{href:!0});var N_t=s(fN);vgo=r(N_t,"DebertaV2TokenizerFast"),N_t.forEach(t),Fgo=r(aR," (DeBERTa-v2 model)"),aR.forEach(t),Tgo=i(S),cs=n(S,"LI",{});var nR=s(cs);Ode=n(nR,"STRONG",{});var q_t=s(Ode);Mgo=r(q_t,"distilbert"),q_t.forEach(t),Ego=r(nR," \u2014 "),mN=n(nR,"A",{href:!0});var j_t=s(mN);Cgo=r(j_t,"DistilBertTokenizer"),j_t.forEach(t),wgo=r(nR," or "),gN=n(nR,"A",{href:!0});var D_t=s(gN);Ago=r(D_t,"DistilBertTokenizerFast"),D_t.forEach(t),Lgo=r(nR," (DistilBERT model)"),nR.forEach(t),ygo=i(S),fs=n(S,"LI",{});var sR=s(fs);Vde=n(sR,"STRONG",{});var G_t=s(Vde);xgo=r(G_t,"dpr"),G_t.forEach(t),$go=r(sR," \u2014 "),hN=n(sR,"A",{href:!0});var O_t=s(hN);kgo=r(O_t,"DPRQuestionEncoderTokenizer"),O_t.forEach(t),Sgo=r(sR," or "),pN=n(sR,"A",{href:!0});var V_t=s(pN);Rgo=r(V_t,"DPRQuestionEncoderTokenizerFast"),V_t.forEach(t),Pgo=r(sR," (DPR model)"),sR.forEach(t),Bgo=i(S),ms=n(S,"LI",{});var lR=s(ms);Xde=n(lR,"STRONG",{});var X_t=s(Xde);Igo=r(X_t,"electra"),X_t.forEach(t),Ngo=r(lR," \u2014 "),_N=n(lR,"A",{href:!0});var z_t=s(_N);qgo=r(z_t,"ElectraTokenizer"),z_t.forEach(t),jgo=r(lR," or "),uN=n(lR,"A",{href:!0});var W_t=s(uN);Dgo=r(W_t,"ElectraTokenizerFast"),W_t.forEach(t),Ggo=r(lR," (ELECTRA model)"),lR.forEach(t),Ogo=i(S),Rh=n(S,"LI",{});var X$e=s(Rh);zde=n(X$e,"STRONG",{});var Q_t=s(zde);Vgo=r(Q_t,"flaubert"),Q_t.forEach(t),Xgo=r(X$e," \u2014 "),bN=n(X$e,"A",{href:!0});var U_t=s(bN);zgo=r(U_t,"FlaubertTokenizer"),U_t.forEach(t),Wgo=r(X$e," (FlauBERT model)"),X$e.forEach(t),Qgo=i(S),gs=n(S,"LI",{});var iR=s(gs);Wde=n(iR,"STRONG",{});var H_t=s(Wde);Ugo=r(H_t,"fnet"),H_t.forEach(t),Hgo=r(iR," \u2014 "),vN=n(iR,"A",{href:!0});var J_t=s(vN);Jgo=r(J_t,"FNetTokenizer"),J_t.forEach(t),Ygo=r(iR," or "),FN=n(iR,"A",{href:!0});var Y_t=s(FN);Kgo=r(Y_t,"FNetTokenizerFast"),Y_t.forEach(t),Zgo=r(iR," (FNet model)"),iR.forEach(t),eho=i(S),Ph=n(S,"LI",{});var z$e=s(Ph);Qde=n(z$e,"STRONG",{});var K_t=s(Qde);oho=r(K_t,"fsmt"),K_t.forEach(t),rho=r(z$e," \u2014 "),TN=n(z$e,"A",{href:!0});var Z_t=s(TN);tho=r(Z_t,"FSMTTokenizer"),Z_t.forEach(t),aho=r(z$e," (FairSeq Machine-Translation model)"),z$e.forEach(t),nho=i(S),hs=n(S,"LI",{});var dR=s(hs);Ude=n(dR,"STRONG",{});var eut=s(Ude);sho=r(eut,"funnel"),eut.forEach(t),lho=r(dR," \u2014 "),MN=n(dR,"A",{href:!0});var out=s(MN);iho=r(out,"FunnelTokenizer"),out.forEach(t),dho=r(dR," or "),EN=n(dR,"A",{href:!0});var rut=s(EN);cho=r(rut,"FunnelTokenizerFast"),rut.forEach(t),fho=r(dR," (Funnel Transformer model)"),dR.forEach(t),mho=i(S),ps=n(S,"LI",{});var cR=s(ps);Hde=n(cR,"STRONG",{});var tut=s(Hde);gho=r(tut,"gpt2"),tut.forEach(t),hho=r(cR," \u2014 "),CN=n(cR,"A",{href:!0});var aut=s(CN);pho=r(aut,"GPT2Tokenizer"),aut.forEach(t),_ho=r(cR," or "),wN=n(cR,"A",{href:!0});var nut=s(wN);uho=r(nut,"GPT2TokenizerFast"),nut.forEach(t),bho=r(cR," (OpenAI GPT-2 model)"),cR.forEach(t),vho=i(S),_s=n(S,"LI",{});var fR=s(_s);Jde=n(fR,"STRONG",{});var sut=s(Jde);Fho=r(sut,"gpt_neo"),sut.forEach(t),Tho=r(fR," \u2014 "),AN=n(fR,"A",{href:!0});var lut=s(AN);Mho=r(lut,"GPT2Tokenizer"),lut.forEach(t),Eho=r(fR," or "),LN=n(fR,"A",{href:!0});var iut=s(LN);Cho=r(iut,"GPT2TokenizerFast"),iut.forEach(t),who=r(fR," (GPT Neo model)"),fR.forEach(t),Aho=i(S),Bh=n(S,"LI",{});var W$e=s(Bh);Yde=n(W$e,"STRONG",{});var dut=s(Yde);Lho=r(dut,"gpt_neox"),dut.forEach(t),yho=r(W$e," \u2014 "),yN=n(W$e,"A",{href:!0});var cut=s(yN);xho=r(cut,"GPTNeoXTokenizerFast"),cut.forEach(t),$ho=r(W$e," (GPT NeoX model)"),W$e.forEach(t),kho=i(S),us=n(S,"LI",{});var mR=s(us);Kde=n(mR,"STRONG",{});var fut=s(Kde);Sho=r(fut,"gptj"),fut.forEach(t),Rho=r(mR," \u2014 "),xN=n(mR,"A",{href:!0});var mut=s(xN);Pho=r(mut,"GPT2Tokenizer"),mut.forEach(t),Bho=r(mR," or "),$N=n(mR,"A",{href:!0});var gut=s($N);Iho=r(gut,"GPT2TokenizerFast"),gut.forEach(t),Nho=r(mR," (GPT-J model)"),mR.forEach(t),qho=i(S),bs=n(S,"LI",{});var gR=s(bs);Zde=n(gR,"STRONG",{});var hut=s(Zde);jho=r(hut,"groupvit"),hut.forEach(t),Dho=r(gR," \u2014 "),kN=n(gR,"A",{href:!0});var put=s(kN);Gho=r(put,"CLIPTokenizer"),put.forEach(t),Oho=r(gR," or "),SN=n(gR,"A",{href:!0});var _ut=s(SN);Vho=r(_ut,"CLIPTokenizerFast"),_ut.forEach(t),Xho=r(gR," (GroupViT model)"),gR.forEach(t),zho=i(S),vs=n(S,"LI",{});var hR=s(vs);ece=n(hR,"STRONG",{});var uut=s(ece);Who=r(uut,"herbert"),uut.forEach(t),Qho=r(hR," \u2014 "),RN=n(hR,"A",{href:!0});var but=s(RN);Uho=r(but,"HerbertTokenizer"),but.forEach(t),Hho=r(hR," or "),PN=n(hR,"A",{href:!0});var vut=s(PN);Jho=r(vut,"HerbertTokenizerFast"),vut.forEach(t),Yho=r(hR," (HerBERT model)"),hR.forEach(t),Kho=i(S),Ih=n(S,"LI",{});var Q$e=s(Ih);oce=n(Q$e,"STRONG",{});var Fut=s(oce);Zho=r(Fut,"hubert"),Fut.forEach(t),epo=r(Q$e," \u2014 "),BN=n(Q$e,"A",{href:!0});var Tut=s(BN);opo=r(Tut,"Wav2Vec2CTCTokenizer"),Tut.forEach(t),rpo=r(Q$e," (Hubert model)"),Q$e.forEach(t),tpo=i(S),Fs=n(S,"LI",{});var pR=s(Fs);rce=n(pR,"STRONG",{});var Mut=s(rce);apo=r(Mut,"ibert"),Mut.forEach(t),npo=r(pR," \u2014 "),IN=n(pR,"A",{href:!0});var Eut=s(IN);spo=r(Eut,"RobertaTokenizer"),Eut.forEach(t),lpo=r(pR," or "),NN=n(pR,"A",{href:!0});var Cut=s(NN);ipo=r(Cut,"RobertaTokenizerFast"),Cut.forEach(t),dpo=r(pR," (I-BERT model)"),pR.forEach(t),cpo=i(S),Ts=n(S,"LI",{});var _R=s(Ts);tce=n(_R,"STRONG",{});var wut=s(tce);fpo=r(wut,"layoutlm"),wut.forEach(t),mpo=r(_R," \u2014 "),qN=n(_R,"A",{href:!0});var Aut=s(qN);gpo=r(Aut,"LayoutLMTokenizer"),Aut.forEach(t),hpo=r(_R," or "),jN=n(_R,"A",{href:!0});var Lut=s(jN);ppo=r(Lut,"LayoutLMTokenizerFast"),Lut.forEach(t),_po=r(_R," (LayoutLM model)"),_R.forEach(t),upo=i(S),Ms=n(S,"LI",{});var uR=s(Ms);ace=n(uR,"STRONG",{});var yut=s(ace);bpo=r(yut,"layoutlmv2"),yut.forEach(t),vpo=r(uR," \u2014 "),DN=n(uR,"A",{href:!0});var xut=s(DN);Fpo=r(xut,"LayoutLMv2Tokenizer"),xut.forEach(t),Tpo=r(uR," or "),GN=n(uR,"A",{href:!0});var $ut=s(GN);Mpo=r($ut,"LayoutLMv2TokenizerFast"),$ut.forEach(t),Epo=r(uR," (LayoutLMv2 model)"),uR.forEach(t),Cpo=i(S),Es=n(S,"LI",{});var bR=s(Es);nce=n(bR,"STRONG",{});var kut=s(nce);wpo=r(kut,"layoutlmv3"),kut.forEach(t),Apo=r(bR," \u2014 "),ON=n(bR,"A",{href:!0});var Sut=s(ON);Lpo=r(Sut,"LayoutLMv3Tokenizer"),Sut.forEach(t),ypo=r(bR," or "),VN=n(bR,"A",{href:!0});var Rut=s(VN);xpo=r(Rut,"LayoutLMv3TokenizerFast"),Rut.forEach(t),$po=r(bR," (LayoutLMv3 model)"),bR.forEach(t),kpo=i(S),Cs=n(S,"LI",{});var vR=s(Cs);sce=n(vR,"STRONG",{});var Put=s(sce);Spo=r(Put,"layoutxlm"),Put.forEach(t),Rpo=r(vR," \u2014 "),XN=n(vR,"A",{href:!0});var But=s(XN);Ppo=r(But,"LayoutXLMTokenizer"),But.forEach(t),Bpo=r(vR," or "),zN=n(vR,"A",{href:!0});var Iut=s(zN);Ipo=r(Iut,"LayoutXLMTokenizerFast"),Iut.forEach(t),Npo=r(vR," (LayoutXLM model)"),vR.forEach(t),qpo=i(S),ws=n(S,"LI",{});var FR=s(ws);lce=n(FR,"STRONG",{});var Nut=s(lce);jpo=r(Nut,"led"),Nut.forEach(t),Dpo=r(FR," \u2014 "),WN=n(FR,"A",{href:!0});var qut=s(WN);Gpo=r(qut,"LEDTokenizer"),qut.forEach(t),Opo=r(FR," or "),QN=n(FR,"A",{href:!0});var jut=s(QN);Vpo=r(jut,"LEDTokenizerFast"),jut.forEach(t),Xpo=r(FR," (LED model)"),FR.forEach(t),zpo=i(S),As=n(S,"LI",{});var TR=s(As);ice=n(TR,"STRONG",{});var Dut=s(ice);Wpo=r(Dut,"longformer"),Dut.forEach(t),Qpo=r(TR," \u2014 "),UN=n(TR,"A",{href:!0});var Gut=s(UN);Upo=r(Gut,"LongformerTokenizer"),Gut.forEach(t),Hpo=r(TR," or "),HN=n(TR,"A",{href:!0});var Out=s(HN);Jpo=r(Out,"LongformerTokenizerFast"),Out.forEach(t),Ypo=r(TR," (Longformer model)"),TR.forEach(t),Kpo=i(S),Ls=n(S,"LI",{});var MR=s(Ls);dce=n(MR,"STRONG",{});var Vut=s(dce);Zpo=r(Vut,"longt5"),Vut.forEach(t),e_o=r(MR," \u2014 "),JN=n(MR,"A",{href:!0});var Xut=s(JN);o_o=r(Xut,"T5Tokenizer"),Xut.forEach(t),r_o=r(MR," or "),YN=n(MR,"A",{href:!0});var zut=s(YN);t_o=r(zut,"T5TokenizerFast"),zut.forEach(t),a_o=r(MR," (LongT5 model)"),MR.forEach(t),n_o=i(S),Nh=n(S,"LI",{});var U$e=s(Nh);cce=n(U$e,"STRONG",{});var Wut=s(cce);s_o=r(Wut,"luke"),Wut.forEach(t),l_o=r(U$e," \u2014 "),KN=n(U$e,"A",{href:!0});var Qut=s(KN);i_o=r(Qut,"LukeTokenizer"),Qut.forEach(t),d_o=r(U$e," (LUKE model)"),U$e.forEach(t),c_o=i(S),ys=n(S,"LI",{});var ER=s(ys);fce=n(ER,"STRONG",{});var Uut=s(fce);f_o=r(Uut,"lxmert"),Uut.forEach(t),m_o=r(ER," \u2014 "),ZN=n(ER,"A",{href:!0});var Hut=s(ZN);g_o=r(Hut,"LxmertTokenizer"),Hut.forEach(t),h_o=r(ER," or "),eq=n(ER,"A",{href:!0});var Jut=s(eq);p_o=r(Jut,"LxmertTokenizerFast"),Jut.forEach(t),__o=r(ER," (LXMERT model)"),ER.forEach(t),u_o=i(S),qh=n(S,"LI",{});var H$e=s(qh);mce=n(H$e,"STRONG",{});var Yut=s(mce);b_o=r(Yut,"m2m_100"),Yut.forEach(t),v_o=r(H$e," \u2014 "),oq=n(H$e,"A",{href:!0});var Kut=s(oq);F_o=r(Kut,"M2M100Tokenizer"),Kut.forEach(t),T_o=r(H$e," (M2M100 model)"),H$e.forEach(t),M_o=i(S),jh=n(S,"LI",{});var J$e=s(jh);gce=n(J$e,"STRONG",{});var Zut=s(gce);E_o=r(Zut,"marian"),Zut.forEach(t),C_o=r(J$e," \u2014 "),rq=n(J$e,"A",{href:!0});var e1t=s(rq);w_o=r(e1t,"MarianTokenizer"),e1t.forEach(t),A_o=r(J$e," (Marian model)"),J$e.forEach(t),L_o=i(S),xs=n(S,"LI",{});var CR=s(xs);hce=n(CR,"STRONG",{});var o1t=s(hce);y_o=r(o1t,"mbart"),o1t.forEach(t),x_o=r(CR," \u2014 "),tq=n(CR,"A",{href:!0});var r1t=s(tq);$_o=r(r1t,"MBartTokenizer"),r1t.forEach(t),k_o=r(CR," or "),aq=n(CR,"A",{href:!0});var t1t=s(aq);S_o=r(t1t,"MBartTokenizerFast"),t1t.forEach(t),R_o=r(CR," (mBART model)"),CR.forEach(t),P_o=i(S),$s=n(S,"LI",{});var wR=s($s);pce=n(wR,"STRONG",{});var a1t=s(pce);B_o=r(a1t,"mbart50"),a1t.forEach(t),I_o=r(wR," \u2014 "),nq=n(wR,"A",{href:!0});var n1t=s(nq);N_o=r(n1t,"MBart50Tokenizer"),n1t.forEach(t),q_o=r(wR," or "),sq=n(wR,"A",{href:!0});var s1t=s(sq);j_o=r(s1t,"MBart50TokenizerFast"),s1t.forEach(t),D_o=r(wR," (mBART-50 model)"),wR.forEach(t),G_o=i(S),ks=n(S,"LI",{});var AR=s(ks);_ce=n(AR,"STRONG",{});var l1t=s(_ce);O_o=r(l1t,"megatron-bert"),l1t.forEach(t),V_o=r(AR," \u2014 "),lq=n(AR,"A",{href:!0});var i1t=s(lq);X_o=r(i1t,"BertTokenizer"),i1t.forEach(t),z_o=r(AR," or "),iq=n(AR,"A",{href:!0});var d1t=s(iq);W_o=r(d1t,"BertTokenizerFast"),d1t.forEach(t),Q_o=r(AR," (Megatron-BERT model)"),AR.forEach(t),U_o=i(S),Dh=n(S,"LI",{});var Y$e=s(Dh);uce=n(Y$e,"STRONG",{});var c1t=s(uce);H_o=r(c1t,"mluke"),c1t.forEach(t),J_o=r(Y$e," \u2014 "),dq=n(Y$e,"A",{href:!0});var f1t=s(dq);Y_o=r(f1t,"MLukeTokenizer"),f1t.forEach(t),K_o=r(Y$e," (mLUKE model)"),Y$e.forEach(t),Z_o=i(S),Ss=n(S,"LI",{});var LR=s(Ss);bce=n(LR,"STRONG",{});var m1t=s(bce);euo=r(m1t,"mobilebert"),m1t.forEach(t),ouo=r(LR," \u2014 "),cq=n(LR,"A",{href:!0});var g1t=s(cq);ruo=r(g1t,"MobileBertTokenizer"),g1t.forEach(t),tuo=r(LR," or "),fq=n(LR,"A",{href:!0});var h1t=s(fq);auo=r(h1t,"MobileBertTokenizerFast"),h1t.forEach(t),nuo=r(LR," (MobileBERT model)"),LR.forEach(t),suo=i(S),Rs=n(S,"LI",{});var yR=s(Rs);vce=n(yR,"STRONG",{});var p1t=s(vce);luo=r(p1t,"mpnet"),p1t.forEach(t),iuo=r(yR," \u2014 "),mq=n(yR,"A",{href:!0});var _1t=s(mq);duo=r(_1t,"MPNetTokenizer"),_1t.forEach(t),cuo=r(yR," or "),gq=n(yR,"A",{href:!0});var u1t=s(gq);fuo=r(u1t,"MPNetTokenizerFast"),u1t.forEach(t),muo=r(yR," (MPNet model)"),yR.forEach(t),guo=i(S),Ps=n(S,"LI",{});var xR=s(Ps);Fce=n(xR,"STRONG",{});var b1t=s(Fce);huo=r(b1t,"mt5"),b1t.forEach(t),puo=r(xR," \u2014 "),hq=n(xR,"A",{href:!0});var v1t=s(hq);_uo=r(v1t,"MT5Tokenizer"),v1t.forEach(t),uuo=r(xR," or "),pq=n(xR,"A",{href:!0});var F1t=s(pq);buo=r(F1t,"MT5TokenizerFast"),F1t.forEach(t),vuo=r(xR," (MT5 model)"),xR.forEach(t),Fuo=i(S),Bs=n(S,"LI",{});var $R=s(Bs);Tce=n($R,"STRONG",{});var T1t=s(Tce);Tuo=r(T1t,"mvp"),T1t.forEach(t),Muo=r($R," \u2014 "),_q=n($R,"A",{href:!0});var M1t=s(_q);Euo=r(M1t,"MvpTokenizer"),M1t.forEach(t),Cuo=r($R," or "),uq=n($R,"A",{href:!0});var E1t=s(uq);wuo=r(E1t,"MvpTokenizerFast"),E1t.forEach(t),Auo=r($R," (MVP model)"),$R.forEach(t),Luo=i(S),Is=n(S,"LI",{});var kR=s(Is);Mce=n(kR,"STRONG",{});var C1t=s(Mce);yuo=r(C1t,"nezha"),C1t.forEach(t),xuo=r(kR," \u2014 "),bq=n(kR,"A",{href:!0});var w1t=s(bq);$uo=r(w1t,"BertTokenizer"),w1t.forEach(t),kuo=r(kR," or "),vq=n(kR,"A",{href:!0});var A1t=s(vq);Suo=r(A1t,"BertTokenizerFast"),A1t.forEach(t),Ruo=r(kR," (Nezha model)"),kR.forEach(t),Puo=i(S),Ns=n(S,"LI",{});var SR=s(Ns);Ece=n(SR,"STRONG",{});var L1t=s(Ece);Buo=r(L1t,"nllb"),L1t.forEach(t),Iuo=r(SR," \u2014 "),Fq=n(SR,"A",{href:!0});var y1t=s(Fq);Nuo=r(y1t,"NllbTokenizer"),y1t.forEach(t),quo=r(SR," or "),Tq=n(SR,"A",{href:!0});var x1t=s(Tq);juo=r(x1t,"NllbTokenizerFast"),x1t.forEach(t),Duo=r(SR," (NLLB model)"),SR.forEach(t),Guo=i(S),qs=n(S,"LI",{});var RR=s(qs);Cce=n(RR,"STRONG",{});var $1t=s(Cce);Ouo=r($1t,"nystromformer"),$1t.forEach(t),Vuo=r(RR," \u2014 "),Mq=n(RR,"A",{href:!0});var k1t=s(Mq);Xuo=r(k1t,"AlbertTokenizer"),k1t.forEach(t),zuo=r(RR," or "),Eq=n(RR,"A",{href:!0});var S1t=s(Eq);Wuo=r(S1t,"AlbertTokenizerFast"),S1t.forEach(t),Quo=r(RR," (Nystr\xF6mformer model)"),RR.forEach(t),Uuo=i(S),js=n(S,"LI",{});var PR=s(js);wce=n(PR,"STRONG",{});var R1t=s(wce);Huo=r(R1t,"openai-gpt"),R1t.forEach(t),Juo=r(PR," \u2014 "),Cq=n(PR,"A",{href:!0});var P1t=s(Cq);Yuo=r(P1t,"OpenAIGPTTokenizer"),P1t.forEach(t),Kuo=r(PR," or "),wq=n(PR,"A",{href:!0});var B1t=s(wq);Zuo=r(B1t,"OpenAIGPTTokenizerFast"),B1t.forEach(t),e1o=r(PR," (OpenAI GPT model)"),PR.forEach(t),o1o=i(S),Gh=n(S,"LI",{});var K$e=s(Gh);Ace=n(K$e,"STRONG",{});var I1t=s(Ace);r1o=r(I1t,"opt"),I1t.forEach(t),t1o=r(K$e," \u2014 "),Aq=n(K$e,"A",{href:!0});var N1t=s(Aq);a1o=r(N1t,"GPT2Tokenizer"),N1t.forEach(t),n1o=r(K$e," (OPT model)"),K$e.forEach(t),s1o=i(S),Ds=n(S,"LI",{});var BR=s(Ds);Lce=n(BR,"STRONG",{});var q1t=s(Lce);l1o=r(q1t,"owlvit"),q1t.forEach(t),i1o=r(BR," \u2014 "),Lq=n(BR,"A",{href:!0});var j1t=s(Lq);d1o=r(j1t,"CLIPTokenizer"),j1t.forEach(t),c1o=r(BR," or "),yq=n(BR,"A",{href:!0});var D1t=s(yq);f1o=r(D1t,"CLIPTokenizerFast"),D1t.forEach(t),m1o=r(BR," (OWL-ViT model)"),BR.forEach(t),g1o=i(S),Gs=n(S,"LI",{});var IR=s(Gs);yce=n(IR,"STRONG",{});var G1t=s(yce);h1o=r(G1t,"pegasus"),G1t.forEach(t),p1o=r(IR," \u2014 "),xq=n(IR,"A",{href:!0});var O1t=s(xq);_1o=r(O1t,"PegasusTokenizer"),O1t.forEach(t),u1o=r(IR," or "),$q=n(IR,"A",{href:!0});var V1t=s($q);b1o=r(V1t,"PegasusTokenizerFast"),V1t.forEach(t),v1o=r(IR," (Pegasus model)"),IR.forEach(t),F1o=i(S),Oh=n(S,"LI",{});var Z$e=s(Oh);xce=n(Z$e,"STRONG",{});var X1t=s(xce);T1o=r(X1t,"perceiver"),X1t.forEach(t),M1o=r(Z$e," \u2014 "),kq=n(Z$e,"A",{href:!0});var z1t=s(kq);E1o=r(z1t,"PerceiverTokenizer"),z1t.forEach(t),C1o=r(Z$e," (Perceiver model)"),Z$e.forEach(t),w1o=i(S),Vh=n(S,"LI",{});var eke=s(Vh);$ce=n(eke,"STRONG",{});var W1t=s($ce);A1o=r(W1t,"phobert"),W1t.forEach(t),L1o=r(eke," \u2014 "),Sq=n(eke,"A",{href:!0});var Q1t=s(Sq);y1o=r(Q1t,"PhobertTokenizer"),Q1t.forEach(t),x1o=r(eke," (PhoBERT model)"),eke.forEach(t),$1o=i(S),Xh=n(S,"LI",{});var oke=s(Xh);kce=n(oke,"STRONG",{});var U1t=s(kce);k1o=r(U1t,"plbart"),U1t.forEach(t),S1o=r(oke," \u2014 "),Rq=n(oke,"A",{href:!0});var H1t=s(Rq);R1o=r(H1t,"PLBartTokenizer"),H1t.forEach(t),P1o=r(oke," (PLBart model)"),oke.forEach(t),B1o=i(S),zh=n(S,"LI",{});var rke=s(zh);Sce=n(rke,"STRONG",{});var J1t=s(Sce);I1o=r(J1t,"prophetnet"),J1t.forEach(t),N1o=r(rke," \u2014 "),Pq=n(rke,"A",{href:!0});var Y1t=s(Pq);q1o=r(Y1t,"ProphetNetTokenizer"),Y1t.forEach(t),j1o=r(rke," (ProphetNet model)"),rke.forEach(t),D1o=i(S),Os=n(S,"LI",{});var NR=s(Os);Rce=n(NR,"STRONG",{});var K1t=s(Rce);G1o=r(K1t,"qdqbert"),K1t.forEach(t),O1o=r(NR," \u2014 "),Bq=n(NR,"A",{href:!0});var Z1t=s(Bq);V1o=r(Z1t,"BertTokenizer"),Z1t.forEach(t),X1o=r(NR," or "),Iq=n(NR,"A",{href:!0});var e2t=s(Iq);z1o=r(e2t,"BertTokenizerFast"),e2t.forEach(t),W1o=r(NR," (QDQBert model)"),NR.forEach(t),Q1o=i(S),Wh=n(S,"LI",{});var tke=s(Wh);Pce=n(tke,"STRONG",{});var o2t=s(Pce);U1o=r(o2t,"rag"),o2t.forEach(t),H1o=r(tke," \u2014 "),Nq=n(tke,"A",{href:!0});var r2t=s(Nq);J1o=r(r2t,"RagTokenizer"),r2t.forEach(t),Y1o=r(tke," (RAG model)"),tke.forEach(t),K1o=i(S),Vs=n(S,"LI",{});var qR=s(Vs);Bce=n(qR,"STRONG",{});var t2t=s(Bce);Z1o=r(t2t,"realm"),t2t.forEach(t),e2o=r(qR," \u2014 "),qq=n(qR,"A",{href:!0});var a2t=s(qq);o2o=r(a2t,"RealmTokenizer"),a2t.forEach(t),r2o=r(qR," or "),jq=n(qR,"A",{href:!0});var n2t=s(jq);t2o=r(n2t,"RealmTokenizerFast"),n2t.forEach(t),a2o=r(qR," (REALM model)"),qR.forEach(t),n2o=i(S),Xs=n(S,"LI",{});var jR=s(Xs);Ice=n(jR,"STRONG",{});var s2t=s(Ice);s2o=r(s2t,"reformer"),s2t.forEach(t),l2o=r(jR," \u2014 "),Dq=n(jR,"A",{href:!0});var l2t=s(Dq);i2o=r(l2t,"ReformerTokenizer"),l2t.forEach(t),d2o=r(jR," or "),Gq=n(jR,"A",{href:!0});var i2t=s(Gq);c2o=r(i2t,"ReformerTokenizerFast"),i2t.forEach(t),f2o=r(jR," (Reformer model)"),jR.forEach(t),m2o=i(S),zs=n(S,"LI",{});var DR=s(zs);Nce=n(DR,"STRONG",{});var d2t=s(Nce);g2o=r(d2t,"rembert"),d2t.forEach(t),h2o=r(DR," \u2014 "),Oq=n(DR,"A",{href:!0});var c2t=s(Oq);p2o=r(c2t,"RemBertTokenizer"),c2t.forEach(t),_2o=r(DR," or "),Vq=n(DR,"A",{href:!0});var f2t=s(Vq);u2o=r(f2t,"RemBertTokenizerFast"),f2t.forEach(t),b2o=r(DR," (RemBERT model)"),DR.forEach(t),v2o=i(S),Ws=n(S,"LI",{});var GR=s(Ws);qce=n(GR,"STRONG",{});var m2t=s(qce);F2o=r(m2t,"retribert"),m2t.forEach(t),T2o=r(GR," \u2014 "),Xq=n(GR,"A",{href:!0});var g2t=s(Xq);M2o=r(g2t,"RetriBertTokenizer"),g2t.forEach(t),E2o=r(GR," or "),zq=n(GR,"A",{href:!0});var h2t=s(zq);C2o=r(h2t,"RetriBertTokenizerFast"),h2t.forEach(t),w2o=r(GR," (RetriBERT model)"),GR.forEach(t),A2o=i(S),Qs=n(S,"LI",{});var OR=s(Qs);jce=n(OR,"STRONG",{});var p2t=s(jce);L2o=r(p2t,"roberta"),p2t.forEach(t),y2o=r(OR," \u2014 "),Wq=n(OR,"A",{href:!0});var _2t=s(Wq);x2o=r(_2t,"RobertaTokenizer"),_2t.forEach(t),$2o=r(OR," or "),Qq=n(OR,"A",{href:!0});var u2t=s(Qq);k2o=r(u2t,"RobertaTokenizerFast"),u2t.forEach(t),S2o=r(OR," (RoBERTa model)"),OR.forEach(t),R2o=i(S),Us=n(S,"LI",{});var VR=s(Us);Dce=n(VR,"STRONG",{});var b2t=s(Dce);P2o=r(b2t,"roformer"),b2t.forEach(t),B2o=r(VR," \u2014 "),Uq=n(VR,"A",{href:!0});var v2t=s(Uq);I2o=r(v2t,"RoFormerTokenizer"),v2t.forEach(t),N2o=r(VR," or "),Hq=n(VR,"A",{href:!0});var F2t=s(Hq);q2o=r(F2t,"RoFormerTokenizerFast"),F2t.forEach(t),j2o=r(VR," (RoFormer model)"),VR.forEach(t),D2o=i(S),Qh=n(S,"LI",{});var ake=s(Qh);Gce=n(ake,"STRONG",{});var T2t=s(Gce);G2o=r(T2t,"speech_to_text"),T2t.forEach(t),O2o=r(ake," \u2014 "),Jq=n(ake,"A",{href:!0});var M2t=s(Jq);V2o=r(M2t,"Speech2TextTokenizer"),M2t.forEach(t),X2o=r(ake," (Speech2Text model)"),ake.forEach(t),z2o=i(S),Uh=n(S,"LI",{});var nke=s(Uh);Oce=n(nke,"STRONG",{});var E2t=s(Oce);W2o=r(E2t,"speech_to_text_2"),E2t.forEach(t),Q2o=r(nke," \u2014 "),Yq=n(nke,"A",{href:!0});var C2t=s(Yq);U2o=r(C2t,"Speech2Text2Tokenizer"),C2t.forEach(t),H2o=r(nke," (Speech2Text2 model)"),nke.forEach(t),J2o=i(S),Hs=n(S,"LI",{});var XR=s(Hs);Vce=n(XR,"STRONG",{});var w2t=s(Vce);Y2o=r(w2t,"splinter"),w2t.forEach(t),K2o=r(XR," \u2014 "),Kq=n(XR,"A",{href:!0});var A2t=s(Kq);Z2o=r(A2t,"SplinterTokenizer"),A2t.forEach(t),ebo=r(XR," or "),Zq=n(XR,"A",{href:!0});var L2t=s(Zq);obo=r(L2t,"SplinterTokenizerFast"),L2t.forEach(t),rbo=r(XR," (Splinter model)"),XR.forEach(t),tbo=i(S),Js=n(S,"LI",{});var zR=s(Js);Xce=n(zR,"STRONG",{});var y2t=s(Xce);abo=r(y2t,"squeezebert"),y2t.forEach(t),nbo=r(zR," \u2014 "),ej=n(zR,"A",{href:!0});var x2t=s(ej);sbo=r(x2t,"SqueezeBertTokenizer"),x2t.forEach(t),lbo=r(zR," or "),oj=n(zR,"A",{href:!0});var $2t=s(oj);ibo=r($2t,"SqueezeBertTokenizerFast"),$2t.forEach(t),dbo=r(zR," (SqueezeBERT model)"),zR.forEach(t),cbo=i(S),Ys=n(S,"LI",{});var WR=s(Ys);zce=n(WR,"STRONG",{});var k2t=s(zce);fbo=r(k2t,"t5"),k2t.forEach(t),mbo=r(WR," \u2014 "),rj=n(WR,"A",{href:!0});var S2t=s(rj);gbo=r(S2t,"T5Tokenizer"),S2t.forEach(t),hbo=r(WR," or "),tj=n(WR,"A",{href:!0});var R2t=s(tj);pbo=r(R2t,"T5TokenizerFast"),R2t.forEach(t),_bo=r(WR," (T5 model)"),WR.forEach(t),ubo=i(S),Hh=n(S,"LI",{});var ske=s(Hh);Wce=n(ske,"STRONG",{});var P2t=s(Wce);bbo=r(P2t,"tapas"),P2t.forEach(t),vbo=r(ske," \u2014 "),aj=n(ske,"A",{href:!0});var B2t=s(aj);Fbo=r(B2t,"TapasTokenizer"),B2t.forEach(t),Tbo=r(ske," (TAPAS model)"),ske.forEach(t),Mbo=i(S),Jh=n(S,"LI",{});var lke=s(Jh);Qce=n(lke,"STRONG",{});var I2t=s(Qce);Ebo=r(I2t,"tapex"),I2t.forEach(t),Cbo=r(lke," \u2014 "),nj=n(lke,"A",{href:!0});var N2t=s(nj);wbo=r(N2t,"TapexTokenizer"),N2t.forEach(t),Abo=r(lke," (TAPEX model)"),lke.forEach(t),Lbo=i(S),Yh=n(S,"LI",{});var ike=s(Yh);Uce=n(ike,"STRONG",{});var q2t=s(Uce);ybo=r(q2t,"transfo-xl"),q2t.forEach(t),xbo=r(ike," \u2014 "),sj=n(ike,"A",{href:!0});var j2t=s(sj);$bo=r(j2t,"TransfoXLTokenizer"),j2t.forEach(t),kbo=r(ike," (Transformer-XL model)"),ike.forEach(t),Sbo=i(S),Ks=n(S,"LI",{});var QR=s(Ks);Hce=n(QR,"STRONG",{});var D2t=s(Hce);Rbo=r(D2t,"vilt"),D2t.forEach(t),Pbo=r(QR," \u2014 "),lj=n(QR,"A",{href:!0});var G2t=s(lj);Bbo=r(G2t,"BertTokenizer"),G2t.forEach(t),Ibo=r(QR," or "),ij=n(QR,"A",{href:!0});var O2t=s(ij);Nbo=r(O2t,"BertTokenizerFast"),O2t.forEach(t),qbo=r(QR," (ViLT model)"),QR.forEach(t),jbo=i(S),Zs=n(S,"LI",{});var UR=s(Zs);Jce=n(UR,"STRONG",{});var V2t=s(Jce);Dbo=r(V2t,"visual_bert"),V2t.forEach(t),Gbo=r(UR," \u2014 "),dj=n(UR,"A",{href:!0});var X2t=s(dj);Obo=r(X2t,"BertTokenizer"),X2t.forEach(t),Vbo=r(UR," or "),cj=n(UR,"A",{href:!0});var z2t=s(cj);Xbo=r(z2t,"BertTokenizerFast"),z2t.forEach(t),zbo=r(UR," (VisualBERT model)"),UR.forEach(t),Wbo=i(S),Kh=n(S,"LI",{});var dke=s(Kh);Yce=n(dke,"STRONG",{});var W2t=s(Yce);Qbo=r(W2t,"wav2vec2"),W2t.forEach(t),Ubo=r(dke," \u2014 "),fj=n(dke,"A",{href:!0});var Q2t=s(fj);Hbo=r(Q2t,"Wav2Vec2CTCTokenizer"),Q2t.forEach(t),Jbo=r(dke," (Wav2Vec2 model)"),dke.forEach(t),Ybo=i(S),Zh=n(S,"LI",{});var cke=s(Zh);Kce=n(cke,"STRONG",{});var U2t=s(Kce);Kbo=r(U2t,"wav2vec2-conformer"),U2t.forEach(t),Zbo=r(cke," \u2014 "),mj=n(cke,"A",{href:!0});var H2t=s(mj);evo=r(H2t,"Wav2Vec2CTCTokenizer"),H2t.forEach(t),ovo=r(cke," (Wav2Vec2-Conformer model)"),cke.forEach(t),rvo=i(S),ep=n(S,"LI",{});var fke=s(ep);Zce=n(fke,"STRONG",{});var J2t=s(Zce);tvo=r(J2t,"wav2vec2_phoneme"),J2t.forEach(t),avo=r(fke," \u2014 "),gj=n(fke,"A",{href:!0});var Y2t=s(gj);nvo=r(Y2t,"Wav2Vec2PhonemeCTCTokenizer"),Y2t.forEach(t),svo=r(fke," (Wav2Vec2Phoneme model)"),fke.forEach(t),lvo=i(S),el=n(S,"LI",{});var HR=s(el);efe=n(HR,"STRONG",{});var K2t=s(efe);ivo=r(K2t,"xglm"),K2t.forEach(t),dvo=r(HR," \u2014 "),hj=n(HR,"A",{href:!0});var Z2t=s(hj);cvo=r(Z2t,"XGLMTokenizer"),Z2t.forEach(t),fvo=r(HR," or "),pj=n(HR,"A",{href:!0});var ebt=s(pj);mvo=r(ebt,"XGLMTokenizerFast"),ebt.forEach(t),gvo=r(HR," (XGLM model)"),HR.forEach(t),hvo=i(S),op=n(S,"LI",{});var mke=s(op);ofe=n(mke,"STRONG",{});var obt=s(ofe);pvo=r(obt,"xlm"),obt.forEach(t),_vo=r(mke," \u2014 "),_j=n(mke,"A",{href:!0});var rbt=s(_j);uvo=r(rbt,"XLMTokenizer"),rbt.forEach(t),bvo=r(mke," (XLM model)"),mke.forEach(t),vvo=i(S),rp=n(S,"LI",{});var gke=s(rp);rfe=n(gke,"STRONG",{});var tbt=s(rfe);Fvo=r(tbt,"xlm-prophetnet"),tbt.forEach(t),Tvo=r(gke," \u2014 "),uj=n(gke,"A",{href:!0});var abt=s(uj);Mvo=r(abt,"XLMProphetNetTokenizer"),abt.forEach(t),Evo=r(gke," (XLM-ProphetNet model)"),gke.forEach(t),Cvo=i(S),ol=n(S,"LI",{});var JR=s(ol);tfe=n(JR,"STRONG",{});var nbt=s(tfe);wvo=r(nbt,"xlm-roberta"),nbt.forEach(t),Avo=r(JR," \u2014 "),bj=n(JR,"A",{href:!0});var sbt=s(bj);Lvo=r(sbt,"XLMRobertaTokenizer"),sbt.forEach(t),yvo=r(JR," or "),vj=n(JR,"A",{href:!0});var lbt=s(vj);xvo=r(lbt,"XLMRobertaTokenizerFast"),lbt.forEach(t),$vo=r(JR," (XLM-RoBERTa model)"),JR.forEach(t),kvo=i(S),rl=n(S,"LI",{});var YR=s(rl);afe=n(YR,"STRONG",{});var ibt=s(afe);Svo=r(ibt,"xlm-roberta-xl"),ibt.forEach(t),Rvo=r(YR," \u2014 "),Fj=n(YR,"A",{href:!0});var dbt=s(Fj);Pvo=r(dbt,"RobertaTokenizer"),dbt.forEach(t),Bvo=r(YR," or "),Tj=n(YR,"A",{href:!0});var cbt=s(Tj);Ivo=r(cbt,"RobertaTokenizerFast"),cbt.forEach(t),Nvo=r(YR," (XLM-RoBERTa-XL model)"),YR.forEach(t),qvo=i(S),tl=n(S,"LI",{});var KR=s(tl);nfe=n(KR,"STRONG",{});var fbt=s(nfe);jvo=r(fbt,"xlnet"),fbt.forEach(t),Dvo=r(KR," \u2014 "),Mj=n(KR,"A",{href:!0});var mbt=s(Mj);Gvo=r(mbt,"XLNetTokenizer"),mbt.forEach(t),Ovo=r(KR," or "),Ej=n(KR,"A",{href:!0});var gbt=s(Ej);Vvo=r(gbt,"XLNetTokenizerFast"),gbt.forEach(t),Xvo=r(KR," (XLNet model)"),KR.forEach(t),zvo=i(S),al=n(S,"LI",{});var ZR=s(al);sfe=n(ZR,"STRONG",{});var hbt=s(sfe);Wvo=r(hbt,"yoso"),hbt.forEach(t),Qvo=r(ZR," \u2014 "),Cj=n(ZR,"A",{href:!0});var pbt=s(Cj);Uvo=r(pbt,"AlbertTokenizer"),pbt.forEach(t),Hvo=r(ZR," or "),wj=n(ZR,"A",{href:!0});var _bt=s(wj);Jvo=r(_bt,"AlbertTokenizerFast"),_bt.forEach(t),Yvo=r(ZR," (YOSO model)"),ZR.forEach(t),S.forEach(t),Kvo=i(fl),T(tp.$$.fragment,fl),fl.forEach(t),Zvo=i(cl),ap=n(cl,"DIV",{class:!0});var iJe=s(ap);T(yL.$$.fragment,iJe),e5o=i(iJe),lfe=n(iJe,"P",{});var ubt=s(lfe);o5o=r(ubt,"Register a new tokenizer in this mapping."),ubt.forEach(t),iJe.forEach(t),cl.forEach(t),tUe=i(f),Zi=n(f,"H2",{class:!0});var dJe=s(Zi);np=n(dJe,"A",{id:!0,class:!0,href:!0});var bbt=s(np);ife=n(bbt,"SPAN",{});var vbt=s(ife);T(xL.$$.fragment,vbt),vbt.forEach(t),bbt.forEach(t),r5o=i(dJe),dfe=n(dJe,"SPAN",{});var Fbt=s(dfe);t5o=r(Fbt,"AutoFeatureExtractor"),Fbt.forEach(t),dJe.forEach(t),aUe=i(f),$o=n(f,"DIV",{class:!0});var ml=s($o);T($L.$$.fragment,ml),a5o=i(ml),kL=n(ml,"P",{});var cJe=s(kL);n5o=r(cJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Aj=n(cJe,"A",{href:!0});var Tbt=s(Aj);s5o=r(Tbt,"AutoFeatureExtractor.from_pretrained()"),Tbt.forEach(t),l5o=r(cJe," class method."),cJe.forEach(t),i5o=i(ml),SL=n(ml,"P",{});var fJe=s(SL);d5o=r(fJe,"This class cannot be instantiated directly using "),cfe=n(fJe,"CODE",{});var Mbt=s(cfe);c5o=r(Mbt,"__init__()"),Mbt.forEach(t),f5o=r(fJe," (throws an error)."),fJe.forEach(t),m5o=i(ml),Je=n(ml,"DIV",{class:!0});var fa=s(Je);T(RL.$$.fragment,fa),g5o=i(fa),ffe=n(fa,"P",{});var Ebt=s(ffe);h5o=r(Ebt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ebt.forEach(t),p5o=i(fa),Oa=n(fa,"P",{});var g6=s(Oa);_5o=r(g6,"The feature extractor class to instantiate is selected based on the "),mfe=n(g6,"CODE",{});var Cbt=s(mfe);u5o=r(Cbt,"model_type"),Cbt.forEach(t),b5o=r(g6,` property of the config object
(either passed as an argument or loaded from `),gfe=n(g6,"CODE",{});var wbt=s(gfe);v5o=r(wbt,"pretrained_model_name_or_path"),wbt.forEach(t),F5o=r(g6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hfe=n(g6,"CODE",{});var Abt=s(hfe);T5o=r(Abt,"pretrained_model_name_or_path"),Abt.forEach(t),M5o=r(g6,":"),g6.forEach(t),E5o=i(fa),Q=n(fa,"UL",{});var J=s(Q);sp=n(J,"LI",{});var hke=s(sp);pfe=n(hke,"STRONG",{});var Lbt=s(pfe);C5o=r(Lbt,"beit"),Lbt.forEach(t),w5o=r(hke," \u2014 "),Lj=n(hke,"A",{href:!0});var ybt=s(Lj);A5o=r(ybt,"BeitFeatureExtractor"),ybt.forEach(t),L5o=r(hke," (BEiT model)"),hke.forEach(t),y5o=i(J),lp=n(J,"LI",{});var pke=s(lp);_fe=n(pke,"STRONG",{});var xbt=s(_fe);x5o=r(xbt,"clip"),xbt.forEach(t),$5o=r(pke," \u2014 "),yj=n(pke,"A",{href:!0});var $bt=s(yj);k5o=r($bt,"CLIPFeatureExtractor"),$bt.forEach(t),S5o=r(pke," (CLIP model)"),pke.forEach(t),R5o=i(J),ip=n(J,"LI",{});var _ke=s(ip);ufe=n(_ke,"STRONG",{});var kbt=s(ufe);P5o=r(kbt,"convnext"),kbt.forEach(t),B5o=r(_ke," \u2014 "),xj=n(_ke,"A",{href:!0});var Sbt=s(xj);I5o=r(Sbt,"ConvNextFeatureExtractor"),Sbt.forEach(t),N5o=r(_ke," (ConvNeXT model)"),_ke.forEach(t),q5o=i(J),dp=n(J,"LI",{});var uke=s(dp);bfe=n(uke,"STRONG",{});var Rbt=s(bfe);j5o=r(Rbt,"cvt"),Rbt.forEach(t),D5o=r(uke," \u2014 "),$j=n(uke,"A",{href:!0});var Pbt=s($j);G5o=r(Pbt,"ConvNextFeatureExtractor"),Pbt.forEach(t),O5o=r(uke," (CvT model)"),uke.forEach(t),V5o=i(J),cp=n(J,"LI",{});var bke=s(cp);vfe=n(bke,"STRONG",{});var Bbt=s(vfe);X5o=r(Bbt,"data2vec-audio"),Bbt.forEach(t),z5o=r(bke," \u2014 "),kj=n(bke,"A",{href:!0});var Ibt=s(kj);W5o=r(Ibt,"Wav2Vec2FeatureExtractor"),Ibt.forEach(t),Q5o=r(bke," (Data2VecAudio model)"),bke.forEach(t),U5o=i(J),fp=n(J,"LI",{});var vke=s(fp);Ffe=n(vke,"STRONG",{});var Nbt=s(Ffe);H5o=r(Nbt,"data2vec-vision"),Nbt.forEach(t),J5o=r(vke," \u2014 "),Sj=n(vke,"A",{href:!0});var qbt=s(Sj);Y5o=r(qbt,"BeitFeatureExtractor"),qbt.forEach(t),K5o=r(vke," (Data2VecVision model)"),vke.forEach(t),Z5o=i(J),mp=n(J,"LI",{});var Fke=s(mp);Tfe=n(Fke,"STRONG",{});var jbt=s(Tfe);eFo=r(jbt,"deit"),jbt.forEach(t),oFo=r(Fke," \u2014 "),Rj=n(Fke,"A",{href:!0});var Dbt=s(Rj);rFo=r(Dbt,"DeiTFeatureExtractor"),Dbt.forEach(t),tFo=r(Fke," (DeiT model)"),Fke.forEach(t),aFo=i(J),gp=n(J,"LI",{});var Tke=s(gp);Mfe=n(Tke,"STRONG",{});var Gbt=s(Mfe);nFo=r(Gbt,"detr"),Gbt.forEach(t),sFo=r(Tke," \u2014 "),Pj=n(Tke,"A",{href:!0});var Obt=s(Pj);lFo=r(Obt,"DetrFeatureExtractor"),Obt.forEach(t),iFo=r(Tke," (DETR model)"),Tke.forEach(t),dFo=i(J),hp=n(J,"LI",{});var Mke=s(hp);Efe=n(Mke,"STRONG",{});var Vbt=s(Efe);cFo=r(Vbt,"donut"),Vbt.forEach(t),fFo=r(Mke," \u2014 "),Bj=n(Mke,"A",{href:!0});var Xbt=s(Bj);mFo=r(Xbt,"DonutFeatureExtractor"),Xbt.forEach(t),gFo=r(Mke," (Donut model)"),Mke.forEach(t),hFo=i(J),pp=n(J,"LI",{});var Eke=s(pp);Cfe=n(Eke,"STRONG",{});var zbt=s(Cfe);pFo=r(zbt,"dpt"),zbt.forEach(t),_Fo=r(Eke," \u2014 "),Ij=n(Eke,"A",{href:!0});var Wbt=s(Ij);uFo=r(Wbt,"DPTFeatureExtractor"),Wbt.forEach(t),bFo=r(Eke," (DPT model)"),Eke.forEach(t),vFo=i(J),_p=n(J,"LI",{});var Cke=s(_p);wfe=n(Cke,"STRONG",{});var Qbt=s(wfe);FFo=r(Qbt,"flava"),Qbt.forEach(t),TFo=r(Cke," \u2014 "),Nj=n(Cke,"A",{href:!0});var Ubt=s(Nj);MFo=r(Ubt,"FlavaFeatureExtractor"),Ubt.forEach(t),EFo=r(Cke," (FLAVA model)"),Cke.forEach(t),CFo=i(J),up=n(J,"LI",{});var wke=s(up);Afe=n(wke,"STRONG",{});var Hbt=s(Afe);wFo=r(Hbt,"glpn"),Hbt.forEach(t),AFo=r(wke," \u2014 "),qj=n(wke,"A",{href:!0});var Jbt=s(qj);LFo=r(Jbt,"GLPNFeatureExtractor"),Jbt.forEach(t),yFo=r(wke," (GLPN model)"),wke.forEach(t),xFo=i(J),bp=n(J,"LI",{});var Ake=s(bp);Lfe=n(Ake,"STRONG",{});var Ybt=s(Lfe);$Fo=r(Ybt,"groupvit"),Ybt.forEach(t),kFo=r(Ake," \u2014 "),jj=n(Ake,"A",{href:!0});var Kbt=s(jj);SFo=r(Kbt,"CLIPFeatureExtractor"),Kbt.forEach(t),RFo=r(Ake," (GroupViT model)"),Ake.forEach(t),PFo=i(J),vp=n(J,"LI",{});var Lke=s(vp);yfe=n(Lke,"STRONG",{});var Zbt=s(yfe);BFo=r(Zbt,"hubert"),Zbt.forEach(t),IFo=r(Lke," \u2014 "),Dj=n(Lke,"A",{href:!0});var evt=s(Dj);NFo=r(evt,"Wav2Vec2FeatureExtractor"),evt.forEach(t),qFo=r(Lke," (Hubert model)"),Lke.forEach(t),jFo=i(J),Fp=n(J,"LI",{});var yke=s(Fp);xfe=n(yke,"STRONG",{});var ovt=s(xfe);DFo=r(ovt,"imagegpt"),ovt.forEach(t),GFo=r(yke," \u2014 "),Gj=n(yke,"A",{href:!0});var rvt=s(Gj);OFo=r(rvt,"ImageGPTFeatureExtractor"),rvt.forEach(t),VFo=r(yke," (ImageGPT model)"),yke.forEach(t),XFo=i(J),Tp=n(J,"LI",{});var xke=s(Tp);$fe=n(xke,"STRONG",{});var tvt=s($fe);zFo=r(tvt,"layoutlmv2"),tvt.forEach(t),WFo=r(xke," \u2014 "),Oj=n(xke,"A",{href:!0});var avt=s(Oj);QFo=r(avt,"LayoutLMv2FeatureExtractor"),avt.forEach(t),UFo=r(xke," (LayoutLMv2 model)"),xke.forEach(t),HFo=i(J),Mp=n(J,"LI",{});var $ke=s(Mp);kfe=n($ke,"STRONG",{});var nvt=s(kfe);JFo=r(nvt,"layoutlmv3"),nvt.forEach(t),YFo=r($ke," \u2014 "),Vj=n($ke,"A",{href:!0});var svt=s(Vj);KFo=r(svt,"LayoutLMv3FeatureExtractor"),svt.forEach(t),ZFo=r($ke," (LayoutLMv3 model)"),$ke.forEach(t),eTo=i(J),Ep=n(J,"LI",{});var kke=s(Ep);Sfe=n(kke,"STRONG",{});var lvt=s(Sfe);oTo=r(lvt,"levit"),lvt.forEach(t),rTo=r(kke," \u2014 "),Xj=n(kke,"A",{href:!0});var ivt=s(Xj);tTo=r(ivt,"LevitFeatureExtractor"),ivt.forEach(t),aTo=r(kke," (LeViT model)"),kke.forEach(t),nTo=i(J),Cp=n(J,"LI",{});var Ske=s(Cp);Rfe=n(Ske,"STRONG",{});var dvt=s(Rfe);sTo=r(dvt,"maskformer"),dvt.forEach(t),lTo=r(Ske," \u2014 "),zj=n(Ske,"A",{href:!0});var cvt=s(zj);iTo=r(cvt,"MaskFormerFeatureExtractor"),cvt.forEach(t),dTo=r(Ske," (MaskFormer model)"),Ske.forEach(t),cTo=i(J),wp=n(J,"LI",{});var Rke=s(wp);Pfe=n(Rke,"STRONG",{});var fvt=s(Pfe);fTo=r(fvt,"mctct"),fvt.forEach(t),mTo=r(Rke," \u2014 "),Wj=n(Rke,"A",{href:!0});var mvt=s(Wj);gTo=r(mvt,"MCTCTFeatureExtractor"),mvt.forEach(t),hTo=r(Rke," (M-CTC-T model)"),Rke.forEach(t),pTo=i(J),Ap=n(J,"LI",{});var Pke=s(Ap);Bfe=n(Pke,"STRONG",{});var gvt=s(Bfe);_To=r(gvt,"mobilevit"),gvt.forEach(t),uTo=r(Pke," \u2014 "),Qj=n(Pke,"A",{href:!0});var hvt=s(Qj);bTo=r(hvt,"MobileViTFeatureExtractor"),hvt.forEach(t),vTo=r(Pke," (MobileViT model)"),Pke.forEach(t),FTo=i(J),Lp=n(J,"LI",{});var Bke=s(Lp);Ife=n(Bke,"STRONG",{});var pvt=s(Ife);TTo=r(pvt,"owlvit"),pvt.forEach(t),MTo=r(Bke," \u2014 "),Uj=n(Bke,"A",{href:!0});var _vt=s(Uj);ETo=r(_vt,"OwlViTFeatureExtractor"),_vt.forEach(t),CTo=r(Bke," (OWL-ViT model)"),Bke.forEach(t),wTo=i(J),yp=n(J,"LI",{});var Ike=s(yp);Nfe=n(Ike,"STRONG",{});var uvt=s(Nfe);ATo=r(uvt,"perceiver"),uvt.forEach(t),LTo=r(Ike," \u2014 "),Hj=n(Ike,"A",{href:!0});var bvt=s(Hj);yTo=r(bvt,"PerceiverFeatureExtractor"),bvt.forEach(t),xTo=r(Ike," (Perceiver model)"),Ike.forEach(t),$To=i(J),xp=n(J,"LI",{});var Nke=s(xp);qfe=n(Nke,"STRONG",{});var vvt=s(qfe);kTo=r(vvt,"poolformer"),vvt.forEach(t),STo=r(Nke," \u2014 "),Jj=n(Nke,"A",{href:!0});var Fvt=s(Jj);RTo=r(Fvt,"PoolFormerFeatureExtractor"),Fvt.forEach(t),PTo=r(Nke," (PoolFormer model)"),Nke.forEach(t),BTo=i(J),$p=n(J,"LI",{});var qke=s($p);jfe=n(qke,"STRONG",{});var Tvt=s(jfe);ITo=r(Tvt,"regnet"),Tvt.forEach(t),NTo=r(qke," \u2014 "),Yj=n(qke,"A",{href:!0});var Mvt=s(Yj);qTo=r(Mvt,"ConvNextFeatureExtractor"),Mvt.forEach(t),jTo=r(qke," (RegNet model)"),qke.forEach(t),DTo=i(J),kp=n(J,"LI",{});var jke=s(kp);Dfe=n(jke,"STRONG",{});var Evt=s(Dfe);GTo=r(Evt,"resnet"),Evt.forEach(t),OTo=r(jke," \u2014 "),Kj=n(jke,"A",{href:!0});var Cvt=s(Kj);VTo=r(Cvt,"ConvNextFeatureExtractor"),Cvt.forEach(t),XTo=r(jke," (ResNet model)"),jke.forEach(t),zTo=i(J),Sp=n(J,"LI",{});var Dke=s(Sp);Gfe=n(Dke,"STRONG",{});var wvt=s(Gfe);WTo=r(wvt,"segformer"),wvt.forEach(t),QTo=r(Dke," \u2014 "),Zj=n(Dke,"A",{href:!0});var Avt=s(Zj);UTo=r(Avt,"SegformerFeatureExtractor"),Avt.forEach(t),HTo=r(Dke," (SegFormer model)"),Dke.forEach(t),JTo=i(J),Rp=n(J,"LI",{});var Gke=s(Rp);Ofe=n(Gke,"STRONG",{});var Lvt=s(Ofe);YTo=r(Lvt,"speech_to_text"),Lvt.forEach(t),KTo=r(Gke," \u2014 "),eD=n(Gke,"A",{href:!0});var yvt=s(eD);ZTo=r(yvt,"Speech2TextFeatureExtractor"),yvt.forEach(t),e7o=r(Gke," (Speech2Text model)"),Gke.forEach(t),o7o=i(J),Pp=n(J,"LI",{});var Oke=s(Pp);Vfe=n(Oke,"STRONG",{});var xvt=s(Vfe);r7o=r(xvt,"swin"),xvt.forEach(t),t7o=r(Oke," \u2014 "),oD=n(Oke,"A",{href:!0});var $vt=s(oD);a7o=r($vt,"ViTFeatureExtractor"),$vt.forEach(t),n7o=r(Oke," (Swin Transformer model)"),Oke.forEach(t),s7o=i(J),Bp=n(J,"LI",{});var Vke=s(Bp);Xfe=n(Vke,"STRONG",{});var kvt=s(Xfe);l7o=r(kvt,"swinv2"),kvt.forEach(t),i7o=r(Vke," \u2014 "),rD=n(Vke,"A",{href:!0});var Svt=s(rD);d7o=r(Svt,"ViTFeatureExtractor"),Svt.forEach(t),c7o=r(Vke," (Swin Transformer V2 model)"),Vke.forEach(t),f7o=i(J),Ip=n(J,"LI",{});var Xke=s(Ip);zfe=n(Xke,"STRONG",{});var Rvt=s(zfe);m7o=r(Rvt,"van"),Rvt.forEach(t),g7o=r(Xke," \u2014 "),tD=n(Xke,"A",{href:!0});var Pvt=s(tD);h7o=r(Pvt,"ConvNextFeatureExtractor"),Pvt.forEach(t),p7o=r(Xke," (VAN model)"),Xke.forEach(t),_7o=i(J),Np=n(J,"LI",{});var zke=s(Np);Wfe=n(zke,"STRONG",{});var Bvt=s(Wfe);u7o=r(Bvt,"videomae"),Bvt.forEach(t),b7o=r(zke," \u2014 "),aD=n(zke,"A",{href:!0});var Ivt=s(aD);v7o=r(Ivt,"ViTFeatureExtractor"),Ivt.forEach(t),F7o=r(zke," (VideoMAE model)"),zke.forEach(t),T7o=i(J),qp=n(J,"LI",{});var Wke=s(qp);Qfe=n(Wke,"STRONG",{});var Nvt=s(Qfe);M7o=r(Nvt,"vilt"),Nvt.forEach(t),E7o=r(Wke," \u2014 "),nD=n(Wke,"A",{href:!0});var qvt=s(nD);C7o=r(qvt,"ViltFeatureExtractor"),qvt.forEach(t),w7o=r(Wke," (ViLT model)"),Wke.forEach(t),A7o=i(J),jp=n(J,"LI",{});var Qke=s(jp);Ufe=n(Qke,"STRONG",{});var jvt=s(Ufe);L7o=r(jvt,"vit"),jvt.forEach(t),y7o=r(Qke," \u2014 "),sD=n(Qke,"A",{href:!0});var Dvt=s(sD);x7o=r(Dvt,"ViTFeatureExtractor"),Dvt.forEach(t),$7o=r(Qke," (ViT model)"),Qke.forEach(t),k7o=i(J),Dp=n(J,"LI",{});var Uke=s(Dp);Hfe=n(Uke,"STRONG",{});var Gvt=s(Hfe);S7o=r(Gvt,"vit_mae"),Gvt.forEach(t),R7o=r(Uke," \u2014 "),lD=n(Uke,"A",{href:!0});var Ovt=s(lD);P7o=r(Ovt,"ViTFeatureExtractor"),Ovt.forEach(t),B7o=r(Uke," (ViTMAE model)"),Uke.forEach(t),I7o=i(J),Gp=n(J,"LI",{});var Hke=s(Gp);Jfe=n(Hke,"STRONG",{});var Vvt=s(Jfe);N7o=r(Vvt,"wav2vec2"),Vvt.forEach(t),q7o=r(Hke," \u2014 "),iD=n(Hke,"A",{href:!0});var Xvt=s(iD);j7o=r(Xvt,"Wav2Vec2FeatureExtractor"),Xvt.forEach(t),D7o=r(Hke," (Wav2Vec2 model)"),Hke.forEach(t),G7o=i(J),Op=n(J,"LI",{});var Jke=s(Op);Yfe=n(Jke,"STRONG",{});var zvt=s(Yfe);O7o=r(zvt,"wav2vec2-conformer"),zvt.forEach(t),V7o=r(Jke," \u2014 "),dD=n(Jke,"A",{href:!0});var Wvt=s(dD);X7o=r(Wvt,"Wav2Vec2FeatureExtractor"),Wvt.forEach(t),z7o=r(Jke," (Wav2Vec2-Conformer model)"),Jke.forEach(t),W7o=i(J),Vp=n(J,"LI",{});var Yke=s(Vp);Kfe=n(Yke,"STRONG",{});var Qvt=s(Kfe);Q7o=r(Qvt,"yolos"),Qvt.forEach(t),U7o=r(Yke," \u2014 "),cD=n(Yke,"A",{href:!0});var Uvt=s(cD);H7o=r(Uvt,"YolosFeatureExtractor"),Uvt.forEach(t),J7o=r(Yke," (YOLOS model)"),Yke.forEach(t),J.forEach(t),Y7o=i(fa),T(Xp.$$.fragment,fa),K7o=i(fa),T(zp.$$.fragment,fa),fa.forEach(t),Z7o=i(ml),Wp=n(ml,"DIV",{class:!0});var mJe=s(Wp);T(PL.$$.fragment,mJe),e8o=i(mJe),Zfe=n(mJe,"P",{});var Hvt=s(Zfe);o8o=r(Hvt,"Register a new feature extractor for this class."),Hvt.forEach(t),mJe.forEach(t),ml.forEach(t),nUe=i(f),ed=n(f,"H2",{class:!0});var gJe=s(ed);Qp=n(gJe,"A",{id:!0,class:!0,href:!0});var Jvt=s(Qp);eme=n(Jvt,"SPAN",{});var Yvt=s(eme);T(BL.$$.fragment,Yvt),Yvt.forEach(t),Jvt.forEach(t),r8o=i(gJe),ome=n(gJe,"SPAN",{});var Kvt=s(ome);t8o=r(Kvt,"AutoProcessor"),Kvt.forEach(t),gJe.forEach(t),sUe=i(f),ko=n(f,"DIV",{class:!0});var gl=s(ko);T(IL.$$.fragment,gl),a8o=i(gl),NL=n(gl,"P",{});var hJe=s(NL);n8o=r(hJe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fD=n(hJe,"A",{href:!0});var Zvt=s(fD);s8o=r(Zvt,"AutoProcessor.from_pretrained()"),Zvt.forEach(t),l8o=r(hJe," class method."),hJe.forEach(t),i8o=i(gl),qL=n(gl,"P",{});var pJe=s(qL);d8o=r(pJe,"This class cannot be instantiated directly using "),rme=n(pJe,"CODE",{});var e5t=s(rme);c8o=r(e5t,"__init__()"),e5t.forEach(t),f8o=r(pJe," (throws an error)."),pJe.forEach(t),m8o=i(gl),Ye=n(gl,"DIV",{class:!0});var ma=s(Ye);T(jL.$$.fragment,ma),g8o=i(ma),tme=n(ma,"P",{});var o5t=s(tme);h8o=r(o5t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),o5t.forEach(t),p8o=i(ma),od=n(ma,"P",{});var Vae=s(od);_8o=r(Vae,"The processor class to instantiate is selected based on the "),ame=n(Vae,"CODE",{});var r5t=s(ame);u8o=r(r5t,"model_type"),r5t.forEach(t),b8o=r(Vae,` property of the config object (either
passed as an argument or loaded from `),nme=n(Vae,"CODE",{});var t5t=s(nme);v8o=r(t5t,"pretrained_model_name_or_path"),t5t.forEach(t),F8o=r(Vae," if possible):"),Vae.forEach(t),T8o=i(ma),ie=n(ma,"UL",{});var ge=s(ie);Up=n(ge,"LI",{});var Kke=s(Up);sme=n(Kke,"STRONG",{});var a5t=s(sme);M8o=r(a5t,"clip"),a5t.forEach(t),E8o=r(Kke," \u2014 "),mD=n(Kke,"A",{href:!0});var n5t=s(mD);C8o=r(n5t,"CLIPProcessor"),n5t.forEach(t),w8o=r(Kke," (CLIP model)"),Kke.forEach(t),A8o=i(ge),Hp=n(ge,"LI",{});var Zke=s(Hp);lme=n(Zke,"STRONG",{});var s5t=s(lme);L8o=r(s5t,"donut"),s5t.forEach(t),y8o=r(Zke," \u2014 "),gD=n(Zke,"A",{href:!0});var l5t=s(gD);x8o=r(l5t,"DonutProcessor"),l5t.forEach(t),$8o=r(Zke," (Donut model)"),Zke.forEach(t),k8o=i(ge),Jp=n(ge,"LI",{});var eSe=s(Jp);ime=n(eSe,"STRONG",{});var i5t=s(ime);S8o=r(i5t,"flava"),i5t.forEach(t),R8o=r(eSe," \u2014 "),hD=n(eSe,"A",{href:!0});var d5t=s(hD);P8o=r(d5t,"FlavaProcessor"),d5t.forEach(t),B8o=r(eSe," (FLAVA model)"),eSe.forEach(t),I8o=i(ge),Yp=n(ge,"LI",{});var oSe=s(Yp);dme=n(oSe,"STRONG",{});var c5t=s(dme);N8o=r(c5t,"groupvit"),c5t.forEach(t),q8o=r(oSe," \u2014 "),pD=n(oSe,"A",{href:!0});var f5t=s(pD);j8o=r(f5t,"CLIPProcessor"),f5t.forEach(t),D8o=r(oSe," (GroupViT model)"),oSe.forEach(t),G8o=i(ge),Kp=n(ge,"LI",{});var rSe=s(Kp);cme=n(rSe,"STRONG",{});var m5t=s(cme);O8o=r(m5t,"layoutlmv2"),m5t.forEach(t),V8o=r(rSe," \u2014 "),_D=n(rSe,"A",{href:!0});var g5t=s(_D);X8o=r(g5t,"LayoutLMv2Processor"),g5t.forEach(t),z8o=r(rSe," (LayoutLMv2 model)"),rSe.forEach(t),W8o=i(ge),Zp=n(ge,"LI",{});var tSe=s(Zp);fme=n(tSe,"STRONG",{});var h5t=s(fme);Q8o=r(h5t,"layoutlmv3"),h5t.forEach(t),U8o=r(tSe," \u2014 "),uD=n(tSe,"A",{href:!0});var p5t=s(uD);H8o=r(p5t,"LayoutLMv3Processor"),p5t.forEach(t),J8o=r(tSe," (LayoutLMv3 model)"),tSe.forEach(t),Y8o=i(ge),e_=n(ge,"LI",{});var aSe=s(e_);mme=n(aSe,"STRONG",{});var _5t=s(mme);K8o=r(_5t,"layoutxlm"),_5t.forEach(t),Z8o=r(aSe," \u2014 "),bD=n(aSe,"A",{href:!0});var u5t=s(bD);e9o=r(u5t,"LayoutXLMProcessor"),u5t.forEach(t),o9o=r(aSe," (LayoutXLM model)"),aSe.forEach(t),r9o=i(ge),o_=n(ge,"LI",{});var nSe=s(o_);gme=n(nSe,"STRONG",{});var b5t=s(gme);t9o=r(b5t,"owlvit"),b5t.forEach(t),a9o=r(nSe," \u2014 "),vD=n(nSe,"A",{href:!0});var v5t=s(vD);n9o=r(v5t,"OwlViTProcessor"),v5t.forEach(t),s9o=r(nSe," (OWL-ViT model)"),nSe.forEach(t),l9o=i(ge),r_=n(ge,"LI",{});var sSe=s(r_);hme=n(sSe,"STRONG",{});var F5t=s(hme);i9o=r(F5t,"sew"),F5t.forEach(t),d9o=r(sSe," \u2014 "),FD=n(sSe,"A",{href:!0});var T5t=s(FD);c9o=r(T5t,"Wav2Vec2Processor"),T5t.forEach(t),f9o=r(sSe," (SEW model)"),sSe.forEach(t),m9o=i(ge),t_=n(ge,"LI",{});var lSe=s(t_);pme=n(lSe,"STRONG",{});var M5t=s(pme);g9o=r(M5t,"sew-d"),M5t.forEach(t),h9o=r(lSe," \u2014 "),TD=n(lSe,"A",{href:!0});var E5t=s(TD);p9o=r(E5t,"Wav2Vec2Processor"),E5t.forEach(t),_9o=r(lSe," (SEW-D model)"),lSe.forEach(t),u9o=i(ge),a_=n(ge,"LI",{});var iSe=s(a_);_me=n(iSe,"STRONG",{});var C5t=s(_me);b9o=r(C5t,"speech_to_text"),C5t.forEach(t),v9o=r(iSe," \u2014 "),MD=n(iSe,"A",{href:!0});var w5t=s(MD);F9o=r(w5t,"Speech2TextProcessor"),w5t.forEach(t),T9o=r(iSe," (Speech2Text model)"),iSe.forEach(t),M9o=i(ge),n_=n(ge,"LI",{});var dSe=s(n_);ume=n(dSe,"STRONG",{});var A5t=s(ume);E9o=r(A5t,"speech_to_text_2"),A5t.forEach(t),C9o=r(dSe," \u2014 "),ED=n(dSe,"A",{href:!0});var L5t=s(ED);w9o=r(L5t,"Speech2Text2Processor"),L5t.forEach(t),A9o=r(dSe," (Speech2Text2 model)"),dSe.forEach(t),L9o=i(ge),s_=n(ge,"LI",{});var cSe=s(s_);bme=n(cSe,"STRONG",{});var y5t=s(bme);y9o=r(y5t,"trocr"),y5t.forEach(t),x9o=r(cSe," \u2014 "),CD=n(cSe,"A",{href:!0});var x5t=s(CD);$9o=r(x5t,"TrOCRProcessor"),x5t.forEach(t),k9o=r(cSe," (TrOCR model)"),cSe.forEach(t),S9o=i(ge),l_=n(ge,"LI",{});var fSe=s(l_);vme=n(fSe,"STRONG",{});var $5t=s(vme);R9o=r($5t,"unispeech"),$5t.forEach(t),P9o=r(fSe," \u2014 "),wD=n(fSe,"A",{href:!0});var k5t=s(wD);B9o=r(k5t,"Wav2Vec2Processor"),k5t.forEach(t),I9o=r(fSe," (UniSpeech model)"),fSe.forEach(t),N9o=i(ge),i_=n(ge,"LI",{});var mSe=s(i_);Fme=n(mSe,"STRONG",{});var S5t=s(Fme);q9o=r(S5t,"unispeech-sat"),S5t.forEach(t),j9o=r(mSe," \u2014 "),AD=n(mSe,"A",{href:!0});var R5t=s(AD);D9o=r(R5t,"Wav2Vec2Processor"),R5t.forEach(t),G9o=r(mSe," (UniSpeechSat model)"),mSe.forEach(t),O9o=i(ge),d_=n(ge,"LI",{});var gSe=s(d_);Tme=n(gSe,"STRONG",{});var P5t=s(Tme);V9o=r(P5t,"vilt"),P5t.forEach(t),X9o=r(gSe," \u2014 "),LD=n(gSe,"A",{href:!0});var B5t=s(LD);z9o=r(B5t,"ViltProcessor"),B5t.forEach(t),W9o=r(gSe," (ViLT model)"),gSe.forEach(t),Q9o=i(ge),c_=n(ge,"LI",{});var hSe=s(c_);Mme=n(hSe,"STRONG",{});var I5t=s(Mme);U9o=r(I5t,"vision-text-dual-encoder"),I5t.forEach(t),H9o=r(hSe," \u2014 "),yD=n(hSe,"A",{href:!0});var N5t=s(yD);J9o=r(N5t,"VisionTextDualEncoderProcessor"),N5t.forEach(t),Y9o=r(hSe," (VisionTextDualEncoder model)"),hSe.forEach(t),K9o=i(ge),f_=n(ge,"LI",{});var pSe=s(f_);Eme=n(pSe,"STRONG",{});var q5t=s(Eme);Z9o=r(q5t,"wav2vec2"),q5t.forEach(t),eMo=r(pSe," \u2014 "),xD=n(pSe,"A",{href:!0});var j5t=s(xD);oMo=r(j5t,"Wav2Vec2Processor"),j5t.forEach(t),rMo=r(pSe," (Wav2Vec2 model)"),pSe.forEach(t),tMo=i(ge),m_=n(ge,"LI",{});var _Se=s(m_);Cme=n(_Se,"STRONG",{});var D5t=s(Cme);aMo=r(D5t,"wav2vec2-conformer"),D5t.forEach(t),nMo=r(_Se," \u2014 "),$D=n(_Se,"A",{href:!0});var G5t=s($D);sMo=r(G5t,"Wav2Vec2Processor"),G5t.forEach(t),lMo=r(_Se," (Wav2Vec2-Conformer model)"),_Se.forEach(t),iMo=i(ge),g_=n(ge,"LI",{});var uSe=s(g_);wme=n(uSe,"STRONG",{});var O5t=s(wme);dMo=r(O5t,"wavlm"),O5t.forEach(t),cMo=r(uSe," \u2014 "),kD=n(uSe,"A",{href:!0});var V5t=s(kD);fMo=r(V5t,"Wav2Vec2Processor"),V5t.forEach(t),mMo=r(uSe," (WavLM model)"),uSe.forEach(t),ge.forEach(t),gMo=i(ma),T(h_.$$.fragment,ma),hMo=i(ma),T(p_.$$.fragment,ma),ma.forEach(t),pMo=i(gl),__=n(gl,"DIV",{class:!0});var _Je=s(__);T(DL.$$.fragment,_Je),_Mo=i(_Je),Ame=n(_Je,"P",{});var X5t=s(Ame);uMo=r(X5t,"Register a new processor for this class."),X5t.forEach(t),_Je.forEach(t),gl.forEach(t),lUe=i(f),rd=n(f,"H2",{class:!0});var uJe=s(rd);u_=n(uJe,"A",{id:!0,class:!0,href:!0});var z5t=s(u_);Lme=n(z5t,"SPAN",{});var W5t=s(Lme);T(GL.$$.fragment,W5t),W5t.forEach(t),z5t.forEach(t),bMo=i(uJe),yme=n(uJe,"SPAN",{});var Q5t=s(yme);vMo=r(Q5t,"AutoModel"),Q5t.forEach(t),uJe.forEach(t),iUe=i(f),So=n(f,"DIV",{class:!0});var hl=s(So);T(OL.$$.fragment,hl),FMo=i(hl),td=n(hl,"P",{});var Xae=s(td);TMo=r(Xae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SD=n(Xae,"A",{href:!0});var U5t=s(SD);MMo=r(U5t,"from_pretrained()"),U5t.forEach(t),EMo=r(Xae," class method or the "),RD=n(Xae,"A",{href:!0});var H5t=s(RD);CMo=r(H5t,"from_config()"),H5t.forEach(t),wMo=r(Xae,` class
method.`),Xae.forEach(t),AMo=i(hl),VL=n(hl,"P",{});var bJe=s(VL);LMo=r(bJe,"This class cannot be instantiated directly using "),xme=n(bJe,"CODE",{});var J5t=s(xme);yMo=r(J5t,"__init__()"),J5t.forEach(t),xMo=r(bJe," (throws an error)."),bJe.forEach(t),$Mo=i(hl),mt=n(hl,"DIV",{class:!0});var h6=s(mt);T(XL.$$.fragment,h6),kMo=i(h6),$me=n(h6,"P",{});var Y5t=s($me);SMo=r(Y5t,"Instantiates one of the base model classes of the library from a configuration."),Y5t.forEach(t),RMo=i(h6),ad=n(h6,"P",{});var zae=s(ad);PMo=r(zae,`Note:
Loading a model from its configuration file does `),kme=n(zae,"STRONG",{});var K5t=s(kme);BMo=r(K5t,"not"),K5t.forEach(t),IMo=r(zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PD=n(zae,"A",{href:!0});var Z5t=s(PD);NMo=r(Z5t,"from_pretrained()"),Z5t.forEach(t),qMo=r(zae," to load the model weights."),zae.forEach(t),jMo=i(h6),T(b_.$$.fragment,h6),h6.forEach(t),DMo=i(hl),Ke=n(hl,"DIV",{class:!0});var ga=s(Ke);T(zL.$$.fragment,ga),GMo=i(ga),Sme=n(ga,"P",{});var eFt=s(Sme);OMo=r(eFt,"Instantiate one of the base model classes of the library from a pretrained model."),eFt.forEach(t),VMo=i(ga),Va=n(ga,"P",{});var p6=s(Va);XMo=r(p6,"The model class to instantiate is selected based on the "),Rme=n(p6,"CODE",{});var oFt=s(Rme);zMo=r(oFt,"model_type"),oFt.forEach(t),WMo=r(p6,` property of the config object (either
passed as an argument or loaded from `),Pme=n(p6,"CODE",{});var rFt=s(Pme);QMo=r(rFt,"pretrained_model_name_or_path"),rFt.forEach(t),UMo=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=n(p6,"CODE",{});var tFt=s(Bme);HMo=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),JMo=r(p6,":"),p6.forEach(t),YMo=i(ga),y=n(ga,"UL",{});var x=s(y);v_=n(x,"LI",{});var bSe=s(v_);Ime=n(bSe,"STRONG",{});var aFt=s(Ime);KMo=r(aFt,"albert"),aFt.forEach(t),ZMo=r(bSe," \u2014 "),BD=n(bSe,"A",{href:!0});var nFt=s(BD);eEo=r(nFt,"AlbertModel"),nFt.forEach(t),oEo=r(bSe," (ALBERT model)"),bSe.forEach(t),rEo=i(x),F_=n(x,"LI",{});var vSe=s(F_);Nme=n(vSe,"STRONG",{});var sFt=s(Nme);tEo=r(sFt,"bart"),sFt.forEach(t),aEo=r(vSe," \u2014 "),ID=n(vSe,"A",{href:!0});var lFt=s(ID);nEo=r(lFt,"BartModel"),lFt.forEach(t),sEo=r(vSe," (BART model)"),vSe.forEach(t),lEo=i(x),T_=n(x,"LI",{});var FSe=s(T_);qme=n(FSe,"STRONG",{});var iFt=s(qme);iEo=r(iFt,"beit"),iFt.forEach(t),dEo=r(FSe," \u2014 "),ND=n(FSe,"A",{href:!0});var dFt=s(ND);cEo=r(dFt,"BeitModel"),dFt.forEach(t),fEo=r(FSe," (BEiT model)"),FSe.forEach(t),mEo=i(x),M_=n(x,"LI",{});var TSe=s(M_);jme=n(TSe,"STRONG",{});var cFt=s(jme);gEo=r(cFt,"bert"),cFt.forEach(t),hEo=r(TSe," \u2014 "),qD=n(TSe,"A",{href:!0});var fFt=s(qD);pEo=r(fFt,"BertModel"),fFt.forEach(t),_Eo=r(TSe," (BERT model)"),TSe.forEach(t),uEo=i(x),E_=n(x,"LI",{});var MSe=s(E_);Dme=n(MSe,"STRONG",{});var mFt=s(Dme);bEo=r(mFt,"bert-generation"),mFt.forEach(t),vEo=r(MSe," \u2014 "),jD=n(MSe,"A",{href:!0});var gFt=s(jD);FEo=r(gFt,"BertGenerationEncoder"),gFt.forEach(t),TEo=r(MSe," (Bert Generation model)"),MSe.forEach(t),MEo=i(x),C_=n(x,"LI",{});var ESe=s(C_);Gme=n(ESe,"STRONG",{});var hFt=s(Gme);EEo=r(hFt,"big_bird"),hFt.forEach(t),CEo=r(ESe," \u2014 "),DD=n(ESe,"A",{href:!0});var pFt=s(DD);wEo=r(pFt,"BigBirdModel"),pFt.forEach(t),AEo=r(ESe," (BigBird model)"),ESe.forEach(t),LEo=i(x),w_=n(x,"LI",{});var CSe=s(w_);Ome=n(CSe,"STRONG",{});var _Ft=s(Ome);yEo=r(_Ft,"bigbird_pegasus"),_Ft.forEach(t),xEo=r(CSe," \u2014 "),GD=n(CSe,"A",{href:!0});var uFt=s(GD);$Eo=r(uFt,"BigBirdPegasusModel"),uFt.forEach(t),kEo=r(CSe," (BigBird-Pegasus model)"),CSe.forEach(t),SEo=i(x),A_=n(x,"LI",{});var wSe=s(A_);Vme=n(wSe,"STRONG",{});var bFt=s(Vme);REo=r(bFt,"blenderbot"),bFt.forEach(t),PEo=r(wSe," \u2014 "),OD=n(wSe,"A",{href:!0});var vFt=s(OD);BEo=r(vFt,"BlenderbotModel"),vFt.forEach(t),IEo=r(wSe," (Blenderbot model)"),wSe.forEach(t),NEo=i(x),L_=n(x,"LI",{});var ASe=s(L_);Xme=n(ASe,"STRONG",{});var FFt=s(Xme);qEo=r(FFt,"blenderbot-small"),FFt.forEach(t),jEo=r(ASe," \u2014 "),VD=n(ASe,"A",{href:!0});var TFt=s(VD);DEo=r(TFt,"BlenderbotSmallModel"),TFt.forEach(t),GEo=r(ASe," (BlenderbotSmall model)"),ASe.forEach(t),OEo=i(x),y_=n(x,"LI",{});var LSe=s(y_);zme=n(LSe,"STRONG",{});var MFt=s(zme);VEo=r(MFt,"bloom"),MFt.forEach(t),XEo=r(LSe," \u2014 "),XD=n(LSe,"A",{href:!0});var EFt=s(XD);zEo=r(EFt,"BloomModel"),EFt.forEach(t),WEo=r(LSe," (BLOOM model)"),LSe.forEach(t),QEo=i(x),x_=n(x,"LI",{});var ySe=s(x_);Wme=n(ySe,"STRONG",{});var CFt=s(Wme);UEo=r(CFt,"camembert"),CFt.forEach(t),HEo=r(ySe," \u2014 "),zD=n(ySe,"A",{href:!0});var wFt=s(zD);JEo=r(wFt,"CamembertModel"),wFt.forEach(t),YEo=r(ySe," (CamemBERT model)"),ySe.forEach(t),KEo=i(x),$_=n(x,"LI",{});var xSe=s($_);Qme=n(xSe,"STRONG",{});var AFt=s(Qme);ZEo=r(AFt,"canine"),AFt.forEach(t),e4o=r(xSe," \u2014 "),WD=n(xSe,"A",{href:!0});var LFt=s(WD);o4o=r(LFt,"CanineModel"),LFt.forEach(t),r4o=r(xSe," (CANINE model)"),xSe.forEach(t),t4o=i(x),k_=n(x,"LI",{});var $Se=s(k_);Ume=n($Se,"STRONG",{});var yFt=s(Ume);a4o=r(yFt,"clip"),yFt.forEach(t),n4o=r($Se," \u2014 "),QD=n($Se,"A",{href:!0});var xFt=s(QD);s4o=r(xFt,"CLIPModel"),xFt.forEach(t),l4o=r($Se," (CLIP model)"),$Se.forEach(t),i4o=i(x),S_=n(x,"LI",{});var kSe=s(S_);Hme=n(kSe,"STRONG",{});var $Ft=s(Hme);d4o=r($Ft,"codegen"),$Ft.forEach(t),c4o=r(kSe," \u2014 "),UD=n(kSe,"A",{href:!0});var kFt=s(UD);f4o=r(kFt,"CodeGenModel"),kFt.forEach(t),m4o=r(kSe," (CodeGen model)"),kSe.forEach(t),g4o=i(x),R_=n(x,"LI",{});var SSe=s(R_);Jme=n(SSe,"STRONG",{});var SFt=s(Jme);h4o=r(SFt,"convbert"),SFt.forEach(t),p4o=r(SSe," \u2014 "),HD=n(SSe,"A",{href:!0});var RFt=s(HD);_4o=r(RFt,"ConvBertModel"),RFt.forEach(t),u4o=r(SSe," (ConvBERT model)"),SSe.forEach(t),b4o=i(x),P_=n(x,"LI",{});var RSe=s(P_);Yme=n(RSe,"STRONG",{});var PFt=s(Yme);v4o=r(PFt,"convnext"),PFt.forEach(t),F4o=r(RSe," \u2014 "),JD=n(RSe,"A",{href:!0});var BFt=s(JD);T4o=r(BFt,"ConvNextModel"),BFt.forEach(t),M4o=r(RSe," (ConvNeXT model)"),RSe.forEach(t),E4o=i(x),B_=n(x,"LI",{});var PSe=s(B_);Kme=n(PSe,"STRONG",{});var IFt=s(Kme);C4o=r(IFt,"ctrl"),IFt.forEach(t),w4o=r(PSe," \u2014 "),YD=n(PSe,"A",{href:!0});var NFt=s(YD);A4o=r(NFt,"CTRLModel"),NFt.forEach(t),L4o=r(PSe," (CTRL model)"),PSe.forEach(t),y4o=i(x),I_=n(x,"LI",{});var BSe=s(I_);Zme=n(BSe,"STRONG",{});var qFt=s(Zme);x4o=r(qFt,"cvt"),qFt.forEach(t),$4o=r(BSe," \u2014 "),KD=n(BSe,"A",{href:!0});var jFt=s(KD);k4o=r(jFt,"CvtModel"),jFt.forEach(t),S4o=r(BSe," (CvT model)"),BSe.forEach(t),R4o=i(x),N_=n(x,"LI",{});var ISe=s(N_);ege=n(ISe,"STRONG",{});var DFt=s(ege);P4o=r(DFt,"data2vec-audio"),DFt.forEach(t),B4o=r(ISe," \u2014 "),ZD=n(ISe,"A",{href:!0});var GFt=s(ZD);I4o=r(GFt,"Data2VecAudioModel"),GFt.forEach(t),N4o=r(ISe," (Data2VecAudio model)"),ISe.forEach(t),q4o=i(x),q_=n(x,"LI",{});var NSe=s(q_);oge=n(NSe,"STRONG",{});var OFt=s(oge);j4o=r(OFt,"data2vec-text"),OFt.forEach(t),D4o=r(NSe," \u2014 "),eG=n(NSe,"A",{href:!0});var VFt=s(eG);G4o=r(VFt,"Data2VecTextModel"),VFt.forEach(t),O4o=r(NSe," (Data2VecText model)"),NSe.forEach(t),V4o=i(x),j_=n(x,"LI",{});var qSe=s(j_);rge=n(qSe,"STRONG",{});var XFt=s(rge);X4o=r(XFt,"data2vec-vision"),XFt.forEach(t),z4o=r(qSe," \u2014 "),oG=n(qSe,"A",{href:!0});var zFt=s(oG);W4o=r(zFt,"Data2VecVisionModel"),zFt.forEach(t),Q4o=r(qSe," (Data2VecVision model)"),qSe.forEach(t),U4o=i(x),D_=n(x,"LI",{});var jSe=s(D_);tge=n(jSe,"STRONG",{});var WFt=s(tge);H4o=r(WFt,"deberta"),WFt.forEach(t),J4o=r(jSe," \u2014 "),rG=n(jSe,"A",{href:!0});var QFt=s(rG);Y4o=r(QFt,"DebertaModel"),QFt.forEach(t),K4o=r(jSe," (DeBERTa model)"),jSe.forEach(t),Z4o=i(x),G_=n(x,"LI",{});var DSe=s(G_);age=n(DSe,"STRONG",{});var UFt=s(age);eCo=r(UFt,"deberta-v2"),UFt.forEach(t),oCo=r(DSe," \u2014 "),tG=n(DSe,"A",{href:!0});var HFt=s(tG);rCo=r(HFt,"DebertaV2Model"),HFt.forEach(t),tCo=r(DSe," (DeBERTa-v2 model)"),DSe.forEach(t),aCo=i(x),O_=n(x,"LI",{});var GSe=s(O_);nge=n(GSe,"STRONG",{});var JFt=s(nge);nCo=r(JFt,"decision_transformer"),JFt.forEach(t),sCo=r(GSe," \u2014 "),aG=n(GSe,"A",{href:!0});var YFt=s(aG);lCo=r(YFt,"DecisionTransformerModel"),YFt.forEach(t),iCo=r(GSe," (Decision Transformer model)"),GSe.forEach(t),dCo=i(x),V_=n(x,"LI",{});var OSe=s(V_);sge=n(OSe,"STRONG",{});var KFt=s(sge);cCo=r(KFt,"deit"),KFt.forEach(t),fCo=r(OSe," \u2014 "),nG=n(OSe,"A",{href:!0});var ZFt=s(nG);mCo=r(ZFt,"DeiTModel"),ZFt.forEach(t),gCo=r(OSe," (DeiT model)"),OSe.forEach(t),hCo=i(x),X_=n(x,"LI",{});var VSe=s(X_);lge=n(VSe,"STRONG",{});var eTt=s(lge);pCo=r(eTt,"detr"),eTt.forEach(t),_Co=r(VSe," \u2014 "),sG=n(VSe,"A",{href:!0});var oTt=s(sG);uCo=r(oTt,"DetrModel"),oTt.forEach(t),bCo=r(VSe," (DETR model)"),VSe.forEach(t),vCo=i(x),z_=n(x,"LI",{});var XSe=s(z_);ige=n(XSe,"STRONG",{});var rTt=s(ige);FCo=r(rTt,"distilbert"),rTt.forEach(t),TCo=r(XSe," \u2014 "),lG=n(XSe,"A",{href:!0});var tTt=s(lG);MCo=r(tTt,"DistilBertModel"),tTt.forEach(t),ECo=r(XSe," (DistilBERT model)"),XSe.forEach(t),CCo=i(x),W_=n(x,"LI",{});var zSe=s(W_);dge=n(zSe,"STRONG",{});var aTt=s(dge);wCo=r(aTt,"donut-swin"),aTt.forEach(t),ACo=r(zSe," \u2014 "),iG=n(zSe,"A",{href:!0});var nTt=s(iG);LCo=r(nTt,"DonutSwinModel"),nTt.forEach(t),yCo=r(zSe," (DonutSwin model)"),zSe.forEach(t),xCo=i(x),Q_=n(x,"LI",{});var WSe=s(Q_);cge=n(WSe,"STRONG",{});var sTt=s(cge);$Co=r(sTt,"dpr"),sTt.forEach(t),kCo=r(WSe," \u2014 "),dG=n(WSe,"A",{href:!0});var lTt=s(dG);SCo=r(lTt,"DPRQuestionEncoder"),lTt.forEach(t),RCo=r(WSe," (DPR model)"),WSe.forEach(t),PCo=i(x),U_=n(x,"LI",{});var QSe=s(U_);fge=n(QSe,"STRONG",{});var iTt=s(fge);BCo=r(iTt,"dpt"),iTt.forEach(t),ICo=r(QSe," \u2014 "),cG=n(QSe,"A",{href:!0});var dTt=s(cG);NCo=r(dTt,"DPTModel"),dTt.forEach(t),qCo=r(QSe," (DPT model)"),QSe.forEach(t),jCo=i(x),H_=n(x,"LI",{});var USe=s(H_);mge=n(USe,"STRONG",{});var cTt=s(mge);DCo=r(cTt,"electra"),cTt.forEach(t),GCo=r(USe," \u2014 "),fG=n(USe,"A",{href:!0});var fTt=s(fG);OCo=r(fTt,"ElectraModel"),fTt.forEach(t),VCo=r(USe," (ELECTRA model)"),USe.forEach(t),XCo=i(x),J_=n(x,"LI",{});var HSe=s(J_);gge=n(HSe,"STRONG",{});var mTt=s(gge);zCo=r(mTt,"flaubert"),mTt.forEach(t),WCo=r(HSe," \u2014 "),mG=n(HSe,"A",{href:!0});var gTt=s(mG);QCo=r(gTt,"FlaubertModel"),gTt.forEach(t),UCo=r(HSe," (FlauBERT model)"),HSe.forEach(t),HCo=i(x),Y_=n(x,"LI",{});var JSe=s(Y_);hge=n(JSe,"STRONG",{});var hTt=s(hge);JCo=r(hTt,"flava"),hTt.forEach(t),YCo=r(JSe," \u2014 "),gG=n(JSe,"A",{href:!0});var pTt=s(gG);KCo=r(pTt,"FlavaModel"),pTt.forEach(t),ZCo=r(JSe," (FLAVA model)"),JSe.forEach(t),e3o=i(x),K_=n(x,"LI",{});var YSe=s(K_);pge=n(YSe,"STRONG",{});var _Tt=s(pge);o3o=r(_Tt,"fnet"),_Tt.forEach(t),r3o=r(YSe," \u2014 "),hG=n(YSe,"A",{href:!0});var uTt=s(hG);t3o=r(uTt,"FNetModel"),uTt.forEach(t),a3o=r(YSe," (FNet model)"),YSe.forEach(t),n3o=i(x),Z_=n(x,"LI",{});var KSe=s(Z_);_ge=n(KSe,"STRONG",{});var bTt=s(_ge);s3o=r(bTt,"fsmt"),bTt.forEach(t),l3o=r(KSe," \u2014 "),pG=n(KSe,"A",{href:!0});var vTt=s(pG);i3o=r(vTt,"FSMTModel"),vTt.forEach(t),d3o=r(KSe," (FairSeq Machine-Translation model)"),KSe.forEach(t),c3o=i(x),nl=n(x,"LI",{});var eP=s(nl);uge=n(eP,"STRONG",{});var FTt=s(uge);f3o=r(FTt,"funnel"),FTt.forEach(t),m3o=r(eP," \u2014 "),_G=n(eP,"A",{href:!0});var TTt=s(_G);g3o=r(TTt,"FunnelModel"),TTt.forEach(t),h3o=r(eP," or "),uG=n(eP,"A",{href:!0});var MTt=s(uG);p3o=r(MTt,"FunnelBaseModel"),MTt.forEach(t),_3o=r(eP," (Funnel Transformer model)"),eP.forEach(t),u3o=i(x),eu=n(x,"LI",{});var ZSe=s(eu);bge=n(ZSe,"STRONG",{});var ETt=s(bge);b3o=r(ETt,"glpn"),ETt.forEach(t),v3o=r(ZSe," \u2014 "),bG=n(ZSe,"A",{href:!0});var CTt=s(bG);F3o=r(CTt,"GLPNModel"),CTt.forEach(t),T3o=r(ZSe," (GLPN model)"),ZSe.forEach(t),M3o=i(x),ou=n(x,"LI",{});var eRe=s(ou);vge=n(eRe,"STRONG",{});var wTt=s(vge);E3o=r(wTt,"gpt2"),wTt.forEach(t),C3o=r(eRe," \u2014 "),vG=n(eRe,"A",{href:!0});var ATt=s(vG);w3o=r(ATt,"GPT2Model"),ATt.forEach(t),A3o=r(eRe," (OpenAI GPT-2 model)"),eRe.forEach(t),L3o=i(x),ru=n(x,"LI",{});var oRe=s(ru);Fge=n(oRe,"STRONG",{});var LTt=s(Fge);y3o=r(LTt,"gpt_neo"),LTt.forEach(t),x3o=r(oRe," \u2014 "),FG=n(oRe,"A",{href:!0});var yTt=s(FG);$3o=r(yTt,"GPTNeoModel"),yTt.forEach(t),k3o=r(oRe," (GPT Neo model)"),oRe.forEach(t),S3o=i(x),tu=n(x,"LI",{});var rRe=s(tu);Tge=n(rRe,"STRONG",{});var xTt=s(Tge);R3o=r(xTt,"gpt_neox"),xTt.forEach(t),P3o=r(rRe," \u2014 "),TG=n(rRe,"A",{href:!0});var $Tt=s(TG);B3o=r($Tt,"GPTNeoXModel"),$Tt.forEach(t),I3o=r(rRe," (GPT NeoX model)"),rRe.forEach(t),N3o=i(x),au=n(x,"LI",{});var tRe=s(au);Mge=n(tRe,"STRONG",{});var kTt=s(Mge);q3o=r(kTt,"gptj"),kTt.forEach(t),j3o=r(tRe," \u2014 "),MG=n(tRe,"A",{href:!0});var STt=s(MG);D3o=r(STt,"GPTJModel"),STt.forEach(t),G3o=r(tRe," (GPT-J model)"),tRe.forEach(t),O3o=i(x),nu=n(x,"LI",{});var aRe=s(nu);Ege=n(aRe,"STRONG",{});var RTt=s(Ege);V3o=r(RTt,"groupvit"),RTt.forEach(t),X3o=r(aRe," \u2014 "),EG=n(aRe,"A",{href:!0});var PTt=s(EG);z3o=r(PTt,"GroupViTModel"),PTt.forEach(t),W3o=r(aRe," (GroupViT model)"),aRe.forEach(t),Q3o=i(x),su=n(x,"LI",{});var nRe=s(su);Cge=n(nRe,"STRONG",{});var BTt=s(Cge);U3o=r(BTt,"hubert"),BTt.forEach(t),H3o=r(nRe," \u2014 "),CG=n(nRe,"A",{href:!0});var ITt=s(CG);J3o=r(ITt,"HubertModel"),ITt.forEach(t),Y3o=r(nRe," (Hubert model)"),nRe.forEach(t),K3o=i(x),lu=n(x,"LI",{});var sRe=s(lu);wge=n(sRe,"STRONG",{});var NTt=s(wge);Z3o=r(NTt,"ibert"),NTt.forEach(t),e0o=r(sRe," \u2014 "),wG=n(sRe,"A",{href:!0});var qTt=s(wG);o0o=r(qTt,"IBertModel"),qTt.forEach(t),r0o=r(sRe," (I-BERT model)"),sRe.forEach(t),t0o=i(x),iu=n(x,"LI",{});var lRe=s(iu);Age=n(lRe,"STRONG",{});var jTt=s(Age);a0o=r(jTt,"imagegpt"),jTt.forEach(t),n0o=r(lRe," \u2014 "),AG=n(lRe,"A",{href:!0});var DTt=s(AG);s0o=r(DTt,"ImageGPTModel"),DTt.forEach(t),l0o=r(lRe," (ImageGPT model)"),lRe.forEach(t),i0o=i(x),du=n(x,"LI",{});var iRe=s(du);Lge=n(iRe,"STRONG",{});var GTt=s(Lge);d0o=r(GTt,"layoutlm"),GTt.forEach(t),c0o=r(iRe," \u2014 "),LG=n(iRe,"A",{href:!0});var OTt=s(LG);f0o=r(OTt,"LayoutLMModel"),OTt.forEach(t),m0o=r(iRe," (LayoutLM model)"),iRe.forEach(t),g0o=i(x),cu=n(x,"LI",{});var dRe=s(cu);yge=n(dRe,"STRONG",{});var VTt=s(yge);h0o=r(VTt,"layoutlmv2"),VTt.forEach(t),p0o=r(dRe," \u2014 "),yG=n(dRe,"A",{href:!0});var XTt=s(yG);_0o=r(XTt,"LayoutLMv2Model"),XTt.forEach(t),u0o=r(dRe," (LayoutLMv2 model)"),dRe.forEach(t),b0o=i(x),fu=n(x,"LI",{});var cRe=s(fu);xge=n(cRe,"STRONG",{});var zTt=s(xge);v0o=r(zTt,"layoutlmv3"),zTt.forEach(t),F0o=r(cRe," \u2014 "),xG=n(cRe,"A",{href:!0});var WTt=s(xG);T0o=r(WTt,"LayoutLMv3Model"),WTt.forEach(t),M0o=r(cRe," (LayoutLMv3 model)"),cRe.forEach(t),E0o=i(x),mu=n(x,"LI",{});var fRe=s(mu);$ge=n(fRe,"STRONG",{});var QTt=s($ge);C0o=r(QTt,"led"),QTt.forEach(t),w0o=r(fRe," \u2014 "),$G=n(fRe,"A",{href:!0});var UTt=s($G);A0o=r(UTt,"LEDModel"),UTt.forEach(t),L0o=r(fRe," (LED model)"),fRe.forEach(t),y0o=i(x),gu=n(x,"LI",{});var mRe=s(gu);kge=n(mRe,"STRONG",{});var HTt=s(kge);x0o=r(HTt,"levit"),HTt.forEach(t),$0o=r(mRe," \u2014 "),kG=n(mRe,"A",{href:!0});var JTt=s(kG);k0o=r(JTt,"LevitModel"),JTt.forEach(t),S0o=r(mRe," (LeViT model)"),mRe.forEach(t),R0o=i(x),hu=n(x,"LI",{});var gRe=s(hu);Sge=n(gRe,"STRONG",{});var YTt=s(Sge);P0o=r(YTt,"longformer"),YTt.forEach(t),B0o=r(gRe," \u2014 "),SG=n(gRe,"A",{href:!0});var KTt=s(SG);I0o=r(KTt,"LongformerModel"),KTt.forEach(t),N0o=r(gRe," (Longformer model)"),gRe.forEach(t),q0o=i(x),pu=n(x,"LI",{});var hRe=s(pu);Rge=n(hRe,"STRONG",{});var ZTt=s(Rge);j0o=r(ZTt,"longt5"),ZTt.forEach(t),D0o=r(hRe," \u2014 "),RG=n(hRe,"A",{href:!0});var e7t=s(RG);G0o=r(e7t,"LongT5Model"),e7t.forEach(t),O0o=r(hRe," (LongT5 model)"),hRe.forEach(t),V0o=i(x),_u=n(x,"LI",{});var pRe=s(_u);Pge=n(pRe,"STRONG",{});var o7t=s(Pge);X0o=r(o7t,"luke"),o7t.forEach(t),z0o=r(pRe," \u2014 "),PG=n(pRe,"A",{href:!0});var r7t=s(PG);W0o=r(r7t,"LukeModel"),r7t.forEach(t),Q0o=r(pRe," (LUKE model)"),pRe.forEach(t),U0o=i(x),uu=n(x,"LI",{});var _Re=s(uu);Bge=n(_Re,"STRONG",{});var t7t=s(Bge);H0o=r(t7t,"lxmert"),t7t.forEach(t),J0o=r(_Re," \u2014 "),BG=n(_Re,"A",{href:!0});var a7t=s(BG);Y0o=r(a7t,"LxmertModel"),a7t.forEach(t),K0o=r(_Re," (LXMERT model)"),_Re.forEach(t),Z0o=i(x),bu=n(x,"LI",{});var uRe=s(bu);Ige=n(uRe,"STRONG",{});var n7t=s(Ige);ewo=r(n7t,"m2m_100"),n7t.forEach(t),owo=r(uRe," \u2014 "),IG=n(uRe,"A",{href:!0});var s7t=s(IG);rwo=r(s7t,"M2M100Model"),s7t.forEach(t),two=r(uRe," (M2M100 model)"),uRe.forEach(t),awo=i(x),vu=n(x,"LI",{});var bRe=s(vu);Nge=n(bRe,"STRONG",{});var l7t=s(Nge);nwo=r(l7t,"marian"),l7t.forEach(t),swo=r(bRe," \u2014 "),NG=n(bRe,"A",{href:!0});var i7t=s(NG);lwo=r(i7t,"MarianModel"),i7t.forEach(t),iwo=r(bRe," (Marian model)"),bRe.forEach(t),dwo=i(x),Fu=n(x,"LI",{});var vRe=s(Fu);qge=n(vRe,"STRONG",{});var d7t=s(qge);cwo=r(d7t,"maskformer"),d7t.forEach(t),fwo=r(vRe," \u2014 "),qG=n(vRe,"A",{href:!0});var c7t=s(qG);mwo=r(c7t,"MaskFormerModel"),c7t.forEach(t),gwo=r(vRe," (MaskFormer model)"),vRe.forEach(t),hwo=i(x),Tu=n(x,"LI",{});var FRe=s(Tu);jge=n(FRe,"STRONG",{});var f7t=s(jge);pwo=r(f7t,"mbart"),f7t.forEach(t),_wo=r(FRe," \u2014 "),jG=n(FRe,"A",{href:!0});var m7t=s(jG);uwo=r(m7t,"MBartModel"),m7t.forEach(t),bwo=r(FRe," (mBART model)"),FRe.forEach(t),vwo=i(x),Mu=n(x,"LI",{});var TRe=s(Mu);Dge=n(TRe,"STRONG",{});var g7t=s(Dge);Fwo=r(g7t,"mctct"),g7t.forEach(t),Two=r(TRe," \u2014 "),DG=n(TRe,"A",{href:!0});var h7t=s(DG);Mwo=r(h7t,"MCTCTModel"),h7t.forEach(t),Ewo=r(TRe," (M-CTC-T model)"),TRe.forEach(t),Cwo=i(x),Eu=n(x,"LI",{});var MRe=s(Eu);Gge=n(MRe,"STRONG",{});var p7t=s(Gge);wwo=r(p7t,"megatron-bert"),p7t.forEach(t),Awo=r(MRe," \u2014 "),GG=n(MRe,"A",{href:!0});var _7t=s(GG);Lwo=r(_7t,"MegatronBertModel"),_7t.forEach(t),ywo=r(MRe," (Megatron-BERT model)"),MRe.forEach(t),xwo=i(x),Cu=n(x,"LI",{});var ERe=s(Cu);Oge=n(ERe,"STRONG",{});var u7t=s(Oge);$wo=r(u7t,"mobilebert"),u7t.forEach(t),kwo=r(ERe," \u2014 "),OG=n(ERe,"A",{href:!0});var b7t=s(OG);Swo=r(b7t,"MobileBertModel"),b7t.forEach(t),Rwo=r(ERe," (MobileBERT model)"),ERe.forEach(t),Pwo=i(x),wu=n(x,"LI",{});var CRe=s(wu);Vge=n(CRe,"STRONG",{});var v7t=s(Vge);Bwo=r(v7t,"mobilevit"),v7t.forEach(t),Iwo=r(CRe," \u2014 "),VG=n(CRe,"A",{href:!0});var F7t=s(VG);Nwo=r(F7t,"MobileViTModel"),F7t.forEach(t),qwo=r(CRe," (MobileViT model)"),CRe.forEach(t),jwo=i(x),Au=n(x,"LI",{});var wRe=s(Au);Xge=n(wRe,"STRONG",{});var T7t=s(Xge);Dwo=r(T7t,"mpnet"),T7t.forEach(t),Gwo=r(wRe," \u2014 "),XG=n(wRe,"A",{href:!0});var M7t=s(XG);Owo=r(M7t,"MPNetModel"),M7t.forEach(t),Vwo=r(wRe," (MPNet model)"),wRe.forEach(t),Xwo=i(x),Lu=n(x,"LI",{});var ARe=s(Lu);zge=n(ARe,"STRONG",{});var E7t=s(zge);zwo=r(E7t,"mt5"),E7t.forEach(t),Wwo=r(ARe," \u2014 "),zG=n(ARe,"A",{href:!0});var C7t=s(zG);Qwo=r(C7t,"MT5Model"),C7t.forEach(t),Uwo=r(ARe," (MT5 model)"),ARe.forEach(t),Hwo=i(x),yu=n(x,"LI",{});var LRe=s(yu);Wge=n(LRe,"STRONG",{});var w7t=s(Wge);Jwo=r(w7t,"mvp"),w7t.forEach(t),Ywo=r(LRe," \u2014 "),WG=n(LRe,"A",{href:!0});var A7t=s(WG);Kwo=r(A7t,"MvpModel"),A7t.forEach(t),Zwo=r(LRe," (MVP model)"),LRe.forEach(t),e6o=i(x),xu=n(x,"LI",{});var yRe=s(xu);Qge=n(yRe,"STRONG",{});var L7t=s(Qge);o6o=r(L7t,"nezha"),L7t.forEach(t),r6o=r(yRe," \u2014 "),QG=n(yRe,"A",{href:!0});var y7t=s(QG);t6o=r(y7t,"NezhaModel"),y7t.forEach(t),a6o=r(yRe," (Nezha model)"),yRe.forEach(t),n6o=i(x),$u=n(x,"LI",{});var xRe=s($u);Uge=n(xRe,"STRONG",{});var x7t=s(Uge);s6o=r(x7t,"nllb"),x7t.forEach(t),l6o=r(xRe," \u2014 "),UG=n(xRe,"A",{href:!0});var $7t=s(UG);i6o=r($7t,"M2M100Model"),$7t.forEach(t),d6o=r(xRe," (NLLB model)"),xRe.forEach(t),c6o=i(x),ku=n(x,"LI",{});var $Re=s(ku);Hge=n($Re,"STRONG",{});var k7t=s(Hge);f6o=r(k7t,"nystromformer"),k7t.forEach(t),m6o=r($Re," \u2014 "),HG=n($Re,"A",{href:!0});var S7t=s(HG);g6o=r(S7t,"NystromformerModel"),S7t.forEach(t),h6o=r($Re," (Nystr\xF6mformer model)"),$Re.forEach(t),p6o=i(x),Su=n(x,"LI",{});var kRe=s(Su);Jge=n(kRe,"STRONG",{});var R7t=s(Jge);_6o=r(R7t,"openai-gpt"),R7t.forEach(t),u6o=r(kRe," \u2014 "),JG=n(kRe,"A",{href:!0});var P7t=s(JG);b6o=r(P7t,"OpenAIGPTModel"),P7t.forEach(t),v6o=r(kRe," (OpenAI GPT model)"),kRe.forEach(t),F6o=i(x),Ru=n(x,"LI",{});var SRe=s(Ru);Yge=n(SRe,"STRONG",{});var B7t=s(Yge);T6o=r(B7t,"opt"),B7t.forEach(t),M6o=r(SRe," \u2014 "),YG=n(SRe,"A",{href:!0});var I7t=s(YG);E6o=r(I7t,"OPTModel"),I7t.forEach(t),C6o=r(SRe," (OPT model)"),SRe.forEach(t),w6o=i(x),Pu=n(x,"LI",{});var RRe=s(Pu);Kge=n(RRe,"STRONG",{});var N7t=s(Kge);A6o=r(N7t,"owlvit"),N7t.forEach(t),L6o=r(RRe," \u2014 "),KG=n(RRe,"A",{href:!0});var q7t=s(KG);y6o=r(q7t,"OwlViTModel"),q7t.forEach(t),x6o=r(RRe," (OWL-ViT model)"),RRe.forEach(t),$6o=i(x),Bu=n(x,"LI",{});var PRe=s(Bu);Zge=n(PRe,"STRONG",{});var j7t=s(Zge);k6o=r(j7t,"pegasus"),j7t.forEach(t),S6o=r(PRe," \u2014 "),ZG=n(PRe,"A",{href:!0});var D7t=s(ZG);R6o=r(D7t,"PegasusModel"),D7t.forEach(t),P6o=r(PRe," (Pegasus model)"),PRe.forEach(t),B6o=i(x),Iu=n(x,"LI",{});var BRe=s(Iu);ehe=n(BRe,"STRONG",{});var G7t=s(ehe);I6o=r(G7t,"perceiver"),G7t.forEach(t),N6o=r(BRe," \u2014 "),eO=n(BRe,"A",{href:!0});var O7t=s(eO);q6o=r(O7t,"PerceiverModel"),O7t.forEach(t),j6o=r(BRe," (Perceiver model)"),BRe.forEach(t),D6o=i(x),Nu=n(x,"LI",{});var IRe=s(Nu);ohe=n(IRe,"STRONG",{});var V7t=s(ohe);G6o=r(V7t,"plbart"),V7t.forEach(t),O6o=r(IRe," \u2014 "),oO=n(IRe,"A",{href:!0});var X7t=s(oO);V6o=r(X7t,"PLBartModel"),X7t.forEach(t),X6o=r(IRe," (PLBart model)"),IRe.forEach(t),z6o=i(x),qu=n(x,"LI",{});var NRe=s(qu);rhe=n(NRe,"STRONG",{});var z7t=s(rhe);W6o=r(z7t,"poolformer"),z7t.forEach(t),Q6o=r(NRe," \u2014 "),rO=n(NRe,"A",{href:!0});var W7t=s(rO);U6o=r(W7t,"PoolFormerModel"),W7t.forEach(t),H6o=r(NRe," (PoolFormer model)"),NRe.forEach(t),J6o=i(x),ju=n(x,"LI",{});var qRe=s(ju);the=n(qRe,"STRONG",{});var Q7t=s(the);Y6o=r(Q7t,"prophetnet"),Q7t.forEach(t),K6o=r(qRe," \u2014 "),tO=n(qRe,"A",{href:!0});var U7t=s(tO);Z6o=r(U7t,"ProphetNetModel"),U7t.forEach(t),eAo=r(qRe," (ProphetNet model)"),qRe.forEach(t),oAo=i(x),Du=n(x,"LI",{});var jRe=s(Du);ahe=n(jRe,"STRONG",{});var H7t=s(ahe);rAo=r(H7t,"qdqbert"),H7t.forEach(t),tAo=r(jRe," \u2014 "),aO=n(jRe,"A",{href:!0});var J7t=s(aO);aAo=r(J7t,"QDQBertModel"),J7t.forEach(t),nAo=r(jRe," (QDQBert model)"),jRe.forEach(t),sAo=i(x),Gu=n(x,"LI",{});var DRe=s(Gu);nhe=n(DRe,"STRONG",{});var Y7t=s(nhe);lAo=r(Y7t,"reformer"),Y7t.forEach(t),iAo=r(DRe," \u2014 "),nO=n(DRe,"A",{href:!0});var K7t=s(nO);dAo=r(K7t,"ReformerModel"),K7t.forEach(t),cAo=r(DRe," (Reformer model)"),DRe.forEach(t),fAo=i(x),Ou=n(x,"LI",{});var GRe=s(Ou);she=n(GRe,"STRONG",{});var Z7t=s(she);mAo=r(Z7t,"regnet"),Z7t.forEach(t),gAo=r(GRe," \u2014 "),sO=n(GRe,"A",{href:!0});var e8t=s(sO);hAo=r(e8t,"RegNetModel"),e8t.forEach(t),pAo=r(GRe," (RegNet model)"),GRe.forEach(t),_Ao=i(x),Vu=n(x,"LI",{});var ORe=s(Vu);lhe=n(ORe,"STRONG",{});var o8t=s(lhe);uAo=r(o8t,"rembert"),o8t.forEach(t),bAo=r(ORe," \u2014 "),lO=n(ORe,"A",{href:!0});var r8t=s(lO);vAo=r(r8t,"RemBertModel"),r8t.forEach(t),FAo=r(ORe," (RemBERT model)"),ORe.forEach(t),TAo=i(x),Xu=n(x,"LI",{});var VRe=s(Xu);ihe=n(VRe,"STRONG",{});var t8t=s(ihe);MAo=r(t8t,"resnet"),t8t.forEach(t),EAo=r(VRe," \u2014 "),iO=n(VRe,"A",{href:!0});var a8t=s(iO);CAo=r(a8t,"ResNetModel"),a8t.forEach(t),wAo=r(VRe," (ResNet model)"),VRe.forEach(t),AAo=i(x),zu=n(x,"LI",{});var XRe=s(zu);dhe=n(XRe,"STRONG",{});var n8t=s(dhe);LAo=r(n8t,"retribert"),n8t.forEach(t),yAo=r(XRe," \u2014 "),dO=n(XRe,"A",{href:!0});var s8t=s(dO);xAo=r(s8t,"RetriBertModel"),s8t.forEach(t),$Ao=r(XRe," (RetriBERT model)"),XRe.forEach(t),kAo=i(x),Wu=n(x,"LI",{});var zRe=s(Wu);che=n(zRe,"STRONG",{});var l8t=s(che);SAo=r(l8t,"roberta"),l8t.forEach(t),RAo=r(zRe," \u2014 "),cO=n(zRe,"A",{href:!0});var i8t=s(cO);PAo=r(i8t,"RobertaModel"),i8t.forEach(t),BAo=r(zRe," (RoBERTa model)"),zRe.forEach(t),IAo=i(x),Qu=n(x,"LI",{});var WRe=s(Qu);fhe=n(WRe,"STRONG",{});var d8t=s(fhe);NAo=r(d8t,"roformer"),d8t.forEach(t),qAo=r(WRe," \u2014 "),fO=n(WRe,"A",{href:!0});var c8t=s(fO);jAo=r(c8t,"RoFormerModel"),c8t.forEach(t),DAo=r(WRe," (RoFormer model)"),WRe.forEach(t),GAo=i(x),Uu=n(x,"LI",{});var QRe=s(Uu);mhe=n(QRe,"STRONG",{});var f8t=s(mhe);OAo=r(f8t,"segformer"),f8t.forEach(t),VAo=r(QRe," \u2014 "),mO=n(QRe,"A",{href:!0});var m8t=s(mO);XAo=r(m8t,"SegformerModel"),m8t.forEach(t),zAo=r(QRe," (SegFormer model)"),QRe.forEach(t),WAo=i(x),Hu=n(x,"LI",{});var URe=s(Hu);ghe=n(URe,"STRONG",{});var g8t=s(ghe);QAo=r(g8t,"sew"),g8t.forEach(t),UAo=r(URe," \u2014 "),gO=n(URe,"A",{href:!0});var h8t=s(gO);HAo=r(h8t,"SEWModel"),h8t.forEach(t),JAo=r(URe," (SEW model)"),URe.forEach(t),YAo=i(x),Ju=n(x,"LI",{});var HRe=s(Ju);hhe=n(HRe,"STRONG",{});var p8t=s(hhe);KAo=r(p8t,"sew-d"),p8t.forEach(t),ZAo=r(HRe," \u2014 "),hO=n(HRe,"A",{href:!0});var _8t=s(hO);eLo=r(_8t,"SEWDModel"),_8t.forEach(t),oLo=r(HRe," (SEW-D model)"),HRe.forEach(t),rLo=i(x),Yu=n(x,"LI",{});var JRe=s(Yu);phe=n(JRe,"STRONG",{});var u8t=s(phe);tLo=r(u8t,"speech_to_text"),u8t.forEach(t),aLo=r(JRe," \u2014 "),pO=n(JRe,"A",{href:!0});var b8t=s(pO);nLo=r(b8t,"Speech2TextModel"),b8t.forEach(t),sLo=r(JRe," (Speech2Text model)"),JRe.forEach(t),lLo=i(x),Ku=n(x,"LI",{});var YRe=s(Ku);_he=n(YRe,"STRONG",{});var v8t=s(_he);iLo=r(v8t,"splinter"),v8t.forEach(t),dLo=r(YRe," \u2014 "),_O=n(YRe,"A",{href:!0});var F8t=s(_O);cLo=r(F8t,"SplinterModel"),F8t.forEach(t),fLo=r(YRe," (Splinter model)"),YRe.forEach(t),mLo=i(x),Zu=n(x,"LI",{});var KRe=s(Zu);uhe=n(KRe,"STRONG",{});var T8t=s(uhe);gLo=r(T8t,"squeezebert"),T8t.forEach(t),hLo=r(KRe," \u2014 "),uO=n(KRe,"A",{href:!0});var M8t=s(uO);pLo=r(M8t,"SqueezeBertModel"),M8t.forEach(t),_Lo=r(KRe," (SqueezeBERT model)"),KRe.forEach(t),uLo=i(x),e1=n(x,"LI",{});var ZRe=s(e1);bhe=n(ZRe,"STRONG",{});var E8t=s(bhe);bLo=r(E8t,"swin"),E8t.forEach(t),vLo=r(ZRe," \u2014 "),bO=n(ZRe,"A",{href:!0});var C8t=s(bO);FLo=r(C8t,"SwinModel"),C8t.forEach(t),TLo=r(ZRe," (Swin Transformer model)"),ZRe.forEach(t),MLo=i(x),o1=n(x,"LI",{});var ePe=s(o1);vhe=n(ePe,"STRONG",{});var w8t=s(vhe);ELo=r(w8t,"swinv2"),w8t.forEach(t),CLo=r(ePe," \u2014 "),vO=n(ePe,"A",{href:!0});var A8t=s(vO);wLo=r(A8t,"Swinv2Model"),A8t.forEach(t),ALo=r(ePe," (Swin Transformer V2 model)"),ePe.forEach(t),LLo=i(x),r1=n(x,"LI",{});var oPe=s(r1);Fhe=n(oPe,"STRONG",{});var L8t=s(Fhe);yLo=r(L8t,"t5"),L8t.forEach(t),xLo=r(oPe," \u2014 "),FO=n(oPe,"A",{href:!0});var y8t=s(FO);$Lo=r(y8t,"T5Model"),y8t.forEach(t),kLo=r(oPe," (T5 model)"),oPe.forEach(t),SLo=i(x),t1=n(x,"LI",{});var rPe=s(t1);The=n(rPe,"STRONG",{});var x8t=s(The);RLo=r(x8t,"tapas"),x8t.forEach(t),PLo=r(rPe," \u2014 "),TO=n(rPe,"A",{href:!0});var $8t=s(TO);BLo=r($8t,"TapasModel"),$8t.forEach(t),ILo=r(rPe," (TAPAS model)"),rPe.forEach(t),NLo=i(x),a1=n(x,"LI",{});var tPe=s(a1);Mhe=n(tPe,"STRONG",{});var k8t=s(Mhe);qLo=r(k8t,"trajectory_transformer"),k8t.forEach(t),jLo=r(tPe," \u2014 "),MO=n(tPe,"A",{href:!0});var S8t=s(MO);DLo=r(S8t,"TrajectoryTransformerModel"),S8t.forEach(t),GLo=r(tPe," (Trajectory Transformer model)"),tPe.forEach(t),OLo=i(x),n1=n(x,"LI",{});var aPe=s(n1);Ehe=n(aPe,"STRONG",{});var R8t=s(Ehe);VLo=r(R8t,"transfo-xl"),R8t.forEach(t),XLo=r(aPe," \u2014 "),EO=n(aPe,"A",{href:!0});var P8t=s(EO);zLo=r(P8t,"TransfoXLModel"),P8t.forEach(t),WLo=r(aPe," (Transformer-XL model)"),aPe.forEach(t),QLo=i(x),s1=n(x,"LI",{});var nPe=s(s1);Che=n(nPe,"STRONG",{});var B8t=s(Che);ULo=r(B8t,"unispeech"),B8t.forEach(t),HLo=r(nPe," \u2014 "),CO=n(nPe,"A",{href:!0});var I8t=s(CO);JLo=r(I8t,"UniSpeechModel"),I8t.forEach(t),YLo=r(nPe," (UniSpeech model)"),nPe.forEach(t),KLo=i(x),l1=n(x,"LI",{});var sPe=s(l1);whe=n(sPe,"STRONG",{});var N8t=s(whe);ZLo=r(N8t,"unispeech-sat"),N8t.forEach(t),eyo=r(sPe," \u2014 "),wO=n(sPe,"A",{href:!0});var q8t=s(wO);oyo=r(q8t,"UniSpeechSatModel"),q8t.forEach(t),ryo=r(sPe," (UniSpeechSat model)"),sPe.forEach(t),tyo=i(x),i1=n(x,"LI",{});var lPe=s(i1);Ahe=n(lPe,"STRONG",{});var j8t=s(Ahe);ayo=r(j8t,"van"),j8t.forEach(t),nyo=r(lPe," \u2014 "),AO=n(lPe,"A",{href:!0});var D8t=s(AO);syo=r(D8t,"VanModel"),D8t.forEach(t),lyo=r(lPe," (VAN model)"),lPe.forEach(t),iyo=i(x),d1=n(x,"LI",{});var iPe=s(d1);Lhe=n(iPe,"STRONG",{});var G8t=s(Lhe);dyo=r(G8t,"videomae"),G8t.forEach(t),cyo=r(iPe," \u2014 "),LO=n(iPe,"A",{href:!0});var O8t=s(LO);fyo=r(O8t,"VideoMAEModel"),O8t.forEach(t),myo=r(iPe," (VideoMAE model)"),iPe.forEach(t),gyo=i(x),c1=n(x,"LI",{});var dPe=s(c1);yhe=n(dPe,"STRONG",{});var V8t=s(yhe);hyo=r(V8t,"vilt"),V8t.forEach(t),pyo=r(dPe," \u2014 "),yO=n(dPe,"A",{href:!0});var X8t=s(yO);_yo=r(X8t,"ViltModel"),X8t.forEach(t),uyo=r(dPe," (ViLT model)"),dPe.forEach(t),byo=i(x),f1=n(x,"LI",{});var cPe=s(f1);xhe=n(cPe,"STRONG",{});var z8t=s(xhe);vyo=r(z8t,"vision-text-dual-encoder"),z8t.forEach(t),Fyo=r(cPe," \u2014 "),xO=n(cPe,"A",{href:!0});var W8t=s(xO);Tyo=r(W8t,"VisionTextDualEncoderModel"),W8t.forEach(t),Myo=r(cPe," (VisionTextDualEncoder model)"),cPe.forEach(t),Eyo=i(x),m1=n(x,"LI",{});var fPe=s(m1);$he=n(fPe,"STRONG",{});var Q8t=s($he);Cyo=r(Q8t,"visual_bert"),Q8t.forEach(t),wyo=r(fPe," \u2014 "),$O=n(fPe,"A",{href:!0});var U8t=s($O);Ayo=r(U8t,"VisualBertModel"),U8t.forEach(t),Lyo=r(fPe," (VisualBERT model)"),fPe.forEach(t),yyo=i(x),g1=n(x,"LI",{});var mPe=s(g1);khe=n(mPe,"STRONG",{});var H8t=s(khe);xyo=r(H8t,"vit"),H8t.forEach(t),$yo=r(mPe," \u2014 "),kO=n(mPe,"A",{href:!0});var J8t=s(kO);kyo=r(J8t,"ViTModel"),J8t.forEach(t),Syo=r(mPe," (ViT model)"),mPe.forEach(t),Ryo=i(x),h1=n(x,"LI",{});var gPe=s(h1);She=n(gPe,"STRONG",{});var Y8t=s(She);Pyo=r(Y8t,"vit_mae"),Y8t.forEach(t),Byo=r(gPe," \u2014 "),SO=n(gPe,"A",{href:!0});var K8t=s(SO);Iyo=r(K8t,"ViTMAEModel"),K8t.forEach(t),Nyo=r(gPe," (ViTMAE model)"),gPe.forEach(t),qyo=i(x),p1=n(x,"LI",{});var hPe=s(p1);Rhe=n(hPe,"STRONG",{});var Z8t=s(Rhe);jyo=r(Z8t,"wav2vec2"),Z8t.forEach(t),Dyo=r(hPe," \u2014 "),RO=n(hPe,"A",{href:!0});var e9t=s(RO);Gyo=r(e9t,"Wav2Vec2Model"),e9t.forEach(t),Oyo=r(hPe," (Wav2Vec2 model)"),hPe.forEach(t),Vyo=i(x),_1=n(x,"LI",{});var pPe=s(_1);Phe=n(pPe,"STRONG",{});var o9t=s(Phe);Xyo=r(o9t,"wav2vec2-conformer"),o9t.forEach(t),zyo=r(pPe," \u2014 "),PO=n(pPe,"A",{href:!0});var r9t=s(PO);Wyo=r(r9t,"Wav2Vec2ConformerModel"),r9t.forEach(t),Qyo=r(pPe," (Wav2Vec2-Conformer model)"),pPe.forEach(t),Uyo=i(x),u1=n(x,"LI",{});var _Pe=s(u1);Bhe=n(_Pe,"STRONG",{});var t9t=s(Bhe);Hyo=r(t9t,"wavlm"),t9t.forEach(t),Jyo=r(_Pe," \u2014 "),BO=n(_Pe,"A",{href:!0});var a9t=s(BO);Yyo=r(a9t,"WavLMModel"),a9t.forEach(t),Kyo=r(_Pe," (WavLM model)"),_Pe.forEach(t),Zyo=i(x),b1=n(x,"LI",{});var uPe=s(b1);Ihe=n(uPe,"STRONG",{});var n9t=s(Ihe);exo=r(n9t,"xglm"),n9t.forEach(t),oxo=r(uPe," \u2014 "),IO=n(uPe,"A",{href:!0});var s9t=s(IO);rxo=r(s9t,"XGLMModel"),s9t.forEach(t),txo=r(uPe," (XGLM model)"),uPe.forEach(t),axo=i(x),v1=n(x,"LI",{});var bPe=s(v1);Nhe=n(bPe,"STRONG",{});var l9t=s(Nhe);nxo=r(l9t,"xlm"),l9t.forEach(t),sxo=r(bPe," \u2014 "),NO=n(bPe,"A",{href:!0});var i9t=s(NO);lxo=r(i9t,"XLMModel"),i9t.forEach(t),ixo=r(bPe," (XLM model)"),bPe.forEach(t),dxo=i(x),F1=n(x,"LI",{});var vPe=s(F1);qhe=n(vPe,"STRONG",{});var d9t=s(qhe);cxo=r(d9t,"xlm-prophetnet"),d9t.forEach(t),fxo=r(vPe," \u2014 "),qO=n(vPe,"A",{href:!0});var c9t=s(qO);mxo=r(c9t,"XLMProphetNetModel"),c9t.forEach(t),gxo=r(vPe," (XLM-ProphetNet model)"),vPe.forEach(t),hxo=i(x),T1=n(x,"LI",{});var FPe=s(T1);jhe=n(FPe,"STRONG",{});var f9t=s(jhe);pxo=r(f9t,"xlm-roberta"),f9t.forEach(t),_xo=r(FPe," \u2014 "),jO=n(FPe,"A",{href:!0});var m9t=s(jO);uxo=r(m9t,"XLMRobertaModel"),m9t.forEach(t),bxo=r(FPe," (XLM-RoBERTa model)"),FPe.forEach(t),vxo=i(x),M1=n(x,"LI",{});var TPe=s(M1);Dhe=n(TPe,"STRONG",{});var g9t=s(Dhe);Fxo=r(g9t,"xlm-roberta-xl"),g9t.forEach(t),Txo=r(TPe," \u2014 "),DO=n(TPe,"A",{href:!0});var h9t=s(DO);Mxo=r(h9t,"XLMRobertaXLModel"),h9t.forEach(t),Exo=r(TPe," (XLM-RoBERTa-XL model)"),TPe.forEach(t),Cxo=i(x),E1=n(x,"LI",{});var MPe=s(E1);Ghe=n(MPe,"STRONG",{});var p9t=s(Ghe);wxo=r(p9t,"xlnet"),p9t.forEach(t),Axo=r(MPe," \u2014 "),GO=n(MPe,"A",{href:!0});var _9t=s(GO);Lxo=r(_9t,"XLNetModel"),_9t.forEach(t),yxo=r(MPe," (XLNet model)"),MPe.forEach(t),xxo=i(x),C1=n(x,"LI",{});var EPe=s(C1);Ohe=n(EPe,"STRONG",{});var u9t=s(Ohe);$xo=r(u9t,"yolos"),u9t.forEach(t),kxo=r(EPe," \u2014 "),OO=n(EPe,"A",{href:!0});var b9t=s(OO);Sxo=r(b9t,"YolosModel"),b9t.forEach(t),Rxo=r(EPe," (YOLOS model)"),EPe.forEach(t),Pxo=i(x),w1=n(x,"LI",{});var CPe=s(w1);Vhe=n(CPe,"STRONG",{});var v9t=s(Vhe);Bxo=r(v9t,"yoso"),v9t.forEach(t),Ixo=r(CPe," \u2014 "),VO=n(CPe,"A",{href:!0});var F9t=s(VO);Nxo=r(F9t,"YosoModel"),F9t.forEach(t),qxo=r(CPe," (YOSO model)"),CPe.forEach(t),x.forEach(t),jxo=i(ga),A1=n(ga,"P",{});var wPe=s(A1);Dxo=r(wPe,"The model is set in evaluation mode by default using "),Xhe=n(wPe,"CODE",{});var T9t=s(Xhe);Gxo=r(T9t,"model.eval()"),T9t.forEach(t),Oxo=r(wPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=n(wPe,"CODE",{});var M9t=s(zhe);Vxo=r(M9t,"model.train()"),M9t.forEach(t),wPe.forEach(t),Xxo=i(ga),T(L1.$$.fragment,ga),ga.forEach(t),hl.forEach(t),dUe=i(f),nd=n(f,"H2",{class:!0});var vJe=s(nd);y1=n(vJe,"A",{id:!0,class:!0,href:!0});var E9t=s(y1);Whe=n(E9t,"SPAN",{});var C9t=s(Whe);T(WL.$$.fragment,C9t),C9t.forEach(t),E9t.forEach(t),zxo=i(vJe),Qhe=n(vJe,"SPAN",{});var w9t=s(Qhe);Wxo=r(w9t,"AutoModelForPreTraining"),w9t.forEach(t),vJe.forEach(t),cUe=i(f),Ro=n(f,"DIV",{class:!0});var pl=s(Ro);T(QL.$$.fragment,pl),Qxo=i(pl),sd=n(pl,"P",{});var Wae=s(sd);Uxo=r(Wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XO=n(Wae,"A",{href:!0});var A9t=s(XO);Hxo=r(A9t,"from_pretrained()"),A9t.forEach(t),Jxo=r(Wae," class method or the "),zO=n(Wae,"A",{href:!0});var L9t=s(zO);Yxo=r(L9t,"from_config()"),L9t.forEach(t),Kxo=r(Wae,` class
method.`),Wae.forEach(t),Zxo=i(pl),UL=n(pl,"P",{});var FJe=s(UL);e$o=r(FJe,"This class cannot be instantiated directly using "),Uhe=n(FJe,"CODE",{});var y9t=s(Uhe);o$o=r(y9t,"__init__()"),y9t.forEach(t),r$o=r(FJe," (throws an error)."),FJe.forEach(t),t$o=i(pl),gt=n(pl,"DIV",{class:!0});var _6=s(gt);T(HL.$$.fragment,_6),a$o=i(_6),Hhe=n(_6,"P",{});var x9t=s(Hhe);n$o=r(x9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),x9t.forEach(t),s$o=i(_6),ld=n(_6,"P",{});var Qae=s(ld);l$o=r(Qae,`Note:
Loading a model from its configuration file does `),Jhe=n(Qae,"STRONG",{});var $9t=s(Jhe);i$o=r($9t,"not"),$9t.forEach(t),d$o=r(Qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(Qae,"A",{href:!0});var k9t=s(WO);c$o=r(k9t,"from_pretrained()"),k9t.forEach(t),f$o=r(Qae," to load the model weights."),Qae.forEach(t),m$o=i(_6),T(x1.$$.fragment,_6),_6.forEach(t),g$o=i(pl),Ze=n(pl,"DIV",{class:!0});var ha=s(Ze);T(JL.$$.fragment,ha),h$o=i(ha),Yhe=n(ha,"P",{});var S9t=s(Yhe);p$o=r(S9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),S9t.forEach(t),_$o=i(ha),Xa=n(ha,"P",{});var u6=s(Xa);u$o=r(u6,"The model class to instantiate is selected based on the "),Khe=n(u6,"CODE",{});var R9t=s(Khe);b$o=r(R9t,"model_type"),R9t.forEach(t),v$o=r(u6,` property of the config object (either
passed as an argument or loaded from `),Zhe=n(u6,"CODE",{});var P9t=s(Zhe);F$o=r(P9t,"pretrained_model_name_or_path"),P9t.forEach(t),T$o=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=n(u6,"CODE",{});var B9t=s(epe);M$o=r(B9t,"pretrained_model_name_or_path"),B9t.forEach(t),E$o=r(u6,":"),u6.forEach(t),C$o=i(ha),G=n(ha,"UL",{});var O=s(G);$1=n(O,"LI",{});var APe=s($1);ope=n(APe,"STRONG",{});var I9t=s(ope);w$o=r(I9t,"albert"),I9t.forEach(t),A$o=r(APe," \u2014 "),QO=n(APe,"A",{href:!0});var N9t=s(QO);L$o=r(N9t,"AlbertForPreTraining"),N9t.forEach(t),y$o=r(APe," (ALBERT model)"),APe.forEach(t),x$o=i(O),k1=n(O,"LI",{});var LPe=s(k1);rpe=n(LPe,"STRONG",{});var q9t=s(rpe);$$o=r(q9t,"bart"),q9t.forEach(t),k$o=r(LPe," \u2014 "),UO=n(LPe,"A",{href:!0});var j9t=s(UO);S$o=r(j9t,"BartForConditionalGeneration"),j9t.forEach(t),R$o=r(LPe," (BART model)"),LPe.forEach(t),P$o=i(O),S1=n(O,"LI",{});var yPe=s(S1);tpe=n(yPe,"STRONG",{});var D9t=s(tpe);B$o=r(D9t,"bert"),D9t.forEach(t),I$o=r(yPe," \u2014 "),HO=n(yPe,"A",{href:!0});var G9t=s(HO);N$o=r(G9t,"BertForPreTraining"),G9t.forEach(t),q$o=r(yPe," (BERT model)"),yPe.forEach(t),j$o=i(O),R1=n(O,"LI",{});var xPe=s(R1);ape=n(xPe,"STRONG",{});var O9t=s(ape);D$o=r(O9t,"big_bird"),O9t.forEach(t),G$o=r(xPe," \u2014 "),JO=n(xPe,"A",{href:!0});var V9t=s(JO);O$o=r(V9t,"BigBirdForPreTraining"),V9t.forEach(t),V$o=r(xPe," (BigBird model)"),xPe.forEach(t),X$o=i(O),P1=n(O,"LI",{});var $Pe=s(P1);npe=n($Pe,"STRONG",{});var X9t=s(npe);z$o=r(X9t,"bloom"),X9t.forEach(t),W$o=r($Pe," \u2014 "),YO=n($Pe,"A",{href:!0});var z9t=s(YO);Q$o=r(z9t,"BloomForCausalLM"),z9t.forEach(t),U$o=r($Pe," (BLOOM model)"),$Pe.forEach(t),H$o=i(O),B1=n(O,"LI",{});var kPe=s(B1);spe=n(kPe,"STRONG",{});var W9t=s(spe);J$o=r(W9t,"camembert"),W9t.forEach(t),Y$o=r(kPe," \u2014 "),KO=n(kPe,"A",{href:!0});var Q9t=s(KO);K$o=r(Q9t,"CamembertForMaskedLM"),Q9t.forEach(t),Z$o=r(kPe," (CamemBERT model)"),kPe.forEach(t),eko=i(O),I1=n(O,"LI",{});var SPe=s(I1);lpe=n(SPe,"STRONG",{});var U9t=s(lpe);oko=r(U9t,"ctrl"),U9t.forEach(t),rko=r(SPe," \u2014 "),ZO=n(SPe,"A",{href:!0});var H9t=s(ZO);tko=r(H9t,"CTRLLMHeadModel"),H9t.forEach(t),ako=r(SPe," (CTRL model)"),SPe.forEach(t),nko=i(O),N1=n(O,"LI",{});var RPe=s(N1);ipe=n(RPe,"STRONG",{});var J9t=s(ipe);sko=r(J9t,"data2vec-text"),J9t.forEach(t),lko=r(RPe," \u2014 "),eV=n(RPe,"A",{href:!0});var Y9t=s(eV);iko=r(Y9t,"Data2VecTextForMaskedLM"),Y9t.forEach(t),dko=r(RPe," (Data2VecText model)"),RPe.forEach(t),cko=i(O),q1=n(O,"LI",{});var PPe=s(q1);dpe=n(PPe,"STRONG",{});var K9t=s(dpe);fko=r(K9t,"deberta"),K9t.forEach(t),mko=r(PPe," \u2014 "),oV=n(PPe,"A",{href:!0});var Z9t=s(oV);gko=r(Z9t,"DebertaForMaskedLM"),Z9t.forEach(t),hko=r(PPe," (DeBERTa model)"),PPe.forEach(t),pko=i(O),j1=n(O,"LI",{});var BPe=s(j1);cpe=n(BPe,"STRONG",{});var eMt=s(cpe);_ko=r(eMt,"deberta-v2"),eMt.forEach(t),uko=r(BPe," \u2014 "),rV=n(BPe,"A",{href:!0});var oMt=s(rV);bko=r(oMt,"DebertaV2ForMaskedLM"),oMt.forEach(t),vko=r(BPe," (DeBERTa-v2 model)"),BPe.forEach(t),Fko=i(O),D1=n(O,"LI",{});var IPe=s(D1);fpe=n(IPe,"STRONG",{});var rMt=s(fpe);Tko=r(rMt,"distilbert"),rMt.forEach(t),Mko=r(IPe," \u2014 "),tV=n(IPe,"A",{href:!0});var tMt=s(tV);Eko=r(tMt,"DistilBertForMaskedLM"),tMt.forEach(t),Cko=r(IPe," (DistilBERT model)"),IPe.forEach(t),wko=i(O),G1=n(O,"LI",{});var NPe=s(G1);mpe=n(NPe,"STRONG",{});var aMt=s(mpe);Ako=r(aMt,"electra"),aMt.forEach(t),Lko=r(NPe," \u2014 "),aV=n(NPe,"A",{href:!0});var nMt=s(aV);yko=r(nMt,"ElectraForPreTraining"),nMt.forEach(t),xko=r(NPe," (ELECTRA model)"),NPe.forEach(t),$ko=i(O),O1=n(O,"LI",{});var qPe=s(O1);gpe=n(qPe,"STRONG",{});var sMt=s(gpe);kko=r(sMt,"flaubert"),sMt.forEach(t),Sko=r(qPe," \u2014 "),nV=n(qPe,"A",{href:!0});var lMt=s(nV);Rko=r(lMt,"FlaubertWithLMHeadModel"),lMt.forEach(t),Pko=r(qPe," (FlauBERT model)"),qPe.forEach(t),Bko=i(O),V1=n(O,"LI",{});var jPe=s(V1);hpe=n(jPe,"STRONG",{});var iMt=s(hpe);Iko=r(iMt,"flava"),iMt.forEach(t),Nko=r(jPe," \u2014 "),sV=n(jPe,"A",{href:!0});var dMt=s(sV);qko=r(dMt,"FlavaForPreTraining"),dMt.forEach(t),jko=r(jPe," (FLAVA model)"),jPe.forEach(t),Dko=i(O),X1=n(O,"LI",{});var DPe=s(X1);ppe=n(DPe,"STRONG",{});var cMt=s(ppe);Gko=r(cMt,"fnet"),cMt.forEach(t),Oko=r(DPe," \u2014 "),lV=n(DPe,"A",{href:!0});var fMt=s(lV);Vko=r(fMt,"FNetForPreTraining"),fMt.forEach(t),Xko=r(DPe," (FNet model)"),DPe.forEach(t),zko=i(O),z1=n(O,"LI",{});var GPe=s(z1);_pe=n(GPe,"STRONG",{});var mMt=s(_pe);Wko=r(mMt,"fsmt"),mMt.forEach(t),Qko=r(GPe," \u2014 "),iV=n(GPe,"A",{href:!0});var gMt=s(iV);Uko=r(gMt,"FSMTForConditionalGeneration"),gMt.forEach(t),Hko=r(GPe," (FairSeq Machine-Translation model)"),GPe.forEach(t),Jko=i(O),W1=n(O,"LI",{});var OPe=s(W1);upe=n(OPe,"STRONG",{});var hMt=s(upe);Yko=r(hMt,"funnel"),hMt.forEach(t),Kko=r(OPe," \u2014 "),dV=n(OPe,"A",{href:!0});var pMt=s(dV);Zko=r(pMt,"FunnelForPreTraining"),pMt.forEach(t),eSo=r(OPe," (Funnel Transformer model)"),OPe.forEach(t),oSo=i(O),Q1=n(O,"LI",{});var VPe=s(Q1);bpe=n(VPe,"STRONG",{});var _Mt=s(bpe);rSo=r(_Mt,"gpt2"),_Mt.forEach(t),tSo=r(VPe," \u2014 "),cV=n(VPe,"A",{href:!0});var uMt=s(cV);aSo=r(uMt,"GPT2LMHeadModel"),uMt.forEach(t),nSo=r(VPe," (OpenAI GPT-2 model)"),VPe.forEach(t),sSo=i(O),U1=n(O,"LI",{});var XPe=s(U1);vpe=n(XPe,"STRONG",{});var bMt=s(vpe);lSo=r(bMt,"ibert"),bMt.forEach(t),iSo=r(XPe," \u2014 "),fV=n(XPe,"A",{href:!0});var vMt=s(fV);dSo=r(vMt,"IBertForMaskedLM"),vMt.forEach(t),cSo=r(XPe," (I-BERT model)"),XPe.forEach(t),fSo=i(O),H1=n(O,"LI",{});var zPe=s(H1);Fpe=n(zPe,"STRONG",{});var FMt=s(Fpe);mSo=r(FMt,"layoutlm"),FMt.forEach(t),gSo=r(zPe," \u2014 "),mV=n(zPe,"A",{href:!0});var TMt=s(mV);hSo=r(TMt,"LayoutLMForMaskedLM"),TMt.forEach(t),pSo=r(zPe," (LayoutLM model)"),zPe.forEach(t),_So=i(O),J1=n(O,"LI",{});var WPe=s(J1);Tpe=n(WPe,"STRONG",{});var MMt=s(Tpe);uSo=r(MMt,"longformer"),MMt.forEach(t),bSo=r(WPe," \u2014 "),gV=n(WPe,"A",{href:!0});var EMt=s(gV);vSo=r(EMt,"LongformerForMaskedLM"),EMt.forEach(t),FSo=r(WPe," (Longformer model)"),WPe.forEach(t),TSo=i(O),Y1=n(O,"LI",{});var QPe=s(Y1);Mpe=n(QPe,"STRONG",{});var CMt=s(Mpe);MSo=r(CMt,"luke"),CMt.forEach(t),ESo=r(QPe," \u2014 "),hV=n(QPe,"A",{href:!0});var wMt=s(hV);CSo=r(wMt,"LukeForMaskedLM"),wMt.forEach(t),wSo=r(QPe," (LUKE model)"),QPe.forEach(t),ASo=i(O),K1=n(O,"LI",{});var UPe=s(K1);Epe=n(UPe,"STRONG",{});var AMt=s(Epe);LSo=r(AMt,"lxmert"),AMt.forEach(t),ySo=r(UPe," \u2014 "),pV=n(UPe,"A",{href:!0});var LMt=s(pV);xSo=r(LMt,"LxmertForPreTraining"),LMt.forEach(t),$So=r(UPe," (LXMERT model)"),UPe.forEach(t),kSo=i(O),Z1=n(O,"LI",{});var HPe=s(Z1);Cpe=n(HPe,"STRONG",{});var yMt=s(Cpe);SSo=r(yMt,"megatron-bert"),yMt.forEach(t),RSo=r(HPe," \u2014 "),_V=n(HPe,"A",{href:!0});var xMt=s(_V);PSo=r(xMt,"MegatronBertForPreTraining"),xMt.forEach(t),BSo=r(HPe," (Megatron-BERT model)"),HPe.forEach(t),ISo=i(O),e2=n(O,"LI",{});var JPe=s(e2);wpe=n(JPe,"STRONG",{});var $Mt=s(wpe);NSo=r($Mt,"mobilebert"),$Mt.forEach(t),qSo=r(JPe," \u2014 "),uV=n(JPe,"A",{href:!0});var kMt=s(uV);jSo=r(kMt,"MobileBertForPreTraining"),kMt.forEach(t),DSo=r(JPe," (MobileBERT model)"),JPe.forEach(t),GSo=i(O),o2=n(O,"LI",{});var YPe=s(o2);Ape=n(YPe,"STRONG",{});var SMt=s(Ape);OSo=r(SMt,"mpnet"),SMt.forEach(t),VSo=r(YPe," \u2014 "),bV=n(YPe,"A",{href:!0});var RMt=s(bV);XSo=r(RMt,"MPNetForMaskedLM"),RMt.forEach(t),zSo=r(YPe," (MPNet model)"),YPe.forEach(t),WSo=i(O),r2=n(O,"LI",{});var KPe=s(r2);Lpe=n(KPe,"STRONG",{});var PMt=s(Lpe);QSo=r(PMt,"mvp"),PMt.forEach(t),USo=r(KPe," \u2014 "),vV=n(KPe,"A",{href:!0});var BMt=s(vV);HSo=r(BMt,"MvpForConditionalGeneration"),BMt.forEach(t),JSo=r(KPe," (MVP model)"),KPe.forEach(t),YSo=i(O),t2=n(O,"LI",{});var ZPe=s(t2);ype=n(ZPe,"STRONG",{});var IMt=s(ype);KSo=r(IMt,"nezha"),IMt.forEach(t),ZSo=r(ZPe," \u2014 "),FV=n(ZPe,"A",{href:!0});var NMt=s(FV);eRo=r(NMt,"NezhaForPreTraining"),NMt.forEach(t),oRo=r(ZPe," (Nezha model)"),ZPe.forEach(t),rRo=i(O),a2=n(O,"LI",{});var eBe=s(a2);xpe=n(eBe,"STRONG",{});var qMt=s(xpe);tRo=r(qMt,"openai-gpt"),qMt.forEach(t),aRo=r(eBe," \u2014 "),TV=n(eBe,"A",{href:!0});var jMt=s(TV);nRo=r(jMt,"OpenAIGPTLMHeadModel"),jMt.forEach(t),sRo=r(eBe," (OpenAI GPT model)"),eBe.forEach(t),lRo=i(O),n2=n(O,"LI",{});var oBe=s(n2);$pe=n(oBe,"STRONG",{});var DMt=s($pe);iRo=r(DMt,"retribert"),DMt.forEach(t),dRo=r(oBe," \u2014 "),MV=n(oBe,"A",{href:!0});var GMt=s(MV);cRo=r(GMt,"RetriBertModel"),GMt.forEach(t),fRo=r(oBe," (RetriBERT model)"),oBe.forEach(t),mRo=i(O),s2=n(O,"LI",{});var rBe=s(s2);kpe=n(rBe,"STRONG",{});var OMt=s(kpe);gRo=r(OMt,"roberta"),OMt.forEach(t),hRo=r(rBe," \u2014 "),EV=n(rBe,"A",{href:!0});var VMt=s(EV);pRo=r(VMt,"RobertaForMaskedLM"),VMt.forEach(t),_Ro=r(rBe," (RoBERTa model)"),rBe.forEach(t),uRo=i(O),l2=n(O,"LI",{});var tBe=s(l2);Spe=n(tBe,"STRONG",{});var XMt=s(Spe);bRo=r(XMt,"splinter"),XMt.forEach(t),vRo=r(tBe," \u2014 "),CV=n(tBe,"A",{href:!0});var zMt=s(CV);FRo=r(zMt,"SplinterForPreTraining"),zMt.forEach(t),TRo=r(tBe," (Splinter model)"),tBe.forEach(t),MRo=i(O),i2=n(O,"LI",{});var aBe=s(i2);Rpe=n(aBe,"STRONG",{});var WMt=s(Rpe);ERo=r(WMt,"squeezebert"),WMt.forEach(t),CRo=r(aBe," \u2014 "),wV=n(aBe,"A",{href:!0});var QMt=s(wV);wRo=r(QMt,"SqueezeBertForMaskedLM"),QMt.forEach(t),ARo=r(aBe," (SqueezeBERT model)"),aBe.forEach(t),LRo=i(O),d2=n(O,"LI",{});var nBe=s(d2);Ppe=n(nBe,"STRONG",{});var UMt=s(Ppe);yRo=r(UMt,"t5"),UMt.forEach(t),xRo=r(nBe," \u2014 "),AV=n(nBe,"A",{href:!0});var HMt=s(AV);$Ro=r(HMt,"T5ForConditionalGeneration"),HMt.forEach(t),kRo=r(nBe," (T5 model)"),nBe.forEach(t),SRo=i(O),c2=n(O,"LI",{});var sBe=s(c2);Bpe=n(sBe,"STRONG",{});var JMt=s(Bpe);RRo=r(JMt,"tapas"),JMt.forEach(t),PRo=r(sBe," \u2014 "),LV=n(sBe,"A",{href:!0});var YMt=s(LV);BRo=r(YMt,"TapasForMaskedLM"),YMt.forEach(t),IRo=r(sBe," (TAPAS model)"),sBe.forEach(t),NRo=i(O),f2=n(O,"LI",{});var lBe=s(f2);Ipe=n(lBe,"STRONG",{});var KMt=s(Ipe);qRo=r(KMt,"transfo-xl"),KMt.forEach(t),jRo=r(lBe," \u2014 "),yV=n(lBe,"A",{href:!0});var ZMt=s(yV);DRo=r(ZMt,"TransfoXLLMHeadModel"),ZMt.forEach(t),GRo=r(lBe," (Transformer-XL model)"),lBe.forEach(t),ORo=i(O),m2=n(O,"LI",{});var iBe=s(m2);Npe=n(iBe,"STRONG",{});var eEt=s(Npe);VRo=r(eEt,"unispeech"),eEt.forEach(t),XRo=r(iBe," \u2014 "),xV=n(iBe,"A",{href:!0});var oEt=s(xV);zRo=r(oEt,"UniSpeechForPreTraining"),oEt.forEach(t),WRo=r(iBe," (UniSpeech model)"),iBe.forEach(t),QRo=i(O),g2=n(O,"LI",{});var dBe=s(g2);qpe=n(dBe,"STRONG",{});var rEt=s(qpe);URo=r(rEt,"unispeech-sat"),rEt.forEach(t),HRo=r(dBe," \u2014 "),$V=n(dBe,"A",{href:!0});var tEt=s($V);JRo=r(tEt,"UniSpeechSatForPreTraining"),tEt.forEach(t),YRo=r(dBe," (UniSpeechSat model)"),dBe.forEach(t),KRo=i(O),h2=n(O,"LI",{});var cBe=s(h2);jpe=n(cBe,"STRONG",{});var aEt=s(jpe);ZRo=r(aEt,"videomae"),aEt.forEach(t),ePo=r(cBe," \u2014 "),kV=n(cBe,"A",{href:!0});var nEt=s(kV);oPo=r(nEt,"VideoMAEForPreTraining"),nEt.forEach(t),rPo=r(cBe," (VideoMAE model)"),cBe.forEach(t),tPo=i(O),p2=n(O,"LI",{});var fBe=s(p2);Dpe=n(fBe,"STRONG",{});var sEt=s(Dpe);aPo=r(sEt,"visual_bert"),sEt.forEach(t),nPo=r(fBe," \u2014 "),SV=n(fBe,"A",{href:!0});var lEt=s(SV);sPo=r(lEt,"VisualBertForPreTraining"),lEt.forEach(t),lPo=r(fBe," (VisualBERT model)"),fBe.forEach(t),iPo=i(O),_2=n(O,"LI",{});var mBe=s(_2);Gpe=n(mBe,"STRONG",{});var iEt=s(Gpe);dPo=r(iEt,"vit_mae"),iEt.forEach(t),cPo=r(mBe," \u2014 "),RV=n(mBe,"A",{href:!0});var dEt=s(RV);fPo=r(dEt,"ViTMAEForPreTraining"),dEt.forEach(t),mPo=r(mBe," (ViTMAE model)"),mBe.forEach(t),gPo=i(O),u2=n(O,"LI",{});var gBe=s(u2);Ope=n(gBe,"STRONG",{});var cEt=s(Ope);hPo=r(cEt,"wav2vec2"),cEt.forEach(t),pPo=r(gBe," \u2014 "),PV=n(gBe,"A",{href:!0});var fEt=s(PV);_Po=r(fEt,"Wav2Vec2ForPreTraining"),fEt.forEach(t),uPo=r(gBe," (Wav2Vec2 model)"),gBe.forEach(t),bPo=i(O),b2=n(O,"LI",{});var hBe=s(b2);Vpe=n(hBe,"STRONG",{});var mEt=s(Vpe);vPo=r(mEt,"wav2vec2-conformer"),mEt.forEach(t),FPo=r(hBe," \u2014 "),BV=n(hBe,"A",{href:!0});var gEt=s(BV);TPo=r(gEt,"Wav2Vec2ConformerForPreTraining"),gEt.forEach(t),MPo=r(hBe," (Wav2Vec2-Conformer model)"),hBe.forEach(t),EPo=i(O),v2=n(O,"LI",{});var pBe=s(v2);Xpe=n(pBe,"STRONG",{});var hEt=s(Xpe);CPo=r(hEt,"xlm"),hEt.forEach(t),wPo=r(pBe," \u2014 "),IV=n(pBe,"A",{href:!0});var pEt=s(IV);APo=r(pEt,"XLMWithLMHeadModel"),pEt.forEach(t),LPo=r(pBe," (XLM model)"),pBe.forEach(t),yPo=i(O),F2=n(O,"LI",{});var _Be=s(F2);zpe=n(_Be,"STRONG",{});var _Et=s(zpe);xPo=r(_Et,"xlm-roberta"),_Et.forEach(t),$Po=r(_Be," \u2014 "),NV=n(_Be,"A",{href:!0});var uEt=s(NV);kPo=r(uEt,"XLMRobertaForMaskedLM"),uEt.forEach(t),SPo=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),RPo=i(O),T2=n(O,"LI",{});var uBe=s(T2);Wpe=n(uBe,"STRONG",{});var bEt=s(Wpe);PPo=r(bEt,"xlm-roberta-xl"),bEt.forEach(t),BPo=r(uBe," \u2014 "),qV=n(uBe,"A",{href:!0});var vEt=s(qV);IPo=r(vEt,"XLMRobertaXLForMaskedLM"),vEt.forEach(t),NPo=r(uBe," (XLM-RoBERTa-XL model)"),uBe.forEach(t),qPo=i(O),M2=n(O,"LI",{});var bBe=s(M2);Qpe=n(bBe,"STRONG",{});var FEt=s(Qpe);jPo=r(FEt,"xlnet"),FEt.forEach(t),DPo=r(bBe," \u2014 "),jV=n(bBe,"A",{href:!0});var TEt=s(jV);GPo=r(TEt,"XLNetLMHeadModel"),TEt.forEach(t),OPo=r(bBe," (XLNet model)"),bBe.forEach(t),O.forEach(t),VPo=i(ha),E2=n(ha,"P",{});var vBe=s(E2);XPo=r(vBe,"The model is set in evaluation mode by default using "),Upe=n(vBe,"CODE",{});var MEt=s(Upe);zPo=r(MEt,"model.eval()"),MEt.forEach(t),WPo=r(vBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(vBe,"CODE",{});var EEt=s(Hpe);QPo=r(EEt,"model.train()"),EEt.forEach(t),vBe.forEach(t),UPo=i(ha),T(C2.$$.fragment,ha),ha.forEach(t),pl.forEach(t),fUe=i(f),id=n(f,"H2",{class:!0});var TJe=s(id);w2=n(TJe,"A",{id:!0,class:!0,href:!0});var CEt=s(w2);Jpe=n(CEt,"SPAN",{});var wEt=s(Jpe);T(YL.$$.fragment,wEt),wEt.forEach(t),CEt.forEach(t),HPo=i(TJe),Ype=n(TJe,"SPAN",{});var AEt=s(Ype);JPo=r(AEt,"AutoModelForCausalLM"),AEt.forEach(t),TJe.forEach(t),mUe=i(f),Po=n(f,"DIV",{class:!0});var _l=s(Po);T(KL.$$.fragment,_l),YPo=i(_l),dd=n(_l,"P",{});var Uae=s(dd);KPo=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DV=n(Uae,"A",{href:!0});var LEt=s(DV);ZPo=r(LEt,"from_pretrained()"),LEt.forEach(t),eBo=r(Uae," class method or the "),GV=n(Uae,"A",{href:!0});var yEt=s(GV);oBo=r(yEt,"from_config()"),yEt.forEach(t),rBo=r(Uae,` class
method.`),Uae.forEach(t),tBo=i(_l),ZL=n(_l,"P",{});var MJe=s(ZL);aBo=r(MJe,"This class cannot be instantiated directly using "),Kpe=n(MJe,"CODE",{});var xEt=s(Kpe);nBo=r(xEt,"__init__()"),xEt.forEach(t),sBo=r(MJe," (throws an error)."),MJe.forEach(t),lBo=i(_l),ht=n(_l,"DIV",{class:!0});var b6=s(ht);T(ey.$$.fragment,b6),iBo=i(b6),Zpe=n(b6,"P",{});var $Et=s(Zpe);dBo=r($Et,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Et.forEach(t),cBo=i(b6),cd=n(b6,"P",{});var Hae=s(cd);fBo=r(Hae,`Note:
Loading a model from its configuration file does `),e_e=n(Hae,"STRONG",{});var kEt=s(e_e);mBo=r(kEt,"not"),kEt.forEach(t),gBo=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(Hae,"A",{href:!0});var SEt=s(OV);hBo=r(SEt,"from_pretrained()"),SEt.forEach(t),pBo=r(Hae," to load the model weights."),Hae.forEach(t),_Bo=i(b6),T(A2.$$.fragment,b6),b6.forEach(t),uBo=i(_l),eo=n(_l,"DIV",{class:!0});var pa=s(eo);T(oy.$$.fragment,pa),bBo=i(pa),o_e=n(pa,"P",{});var REt=s(o_e);vBo=r(REt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),REt.forEach(t),FBo=i(pa),za=n(pa,"P",{});var v6=s(za);TBo=r(v6,"The model class to instantiate is selected based on the "),r_e=n(v6,"CODE",{});var PEt=s(r_e);MBo=r(PEt,"model_type"),PEt.forEach(t),EBo=r(v6,` property of the config object (either
passed as an argument or loaded from `),t_e=n(v6,"CODE",{});var BEt=s(t_e);CBo=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),wBo=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(v6,"CODE",{});var IEt=s(a_e);ABo=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),LBo=r(v6,":"),v6.forEach(t),yBo=i(pa),z=n(pa,"UL",{});var W=s(z);L2=n(W,"LI",{});var FBe=s(L2);n_e=n(FBe,"STRONG",{});var NEt=s(n_e);xBo=r(NEt,"bart"),NEt.forEach(t),$Bo=r(FBe," \u2014 "),VV=n(FBe,"A",{href:!0});var qEt=s(VV);kBo=r(qEt,"BartForCausalLM"),qEt.forEach(t),SBo=r(FBe," (BART model)"),FBe.forEach(t),RBo=i(W),y2=n(W,"LI",{});var TBe=s(y2);s_e=n(TBe,"STRONG",{});var jEt=s(s_e);PBo=r(jEt,"bert"),jEt.forEach(t),BBo=r(TBe," \u2014 "),XV=n(TBe,"A",{href:!0});var DEt=s(XV);IBo=r(DEt,"BertLMHeadModel"),DEt.forEach(t),NBo=r(TBe," (BERT model)"),TBe.forEach(t),qBo=i(W),x2=n(W,"LI",{});var MBe=s(x2);l_e=n(MBe,"STRONG",{});var GEt=s(l_e);jBo=r(GEt,"bert-generation"),GEt.forEach(t),DBo=r(MBe," \u2014 "),zV=n(MBe,"A",{href:!0});var OEt=s(zV);GBo=r(OEt,"BertGenerationDecoder"),OEt.forEach(t),OBo=r(MBe," (Bert Generation model)"),MBe.forEach(t),VBo=i(W),$2=n(W,"LI",{});var EBe=s($2);i_e=n(EBe,"STRONG",{});var VEt=s(i_e);XBo=r(VEt,"big_bird"),VEt.forEach(t),zBo=r(EBe," \u2014 "),WV=n(EBe,"A",{href:!0});var XEt=s(WV);WBo=r(XEt,"BigBirdForCausalLM"),XEt.forEach(t),QBo=r(EBe," (BigBird model)"),EBe.forEach(t),UBo=i(W),k2=n(W,"LI",{});var CBe=s(k2);d_e=n(CBe,"STRONG",{});var zEt=s(d_e);HBo=r(zEt,"bigbird_pegasus"),zEt.forEach(t),JBo=r(CBe," \u2014 "),QV=n(CBe,"A",{href:!0});var WEt=s(QV);YBo=r(WEt,"BigBirdPegasusForCausalLM"),WEt.forEach(t),KBo=r(CBe," (BigBird-Pegasus model)"),CBe.forEach(t),ZBo=i(W),S2=n(W,"LI",{});var wBe=s(S2);c_e=n(wBe,"STRONG",{});var QEt=s(c_e);eIo=r(QEt,"blenderbot"),QEt.forEach(t),oIo=r(wBe," \u2014 "),UV=n(wBe,"A",{href:!0});var UEt=s(UV);rIo=r(UEt,"BlenderbotForCausalLM"),UEt.forEach(t),tIo=r(wBe," (Blenderbot model)"),wBe.forEach(t),aIo=i(W),R2=n(W,"LI",{});var ABe=s(R2);f_e=n(ABe,"STRONG",{});var HEt=s(f_e);nIo=r(HEt,"blenderbot-small"),HEt.forEach(t),sIo=r(ABe," \u2014 "),HV=n(ABe,"A",{href:!0});var JEt=s(HV);lIo=r(JEt,"BlenderbotSmallForCausalLM"),JEt.forEach(t),iIo=r(ABe," (BlenderbotSmall model)"),ABe.forEach(t),dIo=i(W),P2=n(W,"LI",{});var LBe=s(P2);m_e=n(LBe,"STRONG",{});var YEt=s(m_e);cIo=r(YEt,"bloom"),YEt.forEach(t),fIo=r(LBe," \u2014 "),JV=n(LBe,"A",{href:!0});var KEt=s(JV);mIo=r(KEt,"BloomForCausalLM"),KEt.forEach(t),gIo=r(LBe," (BLOOM model)"),LBe.forEach(t),hIo=i(W),B2=n(W,"LI",{});var yBe=s(B2);g_e=n(yBe,"STRONG",{});var ZEt=s(g_e);pIo=r(ZEt,"camembert"),ZEt.forEach(t),_Io=r(yBe," \u2014 "),YV=n(yBe,"A",{href:!0});var e4t=s(YV);uIo=r(e4t,"CamembertForCausalLM"),e4t.forEach(t),bIo=r(yBe," (CamemBERT model)"),yBe.forEach(t),vIo=i(W),I2=n(W,"LI",{});var xBe=s(I2);h_e=n(xBe,"STRONG",{});var o4t=s(h_e);FIo=r(o4t,"codegen"),o4t.forEach(t),TIo=r(xBe," \u2014 "),KV=n(xBe,"A",{href:!0});var r4t=s(KV);MIo=r(r4t,"CodeGenForCausalLM"),r4t.forEach(t),EIo=r(xBe," (CodeGen model)"),xBe.forEach(t),CIo=i(W),N2=n(W,"LI",{});var $Be=s(N2);p_e=n($Be,"STRONG",{});var t4t=s(p_e);wIo=r(t4t,"ctrl"),t4t.forEach(t),AIo=r($Be," \u2014 "),ZV=n($Be,"A",{href:!0});var a4t=s(ZV);LIo=r(a4t,"CTRLLMHeadModel"),a4t.forEach(t),yIo=r($Be," (CTRL model)"),$Be.forEach(t),xIo=i(W),q2=n(W,"LI",{});var kBe=s(q2);__e=n(kBe,"STRONG",{});var n4t=s(__e);$Io=r(n4t,"data2vec-text"),n4t.forEach(t),kIo=r(kBe," \u2014 "),eX=n(kBe,"A",{href:!0});var s4t=s(eX);SIo=r(s4t,"Data2VecTextForCausalLM"),s4t.forEach(t),RIo=r(kBe," (Data2VecText model)"),kBe.forEach(t),PIo=i(W),j2=n(W,"LI",{});var SBe=s(j2);u_e=n(SBe,"STRONG",{});var l4t=s(u_e);BIo=r(l4t,"electra"),l4t.forEach(t),IIo=r(SBe," \u2014 "),oX=n(SBe,"A",{href:!0});var i4t=s(oX);NIo=r(i4t,"ElectraForCausalLM"),i4t.forEach(t),qIo=r(SBe," (ELECTRA model)"),SBe.forEach(t),jIo=i(W),D2=n(W,"LI",{});var RBe=s(D2);b_e=n(RBe,"STRONG",{});var d4t=s(b_e);DIo=r(d4t,"gpt2"),d4t.forEach(t),GIo=r(RBe," \u2014 "),rX=n(RBe,"A",{href:!0});var c4t=s(rX);OIo=r(c4t,"GPT2LMHeadModel"),c4t.forEach(t),VIo=r(RBe," (OpenAI GPT-2 model)"),RBe.forEach(t),XIo=i(W),G2=n(W,"LI",{});var PBe=s(G2);v_e=n(PBe,"STRONG",{});var f4t=s(v_e);zIo=r(f4t,"gpt_neo"),f4t.forEach(t),WIo=r(PBe," \u2014 "),tX=n(PBe,"A",{href:!0});var m4t=s(tX);QIo=r(m4t,"GPTNeoForCausalLM"),m4t.forEach(t),UIo=r(PBe," (GPT Neo model)"),PBe.forEach(t),HIo=i(W),O2=n(W,"LI",{});var BBe=s(O2);F_e=n(BBe,"STRONG",{});var g4t=s(F_e);JIo=r(g4t,"gpt_neox"),g4t.forEach(t),YIo=r(BBe," \u2014 "),aX=n(BBe,"A",{href:!0});var h4t=s(aX);KIo=r(h4t,"GPTNeoXForCausalLM"),h4t.forEach(t),ZIo=r(BBe," (GPT NeoX model)"),BBe.forEach(t),eNo=i(W),V2=n(W,"LI",{});var IBe=s(V2);T_e=n(IBe,"STRONG",{});var p4t=s(T_e);oNo=r(p4t,"gptj"),p4t.forEach(t),rNo=r(IBe," \u2014 "),nX=n(IBe,"A",{href:!0});var _4t=s(nX);tNo=r(_4t,"GPTJForCausalLM"),_4t.forEach(t),aNo=r(IBe," (GPT-J model)"),IBe.forEach(t),nNo=i(W),X2=n(W,"LI",{});var NBe=s(X2);M_e=n(NBe,"STRONG",{});var u4t=s(M_e);sNo=r(u4t,"marian"),u4t.forEach(t),lNo=r(NBe," \u2014 "),sX=n(NBe,"A",{href:!0});var b4t=s(sX);iNo=r(b4t,"MarianForCausalLM"),b4t.forEach(t),dNo=r(NBe," (Marian model)"),NBe.forEach(t),cNo=i(W),z2=n(W,"LI",{});var qBe=s(z2);E_e=n(qBe,"STRONG",{});var v4t=s(E_e);fNo=r(v4t,"mbart"),v4t.forEach(t),mNo=r(qBe," \u2014 "),lX=n(qBe,"A",{href:!0});var F4t=s(lX);gNo=r(F4t,"MBartForCausalLM"),F4t.forEach(t),hNo=r(qBe," (mBART model)"),qBe.forEach(t),pNo=i(W),W2=n(W,"LI",{});var jBe=s(W2);C_e=n(jBe,"STRONG",{});var T4t=s(C_e);_No=r(T4t,"megatron-bert"),T4t.forEach(t),uNo=r(jBe," \u2014 "),iX=n(jBe,"A",{href:!0});var M4t=s(iX);bNo=r(M4t,"MegatronBertForCausalLM"),M4t.forEach(t),vNo=r(jBe," (Megatron-BERT model)"),jBe.forEach(t),FNo=i(W),Q2=n(W,"LI",{});var DBe=s(Q2);w_e=n(DBe,"STRONG",{});var E4t=s(w_e);TNo=r(E4t,"mvp"),E4t.forEach(t),MNo=r(DBe," \u2014 "),dX=n(DBe,"A",{href:!0});var C4t=s(dX);ENo=r(C4t,"MvpForCausalLM"),C4t.forEach(t),CNo=r(DBe," (MVP model)"),DBe.forEach(t),wNo=i(W),U2=n(W,"LI",{});var GBe=s(U2);A_e=n(GBe,"STRONG",{});var w4t=s(A_e);ANo=r(w4t,"openai-gpt"),w4t.forEach(t),LNo=r(GBe," \u2014 "),cX=n(GBe,"A",{href:!0});var A4t=s(cX);yNo=r(A4t,"OpenAIGPTLMHeadModel"),A4t.forEach(t),xNo=r(GBe," (OpenAI GPT model)"),GBe.forEach(t),$No=i(W),H2=n(W,"LI",{});var OBe=s(H2);L_e=n(OBe,"STRONG",{});var L4t=s(L_e);kNo=r(L4t,"opt"),L4t.forEach(t),SNo=r(OBe," \u2014 "),fX=n(OBe,"A",{href:!0});var y4t=s(fX);RNo=r(y4t,"OPTForCausalLM"),y4t.forEach(t),PNo=r(OBe," (OPT model)"),OBe.forEach(t),BNo=i(W),J2=n(W,"LI",{});var VBe=s(J2);y_e=n(VBe,"STRONG",{});var x4t=s(y_e);INo=r(x4t,"pegasus"),x4t.forEach(t),NNo=r(VBe," \u2014 "),mX=n(VBe,"A",{href:!0});var $4t=s(mX);qNo=r($4t,"PegasusForCausalLM"),$4t.forEach(t),jNo=r(VBe," (Pegasus model)"),VBe.forEach(t),DNo=i(W),Y2=n(W,"LI",{});var XBe=s(Y2);x_e=n(XBe,"STRONG",{});var k4t=s(x_e);GNo=r(k4t,"plbart"),k4t.forEach(t),ONo=r(XBe," \u2014 "),gX=n(XBe,"A",{href:!0});var S4t=s(gX);VNo=r(S4t,"PLBartForCausalLM"),S4t.forEach(t),XNo=r(XBe," (PLBart model)"),XBe.forEach(t),zNo=i(W),K2=n(W,"LI",{});var zBe=s(K2);$_e=n(zBe,"STRONG",{});var R4t=s($_e);WNo=r(R4t,"prophetnet"),R4t.forEach(t),QNo=r(zBe," \u2014 "),hX=n(zBe,"A",{href:!0});var P4t=s(hX);UNo=r(P4t,"ProphetNetForCausalLM"),P4t.forEach(t),HNo=r(zBe," (ProphetNet model)"),zBe.forEach(t),JNo=i(W),Z2=n(W,"LI",{});var WBe=s(Z2);k_e=n(WBe,"STRONG",{});var B4t=s(k_e);YNo=r(B4t,"qdqbert"),B4t.forEach(t),KNo=r(WBe," \u2014 "),pX=n(WBe,"A",{href:!0});var I4t=s(pX);ZNo=r(I4t,"QDQBertLMHeadModel"),I4t.forEach(t),eqo=r(WBe," (QDQBert model)"),WBe.forEach(t),oqo=i(W),eb=n(W,"LI",{});var QBe=s(eb);S_e=n(QBe,"STRONG",{});var N4t=s(S_e);rqo=r(N4t,"reformer"),N4t.forEach(t),tqo=r(QBe," \u2014 "),_X=n(QBe,"A",{href:!0});var q4t=s(_X);aqo=r(q4t,"ReformerModelWithLMHead"),q4t.forEach(t),nqo=r(QBe," (Reformer model)"),QBe.forEach(t),sqo=i(W),ob=n(W,"LI",{});var UBe=s(ob);R_e=n(UBe,"STRONG",{});var j4t=s(R_e);lqo=r(j4t,"rembert"),j4t.forEach(t),iqo=r(UBe," \u2014 "),uX=n(UBe,"A",{href:!0});var D4t=s(uX);dqo=r(D4t,"RemBertForCausalLM"),D4t.forEach(t),cqo=r(UBe," (RemBERT model)"),UBe.forEach(t),fqo=i(W),rb=n(W,"LI",{});var HBe=s(rb);P_e=n(HBe,"STRONG",{});var G4t=s(P_e);mqo=r(G4t,"roberta"),G4t.forEach(t),gqo=r(HBe," \u2014 "),bX=n(HBe,"A",{href:!0});var O4t=s(bX);hqo=r(O4t,"RobertaForCausalLM"),O4t.forEach(t),pqo=r(HBe," (RoBERTa model)"),HBe.forEach(t),_qo=i(W),tb=n(W,"LI",{});var JBe=s(tb);B_e=n(JBe,"STRONG",{});var V4t=s(B_e);uqo=r(V4t,"roformer"),V4t.forEach(t),bqo=r(JBe," \u2014 "),vX=n(JBe,"A",{href:!0});var X4t=s(vX);vqo=r(X4t,"RoFormerForCausalLM"),X4t.forEach(t),Fqo=r(JBe," (RoFormer model)"),JBe.forEach(t),Tqo=i(W),ab=n(W,"LI",{});var YBe=s(ab);I_e=n(YBe,"STRONG",{});var z4t=s(I_e);Mqo=r(z4t,"speech_to_text_2"),z4t.forEach(t),Eqo=r(YBe," \u2014 "),FX=n(YBe,"A",{href:!0});var W4t=s(FX);Cqo=r(W4t,"Speech2Text2ForCausalLM"),W4t.forEach(t),wqo=r(YBe," (Speech2Text2 model)"),YBe.forEach(t),Aqo=i(W),nb=n(W,"LI",{});var KBe=s(nb);N_e=n(KBe,"STRONG",{});var Q4t=s(N_e);Lqo=r(Q4t,"transfo-xl"),Q4t.forEach(t),yqo=r(KBe," \u2014 "),TX=n(KBe,"A",{href:!0});var U4t=s(TX);xqo=r(U4t,"TransfoXLLMHeadModel"),U4t.forEach(t),$qo=r(KBe," (Transformer-XL model)"),KBe.forEach(t),kqo=i(W),sb=n(W,"LI",{});var ZBe=s(sb);q_e=n(ZBe,"STRONG",{});var H4t=s(q_e);Sqo=r(H4t,"trocr"),H4t.forEach(t),Rqo=r(ZBe," \u2014 "),MX=n(ZBe,"A",{href:!0});var J4t=s(MX);Pqo=r(J4t,"TrOCRForCausalLM"),J4t.forEach(t),Bqo=r(ZBe," (TrOCR model)"),ZBe.forEach(t),Iqo=i(W),lb=n(W,"LI",{});var eIe=s(lb);j_e=n(eIe,"STRONG",{});var Y4t=s(j_e);Nqo=r(Y4t,"xglm"),Y4t.forEach(t),qqo=r(eIe," \u2014 "),EX=n(eIe,"A",{href:!0});var K4t=s(EX);jqo=r(K4t,"XGLMForCausalLM"),K4t.forEach(t),Dqo=r(eIe," (XGLM model)"),eIe.forEach(t),Gqo=i(W),ib=n(W,"LI",{});var oIe=s(ib);D_e=n(oIe,"STRONG",{});var Z4t=s(D_e);Oqo=r(Z4t,"xlm"),Z4t.forEach(t),Vqo=r(oIe," \u2014 "),CX=n(oIe,"A",{href:!0});var eCt=s(CX);Xqo=r(eCt,"XLMWithLMHeadModel"),eCt.forEach(t),zqo=r(oIe," (XLM model)"),oIe.forEach(t),Wqo=i(W),db=n(W,"LI",{});var rIe=s(db);G_e=n(rIe,"STRONG",{});var oCt=s(G_e);Qqo=r(oCt,"xlm-prophetnet"),oCt.forEach(t),Uqo=r(rIe," \u2014 "),wX=n(rIe,"A",{href:!0});var rCt=s(wX);Hqo=r(rCt,"XLMProphetNetForCausalLM"),rCt.forEach(t),Jqo=r(rIe," (XLM-ProphetNet model)"),rIe.forEach(t),Yqo=i(W),cb=n(W,"LI",{});var tIe=s(cb);O_e=n(tIe,"STRONG",{});var tCt=s(O_e);Kqo=r(tCt,"xlm-roberta"),tCt.forEach(t),Zqo=r(tIe," \u2014 "),AX=n(tIe,"A",{href:!0});var aCt=s(AX);ejo=r(aCt,"XLMRobertaForCausalLM"),aCt.forEach(t),ojo=r(tIe," (XLM-RoBERTa model)"),tIe.forEach(t),rjo=i(W),fb=n(W,"LI",{});var aIe=s(fb);V_e=n(aIe,"STRONG",{});var nCt=s(V_e);tjo=r(nCt,"xlm-roberta-xl"),nCt.forEach(t),ajo=r(aIe," \u2014 "),LX=n(aIe,"A",{href:!0});var sCt=s(LX);njo=r(sCt,"XLMRobertaXLForCausalLM"),sCt.forEach(t),sjo=r(aIe," (XLM-RoBERTa-XL model)"),aIe.forEach(t),ljo=i(W),mb=n(W,"LI",{});var nIe=s(mb);X_e=n(nIe,"STRONG",{});var lCt=s(X_e);ijo=r(lCt,"xlnet"),lCt.forEach(t),djo=r(nIe," \u2014 "),yX=n(nIe,"A",{href:!0});var iCt=s(yX);cjo=r(iCt,"XLNetLMHeadModel"),iCt.forEach(t),fjo=r(nIe," (XLNet model)"),nIe.forEach(t),W.forEach(t),mjo=i(pa),gb=n(pa,"P",{});var sIe=s(gb);gjo=r(sIe,"The model is set in evaluation mode by default using "),z_e=n(sIe,"CODE",{});var dCt=s(z_e);hjo=r(dCt,"model.eval()"),dCt.forEach(t),pjo=r(sIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n(sIe,"CODE",{});var cCt=s(W_e);_jo=r(cCt,"model.train()"),cCt.forEach(t),sIe.forEach(t),ujo=i(pa),T(hb.$$.fragment,pa),pa.forEach(t),_l.forEach(t),gUe=i(f),fd=n(f,"H2",{class:!0});var EJe=s(fd);pb=n(EJe,"A",{id:!0,class:!0,href:!0});var fCt=s(pb);Q_e=n(fCt,"SPAN",{});var mCt=s(Q_e);T(ry.$$.fragment,mCt),mCt.forEach(t),fCt.forEach(t),bjo=i(EJe),U_e=n(EJe,"SPAN",{});var gCt=s(U_e);vjo=r(gCt,"AutoModelForMaskedLM"),gCt.forEach(t),EJe.forEach(t),hUe=i(f),Bo=n(f,"DIV",{class:!0});var ul=s(Bo);T(ty.$$.fragment,ul),Fjo=i(ul),md=n(ul,"P",{});var Jae=s(md);Tjo=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xX=n(Jae,"A",{href:!0});var hCt=s(xX);Mjo=r(hCt,"from_pretrained()"),hCt.forEach(t),Ejo=r(Jae," class method or the "),$X=n(Jae,"A",{href:!0});var pCt=s($X);Cjo=r(pCt,"from_config()"),pCt.forEach(t),wjo=r(Jae,` class
method.`),Jae.forEach(t),Ajo=i(ul),ay=n(ul,"P",{});var CJe=s(ay);Ljo=r(CJe,"This class cannot be instantiated directly using "),H_e=n(CJe,"CODE",{});var _Ct=s(H_e);yjo=r(_Ct,"__init__()"),_Ct.forEach(t),xjo=r(CJe," (throws an error)."),CJe.forEach(t),$jo=i(ul),pt=n(ul,"DIV",{class:!0});var F6=s(pt);T(ny.$$.fragment,F6),kjo=i(F6),J_e=n(F6,"P",{});var uCt=s(J_e);Sjo=r(uCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uCt.forEach(t),Rjo=i(F6),gd=n(F6,"P",{});var Yae=s(gd);Pjo=r(Yae,`Note:
Loading a model from its configuration file does `),Y_e=n(Yae,"STRONG",{});var bCt=s(Y_e);Bjo=r(bCt,"not"),bCt.forEach(t),Ijo=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=n(Yae,"A",{href:!0});var vCt=s(kX);Njo=r(vCt,"from_pretrained()"),vCt.forEach(t),qjo=r(Yae," to load the model weights."),Yae.forEach(t),jjo=i(F6),T(_b.$$.fragment,F6),F6.forEach(t),Djo=i(ul),oo=n(ul,"DIV",{class:!0});var _a=s(oo);T(sy.$$.fragment,_a),Gjo=i(_a),K_e=n(_a,"P",{});var FCt=s(K_e);Ojo=r(FCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FCt.forEach(t),Vjo=i(_a),Wa=n(_a,"P",{});var T6=s(Wa);Xjo=r(T6,"The model class to instantiate is selected based on the "),Z_e=n(T6,"CODE",{});var TCt=s(Z_e);zjo=r(TCt,"model_type"),TCt.forEach(t),Wjo=r(T6,` property of the config object (either
passed as an argument or loaded from `),eue=n(T6,"CODE",{});var MCt=s(eue);Qjo=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),Ujo=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(T6,"CODE",{});var ECt=s(oue);Hjo=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),Jjo=r(T6,":"),T6.forEach(t),Yjo=i(_a),U=n(_a,"UL",{});var Y=s(U);ub=n(Y,"LI",{});var lIe=s(ub);rue=n(lIe,"STRONG",{});var CCt=s(rue);Kjo=r(CCt,"albert"),CCt.forEach(t),Zjo=r(lIe," \u2014 "),SX=n(lIe,"A",{href:!0});var wCt=s(SX);eDo=r(wCt,"AlbertForMaskedLM"),wCt.forEach(t),oDo=r(lIe," (ALBERT model)"),lIe.forEach(t),rDo=i(Y),bb=n(Y,"LI",{});var iIe=s(bb);tue=n(iIe,"STRONG",{});var ACt=s(tue);tDo=r(ACt,"bart"),ACt.forEach(t),aDo=r(iIe," \u2014 "),RX=n(iIe,"A",{href:!0});var LCt=s(RX);nDo=r(LCt,"BartForConditionalGeneration"),LCt.forEach(t),sDo=r(iIe," (BART model)"),iIe.forEach(t),lDo=i(Y),vb=n(Y,"LI",{});var dIe=s(vb);aue=n(dIe,"STRONG",{});var yCt=s(aue);iDo=r(yCt,"bert"),yCt.forEach(t),dDo=r(dIe," \u2014 "),PX=n(dIe,"A",{href:!0});var xCt=s(PX);cDo=r(xCt,"BertForMaskedLM"),xCt.forEach(t),fDo=r(dIe," (BERT model)"),dIe.forEach(t),mDo=i(Y),Fb=n(Y,"LI",{});var cIe=s(Fb);nue=n(cIe,"STRONG",{});var $Ct=s(nue);gDo=r($Ct,"big_bird"),$Ct.forEach(t),hDo=r(cIe," \u2014 "),BX=n(cIe,"A",{href:!0});var kCt=s(BX);pDo=r(kCt,"BigBirdForMaskedLM"),kCt.forEach(t),_Do=r(cIe," (BigBird model)"),cIe.forEach(t),uDo=i(Y),Tb=n(Y,"LI",{});var fIe=s(Tb);sue=n(fIe,"STRONG",{});var SCt=s(sue);bDo=r(SCt,"camembert"),SCt.forEach(t),vDo=r(fIe," \u2014 "),IX=n(fIe,"A",{href:!0});var RCt=s(IX);FDo=r(RCt,"CamembertForMaskedLM"),RCt.forEach(t),TDo=r(fIe," (CamemBERT model)"),fIe.forEach(t),MDo=i(Y),Mb=n(Y,"LI",{});var mIe=s(Mb);lue=n(mIe,"STRONG",{});var PCt=s(lue);EDo=r(PCt,"convbert"),PCt.forEach(t),CDo=r(mIe," \u2014 "),NX=n(mIe,"A",{href:!0});var BCt=s(NX);wDo=r(BCt,"ConvBertForMaskedLM"),BCt.forEach(t),ADo=r(mIe," (ConvBERT model)"),mIe.forEach(t),LDo=i(Y),Eb=n(Y,"LI",{});var gIe=s(Eb);iue=n(gIe,"STRONG",{});var ICt=s(iue);yDo=r(ICt,"data2vec-text"),ICt.forEach(t),xDo=r(gIe," \u2014 "),qX=n(gIe,"A",{href:!0});var NCt=s(qX);$Do=r(NCt,"Data2VecTextForMaskedLM"),NCt.forEach(t),kDo=r(gIe," (Data2VecText model)"),gIe.forEach(t),SDo=i(Y),Cb=n(Y,"LI",{});var hIe=s(Cb);due=n(hIe,"STRONG",{});var qCt=s(due);RDo=r(qCt,"deberta"),qCt.forEach(t),PDo=r(hIe," \u2014 "),jX=n(hIe,"A",{href:!0});var jCt=s(jX);BDo=r(jCt,"DebertaForMaskedLM"),jCt.forEach(t),IDo=r(hIe," (DeBERTa model)"),hIe.forEach(t),NDo=i(Y),wb=n(Y,"LI",{});var pIe=s(wb);cue=n(pIe,"STRONG",{});var DCt=s(cue);qDo=r(DCt,"deberta-v2"),DCt.forEach(t),jDo=r(pIe," \u2014 "),DX=n(pIe,"A",{href:!0});var GCt=s(DX);DDo=r(GCt,"DebertaV2ForMaskedLM"),GCt.forEach(t),GDo=r(pIe," (DeBERTa-v2 model)"),pIe.forEach(t),ODo=i(Y),Ab=n(Y,"LI",{});var _Ie=s(Ab);fue=n(_Ie,"STRONG",{});var OCt=s(fue);VDo=r(OCt,"distilbert"),OCt.forEach(t),XDo=r(_Ie," \u2014 "),GX=n(_Ie,"A",{href:!0});var VCt=s(GX);zDo=r(VCt,"DistilBertForMaskedLM"),VCt.forEach(t),WDo=r(_Ie," (DistilBERT model)"),_Ie.forEach(t),QDo=i(Y),Lb=n(Y,"LI",{});var uIe=s(Lb);mue=n(uIe,"STRONG",{});var XCt=s(mue);UDo=r(XCt,"electra"),XCt.forEach(t),HDo=r(uIe," \u2014 "),OX=n(uIe,"A",{href:!0});var zCt=s(OX);JDo=r(zCt,"ElectraForMaskedLM"),zCt.forEach(t),YDo=r(uIe," (ELECTRA model)"),uIe.forEach(t),KDo=i(Y),yb=n(Y,"LI",{});var bIe=s(yb);gue=n(bIe,"STRONG",{});var WCt=s(gue);ZDo=r(WCt,"flaubert"),WCt.forEach(t),eGo=r(bIe," \u2014 "),VX=n(bIe,"A",{href:!0});var QCt=s(VX);oGo=r(QCt,"FlaubertWithLMHeadModel"),QCt.forEach(t),rGo=r(bIe," (FlauBERT model)"),bIe.forEach(t),tGo=i(Y),xb=n(Y,"LI",{});var vIe=s(xb);hue=n(vIe,"STRONG",{});var UCt=s(hue);aGo=r(UCt,"fnet"),UCt.forEach(t),nGo=r(vIe," \u2014 "),XX=n(vIe,"A",{href:!0});var HCt=s(XX);sGo=r(HCt,"FNetForMaskedLM"),HCt.forEach(t),lGo=r(vIe," (FNet model)"),vIe.forEach(t),iGo=i(Y),$b=n(Y,"LI",{});var FIe=s($b);pue=n(FIe,"STRONG",{});var JCt=s(pue);dGo=r(JCt,"funnel"),JCt.forEach(t),cGo=r(FIe," \u2014 "),zX=n(FIe,"A",{href:!0});var YCt=s(zX);fGo=r(YCt,"FunnelForMaskedLM"),YCt.forEach(t),mGo=r(FIe," (Funnel Transformer model)"),FIe.forEach(t),gGo=i(Y),kb=n(Y,"LI",{});var TIe=s(kb);_ue=n(TIe,"STRONG",{});var KCt=s(_ue);hGo=r(KCt,"ibert"),KCt.forEach(t),pGo=r(TIe," \u2014 "),WX=n(TIe,"A",{href:!0});var ZCt=s(WX);_Go=r(ZCt,"IBertForMaskedLM"),ZCt.forEach(t),uGo=r(TIe," (I-BERT model)"),TIe.forEach(t),bGo=i(Y),Sb=n(Y,"LI",{});var MIe=s(Sb);uue=n(MIe,"STRONG",{});var e3t=s(uue);vGo=r(e3t,"layoutlm"),e3t.forEach(t),FGo=r(MIe," \u2014 "),QX=n(MIe,"A",{href:!0});var o3t=s(QX);TGo=r(o3t,"LayoutLMForMaskedLM"),o3t.forEach(t),MGo=r(MIe," (LayoutLM model)"),MIe.forEach(t),EGo=i(Y),Rb=n(Y,"LI",{});var EIe=s(Rb);bue=n(EIe,"STRONG",{});var r3t=s(bue);CGo=r(r3t,"longformer"),r3t.forEach(t),wGo=r(EIe," \u2014 "),UX=n(EIe,"A",{href:!0});var t3t=s(UX);AGo=r(t3t,"LongformerForMaskedLM"),t3t.forEach(t),LGo=r(EIe," (Longformer model)"),EIe.forEach(t),yGo=i(Y),Pb=n(Y,"LI",{});var CIe=s(Pb);vue=n(CIe,"STRONG",{});var a3t=s(vue);xGo=r(a3t,"luke"),a3t.forEach(t),$Go=r(CIe," \u2014 "),HX=n(CIe,"A",{href:!0});var n3t=s(HX);kGo=r(n3t,"LukeForMaskedLM"),n3t.forEach(t),SGo=r(CIe," (LUKE model)"),CIe.forEach(t),RGo=i(Y),Bb=n(Y,"LI",{});var wIe=s(Bb);Fue=n(wIe,"STRONG",{});var s3t=s(Fue);PGo=r(s3t,"mbart"),s3t.forEach(t),BGo=r(wIe," \u2014 "),JX=n(wIe,"A",{href:!0});var l3t=s(JX);IGo=r(l3t,"MBartForConditionalGeneration"),l3t.forEach(t),NGo=r(wIe," (mBART model)"),wIe.forEach(t),qGo=i(Y),Ib=n(Y,"LI",{});var AIe=s(Ib);Tue=n(AIe,"STRONG",{});var i3t=s(Tue);jGo=r(i3t,"megatron-bert"),i3t.forEach(t),DGo=r(AIe," \u2014 "),YX=n(AIe,"A",{href:!0});var d3t=s(YX);GGo=r(d3t,"MegatronBertForMaskedLM"),d3t.forEach(t),OGo=r(AIe," (Megatron-BERT model)"),AIe.forEach(t),VGo=i(Y),Nb=n(Y,"LI",{});var LIe=s(Nb);Mue=n(LIe,"STRONG",{});var c3t=s(Mue);XGo=r(c3t,"mobilebert"),c3t.forEach(t),zGo=r(LIe," \u2014 "),KX=n(LIe,"A",{href:!0});var f3t=s(KX);WGo=r(f3t,"MobileBertForMaskedLM"),f3t.forEach(t),QGo=r(LIe," (MobileBERT model)"),LIe.forEach(t),UGo=i(Y),qb=n(Y,"LI",{});var yIe=s(qb);Eue=n(yIe,"STRONG",{});var m3t=s(Eue);HGo=r(m3t,"mpnet"),m3t.forEach(t),JGo=r(yIe," \u2014 "),ZX=n(yIe,"A",{href:!0});var g3t=s(ZX);YGo=r(g3t,"MPNetForMaskedLM"),g3t.forEach(t),KGo=r(yIe," (MPNet model)"),yIe.forEach(t),ZGo=i(Y),jb=n(Y,"LI",{});var xIe=s(jb);Cue=n(xIe,"STRONG",{});var h3t=s(Cue);eOo=r(h3t,"mvp"),h3t.forEach(t),oOo=r(xIe," \u2014 "),ez=n(xIe,"A",{href:!0});var p3t=s(ez);rOo=r(p3t,"MvpForConditionalGeneration"),p3t.forEach(t),tOo=r(xIe," (MVP model)"),xIe.forEach(t),aOo=i(Y),Db=n(Y,"LI",{});var $Ie=s(Db);wue=n($Ie,"STRONG",{});var _3t=s(wue);nOo=r(_3t,"nezha"),_3t.forEach(t),sOo=r($Ie," \u2014 "),oz=n($Ie,"A",{href:!0});var u3t=s(oz);lOo=r(u3t,"NezhaForMaskedLM"),u3t.forEach(t),iOo=r($Ie," (Nezha model)"),$Ie.forEach(t),dOo=i(Y),Gb=n(Y,"LI",{});var kIe=s(Gb);Aue=n(kIe,"STRONG",{});var b3t=s(Aue);cOo=r(b3t,"nystromformer"),b3t.forEach(t),fOo=r(kIe," \u2014 "),rz=n(kIe,"A",{href:!0});var v3t=s(rz);mOo=r(v3t,"NystromformerForMaskedLM"),v3t.forEach(t),gOo=r(kIe," (Nystr\xF6mformer model)"),kIe.forEach(t),hOo=i(Y),Ob=n(Y,"LI",{});var SIe=s(Ob);Lue=n(SIe,"STRONG",{});var F3t=s(Lue);pOo=r(F3t,"perceiver"),F3t.forEach(t),_Oo=r(SIe," \u2014 "),tz=n(SIe,"A",{href:!0});var T3t=s(tz);uOo=r(T3t,"PerceiverForMaskedLM"),T3t.forEach(t),bOo=r(SIe," (Perceiver model)"),SIe.forEach(t),vOo=i(Y),Vb=n(Y,"LI",{});var RIe=s(Vb);yue=n(RIe,"STRONG",{});var M3t=s(yue);FOo=r(M3t,"qdqbert"),M3t.forEach(t),TOo=r(RIe," \u2014 "),az=n(RIe,"A",{href:!0});var E3t=s(az);MOo=r(E3t,"QDQBertForMaskedLM"),E3t.forEach(t),EOo=r(RIe," (QDQBert model)"),RIe.forEach(t),COo=i(Y),Xb=n(Y,"LI",{});var PIe=s(Xb);xue=n(PIe,"STRONG",{});var C3t=s(xue);wOo=r(C3t,"reformer"),C3t.forEach(t),AOo=r(PIe," \u2014 "),nz=n(PIe,"A",{href:!0});var w3t=s(nz);LOo=r(w3t,"ReformerForMaskedLM"),w3t.forEach(t),yOo=r(PIe," (Reformer model)"),PIe.forEach(t),xOo=i(Y),zb=n(Y,"LI",{});var BIe=s(zb);$ue=n(BIe,"STRONG",{});var A3t=s($ue);$Oo=r(A3t,"rembert"),A3t.forEach(t),kOo=r(BIe," \u2014 "),sz=n(BIe,"A",{href:!0});var L3t=s(sz);SOo=r(L3t,"RemBertForMaskedLM"),L3t.forEach(t),ROo=r(BIe," (RemBERT model)"),BIe.forEach(t),POo=i(Y),Wb=n(Y,"LI",{});var IIe=s(Wb);kue=n(IIe,"STRONG",{});var y3t=s(kue);BOo=r(y3t,"roberta"),y3t.forEach(t),IOo=r(IIe," \u2014 "),lz=n(IIe,"A",{href:!0});var x3t=s(lz);NOo=r(x3t,"RobertaForMaskedLM"),x3t.forEach(t),qOo=r(IIe," (RoBERTa model)"),IIe.forEach(t),jOo=i(Y),Qb=n(Y,"LI",{});var NIe=s(Qb);Sue=n(NIe,"STRONG",{});var $3t=s(Sue);DOo=r($3t,"roformer"),$3t.forEach(t),GOo=r(NIe," \u2014 "),iz=n(NIe,"A",{href:!0});var k3t=s(iz);OOo=r(k3t,"RoFormerForMaskedLM"),k3t.forEach(t),VOo=r(NIe," (RoFormer model)"),NIe.forEach(t),XOo=i(Y),Ub=n(Y,"LI",{});var qIe=s(Ub);Rue=n(qIe,"STRONG",{});var S3t=s(Rue);zOo=r(S3t,"squeezebert"),S3t.forEach(t),WOo=r(qIe," \u2014 "),dz=n(qIe,"A",{href:!0});var R3t=s(dz);QOo=r(R3t,"SqueezeBertForMaskedLM"),R3t.forEach(t),UOo=r(qIe," (SqueezeBERT model)"),qIe.forEach(t),HOo=i(Y),Hb=n(Y,"LI",{});var jIe=s(Hb);Pue=n(jIe,"STRONG",{});var P3t=s(Pue);JOo=r(P3t,"tapas"),P3t.forEach(t),YOo=r(jIe," \u2014 "),cz=n(jIe,"A",{href:!0});var B3t=s(cz);KOo=r(B3t,"TapasForMaskedLM"),B3t.forEach(t),ZOo=r(jIe," (TAPAS model)"),jIe.forEach(t),eVo=i(Y),Jb=n(Y,"LI",{});var DIe=s(Jb);Bue=n(DIe,"STRONG",{});var I3t=s(Bue);oVo=r(I3t,"wav2vec2"),I3t.forEach(t),rVo=r(DIe," \u2014 "),Iue=n(DIe,"CODE",{});var N3t=s(Iue);tVo=r(N3t,"Wav2Vec2ForMaskedLM"),N3t.forEach(t),aVo=r(DIe," (Wav2Vec2 model)"),DIe.forEach(t),nVo=i(Y),Yb=n(Y,"LI",{});var GIe=s(Yb);Nue=n(GIe,"STRONG",{});var q3t=s(Nue);sVo=r(q3t,"xlm"),q3t.forEach(t),lVo=r(GIe," \u2014 "),fz=n(GIe,"A",{href:!0});var j3t=s(fz);iVo=r(j3t,"XLMWithLMHeadModel"),j3t.forEach(t),dVo=r(GIe," (XLM model)"),GIe.forEach(t),cVo=i(Y),Kb=n(Y,"LI",{});var OIe=s(Kb);que=n(OIe,"STRONG",{});var D3t=s(que);fVo=r(D3t,"xlm-roberta"),D3t.forEach(t),mVo=r(OIe," \u2014 "),mz=n(OIe,"A",{href:!0});var G3t=s(mz);gVo=r(G3t,"XLMRobertaForMaskedLM"),G3t.forEach(t),hVo=r(OIe," (XLM-RoBERTa model)"),OIe.forEach(t),pVo=i(Y),Zb=n(Y,"LI",{});var VIe=s(Zb);jue=n(VIe,"STRONG",{});var O3t=s(jue);_Vo=r(O3t,"xlm-roberta-xl"),O3t.forEach(t),uVo=r(VIe," \u2014 "),gz=n(VIe,"A",{href:!0});var V3t=s(gz);bVo=r(V3t,"XLMRobertaXLForMaskedLM"),V3t.forEach(t),vVo=r(VIe," (XLM-RoBERTa-XL model)"),VIe.forEach(t),FVo=i(Y),ev=n(Y,"LI",{});var XIe=s(ev);Due=n(XIe,"STRONG",{});var X3t=s(Due);TVo=r(X3t,"yoso"),X3t.forEach(t),MVo=r(XIe," \u2014 "),hz=n(XIe,"A",{href:!0});var z3t=s(hz);EVo=r(z3t,"YosoForMaskedLM"),z3t.forEach(t),CVo=r(XIe," (YOSO model)"),XIe.forEach(t),Y.forEach(t),wVo=i(_a),ov=n(_a,"P",{});var zIe=s(ov);AVo=r(zIe,"The model is set in evaluation mode by default using "),Gue=n(zIe,"CODE",{});var W3t=s(Gue);LVo=r(W3t,"model.eval()"),W3t.forEach(t),yVo=r(zIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(zIe,"CODE",{});var Q3t=s(Oue);xVo=r(Q3t,"model.train()"),Q3t.forEach(t),zIe.forEach(t),$Vo=i(_a),T(rv.$$.fragment,_a),_a.forEach(t),ul.forEach(t),pUe=i(f),hd=n(f,"H2",{class:!0});var wJe=s(hd);tv=n(wJe,"A",{id:!0,class:!0,href:!0});var U3t=s(tv);Vue=n(U3t,"SPAN",{});var H3t=s(Vue);T(ly.$$.fragment,H3t),H3t.forEach(t),U3t.forEach(t),kVo=i(wJe),Xue=n(wJe,"SPAN",{});var J3t=s(Xue);SVo=r(J3t,"AutoModelForSeq2SeqLM"),J3t.forEach(t),wJe.forEach(t),_Ue=i(f),Io=n(f,"DIV",{class:!0});var bl=s(Io);T(iy.$$.fragment,bl),RVo=i(bl),pd=n(bl,"P",{});var Kae=s(pd);PVo=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pz=n(Kae,"A",{href:!0});var Y3t=s(pz);BVo=r(Y3t,"from_pretrained()"),Y3t.forEach(t),IVo=r(Kae," class method or the "),_z=n(Kae,"A",{href:!0});var K3t=s(_z);NVo=r(K3t,"from_config()"),K3t.forEach(t),qVo=r(Kae,` class
method.`),Kae.forEach(t),jVo=i(bl),dy=n(bl,"P",{});var AJe=s(dy);DVo=r(AJe,"This class cannot be instantiated directly using "),zue=n(AJe,"CODE",{});var Z3t=s(zue);GVo=r(Z3t,"__init__()"),Z3t.forEach(t),OVo=r(AJe," (throws an error)."),AJe.forEach(t),VVo=i(bl),_t=n(bl,"DIV",{class:!0});var M6=s(_t);T(cy.$$.fragment,M6),XVo=i(M6),Wue=n(M6,"P",{});var e0t=s(Wue);zVo=r(e0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e0t.forEach(t),WVo=i(M6),_d=n(M6,"P",{});var Zae=s(_d);QVo=r(Zae,`Note:
Loading a model from its configuration file does `),Que=n(Zae,"STRONG",{});var o0t=s(Que);UVo=r(o0t,"not"),o0t.forEach(t),HVo=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(Zae,"A",{href:!0});var r0t=s(uz);JVo=r(r0t,"from_pretrained()"),r0t.forEach(t),YVo=r(Zae," to load the model weights."),Zae.forEach(t),KVo=i(M6),T(av.$$.fragment,M6),M6.forEach(t),ZVo=i(bl),ro=n(bl,"DIV",{class:!0});var ua=s(ro);T(fy.$$.fragment,ua),eXo=i(ua),Uue=n(ua,"P",{});var t0t=s(Uue);oXo=r(t0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t0t.forEach(t),rXo=i(ua),Qa=n(ua,"P",{});var E6=s(Qa);tXo=r(E6,"The model class to instantiate is selected based on the "),Hue=n(E6,"CODE",{});var a0t=s(Hue);aXo=r(a0t,"model_type"),a0t.forEach(t),nXo=r(E6,` property of the config object (either
passed as an argument or loaded from `),Jue=n(E6,"CODE",{});var n0t=s(Jue);sXo=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),lXo=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(E6,"CODE",{});var s0t=s(Yue);iXo=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),dXo=r(E6,":"),E6.forEach(t),cXo=i(ua),me=n(ua,"UL",{});var ue=s(me);nv=n(ue,"LI",{});var WIe=s(nv);Kue=n(WIe,"STRONG",{});var l0t=s(Kue);fXo=r(l0t,"bart"),l0t.forEach(t),mXo=r(WIe," \u2014 "),bz=n(WIe,"A",{href:!0});var i0t=s(bz);gXo=r(i0t,"BartForConditionalGeneration"),i0t.forEach(t),hXo=r(WIe," (BART model)"),WIe.forEach(t),pXo=i(ue),sv=n(ue,"LI",{});var QIe=s(sv);Zue=n(QIe,"STRONG",{});var d0t=s(Zue);_Xo=r(d0t,"bigbird_pegasus"),d0t.forEach(t),uXo=r(QIe," \u2014 "),vz=n(QIe,"A",{href:!0});var c0t=s(vz);bXo=r(c0t,"BigBirdPegasusForConditionalGeneration"),c0t.forEach(t),vXo=r(QIe," (BigBird-Pegasus model)"),QIe.forEach(t),FXo=i(ue),lv=n(ue,"LI",{});var UIe=s(lv);e1e=n(UIe,"STRONG",{});var f0t=s(e1e);TXo=r(f0t,"blenderbot"),f0t.forEach(t),MXo=r(UIe," \u2014 "),Fz=n(UIe,"A",{href:!0});var m0t=s(Fz);EXo=r(m0t,"BlenderbotForConditionalGeneration"),m0t.forEach(t),CXo=r(UIe," (Blenderbot model)"),UIe.forEach(t),wXo=i(ue),iv=n(ue,"LI",{});var HIe=s(iv);o1e=n(HIe,"STRONG",{});var g0t=s(o1e);AXo=r(g0t,"blenderbot-small"),g0t.forEach(t),LXo=r(HIe," \u2014 "),Tz=n(HIe,"A",{href:!0});var h0t=s(Tz);yXo=r(h0t,"BlenderbotSmallForConditionalGeneration"),h0t.forEach(t),xXo=r(HIe," (BlenderbotSmall model)"),HIe.forEach(t),$Xo=i(ue),dv=n(ue,"LI",{});var JIe=s(dv);r1e=n(JIe,"STRONG",{});var p0t=s(r1e);kXo=r(p0t,"encoder-decoder"),p0t.forEach(t),SXo=r(JIe," \u2014 "),Mz=n(JIe,"A",{href:!0});var _0t=s(Mz);RXo=r(_0t,"EncoderDecoderModel"),_0t.forEach(t),PXo=r(JIe," (Encoder decoder model)"),JIe.forEach(t),BXo=i(ue),cv=n(ue,"LI",{});var YIe=s(cv);t1e=n(YIe,"STRONG",{});var u0t=s(t1e);IXo=r(u0t,"fsmt"),u0t.forEach(t),NXo=r(YIe," \u2014 "),Ez=n(YIe,"A",{href:!0});var b0t=s(Ez);qXo=r(b0t,"FSMTForConditionalGeneration"),b0t.forEach(t),jXo=r(YIe," (FairSeq Machine-Translation model)"),YIe.forEach(t),DXo=i(ue),fv=n(ue,"LI",{});var KIe=s(fv);a1e=n(KIe,"STRONG",{});var v0t=s(a1e);GXo=r(v0t,"led"),v0t.forEach(t),OXo=r(KIe," \u2014 "),Cz=n(KIe,"A",{href:!0});var F0t=s(Cz);VXo=r(F0t,"LEDForConditionalGeneration"),F0t.forEach(t),XXo=r(KIe," (LED model)"),KIe.forEach(t),zXo=i(ue),mv=n(ue,"LI",{});var ZIe=s(mv);n1e=n(ZIe,"STRONG",{});var T0t=s(n1e);WXo=r(T0t,"longt5"),T0t.forEach(t),QXo=r(ZIe," \u2014 "),wz=n(ZIe,"A",{href:!0});var M0t=s(wz);UXo=r(M0t,"LongT5ForConditionalGeneration"),M0t.forEach(t),HXo=r(ZIe," (LongT5 model)"),ZIe.forEach(t),JXo=i(ue),gv=n(ue,"LI",{});var eNe=s(gv);s1e=n(eNe,"STRONG",{});var E0t=s(s1e);YXo=r(E0t,"m2m_100"),E0t.forEach(t),KXo=r(eNe," \u2014 "),Az=n(eNe,"A",{href:!0});var C0t=s(Az);ZXo=r(C0t,"M2M100ForConditionalGeneration"),C0t.forEach(t),ezo=r(eNe," (M2M100 model)"),eNe.forEach(t),ozo=i(ue),hv=n(ue,"LI",{});var oNe=s(hv);l1e=n(oNe,"STRONG",{});var w0t=s(l1e);rzo=r(w0t,"marian"),w0t.forEach(t),tzo=r(oNe," \u2014 "),Lz=n(oNe,"A",{href:!0});var A0t=s(Lz);azo=r(A0t,"MarianMTModel"),A0t.forEach(t),nzo=r(oNe," (Marian model)"),oNe.forEach(t),szo=i(ue),pv=n(ue,"LI",{});var rNe=s(pv);i1e=n(rNe,"STRONG",{});var L0t=s(i1e);lzo=r(L0t,"mbart"),L0t.forEach(t),izo=r(rNe," \u2014 "),yz=n(rNe,"A",{href:!0});var y0t=s(yz);dzo=r(y0t,"MBartForConditionalGeneration"),y0t.forEach(t),czo=r(rNe," (mBART model)"),rNe.forEach(t),fzo=i(ue),_v=n(ue,"LI",{});var tNe=s(_v);d1e=n(tNe,"STRONG",{});var x0t=s(d1e);mzo=r(x0t,"mt5"),x0t.forEach(t),gzo=r(tNe," \u2014 "),xz=n(tNe,"A",{href:!0});var $0t=s(xz);hzo=r($0t,"MT5ForConditionalGeneration"),$0t.forEach(t),pzo=r(tNe," (MT5 model)"),tNe.forEach(t),_zo=i(ue),uv=n(ue,"LI",{});var aNe=s(uv);c1e=n(aNe,"STRONG",{});var k0t=s(c1e);uzo=r(k0t,"mvp"),k0t.forEach(t),bzo=r(aNe," \u2014 "),$z=n(aNe,"A",{href:!0});var S0t=s($z);vzo=r(S0t,"MvpForConditionalGeneration"),S0t.forEach(t),Fzo=r(aNe," (MVP model)"),aNe.forEach(t),Tzo=i(ue),bv=n(ue,"LI",{});var nNe=s(bv);f1e=n(nNe,"STRONG",{});var R0t=s(f1e);Mzo=r(R0t,"nllb"),R0t.forEach(t),Ezo=r(nNe," \u2014 "),kz=n(nNe,"A",{href:!0});var P0t=s(kz);Czo=r(P0t,"M2M100ForConditionalGeneration"),P0t.forEach(t),wzo=r(nNe," (NLLB model)"),nNe.forEach(t),Azo=i(ue),vv=n(ue,"LI",{});var sNe=s(vv);m1e=n(sNe,"STRONG",{});var B0t=s(m1e);Lzo=r(B0t,"pegasus"),B0t.forEach(t),yzo=r(sNe," \u2014 "),Sz=n(sNe,"A",{href:!0});var I0t=s(Sz);xzo=r(I0t,"PegasusForConditionalGeneration"),I0t.forEach(t),$zo=r(sNe," (Pegasus model)"),sNe.forEach(t),kzo=i(ue),Fv=n(ue,"LI",{});var lNe=s(Fv);g1e=n(lNe,"STRONG",{});var N0t=s(g1e);Szo=r(N0t,"plbart"),N0t.forEach(t),Rzo=r(lNe," \u2014 "),Rz=n(lNe,"A",{href:!0});var q0t=s(Rz);Pzo=r(q0t,"PLBartForConditionalGeneration"),q0t.forEach(t),Bzo=r(lNe," (PLBart model)"),lNe.forEach(t),Izo=i(ue),Tv=n(ue,"LI",{});var iNe=s(Tv);h1e=n(iNe,"STRONG",{});var j0t=s(h1e);Nzo=r(j0t,"prophetnet"),j0t.forEach(t),qzo=r(iNe," \u2014 "),Pz=n(iNe,"A",{href:!0});var D0t=s(Pz);jzo=r(D0t,"ProphetNetForConditionalGeneration"),D0t.forEach(t),Dzo=r(iNe," (ProphetNet model)"),iNe.forEach(t),Gzo=i(ue),Mv=n(ue,"LI",{});var dNe=s(Mv);p1e=n(dNe,"STRONG",{});var G0t=s(p1e);Ozo=r(G0t,"t5"),G0t.forEach(t),Vzo=r(dNe," \u2014 "),Bz=n(dNe,"A",{href:!0});var O0t=s(Bz);Xzo=r(O0t,"T5ForConditionalGeneration"),O0t.forEach(t),zzo=r(dNe," (T5 model)"),dNe.forEach(t),Wzo=i(ue),Ev=n(ue,"LI",{});var cNe=s(Ev);_1e=n(cNe,"STRONG",{});var V0t=s(_1e);Qzo=r(V0t,"xlm-prophetnet"),V0t.forEach(t),Uzo=r(cNe," \u2014 "),Iz=n(cNe,"A",{href:!0});var X0t=s(Iz);Hzo=r(X0t,"XLMProphetNetForConditionalGeneration"),X0t.forEach(t),Jzo=r(cNe," (XLM-ProphetNet model)"),cNe.forEach(t),ue.forEach(t),Yzo=i(ua),Cv=n(ua,"P",{});var fNe=s(Cv);Kzo=r(fNe,"The model is set in evaluation mode by default using "),u1e=n(fNe,"CODE",{});var z0t=s(u1e);Zzo=r(z0t,"model.eval()"),z0t.forEach(t),eWo=r(fNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=n(fNe,"CODE",{});var W0t=s(b1e);oWo=r(W0t,"model.train()"),W0t.forEach(t),fNe.forEach(t),rWo=i(ua),T(wv.$$.fragment,ua),ua.forEach(t),bl.forEach(t),uUe=i(f),ud=n(f,"H2",{class:!0});var LJe=s(ud);Av=n(LJe,"A",{id:!0,class:!0,href:!0});var Q0t=s(Av);v1e=n(Q0t,"SPAN",{});var U0t=s(v1e);T(my.$$.fragment,U0t),U0t.forEach(t),Q0t.forEach(t),tWo=i(LJe),F1e=n(LJe,"SPAN",{});var H0t=s(F1e);aWo=r(H0t,"AutoModelForSequenceClassification"),H0t.forEach(t),LJe.forEach(t),bUe=i(f),No=n(f,"DIV",{class:!0});var vl=s(No);T(gy.$$.fragment,vl),nWo=i(vl),bd=n(vl,"P",{});var ene=s(bd);sWo=r(ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nz=n(ene,"A",{href:!0});var J0t=s(Nz);lWo=r(J0t,"from_pretrained()"),J0t.forEach(t),iWo=r(ene," class method or the "),qz=n(ene,"A",{href:!0});var Y0t=s(qz);dWo=r(Y0t,"from_config()"),Y0t.forEach(t),cWo=r(ene,` class
method.`),ene.forEach(t),fWo=i(vl),hy=n(vl,"P",{});var yJe=s(hy);mWo=r(yJe,"This class cannot be instantiated directly using "),T1e=n(yJe,"CODE",{});var K0t=s(T1e);gWo=r(K0t,"__init__()"),K0t.forEach(t),hWo=r(yJe," (throws an error)."),yJe.forEach(t),pWo=i(vl),ut=n(vl,"DIV",{class:!0});var C6=s(ut);T(py.$$.fragment,C6),_Wo=i(C6),M1e=n(C6,"P",{});var Z0t=s(M1e);uWo=r(Z0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z0t.forEach(t),bWo=i(C6),vd=n(C6,"P",{});var one=s(vd);vWo=r(one,`Note:
Loading a model from its configuration file does `),E1e=n(one,"STRONG",{});var ewt=s(E1e);FWo=r(ewt,"not"),ewt.forEach(t),TWo=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(one,"A",{href:!0});var owt=s(jz);MWo=r(owt,"from_pretrained()"),owt.forEach(t),EWo=r(one," to load the model weights."),one.forEach(t),CWo=i(C6),T(Lv.$$.fragment,C6),C6.forEach(t),wWo=i(vl),to=n(vl,"DIV",{class:!0});var ba=s(to);T(_y.$$.fragment,ba),AWo=i(ba),C1e=n(ba,"P",{});var rwt=s(C1e);LWo=r(rwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rwt.forEach(t),yWo=i(ba),Ua=n(ba,"P",{});var w6=s(Ua);xWo=r(w6,"The model class to instantiate is selected based on the "),w1e=n(w6,"CODE",{});var twt=s(w1e);$Wo=r(twt,"model_type"),twt.forEach(t),kWo=r(w6,` property of the config object (either
passed as an argument or loaded from `),A1e=n(w6,"CODE",{});var awt=s(A1e);SWo=r(awt,"pretrained_model_name_or_path"),awt.forEach(t),RWo=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(w6,"CODE",{});var nwt=s(L1e);PWo=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),BWo=r(w6,":"),w6.forEach(t),IWo=i(ba),N=n(ba,"UL",{});var j=s(N);yv=n(j,"LI",{});var mNe=s(yv);y1e=n(mNe,"STRONG",{});var swt=s(y1e);NWo=r(swt,"albert"),swt.forEach(t),qWo=r(mNe," \u2014 "),Dz=n(mNe,"A",{href:!0});var lwt=s(Dz);jWo=r(lwt,"AlbertForSequenceClassification"),lwt.forEach(t),DWo=r(mNe," (ALBERT model)"),mNe.forEach(t),GWo=i(j),xv=n(j,"LI",{});var gNe=s(xv);x1e=n(gNe,"STRONG",{});var iwt=s(x1e);OWo=r(iwt,"bart"),iwt.forEach(t),VWo=r(gNe," \u2014 "),Gz=n(gNe,"A",{href:!0});var dwt=s(Gz);XWo=r(dwt,"BartForSequenceClassification"),dwt.forEach(t),zWo=r(gNe," (BART model)"),gNe.forEach(t),WWo=i(j),$v=n(j,"LI",{});var hNe=s($v);$1e=n(hNe,"STRONG",{});var cwt=s($1e);QWo=r(cwt,"bert"),cwt.forEach(t),UWo=r(hNe," \u2014 "),Oz=n(hNe,"A",{href:!0});var fwt=s(Oz);HWo=r(fwt,"BertForSequenceClassification"),fwt.forEach(t),JWo=r(hNe," (BERT model)"),hNe.forEach(t),YWo=i(j),kv=n(j,"LI",{});var pNe=s(kv);k1e=n(pNe,"STRONG",{});var mwt=s(k1e);KWo=r(mwt,"big_bird"),mwt.forEach(t),ZWo=r(pNe," \u2014 "),Vz=n(pNe,"A",{href:!0});var gwt=s(Vz);eQo=r(gwt,"BigBirdForSequenceClassification"),gwt.forEach(t),oQo=r(pNe," (BigBird model)"),pNe.forEach(t),rQo=i(j),Sv=n(j,"LI",{});var _Ne=s(Sv);S1e=n(_Ne,"STRONG",{});var hwt=s(S1e);tQo=r(hwt,"bigbird_pegasus"),hwt.forEach(t),aQo=r(_Ne," \u2014 "),Xz=n(_Ne,"A",{href:!0});var pwt=s(Xz);nQo=r(pwt,"BigBirdPegasusForSequenceClassification"),pwt.forEach(t),sQo=r(_Ne," (BigBird-Pegasus model)"),_Ne.forEach(t),lQo=i(j),Rv=n(j,"LI",{});var uNe=s(Rv);R1e=n(uNe,"STRONG",{});var _wt=s(R1e);iQo=r(_wt,"bloom"),_wt.forEach(t),dQo=r(uNe," \u2014 "),zz=n(uNe,"A",{href:!0});var uwt=s(zz);cQo=r(uwt,"BloomForSequenceClassification"),uwt.forEach(t),fQo=r(uNe," (BLOOM model)"),uNe.forEach(t),mQo=i(j),Pv=n(j,"LI",{});var bNe=s(Pv);P1e=n(bNe,"STRONG",{});var bwt=s(P1e);gQo=r(bwt,"camembert"),bwt.forEach(t),hQo=r(bNe," \u2014 "),Wz=n(bNe,"A",{href:!0});var vwt=s(Wz);pQo=r(vwt,"CamembertForSequenceClassification"),vwt.forEach(t),_Qo=r(bNe," (CamemBERT model)"),bNe.forEach(t),uQo=i(j),Bv=n(j,"LI",{});var vNe=s(Bv);B1e=n(vNe,"STRONG",{});var Fwt=s(B1e);bQo=r(Fwt,"canine"),Fwt.forEach(t),vQo=r(vNe," \u2014 "),Qz=n(vNe,"A",{href:!0});var Twt=s(Qz);FQo=r(Twt,"CanineForSequenceClassification"),Twt.forEach(t),TQo=r(vNe," (CANINE model)"),vNe.forEach(t),MQo=i(j),Iv=n(j,"LI",{});var FNe=s(Iv);I1e=n(FNe,"STRONG",{});var Mwt=s(I1e);EQo=r(Mwt,"convbert"),Mwt.forEach(t),CQo=r(FNe," \u2014 "),Uz=n(FNe,"A",{href:!0});var Ewt=s(Uz);wQo=r(Ewt,"ConvBertForSequenceClassification"),Ewt.forEach(t),AQo=r(FNe," (ConvBERT model)"),FNe.forEach(t),LQo=i(j),Nv=n(j,"LI",{});var TNe=s(Nv);N1e=n(TNe,"STRONG",{});var Cwt=s(N1e);yQo=r(Cwt,"ctrl"),Cwt.forEach(t),xQo=r(TNe," \u2014 "),Hz=n(TNe,"A",{href:!0});var wwt=s(Hz);$Qo=r(wwt,"CTRLForSequenceClassification"),wwt.forEach(t),kQo=r(TNe," (CTRL model)"),TNe.forEach(t),SQo=i(j),qv=n(j,"LI",{});var MNe=s(qv);q1e=n(MNe,"STRONG",{});var Awt=s(q1e);RQo=r(Awt,"data2vec-text"),Awt.forEach(t),PQo=r(MNe," \u2014 "),Jz=n(MNe,"A",{href:!0});var Lwt=s(Jz);BQo=r(Lwt,"Data2VecTextForSequenceClassification"),Lwt.forEach(t),IQo=r(MNe," (Data2VecText model)"),MNe.forEach(t),NQo=i(j),jv=n(j,"LI",{});var ENe=s(jv);j1e=n(ENe,"STRONG",{});var ywt=s(j1e);qQo=r(ywt,"deberta"),ywt.forEach(t),jQo=r(ENe," \u2014 "),Yz=n(ENe,"A",{href:!0});var xwt=s(Yz);DQo=r(xwt,"DebertaForSequenceClassification"),xwt.forEach(t),GQo=r(ENe," (DeBERTa model)"),ENe.forEach(t),OQo=i(j),Dv=n(j,"LI",{});var CNe=s(Dv);D1e=n(CNe,"STRONG",{});var $wt=s(D1e);VQo=r($wt,"deberta-v2"),$wt.forEach(t),XQo=r(CNe," \u2014 "),Kz=n(CNe,"A",{href:!0});var kwt=s(Kz);zQo=r(kwt,"DebertaV2ForSequenceClassification"),kwt.forEach(t),WQo=r(CNe," (DeBERTa-v2 model)"),CNe.forEach(t),QQo=i(j),Gv=n(j,"LI",{});var wNe=s(Gv);G1e=n(wNe,"STRONG",{});var Swt=s(G1e);UQo=r(Swt,"distilbert"),Swt.forEach(t),HQo=r(wNe," \u2014 "),Zz=n(wNe,"A",{href:!0});var Rwt=s(Zz);JQo=r(Rwt,"DistilBertForSequenceClassification"),Rwt.forEach(t),YQo=r(wNe," (DistilBERT model)"),wNe.forEach(t),KQo=i(j),Ov=n(j,"LI",{});var ANe=s(Ov);O1e=n(ANe,"STRONG",{});var Pwt=s(O1e);ZQo=r(Pwt,"electra"),Pwt.forEach(t),eUo=r(ANe," \u2014 "),eW=n(ANe,"A",{href:!0});var Bwt=s(eW);oUo=r(Bwt,"ElectraForSequenceClassification"),Bwt.forEach(t),rUo=r(ANe," (ELECTRA model)"),ANe.forEach(t),tUo=i(j),Vv=n(j,"LI",{});var LNe=s(Vv);V1e=n(LNe,"STRONG",{});var Iwt=s(V1e);aUo=r(Iwt,"flaubert"),Iwt.forEach(t),nUo=r(LNe," \u2014 "),oW=n(LNe,"A",{href:!0});var Nwt=s(oW);sUo=r(Nwt,"FlaubertForSequenceClassification"),Nwt.forEach(t),lUo=r(LNe," (FlauBERT model)"),LNe.forEach(t),iUo=i(j),Xv=n(j,"LI",{});var yNe=s(Xv);X1e=n(yNe,"STRONG",{});var qwt=s(X1e);dUo=r(qwt,"fnet"),qwt.forEach(t),cUo=r(yNe," \u2014 "),rW=n(yNe,"A",{href:!0});var jwt=s(rW);fUo=r(jwt,"FNetForSequenceClassification"),jwt.forEach(t),mUo=r(yNe," (FNet model)"),yNe.forEach(t),gUo=i(j),zv=n(j,"LI",{});var xNe=s(zv);z1e=n(xNe,"STRONG",{});var Dwt=s(z1e);hUo=r(Dwt,"funnel"),Dwt.forEach(t),pUo=r(xNe," \u2014 "),tW=n(xNe,"A",{href:!0});var Gwt=s(tW);_Uo=r(Gwt,"FunnelForSequenceClassification"),Gwt.forEach(t),uUo=r(xNe," (Funnel Transformer model)"),xNe.forEach(t),bUo=i(j),Wv=n(j,"LI",{});var $Ne=s(Wv);W1e=n($Ne,"STRONG",{});var Owt=s(W1e);vUo=r(Owt,"gpt2"),Owt.forEach(t),FUo=r($Ne," \u2014 "),aW=n($Ne,"A",{href:!0});var Vwt=s(aW);TUo=r(Vwt,"GPT2ForSequenceClassification"),Vwt.forEach(t),MUo=r($Ne," (OpenAI GPT-2 model)"),$Ne.forEach(t),EUo=i(j),Qv=n(j,"LI",{});var kNe=s(Qv);Q1e=n(kNe,"STRONG",{});var Xwt=s(Q1e);CUo=r(Xwt,"gpt_neo"),Xwt.forEach(t),wUo=r(kNe," \u2014 "),nW=n(kNe,"A",{href:!0});var zwt=s(nW);AUo=r(zwt,"GPTNeoForSequenceClassification"),zwt.forEach(t),LUo=r(kNe," (GPT Neo model)"),kNe.forEach(t),yUo=i(j),Uv=n(j,"LI",{});var SNe=s(Uv);U1e=n(SNe,"STRONG",{});var Wwt=s(U1e);xUo=r(Wwt,"gptj"),Wwt.forEach(t),$Uo=r(SNe," \u2014 "),sW=n(SNe,"A",{href:!0});var Qwt=s(sW);kUo=r(Qwt,"GPTJForSequenceClassification"),Qwt.forEach(t),SUo=r(SNe," (GPT-J model)"),SNe.forEach(t),RUo=i(j),Hv=n(j,"LI",{});var RNe=s(Hv);H1e=n(RNe,"STRONG",{});var Uwt=s(H1e);PUo=r(Uwt,"ibert"),Uwt.forEach(t),BUo=r(RNe," \u2014 "),lW=n(RNe,"A",{href:!0});var Hwt=s(lW);IUo=r(Hwt,"IBertForSequenceClassification"),Hwt.forEach(t),NUo=r(RNe," (I-BERT model)"),RNe.forEach(t),qUo=i(j),Jv=n(j,"LI",{});var PNe=s(Jv);J1e=n(PNe,"STRONG",{});var Jwt=s(J1e);jUo=r(Jwt,"layoutlm"),Jwt.forEach(t),DUo=r(PNe," \u2014 "),iW=n(PNe,"A",{href:!0});var Ywt=s(iW);GUo=r(Ywt,"LayoutLMForSequenceClassification"),Ywt.forEach(t),OUo=r(PNe," (LayoutLM model)"),PNe.forEach(t),VUo=i(j),Yv=n(j,"LI",{});var BNe=s(Yv);Y1e=n(BNe,"STRONG",{});var Kwt=s(Y1e);XUo=r(Kwt,"layoutlmv2"),Kwt.forEach(t),zUo=r(BNe," \u2014 "),dW=n(BNe,"A",{href:!0});var Zwt=s(dW);WUo=r(Zwt,"LayoutLMv2ForSequenceClassification"),Zwt.forEach(t),QUo=r(BNe," (LayoutLMv2 model)"),BNe.forEach(t),UUo=i(j),Kv=n(j,"LI",{});var INe=s(Kv);K1e=n(INe,"STRONG",{});var e6t=s(K1e);HUo=r(e6t,"layoutlmv3"),e6t.forEach(t),JUo=r(INe," \u2014 "),cW=n(INe,"A",{href:!0});var o6t=s(cW);YUo=r(o6t,"LayoutLMv3ForSequenceClassification"),o6t.forEach(t),KUo=r(INe," (LayoutLMv3 model)"),INe.forEach(t),ZUo=i(j),Zv=n(j,"LI",{});var NNe=s(Zv);Z1e=n(NNe,"STRONG",{});var r6t=s(Z1e);eHo=r(r6t,"led"),r6t.forEach(t),oHo=r(NNe," \u2014 "),fW=n(NNe,"A",{href:!0});var t6t=s(fW);rHo=r(t6t,"LEDForSequenceClassification"),t6t.forEach(t),tHo=r(NNe," (LED model)"),NNe.forEach(t),aHo=i(j),e5=n(j,"LI",{});var qNe=s(e5);e2e=n(qNe,"STRONG",{});var a6t=s(e2e);nHo=r(a6t,"longformer"),a6t.forEach(t),sHo=r(qNe," \u2014 "),mW=n(qNe,"A",{href:!0});var n6t=s(mW);lHo=r(n6t,"LongformerForSequenceClassification"),n6t.forEach(t),iHo=r(qNe," (Longformer model)"),qNe.forEach(t),dHo=i(j),o5=n(j,"LI",{});var jNe=s(o5);o2e=n(jNe,"STRONG",{});var s6t=s(o2e);cHo=r(s6t,"luke"),s6t.forEach(t),fHo=r(jNe," \u2014 "),gW=n(jNe,"A",{href:!0});var l6t=s(gW);mHo=r(l6t,"LukeForSequenceClassification"),l6t.forEach(t),gHo=r(jNe," (LUKE model)"),jNe.forEach(t),hHo=i(j),r5=n(j,"LI",{});var DNe=s(r5);r2e=n(DNe,"STRONG",{});var i6t=s(r2e);pHo=r(i6t,"mbart"),i6t.forEach(t),_Ho=r(DNe," \u2014 "),hW=n(DNe,"A",{href:!0});var d6t=s(hW);uHo=r(d6t,"MBartForSequenceClassification"),d6t.forEach(t),bHo=r(DNe," (mBART model)"),DNe.forEach(t),vHo=i(j),t5=n(j,"LI",{});var GNe=s(t5);t2e=n(GNe,"STRONG",{});var c6t=s(t2e);FHo=r(c6t,"megatron-bert"),c6t.forEach(t),THo=r(GNe," \u2014 "),pW=n(GNe,"A",{href:!0});var f6t=s(pW);MHo=r(f6t,"MegatronBertForSequenceClassification"),f6t.forEach(t),EHo=r(GNe," (Megatron-BERT model)"),GNe.forEach(t),CHo=i(j),a5=n(j,"LI",{});var ONe=s(a5);a2e=n(ONe,"STRONG",{});var m6t=s(a2e);wHo=r(m6t,"mobilebert"),m6t.forEach(t),AHo=r(ONe," \u2014 "),_W=n(ONe,"A",{href:!0});var g6t=s(_W);LHo=r(g6t,"MobileBertForSequenceClassification"),g6t.forEach(t),yHo=r(ONe," (MobileBERT model)"),ONe.forEach(t),xHo=i(j),n5=n(j,"LI",{});var VNe=s(n5);n2e=n(VNe,"STRONG",{});var h6t=s(n2e);$Ho=r(h6t,"mpnet"),h6t.forEach(t),kHo=r(VNe," \u2014 "),uW=n(VNe,"A",{href:!0});var p6t=s(uW);SHo=r(p6t,"MPNetForSequenceClassification"),p6t.forEach(t),RHo=r(VNe," (MPNet model)"),VNe.forEach(t),PHo=i(j),s5=n(j,"LI",{});var XNe=s(s5);s2e=n(XNe,"STRONG",{});var _6t=s(s2e);BHo=r(_6t,"mvp"),_6t.forEach(t),IHo=r(XNe," \u2014 "),bW=n(XNe,"A",{href:!0});var u6t=s(bW);NHo=r(u6t,"MvpForSequenceClassification"),u6t.forEach(t),qHo=r(XNe," (MVP model)"),XNe.forEach(t),jHo=i(j),l5=n(j,"LI",{});var zNe=s(l5);l2e=n(zNe,"STRONG",{});var b6t=s(l2e);DHo=r(b6t,"nezha"),b6t.forEach(t),GHo=r(zNe," \u2014 "),vW=n(zNe,"A",{href:!0});var v6t=s(vW);OHo=r(v6t,"NezhaForSequenceClassification"),v6t.forEach(t),VHo=r(zNe," (Nezha model)"),zNe.forEach(t),XHo=i(j),i5=n(j,"LI",{});var WNe=s(i5);i2e=n(WNe,"STRONG",{});var F6t=s(i2e);zHo=r(F6t,"nystromformer"),F6t.forEach(t),WHo=r(WNe," \u2014 "),FW=n(WNe,"A",{href:!0});var T6t=s(FW);QHo=r(T6t,"NystromformerForSequenceClassification"),T6t.forEach(t),UHo=r(WNe," (Nystr\xF6mformer model)"),WNe.forEach(t),HHo=i(j),d5=n(j,"LI",{});var QNe=s(d5);d2e=n(QNe,"STRONG",{});var M6t=s(d2e);JHo=r(M6t,"openai-gpt"),M6t.forEach(t),YHo=r(QNe," \u2014 "),TW=n(QNe,"A",{href:!0});var E6t=s(TW);KHo=r(E6t,"OpenAIGPTForSequenceClassification"),E6t.forEach(t),ZHo=r(QNe," (OpenAI GPT model)"),QNe.forEach(t),eJo=i(j),c5=n(j,"LI",{});var UNe=s(c5);c2e=n(UNe,"STRONG",{});var C6t=s(c2e);oJo=r(C6t,"opt"),C6t.forEach(t),rJo=r(UNe," \u2014 "),MW=n(UNe,"A",{href:!0});var w6t=s(MW);tJo=r(w6t,"OPTForSequenceClassification"),w6t.forEach(t),aJo=r(UNe," (OPT model)"),UNe.forEach(t),nJo=i(j),f5=n(j,"LI",{});var HNe=s(f5);f2e=n(HNe,"STRONG",{});var A6t=s(f2e);sJo=r(A6t,"perceiver"),A6t.forEach(t),lJo=r(HNe," \u2014 "),EW=n(HNe,"A",{href:!0});var L6t=s(EW);iJo=r(L6t,"PerceiverForSequenceClassification"),L6t.forEach(t),dJo=r(HNe," (Perceiver model)"),HNe.forEach(t),cJo=i(j),m5=n(j,"LI",{});var JNe=s(m5);m2e=n(JNe,"STRONG",{});var y6t=s(m2e);fJo=r(y6t,"plbart"),y6t.forEach(t),mJo=r(JNe," \u2014 "),CW=n(JNe,"A",{href:!0});var x6t=s(CW);gJo=r(x6t,"PLBartForSequenceClassification"),x6t.forEach(t),hJo=r(JNe," (PLBart model)"),JNe.forEach(t),pJo=i(j),g5=n(j,"LI",{});var YNe=s(g5);g2e=n(YNe,"STRONG",{});var $6t=s(g2e);_Jo=r($6t,"qdqbert"),$6t.forEach(t),uJo=r(YNe," \u2014 "),wW=n(YNe,"A",{href:!0});var k6t=s(wW);bJo=r(k6t,"QDQBertForSequenceClassification"),k6t.forEach(t),vJo=r(YNe," (QDQBert model)"),YNe.forEach(t),FJo=i(j),h5=n(j,"LI",{});var KNe=s(h5);h2e=n(KNe,"STRONG",{});var S6t=s(h2e);TJo=r(S6t,"reformer"),S6t.forEach(t),MJo=r(KNe," \u2014 "),AW=n(KNe,"A",{href:!0});var R6t=s(AW);EJo=r(R6t,"ReformerForSequenceClassification"),R6t.forEach(t),CJo=r(KNe," (Reformer model)"),KNe.forEach(t),wJo=i(j),p5=n(j,"LI",{});var ZNe=s(p5);p2e=n(ZNe,"STRONG",{});var P6t=s(p2e);AJo=r(P6t,"rembert"),P6t.forEach(t),LJo=r(ZNe," \u2014 "),LW=n(ZNe,"A",{href:!0});var B6t=s(LW);yJo=r(B6t,"RemBertForSequenceClassification"),B6t.forEach(t),xJo=r(ZNe," (RemBERT model)"),ZNe.forEach(t),$Jo=i(j),_5=n(j,"LI",{});var eqe=s(_5);_2e=n(eqe,"STRONG",{});var I6t=s(_2e);kJo=r(I6t,"roberta"),I6t.forEach(t),SJo=r(eqe," \u2014 "),yW=n(eqe,"A",{href:!0});var N6t=s(yW);RJo=r(N6t,"RobertaForSequenceClassification"),N6t.forEach(t),PJo=r(eqe," (RoBERTa model)"),eqe.forEach(t),BJo=i(j),u5=n(j,"LI",{});var oqe=s(u5);u2e=n(oqe,"STRONG",{});var q6t=s(u2e);IJo=r(q6t,"roformer"),q6t.forEach(t),NJo=r(oqe," \u2014 "),xW=n(oqe,"A",{href:!0});var j6t=s(xW);qJo=r(j6t,"RoFormerForSequenceClassification"),j6t.forEach(t),jJo=r(oqe," (RoFormer model)"),oqe.forEach(t),DJo=i(j),b5=n(j,"LI",{});var rqe=s(b5);b2e=n(rqe,"STRONG",{});var D6t=s(b2e);GJo=r(D6t,"squeezebert"),D6t.forEach(t),OJo=r(rqe," \u2014 "),$W=n(rqe,"A",{href:!0});var G6t=s($W);VJo=r(G6t,"SqueezeBertForSequenceClassification"),G6t.forEach(t),XJo=r(rqe," (SqueezeBERT model)"),rqe.forEach(t),zJo=i(j),v5=n(j,"LI",{});var tqe=s(v5);v2e=n(tqe,"STRONG",{});var O6t=s(v2e);WJo=r(O6t,"tapas"),O6t.forEach(t),QJo=r(tqe," \u2014 "),kW=n(tqe,"A",{href:!0});var V6t=s(kW);UJo=r(V6t,"TapasForSequenceClassification"),V6t.forEach(t),HJo=r(tqe," (TAPAS model)"),tqe.forEach(t),JJo=i(j),F5=n(j,"LI",{});var aqe=s(F5);F2e=n(aqe,"STRONG",{});var X6t=s(F2e);YJo=r(X6t,"transfo-xl"),X6t.forEach(t),KJo=r(aqe," \u2014 "),SW=n(aqe,"A",{href:!0});var z6t=s(SW);ZJo=r(z6t,"TransfoXLForSequenceClassification"),z6t.forEach(t),eYo=r(aqe," (Transformer-XL model)"),aqe.forEach(t),oYo=i(j),T5=n(j,"LI",{});var nqe=s(T5);T2e=n(nqe,"STRONG",{});var W6t=s(T2e);rYo=r(W6t,"xlm"),W6t.forEach(t),tYo=r(nqe," \u2014 "),RW=n(nqe,"A",{href:!0});var Q6t=s(RW);aYo=r(Q6t,"XLMForSequenceClassification"),Q6t.forEach(t),nYo=r(nqe," (XLM model)"),nqe.forEach(t),sYo=i(j),M5=n(j,"LI",{});var sqe=s(M5);M2e=n(sqe,"STRONG",{});var U6t=s(M2e);lYo=r(U6t,"xlm-roberta"),U6t.forEach(t),iYo=r(sqe," \u2014 "),PW=n(sqe,"A",{href:!0});var H6t=s(PW);dYo=r(H6t,"XLMRobertaForSequenceClassification"),H6t.forEach(t),cYo=r(sqe," (XLM-RoBERTa model)"),sqe.forEach(t),fYo=i(j),E5=n(j,"LI",{});var lqe=s(E5);E2e=n(lqe,"STRONG",{});var J6t=s(E2e);mYo=r(J6t,"xlm-roberta-xl"),J6t.forEach(t),gYo=r(lqe," \u2014 "),BW=n(lqe,"A",{href:!0});var Y6t=s(BW);hYo=r(Y6t,"XLMRobertaXLForSequenceClassification"),Y6t.forEach(t),pYo=r(lqe," (XLM-RoBERTa-XL model)"),lqe.forEach(t),_Yo=i(j),C5=n(j,"LI",{});var iqe=s(C5);C2e=n(iqe,"STRONG",{});var K6t=s(C2e);uYo=r(K6t,"xlnet"),K6t.forEach(t),bYo=r(iqe," \u2014 "),IW=n(iqe,"A",{href:!0});var Z6t=s(IW);vYo=r(Z6t,"XLNetForSequenceClassification"),Z6t.forEach(t),FYo=r(iqe," (XLNet model)"),iqe.forEach(t),TYo=i(j),w5=n(j,"LI",{});var dqe=s(w5);w2e=n(dqe,"STRONG",{});var eAt=s(w2e);MYo=r(eAt,"yoso"),eAt.forEach(t),EYo=r(dqe," \u2014 "),NW=n(dqe,"A",{href:!0});var oAt=s(NW);CYo=r(oAt,"YosoForSequenceClassification"),oAt.forEach(t),wYo=r(dqe," (YOSO model)"),dqe.forEach(t),j.forEach(t),AYo=i(ba),A5=n(ba,"P",{});var cqe=s(A5);LYo=r(cqe,"The model is set in evaluation mode by default using "),A2e=n(cqe,"CODE",{});var rAt=s(A2e);yYo=r(rAt,"model.eval()"),rAt.forEach(t),xYo=r(cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=n(cqe,"CODE",{});var tAt=s(L2e);$Yo=r(tAt,"model.train()"),tAt.forEach(t),cqe.forEach(t),kYo=i(ba),T(L5.$$.fragment,ba),ba.forEach(t),vl.forEach(t),vUe=i(f),Fd=n(f,"H2",{class:!0});var xJe=s(Fd);y5=n(xJe,"A",{id:!0,class:!0,href:!0});var aAt=s(y5);y2e=n(aAt,"SPAN",{});var nAt=s(y2e);T(uy.$$.fragment,nAt),nAt.forEach(t),aAt.forEach(t),SYo=i(xJe),x2e=n(xJe,"SPAN",{});var sAt=s(x2e);RYo=r(sAt,"AutoModelForMultipleChoice"),sAt.forEach(t),xJe.forEach(t),FUe=i(f),qo=n(f,"DIV",{class:!0});var Fl=s(qo);T(by.$$.fragment,Fl),PYo=i(Fl),Td=n(Fl,"P",{});var rne=s(Td);BYo=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qW=n(rne,"A",{href:!0});var lAt=s(qW);IYo=r(lAt,"from_pretrained()"),lAt.forEach(t),NYo=r(rne," class method or the "),jW=n(rne,"A",{href:!0});var iAt=s(jW);qYo=r(iAt,"from_config()"),iAt.forEach(t),jYo=r(rne,` class
method.`),rne.forEach(t),DYo=i(Fl),vy=n(Fl,"P",{});var $Je=s(vy);GYo=r($Je,"This class cannot be instantiated directly using "),$2e=n($Je,"CODE",{});var dAt=s($2e);OYo=r(dAt,"__init__()"),dAt.forEach(t),VYo=r($Je," (throws an error)."),$Je.forEach(t),XYo=i(Fl),bt=n(Fl,"DIV",{class:!0});var A6=s(bt);T(Fy.$$.fragment,A6),zYo=i(A6),k2e=n(A6,"P",{});var cAt=s(k2e);WYo=r(cAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cAt.forEach(t),QYo=i(A6),Md=n(A6,"P",{});var tne=s(Md);UYo=r(tne,`Note:
Loading a model from its configuration file does `),S2e=n(tne,"STRONG",{});var fAt=s(S2e);HYo=r(fAt,"not"),fAt.forEach(t),JYo=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(tne,"A",{href:!0});var mAt=s(DW);YYo=r(mAt,"from_pretrained()"),mAt.forEach(t),KYo=r(tne," to load the model weights."),tne.forEach(t),ZYo=i(A6),T(x5.$$.fragment,A6),A6.forEach(t),eKo=i(Fl),ao=n(Fl,"DIV",{class:!0});var va=s(ao);T(Ty.$$.fragment,va),oKo=i(va),R2e=n(va,"P",{});var gAt=s(R2e);rKo=r(gAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gAt.forEach(t),tKo=i(va),Ha=n(va,"P",{});var L6=s(Ha);aKo=r(L6,"The model class to instantiate is selected based on the "),P2e=n(L6,"CODE",{});var hAt=s(P2e);nKo=r(hAt,"model_type"),hAt.forEach(t),sKo=r(L6,` property of the config object (either
passed as an argument or loaded from `),B2e=n(L6,"CODE",{});var pAt=s(B2e);lKo=r(pAt,"pretrained_model_name_or_path"),pAt.forEach(t),iKo=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(L6,"CODE",{});var _At=s(I2e);dKo=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),cKo=r(L6,":"),L6.forEach(t),fKo=i(va),Z=n(va,"UL",{});var ee=s(Z);$5=n(ee,"LI",{});var fqe=s($5);N2e=n(fqe,"STRONG",{});var uAt=s(N2e);mKo=r(uAt,"albert"),uAt.forEach(t),gKo=r(fqe," \u2014 "),GW=n(fqe,"A",{href:!0});var bAt=s(GW);hKo=r(bAt,"AlbertForMultipleChoice"),bAt.forEach(t),pKo=r(fqe," (ALBERT model)"),fqe.forEach(t),_Ko=i(ee),k5=n(ee,"LI",{});var mqe=s(k5);q2e=n(mqe,"STRONG",{});var vAt=s(q2e);uKo=r(vAt,"bert"),vAt.forEach(t),bKo=r(mqe," \u2014 "),OW=n(mqe,"A",{href:!0});var FAt=s(OW);vKo=r(FAt,"BertForMultipleChoice"),FAt.forEach(t),FKo=r(mqe," (BERT model)"),mqe.forEach(t),TKo=i(ee),S5=n(ee,"LI",{});var gqe=s(S5);j2e=n(gqe,"STRONG",{});var TAt=s(j2e);MKo=r(TAt,"big_bird"),TAt.forEach(t),EKo=r(gqe," \u2014 "),VW=n(gqe,"A",{href:!0});var MAt=s(VW);CKo=r(MAt,"BigBirdForMultipleChoice"),MAt.forEach(t),wKo=r(gqe," (BigBird model)"),gqe.forEach(t),AKo=i(ee),R5=n(ee,"LI",{});var hqe=s(R5);D2e=n(hqe,"STRONG",{});var EAt=s(D2e);LKo=r(EAt,"camembert"),EAt.forEach(t),yKo=r(hqe," \u2014 "),XW=n(hqe,"A",{href:!0});var CAt=s(XW);xKo=r(CAt,"CamembertForMultipleChoice"),CAt.forEach(t),$Ko=r(hqe," (CamemBERT model)"),hqe.forEach(t),kKo=i(ee),P5=n(ee,"LI",{});var pqe=s(P5);G2e=n(pqe,"STRONG",{});var wAt=s(G2e);SKo=r(wAt,"canine"),wAt.forEach(t),RKo=r(pqe," \u2014 "),zW=n(pqe,"A",{href:!0});var AAt=s(zW);PKo=r(AAt,"CanineForMultipleChoice"),AAt.forEach(t),BKo=r(pqe," (CANINE model)"),pqe.forEach(t),IKo=i(ee),B5=n(ee,"LI",{});var _qe=s(B5);O2e=n(_qe,"STRONG",{});var LAt=s(O2e);NKo=r(LAt,"convbert"),LAt.forEach(t),qKo=r(_qe," \u2014 "),WW=n(_qe,"A",{href:!0});var yAt=s(WW);jKo=r(yAt,"ConvBertForMultipleChoice"),yAt.forEach(t),DKo=r(_qe," (ConvBERT model)"),_qe.forEach(t),GKo=i(ee),I5=n(ee,"LI",{});var uqe=s(I5);V2e=n(uqe,"STRONG",{});var xAt=s(V2e);OKo=r(xAt,"data2vec-text"),xAt.forEach(t),VKo=r(uqe," \u2014 "),QW=n(uqe,"A",{href:!0});var $At=s(QW);XKo=r($At,"Data2VecTextForMultipleChoice"),$At.forEach(t),zKo=r(uqe," (Data2VecText model)"),uqe.forEach(t),WKo=i(ee),N5=n(ee,"LI",{});var bqe=s(N5);X2e=n(bqe,"STRONG",{});var kAt=s(X2e);QKo=r(kAt,"deberta-v2"),kAt.forEach(t),UKo=r(bqe," \u2014 "),UW=n(bqe,"A",{href:!0});var SAt=s(UW);HKo=r(SAt,"DebertaV2ForMultipleChoice"),SAt.forEach(t),JKo=r(bqe," (DeBERTa-v2 model)"),bqe.forEach(t),YKo=i(ee),q5=n(ee,"LI",{});var vqe=s(q5);z2e=n(vqe,"STRONG",{});var RAt=s(z2e);KKo=r(RAt,"distilbert"),RAt.forEach(t),ZKo=r(vqe," \u2014 "),HW=n(vqe,"A",{href:!0});var PAt=s(HW);eZo=r(PAt,"DistilBertForMultipleChoice"),PAt.forEach(t),oZo=r(vqe," (DistilBERT model)"),vqe.forEach(t),rZo=i(ee),j5=n(ee,"LI",{});var Fqe=s(j5);W2e=n(Fqe,"STRONG",{});var BAt=s(W2e);tZo=r(BAt,"electra"),BAt.forEach(t),aZo=r(Fqe," \u2014 "),JW=n(Fqe,"A",{href:!0});var IAt=s(JW);nZo=r(IAt,"ElectraForMultipleChoice"),IAt.forEach(t),sZo=r(Fqe," (ELECTRA model)"),Fqe.forEach(t),lZo=i(ee),D5=n(ee,"LI",{});var Tqe=s(D5);Q2e=n(Tqe,"STRONG",{});var NAt=s(Q2e);iZo=r(NAt,"flaubert"),NAt.forEach(t),dZo=r(Tqe," \u2014 "),YW=n(Tqe,"A",{href:!0});var qAt=s(YW);cZo=r(qAt,"FlaubertForMultipleChoice"),qAt.forEach(t),fZo=r(Tqe," (FlauBERT model)"),Tqe.forEach(t),mZo=i(ee),G5=n(ee,"LI",{});var Mqe=s(G5);U2e=n(Mqe,"STRONG",{});var jAt=s(U2e);gZo=r(jAt,"fnet"),jAt.forEach(t),hZo=r(Mqe," \u2014 "),KW=n(Mqe,"A",{href:!0});var DAt=s(KW);pZo=r(DAt,"FNetForMultipleChoice"),DAt.forEach(t),_Zo=r(Mqe," (FNet model)"),Mqe.forEach(t),uZo=i(ee),O5=n(ee,"LI",{});var Eqe=s(O5);H2e=n(Eqe,"STRONG",{});var GAt=s(H2e);bZo=r(GAt,"funnel"),GAt.forEach(t),vZo=r(Eqe," \u2014 "),ZW=n(Eqe,"A",{href:!0});var OAt=s(ZW);FZo=r(OAt,"FunnelForMultipleChoice"),OAt.forEach(t),TZo=r(Eqe," (Funnel Transformer model)"),Eqe.forEach(t),MZo=i(ee),V5=n(ee,"LI",{});var Cqe=s(V5);J2e=n(Cqe,"STRONG",{});var VAt=s(J2e);EZo=r(VAt,"ibert"),VAt.forEach(t),CZo=r(Cqe," \u2014 "),eQ=n(Cqe,"A",{href:!0});var XAt=s(eQ);wZo=r(XAt,"IBertForMultipleChoice"),XAt.forEach(t),AZo=r(Cqe," (I-BERT model)"),Cqe.forEach(t),LZo=i(ee),X5=n(ee,"LI",{});var wqe=s(X5);Y2e=n(wqe,"STRONG",{});var zAt=s(Y2e);yZo=r(zAt,"longformer"),zAt.forEach(t),xZo=r(wqe," \u2014 "),oQ=n(wqe,"A",{href:!0});var WAt=s(oQ);$Zo=r(WAt,"LongformerForMultipleChoice"),WAt.forEach(t),kZo=r(wqe," (Longformer model)"),wqe.forEach(t),SZo=i(ee),z5=n(ee,"LI",{});var Aqe=s(z5);K2e=n(Aqe,"STRONG",{});var QAt=s(K2e);RZo=r(QAt,"luke"),QAt.forEach(t),PZo=r(Aqe," \u2014 "),rQ=n(Aqe,"A",{href:!0});var UAt=s(rQ);BZo=r(UAt,"LukeForMultipleChoice"),UAt.forEach(t),IZo=r(Aqe," (LUKE model)"),Aqe.forEach(t),NZo=i(ee),W5=n(ee,"LI",{});var Lqe=s(W5);Z2e=n(Lqe,"STRONG",{});var HAt=s(Z2e);qZo=r(HAt,"megatron-bert"),HAt.forEach(t),jZo=r(Lqe," \u2014 "),tQ=n(Lqe,"A",{href:!0});var JAt=s(tQ);DZo=r(JAt,"MegatronBertForMultipleChoice"),JAt.forEach(t),GZo=r(Lqe," (Megatron-BERT model)"),Lqe.forEach(t),OZo=i(ee),Q5=n(ee,"LI",{});var yqe=s(Q5);ebe=n(yqe,"STRONG",{});var YAt=s(ebe);VZo=r(YAt,"mobilebert"),YAt.forEach(t),XZo=r(yqe," \u2014 "),aQ=n(yqe,"A",{href:!0});var KAt=s(aQ);zZo=r(KAt,"MobileBertForMultipleChoice"),KAt.forEach(t),WZo=r(yqe," (MobileBERT model)"),yqe.forEach(t),QZo=i(ee),U5=n(ee,"LI",{});var xqe=s(U5);obe=n(xqe,"STRONG",{});var ZAt=s(obe);UZo=r(ZAt,"mpnet"),ZAt.forEach(t),HZo=r(xqe," \u2014 "),nQ=n(xqe,"A",{href:!0});var eLt=s(nQ);JZo=r(eLt,"MPNetForMultipleChoice"),eLt.forEach(t),YZo=r(xqe," (MPNet model)"),xqe.forEach(t),KZo=i(ee),H5=n(ee,"LI",{});var $qe=s(H5);rbe=n($qe,"STRONG",{});var oLt=s(rbe);ZZo=r(oLt,"nezha"),oLt.forEach(t),eer=r($qe," \u2014 "),sQ=n($qe,"A",{href:!0});var rLt=s(sQ);oer=r(rLt,"NezhaForMultipleChoice"),rLt.forEach(t),rer=r($qe," (Nezha model)"),$qe.forEach(t),ter=i(ee),J5=n(ee,"LI",{});var kqe=s(J5);tbe=n(kqe,"STRONG",{});var tLt=s(tbe);aer=r(tLt,"nystromformer"),tLt.forEach(t),ner=r(kqe," \u2014 "),lQ=n(kqe,"A",{href:!0});var aLt=s(lQ);ser=r(aLt,"NystromformerForMultipleChoice"),aLt.forEach(t),ler=r(kqe," (Nystr\xF6mformer model)"),kqe.forEach(t),ier=i(ee),Y5=n(ee,"LI",{});var Sqe=s(Y5);abe=n(Sqe,"STRONG",{});var nLt=s(abe);der=r(nLt,"qdqbert"),nLt.forEach(t),cer=r(Sqe," \u2014 "),iQ=n(Sqe,"A",{href:!0});var sLt=s(iQ);fer=r(sLt,"QDQBertForMultipleChoice"),sLt.forEach(t),mer=r(Sqe," (QDQBert model)"),Sqe.forEach(t),ger=i(ee),K5=n(ee,"LI",{});var Rqe=s(K5);nbe=n(Rqe,"STRONG",{});var lLt=s(nbe);her=r(lLt,"rembert"),lLt.forEach(t),per=r(Rqe," \u2014 "),dQ=n(Rqe,"A",{href:!0});var iLt=s(dQ);_er=r(iLt,"RemBertForMultipleChoice"),iLt.forEach(t),uer=r(Rqe," (RemBERT model)"),Rqe.forEach(t),ber=i(ee),Z5=n(ee,"LI",{});var Pqe=s(Z5);sbe=n(Pqe,"STRONG",{});var dLt=s(sbe);ver=r(dLt,"roberta"),dLt.forEach(t),Fer=r(Pqe," \u2014 "),cQ=n(Pqe,"A",{href:!0});var cLt=s(cQ);Ter=r(cLt,"RobertaForMultipleChoice"),cLt.forEach(t),Mer=r(Pqe," (RoBERTa model)"),Pqe.forEach(t),Eer=i(ee),eF=n(ee,"LI",{});var Bqe=s(eF);lbe=n(Bqe,"STRONG",{});var fLt=s(lbe);Cer=r(fLt,"roformer"),fLt.forEach(t),wer=r(Bqe," \u2014 "),fQ=n(Bqe,"A",{href:!0});var mLt=s(fQ);Aer=r(mLt,"RoFormerForMultipleChoice"),mLt.forEach(t),Ler=r(Bqe," (RoFormer model)"),Bqe.forEach(t),yer=i(ee),oF=n(ee,"LI",{});var Iqe=s(oF);ibe=n(Iqe,"STRONG",{});var gLt=s(ibe);xer=r(gLt,"squeezebert"),gLt.forEach(t),$er=r(Iqe," \u2014 "),mQ=n(Iqe,"A",{href:!0});var hLt=s(mQ);ker=r(hLt,"SqueezeBertForMultipleChoice"),hLt.forEach(t),Ser=r(Iqe," (SqueezeBERT model)"),Iqe.forEach(t),Rer=i(ee),rF=n(ee,"LI",{});var Nqe=s(rF);dbe=n(Nqe,"STRONG",{});var pLt=s(dbe);Per=r(pLt,"xlm"),pLt.forEach(t),Ber=r(Nqe," \u2014 "),gQ=n(Nqe,"A",{href:!0});var _Lt=s(gQ);Ier=r(_Lt,"XLMForMultipleChoice"),_Lt.forEach(t),Ner=r(Nqe," (XLM model)"),Nqe.forEach(t),qer=i(ee),tF=n(ee,"LI",{});var qqe=s(tF);cbe=n(qqe,"STRONG",{});var uLt=s(cbe);jer=r(uLt,"xlm-roberta"),uLt.forEach(t),Der=r(qqe," \u2014 "),hQ=n(qqe,"A",{href:!0});var bLt=s(hQ);Ger=r(bLt,"XLMRobertaForMultipleChoice"),bLt.forEach(t),Oer=r(qqe," (XLM-RoBERTa model)"),qqe.forEach(t),Ver=i(ee),aF=n(ee,"LI",{});var jqe=s(aF);fbe=n(jqe,"STRONG",{});var vLt=s(fbe);Xer=r(vLt,"xlm-roberta-xl"),vLt.forEach(t),zer=r(jqe," \u2014 "),pQ=n(jqe,"A",{href:!0});var FLt=s(pQ);Wer=r(FLt,"XLMRobertaXLForMultipleChoice"),FLt.forEach(t),Qer=r(jqe," (XLM-RoBERTa-XL model)"),jqe.forEach(t),Uer=i(ee),nF=n(ee,"LI",{});var Dqe=s(nF);mbe=n(Dqe,"STRONG",{});var TLt=s(mbe);Her=r(TLt,"xlnet"),TLt.forEach(t),Jer=r(Dqe," \u2014 "),_Q=n(Dqe,"A",{href:!0});var MLt=s(_Q);Yer=r(MLt,"XLNetForMultipleChoice"),MLt.forEach(t),Ker=r(Dqe," (XLNet model)"),Dqe.forEach(t),Zer=i(ee),sF=n(ee,"LI",{});var Gqe=s(sF);gbe=n(Gqe,"STRONG",{});var ELt=s(gbe);eor=r(ELt,"yoso"),ELt.forEach(t),oor=r(Gqe," \u2014 "),uQ=n(Gqe,"A",{href:!0});var CLt=s(uQ);ror=r(CLt,"YosoForMultipleChoice"),CLt.forEach(t),tor=r(Gqe," (YOSO model)"),Gqe.forEach(t),ee.forEach(t),aor=i(va),lF=n(va,"P",{});var Oqe=s(lF);nor=r(Oqe,"The model is set in evaluation mode by default using "),hbe=n(Oqe,"CODE",{});var wLt=s(hbe);sor=r(wLt,"model.eval()"),wLt.forEach(t),lor=r(Oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pbe=n(Oqe,"CODE",{});var ALt=s(pbe);ior=r(ALt,"model.train()"),ALt.forEach(t),Oqe.forEach(t),dor=i(va),T(iF.$$.fragment,va),va.forEach(t),Fl.forEach(t),TUe=i(f),Ed=n(f,"H2",{class:!0});var kJe=s(Ed);dF=n(kJe,"A",{id:!0,class:!0,href:!0});var LLt=s(dF);_be=n(LLt,"SPAN",{});var yLt=s(_be);T(My.$$.fragment,yLt),yLt.forEach(t),LLt.forEach(t),cor=i(kJe),ube=n(kJe,"SPAN",{});var xLt=s(ube);mor=r(xLt,"AutoModelForNextSentencePrediction"),xLt.forEach(t),kJe.forEach(t),MUe=i(f),jo=n(f,"DIV",{class:!0});var Tl=s(jo);T(Ey.$$.fragment,Tl),gor=i(Tl),Cd=n(Tl,"P",{});var ane=s(Cd);hor=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bQ=n(ane,"A",{href:!0});var $Lt=s(bQ);por=r($Lt,"from_pretrained()"),$Lt.forEach(t),_or=r(ane," class method or the "),vQ=n(ane,"A",{href:!0});var kLt=s(vQ);uor=r(kLt,"from_config()"),kLt.forEach(t),bor=r(ane,` class
method.`),ane.forEach(t),vor=i(Tl),Cy=n(Tl,"P",{});var SJe=s(Cy);For=r(SJe,"This class cannot be instantiated directly using "),bbe=n(SJe,"CODE",{});var SLt=s(bbe);Tor=r(SLt,"__init__()"),SLt.forEach(t),Mor=r(SJe," (throws an error)."),SJe.forEach(t),Eor=i(Tl),vt=n(Tl,"DIV",{class:!0});var y6=s(vt);T(wy.$$.fragment,y6),Cor=i(y6),vbe=n(y6,"P",{});var RLt=s(vbe);wor=r(RLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),RLt.forEach(t),Aor=i(y6),wd=n(y6,"P",{});var nne=s(wd);Lor=r(nne,`Note:
Loading a model from its configuration file does `),Fbe=n(nne,"STRONG",{});var PLt=s(Fbe);yor=r(PLt,"not"),PLt.forEach(t),xor=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(nne,"A",{href:!0});var BLt=s(FQ);$or=r(BLt,"from_pretrained()"),BLt.forEach(t),kor=r(nne," to load the model weights."),nne.forEach(t),Sor=i(y6),T(cF.$$.fragment,y6),y6.forEach(t),Ror=i(Tl),no=n(Tl,"DIV",{class:!0});var Fa=s(no);T(Ay.$$.fragment,Fa),Por=i(Fa),Tbe=n(Fa,"P",{});var ILt=s(Tbe);Bor=r(ILt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ILt.forEach(t),Ior=i(Fa),Ja=n(Fa,"P",{});var x6=s(Ja);Nor=r(x6,"The model class to instantiate is selected based on the "),Mbe=n(x6,"CODE",{});var NLt=s(Mbe);qor=r(NLt,"model_type"),NLt.forEach(t),jor=r(x6,` property of the config object (either
passed as an argument or loaded from `),Ebe=n(x6,"CODE",{});var qLt=s(Ebe);Dor=r(qLt,"pretrained_model_name_or_path"),qLt.forEach(t),Gor=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=n(x6,"CODE",{});var jLt=s(Cbe);Oor=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),Vor=r(x6,":"),x6.forEach(t),Xor=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);fF=n(Ta,"LI",{});var Vqe=s(fF);wbe=n(Vqe,"STRONG",{});var DLt=s(wbe);zor=r(DLt,"bert"),DLt.forEach(t),Wor=r(Vqe," \u2014 "),TQ=n(Vqe,"A",{href:!0});var GLt=s(TQ);Qor=r(GLt,"BertForNextSentencePrediction"),GLt.forEach(t),Uor=r(Vqe," (BERT model)"),Vqe.forEach(t),Hor=i(Ta),mF=n(Ta,"LI",{});var Xqe=s(mF);Abe=n(Xqe,"STRONG",{});var OLt=s(Abe);Jor=r(OLt,"fnet"),OLt.forEach(t),Yor=r(Xqe," \u2014 "),MQ=n(Xqe,"A",{href:!0});var VLt=s(MQ);Kor=r(VLt,"FNetForNextSentencePrediction"),VLt.forEach(t),Zor=r(Xqe," (FNet model)"),Xqe.forEach(t),err=i(Ta),gF=n(Ta,"LI",{});var zqe=s(gF);Lbe=n(zqe,"STRONG",{});var XLt=s(Lbe);orr=r(XLt,"megatron-bert"),XLt.forEach(t),rrr=r(zqe," \u2014 "),EQ=n(zqe,"A",{href:!0});var zLt=s(EQ);trr=r(zLt,"MegatronBertForNextSentencePrediction"),zLt.forEach(t),arr=r(zqe," (Megatron-BERT model)"),zqe.forEach(t),nrr=i(Ta),hF=n(Ta,"LI",{});var Wqe=s(hF);ybe=n(Wqe,"STRONG",{});var WLt=s(ybe);srr=r(WLt,"mobilebert"),WLt.forEach(t),lrr=r(Wqe," \u2014 "),CQ=n(Wqe,"A",{href:!0});var QLt=s(CQ);irr=r(QLt,"MobileBertForNextSentencePrediction"),QLt.forEach(t),drr=r(Wqe," (MobileBERT model)"),Wqe.forEach(t),crr=i(Ta),pF=n(Ta,"LI",{});var Qqe=s(pF);xbe=n(Qqe,"STRONG",{});var ULt=s(xbe);frr=r(ULt,"nezha"),ULt.forEach(t),mrr=r(Qqe," \u2014 "),wQ=n(Qqe,"A",{href:!0});var HLt=s(wQ);grr=r(HLt,"NezhaForNextSentencePrediction"),HLt.forEach(t),hrr=r(Qqe," (Nezha model)"),Qqe.forEach(t),prr=i(Ta),_F=n(Ta,"LI",{});var Uqe=s(_F);$be=n(Uqe,"STRONG",{});var JLt=s($be);_rr=r(JLt,"qdqbert"),JLt.forEach(t),urr=r(Uqe," \u2014 "),AQ=n(Uqe,"A",{href:!0});var YLt=s(AQ);brr=r(YLt,"QDQBertForNextSentencePrediction"),YLt.forEach(t),vrr=r(Uqe," (QDQBert model)"),Uqe.forEach(t),Ta.forEach(t),Frr=i(Fa),uF=n(Fa,"P",{});var Hqe=s(uF);Trr=r(Hqe,"The model is set in evaluation mode by default using "),kbe=n(Hqe,"CODE",{});var KLt=s(kbe);Mrr=r(KLt,"model.eval()"),KLt.forEach(t),Err=r(Hqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=n(Hqe,"CODE",{});var ZLt=s(Sbe);Crr=r(ZLt,"model.train()"),ZLt.forEach(t),Hqe.forEach(t),wrr=i(Fa),T(bF.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),EUe=i(f),Ad=n(f,"H2",{class:!0});var RJe=s(Ad);vF=n(RJe,"A",{id:!0,class:!0,href:!0});var eyt=s(vF);Rbe=n(eyt,"SPAN",{});var oyt=s(Rbe);T(Ly.$$.fragment,oyt),oyt.forEach(t),eyt.forEach(t),Arr=i(RJe),Pbe=n(RJe,"SPAN",{});var ryt=s(Pbe);Lrr=r(ryt,"AutoModelForTokenClassification"),ryt.forEach(t),RJe.forEach(t),CUe=i(f),Go=n(f,"DIV",{class:!0});var Ml=s(Go);T(yy.$$.fragment,Ml),yrr=i(Ml),Ld=n(Ml,"P",{});var sne=s(Ld);xrr=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LQ=n(sne,"A",{href:!0});var tyt=s(LQ);$rr=r(tyt,"from_pretrained()"),tyt.forEach(t),krr=r(sne," class method or the "),yQ=n(sne,"A",{href:!0});var ayt=s(yQ);Srr=r(ayt,"from_config()"),ayt.forEach(t),Rrr=r(sne,` class
method.`),sne.forEach(t),Prr=i(Ml),xy=n(Ml,"P",{});var PJe=s(xy);Brr=r(PJe,"This class cannot be instantiated directly using "),Bbe=n(PJe,"CODE",{});var nyt=s(Bbe);Irr=r(nyt,"__init__()"),nyt.forEach(t),Nrr=r(PJe," (throws an error)."),PJe.forEach(t),qrr=i(Ml),Ft=n(Ml,"DIV",{class:!0});var $6=s(Ft);T($y.$$.fragment,$6),jrr=i($6),Ibe=n($6,"P",{});var syt=s(Ibe);Drr=r(syt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),syt.forEach(t),Grr=i($6),yd=n($6,"P",{});var lne=s(yd);Orr=r(lne,`Note:
Loading a model from its configuration file does `),Nbe=n(lne,"STRONG",{});var lyt=s(Nbe);Vrr=r(lyt,"not"),lyt.forEach(t),Xrr=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(lne,"A",{href:!0});var iyt=s(xQ);zrr=r(iyt,"from_pretrained()"),iyt.forEach(t),Wrr=r(lne," to load the model weights."),lne.forEach(t),Qrr=i($6),T(FF.$$.fragment,$6),$6.forEach(t),Urr=i(Ml),so=n(Ml,"DIV",{class:!0});var Ma=s(so);T(ky.$$.fragment,Ma),Hrr=i(Ma),qbe=n(Ma,"P",{});var dyt=s(qbe);Jrr=r(dyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dyt.forEach(t),Yrr=i(Ma),Ya=n(Ma,"P",{});var k6=s(Ya);Krr=r(k6,"The model class to instantiate is selected based on the "),jbe=n(k6,"CODE",{});var cyt=s(jbe);Zrr=r(cyt,"model_type"),cyt.forEach(t),etr=r(k6,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(k6,"CODE",{});var fyt=s(Dbe);otr=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),rtr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(k6,"CODE",{});var myt=s(Gbe);ttr=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),atr=r(k6,":"),k6.forEach(t),ntr=i(Ma),H=n(Ma,"UL",{});var K=s(H);TF=n(K,"LI",{});var Jqe=s(TF);Obe=n(Jqe,"STRONG",{});var gyt=s(Obe);str=r(gyt,"albert"),gyt.forEach(t),ltr=r(Jqe," \u2014 "),$Q=n(Jqe,"A",{href:!0});var hyt=s($Q);itr=r(hyt,"AlbertForTokenClassification"),hyt.forEach(t),dtr=r(Jqe," (ALBERT model)"),Jqe.forEach(t),ctr=i(K),MF=n(K,"LI",{});var Yqe=s(MF);Vbe=n(Yqe,"STRONG",{});var pyt=s(Vbe);ftr=r(pyt,"bert"),pyt.forEach(t),mtr=r(Yqe," \u2014 "),kQ=n(Yqe,"A",{href:!0});var _yt=s(kQ);gtr=r(_yt,"BertForTokenClassification"),_yt.forEach(t),htr=r(Yqe," (BERT model)"),Yqe.forEach(t),ptr=i(K),EF=n(K,"LI",{});var Kqe=s(EF);Xbe=n(Kqe,"STRONG",{});var uyt=s(Xbe);_tr=r(uyt,"big_bird"),uyt.forEach(t),utr=r(Kqe," \u2014 "),SQ=n(Kqe,"A",{href:!0});var byt=s(SQ);btr=r(byt,"BigBirdForTokenClassification"),byt.forEach(t),vtr=r(Kqe," (BigBird model)"),Kqe.forEach(t),Ftr=i(K),CF=n(K,"LI",{});var Zqe=s(CF);zbe=n(Zqe,"STRONG",{});var vyt=s(zbe);Ttr=r(vyt,"bloom"),vyt.forEach(t),Mtr=r(Zqe," \u2014 "),RQ=n(Zqe,"A",{href:!0});var Fyt=s(RQ);Etr=r(Fyt,"BloomForTokenClassification"),Fyt.forEach(t),Ctr=r(Zqe," (BLOOM model)"),Zqe.forEach(t),wtr=i(K),wF=n(K,"LI",{});var eje=s(wF);Wbe=n(eje,"STRONG",{});var Tyt=s(Wbe);Atr=r(Tyt,"camembert"),Tyt.forEach(t),Ltr=r(eje," \u2014 "),PQ=n(eje,"A",{href:!0});var Myt=s(PQ);ytr=r(Myt,"CamembertForTokenClassification"),Myt.forEach(t),xtr=r(eje," (CamemBERT model)"),eje.forEach(t),$tr=i(K),AF=n(K,"LI",{});var oje=s(AF);Qbe=n(oje,"STRONG",{});var Eyt=s(Qbe);ktr=r(Eyt,"canine"),Eyt.forEach(t),Str=r(oje," \u2014 "),BQ=n(oje,"A",{href:!0});var Cyt=s(BQ);Rtr=r(Cyt,"CanineForTokenClassification"),Cyt.forEach(t),Ptr=r(oje," (CANINE model)"),oje.forEach(t),Btr=i(K),LF=n(K,"LI",{});var rje=s(LF);Ube=n(rje,"STRONG",{});var wyt=s(Ube);Itr=r(wyt,"convbert"),wyt.forEach(t),Ntr=r(rje," \u2014 "),IQ=n(rje,"A",{href:!0});var Ayt=s(IQ);qtr=r(Ayt,"ConvBertForTokenClassification"),Ayt.forEach(t),jtr=r(rje," (ConvBERT model)"),rje.forEach(t),Dtr=i(K),yF=n(K,"LI",{});var tje=s(yF);Hbe=n(tje,"STRONG",{});var Lyt=s(Hbe);Gtr=r(Lyt,"data2vec-text"),Lyt.forEach(t),Otr=r(tje," \u2014 "),NQ=n(tje,"A",{href:!0});var yyt=s(NQ);Vtr=r(yyt,"Data2VecTextForTokenClassification"),yyt.forEach(t),Xtr=r(tje," (Data2VecText model)"),tje.forEach(t),ztr=i(K),xF=n(K,"LI",{});var aje=s(xF);Jbe=n(aje,"STRONG",{});var xyt=s(Jbe);Wtr=r(xyt,"deberta"),xyt.forEach(t),Qtr=r(aje," \u2014 "),qQ=n(aje,"A",{href:!0});var $yt=s(qQ);Utr=r($yt,"DebertaForTokenClassification"),$yt.forEach(t),Htr=r(aje," (DeBERTa model)"),aje.forEach(t),Jtr=i(K),$F=n(K,"LI",{});var nje=s($F);Ybe=n(nje,"STRONG",{});var kyt=s(Ybe);Ytr=r(kyt,"deberta-v2"),kyt.forEach(t),Ktr=r(nje," \u2014 "),jQ=n(nje,"A",{href:!0});var Syt=s(jQ);Ztr=r(Syt,"DebertaV2ForTokenClassification"),Syt.forEach(t),ear=r(nje," (DeBERTa-v2 model)"),nje.forEach(t),oar=i(K),kF=n(K,"LI",{});var sje=s(kF);Kbe=n(sje,"STRONG",{});var Ryt=s(Kbe);rar=r(Ryt,"distilbert"),Ryt.forEach(t),tar=r(sje," \u2014 "),DQ=n(sje,"A",{href:!0});var Pyt=s(DQ);aar=r(Pyt,"DistilBertForTokenClassification"),Pyt.forEach(t),nar=r(sje," (DistilBERT model)"),sje.forEach(t),sar=i(K),SF=n(K,"LI",{});var lje=s(SF);Zbe=n(lje,"STRONG",{});var Byt=s(Zbe);lar=r(Byt,"electra"),Byt.forEach(t),iar=r(lje," \u2014 "),GQ=n(lje,"A",{href:!0});var Iyt=s(GQ);dar=r(Iyt,"ElectraForTokenClassification"),Iyt.forEach(t),car=r(lje," (ELECTRA model)"),lje.forEach(t),far=i(K),RF=n(K,"LI",{});var ije=s(RF);eve=n(ije,"STRONG",{});var Nyt=s(eve);mar=r(Nyt,"flaubert"),Nyt.forEach(t),gar=r(ije," \u2014 "),OQ=n(ije,"A",{href:!0});var qyt=s(OQ);har=r(qyt,"FlaubertForTokenClassification"),qyt.forEach(t),par=r(ije," (FlauBERT model)"),ije.forEach(t),_ar=i(K),PF=n(K,"LI",{});var dje=s(PF);ove=n(dje,"STRONG",{});var jyt=s(ove);uar=r(jyt,"fnet"),jyt.forEach(t),bar=r(dje," \u2014 "),VQ=n(dje,"A",{href:!0});var Dyt=s(VQ);Far=r(Dyt,"FNetForTokenClassification"),Dyt.forEach(t),Tar=r(dje," (FNet model)"),dje.forEach(t),Mar=i(K),BF=n(K,"LI",{});var cje=s(BF);rve=n(cje,"STRONG",{});var Gyt=s(rve);Ear=r(Gyt,"funnel"),Gyt.forEach(t),Car=r(cje," \u2014 "),XQ=n(cje,"A",{href:!0});var Oyt=s(XQ);war=r(Oyt,"FunnelForTokenClassification"),Oyt.forEach(t),Aar=r(cje," (Funnel Transformer model)"),cje.forEach(t),Lar=i(K),IF=n(K,"LI",{});var fje=s(IF);tve=n(fje,"STRONG",{});var Vyt=s(tve);yar=r(Vyt,"gpt2"),Vyt.forEach(t),xar=r(fje," \u2014 "),zQ=n(fje,"A",{href:!0});var Xyt=s(zQ);$ar=r(Xyt,"GPT2ForTokenClassification"),Xyt.forEach(t),kar=r(fje," (OpenAI GPT-2 model)"),fje.forEach(t),Sar=i(K),NF=n(K,"LI",{});var mje=s(NF);ave=n(mje,"STRONG",{});var zyt=s(ave);Rar=r(zyt,"ibert"),zyt.forEach(t),Par=r(mje," \u2014 "),WQ=n(mje,"A",{href:!0});var Wyt=s(WQ);Bar=r(Wyt,"IBertForTokenClassification"),Wyt.forEach(t),Iar=r(mje," (I-BERT model)"),mje.forEach(t),Nar=i(K),qF=n(K,"LI",{});var gje=s(qF);nve=n(gje,"STRONG",{});var Qyt=s(nve);qar=r(Qyt,"layoutlm"),Qyt.forEach(t),jar=r(gje," \u2014 "),QQ=n(gje,"A",{href:!0});var Uyt=s(QQ);Dar=r(Uyt,"LayoutLMForTokenClassification"),Uyt.forEach(t),Gar=r(gje," (LayoutLM model)"),gje.forEach(t),Oar=i(K),jF=n(K,"LI",{});var hje=s(jF);sve=n(hje,"STRONG",{});var Hyt=s(sve);Var=r(Hyt,"layoutlmv2"),Hyt.forEach(t),Xar=r(hje," \u2014 "),UQ=n(hje,"A",{href:!0});var Jyt=s(UQ);zar=r(Jyt,"LayoutLMv2ForTokenClassification"),Jyt.forEach(t),War=r(hje," (LayoutLMv2 model)"),hje.forEach(t),Qar=i(K),DF=n(K,"LI",{});var pje=s(DF);lve=n(pje,"STRONG",{});var Yyt=s(lve);Uar=r(Yyt,"layoutlmv3"),Yyt.forEach(t),Har=r(pje," \u2014 "),HQ=n(pje,"A",{href:!0});var Kyt=s(HQ);Jar=r(Kyt,"LayoutLMv3ForTokenClassification"),Kyt.forEach(t),Yar=r(pje," (LayoutLMv3 model)"),pje.forEach(t),Kar=i(K),GF=n(K,"LI",{});var _je=s(GF);ive=n(_je,"STRONG",{});var Zyt=s(ive);Zar=r(Zyt,"longformer"),Zyt.forEach(t),enr=r(_je," \u2014 "),JQ=n(_je,"A",{href:!0});var ext=s(JQ);onr=r(ext,"LongformerForTokenClassification"),ext.forEach(t),rnr=r(_je," (Longformer model)"),_je.forEach(t),tnr=i(K),OF=n(K,"LI",{});var uje=s(OF);dve=n(uje,"STRONG",{});var oxt=s(dve);anr=r(oxt,"luke"),oxt.forEach(t),nnr=r(uje," \u2014 "),YQ=n(uje,"A",{href:!0});var rxt=s(YQ);snr=r(rxt,"LukeForTokenClassification"),rxt.forEach(t),lnr=r(uje," (LUKE model)"),uje.forEach(t),inr=i(K),VF=n(K,"LI",{});var bje=s(VF);cve=n(bje,"STRONG",{});var txt=s(cve);dnr=r(txt,"megatron-bert"),txt.forEach(t),cnr=r(bje," \u2014 "),KQ=n(bje,"A",{href:!0});var axt=s(KQ);fnr=r(axt,"MegatronBertForTokenClassification"),axt.forEach(t),mnr=r(bje," (Megatron-BERT model)"),bje.forEach(t),gnr=i(K),XF=n(K,"LI",{});var vje=s(XF);fve=n(vje,"STRONG",{});var nxt=s(fve);hnr=r(nxt,"mobilebert"),nxt.forEach(t),pnr=r(vje," \u2014 "),ZQ=n(vje,"A",{href:!0});var sxt=s(ZQ);_nr=r(sxt,"MobileBertForTokenClassification"),sxt.forEach(t),unr=r(vje," (MobileBERT model)"),vje.forEach(t),bnr=i(K),zF=n(K,"LI",{});var Fje=s(zF);mve=n(Fje,"STRONG",{});var lxt=s(mve);vnr=r(lxt,"mpnet"),lxt.forEach(t),Fnr=r(Fje," \u2014 "),eU=n(Fje,"A",{href:!0});var ixt=s(eU);Tnr=r(ixt,"MPNetForTokenClassification"),ixt.forEach(t),Mnr=r(Fje," (MPNet model)"),Fje.forEach(t),Enr=i(K),WF=n(K,"LI",{});var Tje=s(WF);gve=n(Tje,"STRONG",{});var dxt=s(gve);Cnr=r(dxt,"nezha"),dxt.forEach(t),wnr=r(Tje," \u2014 "),oU=n(Tje,"A",{href:!0});var cxt=s(oU);Anr=r(cxt,"NezhaForTokenClassification"),cxt.forEach(t),Lnr=r(Tje," (Nezha model)"),Tje.forEach(t),ynr=i(K),QF=n(K,"LI",{});var Mje=s(QF);hve=n(Mje,"STRONG",{});var fxt=s(hve);xnr=r(fxt,"nystromformer"),fxt.forEach(t),$nr=r(Mje," \u2014 "),rU=n(Mje,"A",{href:!0});var mxt=s(rU);knr=r(mxt,"NystromformerForTokenClassification"),mxt.forEach(t),Snr=r(Mje," (Nystr\xF6mformer model)"),Mje.forEach(t),Rnr=i(K),UF=n(K,"LI",{});var Eje=s(UF);pve=n(Eje,"STRONG",{});var gxt=s(pve);Pnr=r(gxt,"qdqbert"),gxt.forEach(t),Bnr=r(Eje," \u2014 "),tU=n(Eje,"A",{href:!0});var hxt=s(tU);Inr=r(hxt,"QDQBertForTokenClassification"),hxt.forEach(t),Nnr=r(Eje," (QDQBert model)"),Eje.forEach(t),qnr=i(K),HF=n(K,"LI",{});var Cje=s(HF);_ve=n(Cje,"STRONG",{});var pxt=s(_ve);jnr=r(pxt,"rembert"),pxt.forEach(t),Dnr=r(Cje," \u2014 "),aU=n(Cje,"A",{href:!0});var _xt=s(aU);Gnr=r(_xt,"RemBertForTokenClassification"),_xt.forEach(t),Onr=r(Cje," (RemBERT model)"),Cje.forEach(t),Vnr=i(K),JF=n(K,"LI",{});var wje=s(JF);uve=n(wje,"STRONG",{});var uxt=s(uve);Xnr=r(uxt,"roberta"),uxt.forEach(t),znr=r(wje," \u2014 "),nU=n(wje,"A",{href:!0});var bxt=s(nU);Wnr=r(bxt,"RobertaForTokenClassification"),bxt.forEach(t),Qnr=r(wje," (RoBERTa model)"),wje.forEach(t),Unr=i(K),YF=n(K,"LI",{});var Aje=s(YF);bve=n(Aje,"STRONG",{});var vxt=s(bve);Hnr=r(vxt,"roformer"),vxt.forEach(t),Jnr=r(Aje," \u2014 "),sU=n(Aje,"A",{href:!0});var Fxt=s(sU);Ynr=r(Fxt,"RoFormerForTokenClassification"),Fxt.forEach(t),Knr=r(Aje," (RoFormer model)"),Aje.forEach(t),Znr=i(K),KF=n(K,"LI",{});var Lje=s(KF);vve=n(Lje,"STRONG",{});var Txt=s(vve);esr=r(Txt,"squeezebert"),Txt.forEach(t),osr=r(Lje," \u2014 "),lU=n(Lje,"A",{href:!0});var Mxt=s(lU);rsr=r(Mxt,"SqueezeBertForTokenClassification"),Mxt.forEach(t),tsr=r(Lje," (SqueezeBERT model)"),Lje.forEach(t),asr=i(K),ZF=n(K,"LI",{});var yje=s(ZF);Fve=n(yje,"STRONG",{});var Ext=s(Fve);nsr=r(Ext,"xlm"),Ext.forEach(t),ssr=r(yje," \u2014 "),iU=n(yje,"A",{href:!0});var Cxt=s(iU);lsr=r(Cxt,"XLMForTokenClassification"),Cxt.forEach(t),isr=r(yje," (XLM model)"),yje.forEach(t),dsr=i(K),eT=n(K,"LI",{});var xje=s(eT);Tve=n(xje,"STRONG",{});var wxt=s(Tve);csr=r(wxt,"xlm-roberta"),wxt.forEach(t),fsr=r(xje," \u2014 "),dU=n(xje,"A",{href:!0});var Axt=s(dU);msr=r(Axt,"XLMRobertaForTokenClassification"),Axt.forEach(t),gsr=r(xje," (XLM-RoBERTa model)"),xje.forEach(t),hsr=i(K),oT=n(K,"LI",{});var $je=s(oT);Mve=n($je,"STRONG",{});var Lxt=s(Mve);psr=r(Lxt,"xlm-roberta-xl"),Lxt.forEach(t),_sr=r($je," \u2014 "),cU=n($je,"A",{href:!0});var yxt=s(cU);usr=r(yxt,"XLMRobertaXLForTokenClassification"),yxt.forEach(t),bsr=r($je," (XLM-RoBERTa-XL model)"),$je.forEach(t),vsr=i(K),rT=n(K,"LI",{});var kje=s(rT);Eve=n(kje,"STRONG",{});var xxt=s(Eve);Fsr=r(xxt,"xlnet"),xxt.forEach(t),Tsr=r(kje," \u2014 "),fU=n(kje,"A",{href:!0});var $xt=s(fU);Msr=r($xt,"XLNetForTokenClassification"),$xt.forEach(t),Esr=r(kje," (XLNet model)"),kje.forEach(t),Csr=i(K),tT=n(K,"LI",{});var Sje=s(tT);Cve=n(Sje,"STRONG",{});var kxt=s(Cve);wsr=r(kxt,"yoso"),kxt.forEach(t),Asr=r(Sje," \u2014 "),mU=n(Sje,"A",{href:!0});var Sxt=s(mU);Lsr=r(Sxt,"YosoForTokenClassification"),Sxt.forEach(t),ysr=r(Sje," (YOSO model)"),Sje.forEach(t),K.forEach(t),xsr=i(Ma),aT=n(Ma,"P",{});var Rje=s(aT);$sr=r(Rje,"The model is set in evaluation mode by default using "),wve=n(Rje,"CODE",{});var Rxt=s(wve);ksr=r(Rxt,"model.eval()"),Rxt.forEach(t),Ssr=r(Rje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=n(Rje,"CODE",{});var Pxt=s(Ave);Rsr=r(Pxt,"model.train()"),Pxt.forEach(t),Rje.forEach(t),Psr=i(Ma),T(nT.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),wUe=i(f),xd=n(f,"H2",{class:!0});var BJe=s(xd);sT=n(BJe,"A",{id:!0,class:!0,href:!0});var Bxt=s(sT);Lve=n(Bxt,"SPAN",{});var Ixt=s(Lve);T(Sy.$$.fragment,Ixt),Ixt.forEach(t),Bxt.forEach(t),Bsr=i(BJe),yve=n(BJe,"SPAN",{});var Nxt=s(yve);Isr=r(Nxt,"AutoModelForQuestionAnswering"),Nxt.forEach(t),BJe.forEach(t),AUe=i(f),Oo=n(f,"DIV",{class:!0});var El=s(Oo);T(Ry.$$.fragment,El),Nsr=i(El),$d=n(El,"P",{});var ine=s($d);qsr=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gU=n(ine,"A",{href:!0});var qxt=s(gU);jsr=r(qxt,"from_pretrained()"),qxt.forEach(t),Dsr=r(ine," class method or the "),hU=n(ine,"A",{href:!0});var jxt=s(hU);Gsr=r(jxt,"from_config()"),jxt.forEach(t),Osr=r(ine,` class
method.`),ine.forEach(t),Vsr=i(El),Py=n(El,"P",{});var IJe=s(Py);Xsr=r(IJe,"This class cannot be instantiated directly using "),xve=n(IJe,"CODE",{});var Dxt=s(xve);zsr=r(Dxt,"__init__()"),Dxt.forEach(t),Wsr=r(IJe," (throws an error)."),IJe.forEach(t),Qsr=i(El),Tt=n(El,"DIV",{class:!0});var S6=s(Tt);T(By.$$.fragment,S6),Usr=i(S6),$ve=n(S6,"P",{});var Gxt=s($ve);Hsr=r(Gxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gxt.forEach(t),Jsr=i(S6),kd=n(S6,"P",{});var dne=s(kd);Ysr=r(dne,`Note:
Loading a model from its configuration file does `),kve=n(dne,"STRONG",{});var Oxt=s(kve);Ksr=r(Oxt,"not"),Oxt.forEach(t),Zsr=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(dne,"A",{href:!0});var Vxt=s(pU);elr=r(Vxt,"from_pretrained()"),Vxt.forEach(t),olr=r(dne," to load the model weights."),dne.forEach(t),rlr=i(S6),T(lT.$$.fragment,S6),S6.forEach(t),tlr=i(El),lo=n(El,"DIV",{class:!0});var Ea=s(lo);T(Iy.$$.fragment,Ea),alr=i(Ea),Sve=n(Ea,"P",{});var Xxt=s(Sve);nlr=r(Xxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xxt.forEach(t),slr=i(Ea),Ka=n(Ea,"P",{});var R6=s(Ka);llr=r(R6,"The model class to instantiate is selected based on the "),Rve=n(R6,"CODE",{});var zxt=s(Rve);ilr=r(zxt,"model_type"),zxt.forEach(t),dlr=r(R6,` property of the config object (either
passed as an argument or loaded from `),Pve=n(R6,"CODE",{});var Wxt=s(Pve);clr=r(Wxt,"pretrained_model_name_or_path"),Wxt.forEach(t),flr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(R6,"CODE",{});var Qxt=s(Bve);mlr=r(Qxt,"pretrained_model_name_or_path"),Qxt.forEach(t),glr=r(R6,":"),R6.forEach(t),hlr=i(Ea),V=n(Ea,"UL",{});var X=s(V);iT=n(X,"LI",{});var Pje=s(iT);Ive=n(Pje,"STRONG",{});var Uxt=s(Ive);plr=r(Uxt,"albert"),Uxt.forEach(t),_lr=r(Pje," \u2014 "),_U=n(Pje,"A",{href:!0});var Hxt=s(_U);ulr=r(Hxt,"AlbertForQuestionAnswering"),Hxt.forEach(t),blr=r(Pje," (ALBERT model)"),Pje.forEach(t),vlr=i(X),dT=n(X,"LI",{});var Bje=s(dT);Nve=n(Bje,"STRONG",{});var Jxt=s(Nve);Flr=r(Jxt,"bart"),Jxt.forEach(t),Tlr=r(Bje," \u2014 "),uU=n(Bje,"A",{href:!0});var Yxt=s(uU);Mlr=r(Yxt,"BartForQuestionAnswering"),Yxt.forEach(t),Elr=r(Bje," (BART model)"),Bje.forEach(t),Clr=i(X),cT=n(X,"LI",{});var Ije=s(cT);qve=n(Ije,"STRONG",{});var Kxt=s(qve);wlr=r(Kxt,"bert"),Kxt.forEach(t),Alr=r(Ije," \u2014 "),bU=n(Ije,"A",{href:!0});var Zxt=s(bU);Llr=r(Zxt,"BertForQuestionAnswering"),Zxt.forEach(t),ylr=r(Ije," (BERT model)"),Ije.forEach(t),xlr=i(X),fT=n(X,"LI",{});var Nje=s(fT);jve=n(Nje,"STRONG",{});var e$t=s(jve);$lr=r(e$t,"big_bird"),e$t.forEach(t),klr=r(Nje," \u2014 "),vU=n(Nje,"A",{href:!0});var o$t=s(vU);Slr=r(o$t,"BigBirdForQuestionAnswering"),o$t.forEach(t),Rlr=r(Nje," (BigBird model)"),Nje.forEach(t),Plr=i(X),mT=n(X,"LI",{});var qje=s(mT);Dve=n(qje,"STRONG",{});var r$t=s(Dve);Blr=r(r$t,"bigbird_pegasus"),r$t.forEach(t),Ilr=r(qje," \u2014 "),FU=n(qje,"A",{href:!0});var t$t=s(FU);Nlr=r(t$t,"BigBirdPegasusForQuestionAnswering"),t$t.forEach(t),qlr=r(qje," (BigBird-Pegasus model)"),qje.forEach(t),jlr=i(X),gT=n(X,"LI",{});var jje=s(gT);Gve=n(jje,"STRONG",{});var a$t=s(Gve);Dlr=r(a$t,"camembert"),a$t.forEach(t),Glr=r(jje," \u2014 "),TU=n(jje,"A",{href:!0});var n$t=s(TU);Olr=r(n$t,"CamembertForQuestionAnswering"),n$t.forEach(t),Vlr=r(jje," (CamemBERT model)"),jje.forEach(t),Xlr=i(X),hT=n(X,"LI",{});var Dje=s(hT);Ove=n(Dje,"STRONG",{});var s$t=s(Ove);zlr=r(s$t,"canine"),s$t.forEach(t),Wlr=r(Dje," \u2014 "),MU=n(Dje,"A",{href:!0});var l$t=s(MU);Qlr=r(l$t,"CanineForQuestionAnswering"),l$t.forEach(t),Ulr=r(Dje," (CANINE model)"),Dje.forEach(t),Hlr=i(X),pT=n(X,"LI",{});var Gje=s(pT);Vve=n(Gje,"STRONG",{});var i$t=s(Vve);Jlr=r(i$t,"convbert"),i$t.forEach(t),Ylr=r(Gje," \u2014 "),EU=n(Gje,"A",{href:!0});var d$t=s(EU);Klr=r(d$t,"ConvBertForQuestionAnswering"),d$t.forEach(t),Zlr=r(Gje," (ConvBERT model)"),Gje.forEach(t),eir=i(X),_T=n(X,"LI",{});var Oje=s(_T);Xve=n(Oje,"STRONG",{});var c$t=s(Xve);oir=r(c$t,"data2vec-text"),c$t.forEach(t),rir=r(Oje," \u2014 "),CU=n(Oje,"A",{href:!0});var f$t=s(CU);tir=r(f$t,"Data2VecTextForQuestionAnswering"),f$t.forEach(t),air=r(Oje," (Data2VecText model)"),Oje.forEach(t),nir=i(X),uT=n(X,"LI",{});var Vje=s(uT);zve=n(Vje,"STRONG",{});var m$t=s(zve);sir=r(m$t,"deberta"),m$t.forEach(t),lir=r(Vje," \u2014 "),wU=n(Vje,"A",{href:!0});var g$t=s(wU);iir=r(g$t,"DebertaForQuestionAnswering"),g$t.forEach(t),dir=r(Vje," (DeBERTa model)"),Vje.forEach(t),cir=i(X),bT=n(X,"LI",{});var Xje=s(bT);Wve=n(Xje,"STRONG",{});var h$t=s(Wve);fir=r(h$t,"deberta-v2"),h$t.forEach(t),mir=r(Xje," \u2014 "),AU=n(Xje,"A",{href:!0});var p$t=s(AU);gir=r(p$t,"DebertaV2ForQuestionAnswering"),p$t.forEach(t),hir=r(Xje," (DeBERTa-v2 model)"),Xje.forEach(t),pir=i(X),vT=n(X,"LI",{});var zje=s(vT);Qve=n(zje,"STRONG",{});var _$t=s(Qve);_ir=r(_$t,"distilbert"),_$t.forEach(t),uir=r(zje," \u2014 "),LU=n(zje,"A",{href:!0});var u$t=s(LU);bir=r(u$t,"DistilBertForQuestionAnswering"),u$t.forEach(t),vir=r(zje," (DistilBERT model)"),zje.forEach(t),Fir=i(X),FT=n(X,"LI",{});var Wje=s(FT);Uve=n(Wje,"STRONG",{});var b$t=s(Uve);Tir=r(b$t,"electra"),b$t.forEach(t),Mir=r(Wje," \u2014 "),yU=n(Wje,"A",{href:!0});var v$t=s(yU);Eir=r(v$t,"ElectraForQuestionAnswering"),v$t.forEach(t),Cir=r(Wje," (ELECTRA model)"),Wje.forEach(t),wir=i(X),TT=n(X,"LI",{});var Qje=s(TT);Hve=n(Qje,"STRONG",{});var F$t=s(Hve);Air=r(F$t,"flaubert"),F$t.forEach(t),Lir=r(Qje," \u2014 "),xU=n(Qje,"A",{href:!0});var T$t=s(xU);yir=r(T$t,"FlaubertForQuestionAnsweringSimple"),T$t.forEach(t),xir=r(Qje," (FlauBERT model)"),Qje.forEach(t),$ir=i(X),MT=n(X,"LI",{});var Uje=s(MT);Jve=n(Uje,"STRONG",{});var M$t=s(Jve);kir=r(M$t,"fnet"),M$t.forEach(t),Sir=r(Uje," \u2014 "),$U=n(Uje,"A",{href:!0});var E$t=s($U);Rir=r(E$t,"FNetForQuestionAnswering"),E$t.forEach(t),Pir=r(Uje," (FNet model)"),Uje.forEach(t),Bir=i(X),ET=n(X,"LI",{});var Hje=s(ET);Yve=n(Hje,"STRONG",{});var C$t=s(Yve);Iir=r(C$t,"funnel"),C$t.forEach(t),Nir=r(Hje," \u2014 "),kU=n(Hje,"A",{href:!0});var w$t=s(kU);qir=r(w$t,"FunnelForQuestionAnswering"),w$t.forEach(t),jir=r(Hje," (Funnel Transformer model)"),Hje.forEach(t),Dir=i(X),CT=n(X,"LI",{});var Jje=s(CT);Kve=n(Jje,"STRONG",{});var A$t=s(Kve);Gir=r(A$t,"gptj"),A$t.forEach(t),Oir=r(Jje," \u2014 "),SU=n(Jje,"A",{href:!0});var L$t=s(SU);Vir=r(L$t,"GPTJForQuestionAnswering"),L$t.forEach(t),Xir=r(Jje," (GPT-J model)"),Jje.forEach(t),zir=i(X),wT=n(X,"LI",{});var Yje=s(wT);Zve=n(Yje,"STRONG",{});var y$t=s(Zve);Wir=r(y$t,"ibert"),y$t.forEach(t),Qir=r(Yje," \u2014 "),RU=n(Yje,"A",{href:!0});var x$t=s(RU);Uir=r(x$t,"IBertForQuestionAnswering"),x$t.forEach(t),Hir=r(Yje," (I-BERT model)"),Yje.forEach(t),Jir=i(X),AT=n(X,"LI",{});var Kje=s(AT);e5e=n(Kje,"STRONG",{});var $$t=s(e5e);Yir=r($$t,"layoutlmv2"),$$t.forEach(t),Kir=r(Kje," \u2014 "),PU=n(Kje,"A",{href:!0});var k$t=s(PU);Zir=r(k$t,"LayoutLMv2ForQuestionAnswering"),k$t.forEach(t),edr=r(Kje," (LayoutLMv2 model)"),Kje.forEach(t),odr=i(X),LT=n(X,"LI",{});var Zje=s(LT);o5e=n(Zje,"STRONG",{});var S$t=s(o5e);rdr=r(S$t,"layoutlmv3"),S$t.forEach(t),tdr=r(Zje," \u2014 "),BU=n(Zje,"A",{href:!0});var R$t=s(BU);adr=r(R$t,"LayoutLMv3ForQuestionAnswering"),R$t.forEach(t),ndr=r(Zje," (LayoutLMv3 model)"),Zje.forEach(t),sdr=i(X),yT=n(X,"LI",{});var eDe=s(yT);r5e=n(eDe,"STRONG",{});var P$t=s(r5e);ldr=r(P$t,"led"),P$t.forEach(t),idr=r(eDe," \u2014 "),IU=n(eDe,"A",{href:!0});var B$t=s(IU);ddr=r(B$t,"LEDForQuestionAnswering"),B$t.forEach(t),cdr=r(eDe," (LED model)"),eDe.forEach(t),fdr=i(X),xT=n(X,"LI",{});var oDe=s(xT);t5e=n(oDe,"STRONG",{});var I$t=s(t5e);mdr=r(I$t,"longformer"),I$t.forEach(t),gdr=r(oDe," \u2014 "),NU=n(oDe,"A",{href:!0});var N$t=s(NU);hdr=r(N$t,"LongformerForQuestionAnswering"),N$t.forEach(t),pdr=r(oDe," (Longformer model)"),oDe.forEach(t),_dr=i(X),$T=n(X,"LI",{});var rDe=s($T);a5e=n(rDe,"STRONG",{});var q$t=s(a5e);udr=r(q$t,"luke"),q$t.forEach(t),bdr=r(rDe," \u2014 "),qU=n(rDe,"A",{href:!0});var j$t=s(qU);vdr=r(j$t,"LukeForQuestionAnswering"),j$t.forEach(t),Fdr=r(rDe," (LUKE model)"),rDe.forEach(t),Tdr=i(X),kT=n(X,"LI",{});var tDe=s(kT);n5e=n(tDe,"STRONG",{});var D$t=s(n5e);Mdr=r(D$t,"lxmert"),D$t.forEach(t),Edr=r(tDe," \u2014 "),jU=n(tDe,"A",{href:!0});var G$t=s(jU);Cdr=r(G$t,"LxmertForQuestionAnswering"),G$t.forEach(t),wdr=r(tDe," (LXMERT model)"),tDe.forEach(t),Adr=i(X),ST=n(X,"LI",{});var aDe=s(ST);s5e=n(aDe,"STRONG",{});var O$t=s(s5e);Ldr=r(O$t,"mbart"),O$t.forEach(t),ydr=r(aDe," \u2014 "),DU=n(aDe,"A",{href:!0});var V$t=s(DU);xdr=r(V$t,"MBartForQuestionAnswering"),V$t.forEach(t),$dr=r(aDe," (mBART model)"),aDe.forEach(t),kdr=i(X),RT=n(X,"LI",{});var nDe=s(RT);l5e=n(nDe,"STRONG",{});var X$t=s(l5e);Sdr=r(X$t,"megatron-bert"),X$t.forEach(t),Rdr=r(nDe," \u2014 "),GU=n(nDe,"A",{href:!0});var z$t=s(GU);Pdr=r(z$t,"MegatronBertForQuestionAnswering"),z$t.forEach(t),Bdr=r(nDe," (Megatron-BERT model)"),nDe.forEach(t),Idr=i(X),PT=n(X,"LI",{});var sDe=s(PT);i5e=n(sDe,"STRONG",{});var W$t=s(i5e);Ndr=r(W$t,"mobilebert"),W$t.forEach(t),qdr=r(sDe," \u2014 "),OU=n(sDe,"A",{href:!0});var Q$t=s(OU);jdr=r(Q$t,"MobileBertForQuestionAnswering"),Q$t.forEach(t),Ddr=r(sDe," (MobileBERT model)"),sDe.forEach(t),Gdr=i(X),BT=n(X,"LI",{});var lDe=s(BT);d5e=n(lDe,"STRONG",{});var U$t=s(d5e);Odr=r(U$t,"mpnet"),U$t.forEach(t),Vdr=r(lDe," \u2014 "),VU=n(lDe,"A",{href:!0});var H$t=s(VU);Xdr=r(H$t,"MPNetForQuestionAnswering"),H$t.forEach(t),zdr=r(lDe," (MPNet model)"),lDe.forEach(t),Wdr=i(X),IT=n(X,"LI",{});var iDe=s(IT);c5e=n(iDe,"STRONG",{});var J$t=s(c5e);Qdr=r(J$t,"mvp"),J$t.forEach(t),Udr=r(iDe," \u2014 "),XU=n(iDe,"A",{href:!0});var Y$t=s(XU);Hdr=r(Y$t,"MvpForQuestionAnswering"),Y$t.forEach(t),Jdr=r(iDe," (MVP model)"),iDe.forEach(t),Ydr=i(X),NT=n(X,"LI",{});var dDe=s(NT);f5e=n(dDe,"STRONG",{});var K$t=s(f5e);Kdr=r(K$t,"nezha"),K$t.forEach(t),Zdr=r(dDe," \u2014 "),zU=n(dDe,"A",{href:!0});var Z$t=s(zU);ecr=r(Z$t,"NezhaForQuestionAnswering"),Z$t.forEach(t),ocr=r(dDe," (Nezha model)"),dDe.forEach(t),rcr=i(X),qT=n(X,"LI",{});var cDe=s(qT);m5e=n(cDe,"STRONG",{});var ekt=s(m5e);tcr=r(ekt,"nystromformer"),ekt.forEach(t),acr=r(cDe," \u2014 "),WU=n(cDe,"A",{href:!0});var okt=s(WU);ncr=r(okt,"NystromformerForQuestionAnswering"),okt.forEach(t),scr=r(cDe," (Nystr\xF6mformer model)"),cDe.forEach(t),lcr=i(X),jT=n(X,"LI",{});var fDe=s(jT);g5e=n(fDe,"STRONG",{});var rkt=s(g5e);icr=r(rkt,"qdqbert"),rkt.forEach(t),dcr=r(fDe," \u2014 "),QU=n(fDe,"A",{href:!0});var tkt=s(QU);ccr=r(tkt,"QDQBertForQuestionAnswering"),tkt.forEach(t),fcr=r(fDe," (QDQBert model)"),fDe.forEach(t),mcr=i(X),DT=n(X,"LI",{});var mDe=s(DT);h5e=n(mDe,"STRONG",{});var akt=s(h5e);gcr=r(akt,"reformer"),akt.forEach(t),hcr=r(mDe," \u2014 "),UU=n(mDe,"A",{href:!0});var nkt=s(UU);pcr=r(nkt,"ReformerForQuestionAnswering"),nkt.forEach(t),_cr=r(mDe," (Reformer model)"),mDe.forEach(t),ucr=i(X),GT=n(X,"LI",{});var gDe=s(GT);p5e=n(gDe,"STRONG",{});var skt=s(p5e);bcr=r(skt,"rembert"),skt.forEach(t),vcr=r(gDe," \u2014 "),HU=n(gDe,"A",{href:!0});var lkt=s(HU);Fcr=r(lkt,"RemBertForQuestionAnswering"),lkt.forEach(t),Tcr=r(gDe," (RemBERT model)"),gDe.forEach(t),Mcr=i(X),OT=n(X,"LI",{});var hDe=s(OT);_5e=n(hDe,"STRONG",{});var ikt=s(_5e);Ecr=r(ikt,"roberta"),ikt.forEach(t),Ccr=r(hDe," \u2014 "),JU=n(hDe,"A",{href:!0});var dkt=s(JU);wcr=r(dkt,"RobertaForQuestionAnswering"),dkt.forEach(t),Acr=r(hDe," (RoBERTa model)"),hDe.forEach(t),Lcr=i(X),VT=n(X,"LI",{});var pDe=s(VT);u5e=n(pDe,"STRONG",{});var ckt=s(u5e);ycr=r(ckt,"roformer"),ckt.forEach(t),xcr=r(pDe," \u2014 "),YU=n(pDe,"A",{href:!0});var fkt=s(YU);$cr=r(fkt,"RoFormerForQuestionAnswering"),fkt.forEach(t),kcr=r(pDe," (RoFormer model)"),pDe.forEach(t),Scr=i(X),XT=n(X,"LI",{});var _De=s(XT);b5e=n(_De,"STRONG",{});var mkt=s(b5e);Rcr=r(mkt,"splinter"),mkt.forEach(t),Pcr=r(_De," \u2014 "),KU=n(_De,"A",{href:!0});var gkt=s(KU);Bcr=r(gkt,"SplinterForQuestionAnswering"),gkt.forEach(t),Icr=r(_De," (Splinter model)"),_De.forEach(t),Ncr=i(X),zT=n(X,"LI",{});var uDe=s(zT);v5e=n(uDe,"STRONG",{});var hkt=s(v5e);qcr=r(hkt,"squeezebert"),hkt.forEach(t),jcr=r(uDe," \u2014 "),ZU=n(uDe,"A",{href:!0});var pkt=s(ZU);Dcr=r(pkt,"SqueezeBertForQuestionAnswering"),pkt.forEach(t),Gcr=r(uDe," (SqueezeBERT model)"),uDe.forEach(t),Ocr=i(X),WT=n(X,"LI",{});var bDe=s(WT);F5e=n(bDe,"STRONG",{});var _kt=s(F5e);Vcr=r(_kt,"xlm"),_kt.forEach(t),Xcr=r(bDe," \u2014 "),eH=n(bDe,"A",{href:!0});var ukt=s(eH);zcr=r(ukt,"XLMForQuestionAnsweringSimple"),ukt.forEach(t),Wcr=r(bDe," (XLM model)"),bDe.forEach(t),Qcr=i(X),QT=n(X,"LI",{});var vDe=s(QT);T5e=n(vDe,"STRONG",{});var bkt=s(T5e);Ucr=r(bkt,"xlm-roberta"),bkt.forEach(t),Hcr=r(vDe," \u2014 "),oH=n(vDe,"A",{href:!0});var vkt=s(oH);Jcr=r(vkt,"XLMRobertaForQuestionAnswering"),vkt.forEach(t),Ycr=r(vDe," (XLM-RoBERTa model)"),vDe.forEach(t),Kcr=i(X),UT=n(X,"LI",{});var FDe=s(UT);M5e=n(FDe,"STRONG",{});var Fkt=s(M5e);Zcr=r(Fkt,"xlm-roberta-xl"),Fkt.forEach(t),efr=r(FDe," \u2014 "),rH=n(FDe,"A",{href:!0});var Tkt=s(rH);ofr=r(Tkt,"XLMRobertaXLForQuestionAnswering"),Tkt.forEach(t),rfr=r(FDe," (XLM-RoBERTa-XL model)"),FDe.forEach(t),tfr=i(X),HT=n(X,"LI",{});var TDe=s(HT);E5e=n(TDe,"STRONG",{});var Mkt=s(E5e);afr=r(Mkt,"xlnet"),Mkt.forEach(t),nfr=r(TDe," \u2014 "),tH=n(TDe,"A",{href:!0});var Ekt=s(tH);sfr=r(Ekt,"XLNetForQuestionAnsweringSimple"),Ekt.forEach(t),lfr=r(TDe," (XLNet model)"),TDe.forEach(t),ifr=i(X),JT=n(X,"LI",{});var MDe=s(JT);C5e=n(MDe,"STRONG",{});var Ckt=s(C5e);dfr=r(Ckt,"yoso"),Ckt.forEach(t),cfr=r(MDe," \u2014 "),aH=n(MDe,"A",{href:!0});var wkt=s(aH);ffr=r(wkt,"YosoForQuestionAnswering"),wkt.forEach(t),mfr=r(MDe," (YOSO model)"),MDe.forEach(t),X.forEach(t),gfr=i(Ea),YT=n(Ea,"P",{});var EDe=s(YT);hfr=r(EDe,"The model is set in evaluation mode by default using "),w5e=n(EDe,"CODE",{});var Akt=s(w5e);pfr=r(Akt,"model.eval()"),Akt.forEach(t),_fr=r(EDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A5e=n(EDe,"CODE",{});var Lkt=s(A5e);ufr=r(Lkt,"model.train()"),Lkt.forEach(t),EDe.forEach(t),bfr=i(Ea),T(KT.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),LUe=i(f),Sd=n(f,"H2",{class:!0});var NJe=s(Sd);ZT=n(NJe,"A",{id:!0,class:!0,href:!0});var ykt=s(ZT);L5e=n(ykt,"SPAN",{});var xkt=s(L5e);T(Ny.$$.fragment,xkt),xkt.forEach(t),ykt.forEach(t),vfr=i(NJe),y5e=n(NJe,"SPAN",{});var $kt=s(y5e);Ffr=r($kt,"AutoModelForTableQuestionAnswering"),$kt.forEach(t),NJe.forEach(t),yUe=i(f),Vo=n(f,"DIV",{class:!0});var Cl=s(Vo);T(qy.$$.fragment,Cl),Tfr=i(Cl),Rd=n(Cl,"P",{});var cne=s(Rd);Mfr=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nH=n(cne,"A",{href:!0});var kkt=s(nH);Efr=r(kkt,"from_pretrained()"),kkt.forEach(t),Cfr=r(cne," class method or the "),sH=n(cne,"A",{href:!0});var Skt=s(sH);wfr=r(Skt,"from_config()"),Skt.forEach(t),Afr=r(cne,` class
method.`),cne.forEach(t),Lfr=i(Cl),jy=n(Cl,"P",{});var qJe=s(jy);yfr=r(qJe,"This class cannot be instantiated directly using "),x5e=n(qJe,"CODE",{});var Rkt=s(x5e);xfr=r(Rkt,"__init__()"),Rkt.forEach(t),$fr=r(qJe," (throws an error)."),qJe.forEach(t),kfr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var P6=s(Mt);T(Dy.$$.fragment,P6),Sfr=i(P6),$5e=n(P6,"P",{});var Pkt=s($5e);Rfr=r(Pkt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Pkt.forEach(t),Pfr=i(P6),Pd=n(P6,"P",{});var fne=s(Pd);Bfr=r(fne,`Note:
Loading a model from its configuration file does `),k5e=n(fne,"STRONG",{});var Bkt=s(k5e);Ifr=r(Bkt,"not"),Bkt.forEach(t),Nfr=r(fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(fne,"A",{href:!0});var Ikt=s(lH);qfr=r(Ikt,"from_pretrained()"),Ikt.forEach(t),jfr=r(fne," to load the model weights."),fne.forEach(t),Dfr=i(P6),T(e7.$$.fragment,P6),P6.forEach(t),Gfr=i(Cl),io=n(Cl,"DIV",{class:!0});var Ca=s(io);T(Gy.$$.fragment,Ca),Ofr=i(Ca),S5e=n(Ca,"P",{});var Nkt=s(S5e);Vfr=r(Nkt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Nkt.forEach(t),Xfr=i(Ca),Za=n(Ca,"P",{});var B6=s(Za);zfr=r(B6,"The model class to instantiate is selected based on the "),R5e=n(B6,"CODE",{});var qkt=s(R5e);Wfr=r(qkt,"model_type"),qkt.forEach(t),Qfr=r(B6,` property of the config object (either
passed as an argument or loaded from `),P5e=n(B6,"CODE",{});var jkt=s(P5e);Ufr=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),Hfr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(B6,"CODE",{});var Dkt=s(B5e);Jfr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),Yfr=r(B6,":"),B6.forEach(t),Kfr=i(Ca),I5e=n(Ca,"UL",{});var Gkt=s(I5e);o7=n(Gkt,"LI",{});var CDe=s(o7);N5e=n(CDe,"STRONG",{});var Okt=s(N5e);Zfr=r(Okt,"tapas"),Okt.forEach(t),emr=r(CDe," \u2014 "),iH=n(CDe,"A",{href:!0});var Vkt=s(iH);omr=r(Vkt,"TapasForQuestionAnswering"),Vkt.forEach(t),rmr=r(CDe," (TAPAS model)"),CDe.forEach(t),Gkt.forEach(t),tmr=i(Ca),r7=n(Ca,"P",{});var wDe=s(r7);amr=r(wDe,"The model is set in evaluation mode by default using "),q5e=n(wDe,"CODE",{});var Xkt=s(q5e);nmr=r(Xkt,"model.eval()"),Xkt.forEach(t),smr=r(wDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j5e=n(wDe,"CODE",{});var zkt=s(j5e);lmr=r(zkt,"model.train()"),zkt.forEach(t),wDe.forEach(t),imr=i(Ca),T(t7.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),xUe=i(f),Bd=n(f,"H2",{class:!0});var jJe=s(Bd);a7=n(jJe,"A",{id:!0,class:!0,href:!0});var Wkt=s(a7);D5e=n(Wkt,"SPAN",{});var Qkt=s(D5e);T(Oy.$$.fragment,Qkt),Qkt.forEach(t),Wkt.forEach(t),dmr=i(jJe),G5e=n(jJe,"SPAN",{});var Ukt=s(G5e);cmr=r(Ukt,"AutoModelForImageClassification"),Ukt.forEach(t),jJe.forEach(t),$Ue=i(f),Xo=n(f,"DIV",{class:!0});var wl=s(Xo);T(Vy.$$.fragment,wl),fmr=i(wl),Id=n(wl,"P",{});var mne=s(Id);mmr=r(mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dH=n(mne,"A",{href:!0});var Hkt=s(dH);gmr=r(Hkt,"from_pretrained()"),Hkt.forEach(t),hmr=r(mne," class method or the "),cH=n(mne,"A",{href:!0});var Jkt=s(cH);pmr=r(Jkt,"from_config()"),Jkt.forEach(t),_mr=r(mne,` class
method.`),mne.forEach(t),umr=i(wl),Xy=n(wl,"P",{});var DJe=s(Xy);bmr=r(DJe,"This class cannot be instantiated directly using "),O5e=n(DJe,"CODE",{});var Ykt=s(O5e);vmr=r(Ykt,"__init__()"),Ykt.forEach(t),Fmr=r(DJe," (throws an error)."),DJe.forEach(t),Tmr=i(wl),Et=n(wl,"DIV",{class:!0});var I6=s(Et);T(zy.$$.fragment,I6),Mmr=i(I6),V5e=n(I6,"P",{});var Kkt=s(V5e);Emr=r(Kkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kkt.forEach(t),Cmr=i(I6),Nd=n(I6,"P",{});var gne=s(Nd);wmr=r(gne,`Note:
Loading a model from its configuration file does `),X5e=n(gne,"STRONG",{});var Zkt=s(X5e);Amr=r(Zkt,"not"),Zkt.forEach(t),Lmr=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(gne,"A",{href:!0});var eSt=s(fH);ymr=r(eSt,"from_pretrained()"),eSt.forEach(t),xmr=r(gne," to load the model weights."),gne.forEach(t),$mr=i(I6),T(n7.$$.fragment,I6),I6.forEach(t),kmr=i(wl),co=n(wl,"DIV",{class:!0});var wa=s(co);T(Wy.$$.fragment,wa),Smr=i(wa),z5e=n(wa,"P",{});var oSt=s(z5e);Rmr=r(oSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oSt.forEach(t),Pmr=i(wa),en=n(wa,"P",{});var N6=s(en);Bmr=r(N6,"The model class to instantiate is selected based on the "),W5e=n(N6,"CODE",{});var rSt=s(W5e);Imr=r(rSt,"model_type"),rSt.forEach(t),Nmr=r(N6,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(N6,"CODE",{});var tSt=s(Q5e);qmr=r(tSt,"pretrained_model_name_or_path"),tSt.forEach(t),jmr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=n(N6,"CODE",{});var aSt=s(U5e);Dmr=r(aSt,"pretrained_model_name_or_path"),aSt.forEach(t),Gmr=r(N6,":"),N6.forEach(t),Omr=i(wa),be=n(wa,"UL",{});var Fe=s(be);s7=n(Fe,"LI",{});var ADe=s(s7);H5e=n(ADe,"STRONG",{});var nSt=s(H5e);Vmr=r(nSt,"beit"),nSt.forEach(t),Xmr=r(ADe," \u2014 "),mH=n(ADe,"A",{href:!0});var sSt=s(mH);zmr=r(sSt,"BeitForImageClassification"),sSt.forEach(t),Wmr=r(ADe," (BEiT model)"),ADe.forEach(t),Qmr=i(Fe),l7=n(Fe,"LI",{});var LDe=s(l7);J5e=n(LDe,"STRONG",{});var lSt=s(J5e);Umr=r(lSt,"convnext"),lSt.forEach(t),Hmr=r(LDe," \u2014 "),gH=n(LDe,"A",{href:!0});var iSt=s(gH);Jmr=r(iSt,"ConvNextForImageClassification"),iSt.forEach(t),Ymr=r(LDe," (ConvNeXT model)"),LDe.forEach(t),Kmr=i(Fe),i7=n(Fe,"LI",{});var yDe=s(i7);Y5e=n(yDe,"STRONG",{});var dSt=s(Y5e);Zmr=r(dSt,"cvt"),dSt.forEach(t),egr=r(yDe," \u2014 "),hH=n(yDe,"A",{href:!0});var cSt=s(hH);ogr=r(cSt,"CvtForImageClassification"),cSt.forEach(t),rgr=r(yDe," (CvT model)"),yDe.forEach(t),tgr=i(Fe),d7=n(Fe,"LI",{});var xDe=s(d7);K5e=n(xDe,"STRONG",{});var fSt=s(K5e);agr=r(fSt,"data2vec-vision"),fSt.forEach(t),ngr=r(xDe," \u2014 "),pH=n(xDe,"A",{href:!0});var mSt=s(pH);sgr=r(mSt,"Data2VecVisionForImageClassification"),mSt.forEach(t),lgr=r(xDe," (Data2VecVision model)"),xDe.forEach(t),igr=i(Fe),sl=n(Fe,"LI",{});var oP=s(sl);Z5e=n(oP,"STRONG",{});var gSt=s(Z5e);dgr=r(gSt,"deit"),gSt.forEach(t),cgr=r(oP," \u2014 "),_H=n(oP,"A",{href:!0});var hSt=s(_H);fgr=r(hSt,"DeiTForImageClassification"),hSt.forEach(t),mgr=r(oP," or "),uH=n(oP,"A",{href:!0});var pSt=s(uH);ggr=r(pSt,"DeiTForImageClassificationWithTeacher"),pSt.forEach(t),hgr=r(oP," (DeiT model)"),oP.forEach(t),pgr=i(Fe),c7=n(Fe,"LI",{});var $De=s(c7);eFe=n($De,"STRONG",{});var _St=s(eFe);_gr=r(_St,"imagegpt"),_St.forEach(t),ugr=r($De," \u2014 "),bH=n($De,"A",{href:!0});var uSt=s(bH);bgr=r(uSt,"ImageGPTForImageClassification"),uSt.forEach(t),vgr=r($De," (ImageGPT model)"),$De.forEach(t),Fgr=i(Fe),ll=n(Fe,"LI",{});var rP=s(ll);oFe=n(rP,"STRONG",{});var bSt=s(oFe);Tgr=r(bSt,"levit"),bSt.forEach(t),Mgr=r(rP," \u2014 "),vH=n(rP,"A",{href:!0});var vSt=s(vH);Egr=r(vSt,"LevitForImageClassification"),vSt.forEach(t),Cgr=r(rP," or "),FH=n(rP,"A",{href:!0});var FSt=s(FH);wgr=r(FSt,"LevitForImageClassificationWithTeacher"),FSt.forEach(t),Agr=r(rP," (LeViT model)"),rP.forEach(t),Lgr=i(Fe),f7=n(Fe,"LI",{});var kDe=s(f7);rFe=n(kDe,"STRONG",{});var TSt=s(rFe);ygr=r(TSt,"mobilevit"),TSt.forEach(t),xgr=r(kDe," \u2014 "),TH=n(kDe,"A",{href:!0});var MSt=s(TH);$gr=r(MSt,"MobileViTForImageClassification"),MSt.forEach(t),kgr=r(kDe," (MobileViT model)"),kDe.forEach(t),Sgr=i(Fe),Ct=n(Fe,"LI",{});var Zf=s(Ct);tFe=n(Zf,"STRONG",{});var ESt=s(tFe);Rgr=r(ESt,"perceiver"),ESt.forEach(t),Pgr=r(Zf," \u2014 "),MH=n(Zf,"A",{href:!0});var CSt=s(MH);Bgr=r(CSt,"PerceiverForImageClassificationLearned"),CSt.forEach(t),Igr=r(Zf," or "),EH=n(Zf,"A",{href:!0});var wSt=s(EH);Ngr=r(wSt,"PerceiverForImageClassificationFourier"),wSt.forEach(t),qgr=r(Zf," or "),CH=n(Zf,"A",{href:!0});var ASt=s(CH);jgr=r(ASt,"PerceiverForImageClassificationConvProcessing"),ASt.forEach(t),Dgr=r(Zf," (Perceiver model)"),Zf.forEach(t),Ggr=i(Fe),m7=n(Fe,"LI",{});var SDe=s(m7);aFe=n(SDe,"STRONG",{});var LSt=s(aFe);Ogr=r(LSt,"poolformer"),LSt.forEach(t),Vgr=r(SDe," \u2014 "),wH=n(SDe,"A",{href:!0});var ySt=s(wH);Xgr=r(ySt,"PoolFormerForImageClassification"),ySt.forEach(t),zgr=r(SDe," (PoolFormer model)"),SDe.forEach(t),Wgr=i(Fe),g7=n(Fe,"LI",{});var RDe=s(g7);nFe=n(RDe,"STRONG",{});var xSt=s(nFe);Qgr=r(xSt,"regnet"),xSt.forEach(t),Ugr=r(RDe," \u2014 "),AH=n(RDe,"A",{href:!0});var $St=s(AH);Hgr=r($St,"RegNetForImageClassification"),$St.forEach(t),Jgr=r(RDe," (RegNet model)"),RDe.forEach(t),Ygr=i(Fe),h7=n(Fe,"LI",{});var PDe=s(h7);sFe=n(PDe,"STRONG",{});var kSt=s(sFe);Kgr=r(kSt,"resnet"),kSt.forEach(t),Zgr=r(PDe," \u2014 "),LH=n(PDe,"A",{href:!0});var SSt=s(LH);ehr=r(SSt,"ResNetForImageClassification"),SSt.forEach(t),ohr=r(PDe," (ResNet model)"),PDe.forEach(t),rhr=i(Fe),p7=n(Fe,"LI",{});var BDe=s(p7);lFe=n(BDe,"STRONG",{});var RSt=s(lFe);thr=r(RSt,"segformer"),RSt.forEach(t),ahr=r(BDe," \u2014 "),yH=n(BDe,"A",{href:!0});var PSt=s(yH);nhr=r(PSt,"SegformerForImageClassification"),PSt.forEach(t),shr=r(BDe," (SegFormer model)"),BDe.forEach(t),lhr=i(Fe),_7=n(Fe,"LI",{});var IDe=s(_7);iFe=n(IDe,"STRONG",{});var BSt=s(iFe);ihr=r(BSt,"swin"),BSt.forEach(t),dhr=r(IDe," \u2014 "),xH=n(IDe,"A",{href:!0});var ISt=s(xH);chr=r(ISt,"SwinForImageClassification"),ISt.forEach(t),fhr=r(IDe," (Swin Transformer model)"),IDe.forEach(t),mhr=i(Fe),u7=n(Fe,"LI",{});var NDe=s(u7);dFe=n(NDe,"STRONG",{});var NSt=s(dFe);ghr=r(NSt,"swinv2"),NSt.forEach(t),hhr=r(NDe," \u2014 "),$H=n(NDe,"A",{href:!0});var qSt=s($H);phr=r(qSt,"Swinv2ForImageClassification"),qSt.forEach(t),_hr=r(NDe," (Swin Transformer V2 model)"),NDe.forEach(t),uhr=i(Fe),b7=n(Fe,"LI",{});var qDe=s(b7);cFe=n(qDe,"STRONG",{});var jSt=s(cFe);bhr=r(jSt,"van"),jSt.forEach(t),vhr=r(qDe," \u2014 "),kH=n(qDe,"A",{href:!0});var DSt=s(kH);Fhr=r(DSt,"VanForImageClassification"),DSt.forEach(t),Thr=r(qDe," (VAN model)"),qDe.forEach(t),Mhr=i(Fe),v7=n(Fe,"LI",{});var jDe=s(v7);fFe=n(jDe,"STRONG",{});var GSt=s(fFe);Ehr=r(GSt,"vit"),GSt.forEach(t),Chr=r(jDe," \u2014 "),SH=n(jDe,"A",{href:!0});var OSt=s(SH);whr=r(OSt,"ViTForImageClassification"),OSt.forEach(t),Ahr=r(jDe," (ViT model)"),jDe.forEach(t),Fe.forEach(t),Lhr=i(wa),F7=n(wa,"P",{});var DDe=s(F7);yhr=r(DDe,"The model is set in evaluation mode by default using "),mFe=n(DDe,"CODE",{});var VSt=s(mFe);xhr=r(VSt,"model.eval()"),VSt.forEach(t),$hr=r(DDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=n(DDe,"CODE",{});var XSt=s(gFe);khr=r(XSt,"model.train()"),XSt.forEach(t),DDe.forEach(t),Shr=i(wa),T(T7.$$.fragment,wa),wa.forEach(t),wl.forEach(t),kUe=i(f),qd=n(f,"H2",{class:!0});var GJe=s(qd);M7=n(GJe,"A",{id:!0,class:!0,href:!0});var zSt=s(M7);hFe=n(zSt,"SPAN",{});var WSt=s(hFe);T(Qy.$$.fragment,WSt),WSt.forEach(t),zSt.forEach(t),Rhr=i(GJe),pFe=n(GJe,"SPAN",{});var QSt=s(pFe);Phr=r(QSt,"AutoModelForVideoClassification"),QSt.forEach(t),GJe.forEach(t),SUe=i(f),zo=n(f,"DIV",{class:!0});var Al=s(zo);T(Uy.$$.fragment,Al),Bhr=i(Al),jd=n(Al,"P",{});var hne=s(jd);Ihr=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),RH=n(hne,"A",{href:!0});var USt=s(RH);Nhr=r(USt,"from_pretrained()"),USt.forEach(t),qhr=r(hne," class method or the "),PH=n(hne,"A",{href:!0});var HSt=s(PH);jhr=r(HSt,"from_config()"),HSt.forEach(t),Dhr=r(hne,` class
method.`),hne.forEach(t),Ghr=i(Al),Hy=n(Al,"P",{});var OJe=s(Hy);Ohr=r(OJe,"This class cannot be instantiated directly using "),_Fe=n(OJe,"CODE",{});var JSt=s(_Fe);Vhr=r(JSt,"__init__()"),JSt.forEach(t),Xhr=r(OJe," (throws an error)."),OJe.forEach(t),zhr=i(Al),wt=n(Al,"DIV",{class:!0});var q6=s(wt);T(Jy.$$.fragment,q6),Whr=i(q6),uFe=n(q6,"P",{});var YSt=s(uFe);Qhr=r(YSt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),YSt.forEach(t),Uhr=i(q6),Dd=n(q6,"P",{});var pne=s(Dd);Hhr=r(pne,`Note:
Loading a model from its configuration file does `),bFe=n(pne,"STRONG",{});var KSt=s(bFe);Jhr=r(KSt,"not"),KSt.forEach(t),Yhr=r(pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(pne,"A",{href:!0});var ZSt=s(BH);Khr=r(ZSt,"from_pretrained()"),ZSt.forEach(t),Zhr=r(pne," to load the model weights."),pne.forEach(t),epr=i(q6),T(E7.$$.fragment,q6),q6.forEach(t),opr=i(Al),fo=n(Al,"DIV",{class:!0});var Aa=s(fo);T(Yy.$$.fragment,Aa),rpr=i(Aa),vFe=n(Aa,"P",{});var eRt=s(vFe);tpr=r(eRt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),eRt.forEach(t),apr=i(Aa),on=n(Aa,"P",{});var j6=s(on);npr=r(j6,"The model class to instantiate is selected based on the "),FFe=n(j6,"CODE",{});var oRt=s(FFe);spr=r(oRt,"model_type"),oRt.forEach(t),lpr=r(j6,` property of the config object (either
passed as an argument or loaded from `),TFe=n(j6,"CODE",{});var rRt=s(TFe);ipr=r(rRt,"pretrained_model_name_or_path"),rRt.forEach(t),dpr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(j6,"CODE",{});var tRt=s(MFe);cpr=r(tRt,"pretrained_model_name_or_path"),tRt.forEach(t),fpr=r(j6,":"),j6.forEach(t),mpr=i(Aa),EFe=n(Aa,"UL",{});var aRt=s(EFe);C7=n(aRt,"LI",{});var GDe=s(C7);CFe=n(GDe,"STRONG",{});var nRt=s(CFe);gpr=r(nRt,"videomae"),nRt.forEach(t),hpr=r(GDe," \u2014 "),IH=n(GDe,"A",{href:!0});var sRt=s(IH);ppr=r(sRt,"VideoMAEForVideoClassification"),sRt.forEach(t),_pr=r(GDe," (VideoMAE model)"),GDe.forEach(t),aRt.forEach(t),upr=i(Aa),w7=n(Aa,"P",{});var ODe=s(w7);bpr=r(ODe,"The model is set in evaluation mode by default using "),wFe=n(ODe,"CODE",{});var lRt=s(wFe);vpr=r(lRt,"model.eval()"),lRt.forEach(t),Fpr=r(ODe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AFe=n(ODe,"CODE",{});var iRt=s(AFe);Tpr=r(iRt,"model.train()"),iRt.forEach(t),ODe.forEach(t),Mpr=i(Aa),T(A7.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),RUe=i(f),Gd=n(f,"H2",{class:!0});var VJe=s(Gd);L7=n(VJe,"A",{id:!0,class:!0,href:!0});var dRt=s(L7);LFe=n(dRt,"SPAN",{});var cRt=s(LFe);T(Ky.$$.fragment,cRt),cRt.forEach(t),dRt.forEach(t),Epr=i(VJe),yFe=n(VJe,"SPAN",{});var fRt=s(yFe);Cpr=r(fRt,"AutoModelForVision2Seq"),fRt.forEach(t),VJe.forEach(t),PUe=i(f),Wo=n(f,"DIV",{class:!0});var Ll=s(Wo);T(Zy.$$.fragment,Ll),wpr=i(Ll),Od=n(Ll,"P",{});var _ne=s(Od);Apr=r(_ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NH=n(_ne,"A",{href:!0});var mRt=s(NH);Lpr=r(mRt,"from_pretrained()"),mRt.forEach(t),ypr=r(_ne," class method or the "),qH=n(_ne,"A",{href:!0});var gRt=s(qH);xpr=r(gRt,"from_config()"),gRt.forEach(t),$pr=r(_ne,` class
method.`),_ne.forEach(t),kpr=i(Ll),ex=n(Ll,"P",{});var XJe=s(ex);Spr=r(XJe,"This class cannot be instantiated directly using "),xFe=n(XJe,"CODE",{});var hRt=s(xFe);Rpr=r(hRt,"__init__()"),hRt.forEach(t),Ppr=r(XJe," (throws an error)."),XJe.forEach(t),Bpr=i(Ll),At=n(Ll,"DIV",{class:!0});var D6=s(At);T(ox.$$.fragment,D6),Ipr=i(D6),$Fe=n(D6,"P",{});var pRt=s($Fe);Npr=r(pRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pRt.forEach(t),qpr=i(D6),Vd=n(D6,"P",{});var une=s(Vd);jpr=r(une,`Note:
Loading a model from its configuration file does `),kFe=n(une,"STRONG",{});var _Rt=s(kFe);Dpr=r(_Rt,"not"),_Rt.forEach(t),Gpr=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(une,"A",{href:!0});var uRt=s(jH);Opr=r(uRt,"from_pretrained()"),uRt.forEach(t),Vpr=r(une," to load the model weights."),une.forEach(t),Xpr=i(D6),T(y7.$$.fragment,D6),D6.forEach(t),zpr=i(Ll),mo=n(Ll,"DIV",{class:!0});var La=s(mo);T(rx.$$.fragment,La),Wpr=i(La),SFe=n(La,"P",{});var bRt=s(SFe);Qpr=r(bRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bRt.forEach(t),Upr=i(La),rn=n(La,"P",{});var G6=s(rn);Hpr=r(G6,"The model class to instantiate is selected based on the "),RFe=n(G6,"CODE",{});var vRt=s(RFe);Jpr=r(vRt,"model_type"),vRt.forEach(t),Ypr=r(G6,` property of the config object (either
passed as an argument or loaded from `),PFe=n(G6,"CODE",{});var FRt=s(PFe);Kpr=r(FRt,"pretrained_model_name_or_path"),FRt.forEach(t),Zpr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(G6,"CODE",{});var TRt=s(BFe);e_r=r(TRt,"pretrained_model_name_or_path"),TRt.forEach(t),o_r=r(G6,":"),G6.forEach(t),r_r=i(La),IFe=n(La,"UL",{});var MRt=s(IFe);x7=n(MRt,"LI",{});var VDe=s(x7);NFe=n(VDe,"STRONG",{});var ERt=s(NFe);t_r=r(ERt,"vision-encoder-decoder"),ERt.forEach(t),a_r=r(VDe," \u2014 "),DH=n(VDe,"A",{href:!0});var CRt=s(DH);n_r=r(CRt,"VisionEncoderDecoderModel"),CRt.forEach(t),s_r=r(VDe," (Vision Encoder decoder model)"),VDe.forEach(t),MRt.forEach(t),l_r=i(La),$7=n(La,"P",{});var XDe=s($7);i_r=r(XDe,"The model is set in evaluation mode by default using "),qFe=n(XDe,"CODE",{});var wRt=s(qFe);d_r=r(wRt,"model.eval()"),wRt.forEach(t),c_r=r(XDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jFe=n(XDe,"CODE",{});var ARt=s(jFe);f_r=r(ARt,"model.train()"),ARt.forEach(t),XDe.forEach(t),m_r=i(La),T(k7.$$.fragment,La),La.forEach(t),Ll.forEach(t),BUe=i(f),Xd=n(f,"H2",{class:!0});var zJe=s(Xd);S7=n(zJe,"A",{id:!0,class:!0,href:!0});var LRt=s(S7);DFe=n(LRt,"SPAN",{});var yRt=s(DFe);T(tx.$$.fragment,yRt),yRt.forEach(t),LRt.forEach(t),g_r=i(zJe),GFe=n(zJe,"SPAN",{});var xRt=s(GFe);h_r=r(xRt,"AutoModelForVisualQuestionAnswering"),xRt.forEach(t),zJe.forEach(t),IUe=i(f),Qo=n(f,"DIV",{class:!0});var yl=s(Qo);T(ax.$$.fragment,yl),p_r=i(yl),zd=n(yl,"P",{});var bne=s(zd);__r=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),GH=n(bne,"A",{href:!0});var $Rt=s(GH);u_r=r($Rt,"from_pretrained()"),$Rt.forEach(t),b_r=r(bne," class method or the "),OH=n(bne,"A",{href:!0});var kRt=s(OH);v_r=r(kRt,"from_config()"),kRt.forEach(t),F_r=r(bne,` class
method.`),bne.forEach(t),T_r=i(yl),nx=n(yl,"P",{});var WJe=s(nx);M_r=r(WJe,"This class cannot be instantiated directly using "),OFe=n(WJe,"CODE",{});var SRt=s(OFe);E_r=r(SRt,"__init__()"),SRt.forEach(t),C_r=r(WJe," (throws an error)."),WJe.forEach(t),w_r=i(yl),Lt=n(yl,"DIV",{class:!0});var O6=s(Lt);T(sx.$$.fragment,O6),A_r=i(O6),VFe=n(O6,"P",{});var RRt=s(VFe);L_r=r(RRt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),RRt.forEach(t),y_r=i(O6),Wd=n(O6,"P",{});var vne=s(Wd);x_r=r(vne,`Note:
Loading a model from its configuration file does `),XFe=n(vne,"STRONG",{});var PRt=s(XFe);$_r=r(PRt,"not"),PRt.forEach(t),k_r=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(vne,"A",{href:!0});var BRt=s(VH);S_r=r(BRt,"from_pretrained()"),BRt.forEach(t),R_r=r(vne," to load the model weights."),vne.forEach(t),P_r=i(O6),T(R7.$$.fragment,O6),O6.forEach(t),B_r=i(yl),go=n(yl,"DIV",{class:!0});var ya=s(go);T(lx.$$.fragment,ya),I_r=i(ya),zFe=n(ya,"P",{});var IRt=s(zFe);N_r=r(IRt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),IRt.forEach(t),q_r=i(ya),tn=n(ya,"P",{});var V6=s(tn);j_r=r(V6,"The model class to instantiate is selected based on the "),WFe=n(V6,"CODE",{});var NRt=s(WFe);D_r=r(NRt,"model_type"),NRt.forEach(t),G_r=r(V6,` property of the config object (either
passed as an argument or loaded from `),QFe=n(V6,"CODE",{});var qRt=s(QFe);O_r=r(qRt,"pretrained_model_name_or_path"),qRt.forEach(t),V_r=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(V6,"CODE",{});var jRt=s(UFe);X_r=r(jRt,"pretrained_model_name_or_path"),jRt.forEach(t),z_r=r(V6,":"),V6.forEach(t),W_r=i(ya),HFe=n(ya,"UL",{});var DRt=s(HFe);P7=n(DRt,"LI",{});var zDe=s(P7);JFe=n(zDe,"STRONG",{});var GRt=s(JFe);Q_r=r(GRt,"vilt"),GRt.forEach(t),U_r=r(zDe," \u2014 "),XH=n(zDe,"A",{href:!0});var ORt=s(XH);H_r=r(ORt,"ViltForQuestionAnswering"),ORt.forEach(t),J_r=r(zDe," (ViLT model)"),zDe.forEach(t),DRt.forEach(t),Y_r=i(ya),B7=n(ya,"P",{});var WDe=s(B7);K_r=r(WDe,"The model is set in evaluation mode by default using "),YFe=n(WDe,"CODE",{});var VRt=s(YFe);Z_r=r(VRt,"model.eval()"),VRt.forEach(t),eur=r(WDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KFe=n(WDe,"CODE",{});var XRt=s(KFe);our=r(XRt,"model.train()"),XRt.forEach(t),WDe.forEach(t),rur=i(ya),T(I7.$$.fragment,ya),ya.forEach(t),yl.forEach(t),NUe=i(f),Qd=n(f,"H2",{class:!0});var QJe=s(Qd);N7=n(QJe,"A",{id:!0,class:!0,href:!0});var zRt=s(N7);ZFe=n(zRt,"SPAN",{});var WRt=s(ZFe);T(ix.$$.fragment,WRt),WRt.forEach(t),zRt.forEach(t),tur=i(QJe),eTe=n(QJe,"SPAN",{});var QRt=s(eTe);aur=r(QRt,"AutoModelForAudioClassification"),QRt.forEach(t),QJe.forEach(t),qUe=i(f),Uo=n(f,"DIV",{class:!0});var xl=s(Uo);T(dx.$$.fragment,xl),nur=i(xl),Ud=n(xl,"P",{});var Fne=s(Ud);sur=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),zH=n(Fne,"A",{href:!0});var URt=s(zH);lur=r(URt,"from_pretrained()"),URt.forEach(t),iur=r(Fne," class method or the "),WH=n(Fne,"A",{href:!0});var HRt=s(WH);dur=r(HRt,"from_config()"),HRt.forEach(t),cur=r(Fne,` class
method.`),Fne.forEach(t),fur=i(xl),cx=n(xl,"P",{});var UJe=s(cx);mur=r(UJe,"This class cannot be instantiated directly using "),oTe=n(UJe,"CODE",{});var JRt=s(oTe);gur=r(JRt,"__init__()"),JRt.forEach(t),hur=r(UJe," (throws an error)."),UJe.forEach(t),pur=i(xl),yt=n(xl,"DIV",{class:!0});var X6=s(yt);T(fx.$$.fragment,X6),_ur=i(X6),rTe=n(X6,"P",{});var YRt=s(rTe);uur=r(YRt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),YRt.forEach(t),bur=i(X6),Hd=n(X6,"P",{});var Tne=s(Hd);vur=r(Tne,`Note:
Loading a model from its configuration file does `),tTe=n(Tne,"STRONG",{});var KRt=s(tTe);Fur=r(KRt,"not"),KRt.forEach(t),Tur=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(Tne,"A",{href:!0});var ZRt=s(QH);Mur=r(ZRt,"from_pretrained()"),ZRt.forEach(t),Eur=r(Tne," to load the model weights."),Tne.forEach(t),Cur=i(X6),T(q7.$$.fragment,X6),X6.forEach(t),wur=i(xl),ho=n(xl,"DIV",{class:!0});var xa=s(ho);T(mx.$$.fragment,xa),Aur=i(xa),aTe=n(xa,"P",{});var ePt=s(aTe);Lur=r(ePt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ePt.forEach(t),yur=i(xa),an=n(xa,"P",{});var z6=s(an);xur=r(z6,"The model class to instantiate is selected based on the "),nTe=n(z6,"CODE",{});var oPt=s(nTe);$ur=r(oPt,"model_type"),oPt.forEach(t),kur=r(z6,` property of the config object (either
passed as an argument or loaded from `),sTe=n(z6,"CODE",{});var rPt=s(sTe);Sur=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),Rur=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=n(z6,"CODE",{});var tPt=s(lTe);Pur=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),Bur=r(z6,":"),z6.forEach(t),Iur=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);j7=n(We,"LI",{});var QDe=s(j7);iTe=n(QDe,"STRONG",{});var aPt=s(iTe);Nur=r(aPt,"data2vec-audio"),aPt.forEach(t),qur=r(QDe," \u2014 "),UH=n(QDe,"A",{href:!0});var nPt=s(UH);jur=r(nPt,"Data2VecAudioForSequenceClassification"),nPt.forEach(t),Dur=r(QDe," (Data2VecAudio model)"),QDe.forEach(t),Gur=i(We),D7=n(We,"LI",{});var UDe=s(D7);dTe=n(UDe,"STRONG",{});var sPt=s(dTe);Our=r(sPt,"hubert"),sPt.forEach(t),Vur=r(UDe," \u2014 "),HH=n(UDe,"A",{href:!0});var lPt=s(HH);Xur=r(lPt,"HubertForSequenceClassification"),lPt.forEach(t),zur=r(UDe," (Hubert model)"),UDe.forEach(t),Wur=i(We),G7=n(We,"LI",{});var HDe=s(G7);cTe=n(HDe,"STRONG",{});var iPt=s(cTe);Qur=r(iPt,"sew"),iPt.forEach(t),Uur=r(HDe," \u2014 "),JH=n(HDe,"A",{href:!0});var dPt=s(JH);Hur=r(dPt,"SEWForSequenceClassification"),dPt.forEach(t),Jur=r(HDe," (SEW model)"),HDe.forEach(t),Yur=i(We),O7=n(We,"LI",{});var JDe=s(O7);fTe=n(JDe,"STRONG",{});var cPt=s(fTe);Kur=r(cPt,"sew-d"),cPt.forEach(t),Zur=r(JDe," \u2014 "),YH=n(JDe,"A",{href:!0});var fPt=s(YH);e1r=r(fPt,"SEWDForSequenceClassification"),fPt.forEach(t),o1r=r(JDe," (SEW-D model)"),JDe.forEach(t),r1r=i(We),V7=n(We,"LI",{});var YDe=s(V7);mTe=n(YDe,"STRONG",{});var mPt=s(mTe);t1r=r(mPt,"unispeech"),mPt.forEach(t),a1r=r(YDe," \u2014 "),KH=n(YDe,"A",{href:!0});var gPt=s(KH);n1r=r(gPt,"UniSpeechForSequenceClassification"),gPt.forEach(t),s1r=r(YDe," (UniSpeech model)"),YDe.forEach(t),l1r=i(We),X7=n(We,"LI",{});var KDe=s(X7);gTe=n(KDe,"STRONG",{});var hPt=s(gTe);i1r=r(hPt,"unispeech-sat"),hPt.forEach(t),d1r=r(KDe," \u2014 "),ZH=n(KDe,"A",{href:!0});var pPt=s(ZH);c1r=r(pPt,"UniSpeechSatForSequenceClassification"),pPt.forEach(t),f1r=r(KDe," (UniSpeechSat model)"),KDe.forEach(t),m1r=i(We),z7=n(We,"LI",{});var ZDe=s(z7);hTe=n(ZDe,"STRONG",{});var _Pt=s(hTe);g1r=r(_Pt,"wav2vec2"),_Pt.forEach(t),h1r=r(ZDe," \u2014 "),eJ=n(ZDe,"A",{href:!0});var uPt=s(eJ);p1r=r(uPt,"Wav2Vec2ForSequenceClassification"),uPt.forEach(t),_1r=r(ZDe," (Wav2Vec2 model)"),ZDe.forEach(t),u1r=i(We),W7=n(We,"LI",{});var eGe=s(W7);pTe=n(eGe,"STRONG",{});var bPt=s(pTe);b1r=r(bPt,"wav2vec2-conformer"),bPt.forEach(t),v1r=r(eGe," \u2014 "),oJ=n(eGe,"A",{href:!0});var vPt=s(oJ);F1r=r(vPt,"Wav2Vec2ConformerForSequenceClassification"),vPt.forEach(t),T1r=r(eGe," (Wav2Vec2-Conformer model)"),eGe.forEach(t),M1r=i(We),Q7=n(We,"LI",{});var oGe=s(Q7);_Te=n(oGe,"STRONG",{});var FPt=s(_Te);E1r=r(FPt,"wavlm"),FPt.forEach(t),C1r=r(oGe," \u2014 "),rJ=n(oGe,"A",{href:!0});var TPt=s(rJ);w1r=r(TPt,"WavLMForSequenceClassification"),TPt.forEach(t),A1r=r(oGe," (WavLM model)"),oGe.forEach(t),We.forEach(t),L1r=i(xa),U7=n(xa,"P",{});var rGe=s(U7);y1r=r(rGe,"The model is set in evaluation mode by default using "),uTe=n(rGe,"CODE",{});var MPt=s(uTe);x1r=r(MPt,"model.eval()"),MPt.forEach(t),$1r=r(rGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bTe=n(rGe,"CODE",{});var EPt=s(bTe);k1r=r(EPt,"model.train()"),EPt.forEach(t),rGe.forEach(t),S1r=i(xa),T(H7.$$.fragment,xa),xa.forEach(t),xl.forEach(t),jUe=i(f),Jd=n(f,"H2",{class:!0});var HJe=s(Jd);J7=n(HJe,"A",{id:!0,class:!0,href:!0});var CPt=s(J7);vTe=n(CPt,"SPAN",{});var wPt=s(vTe);T(gx.$$.fragment,wPt),wPt.forEach(t),CPt.forEach(t),R1r=i(HJe),FTe=n(HJe,"SPAN",{});var APt=s(FTe);P1r=r(APt,"AutoModelForAudioFrameClassification"),APt.forEach(t),HJe.forEach(t),DUe=i(f),Ho=n(f,"DIV",{class:!0});var $l=s(Ho);T(hx.$$.fragment,$l),B1r=i($l),Yd=n($l,"P",{});var Mne=s(Yd);I1r=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),tJ=n(Mne,"A",{href:!0});var LPt=s(tJ);N1r=r(LPt,"from_pretrained()"),LPt.forEach(t),q1r=r(Mne," class method or the "),aJ=n(Mne,"A",{href:!0});var yPt=s(aJ);j1r=r(yPt,"from_config()"),yPt.forEach(t),D1r=r(Mne,` class
method.`),Mne.forEach(t),G1r=i($l),px=n($l,"P",{});var JJe=s(px);O1r=r(JJe,"This class cannot be instantiated directly using "),TTe=n(JJe,"CODE",{});var xPt=s(TTe);V1r=r(xPt,"__init__()"),xPt.forEach(t),X1r=r(JJe," (throws an error)."),JJe.forEach(t),z1r=i($l),xt=n($l,"DIV",{class:!0});var W6=s(xt);T(_x.$$.fragment,W6),W1r=i(W6),MTe=n(W6,"P",{});var $Pt=s(MTe);Q1r=r($Pt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$Pt.forEach(t),U1r=i(W6),Kd=n(W6,"P",{});var Ene=s(Kd);H1r=r(Ene,`Note:
Loading a model from its configuration file does `),ETe=n(Ene,"STRONG",{});var kPt=s(ETe);J1r=r(kPt,"not"),kPt.forEach(t),Y1r=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(Ene,"A",{href:!0});var SPt=s(nJ);K1r=r(SPt,"from_pretrained()"),SPt.forEach(t),Z1r=r(Ene," to load the model weights."),Ene.forEach(t),e2r=i(W6),T(Y7.$$.fragment,W6),W6.forEach(t),o2r=i($l),po=n($l,"DIV",{class:!0});var $a=s(po);T(ux.$$.fragment,$a),r2r=i($a),CTe=n($a,"P",{});var RPt=s(CTe);t2r=r(RPt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),RPt.forEach(t),a2r=i($a),nn=n($a,"P",{});var Q6=s(nn);n2r=r(Q6,"The model class to instantiate is selected based on the "),wTe=n(Q6,"CODE",{});var PPt=s(wTe);s2r=r(PPt,"model_type"),PPt.forEach(t),l2r=r(Q6,` property of the config object (either
passed as an argument or loaded from `),ATe=n(Q6,"CODE",{});var BPt=s(ATe);i2r=r(BPt,"pretrained_model_name_or_path"),BPt.forEach(t),d2r=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=n(Q6,"CODE",{});var IPt=s(LTe);c2r=r(IPt,"pretrained_model_name_or_path"),IPt.forEach(t),f2r=r(Q6,":"),Q6.forEach(t),m2r=i($a),st=n($a,"UL",{});var kl=s(st);K7=n(kl,"LI",{});var tGe=s(K7);yTe=n(tGe,"STRONG",{});var NPt=s(yTe);g2r=r(NPt,"data2vec-audio"),NPt.forEach(t),h2r=r(tGe," \u2014 "),sJ=n(tGe,"A",{href:!0});var qPt=s(sJ);p2r=r(qPt,"Data2VecAudioForAudioFrameClassification"),qPt.forEach(t),_2r=r(tGe," (Data2VecAudio model)"),tGe.forEach(t),u2r=i(kl),Z7=n(kl,"LI",{});var aGe=s(Z7);xTe=n(aGe,"STRONG",{});var jPt=s(xTe);b2r=r(jPt,"unispeech-sat"),jPt.forEach(t),v2r=r(aGe," \u2014 "),lJ=n(aGe,"A",{href:!0});var DPt=s(lJ);F2r=r(DPt,"UniSpeechSatForAudioFrameClassification"),DPt.forEach(t),T2r=r(aGe," (UniSpeechSat model)"),aGe.forEach(t),M2r=i(kl),e8=n(kl,"LI",{});var nGe=s(e8);$Te=n(nGe,"STRONG",{});var GPt=s($Te);E2r=r(GPt,"wav2vec2"),GPt.forEach(t),C2r=r(nGe," \u2014 "),iJ=n(nGe,"A",{href:!0});var OPt=s(iJ);w2r=r(OPt,"Wav2Vec2ForAudioFrameClassification"),OPt.forEach(t),A2r=r(nGe," (Wav2Vec2 model)"),nGe.forEach(t),L2r=i(kl),o8=n(kl,"LI",{});var sGe=s(o8);kTe=n(sGe,"STRONG",{});var VPt=s(kTe);y2r=r(VPt,"wav2vec2-conformer"),VPt.forEach(t),x2r=r(sGe," \u2014 "),dJ=n(sGe,"A",{href:!0});var XPt=s(dJ);$2r=r(XPt,"Wav2Vec2ConformerForAudioFrameClassification"),XPt.forEach(t),k2r=r(sGe," (Wav2Vec2-Conformer model)"),sGe.forEach(t),S2r=i(kl),r8=n(kl,"LI",{});var lGe=s(r8);STe=n(lGe,"STRONG",{});var zPt=s(STe);R2r=r(zPt,"wavlm"),zPt.forEach(t),P2r=r(lGe," \u2014 "),cJ=n(lGe,"A",{href:!0});var WPt=s(cJ);B2r=r(WPt,"WavLMForAudioFrameClassification"),WPt.forEach(t),I2r=r(lGe," (WavLM model)"),lGe.forEach(t),kl.forEach(t),N2r=i($a),t8=n($a,"P",{});var iGe=s(t8);q2r=r(iGe,"The model is set in evaluation mode by default using "),RTe=n(iGe,"CODE",{});var QPt=s(RTe);j2r=r(QPt,"model.eval()"),QPt.forEach(t),D2r=r(iGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PTe=n(iGe,"CODE",{});var UPt=s(PTe);G2r=r(UPt,"model.train()"),UPt.forEach(t),iGe.forEach(t),O2r=i($a),T(a8.$$.fragment,$a),$a.forEach(t),$l.forEach(t),GUe=i(f),Zd=n(f,"H2",{class:!0});var YJe=s(Zd);n8=n(YJe,"A",{id:!0,class:!0,href:!0});var HPt=s(n8);BTe=n(HPt,"SPAN",{});var JPt=s(BTe);T(bx.$$.fragment,JPt),JPt.forEach(t),HPt.forEach(t),V2r=i(YJe),ITe=n(YJe,"SPAN",{});var YPt=s(ITe);X2r=r(YPt,"AutoModelForCTC"),YPt.forEach(t),YJe.forEach(t),OUe=i(f),Jo=n(f,"DIV",{class:!0});var Sl=s(Jo);T(vx.$$.fragment,Sl),z2r=i(Sl),ec=n(Sl,"P",{});var Cne=s(ec);W2r=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fJ=n(Cne,"A",{href:!0});var KPt=s(fJ);Q2r=r(KPt,"from_pretrained()"),KPt.forEach(t),U2r=r(Cne," class method or the "),mJ=n(Cne,"A",{href:!0});var ZPt=s(mJ);H2r=r(ZPt,"from_config()"),ZPt.forEach(t),J2r=r(Cne,` class
method.`),Cne.forEach(t),Y2r=i(Sl),Fx=n(Sl,"P",{});var KJe=s(Fx);K2r=r(KJe,"This class cannot be instantiated directly using "),NTe=n(KJe,"CODE",{});var eBt=s(NTe);Z2r=r(eBt,"__init__()"),eBt.forEach(t),ebr=r(KJe," (throws an error)."),KJe.forEach(t),obr=i(Sl),$t=n(Sl,"DIV",{class:!0});var U6=s($t);T(Tx.$$.fragment,U6),rbr=i(U6),qTe=n(U6,"P",{});var oBt=s(qTe);tbr=r(oBt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),oBt.forEach(t),abr=i(U6),oc=n(U6,"P",{});var wne=s(oc);nbr=r(wne,`Note:
Loading a model from its configuration file does `),jTe=n(wne,"STRONG",{});var rBt=s(jTe);sbr=r(rBt,"not"),rBt.forEach(t),lbr=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(wne,"A",{href:!0});var tBt=s(gJ);ibr=r(tBt,"from_pretrained()"),tBt.forEach(t),dbr=r(wne," to load the model weights."),wne.forEach(t),cbr=i(U6),T(s8.$$.fragment,U6),U6.forEach(t),fbr=i(Sl),_o=n(Sl,"DIV",{class:!0});var ka=s(_o);T(Mx.$$.fragment,ka),mbr=i(ka),DTe=n(ka,"P",{});var aBt=s(DTe);gbr=r(aBt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),aBt.forEach(t),hbr=i(ka),sn=n(ka,"P",{});var H6=s(sn);pbr=r(H6,"The model class to instantiate is selected based on the "),GTe=n(H6,"CODE",{});var nBt=s(GTe);_br=r(nBt,"model_type"),nBt.forEach(t),ubr=r(H6,` property of the config object (either
passed as an argument or loaded from `),OTe=n(H6,"CODE",{});var sBt=s(OTe);bbr=r(sBt,"pretrained_model_name_or_path"),sBt.forEach(t),vbr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(H6,"CODE",{});var lBt=s(VTe);Fbr=r(lBt,"pretrained_model_name_or_path"),lBt.forEach(t),Tbr=r(H6,":"),H6.forEach(t),Mbr=i(ka),Le=n(ka,"UL",{});var Ie=s(Le);l8=n(Ie,"LI",{});var dGe=s(l8);XTe=n(dGe,"STRONG",{});var iBt=s(XTe);Ebr=r(iBt,"data2vec-audio"),iBt.forEach(t),Cbr=r(dGe," \u2014 "),hJ=n(dGe,"A",{href:!0});var dBt=s(hJ);wbr=r(dBt,"Data2VecAudioForCTC"),dBt.forEach(t),Abr=r(dGe," (Data2VecAudio model)"),dGe.forEach(t),Lbr=i(Ie),i8=n(Ie,"LI",{});var cGe=s(i8);zTe=n(cGe,"STRONG",{});var cBt=s(zTe);ybr=r(cBt,"hubert"),cBt.forEach(t),xbr=r(cGe," \u2014 "),pJ=n(cGe,"A",{href:!0});var fBt=s(pJ);$br=r(fBt,"HubertForCTC"),fBt.forEach(t),kbr=r(cGe," (Hubert model)"),cGe.forEach(t),Sbr=i(Ie),d8=n(Ie,"LI",{});var fGe=s(d8);WTe=n(fGe,"STRONG",{});var mBt=s(WTe);Rbr=r(mBt,"mctct"),mBt.forEach(t),Pbr=r(fGe," \u2014 "),_J=n(fGe,"A",{href:!0});var gBt=s(_J);Bbr=r(gBt,"MCTCTForCTC"),gBt.forEach(t),Ibr=r(fGe," (M-CTC-T model)"),fGe.forEach(t),Nbr=i(Ie),c8=n(Ie,"LI",{});var mGe=s(c8);QTe=n(mGe,"STRONG",{});var hBt=s(QTe);qbr=r(hBt,"sew"),hBt.forEach(t),jbr=r(mGe," \u2014 "),uJ=n(mGe,"A",{href:!0});var pBt=s(uJ);Dbr=r(pBt,"SEWForCTC"),pBt.forEach(t),Gbr=r(mGe," (SEW model)"),mGe.forEach(t),Obr=i(Ie),f8=n(Ie,"LI",{});var gGe=s(f8);UTe=n(gGe,"STRONG",{});var _Bt=s(UTe);Vbr=r(_Bt,"sew-d"),_Bt.forEach(t),Xbr=r(gGe," \u2014 "),bJ=n(gGe,"A",{href:!0});var uBt=s(bJ);zbr=r(uBt,"SEWDForCTC"),uBt.forEach(t),Wbr=r(gGe," (SEW-D model)"),gGe.forEach(t),Qbr=i(Ie),m8=n(Ie,"LI",{});var hGe=s(m8);HTe=n(hGe,"STRONG",{});var bBt=s(HTe);Ubr=r(bBt,"unispeech"),bBt.forEach(t),Hbr=r(hGe," \u2014 "),vJ=n(hGe,"A",{href:!0});var vBt=s(vJ);Jbr=r(vBt,"UniSpeechForCTC"),vBt.forEach(t),Ybr=r(hGe," (UniSpeech model)"),hGe.forEach(t),Kbr=i(Ie),g8=n(Ie,"LI",{});var pGe=s(g8);JTe=n(pGe,"STRONG",{});var FBt=s(JTe);Zbr=r(FBt,"unispeech-sat"),FBt.forEach(t),evr=r(pGe," \u2014 "),FJ=n(pGe,"A",{href:!0});var TBt=s(FJ);ovr=r(TBt,"UniSpeechSatForCTC"),TBt.forEach(t),rvr=r(pGe," (UniSpeechSat model)"),pGe.forEach(t),tvr=i(Ie),h8=n(Ie,"LI",{});var _Ge=s(h8);YTe=n(_Ge,"STRONG",{});var MBt=s(YTe);avr=r(MBt,"wav2vec2"),MBt.forEach(t),nvr=r(_Ge," \u2014 "),TJ=n(_Ge,"A",{href:!0});var EBt=s(TJ);svr=r(EBt,"Wav2Vec2ForCTC"),EBt.forEach(t),lvr=r(_Ge," (Wav2Vec2 model)"),_Ge.forEach(t),ivr=i(Ie),p8=n(Ie,"LI",{});var uGe=s(p8);KTe=n(uGe,"STRONG",{});var CBt=s(KTe);dvr=r(CBt,"wav2vec2-conformer"),CBt.forEach(t),cvr=r(uGe," \u2014 "),MJ=n(uGe,"A",{href:!0});var wBt=s(MJ);fvr=r(wBt,"Wav2Vec2ConformerForCTC"),wBt.forEach(t),mvr=r(uGe," (Wav2Vec2-Conformer model)"),uGe.forEach(t),gvr=i(Ie),_8=n(Ie,"LI",{});var bGe=s(_8);ZTe=n(bGe,"STRONG",{});var ABt=s(ZTe);hvr=r(ABt,"wavlm"),ABt.forEach(t),pvr=r(bGe," \u2014 "),EJ=n(bGe,"A",{href:!0});var LBt=s(EJ);_vr=r(LBt,"WavLMForCTC"),LBt.forEach(t),uvr=r(bGe," (WavLM model)"),bGe.forEach(t),Ie.forEach(t),bvr=i(ka),u8=n(ka,"P",{});var vGe=s(u8);vvr=r(vGe,"The model is set in evaluation mode by default using "),e7e=n(vGe,"CODE",{});var yBt=s(e7e);Fvr=r(yBt,"model.eval()"),yBt.forEach(t),Tvr=r(vGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o7e=n(vGe,"CODE",{});var xBt=s(o7e);Mvr=r(xBt,"model.train()"),xBt.forEach(t),vGe.forEach(t),Evr=i(ka),T(b8.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),VUe=i(f),rc=n(f,"H2",{class:!0});var ZJe=s(rc);v8=n(ZJe,"A",{id:!0,class:!0,href:!0});var $Bt=s(v8);r7e=n($Bt,"SPAN",{});var kBt=s(r7e);T(Ex.$$.fragment,kBt),kBt.forEach(t),$Bt.forEach(t),Cvr=i(ZJe),t7e=n(ZJe,"SPAN",{});var SBt=s(t7e);wvr=r(SBt,"AutoModelForSpeechSeq2Seq"),SBt.forEach(t),ZJe.forEach(t),XUe=i(f),Yo=n(f,"DIV",{class:!0});var Rl=s(Yo);T(Cx.$$.fragment,Rl),Avr=i(Rl),tc=n(Rl,"P",{});var Ane=s(tc);Lvr=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),CJ=n(Ane,"A",{href:!0});var RBt=s(CJ);yvr=r(RBt,"from_pretrained()"),RBt.forEach(t),xvr=r(Ane," class method or the "),wJ=n(Ane,"A",{href:!0});var PBt=s(wJ);$vr=r(PBt,"from_config()"),PBt.forEach(t),kvr=r(Ane,` class
method.`),Ane.forEach(t),Svr=i(Rl),wx=n(Rl,"P",{});var eYe=s(wx);Rvr=r(eYe,"This class cannot be instantiated directly using "),a7e=n(eYe,"CODE",{});var BBt=s(a7e);Pvr=r(BBt,"__init__()"),BBt.forEach(t),Bvr=r(eYe," (throws an error)."),eYe.forEach(t),Ivr=i(Rl),kt=n(Rl,"DIV",{class:!0});var J6=s(kt);T(Ax.$$.fragment,J6),Nvr=i(J6),n7e=n(J6,"P",{});var IBt=s(n7e);qvr=r(IBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),IBt.forEach(t),jvr=i(J6),ac=n(J6,"P",{});var Lne=s(ac);Dvr=r(Lne,`Note:
Loading a model from its configuration file does `),s7e=n(Lne,"STRONG",{});var NBt=s(s7e);Gvr=r(NBt,"not"),NBt.forEach(t),Ovr=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=n(Lne,"A",{href:!0});var qBt=s(AJ);Vvr=r(qBt,"from_pretrained()"),qBt.forEach(t),Xvr=r(Lne," to load the model weights."),Lne.forEach(t),zvr=i(J6),T(F8.$$.fragment,J6),J6.forEach(t),Wvr=i(Rl),uo=n(Rl,"DIV",{class:!0});var Sa=s(uo);T(Lx.$$.fragment,Sa),Qvr=i(Sa),l7e=n(Sa,"P",{});var jBt=s(l7e);Uvr=r(jBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jBt.forEach(t),Hvr=i(Sa),ln=n(Sa,"P",{});var Y6=s(ln);Jvr=r(Y6,"The model class to instantiate is selected based on the "),i7e=n(Y6,"CODE",{});var DBt=s(i7e);Yvr=r(DBt,"model_type"),DBt.forEach(t),Kvr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),d7e=n(Y6,"CODE",{});var GBt=s(d7e);Zvr=r(GBt,"pretrained_model_name_or_path"),GBt.forEach(t),e5r=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=n(Y6,"CODE",{});var OBt=s(c7e);o5r=r(OBt,"pretrained_model_name_or_path"),OBt.forEach(t),r5r=r(Y6,":"),Y6.forEach(t),t5r=i(Sa),yx=n(Sa,"UL",{});var oYe=s(yx);T8=n(oYe,"LI",{});var FGe=s(T8);f7e=n(FGe,"STRONG",{});var VBt=s(f7e);a5r=r(VBt,"speech-encoder-decoder"),VBt.forEach(t),n5r=r(FGe," \u2014 "),LJ=n(FGe,"A",{href:!0});var XBt=s(LJ);s5r=r(XBt,"SpeechEncoderDecoderModel"),XBt.forEach(t),l5r=r(FGe," (Speech Encoder decoder model)"),FGe.forEach(t),i5r=i(oYe),M8=n(oYe,"LI",{});var TGe=s(M8);m7e=n(TGe,"STRONG",{});var zBt=s(m7e);d5r=r(zBt,"speech_to_text"),zBt.forEach(t),c5r=r(TGe," \u2014 "),yJ=n(TGe,"A",{href:!0});var WBt=s(yJ);f5r=r(WBt,"Speech2TextForConditionalGeneration"),WBt.forEach(t),m5r=r(TGe," (Speech2Text model)"),TGe.forEach(t),oYe.forEach(t),g5r=i(Sa),E8=n(Sa,"P",{});var MGe=s(E8);h5r=r(MGe,"The model is set in evaluation mode by default using "),g7e=n(MGe,"CODE",{});var QBt=s(g7e);p5r=r(QBt,"model.eval()"),QBt.forEach(t),_5r=r(MGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h7e=n(MGe,"CODE",{});var UBt=s(h7e);u5r=r(UBt,"model.train()"),UBt.forEach(t),MGe.forEach(t),b5r=i(Sa),T(C8.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),zUe=i(f),nc=n(f,"H2",{class:!0});var rYe=s(nc);w8=n(rYe,"A",{id:!0,class:!0,href:!0});var HBt=s(w8);p7e=n(HBt,"SPAN",{});var JBt=s(p7e);T(xx.$$.fragment,JBt),JBt.forEach(t),HBt.forEach(t),v5r=i(rYe),_7e=n(rYe,"SPAN",{});var YBt=s(_7e);F5r=r(YBt,"AutoModelForAudioXVector"),YBt.forEach(t),rYe.forEach(t),WUe=i(f),Ko=n(f,"DIV",{class:!0});var Pl=s(Ko);T($x.$$.fragment,Pl),T5r=i(Pl),sc=n(Pl,"P",{});var yne=s(sc);M5r=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xJ=n(yne,"A",{href:!0});var KBt=s(xJ);E5r=r(KBt,"from_pretrained()"),KBt.forEach(t),C5r=r(yne," class method or the "),$J=n(yne,"A",{href:!0});var ZBt=s($J);w5r=r(ZBt,"from_config()"),ZBt.forEach(t),A5r=r(yne,` class
method.`),yne.forEach(t),L5r=i(Pl),kx=n(Pl,"P",{});var tYe=s(kx);y5r=r(tYe,"This class cannot be instantiated directly using "),u7e=n(tYe,"CODE",{});var eIt=s(u7e);x5r=r(eIt,"__init__()"),eIt.forEach(t),$5r=r(tYe," (throws an error)."),tYe.forEach(t),k5r=i(Pl),St=n(Pl,"DIV",{class:!0});var K6=s(St);T(Sx.$$.fragment,K6),S5r=i(K6),b7e=n(K6,"P",{});var oIt=s(b7e);R5r=r(oIt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),oIt.forEach(t),P5r=i(K6),lc=n(K6,"P",{});var xne=s(lc);B5r=r(xne,`Note:
Loading a model from its configuration file does `),v7e=n(xne,"STRONG",{});var rIt=s(v7e);I5r=r(rIt,"not"),rIt.forEach(t),N5r=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(xne,"A",{href:!0});var tIt=s(kJ);q5r=r(tIt,"from_pretrained()"),tIt.forEach(t),j5r=r(xne," to load the model weights."),xne.forEach(t),D5r=i(K6),T(A8.$$.fragment,K6),K6.forEach(t),G5r=i(Pl),bo=n(Pl,"DIV",{class:!0});var Ra=s(bo);T(Rx.$$.fragment,Ra),O5r=i(Ra),F7e=n(Ra,"P",{});var aIt=s(F7e);V5r=r(aIt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),aIt.forEach(t),X5r=i(Ra),dn=n(Ra,"P",{});var Z6=s(dn);z5r=r(Z6,"The model class to instantiate is selected based on the "),T7e=n(Z6,"CODE",{});var nIt=s(T7e);W5r=r(nIt,"model_type"),nIt.forEach(t),Q5r=r(Z6,` property of the config object (either
passed as an argument or loaded from `),M7e=n(Z6,"CODE",{});var sIt=s(M7e);U5r=r(sIt,"pretrained_model_name_or_path"),sIt.forEach(t),H5r=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=n(Z6,"CODE",{});var lIt=s(E7e);J5r=r(lIt,"pretrained_model_name_or_path"),lIt.forEach(t),Y5r=r(Z6,":"),Z6.forEach(t),K5r=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);L8=n(Bl,"LI",{});var EGe=s(L8);C7e=n(EGe,"STRONG",{});var iIt=s(C7e);Z5r=r(iIt,"data2vec-audio"),iIt.forEach(t),eFr=r(EGe," \u2014 "),SJ=n(EGe,"A",{href:!0});var dIt=s(SJ);oFr=r(dIt,"Data2VecAudioForXVector"),dIt.forEach(t),rFr=r(EGe," (Data2VecAudio model)"),EGe.forEach(t),tFr=i(Bl),y8=n(Bl,"LI",{});var CGe=s(y8);w7e=n(CGe,"STRONG",{});var cIt=s(w7e);aFr=r(cIt,"unispeech-sat"),cIt.forEach(t),nFr=r(CGe," \u2014 "),RJ=n(CGe,"A",{href:!0});var fIt=s(RJ);sFr=r(fIt,"UniSpeechSatForXVector"),fIt.forEach(t),lFr=r(CGe," (UniSpeechSat model)"),CGe.forEach(t),iFr=i(Bl),x8=n(Bl,"LI",{});var wGe=s(x8);A7e=n(wGe,"STRONG",{});var mIt=s(A7e);dFr=r(mIt,"wav2vec2"),mIt.forEach(t),cFr=r(wGe," \u2014 "),PJ=n(wGe,"A",{href:!0});var gIt=s(PJ);fFr=r(gIt,"Wav2Vec2ForXVector"),gIt.forEach(t),mFr=r(wGe," (Wav2Vec2 model)"),wGe.forEach(t),gFr=i(Bl),$8=n(Bl,"LI",{});var AGe=s($8);L7e=n(AGe,"STRONG",{});var hIt=s(L7e);hFr=r(hIt,"wav2vec2-conformer"),hIt.forEach(t),pFr=r(AGe," \u2014 "),BJ=n(AGe,"A",{href:!0});var pIt=s(BJ);_Fr=r(pIt,"Wav2Vec2ConformerForXVector"),pIt.forEach(t),uFr=r(AGe," (Wav2Vec2-Conformer model)"),AGe.forEach(t),bFr=i(Bl),k8=n(Bl,"LI",{});var LGe=s(k8);y7e=n(LGe,"STRONG",{});var _It=s(y7e);vFr=r(_It,"wavlm"),_It.forEach(t),FFr=r(LGe," \u2014 "),IJ=n(LGe,"A",{href:!0});var uIt=s(IJ);TFr=r(uIt,"WavLMForXVector"),uIt.forEach(t),MFr=r(LGe," (WavLM model)"),LGe.forEach(t),Bl.forEach(t),EFr=i(Ra),S8=n(Ra,"P",{});var yGe=s(S8);CFr=r(yGe,"The model is set in evaluation mode by default using "),x7e=n(yGe,"CODE",{});var bIt=s(x7e);wFr=r(bIt,"model.eval()"),bIt.forEach(t),AFr=r(yGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$7e=n(yGe,"CODE",{});var vIt=s($7e);LFr=r(vIt,"model.train()"),vIt.forEach(t),yGe.forEach(t),yFr=i(Ra),T(R8.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),QUe=i(f),ic=n(f,"H2",{class:!0});var aYe=s(ic);P8=n(aYe,"A",{id:!0,class:!0,href:!0});var FIt=s(P8);k7e=n(FIt,"SPAN",{});var TIt=s(k7e);T(Px.$$.fragment,TIt),TIt.forEach(t),FIt.forEach(t),xFr=i(aYe),S7e=n(aYe,"SPAN",{});var MIt=s(S7e);$Fr=r(MIt,"AutoModelForMaskedImageModeling"),MIt.forEach(t),aYe.forEach(t),UUe=i(f),Zo=n(f,"DIV",{class:!0});var Il=s(Zo);T(Bx.$$.fragment,Il),kFr=i(Il),dc=n(Il,"P",{});var $ne=s(dc);SFr=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),NJ=n($ne,"A",{href:!0});var EIt=s(NJ);RFr=r(EIt,"from_pretrained()"),EIt.forEach(t),PFr=r($ne," class method or the "),qJ=n($ne,"A",{href:!0});var CIt=s(qJ);BFr=r(CIt,"from_config()"),CIt.forEach(t),IFr=r($ne,` class
method.`),$ne.forEach(t),NFr=i(Il),Ix=n(Il,"P",{});var nYe=s(Ix);qFr=r(nYe,"This class cannot be instantiated directly using "),R7e=n(nYe,"CODE",{});var wIt=s(R7e);jFr=r(wIt,"__init__()"),wIt.forEach(t),DFr=r(nYe," (throws an error)."),nYe.forEach(t),GFr=i(Il),Rt=n(Il,"DIV",{class:!0});var eA=s(Rt);T(Nx.$$.fragment,eA),OFr=i(eA),P7e=n(eA,"P",{});var AIt=s(P7e);VFr=r(AIt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),AIt.forEach(t),XFr=i(eA),cc=n(eA,"P",{});var kne=s(cc);zFr=r(kne,`Note:
Loading a model from its configuration file does `),B7e=n(kne,"STRONG",{});var LIt=s(B7e);WFr=r(LIt,"not"),LIt.forEach(t),QFr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(kne,"A",{href:!0});var yIt=s(jJ);UFr=r(yIt,"from_pretrained()"),yIt.forEach(t),HFr=r(kne," to load the model weights."),kne.forEach(t),JFr=i(eA),T(B8.$$.fragment,eA),eA.forEach(t),YFr=i(Il),vo=n(Il,"DIV",{class:!0});var Pa=s(vo);T(qx.$$.fragment,Pa),KFr=i(Pa),I7e=n(Pa,"P",{});var xIt=s(I7e);ZFr=r(xIt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xIt.forEach(t),eTr=i(Pa),cn=n(Pa,"P",{});var oA=s(cn);oTr=r(oA,"The model class to instantiate is selected based on the "),N7e=n(oA,"CODE",{});var $It=s(N7e);rTr=r($It,"model_type"),$It.forEach(t),tTr=r(oA,` property of the config object (either
passed as an argument or loaded from `),q7e=n(oA,"CODE",{});var kIt=s(q7e);aTr=r(kIt,"pretrained_model_name_or_path"),kIt.forEach(t),nTr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(oA,"CODE",{});var SIt=s(j7e);sTr=r(SIt,"pretrained_model_name_or_path"),SIt.forEach(t),lTr=r(oA,":"),oA.forEach(t),iTr=i(Pa),fn=n(Pa,"UL",{});var rA=s(fn);I8=n(rA,"LI",{});var xGe=s(I8);D7e=n(xGe,"STRONG",{});var RIt=s(D7e);dTr=r(RIt,"deit"),RIt.forEach(t),cTr=r(xGe," \u2014 "),DJ=n(xGe,"A",{href:!0});var PIt=s(DJ);fTr=r(PIt,"DeiTForMaskedImageModeling"),PIt.forEach(t),mTr=r(xGe," (DeiT model)"),xGe.forEach(t),gTr=i(rA),N8=n(rA,"LI",{});var $Ge=s(N8);G7e=n($Ge,"STRONG",{});var BIt=s(G7e);hTr=r(BIt,"swin"),BIt.forEach(t),pTr=r($Ge," \u2014 "),GJ=n($Ge,"A",{href:!0});var IIt=s(GJ);_Tr=r(IIt,"SwinForMaskedImageModeling"),IIt.forEach(t),uTr=r($Ge," (Swin Transformer model)"),$Ge.forEach(t),bTr=i(rA),q8=n(rA,"LI",{});var kGe=s(q8);O7e=n(kGe,"STRONG",{});var NIt=s(O7e);vTr=r(NIt,"swinv2"),NIt.forEach(t),FTr=r(kGe," \u2014 "),OJ=n(kGe,"A",{href:!0});var qIt=s(OJ);TTr=r(qIt,"Swinv2ForMaskedImageModeling"),qIt.forEach(t),MTr=r(kGe," (Swin Transformer V2 model)"),kGe.forEach(t),ETr=i(rA),j8=n(rA,"LI",{});var SGe=s(j8);V7e=n(SGe,"STRONG",{});var jIt=s(V7e);CTr=r(jIt,"vit"),jIt.forEach(t),wTr=r(SGe," \u2014 "),VJ=n(SGe,"A",{href:!0});var DIt=s(VJ);ATr=r(DIt,"ViTForMaskedImageModeling"),DIt.forEach(t),LTr=r(SGe," (ViT model)"),SGe.forEach(t),rA.forEach(t),yTr=i(Pa),D8=n(Pa,"P",{});var RGe=s(D8);xTr=r(RGe,"The model is set in evaluation mode by default using "),X7e=n(RGe,"CODE",{});var GIt=s(X7e);$Tr=r(GIt,"model.eval()"),GIt.forEach(t),kTr=r(RGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z7e=n(RGe,"CODE",{});var OIt=s(z7e);STr=r(OIt,"model.train()"),OIt.forEach(t),RGe.forEach(t),RTr=i(Pa),T(G8.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),HUe=i(f),fc=n(f,"H2",{class:!0});var sYe=s(fc);O8=n(sYe,"A",{id:!0,class:!0,href:!0});var VIt=s(O8);W7e=n(VIt,"SPAN",{});var XIt=s(W7e);T(jx.$$.fragment,XIt),XIt.forEach(t),VIt.forEach(t),PTr=i(sYe),Q7e=n(sYe,"SPAN",{});var zIt=s(Q7e);BTr=r(zIt,"AutoModelForObjectDetection"),zIt.forEach(t),sYe.forEach(t),JUe=i(f),er=n(f,"DIV",{class:!0});var Nl=s(er);T(Dx.$$.fragment,Nl),ITr=i(Nl),mc=n(Nl,"P",{});var Sne=s(mc);NTr=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XJ=n(Sne,"A",{href:!0});var WIt=s(XJ);qTr=r(WIt,"from_pretrained()"),WIt.forEach(t),jTr=r(Sne," class method or the "),zJ=n(Sne,"A",{href:!0});var QIt=s(zJ);DTr=r(QIt,"from_config()"),QIt.forEach(t),GTr=r(Sne,` class
method.`),Sne.forEach(t),OTr=i(Nl),Gx=n(Nl,"P",{});var lYe=s(Gx);VTr=r(lYe,"This class cannot be instantiated directly using "),U7e=n(lYe,"CODE",{});var UIt=s(U7e);XTr=r(UIt,"__init__()"),UIt.forEach(t),zTr=r(lYe," (throws an error)."),lYe.forEach(t),WTr=i(Nl),Pt=n(Nl,"DIV",{class:!0});var tA=s(Pt);T(Ox.$$.fragment,tA),QTr=i(tA),H7e=n(tA,"P",{});var HIt=s(H7e);UTr=r(HIt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),HIt.forEach(t),HTr=i(tA),gc=n(tA,"P",{});var Rne=s(gc);JTr=r(Rne,`Note:
Loading a model from its configuration file does `),J7e=n(Rne,"STRONG",{});var JIt=s(J7e);YTr=r(JIt,"not"),JIt.forEach(t),KTr=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(Rne,"A",{href:!0});var YIt=s(WJ);ZTr=r(YIt,"from_pretrained()"),YIt.forEach(t),e7r=r(Rne," to load the model weights."),Rne.forEach(t),o7r=i(tA),T(V8.$$.fragment,tA),tA.forEach(t),r7r=i(Nl),Fo=n(Nl,"DIV",{class:!0});var Ba=s(Fo);T(Vx.$$.fragment,Ba),t7r=i(Ba),Y7e=n(Ba,"P",{});var KIt=s(Y7e);a7r=r(KIt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),KIt.forEach(t),n7r=i(Ba),mn=n(Ba,"P",{});var aA=s(mn);s7r=r(aA,"The model class to instantiate is selected based on the "),K7e=n(aA,"CODE",{});var ZIt=s(K7e);l7r=r(ZIt,"model_type"),ZIt.forEach(t),i7r=r(aA,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(aA,"CODE",{});var eNt=s(Z7e);d7r=r(eNt,"pretrained_model_name_or_path"),eNt.forEach(t),c7r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=n(aA,"CODE",{});var oNt=s(e8e);f7r=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),m7r=r(aA,":"),aA.forEach(t),g7r=i(Ba),Xx=n(Ba,"UL",{});var iYe=s(Xx);X8=n(iYe,"LI",{});var PGe=s(X8);o8e=n(PGe,"STRONG",{});var rNt=s(o8e);h7r=r(rNt,"detr"),rNt.forEach(t),p7r=r(PGe," \u2014 "),QJ=n(PGe,"A",{href:!0});var tNt=s(QJ);_7r=r(tNt,"DetrForObjectDetection"),tNt.forEach(t),u7r=r(PGe," (DETR model)"),PGe.forEach(t),b7r=i(iYe),z8=n(iYe,"LI",{});var BGe=s(z8);r8e=n(BGe,"STRONG",{});var aNt=s(r8e);v7r=r(aNt,"yolos"),aNt.forEach(t),F7r=r(BGe," \u2014 "),UJ=n(BGe,"A",{href:!0});var nNt=s(UJ);T7r=r(nNt,"YolosForObjectDetection"),nNt.forEach(t),M7r=r(BGe," (YOLOS model)"),BGe.forEach(t),iYe.forEach(t),E7r=i(Ba),W8=n(Ba,"P",{});var IGe=s(W8);C7r=r(IGe,"The model is set in evaluation mode by default using "),t8e=n(IGe,"CODE",{});var sNt=s(t8e);w7r=r(sNt,"model.eval()"),sNt.forEach(t),A7r=r(IGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a8e=n(IGe,"CODE",{});var lNt=s(a8e);L7r=r(lNt,"model.train()"),lNt.forEach(t),IGe.forEach(t),y7r=i(Ba),T(Q8.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),YUe=i(f),hc=n(f,"H2",{class:!0});var dYe=s(hc);U8=n(dYe,"A",{id:!0,class:!0,href:!0});var iNt=s(U8);n8e=n(iNt,"SPAN",{});var dNt=s(n8e);T(zx.$$.fragment,dNt),dNt.forEach(t),iNt.forEach(t),x7r=i(dYe),s8e=n(dYe,"SPAN",{});var cNt=s(s8e);$7r=r(cNt,"AutoModelForImageSegmentation"),cNt.forEach(t),dYe.forEach(t),KUe=i(f),or=n(f,"DIV",{class:!0});var ql=s(or);T(Wx.$$.fragment,ql),k7r=i(ql),pc=n(ql,"P",{});var Pne=s(pc);S7r=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),HJ=n(Pne,"A",{href:!0});var fNt=s(HJ);R7r=r(fNt,"from_pretrained()"),fNt.forEach(t),P7r=r(Pne," class method or the "),JJ=n(Pne,"A",{href:!0});var mNt=s(JJ);B7r=r(mNt,"from_config()"),mNt.forEach(t),I7r=r(Pne,` class
method.`),Pne.forEach(t),N7r=i(ql),Qx=n(ql,"P",{});var cYe=s(Qx);q7r=r(cYe,"This class cannot be instantiated directly using "),l8e=n(cYe,"CODE",{});var gNt=s(l8e);j7r=r(gNt,"__init__()"),gNt.forEach(t),D7r=r(cYe," (throws an error)."),cYe.forEach(t),G7r=i(ql),Bt=n(ql,"DIV",{class:!0});var nA=s(Bt);T(Ux.$$.fragment,nA),O7r=i(nA),i8e=n(nA,"P",{});var hNt=s(i8e);V7r=r(hNt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hNt.forEach(t),X7r=i(nA),_c=n(nA,"P",{});var Bne=s(_c);z7r=r(Bne,`Note:
Loading a model from its configuration file does `),d8e=n(Bne,"STRONG",{});var pNt=s(d8e);W7r=r(pNt,"not"),pNt.forEach(t),Q7r=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(Bne,"A",{href:!0});var _Nt=s(YJ);U7r=r(_Nt,"from_pretrained()"),_Nt.forEach(t),H7r=r(Bne," to load the model weights."),Bne.forEach(t),J7r=i(nA),T(H8.$$.fragment,nA),nA.forEach(t),Y7r=i(ql),To=n(ql,"DIV",{class:!0});var Ia=s(To);T(Hx.$$.fragment,Ia),K7r=i(Ia),c8e=n(Ia,"P",{});var uNt=s(c8e);Z7r=r(uNt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),uNt.forEach(t),e8r=i(Ia),gn=n(Ia,"P",{});var sA=s(gn);o8r=r(sA,"The model class to instantiate is selected based on the "),f8e=n(sA,"CODE",{});var bNt=s(f8e);r8r=r(bNt,"model_type"),bNt.forEach(t),t8r=r(sA,` property of the config object (either
passed as an argument or loaded from `),m8e=n(sA,"CODE",{});var vNt=s(m8e);a8r=r(vNt,"pretrained_model_name_or_path"),vNt.forEach(t),n8r=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=n(sA,"CODE",{});var FNt=s(g8e);s8r=r(FNt,"pretrained_model_name_or_path"),FNt.forEach(t),l8r=r(sA,":"),sA.forEach(t),i8r=i(Ia),h8e=n(Ia,"UL",{});var TNt=s(h8e);J8=n(TNt,"LI",{});var NGe=s(J8);p8e=n(NGe,"STRONG",{});var MNt=s(p8e);d8r=r(MNt,"detr"),MNt.forEach(t),c8r=r(NGe," \u2014 "),KJ=n(NGe,"A",{href:!0});var ENt=s(KJ);f8r=r(ENt,"DetrForSegmentation"),ENt.forEach(t),m8r=r(NGe," (DETR model)"),NGe.forEach(t),TNt.forEach(t),g8r=i(Ia),Y8=n(Ia,"P",{});var qGe=s(Y8);h8r=r(qGe,"The model is set in evaluation mode by default using "),_8e=n(qGe,"CODE",{});var CNt=s(_8e);p8r=r(CNt,"model.eval()"),CNt.forEach(t),_8r=r(qGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u8e=n(qGe,"CODE",{});var wNt=s(u8e);u8r=r(wNt,"model.train()"),wNt.forEach(t),qGe.forEach(t),b8r=i(Ia),T(K8.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),ZUe=i(f),uc=n(f,"H2",{class:!0});var fYe=s(uc);Z8=n(fYe,"A",{id:!0,class:!0,href:!0});var ANt=s(Z8);b8e=n(ANt,"SPAN",{});var LNt=s(b8e);T(Jx.$$.fragment,LNt),LNt.forEach(t),ANt.forEach(t),v8r=i(fYe),v8e=n(fYe,"SPAN",{});var yNt=s(v8e);F8r=r(yNt,"AutoModelForSemanticSegmentation"),yNt.forEach(t),fYe.forEach(t),eHe=i(f),rr=n(f,"DIV",{class:!0});var jl=s(rr);T(Yx.$$.fragment,jl),T8r=i(jl),bc=n(jl,"P",{});var Ine=s(bc);M8r=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZJ=n(Ine,"A",{href:!0});var xNt=s(ZJ);E8r=r(xNt,"from_pretrained()"),xNt.forEach(t),C8r=r(Ine," class method or the "),eY=n(Ine,"A",{href:!0});var $Nt=s(eY);w8r=r($Nt,"from_config()"),$Nt.forEach(t),A8r=r(Ine,` class
method.`),Ine.forEach(t),L8r=i(jl),Kx=n(jl,"P",{});var mYe=s(Kx);y8r=r(mYe,"This class cannot be instantiated directly using "),F8e=n(mYe,"CODE",{});var kNt=s(F8e);x8r=r(kNt,"__init__()"),kNt.forEach(t),$8r=r(mYe," (throws an error)."),mYe.forEach(t),k8r=i(jl),It=n(jl,"DIV",{class:!0});var lA=s(It);T(Zx.$$.fragment,lA),S8r=i(lA),T8e=n(lA,"P",{});var SNt=s(T8e);R8r=r(SNt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),SNt.forEach(t),P8r=i(lA),vc=n(lA,"P",{});var Nne=s(vc);B8r=r(Nne,`Note:
Loading a model from its configuration file does `),M8e=n(Nne,"STRONG",{});var RNt=s(M8e);I8r=r(RNt,"not"),RNt.forEach(t),N8r=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(Nne,"A",{href:!0});var PNt=s(oY);q8r=r(PNt,"from_pretrained()"),PNt.forEach(t),j8r=r(Nne," to load the model weights."),Nne.forEach(t),D8r=i(lA),T(e9.$$.fragment,lA),lA.forEach(t),G8r=i(jl),Mo=n(jl,"DIV",{class:!0});var Na=s(Mo);T(e$.$$.fragment,Na),O8r=i(Na),E8e=n(Na,"P",{});var BNt=s(E8e);V8r=r(BNt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),BNt.forEach(t),X8r=i(Na),hn=n(Na,"P",{});var iA=s(hn);z8r=r(iA,"The model class to instantiate is selected based on the "),C8e=n(iA,"CODE",{});var INt=s(C8e);W8r=r(INt,"model_type"),INt.forEach(t),Q8r=r(iA,` property of the config object (either
passed as an argument or loaded from `),w8e=n(iA,"CODE",{});var NNt=s(w8e);U8r=r(NNt,"pretrained_model_name_or_path"),NNt.forEach(t),H8r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=n(iA,"CODE",{});var qNt=s(A8e);J8r=r(qNt,"pretrained_model_name_or_path"),qNt.forEach(t),Y8r=r(iA,":"),iA.forEach(t),K8r=i(Na),it=n(Na,"UL",{});var Dl=s(it);o9=n(Dl,"LI",{});var jGe=s(o9);L8e=n(jGe,"STRONG",{});var jNt=s(L8e);Z8r=r(jNt,"beit"),jNt.forEach(t),e9r=r(jGe," \u2014 "),rY=n(jGe,"A",{href:!0});var DNt=s(rY);o9r=r(DNt,"BeitForSemanticSegmentation"),DNt.forEach(t),r9r=r(jGe," (BEiT model)"),jGe.forEach(t),t9r=i(Dl),r9=n(Dl,"LI",{});var DGe=s(r9);y8e=n(DGe,"STRONG",{});var GNt=s(y8e);a9r=r(GNt,"data2vec-vision"),GNt.forEach(t),n9r=r(DGe," \u2014 "),tY=n(DGe,"A",{href:!0});var ONt=s(tY);s9r=r(ONt,"Data2VecVisionForSemanticSegmentation"),ONt.forEach(t),l9r=r(DGe," (Data2VecVision model)"),DGe.forEach(t),i9r=i(Dl),t9=n(Dl,"LI",{});var GGe=s(t9);x8e=n(GGe,"STRONG",{});var VNt=s(x8e);d9r=r(VNt,"dpt"),VNt.forEach(t),c9r=r(GGe," \u2014 "),aY=n(GGe,"A",{href:!0});var XNt=s(aY);f9r=r(XNt,"DPTForSemanticSegmentation"),XNt.forEach(t),m9r=r(GGe," (DPT model)"),GGe.forEach(t),g9r=i(Dl),a9=n(Dl,"LI",{});var OGe=s(a9);$8e=n(OGe,"STRONG",{});var zNt=s($8e);h9r=r(zNt,"mobilevit"),zNt.forEach(t),p9r=r(OGe," \u2014 "),nY=n(OGe,"A",{href:!0});var WNt=s(nY);_9r=r(WNt,"MobileViTForSemanticSegmentation"),WNt.forEach(t),u9r=r(OGe," (MobileViT model)"),OGe.forEach(t),b9r=i(Dl),n9=n(Dl,"LI",{});var VGe=s(n9);k8e=n(VGe,"STRONG",{});var QNt=s(k8e);v9r=r(QNt,"segformer"),QNt.forEach(t),F9r=r(VGe," \u2014 "),sY=n(VGe,"A",{href:!0});var UNt=s(sY);T9r=r(UNt,"SegformerForSemanticSegmentation"),UNt.forEach(t),M9r=r(VGe," (SegFormer model)"),VGe.forEach(t),Dl.forEach(t),E9r=i(Na),s9=n(Na,"P",{});var XGe=s(s9);C9r=r(XGe,"The model is set in evaluation mode by default using "),S8e=n(XGe,"CODE",{});var HNt=s(S8e);w9r=r(HNt,"model.eval()"),HNt.forEach(t),A9r=r(XGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R8e=n(XGe,"CODE",{});var JNt=s(R8e);L9r=r(JNt,"model.train()"),JNt.forEach(t),XGe.forEach(t),y9r=i(Na),T(l9.$$.fragment,Na),Na.forEach(t),jl.forEach(t),oHe=i(f),Fc=n(f,"H2",{class:!0});var gYe=s(Fc);i9=n(gYe,"A",{id:!0,class:!0,href:!0});var YNt=s(i9);P8e=n(YNt,"SPAN",{});var KNt=s(P8e);T(o$.$$.fragment,KNt),KNt.forEach(t),YNt.forEach(t),x9r=i(gYe),B8e=n(gYe,"SPAN",{});var ZNt=s(B8e);$9r=r(ZNt,"AutoModelForInstanceSegmentation"),ZNt.forEach(t),gYe.forEach(t),rHe=i(f),tr=n(f,"DIV",{class:!0});var Gl=s(tr);T(r$.$$.fragment,Gl),k9r=i(Gl),Tc=n(Gl,"P",{});var qne=s(Tc);S9r=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),lY=n(qne,"A",{href:!0});var eqt=s(lY);R9r=r(eqt,"from_pretrained()"),eqt.forEach(t),P9r=r(qne," class method or the "),iY=n(qne,"A",{href:!0});var oqt=s(iY);B9r=r(oqt,"from_config()"),oqt.forEach(t),I9r=r(qne,` class
method.`),qne.forEach(t),N9r=i(Gl),t$=n(Gl,"P",{});var hYe=s(t$);q9r=r(hYe,"This class cannot be instantiated directly using "),I8e=n(hYe,"CODE",{});var rqt=s(I8e);j9r=r(rqt,"__init__()"),rqt.forEach(t),D9r=r(hYe," (throws an error)."),hYe.forEach(t),G9r=i(Gl),Nt=n(Gl,"DIV",{class:!0});var dA=s(Nt);T(a$.$$.fragment,dA),O9r=i(dA),N8e=n(dA,"P",{});var tqt=s(N8e);V9r=r(tqt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),tqt.forEach(t),X9r=i(dA),Mc=n(dA,"P",{});var jne=s(Mc);z9r=r(jne,`Note:
Loading a model from its configuration file does `),q8e=n(jne,"STRONG",{});var aqt=s(q8e);W9r=r(aqt,"not"),aqt.forEach(t),Q9r=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(jne,"A",{href:!0});var nqt=s(dY);U9r=r(nqt,"from_pretrained()"),nqt.forEach(t),H9r=r(jne," to load the model weights."),jne.forEach(t),J9r=i(dA),T(d9.$$.fragment,dA),dA.forEach(t),Y9r=i(Gl),Eo=n(Gl,"DIV",{class:!0});var qa=s(Eo);T(n$.$$.fragment,qa),K9r=i(qa),j8e=n(qa,"P",{});var sqt=s(j8e);Z9r=r(sqt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),sqt.forEach(t),eMr=i(qa),pn=n(qa,"P",{});var cA=s(pn);oMr=r(cA,"The model class to instantiate is selected based on the "),D8e=n(cA,"CODE",{});var lqt=s(D8e);rMr=r(lqt,"model_type"),lqt.forEach(t),tMr=r(cA,` property of the config object (either
passed as an argument or loaded from `),G8e=n(cA,"CODE",{});var iqt=s(G8e);aMr=r(iqt,"pretrained_model_name_or_path"),iqt.forEach(t),nMr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O8e=n(cA,"CODE",{});var dqt=s(O8e);sMr=r(dqt,"pretrained_model_name_or_path"),dqt.forEach(t),lMr=r(cA,":"),cA.forEach(t),iMr=i(qa),V8e=n(qa,"UL",{});var cqt=s(V8e);c9=n(cqt,"LI",{});var zGe=s(c9);X8e=n(zGe,"STRONG",{});var fqt=s(X8e);dMr=r(fqt,"maskformer"),fqt.forEach(t),cMr=r(zGe," \u2014 "),cY=n(zGe,"A",{href:!0});var mqt=s(cY);fMr=r(mqt,"MaskFormerForInstanceSegmentation"),mqt.forEach(t),mMr=r(zGe," (MaskFormer model)"),zGe.forEach(t),cqt.forEach(t),gMr=i(qa),f9=n(qa,"P",{});var WGe=s(f9);hMr=r(WGe,"The model is set in evaluation mode by default using "),z8e=n(WGe,"CODE",{});var gqt=s(z8e);pMr=r(gqt,"model.eval()"),gqt.forEach(t),_Mr=r(WGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W8e=n(WGe,"CODE",{});var hqt=s(W8e);uMr=r(hqt,"model.train()"),hqt.forEach(t),WGe.forEach(t),bMr=i(qa),T(m9.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),tHe=i(f),Ec=n(f,"H2",{class:!0});var pYe=s(Ec);g9=n(pYe,"A",{id:!0,class:!0,href:!0});var pqt=s(g9);Q8e=n(pqt,"SPAN",{});var _qt=s(Q8e);T(s$.$$.fragment,_qt),_qt.forEach(t),pqt.forEach(t),vMr=i(pYe),U8e=n(pYe,"SPAN",{});var uqt=s(U8e);FMr=r(uqt,"TFAutoModel"),uqt.forEach(t),pYe.forEach(t),aHe=i(f),ar=n(f,"DIV",{class:!0});var Ol=s(ar);T(l$.$$.fragment,Ol),TMr=i(Ol),Cc=n(Ol,"P",{});var Dne=s(Cc);MMr=r(Dne,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fY=n(Dne,"A",{href:!0});var bqt=s(fY);EMr=r(bqt,"from_pretrained()"),bqt.forEach(t),CMr=r(Dne," class method or the "),mY=n(Dne,"A",{href:!0});var vqt=s(mY);wMr=r(vqt,"from_config()"),vqt.forEach(t),AMr=r(Dne,` class
method.`),Dne.forEach(t),LMr=i(Ol),i$=n(Ol,"P",{});var _Ye=s(i$);yMr=r(_Ye,"This class cannot be instantiated directly using "),H8e=n(_Ye,"CODE",{});var Fqt=s(H8e);xMr=r(Fqt,"__init__()"),Fqt.forEach(t),$Mr=r(_Ye," (throws an error)."),_Ye.forEach(t),kMr=i(Ol),qt=n(Ol,"DIV",{class:!0});var fA=s(qt);T(d$.$$.fragment,fA),SMr=i(fA),J8e=n(fA,"P",{});var Tqt=s(J8e);RMr=r(Tqt,"Instantiates one of the base model classes of the library from a configuration."),Tqt.forEach(t),PMr=i(fA),wc=n(fA,"P",{});var Gne=s(wc);BMr=r(Gne,`Note:
Loading a model from its configuration file does `),Y8e=n(Gne,"STRONG",{});var Mqt=s(Y8e);IMr=r(Mqt,"not"),Mqt.forEach(t),NMr=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(Gne,"A",{href:!0});var Eqt=s(gY);qMr=r(Eqt,"from_pretrained()"),Eqt.forEach(t),jMr=r(Gne," to load the model weights."),Gne.forEach(t),DMr=i(fA),T(h9.$$.fragment,fA),fA.forEach(t),GMr=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(c$.$$.fragment,Vl),OMr=i(Vl),K8e=n(Vl,"P",{});var Cqt=s(K8e);VMr=r(Cqt,"Instantiate one of the base model classes of the library from a pretrained model."),Cqt.forEach(t),XMr=i(Vl),_n=n(Vl,"P",{});var mA=s(_n);zMr=r(mA,"The model class to instantiate is selected based on the "),Z8e=n(mA,"CODE",{});var wqt=s(Z8e);WMr=r(wqt,"model_type"),wqt.forEach(t),QMr=r(mA,` property of the config object (either
passed as an argument or loaded from `),e9e=n(mA,"CODE",{});var Aqt=s(e9e);UMr=r(Aqt,"pretrained_model_name_or_path"),Aqt.forEach(t),HMr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=n(mA,"CODE",{});var Lqt=s(o9e);JMr=r(Lqt,"pretrained_model_name_or_path"),Lqt.forEach(t),YMr=r(mA,":"),mA.forEach(t),KMr=i(Vl),q=n(Vl,"UL",{});var D=s(q);p9=n(D,"LI",{});var QGe=s(p9);r9e=n(QGe,"STRONG",{});var yqt=s(r9e);ZMr=r(yqt,"albert"),yqt.forEach(t),eEr=r(QGe," \u2014 "),hY=n(QGe,"A",{href:!0});var xqt=s(hY);oEr=r(xqt,"TFAlbertModel"),xqt.forEach(t),rEr=r(QGe," (ALBERT model)"),QGe.forEach(t),tEr=i(D),_9=n(D,"LI",{});var UGe=s(_9);t9e=n(UGe,"STRONG",{});var $qt=s(t9e);aEr=r($qt,"bart"),$qt.forEach(t),nEr=r(UGe," \u2014 "),pY=n(UGe,"A",{href:!0});var kqt=s(pY);sEr=r(kqt,"TFBartModel"),kqt.forEach(t),lEr=r(UGe," (BART model)"),UGe.forEach(t),iEr=i(D),u9=n(D,"LI",{});var HGe=s(u9);a9e=n(HGe,"STRONG",{});var Sqt=s(a9e);dEr=r(Sqt,"bert"),Sqt.forEach(t),cEr=r(HGe," \u2014 "),_Y=n(HGe,"A",{href:!0});var Rqt=s(_Y);fEr=r(Rqt,"TFBertModel"),Rqt.forEach(t),mEr=r(HGe," (BERT model)"),HGe.forEach(t),gEr=i(D),b9=n(D,"LI",{});var JGe=s(b9);n9e=n(JGe,"STRONG",{});var Pqt=s(n9e);hEr=r(Pqt,"blenderbot"),Pqt.forEach(t),pEr=r(JGe," \u2014 "),uY=n(JGe,"A",{href:!0});var Bqt=s(uY);_Er=r(Bqt,"TFBlenderbotModel"),Bqt.forEach(t),uEr=r(JGe," (Blenderbot model)"),JGe.forEach(t),bEr=i(D),v9=n(D,"LI",{});var YGe=s(v9);s9e=n(YGe,"STRONG",{});var Iqt=s(s9e);vEr=r(Iqt,"blenderbot-small"),Iqt.forEach(t),FEr=r(YGe," \u2014 "),bY=n(YGe,"A",{href:!0});var Nqt=s(bY);TEr=r(Nqt,"TFBlenderbotSmallModel"),Nqt.forEach(t),MEr=r(YGe," (BlenderbotSmall model)"),YGe.forEach(t),EEr=i(D),F9=n(D,"LI",{});var KGe=s(F9);l9e=n(KGe,"STRONG",{});var qqt=s(l9e);CEr=r(qqt,"camembert"),qqt.forEach(t),wEr=r(KGe," \u2014 "),vY=n(KGe,"A",{href:!0});var jqt=s(vY);AEr=r(jqt,"TFCamembertModel"),jqt.forEach(t),LEr=r(KGe," (CamemBERT model)"),KGe.forEach(t),yEr=i(D),T9=n(D,"LI",{});var ZGe=s(T9);i9e=n(ZGe,"STRONG",{});var Dqt=s(i9e);xEr=r(Dqt,"clip"),Dqt.forEach(t),$Er=r(ZGe," \u2014 "),FY=n(ZGe,"A",{href:!0});var Gqt=s(FY);kEr=r(Gqt,"TFCLIPModel"),Gqt.forEach(t),SEr=r(ZGe," (CLIP model)"),ZGe.forEach(t),REr=i(D),M9=n(D,"LI",{});var eOe=s(M9);d9e=n(eOe,"STRONG",{});var Oqt=s(d9e);PEr=r(Oqt,"convbert"),Oqt.forEach(t),BEr=r(eOe," \u2014 "),TY=n(eOe,"A",{href:!0});var Vqt=s(TY);IEr=r(Vqt,"TFConvBertModel"),Vqt.forEach(t),NEr=r(eOe," (ConvBERT model)"),eOe.forEach(t),qEr=i(D),E9=n(D,"LI",{});var oOe=s(E9);c9e=n(oOe,"STRONG",{});var Xqt=s(c9e);jEr=r(Xqt,"convnext"),Xqt.forEach(t),DEr=r(oOe," \u2014 "),MY=n(oOe,"A",{href:!0});var zqt=s(MY);GEr=r(zqt,"TFConvNextModel"),zqt.forEach(t),OEr=r(oOe," (ConvNeXT model)"),oOe.forEach(t),VEr=i(D),C9=n(D,"LI",{});var rOe=s(C9);f9e=n(rOe,"STRONG",{});var Wqt=s(f9e);XEr=r(Wqt,"ctrl"),Wqt.forEach(t),zEr=r(rOe," \u2014 "),EY=n(rOe,"A",{href:!0});var Qqt=s(EY);WEr=r(Qqt,"TFCTRLModel"),Qqt.forEach(t),QEr=r(rOe," (CTRL model)"),rOe.forEach(t),UEr=i(D),w9=n(D,"LI",{});var tOe=s(w9);m9e=n(tOe,"STRONG",{});var Uqt=s(m9e);HEr=r(Uqt,"cvt"),Uqt.forEach(t),JEr=r(tOe," \u2014 "),CY=n(tOe,"A",{href:!0});var Hqt=s(CY);YEr=r(Hqt,"TFCvtModel"),Hqt.forEach(t),KEr=r(tOe," (CvT model)"),tOe.forEach(t),ZEr=i(D),A9=n(D,"LI",{});var aOe=s(A9);g9e=n(aOe,"STRONG",{});var Jqt=s(g9e);e4r=r(Jqt,"data2vec-vision"),Jqt.forEach(t),o4r=r(aOe," \u2014 "),wY=n(aOe,"A",{href:!0});var Yqt=s(wY);r4r=r(Yqt,"TFData2VecVisionModel"),Yqt.forEach(t),t4r=r(aOe," (Data2VecVision model)"),aOe.forEach(t),a4r=i(D),L9=n(D,"LI",{});var nOe=s(L9);h9e=n(nOe,"STRONG",{});var Kqt=s(h9e);n4r=r(Kqt,"deberta"),Kqt.forEach(t),s4r=r(nOe," \u2014 "),AY=n(nOe,"A",{href:!0});var Zqt=s(AY);l4r=r(Zqt,"TFDebertaModel"),Zqt.forEach(t),i4r=r(nOe," (DeBERTa model)"),nOe.forEach(t),d4r=i(D),y9=n(D,"LI",{});var sOe=s(y9);p9e=n(sOe,"STRONG",{});var ejt=s(p9e);c4r=r(ejt,"deberta-v2"),ejt.forEach(t),f4r=r(sOe," \u2014 "),LY=n(sOe,"A",{href:!0});var ojt=s(LY);m4r=r(ojt,"TFDebertaV2Model"),ojt.forEach(t),g4r=r(sOe," (DeBERTa-v2 model)"),sOe.forEach(t),h4r=i(D),x9=n(D,"LI",{});var lOe=s(x9);_9e=n(lOe,"STRONG",{});var rjt=s(_9e);p4r=r(rjt,"deit"),rjt.forEach(t),_4r=r(lOe," \u2014 "),yY=n(lOe,"A",{href:!0});var tjt=s(yY);u4r=r(tjt,"TFDeiTModel"),tjt.forEach(t),b4r=r(lOe," (DeiT model)"),lOe.forEach(t),v4r=i(D),$9=n(D,"LI",{});var iOe=s($9);u9e=n(iOe,"STRONG",{});var ajt=s(u9e);F4r=r(ajt,"distilbert"),ajt.forEach(t),T4r=r(iOe," \u2014 "),xY=n(iOe,"A",{href:!0});var njt=s(xY);M4r=r(njt,"TFDistilBertModel"),njt.forEach(t),E4r=r(iOe," (DistilBERT model)"),iOe.forEach(t),C4r=i(D),k9=n(D,"LI",{});var dOe=s(k9);b9e=n(dOe,"STRONG",{});var sjt=s(b9e);w4r=r(sjt,"dpr"),sjt.forEach(t),A4r=r(dOe," \u2014 "),$Y=n(dOe,"A",{href:!0});var ljt=s($Y);L4r=r(ljt,"TFDPRQuestionEncoder"),ljt.forEach(t),y4r=r(dOe," (DPR model)"),dOe.forEach(t),x4r=i(D),S9=n(D,"LI",{});var cOe=s(S9);v9e=n(cOe,"STRONG",{});var ijt=s(v9e);$4r=r(ijt,"electra"),ijt.forEach(t),k4r=r(cOe," \u2014 "),kY=n(cOe,"A",{href:!0});var djt=s(kY);S4r=r(djt,"TFElectraModel"),djt.forEach(t),R4r=r(cOe," (ELECTRA model)"),cOe.forEach(t),P4r=i(D),R9=n(D,"LI",{});var fOe=s(R9);F9e=n(fOe,"STRONG",{});var cjt=s(F9e);B4r=r(cjt,"flaubert"),cjt.forEach(t),I4r=r(fOe," \u2014 "),SY=n(fOe,"A",{href:!0});var fjt=s(SY);N4r=r(fjt,"TFFlaubertModel"),fjt.forEach(t),q4r=r(fOe," (FlauBERT model)"),fOe.forEach(t),j4r=i(D),il=n(D,"LI",{});var tP=s(il);T9e=n(tP,"STRONG",{});var mjt=s(T9e);D4r=r(mjt,"funnel"),mjt.forEach(t),G4r=r(tP," \u2014 "),RY=n(tP,"A",{href:!0});var gjt=s(RY);O4r=r(gjt,"TFFunnelModel"),gjt.forEach(t),V4r=r(tP," or "),PY=n(tP,"A",{href:!0});var hjt=s(PY);X4r=r(hjt,"TFFunnelBaseModel"),hjt.forEach(t),z4r=r(tP," (Funnel Transformer model)"),tP.forEach(t),W4r=i(D),P9=n(D,"LI",{});var mOe=s(P9);M9e=n(mOe,"STRONG",{});var pjt=s(M9e);Q4r=r(pjt,"gpt2"),pjt.forEach(t),U4r=r(mOe," \u2014 "),BY=n(mOe,"A",{href:!0});var _jt=s(BY);H4r=r(_jt,"TFGPT2Model"),_jt.forEach(t),J4r=r(mOe," (OpenAI GPT-2 model)"),mOe.forEach(t),Y4r=i(D),B9=n(D,"LI",{});var gOe=s(B9);E9e=n(gOe,"STRONG",{});var ujt=s(E9e);K4r=r(ujt,"gptj"),ujt.forEach(t),Z4r=r(gOe," \u2014 "),IY=n(gOe,"A",{href:!0});var bjt=s(IY);eCr=r(bjt,"TFGPTJModel"),bjt.forEach(t),oCr=r(gOe," (GPT-J model)"),gOe.forEach(t),rCr=i(D),I9=n(D,"LI",{});var hOe=s(I9);C9e=n(hOe,"STRONG",{});var vjt=s(C9e);tCr=r(vjt,"hubert"),vjt.forEach(t),aCr=r(hOe," \u2014 "),NY=n(hOe,"A",{href:!0});var Fjt=s(NY);nCr=r(Fjt,"TFHubertModel"),Fjt.forEach(t),sCr=r(hOe," (Hubert model)"),hOe.forEach(t),lCr=i(D),N9=n(D,"LI",{});var pOe=s(N9);w9e=n(pOe,"STRONG",{});var Tjt=s(w9e);iCr=r(Tjt,"layoutlm"),Tjt.forEach(t),dCr=r(pOe," \u2014 "),qY=n(pOe,"A",{href:!0});var Mjt=s(qY);cCr=r(Mjt,"TFLayoutLMModel"),Mjt.forEach(t),fCr=r(pOe," (LayoutLM model)"),pOe.forEach(t),mCr=i(D),q9=n(D,"LI",{});var _Oe=s(q9);A9e=n(_Oe,"STRONG",{});var Ejt=s(A9e);gCr=r(Ejt,"led"),Ejt.forEach(t),hCr=r(_Oe," \u2014 "),jY=n(_Oe,"A",{href:!0});var Cjt=s(jY);pCr=r(Cjt,"TFLEDModel"),Cjt.forEach(t),_Cr=r(_Oe," (LED model)"),_Oe.forEach(t),uCr=i(D),j9=n(D,"LI",{});var uOe=s(j9);L9e=n(uOe,"STRONG",{});var wjt=s(L9e);bCr=r(wjt,"longformer"),wjt.forEach(t),vCr=r(uOe," \u2014 "),DY=n(uOe,"A",{href:!0});var Ajt=s(DY);FCr=r(Ajt,"TFLongformerModel"),Ajt.forEach(t),TCr=r(uOe," (Longformer model)"),uOe.forEach(t),MCr=i(D),D9=n(D,"LI",{});var bOe=s(D9);y9e=n(bOe,"STRONG",{});var Ljt=s(y9e);ECr=r(Ljt,"lxmert"),Ljt.forEach(t),CCr=r(bOe," \u2014 "),GY=n(bOe,"A",{href:!0});var yjt=s(GY);wCr=r(yjt,"TFLxmertModel"),yjt.forEach(t),ACr=r(bOe," (LXMERT model)"),bOe.forEach(t),LCr=i(D),G9=n(D,"LI",{});var vOe=s(G9);x9e=n(vOe,"STRONG",{});var xjt=s(x9e);yCr=r(xjt,"marian"),xjt.forEach(t),xCr=r(vOe," \u2014 "),OY=n(vOe,"A",{href:!0});var $jt=s(OY);$Cr=r($jt,"TFMarianModel"),$jt.forEach(t),kCr=r(vOe," (Marian model)"),vOe.forEach(t),SCr=i(D),O9=n(D,"LI",{});var FOe=s(O9);$9e=n(FOe,"STRONG",{});var kjt=s($9e);RCr=r(kjt,"mbart"),kjt.forEach(t),PCr=r(FOe," \u2014 "),VY=n(FOe,"A",{href:!0});var Sjt=s(VY);BCr=r(Sjt,"TFMBartModel"),Sjt.forEach(t),ICr=r(FOe," (mBART model)"),FOe.forEach(t),NCr=i(D),V9=n(D,"LI",{});var TOe=s(V9);k9e=n(TOe,"STRONG",{});var Rjt=s(k9e);qCr=r(Rjt,"mobilebert"),Rjt.forEach(t),jCr=r(TOe," \u2014 "),XY=n(TOe,"A",{href:!0});var Pjt=s(XY);DCr=r(Pjt,"TFMobileBertModel"),Pjt.forEach(t),GCr=r(TOe," (MobileBERT model)"),TOe.forEach(t),OCr=i(D),X9=n(D,"LI",{});var MOe=s(X9);S9e=n(MOe,"STRONG",{});var Bjt=s(S9e);VCr=r(Bjt,"mpnet"),Bjt.forEach(t),XCr=r(MOe," \u2014 "),zY=n(MOe,"A",{href:!0});var Ijt=s(zY);zCr=r(Ijt,"TFMPNetModel"),Ijt.forEach(t),WCr=r(MOe," (MPNet model)"),MOe.forEach(t),QCr=i(D),z9=n(D,"LI",{});var EOe=s(z9);R9e=n(EOe,"STRONG",{});var Njt=s(R9e);UCr=r(Njt,"mt5"),Njt.forEach(t),HCr=r(EOe," \u2014 "),WY=n(EOe,"A",{href:!0});var qjt=s(WY);JCr=r(qjt,"TFMT5Model"),qjt.forEach(t),YCr=r(EOe," (MT5 model)"),EOe.forEach(t),KCr=i(D),W9=n(D,"LI",{});var COe=s(W9);P9e=n(COe,"STRONG",{});var jjt=s(P9e);ZCr=r(jjt,"openai-gpt"),jjt.forEach(t),e3r=r(COe," \u2014 "),QY=n(COe,"A",{href:!0});var Djt=s(QY);o3r=r(Djt,"TFOpenAIGPTModel"),Djt.forEach(t),r3r=r(COe," (OpenAI GPT model)"),COe.forEach(t),t3r=i(D),Q9=n(D,"LI",{});var wOe=s(Q9);B9e=n(wOe,"STRONG",{});var Gjt=s(B9e);a3r=r(Gjt,"opt"),Gjt.forEach(t),n3r=r(wOe," \u2014 "),UY=n(wOe,"A",{href:!0});var Ojt=s(UY);s3r=r(Ojt,"TFOPTModel"),Ojt.forEach(t),l3r=r(wOe," (OPT model)"),wOe.forEach(t),i3r=i(D),U9=n(D,"LI",{});var AOe=s(U9);I9e=n(AOe,"STRONG",{});var Vjt=s(I9e);d3r=r(Vjt,"pegasus"),Vjt.forEach(t),c3r=r(AOe," \u2014 "),HY=n(AOe,"A",{href:!0});var Xjt=s(HY);f3r=r(Xjt,"TFPegasusModel"),Xjt.forEach(t),m3r=r(AOe," (Pegasus model)"),AOe.forEach(t),g3r=i(D),H9=n(D,"LI",{});var LOe=s(H9);N9e=n(LOe,"STRONG",{});var zjt=s(N9e);h3r=r(zjt,"regnet"),zjt.forEach(t),p3r=r(LOe," \u2014 "),JY=n(LOe,"A",{href:!0});var Wjt=s(JY);_3r=r(Wjt,"TFRegNetModel"),Wjt.forEach(t),u3r=r(LOe," (RegNet model)"),LOe.forEach(t),b3r=i(D),J9=n(D,"LI",{});var yOe=s(J9);q9e=n(yOe,"STRONG",{});var Qjt=s(q9e);v3r=r(Qjt,"rembert"),Qjt.forEach(t),F3r=r(yOe," \u2014 "),YY=n(yOe,"A",{href:!0});var Ujt=s(YY);T3r=r(Ujt,"TFRemBertModel"),Ujt.forEach(t),M3r=r(yOe," (RemBERT model)"),yOe.forEach(t),E3r=i(D),Y9=n(D,"LI",{});var xOe=s(Y9);j9e=n(xOe,"STRONG",{});var Hjt=s(j9e);C3r=r(Hjt,"resnet"),Hjt.forEach(t),w3r=r(xOe," \u2014 "),KY=n(xOe,"A",{href:!0});var Jjt=s(KY);A3r=r(Jjt,"TFResNetModel"),Jjt.forEach(t),L3r=r(xOe," (ResNet model)"),xOe.forEach(t),y3r=i(D),K9=n(D,"LI",{});var $Oe=s(K9);D9e=n($Oe,"STRONG",{});var Yjt=s(D9e);x3r=r(Yjt,"roberta"),Yjt.forEach(t),$3r=r($Oe," \u2014 "),ZY=n($Oe,"A",{href:!0});var Kjt=s(ZY);k3r=r(Kjt,"TFRobertaModel"),Kjt.forEach(t),S3r=r($Oe," (RoBERTa model)"),$Oe.forEach(t),R3r=i(D),Z9=n(D,"LI",{});var kOe=s(Z9);G9e=n(kOe,"STRONG",{});var Zjt=s(G9e);P3r=r(Zjt,"roformer"),Zjt.forEach(t),B3r=r(kOe," \u2014 "),eK=n(kOe,"A",{href:!0});var eDt=s(eK);I3r=r(eDt,"TFRoFormerModel"),eDt.forEach(t),N3r=r(kOe," (RoFormer model)"),kOe.forEach(t),q3r=i(D),eM=n(D,"LI",{});var SOe=s(eM);O9e=n(SOe,"STRONG",{});var oDt=s(O9e);j3r=r(oDt,"segformer"),oDt.forEach(t),D3r=r(SOe," \u2014 "),oK=n(SOe,"A",{href:!0});var rDt=s(oK);G3r=r(rDt,"TFSegformerModel"),rDt.forEach(t),O3r=r(SOe," (SegFormer model)"),SOe.forEach(t),V3r=i(D),oM=n(D,"LI",{});var ROe=s(oM);V9e=n(ROe,"STRONG",{});var tDt=s(V9e);X3r=r(tDt,"speech_to_text"),tDt.forEach(t),z3r=r(ROe," \u2014 "),rK=n(ROe,"A",{href:!0});var aDt=s(rK);W3r=r(aDt,"TFSpeech2TextModel"),aDt.forEach(t),Q3r=r(ROe," (Speech2Text model)"),ROe.forEach(t),U3r=i(D),rM=n(D,"LI",{});var POe=s(rM);X9e=n(POe,"STRONG",{});var nDt=s(X9e);H3r=r(nDt,"swin"),nDt.forEach(t),J3r=r(POe," \u2014 "),tK=n(POe,"A",{href:!0});var sDt=s(tK);Y3r=r(sDt,"TFSwinModel"),sDt.forEach(t),K3r=r(POe," (Swin Transformer model)"),POe.forEach(t),Z3r=i(D),tM=n(D,"LI",{});var BOe=s(tM);z9e=n(BOe,"STRONG",{});var lDt=s(z9e);e0r=r(lDt,"t5"),lDt.forEach(t),o0r=r(BOe," \u2014 "),aK=n(BOe,"A",{href:!0});var iDt=s(aK);r0r=r(iDt,"TFT5Model"),iDt.forEach(t),t0r=r(BOe," (T5 model)"),BOe.forEach(t),a0r=i(D),aM=n(D,"LI",{});var IOe=s(aM);W9e=n(IOe,"STRONG",{});var dDt=s(W9e);n0r=r(dDt,"tapas"),dDt.forEach(t),s0r=r(IOe," \u2014 "),nK=n(IOe,"A",{href:!0});var cDt=s(nK);l0r=r(cDt,"TFTapasModel"),cDt.forEach(t),i0r=r(IOe," (TAPAS model)"),IOe.forEach(t),d0r=i(D),nM=n(D,"LI",{});var NOe=s(nM);Q9e=n(NOe,"STRONG",{});var fDt=s(Q9e);c0r=r(fDt,"transfo-xl"),fDt.forEach(t),f0r=r(NOe," \u2014 "),sK=n(NOe,"A",{href:!0});var mDt=s(sK);m0r=r(mDt,"TFTransfoXLModel"),mDt.forEach(t),g0r=r(NOe," (Transformer-XL model)"),NOe.forEach(t),h0r=i(D),sM=n(D,"LI",{});var qOe=s(sM);U9e=n(qOe,"STRONG",{});var gDt=s(U9e);p0r=r(gDt,"vit"),gDt.forEach(t),_0r=r(qOe," \u2014 "),lK=n(qOe,"A",{href:!0});var hDt=s(lK);u0r=r(hDt,"TFViTModel"),hDt.forEach(t),b0r=r(qOe," (ViT model)"),qOe.forEach(t),v0r=i(D),lM=n(D,"LI",{});var jOe=s(lM);H9e=n(jOe,"STRONG",{});var pDt=s(H9e);F0r=r(pDt,"vit_mae"),pDt.forEach(t),T0r=r(jOe," \u2014 "),iK=n(jOe,"A",{href:!0});var _Dt=s(iK);M0r=r(_Dt,"TFViTMAEModel"),_Dt.forEach(t),E0r=r(jOe," (ViTMAE model)"),jOe.forEach(t),C0r=i(D),iM=n(D,"LI",{});var DOe=s(iM);J9e=n(DOe,"STRONG",{});var uDt=s(J9e);w0r=r(uDt,"wav2vec2"),uDt.forEach(t),A0r=r(DOe," \u2014 "),dK=n(DOe,"A",{href:!0});var bDt=s(dK);L0r=r(bDt,"TFWav2Vec2Model"),bDt.forEach(t),y0r=r(DOe," (Wav2Vec2 model)"),DOe.forEach(t),x0r=i(D),dM=n(D,"LI",{});var GOe=s(dM);Y9e=n(GOe,"STRONG",{});var vDt=s(Y9e);$0r=r(vDt,"xlm"),vDt.forEach(t),k0r=r(GOe," \u2014 "),cK=n(GOe,"A",{href:!0});var FDt=s(cK);S0r=r(FDt,"TFXLMModel"),FDt.forEach(t),R0r=r(GOe," (XLM model)"),GOe.forEach(t),P0r=i(D),cM=n(D,"LI",{});var OOe=s(cM);K9e=n(OOe,"STRONG",{});var TDt=s(K9e);B0r=r(TDt,"xlm-roberta"),TDt.forEach(t),I0r=r(OOe," \u2014 "),fK=n(OOe,"A",{href:!0});var MDt=s(fK);N0r=r(MDt,"TFXLMRobertaModel"),MDt.forEach(t),q0r=r(OOe," (XLM-RoBERTa model)"),OOe.forEach(t),j0r=i(D),fM=n(D,"LI",{});var VOe=s(fM);Z9e=n(VOe,"STRONG",{});var EDt=s(Z9e);D0r=r(EDt,"xlnet"),EDt.forEach(t),G0r=r(VOe," \u2014 "),mK=n(VOe,"A",{href:!0});var CDt=s(mK);O0r=r(CDt,"TFXLNetModel"),CDt.forEach(t),V0r=r(VOe," (XLNet model)"),VOe.forEach(t),D.forEach(t),X0r=i(Vl),T(mM.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),nHe=i(f),Ac=n(f,"H2",{class:!0});var uYe=s(Ac);gM=n(uYe,"A",{id:!0,class:!0,href:!0});var wDt=s(gM);eMe=n(wDt,"SPAN",{});var ADt=s(eMe);T(f$.$$.fragment,ADt),ADt.forEach(t),wDt.forEach(t),z0r=i(uYe),oMe=n(uYe,"SPAN",{});var LDt=s(oMe);W0r=r(LDt,"TFAutoModelForPreTraining"),LDt.forEach(t),uYe.forEach(t),sHe=i(f),nr=n(f,"DIV",{class:!0});var Xl=s(nr);T(m$.$$.fragment,Xl),Q0r=i(Xl),Lc=n(Xl,"P",{});var One=s(Lc);U0r=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gK=n(One,"A",{href:!0});var yDt=s(gK);H0r=r(yDt,"from_pretrained()"),yDt.forEach(t),J0r=r(One," class method or the "),hK=n(One,"A",{href:!0});var xDt=s(hK);Y0r=r(xDt,"from_config()"),xDt.forEach(t),K0r=r(One,` class
method.`),One.forEach(t),Z0r=i(Xl),g$=n(Xl,"P",{});var bYe=s(g$);ewr=r(bYe,"This class cannot be instantiated directly using "),rMe=n(bYe,"CODE",{});var $Dt=s(rMe);owr=r($Dt,"__init__()"),$Dt.forEach(t),rwr=r(bYe," (throws an error)."),bYe.forEach(t),twr=i(Xl),jt=n(Xl,"DIV",{class:!0});var gA=s(jt);T(h$.$$.fragment,gA),awr=i(gA),tMe=n(gA,"P",{});var kDt=s(tMe);nwr=r(kDt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kDt.forEach(t),swr=i(gA),yc=n(gA,"P",{});var Vne=s(yc);lwr=r(Vne,`Note:
Loading a model from its configuration file does `),aMe=n(Vne,"STRONG",{});var SDt=s(aMe);iwr=r(SDt,"not"),SDt.forEach(t),dwr=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(Vne,"A",{href:!0});var RDt=s(pK);cwr=r(RDt,"from_pretrained()"),RDt.forEach(t),fwr=r(Vne," to load the model weights."),Vne.forEach(t),mwr=i(gA),T(hM.$$.fragment,gA),gA.forEach(t),gwr=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(p$.$$.fragment,zl),hwr=i(zl),nMe=n(zl,"P",{});var PDt=s(nMe);pwr=r(PDt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),PDt.forEach(t),_wr=i(zl),un=n(zl,"P",{});var hA=s(un);uwr=r(hA,"The model class to instantiate is selected based on the "),sMe=n(hA,"CODE",{});var BDt=s(sMe);bwr=r(BDt,"model_type"),BDt.forEach(t),vwr=r(hA,` property of the config object (either
passed as an argument or loaded from `),lMe=n(hA,"CODE",{});var IDt=s(lMe);Fwr=r(IDt,"pretrained_model_name_or_path"),IDt.forEach(t),Twr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=n(hA,"CODE",{});var NDt=s(iMe);Mwr=r(NDt,"pretrained_model_name_or_path"),NDt.forEach(t),Ewr=r(hA,":"),hA.forEach(t),Cwr=i(zl),se=n(zl,"UL",{});var le=s(se);pM=n(le,"LI",{});var XOe=s(pM);dMe=n(XOe,"STRONG",{});var qDt=s(dMe);wwr=r(qDt,"albert"),qDt.forEach(t),Awr=r(XOe," \u2014 "),_K=n(XOe,"A",{href:!0});var jDt=s(_K);Lwr=r(jDt,"TFAlbertForPreTraining"),jDt.forEach(t),ywr=r(XOe," (ALBERT model)"),XOe.forEach(t),xwr=i(le),_M=n(le,"LI",{});var zOe=s(_M);cMe=n(zOe,"STRONG",{});var DDt=s(cMe);$wr=r(DDt,"bart"),DDt.forEach(t),kwr=r(zOe," \u2014 "),uK=n(zOe,"A",{href:!0});var GDt=s(uK);Swr=r(GDt,"TFBartForConditionalGeneration"),GDt.forEach(t),Rwr=r(zOe," (BART model)"),zOe.forEach(t),Pwr=i(le),uM=n(le,"LI",{});var WOe=s(uM);fMe=n(WOe,"STRONG",{});var ODt=s(fMe);Bwr=r(ODt,"bert"),ODt.forEach(t),Iwr=r(WOe," \u2014 "),bK=n(WOe,"A",{href:!0});var VDt=s(bK);Nwr=r(VDt,"TFBertForPreTraining"),VDt.forEach(t),qwr=r(WOe," (BERT model)"),WOe.forEach(t),jwr=i(le),bM=n(le,"LI",{});var QOe=s(bM);mMe=n(QOe,"STRONG",{});var XDt=s(mMe);Dwr=r(XDt,"camembert"),XDt.forEach(t),Gwr=r(QOe," \u2014 "),vK=n(QOe,"A",{href:!0});var zDt=s(vK);Owr=r(zDt,"TFCamembertForMaskedLM"),zDt.forEach(t),Vwr=r(QOe," (CamemBERT model)"),QOe.forEach(t),Xwr=i(le),vM=n(le,"LI",{});var UOe=s(vM);gMe=n(UOe,"STRONG",{});var WDt=s(gMe);zwr=r(WDt,"ctrl"),WDt.forEach(t),Wwr=r(UOe," \u2014 "),FK=n(UOe,"A",{href:!0});var QDt=s(FK);Qwr=r(QDt,"TFCTRLLMHeadModel"),QDt.forEach(t),Uwr=r(UOe," (CTRL model)"),UOe.forEach(t),Hwr=i(le),FM=n(le,"LI",{});var HOe=s(FM);hMe=n(HOe,"STRONG",{});var UDt=s(hMe);Jwr=r(UDt,"distilbert"),UDt.forEach(t),Ywr=r(HOe," \u2014 "),TK=n(HOe,"A",{href:!0});var HDt=s(TK);Kwr=r(HDt,"TFDistilBertForMaskedLM"),HDt.forEach(t),Zwr=r(HOe," (DistilBERT model)"),HOe.forEach(t),e6r=i(le),TM=n(le,"LI",{});var JOe=s(TM);pMe=n(JOe,"STRONG",{});var JDt=s(pMe);o6r=r(JDt,"electra"),JDt.forEach(t),r6r=r(JOe," \u2014 "),MK=n(JOe,"A",{href:!0});var YDt=s(MK);t6r=r(YDt,"TFElectraForPreTraining"),YDt.forEach(t),a6r=r(JOe," (ELECTRA model)"),JOe.forEach(t),n6r=i(le),MM=n(le,"LI",{});var YOe=s(MM);_Me=n(YOe,"STRONG",{});var KDt=s(_Me);s6r=r(KDt,"flaubert"),KDt.forEach(t),l6r=r(YOe," \u2014 "),EK=n(YOe,"A",{href:!0});var ZDt=s(EK);i6r=r(ZDt,"TFFlaubertWithLMHeadModel"),ZDt.forEach(t),d6r=r(YOe," (FlauBERT model)"),YOe.forEach(t),c6r=i(le),EM=n(le,"LI",{});var KOe=s(EM);uMe=n(KOe,"STRONG",{});var eGt=s(uMe);f6r=r(eGt,"funnel"),eGt.forEach(t),m6r=r(KOe," \u2014 "),CK=n(KOe,"A",{href:!0});var oGt=s(CK);g6r=r(oGt,"TFFunnelForPreTraining"),oGt.forEach(t),h6r=r(KOe," (Funnel Transformer model)"),KOe.forEach(t),p6r=i(le),CM=n(le,"LI",{});var ZOe=s(CM);bMe=n(ZOe,"STRONG",{});var rGt=s(bMe);_6r=r(rGt,"gpt2"),rGt.forEach(t),u6r=r(ZOe," \u2014 "),wK=n(ZOe,"A",{href:!0});var tGt=s(wK);b6r=r(tGt,"TFGPT2LMHeadModel"),tGt.forEach(t),v6r=r(ZOe," (OpenAI GPT-2 model)"),ZOe.forEach(t),F6r=i(le),wM=n(le,"LI",{});var eVe=s(wM);vMe=n(eVe,"STRONG",{});var aGt=s(vMe);T6r=r(aGt,"layoutlm"),aGt.forEach(t),M6r=r(eVe," \u2014 "),AK=n(eVe,"A",{href:!0});var nGt=s(AK);E6r=r(nGt,"TFLayoutLMForMaskedLM"),nGt.forEach(t),C6r=r(eVe," (LayoutLM model)"),eVe.forEach(t),w6r=i(le),AM=n(le,"LI",{});var oVe=s(AM);FMe=n(oVe,"STRONG",{});var sGt=s(FMe);A6r=r(sGt,"lxmert"),sGt.forEach(t),L6r=r(oVe," \u2014 "),LK=n(oVe,"A",{href:!0});var lGt=s(LK);y6r=r(lGt,"TFLxmertForPreTraining"),lGt.forEach(t),x6r=r(oVe," (LXMERT model)"),oVe.forEach(t),$6r=i(le),LM=n(le,"LI",{});var rVe=s(LM);TMe=n(rVe,"STRONG",{});var iGt=s(TMe);k6r=r(iGt,"mobilebert"),iGt.forEach(t),S6r=r(rVe," \u2014 "),yK=n(rVe,"A",{href:!0});var dGt=s(yK);R6r=r(dGt,"TFMobileBertForPreTraining"),dGt.forEach(t),P6r=r(rVe," (MobileBERT model)"),rVe.forEach(t),B6r=i(le),yM=n(le,"LI",{});var tVe=s(yM);MMe=n(tVe,"STRONG",{});var cGt=s(MMe);I6r=r(cGt,"mpnet"),cGt.forEach(t),N6r=r(tVe," \u2014 "),xK=n(tVe,"A",{href:!0});var fGt=s(xK);q6r=r(fGt,"TFMPNetForMaskedLM"),fGt.forEach(t),j6r=r(tVe," (MPNet model)"),tVe.forEach(t),D6r=i(le),xM=n(le,"LI",{});var aVe=s(xM);EMe=n(aVe,"STRONG",{});var mGt=s(EMe);G6r=r(mGt,"openai-gpt"),mGt.forEach(t),O6r=r(aVe," \u2014 "),$K=n(aVe,"A",{href:!0});var gGt=s($K);V6r=r(gGt,"TFOpenAIGPTLMHeadModel"),gGt.forEach(t),X6r=r(aVe," (OpenAI GPT model)"),aVe.forEach(t),z6r=i(le),$M=n(le,"LI",{});var nVe=s($M);CMe=n(nVe,"STRONG",{});var hGt=s(CMe);W6r=r(hGt,"roberta"),hGt.forEach(t),Q6r=r(nVe," \u2014 "),kK=n(nVe,"A",{href:!0});var pGt=s(kK);U6r=r(pGt,"TFRobertaForMaskedLM"),pGt.forEach(t),H6r=r(nVe," (RoBERTa model)"),nVe.forEach(t),J6r=i(le),kM=n(le,"LI",{});var sVe=s(kM);wMe=n(sVe,"STRONG",{});var _Gt=s(wMe);Y6r=r(_Gt,"t5"),_Gt.forEach(t),K6r=r(sVe," \u2014 "),SK=n(sVe,"A",{href:!0});var uGt=s(SK);Z6r=r(uGt,"TFT5ForConditionalGeneration"),uGt.forEach(t),eAr=r(sVe," (T5 model)"),sVe.forEach(t),oAr=i(le),SM=n(le,"LI",{});var lVe=s(SM);AMe=n(lVe,"STRONG",{});var bGt=s(AMe);rAr=r(bGt,"tapas"),bGt.forEach(t),tAr=r(lVe," \u2014 "),RK=n(lVe,"A",{href:!0});var vGt=s(RK);aAr=r(vGt,"TFTapasForMaskedLM"),vGt.forEach(t),nAr=r(lVe," (TAPAS model)"),lVe.forEach(t),sAr=i(le),RM=n(le,"LI",{});var iVe=s(RM);LMe=n(iVe,"STRONG",{});var FGt=s(LMe);lAr=r(FGt,"transfo-xl"),FGt.forEach(t),iAr=r(iVe," \u2014 "),PK=n(iVe,"A",{href:!0});var TGt=s(PK);dAr=r(TGt,"TFTransfoXLLMHeadModel"),TGt.forEach(t),cAr=r(iVe," (Transformer-XL model)"),iVe.forEach(t),fAr=i(le),PM=n(le,"LI",{});var dVe=s(PM);yMe=n(dVe,"STRONG",{});var MGt=s(yMe);mAr=r(MGt,"vit_mae"),MGt.forEach(t),gAr=r(dVe," \u2014 "),BK=n(dVe,"A",{href:!0});var EGt=s(BK);hAr=r(EGt,"TFViTMAEForPreTraining"),EGt.forEach(t),pAr=r(dVe," (ViTMAE model)"),dVe.forEach(t),_Ar=i(le),BM=n(le,"LI",{});var cVe=s(BM);xMe=n(cVe,"STRONG",{});var CGt=s(xMe);uAr=r(CGt,"xlm"),CGt.forEach(t),bAr=r(cVe," \u2014 "),IK=n(cVe,"A",{href:!0});var wGt=s(IK);vAr=r(wGt,"TFXLMWithLMHeadModel"),wGt.forEach(t),FAr=r(cVe," (XLM model)"),cVe.forEach(t),TAr=i(le),IM=n(le,"LI",{});var fVe=s(IM);$Me=n(fVe,"STRONG",{});var AGt=s($Me);MAr=r(AGt,"xlm-roberta"),AGt.forEach(t),EAr=r(fVe," \u2014 "),NK=n(fVe,"A",{href:!0});var LGt=s(NK);CAr=r(LGt,"TFXLMRobertaForMaskedLM"),LGt.forEach(t),wAr=r(fVe," (XLM-RoBERTa model)"),fVe.forEach(t),AAr=i(le),NM=n(le,"LI",{});var mVe=s(NM);kMe=n(mVe,"STRONG",{});var yGt=s(kMe);LAr=r(yGt,"xlnet"),yGt.forEach(t),yAr=r(mVe," \u2014 "),qK=n(mVe,"A",{href:!0});var xGt=s(qK);xAr=r(xGt,"TFXLNetLMHeadModel"),xGt.forEach(t),$Ar=r(mVe," (XLNet model)"),mVe.forEach(t),le.forEach(t),kAr=i(zl),T(qM.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),lHe=i(f),xc=n(f,"H2",{class:!0});var vYe=s(xc);jM=n(vYe,"A",{id:!0,class:!0,href:!0});var $Gt=s(jM);SMe=n($Gt,"SPAN",{});var kGt=s(SMe);T(_$.$$.fragment,kGt),kGt.forEach(t),$Gt.forEach(t),SAr=i(vYe),RMe=n(vYe,"SPAN",{});var SGt=s(RMe);RAr=r(SGt,"TFAutoModelForCausalLM"),SGt.forEach(t),vYe.forEach(t),iHe=i(f),sr=n(f,"DIV",{class:!0});var Wl=s(sr);T(u$.$$.fragment,Wl),PAr=i(Wl),$c=n(Wl,"P",{});var Xne=s($c);BAr=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jK=n(Xne,"A",{href:!0});var RGt=s(jK);IAr=r(RGt,"from_pretrained()"),RGt.forEach(t),NAr=r(Xne," class method or the "),DK=n(Xne,"A",{href:!0});var PGt=s(DK);qAr=r(PGt,"from_config()"),PGt.forEach(t),jAr=r(Xne,` class
method.`),Xne.forEach(t),DAr=i(Wl),b$=n(Wl,"P",{});var FYe=s(b$);GAr=r(FYe,"This class cannot be instantiated directly using "),PMe=n(FYe,"CODE",{});var BGt=s(PMe);OAr=r(BGt,"__init__()"),BGt.forEach(t),VAr=r(FYe," (throws an error)."),FYe.forEach(t),XAr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var pA=s(Dt);T(v$.$$.fragment,pA),zAr=i(pA),BMe=n(pA,"P",{});var IGt=s(BMe);WAr=r(IGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),IGt.forEach(t),QAr=i(pA),kc=n(pA,"P",{});var zne=s(kc);UAr=r(zne,`Note:
Loading a model from its configuration file does `),IMe=n(zne,"STRONG",{});var NGt=s(IMe);HAr=r(NGt,"not"),NGt.forEach(t),JAr=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=n(zne,"A",{href:!0});var qGt=s(GK);YAr=r(qGt,"from_pretrained()"),qGt.forEach(t),KAr=r(zne," to load the model weights."),zne.forEach(t),ZAr=i(pA),T(DM.$$.fragment,pA),pA.forEach(t),eLr=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(F$.$$.fragment,Ql),oLr=i(Ql),NMe=n(Ql,"P",{});var jGt=s(NMe);rLr=r(jGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jGt.forEach(t),tLr=i(Ql),bn=n(Ql,"P",{});var _A=s(bn);aLr=r(_A,"The model class to instantiate is selected based on the "),qMe=n(_A,"CODE",{});var DGt=s(qMe);nLr=r(DGt,"model_type"),DGt.forEach(t),sLr=r(_A,` property of the config object (either
passed as an argument or loaded from `),jMe=n(_A,"CODE",{});var GGt=s(jMe);lLr=r(GGt,"pretrained_model_name_or_path"),GGt.forEach(t),iLr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=n(_A,"CODE",{});var OGt=s(DMe);dLr=r(OGt,"pretrained_model_name_or_path"),OGt.forEach(t),cLr=r(_A,":"),_A.forEach(t),fLr=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);GM=n(Ce,"LI",{});var gVe=s(GM);GMe=n(gVe,"STRONG",{});var VGt=s(GMe);mLr=r(VGt,"bert"),VGt.forEach(t),gLr=r(gVe," \u2014 "),OK=n(gVe,"A",{href:!0});var XGt=s(OK);hLr=r(XGt,"TFBertLMHeadModel"),XGt.forEach(t),pLr=r(gVe," (BERT model)"),gVe.forEach(t),_Lr=i(Ce),OM=n(Ce,"LI",{});var hVe=s(OM);OMe=n(hVe,"STRONG",{});var zGt=s(OMe);uLr=r(zGt,"camembert"),zGt.forEach(t),bLr=r(hVe," \u2014 "),VK=n(hVe,"A",{href:!0});var WGt=s(VK);vLr=r(WGt,"TFCamembertForCausalLM"),WGt.forEach(t),FLr=r(hVe," (CamemBERT model)"),hVe.forEach(t),TLr=i(Ce),VM=n(Ce,"LI",{});var pVe=s(VM);VMe=n(pVe,"STRONG",{});var QGt=s(VMe);MLr=r(QGt,"ctrl"),QGt.forEach(t),ELr=r(pVe," \u2014 "),XK=n(pVe,"A",{href:!0});var UGt=s(XK);CLr=r(UGt,"TFCTRLLMHeadModel"),UGt.forEach(t),wLr=r(pVe," (CTRL model)"),pVe.forEach(t),ALr=i(Ce),XM=n(Ce,"LI",{});var _Ve=s(XM);XMe=n(_Ve,"STRONG",{});var HGt=s(XMe);LLr=r(HGt,"gpt2"),HGt.forEach(t),yLr=r(_Ve," \u2014 "),zK=n(_Ve,"A",{href:!0});var JGt=s(zK);xLr=r(JGt,"TFGPT2LMHeadModel"),JGt.forEach(t),$Lr=r(_Ve," (OpenAI GPT-2 model)"),_Ve.forEach(t),kLr=i(Ce),zM=n(Ce,"LI",{});var uVe=s(zM);zMe=n(uVe,"STRONG",{});var YGt=s(zMe);SLr=r(YGt,"gptj"),YGt.forEach(t),RLr=r(uVe," \u2014 "),WK=n(uVe,"A",{href:!0});var KGt=s(WK);PLr=r(KGt,"TFGPTJForCausalLM"),KGt.forEach(t),BLr=r(uVe," (GPT-J model)"),uVe.forEach(t),ILr=i(Ce),WM=n(Ce,"LI",{});var bVe=s(WM);WMe=n(bVe,"STRONG",{});var ZGt=s(WMe);NLr=r(ZGt,"openai-gpt"),ZGt.forEach(t),qLr=r(bVe," \u2014 "),QK=n(bVe,"A",{href:!0});var eOt=s(QK);jLr=r(eOt,"TFOpenAIGPTLMHeadModel"),eOt.forEach(t),DLr=r(bVe," (OpenAI GPT model)"),bVe.forEach(t),GLr=i(Ce),QM=n(Ce,"LI",{});var vVe=s(QM);QMe=n(vVe,"STRONG",{});var oOt=s(QMe);OLr=r(oOt,"opt"),oOt.forEach(t),VLr=r(vVe," \u2014 "),UK=n(vVe,"A",{href:!0});var rOt=s(UK);XLr=r(rOt,"TFOPTForCausalLM"),rOt.forEach(t),zLr=r(vVe," (OPT model)"),vVe.forEach(t),WLr=i(Ce),UM=n(Ce,"LI",{});var FVe=s(UM);UMe=n(FVe,"STRONG",{});var tOt=s(UMe);QLr=r(tOt,"rembert"),tOt.forEach(t),ULr=r(FVe," \u2014 "),HK=n(FVe,"A",{href:!0});var aOt=s(HK);HLr=r(aOt,"TFRemBertForCausalLM"),aOt.forEach(t),JLr=r(FVe," (RemBERT model)"),FVe.forEach(t),YLr=i(Ce),HM=n(Ce,"LI",{});var TVe=s(HM);HMe=n(TVe,"STRONG",{});var nOt=s(HMe);KLr=r(nOt,"roberta"),nOt.forEach(t),ZLr=r(TVe," \u2014 "),JK=n(TVe,"A",{href:!0});var sOt=s(JK);eyr=r(sOt,"TFRobertaForCausalLM"),sOt.forEach(t),oyr=r(TVe," (RoBERTa model)"),TVe.forEach(t),ryr=i(Ce),JM=n(Ce,"LI",{});var MVe=s(JM);JMe=n(MVe,"STRONG",{});var lOt=s(JMe);tyr=r(lOt,"roformer"),lOt.forEach(t),ayr=r(MVe," \u2014 "),YK=n(MVe,"A",{href:!0});var iOt=s(YK);nyr=r(iOt,"TFRoFormerForCausalLM"),iOt.forEach(t),syr=r(MVe," (RoFormer model)"),MVe.forEach(t),lyr=i(Ce),YM=n(Ce,"LI",{});var EVe=s(YM);YMe=n(EVe,"STRONG",{});var dOt=s(YMe);iyr=r(dOt,"transfo-xl"),dOt.forEach(t),dyr=r(EVe," \u2014 "),KK=n(EVe,"A",{href:!0});var cOt=s(KK);cyr=r(cOt,"TFTransfoXLLMHeadModel"),cOt.forEach(t),fyr=r(EVe," (Transformer-XL model)"),EVe.forEach(t),myr=i(Ce),KM=n(Ce,"LI",{});var CVe=s(KM);KMe=n(CVe,"STRONG",{});var fOt=s(KMe);gyr=r(fOt,"xlm"),fOt.forEach(t),hyr=r(CVe," \u2014 "),ZK=n(CVe,"A",{href:!0});var mOt=s(ZK);pyr=r(mOt,"TFXLMWithLMHeadModel"),mOt.forEach(t),_yr=r(CVe," (XLM model)"),CVe.forEach(t),uyr=i(Ce),ZM=n(Ce,"LI",{});var wVe=s(ZM);ZMe=n(wVe,"STRONG",{});var gOt=s(ZMe);byr=r(gOt,"xlnet"),gOt.forEach(t),vyr=r(wVe," \u2014 "),eZ=n(wVe,"A",{href:!0});var hOt=s(eZ);Fyr=r(hOt,"TFXLNetLMHeadModel"),hOt.forEach(t),Tyr=r(wVe," (XLNet model)"),wVe.forEach(t),Ce.forEach(t),Myr=i(Ql),T(eE.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),dHe=i(f),Sc=n(f,"H2",{class:!0});var TYe=s(Sc);oE=n(TYe,"A",{id:!0,class:!0,href:!0});var pOt=s(oE);eEe=n(pOt,"SPAN",{});var _Ot=s(eEe);T(T$.$$.fragment,_Ot),_Ot.forEach(t),pOt.forEach(t),Eyr=i(TYe),oEe=n(TYe,"SPAN",{});var uOt=s(oEe);Cyr=r(uOt,"TFAutoModelForImageClassification"),uOt.forEach(t),TYe.forEach(t),cHe=i(f),lr=n(f,"DIV",{class:!0});var Ul=s(lr);T(M$.$$.fragment,Ul),wyr=i(Ul),Rc=n(Ul,"P",{});var Wne=s(Rc);Ayr=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oZ=n(Wne,"A",{href:!0});var bOt=s(oZ);Lyr=r(bOt,"from_pretrained()"),bOt.forEach(t),yyr=r(Wne," class method or the "),rZ=n(Wne,"A",{href:!0});var vOt=s(rZ);xyr=r(vOt,"from_config()"),vOt.forEach(t),$yr=r(Wne,` class
method.`),Wne.forEach(t),kyr=i(Ul),E$=n(Ul,"P",{});var MYe=s(E$);Syr=r(MYe,"This class cannot be instantiated directly using "),rEe=n(MYe,"CODE",{});var FOt=s(rEe);Ryr=r(FOt,"__init__()"),FOt.forEach(t),Pyr=r(MYe," (throws an error)."),MYe.forEach(t),Byr=i(Ul),Gt=n(Ul,"DIV",{class:!0});var uA=s(Gt);T(C$.$$.fragment,uA),Iyr=i(uA),tEe=n(uA,"P",{});var TOt=s(tEe);Nyr=r(TOt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),TOt.forEach(t),qyr=i(uA),Pc=n(uA,"P",{});var Qne=s(Pc);jyr=r(Qne,`Note:
Loading a model from its configuration file does `),aEe=n(Qne,"STRONG",{});var MOt=s(aEe);Dyr=r(MOt,"not"),MOt.forEach(t),Gyr=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(Qne,"A",{href:!0});var EOt=s(tZ);Oyr=r(EOt,"from_pretrained()"),EOt.forEach(t),Vyr=r(Qne," to load the model weights."),Qne.forEach(t),Xyr=i(uA),T(rE.$$.fragment,uA),uA.forEach(t),zyr=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(w$.$$.fragment,Hl),Wyr=i(Hl),nEe=n(Hl,"P",{});var COt=s(nEe);Qyr=r(COt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),COt.forEach(t),Uyr=i(Hl),vn=n(Hl,"P",{});var bA=s(vn);Hyr=r(bA,"The model class to instantiate is selected based on the "),sEe=n(bA,"CODE",{});var wOt=s(sEe);Jyr=r(wOt,"model_type"),wOt.forEach(t),Yyr=r(bA,` property of the config object (either
passed as an argument or loaded from `),lEe=n(bA,"CODE",{});var AOt=s(lEe);Kyr=r(AOt,"pretrained_model_name_or_path"),AOt.forEach(t),Zyr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=n(bA,"CODE",{});var LOt=s(iEe);exr=r(LOt,"pretrained_model_name_or_path"),LOt.forEach(t),oxr=r(bA,":"),bA.forEach(t),rxr=i(Hl),Be=n(Hl,"UL",{});var Qe=s(Be);tE=n(Qe,"LI",{});var AVe=s(tE);dEe=n(AVe,"STRONG",{});var yOt=s(dEe);txr=r(yOt,"convnext"),yOt.forEach(t),axr=r(AVe," \u2014 "),aZ=n(AVe,"A",{href:!0});var xOt=s(aZ);nxr=r(xOt,"TFConvNextForImageClassification"),xOt.forEach(t),sxr=r(AVe," (ConvNeXT model)"),AVe.forEach(t),lxr=i(Qe),aE=n(Qe,"LI",{});var LVe=s(aE);cEe=n(LVe,"STRONG",{});var $Ot=s(cEe);ixr=r($Ot,"cvt"),$Ot.forEach(t),dxr=r(LVe," \u2014 "),nZ=n(LVe,"A",{href:!0});var kOt=s(nZ);cxr=r(kOt,"TFCvtForImageClassification"),kOt.forEach(t),fxr=r(LVe," (CvT model)"),LVe.forEach(t),mxr=i(Qe),nE=n(Qe,"LI",{});var yVe=s(nE);fEe=n(yVe,"STRONG",{});var SOt=s(fEe);gxr=r(SOt,"data2vec-vision"),SOt.forEach(t),hxr=r(yVe," \u2014 "),sZ=n(yVe,"A",{href:!0});var ROt=s(sZ);pxr=r(ROt,"TFData2VecVisionForImageClassification"),ROt.forEach(t),_xr=r(yVe," (Data2VecVision model)"),yVe.forEach(t),uxr=i(Qe),dl=n(Qe,"LI",{});var aP=s(dl);mEe=n(aP,"STRONG",{});var POt=s(mEe);bxr=r(POt,"deit"),POt.forEach(t),vxr=r(aP," \u2014 "),lZ=n(aP,"A",{href:!0});var BOt=s(lZ);Fxr=r(BOt,"TFDeiTForImageClassification"),BOt.forEach(t),Txr=r(aP," or "),iZ=n(aP,"A",{href:!0});var IOt=s(iZ);Mxr=r(IOt,"TFDeiTForImageClassificationWithTeacher"),IOt.forEach(t),Exr=r(aP," (DeiT model)"),aP.forEach(t),Cxr=i(Qe),sE=n(Qe,"LI",{});var xVe=s(sE);gEe=n(xVe,"STRONG",{});var NOt=s(gEe);wxr=r(NOt,"regnet"),NOt.forEach(t),Axr=r(xVe," \u2014 "),dZ=n(xVe,"A",{href:!0});var qOt=s(dZ);Lxr=r(qOt,"TFRegNetForImageClassification"),qOt.forEach(t),yxr=r(xVe," (RegNet model)"),xVe.forEach(t),xxr=i(Qe),lE=n(Qe,"LI",{});var $Ve=s(lE);hEe=n($Ve,"STRONG",{});var jOt=s(hEe);$xr=r(jOt,"resnet"),jOt.forEach(t),kxr=r($Ve," \u2014 "),cZ=n($Ve,"A",{href:!0});var DOt=s(cZ);Sxr=r(DOt,"TFResNetForImageClassification"),DOt.forEach(t),Rxr=r($Ve," (ResNet model)"),$Ve.forEach(t),Pxr=i(Qe),iE=n(Qe,"LI",{});var kVe=s(iE);pEe=n(kVe,"STRONG",{});var GOt=s(pEe);Bxr=r(GOt,"segformer"),GOt.forEach(t),Ixr=r(kVe," \u2014 "),fZ=n(kVe,"A",{href:!0});var OOt=s(fZ);Nxr=r(OOt,"TFSegformerForImageClassification"),OOt.forEach(t),qxr=r(kVe," (SegFormer model)"),kVe.forEach(t),jxr=i(Qe),dE=n(Qe,"LI",{});var SVe=s(dE);_Ee=n(SVe,"STRONG",{});var VOt=s(_Ee);Dxr=r(VOt,"swin"),VOt.forEach(t),Gxr=r(SVe," \u2014 "),mZ=n(SVe,"A",{href:!0});var XOt=s(mZ);Oxr=r(XOt,"TFSwinForImageClassification"),XOt.forEach(t),Vxr=r(SVe," (Swin Transformer model)"),SVe.forEach(t),Xxr=i(Qe),cE=n(Qe,"LI",{});var RVe=s(cE);uEe=n(RVe,"STRONG",{});var zOt=s(uEe);zxr=r(zOt,"vit"),zOt.forEach(t),Wxr=r(RVe," \u2014 "),gZ=n(RVe,"A",{href:!0});var WOt=s(gZ);Qxr=r(WOt,"TFViTForImageClassification"),WOt.forEach(t),Uxr=r(RVe," (ViT model)"),RVe.forEach(t),Qe.forEach(t),Hxr=i(Hl),T(fE.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),fHe=i(f),Bc=n(f,"H2",{class:!0});var EYe=s(Bc);mE=n(EYe,"A",{id:!0,class:!0,href:!0});var QOt=s(mE);bEe=n(QOt,"SPAN",{});var UOt=s(bEe);T(A$.$$.fragment,UOt),UOt.forEach(t),QOt.forEach(t),Jxr=i(EYe),vEe=n(EYe,"SPAN",{});var HOt=s(vEe);Yxr=r(HOt,"TFAutoModelForSemanticSegmentation"),HOt.forEach(t),EYe.forEach(t),mHe=i(f),ir=n(f,"DIV",{class:!0});var Jl=s(ir);T(L$.$$.fragment,Jl),Kxr=i(Jl),Ic=n(Jl,"P",{});var Une=s(Ic);Zxr=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hZ=n(Une,"A",{href:!0});var JOt=s(hZ);e$r=r(JOt,"from_pretrained()"),JOt.forEach(t),o$r=r(Une," class method or the "),pZ=n(Une,"A",{href:!0});var YOt=s(pZ);r$r=r(YOt,"from_config()"),YOt.forEach(t),t$r=r(Une,` class
method.`),Une.forEach(t),a$r=i(Jl),y$=n(Jl,"P",{});var CYe=s(y$);n$r=r(CYe,"This class cannot be instantiated directly using "),FEe=n(CYe,"CODE",{});var KOt=s(FEe);s$r=r(KOt,"__init__()"),KOt.forEach(t),l$r=r(CYe," (throws an error)."),CYe.forEach(t),i$r=i(Jl),Ot=n(Jl,"DIV",{class:!0});var vA=s(Ot);T(x$.$$.fragment,vA),d$r=i(vA),TEe=n(vA,"P",{});var ZOt=s(TEe);c$r=r(ZOt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ZOt.forEach(t),f$r=i(vA),Nc=n(vA,"P",{});var Hne=s(Nc);m$r=r(Hne,`Note:
Loading a model from its configuration file does `),MEe=n(Hne,"STRONG",{});var eVt=s(MEe);g$r=r(eVt,"not"),eVt.forEach(t),h$r=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(Hne,"A",{href:!0});var oVt=s(_Z);p$r=r(oVt,"from_pretrained()"),oVt.forEach(t),_$r=r(Hne," to load the model weights."),Hne.forEach(t),u$r=i(vA),T(gE.$$.fragment,vA),vA.forEach(t),b$r=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T($$.$$.fragment,Yl),v$r=i(Yl),EEe=n(Yl,"P",{});var rVt=s(EEe);F$r=r(rVt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rVt.forEach(t),T$r=i(Yl),Fn=n(Yl,"P",{});var FA=s(Fn);M$r=r(FA,"The model class to instantiate is selected based on the "),CEe=n(FA,"CODE",{});var tVt=s(CEe);E$r=r(tVt,"model_type"),tVt.forEach(t),C$r=r(FA,` property of the config object (either
passed as an argument or loaded from `),wEe=n(FA,"CODE",{});var aVt=s(wEe);w$r=r(aVt,"pretrained_model_name_or_path"),aVt.forEach(t),A$r=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=n(FA,"CODE",{});var nVt=s(AEe);L$r=r(nVt,"pretrained_model_name_or_path"),nVt.forEach(t),y$r=r(FA,":"),FA.forEach(t),x$r=i(Yl),k$=n(Yl,"UL",{});var wYe=s(k$);hE=n(wYe,"LI",{});var PVe=s(hE);LEe=n(PVe,"STRONG",{});var sVt=s(LEe);$$r=r(sVt,"data2vec-vision"),sVt.forEach(t),k$r=r(PVe," \u2014 "),uZ=n(PVe,"A",{href:!0});var lVt=s(uZ);S$r=r(lVt,"TFData2VecVisionForSemanticSegmentation"),lVt.forEach(t),R$r=r(PVe," (Data2VecVision model)"),PVe.forEach(t),P$r=i(wYe),pE=n(wYe,"LI",{});var BVe=s(pE);yEe=n(BVe,"STRONG",{});var iVt=s(yEe);B$r=r(iVt,"segformer"),iVt.forEach(t),I$r=r(BVe," \u2014 "),bZ=n(BVe,"A",{href:!0});var dVt=s(bZ);N$r=r(dVt,"TFSegformerForSemanticSegmentation"),dVt.forEach(t),q$r=r(BVe," (SegFormer model)"),BVe.forEach(t),wYe.forEach(t),j$r=i(Yl),T(_E.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),gHe=i(f),qc=n(f,"H2",{class:!0});var AYe=s(qc);uE=n(AYe,"A",{id:!0,class:!0,href:!0});var cVt=s(uE);xEe=n(cVt,"SPAN",{});var fVt=s(xEe);T(S$.$$.fragment,fVt),fVt.forEach(t),cVt.forEach(t),D$r=i(AYe),$Ee=n(AYe,"SPAN",{});var mVt=s($Ee);G$r=r(mVt,"TFAutoModelForMaskedLM"),mVt.forEach(t),AYe.forEach(t),hHe=i(f),dr=n(f,"DIV",{class:!0});var Kl=s(dr);T(R$.$$.fragment,Kl),O$r=i(Kl),jc=n(Kl,"P",{});var Jne=s(jc);V$r=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vZ=n(Jne,"A",{href:!0});var gVt=s(vZ);X$r=r(gVt,"from_pretrained()"),gVt.forEach(t),z$r=r(Jne," class method or the "),FZ=n(Jne,"A",{href:!0});var hVt=s(FZ);W$r=r(hVt,"from_config()"),hVt.forEach(t),Q$r=r(Jne,` class
method.`),Jne.forEach(t),U$r=i(Kl),P$=n(Kl,"P",{});var LYe=s(P$);H$r=r(LYe,"This class cannot be instantiated directly using "),kEe=n(LYe,"CODE",{});var pVt=s(kEe);J$r=r(pVt,"__init__()"),pVt.forEach(t),Y$r=r(LYe," (throws an error)."),LYe.forEach(t),K$r=i(Kl),Vt=n(Kl,"DIV",{class:!0});var TA=s(Vt);T(B$.$$.fragment,TA),Z$r=i(TA),SEe=n(TA,"P",{});var _Vt=s(SEe);ekr=r(_Vt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Vt.forEach(t),okr=i(TA),Dc=n(TA,"P",{});var Yne=s(Dc);rkr=r(Yne,`Note:
Loading a model from its configuration file does `),REe=n(Yne,"STRONG",{});var uVt=s(REe);tkr=r(uVt,"not"),uVt.forEach(t),akr=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(Yne,"A",{href:!0});var bVt=s(TZ);nkr=r(bVt,"from_pretrained()"),bVt.forEach(t),skr=r(Yne," to load the model weights."),Yne.forEach(t),lkr=i(TA),T(bE.$$.fragment,TA),TA.forEach(t),ikr=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T(I$.$$.fragment,Zl),dkr=i(Zl),PEe=n(Zl,"P",{});var vVt=s(PEe);ckr=r(vVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vVt.forEach(t),fkr=i(Zl),Tn=n(Zl,"P",{});var MA=s(Tn);mkr=r(MA,"The model class to instantiate is selected based on the "),BEe=n(MA,"CODE",{});var FVt=s(BEe);gkr=r(FVt,"model_type"),FVt.forEach(t),hkr=r(MA,` property of the config object (either
passed as an argument or loaded from `),IEe=n(MA,"CODE",{});var TVt=s(IEe);pkr=r(TVt,"pretrained_model_name_or_path"),TVt.forEach(t),_kr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NEe=n(MA,"CODE",{});var MVt=s(NEe);ukr=r(MVt,"pretrained_model_name_or_path"),MVt.forEach(t),bkr=r(MA,":"),MA.forEach(t),vkr=i(Zl),de=n(Zl,"UL",{});var he=s(de);vE=n(he,"LI",{});var IVe=s(vE);qEe=n(IVe,"STRONG",{});var EVt=s(qEe);Fkr=r(EVt,"albert"),EVt.forEach(t),Tkr=r(IVe," \u2014 "),MZ=n(IVe,"A",{href:!0});var CVt=s(MZ);Mkr=r(CVt,"TFAlbertForMaskedLM"),CVt.forEach(t),Ekr=r(IVe," (ALBERT model)"),IVe.forEach(t),Ckr=i(he),FE=n(he,"LI",{});var NVe=s(FE);jEe=n(NVe,"STRONG",{});var wVt=s(jEe);wkr=r(wVt,"bert"),wVt.forEach(t),Akr=r(NVe," \u2014 "),EZ=n(NVe,"A",{href:!0});var AVt=s(EZ);Lkr=r(AVt,"TFBertForMaskedLM"),AVt.forEach(t),ykr=r(NVe," (BERT model)"),NVe.forEach(t),xkr=i(he),TE=n(he,"LI",{});var qVe=s(TE);DEe=n(qVe,"STRONG",{});var LVt=s(DEe);$kr=r(LVt,"camembert"),LVt.forEach(t),kkr=r(qVe," \u2014 "),CZ=n(qVe,"A",{href:!0});var yVt=s(CZ);Skr=r(yVt,"TFCamembertForMaskedLM"),yVt.forEach(t),Rkr=r(qVe," (CamemBERT model)"),qVe.forEach(t),Pkr=i(he),ME=n(he,"LI",{});var jVe=s(ME);GEe=n(jVe,"STRONG",{});var xVt=s(GEe);Bkr=r(xVt,"convbert"),xVt.forEach(t),Ikr=r(jVe," \u2014 "),wZ=n(jVe,"A",{href:!0});var $Vt=s(wZ);Nkr=r($Vt,"TFConvBertForMaskedLM"),$Vt.forEach(t),qkr=r(jVe," (ConvBERT model)"),jVe.forEach(t),jkr=i(he),EE=n(he,"LI",{});var DVe=s(EE);OEe=n(DVe,"STRONG",{});var kVt=s(OEe);Dkr=r(kVt,"deberta"),kVt.forEach(t),Gkr=r(DVe," \u2014 "),AZ=n(DVe,"A",{href:!0});var SVt=s(AZ);Okr=r(SVt,"TFDebertaForMaskedLM"),SVt.forEach(t),Vkr=r(DVe," (DeBERTa model)"),DVe.forEach(t),Xkr=i(he),CE=n(he,"LI",{});var GVe=s(CE);VEe=n(GVe,"STRONG",{});var RVt=s(VEe);zkr=r(RVt,"deberta-v2"),RVt.forEach(t),Wkr=r(GVe," \u2014 "),LZ=n(GVe,"A",{href:!0});var PVt=s(LZ);Qkr=r(PVt,"TFDebertaV2ForMaskedLM"),PVt.forEach(t),Ukr=r(GVe," (DeBERTa-v2 model)"),GVe.forEach(t),Hkr=i(he),wE=n(he,"LI",{});var OVe=s(wE);XEe=n(OVe,"STRONG",{});var BVt=s(XEe);Jkr=r(BVt,"distilbert"),BVt.forEach(t),Ykr=r(OVe," \u2014 "),yZ=n(OVe,"A",{href:!0});var IVt=s(yZ);Kkr=r(IVt,"TFDistilBertForMaskedLM"),IVt.forEach(t),Zkr=r(OVe," (DistilBERT model)"),OVe.forEach(t),eSr=i(he),AE=n(he,"LI",{});var VVe=s(AE);zEe=n(VVe,"STRONG",{});var NVt=s(zEe);oSr=r(NVt,"electra"),NVt.forEach(t),rSr=r(VVe," \u2014 "),xZ=n(VVe,"A",{href:!0});var qVt=s(xZ);tSr=r(qVt,"TFElectraForMaskedLM"),qVt.forEach(t),aSr=r(VVe," (ELECTRA model)"),VVe.forEach(t),nSr=i(he),LE=n(he,"LI",{});var XVe=s(LE);WEe=n(XVe,"STRONG",{});var jVt=s(WEe);sSr=r(jVt,"flaubert"),jVt.forEach(t),lSr=r(XVe," \u2014 "),$Z=n(XVe,"A",{href:!0});var DVt=s($Z);iSr=r(DVt,"TFFlaubertWithLMHeadModel"),DVt.forEach(t),dSr=r(XVe," (FlauBERT model)"),XVe.forEach(t),cSr=i(he),yE=n(he,"LI",{});var zVe=s(yE);QEe=n(zVe,"STRONG",{});var GVt=s(QEe);fSr=r(GVt,"funnel"),GVt.forEach(t),mSr=r(zVe," \u2014 "),kZ=n(zVe,"A",{href:!0});var OVt=s(kZ);gSr=r(OVt,"TFFunnelForMaskedLM"),OVt.forEach(t),hSr=r(zVe," (Funnel Transformer model)"),zVe.forEach(t),pSr=i(he),xE=n(he,"LI",{});var WVe=s(xE);UEe=n(WVe,"STRONG",{});var VVt=s(UEe);_Sr=r(VVt,"layoutlm"),VVt.forEach(t),uSr=r(WVe," \u2014 "),SZ=n(WVe,"A",{href:!0});var XVt=s(SZ);bSr=r(XVt,"TFLayoutLMForMaskedLM"),XVt.forEach(t),vSr=r(WVe," (LayoutLM model)"),WVe.forEach(t),FSr=i(he),$E=n(he,"LI",{});var QVe=s($E);HEe=n(QVe,"STRONG",{});var zVt=s(HEe);TSr=r(zVt,"longformer"),zVt.forEach(t),MSr=r(QVe," \u2014 "),RZ=n(QVe,"A",{href:!0});var WVt=s(RZ);ESr=r(WVt,"TFLongformerForMaskedLM"),WVt.forEach(t),CSr=r(QVe," (Longformer model)"),QVe.forEach(t),wSr=i(he),kE=n(he,"LI",{});var UVe=s(kE);JEe=n(UVe,"STRONG",{});var QVt=s(JEe);ASr=r(QVt,"mobilebert"),QVt.forEach(t),LSr=r(UVe," \u2014 "),PZ=n(UVe,"A",{href:!0});var UVt=s(PZ);ySr=r(UVt,"TFMobileBertForMaskedLM"),UVt.forEach(t),xSr=r(UVe," (MobileBERT model)"),UVe.forEach(t),$Sr=i(he),SE=n(he,"LI",{});var HVe=s(SE);YEe=n(HVe,"STRONG",{});var HVt=s(YEe);kSr=r(HVt,"mpnet"),HVt.forEach(t),SSr=r(HVe," \u2014 "),BZ=n(HVe,"A",{href:!0});var JVt=s(BZ);RSr=r(JVt,"TFMPNetForMaskedLM"),JVt.forEach(t),PSr=r(HVe," (MPNet model)"),HVe.forEach(t),BSr=i(he),RE=n(he,"LI",{});var JVe=s(RE);KEe=n(JVe,"STRONG",{});var YVt=s(KEe);ISr=r(YVt,"rembert"),YVt.forEach(t),NSr=r(JVe," \u2014 "),IZ=n(JVe,"A",{href:!0});var KVt=s(IZ);qSr=r(KVt,"TFRemBertForMaskedLM"),KVt.forEach(t),jSr=r(JVe," (RemBERT model)"),JVe.forEach(t),DSr=i(he),PE=n(he,"LI",{});var YVe=s(PE);ZEe=n(YVe,"STRONG",{});var ZVt=s(ZEe);GSr=r(ZVt,"roberta"),ZVt.forEach(t),OSr=r(YVe," \u2014 "),NZ=n(YVe,"A",{href:!0});var eXt=s(NZ);VSr=r(eXt,"TFRobertaForMaskedLM"),eXt.forEach(t),XSr=r(YVe," (RoBERTa model)"),YVe.forEach(t),zSr=i(he),BE=n(he,"LI",{});var KVe=s(BE);e4e=n(KVe,"STRONG",{});var oXt=s(e4e);WSr=r(oXt,"roformer"),oXt.forEach(t),QSr=r(KVe," \u2014 "),qZ=n(KVe,"A",{href:!0});var rXt=s(qZ);USr=r(rXt,"TFRoFormerForMaskedLM"),rXt.forEach(t),HSr=r(KVe," (RoFormer model)"),KVe.forEach(t),JSr=i(he),IE=n(he,"LI",{});var ZVe=s(IE);o4e=n(ZVe,"STRONG",{});var tXt=s(o4e);YSr=r(tXt,"tapas"),tXt.forEach(t),KSr=r(ZVe," \u2014 "),jZ=n(ZVe,"A",{href:!0});var aXt=s(jZ);ZSr=r(aXt,"TFTapasForMaskedLM"),aXt.forEach(t),eRr=r(ZVe," (TAPAS model)"),ZVe.forEach(t),oRr=i(he),NE=n(he,"LI",{});var eXe=s(NE);r4e=n(eXe,"STRONG",{});var nXt=s(r4e);rRr=r(nXt,"xlm"),nXt.forEach(t),tRr=r(eXe," \u2014 "),DZ=n(eXe,"A",{href:!0});var sXt=s(DZ);aRr=r(sXt,"TFXLMWithLMHeadModel"),sXt.forEach(t),nRr=r(eXe," (XLM model)"),eXe.forEach(t),sRr=i(he),qE=n(he,"LI",{});var oXe=s(qE);t4e=n(oXe,"STRONG",{});var lXt=s(t4e);lRr=r(lXt,"xlm-roberta"),lXt.forEach(t),iRr=r(oXe," \u2014 "),GZ=n(oXe,"A",{href:!0});var iXt=s(GZ);dRr=r(iXt,"TFXLMRobertaForMaskedLM"),iXt.forEach(t),cRr=r(oXe," (XLM-RoBERTa model)"),oXe.forEach(t),he.forEach(t),fRr=i(Zl),T(jE.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),pHe=i(f),Gc=n(f,"H2",{class:!0});var yYe=s(Gc);DE=n(yYe,"A",{id:!0,class:!0,href:!0});var dXt=s(DE);a4e=n(dXt,"SPAN",{});var cXt=s(a4e);T(N$.$$.fragment,cXt),cXt.forEach(t),dXt.forEach(t),mRr=i(yYe),n4e=n(yYe,"SPAN",{});var fXt=s(n4e);gRr=r(fXt,"TFAutoModelForSeq2SeqLM"),fXt.forEach(t),yYe.forEach(t),_He=i(f),cr=n(f,"DIV",{class:!0});var ei=s(cr);T(q$.$$.fragment,ei),hRr=i(ei),Oc=n(ei,"P",{});var Kne=s(Oc);pRr=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OZ=n(Kne,"A",{href:!0});var mXt=s(OZ);_Rr=r(mXt,"from_pretrained()"),mXt.forEach(t),uRr=r(Kne," class method or the "),VZ=n(Kne,"A",{href:!0});var gXt=s(VZ);bRr=r(gXt,"from_config()"),gXt.forEach(t),vRr=r(Kne,` class
method.`),Kne.forEach(t),FRr=i(ei),j$=n(ei,"P",{});var xYe=s(j$);TRr=r(xYe,"This class cannot be instantiated directly using "),s4e=n(xYe,"CODE",{});var hXt=s(s4e);MRr=r(hXt,"__init__()"),hXt.forEach(t),ERr=r(xYe," (throws an error)."),xYe.forEach(t),CRr=i(ei),Xt=n(ei,"DIV",{class:!0});var EA=s(Xt);T(D$.$$.fragment,EA),wRr=i(EA),l4e=n(EA,"P",{});var pXt=s(l4e);ARr=r(pXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pXt.forEach(t),LRr=i(EA),Vc=n(EA,"P",{});var Zne=s(Vc);yRr=r(Zne,`Note:
Loading a model from its configuration file does `),i4e=n(Zne,"STRONG",{});var _Xt=s(i4e);xRr=r(_Xt,"not"),_Xt.forEach(t),$Rr=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(Zne,"A",{href:!0});var uXt=s(XZ);kRr=r(uXt,"from_pretrained()"),uXt.forEach(t),SRr=r(Zne," to load the model weights."),Zne.forEach(t),RRr=i(EA),T(GE.$$.fragment,EA),EA.forEach(t),PRr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(G$.$$.fragment,oi),BRr=i(oi),d4e=n(oi,"P",{});var bXt=s(d4e);IRr=r(bXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bXt.forEach(t),NRr=i(oi),Mn=n(oi,"P",{});var CA=s(Mn);qRr=r(CA,"The model class to instantiate is selected based on the "),c4e=n(CA,"CODE",{});var vXt=s(c4e);jRr=r(vXt,"model_type"),vXt.forEach(t),DRr=r(CA,` property of the config object (either
passed as an argument or loaded from `),f4e=n(CA,"CODE",{});var FXt=s(f4e);GRr=r(FXt,"pretrained_model_name_or_path"),FXt.forEach(t),ORr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=n(CA,"CODE",{});var TXt=s(m4e);VRr=r(TXt,"pretrained_model_name_or_path"),TXt.forEach(t),XRr=r(CA,":"),CA.forEach(t),zRr=i(oi),ye=n(oi,"UL",{});var Ne=s(ye);OE=n(Ne,"LI",{});var rXe=s(OE);g4e=n(rXe,"STRONG",{});var MXt=s(g4e);WRr=r(MXt,"bart"),MXt.forEach(t),QRr=r(rXe," \u2014 "),zZ=n(rXe,"A",{href:!0});var EXt=s(zZ);URr=r(EXt,"TFBartForConditionalGeneration"),EXt.forEach(t),HRr=r(rXe," (BART model)"),rXe.forEach(t),JRr=i(Ne),VE=n(Ne,"LI",{});var tXe=s(VE);h4e=n(tXe,"STRONG",{});var CXt=s(h4e);YRr=r(CXt,"blenderbot"),CXt.forEach(t),KRr=r(tXe," \u2014 "),WZ=n(tXe,"A",{href:!0});var wXt=s(WZ);ZRr=r(wXt,"TFBlenderbotForConditionalGeneration"),wXt.forEach(t),ePr=r(tXe," (Blenderbot model)"),tXe.forEach(t),oPr=i(Ne),XE=n(Ne,"LI",{});var aXe=s(XE);p4e=n(aXe,"STRONG",{});var AXt=s(p4e);rPr=r(AXt,"blenderbot-small"),AXt.forEach(t),tPr=r(aXe," \u2014 "),QZ=n(aXe,"A",{href:!0});var LXt=s(QZ);aPr=r(LXt,"TFBlenderbotSmallForConditionalGeneration"),LXt.forEach(t),nPr=r(aXe," (BlenderbotSmall model)"),aXe.forEach(t),sPr=i(Ne),zE=n(Ne,"LI",{});var nXe=s(zE);_4e=n(nXe,"STRONG",{});var yXt=s(_4e);lPr=r(yXt,"encoder-decoder"),yXt.forEach(t),iPr=r(nXe," \u2014 "),UZ=n(nXe,"A",{href:!0});var xXt=s(UZ);dPr=r(xXt,"TFEncoderDecoderModel"),xXt.forEach(t),cPr=r(nXe," (Encoder decoder model)"),nXe.forEach(t),fPr=i(Ne),WE=n(Ne,"LI",{});var sXe=s(WE);u4e=n(sXe,"STRONG",{});var $Xt=s(u4e);mPr=r($Xt,"led"),$Xt.forEach(t),gPr=r(sXe," \u2014 "),HZ=n(sXe,"A",{href:!0});var kXt=s(HZ);hPr=r(kXt,"TFLEDForConditionalGeneration"),kXt.forEach(t),pPr=r(sXe," (LED model)"),sXe.forEach(t),_Pr=i(Ne),QE=n(Ne,"LI",{});var lXe=s(QE);b4e=n(lXe,"STRONG",{});var SXt=s(b4e);uPr=r(SXt,"marian"),SXt.forEach(t),bPr=r(lXe," \u2014 "),JZ=n(lXe,"A",{href:!0});var RXt=s(JZ);vPr=r(RXt,"TFMarianMTModel"),RXt.forEach(t),FPr=r(lXe," (Marian model)"),lXe.forEach(t),TPr=i(Ne),UE=n(Ne,"LI",{});var iXe=s(UE);v4e=n(iXe,"STRONG",{});var PXt=s(v4e);MPr=r(PXt,"mbart"),PXt.forEach(t),EPr=r(iXe," \u2014 "),YZ=n(iXe,"A",{href:!0});var BXt=s(YZ);CPr=r(BXt,"TFMBartForConditionalGeneration"),BXt.forEach(t),wPr=r(iXe," (mBART model)"),iXe.forEach(t),APr=i(Ne),HE=n(Ne,"LI",{});var dXe=s(HE);F4e=n(dXe,"STRONG",{});var IXt=s(F4e);LPr=r(IXt,"mt5"),IXt.forEach(t),yPr=r(dXe," \u2014 "),KZ=n(dXe,"A",{href:!0});var NXt=s(KZ);xPr=r(NXt,"TFMT5ForConditionalGeneration"),NXt.forEach(t),$Pr=r(dXe," (MT5 model)"),dXe.forEach(t),kPr=i(Ne),JE=n(Ne,"LI",{});var cXe=s(JE);T4e=n(cXe,"STRONG",{});var qXt=s(T4e);SPr=r(qXt,"pegasus"),qXt.forEach(t),RPr=r(cXe," \u2014 "),ZZ=n(cXe,"A",{href:!0});var jXt=s(ZZ);PPr=r(jXt,"TFPegasusForConditionalGeneration"),jXt.forEach(t),BPr=r(cXe," (Pegasus model)"),cXe.forEach(t),IPr=i(Ne),YE=n(Ne,"LI",{});var fXe=s(YE);M4e=n(fXe,"STRONG",{});var DXt=s(M4e);NPr=r(DXt,"t5"),DXt.forEach(t),qPr=r(fXe," \u2014 "),eee=n(fXe,"A",{href:!0});var GXt=s(eee);jPr=r(GXt,"TFT5ForConditionalGeneration"),GXt.forEach(t),DPr=r(fXe," (T5 model)"),fXe.forEach(t),Ne.forEach(t),GPr=i(oi),T(KE.$$.fragment,oi),oi.forEach(t),ei.forEach(t),uHe=i(f),Xc=n(f,"H2",{class:!0});var $Ye=s(Xc);ZE=n($Ye,"A",{id:!0,class:!0,href:!0});var OXt=s(ZE);E4e=n(OXt,"SPAN",{});var VXt=s(E4e);T(O$.$$.fragment,VXt),VXt.forEach(t),OXt.forEach(t),OPr=i($Ye),C4e=n($Ye,"SPAN",{});var XXt=s(C4e);VPr=r(XXt,"TFAutoModelForSequenceClassification"),XXt.forEach(t),$Ye.forEach(t),bHe=i(f),fr=n(f,"DIV",{class:!0});var ri=s(fr);T(V$.$$.fragment,ri),XPr=i(ri),zc=n(ri,"P",{});var ese=s(zc);zPr=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oee=n(ese,"A",{href:!0});var zXt=s(oee);WPr=r(zXt,"from_pretrained()"),zXt.forEach(t),QPr=r(ese," class method or the "),ree=n(ese,"A",{href:!0});var WXt=s(ree);UPr=r(WXt,"from_config()"),WXt.forEach(t),HPr=r(ese,` class
method.`),ese.forEach(t),JPr=i(ri),X$=n(ri,"P",{});var kYe=s(X$);YPr=r(kYe,"This class cannot be instantiated directly using "),w4e=n(kYe,"CODE",{});var QXt=s(w4e);KPr=r(QXt,"__init__()"),QXt.forEach(t),ZPr=r(kYe," (throws an error)."),kYe.forEach(t),eBr=i(ri),zt=n(ri,"DIV",{class:!0});var wA=s(zt);T(z$.$$.fragment,wA),oBr=i(wA),A4e=n(wA,"P",{});var UXt=s(A4e);rBr=r(UXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UXt.forEach(t),tBr=i(wA),Wc=n(wA,"P",{});var ose=s(Wc);aBr=r(ose,`Note:
Loading a model from its configuration file does `),L4e=n(ose,"STRONG",{});var HXt=s(L4e);nBr=r(HXt,"not"),HXt.forEach(t),sBr=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),tee=n(ose,"A",{href:!0});var JXt=s(tee);lBr=r(JXt,"from_pretrained()"),JXt.forEach(t),iBr=r(ose," to load the model weights."),ose.forEach(t),dBr=i(wA),T(e4.$$.fragment,wA),wA.forEach(t),cBr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(W$.$$.fragment,ti),fBr=i(ti),y4e=n(ti,"P",{});var YXt=s(y4e);mBr=r(YXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YXt.forEach(t),gBr=i(ti),En=n(ti,"P",{});var AA=s(En);hBr=r(AA,"The model class to instantiate is selected based on the "),x4e=n(AA,"CODE",{});var KXt=s(x4e);pBr=r(KXt,"model_type"),KXt.forEach(t),_Br=r(AA,` property of the config object (either
passed as an argument or loaded from `),$4e=n(AA,"CODE",{});var ZXt=s($4e);uBr=r(ZXt,"pretrained_model_name_or_path"),ZXt.forEach(t),bBr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(AA,"CODE",{});var ezt=s(k4e);vBr=r(ezt,"pretrained_model_name_or_path"),ezt.forEach(t),FBr=r(AA,":"),AA.forEach(t),TBr=i(ti),te=n(ti,"UL",{});var ne=s(te);o4=n(ne,"LI",{});var mXe=s(o4);S4e=n(mXe,"STRONG",{});var ozt=s(S4e);MBr=r(ozt,"albert"),ozt.forEach(t),EBr=r(mXe," \u2014 "),aee=n(mXe,"A",{href:!0});var rzt=s(aee);CBr=r(rzt,"TFAlbertForSequenceClassification"),rzt.forEach(t),wBr=r(mXe," (ALBERT model)"),mXe.forEach(t),ABr=i(ne),r4=n(ne,"LI",{});var gXe=s(r4);R4e=n(gXe,"STRONG",{});var tzt=s(R4e);LBr=r(tzt,"bert"),tzt.forEach(t),yBr=r(gXe," \u2014 "),nee=n(gXe,"A",{href:!0});var azt=s(nee);xBr=r(azt,"TFBertForSequenceClassification"),azt.forEach(t),$Br=r(gXe," (BERT model)"),gXe.forEach(t),kBr=i(ne),t4=n(ne,"LI",{});var hXe=s(t4);P4e=n(hXe,"STRONG",{});var nzt=s(P4e);SBr=r(nzt,"camembert"),nzt.forEach(t),RBr=r(hXe," \u2014 "),see=n(hXe,"A",{href:!0});var szt=s(see);PBr=r(szt,"TFCamembertForSequenceClassification"),szt.forEach(t),BBr=r(hXe," (CamemBERT model)"),hXe.forEach(t),IBr=i(ne),a4=n(ne,"LI",{});var pXe=s(a4);B4e=n(pXe,"STRONG",{});var lzt=s(B4e);NBr=r(lzt,"convbert"),lzt.forEach(t),qBr=r(pXe," \u2014 "),lee=n(pXe,"A",{href:!0});var izt=s(lee);jBr=r(izt,"TFConvBertForSequenceClassification"),izt.forEach(t),DBr=r(pXe," (ConvBERT model)"),pXe.forEach(t),GBr=i(ne),n4=n(ne,"LI",{});var _Xe=s(n4);I4e=n(_Xe,"STRONG",{});var dzt=s(I4e);OBr=r(dzt,"ctrl"),dzt.forEach(t),VBr=r(_Xe," \u2014 "),iee=n(_Xe,"A",{href:!0});var czt=s(iee);XBr=r(czt,"TFCTRLForSequenceClassification"),czt.forEach(t),zBr=r(_Xe," (CTRL model)"),_Xe.forEach(t),WBr=i(ne),s4=n(ne,"LI",{});var uXe=s(s4);N4e=n(uXe,"STRONG",{});var fzt=s(N4e);QBr=r(fzt,"deberta"),fzt.forEach(t),UBr=r(uXe," \u2014 "),dee=n(uXe,"A",{href:!0});var mzt=s(dee);HBr=r(mzt,"TFDebertaForSequenceClassification"),mzt.forEach(t),JBr=r(uXe," (DeBERTa model)"),uXe.forEach(t),YBr=i(ne),l4=n(ne,"LI",{});var bXe=s(l4);q4e=n(bXe,"STRONG",{});var gzt=s(q4e);KBr=r(gzt,"deberta-v2"),gzt.forEach(t),ZBr=r(bXe," \u2014 "),cee=n(bXe,"A",{href:!0});var hzt=s(cee);eIr=r(hzt,"TFDebertaV2ForSequenceClassification"),hzt.forEach(t),oIr=r(bXe," (DeBERTa-v2 model)"),bXe.forEach(t),rIr=i(ne),i4=n(ne,"LI",{});var vXe=s(i4);j4e=n(vXe,"STRONG",{});var pzt=s(j4e);tIr=r(pzt,"distilbert"),pzt.forEach(t),aIr=r(vXe," \u2014 "),fee=n(vXe,"A",{href:!0});var _zt=s(fee);nIr=r(_zt,"TFDistilBertForSequenceClassification"),_zt.forEach(t),sIr=r(vXe," (DistilBERT model)"),vXe.forEach(t),lIr=i(ne),d4=n(ne,"LI",{});var FXe=s(d4);D4e=n(FXe,"STRONG",{});var uzt=s(D4e);iIr=r(uzt,"electra"),uzt.forEach(t),dIr=r(FXe," \u2014 "),mee=n(FXe,"A",{href:!0});var bzt=s(mee);cIr=r(bzt,"TFElectraForSequenceClassification"),bzt.forEach(t),fIr=r(FXe," (ELECTRA model)"),FXe.forEach(t),mIr=i(ne),c4=n(ne,"LI",{});var TXe=s(c4);G4e=n(TXe,"STRONG",{});var vzt=s(G4e);gIr=r(vzt,"flaubert"),vzt.forEach(t),hIr=r(TXe," \u2014 "),gee=n(TXe,"A",{href:!0});var Fzt=s(gee);pIr=r(Fzt,"TFFlaubertForSequenceClassification"),Fzt.forEach(t),_Ir=r(TXe," (FlauBERT model)"),TXe.forEach(t),uIr=i(ne),f4=n(ne,"LI",{});var MXe=s(f4);O4e=n(MXe,"STRONG",{});var Tzt=s(O4e);bIr=r(Tzt,"funnel"),Tzt.forEach(t),vIr=r(MXe," \u2014 "),hee=n(MXe,"A",{href:!0});var Mzt=s(hee);FIr=r(Mzt,"TFFunnelForSequenceClassification"),Mzt.forEach(t),TIr=r(MXe," (Funnel Transformer model)"),MXe.forEach(t),MIr=i(ne),m4=n(ne,"LI",{});var EXe=s(m4);V4e=n(EXe,"STRONG",{});var Ezt=s(V4e);EIr=r(Ezt,"gpt2"),Ezt.forEach(t),CIr=r(EXe," \u2014 "),pee=n(EXe,"A",{href:!0});var Czt=s(pee);wIr=r(Czt,"TFGPT2ForSequenceClassification"),Czt.forEach(t),AIr=r(EXe," (OpenAI GPT-2 model)"),EXe.forEach(t),LIr=i(ne),g4=n(ne,"LI",{});var CXe=s(g4);X4e=n(CXe,"STRONG",{});var wzt=s(X4e);yIr=r(wzt,"gptj"),wzt.forEach(t),xIr=r(CXe," \u2014 "),_ee=n(CXe,"A",{href:!0});var Azt=s(_ee);$Ir=r(Azt,"TFGPTJForSequenceClassification"),Azt.forEach(t),kIr=r(CXe," (GPT-J model)"),CXe.forEach(t),SIr=i(ne),h4=n(ne,"LI",{});var wXe=s(h4);z4e=n(wXe,"STRONG",{});var Lzt=s(z4e);RIr=r(Lzt,"layoutlm"),Lzt.forEach(t),PIr=r(wXe," \u2014 "),uee=n(wXe,"A",{href:!0});var yzt=s(uee);BIr=r(yzt,"TFLayoutLMForSequenceClassification"),yzt.forEach(t),IIr=r(wXe," (LayoutLM model)"),wXe.forEach(t),NIr=i(ne),p4=n(ne,"LI",{});var AXe=s(p4);W4e=n(AXe,"STRONG",{});var xzt=s(W4e);qIr=r(xzt,"longformer"),xzt.forEach(t),jIr=r(AXe," \u2014 "),bee=n(AXe,"A",{href:!0});var $zt=s(bee);DIr=r($zt,"TFLongformerForSequenceClassification"),$zt.forEach(t),GIr=r(AXe," (Longformer model)"),AXe.forEach(t),OIr=i(ne),_4=n(ne,"LI",{});var LXe=s(_4);Q4e=n(LXe,"STRONG",{});var kzt=s(Q4e);VIr=r(kzt,"mobilebert"),kzt.forEach(t),XIr=r(LXe," \u2014 "),vee=n(LXe,"A",{href:!0});var Szt=s(vee);zIr=r(Szt,"TFMobileBertForSequenceClassification"),Szt.forEach(t),WIr=r(LXe," (MobileBERT model)"),LXe.forEach(t),QIr=i(ne),u4=n(ne,"LI",{});var yXe=s(u4);U4e=n(yXe,"STRONG",{});var Rzt=s(U4e);UIr=r(Rzt,"mpnet"),Rzt.forEach(t),HIr=r(yXe," \u2014 "),Fee=n(yXe,"A",{href:!0});var Pzt=s(Fee);JIr=r(Pzt,"TFMPNetForSequenceClassification"),Pzt.forEach(t),YIr=r(yXe," (MPNet model)"),yXe.forEach(t),KIr=i(ne),b4=n(ne,"LI",{});var xXe=s(b4);H4e=n(xXe,"STRONG",{});var Bzt=s(H4e);ZIr=r(Bzt,"openai-gpt"),Bzt.forEach(t),eNr=r(xXe," \u2014 "),Tee=n(xXe,"A",{href:!0});var Izt=s(Tee);oNr=r(Izt,"TFOpenAIGPTForSequenceClassification"),Izt.forEach(t),rNr=r(xXe," (OpenAI GPT model)"),xXe.forEach(t),tNr=i(ne),v4=n(ne,"LI",{});var $Xe=s(v4);J4e=n($Xe,"STRONG",{});var Nzt=s(J4e);aNr=r(Nzt,"rembert"),Nzt.forEach(t),nNr=r($Xe," \u2014 "),Mee=n($Xe,"A",{href:!0});var qzt=s(Mee);sNr=r(qzt,"TFRemBertForSequenceClassification"),qzt.forEach(t),lNr=r($Xe," (RemBERT model)"),$Xe.forEach(t),iNr=i(ne),F4=n(ne,"LI",{});var kXe=s(F4);Y4e=n(kXe,"STRONG",{});var jzt=s(Y4e);dNr=r(jzt,"roberta"),jzt.forEach(t),cNr=r(kXe," \u2014 "),Eee=n(kXe,"A",{href:!0});var Dzt=s(Eee);fNr=r(Dzt,"TFRobertaForSequenceClassification"),Dzt.forEach(t),mNr=r(kXe," (RoBERTa model)"),kXe.forEach(t),gNr=i(ne),T4=n(ne,"LI",{});var SXe=s(T4);K4e=n(SXe,"STRONG",{});var Gzt=s(K4e);hNr=r(Gzt,"roformer"),Gzt.forEach(t),pNr=r(SXe," \u2014 "),Cee=n(SXe,"A",{href:!0});var Ozt=s(Cee);_Nr=r(Ozt,"TFRoFormerForSequenceClassification"),Ozt.forEach(t),uNr=r(SXe," (RoFormer model)"),SXe.forEach(t),bNr=i(ne),M4=n(ne,"LI",{});var RXe=s(M4);Z4e=n(RXe,"STRONG",{});var Vzt=s(Z4e);vNr=r(Vzt,"tapas"),Vzt.forEach(t),FNr=r(RXe," \u2014 "),wee=n(RXe,"A",{href:!0});var Xzt=s(wee);TNr=r(Xzt,"TFTapasForSequenceClassification"),Xzt.forEach(t),MNr=r(RXe," (TAPAS model)"),RXe.forEach(t),ENr=i(ne),E4=n(ne,"LI",{});var PXe=s(E4);eCe=n(PXe,"STRONG",{});var zzt=s(eCe);CNr=r(zzt,"transfo-xl"),zzt.forEach(t),wNr=r(PXe," \u2014 "),Aee=n(PXe,"A",{href:!0});var Wzt=s(Aee);ANr=r(Wzt,"TFTransfoXLForSequenceClassification"),Wzt.forEach(t),LNr=r(PXe," (Transformer-XL model)"),PXe.forEach(t),yNr=i(ne),C4=n(ne,"LI",{});var BXe=s(C4);oCe=n(BXe,"STRONG",{});var Qzt=s(oCe);xNr=r(Qzt,"xlm"),Qzt.forEach(t),$Nr=r(BXe," \u2014 "),Lee=n(BXe,"A",{href:!0});var Uzt=s(Lee);kNr=r(Uzt,"TFXLMForSequenceClassification"),Uzt.forEach(t),SNr=r(BXe," (XLM model)"),BXe.forEach(t),RNr=i(ne),w4=n(ne,"LI",{});var IXe=s(w4);rCe=n(IXe,"STRONG",{});var Hzt=s(rCe);PNr=r(Hzt,"xlm-roberta"),Hzt.forEach(t),BNr=r(IXe," \u2014 "),yee=n(IXe,"A",{href:!0});var Jzt=s(yee);INr=r(Jzt,"TFXLMRobertaForSequenceClassification"),Jzt.forEach(t),NNr=r(IXe," (XLM-RoBERTa model)"),IXe.forEach(t),qNr=i(ne),A4=n(ne,"LI",{});var NXe=s(A4);tCe=n(NXe,"STRONG",{});var Yzt=s(tCe);jNr=r(Yzt,"xlnet"),Yzt.forEach(t),DNr=r(NXe," \u2014 "),xee=n(NXe,"A",{href:!0});var Kzt=s(xee);GNr=r(Kzt,"TFXLNetForSequenceClassification"),Kzt.forEach(t),ONr=r(NXe," (XLNet model)"),NXe.forEach(t),ne.forEach(t),VNr=i(ti),T(L4.$$.fragment,ti),ti.forEach(t),ri.forEach(t),vHe=i(f),Qc=n(f,"H2",{class:!0});var SYe=s(Qc);y4=n(SYe,"A",{id:!0,class:!0,href:!0});var Zzt=s(y4);aCe=n(Zzt,"SPAN",{});var eWt=s(aCe);T(Q$.$$.fragment,eWt),eWt.forEach(t),Zzt.forEach(t),XNr=i(SYe),nCe=n(SYe,"SPAN",{});var oWt=s(nCe);zNr=r(oWt,"TFAutoModelForMultipleChoice"),oWt.forEach(t),SYe.forEach(t),FHe=i(f),mr=n(f,"DIV",{class:!0});var ai=s(mr);T(U$.$$.fragment,ai),WNr=i(ai),Uc=n(ai,"P",{});var rse=s(Uc);QNr=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$ee=n(rse,"A",{href:!0});var rWt=s($ee);UNr=r(rWt,"from_pretrained()"),rWt.forEach(t),HNr=r(rse," class method or the "),kee=n(rse,"A",{href:!0});var tWt=s(kee);JNr=r(tWt,"from_config()"),tWt.forEach(t),YNr=r(rse,` class
method.`),rse.forEach(t),KNr=i(ai),H$=n(ai,"P",{});var RYe=s(H$);ZNr=r(RYe,"This class cannot be instantiated directly using "),sCe=n(RYe,"CODE",{});var aWt=s(sCe);eqr=r(aWt,"__init__()"),aWt.forEach(t),oqr=r(RYe," (throws an error)."),RYe.forEach(t),rqr=i(ai),Wt=n(ai,"DIV",{class:!0});var LA=s(Wt);T(J$.$$.fragment,LA),tqr=i(LA),lCe=n(LA,"P",{});var nWt=s(lCe);aqr=r(nWt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nWt.forEach(t),nqr=i(LA),Hc=n(LA,"P",{});var tse=s(Hc);sqr=r(tse,`Note:
Loading a model from its configuration file does `),iCe=n(tse,"STRONG",{});var sWt=s(iCe);lqr=r(sWt,"not"),sWt.forEach(t),iqr=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(tse,"A",{href:!0});var lWt=s(See);dqr=r(lWt,"from_pretrained()"),lWt.forEach(t),cqr=r(tse," to load the model weights."),tse.forEach(t),fqr=i(LA),T(x4.$$.fragment,LA),LA.forEach(t),mqr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(Y$.$$.fragment,ni),gqr=i(ni),dCe=n(ni,"P",{});var iWt=s(dCe);hqr=r(iWt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iWt.forEach(t),pqr=i(ni),Cn=n(ni,"P",{});var yA=s(Cn);_qr=r(yA,"The model class to instantiate is selected based on the "),cCe=n(yA,"CODE",{});var dWt=s(cCe);uqr=r(dWt,"model_type"),dWt.forEach(t),bqr=r(yA,` property of the config object (either
passed as an argument or loaded from `),fCe=n(yA,"CODE",{});var cWt=s(fCe);vqr=r(cWt,"pretrained_model_name_or_path"),cWt.forEach(t),Fqr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=n(yA,"CODE",{});var fWt=s(mCe);Tqr=r(fWt,"pretrained_model_name_or_path"),fWt.forEach(t),Mqr=r(yA,":"),yA.forEach(t),Eqr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);$4=n(Te,"LI",{});var qXe=s($4);gCe=n(qXe,"STRONG",{});var mWt=s(gCe);Cqr=r(mWt,"albert"),mWt.forEach(t),wqr=r(qXe," \u2014 "),Ree=n(qXe,"A",{href:!0});var gWt=s(Ree);Aqr=r(gWt,"TFAlbertForMultipleChoice"),gWt.forEach(t),Lqr=r(qXe," (ALBERT model)"),qXe.forEach(t),yqr=i(Te),k4=n(Te,"LI",{});var jXe=s(k4);hCe=n(jXe,"STRONG",{});var hWt=s(hCe);xqr=r(hWt,"bert"),hWt.forEach(t),$qr=r(jXe," \u2014 "),Pee=n(jXe,"A",{href:!0});var pWt=s(Pee);kqr=r(pWt,"TFBertForMultipleChoice"),pWt.forEach(t),Sqr=r(jXe," (BERT model)"),jXe.forEach(t),Rqr=i(Te),S4=n(Te,"LI",{});var DXe=s(S4);pCe=n(DXe,"STRONG",{});var _Wt=s(pCe);Pqr=r(_Wt,"camembert"),_Wt.forEach(t),Bqr=r(DXe," \u2014 "),Bee=n(DXe,"A",{href:!0});var uWt=s(Bee);Iqr=r(uWt,"TFCamembertForMultipleChoice"),uWt.forEach(t),Nqr=r(DXe," (CamemBERT model)"),DXe.forEach(t),qqr=i(Te),R4=n(Te,"LI",{});var GXe=s(R4);_Ce=n(GXe,"STRONG",{});var bWt=s(_Ce);jqr=r(bWt,"convbert"),bWt.forEach(t),Dqr=r(GXe," \u2014 "),Iee=n(GXe,"A",{href:!0});var vWt=s(Iee);Gqr=r(vWt,"TFConvBertForMultipleChoice"),vWt.forEach(t),Oqr=r(GXe," (ConvBERT model)"),GXe.forEach(t),Vqr=i(Te),P4=n(Te,"LI",{});var OXe=s(P4);uCe=n(OXe,"STRONG",{});var FWt=s(uCe);Xqr=r(FWt,"distilbert"),FWt.forEach(t),zqr=r(OXe," \u2014 "),Nee=n(OXe,"A",{href:!0});var TWt=s(Nee);Wqr=r(TWt,"TFDistilBertForMultipleChoice"),TWt.forEach(t),Qqr=r(OXe," (DistilBERT model)"),OXe.forEach(t),Uqr=i(Te),B4=n(Te,"LI",{});var VXe=s(B4);bCe=n(VXe,"STRONG",{});var MWt=s(bCe);Hqr=r(MWt,"electra"),MWt.forEach(t),Jqr=r(VXe," \u2014 "),qee=n(VXe,"A",{href:!0});var EWt=s(qee);Yqr=r(EWt,"TFElectraForMultipleChoice"),EWt.forEach(t),Kqr=r(VXe," (ELECTRA model)"),VXe.forEach(t),Zqr=i(Te),I4=n(Te,"LI",{});var XXe=s(I4);vCe=n(XXe,"STRONG",{});var CWt=s(vCe);ejr=r(CWt,"flaubert"),CWt.forEach(t),ojr=r(XXe," \u2014 "),jee=n(XXe,"A",{href:!0});var wWt=s(jee);rjr=r(wWt,"TFFlaubertForMultipleChoice"),wWt.forEach(t),tjr=r(XXe," (FlauBERT model)"),XXe.forEach(t),ajr=i(Te),N4=n(Te,"LI",{});var zXe=s(N4);FCe=n(zXe,"STRONG",{});var AWt=s(FCe);njr=r(AWt,"funnel"),AWt.forEach(t),sjr=r(zXe," \u2014 "),Dee=n(zXe,"A",{href:!0});var LWt=s(Dee);ljr=r(LWt,"TFFunnelForMultipleChoice"),LWt.forEach(t),ijr=r(zXe," (Funnel Transformer model)"),zXe.forEach(t),djr=i(Te),q4=n(Te,"LI",{});var WXe=s(q4);TCe=n(WXe,"STRONG",{});var yWt=s(TCe);cjr=r(yWt,"longformer"),yWt.forEach(t),fjr=r(WXe," \u2014 "),Gee=n(WXe,"A",{href:!0});var xWt=s(Gee);mjr=r(xWt,"TFLongformerForMultipleChoice"),xWt.forEach(t),gjr=r(WXe," (Longformer model)"),WXe.forEach(t),hjr=i(Te),j4=n(Te,"LI",{});var QXe=s(j4);MCe=n(QXe,"STRONG",{});var $Wt=s(MCe);pjr=r($Wt,"mobilebert"),$Wt.forEach(t),_jr=r(QXe," \u2014 "),Oee=n(QXe,"A",{href:!0});var kWt=s(Oee);ujr=r(kWt,"TFMobileBertForMultipleChoice"),kWt.forEach(t),bjr=r(QXe," (MobileBERT model)"),QXe.forEach(t),vjr=i(Te),D4=n(Te,"LI",{});var UXe=s(D4);ECe=n(UXe,"STRONG",{});var SWt=s(ECe);Fjr=r(SWt,"mpnet"),SWt.forEach(t),Tjr=r(UXe," \u2014 "),Vee=n(UXe,"A",{href:!0});var RWt=s(Vee);Mjr=r(RWt,"TFMPNetForMultipleChoice"),RWt.forEach(t),Ejr=r(UXe," (MPNet model)"),UXe.forEach(t),Cjr=i(Te),G4=n(Te,"LI",{});var HXe=s(G4);CCe=n(HXe,"STRONG",{});var PWt=s(CCe);wjr=r(PWt,"rembert"),PWt.forEach(t),Ajr=r(HXe," \u2014 "),Xee=n(HXe,"A",{href:!0});var BWt=s(Xee);Ljr=r(BWt,"TFRemBertForMultipleChoice"),BWt.forEach(t),yjr=r(HXe," (RemBERT model)"),HXe.forEach(t),xjr=i(Te),O4=n(Te,"LI",{});var JXe=s(O4);wCe=n(JXe,"STRONG",{});var IWt=s(wCe);$jr=r(IWt,"roberta"),IWt.forEach(t),kjr=r(JXe," \u2014 "),zee=n(JXe,"A",{href:!0});var NWt=s(zee);Sjr=r(NWt,"TFRobertaForMultipleChoice"),NWt.forEach(t),Rjr=r(JXe," (RoBERTa model)"),JXe.forEach(t),Pjr=i(Te),V4=n(Te,"LI",{});var YXe=s(V4);ACe=n(YXe,"STRONG",{});var qWt=s(ACe);Bjr=r(qWt,"roformer"),qWt.forEach(t),Ijr=r(YXe," \u2014 "),Wee=n(YXe,"A",{href:!0});var jWt=s(Wee);Njr=r(jWt,"TFRoFormerForMultipleChoice"),jWt.forEach(t),qjr=r(YXe," (RoFormer model)"),YXe.forEach(t),jjr=i(Te),X4=n(Te,"LI",{});var KXe=s(X4);LCe=n(KXe,"STRONG",{});var DWt=s(LCe);Djr=r(DWt,"xlm"),DWt.forEach(t),Gjr=r(KXe," \u2014 "),Qee=n(KXe,"A",{href:!0});var GWt=s(Qee);Ojr=r(GWt,"TFXLMForMultipleChoice"),GWt.forEach(t),Vjr=r(KXe," (XLM model)"),KXe.forEach(t),Xjr=i(Te),z4=n(Te,"LI",{});var ZXe=s(z4);yCe=n(ZXe,"STRONG",{});var OWt=s(yCe);zjr=r(OWt,"xlm-roberta"),OWt.forEach(t),Wjr=r(ZXe," \u2014 "),Uee=n(ZXe,"A",{href:!0});var VWt=s(Uee);Qjr=r(VWt,"TFXLMRobertaForMultipleChoice"),VWt.forEach(t),Ujr=r(ZXe," (XLM-RoBERTa model)"),ZXe.forEach(t),Hjr=i(Te),W4=n(Te,"LI",{});var eze=s(W4);xCe=n(eze,"STRONG",{});var XWt=s(xCe);Jjr=r(XWt,"xlnet"),XWt.forEach(t),Yjr=r(eze," \u2014 "),Hee=n(eze,"A",{href:!0});var zWt=s(Hee);Kjr=r(zWt,"TFXLNetForMultipleChoice"),zWt.forEach(t),Zjr=r(eze," (XLNet model)"),eze.forEach(t),Te.forEach(t),eDr=i(ni),T(Q4.$$.fragment,ni),ni.forEach(t),ai.forEach(t),THe=i(f),Jc=n(f,"H2",{class:!0});var PYe=s(Jc);U4=n(PYe,"A",{id:!0,class:!0,href:!0});var WWt=s(U4);$Ce=n(WWt,"SPAN",{});var QWt=s($Ce);T(K$.$$.fragment,QWt),QWt.forEach(t),WWt.forEach(t),oDr=i(PYe),kCe=n(PYe,"SPAN",{});var UWt=s(kCe);rDr=r(UWt,"TFAutoModelForNextSentencePrediction"),UWt.forEach(t),PYe.forEach(t),MHe=i(f),gr=n(f,"DIV",{class:!0});var si=s(gr);T(Z$.$$.fragment,si),tDr=i(si),Yc=n(si,"P",{});var ase=s(Yc);aDr=r(ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jee=n(ase,"A",{href:!0});var HWt=s(Jee);nDr=r(HWt,"from_pretrained()"),HWt.forEach(t),sDr=r(ase," class method or the "),Yee=n(ase,"A",{href:!0});var JWt=s(Yee);lDr=r(JWt,"from_config()"),JWt.forEach(t),iDr=r(ase,` class
method.`),ase.forEach(t),dDr=i(si),ek=n(si,"P",{});var BYe=s(ek);cDr=r(BYe,"This class cannot be instantiated directly using "),SCe=n(BYe,"CODE",{});var YWt=s(SCe);fDr=r(YWt,"__init__()"),YWt.forEach(t),mDr=r(BYe," (throws an error)."),BYe.forEach(t),gDr=i(si),Qt=n(si,"DIV",{class:!0});var xA=s(Qt);T(ok.$$.fragment,xA),hDr=i(xA),RCe=n(xA,"P",{});var KWt=s(RCe);pDr=r(KWt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),KWt.forEach(t),_Dr=i(xA),Kc=n(xA,"P",{});var nse=s(Kc);uDr=r(nse,`Note:
Loading a model from its configuration file does `),PCe=n(nse,"STRONG",{});var ZWt=s(PCe);bDr=r(ZWt,"not"),ZWt.forEach(t),vDr=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=n(nse,"A",{href:!0});var eQt=s(Kee);FDr=r(eQt,"from_pretrained()"),eQt.forEach(t),TDr=r(nse," to load the model weights."),nse.forEach(t),MDr=i(xA),T(H4.$$.fragment,xA),xA.forEach(t),EDr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(rk.$$.fragment,li),CDr=i(li),BCe=n(li,"P",{});var oQt=s(BCe);wDr=r(oQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oQt.forEach(t),ADr=i(li),wn=n(li,"P",{});var $A=s(wn);LDr=r($A,"The model class to instantiate is selected based on the "),ICe=n($A,"CODE",{});var rQt=s(ICe);yDr=r(rQt,"model_type"),rQt.forEach(t),xDr=r($A,` property of the config object (either
passed as an argument or loaded from `),NCe=n($A,"CODE",{});var tQt=s(NCe);$Dr=r(tQt,"pretrained_model_name_or_path"),tQt.forEach(t),kDr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qCe=n($A,"CODE",{});var aQt=s(qCe);SDr=r(aQt,"pretrained_model_name_or_path"),aQt.forEach(t),RDr=r($A,":"),$A.forEach(t),PDr=i(li),tk=n(li,"UL",{});var IYe=s(tk);J4=n(IYe,"LI",{});var oze=s(J4);jCe=n(oze,"STRONG",{});var nQt=s(jCe);BDr=r(nQt,"bert"),nQt.forEach(t),IDr=r(oze," \u2014 "),Zee=n(oze,"A",{href:!0});var sQt=s(Zee);NDr=r(sQt,"TFBertForNextSentencePrediction"),sQt.forEach(t),qDr=r(oze," (BERT model)"),oze.forEach(t),jDr=i(IYe),Y4=n(IYe,"LI",{});var rze=s(Y4);DCe=n(rze,"STRONG",{});var lQt=s(DCe);DDr=r(lQt,"mobilebert"),lQt.forEach(t),GDr=r(rze," \u2014 "),eoe=n(rze,"A",{href:!0});var iQt=s(eoe);ODr=r(iQt,"TFMobileBertForNextSentencePrediction"),iQt.forEach(t),VDr=r(rze," (MobileBERT model)"),rze.forEach(t),IYe.forEach(t),XDr=i(li),T(K4.$$.fragment,li),li.forEach(t),si.forEach(t),EHe=i(f),Zc=n(f,"H2",{class:!0});var NYe=s(Zc);Z4=n(NYe,"A",{id:!0,class:!0,href:!0});var dQt=s(Z4);GCe=n(dQt,"SPAN",{});var cQt=s(GCe);T(ak.$$.fragment,cQt),cQt.forEach(t),dQt.forEach(t),zDr=i(NYe),OCe=n(NYe,"SPAN",{});var fQt=s(OCe);WDr=r(fQt,"TFAutoModelForTableQuestionAnswering"),fQt.forEach(t),NYe.forEach(t),CHe=i(f),hr=n(f,"DIV",{class:!0});var ii=s(hr);T(nk.$$.fragment,ii),QDr=i(ii),ef=n(ii,"P",{});var sse=s(ef);UDr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ooe=n(sse,"A",{href:!0});var mQt=s(ooe);HDr=r(mQt,"from_pretrained()"),mQt.forEach(t),JDr=r(sse," class method or the "),roe=n(sse,"A",{href:!0});var gQt=s(roe);YDr=r(gQt,"from_config()"),gQt.forEach(t),KDr=r(sse,` class
method.`),sse.forEach(t),ZDr=i(ii),sk=n(ii,"P",{});var qYe=s(sk);eGr=r(qYe,"This class cannot be instantiated directly using "),VCe=n(qYe,"CODE",{});var hQt=s(VCe);oGr=r(hQt,"__init__()"),hQt.forEach(t),rGr=r(qYe," (throws an error)."),qYe.forEach(t),tGr=i(ii),Ut=n(ii,"DIV",{class:!0});var kA=s(Ut);T(lk.$$.fragment,kA),aGr=i(kA),XCe=n(kA,"P",{});var pQt=s(XCe);nGr=r(pQt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pQt.forEach(t),sGr=i(kA),of=n(kA,"P",{});var lse=s(of);lGr=r(lse,`Note:
Loading a model from its configuration file does `),zCe=n(lse,"STRONG",{});var _Qt=s(zCe);iGr=r(_Qt,"not"),_Qt.forEach(t),dGr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=n(lse,"A",{href:!0});var uQt=s(toe);cGr=r(uQt,"from_pretrained()"),uQt.forEach(t),fGr=r(lse," to load the model weights."),lse.forEach(t),mGr=i(kA),T(eC.$$.fragment,kA),kA.forEach(t),gGr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(ik.$$.fragment,di),hGr=i(di),WCe=n(di,"P",{});var bQt=s(WCe);pGr=r(bQt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bQt.forEach(t),_Gr=i(di),An=n(di,"P",{});var SA=s(An);uGr=r(SA,"The model class to instantiate is selected based on the "),QCe=n(SA,"CODE",{});var vQt=s(QCe);bGr=r(vQt,"model_type"),vQt.forEach(t),vGr=r(SA,` property of the config object (either
passed as an argument or loaded from `),UCe=n(SA,"CODE",{});var FQt=s(UCe);FGr=r(FQt,"pretrained_model_name_or_path"),FQt.forEach(t),TGr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=n(SA,"CODE",{});var TQt=s(HCe);MGr=r(TQt,"pretrained_model_name_or_path"),TQt.forEach(t),EGr=r(SA,":"),SA.forEach(t),CGr=i(di),JCe=n(di,"UL",{});var MQt=s(JCe);oC=n(MQt,"LI",{});var tze=s(oC);YCe=n(tze,"STRONG",{});var EQt=s(YCe);wGr=r(EQt,"tapas"),EQt.forEach(t),AGr=r(tze," \u2014 "),aoe=n(tze,"A",{href:!0});var CQt=s(aoe);LGr=r(CQt,"TFTapasForQuestionAnswering"),CQt.forEach(t),yGr=r(tze," (TAPAS model)"),tze.forEach(t),MQt.forEach(t),xGr=i(di),T(rC.$$.fragment,di),di.forEach(t),ii.forEach(t),wHe=i(f),rf=n(f,"H2",{class:!0});var jYe=s(rf);tC=n(jYe,"A",{id:!0,class:!0,href:!0});var wQt=s(tC);KCe=n(wQt,"SPAN",{});var AQt=s(KCe);T(dk.$$.fragment,AQt),AQt.forEach(t),wQt.forEach(t),$Gr=i(jYe),ZCe=n(jYe,"SPAN",{});var LQt=s(ZCe);kGr=r(LQt,"TFAutoModelForTokenClassification"),LQt.forEach(t),jYe.forEach(t),AHe=i(f),pr=n(f,"DIV",{class:!0});var ci=s(pr);T(ck.$$.fragment,ci),SGr=i(ci),tf=n(ci,"P",{});var ise=s(tf);RGr=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),noe=n(ise,"A",{href:!0});var yQt=s(noe);PGr=r(yQt,"from_pretrained()"),yQt.forEach(t),BGr=r(ise," class method or the "),soe=n(ise,"A",{href:!0});var xQt=s(soe);IGr=r(xQt,"from_config()"),xQt.forEach(t),NGr=r(ise,` class
method.`),ise.forEach(t),qGr=i(ci),fk=n(ci,"P",{});var DYe=s(fk);jGr=r(DYe,"This class cannot be instantiated directly using "),e3e=n(DYe,"CODE",{});var $Qt=s(e3e);DGr=r($Qt,"__init__()"),$Qt.forEach(t),GGr=r(DYe," (throws an error)."),DYe.forEach(t),OGr=i(ci),Ht=n(ci,"DIV",{class:!0});var RA=s(Ht);T(mk.$$.fragment,RA),VGr=i(RA),o3e=n(RA,"P",{});var kQt=s(o3e);XGr=r(kQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kQt.forEach(t),zGr=i(RA),af=n(RA,"P",{});var dse=s(af);WGr=r(dse,`Note:
Loading a model from its configuration file does `),r3e=n(dse,"STRONG",{});var SQt=s(r3e);QGr=r(SQt,"not"),SQt.forEach(t),UGr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=n(dse,"A",{href:!0});var RQt=s(loe);HGr=r(RQt,"from_pretrained()"),RQt.forEach(t),JGr=r(dse," to load the model weights."),dse.forEach(t),YGr=i(RA),T(aC.$$.fragment,RA),RA.forEach(t),KGr=i(ci),Xr=n(ci,"DIV",{class:!0});var fi=s(Xr);T(gk.$$.fragment,fi),ZGr=i(fi),t3e=n(fi,"P",{});var PQt=s(t3e);eOr=r(PQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PQt.forEach(t),oOr=i(fi),Ln=n(fi,"P",{});var PA=s(Ln);rOr=r(PA,"The model class to instantiate is selected based on the "),a3e=n(PA,"CODE",{});var BQt=s(a3e);tOr=r(BQt,"model_type"),BQt.forEach(t),aOr=r(PA,` property of the config object (either
passed as an argument or loaded from `),n3e=n(PA,"CODE",{});var IQt=s(n3e);nOr=r(IQt,"pretrained_model_name_or_path"),IQt.forEach(t),sOr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=n(PA,"CODE",{});var NQt=s(s3e);lOr=r(NQt,"pretrained_model_name_or_path"),NQt.forEach(t),iOr=r(PA,":"),PA.forEach(t),dOr=i(fi),ce=n(fi,"UL",{});var pe=s(ce);nC=n(pe,"LI",{});var aze=s(nC);l3e=n(aze,"STRONG",{});var qQt=s(l3e);cOr=r(qQt,"albert"),qQt.forEach(t),fOr=r(aze," \u2014 "),ioe=n(aze,"A",{href:!0});var jQt=s(ioe);mOr=r(jQt,"TFAlbertForTokenClassification"),jQt.forEach(t),gOr=r(aze," (ALBERT model)"),aze.forEach(t),hOr=i(pe),sC=n(pe,"LI",{});var nze=s(sC);i3e=n(nze,"STRONG",{});var DQt=s(i3e);pOr=r(DQt,"bert"),DQt.forEach(t),_Or=r(nze," \u2014 "),doe=n(nze,"A",{href:!0});var GQt=s(doe);uOr=r(GQt,"TFBertForTokenClassification"),GQt.forEach(t),bOr=r(nze," (BERT model)"),nze.forEach(t),vOr=i(pe),lC=n(pe,"LI",{});var sze=s(lC);d3e=n(sze,"STRONG",{});var OQt=s(d3e);FOr=r(OQt,"camembert"),OQt.forEach(t),TOr=r(sze," \u2014 "),coe=n(sze,"A",{href:!0});var VQt=s(coe);MOr=r(VQt,"TFCamembertForTokenClassification"),VQt.forEach(t),EOr=r(sze," (CamemBERT model)"),sze.forEach(t),COr=i(pe),iC=n(pe,"LI",{});var lze=s(iC);c3e=n(lze,"STRONG",{});var XQt=s(c3e);wOr=r(XQt,"convbert"),XQt.forEach(t),AOr=r(lze," \u2014 "),foe=n(lze,"A",{href:!0});var zQt=s(foe);LOr=r(zQt,"TFConvBertForTokenClassification"),zQt.forEach(t),yOr=r(lze," (ConvBERT model)"),lze.forEach(t),xOr=i(pe),dC=n(pe,"LI",{});var ize=s(dC);f3e=n(ize,"STRONG",{});var WQt=s(f3e);$Or=r(WQt,"deberta"),WQt.forEach(t),kOr=r(ize," \u2014 "),moe=n(ize,"A",{href:!0});var QQt=s(moe);SOr=r(QQt,"TFDebertaForTokenClassification"),QQt.forEach(t),ROr=r(ize," (DeBERTa model)"),ize.forEach(t),POr=i(pe),cC=n(pe,"LI",{});var dze=s(cC);m3e=n(dze,"STRONG",{});var UQt=s(m3e);BOr=r(UQt,"deberta-v2"),UQt.forEach(t),IOr=r(dze," \u2014 "),goe=n(dze,"A",{href:!0});var HQt=s(goe);NOr=r(HQt,"TFDebertaV2ForTokenClassification"),HQt.forEach(t),qOr=r(dze," (DeBERTa-v2 model)"),dze.forEach(t),jOr=i(pe),fC=n(pe,"LI",{});var cze=s(fC);g3e=n(cze,"STRONG",{});var JQt=s(g3e);DOr=r(JQt,"distilbert"),JQt.forEach(t),GOr=r(cze," \u2014 "),hoe=n(cze,"A",{href:!0});var YQt=s(hoe);OOr=r(YQt,"TFDistilBertForTokenClassification"),YQt.forEach(t),VOr=r(cze," (DistilBERT model)"),cze.forEach(t),XOr=i(pe),mC=n(pe,"LI",{});var fze=s(mC);h3e=n(fze,"STRONG",{});var KQt=s(h3e);zOr=r(KQt,"electra"),KQt.forEach(t),WOr=r(fze," \u2014 "),poe=n(fze,"A",{href:!0});var ZQt=s(poe);QOr=r(ZQt,"TFElectraForTokenClassification"),ZQt.forEach(t),UOr=r(fze," (ELECTRA model)"),fze.forEach(t),HOr=i(pe),gC=n(pe,"LI",{});var mze=s(gC);p3e=n(mze,"STRONG",{});var eUt=s(p3e);JOr=r(eUt,"flaubert"),eUt.forEach(t),YOr=r(mze," \u2014 "),_oe=n(mze,"A",{href:!0});var oUt=s(_oe);KOr=r(oUt,"TFFlaubertForTokenClassification"),oUt.forEach(t),ZOr=r(mze," (FlauBERT model)"),mze.forEach(t),eVr=i(pe),hC=n(pe,"LI",{});var gze=s(hC);_3e=n(gze,"STRONG",{});var rUt=s(_3e);oVr=r(rUt,"funnel"),rUt.forEach(t),rVr=r(gze," \u2014 "),uoe=n(gze,"A",{href:!0});var tUt=s(uoe);tVr=r(tUt,"TFFunnelForTokenClassification"),tUt.forEach(t),aVr=r(gze," (Funnel Transformer model)"),gze.forEach(t),nVr=i(pe),pC=n(pe,"LI",{});var hze=s(pC);u3e=n(hze,"STRONG",{});var aUt=s(u3e);sVr=r(aUt,"layoutlm"),aUt.forEach(t),lVr=r(hze," \u2014 "),boe=n(hze,"A",{href:!0});var nUt=s(boe);iVr=r(nUt,"TFLayoutLMForTokenClassification"),nUt.forEach(t),dVr=r(hze," (LayoutLM model)"),hze.forEach(t),cVr=i(pe),_C=n(pe,"LI",{});var pze=s(_C);b3e=n(pze,"STRONG",{});var sUt=s(b3e);fVr=r(sUt,"longformer"),sUt.forEach(t),mVr=r(pze," \u2014 "),voe=n(pze,"A",{href:!0});var lUt=s(voe);gVr=r(lUt,"TFLongformerForTokenClassification"),lUt.forEach(t),hVr=r(pze," (Longformer model)"),pze.forEach(t),pVr=i(pe),uC=n(pe,"LI",{});var _ze=s(uC);v3e=n(_ze,"STRONG",{});var iUt=s(v3e);_Vr=r(iUt,"mobilebert"),iUt.forEach(t),uVr=r(_ze," \u2014 "),Foe=n(_ze,"A",{href:!0});var dUt=s(Foe);bVr=r(dUt,"TFMobileBertForTokenClassification"),dUt.forEach(t),vVr=r(_ze," (MobileBERT model)"),_ze.forEach(t),FVr=i(pe),bC=n(pe,"LI",{});var uze=s(bC);F3e=n(uze,"STRONG",{});var cUt=s(F3e);TVr=r(cUt,"mpnet"),cUt.forEach(t),MVr=r(uze," \u2014 "),Toe=n(uze,"A",{href:!0});var fUt=s(Toe);EVr=r(fUt,"TFMPNetForTokenClassification"),fUt.forEach(t),CVr=r(uze," (MPNet model)"),uze.forEach(t),wVr=i(pe),vC=n(pe,"LI",{});var bze=s(vC);T3e=n(bze,"STRONG",{});var mUt=s(T3e);AVr=r(mUt,"rembert"),mUt.forEach(t),LVr=r(bze," \u2014 "),Moe=n(bze,"A",{href:!0});var gUt=s(Moe);yVr=r(gUt,"TFRemBertForTokenClassification"),gUt.forEach(t),xVr=r(bze," (RemBERT model)"),bze.forEach(t),$Vr=i(pe),FC=n(pe,"LI",{});var vze=s(FC);M3e=n(vze,"STRONG",{});var hUt=s(M3e);kVr=r(hUt,"roberta"),hUt.forEach(t),SVr=r(vze," \u2014 "),Eoe=n(vze,"A",{href:!0});var pUt=s(Eoe);RVr=r(pUt,"TFRobertaForTokenClassification"),pUt.forEach(t),PVr=r(vze," (RoBERTa model)"),vze.forEach(t),BVr=i(pe),TC=n(pe,"LI",{});var Fze=s(TC);E3e=n(Fze,"STRONG",{});var _Ut=s(E3e);IVr=r(_Ut,"roformer"),_Ut.forEach(t),NVr=r(Fze," \u2014 "),Coe=n(Fze,"A",{href:!0});var uUt=s(Coe);qVr=r(uUt,"TFRoFormerForTokenClassification"),uUt.forEach(t),jVr=r(Fze," (RoFormer model)"),Fze.forEach(t),DVr=i(pe),MC=n(pe,"LI",{});var Tze=s(MC);C3e=n(Tze,"STRONG",{});var bUt=s(C3e);GVr=r(bUt,"xlm"),bUt.forEach(t),OVr=r(Tze," \u2014 "),woe=n(Tze,"A",{href:!0});var vUt=s(woe);VVr=r(vUt,"TFXLMForTokenClassification"),vUt.forEach(t),XVr=r(Tze," (XLM model)"),Tze.forEach(t),zVr=i(pe),EC=n(pe,"LI",{});var Mze=s(EC);w3e=n(Mze,"STRONG",{});var FUt=s(w3e);WVr=r(FUt,"xlm-roberta"),FUt.forEach(t),QVr=r(Mze," \u2014 "),Aoe=n(Mze,"A",{href:!0});var TUt=s(Aoe);UVr=r(TUt,"TFXLMRobertaForTokenClassification"),TUt.forEach(t),HVr=r(Mze," (XLM-RoBERTa model)"),Mze.forEach(t),JVr=i(pe),CC=n(pe,"LI",{});var Eze=s(CC);A3e=n(Eze,"STRONG",{});var MUt=s(A3e);YVr=r(MUt,"xlnet"),MUt.forEach(t),KVr=r(Eze," \u2014 "),Loe=n(Eze,"A",{href:!0});var EUt=s(Loe);ZVr=r(EUt,"TFXLNetForTokenClassification"),EUt.forEach(t),eXr=r(Eze," (XLNet model)"),Eze.forEach(t),pe.forEach(t),oXr=i(fi),T(wC.$$.fragment,fi),fi.forEach(t),ci.forEach(t),LHe=i(f),nf=n(f,"H2",{class:!0});var GYe=s(nf);AC=n(GYe,"A",{id:!0,class:!0,href:!0});var CUt=s(AC);L3e=n(CUt,"SPAN",{});var wUt=s(L3e);T(hk.$$.fragment,wUt),wUt.forEach(t),CUt.forEach(t),rXr=i(GYe),y3e=n(GYe,"SPAN",{});var AUt=s(y3e);tXr=r(AUt,"TFAutoModelForQuestionAnswering"),AUt.forEach(t),GYe.forEach(t),yHe=i(f),_r=n(f,"DIV",{class:!0});var mi=s(_r);T(pk.$$.fragment,mi),aXr=i(mi),sf=n(mi,"P",{});var cse=s(sf);nXr=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yoe=n(cse,"A",{href:!0});var LUt=s(yoe);sXr=r(LUt,"from_pretrained()"),LUt.forEach(t),lXr=r(cse," class method or the "),xoe=n(cse,"A",{href:!0});var yUt=s(xoe);iXr=r(yUt,"from_config()"),yUt.forEach(t),dXr=r(cse,` class
method.`),cse.forEach(t),cXr=i(mi),_k=n(mi,"P",{});var OYe=s(_k);fXr=r(OYe,"This class cannot be instantiated directly using "),x3e=n(OYe,"CODE",{});var xUt=s(x3e);mXr=r(xUt,"__init__()"),xUt.forEach(t),gXr=r(OYe," (throws an error)."),OYe.forEach(t),hXr=i(mi),Jt=n(mi,"DIV",{class:!0});var BA=s(Jt);T(uk.$$.fragment,BA),pXr=i(BA),$3e=n(BA,"P",{});var $Ut=s($3e);_Xr=r($Ut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Ut.forEach(t),uXr=i(BA),lf=n(BA,"P",{});var fse=s(lf);bXr=r(fse,`Note:
Loading a model from its configuration file does `),k3e=n(fse,"STRONG",{});var kUt=s(k3e);vXr=r(kUt,"not"),kUt.forEach(t),FXr=r(fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=n(fse,"A",{href:!0});var SUt=s($oe);TXr=r(SUt,"from_pretrained()"),SUt.forEach(t),MXr=r(fse," to load the model weights."),fse.forEach(t),EXr=i(BA),T(LC.$$.fragment,BA),BA.forEach(t),CXr=i(mi),zr=n(mi,"DIV",{class:!0});var gi=s(zr);T(bk.$$.fragment,gi),wXr=i(gi),S3e=n(gi,"P",{});var RUt=s(S3e);AXr=r(RUt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RUt.forEach(t),LXr=i(gi),yn=n(gi,"P",{});var IA=s(yn);yXr=r(IA,"The model class to instantiate is selected based on the "),R3e=n(IA,"CODE",{});var PUt=s(R3e);xXr=r(PUt,"model_type"),PUt.forEach(t),$Xr=r(IA,` property of the config object (either
passed as an argument or loaded from `),P3e=n(IA,"CODE",{});var BUt=s(P3e);kXr=r(BUt,"pretrained_model_name_or_path"),BUt.forEach(t),SXr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(IA,"CODE",{});var IUt=s(B3e);RXr=r(IUt,"pretrained_model_name_or_path"),IUt.forEach(t),PXr=r(IA,":"),IA.forEach(t),BXr=i(gi),fe=n(gi,"UL",{});var _e=s(fe);yC=n(_e,"LI",{});var Cze=s(yC);I3e=n(Cze,"STRONG",{});var NUt=s(I3e);IXr=r(NUt,"albert"),NUt.forEach(t),NXr=r(Cze," \u2014 "),koe=n(Cze,"A",{href:!0});var qUt=s(koe);qXr=r(qUt,"TFAlbertForQuestionAnswering"),qUt.forEach(t),jXr=r(Cze," (ALBERT model)"),Cze.forEach(t),DXr=i(_e),xC=n(_e,"LI",{});var wze=s(xC);N3e=n(wze,"STRONG",{});var jUt=s(N3e);GXr=r(jUt,"bert"),jUt.forEach(t),OXr=r(wze," \u2014 "),Soe=n(wze,"A",{href:!0});var DUt=s(Soe);VXr=r(DUt,"TFBertForQuestionAnswering"),DUt.forEach(t),XXr=r(wze," (BERT model)"),wze.forEach(t),zXr=i(_e),$C=n(_e,"LI",{});var Aze=s($C);q3e=n(Aze,"STRONG",{});var GUt=s(q3e);WXr=r(GUt,"camembert"),GUt.forEach(t),QXr=r(Aze," \u2014 "),Roe=n(Aze,"A",{href:!0});var OUt=s(Roe);UXr=r(OUt,"TFCamembertForQuestionAnswering"),OUt.forEach(t),HXr=r(Aze," (CamemBERT model)"),Aze.forEach(t),JXr=i(_e),kC=n(_e,"LI",{});var Lze=s(kC);j3e=n(Lze,"STRONG",{});var VUt=s(j3e);YXr=r(VUt,"convbert"),VUt.forEach(t),KXr=r(Lze," \u2014 "),Poe=n(Lze,"A",{href:!0});var XUt=s(Poe);ZXr=r(XUt,"TFConvBertForQuestionAnswering"),XUt.forEach(t),ezr=r(Lze," (ConvBERT model)"),Lze.forEach(t),ozr=i(_e),SC=n(_e,"LI",{});var yze=s(SC);D3e=n(yze,"STRONG",{});var zUt=s(D3e);rzr=r(zUt,"deberta"),zUt.forEach(t),tzr=r(yze," \u2014 "),Boe=n(yze,"A",{href:!0});var WUt=s(Boe);azr=r(WUt,"TFDebertaForQuestionAnswering"),WUt.forEach(t),nzr=r(yze," (DeBERTa model)"),yze.forEach(t),szr=i(_e),RC=n(_e,"LI",{});var xze=s(RC);G3e=n(xze,"STRONG",{});var QUt=s(G3e);lzr=r(QUt,"deberta-v2"),QUt.forEach(t),izr=r(xze," \u2014 "),Ioe=n(xze,"A",{href:!0});var UUt=s(Ioe);dzr=r(UUt,"TFDebertaV2ForQuestionAnswering"),UUt.forEach(t),czr=r(xze," (DeBERTa-v2 model)"),xze.forEach(t),fzr=i(_e),PC=n(_e,"LI",{});var $ze=s(PC);O3e=n($ze,"STRONG",{});var HUt=s(O3e);mzr=r(HUt,"distilbert"),HUt.forEach(t),gzr=r($ze," \u2014 "),Noe=n($ze,"A",{href:!0});var JUt=s(Noe);hzr=r(JUt,"TFDistilBertForQuestionAnswering"),JUt.forEach(t),pzr=r($ze," (DistilBERT model)"),$ze.forEach(t),_zr=i(_e),BC=n(_e,"LI",{});var kze=s(BC);V3e=n(kze,"STRONG",{});var YUt=s(V3e);uzr=r(YUt,"electra"),YUt.forEach(t),bzr=r(kze," \u2014 "),qoe=n(kze,"A",{href:!0});var KUt=s(qoe);vzr=r(KUt,"TFElectraForQuestionAnswering"),KUt.forEach(t),Fzr=r(kze," (ELECTRA model)"),kze.forEach(t),Tzr=i(_e),IC=n(_e,"LI",{});var Sze=s(IC);X3e=n(Sze,"STRONG",{});var ZUt=s(X3e);Mzr=r(ZUt,"flaubert"),ZUt.forEach(t),Ezr=r(Sze," \u2014 "),joe=n(Sze,"A",{href:!0});var eHt=s(joe);Czr=r(eHt,"TFFlaubertForQuestionAnsweringSimple"),eHt.forEach(t),wzr=r(Sze," (FlauBERT model)"),Sze.forEach(t),Azr=i(_e),NC=n(_e,"LI",{});var Rze=s(NC);z3e=n(Rze,"STRONG",{});var oHt=s(z3e);Lzr=r(oHt,"funnel"),oHt.forEach(t),yzr=r(Rze," \u2014 "),Doe=n(Rze,"A",{href:!0});var rHt=s(Doe);xzr=r(rHt,"TFFunnelForQuestionAnswering"),rHt.forEach(t),$zr=r(Rze," (Funnel Transformer model)"),Rze.forEach(t),kzr=i(_e),qC=n(_e,"LI",{});var Pze=s(qC);W3e=n(Pze,"STRONG",{});var tHt=s(W3e);Szr=r(tHt,"gptj"),tHt.forEach(t),Rzr=r(Pze," \u2014 "),Goe=n(Pze,"A",{href:!0});var aHt=s(Goe);Pzr=r(aHt,"TFGPTJForQuestionAnswering"),aHt.forEach(t),Bzr=r(Pze," (GPT-J model)"),Pze.forEach(t),Izr=i(_e),jC=n(_e,"LI",{});var Bze=s(jC);Q3e=n(Bze,"STRONG",{});var nHt=s(Q3e);Nzr=r(nHt,"longformer"),nHt.forEach(t),qzr=r(Bze," \u2014 "),Ooe=n(Bze,"A",{href:!0});var sHt=s(Ooe);jzr=r(sHt,"TFLongformerForQuestionAnswering"),sHt.forEach(t),Dzr=r(Bze," (Longformer model)"),Bze.forEach(t),Gzr=i(_e),DC=n(_e,"LI",{});var Ize=s(DC);U3e=n(Ize,"STRONG",{});var lHt=s(U3e);Ozr=r(lHt,"mobilebert"),lHt.forEach(t),Vzr=r(Ize," \u2014 "),Voe=n(Ize,"A",{href:!0});var iHt=s(Voe);Xzr=r(iHt,"TFMobileBertForQuestionAnswering"),iHt.forEach(t),zzr=r(Ize," (MobileBERT model)"),Ize.forEach(t),Wzr=i(_e),GC=n(_e,"LI",{});var Nze=s(GC);H3e=n(Nze,"STRONG",{});var dHt=s(H3e);Qzr=r(dHt,"mpnet"),dHt.forEach(t),Uzr=r(Nze," \u2014 "),Xoe=n(Nze,"A",{href:!0});var cHt=s(Xoe);Hzr=r(cHt,"TFMPNetForQuestionAnswering"),cHt.forEach(t),Jzr=r(Nze," (MPNet model)"),Nze.forEach(t),Yzr=i(_e),OC=n(_e,"LI",{});var qze=s(OC);J3e=n(qze,"STRONG",{});var fHt=s(J3e);Kzr=r(fHt,"rembert"),fHt.forEach(t),Zzr=r(qze," \u2014 "),zoe=n(qze,"A",{href:!0});var mHt=s(zoe);eWr=r(mHt,"TFRemBertForQuestionAnswering"),mHt.forEach(t),oWr=r(qze," (RemBERT model)"),qze.forEach(t),rWr=i(_e),VC=n(_e,"LI",{});var jze=s(VC);Y3e=n(jze,"STRONG",{});var gHt=s(Y3e);tWr=r(gHt,"roberta"),gHt.forEach(t),aWr=r(jze," \u2014 "),Woe=n(jze,"A",{href:!0});var hHt=s(Woe);nWr=r(hHt,"TFRobertaForQuestionAnswering"),hHt.forEach(t),sWr=r(jze," (RoBERTa model)"),jze.forEach(t),lWr=i(_e),XC=n(_e,"LI",{});var Dze=s(XC);K3e=n(Dze,"STRONG",{});var pHt=s(K3e);iWr=r(pHt,"roformer"),pHt.forEach(t),dWr=r(Dze," \u2014 "),Qoe=n(Dze,"A",{href:!0});var _Ht=s(Qoe);cWr=r(_Ht,"TFRoFormerForQuestionAnswering"),_Ht.forEach(t),fWr=r(Dze," (RoFormer model)"),Dze.forEach(t),mWr=i(_e),zC=n(_e,"LI",{});var Gze=s(zC);Z3e=n(Gze,"STRONG",{});var uHt=s(Z3e);gWr=r(uHt,"xlm"),uHt.forEach(t),hWr=r(Gze," \u2014 "),Uoe=n(Gze,"A",{href:!0});var bHt=s(Uoe);pWr=r(bHt,"TFXLMForQuestionAnsweringSimple"),bHt.forEach(t),_Wr=r(Gze," (XLM model)"),Gze.forEach(t),uWr=i(_e),WC=n(_e,"LI",{});var Oze=s(WC);e0e=n(Oze,"STRONG",{});var vHt=s(e0e);bWr=r(vHt,"xlm-roberta"),vHt.forEach(t),vWr=r(Oze," \u2014 "),Hoe=n(Oze,"A",{href:!0});var FHt=s(Hoe);FWr=r(FHt,"TFXLMRobertaForQuestionAnswering"),FHt.forEach(t),TWr=r(Oze," (XLM-RoBERTa model)"),Oze.forEach(t),MWr=i(_e),QC=n(_e,"LI",{});var Vze=s(QC);o0e=n(Vze,"STRONG",{});var THt=s(o0e);EWr=r(THt,"xlnet"),THt.forEach(t),CWr=r(Vze," \u2014 "),Joe=n(Vze,"A",{href:!0});var MHt=s(Joe);wWr=r(MHt,"TFXLNetForQuestionAnsweringSimple"),MHt.forEach(t),AWr=r(Vze," (XLNet model)"),Vze.forEach(t),_e.forEach(t),LWr=i(gi),T(UC.$$.fragment,gi),gi.forEach(t),mi.forEach(t),xHe=i(f),df=n(f,"H2",{class:!0});var VYe=s(df);HC=n(VYe,"A",{id:!0,class:!0,href:!0});var EHt=s(HC);r0e=n(EHt,"SPAN",{});var CHt=s(r0e);T(vk.$$.fragment,CHt),CHt.forEach(t),EHt.forEach(t),yWr=i(VYe),t0e=n(VYe,"SPAN",{});var wHt=s(t0e);xWr=r(wHt,"TFAutoModelForVision2Seq"),wHt.forEach(t),VYe.forEach(t),$He=i(f),ur=n(f,"DIV",{class:!0});var hi=s(ur);T(Fk.$$.fragment,hi),$Wr=i(hi),cf=n(hi,"P",{});var mse=s(cf);kWr=r(mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Yoe=n(mse,"A",{href:!0});var AHt=s(Yoe);SWr=r(AHt,"from_pretrained()"),AHt.forEach(t),RWr=r(mse," class method or the "),Koe=n(mse,"A",{href:!0});var LHt=s(Koe);PWr=r(LHt,"from_config()"),LHt.forEach(t),BWr=r(mse,` class
method.`),mse.forEach(t),IWr=i(hi),Tk=n(hi,"P",{});var XYe=s(Tk);NWr=r(XYe,"This class cannot be instantiated directly using "),a0e=n(XYe,"CODE",{});var yHt=s(a0e);qWr=r(yHt,"__init__()"),yHt.forEach(t),jWr=r(XYe," (throws an error)."),XYe.forEach(t),DWr=i(hi),Yt=n(hi,"DIV",{class:!0});var NA=s(Yt);T(Mk.$$.fragment,NA),GWr=i(NA),n0e=n(NA,"P",{});var xHt=s(n0e);OWr=r(xHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xHt.forEach(t),VWr=i(NA),ff=n(NA,"P",{});var gse=s(ff);XWr=r(gse,`Note:
Loading a model from its configuration file does `),s0e=n(gse,"STRONG",{});var $Ht=s(s0e);zWr=r($Ht,"not"),$Ht.forEach(t),WWr=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(gse,"A",{href:!0});var kHt=s(Zoe);QWr=r(kHt,"from_pretrained()"),kHt.forEach(t),UWr=r(gse," to load the model weights."),gse.forEach(t),HWr=i(NA),T(JC.$$.fragment,NA),NA.forEach(t),JWr=i(hi),Wr=n(hi,"DIV",{class:!0});var pi=s(Wr);T(Ek.$$.fragment,pi),YWr=i(pi),l0e=n(pi,"P",{});var SHt=s(l0e);KWr=r(SHt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SHt.forEach(t),ZWr=i(pi),xn=n(pi,"P",{});var qA=s(xn);eQr=r(qA,"The model class to instantiate is selected based on the "),i0e=n(qA,"CODE",{});var RHt=s(i0e);oQr=r(RHt,"model_type"),RHt.forEach(t),rQr=r(qA,` property of the config object (either
passed as an argument or loaded from `),d0e=n(qA,"CODE",{});var PHt=s(d0e);tQr=r(PHt,"pretrained_model_name_or_path"),PHt.forEach(t),aQr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c0e=n(qA,"CODE",{});var BHt=s(c0e);nQr=r(BHt,"pretrained_model_name_or_path"),BHt.forEach(t),sQr=r(qA,":"),qA.forEach(t),lQr=i(pi),f0e=n(pi,"UL",{});var IHt=s(f0e);YC=n(IHt,"LI",{});var Xze=s(YC);m0e=n(Xze,"STRONG",{});var NHt=s(m0e);iQr=r(NHt,"vision-encoder-decoder"),NHt.forEach(t),dQr=r(Xze," \u2014 "),ere=n(Xze,"A",{href:!0});var qHt=s(ere);cQr=r(qHt,"TFVisionEncoderDecoderModel"),qHt.forEach(t),fQr=r(Xze," (Vision Encoder decoder model)"),Xze.forEach(t),IHt.forEach(t),mQr=i(pi),T(KC.$$.fragment,pi),pi.forEach(t),hi.forEach(t),kHe=i(f),mf=n(f,"H2",{class:!0});var zYe=s(mf);ZC=n(zYe,"A",{id:!0,class:!0,href:!0});var jHt=s(ZC);g0e=n(jHt,"SPAN",{});var DHt=s(g0e);T(Ck.$$.fragment,DHt),DHt.forEach(t),jHt.forEach(t),gQr=i(zYe),h0e=n(zYe,"SPAN",{});var GHt=s(h0e);hQr=r(GHt,"TFAutoModelForSpeechSeq2Seq"),GHt.forEach(t),zYe.forEach(t),SHe=i(f),br=n(f,"DIV",{class:!0});var _i=s(br);T(wk.$$.fragment,_i),pQr=i(_i),gf=n(_i,"P",{});var hse=s(gf);_Qr=r(hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ore=n(hse,"A",{href:!0});var OHt=s(ore);uQr=r(OHt,"from_pretrained()"),OHt.forEach(t),bQr=r(hse," class method or the "),rre=n(hse,"A",{href:!0});var VHt=s(rre);vQr=r(VHt,"from_config()"),VHt.forEach(t),FQr=r(hse,` class
method.`),hse.forEach(t),TQr=i(_i),Ak=n(_i,"P",{});var WYe=s(Ak);MQr=r(WYe,"This class cannot be instantiated directly using "),p0e=n(WYe,"CODE",{});var XHt=s(p0e);EQr=r(XHt,"__init__()"),XHt.forEach(t),CQr=r(WYe," (throws an error)."),WYe.forEach(t),wQr=i(_i),Kt=n(_i,"DIV",{class:!0});var jA=s(Kt);T(Lk.$$.fragment,jA),AQr=i(jA),_0e=n(jA,"P",{});var zHt=s(_0e);LQr=r(zHt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zHt.forEach(t),yQr=i(jA),hf=n(jA,"P",{});var pse=s(hf);xQr=r(pse,`Note:
Loading a model from its configuration file does `),u0e=n(pse,"STRONG",{});var WHt=s(u0e);$Qr=r(WHt,"not"),WHt.forEach(t),kQr=r(pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=n(pse,"A",{href:!0});var QHt=s(tre);SQr=r(QHt,"from_pretrained()"),QHt.forEach(t),RQr=r(pse," to load the model weights."),pse.forEach(t),PQr=i(jA),T(e3.$$.fragment,jA),jA.forEach(t),BQr=i(_i),Qr=n(_i,"DIV",{class:!0});var ui=s(Qr);T(yk.$$.fragment,ui),IQr=i(ui),b0e=n(ui,"P",{});var UHt=s(b0e);NQr=r(UHt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),UHt.forEach(t),qQr=i(ui),$n=n(ui,"P",{});var DA=s($n);jQr=r(DA,"The model class to instantiate is selected based on the "),v0e=n(DA,"CODE",{});var HHt=s(v0e);DQr=r(HHt,"model_type"),HHt.forEach(t),GQr=r(DA,` property of the config object (either
passed as an argument or loaded from `),F0e=n(DA,"CODE",{});var JHt=s(F0e);OQr=r(JHt,"pretrained_model_name_or_path"),JHt.forEach(t),VQr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=n(DA,"CODE",{});var YHt=s(T0e);XQr=r(YHt,"pretrained_model_name_or_path"),YHt.forEach(t),zQr=r(DA,":"),DA.forEach(t),WQr=i(ui),M0e=n(ui,"UL",{});var KHt=s(M0e);o3=n(KHt,"LI",{});var zze=s(o3);E0e=n(zze,"STRONG",{});var ZHt=s(E0e);QQr=r(ZHt,"speech_to_text"),ZHt.forEach(t),UQr=r(zze," \u2014 "),are=n(zze,"A",{href:!0});var eJt=s(are);HQr=r(eJt,"TFSpeech2TextForConditionalGeneration"),eJt.forEach(t),JQr=r(zze," (Speech2Text model)"),zze.forEach(t),KHt.forEach(t),YQr=i(ui),T(r3.$$.fragment,ui),ui.forEach(t),_i.forEach(t),RHe=i(f),pf=n(f,"H2",{class:!0});var QYe=s(pf);t3=n(QYe,"A",{id:!0,class:!0,href:!0});var oJt=s(t3);C0e=n(oJt,"SPAN",{});var rJt=s(C0e);T(xk.$$.fragment,rJt),rJt.forEach(t),oJt.forEach(t),KQr=i(QYe),w0e=n(QYe,"SPAN",{});var tJt=s(w0e);ZQr=r(tJt,"FlaxAutoModel"),tJt.forEach(t),QYe.forEach(t),PHe=i(f),vr=n(f,"DIV",{class:!0});var bi=s(vr);T($k.$$.fragment,bi),eUr=i(bi),_f=n(bi,"P",{});var _se=s(_f);oUr=r(_se,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nre=n(_se,"A",{href:!0});var aJt=s(nre);rUr=r(aJt,"from_pretrained()"),aJt.forEach(t),tUr=r(_se," class method or the "),sre=n(_se,"A",{href:!0});var nJt=s(sre);aUr=r(nJt,"from_config()"),nJt.forEach(t),nUr=r(_se,` class
method.`),_se.forEach(t),sUr=i(bi),kk=n(bi,"P",{});var UYe=s(kk);lUr=r(UYe,"This class cannot be instantiated directly using "),A0e=n(UYe,"CODE",{});var sJt=s(A0e);iUr=r(sJt,"__init__()"),sJt.forEach(t),dUr=r(UYe," (throws an error)."),UYe.forEach(t),cUr=i(bi),Zt=n(bi,"DIV",{class:!0});var GA=s(Zt);T(Sk.$$.fragment,GA),fUr=i(GA),L0e=n(GA,"P",{});var lJt=s(L0e);mUr=r(lJt,"Instantiates one of the base model classes of the library from a configuration."),lJt.forEach(t),gUr=i(GA),uf=n(GA,"P",{});var use=s(uf);hUr=r(use,`Note:
Loading a model from its configuration file does `),y0e=n(use,"STRONG",{});var iJt=s(y0e);pUr=r(iJt,"not"),iJt.forEach(t),_Ur=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=n(use,"A",{href:!0});var dJt=s(lre);uUr=r(dJt,"from_pretrained()"),dJt.forEach(t),bUr=r(use," to load the model weights."),use.forEach(t),vUr=i(GA),T(a3.$$.fragment,GA),GA.forEach(t),FUr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(Rk.$$.fragment,vi),TUr=i(vi),x0e=n(vi,"P",{});var cJt=s(x0e);MUr=r(cJt,"Instantiate one of the base model classes of the library from a pretrained model."),cJt.forEach(t),EUr=i(vi),kn=n(vi,"P",{});var OA=s(kn);CUr=r(OA,"The model class to instantiate is selected based on the "),$0e=n(OA,"CODE",{});var fJt=s($0e);wUr=r(fJt,"model_type"),fJt.forEach(t),AUr=r(OA,` property of the config object (either
passed as an argument or loaded from `),k0e=n(OA,"CODE",{});var mJt=s(k0e);LUr=r(mJt,"pretrained_model_name_or_path"),mJt.forEach(t),yUr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=n(OA,"CODE",{});var gJt=s(S0e);xUr=r(gJt,"pretrained_model_name_or_path"),gJt.forEach(t),$Ur=r(OA,":"),OA.forEach(t),kUr=i(vi),re=n(vi,"UL",{});var ae=s(re);n3=n(ae,"LI",{});var Wze=s(n3);R0e=n(Wze,"STRONG",{});var hJt=s(R0e);SUr=r(hJt,"albert"),hJt.forEach(t),RUr=r(Wze," \u2014 "),ire=n(Wze,"A",{href:!0});var pJt=s(ire);PUr=r(pJt,"FlaxAlbertModel"),pJt.forEach(t),BUr=r(Wze," (ALBERT model)"),Wze.forEach(t),IUr=i(ae),s3=n(ae,"LI",{});var Qze=s(s3);P0e=n(Qze,"STRONG",{});var _Jt=s(P0e);NUr=r(_Jt,"bart"),_Jt.forEach(t),qUr=r(Qze," \u2014 "),dre=n(Qze,"A",{href:!0});var uJt=s(dre);jUr=r(uJt,"FlaxBartModel"),uJt.forEach(t),DUr=r(Qze," (BART model)"),Qze.forEach(t),GUr=i(ae),l3=n(ae,"LI",{});var Uze=s(l3);B0e=n(Uze,"STRONG",{});var bJt=s(B0e);OUr=r(bJt,"beit"),bJt.forEach(t),VUr=r(Uze," \u2014 "),cre=n(Uze,"A",{href:!0});var vJt=s(cre);XUr=r(vJt,"FlaxBeitModel"),vJt.forEach(t),zUr=r(Uze," (BEiT model)"),Uze.forEach(t),WUr=i(ae),i3=n(ae,"LI",{});var Hze=s(i3);I0e=n(Hze,"STRONG",{});var FJt=s(I0e);QUr=r(FJt,"bert"),FJt.forEach(t),UUr=r(Hze," \u2014 "),fre=n(Hze,"A",{href:!0});var TJt=s(fre);HUr=r(TJt,"FlaxBertModel"),TJt.forEach(t),JUr=r(Hze," (BERT model)"),Hze.forEach(t),YUr=i(ae),d3=n(ae,"LI",{});var Jze=s(d3);N0e=n(Jze,"STRONG",{});var MJt=s(N0e);KUr=r(MJt,"big_bird"),MJt.forEach(t),ZUr=r(Jze," \u2014 "),mre=n(Jze,"A",{href:!0});var EJt=s(mre);eHr=r(EJt,"FlaxBigBirdModel"),EJt.forEach(t),oHr=r(Jze," (BigBird model)"),Jze.forEach(t),rHr=i(ae),c3=n(ae,"LI",{});var Yze=s(c3);q0e=n(Yze,"STRONG",{});var CJt=s(q0e);tHr=r(CJt,"blenderbot"),CJt.forEach(t),aHr=r(Yze," \u2014 "),gre=n(Yze,"A",{href:!0});var wJt=s(gre);nHr=r(wJt,"FlaxBlenderbotModel"),wJt.forEach(t),sHr=r(Yze," (Blenderbot model)"),Yze.forEach(t),lHr=i(ae),f3=n(ae,"LI",{});var Kze=s(f3);j0e=n(Kze,"STRONG",{});var AJt=s(j0e);iHr=r(AJt,"blenderbot-small"),AJt.forEach(t),dHr=r(Kze," \u2014 "),hre=n(Kze,"A",{href:!0});var LJt=s(hre);cHr=r(LJt,"FlaxBlenderbotSmallModel"),LJt.forEach(t),fHr=r(Kze," (BlenderbotSmall model)"),Kze.forEach(t),mHr=i(ae),m3=n(ae,"LI",{});var Zze=s(m3);D0e=n(Zze,"STRONG",{});var yJt=s(D0e);gHr=r(yJt,"clip"),yJt.forEach(t),hHr=r(Zze," \u2014 "),pre=n(Zze,"A",{href:!0});var xJt=s(pre);pHr=r(xJt,"FlaxCLIPModel"),xJt.forEach(t),_Hr=r(Zze," (CLIP model)"),Zze.forEach(t),uHr=i(ae),g3=n(ae,"LI",{});var eWe=s(g3);G0e=n(eWe,"STRONG",{});var $Jt=s(G0e);bHr=r($Jt,"distilbert"),$Jt.forEach(t),vHr=r(eWe," \u2014 "),_re=n(eWe,"A",{href:!0});var kJt=s(_re);FHr=r(kJt,"FlaxDistilBertModel"),kJt.forEach(t),THr=r(eWe," (DistilBERT model)"),eWe.forEach(t),MHr=i(ae),h3=n(ae,"LI",{});var oWe=s(h3);O0e=n(oWe,"STRONG",{});var SJt=s(O0e);EHr=r(SJt,"electra"),SJt.forEach(t),CHr=r(oWe," \u2014 "),ure=n(oWe,"A",{href:!0});var RJt=s(ure);wHr=r(RJt,"FlaxElectraModel"),RJt.forEach(t),AHr=r(oWe," (ELECTRA model)"),oWe.forEach(t),LHr=i(ae),p3=n(ae,"LI",{});var rWe=s(p3);V0e=n(rWe,"STRONG",{});var PJt=s(V0e);yHr=r(PJt,"gpt2"),PJt.forEach(t),xHr=r(rWe," \u2014 "),bre=n(rWe,"A",{href:!0});var BJt=s(bre);$Hr=r(BJt,"FlaxGPT2Model"),BJt.forEach(t),kHr=r(rWe," (OpenAI GPT-2 model)"),rWe.forEach(t),SHr=i(ae),_3=n(ae,"LI",{});var tWe=s(_3);X0e=n(tWe,"STRONG",{});var IJt=s(X0e);RHr=r(IJt,"gpt_neo"),IJt.forEach(t),PHr=r(tWe," \u2014 "),vre=n(tWe,"A",{href:!0});var NJt=s(vre);BHr=r(NJt,"FlaxGPTNeoModel"),NJt.forEach(t),IHr=r(tWe," (GPT Neo model)"),tWe.forEach(t),NHr=i(ae),u3=n(ae,"LI",{});var aWe=s(u3);z0e=n(aWe,"STRONG",{});var qJt=s(z0e);qHr=r(qJt,"gptj"),qJt.forEach(t),jHr=r(aWe," \u2014 "),Fre=n(aWe,"A",{href:!0});var jJt=s(Fre);DHr=r(jJt,"FlaxGPTJModel"),jJt.forEach(t),GHr=r(aWe," (GPT-J model)"),aWe.forEach(t),OHr=i(ae),b3=n(ae,"LI",{});var nWe=s(b3);W0e=n(nWe,"STRONG",{});var DJt=s(W0e);VHr=r(DJt,"longt5"),DJt.forEach(t),XHr=r(nWe," \u2014 "),Tre=n(nWe,"A",{href:!0});var GJt=s(Tre);zHr=r(GJt,"FlaxLongT5Model"),GJt.forEach(t),WHr=r(nWe," (LongT5 model)"),nWe.forEach(t),QHr=i(ae),v3=n(ae,"LI",{});var sWe=s(v3);Q0e=n(sWe,"STRONG",{});var OJt=s(Q0e);UHr=r(OJt,"marian"),OJt.forEach(t),HHr=r(sWe," \u2014 "),Mre=n(sWe,"A",{href:!0});var VJt=s(Mre);JHr=r(VJt,"FlaxMarianModel"),VJt.forEach(t),YHr=r(sWe," (Marian model)"),sWe.forEach(t),KHr=i(ae),F3=n(ae,"LI",{});var lWe=s(F3);U0e=n(lWe,"STRONG",{});var XJt=s(U0e);ZHr=r(XJt,"mbart"),XJt.forEach(t),eJr=r(lWe," \u2014 "),Ere=n(lWe,"A",{href:!0});var zJt=s(Ere);oJr=r(zJt,"FlaxMBartModel"),zJt.forEach(t),rJr=r(lWe," (mBART model)"),lWe.forEach(t),tJr=i(ae),T3=n(ae,"LI",{});var iWe=s(T3);H0e=n(iWe,"STRONG",{});var WJt=s(H0e);aJr=r(WJt,"mt5"),WJt.forEach(t),nJr=r(iWe," \u2014 "),Cre=n(iWe,"A",{href:!0});var QJt=s(Cre);sJr=r(QJt,"FlaxMT5Model"),QJt.forEach(t),lJr=r(iWe," (MT5 model)"),iWe.forEach(t),iJr=i(ae),M3=n(ae,"LI",{});var dWe=s(M3);J0e=n(dWe,"STRONG",{});var UJt=s(J0e);dJr=r(UJt,"opt"),UJt.forEach(t),cJr=r(dWe," \u2014 "),wre=n(dWe,"A",{href:!0});var HJt=s(wre);fJr=r(HJt,"FlaxOPTModel"),HJt.forEach(t),mJr=r(dWe," (OPT model)"),dWe.forEach(t),gJr=i(ae),E3=n(ae,"LI",{});var cWe=s(E3);Y0e=n(cWe,"STRONG",{});var JJt=s(Y0e);hJr=r(JJt,"pegasus"),JJt.forEach(t),pJr=r(cWe," \u2014 "),Are=n(cWe,"A",{href:!0});var YJt=s(Are);_Jr=r(YJt,"FlaxPegasusModel"),YJt.forEach(t),uJr=r(cWe," (Pegasus model)"),cWe.forEach(t),bJr=i(ae),C3=n(ae,"LI",{});var fWe=s(C3);K0e=n(fWe,"STRONG",{});var KJt=s(K0e);vJr=r(KJt,"roberta"),KJt.forEach(t),FJr=r(fWe," \u2014 "),Lre=n(fWe,"A",{href:!0});var ZJt=s(Lre);TJr=r(ZJt,"FlaxRobertaModel"),ZJt.forEach(t),MJr=r(fWe," (RoBERTa model)"),fWe.forEach(t),EJr=i(ae),w3=n(ae,"LI",{});var mWe=s(w3);Z0e=n(mWe,"STRONG",{});var eYt=s(Z0e);CJr=r(eYt,"roformer"),eYt.forEach(t),wJr=r(mWe," \u2014 "),yre=n(mWe,"A",{href:!0});var oYt=s(yre);AJr=r(oYt,"FlaxRoFormerModel"),oYt.forEach(t),LJr=r(mWe," (RoFormer model)"),mWe.forEach(t),yJr=i(ae),A3=n(ae,"LI",{});var gWe=s(A3);ewe=n(gWe,"STRONG",{});var rYt=s(ewe);xJr=r(rYt,"t5"),rYt.forEach(t),$Jr=r(gWe," \u2014 "),xre=n(gWe,"A",{href:!0});var tYt=s(xre);kJr=r(tYt,"FlaxT5Model"),tYt.forEach(t),SJr=r(gWe," (T5 model)"),gWe.forEach(t),RJr=i(ae),L3=n(ae,"LI",{});var hWe=s(L3);owe=n(hWe,"STRONG",{});var aYt=s(owe);PJr=r(aYt,"vision-text-dual-encoder"),aYt.forEach(t),BJr=r(hWe," \u2014 "),$re=n(hWe,"A",{href:!0});var nYt=s($re);IJr=r(nYt,"FlaxVisionTextDualEncoderModel"),nYt.forEach(t),NJr=r(hWe," (VisionTextDualEncoder model)"),hWe.forEach(t),qJr=i(ae),y3=n(ae,"LI",{});var pWe=s(y3);rwe=n(pWe,"STRONG",{});var sYt=s(rwe);jJr=r(sYt,"vit"),sYt.forEach(t),DJr=r(pWe," \u2014 "),kre=n(pWe,"A",{href:!0});var lYt=s(kre);GJr=r(lYt,"FlaxViTModel"),lYt.forEach(t),OJr=r(pWe," (ViT model)"),pWe.forEach(t),VJr=i(ae),x3=n(ae,"LI",{});var _We=s(x3);twe=n(_We,"STRONG",{});var iYt=s(twe);XJr=r(iYt,"wav2vec2"),iYt.forEach(t),zJr=r(_We," \u2014 "),Sre=n(_We,"A",{href:!0});var dYt=s(Sre);WJr=r(dYt,"FlaxWav2Vec2Model"),dYt.forEach(t),QJr=r(_We," (Wav2Vec2 model)"),_We.forEach(t),UJr=i(ae),$3=n(ae,"LI",{});var uWe=s($3);awe=n(uWe,"STRONG",{});var cYt=s(awe);HJr=r(cYt,"xglm"),cYt.forEach(t),JJr=r(uWe," \u2014 "),Rre=n(uWe,"A",{href:!0});var fYt=s(Rre);YJr=r(fYt,"FlaxXGLMModel"),fYt.forEach(t),KJr=r(uWe," (XGLM model)"),uWe.forEach(t),ZJr=i(ae),k3=n(ae,"LI",{});var bWe=s(k3);nwe=n(bWe,"STRONG",{});var mYt=s(nwe);eYr=r(mYt,"xlm-roberta"),mYt.forEach(t),oYr=r(bWe," \u2014 "),Pre=n(bWe,"A",{href:!0});var gYt=s(Pre);rYr=r(gYt,"FlaxXLMRobertaModel"),gYt.forEach(t),tYr=r(bWe," (XLM-RoBERTa model)"),bWe.forEach(t),ae.forEach(t),aYr=i(vi),T(S3.$$.fragment,vi),vi.forEach(t),bi.forEach(t),BHe=i(f),bf=n(f,"H2",{class:!0});var HYe=s(bf);R3=n(HYe,"A",{id:!0,class:!0,href:!0});var hYt=s(R3);swe=n(hYt,"SPAN",{});var pYt=s(swe);T(Pk.$$.fragment,pYt),pYt.forEach(t),hYt.forEach(t),nYr=i(HYe),lwe=n(HYe,"SPAN",{});var _Yt=s(lwe);sYr=r(_Yt,"FlaxAutoModelForCausalLM"),_Yt.forEach(t),HYe.forEach(t),IHe=i(f),Fr=n(f,"DIV",{class:!0});var Fi=s(Fr);T(Bk.$$.fragment,Fi),lYr=i(Fi),vf=n(Fi,"P",{});var bse=s(vf);iYr=r(bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bre=n(bse,"A",{href:!0});var uYt=s(Bre);dYr=r(uYt,"from_pretrained()"),uYt.forEach(t),cYr=r(bse," class method or the "),Ire=n(bse,"A",{href:!0});var bYt=s(Ire);fYr=r(bYt,"from_config()"),bYt.forEach(t),mYr=r(bse,` class
method.`),bse.forEach(t),gYr=i(Fi),Ik=n(Fi,"P",{});var JYe=s(Ik);hYr=r(JYe,"This class cannot be instantiated directly using "),iwe=n(JYe,"CODE",{});var vYt=s(iwe);pYr=r(vYt,"__init__()"),vYt.forEach(t),_Yr=r(JYe," (throws an error)."),JYe.forEach(t),uYr=i(Fi),ea=n(Fi,"DIV",{class:!0});var VA=s(ea);T(Nk.$$.fragment,VA),bYr=i(VA),dwe=n(VA,"P",{});var FYt=s(dwe);vYr=r(FYt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FYt.forEach(t),FYr=i(VA),Ff=n(VA,"P",{});var vse=s(Ff);TYr=r(vse,`Note:
Loading a model from its configuration file does `),cwe=n(vse,"STRONG",{});var TYt=s(cwe);MYr=r(TYt,"not"),TYt.forEach(t),EYr=r(vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nre=n(vse,"A",{href:!0});var MYt=s(Nre);CYr=r(MYt,"from_pretrained()"),MYt.forEach(t),wYr=r(vse," to load the model weights."),vse.forEach(t),AYr=i(VA),T(P3.$$.fragment,VA),VA.forEach(t),LYr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(qk.$$.fragment,Ti),yYr=i(Ti),fwe=n(Ti,"P",{});var EYt=s(fwe);xYr=r(EYt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EYt.forEach(t),$Yr=i(Ti),Sn=n(Ti,"P",{});var XA=s(Sn);kYr=r(XA,"The model class to instantiate is selected based on the "),mwe=n(XA,"CODE",{});var CYt=s(mwe);SYr=r(CYt,"model_type"),CYt.forEach(t),RYr=r(XA,` property of the config object (either
passed as an argument or loaded from `),gwe=n(XA,"CODE",{});var wYt=s(gwe);PYr=r(wYt,"pretrained_model_name_or_path"),wYt.forEach(t),BYr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hwe=n(XA,"CODE",{});var AYt=s(hwe);IYr=r(AYt,"pretrained_model_name_or_path"),AYt.forEach(t),NYr=r(XA,":"),XA.forEach(t),qYr=i(Ti),xe=n(Ti,"UL",{});var qe=s(xe);B3=n(qe,"LI",{});var vWe=s(B3);pwe=n(vWe,"STRONG",{});var LYt=s(pwe);jYr=r(LYt,"bart"),LYt.forEach(t),DYr=r(vWe," \u2014 "),qre=n(vWe,"A",{href:!0});var yYt=s(qre);GYr=r(yYt,"FlaxBartForCausalLM"),yYt.forEach(t),OYr=r(vWe," (BART model)"),vWe.forEach(t),VYr=i(qe),I3=n(qe,"LI",{});var FWe=s(I3);_we=n(FWe,"STRONG",{});var xYt=s(_we);XYr=r(xYt,"bert"),xYt.forEach(t),zYr=r(FWe," \u2014 "),jre=n(FWe,"A",{href:!0});var $Yt=s(jre);WYr=r($Yt,"FlaxBertForCausalLM"),$Yt.forEach(t),QYr=r(FWe," (BERT model)"),FWe.forEach(t),UYr=i(qe),N3=n(qe,"LI",{});var TWe=s(N3);uwe=n(TWe,"STRONG",{});var kYt=s(uwe);HYr=r(kYt,"big_bird"),kYt.forEach(t),JYr=r(TWe," \u2014 "),Dre=n(TWe,"A",{href:!0});var SYt=s(Dre);YYr=r(SYt,"FlaxBigBirdForCausalLM"),SYt.forEach(t),KYr=r(TWe," (BigBird model)"),TWe.forEach(t),ZYr=i(qe),q3=n(qe,"LI",{});var MWe=s(q3);bwe=n(MWe,"STRONG",{});var RYt=s(bwe);eKr=r(RYt,"electra"),RYt.forEach(t),oKr=r(MWe," \u2014 "),Gre=n(MWe,"A",{href:!0});var PYt=s(Gre);rKr=r(PYt,"FlaxElectraForCausalLM"),PYt.forEach(t),tKr=r(MWe," (ELECTRA model)"),MWe.forEach(t),aKr=i(qe),j3=n(qe,"LI",{});var EWe=s(j3);vwe=n(EWe,"STRONG",{});var BYt=s(vwe);nKr=r(BYt,"gpt2"),BYt.forEach(t),sKr=r(EWe," \u2014 "),Ore=n(EWe,"A",{href:!0});var IYt=s(Ore);lKr=r(IYt,"FlaxGPT2LMHeadModel"),IYt.forEach(t),iKr=r(EWe," (OpenAI GPT-2 model)"),EWe.forEach(t),dKr=i(qe),D3=n(qe,"LI",{});var CWe=s(D3);Fwe=n(CWe,"STRONG",{});var NYt=s(Fwe);cKr=r(NYt,"gpt_neo"),NYt.forEach(t),fKr=r(CWe," \u2014 "),Vre=n(CWe,"A",{href:!0});var qYt=s(Vre);mKr=r(qYt,"FlaxGPTNeoForCausalLM"),qYt.forEach(t),gKr=r(CWe," (GPT Neo model)"),CWe.forEach(t),hKr=i(qe),G3=n(qe,"LI",{});var wWe=s(G3);Twe=n(wWe,"STRONG",{});var jYt=s(Twe);pKr=r(jYt,"gptj"),jYt.forEach(t),_Kr=r(wWe," \u2014 "),Xre=n(wWe,"A",{href:!0});var DYt=s(Xre);uKr=r(DYt,"FlaxGPTJForCausalLM"),DYt.forEach(t),bKr=r(wWe," (GPT-J model)"),wWe.forEach(t),vKr=i(qe),O3=n(qe,"LI",{});var AWe=s(O3);Mwe=n(AWe,"STRONG",{});var GYt=s(Mwe);FKr=r(GYt,"opt"),GYt.forEach(t),TKr=r(AWe," \u2014 "),zre=n(AWe,"A",{href:!0});var OYt=s(zre);MKr=r(OYt,"FlaxOPTForCausalLM"),OYt.forEach(t),EKr=r(AWe," (OPT model)"),AWe.forEach(t),CKr=i(qe),V3=n(qe,"LI",{});var LWe=s(V3);Ewe=n(LWe,"STRONG",{});var VYt=s(Ewe);wKr=r(VYt,"roberta"),VYt.forEach(t),AKr=r(LWe," \u2014 "),Wre=n(LWe,"A",{href:!0});var XYt=s(Wre);LKr=r(XYt,"FlaxRobertaForCausalLM"),XYt.forEach(t),yKr=r(LWe," (RoBERTa model)"),LWe.forEach(t),xKr=i(qe),X3=n(qe,"LI",{});var yWe=s(X3);Cwe=n(yWe,"STRONG",{});var zYt=s(Cwe);$Kr=r(zYt,"xglm"),zYt.forEach(t),kKr=r(yWe," \u2014 "),Qre=n(yWe,"A",{href:!0});var WYt=s(Qre);SKr=r(WYt,"FlaxXGLMForCausalLM"),WYt.forEach(t),RKr=r(yWe," (XGLM model)"),yWe.forEach(t),qe.forEach(t),PKr=i(Ti),T(z3.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),NHe=i(f),Tf=n(f,"H2",{class:!0});var YYe=s(Tf);W3=n(YYe,"A",{id:!0,class:!0,href:!0});var QYt=s(W3);wwe=n(QYt,"SPAN",{});var UYt=s(wwe);T(jk.$$.fragment,UYt),UYt.forEach(t),QYt.forEach(t),BKr=i(YYe),Awe=n(YYe,"SPAN",{});var HYt=s(Awe);IKr=r(HYt,"FlaxAutoModelForPreTraining"),HYt.forEach(t),YYe.forEach(t),qHe=i(f),Tr=n(f,"DIV",{class:!0});var Mi=s(Tr);T(Dk.$$.fragment,Mi),NKr=i(Mi),Mf=n(Mi,"P",{});var Fse=s(Mf);qKr=r(Fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ure=n(Fse,"A",{href:!0});var JYt=s(Ure);jKr=r(JYt,"from_pretrained()"),JYt.forEach(t),DKr=r(Fse," class method or the "),Hre=n(Fse,"A",{href:!0});var YYt=s(Hre);GKr=r(YYt,"from_config()"),YYt.forEach(t),OKr=r(Fse,` class
method.`),Fse.forEach(t),VKr=i(Mi),Gk=n(Mi,"P",{});var KYe=s(Gk);XKr=r(KYe,"This class cannot be instantiated directly using "),Lwe=n(KYe,"CODE",{});var KYt=s(Lwe);zKr=r(KYt,"__init__()"),KYt.forEach(t),WKr=r(KYe," (throws an error)."),KYe.forEach(t),QKr=i(Mi),oa=n(Mi,"DIV",{class:!0});var zA=s(oa);T(Ok.$$.fragment,zA),UKr=i(zA),ywe=n(zA,"P",{});var ZYt=s(ywe);HKr=r(ZYt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZYt.forEach(t),JKr=i(zA),Ef=n(zA,"P",{});var Tse=s(Ef);YKr=r(Tse,`Note:
Loading a model from its configuration file does `),xwe=n(Tse,"STRONG",{});var eKt=s(xwe);KKr=r(eKt,"not"),eKt.forEach(t),ZKr=r(Tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=n(Tse,"A",{href:!0});var oKt=s(Jre);eZr=r(oKt,"from_pretrained()"),oKt.forEach(t),oZr=r(Tse," to load the model weights."),Tse.forEach(t),rZr=i(zA),T(Q3.$$.fragment,zA),zA.forEach(t),tZr=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(Vk.$$.fragment,Ei),aZr=i(Ei),$we=n(Ei,"P",{});var rKt=s($we);nZr=r(rKt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rKt.forEach(t),sZr=i(Ei),Rn=n(Ei,"P",{});var WA=s(Rn);lZr=r(WA,"The model class to instantiate is selected based on the "),kwe=n(WA,"CODE",{});var tKt=s(kwe);iZr=r(tKt,"model_type"),tKt.forEach(t),dZr=r(WA,` property of the config object (either
passed as an argument or loaded from `),Swe=n(WA,"CODE",{});var aKt=s(Swe);cZr=r(aKt,"pretrained_model_name_or_path"),aKt.forEach(t),fZr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rwe=n(WA,"CODE",{});var nKt=s(Rwe);mZr=r(nKt,"pretrained_model_name_or_path"),nKt.forEach(t),gZr=r(WA,":"),WA.forEach(t),hZr=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);U3=n(we,"LI",{});var xWe=s(U3);Pwe=n(xWe,"STRONG",{});var sKt=s(Pwe);pZr=r(sKt,"albert"),sKt.forEach(t),_Zr=r(xWe," \u2014 "),Yre=n(xWe,"A",{href:!0});var lKt=s(Yre);uZr=r(lKt,"FlaxAlbertForPreTraining"),lKt.forEach(t),bZr=r(xWe," (ALBERT model)"),xWe.forEach(t),vZr=i(we),H3=n(we,"LI",{});var $We=s(H3);Bwe=n($We,"STRONG",{});var iKt=s(Bwe);FZr=r(iKt,"bart"),iKt.forEach(t),TZr=r($We," \u2014 "),Kre=n($We,"A",{href:!0});var dKt=s(Kre);MZr=r(dKt,"FlaxBartForConditionalGeneration"),dKt.forEach(t),EZr=r($We," (BART model)"),$We.forEach(t),CZr=i(we),J3=n(we,"LI",{});var kWe=s(J3);Iwe=n(kWe,"STRONG",{});var cKt=s(Iwe);wZr=r(cKt,"bert"),cKt.forEach(t),AZr=r(kWe," \u2014 "),Zre=n(kWe,"A",{href:!0});var fKt=s(Zre);LZr=r(fKt,"FlaxBertForPreTraining"),fKt.forEach(t),yZr=r(kWe," (BERT model)"),kWe.forEach(t),xZr=i(we),Y3=n(we,"LI",{});var SWe=s(Y3);Nwe=n(SWe,"STRONG",{});var mKt=s(Nwe);$Zr=r(mKt,"big_bird"),mKt.forEach(t),kZr=r(SWe," \u2014 "),ete=n(SWe,"A",{href:!0});var gKt=s(ete);SZr=r(gKt,"FlaxBigBirdForPreTraining"),gKt.forEach(t),RZr=r(SWe," (BigBird model)"),SWe.forEach(t),PZr=i(we),K3=n(we,"LI",{});var RWe=s(K3);qwe=n(RWe,"STRONG",{});var hKt=s(qwe);BZr=r(hKt,"electra"),hKt.forEach(t),IZr=r(RWe," \u2014 "),ote=n(RWe,"A",{href:!0});var pKt=s(ote);NZr=r(pKt,"FlaxElectraForPreTraining"),pKt.forEach(t),qZr=r(RWe," (ELECTRA model)"),RWe.forEach(t),jZr=i(we),Z3=n(we,"LI",{});var PWe=s(Z3);jwe=n(PWe,"STRONG",{});var _Kt=s(jwe);DZr=r(_Kt,"longt5"),_Kt.forEach(t),GZr=r(PWe," \u2014 "),rte=n(PWe,"A",{href:!0});var uKt=s(rte);OZr=r(uKt,"FlaxLongT5ForConditionalGeneration"),uKt.forEach(t),VZr=r(PWe," (LongT5 model)"),PWe.forEach(t),XZr=i(we),e0=n(we,"LI",{});var BWe=s(e0);Dwe=n(BWe,"STRONG",{});var bKt=s(Dwe);zZr=r(bKt,"mbart"),bKt.forEach(t),WZr=r(BWe," \u2014 "),tte=n(BWe,"A",{href:!0});var vKt=s(tte);QZr=r(vKt,"FlaxMBartForConditionalGeneration"),vKt.forEach(t),UZr=r(BWe," (mBART model)"),BWe.forEach(t),HZr=i(we),o0=n(we,"LI",{});var IWe=s(o0);Gwe=n(IWe,"STRONG",{});var FKt=s(Gwe);JZr=r(FKt,"mt5"),FKt.forEach(t),YZr=r(IWe," \u2014 "),ate=n(IWe,"A",{href:!0});var TKt=s(ate);KZr=r(TKt,"FlaxMT5ForConditionalGeneration"),TKt.forEach(t),ZZr=r(IWe," (MT5 model)"),IWe.forEach(t),eet=i(we),r0=n(we,"LI",{});var NWe=s(r0);Owe=n(NWe,"STRONG",{});var MKt=s(Owe);oet=r(MKt,"roberta"),MKt.forEach(t),ret=r(NWe," \u2014 "),nte=n(NWe,"A",{href:!0});var EKt=s(nte);tet=r(EKt,"FlaxRobertaForMaskedLM"),EKt.forEach(t),aet=r(NWe," (RoBERTa model)"),NWe.forEach(t),net=i(we),t0=n(we,"LI",{});var qWe=s(t0);Vwe=n(qWe,"STRONG",{});var CKt=s(Vwe);set=r(CKt,"roformer"),CKt.forEach(t),iet=r(qWe," \u2014 "),ste=n(qWe,"A",{href:!0});var wKt=s(ste);det=r(wKt,"FlaxRoFormerForMaskedLM"),wKt.forEach(t),cet=r(qWe," (RoFormer model)"),qWe.forEach(t),fet=i(we),a0=n(we,"LI",{});var jWe=s(a0);Xwe=n(jWe,"STRONG",{});var AKt=s(Xwe);met=r(AKt,"t5"),AKt.forEach(t),get=r(jWe," \u2014 "),lte=n(jWe,"A",{href:!0});var LKt=s(lte);het=r(LKt,"FlaxT5ForConditionalGeneration"),LKt.forEach(t),pet=r(jWe," (T5 model)"),jWe.forEach(t),_et=i(we),n0=n(we,"LI",{});var DWe=s(n0);zwe=n(DWe,"STRONG",{});var yKt=s(zwe);uet=r(yKt,"wav2vec2"),yKt.forEach(t),bet=r(DWe," \u2014 "),ite=n(DWe,"A",{href:!0});var xKt=s(ite);vet=r(xKt,"FlaxWav2Vec2ForPreTraining"),xKt.forEach(t),Fet=r(DWe," (Wav2Vec2 model)"),DWe.forEach(t),Tet=i(we),s0=n(we,"LI",{});var GWe=s(s0);Wwe=n(GWe,"STRONG",{});var $Kt=s(Wwe);Met=r($Kt,"xlm-roberta"),$Kt.forEach(t),Eet=r(GWe," \u2014 "),dte=n(GWe,"A",{href:!0});var kKt=s(dte);Cet=r(kKt,"FlaxXLMRobertaForMaskedLM"),kKt.forEach(t),wet=r(GWe," (XLM-RoBERTa model)"),GWe.forEach(t),we.forEach(t),Aet=i(Ei),T(l0.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),jHe=i(f),Cf=n(f,"H2",{class:!0});var ZYe=s(Cf);i0=n(ZYe,"A",{id:!0,class:!0,href:!0});var SKt=s(i0);Qwe=n(SKt,"SPAN",{});var RKt=s(Qwe);T(Xk.$$.fragment,RKt),RKt.forEach(t),SKt.forEach(t),Let=i(ZYe),Uwe=n(ZYe,"SPAN",{});var PKt=s(Uwe);yet=r(PKt,"FlaxAutoModelForMaskedLM"),PKt.forEach(t),ZYe.forEach(t),DHe=i(f),Mr=n(f,"DIV",{class:!0});var Ci=s(Mr);T(zk.$$.fragment,Ci),xet=i(Ci),wf=n(Ci,"P",{});var Mse=s(wf);$et=r(Mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cte=n(Mse,"A",{href:!0});var BKt=s(cte);ket=r(BKt,"from_pretrained()"),BKt.forEach(t),Set=r(Mse," class method or the "),fte=n(Mse,"A",{href:!0});var IKt=s(fte);Ret=r(IKt,"from_config()"),IKt.forEach(t),Pet=r(Mse,` class
method.`),Mse.forEach(t),Bet=i(Ci),Wk=n(Ci,"P",{});var eKe=s(Wk);Iet=r(eKe,"This class cannot be instantiated directly using "),Hwe=n(eKe,"CODE",{});var NKt=s(Hwe);Net=r(NKt,"__init__()"),NKt.forEach(t),qet=r(eKe," (throws an error)."),eKe.forEach(t),jet=i(Ci),ra=n(Ci,"DIV",{class:!0});var QA=s(ra);T(Qk.$$.fragment,QA),Det=i(QA),Jwe=n(QA,"P",{});var qKt=s(Jwe);Get=r(qKt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qKt.forEach(t),Oet=i(QA),Af=n(QA,"P",{});var Ese=s(Af);Vet=r(Ese,`Note:
Loading a model from its configuration file does `),Ywe=n(Ese,"STRONG",{});var jKt=s(Ywe);Xet=r(jKt,"not"),jKt.forEach(t),zet=r(Ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=n(Ese,"A",{href:!0});var DKt=s(mte);Wet=r(DKt,"from_pretrained()"),DKt.forEach(t),Qet=r(Ese," to load the model weights."),Ese.forEach(t),Uet=i(QA),T(d0.$$.fragment,QA),QA.forEach(t),Het=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(Uk.$$.fragment,wi),Jet=i(wi),Kwe=n(wi,"P",{});var GKt=s(Kwe);Yet=r(GKt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),GKt.forEach(t),Ket=i(wi),Pn=n(wi,"P",{});var UA=s(Pn);Zet=r(UA,"The model class to instantiate is selected based on the "),Zwe=n(UA,"CODE",{});var OKt=s(Zwe);eot=r(OKt,"model_type"),OKt.forEach(t),oot=r(UA,` property of the config object (either
passed as an argument or loaded from `),e6e=n(UA,"CODE",{});var VKt=s(e6e);rot=r(VKt,"pretrained_model_name_or_path"),VKt.forEach(t),tot=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=n(UA,"CODE",{});var XKt=s(o6e);aot=r(XKt,"pretrained_model_name_or_path"),XKt.forEach(t),not=r(UA,":"),UA.forEach(t),sot=i(wi),$e=n(wi,"UL",{});var je=s($e);c0=n(je,"LI",{});var OWe=s(c0);r6e=n(OWe,"STRONG",{});var zKt=s(r6e);lot=r(zKt,"albert"),zKt.forEach(t),iot=r(OWe," \u2014 "),gte=n(OWe,"A",{href:!0});var WKt=s(gte);dot=r(WKt,"FlaxAlbertForMaskedLM"),WKt.forEach(t),cot=r(OWe," (ALBERT model)"),OWe.forEach(t),fot=i(je),f0=n(je,"LI",{});var VWe=s(f0);t6e=n(VWe,"STRONG",{});var QKt=s(t6e);mot=r(QKt,"bart"),QKt.forEach(t),got=r(VWe," \u2014 "),hte=n(VWe,"A",{href:!0});var UKt=s(hte);hot=r(UKt,"FlaxBartForConditionalGeneration"),UKt.forEach(t),pot=r(VWe," (BART model)"),VWe.forEach(t),_ot=i(je),m0=n(je,"LI",{});var XWe=s(m0);a6e=n(XWe,"STRONG",{});var HKt=s(a6e);uot=r(HKt,"bert"),HKt.forEach(t),bot=r(XWe," \u2014 "),pte=n(XWe,"A",{href:!0});var JKt=s(pte);vot=r(JKt,"FlaxBertForMaskedLM"),JKt.forEach(t),Fot=r(XWe," (BERT model)"),XWe.forEach(t),Tot=i(je),g0=n(je,"LI",{});var zWe=s(g0);n6e=n(zWe,"STRONG",{});var YKt=s(n6e);Mot=r(YKt,"big_bird"),YKt.forEach(t),Eot=r(zWe," \u2014 "),_te=n(zWe,"A",{href:!0});var KKt=s(_te);Cot=r(KKt,"FlaxBigBirdForMaskedLM"),KKt.forEach(t),wot=r(zWe," (BigBird model)"),zWe.forEach(t),Aot=i(je),h0=n(je,"LI",{});var WWe=s(h0);s6e=n(WWe,"STRONG",{});var ZKt=s(s6e);Lot=r(ZKt,"distilbert"),ZKt.forEach(t),yot=r(WWe," \u2014 "),ute=n(WWe,"A",{href:!0});var eZt=s(ute);xot=r(eZt,"FlaxDistilBertForMaskedLM"),eZt.forEach(t),$ot=r(WWe," (DistilBERT model)"),WWe.forEach(t),kot=i(je),p0=n(je,"LI",{});var QWe=s(p0);l6e=n(QWe,"STRONG",{});var oZt=s(l6e);Sot=r(oZt,"electra"),oZt.forEach(t),Rot=r(QWe," \u2014 "),bte=n(QWe,"A",{href:!0});var rZt=s(bte);Pot=r(rZt,"FlaxElectraForMaskedLM"),rZt.forEach(t),Bot=r(QWe," (ELECTRA model)"),QWe.forEach(t),Iot=i(je),_0=n(je,"LI",{});var UWe=s(_0);i6e=n(UWe,"STRONG",{});var tZt=s(i6e);Not=r(tZt,"mbart"),tZt.forEach(t),qot=r(UWe," \u2014 "),vte=n(UWe,"A",{href:!0});var aZt=s(vte);jot=r(aZt,"FlaxMBartForConditionalGeneration"),aZt.forEach(t),Dot=r(UWe," (mBART model)"),UWe.forEach(t),Got=i(je),u0=n(je,"LI",{});var HWe=s(u0);d6e=n(HWe,"STRONG",{});var nZt=s(d6e);Oot=r(nZt,"roberta"),nZt.forEach(t),Vot=r(HWe," \u2014 "),Fte=n(HWe,"A",{href:!0});var sZt=s(Fte);Xot=r(sZt,"FlaxRobertaForMaskedLM"),sZt.forEach(t),zot=r(HWe," (RoBERTa model)"),HWe.forEach(t),Wot=i(je),b0=n(je,"LI",{});var JWe=s(b0);c6e=n(JWe,"STRONG",{});var lZt=s(c6e);Qot=r(lZt,"roformer"),lZt.forEach(t),Uot=r(JWe," \u2014 "),Tte=n(JWe,"A",{href:!0});var iZt=s(Tte);Hot=r(iZt,"FlaxRoFormerForMaskedLM"),iZt.forEach(t),Jot=r(JWe," (RoFormer model)"),JWe.forEach(t),Yot=i(je),v0=n(je,"LI",{});var YWe=s(v0);f6e=n(YWe,"STRONG",{});var dZt=s(f6e);Kot=r(dZt,"xlm-roberta"),dZt.forEach(t),Zot=r(YWe," \u2014 "),Mte=n(YWe,"A",{href:!0});var cZt=s(Mte);ert=r(cZt,"FlaxXLMRobertaForMaskedLM"),cZt.forEach(t),ort=r(YWe," (XLM-RoBERTa model)"),YWe.forEach(t),je.forEach(t),rrt=i(wi),T(F0.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),GHe=i(f),Lf=n(f,"H2",{class:!0});var oKe=s(Lf);T0=n(oKe,"A",{id:!0,class:!0,href:!0});var fZt=s(T0);m6e=n(fZt,"SPAN",{});var mZt=s(m6e);T(Hk.$$.fragment,mZt),mZt.forEach(t),fZt.forEach(t),trt=i(oKe),g6e=n(oKe,"SPAN",{});var gZt=s(g6e);art=r(gZt,"FlaxAutoModelForSeq2SeqLM"),gZt.forEach(t),oKe.forEach(t),OHe=i(f),Er=n(f,"DIV",{class:!0});var Ai=s(Er);T(Jk.$$.fragment,Ai),nrt=i(Ai),yf=n(Ai,"P",{});var Cse=s(yf);srt=r(Cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ete=n(Cse,"A",{href:!0});var hZt=s(Ete);lrt=r(hZt,"from_pretrained()"),hZt.forEach(t),irt=r(Cse," class method or the "),Cte=n(Cse,"A",{href:!0});var pZt=s(Cte);drt=r(pZt,"from_config()"),pZt.forEach(t),crt=r(Cse,` class
method.`),Cse.forEach(t),frt=i(Ai),Yk=n(Ai,"P",{});var rKe=s(Yk);mrt=r(rKe,"This class cannot be instantiated directly using "),h6e=n(rKe,"CODE",{});var _Zt=s(h6e);grt=r(_Zt,"__init__()"),_Zt.forEach(t),hrt=r(rKe," (throws an error)."),rKe.forEach(t),prt=i(Ai),ta=n(Ai,"DIV",{class:!0});var HA=s(ta);T(Kk.$$.fragment,HA),_rt=i(HA),p6e=n(HA,"P",{});var uZt=s(p6e);urt=r(uZt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uZt.forEach(t),brt=i(HA),xf=n(HA,"P",{});var wse=s(xf);vrt=r(wse,`Note:
Loading a model from its configuration file does `),_6e=n(wse,"STRONG",{});var bZt=s(_6e);Frt=r(bZt,"not"),bZt.forEach(t),Trt=r(wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=n(wse,"A",{href:!0});var vZt=s(wte);Mrt=r(vZt,"from_pretrained()"),vZt.forEach(t),Ert=r(wse," to load the model weights."),wse.forEach(t),Crt=i(HA),T(M0.$$.fragment,HA),HA.forEach(t),wrt=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(Zk.$$.fragment,Li),Art=i(Li),u6e=n(Li,"P",{});var FZt=s(u6e);Lrt=r(FZt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FZt.forEach(t),yrt=i(Li),Bn=n(Li,"P",{});var JA=s(Bn);xrt=r(JA,"The model class to instantiate is selected based on the "),b6e=n(JA,"CODE",{});var TZt=s(b6e);$rt=r(TZt,"model_type"),TZt.forEach(t),krt=r(JA,` property of the config object (either
passed as an argument or loaded from `),v6e=n(JA,"CODE",{});var MZt=s(v6e);Srt=r(MZt,"pretrained_model_name_or_path"),MZt.forEach(t),Rrt=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=n(JA,"CODE",{});var EZt=s(F6e);Prt=r(EZt,"pretrained_model_name_or_path"),EZt.forEach(t),Brt=r(JA,":"),JA.forEach(t),Irt=i(Li),ke=n(Li,"UL",{});var De=s(ke);E0=n(De,"LI",{});var KWe=s(E0);T6e=n(KWe,"STRONG",{});var CZt=s(T6e);Nrt=r(CZt,"bart"),CZt.forEach(t),qrt=r(KWe," \u2014 "),Ate=n(KWe,"A",{href:!0});var wZt=s(Ate);jrt=r(wZt,"FlaxBartForConditionalGeneration"),wZt.forEach(t),Drt=r(KWe," (BART model)"),KWe.forEach(t),Grt=i(De),C0=n(De,"LI",{});var ZWe=s(C0);M6e=n(ZWe,"STRONG",{});var AZt=s(M6e);Ort=r(AZt,"blenderbot"),AZt.forEach(t),Vrt=r(ZWe," \u2014 "),Lte=n(ZWe,"A",{href:!0});var LZt=s(Lte);Xrt=r(LZt,"FlaxBlenderbotForConditionalGeneration"),LZt.forEach(t),zrt=r(ZWe," (Blenderbot model)"),ZWe.forEach(t),Wrt=i(De),w0=n(De,"LI",{});var eQe=s(w0);E6e=n(eQe,"STRONG",{});var yZt=s(E6e);Qrt=r(yZt,"blenderbot-small"),yZt.forEach(t),Urt=r(eQe," \u2014 "),yte=n(eQe,"A",{href:!0});var xZt=s(yte);Hrt=r(xZt,"FlaxBlenderbotSmallForConditionalGeneration"),xZt.forEach(t),Jrt=r(eQe," (BlenderbotSmall model)"),eQe.forEach(t),Yrt=i(De),A0=n(De,"LI",{});var oQe=s(A0);C6e=n(oQe,"STRONG",{});var $Zt=s(C6e);Krt=r($Zt,"encoder-decoder"),$Zt.forEach(t),Zrt=r(oQe," \u2014 "),xte=n(oQe,"A",{href:!0});var kZt=s(xte);ett=r(kZt,"FlaxEncoderDecoderModel"),kZt.forEach(t),ott=r(oQe," (Encoder decoder model)"),oQe.forEach(t),rtt=i(De),L0=n(De,"LI",{});var rQe=s(L0);w6e=n(rQe,"STRONG",{});var SZt=s(w6e);ttt=r(SZt,"longt5"),SZt.forEach(t),att=r(rQe," \u2014 "),$te=n(rQe,"A",{href:!0});var RZt=s($te);ntt=r(RZt,"FlaxLongT5ForConditionalGeneration"),RZt.forEach(t),stt=r(rQe," (LongT5 model)"),rQe.forEach(t),ltt=i(De),y0=n(De,"LI",{});var tQe=s(y0);A6e=n(tQe,"STRONG",{});var PZt=s(A6e);itt=r(PZt,"marian"),PZt.forEach(t),dtt=r(tQe," \u2014 "),kte=n(tQe,"A",{href:!0});var BZt=s(kte);ctt=r(BZt,"FlaxMarianMTModel"),BZt.forEach(t),ftt=r(tQe," (Marian model)"),tQe.forEach(t),mtt=i(De),x0=n(De,"LI",{});var aQe=s(x0);L6e=n(aQe,"STRONG",{});var IZt=s(L6e);gtt=r(IZt,"mbart"),IZt.forEach(t),htt=r(aQe," \u2014 "),Ste=n(aQe,"A",{href:!0});var NZt=s(Ste);ptt=r(NZt,"FlaxMBartForConditionalGeneration"),NZt.forEach(t),_tt=r(aQe," (mBART model)"),aQe.forEach(t),utt=i(De),$0=n(De,"LI",{});var nQe=s($0);y6e=n(nQe,"STRONG",{});var qZt=s(y6e);btt=r(qZt,"mt5"),qZt.forEach(t),vtt=r(nQe," \u2014 "),Rte=n(nQe,"A",{href:!0});var jZt=s(Rte);Ftt=r(jZt,"FlaxMT5ForConditionalGeneration"),jZt.forEach(t),Ttt=r(nQe," (MT5 model)"),nQe.forEach(t),Mtt=i(De),k0=n(De,"LI",{});var sQe=s(k0);x6e=n(sQe,"STRONG",{});var DZt=s(x6e);Ett=r(DZt,"pegasus"),DZt.forEach(t),Ctt=r(sQe," \u2014 "),Pte=n(sQe,"A",{href:!0});var GZt=s(Pte);wtt=r(GZt,"FlaxPegasusForConditionalGeneration"),GZt.forEach(t),Att=r(sQe," (Pegasus model)"),sQe.forEach(t),Ltt=i(De),S0=n(De,"LI",{});var lQe=s(S0);$6e=n(lQe,"STRONG",{});var OZt=s($6e);ytt=r(OZt,"t5"),OZt.forEach(t),xtt=r(lQe," \u2014 "),Bte=n(lQe,"A",{href:!0});var VZt=s(Bte);$tt=r(VZt,"FlaxT5ForConditionalGeneration"),VZt.forEach(t),ktt=r(lQe," (T5 model)"),lQe.forEach(t),De.forEach(t),Stt=i(Li),T(R0.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),VHe=i(f),$f=n(f,"H2",{class:!0});var tKe=s($f);P0=n(tKe,"A",{id:!0,class:!0,href:!0});var XZt=s(P0);k6e=n(XZt,"SPAN",{});var zZt=s(k6e);T(eS.$$.fragment,zZt),zZt.forEach(t),XZt.forEach(t),Rtt=i(tKe),S6e=n(tKe,"SPAN",{});var WZt=s(S6e);Ptt=r(WZt,"FlaxAutoModelForSequenceClassification"),WZt.forEach(t),tKe.forEach(t),XHe=i(f),Cr=n(f,"DIV",{class:!0});var yi=s(Cr);T(oS.$$.fragment,yi),Btt=i(yi),kf=n(yi,"P",{});var Ase=s(kf);Itt=r(Ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ite=n(Ase,"A",{href:!0});var QZt=s(Ite);Ntt=r(QZt,"from_pretrained()"),QZt.forEach(t),qtt=r(Ase," class method or the "),Nte=n(Ase,"A",{href:!0});var UZt=s(Nte);jtt=r(UZt,"from_config()"),UZt.forEach(t),Dtt=r(Ase,` class
method.`),Ase.forEach(t),Gtt=i(yi),rS=n(yi,"P",{});var aKe=s(rS);Ott=r(aKe,"This class cannot be instantiated directly using "),R6e=n(aKe,"CODE",{});var HZt=s(R6e);Vtt=r(HZt,"__init__()"),HZt.forEach(t),Xtt=r(aKe," (throws an error)."),aKe.forEach(t),ztt=i(yi),aa=n(yi,"DIV",{class:!0});var YA=s(aa);T(tS.$$.fragment,YA),Wtt=i(YA),P6e=n(YA,"P",{});var JZt=s(P6e);Qtt=r(JZt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JZt.forEach(t),Utt=i(YA),Sf=n(YA,"P",{});var Lse=s(Sf);Htt=r(Lse,`Note:
Loading a model from its configuration file does `),B6e=n(Lse,"STRONG",{});var YZt=s(B6e);Jtt=r(YZt,"not"),YZt.forEach(t),Ytt=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),qte=n(Lse,"A",{href:!0});var KZt=s(qte);Ktt=r(KZt,"from_pretrained()"),KZt.forEach(t),Ztt=r(Lse," to load the model weights."),Lse.forEach(t),eat=i(YA),T(B0.$$.fragment,YA),YA.forEach(t),oat=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(aS.$$.fragment,xi),rat=i(xi),I6e=n(xi,"P",{});var ZZt=s(I6e);tat=r(ZZt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZZt.forEach(t),aat=i(xi),In=n(xi,"P",{});var KA=s(In);nat=r(KA,"The model class to instantiate is selected based on the "),N6e=n(KA,"CODE",{});var eea=s(N6e);sat=r(eea,"model_type"),eea.forEach(t),lat=r(KA,` property of the config object (either
passed as an argument or loaded from `),q6e=n(KA,"CODE",{});var oea=s(q6e);iat=r(oea,"pretrained_model_name_or_path"),oea.forEach(t),dat=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j6e=n(KA,"CODE",{});var rea=s(j6e);cat=r(rea,"pretrained_model_name_or_path"),rea.forEach(t),fat=r(KA,":"),KA.forEach(t),mat=i(xi),Se=n(xi,"UL",{});var Ge=s(Se);I0=n(Ge,"LI",{});var iQe=s(I0);D6e=n(iQe,"STRONG",{});var tea=s(D6e);gat=r(tea,"albert"),tea.forEach(t),hat=r(iQe," \u2014 "),jte=n(iQe,"A",{href:!0});var aea=s(jte);pat=r(aea,"FlaxAlbertForSequenceClassification"),aea.forEach(t),_at=r(iQe," (ALBERT model)"),iQe.forEach(t),uat=i(Ge),N0=n(Ge,"LI",{});var dQe=s(N0);G6e=n(dQe,"STRONG",{});var nea=s(G6e);bat=r(nea,"bart"),nea.forEach(t),vat=r(dQe," \u2014 "),Dte=n(dQe,"A",{href:!0});var sea=s(Dte);Fat=r(sea,"FlaxBartForSequenceClassification"),sea.forEach(t),Tat=r(dQe," (BART model)"),dQe.forEach(t),Mat=i(Ge),q0=n(Ge,"LI",{});var cQe=s(q0);O6e=n(cQe,"STRONG",{});var lea=s(O6e);Eat=r(lea,"bert"),lea.forEach(t),Cat=r(cQe," \u2014 "),Gte=n(cQe,"A",{href:!0});var iea=s(Gte);wat=r(iea,"FlaxBertForSequenceClassification"),iea.forEach(t),Aat=r(cQe," (BERT model)"),cQe.forEach(t),Lat=i(Ge),j0=n(Ge,"LI",{});var fQe=s(j0);V6e=n(fQe,"STRONG",{});var dea=s(V6e);yat=r(dea,"big_bird"),dea.forEach(t),xat=r(fQe," \u2014 "),Ote=n(fQe,"A",{href:!0});var cea=s(Ote);$at=r(cea,"FlaxBigBirdForSequenceClassification"),cea.forEach(t),kat=r(fQe," (BigBird model)"),fQe.forEach(t),Sat=i(Ge),D0=n(Ge,"LI",{});var mQe=s(D0);X6e=n(mQe,"STRONG",{});var fea=s(X6e);Rat=r(fea,"distilbert"),fea.forEach(t),Pat=r(mQe," \u2014 "),Vte=n(mQe,"A",{href:!0});var mea=s(Vte);Bat=r(mea,"FlaxDistilBertForSequenceClassification"),mea.forEach(t),Iat=r(mQe," (DistilBERT model)"),mQe.forEach(t),Nat=i(Ge),G0=n(Ge,"LI",{});var gQe=s(G0);z6e=n(gQe,"STRONG",{});var gea=s(z6e);qat=r(gea,"electra"),gea.forEach(t),jat=r(gQe," \u2014 "),Xte=n(gQe,"A",{href:!0});var hea=s(Xte);Dat=r(hea,"FlaxElectraForSequenceClassification"),hea.forEach(t),Gat=r(gQe," (ELECTRA model)"),gQe.forEach(t),Oat=i(Ge),O0=n(Ge,"LI",{});var hQe=s(O0);W6e=n(hQe,"STRONG",{});var pea=s(W6e);Vat=r(pea,"mbart"),pea.forEach(t),Xat=r(hQe," \u2014 "),zte=n(hQe,"A",{href:!0});var _ea=s(zte);zat=r(_ea,"FlaxMBartForSequenceClassification"),_ea.forEach(t),Wat=r(hQe," (mBART model)"),hQe.forEach(t),Qat=i(Ge),V0=n(Ge,"LI",{});var pQe=s(V0);Q6e=n(pQe,"STRONG",{});var uea=s(Q6e);Uat=r(uea,"roberta"),uea.forEach(t),Hat=r(pQe," \u2014 "),Wte=n(pQe,"A",{href:!0});var bea=s(Wte);Jat=r(bea,"FlaxRobertaForSequenceClassification"),bea.forEach(t),Yat=r(pQe," (RoBERTa model)"),pQe.forEach(t),Kat=i(Ge),X0=n(Ge,"LI",{});var _Qe=s(X0);U6e=n(_Qe,"STRONG",{});var vea=s(U6e);Zat=r(vea,"roformer"),vea.forEach(t),ent=r(_Qe," \u2014 "),Qte=n(_Qe,"A",{href:!0});var Fea=s(Qte);ont=r(Fea,"FlaxRoFormerForSequenceClassification"),Fea.forEach(t),rnt=r(_Qe," (RoFormer model)"),_Qe.forEach(t),tnt=i(Ge),z0=n(Ge,"LI",{});var uQe=s(z0);H6e=n(uQe,"STRONG",{});var Tea=s(H6e);ant=r(Tea,"xlm-roberta"),Tea.forEach(t),nnt=r(uQe," \u2014 "),Ute=n(uQe,"A",{href:!0});var Mea=s(Ute);snt=r(Mea,"FlaxXLMRobertaForSequenceClassification"),Mea.forEach(t),lnt=r(uQe," (XLM-RoBERTa model)"),uQe.forEach(t),Ge.forEach(t),int=i(xi),T(W0.$$.fragment,xi),xi.forEach(t),yi.forEach(t),zHe=i(f),Rf=n(f,"H2",{class:!0});var nKe=s(Rf);Q0=n(nKe,"A",{id:!0,class:!0,href:!0});var Eea=s(Q0);J6e=n(Eea,"SPAN",{});var Cea=s(J6e);T(nS.$$.fragment,Cea),Cea.forEach(t),Eea.forEach(t),dnt=i(nKe),Y6e=n(nKe,"SPAN",{});var wea=s(Y6e);cnt=r(wea,"FlaxAutoModelForQuestionAnswering"),wea.forEach(t),nKe.forEach(t),WHe=i(f),wr=n(f,"DIV",{class:!0});var $i=s(wr);T(sS.$$.fragment,$i),fnt=i($i),Pf=n($i,"P",{});var yse=s(Pf);mnt=r(yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hte=n(yse,"A",{href:!0});var Aea=s(Hte);gnt=r(Aea,"from_pretrained()"),Aea.forEach(t),hnt=r(yse," class method or the "),Jte=n(yse,"A",{href:!0});var Lea=s(Jte);pnt=r(Lea,"from_config()"),Lea.forEach(t),_nt=r(yse,` class
method.`),yse.forEach(t),unt=i($i),lS=n($i,"P",{});var sKe=s(lS);bnt=r(sKe,"This class cannot be instantiated directly using "),K6e=n(sKe,"CODE",{});var yea=s(K6e);vnt=r(yea,"__init__()"),yea.forEach(t),Fnt=r(sKe," (throws an error)."),sKe.forEach(t),Tnt=i($i),na=n($i,"DIV",{class:!0});var ZA=s(na);T(iS.$$.fragment,ZA),Mnt=i(ZA),Z6e=n(ZA,"P",{});var xea=s(Z6e);Ent=r(xea,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xea.forEach(t),Cnt=i(ZA),Bf=n(ZA,"P",{});var xse=s(Bf);wnt=r(xse,`Note:
Loading a model from its configuration file does `),eAe=n(xse,"STRONG",{});var $ea=s(eAe);Ant=r($ea,"not"),$ea.forEach(t),Lnt=r(xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yte=n(xse,"A",{href:!0});var kea=s(Yte);ynt=r(kea,"from_pretrained()"),kea.forEach(t),xnt=r(xse," to load the model weights."),xse.forEach(t),$nt=i(ZA),T(U0.$$.fragment,ZA),ZA.forEach(t),knt=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(dS.$$.fragment,ki),Snt=i(ki),oAe=n(ki,"P",{});var Sea=s(oAe);Rnt=r(Sea,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sea.forEach(t),Pnt=i(ki),Nn=n(ki,"P",{});var eL=s(Nn);Bnt=r(eL,"The model class to instantiate is selected based on the "),rAe=n(eL,"CODE",{});var Rea=s(rAe);Int=r(Rea,"model_type"),Rea.forEach(t),Nnt=r(eL,` property of the config object (either
passed as an argument or loaded from `),tAe=n(eL,"CODE",{});var Pea=s(tAe);qnt=r(Pea,"pretrained_model_name_or_path"),Pea.forEach(t),jnt=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aAe=n(eL,"CODE",{});var Bea=s(aAe);Dnt=r(Bea,"pretrained_model_name_or_path"),Bea.forEach(t),Gnt=r(eL,":"),eL.forEach(t),Ont=i(ki),Re=n(ki,"UL",{});var Oe=s(Re);H0=n(Oe,"LI",{});var bQe=s(H0);nAe=n(bQe,"STRONG",{});var Iea=s(nAe);Vnt=r(Iea,"albert"),Iea.forEach(t),Xnt=r(bQe," \u2014 "),Kte=n(bQe,"A",{href:!0});var Nea=s(Kte);znt=r(Nea,"FlaxAlbertForQuestionAnswering"),Nea.forEach(t),Wnt=r(bQe," (ALBERT model)"),bQe.forEach(t),Qnt=i(Oe),J0=n(Oe,"LI",{});var vQe=s(J0);sAe=n(vQe,"STRONG",{});var qea=s(sAe);Unt=r(qea,"bart"),qea.forEach(t),Hnt=r(vQe," \u2014 "),Zte=n(vQe,"A",{href:!0});var jea=s(Zte);Jnt=r(jea,"FlaxBartForQuestionAnswering"),jea.forEach(t),Ynt=r(vQe," (BART model)"),vQe.forEach(t),Knt=i(Oe),Y0=n(Oe,"LI",{});var FQe=s(Y0);lAe=n(FQe,"STRONG",{});var Dea=s(lAe);Znt=r(Dea,"bert"),Dea.forEach(t),est=r(FQe," \u2014 "),eae=n(FQe,"A",{href:!0});var Gea=s(eae);ost=r(Gea,"FlaxBertForQuestionAnswering"),Gea.forEach(t),rst=r(FQe," (BERT model)"),FQe.forEach(t),tst=i(Oe),K0=n(Oe,"LI",{});var TQe=s(K0);iAe=n(TQe,"STRONG",{});var Oea=s(iAe);ast=r(Oea,"big_bird"),Oea.forEach(t),nst=r(TQe," \u2014 "),oae=n(TQe,"A",{href:!0});var Vea=s(oae);sst=r(Vea,"FlaxBigBirdForQuestionAnswering"),Vea.forEach(t),lst=r(TQe," (BigBird model)"),TQe.forEach(t),ist=i(Oe),Z0=n(Oe,"LI",{});var MQe=s(Z0);dAe=n(MQe,"STRONG",{});var Xea=s(dAe);dst=r(Xea,"distilbert"),Xea.forEach(t),cst=r(MQe," \u2014 "),rae=n(MQe,"A",{href:!0});var zea=s(rae);fst=r(zea,"FlaxDistilBertForQuestionAnswering"),zea.forEach(t),mst=r(MQe," (DistilBERT model)"),MQe.forEach(t),gst=i(Oe),ew=n(Oe,"LI",{});var EQe=s(ew);cAe=n(EQe,"STRONG",{});var Wea=s(cAe);hst=r(Wea,"electra"),Wea.forEach(t),pst=r(EQe," \u2014 "),tae=n(EQe,"A",{href:!0});var Qea=s(tae);_st=r(Qea,"FlaxElectraForQuestionAnswering"),Qea.forEach(t),ust=r(EQe," (ELECTRA model)"),EQe.forEach(t),bst=i(Oe),ow=n(Oe,"LI",{});var CQe=s(ow);fAe=n(CQe,"STRONG",{});var Uea=s(fAe);vst=r(Uea,"mbart"),Uea.forEach(t),Fst=r(CQe," \u2014 "),aae=n(CQe,"A",{href:!0});var Hea=s(aae);Tst=r(Hea,"FlaxMBartForQuestionAnswering"),Hea.forEach(t),Mst=r(CQe," (mBART model)"),CQe.forEach(t),Est=i(Oe),rw=n(Oe,"LI",{});var wQe=s(rw);mAe=n(wQe,"STRONG",{});var Jea=s(mAe);Cst=r(Jea,"roberta"),Jea.forEach(t),wst=r(wQe," \u2014 "),nae=n(wQe,"A",{href:!0});var Yea=s(nae);Ast=r(Yea,"FlaxRobertaForQuestionAnswering"),Yea.forEach(t),Lst=r(wQe," (RoBERTa model)"),wQe.forEach(t),yst=i(Oe),tw=n(Oe,"LI",{});var AQe=s(tw);gAe=n(AQe,"STRONG",{});var Kea=s(gAe);xst=r(Kea,"roformer"),Kea.forEach(t),$st=r(AQe," \u2014 "),sae=n(AQe,"A",{href:!0});var Zea=s(sae);kst=r(Zea,"FlaxRoFormerForQuestionAnswering"),Zea.forEach(t),Sst=r(AQe," (RoFormer model)"),AQe.forEach(t),Rst=i(Oe),aw=n(Oe,"LI",{});var LQe=s(aw);hAe=n(LQe,"STRONG",{});var eoa=s(hAe);Pst=r(eoa,"xlm-roberta"),eoa.forEach(t),Bst=r(LQe," \u2014 "),lae=n(LQe,"A",{href:!0});var ooa=s(lae);Ist=r(ooa,"FlaxXLMRobertaForQuestionAnswering"),ooa.forEach(t),Nst=r(LQe," (XLM-RoBERTa model)"),LQe.forEach(t),Oe.forEach(t),qst=i(ki),T(nw.$$.fragment,ki),ki.forEach(t),$i.forEach(t),QHe=i(f),If=n(f,"H2",{class:!0});var lKe=s(If);sw=n(lKe,"A",{id:!0,class:!0,href:!0});var roa=s(sw);pAe=n(roa,"SPAN",{});var toa=s(pAe);T(cS.$$.fragment,toa),toa.forEach(t),roa.forEach(t),jst=i(lKe),_Ae=n(lKe,"SPAN",{});var aoa=s(_Ae);Dst=r(aoa,"FlaxAutoModelForTokenClassification"),aoa.forEach(t),lKe.forEach(t),UHe=i(f),Ar=n(f,"DIV",{class:!0});var Si=s(Ar);T(fS.$$.fragment,Si),Gst=i(Si),Nf=n(Si,"P",{});var $se=s(Nf);Ost=r($se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iae=n($se,"A",{href:!0});var noa=s(iae);Vst=r(noa,"from_pretrained()"),noa.forEach(t),Xst=r($se," class method or the "),dae=n($se,"A",{href:!0});var soa=s(dae);zst=r(soa,"from_config()"),soa.forEach(t),Wst=r($se,` class
method.`),$se.forEach(t),Qst=i(Si),mS=n(Si,"P",{});var iKe=s(mS);Ust=r(iKe,"This class cannot be instantiated directly using "),uAe=n(iKe,"CODE",{});var loa=s(uAe);Hst=r(loa,"__init__()"),loa.forEach(t),Jst=r(iKe," (throws an error)."),iKe.forEach(t),Yst=i(Si),sa=n(Si,"DIV",{class:!0});var oL=s(sa);T(gS.$$.fragment,oL),Kst=i(oL),bAe=n(oL,"P",{});var ioa=s(bAe);Zst=r(ioa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ioa.forEach(t),elt=i(oL),qf=n(oL,"P",{});var kse=s(qf);olt=r(kse,`Note:
Loading a model from its configuration file does `),vAe=n(kse,"STRONG",{});var doa=s(vAe);rlt=r(doa,"not"),doa.forEach(t),tlt=r(kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),cae=n(kse,"A",{href:!0});var coa=s(cae);alt=r(coa,"from_pretrained()"),coa.forEach(t),nlt=r(kse," to load the model weights."),kse.forEach(t),slt=i(oL),T(lw.$$.fragment,oL),oL.forEach(t),llt=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(hS.$$.fragment,Ri),ilt=i(Ri),FAe=n(Ri,"P",{});var foa=s(FAe);dlt=r(foa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),foa.forEach(t),clt=i(Ri),qn=n(Ri,"P",{});var rL=s(qn);flt=r(rL,"The model class to instantiate is selected based on the "),TAe=n(rL,"CODE",{});var moa=s(TAe);mlt=r(moa,"model_type"),moa.forEach(t),glt=r(rL,` property of the config object (either
passed as an argument or loaded from `),MAe=n(rL,"CODE",{});var goa=s(MAe);hlt=r(goa,"pretrained_model_name_or_path"),goa.forEach(t),plt=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EAe=n(rL,"CODE",{});var hoa=s(EAe);_lt=r(hoa,"pretrained_model_name_or_path"),hoa.forEach(t),ult=r(rL,":"),rL.forEach(t),blt=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);iw=n(Co,"LI",{});var yQe=s(iw);CAe=n(yQe,"STRONG",{});var poa=s(CAe);vlt=r(poa,"albert"),poa.forEach(t),Flt=r(yQe," \u2014 "),fae=n(yQe,"A",{href:!0});var _oa=s(fae);Tlt=r(_oa,"FlaxAlbertForTokenClassification"),_oa.forEach(t),Mlt=r(yQe," (ALBERT model)"),yQe.forEach(t),Elt=i(Co),dw=n(Co,"LI",{});var xQe=s(dw);wAe=n(xQe,"STRONG",{});var uoa=s(wAe);Clt=r(uoa,"bert"),uoa.forEach(t),wlt=r(xQe," \u2014 "),mae=n(xQe,"A",{href:!0});var boa=s(mae);Alt=r(boa,"FlaxBertForTokenClassification"),boa.forEach(t),Llt=r(xQe," (BERT model)"),xQe.forEach(t),ylt=i(Co),cw=n(Co,"LI",{});var $Qe=s(cw);AAe=n($Qe,"STRONG",{});var voa=s(AAe);xlt=r(voa,"big_bird"),voa.forEach(t),$lt=r($Qe," \u2014 "),gae=n($Qe,"A",{href:!0});var Foa=s(gae);klt=r(Foa,"FlaxBigBirdForTokenClassification"),Foa.forEach(t),Slt=r($Qe," (BigBird model)"),$Qe.forEach(t),Rlt=i(Co),fw=n(Co,"LI",{});var kQe=s(fw);LAe=n(kQe,"STRONG",{});var Toa=s(LAe);Plt=r(Toa,"distilbert"),Toa.forEach(t),Blt=r(kQe," \u2014 "),hae=n(kQe,"A",{href:!0});var Moa=s(hae);Ilt=r(Moa,"FlaxDistilBertForTokenClassification"),Moa.forEach(t),Nlt=r(kQe," (DistilBERT model)"),kQe.forEach(t),qlt=i(Co),mw=n(Co,"LI",{});var SQe=s(mw);yAe=n(SQe,"STRONG",{});var Eoa=s(yAe);jlt=r(Eoa,"electra"),Eoa.forEach(t),Dlt=r(SQe," \u2014 "),pae=n(SQe,"A",{href:!0});var Coa=s(pae);Glt=r(Coa,"FlaxElectraForTokenClassification"),Coa.forEach(t),Olt=r(SQe," (ELECTRA model)"),SQe.forEach(t),Vlt=i(Co),gw=n(Co,"LI",{});var RQe=s(gw);xAe=n(RQe,"STRONG",{});var woa=s(xAe);Xlt=r(woa,"roberta"),woa.forEach(t),zlt=r(RQe," \u2014 "),_ae=n(RQe,"A",{href:!0});var Aoa=s(_ae);Wlt=r(Aoa,"FlaxRobertaForTokenClassification"),Aoa.forEach(t),Qlt=r(RQe," (RoBERTa model)"),RQe.forEach(t),Ult=i(Co),hw=n(Co,"LI",{});var PQe=s(hw);$Ae=n(PQe,"STRONG",{});var Loa=s($Ae);Hlt=r(Loa,"roformer"),Loa.forEach(t),Jlt=r(PQe," \u2014 "),uae=n(PQe,"A",{href:!0});var yoa=s(uae);Ylt=r(yoa,"FlaxRoFormerForTokenClassification"),yoa.forEach(t),Klt=r(PQe," (RoFormer model)"),PQe.forEach(t),Zlt=i(Co),pw=n(Co,"LI",{});var BQe=s(pw);kAe=n(BQe,"STRONG",{});var xoa=s(kAe);eit=r(xoa,"xlm-roberta"),xoa.forEach(t),oit=r(BQe," \u2014 "),bae=n(BQe,"A",{href:!0});var $oa=s(bae);rit=r($oa,"FlaxXLMRobertaForTokenClassification"),$oa.forEach(t),tit=r(BQe," (XLM-RoBERTa model)"),BQe.forEach(t),Co.forEach(t),ait=i(Ri),T(_w.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),HHe=i(f),jf=n(f,"H2",{class:!0});var dKe=s(jf);uw=n(dKe,"A",{id:!0,class:!0,href:!0});var koa=s(uw);SAe=n(koa,"SPAN",{});var Soa=s(SAe);T(pS.$$.fragment,Soa),Soa.forEach(t),koa.forEach(t),nit=i(dKe),RAe=n(dKe,"SPAN",{});var Roa=s(RAe);sit=r(Roa,"FlaxAutoModelForMultipleChoice"),Roa.forEach(t),dKe.forEach(t),JHe=i(f),Lr=n(f,"DIV",{class:!0});var Pi=s(Lr);T(_S.$$.fragment,Pi),lit=i(Pi),Df=n(Pi,"P",{});var Sse=s(Df);iit=r(Sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vae=n(Sse,"A",{href:!0});var Poa=s(vae);dit=r(Poa,"from_pretrained()"),Poa.forEach(t),cit=r(Sse," class method or the "),Fae=n(Sse,"A",{href:!0});var Boa=s(Fae);fit=r(Boa,"from_config()"),Boa.forEach(t),mit=r(Sse,` class
method.`),Sse.forEach(t),git=i(Pi),uS=n(Pi,"P",{});var cKe=s(uS);hit=r(cKe,"This class cannot be instantiated directly using "),PAe=n(cKe,"CODE",{});var Ioa=s(PAe);pit=r(Ioa,"__init__()"),Ioa.forEach(t),_it=r(cKe," (throws an error)."),cKe.forEach(t),uit=i(Pi),la=n(Pi,"DIV",{class:!0});var tL=s(la);T(bS.$$.fragment,tL),bit=i(tL),BAe=n(tL,"P",{});var Noa=s(BAe);vit=r(Noa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Noa.forEach(t),Fit=i(tL),Gf=n(tL,"P",{});var Rse=s(Gf);Tit=r(Rse,`Note:
Loading a model from its configuration file does `),IAe=n(Rse,"STRONG",{});var qoa=s(IAe);Mit=r(qoa,"not"),qoa.forEach(t),Eit=r(Rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tae=n(Rse,"A",{href:!0});var joa=s(Tae);Cit=r(joa,"from_pretrained()"),joa.forEach(t),wit=r(Rse," to load the model weights."),Rse.forEach(t),Ait=i(tL),T(bw.$$.fragment,tL),tL.forEach(t),Lit=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(vS.$$.fragment,Bi),yit=i(Bi),NAe=n(Bi,"P",{});var Doa=s(NAe);xit=r(Doa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Doa.forEach(t),$it=i(Bi),jn=n(Bi,"P",{});var aL=s(jn);kit=r(aL,"The model class to instantiate is selected based on the "),qAe=n(aL,"CODE",{});var Goa=s(qAe);Sit=r(Goa,"model_type"),Goa.forEach(t),Rit=r(aL,` property of the config object (either
passed as an argument or loaded from `),jAe=n(aL,"CODE",{});var Ooa=s(jAe);Pit=r(Ooa,"pretrained_model_name_or_path"),Ooa.forEach(t),Bit=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DAe=n(aL,"CODE",{});var Voa=s(DAe);Iit=r(Voa,"pretrained_model_name_or_path"),Voa.forEach(t),Nit=r(aL,":"),aL.forEach(t),qit=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);vw=n(wo,"LI",{});var IQe=s(vw);GAe=n(IQe,"STRONG",{});var Xoa=s(GAe);jit=r(Xoa,"albert"),Xoa.forEach(t),Dit=r(IQe," \u2014 "),Mae=n(IQe,"A",{href:!0});var zoa=s(Mae);Git=r(zoa,"FlaxAlbertForMultipleChoice"),zoa.forEach(t),Oit=r(IQe," (ALBERT model)"),IQe.forEach(t),Vit=i(wo),Fw=n(wo,"LI",{});var NQe=s(Fw);OAe=n(NQe,"STRONG",{});var Woa=s(OAe);Xit=r(Woa,"bert"),Woa.forEach(t),zit=r(NQe," \u2014 "),Eae=n(NQe,"A",{href:!0});var Qoa=s(Eae);Wit=r(Qoa,"FlaxBertForMultipleChoice"),Qoa.forEach(t),Qit=r(NQe," (BERT model)"),NQe.forEach(t),Uit=i(wo),Tw=n(wo,"LI",{});var qQe=s(Tw);VAe=n(qQe,"STRONG",{});var Uoa=s(VAe);Hit=r(Uoa,"big_bird"),Uoa.forEach(t),Jit=r(qQe," \u2014 "),Cae=n(qQe,"A",{href:!0});var Hoa=s(Cae);Yit=r(Hoa,"FlaxBigBirdForMultipleChoice"),Hoa.forEach(t),Kit=r(qQe," (BigBird model)"),qQe.forEach(t),Zit=i(wo),Mw=n(wo,"LI",{});var jQe=s(Mw);XAe=n(jQe,"STRONG",{});var Joa=s(XAe);edt=r(Joa,"distilbert"),Joa.forEach(t),odt=r(jQe," \u2014 "),wae=n(jQe,"A",{href:!0});var Yoa=s(wae);rdt=r(Yoa,"FlaxDistilBertForMultipleChoice"),Yoa.forEach(t),tdt=r(jQe," (DistilBERT model)"),jQe.forEach(t),adt=i(wo),Ew=n(wo,"LI",{});var DQe=s(Ew);zAe=n(DQe,"STRONG",{});var Koa=s(zAe);ndt=r(Koa,"electra"),Koa.forEach(t),sdt=r(DQe," \u2014 "),Aae=n(DQe,"A",{href:!0});var Zoa=s(Aae);ldt=r(Zoa,"FlaxElectraForMultipleChoice"),Zoa.forEach(t),idt=r(DQe," (ELECTRA model)"),DQe.forEach(t),ddt=i(wo),Cw=n(wo,"LI",{});var GQe=s(Cw);WAe=n(GQe,"STRONG",{});var era=s(WAe);cdt=r(era,"roberta"),era.forEach(t),fdt=r(GQe," \u2014 "),Lae=n(GQe,"A",{href:!0});var ora=s(Lae);mdt=r(ora,"FlaxRobertaForMultipleChoice"),ora.forEach(t),gdt=r(GQe," (RoBERTa model)"),GQe.forEach(t),hdt=i(wo),ww=n(wo,"LI",{});var OQe=s(ww);QAe=n(OQe,"STRONG",{});var rra=s(QAe);pdt=r(rra,"roformer"),rra.forEach(t),_dt=r(OQe," \u2014 "),yae=n(OQe,"A",{href:!0});var tra=s(yae);udt=r(tra,"FlaxRoFormerForMultipleChoice"),tra.forEach(t),bdt=r(OQe," (RoFormer model)"),OQe.forEach(t),vdt=i(wo),Aw=n(wo,"LI",{});var VQe=s(Aw);UAe=n(VQe,"STRONG",{});var ara=s(UAe);Fdt=r(ara,"xlm-roberta"),ara.forEach(t),Tdt=r(VQe," \u2014 "),xae=n(VQe,"A",{href:!0});var nra=s(xae);Mdt=r(nra,"FlaxXLMRobertaForMultipleChoice"),nra.forEach(t),Edt=r(VQe," (XLM-RoBERTa model)"),VQe.forEach(t),wo.forEach(t),Cdt=i(Bi),T(Lw.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),YHe=i(f),Of=n(f,"H2",{class:!0});var fKe=s(Of);yw=n(fKe,"A",{id:!0,class:!0,href:!0});var sra=s(yw);HAe=n(sra,"SPAN",{});var lra=s(HAe);T(FS.$$.fragment,lra),lra.forEach(t),sra.forEach(t),wdt=i(fKe),JAe=n(fKe,"SPAN",{});var ira=s(JAe);Adt=r(ira,"FlaxAutoModelForNextSentencePrediction"),ira.forEach(t),fKe.forEach(t),KHe=i(f),yr=n(f,"DIV",{class:!0});var Ii=s(yr);T(TS.$$.fragment,Ii),Ldt=i(Ii),Vf=n(Ii,"P",{});var Pse=s(Vf);ydt=r(Pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$ae=n(Pse,"A",{href:!0});var dra=s($ae);xdt=r(dra,"from_pretrained()"),dra.forEach(t),$dt=r(Pse," class method or the "),kae=n(Pse,"A",{href:!0});var cra=s(kae);kdt=r(cra,"from_config()"),cra.forEach(t),Sdt=r(Pse,` class
method.`),Pse.forEach(t),Rdt=i(Ii),MS=n(Ii,"P",{});var mKe=s(MS);Pdt=r(mKe,"This class cannot be instantiated directly using "),YAe=n(mKe,"CODE",{});var fra=s(YAe);Bdt=r(fra,"__init__()"),fra.forEach(t),Idt=r(mKe," (throws an error)."),mKe.forEach(t),Ndt=i(Ii),ia=n(Ii,"DIV",{class:!0});var nL=s(ia);T(ES.$$.fragment,nL),qdt=i(nL),KAe=n(nL,"P",{});var mra=s(KAe);jdt=r(mra,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mra.forEach(t),Ddt=i(nL),Xf=n(nL,"P",{});var Bse=s(Xf);Gdt=r(Bse,`Note:
Loading a model from its configuration file does `),ZAe=n(Bse,"STRONG",{});var gra=s(ZAe);Odt=r(gra,"not"),gra.forEach(t),Vdt=r(Bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=n(Bse,"A",{href:!0});var hra=s(Sae);Xdt=r(hra,"from_pretrained()"),hra.forEach(t),zdt=r(Bse," to load the model weights."),Bse.forEach(t),Wdt=i(nL),T(xw.$$.fragment,nL),nL.forEach(t),Qdt=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(CS.$$.fragment,Ni),Udt=i(Ni),eLe=n(Ni,"P",{});var pra=s(eLe);Hdt=r(pra,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pra.forEach(t),Jdt=i(Ni),Dn=n(Ni,"P",{});var sL=s(Dn);Ydt=r(sL,"The model class to instantiate is selected based on the "),oLe=n(sL,"CODE",{});var _ra=s(oLe);Kdt=r(_ra,"model_type"),_ra.forEach(t),Zdt=r(sL,` property of the config object (either
passed as an argument or loaded from `),rLe=n(sL,"CODE",{});var ura=s(rLe);ect=r(ura,"pretrained_model_name_or_path"),ura.forEach(t),oct=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tLe=n(sL,"CODE",{});var bra=s(tLe);rct=r(bra,"pretrained_model_name_or_path"),bra.forEach(t),tct=r(sL,":"),sL.forEach(t),act=i(Ni),aLe=n(Ni,"UL",{});var vra=s(aLe);$w=n(vra,"LI",{});var XQe=s($w);nLe=n(XQe,"STRONG",{});var Fra=s(nLe);nct=r(Fra,"bert"),Fra.forEach(t),sct=r(XQe," \u2014 "),Rae=n(XQe,"A",{href:!0});var Tra=s(Rae);lct=r(Tra,"FlaxBertForNextSentencePrediction"),Tra.forEach(t),ict=r(XQe," (BERT model)"),XQe.forEach(t),vra.forEach(t),dct=i(Ni),T(kw.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),ZHe=i(f),zf=n(f,"H2",{class:!0});var gKe=s(zf);Sw=n(gKe,"A",{id:!0,class:!0,href:!0});var Mra=s(Sw);sLe=n(Mra,"SPAN",{});var Era=s(sLe);T(wS.$$.fragment,Era),Era.forEach(t),Mra.forEach(t),cct=i(gKe),lLe=n(gKe,"SPAN",{});var Cra=s(lLe);fct=r(Cra,"FlaxAutoModelForImageClassification"),Cra.forEach(t),gKe.forEach(t),eJe=i(f),xr=n(f,"DIV",{class:!0});var qi=s(xr);T(AS.$$.fragment,qi),mct=i(qi),Wf=n(qi,"P",{});var Ise=s(Wf);gct=r(Ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Pae=n(Ise,"A",{href:!0});var wra=s(Pae);hct=r(wra,"from_pretrained()"),wra.forEach(t),pct=r(Ise," class method or the "),Bae=n(Ise,"A",{href:!0});var Ara=s(Bae);_ct=r(Ara,"from_config()"),Ara.forEach(t),uct=r(Ise,` class
method.`),Ise.forEach(t),bct=i(qi),LS=n(qi,"P",{});var hKe=s(LS);vct=r(hKe,"This class cannot be instantiated directly using "),iLe=n(hKe,"CODE",{});var Lra=s(iLe);Fct=r(Lra,"__init__()"),Lra.forEach(t),Tct=r(hKe," (throws an error)."),hKe.forEach(t),Mct=i(qi),da=n(qi,"DIV",{class:!0});var lL=s(da);T(yS.$$.fragment,lL),Ect=i(lL),dLe=n(lL,"P",{});var yra=s(dLe);Cct=r(yra,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yra.forEach(t),wct=i(lL),Qf=n(lL,"P",{});var Nse=s(Qf);Act=r(Nse,`Note:
Loading a model from its configuration file does `),cLe=n(Nse,"STRONG",{});var xra=s(cLe);Lct=r(xra,"not"),xra.forEach(t),yct=r(Nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iae=n(Nse,"A",{href:!0});var $ra=s(Iae);xct=r($ra,"from_pretrained()"),$ra.forEach(t),$ct=r(Nse," to load the model weights."),Nse.forEach(t),kct=i(lL),T(Rw.$$.fragment,lL),lL.forEach(t),Sct=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T(xS.$$.fragment,ji),Rct=i(ji),fLe=n(ji,"P",{});var kra=s(fLe);Pct=r(kra,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kra.forEach(t),Bct=i(ji),Gn=n(ji,"P",{});var iL=s(Gn);Ict=r(iL,"The model class to instantiate is selected based on the "),mLe=n(iL,"CODE",{});var Sra=s(mLe);Nct=r(Sra,"model_type"),Sra.forEach(t),qct=r(iL,` property of the config object (either
passed as an argument or loaded from `),gLe=n(iL,"CODE",{});var Rra=s(gLe);jct=r(Rra,"pretrained_model_name_or_path"),Rra.forEach(t),Dct=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hLe=n(iL,"CODE",{});var Pra=s(hLe);Gct=r(Pra,"pretrained_model_name_or_path"),Pra.forEach(t),Oct=r(iL,":"),iL.forEach(t),Vct=i(ji),$S=n(ji,"UL",{});var pKe=s($S);Pw=n(pKe,"LI",{});var zQe=s(Pw);pLe=n(zQe,"STRONG",{});var Bra=s(pLe);Xct=r(Bra,"beit"),Bra.forEach(t),zct=r(zQe," \u2014 "),Nae=n(zQe,"A",{href:!0});var Ira=s(Nae);Wct=r(Ira,"FlaxBeitForImageClassification"),Ira.forEach(t),Qct=r(zQe," (BEiT model)"),zQe.forEach(t),Uct=i(pKe),Bw=n(pKe,"LI",{});var WQe=s(Bw);_Le=n(WQe,"STRONG",{});var Nra=s(_Le);Hct=r(Nra,"vit"),Nra.forEach(t),Jct=r(WQe," \u2014 "),qae=n(WQe,"A",{href:!0});var qra=s(qae);Yct=r(qra,"FlaxViTForImageClassification"),qra.forEach(t),Kct=r(WQe," (ViT model)"),WQe.forEach(t),pKe.forEach(t),Zct=i(ji),T(Iw.$$.fragment,ji),ji.forEach(t),qi.forEach(t),oJe=i(f),Uf=n(f,"H2",{class:!0});var _Ke=s(Uf);Nw=n(_Ke,"A",{id:!0,class:!0,href:!0});var jra=s(Nw);uLe=n(jra,"SPAN",{});var Dra=s(uLe);T(kS.$$.fragment,Dra),Dra.forEach(t),jra.forEach(t),eft=i(_Ke),bLe=n(_Ke,"SPAN",{});var Gra=s(bLe);oft=r(Gra,"FlaxAutoModelForVision2Seq"),Gra.forEach(t),_Ke.forEach(t),rJe=i(f),$r=n(f,"DIV",{class:!0});var Di=s($r);T(SS.$$.fragment,Di),rft=i(Di),Hf=n(Di,"P",{});var qse=s(Hf);tft=r(qse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jae=n(qse,"A",{href:!0});var Ora=s(jae);aft=r(Ora,"from_pretrained()"),Ora.forEach(t),nft=r(qse," class method or the "),Dae=n(qse,"A",{href:!0});var Vra=s(Dae);sft=r(Vra,"from_config()"),Vra.forEach(t),lft=r(qse,` class
method.`),qse.forEach(t),ift=i(Di),RS=n(Di,"P",{});var uKe=s(RS);dft=r(uKe,"This class cannot be instantiated directly using "),vLe=n(uKe,"CODE",{});var Xra=s(vLe);cft=r(Xra,"__init__()"),Xra.forEach(t),fft=r(uKe," (throws an error)."),uKe.forEach(t),mft=i(Di),ca=n(Di,"DIV",{class:!0});var dL=s(ca);T(PS.$$.fragment,dL),gft=i(dL),FLe=n(dL,"P",{});var zra=s(FLe);hft=r(zra,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zra.forEach(t),pft=i(dL),Jf=n(dL,"P",{});var jse=s(Jf);_ft=r(jse,`Note:
Loading a model from its configuration file does `),TLe=n(jse,"STRONG",{});var Wra=s(TLe);uft=r(Wra,"not"),Wra.forEach(t),bft=r(jse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gae=n(jse,"A",{href:!0});var Qra=s(Gae);vft=r(Qra,"from_pretrained()"),Qra.forEach(t),Fft=r(jse," to load the model weights."),jse.forEach(t),Tft=i(dL),T(qw.$$.fragment,dL),dL.forEach(t),Mft=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(BS.$$.fragment,Gi),Eft=i(Gi),MLe=n(Gi,"P",{});var Ura=s(MLe);Cft=r(Ura,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ura.forEach(t),wft=i(Gi),On=n(Gi,"P",{});var cL=s(On);Aft=r(cL,"The model class to instantiate is selected based on the "),ELe=n(cL,"CODE",{});var Hra=s(ELe);Lft=r(Hra,"model_type"),Hra.forEach(t),yft=r(cL,` property of the config object (either
passed as an argument or loaded from `),CLe=n(cL,"CODE",{});var Jra=s(CLe);xft=r(Jra,"pretrained_model_name_or_path"),Jra.forEach(t),$ft=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wLe=n(cL,"CODE",{});var Yra=s(wLe);kft=r(Yra,"pretrained_model_name_or_path"),Yra.forEach(t),Sft=r(cL,":"),cL.forEach(t),Rft=i(Gi),ALe=n(Gi,"UL",{});var Kra=s(ALe);jw=n(Kra,"LI",{});var QQe=s(jw);LLe=n(QQe,"STRONG",{});var Zra=s(LLe);Pft=r(Zra,"vision-encoder-decoder"),Zra.forEach(t),Bft=r(QQe," \u2014 "),Oae=n(QQe,"A",{href:!0});var eta=s(Oae);Ift=r(eta,"FlaxVisionEncoderDecoderModel"),eta.forEach(t),Nft=r(QQe," (Vision Encoder decoder model)"),QQe.forEach(t),Kra.forEach(t),qft=i(Gi),T(Dw.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(cna)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Xn,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertModel"),c(am,"id","extending-the-auto-classes"),c(am,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(am,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(sm,"id","transformers.AutoConfig"),c(sm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sm,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(fP,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(mP,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertConfig"),c(gP,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartConfig"),c(hP,"href","/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitConfig"),c(pP,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertConfig"),c(_P,"href","/docs/transformers/pr_18597/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(uP,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdConfig"),c(bP,"href","/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(vP,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(FP,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(TP,"href","/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomConfig"),c(MP,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertConfig"),c(EP,"href","/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineConfig"),c(CP,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPConfig"),c(wP,"href","/docs/transformers/pr_18597/en/model_doc/codegen#transformers.CodeGenConfig"),c(AP,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertConfig"),c(LP,"href","/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextConfig"),c(yP,"href","/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLConfig"),c(xP,"href","/docs/transformers/pr_18597/en/model_doc/cvt#transformers.CvtConfig"),c($P,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(kP,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(SP,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(RP,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaConfig"),c(PP,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(BP,"href","/docs/transformers/pr_18597/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(IP,"href","/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTConfig"),c(NP,"href","/docs/transformers/pr_18597/en/model_doc/detr#transformers.DetrConfig"),c(qP,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertConfig"),c(jP,"href","/docs/transformers/pr_18597/en/model_doc/donut#transformers.DonutSwinConfig"),c(DP,"href","/docs/transformers/pr_18597/en/model_doc/dpr#transformers.DPRConfig"),c(GP,"href","/docs/transformers/pr_18597/en/model_doc/dpt#transformers.DPTConfig"),c(OP,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraConfig"),c(VP,"href","/docs/transformers/pr_18597/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(XP,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertConfig"),c(zP,"href","/docs/transformers/pr_18597/en/model_doc/flava#transformers.FlavaConfig"),c(WP,"href","/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetConfig"),c(QP,"href","/docs/transformers/pr_18597/en/model_doc/fsmt#transformers.FSMTConfig"),c(UP,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelConfig"),c(HP,"href","/docs/transformers/pr_18597/en/model_doc/glpn#transformers.GLPNConfig"),c(JP,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Config"),c(YP,"href","/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(KP,"href","/docs/transformers/pr_18597/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(ZP,"href","/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJConfig"),c(eB,"href","/docs/transformers/pr_18597/en/model_doc/groupvit#transformers.GroupViTConfig"),c(oB,"href","/docs/transformers/pr_18597/en/model_doc/hubert#transformers.HubertConfig"),c(rB,"href","/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertConfig"),c(tB,"href","/docs/transformers/pr_18597/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(aB,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(nB,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(sB,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(lB,"href","/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDConfig"),c(iB,"href","/docs/transformers/pr_18597/en/model_doc/levit#transformers.LevitConfig"),c(dB,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerConfig"),c(cB,"href","/docs/transformers/pr_18597/en/model_doc/longt5#transformers.LongT5Config"),c(fB,"href","/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeConfig"),c(mB,"href","/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertConfig"),c(gB,"href","/docs/transformers/pr_18597/en/model_doc/m2m_100#transformers.M2M100Config"),c(hB,"href","/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianConfig"),c(pB,"href","/docs/transformers/pr_18597/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(_B,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartConfig"),c(uB,"href","/docs/transformers/pr_18597/en/model_doc/mctct#transformers.MCTCTConfig"),c(bB,"href","/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(vB,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(FB,"href","/docs/transformers/pr_18597/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(TB,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetConfig"),c(MB,"href","/docs/transformers/pr_18597/en/model_doc/mt5#transformers.MT5Config"),c(EB,"href","/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpConfig"),c(CB,"href","/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaConfig"),c(wB,"href","/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(AB,"href","/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(LB,"href","/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTConfig"),c(yB,"href","/docs/transformers/pr_18597/en/model_doc/owlvit#transformers.OwlViTConfig"),c(xB,"href","/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusConfig"),c($B,"href","/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverConfig"),c(kB,"href","/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartConfig"),c(SB,"href","/docs/transformers/pr_18597/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(RB,"href","/docs/transformers/pr_18597/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(PB,"href","/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(BB,"href","/docs/transformers/pr_18597/en/model_doc/rag#transformers.RagConfig"),c(IB,"href","/docs/transformers/pr_18597/en/model_doc/realm#transformers.RealmConfig"),c(NB,"href","/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerConfig"),c(qB,"href","/docs/transformers/pr_18597/en/model_doc/regnet#transformers.RegNetConfig"),c(jB,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertConfig"),c(DB,"href","/docs/transformers/pr_18597/en/model_doc/resnet#transformers.ResNetConfig"),c(GB,"href","/docs/transformers/pr_18597/en/model_doc/retribert#transformers.RetriBertConfig"),c(OB,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaConfig"),c(VB,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerConfig"),c(XB,"href","/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerConfig"),c(zB,"href","/docs/transformers/pr_18597/en/model_doc/sew#transformers.SEWConfig"),c(WB,"href","/docs/transformers/pr_18597/en/model_doc/sew-d#transformers.SEWDConfig"),c(QB,"href","/docs/transformers/pr_18597/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(UB,"href","/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(HB,"href","/docs/transformers/pr_18597/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(JB,"href","/docs/transformers/pr_18597/en/model_doc/splinter#transformers.SplinterConfig"),c(YB,"href","/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(KB,"href","/docs/transformers/pr_18597/en/model_doc/swin#transformers.SwinConfig"),c(ZB,"href","/docs/transformers/pr_18597/en/model_doc/swinv2#transformers.Swinv2Config"),c(eI,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Config"),c(oI,"href","/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasConfig"),c(rI,"href","/docs/transformers/pr_18597/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(tI,"href","/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(aI,"href","/docs/transformers/pr_18597/en/model_doc/trocr#transformers.TrOCRConfig"),c(nI,"href","/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(sI,"href","/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(lI,"href","/docs/transformers/pr_18597/en/model_doc/van#transformers.VanConfig"),c(iI,"href","/docs/transformers/pr_18597/en/model_doc/videomae#transformers.VideoMAEConfig"),c(dI,"href","/docs/transformers/pr_18597/en/model_doc/vilt#transformers.ViltConfig"),c(cI,"href","/docs/transformers/pr_18597/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(fI,"href","/docs/transformers/pr_18597/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(mI,"href","/docs/transformers/pr_18597/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(gI,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTConfig"),c(hI,"href","/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(pI,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(_I,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(uI,"href","/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMConfig"),c(bI,"href","/docs/transformers/pr_18597/en/model_doc/xglm#transformers.XGLMConfig"),c(vI,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMConfig"),c(FI,"href","/docs/transformers/pr_18597/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(TI,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(MI,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(EI,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetConfig"),c(CI,"href","/docs/transformers/pr_18597/en/model_doc/yolos#transformers.YolosConfig"),c(wI,"href","/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoTokenizer"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c(AI,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(LI,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertTokenizer"),c(yI,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(xI,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartTokenizer"),c($I,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartTokenizerFast"),c(kI,"href","/docs/transformers/pr_18597/en/model_doc/barthez#transformers.BarthezTokenizer"),c(SI,"href","/docs/transformers/pr_18597/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(RI,"href","/docs/transformers/pr_18597/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(PI,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertTokenizer"),c(BI,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertTokenizerFast"),c(II,"href","/docs/transformers/pr_18597/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(NI,"href","/docs/transformers/pr_18597/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(qI,"href","/docs/transformers/pr_18597/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(jI,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(DI,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(GI,"href","/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(OI,"href","/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(VI,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(XI,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(zI,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(WI,"href","/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(QI,"href","/docs/transformers/pr_18597/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(UI,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertTokenizer"),c(HI,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(JI,"href","/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineTokenizer"),c(YI,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPTokenizer"),c(KI,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(ZI,"href","/docs/transformers/pr_18597/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(eN,"href","/docs/transformers/pr_18597/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(oN,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(rN,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(tN,"href","/docs/transformers/pr_18597/en/model_doc/cpm#transformers.CpmTokenizer"),c(aN,"href","/docs/transformers/pr_18597/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(nN,"href","/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(sN,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lN,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iN,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dN,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cN,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(fN,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(mN,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(gN,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(hN,"href","/docs/transformers/pr_18597/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(pN,"href","/docs/transformers/pr_18597/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(_N,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraTokenizer"),c(uN,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(bN,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(vN,"href","/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetTokenizer"),c(FN,"href","/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(TN,"href","/docs/transformers/pr_18597/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(MN,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelTokenizer"),c(EN,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(CN,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wN,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AN,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LN,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yN,"href","/docs/transformers/pr_18597/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(xN,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c($N,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(kN,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPTokenizer"),c(SN,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(RN,"href","/docs/transformers/pr_18597/en/model_doc/herbert#transformers.HerbertTokenizer"),c(PN,"href","/docs/transformers/pr_18597/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(BN,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IN,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NN,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qN,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(jN,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(DN,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(GN,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(ON,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(VN,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(XN,"href","/docs/transformers/pr_18597/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(zN,"href","/docs/transformers/pr_18597/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(WN,"href","/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDTokenizer"),c(QN,"href","/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDTokenizerFast"),c(UN,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerTokenizer"),c(HN,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(JN,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Tokenizer"),c(YN,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5TokenizerFast"),c(KN,"href","/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeTokenizer"),c(ZN,"href","/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(eq,"href","/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(oq,"href","/docs/transformers/pr_18597/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(rq,"href","/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianTokenizer"),c(tq,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartTokenizer"),c(aq,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(nq,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(sq,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(lq,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertTokenizer"),c(iq,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertTokenizerFast"),c(dq,"href","/docs/transformers/pr_18597/en/model_doc/mluke#transformers.MLukeTokenizer"),c(cq,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(fq,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(mq,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(gq,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(hq,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Tokenizer"),c(pq,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5TokenizerFast"),c(_q,"href","/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpTokenizer"),c(uq,"href","/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(bq,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertTokenizer"),c(vq,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertTokenizerFast"),c(Fq,"href","/docs/transformers/pr_18597/en/model_doc/nllb#transformers.NllbTokenizer"),c(Tq,"href","/docs/transformers/pr_18597/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Mq,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertTokenizer"),c(Eq,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cq,"href","/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(wq,"href","/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Aq,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Lq,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPTokenizer"),c(yq,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(xq,"href","/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusTokenizer"),c($q,"href","/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(kq,"href","/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Sq,"href","/docs/transformers/pr_18597/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Rq,"href","/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Pq,"href","/docs/transformers/pr_18597/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Bq,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertTokenizer"),c(Iq,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertTokenizerFast"),c(Nq,"href","/docs/transformers/pr_18597/en/model_doc/rag#transformers.RagTokenizer"),c(qq,"href","/docs/transformers/pr_18597/en/model_doc/realm#transformers.RealmTokenizer"),c(jq,"href","/docs/transformers/pr_18597/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Dq,"href","/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Gq,"href","/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Oq,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Vq,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Xq,"href","/docs/transformers/pr_18597/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(zq,"href","/docs/transformers/pr_18597/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Wq,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Qq,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Uq,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Hq,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Jq,"href","/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Yq,"href","/docs/transformers/pr_18597/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Kq,"href","/docs/transformers/pr_18597/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Zq,"href","/docs/transformers/pr_18597/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(ej,"href","/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(oj,"href","/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(rj,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Tokenizer"),c(tj,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5TokenizerFast"),c(aj,"href","/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasTokenizer"),c(nj,"href","/docs/transformers/pr_18597/en/model_doc/tapex#transformers.TapexTokenizer"),c(sj,"href","/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(lj,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertTokenizer"),c(ij,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertTokenizerFast"),c(dj,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertTokenizer"),c(cj,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertTokenizerFast"),c(fj,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mj,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gj,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(hj,"href","/docs/transformers/pr_18597/en/model_doc/xglm#transformers.XGLMTokenizer"),c(pj,"href","/docs/transformers/pr_18597/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(_j,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMTokenizer"),c(uj,"href","/docs/transformers/pr_18597/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(bj,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(vj,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Fj,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Tj,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Mj,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Ej,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Cj,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertTokenizer"),c(wj,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoFeatureExtractor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c(Aj,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Lj,"href","/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(yj,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(xj,"href","/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($j,"href","/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kj,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Sj,"href","/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Rj,"href","/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Pj,"href","/docs/transformers/pr_18597/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Bj,"href","/docs/transformers/pr_18597/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(Ij,"href","/docs/transformers/pr_18597/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(Nj,"href","/docs/transformers/pr_18597/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(qj,"href","/docs/transformers/pr_18597/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(jj,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Dj,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Gj,"href","/docs/transformers/pr_18597/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Oj,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Vj,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Xj,"href","/docs/transformers/pr_18597/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(zj,"href","/docs/transformers/pr_18597/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Wj,"href","/docs/transformers/pr_18597/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Qj,"href","/docs/transformers/pr_18597/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Uj,"href","/docs/transformers/pr_18597/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Hj,"href","/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Jj,"href","/docs/transformers/pr_18597/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(eD,"href","/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(oD,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(rD,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tD,"href","/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aD,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nD,"href","/docs/transformers/pr_18597/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(sD,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lD,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iD,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dD,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cD,"href","/docs/transformers/pr_18597/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qp,"id","transformers.AutoProcessor"),c(Qp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qp,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(fD,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(mD,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPProcessor"),c(gD,"href","/docs/transformers/pr_18597/en/model_doc/donut#transformers.DonutProcessor"),c(hD,"href","/docs/transformers/pr_18597/en/model_doc/flava#transformers.FlavaProcessor"),c(pD,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPProcessor"),c(_D,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(uD,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(bD,"href","/docs/transformers/pr_18597/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(vD,"href","/docs/transformers/pr_18597/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(FD,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TD,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MD,"href","/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(ED,"href","/docs/transformers/pr_18597/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(CD,"href","/docs/transformers/pr_18597/en/model_doc/trocr#transformers.TrOCRProcessor"),c(wD,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AD,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LD,"href","/docs/transformers/pr_18597/en/model_doc/vilt#transformers.ViltProcessor"),c(yD,"href","/docs/transformers/pr_18597/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(xD,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($D,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kD,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(__,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u_,"id","transformers.AutoModel"),c(u_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u_,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c(SD,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RD,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PD,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BD,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertModel"),c(ID,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartModel"),c(ND,"href","/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitModel"),c(qD,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertModel"),c(jD,"href","/docs/transformers/pr_18597/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(DD,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdModel"),c(GD,"href","/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(OD,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(VD,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(XD,"href","/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomModel"),c(zD,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertModel"),c(WD,"href","/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineModel"),c(QD,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.CLIPModel"),c(UD,"href","/docs/transformers/pr_18597/en/model_doc/codegen#transformers.CodeGenModel"),c(HD,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertModel"),c(JD,"href","/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextModel"),c(YD,"href","/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLModel"),c(KD,"href","/docs/transformers/pr_18597/en/model_doc/cvt#transformers.CvtModel"),c(ZD,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(eG,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(oG,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(rG,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaModel"),c(tG,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(aG,"href","/docs/transformers/pr_18597/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(nG,"href","/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTModel"),c(sG,"href","/docs/transformers/pr_18597/en/model_doc/detr#transformers.DetrModel"),c(lG,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertModel"),c(iG,"href","/docs/transformers/pr_18597/en/model_doc/donut#transformers.DonutSwinModel"),c(dG,"href","/docs/transformers/pr_18597/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(cG,"href","/docs/transformers/pr_18597/en/model_doc/dpt#transformers.DPTModel"),c(fG,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraModel"),c(mG,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertModel"),c(gG,"href","/docs/transformers/pr_18597/en/model_doc/flava#transformers.FlavaModel"),c(hG,"href","/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetModel"),c(pG,"href","/docs/transformers/pr_18597/en/model_doc/fsmt#transformers.FSMTModel"),c(_G,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelModel"),c(uG,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelBaseModel"),c(bG,"href","/docs/transformers/pr_18597/en/model_doc/glpn#transformers.GLPNModel"),c(vG,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2Model"),c(FG,"href","/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(TG,"href","/docs/transformers/pr_18597/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(MG,"href","/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJModel"),c(EG,"href","/docs/transformers/pr_18597/en/model_doc/groupvit#transformers.GroupViTModel"),c(CG,"href","/docs/transformers/pr_18597/en/model_doc/hubert#transformers.HubertModel"),c(wG,"href","/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertModel"),c(AG,"href","/docs/transformers/pr_18597/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(LG,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(yG,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(xG,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c($G,"href","/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDModel"),c(kG,"href","/docs/transformers/pr_18597/en/model_doc/levit#transformers.LevitModel"),c(SG,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerModel"),c(RG,"href","/docs/transformers/pr_18597/en/model_doc/longt5#transformers.LongT5Model"),c(PG,"href","/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeModel"),c(BG,"href","/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertModel"),c(IG,"href","/docs/transformers/pr_18597/en/model_doc/m2m_100#transformers.M2M100Model"),c(NG,"href","/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianModel"),c(qG,"href","/docs/transformers/pr_18597/en/model_doc/maskformer#transformers.MaskFormerModel"),c(jG,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartModel"),c(DG,"href","/docs/transformers/pr_18597/en/model_doc/mctct#transformers.MCTCTModel"),c(GG,"href","/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(OG,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertModel"),c(VG,"href","/docs/transformers/pr_18597/en/model_doc/mobilevit#transformers.MobileViTModel"),c(XG,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetModel"),c(zG,"href","/docs/transformers/pr_18597/en/model_doc/mt5#transformers.MT5Model"),c(WG,"href","/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpModel"),c(QG,"href","/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaModel"),c(UG,"href","/docs/transformers/pr_18597/en/model_doc/m2m_100#transformers.M2M100Model"),c(HG,"href","/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerModel"),c(JG,"href","/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(YG,"href","/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTModel"),c(KG,"href","/docs/transformers/pr_18597/en/model_doc/owlvit#transformers.OwlViTModel"),c(ZG,"href","/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusModel"),c(eO,"href","/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverModel"),c(oO,"href","/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartModel"),c(rO,"href","/docs/transformers/pr_18597/en/model_doc/poolformer#transformers.PoolFormerModel"),c(tO,"href","/docs/transformers/pr_18597/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(aO,"href","/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertModel"),c(nO,"href","/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerModel"),c(sO,"href","/docs/transformers/pr_18597/en/model_doc/regnet#transformers.RegNetModel"),c(lO,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertModel"),c(iO,"href","/docs/transformers/pr_18597/en/model_doc/resnet#transformers.ResNetModel"),c(dO,"href","/docs/transformers/pr_18597/en/model_doc/retribert#transformers.RetriBertModel"),c(cO,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaModel"),c(fO,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerModel"),c(mO,"href","/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerModel"),c(gO,"href","/docs/transformers/pr_18597/en/model_doc/sew#transformers.SEWModel"),c(hO,"href","/docs/transformers/pr_18597/en/model_doc/sew-d#transformers.SEWDModel"),c(pO,"href","/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(_O,"href","/docs/transformers/pr_18597/en/model_doc/splinter#transformers.SplinterModel"),c(uO,"href","/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(bO,"href","/docs/transformers/pr_18597/en/model_doc/swin#transformers.SwinModel"),c(vO,"href","/docs/transformers/pr_18597/en/model_doc/swinv2#transformers.Swinv2Model"),c(FO,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5Model"),c(TO,"href","/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasModel"),c(MO,"href","/docs/transformers/pr_18597/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(EO,"href","/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(CO,"href","/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechModel"),c(wO,"href","/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(AO,"href","/docs/transformers/pr_18597/en/model_doc/van#transformers.VanModel"),c(LO,"href","/docs/transformers/pr_18597/en/model_doc/videomae#transformers.VideoMAEModel"),c(yO,"href","/docs/transformers/pr_18597/en/model_doc/vilt#transformers.ViltModel"),c(xO,"href","/docs/transformers/pr_18597/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c($O,"href","/docs/transformers/pr_18597/en/model_doc/visual_bert#transformers.VisualBertModel"),c(kO,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTModel"),c(SO,"href","/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(RO,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(PO,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(BO,"href","/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMModel"),c(IO,"href","/docs/transformers/pr_18597/en/model_doc/xglm#transformers.XGLMModel"),c(NO,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMModel"),c(qO,"href","/docs/transformers/pr_18597/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(jO,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(DO,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(GO,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetModel"),c(OO,"href","/docs/transformers/pr_18597/en/model_doc/yolos#transformers.YolosModel"),c(VO,"href","/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y1,"id","transformers.AutoModelForPreTraining"),c(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y1,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(XO,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertForPreTraining"),c(UO,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForPreTraining"),c(JO,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(YO,"href","/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomForCausalLM"),c(KO,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ZO,"href","/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(eV,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(oV,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(rV,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(tV,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(aV,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForPreTraining"),c(nV,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(sV,"href","/docs/transformers/pr_18597/en/model_doc/flava#transformers.FlavaForPreTraining"),c(lV,"href","/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForPreTraining"),c(iV,"href","/docs/transformers/pr_18597/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(dV,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(cV,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fV,"href","/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mV,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gV,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hV,"href","/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeForMaskedLM"),c(pV,"href","/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(_V,"href","/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(uV,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(bV,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(vV,"href","/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(FV,"href","/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(TV,"href","/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(MV,"href","/docs/transformers/pr_18597/en/model_doc/retribert#transformers.RetriBertModel"),c(EV,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(CV,"href","/docs/transformers/pr_18597/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(wV,"href","/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AV,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yV,"href","/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xV,"href","/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c($V,"href","/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(kV,"href","/docs/transformers/pr_18597/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(SV,"href","/docs/transformers/pr_18597/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(RV,"href","/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(PV,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(BV,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(IV,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NV,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(qV,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jV,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w2,"id","transformers.AutoModelForCausalLM"),c(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w2,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c(DV,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartForCausalLM"),c(XV,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertLMHeadModel"),c(zV,"href","/docs/transformers/pr_18597/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(WV,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(QV,"href","/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(UV,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(HV,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(JV,"href","/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomForCausalLM"),c(YV,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(KV,"href","/docs/transformers/pr_18597/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(ZV,"href","/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(eX,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(oX,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForCausalLM"),c(rX,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(tX,"href","/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(aX,"href","/docs/transformers/pr_18597/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(nX,"href","/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(sX,"href","/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianForCausalLM"),c(lX,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartForCausalLM"),c(iX,"href","/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(dX,"href","/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpForCausalLM"),c(cX,"href","/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(fX,"href","/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTForCausalLM"),c(mX,"href","/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(gX,"href","/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(hX,"href","/docs/transformers/pr_18597/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(pX,"href","/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(_X,"href","/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(uX,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(bX,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(vX,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(FX,"href","/docs/transformers/pr_18597/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(TX,"href","/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(MX,"href","/docs/transformers/pr_18597/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(EX,"href","/docs/transformers/pr_18597/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(CX,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(wX,"href","/docs/transformers/pr_18597/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(AX,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(LX,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(yX,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pb,"id","transformers.AutoModelForMaskedLM"),c(pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pb,"href","#transformers.AutoModelForMaskedLM"),c(fd,"class","relative group"),c(xX,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($X,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kX,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SX,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(RX,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(PX,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForMaskedLM"),c(BX,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(IX,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(NX,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(qX,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(jX,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(DX,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(GX,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(OX,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(VX,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(XX,"href","/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(zX,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(WX,"href","/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(QX,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(UX,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(HX,"href","/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeForMaskedLM"),c(JX,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(YX,"href","/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(KX,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ZX,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ez,"href","/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(oz,"href","/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(rz,"href","/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(tz,"href","/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(az,"href","/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(nz,"href","/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(sz,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(lz,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(iz,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(dz,"href","/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(cz,"href","/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(fz,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(mz,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(gz,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(hz,"href","/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tv,"id","transformers.AutoModelForSeq2SeqLM"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(pz,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_z,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uz,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(vz,"href","/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Tz,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Mz,"href","/docs/transformers/pr_18597/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Ez,"href","/docs/transformers/pr_18597/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Cz,"href","/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(wz,"href","/docs/transformers/pr_18597/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(Az,"href","/docs/transformers/pr_18597/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Lz,"href","/docs/transformers/pr_18597/en/model_doc/marian#transformers.MarianMTModel"),c(yz,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(xz,"href","/docs/transformers/pr_18597/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c($z,"href","/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(kz,"href","/docs/transformers/pr_18597/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Sz,"href","/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Rz,"href","/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_18597/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Bz,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Iz,"href","/docs/transformers/pr_18597/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForSequenceClassification"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForSequenceClassification"),c(ud,"class","relative group"),c(Nz,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Gz,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Oz,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Vz,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Xz,"href","/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(zz,"href","/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(Wz,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Qz,"href","/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Uz,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Hz,"href","/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Jz,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Yz,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Kz,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Zz,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(eW,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(oW,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(rW,"href","/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(tW,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(aW,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(nW,"href","/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(sW,"href","/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(lW,"href","/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(iW,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(dW,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(cW,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(fW,"href","/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDForSequenceClassification"),c(mW,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(gW,"href","/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(hW,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(pW,"href","/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(_W,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(uW,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(bW,"href","/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(vW,"href","/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(FW,"href","/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(TW,"href","/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(MW,"href","/docs/transformers/pr_18597/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(EW,"href","/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(CW,"href","/docs/transformers/pr_18597/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(wW,"href","/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(AW,"href","/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(LW,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(yW,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(xW,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c($W,"href","/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(kW,"href","/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(SW,"href","/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(RW,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(PW,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(BW,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(IW,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(NW,"href","/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.AutoModelForMultipleChoice"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(qW,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(OW,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForMultipleChoice"),c(VW,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(XW,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(zW,"href","/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(WW,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(QW,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(UW,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(HW,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(JW,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(YW,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(KW,"href","/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(eQ,"href","/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(oQ,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(rQ,"href","/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(tQ,"href","/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(aQ,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(nQ,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(sQ,"href","/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(lQ,"href","/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(iQ,"href","/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(dQ,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(cQ,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(fQ,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(mQ,"href","/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(gQ,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(hQ,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(pQ,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(_Q,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(uQ,"href","/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForNextSentencePrediction"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(bQ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(MQ,"href","/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(EQ,"href","/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(CQ,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(wQ,"href","/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(AQ,"href","/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForTokenClassification"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(LQ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(kQ,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForTokenClassification"),c(SQ,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(RQ,"href","/docs/transformers/pr_18597/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(PQ,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(BQ,"href","/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineForTokenClassification"),c(IQ,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(NQ,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(qQ,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(jQ,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(DQ,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(GQ,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(OQ,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(VQ,"href","/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(XQ,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(zQ,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(WQ,"href","/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(QQ,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(UQ,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(HQ,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(JQ,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(YQ,"href","/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeForTokenClassification"),c(KQ,"href","/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(ZQ,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(eU,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(oU,"href","/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(rU,"href","/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(tU,"href","/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(aU,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(nU,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(sU,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(lU,"href","/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(iU,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(dU,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(cU,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(fU,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(mU,"href","/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sT,"id","transformers.AutoModelForQuestionAnswering"),c(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sT,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(gU,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_18597/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_18597/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c($U,"href","/docs/transformers/pr_18597/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_18597/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_18597/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_18597/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_18597/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_18597/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_18597/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_18597/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_18597/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_18597/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_18597/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_18597/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_18597/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_18597/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(oH,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(aH,"href","/docs/transformers/pr_18597/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.AutoModelForTableQuestionAnswering"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(nH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.AutoModelForImageClassification"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(dH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitForImageClassification"),c(gH,"href","/docs/transformers/pr_18597/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(hH,"href","/docs/transformers/pr_18597/en/model_doc/cvt#transformers.CvtForImageClassification"),c(pH,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(_H,"href","/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTForImageClassification"),c(uH,"href","/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(bH,"href","/docs/transformers/pr_18597/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(vH,"href","/docs/transformers/pr_18597/en/model_doc/levit#transformers.LevitForImageClassification"),c(FH,"href","/docs/transformers/pr_18597/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(TH,"href","/docs/transformers/pr_18597/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(MH,"href","/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(EH,"href","/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(CH,"href","/docs/transformers/pr_18597/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(wH,"href","/docs/transformers/pr_18597/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(AH,"href","/docs/transformers/pr_18597/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(LH,"href","/docs/transformers/pr_18597/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(yH,"href","/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(xH,"href","/docs/transformers/pr_18597/en/model_doc/swin#transformers.SwinForImageClassification"),c($H,"href","/docs/transformers/pr_18597/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(kH,"href","/docs/transformers/pr_18597/en/model_doc/van#transformers.VanForImageClassification"),c(SH,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTForImageClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M7,"id","transformers.AutoModelForVideoClassification"),c(M7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M7,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(RH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_18597/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L7,"id","transformers.AutoModelForVision2Seq"),c(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L7,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(NH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/pr_18597/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.AutoModelForVisualQuestionAnswering"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(GH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_18597/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N7,"id","transformers.AutoModelForAudioClassification"),c(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N7,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(zH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(HH,"href","/docs/transformers/pr_18597/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(JH,"href","/docs/transformers/pr_18597/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(YH,"href","/docs/transformers/pr_18597/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(KH,"href","/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J7,"id","transformers.AutoModelForAudioFrameClassification"),c(J7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J7,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(tJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(lJ,"href","/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(iJ,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(dJ,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(cJ,"href","/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n8,"id","transformers.AutoModelForCTC"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(fJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hJ,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(pJ,"href","/docs/transformers/pr_18597/en/model_doc/hubert#transformers.HubertForCTC"),c(_J,"href","/docs/transformers/pr_18597/en/model_doc/mctct#transformers.MCTCTForCTC"),c(uJ,"href","/docs/transformers/pr_18597/en/model_doc/sew#transformers.SEWForCTC"),c(bJ,"href","/docs/transformers/pr_18597/en/model_doc/sew-d#transformers.SEWDForCTC"),c(vJ,"href","/docs/transformers/pr_18597/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(FJ,"href","/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(TJ,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(MJ,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(EJ,"href","/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMForCTC"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(v8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(CJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_18597/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(yJ,"href","/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w8,"id","transformers.AutoModelForAudioXVector"),c(w8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w8,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c(xJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(RJ,"href","/docs/transformers/pr_18597/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(PJ,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(BJ,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(IJ,"href","/docs/transformers/pr_18597/en/model_doc/wavlm#transformers.WavLMForXVector"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P8,"id","transformers.AutoModelForMaskedImageModeling"),c(P8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P8,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(NJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_18597/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(GJ,"href","/docs/transformers/pr_18597/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(OJ,"href","/docs/transformers/pr_18597/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(VJ,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O8,"id","transformers.AutoModelForObjectDetection"),c(O8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O8,"href","#transformers.AutoModelForObjectDetection"),c(fc,"class","relative group"),c(XJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_18597/en/model_doc/detr#transformers.DetrForObjectDetection"),c(UJ,"href","/docs/transformers/pr_18597/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U8,"id","transformers.AutoModelForImageSegmentation"),c(U8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U8,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(HJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_18597/en/model_doc/detr#transformers.DetrForSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z8,"id","transformers.AutoModelForSemanticSegmentation"),c(Z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z8,"href","#transformers.AutoModelForSemanticSegmentation"),c(uc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_18597/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(tY,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(aY,"href","/docs/transformers/pr_18597/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(nY,"href","/docs/transformers/pr_18597/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(sY,"href","/docs/transformers/pr_18597/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i9,"id","transformers.AutoModelForInstanceSegmentation"),c(i9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i9,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(lY,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_18597/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g9,"id","transformers.TFAutoModel"),c(g9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g9,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(fY,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertModel"),c(pY,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.TFBartModel"),c(_Y,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertModel"),c(uY,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(bY,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(vY,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertModel"),c(FY,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.TFCLIPModel"),c(TY,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.TFConvBertModel"),c(MY,"href","/docs/transformers/pr_18597/en/model_doc/convnext#transformers.TFConvNextModel"),c(EY,"href","/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.TFCTRLModel"),c(CY,"href","/docs/transformers/pr_18597/en/model_doc/cvt#transformers.TFCvtModel"),c(wY,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(AY,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.TFDebertaModel"),c(LY,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(yY,"href","/docs/transformers/pr_18597/en/model_doc/deit#transformers.TFDeiTModel"),c(xY,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertModel"),c($Y,"href","/docs/transformers/pr_18597/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(kY,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraModel"),c(SY,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(RY,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelModel"),c(PY,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(BY,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.TFGPT2Model"),c(IY,"href","/docs/transformers/pr_18597/en/model_doc/gptj#transformers.TFGPTJModel"),c(NY,"href","/docs/transformers/pr_18597/en/model_doc/hubert#transformers.TFHubertModel"),c(qY,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(jY,"href","/docs/transformers/pr_18597/en/model_doc/led#transformers.TFLEDModel"),c(DY,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.TFLongformerModel"),c(GY,"href","/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.TFLxmertModel"),c(OY,"href","/docs/transformers/pr_18597/en/model_doc/marian#transformers.TFMarianModel"),c(VY,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.TFMBartModel"),c(XY,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(zY,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetModel"),c(WY,"href","/docs/transformers/pr_18597/en/model_doc/mt5#transformers.TFMT5Model"),c(QY,"href","/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(UY,"href","/docs/transformers/pr_18597/en/model_doc/opt#transformers.TFOPTModel"),c(HY,"href","/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.TFPegasusModel"),c(JY,"href","/docs/transformers/pr_18597/en/model_doc/regnet#transformers.TFRegNetModel"),c(YY,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertModel"),c(KY,"href","/docs/transformers/pr_18597/en/model_doc/resnet#transformers.TFResNetModel"),c(ZY,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaModel"),c(eK,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerModel"),c(oK,"href","/docs/transformers/pr_18597/en/model_doc/segformer#transformers.TFSegformerModel"),c(rK,"href","/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(tK,"href","/docs/transformers/pr_18597/en/model_doc/swin#transformers.TFSwinModel"),c(aK,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.TFT5Model"),c(nK,"href","/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TFTapasModel"),c(sK,"href","/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(lK,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.TFViTModel"),c(iK,"href","/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(dK,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(cK,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMModel"),c(fK,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(mK,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModelForPreTraining"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(gK,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_K,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(uK,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(bK,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForPreTraining"),c(vK,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FK,"href","/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(TK,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(MK,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(EK,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(CK,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(wK,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AK,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(LK,"href","/docs/transformers/pr_18597/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(yK,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(xK,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($K,"href","/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(kK,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SK,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(RK,"href","/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PK,"href","/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(BK,"href","/docs/transformers/pr_18597/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(IK,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NK,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qK,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForCausalLM"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(jK,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DK,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GK,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OK,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(VK,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(XK,"href","/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zK,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(WK,"href","/docs/transformers/pr_18597/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(QK,"href","/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UK,"href","/docs/transformers/pr_18597/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(HK,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(JK,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(YK,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(KK,"href","/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ZK,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eZ,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForImageClassification"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(oZ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/pr_18597/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(nZ,"href","/docs/transformers/pr_18597/en/model_doc/cvt#transformers.TFCvtForImageClassification"),c(sZ,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lZ,"href","/docs/transformers/pr_18597/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(iZ,"href","/docs/transformers/pr_18597/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(dZ,"href","/docs/transformers/pr_18597/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(cZ,"href","/docs/transformers/pr_18597/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(fZ,"href","/docs/transformers/pr_18597/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(mZ,"href","/docs/transformers/pr_18597/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(gZ,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.TFAutoModelForSemanticSegmentation"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c(hZ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/pr_18597/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(bZ,"href","/docs/transformers/pr_18597/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.TFAutoModelForMaskedLM"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.TFAutoModelForMaskedLM"),c(qc,"class","relative group"),c(vZ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(EZ,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(CZ,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(AZ,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(LZ,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(yZ,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(xZ,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c($Z,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(kZ,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(SZ,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(RZ,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(PZ,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(BZ,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(IZ,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(NZ,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qZ,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(jZ,"href","/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(DZ,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GZ,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(OZ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(QZ,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_18597/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(HZ,"href","/docs/transformers/pr_18597/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_18597/en/model_doc/marian#transformers.TFMarianMTModel"),c(YZ,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(KZ,"href","/docs/transformers/pr_18597/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(ZZ,"href","/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.TFAutoModelForSequenceClassification"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(oee,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ree,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tee,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aee,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(nee,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(see,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(lee,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(iee,"href","/docs/transformers/pr_18597/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(dee,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(cee,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(fee,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(mee,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(gee,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(hee,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(pee,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_18597/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(uee,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(bee,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(vee,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Fee,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Tee,"href","/docs/transformers/pr_18597/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Mee,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Eee,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Cee,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(wee,"href","/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Aee,"href","/docs/transformers/pr_18597/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Lee,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(yee,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(xee,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.TFAutoModelForMultipleChoice"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Qc,"class","relative group"),c($ee,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kee,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(See,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ree,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(qee,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(jee,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(zee,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Wee,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Qee,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Uee,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Hee,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Jc,"class","relative group"),c(Jee,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yee,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kee,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zee,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(eoe,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Zc,"class","relative group"),c(ooe,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(roe,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(toe,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aoe,"href","/docs/transformers/pr_18597/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModelForTokenClassification"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModelForTokenClassification"),c(rf,"class","relative group"),c(noe,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(soe,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(loe,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ioe,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(doe,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(coe,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(foe,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(moe,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(goe,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(hoe,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(poe,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(_oe,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(uoe,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(boe,"href","/docs/transformers/pr_18597/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(voe,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Foe,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Toe,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Moe,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Eoe,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Coe,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(woe,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Aoe,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Loe,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.TFAutoModelForQuestionAnswering"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(yoe,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xoe,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($oe,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(koe,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Soe,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Roe,"href","/docs/transformers/pr_18597/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_18597/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_18597/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_18597/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_18597/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Doe,"href","/docs/transformers/pr_18597/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_18597/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_18597/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_18597/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_18597/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_18597/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_18597/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Hoe,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_18597/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.TFAutoModelForVision2Seq"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.TFAutoModelForVision2Seq"),c(df,"class","relative group"),c(Yoe,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zoe,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ere,"href","/docs/transformers/pr_18597/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(mf,"class","relative group"),c(ore,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rre,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tre,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(are,"href","/docs/transformers/pr_18597/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.FlaxAutoModel"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.FlaxAutoModel"),c(pf,"class","relative group"),c(nre,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sre,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lre,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ire,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertModel"),c(dre,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartModel"),c(cre,"href","/docs/transformers/pr_18597/en/model_doc/beit#transformers.FlaxBeitModel"),c(fre,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertModel"),c(mre,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(gre,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(hre,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(pre,"href","/docs/transformers/pr_18597/en/model_doc/clip#transformers.FlaxCLIPModel"),c(_re,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(ure,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraModel"),c(bre,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(vre,"href","/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Fre,"href","/docs/transformers/pr_18597/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Tre,"href","/docs/transformers/pr_18597/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Mre,"href","/docs/transformers/pr_18597/en/model_doc/marian#transformers.FlaxMarianModel"),c(Ere,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Cre,"href","/docs/transformers/pr_18597/en/model_doc/mt5#transformers.FlaxMT5Model"),c(wre,"href","/docs/transformers/pr_18597/en/model_doc/opt#transformers.FlaxOPTModel"),c(Are,"href","/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Lre,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(yre,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(xre,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.FlaxT5Model"),c($re,"href","/docs/transformers/pr_18597/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(kre,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.FlaxViTModel"),c(Sre,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Rre,"href","/docs/transformers/pr_18597/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Pre,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.FlaxAutoModelForCausalLM"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.FlaxAutoModelForCausalLM"),c(bf,"class","relative group"),c(Bre,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ire,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nre,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qre,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(jre,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Dre,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Gre,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Ore,"href","/docs/transformers/pr_18597/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Vre,"href","/docs/transformers/pr_18597/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Xre,"href","/docs/transformers/pr_18597/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(zre,"href","/docs/transformers/pr_18597/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Wre,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Qre,"href","/docs/transformers/pr_18597/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.FlaxAutoModelForPreTraining"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Tf,"class","relative group"),c(Ure,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hre,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jre,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yre,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Kre,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Zre,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(ete,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(ote,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(rte,"href","/docs/transformers/pr_18597/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(tte,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ate,"href","/docs/transformers/pr_18597/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nte,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ste,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(lte,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ite,"href","/docs/transformers/pr_18597/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(dte,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.FlaxAutoModelForMaskedLM"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Cf,"class","relative group"),c(cte,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fte,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mte,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gte,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(hte,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pte,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(_te,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ute,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(bte,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(vte,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Fte,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Tte,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Mte,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lf,"class","relative group"),c(Ete,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cte,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wte,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ate,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Lte,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(yte,"href","/docs/transformers/pr_18597/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(xte,"href","/docs/transformers/pr_18597/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c($te,"href","/docs/transformers/pr_18597/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(kte,"href","/docs/transformers/pr_18597/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Ste,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Rte,"href","/docs/transformers/pr_18597/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Pte,"href","/docs/transformers/pr_18597/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Bte,"href","/docs/transformers/pr_18597/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c($f,"class","relative group"),c(Ite,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nte,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qte,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jte,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Dte,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Gte,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Ote,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Vte,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Xte,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(zte,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Wte,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Qte,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Ute,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Rf,"class","relative group"),c(Hte,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jte,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yte,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kte,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Zte,"href","/docs/transformers/pr_18597/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(eae,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(oae,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(rae,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(tae,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(aae,"href","/docs/transformers/pr_18597/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(nae,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(sae,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(lae,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForTokenClassification"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(If,"class","relative group"),c(iae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fae,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(mae,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(gae,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(hae,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(pae,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(_ae,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(uae,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(bae,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(jf,"class","relative group"),c(vae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mae,"href","/docs/transformers/pr_18597/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Eae,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Cae,"href","/docs/transformers/pr_18597/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(wae,"href","/docs/transformers/pr_18597/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Aae,"href","/docs/transformers/pr_18597/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Lae,"href","/docs/transformers/pr_18597/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(yae,"href","/docs/transformers/pr_18597/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(xae,"href","/docs/transformers/pr_18597/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Of,"class","relative group"),c($ae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rae,"href","/docs/transformers/pr_18597/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sw,"id","transformers.FlaxAutoModelForImageClassification"),c(Sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sw,"href","#transformers.FlaxAutoModelForImageClassification"),c(zf,"class","relative group"),c(Pae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nae,"href","/docs/transformers/pr_18597/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(qae,"href","/docs/transformers/pr_18597/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uf,"class","relative group"),c(jae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gae,"href","/docs/transformers/pr_18597/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oae,"href","/docs/transformers/pr_18597/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Ao),e(Ao,Oi),b(f,em,u),b(f,ft,u),e(ft,Vi),e(ft,Xi),e(Xi,fL),e(ft,om),b(f,Ve,u),b(f,Ue,u),e(Ue,zi),e(Ue,Xn),e(Xn,mL),e(Ue,zn),e(Ue,Wn),e(Wn,gL),e(Ue,Wi),e(Ue,Qn),e(Qn,hL),e(Ue,Qi),b(f,rm,u),M(ja,f,u),b(f,He,u),b(f,Ae,u),e(Ae,nP),e(Ae,Ui),e(Ui,sP),e(Ae,lP),b(f,Lo,u),b(f,Da,u),e(Da,iP),e(Da,tm),e(tm,dP),e(Da,bKe),b(f,UQe,u),b(f,Hi,u),e(Hi,am),e(am,Dse),M(pL,Dse,null),e(Hi,vKe),e(Hi,Gse),e(Gse,FKe),b(f,HQe,u),b(f,Un,u),e(Un,TKe),e(Un,Ose),e(Ose,MKe),e(Un,EKe),e(Un,Vse),e(Vse,CKe),e(Un,wKe),b(f,JQe,u),M(_L,f,u),b(f,YQe,u),b(f,cP,u),e(cP,AKe),b(f,KQe,u),M(nm,f,u),b(f,ZQe,u),b(f,Ji,u),e(Ji,sm),e(sm,Xse),M(uL,Xse,null),e(Ji,LKe),e(Ji,zse),e(zse,yKe),b(f,eUe,u),b(f,yo,u),M(bL,yo,null),e(yo,xKe),e(yo,vL),e(vL,$Ke),e(vL,fP),e(fP,kKe),e(vL,SKe),e(yo,RKe),e(yo,FL),e(FL,PKe),e(FL,Wse),e(Wse,BKe),e(FL,IKe),e(yo,NKe),e(yo,kr),M(TL,kr,null),e(kr,qKe),e(kr,Qse),e(Qse,jKe),e(kr,DKe),e(kr,Yi),e(Yi,GKe),e(Yi,Use),e(Use,OKe),e(Yi,VKe),e(Yi,Hse),e(Hse,XKe),e(Yi,zKe),e(kr,WKe),e(kr,A),e(A,lm),e(lm,Jse),e(Jse,QKe),e(lm,UKe),e(lm,mP),e(mP,HKe),e(lm,JKe),e(A,YKe),e(A,im),e(im,Yse),e(Yse,KKe),e(im,ZKe),e(im,gP),e(gP,eZe),e(im,oZe),e(A,rZe),e(A,dm),e(dm,Kse),e(Kse,tZe),e(dm,aZe),e(dm,hP),e(hP,nZe),e(dm,sZe),e(A,lZe),e(A,cm),e(cm,Zse),e(Zse,iZe),e(cm,dZe),e(cm,pP),e(pP,cZe),e(cm,fZe),e(A,mZe),e(A,fm),e(fm,ele),e(ele,gZe),e(fm,hZe),e(fm,_P),e(_P,pZe),e(fm,_Ze),e(A,uZe),e(A,mm),e(mm,ole),e(ole,bZe),e(mm,vZe),e(mm,uP),e(uP,FZe),e(mm,TZe),e(A,MZe),e(A,gm),e(gm,rle),e(rle,EZe),e(gm,CZe),e(gm,bP),e(bP,wZe),e(gm,AZe),e(A,LZe),e(A,hm),e(hm,tle),e(tle,yZe),e(hm,xZe),e(hm,vP),e(vP,$Ze),e(hm,kZe),e(A,SZe),e(A,pm),e(pm,ale),e(ale,RZe),e(pm,PZe),e(pm,FP),e(FP,BZe),e(pm,IZe),e(A,NZe),e(A,_m),e(_m,nle),e(nle,qZe),e(_m,jZe),e(_m,TP),e(TP,DZe),e(_m,GZe),e(A,OZe),e(A,um),e(um,sle),e(sle,VZe),e(um,XZe),e(um,MP),e(MP,zZe),e(um,WZe),e(A,QZe),e(A,bm),e(bm,lle),e(lle,UZe),e(bm,HZe),e(bm,EP),e(EP,JZe),e(bm,YZe),e(A,KZe),e(A,vm),e(vm,ile),e(ile,ZZe),e(vm,eeo),e(vm,CP),e(CP,oeo),e(vm,reo),e(A,teo),e(A,Fm),e(Fm,dle),e(dle,aeo),e(Fm,neo),e(Fm,wP),e(wP,seo),e(Fm,leo),e(A,ieo),e(A,Tm),e(Tm,cle),e(cle,deo),e(Tm,ceo),e(Tm,AP),e(AP,feo),e(Tm,meo),e(A,geo),e(A,Mm),e(Mm,fle),e(fle,heo),e(Mm,peo),e(Mm,LP),e(LP,_eo),e(Mm,ueo),e(A,beo),e(A,Em),e(Em,mle),e(mle,veo),e(Em,Feo),e(Em,yP),e(yP,Teo),e(Em,Meo),e(A,Eeo),e(A,Cm),e(Cm,gle),e(gle,Ceo),e(Cm,weo),e(Cm,xP),e(xP,Aeo),e(Cm,Leo),e(A,yeo),e(A,wm),e(wm,hle),e(hle,xeo),e(wm,$eo),e(wm,$P),e($P,keo),e(wm,Seo),e(A,Reo),e(A,Am),e(Am,ple),e(ple,Peo),e(Am,Beo),e(Am,kP),e(kP,Ieo),e(Am,Neo),e(A,qeo),e(A,Lm),e(Lm,_le),e(_le,jeo),e(Lm,Deo),e(Lm,SP),e(SP,Geo),e(Lm,Oeo),e(A,Veo),e(A,ym),e(ym,ule),e(ule,Xeo),e(ym,zeo),e(ym,RP),e(RP,Weo),e(ym,Qeo),e(A,Ueo),e(A,xm),e(xm,ble),e(ble,Heo),e(xm,Jeo),e(xm,PP),e(PP,Yeo),e(xm,Keo),e(A,Zeo),e(A,$m),e($m,vle),e(vle,eoo),e($m,ooo),e($m,BP),e(BP,roo),e($m,too),e(A,aoo),e(A,km),e(km,Fle),e(Fle,noo),e(km,soo),e(km,IP),e(IP,loo),e(km,ioo),e(A,doo),e(A,Sm),e(Sm,Tle),e(Tle,coo),e(Sm,foo),e(Sm,NP),e(NP,moo),e(Sm,goo),e(A,hoo),e(A,Rm),e(Rm,Mle),e(Mle,poo),e(Rm,_oo),e(Rm,qP),e(qP,uoo),e(Rm,boo),e(A,voo),e(A,Pm),e(Pm,Ele),e(Ele,Foo),e(Pm,Too),e(Pm,jP),e(jP,Moo),e(Pm,Eoo),e(A,Coo),e(A,Bm),e(Bm,Cle),e(Cle,woo),e(Bm,Aoo),e(Bm,DP),e(DP,Loo),e(Bm,yoo),e(A,xoo),e(A,Im),e(Im,wle),e(wle,$oo),e(Im,koo),e(Im,GP),e(GP,Soo),e(Im,Roo),e(A,Poo),e(A,Nm),e(Nm,Ale),e(Ale,Boo),e(Nm,Ioo),e(Nm,OP),e(OP,Noo),e(Nm,qoo),e(A,joo),e(A,qm),e(qm,Lle),e(Lle,Doo),e(qm,Goo),e(qm,VP),e(VP,Ooo),e(qm,Voo),e(A,Xoo),e(A,jm),e(jm,yle),e(yle,zoo),e(jm,Woo),e(jm,XP),e(XP,Qoo),e(jm,Uoo),e(A,Hoo),e(A,Dm),e(Dm,xle),e(xle,Joo),e(Dm,Yoo),e(Dm,zP),e(zP,Koo),e(Dm,Zoo),e(A,ero),e(A,Gm),e(Gm,$le),e($le,oro),e(Gm,rro),e(Gm,WP),e(WP,tro),e(Gm,aro),e(A,nro),e(A,Om),e(Om,kle),e(kle,sro),e(Om,lro),e(Om,QP),e(QP,iro),e(Om,dro),e(A,cro),e(A,Vm),e(Vm,Sle),e(Sle,fro),e(Vm,mro),e(Vm,UP),e(UP,gro),e(Vm,hro),e(A,pro),e(A,Xm),e(Xm,Rle),e(Rle,_ro),e(Xm,uro),e(Xm,HP),e(HP,bro),e(Xm,vro),e(A,Fro),e(A,zm),e(zm,Ple),e(Ple,Tro),e(zm,Mro),e(zm,JP),e(JP,Ero),e(zm,Cro),e(A,wro),e(A,Wm),e(Wm,Ble),e(Ble,Aro),e(Wm,Lro),e(Wm,YP),e(YP,yro),e(Wm,xro),e(A,$ro),e(A,Qm),e(Qm,Ile),e(Ile,kro),e(Qm,Sro),e(Qm,KP),e(KP,Rro),e(Qm,Pro),e(A,Bro),e(A,Um),e(Um,Nle),e(Nle,Iro),e(Um,Nro),e(Um,ZP),e(ZP,qro),e(Um,jro),e(A,Dro),e(A,Hm),e(Hm,qle),e(qle,Gro),e(Hm,Oro),e(Hm,eB),e(eB,Vro),e(Hm,Xro),e(A,zro),e(A,Jm),e(Jm,jle),e(jle,Wro),e(Jm,Qro),e(Jm,oB),e(oB,Uro),e(Jm,Hro),e(A,Jro),e(A,Ym),e(Ym,Dle),e(Dle,Yro),e(Ym,Kro),e(Ym,rB),e(rB,Zro),e(Ym,eto),e(A,oto),e(A,Km),e(Km,Gle),e(Gle,rto),e(Km,tto),e(Km,tB),e(tB,ato),e(Km,nto),e(A,sto),e(A,Zm),e(Zm,Ole),e(Ole,lto),e(Zm,ito),e(Zm,aB),e(aB,dto),e(Zm,cto),e(A,fto),e(A,eg),e(eg,Vle),e(Vle,mto),e(eg,gto),e(eg,nB),e(nB,hto),e(eg,pto),e(A,_to),e(A,og),e(og,Xle),e(Xle,uto),e(og,bto),e(og,sB),e(sB,vto),e(og,Fto),e(A,Tto),e(A,rg),e(rg,zle),e(zle,Mto),e(rg,Eto),e(rg,lB),e(lB,Cto),e(rg,wto),e(A,Ato),e(A,tg),e(tg,Wle),e(Wle,Lto),e(tg,yto),e(tg,iB),e(iB,xto),e(tg,$to),e(A,kto),e(A,ag),e(ag,Qle),e(Qle,Sto),e(ag,Rto),e(ag,dB),e(dB,Pto),e(ag,Bto),e(A,Ito),e(A,ng),e(ng,Ule),e(Ule,Nto),e(ng,qto),e(ng,cB),e(cB,jto),e(ng,Dto),e(A,Gto),e(A,sg),e(sg,Hle),e(Hle,Oto),e(sg,Vto),e(sg,fB),e(fB,Xto),e(sg,zto),e(A,Wto),e(A,lg),e(lg,Jle),e(Jle,Qto),e(lg,Uto),e(lg,mB),e(mB,Hto),e(lg,Jto),e(A,Yto),e(A,ig),e(ig,Yle),e(Yle,Kto),e(ig,Zto),e(ig,gB),e(gB,eao),e(ig,oao),e(A,rao),e(A,dg),e(dg,Kle),e(Kle,tao),e(dg,aao),e(dg,hB),e(hB,nao),e(dg,sao),e(A,lao),e(A,cg),e(cg,Zle),e(Zle,iao),e(cg,dao),e(cg,pB),e(pB,cao),e(cg,fao),e(A,mao),e(A,fg),e(fg,eie),e(eie,gao),e(fg,hao),e(fg,_B),e(_B,pao),e(fg,_ao),e(A,uao),e(A,mg),e(mg,oie),e(oie,bao),e(mg,vao),e(mg,uB),e(uB,Fao),e(mg,Tao),e(A,Mao),e(A,gg),e(gg,rie),e(rie,Eao),e(gg,Cao),e(gg,bB),e(bB,wao),e(gg,Aao),e(A,Lao),e(A,hg),e(hg,tie),e(tie,yao),e(hg,xao),e(hg,vB),e(vB,$ao),e(hg,kao),e(A,Sao),e(A,pg),e(pg,aie),e(aie,Rao),e(pg,Pao),e(pg,FB),e(FB,Bao),e(pg,Iao),e(A,Nao),e(A,_g),e(_g,nie),e(nie,qao),e(_g,jao),e(_g,TB),e(TB,Dao),e(_g,Gao),e(A,Oao),e(A,ug),e(ug,sie),e(sie,Vao),e(ug,Xao),e(ug,MB),e(MB,zao),e(ug,Wao),e(A,Qao),e(A,bg),e(bg,lie),e(lie,Uao),e(bg,Hao),e(bg,EB),e(EB,Jao),e(bg,Yao),e(A,Kao),e(A,vg),e(vg,iie),e(iie,Zao),e(vg,eno),e(vg,CB),e(CB,ono),e(vg,rno),e(A,tno),e(A,Fg),e(Fg,die),e(die,ano),e(Fg,nno),e(Fg,wB),e(wB,sno),e(Fg,lno),e(A,ino),e(A,Tg),e(Tg,cie),e(cie,dno),e(Tg,cno),e(Tg,AB),e(AB,fno),e(Tg,mno),e(A,gno),e(A,Mg),e(Mg,fie),e(fie,hno),e(Mg,pno),e(Mg,LB),e(LB,_no),e(Mg,uno),e(A,bno),e(A,Eg),e(Eg,mie),e(mie,vno),e(Eg,Fno),e(Eg,yB),e(yB,Tno),e(Eg,Mno),e(A,Eno),e(A,Cg),e(Cg,gie),e(gie,Cno),e(Cg,wno),e(Cg,xB),e(xB,Ano),e(Cg,Lno),e(A,yno),e(A,wg),e(wg,hie),e(hie,xno),e(wg,$no),e(wg,$B),e($B,kno),e(wg,Sno),e(A,Rno),e(A,Ag),e(Ag,pie),e(pie,Pno),e(Ag,Bno),e(Ag,kB),e(kB,Ino),e(Ag,Nno),e(A,qno),e(A,Lg),e(Lg,_ie),e(_ie,jno),e(Lg,Dno),e(Lg,SB),e(SB,Gno),e(Lg,Ono),e(A,Vno),e(A,yg),e(yg,uie),e(uie,Xno),e(yg,zno),e(yg,RB),e(RB,Wno),e(yg,Qno),e(A,Uno),e(A,xg),e(xg,bie),e(bie,Hno),e(xg,Jno),e(xg,PB),e(PB,Yno),e(xg,Kno),e(A,Zno),e(A,$g),e($g,vie),e(vie,eso),e($g,oso),e($g,BB),e(BB,rso),e($g,tso),e(A,aso),e(A,kg),e(kg,Fie),e(Fie,nso),e(kg,sso),e(kg,IB),e(IB,lso),e(kg,iso),e(A,dso),e(A,Sg),e(Sg,Tie),e(Tie,cso),e(Sg,fso),e(Sg,NB),e(NB,mso),e(Sg,gso),e(A,hso),e(A,Rg),e(Rg,Mie),e(Mie,pso),e(Rg,_so),e(Rg,qB),e(qB,uso),e(Rg,bso),e(A,vso),e(A,Pg),e(Pg,Eie),e(Eie,Fso),e(Pg,Tso),e(Pg,jB),e(jB,Mso),e(Pg,Eso),e(A,Cso),e(A,Bg),e(Bg,Cie),e(Cie,wso),e(Bg,Aso),e(Bg,DB),e(DB,Lso),e(Bg,yso),e(A,xso),e(A,Ig),e(Ig,wie),e(wie,$so),e(Ig,kso),e(Ig,GB),e(GB,Sso),e(Ig,Rso),e(A,Pso),e(A,Ng),e(Ng,Aie),e(Aie,Bso),e(Ng,Iso),e(Ng,OB),e(OB,Nso),e(Ng,qso),e(A,jso),e(A,qg),e(qg,Lie),e(Lie,Dso),e(qg,Gso),e(qg,VB),e(VB,Oso),e(qg,Vso),e(A,Xso),e(A,jg),e(jg,yie),e(yie,zso),e(jg,Wso),e(jg,XB),e(XB,Qso),e(jg,Uso),e(A,Hso),e(A,Dg),e(Dg,xie),e(xie,Jso),e(Dg,Yso),e(Dg,zB),e(zB,Kso),e(Dg,Zso),e(A,elo),e(A,Gg),e(Gg,$ie),e($ie,olo),e(Gg,rlo),e(Gg,WB),e(WB,tlo),e(Gg,alo),e(A,nlo),e(A,Og),e(Og,kie),e(kie,slo),e(Og,llo),e(Og,QB),e(QB,ilo),e(Og,dlo),e(A,clo),e(A,Vg),e(Vg,Sie),e(Sie,flo),e(Vg,mlo),e(Vg,UB),e(UB,glo),e(Vg,hlo),e(A,plo),e(A,Xg),e(Xg,Rie),e(Rie,_lo),e(Xg,ulo),e(Xg,HB),e(HB,blo),e(Xg,vlo),e(A,Flo),e(A,zg),e(zg,Pie),e(Pie,Tlo),e(zg,Mlo),e(zg,JB),e(JB,Elo),e(zg,Clo),e(A,wlo),e(A,Wg),e(Wg,Bie),e(Bie,Alo),e(Wg,Llo),e(Wg,YB),e(YB,ylo),e(Wg,xlo),e(A,$lo),e(A,Qg),e(Qg,Iie),e(Iie,klo),e(Qg,Slo),e(Qg,KB),e(KB,Rlo),e(Qg,Plo),e(A,Blo),e(A,Ug),e(Ug,Nie),e(Nie,Ilo),e(Ug,Nlo),e(Ug,ZB),e(ZB,qlo),e(Ug,jlo),e(A,Dlo),e(A,Hg),e(Hg,qie),e(qie,Glo),e(Hg,Olo),e(Hg,eI),e(eI,Vlo),e(Hg,Xlo),e(A,zlo),e(A,Jg),e(Jg,jie),e(jie,Wlo),e(Jg,Qlo),e(Jg,oI),e(oI,Ulo),e(Jg,Hlo),e(A,Jlo),e(A,Yg),e(Yg,Die),e(Die,Ylo),e(Yg,Klo),e(Yg,rI),e(rI,Zlo),e(Yg,eio),e(A,oio),e(A,Kg),e(Kg,Gie),e(Gie,rio),e(Kg,tio),e(Kg,tI),e(tI,aio),e(Kg,nio),e(A,sio),e(A,Zg),e(Zg,Oie),e(Oie,lio),e(Zg,iio),e(Zg,aI),e(aI,dio),e(Zg,cio),e(A,fio),e(A,eh),e(eh,Vie),e(Vie,mio),e(eh,gio),e(eh,nI),e(nI,hio),e(eh,pio),e(A,_io),e(A,oh),e(oh,Xie),e(Xie,uio),e(oh,bio),e(oh,sI),e(sI,vio),e(oh,Fio),e(A,Tio),e(A,rh),e(rh,zie),e(zie,Mio),e(rh,Eio),e(rh,lI),e(lI,Cio),e(rh,wio),e(A,Aio),e(A,th),e(th,Wie),e(Wie,Lio),e(th,yio),e(th,iI),e(iI,xio),e(th,$io),e(A,kio),e(A,ah),e(ah,Qie),e(Qie,Sio),e(ah,Rio),e(ah,dI),e(dI,Pio),e(ah,Bio),e(A,Iio),e(A,nh),e(nh,Uie),e(Uie,Nio),e(nh,qio),e(nh,cI),e(cI,jio),e(nh,Dio),e(A,Gio),e(A,sh),e(sh,Hie),e(Hie,Oio),e(sh,Vio),e(sh,fI),e(fI,Xio),e(sh,zio),e(A,Wio),e(A,lh),e(lh,Jie),e(Jie,Qio),e(lh,Uio),e(lh,mI),e(mI,Hio),e(lh,Jio),e(A,Yio),e(A,ih),e(ih,Yie),e(Yie,Kio),e(ih,Zio),e(ih,gI),e(gI,edo),e(ih,odo),e(A,rdo),e(A,dh),e(dh,Kie),e(Kie,tdo),e(dh,ado),e(dh,hI),e(hI,ndo),e(dh,sdo),e(A,ldo),e(A,ch),e(ch,Zie),e(Zie,ido),e(ch,ddo),e(ch,pI),e(pI,cdo),e(ch,fdo),e(A,mdo),e(A,fh),e(fh,ede),e(ede,gdo),e(fh,hdo),e(fh,_I),e(_I,pdo),e(fh,_do),e(A,udo),e(A,mh),e(mh,ode),e(ode,bdo),e(mh,vdo),e(mh,uI),e(uI,Fdo),e(mh,Tdo),e(A,Mdo),e(A,gh),e(gh,rde),e(rde,Edo),e(gh,Cdo),e(gh,bI),e(bI,wdo),e(gh,Ado),e(A,Ldo),e(A,hh),e(hh,tde),e(tde,ydo),e(hh,xdo),e(hh,vI),e(vI,$do),e(hh,kdo),e(A,Sdo),e(A,ph),e(ph,ade),e(ade,Rdo),e(ph,Pdo),e(ph,FI),e(FI,Bdo),e(ph,Ido),e(A,Ndo),e(A,_h),e(_h,nde),e(nde,qdo),e(_h,jdo),e(_h,TI),e(TI,Ddo),e(_h,Gdo),e(A,Odo),e(A,uh),e(uh,sde),e(sde,Vdo),e(uh,Xdo),e(uh,MI),e(MI,zdo),e(uh,Wdo),e(A,Qdo),e(A,bh),e(bh,lde),e(lde,Udo),e(bh,Hdo),e(bh,EI),e(EI,Jdo),e(bh,Ydo),e(A,Kdo),e(A,vh),e(vh,ide),e(ide,Zdo),e(vh,eco),e(vh,CI),e(CI,oco),e(vh,rco),e(A,tco),e(A,Fh),e(Fh,dde),e(dde,aco),e(Fh,nco),e(Fh,wI),e(wI,sco),e(Fh,lco),e(kr,ico),M(Th,kr,null),e(yo,dco),e(yo,Mh),M(ML,Mh,null),e(Mh,cco),e(Mh,cde),e(cde,fco),b(f,oUe,u),b(f,Ki,u),e(Ki,Eh),e(Eh,fde),M(EL,fde,null),e(Ki,mco),e(Ki,mde),e(mde,gco),b(f,rUe,u),b(f,xo,u),M(CL,xo,null),e(xo,hco),e(xo,wL),e(wL,pco),e(wL,AI),e(AI,_co),e(wL,uco),e(xo,bco),e(xo,AL),e(AL,vco),e(AL,gde),e(gde,Fco),e(AL,Tco),e(xo,Mco),e(xo,Sr),M(LL,Sr,null),e(Sr,Eco),e(Sr,hde),e(hde,Cco),e(Sr,wco),e(Sr,Ga),e(Ga,Aco),e(Ga,pde),e(pde,Lco),e(Ga,yco),e(Ga,_de),e(_de,xco),e(Ga,$co),e(Ga,ude),e(ude,kco),e(Ga,Sco),e(Sr,Rco),e(Sr,k),e(k,Hn),e(Hn,bde),e(bde,Pco),e(Hn,Bco),e(Hn,LI),e(LI,Ico),e(Hn,Nco),e(Hn,yI),e(yI,qco),e(Hn,jco),e(k,Dco),e(k,Jn),e(Jn,vde),e(vde,Gco),e(Jn,Oco),e(Jn,xI),e(xI,Vco),e(Jn,Xco),e(Jn,$I),e($I,zco),e(Jn,Wco),e(k,Qco),e(k,Yn),e(Yn,Fde),e(Fde,Uco),e(Yn,Hco),e(Yn,kI),e(kI,Jco),e(Yn,Yco),e(Yn,SI),e(SI,Kco),e(Yn,Zco),e(k,efo),e(k,Ch),e(Ch,Tde),e(Tde,ofo),e(Ch,rfo),e(Ch,RI),e(RI,tfo),e(Ch,afo),e(k,nfo),e(k,Kn),e(Kn,Mde),e(Mde,sfo),e(Kn,lfo),e(Kn,PI),e(PI,ifo),e(Kn,dfo),e(Kn,BI),e(BI,cfo),e(Kn,ffo),e(k,mfo),e(k,wh),e(wh,Ede),e(Ede,gfo),e(wh,hfo),e(wh,II),e(II,pfo),e(wh,_fo),e(k,ufo),e(k,Ah),e(Ah,Cde),e(Cde,bfo),e(Ah,vfo),e(Ah,NI),e(NI,Ffo),e(Ah,Tfo),e(k,Mfo),e(k,Lh),e(Lh,wde),e(wde,Efo),e(Lh,Cfo),e(Lh,qI),e(qI,wfo),e(Lh,Afo),e(k,Lfo),e(k,Zn),e(Zn,Ade),e(Ade,yfo),e(Zn,xfo),e(Zn,jI),e(jI,$fo),e(Zn,kfo),e(Zn,DI),e(DI,Sfo),e(Zn,Rfo),e(k,Pfo),e(k,es),e(es,Lde),e(Lde,Bfo),e(es,Ifo),e(es,GI),e(GI,Nfo),e(es,qfo),e(es,OI),e(OI,jfo),e(es,Dfo),e(k,Gfo),e(k,os),e(os,yde),e(yde,Ofo),e(os,Vfo),e(os,VI),e(VI,Xfo),e(os,zfo),e(os,XI),e(XI,Wfo),e(os,Qfo),e(k,Ufo),e(k,yh),e(yh,xde),e(xde,Hfo),e(yh,Jfo),e(yh,zI),e(zI,Yfo),e(yh,Kfo),e(k,Zfo),e(k,xh),e(xh,$de),e($de,emo),e(xh,omo),e(xh,WI),e(WI,rmo),e(xh,tmo),e(k,amo),e(k,$h),e($h,kde),e(kde,nmo),e($h,smo),e($h,QI),e(QI,lmo),e($h,imo),e(k,dmo),e(k,rs),e(rs,Sde),e(Sde,cmo),e(rs,fmo),e(rs,UI),e(UI,mmo),e(rs,gmo),e(rs,HI),e(HI,hmo),e(rs,pmo),e(k,_mo),e(k,kh),e(kh,Rde),e(Rde,umo),e(kh,bmo),e(kh,JI),e(JI,vmo),e(kh,Fmo),e(k,Tmo),e(k,ts),e(ts,Pde),e(Pde,Mmo),e(ts,Emo),e(ts,YI),e(YI,Cmo),e(ts,wmo),e(ts,KI),e(KI,Amo),e(ts,Lmo),e(k,ymo),e(k,as),e(as,Bde),e(Bde,xmo),e(as,$mo),e(as,ZI),e(ZI,kmo),e(as,Smo),e(as,eN),e(eN,Rmo),e(as,Pmo),e(k,Bmo),e(k,ns),e(ns,Ide),e(Ide,Imo),e(ns,Nmo),e(ns,oN),e(oN,qmo),e(ns,jmo),e(ns,rN),e(rN,Dmo),e(ns,Gmo),e(k,Omo),e(k,ss),e(ss,Nde),e(Nde,Vmo),e(ss,Xmo),e(ss,tN),e(tN,zmo),e(ss,Wmo),e(ss,aN),e(aN,Qmo),e(ss,Umo),e(k,Hmo),e(k,Sh),e(Sh,qde),e(qde,Jmo),e(Sh,Ymo),e(Sh,nN),e(nN,Kmo),e(Sh,Zmo),e(k,ego),e(k,ls),e(ls,jde),e(jde,ogo),e(ls,rgo),e(ls,sN),e(sN,tgo),e(ls,ago),e(ls,lN),e(lN,ngo),e(ls,sgo),e(k,lgo),e(k,is),e(is,Dde),e(Dde,igo),e(is,dgo),e(is,iN),e(iN,cgo),e(is,fgo),e(is,dN),e(dN,mgo),e(is,ggo),e(k,hgo),e(k,ds),e(ds,Gde),e(Gde,pgo),e(ds,_go),e(ds,cN),e(cN,ugo),e(ds,bgo),e(ds,fN),e(fN,vgo),e(ds,Fgo),e(k,Tgo),e(k,cs),e(cs,Ode),e(Ode,Mgo),e(cs,Ego),e(cs,mN),e(mN,Cgo),e(cs,wgo),e(cs,gN),e(gN,Ago),e(cs,Lgo),e(k,ygo),e(k,fs),e(fs,Vde),e(Vde,xgo),e(fs,$go),e(fs,hN),e(hN,kgo),e(fs,Sgo),e(fs,pN),e(pN,Rgo),e(fs,Pgo),e(k,Bgo),e(k,ms),e(ms,Xde),e(Xde,Igo),e(ms,Ngo),e(ms,_N),e(_N,qgo),e(ms,jgo),e(ms,uN),e(uN,Dgo),e(ms,Ggo),e(k,Ogo),e(k,Rh),e(Rh,zde),e(zde,Vgo),e(Rh,Xgo),e(Rh,bN),e(bN,zgo),e(Rh,Wgo),e(k,Qgo),e(k,gs),e(gs,Wde),e(Wde,Ugo),e(gs,Hgo),e(gs,vN),e(vN,Jgo),e(gs,Ygo),e(gs,FN),e(FN,Kgo),e(gs,Zgo),e(k,eho),e(k,Ph),e(Ph,Qde),e(Qde,oho),e(Ph,rho),e(Ph,TN),e(TN,tho),e(Ph,aho),e(k,nho),e(k,hs),e(hs,Ude),e(Ude,sho),e(hs,lho),e(hs,MN),e(MN,iho),e(hs,dho),e(hs,EN),e(EN,cho),e(hs,fho),e(k,mho),e(k,ps),e(ps,Hde),e(Hde,gho),e(ps,hho),e(ps,CN),e(CN,pho),e(ps,_ho),e(ps,wN),e(wN,uho),e(ps,bho),e(k,vho),e(k,_s),e(_s,Jde),e(Jde,Fho),e(_s,Tho),e(_s,AN),e(AN,Mho),e(_s,Eho),e(_s,LN),e(LN,Cho),e(_s,who),e(k,Aho),e(k,Bh),e(Bh,Yde),e(Yde,Lho),e(Bh,yho),e(Bh,yN),e(yN,xho),e(Bh,$ho),e(k,kho),e(k,us),e(us,Kde),e(Kde,Sho),e(us,Rho),e(us,xN),e(xN,Pho),e(us,Bho),e(us,$N),e($N,Iho),e(us,Nho),e(k,qho),e(k,bs),e(bs,Zde),e(Zde,jho),e(bs,Dho),e(bs,kN),e(kN,Gho),e(bs,Oho),e(bs,SN),e(SN,Vho),e(bs,Xho),e(k,zho),e(k,vs),e(vs,ece),e(ece,Who),e(vs,Qho),e(vs,RN),e(RN,Uho),e(vs,Hho),e(vs,PN),e(PN,Jho),e(vs,Yho),e(k,Kho),e(k,Ih),e(Ih,oce),e(oce,Zho),e(Ih,epo),e(Ih,BN),e(BN,opo),e(Ih,rpo),e(k,tpo),e(k,Fs),e(Fs,rce),e(rce,apo),e(Fs,npo),e(Fs,IN),e(IN,spo),e(Fs,lpo),e(Fs,NN),e(NN,ipo),e(Fs,dpo),e(k,cpo),e(k,Ts),e(Ts,tce),e(tce,fpo),e(Ts,mpo),e(Ts,qN),e(qN,gpo),e(Ts,hpo),e(Ts,jN),e(jN,ppo),e(Ts,_po),e(k,upo),e(k,Ms),e(Ms,ace),e(ace,bpo),e(Ms,vpo),e(Ms,DN),e(DN,Fpo),e(Ms,Tpo),e(Ms,GN),e(GN,Mpo),e(Ms,Epo),e(k,Cpo),e(k,Es),e(Es,nce),e(nce,wpo),e(Es,Apo),e(Es,ON),e(ON,Lpo),e(Es,ypo),e(Es,VN),e(VN,xpo),e(Es,$po),e(k,kpo),e(k,Cs),e(Cs,sce),e(sce,Spo),e(Cs,Rpo),e(Cs,XN),e(XN,Ppo),e(Cs,Bpo),e(Cs,zN),e(zN,Ipo),e(Cs,Npo),e(k,qpo),e(k,ws),e(ws,lce),e(lce,jpo),e(ws,Dpo),e(ws,WN),e(WN,Gpo),e(ws,Opo),e(ws,QN),e(QN,Vpo),e(ws,Xpo),e(k,zpo),e(k,As),e(As,ice),e(ice,Wpo),e(As,Qpo),e(As,UN),e(UN,Upo),e(As,Hpo),e(As,HN),e(HN,Jpo),e(As,Ypo),e(k,Kpo),e(k,Ls),e(Ls,dce),e(dce,Zpo),e(Ls,e_o),e(Ls,JN),e(JN,o_o),e(Ls,r_o),e(Ls,YN),e(YN,t_o),e(Ls,a_o),e(k,n_o),e(k,Nh),e(Nh,cce),e(cce,s_o),e(Nh,l_o),e(Nh,KN),e(KN,i_o),e(Nh,d_o),e(k,c_o),e(k,ys),e(ys,fce),e(fce,f_o),e(ys,m_o),e(ys,ZN),e(ZN,g_o),e(ys,h_o),e(ys,eq),e(eq,p_o),e(ys,__o),e(k,u_o),e(k,qh),e(qh,mce),e(mce,b_o),e(qh,v_o),e(qh,oq),e(oq,F_o),e(qh,T_o),e(k,M_o),e(k,jh),e(jh,gce),e(gce,E_o),e(jh,C_o),e(jh,rq),e(rq,w_o),e(jh,A_o),e(k,L_o),e(k,xs),e(xs,hce),e(hce,y_o),e(xs,x_o),e(xs,tq),e(tq,$_o),e(xs,k_o),e(xs,aq),e(aq,S_o),e(xs,R_o),e(k,P_o),e(k,$s),e($s,pce),e(pce,B_o),e($s,I_o),e($s,nq),e(nq,N_o),e($s,q_o),e($s,sq),e(sq,j_o),e($s,D_o),e(k,G_o),e(k,ks),e(ks,_ce),e(_ce,O_o),e(ks,V_o),e(ks,lq),e(lq,X_o),e(ks,z_o),e(ks,iq),e(iq,W_o),e(ks,Q_o),e(k,U_o),e(k,Dh),e(Dh,uce),e(uce,H_o),e(Dh,J_o),e(Dh,dq),e(dq,Y_o),e(Dh,K_o),e(k,Z_o),e(k,Ss),e(Ss,bce),e(bce,euo),e(Ss,ouo),e(Ss,cq),e(cq,ruo),e(Ss,tuo),e(Ss,fq),e(fq,auo),e(Ss,nuo),e(k,suo),e(k,Rs),e(Rs,vce),e(vce,luo),e(Rs,iuo),e(Rs,mq),e(mq,duo),e(Rs,cuo),e(Rs,gq),e(gq,fuo),e(Rs,muo),e(k,guo),e(k,Ps),e(Ps,Fce),e(Fce,huo),e(Ps,puo),e(Ps,hq),e(hq,_uo),e(Ps,uuo),e(Ps,pq),e(pq,buo),e(Ps,vuo),e(k,Fuo),e(k,Bs),e(Bs,Tce),e(Tce,Tuo),e(Bs,Muo),e(Bs,_q),e(_q,Euo),e(Bs,Cuo),e(Bs,uq),e(uq,wuo),e(Bs,Auo),e(k,Luo),e(k,Is),e(Is,Mce),e(Mce,yuo),e(Is,xuo),e(Is,bq),e(bq,$uo),e(Is,kuo),e(Is,vq),e(vq,Suo),e(Is,Ruo),e(k,Puo),e(k,Ns),e(Ns,Ece),e(Ece,Buo),e(Ns,Iuo),e(Ns,Fq),e(Fq,Nuo),e(Ns,quo),e(Ns,Tq),e(Tq,juo),e(Ns,Duo),e(k,Guo),e(k,qs),e(qs,Cce),e(Cce,Ouo),e(qs,Vuo),e(qs,Mq),e(Mq,Xuo),e(qs,zuo),e(qs,Eq),e(Eq,Wuo),e(qs,Quo),e(k,Uuo),e(k,js),e(js,wce),e(wce,Huo),e(js,Juo),e(js,Cq),e(Cq,Yuo),e(js,Kuo),e(js,wq),e(wq,Zuo),e(js,e1o),e(k,o1o),e(k,Gh),e(Gh,Ace),e(Ace,r1o),e(Gh,t1o),e(Gh,Aq),e(Aq,a1o),e(Gh,n1o),e(k,s1o),e(k,Ds),e(Ds,Lce),e(Lce,l1o),e(Ds,i1o),e(Ds,Lq),e(Lq,d1o),e(Ds,c1o),e(Ds,yq),e(yq,f1o),e(Ds,m1o),e(k,g1o),e(k,Gs),e(Gs,yce),e(yce,h1o),e(Gs,p1o),e(Gs,xq),e(xq,_1o),e(Gs,u1o),e(Gs,$q),e($q,b1o),e(Gs,v1o),e(k,F1o),e(k,Oh),e(Oh,xce),e(xce,T1o),e(Oh,M1o),e(Oh,kq),e(kq,E1o),e(Oh,C1o),e(k,w1o),e(k,Vh),e(Vh,$ce),e($ce,A1o),e(Vh,L1o),e(Vh,Sq),e(Sq,y1o),e(Vh,x1o),e(k,$1o),e(k,Xh),e(Xh,kce),e(kce,k1o),e(Xh,S1o),e(Xh,Rq),e(Rq,R1o),e(Xh,P1o),e(k,B1o),e(k,zh),e(zh,Sce),e(Sce,I1o),e(zh,N1o),e(zh,Pq),e(Pq,q1o),e(zh,j1o),e(k,D1o),e(k,Os),e(Os,Rce),e(Rce,G1o),e(Os,O1o),e(Os,Bq),e(Bq,V1o),e(Os,X1o),e(Os,Iq),e(Iq,z1o),e(Os,W1o),e(k,Q1o),e(k,Wh),e(Wh,Pce),e(Pce,U1o),e(Wh,H1o),e(Wh,Nq),e(Nq,J1o),e(Wh,Y1o),e(k,K1o),e(k,Vs),e(Vs,Bce),e(Bce,Z1o),e(Vs,e2o),e(Vs,qq),e(qq,o2o),e(Vs,r2o),e(Vs,jq),e(jq,t2o),e(Vs,a2o),e(k,n2o),e(k,Xs),e(Xs,Ice),e(Ice,s2o),e(Xs,l2o),e(Xs,Dq),e(Dq,i2o),e(Xs,d2o),e(Xs,Gq),e(Gq,c2o),e(Xs,f2o),e(k,m2o),e(k,zs),e(zs,Nce),e(Nce,g2o),e(zs,h2o),e(zs,Oq),e(Oq,p2o),e(zs,_2o),e(zs,Vq),e(Vq,u2o),e(zs,b2o),e(k,v2o),e(k,Ws),e(Ws,qce),e(qce,F2o),e(Ws,T2o),e(Ws,Xq),e(Xq,M2o),e(Ws,E2o),e(Ws,zq),e(zq,C2o),e(Ws,w2o),e(k,A2o),e(k,Qs),e(Qs,jce),e(jce,L2o),e(Qs,y2o),e(Qs,Wq),e(Wq,x2o),e(Qs,$2o),e(Qs,Qq),e(Qq,k2o),e(Qs,S2o),e(k,R2o),e(k,Us),e(Us,Dce),e(Dce,P2o),e(Us,B2o),e(Us,Uq),e(Uq,I2o),e(Us,N2o),e(Us,Hq),e(Hq,q2o),e(Us,j2o),e(k,D2o),e(k,Qh),e(Qh,Gce),e(Gce,G2o),e(Qh,O2o),e(Qh,Jq),e(Jq,V2o),e(Qh,X2o),e(k,z2o),e(k,Uh),e(Uh,Oce),e(Oce,W2o),e(Uh,Q2o),e(Uh,Yq),e(Yq,U2o),e(Uh,H2o),e(k,J2o),e(k,Hs),e(Hs,Vce),e(Vce,Y2o),e(Hs,K2o),e(Hs,Kq),e(Kq,Z2o),e(Hs,ebo),e(Hs,Zq),e(Zq,obo),e(Hs,rbo),e(k,tbo),e(k,Js),e(Js,Xce),e(Xce,abo),e(Js,nbo),e(Js,ej),e(ej,sbo),e(Js,lbo),e(Js,oj),e(oj,ibo),e(Js,dbo),e(k,cbo),e(k,Ys),e(Ys,zce),e(zce,fbo),e(Ys,mbo),e(Ys,rj),e(rj,gbo),e(Ys,hbo),e(Ys,tj),e(tj,pbo),e(Ys,_bo),e(k,ubo),e(k,Hh),e(Hh,Wce),e(Wce,bbo),e(Hh,vbo),e(Hh,aj),e(aj,Fbo),e(Hh,Tbo),e(k,Mbo),e(k,Jh),e(Jh,Qce),e(Qce,Ebo),e(Jh,Cbo),e(Jh,nj),e(nj,wbo),e(Jh,Abo),e(k,Lbo),e(k,Yh),e(Yh,Uce),e(Uce,ybo),e(Yh,xbo),e(Yh,sj),e(sj,$bo),e(Yh,kbo),e(k,Sbo),e(k,Ks),e(Ks,Hce),e(Hce,Rbo),e(Ks,Pbo),e(Ks,lj),e(lj,Bbo),e(Ks,Ibo),e(Ks,ij),e(ij,Nbo),e(Ks,qbo),e(k,jbo),e(k,Zs),e(Zs,Jce),e(Jce,Dbo),e(Zs,Gbo),e(Zs,dj),e(dj,Obo),e(Zs,Vbo),e(Zs,cj),e(cj,Xbo),e(Zs,zbo),e(k,Wbo),e(k,Kh),e(Kh,Yce),e(Yce,Qbo),e(Kh,Ubo),e(Kh,fj),e(fj,Hbo),e(Kh,Jbo),e(k,Ybo),e(k,Zh),e(Zh,Kce),e(Kce,Kbo),e(Zh,Zbo),e(Zh,mj),e(mj,evo),e(Zh,ovo),e(k,rvo),e(k,ep),e(ep,Zce),e(Zce,tvo),e(ep,avo),e(ep,gj),e(gj,nvo),e(ep,svo),e(k,lvo),e(k,el),e(el,efe),e(efe,ivo),e(el,dvo),e(el,hj),e(hj,cvo),e(el,fvo),e(el,pj),e(pj,mvo),e(el,gvo),e(k,hvo),e(k,op),e(op,ofe),e(ofe,pvo),e(op,_vo),e(op,_j),e(_j,uvo),e(op,bvo),e(k,vvo),e(k,rp),e(rp,rfe),e(rfe,Fvo),e(rp,Tvo),e(rp,uj),e(uj,Mvo),e(rp,Evo),e(k,Cvo),e(k,ol),e(ol,tfe),e(tfe,wvo),e(ol,Avo),e(ol,bj),e(bj,Lvo),e(ol,yvo),e(ol,vj),e(vj,xvo),e(ol,$vo),e(k,kvo),e(k,rl),e(rl,afe),e(afe,Svo),e(rl,Rvo),e(rl,Fj),e(Fj,Pvo),e(rl,Bvo),e(rl,Tj),e(Tj,Ivo),e(rl,Nvo),e(k,qvo),e(k,tl),e(tl,nfe),e(nfe,jvo),e(tl,Dvo),e(tl,Mj),e(Mj,Gvo),e(tl,Ovo),e(tl,Ej),e(Ej,Vvo),e(tl,Xvo),e(k,zvo),e(k,al),e(al,sfe),e(sfe,Wvo),e(al,Qvo),e(al,Cj),e(Cj,Uvo),e(al,Hvo),e(al,wj),e(wj,Jvo),e(al,Yvo),e(Sr,Kvo),M(tp,Sr,null),e(xo,Zvo),e(xo,ap),M(yL,ap,null),e(ap,e5o),e(ap,lfe),e(lfe,o5o),b(f,tUe,u),b(f,Zi,u),e(Zi,np),e(np,ife),M(xL,ife,null),e(Zi,r5o),e(Zi,dfe),e(dfe,t5o),b(f,aUe,u),b(f,$o,u),M($L,$o,null),e($o,a5o),e($o,kL),e(kL,n5o),e(kL,Aj),e(Aj,s5o),e(kL,l5o),e($o,i5o),e($o,SL),e(SL,d5o),e(SL,cfe),e(cfe,c5o),e(SL,f5o),e($o,m5o),e($o,Je),M(RL,Je,null),e(Je,g5o),e(Je,ffe),e(ffe,h5o),e(Je,p5o),e(Je,Oa),e(Oa,_5o),e(Oa,mfe),e(mfe,u5o),e(Oa,b5o),e(Oa,gfe),e(gfe,v5o),e(Oa,F5o),e(Oa,hfe),e(hfe,T5o),e(Oa,M5o),e(Je,E5o),e(Je,Q),e(Q,sp),e(sp,pfe),e(pfe,C5o),e(sp,w5o),e(sp,Lj),e(Lj,A5o),e(sp,L5o),e(Q,y5o),e(Q,lp),e(lp,_fe),e(_fe,x5o),e(lp,$5o),e(lp,yj),e(yj,k5o),e(lp,S5o),e(Q,R5o),e(Q,ip),e(ip,ufe),e(ufe,P5o),e(ip,B5o),e(ip,xj),e(xj,I5o),e(ip,N5o),e(Q,q5o),e(Q,dp),e(dp,bfe),e(bfe,j5o),e(dp,D5o),e(dp,$j),e($j,G5o),e(dp,O5o),e(Q,V5o),e(Q,cp),e(cp,vfe),e(vfe,X5o),e(cp,z5o),e(cp,kj),e(kj,W5o),e(cp,Q5o),e(Q,U5o),e(Q,fp),e(fp,Ffe),e(Ffe,H5o),e(fp,J5o),e(fp,Sj),e(Sj,Y5o),e(fp,K5o),e(Q,Z5o),e(Q,mp),e(mp,Tfe),e(Tfe,eFo),e(mp,oFo),e(mp,Rj),e(Rj,rFo),e(mp,tFo),e(Q,aFo),e(Q,gp),e(gp,Mfe),e(Mfe,nFo),e(gp,sFo),e(gp,Pj),e(Pj,lFo),e(gp,iFo),e(Q,dFo),e(Q,hp),e(hp,Efe),e(Efe,cFo),e(hp,fFo),e(hp,Bj),e(Bj,mFo),e(hp,gFo),e(Q,hFo),e(Q,pp),e(pp,Cfe),e(Cfe,pFo),e(pp,_Fo),e(pp,Ij),e(Ij,uFo),e(pp,bFo),e(Q,vFo),e(Q,_p),e(_p,wfe),e(wfe,FFo),e(_p,TFo),e(_p,Nj),e(Nj,MFo),e(_p,EFo),e(Q,CFo),e(Q,up),e(up,Afe),e(Afe,wFo),e(up,AFo),e(up,qj),e(qj,LFo),e(up,yFo),e(Q,xFo),e(Q,bp),e(bp,Lfe),e(Lfe,$Fo),e(bp,kFo),e(bp,jj),e(jj,SFo),e(bp,RFo),e(Q,PFo),e(Q,vp),e(vp,yfe),e(yfe,BFo),e(vp,IFo),e(vp,Dj),e(Dj,NFo),e(vp,qFo),e(Q,jFo),e(Q,Fp),e(Fp,xfe),e(xfe,DFo),e(Fp,GFo),e(Fp,Gj),e(Gj,OFo),e(Fp,VFo),e(Q,XFo),e(Q,Tp),e(Tp,$fe),e($fe,zFo),e(Tp,WFo),e(Tp,Oj),e(Oj,QFo),e(Tp,UFo),e(Q,HFo),e(Q,Mp),e(Mp,kfe),e(kfe,JFo),e(Mp,YFo),e(Mp,Vj),e(Vj,KFo),e(Mp,ZFo),e(Q,eTo),e(Q,Ep),e(Ep,Sfe),e(Sfe,oTo),e(Ep,rTo),e(Ep,Xj),e(Xj,tTo),e(Ep,aTo),e(Q,nTo),e(Q,Cp),e(Cp,Rfe),e(Rfe,sTo),e(Cp,lTo),e(Cp,zj),e(zj,iTo),e(Cp,dTo),e(Q,cTo),e(Q,wp),e(wp,Pfe),e(Pfe,fTo),e(wp,mTo),e(wp,Wj),e(Wj,gTo),e(wp,hTo),e(Q,pTo),e(Q,Ap),e(Ap,Bfe),e(Bfe,_To),e(Ap,uTo),e(Ap,Qj),e(Qj,bTo),e(Ap,vTo),e(Q,FTo),e(Q,Lp),e(Lp,Ife),e(Ife,TTo),e(Lp,MTo),e(Lp,Uj),e(Uj,ETo),e(Lp,CTo),e(Q,wTo),e(Q,yp),e(yp,Nfe),e(Nfe,ATo),e(yp,LTo),e(yp,Hj),e(Hj,yTo),e(yp,xTo),e(Q,$To),e(Q,xp),e(xp,qfe),e(qfe,kTo),e(xp,STo),e(xp,Jj),e(Jj,RTo),e(xp,PTo),e(Q,BTo),e(Q,$p),e($p,jfe),e(jfe,ITo),e($p,NTo),e($p,Yj),e(Yj,qTo),e($p,jTo),e(Q,DTo),e(Q,kp),e(kp,Dfe),e(Dfe,GTo),e(kp,OTo),e(kp,Kj),e(Kj,VTo),e(kp,XTo),e(Q,zTo),e(Q,Sp),e(Sp,Gfe),e(Gfe,WTo),e(Sp,QTo),e(Sp,Zj),e(Zj,UTo),e(Sp,HTo),e(Q,JTo),e(Q,Rp),e(Rp,Ofe),e(Ofe,YTo),e(Rp,KTo),e(Rp,eD),e(eD,ZTo),e(Rp,e7o),e(Q,o7o),e(Q,Pp),e(Pp,Vfe),e(Vfe,r7o),e(Pp,t7o),e(Pp,oD),e(oD,a7o),e(Pp,n7o),e(Q,s7o),e(Q,Bp),e(Bp,Xfe),e(Xfe,l7o),e(Bp,i7o),e(Bp,rD),e(rD,d7o),e(Bp,c7o),e(Q,f7o),e(Q,Ip),e(Ip,zfe),e(zfe,m7o),e(Ip,g7o),e(Ip,tD),e(tD,h7o),e(Ip,p7o),e(Q,_7o),e(Q,Np),e(Np,Wfe),e(Wfe,u7o),e(Np,b7o),e(Np,aD),e(aD,v7o),e(Np,F7o),e(Q,T7o),e(Q,qp),e(qp,Qfe),e(Qfe,M7o),e(qp,E7o),e(qp,nD),e(nD,C7o),e(qp,w7o),e(Q,A7o),e(Q,jp),e(jp,Ufe),e(Ufe,L7o),e(jp,y7o),e(jp,sD),e(sD,x7o),e(jp,$7o),e(Q,k7o),e(Q,Dp),e(Dp,Hfe),e(Hfe,S7o),e(Dp,R7o),e(Dp,lD),e(lD,P7o),e(Dp,B7o),e(Q,I7o),e(Q,Gp),e(Gp,Jfe),e(Jfe,N7o),e(Gp,q7o),e(Gp,iD),e(iD,j7o),e(Gp,D7o),e(Q,G7o),e(Q,Op),e(Op,Yfe),e(Yfe,O7o),e(Op,V7o),e(Op,dD),e(dD,X7o),e(Op,z7o),e(Q,W7o),e(Q,Vp),e(Vp,Kfe),e(Kfe,Q7o),e(Vp,U7o),e(Vp,cD),e(cD,H7o),e(Vp,J7o),e(Je,Y7o),M(Xp,Je,null),e(Je,K7o),M(zp,Je,null),e($o,Z7o),e($o,Wp),M(PL,Wp,null),e(Wp,e8o),e(Wp,Zfe),e(Zfe,o8o),b(f,nUe,u),b(f,ed,u),e(ed,Qp),e(Qp,eme),M(BL,eme,null),e(ed,r8o),e(ed,ome),e(ome,t8o),b(f,sUe,u),b(f,ko,u),M(IL,ko,null),e(ko,a8o),e(ko,NL),e(NL,n8o),e(NL,fD),e(fD,s8o),e(NL,l8o),e(ko,i8o),e(ko,qL),e(qL,d8o),e(qL,rme),e(rme,c8o),e(qL,f8o),e(ko,m8o),e(ko,Ye),M(jL,Ye,null),e(Ye,g8o),e(Ye,tme),e(tme,h8o),e(Ye,p8o),e(Ye,od),e(od,_8o),e(od,ame),e(ame,u8o),e(od,b8o),e(od,nme),e(nme,v8o),e(od,F8o),e(Ye,T8o),e(Ye,ie),e(ie,Up),e(Up,sme),e(sme,M8o),e(Up,E8o),e(Up,mD),e(mD,C8o),e(Up,w8o),e(ie,A8o),e(ie,Hp),e(Hp,lme),e(lme,L8o),e(Hp,y8o),e(Hp,gD),e(gD,x8o),e(Hp,$8o),e(ie,k8o),e(ie,Jp),e(Jp,ime),e(ime,S8o),e(Jp,R8o),e(Jp,hD),e(hD,P8o),e(Jp,B8o),e(ie,I8o),e(ie,Yp),e(Yp,dme),e(dme,N8o),e(Yp,q8o),e(Yp,pD),e(pD,j8o),e(Yp,D8o),e(ie,G8o),e(ie,Kp),e(Kp,cme),e(cme,O8o),e(Kp,V8o),e(Kp,_D),e(_D,X8o),e(Kp,z8o),e(ie,W8o),e(ie,Zp),e(Zp,fme),e(fme,Q8o),e(Zp,U8o),e(Zp,uD),e(uD,H8o),e(Zp,J8o),e(ie,Y8o),e(ie,e_),e(e_,mme),e(mme,K8o),e(e_,Z8o),e(e_,bD),e(bD,e9o),e(e_,o9o),e(ie,r9o),e(ie,o_),e(o_,gme),e(gme,t9o),e(o_,a9o),e(o_,vD),e(vD,n9o),e(o_,s9o),e(ie,l9o),e(ie,r_),e(r_,hme),e(hme,i9o),e(r_,d9o),e(r_,FD),e(FD,c9o),e(r_,f9o),e(ie,m9o),e(ie,t_),e(t_,pme),e(pme,g9o),e(t_,h9o),e(t_,TD),e(TD,p9o),e(t_,_9o),e(ie,u9o),e(ie,a_),e(a_,_me),e(_me,b9o),e(a_,v9o),e(a_,MD),e(MD,F9o),e(a_,T9o),e(ie,M9o),e(ie,n_),e(n_,ume),e(ume,E9o),e(n_,C9o),e(n_,ED),e(ED,w9o),e(n_,A9o),e(ie,L9o),e(ie,s_),e(s_,bme),e(bme,y9o),e(s_,x9o),e(s_,CD),e(CD,$9o),e(s_,k9o),e(ie,S9o),e(ie,l_),e(l_,vme),e(vme,R9o),e(l_,P9o),e(l_,wD),e(wD,B9o),e(l_,I9o),e(ie,N9o),e(ie,i_),e(i_,Fme),e(Fme,q9o),e(i_,j9o),e(i_,AD),e(AD,D9o),e(i_,G9o),e(ie,O9o),e(ie,d_),e(d_,Tme),e(Tme,V9o),e(d_,X9o),e(d_,LD),e(LD,z9o),e(d_,W9o),e(ie,Q9o),e(ie,c_),e(c_,Mme),e(Mme,U9o),e(c_,H9o),e(c_,yD),e(yD,J9o),e(c_,Y9o),e(ie,K9o),e(ie,f_),e(f_,Eme),e(Eme,Z9o),e(f_,eMo),e(f_,xD),e(xD,oMo),e(f_,rMo),e(ie,tMo),e(ie,m_),e(m_,Cme),e(Cme,aMo),e(m_,nMo),e(m_,$D),e($D,sMo),e(m_,lMo),e(ie,iMo),e(ie,g_),e(g_,wme),e(wme,dMo),e(g_,cMo),e(g_,kD),e(kD,fMo),e(g_,mMo),e(Ye,gMo),M(h_,Ye,null),e(Ye,hMo),M(p_,Ye,null),e(ko,pMo),e(ko,__),M(DL,__,null),e(__,_Mo),e(__,Ame),e(Ame,uMo),b(f,lUe,u),b(f,rd,u),e(rd,u_),e(u_,Lme),M(GL,Lme,null),e(rd,bMo),e(rd,yme),e(yme,vMo),b(f,iUe,u),b(f,So,u),M(OL,So,null),e(So,FMo),e(So,td),e(td,TMo),e(td,SD),e(SD,MMo),e(td,EMo),e(td,RD),e(RD,CMo),e(td,wMo),e(So,AMo),e(So,VL),e(VL,LMo),e(VL,xme),e(xme,yMo),e(VL,xMo),e(So,$Mo),e(So,mt),M(XL,mt,null),e(mt,kMo),e(mt,$me),e($me,SMo),e(mt,RMo),e(mt,ad),e(ad,PMo),e(ad,kme),e(kme,BMo),e(ad,IMo),e(ad,PD),e(PD,NMo),e(ad,qMo),e(mt,jMo),M(b_,mt,null),e(So,DMo),e(So,Ke),M(zL,Ke,null),e(Ke,GMo),e(Ke,Sme),e(Sme,OMo),e(Ke,VMo),e(Ke,Va),e(Va,XMo),e(Va,Rme),e(Rme,zMo),e(Va,WMo),e(Va,Pme),e(Pme,QMo),e(Va,UMo),e(Va,Bme),e(Bme,HMo),e(Va,JMo),e(Ke,YMo),e(Ke,y),e(y,v_),e(v_,Ime),e(Ime,KMo),e(v_,ZMo),e(v_,BD),e(BD,eEo),e(v_,oEo),e(y,rEo),e(y,F_),e(F_,Nme),e(Nme,tEo),e(F_,aEo),e(F_,ID),e(ID,nEo),e(F_,sEo),e(y,lEo),e(y,T_),e(T_,qme),e(qme,iEo),e(T_,dEo),e(T_,ND),e(ND,cEo),e(T_,fEo),e(y,mEo),e(y,M_),e(M_,jme),e(jme,gEo),e(M_,hEo),e(M_,qD),e(qD,pEo),e(M_,_Eo),e(y,uEo),e(y,E_),e(E_,Dme),e(Dme,bEo),e(E_,vEo),e(E_,jD),e(jD,FEo),e(E_,TEo),e(y,MEo),e(y,C_),e(C_,Gme),e(Gme,EEo),e(C_,CEo),e(C_,DD),e(DD,wEo),e(C_,AEo),e(y,LEo),e(y,w_),e(w_,Ome),e(Ome,yEo),e(w_,xEo),e(w_,GD),e(GD,$Eo),e(w_,kEo),e(y,SEo),e(y,A_),e(A_,Vme),e(Vme,REo),e(A_,PEo),e(A_,OD),e(OD,BEo),e(A_,IEo),e(y,NEo),e(y,L_),e(L_,Xme),e(Xme,qEo),e(L_,jEo),e(L_,VD),e(VD,DEo),e(L_,GEo),e(y,OEo),e(y,y_),e(y_,zme),e(zme,VEo),e(y_,XEo),e(y_,XD),e(XD,zEo),e(y_,WEo),e(y,QEo),e(y,x_),e(x_,Wme),e(Wme,UEo),e(x_,HEo),e(x_,zD),e(zD,JEo),e(x_,YEo),e(y,KEo),e(y,$_),e($_,Qme),e(Qme,ZEo),e($_,e4o),e($_,WD),e(WD,o4o),e($_,r4o),e(y,t4o),e(y,k_),e(k_,Ume),e(Ume,a4o),e(k_,n4o),e(k_,QD),e(QD,s4o),e(k_,l4o),e(y,i4o),e(y,S_),e(S_,Hme),e(Hme,d4o),e(S_,c4o),e(S_,UD),e(UD,f4o),e(S_,m4o),e(y,g4o),e(y,R_),e(R_,Jme),e(Jme,h4o),e(R_,p4o),e(R_,HD),e(HD,_4o),e(R_,u4o),e(y,b4o),e(y,P_),e(P_,Yme),e(Yme,v4o),e(P_,F4o),e(P_,JD),e(JD,T4o),e(P_,M4o),e(y,E4o),e(y,B_),e(B_,Kme),e(Kme,C4o),e(B_,w4o),e(B_,YD),e(YD,A4o),e(B_,L4o),e(y,y4o),e(y,I_),e(I_,Zme),e(Zme,x4o),e(I_,$4o),e(I_,KD),e(KD,k4o),e(I_,S4o),e(y,R4o),e(y,N_),e(N_,ege),e(ege,P4o),e(N_,B4o),e(N_,ZD),e(ZD,I4o),e(N_,N4o),e(y,q4o),e(y,q_),e(q_,oge),e(oge,j4o),e(q_,D4o),e(q_,eG),e(eG,G4o),e(q_,O4o),e(y,V4o),e(y,j_),e(j_,rge),e(rge,X4o),e(j_,z4o),e(j_,oG),e(oG,W4o),e(j_,Q4o),e(y,U4o),e(y,D_),e(D_,tge),e(tge,H4o),e(D_,J4o),e(D_,rG),e(rG,Y4o),e(D_,K4o),e(y,Z4o),e(y,G_),e(G_,age),e(age,eCo),e(G_,oCo),e(G_,tG),e(tG,rCo),e(G_,tCo),e(y,aCo),e(y,O_),e(O_,nge),e(nge,nCo),e(O_,sCo),e(O_,aG),e(aG,lCo),e(O_,iCo),e(y,dCo),e(y,V_),e(V_,sge),e(sge,cCo),e(V_,fCo),e(V_,nG),e(nG,mCo),e(V_,gCo),e(y,hCo),e(y,X_),e(X_,lge),e(lge,pCo),e(X_,_Co),e(X_,sG),e(sG,uCo),e(X_,bCo),e(y,vCo),e(y,z_),e(z_,ige),e(ige,FCo),e(z_,TCo),e(z_,lG),e(lG,MCo),e(z_,ECo),e(y,CCo),e(y,W_),e(W_,dge),e(dge,wCo),e(W_,ACo),e(W_,iG),e(iG,LCo),e(W_,yCo),e(y,xCo),e(y,Q_),e(Q_,cge),e(cge,$Co),e(Q_,kCo),e(Q_,dG),e(dG,SCo),e(Q_,RCo),e(y,PCo),e(y,U_),e(U_,fge),e(fge,BCo),e(U_,ICo),e(U_,cG),e(cG,NCo),e(U_,qCo),e(y,jCo),e(y,H_),e(H_,mge),e(mge,DCo),e(H_,GCo),e(H_,fG),e(fG,OCo),e(H_,VCo),e(y,XCo),e(y,J_),e(J_,gge),e(gge,zCo),e(J_,WCo),e(J_,mG),e(mG,QCo),e(J_,UCo),e(y,HCo),e(y,Y_),e(Y_,hge),e(hge,JCo),e(Y_,YCo),e(Y_,gG),e(gG,KCo),e(Y_,ZCo),e(y,e3o),e(y,K_),e(K_,pge),e(pge,o3o),e(K_,r3o),e(K_,hG),e(hG,t3o),e(K_,a3o),e(y,n3o),e(y,Z_),e(Z_,_ge),e(_ge,s3o),e(Z_,l3o),e(Z_,pG),e(pG,i3o),e(Z_,d3o),e(y,c3o),e(y,nl),e(nl,uge),e(uge,f3o),e(nl,m3o),e(nl,_G),e(_G,g3o),e(nl,h3o),e(nl,uG),e(uG,p3o),e(nl,_3o),e(y,u3o),e(y,eu),e(eu,bge),e(bge,b3o),e(eu,v3o),e(eu,bG),e(bG,F3o),e(eu,T3o),e(y,M3o),e(y,ou),e(ou,vge),e(vge,E3o),e(ou,C3o),e(ou,vG),e(vG,w3o),e(ou,A3o),e(y,L3o),e(y,ru),e(ru,Fge),e(Fge,y3o),e(ru,x3o),e(ru,FG),e(FG,$3o),e(ru,k3o),e(y,S3o),e(y,tu),e(tu,Tge),e(Tge,R3o),e(tu,P3o),e(tu,TG),e(TG,B3o),e(tu,I3o),e(y,N3o),e(y,au),e(au,Mge),e(Mge,q3o),e(au,j3o),e(au,MG),e(MG,D3o),e(au,G3o),e(y,O3o),e(y,nu),e(nu,Ege),e(Ege,V3o),e(nu,X3o),e(nu,EG),e(EG,z3o),e(nu,W3o),e(y,Q3o),e(y,su),e(su,Cge),e(Cge,U3o),e(su,H3o),e(su,CG),e(CG,J3o),e(su,Y3o),e(y,K3o),e(y,lu),e(lu,wge),e(wge,Z3o),e(lu,e0o),e(lu,wG),e(wG,o0o),e(lu,r0o),e(y,t0o),e(y,iu),e(iu,Age),e(Age,a0o),e(iu,n0o),e(iu,AG),e(AG,s0o),e(iu,l0o),e(y,i0o),e(y,du),e(du,Lge),e(Lge,d0o),e(du,c0o),e(du,LG),e(LG,f0o),e(du,m0o),e(y,g0o),e(y,cu),e(cu,yge),e(yge,h0o),e(cu,p0o),e(cu,yG),e(yG,_0o),e(cu,u0o),e(y,b0o),e(y,fu),e(fu,xge),e(xge,v0o),e(fu,F0o),e(fu,xG),e(xG,T0o),e(fu,M0o),e(y,E0o),e(y,mu),e(mu,$ge),e($ge,C0o),e(mu,w0o),e(mu,$G),e($G,A0o),e(mu,L0o),e(y,y0o),e(y,gu),e(gu,kge),e(kge,x0o),e(gu,$0o),e(gu,kG),e(kG,k0o),e(gu,S0o),e(y,R0o),e(y,hu),e(hu,Sge),e(Sge,P0o),e(hu,B0o),e(hu,SG),e(SG,I0o),e(hu,N0o),e(y,q0o),e(y,pu),e(pu,Rge),e(Rge,j0o),e(pu,D0o),e(pu,RG),e(RG,G0o),e(pu,O0o),e(y,V0o),e(y,_u),e(_u,Pge),e(Pge,X0o),e(_u,z0o),e(_u,PG),e(PG,W0o),e(_u,Q0o),e(y,U0o),e(y,uu),e(uu,Bge),e(Bge,H0o),e(uu,J0o),e(uu,BG),e(BG,Y0o),e(uu,K0o),e(y,Z0o),e(y,bu),e(bu,Ige),e(Ige,ewo),e(bu,owo),e(bu,IG),e(IG,rwo),e(bu,two),e(y,awo),e(y,vu),e(vu,Nge),e(Nge,nwo),e(vu,swo),e(vu,NG),e(NG,lwo),e(vu,iwo),e(y,dwo),e(y,Fu),e(Fu,qge),e(qge,cwo),e(Fu,fwo),e(Fu,qG),e(qG,mwo),e(Fu,gwo),e(y,hwo),e(y,Tu),e(Tu,jge),e(jge,pwo),e(Tu,_wo),e(Tu,jG),e(jG,uwo),e(Tu,bwo),e(y,vwo),e(y,Mu),e(Mu,Dge),e(Dge,Fwo),e(Mu,Two),e(Mu,DG),e(DG,Mwo),e(Mu,Ewo),e(y,Cwo),e(y,Eu),e(Eu,Gge),e(Gge,wwo),e(Eu,Awo),e(Eu,GG),e(GG,Lwo),e(Eu,ywo),e(y,xwo),e(y,Cu),e(Cu,Oge),e(Oge,$wo),e(Cu,kwo),e(Cu,OG),e(OG,Swo),e(Cu,Rwo),e(y,Pwo),e(y,wu),e(wu,Vge),e(Vge,Bwo),e(wu,Iwo),e(wu,VG),e(VG,Nwo),e(wu,qwo),e(y,jwo),e(y,Au),e(Au,Xge),e(Xge,Dwo),e(Au,Gwo),e(Au,XG),e(XG,Owo),e(Au,Vwo),e(y,Xwo),e(y,Lu),e(Lu,zge),e(zge,zwo),e(Lu,Wwo),e(Lu,zG),e(zG,Qwo),e(Lu,Uwo),e(y,Hwo),e(y,yu),e(yu,Wge),e(Wge,Jwo),e(yu,Ywo),e(yu,WG),e(WG,Kwo),e(yu,Zwo),e(y,e6o),e(y,xu),e(xu,Qge),e(Qge,o6o),e(xu,r6o),e(xu,QG),e(QG,t6o),e(xu,a6o),e(y,n6o),e(y,$u),e($u,Uge),e(Uge,s6o),e($u,l6o),e($u,UG),e(UG,i6o),e($u,d6o),e(y,c6o),e(y,ku),e(ku,Hge),e(Hge,f6o),e(ku,m6o),e(ku,HG),e(HG,g6o),e(ku,h6o),e(y,p6o),e(y,Su),e(Su,Jge),e(Jge,_6o),e(Su,u6o),e(Su,JG),e(JG,b6o),e(Su,v6o),e(y,F6o),e(y,Ru),e(Ru,Yge),e(Yge,T6o),e(Ru,M6o),e(Ru,YG),e(YG,E6o),e(Ru,C6o),e(y,w6o),e(y,Pu),e(Pu,Kge),e(Kge,A6o),e(Pu,L6o),e(Pu,KG),e(KG,y6o),e(Pu,x6o),e(y,$6o),e(y,Bu),e(Bu,Zge),e(Zge,k6o),e(Bu,S6o),e(Bu,ZG),e(ZG,R6o),e(Bu,P6o),e(y,B6o),e(y,Iu),e(Iu,ehe),e(ehe,I6o),e(Iu,N6o),e(Iu,eO),e(eO,q6o),e(Iu,j6o),e(y,D6o),e(y,Nu),e(Nu,ohe),e(ohe,G6o),e(Nu,O6o),e(Nu,oO),e(oO,V6o),e(Nu,X6o),e(y,z6o),e(y,qu),e(qu,rhe),e(rhe,W6o),e(qu,Q6o),e(qu,rO),e(rO,U6o),e(qu,H6o),e(y,J6o),e(y,ju),e(ju,the),e(the,Y6o),e(ju,K6o),e(ju,tO),e(tO,Z6o),e(ju,eAo),e(y,oAo),e(y,Du),e(Du,ahe),e(ahe,rAo),e(Du,tAo),e(Du,aO),e(aO,aAo),e(Du,nAo),e(y,sAo),e(y,Gu),e(Gu,nhe),e(nhe,lAo),e(Gu,iAo),e(Gu,nO),e(nO,dAo),e(Gu,cAo),e(y,fAo),e(y,Ou),e(Ou,she),e(she,mAo),e(Ou,gAo),e(Ou,sO),e(sO,hAo),e(Ou,pAo),e(y,_Ao),e(y,Vu),e(Vu,lhe),e(lhe,uAo),e(Vu,bAo),e(Vu,lO),e(lO,vAo),e(Vu,FAo),e(y,TAo),e(y,Xu),e(Xu,ihe),e(ihe,MAo),e(Xu,EAo),e(Xu,iO),e(iO,CAo),e(Xu,wAo),e(y,AAo),e(y,zu),e(zu,dhe),e(dhe,LAo),e(zu,yAo),e(zu,dO),e(dO,xAo),e(zu,$Ao),e(y,kAo),e(y,Wu),e(Wu,che),e(che,SAo),e(Wu,RAo),e(Wu,cO),e(cO,PAo),e(Wu,BAo),e(y,IAo),e(y,Qu),e(Qu,fhe),e(fhe,NAo),e(Qu,qAo),e(Qu,fO),e(fO,jAo),e(Qu,DAo),e(y,GAo),e(y,Uu),e(Uu,mhe),e(mhe,OAo),e(Uu,VAo),e(Uu,mO),e(mO,XAo),e(Uu,zAo),e(y,WAo),e(y,Hu),e(Hu,ghe),e(ghe,QAo),e(Hu,UAo),e(Hu,gO),e(gO,HAo),e(Hu,JAo),e(y,YAo),e(y,Ju),e(Ju,hhe),e(hhe,KAo),e(Ju,ZAo),e(Ju,hO),e(hO,eLo),e(Ju,oLo),e(y,rLo),e(y,Yu),e(Yu,phe),e(phe,tLo),e(Yu,aLo),e(Yu,pO),e(pO,nLo),e(Yu,sLo),e(y,lLo),e(y,Ku),e(Ku,_he),e(_he,iLo),e(Ku,dLo),e(Ku,_O),e(_O,cLo),e(Ku,fLo),e(y,mLo),e(y,Zu),e(Zu,uhe),e(uhe,gLo),e(Zu,hLo),e(Zu,uO),e(uO,pLo),e(Zu,_Lo),e(y,uLo),e(y,e1),e(e1,bhe),e(bhe,bLo),e(e1,vLo),e(e1,bO),e(bO,FLo),e(e1,TLo),e(y,MLo),e(y,o1),e(o1,vhe),e(vhe,ELo),e(o1,CLo),e(o1,vO),e(vO,wLo),e(o1,ALo),e(y,LLo),e(y,r1),e(r1,Fhe),e(Fhe,yLo),e(r1,xLo),e(r1,FO),e(FO,$Lo),e(r1,kLo),e(y,SLo),e(y,t1),e(t1,The),e(The,RLo),e(t1,PLo),e(t1,TO),e(TO,BLo),e(t1,ILo),e(y,NLo),e(y,a1),e(a1,Mhe),e(Mhe,qLo),e(a1,jLo),e(a1,MO),e(MO,DLo),e(a1,GLo),e(y,OLo),e(y,n1),e(n1,Ehe),e(Ehe,VLo),e(n1,XLo),e(n1,EO),e(EO,zLo),e(n1,WLo),e(y,QLo),e(y,s1),e(s1,Che),e(Che,ULo),e(s1,HLo),e(s1,CO),e(CO,JLo),e(s1,YLo),e(y,KLo),e(y,l1),e(l1,whe),e(whe,ZLo),e(l1,eyo),e(l1,wO),e(wO,oyo),e(l1,ryo),e(y,tyo),e(y,i1),e(i1,Ahe),e(Ahe,ayo),e(i1,nyo),e(i1,AO),e(AO,syo),e(i1,lyo),e(y,iyo),e(y,d1),e(d1,Lhe),e(Lhe,dyo),e(d1,cyo),e(d1,LO),e(LO,fyo),e(d1,myo),e(y,gyo),e(y,c1),e(c1,yhe),e(yhe,hyo),e(c1,pyo),e(c1,yO),e(yO,_yo),e(c1,uyo),e(y,byo),e(y,f1),e(f1,xhe),e(xhe,vyo),e(f1,Fyo),e(f1,xO),e(xO,Tyo),e(f1,Myo),e(y,Eyo),e(y,m1),e(m1,$he),e($he,Cyo),e(m1,wyo),e(m1,$O),e($O,Ayo),e(m1,Lyo),e(y,yyo),e(y,g1),e(g1,khe),e(khe,xyo),e(g1,$yo),e(g1,kO),e(kO,kyo),e(g1,Syo),e(y,Ryo),e(y,h1),e(h1,She),e(She,Pyo),e(h1,Byo),e(h1,SO),e(SO,Iyo),e(h1,Nyo),e(y,qyo),e(y,p1),e(p1,Rhe),e(Rhe,jyo),e(p1,Dyo),e(p1,RO),e(RO,Gyo),e(p1,Oyo),e(y,Vyo),e(y,_1),e(_1,Phe),e(Phe,Xyo),e(_1,zyo),e(_1,PO),e(PO,Wyo),e(_1,Qyo),e(y,Uyo),e(y,u1),e(u1,Bhe),e(Bhe,Hyo),e(u1,Jyo),e(u1,BO),e(BO,Yyo),e(u1,Kyo),e(y,Zyo),e(y,b1),e(b1,Ihe),e(Ihe,exo),e(b1,oxo),e(b1,IO),e(IO,rxo),e(b1,txo),e(y,axo),e(y,v1),e(v1,Nhe),e(Nhe,nxo),e(v1,sxo),e(v1,NO),e(NO,lxo),e(v1,ixo),e(y,dxo),e(y,F1),e(F1,qhe),e(qhe,cxo),e(F1,fxo),e(F1,qO),e(qO,mxo),e(F1,gxo),e(y,hxo),e(y,T1),e(T1,jhe),e(jhe,pxo),e(T1,_xo),e(T1,jO),e(jO,uxo),e(T1,bxo),e(y,vxo),e(y,M1),e(M1,Dhe),e(Dhe,Fxo),e(M1,Txo),e(M1,DO),e(DO,Mxo),e(M1,Exo),e(y,Cxo),e(y,E1),e(E1,Ghe),e(Ghe,wxo),e(E1,Axo),e(E1,GO),e(GO,Lxo),e(E1,yxo),e(y,xxo),e(y,C1),e(C1,Ohe),e(Ohe,$xo),e(C1,kxo),e(C1,OO),e(OO,Sxo),e(C1,Rxo),e(y,Pxo),e(y,w1),e(w1,Vhe),e(Vhe,Bxo),e(w1,Ixo),e(w1,VO),e(VO,Nxo),e(w1,qxo),e(Ke,jxo),e(Ke,A1),e(A1,Dxo),e(A1,Xhe),e(Xhe,Gxo),e(A1,Oxo),e(A1,zhe),e(zhe,Vxo),e(Ke,Xxo),M(L1,Ke,null),b(f,dUe,u),b(f,nd,u),e(nd,y1),e(y1,Whe),M(WL,Whe,null),e(nd,zxo),e(nd,Qhe),e(Qhe,Wxo),b(f,cUe,u),b(f,Ro,u),M(QL,Ro,null),e(Ro,Qxo),e(Ro,sd),e(sd,Uxo),e(sd,XO),e(XO,Hxo),e(sd,Jxo),e(sd,zO),e(zO,Yxo),e(sd,Kxo),e(Ro,Zxo),e(Ro,UL),e(UL,e$o),e(UL,Uhe),e(Uhe,o$o),e(UL,r$o),e(Ro,t$o),e(Ro,gt),M(HL,gt,null),e(gt,a$o),e(gt,Hhe),e(Hhe,n$o),e(gt,s$o),e(gt,ld),e(ld,l$o),e(ld,Jhe),e(Jhe,i$o),e(ld,d$o),e(ld,WO),e(WO,c$o),e(ld,f$o),e(gt,m$o),M(x1,gt,null),e(Ro,g$o),e(Ro,Ze),M(JL,Ze,null),e(Ze,h$o),e(Ze,Yhe),e(Yhe,p$o),e(Ze,_$o),e(Ze,Xa),e(Xa,u$o),e(Xa,Khe),e(Khe,b$o),e(Xa,v$o),e(Xa,Zhe),e(Zhe,F$o),e(Xa,T$o),e(Xa,epe),e(epe,M$o),e(Xa,E$o),e(Ze,C$o),e(Ze,G),e(G,$1),e($1,ope),e(ope,w$o),e($1,A$o),e($1,QO),e(QO,L$o),e($1,y$o),e(G,x$o),e(G,k1),e(k1,rpe),e(rpe,$$o),e(k1,k$o),e(k1,UO),e(UO,S$o),e(k1,R$o),e(G,P$o),e(G,S1),e(S1,tpe),e(tpe,B$o),e(S1,I$o),e(S1,HO),e(HO,N$o),e(S1,q$o),e(G,j$o),e(G,R1),e(R1,ape),e(ape,D$o),e(R1,G$o),e(R1,JO),e(JO,O$o),e(R1,V$o),e(G,X$o),e(G,P1),e(P1,npe),e(npe,z$o),e(P1,W$o),e(P1,YO),e(YO,Q$o),e(P1,U$o),e(G,H$o),e(G,B1),e(B1,spe),e(spe,J$o),e(B1,Y$o),e(B1,KO),e(KO,K$o),e(B1,Z$o),e(G,eko),e(G,I1),e(I1,lpe),e(lpe,oko),e(I1,rko),e(I1,ZO),e(ZO,tko),e(I1,ako),e(G,nko),e(G,N1),e(N1,ipe),e(ipe,sko),e(N1,lko),e(N1,eV),e(eV,iko),e(N1,dko),e(G,cko),e(G,q1),e(q1,dpe),e(dpe,fko),e(q1,mko),e(q1,oV),e(oV,gko),e(q1,hko),e(G,pko),e(G,j1),e(j1,cpe),e(cpe,_ko),e(j1,uko),e(j1,rV),e(rV,bko),e(j1,vko),e(G,Fko),e(G,D1),e(D1,fpe),e(fpe,Tko),e(D1,Mko),e(D1,tV),e(tV,Eko),e(D1,Cko),e(G,wko),e(G,G1),e(G1,mpe),e(mpe,Ako),e(G1,Lko),e(G1,aV),e(aV,yko),e(G1,xko),e(G,$ko),e(G,O1),e(O1,gpe),e(gpe,kko),e(O1,Sko),e(O1,nV),e(nV,Rko),e(O1,Pko),e(G,Bko),e(G,V1),e(V1,hpe),e(hpe,Iko),e(V1,Nko),e(V1,sV),e(sV,qko),e(V1,jko),e(G,Dko),e(G,X1),e(X1,ppe),e(ppe,Gko),e(X1,Oko),e(X1,lV),e(lV,Vko),e(X1,Xko),e(G,zko),e(G,z1),e(z1,_pe),e(_pe,Wko),e(z1,Qko),e(z1,iV),e(iV,Uko),e(z1,Hko),e(G,Jko),e(G,W1),e(W1,upe),e(upe,Yko),e(W1,Kko),e(W1,dV),e(dV,Zko),e(W1,eSo),e(G,oSo),e(G,Q1),e(Q1,bpe),e(bpe,rSo),e(Q1,tSo),e(Q1,cV),e(cV,aSo),e(Q1,nSo),e(G,sSo),e(G,U1),e(U1,vpe),e(vpe,lSo),e(U1,iSo),e(U1,fV),e(fV,dSo),e(U1,cSo),e(G,fSo),e(G,H1),e(H1,Fpe),e(Fpe,mSo),e(H1,gSo),e(H1,mV),e(mV,hSo),e(H1,pSo),e(G,_So),e(G,J1),e(J1,Tpe),e(Tpe,uSo),e(J1,bSo),e(J1,gV),e(gV,vSo),e(J1,FSo),e(G,TSo),e(G,Y1),e(Y1,Mpe),e(Mpe,MSo),e(Y1,ESo),e(Y1,hV),e(hV,CSo),e(Y1,wSo),e(G,ASo),e(G,K1),e(K1,Epe),e(Epe,LSo),e(K1,ySo),e(K1,pV),e(pV,xSo),e(K1,$So),e(G,kSo),e(G,Z1),e(Z1,Cpe),e(Cpe,SSo),e(Z1,RSo),e(Z1,_V),e(_V,PSo),e(Z1,BSo),e(G,ISo),e(G,e2),e(e2,wpe),e(wpe,NSo),e(e2,qSo),e(e2,uV),e(uV,jSo),e(e2,DSo),e(G,GSo),e(G,o2),e(o2,Ape),e(Ape,OSo),e(o2,VSo),e(o2,bV),e(bV,XSo),e(o2,zSo),e(G,WSo),e(G,r2),e(r2,Lpe),e(Lpe,QSo),e(r2,USo),e(r2,vV),e(vV,HSo),e(r2,JSo),e(G,YSo),e(G,t2),e(t2,ype),e(ype,KSo),e(t2,ZSo),e(t2,FV),e(FV,eRo),e(t2,oRo),e(G,rRo),e(G,a2),e(a2,xpe),e(xpe,tRo),e(a2,aRo),e(a2,TV),e(TV,nRo),e(a2,sRo),e(G,lRo),e(G,n2),e(n2,$pe),e($pe,iRo),e(n2,dRo),e(n2,MV),e(MV,cRo),e(n2,fRo),e(G,mRo),e(G,s2),e(s2,kpe),e(kpe,gRo),e(s2,hRo),e(s2,EV),e(EV,pRo),e(s2,_Ro),e(G,uRo),e(G,l2),e(l2,Spe),e(Spe,bRo),e(l2,vRo),e(l2,CV),e(CV,FRo),e(l2,TRo),e(G,MRo),e(G,i2),e(i2,Rpe),e(Rpe,ERo),e(i2,CRo),e(i2,wV),e(wV,wRo),e(i2,ARo),e(G,LRo),e(G,d2),e(d2,Ppe),e(Ppe,yRo),e(d2,xRo),e(d2,AV),e(AV,$Ro),e(d2,kRo),e(G,SRo),e(G,c2),e(c2,Bpe),e(Bpe,RRo),e(c2,PRo),e(c2,LV),e(LV,BRo),e(c2,IRo),e(G,NRo),e(G,f2),e(f2,Ipe),e(Ipe,qRo),e(f2,jRo),e(f2,yV),e(yV,DRo),e(f2,GRo),e(G,ORo),e(G,m2),e(m2,Npe),e(Npe,VRo),e(m2,XRo),e(m2,xV),e(xV,zRo),e(m2,WRo),e(G,QRo),e(G,g2),e(g2,qpe),e(qpe,URo),e(g2,HRo),e(g2,$V),e($V,JRo),e(g2,YRo),e(G,KRo),e(G,h2),e(h2,jpe),e(jpe,ZRo),e(h2,ePo),e(h2,kV),e(kV,oPo),e(h2,rPo),e(G,tPo),e(G,p2),e(p2,Dpe),e(Dpe,aPo),e(p2,nPo),e(p2,SV),e(SV,sPo),e(p2,lPo),e(G,iPo),e(G,_2),e(_2,Gpe),e(Gpe,dPo),e(_2,cPo),e(_2,RV),e(RV,fPo),e(_2,mPo),e(G,gPo),e(G,u2),e(u2,Ope),e(Ope,hPo),e(u2,pPo),e(u2,PV),e(PV,_Po),e(u2,uPo),e(G,bPo),e(G,b2),e(b2,Vpe),e(Vpe,vPo),e(b2,FPo),e(b2,BV),e(BV,TPo),e(b2,MPo),e(G,EPo),e(G,v2),e(v2,Xpe),e(Xpe,CPo),e(v2,wPo),e(v2,IV),e(IV,APo),e(v2,LPo),e(G,yPo),e(G,F2),e(F2,zpe),e(zpe,xPo),e(F2,$Po),e(F2,NV),e(NV,kPo),e(F2,SPo),e(G,RPo),e(G,T2),e(T2,Wpe),e(Wpe,PPo),e(T2,BPo),e(T2,qV),e(qV,IPo),e(T2,NPo),e(G,qPo),e(G,M2),e(M2,Qpe),e(Qpe,jPo),e(M2,DPo),e(M2,jV),e(jV,GPo),e(M2,OPo),e(Ze,VPo),e(Ze,E2),e(E2,XPo),e(E2,Upe),e(Upe,zPo),e(E2,WPo),e(E2,Hpe),e(Hpe,QPo),e(Ze,UPo),M(C2,Ze,null),b(f,fUe,u),b(f,id,u),e(id,w2),e(w2,Jpe),M(YL,Jpe,null),e(id,HPo),e(id,Ype),e(Ype,JPo),b(f,mUe,u),b(f,Po,u),M(KL,Po,null),e(Po,YPo),e(Po,dd),e(dd,KPo),e(dd,DV),e(DV,ZPo),e(dd,eBo),e(dd,GV),e(GV,oBo),e(dd,rBo),e(Po,tBo),e(Po,ZL),e(ZL,aBo),e(ZL,Kpe),e(Kpe,nBo),e(ZL,sBo),e(Po,lBo),e(Po,ht),M(ey,ht,null),e(ht,iBo),e(ht,Zpe),e(Zpe,dBo),e(ht,cBo),e(ht,cd),e(cd,fBo),e(cd,e_e),e(e_e,mBo),e(cd,gBo),e(cd,OV),e(OV,hBo),e(cd,pBo),e(ht,_Bo),M(A2,ht,null),e(Po,uBo),e(Po,eo),M(oy,eo,null),e(eo,bBo),e(eo,o_e),e(o_e,vBo),e(eo,FBo),e(eo,za),e(za,TBo),e(za,r_e),e(r_e,MBo),e(za,EBo),e(za,t_e),e(t_e,CBo),e(za,wBo),e(za,a_e),e(a_e,ABo),e(za,LBo),e(eo,yBo),e(eo,z),e(z,L2),e(L2,n_e),e(n_e,xBo),e(L2,$Bo),e(L2,VV),e(VV,kBo),e(L2,SBo),e(z,RBo),e(z,y2),e(y2,s_e),e(s_e,PBo),e(y2,BBo),e(y2,XV),e(XV,IBo),e(y2,NBo),e(z,qBo),e(z,x2),e(x2,l_e),e(l_e,jBo),e(x2,DBo),e(x2,zV),e(zV,GBo),e(x2,OBo),e(z,VBo),e(z,$2),e($2,i_e),e(i_e,XBo),e($2,zBo),e($2,WV),e(WV,WBo),e($2,QBo),e(z,UBo),e(z,k2),e(k2,d_e),e(d_e,HBo),e(k2,JBo),e(k2,QV),e(QV,YBo),e(k2,KBo),e(z,ZBo),e(z,S2),e(S2,c_e),e(c_e,eIo),e(S2,oIo),e(S2,UV),e(UV,rIo),e(S2,tIo),e(z,aIo),e(z,R2),e(R2,f_e),e(f_e,nIo),e(R2,sIo),e(R2,HV),e(HV,lIo),e(R2,iIo),e(z,dIo),e(z,P2),e(P2,m_e),e(m_e,cIo),e(P2,fIo),e(P2,JV),e(JV,mIo),e(P2,gIo),e(z,hIo),e(z,B2),e(B2,g_e),e(g_e,pIo),e(B2,_Io),e(B2,YV),e(YV,uIo),e(B2,bIo),e(z,vIo),e(z,I2),e(I2,h_e),e(h_e,FIo),e(I2,TIo),e(I2,KV),e(KV,MIo),e(I2,EIo),e(z,CIo),e(z,N2),e(N2,p_e),e(p_e,wIo),e(N2,AIo),e(N2,ZV),e(ZV,LIo),e(N2,yIo),e(z,xIo),e(z,q2),e(q2,__e),e(__e,$Io),e(q2,kIo),e(q2,eX),e(eX,SIo),e(q2,RIo),e(z,PIo),e(z,j2),e(j2,u_e),e(u_e,BIo),e(j2,IIo),e(j2,oX),e(oX,NIo),e(j2,qIo),e(z,jIo),e(z,D2),e(D2,b_e),e(b_e,DIo),e(D2,GIo),e(D2,rX),e(rX,OIo),e(D2,VIo),e(z,XIo),e(z,G2),e(G2,v_e),e(v_e,zIo),e(G2,WIo),e(G2,tX),e(tX,QIo),e(G2,UIo),e(z,HIo),e(z,O2),e(O2,F_e),e(F_e,JIo),e(O2,YIo),e(O2,aX),e(aX,KIo),e(O2,ZIo),e(z,eNo),e(z,V2),e(V2,T_e),e(T_e,oNo),e(V2,rNo),e(V2,nX),e(nX,tNo),e(V2,aNo),e(z,nNo),e(z,X2),e(X2,M_e),e(M_e,sNo),e(X2,lNo),e(X2,sX),e(sX,iNo),e(X2,dNo),e(z,cNo),e(z,z2),e(z2,E_e),e(E_e,fNo),e(z2,mNo),e(z2,lX),e(lX,gNo),e(z2,hNo),e(z,pNo),e(z,W2),e(W2,C_e),e(C_e,_No),e(W2,uNo),e(W2,iX),e(iX,bNo),e(W2,vNo),e(z,FNo),e(z,Q2),e(Q2,w_e),e(w_e,TNo),e(Q2,MNo),e(Q2,dX),e(dX,ENo),e(Q2,CNo),e(z,wNo),e(z,U2),e(U2,A_e),e(A_e,ANo),e(U2,LNo),e(U2,cX),e(cX,yNo),e(U2,xNo),e(z,$No),e(z,H2),e(H2,L_e),e(L_e,kNo),e(H2,SNo),e(H2,fX),e(fX,RNo),e(H2,PNo),e(z,BNo),e(z,J2),e(J2,y_e),e(y_e,INo),e(J2,NNo),e(J2,mX),e(mX,qNo),e(J2,jNo),e(z,DNo),e(z,Y2),e(Y2,x_e),e(x_e,GNo),e(Y2,ONo),e(Y2,gX),e(gX,VNo),e(Y2,XNo),e(z,zNo),e(z,K2),e(K2,$_e),e($_e,WNo),e(K2,QNo),e(K2,hX),e(hX,UNo),e(K2,HNo),e(z,JNo),e(z,Z2),e(Z2,k_e),e(k_e,YNo),e(Z2,KNo),e(Z2,pX),e(pX,ZNo),e(Z2,eqo),e(z,oqo),e(z,eb),e(eb,S_e),e(S_e,rqo),e(eb,tqo),e(eb,_X),e(_X,aqo),e(eb,nqo),e(z,sqo),e(z,ob),e(ob,R_e),e(R_e,lqo),e(ob,iqo),e(ob,uX),e(uX,dqo),e(ob,cqo),e(z,fqo),e(z,rb),e(rb,P_e),e(P_e,mqo),e(rb,gqo),e(rb,bX),e(bX,hqo),e(rb,pqo),e(z,_qo),e(z,tb),e(tb,B_e),e(B_e,uqo),e(tb,bqo),e(tb,vX),e(vX,vqo),e(tb,Fqo),e(z,Tqo),e(z,ab),e(ab,I_e),e(I_e,Mqo),e(ab,Eqo),e(ab,FX),e(FX,Cqo),e(ab,wqo),e(z,Aqo),e(z,nb),e(nb,N_e),e(N_e,Lqo),e(nb,yqo),e(nb,TX),e(TX,xqo),e(nb,$qo),e(z,kqo),e(z,sb),e(sb,q_e),e(q_e,Sqo),e(sb,Rqo),e(sb,MX),e(MX,Pqo),e(sb,Bqo),e(z,Iqo),e(z,lb),e(lb,j_e),e(j_e,Nqo),e(lb,qqo),e(lb,EX),e(EX,jqo),e(lb,Dqo),e(z,Gqo),e(z,ib),e(ib,D_e),e(D_e,Oqo),e(ib,Vqo),e(ib,CX),e(CX,Xqo),e(ib,zqo),e(z,Wqo),e(z,db),e(db,G_e),e(G_e,Qqo),e(db,Uqo),e(db,wX),e(wX,Hqo),e(db,Jqo),e(z,Yqo),e(z,cb),e(cb,O_e),e(O_e,Kqo),e(cb,Zqo),e(cb,AX),e(AX,ejo),e(cb,ojo),e(z,rjo),e(z,fb),e(fb,V_e),e(V_e,tjo),e(fb,ajo),e(fb,LX),e(LX,njo),e(fb,sjo),e(z,ljo),e(z,mb),e(mb,X_e),e(X_e,ijo),e(mb,djo),e(mb,yX),e(yX,cjo),e(mb,fjo),e(eo,mjo),e(eo,gb),e(gb,gjo),e(gb,z_e),e(z_e,hjo),e(gb,pjo),e(gb,W_e),e(W_e,_jo),e(eo,ujo),M(hb,eo,null),b(f,gUe,u),b(f,fd,u),e(fd,pb),e(pb,Q_e),M(ry,Q_e,null),e(fd,bjo),e(fd,U_e),e(U_e,vjo),b(f,hUe,u),b(f,Bo,u),M(ty,Bo,null),e(Bo,Fjo),e(Bo,md),e(md,Tjo),e(md,xX),e(xX,Mjo),e(md,Ejo),e(md,$X),e($X,Cjo),e(md,wjo),e(Bo,Ajo),e(Bo,ay),e(ay,Ljo),e(ay,H_e),e(H_e,yjo),e(ay,xjo),e(Bo,$jo),e(Bo,pt),M(ny,pt,null),e(pt,kjo),e(pt,J_e),e(J_e,Sjo),e(pt,Rjo),e(pt,gd),e(gd,Pjo),e(gd,Y_e),e(Y_e,Bjo),e(gd,Ijo),e(gd,kX),e(kX,Njo),e(gd,qjo),e(pt,jjo),M(_b,pt,null),e(Bo,Djo),e(Bo,oo),M(sy,oo,null),e(oo,Gjo),e(oo,K_e),e(K_e,Ojo),e(oo,Vjo),e(oo,Wa),e(Wa,Xjo),e(Wa,Z_e),e(Z_e,zjo),e(Wa,Wjo),e(Wa,eue),e(eue,Qjo),e(Wa,Ujo),e(Wa,oue),e(oue,Hjo),e(Wa,Jjo),e(oo,Yjo),e(oo,U),e(U,ub),e(ub,rue),e(rue,Kjo),e(ub,Zjo),e(ub,SX),e(SX,eDo),e(ub,oDo),e(U,rDo),e(U,bb),e(bb,tue),e(tue,tDo),e(bb,aDo),e(bb,RX),e(RX,nDo),e(bb,sDo),e(U,lDo),e(U,vb),e(vb,aue),e(aue,iDo),e(vb,dDo),e(vb,PX),e(PX,cDo),e(vb,fDo),e(U,mDo),e(U,Fb),e(Fb,nue),e(nue,gDo),e(Fb,hDo),e(Fb,BX),e(BX,pDo),e(Fb,_Do),e(U,uDo),e(U,Tb),e(Tb,sue),e(sue,bDo),e(Tb,vDo),e(Tb,IX),e(IX,FDo),e(Tb,TDo),e(U,MDo),e(U,Mb),e(Mb,lue),e(lue,EDo),e(Mb,CDo),e(Mb,NX),e(NX,wDo),e(Mb,ADo),e(U,LDo),e(U,Eb),e(Eb,iue),e(iue,yDo),e(Eb,xDo),e(Eb,qX),e(qX,$Do),e(Eb,kDo),e(U,SDo),e(U,Cb),e(Cb,due),e(due,RDo),e(Cb,PDo),e(Cb,jX),e(jX,BDo),e(Cb,IDo),e(U,NDo),e(U,wb),e(wb,cue),e(cue,qDo),e(wb,jDo),e(wb,DX),e(DX,DDo),e(wb,GDo),e(U,ODo),e(U,Ab),e(Ab,fue),e(fue,VDo),e(Ab,XDo),e(Ab,GX),e(GX,zDo),e(Ab,WDo),e(U,QDo),e(U,Lb),e(Lb,mue),e(mue,UDo),e(Lb,HDo),e(Lb,OX),e(OX,JDo),e(Lb,YDo),e(U,KDo),e(U,yb),e(yb,gue),e(gue,ZDo),e(yb,eGo),e(yb,VX),e(VX,oGo),e(yb,rGo),e(U,tGo),e(U,xb),e(xb,hue),e(hue,aGo),e(xb,nGo),e(xb,XX),e(XX,sGo),e(xb,lGo),e(U,iGo),e(U,$b),e($b,pue),e(pue,dGo),e($b,cGo),e($b,zX),e(zX,fGo),e($b,mGo),e(U,gGo),e(U,kb),e(kb,_ue),e(_ue,hGo),e(kb,pGo),e(kb,WX),e(WX,_Go),e(kb,uGo),e(U,bGo),e(U,Sb),e(Sb,uue),e(uue,vGo),e(Sb,FGo),e(Sb,QX),e(QX,TGo),e(Sb,MGo),e(U,EGo),e(U,Rb),e(Rb,bue),e(bue,CGo),e(Rb,wGo),e(Rb,UX),e(UX,AGo),e(Rb,LGo),e(U,yGo),e(U,Pb),e(Pb,vue),e(vue,xGo),e(Pb,$Go),e(Pb,HX),e(HX,kGo),e(Pb,SGo),e(U,RGo),e(U,Bb),e(Bb,Fue),e(Fue,PGo),e(Bb,BGo),e(Bb,JX),e(JX,IGo),e(Bb,NGo),e(U,qGo),e(U,Ib),e(Ib,Tue),e(Tue,jGo),e(Ib,DGo),e(Ib,YX),e(YX,GGo),e(Ib,OGo),e(U,VGo),e(U,Nb),e(Nb,Mue),e(Mue,XGo),e(Nb,zGo),e(Nb,KX),e(KX,WGo),e(Nb,QGo),e(U,UGo),e(U,qb),e(qb,Eue),e(Eue,HGo),e(qb,JGo),e(qb,ZX),e(ZX,YGo),e(qb,KGo),e(U,ZGo),e(U,jb),e(jb,Cue),e(Cue,eOo),e(jb,oOo),e(jb,ez),e(ez,rOo),e(jb,tOo),e(U,aOo),e(U,Db),e(Db,wue),e(wue,nOo),e(Db,sOo),e(Db,oz),e(oz,lOo),e(Db,iOo),e(U,dOo),e(U,Gb),e(Gb,Aue),e(Aue,cOo),e(Gb,fOo),e(Gb,rz),e(rz,mOo),e(Gb,gOo),e(U,hOo),e(U,Ob),e(Ob,Lue),e(Lue,pOo),e(Ob,_Oo),e(Ob,tz),e(tz,uOo),e(Ob,bOo),e(U,vOo),e(U,Vb),e(Vb,yue),e(yue,FOo),e(Vb,TOo),e(Vb,az),e(az,MOo),e(Vb,EOo),e(U,COo),e(U,Xb),e(Xb,xue),e(xue,wOo),e(Xb,AOo),e(Xb,nz),e(nz,LOo),e(Xb,yOo),e(U,xOo),e(U,zb),e(zb,$ue),e($ue,$Oo),e(zb,kOo),e(zb,sz),e(sz,SOo),e(zb,ROo),e(U,POo),e(U,Wb),e(Wb,kue),e(kue,BOo),e(Wb,IOo),e(Wb,lz),e(lz,NOo),e(Wb,qOo),e(U,jOo),e(U,Qb),e(Qb,Sue),e(Sue,DOo),e(Qb,GOo),e(Qb,iz),e(iz,OOo),e(Qb,VOo),e(U,XOo),e(U,Ub),e(Ub,Rue),e(Rue,zOo),e(Ub,WOo),e(Ub,dz),e(dz,QOo),e(Ub,UOo),e(U,HOo),e(U,Hb),e(Hb,Pue),e(Pue,JOo),e(Hb,YOo),e(Hb,cz),e(cz,KOo),e(Hb,ZOo),e(U,eVo),e(U,Jb),e(Jb,Bue),e(Bue,oVo),e(Jb,rVo),e(Jb,Iue),e(Iue,tVo),e(Jb,aVo),e(U,nVo),e(U,Yb),e(Yb,Nue),e(Nue,sVo),e(Yb,lVo),e(Yb,fz),e(fz,iVo),e(Yb,dVo),e(U,cVo),e(U,Kb),e(Kb,que),e(que,fVo),e(Kb,mVo),e(Kb,mz),e(mz,gVo),e(Kb,hVo),e(U,pVo),e(U,Zb),e(Zb,jue),e(jue,_Vo),e(Zb,uVo),e(Zb,gz),e(gz,bVo),e(Zb,vVo),e(U,FVo),e(U,ev),e(ev,Due),e(Due,TVo),e(ev,MVo),e(ev,hz),e(hz,EVo),e(ev,CVo),e(oo,wVo),e(oo,ov),e(ov,AVo),e(ov,Gue),e(Gue,LVo),e(ov,yVo),e(ov,Oue),e(Oue,xVo),e(oo,$Vo),M(rv,oo,null),b(f,pUe,u),b(f,hd,u),e(hd,tv),e(tv,Vue),M(ly,Vue,null),e(hd,kVo),e(hd,Xue),e(Xue,SVo),b(f,_Ue,u),b(f,Io,u),M(iy,Io,null),e(Io,RVo),e(Io,pd),e(pd,PVo),e(pd,pz),e(pz,BVo),e(pd,IVo),e(pd,_z),e(_z,NVo),e(pd,qVo),e(Io,jVo),e(Io,dy),e(dy,DVo),e(dy,zue),e(zue,GVo),e(dy,OVo),e(Io,VVo),e(Io,_t),M(cy,_t,null),e(_t,XVo),e(_t,Wue),e(Wue,zVo),e(_t,WVo),e(_t,_d),e(_d,QVo),e(_d,Que),e(Que,UVo),e(_d,HVo),e(_d,uz),e(uz,JVo),e(_d,YVo),e(_t,KVo),M(av,_t,null),e(Io,ZVo),e(Io,ro),M(fy,ro,null),e(ro,eXo),e(ro,Uue),e(Uue,oXo),e(ro,rXo),e(ro,Qa),e(Qa,tXo),e(Qa,Hue),e(Hue,aXo),e(Qa,nXo),e(Qa,Jue),e(Jue,sXo),e(Qa,lXo),e(Qa,Yue),e(Yue,iXo),e(Qa,dXo),e(ro,cXo),e(ro,me),e(me,nv),e(nv,Kue),e(Kue,fXo),e(nv,mXo),e(nv,bz),e(bz,gXo),e(nv,hXo),e(me,pXo),e(me,sv),e(sv,Zue),e(Zue,_Xo),e(sv,uXo),e(sv,vz),e(vz,bXo),e(sv,vXo),e(me,FXo),e(me,lv),e(lv,e1e),e(e1e,TXo),e(lv,MXo),e(lv,Fz),e(Fz,EXo),e(lv,CXo),e(me,wXo),e(me,iv),e(iv,o1e),e(o1e,AXo),e(iv,LXo),e(iv,Tz),e(Tz,yXo),e(iv,xXo),e(me,$Xo),e(me,dv),e(dv,r1e),e(r1e,kXo),e(dv,SXo),e(dv,Mz),e(Mz,RXo),e(dv,PXo),e(me,BXo),e(me,cv),e(cv,t1e),e(t1e,IXo),e(cv,NXo),e(cv,Ez),e(Ez,qXo),e(cv,jXo),e(me,DXo),e(me,fv),e(fv,a1e),e(a1e,GXo),e(fv,OXo),e(fv,Cz),e(Cz,VXo),e(fv,XXo),e(me,zXo),e(me,mv),e(mv,n1e),e(n1e,WXo),e(mv,QXo),e(mv,wz),e(wz,UXo),e(mv,HXo),e(me,JXo),e(me,gv),e(gv,s1e),e(s1e,YXo),e(gv,KXo),e(gv,Az),e(Az,ZXo),e(gv,ezo),e(me,ozo),e(me,hv),e(hv,l1e),e(l1e,rzo),e(hv,tzo),e(hv,Lz),e(Lz,azo),e(hv,nzo),e(me,szo),e(me,pv),e(pv,i1e),e(i1e,lzo),e(pv,izo),e(pv,yz),e(yz,dzo),e(pv,czo),e(me,fzo),e(me,_v),e(_v,d1e),e(d1e,mzo),e(_v,gzo),e(_v,xz),e(xz,hzo),e(_v,pzo),e(me,_zo),e(me,uv),e(uv,c1e),e(c1e,uzo),e(uv,bzo),e(uv,$z),e($z,vzo),e(uv,Fzo),e(me,Tzo),e(me,bv),e(bv,f1e),e(f1e,Mzo),e(bv,Ezo),e(bv,kz),e(kz,Czo),e(bv,wzo),e(me,Azo),e(me,vv),e(vv,m1e),e(m1e,Lzo),e(vv,yzo),e(vv,Sz),e(Sz,xzo),e(vv,$zo),e(me,kzo),e(me,Fv),e(Fv,g1e),e(g1e,Szo),e(Fv,Rzo),e(Fv,Rz),e(Rz,Pzo),e(Fv,Bzo),e(me,Izo),e(me,Tv),e(Tv,h1e),e(h1e,Nzo),e(Tv,qzo),e(Tv,Pz),e(Pz,jzo),e(Tv,Dzo),e(me,Gzo),e(me,Mv),e(Mv,p1e),e(p1e,Ozo),e(Mv,Vzo),e(Mv,Bz),e(Bz,Xzo),e(Mv,zzo),e(me,Wzo),e(me,Ev),e(Ev,_1e),e(_1e,Qzo),e(Ev,Uzo),e(Ev,Iz),e(Iz,Hzo),e(Ev,Jzo),e(ro,Yzo),e(ro,Cv),e(Cv,Kzo),e(Cv,u1e),e(u1e,Zzo),e(Cv,eWo),e(Cv,b1e),e(b1e,oWo),e(ro,rWo),M(wv,ro,null),b(f,uUe,u),b(f,ud,u),e(ud,Av),e(Av,v1e),M(my,v1e,null),e(ud,tWo),e(ud,F1e),e(F1e,aWo),b(f,bUe,u),b(f,No,u),M(gy,No,null),e(No,nWo),e(No,bd),e(bd,sWo),e(bd,Nz),e(Nz,lWo),e(bd,iWo),e(bd,qz),e(qz,dWo),e(bd,cWo),e(No,fWo),e(No,hy),e(hy,mWo),e(hy,T1e),e(T1e,gWo),e(hy,hWo),e(No,pWo),e(No,ut),M(py,ut,null),e(ut,_Wo),e(ut,M1e),e(M1e,uWo),e(ut,bWo),e(ut,vd),e(vd,vWo),e(vd,E1e),e(E1e,FWo),e(vd,TWo),e(vd,jz),e(jz,MWo),e(vd,EWo),e(ut,CWo),M(Lv,ut,null),e(No,wWo),e(No,to),M(_y,to,null),e(to,AWo),e(to,C1e),e(C1e,LWo),e(to,yWo),e(to,Ua),e(Ua,xWo),e(Ua,w1e),e(w1e,$Wo),e(Ua,kWo),e(Ua,A1e),e(A1e,SWo),e(Ua,RWo),e(Ua,L1e),e(L1e,PWo),e(Ua,BWo),e(to,IWo),e(to,N),e(N,yv),e(yv,y1e),e(y1e,NWo),e(yv,qWo),e(yv,Dz),e(Dz,jWo),e(yv,DWo),e(N,GWo),e(N,xv),e(xv,x1e),e(x1e,OWo),e(xv,VWo),e(xv,Gz),e(Gz,XWo),e(xv,zWo),e(N,WWo),e(N,$v),e($v,$1e),e($1e,QWo),e($v,UWo),e($v,Oz),e(Oz,HWo),e($v,JWo),e(N,YWo),e(N,kv),e(kv,k1e),e(k1e,KWo),e(kv,ZWo),e(kv,Vz),e(Vz,eQo),e(kv,oQo),e(N,rQo),e(N,Sv),e(Sv,S1e),e(S1e,tQo),e(Sv,aQo),e(Sv,Xz),e(Xz,nQo),e(Sv,sQo),e(N,lQo),e(N,Rv),e(Rv,R1e),e(R1e,iQo),e(Rv,dQo),e(Rv,zz),e(zz,cQo),e(Rv,fQo),e(N,mQo),e(N,Pv),e(Pv,P1e),e(P1e,gQo),e(Pv,hQo),e(Pv,Wz),e(Wz,pQo),e(Pv,_Qo),e(N,uQo),e(N,Bv),e(Bv,B1e),e(B1e,bQo),e(Bv,vQo),e(Bv,Qz),e(Qz,FQo),e(Bv,TQo),e(N,MQo),e(N,Iv),e(Iv,I1e),e(I1e,EQo),e(Iv,CQo),e(Iv,Uz),e(Uz,wQo),e(Iv,AQo),e(N,LQo),e(N,Nv),e(Nv,N1e),e(N1e,yQo),e(Nv,xQo),e(Nv,Hz),e(Hz,$Qo),e(Nv,kQo),e(N,SQo),e(N,qv),e(qv,q1e),e(q1e,RQo),e(qv,PQo),e(qv,Jz),e(Jz,BQo),e(qv,IQo),e(N,NQo),e(N,jv),e(jv,j1e),e(j1e,qQo),e(jv,jQo),e(jv,Yz),e(Yz,DQo),e(jv,GQo),e(N,OQo),e(N,Dv),e(Dv,D1e),e(D1e,VQo),e(Dv,XQo),e(Dv,Kz),e(Kz,zQo),e(Dv,WQo),e(N,QQo),e(N,Gv),e(Gv,G1e),e(G1e,UQo),e(Gv,HQo),e(Gv,Zz),e(Zz,JQo),e(Gv,YQo),e(N,KQo),e(N,Ov),e(Ov,O1e),e(O1e,ZQo),e(Ov,eUo),e(Ov,eW),e(eW,oUo),e(Ov,rUo),e(N,tUo),e(N,Vv),e(Vv,V1e),e(V1e,aUo),e(Vv,nUo),e(Vv,oW),e(oW,sUo),e(Vv,lUo),e(N,iUo),e(N,Xv),e(Xv,X1e),e(X1e,dUo),e(Xv,cUo),e(Xv,rW),e(rW,fUo),e(Xv,mUo),e(N,gUo),e(N,zv),e(zv,z1e),e(z1e,hUo),e(zv,pUo),e(zv,tW),e(tW,_Uo),e(zv,uUo),e(N,bUo),e(N,Wv),e(Wv,W1e),e(W1e,vUo),e(Wv,FUo),e(Wv,aW),e(aW,TUo),e(Wv,MUo),e(N,EUo),e(N,Qv),e(Qv,Q1e),e(Q1e,CUo),e(Qv,wUo),e(Qv,nW),e(nW,AUo),e(Qv,LUo),e(N,yUo),e(N,Uv),e(Uv,U1e),e(U1e,xUo),e(Uv,$Uo),e(Uv,sW),e(sW,kUo),e(Uv,SUo),e(N,RUo),e(N,Hv),e(Hv,H1e),e(H1e,PUo),e(Hv,BUo),e(Hv,lW),e(lW,IUo),e(Hv,NUo),e(N,qUo),e(N,Jv),e(Jv,J1e),e(J1e,jUo),e(Jv,DUo),e(Jv,iW),e(iW,GUo),e(Jv,OUo),e(N,VUo),e(N,Yv),e(Yv,Y1e),e(Y1e,XUo),e(Yv,zUo),e(Yv,dW),e(dW,WUo),e(Yv,QUo),e(N,UUo),e(N,Kv),e(Kv,K1e),e(K1e,HUo),e(Kv,JUo),e(Kv,cW),e(cW,YUo),e(Kv,KUo),e(N,ZUo),e(N,Zv),e(Zv,Z1e),e(Z1e,eHo),e(Zv,oHo),e(Zv,fW),e(fW,rHo),e(Zv,tHo),e(N,aHo),e(N,e5),e(e5,e2e),e(e2e,nHo),e(e5,sHo),e(e5,mW),e(mW,lHo),e(e5,iHo),e(N,dHo),e(N,o5),e(o5,o2e),e(o2e,cHo),e(o5,fHo),e(o5,gW),e(gW,mHo),e(o5,gHo),e(N,hHo),e(N,r5),e(r5,r2e),e(r2e,pHo),e(r5,_Ho),e(r5,hW),e(hW,uHo),e(r5,bHo),e(N,vHo),e(N,t5),e(t5,t2e),e(t2e,FHo),e(t5,THo),e(t5,pW),e(pW,MHo),e(t5,EHo),e(N,CHo),e(N,a5),e(a5,a2e),e(a2e,wHo),e(a5,AHo),e(a5,_W),e(_W,LHo),e(a5,yHo),e(N,xHo),e(N,n5),e(n5,n2e),e(n2e,$Ho),e(n5,kHo),e(n5,uW),e(uW,SHo),e(n5,RHo),e(N,PHo),e(N,s5),e(s5,s2e),e(s2e,BHo),e(s5,IHo),e(s5,bW),e(bW,NHo),e(s5,qHo),e(N,jHo),e(N,l5),e(l5,l2e),e(l2e,DHo),e(l5,GHo),e(l5,vW),e(vW,OHo),e(l5,VHo),e(N,XHo),e(N,i5),e(i5,i2e),e(i2e,zHo),e(i5,WHo),e(i5,FW),e(FW,QHo),e(i5,UHo),e(N,HHo),e(N,d5),e(d5,d2e),e(d2e,JHo),e(d5,YHo),e(d5,TW),e(TW,KHo),e(d5,ZHo),e(N,eJo),e(N,c5),e(c5,c2e),e(c2e,oJo),e(c5,rJo),e(c5,MW),e(MW,tJo),e(c5,aJo),e(N,nJo),e(N,f5),e(f5,f2e),e(f2e,sJo),e(f5,lJo),e(f5,EW),e(EW,iJo),e(f5,dJo),e(N,cJo),e(N,m5),e(m5,m2e),e(m2e,fJo),e(m5,mJo),e(m5,CW),e(CW,gJo),e(m5,hJo),e(N,pJo),e(N,g5),e(g5,g2e),e(g2e,_Jo),e(g5,uJo),e(g5,wW),e(wW,bJo),e(g5,vJo),e(N,FJo),e(N,h5),e(h5,h2e),e(h2e,TJo),e(h5,MJo),e(h5,AW),e(AW,EJo),e(h5,CJo),e(N,wJo),e(N,p5),e(p5,p2e),e(p2e,AJo),e(p5,LJo),e(p5,LW),e(LW,yJo),e(p5,xJo),e(N,$Jo),e(N,_5),e(_5,_2e),e(_2e,kJo),e(_5,SJo),e(_5,yW),e(yW,RJo),e(_5,PJo),e(N,BJo),e(N,u5),e(u5,u2e),e(u2e,IJo),e(u5,NJo),e(u5,xW),e(xW,qJo),e(u5,jJo),e(N,DJo),e(N,b5),e(b5,b2e),e(b2e,GJo),e(b5,OJo),e(b5,$W),e($W,VJo),e(b5,XJo),e(N,zJo),e(N,v5),e(v5,v2e),e(v2e,WJo),e(v5,QJo),e(v5,kW),e(kW,UJo),e(v5,HJo),e(N,JJo),e(N,F5),e(F5,F2e),e(F2e,YJo),e(F5,KJo),e(F5,SW),e(SW,ZJo),e(F5,eYo),e(N,oYo),e(N,T5),e(T5,T2e),e(T2e,rYo),e(T5,tYo),e(T5,RW),e(RW,aYo),e(T5,nYo),e(N,sYo),e(N,M5),e(M5,M2e),e(M2e,lYo),e(M5,iYo),e(M5,PW),e(PW,dYo),e(M5,cYo),e(N,fYo),e(N,E5),e(E5,E2e),e(E2e,mYo),e(E5,gYo),e(E5,BW),e(BW,hYo),e(E5,pYo),e(N,_Yo),e(N,C5),e(C5,C2e),e(C2e,uYo),e(C5,bYo),e(C5,IW),e(IW,vYo),e(C5,FYo),e(N,TYo),e(N,w5),e(w5,w2e),e(w2e,MYo),e(w5,EYo),e(w5,NW),e(NW,CYo),e(w5,wYo),e(to,AYo),e(to,A5),e(A5,LYo),e(A5,A2e),e(A2e,yYo),e(A5,xYo),e(A5,L2e),e(L2e,$Yo),e(to,kYo),M(L5,to,null),b(f,vUe,u),b(f,Fd,u),e(Fd,y5),e(y5,y2e),M(uy,y2e,null),e(Fd,SYo),e(Fd,x2e),e(x2e,RYo),b(f,FUe,u),b(f,qo,u),M(by,qo,null),e(qo,PYo),e(qo,Td),e(Td,BYo),e(Td,qW),e(qW,IYo),e(Td,NYo),e(Td,jW),e(jW,qYo),e(Td,jYo),e(qo,DYo),e(qo,vy),e(vy,GYo),e(vy,$2e),e($2e,OYo),e(vy,VYo),e(qo,XYo),e(qo,bt),M(Fy,bt,null),e(bt,zYo),e(bt,k2e),e(k2e,WYo),e(bt,QYo),e(bt,Md),e(Md,UYo),e(Md,S2e),e(S2e,HYo),e(Md,JYo),e(Md,DW),e(DW,YYo),e(Md,KYo),e(bt,ZYo),M(x5,bt,null),e(qo,eKo),e(qo,ao),M(Ty,ao,null),e(ao,oKo),e(ao,R2e),e(R2e,rKo),e(ao,tKo),e(ao,Ha),e(Ha,aKo),e(Ha,P2e),e(P2e,nKo),e(Ha,sKo),e(Ha,B2e),e(B2e,lKo),e(Ha,iKo),e(Ha,I2e),e(I2e,dKo),e(Ha,cKo),e(ao,fKo),e(ao,Z),e(Z,$5),e($5,N2e),e(N2e,mKo),e($5,gKo),e($5,GW),e(GW,hKo),e($5,pKo),e(Z,_Ko),e(Z,k5),e(k5,q2e),e(q2e,uKo),e(k5,bKo),e(k5,OW),e(OW,vKo),e(k5,FKo),e(Z,TKo),e(Z,S5),e(S5,j2e),e(j2e,MKo),e(S5,EKo),e(S5,VW),e(VW,CKo),e(S5,wKo),e(Z,AKo),e(Z,R5),e(R5,D2e),e(D2e,LKo),e(R5,yKo),e(R5,XW),e(XW,xKo),e(R5,$Ko),e(Z,kKo),e(Z,P5),e(P5,G2e),e(G2e,SKo),e(P5,RKo),e(P5,zW),e(zW,PKo),e(P5,BKo),e(Z,IKo),e(Z,B5),e(B5,O2e),e(O2e,NKo),e(B5,qKo),e(B5,WW),e(WW,jKo),e(B5,DKo),e(Z,GKo),e(Z,I5),e(I5,V2e),e(V2e,OKo),e(I5,VKo),e(I5,QW),e(QW,XKo),e(I5,zKo),e(Z,WKo),e(Z,N5),e(N5,X2e),e(X2e,QKo),e(N5,UKo),e(N5,UW),e(UW,HKo),e(N5,JKo),e(Z,YKo),e(Z,q5),e(q5,z2e),e(z2e,KKo),e(q5,ZKo),e(q5,HW),e(HW,eZo),e(q5,oZo),e(Z,rZo),e(Z,j5),e(j5,W2e),e(W2e,tZo),e(j5,aZo),e(j5,JW),e(JW,nZo),e(j5,sZo),e(Z,lZo),e(Z,D5),e(D5,Q2e),e(Q2e,iZo),e(D5,dZo),e(D5,YW),e(YW,cZo),e(D5,fZo),e(Z,mZo),e(Z,G5),e(G5,U2e),e(U2e,gZo),e(G5,hZo),e(G5,KW),e(KW,pZo),e(G5,_Zo),e(Z,uZo),e(Z,O5),e(O5,H2e),e(H2e,bZo),e(O5,vZo),e(O5,ZW),e(ZW,FZo),e(O5,TZo),e(Z,MZo),e(Z,V5),e(V5,J2e),e(J2e,EZo),e(V5,CZo),e(V5,eQ),e(eQ,wZo),e(V5,AZo),e(Z,LZo),e(Z,X5),e(X5,Y2e),e(Y2e,yZo),e(X5,xZo),e(X5,oQ),e(oQ,$Zo),e(X5,kZo),e(Z,SZo),e(Z,z5),e(z5,K2e),e(K2e,RZo),e(z5,PZo),e(z5,rQ),e(rQ,BZo),e(z5,IZo),e(Z,NZo),e(Z,W5),e(W5,Z2e),e(Z2e,qZo),e(W5,jZo),e(W5,tQ),e(tQ,DZo),e(W5,GZo),e(Z,OZo),e(Z,Q5),e(Q5,ebe),e(ebe,VZo),e(Q5,XZo),e(Q5,aQ),e(aQ,zZo),e(Q5,WZo),e(Z,QZo),e(Z,U5),e(U5,obe),e(obe,UZo),e(U5,HZo),e(U5,nQ),e(nQ,JZo),e(U5,YZo),e(Z,KZo),e(Z,H5),e(H5,rbe),e(rbe,ZZo),e(H5,eer),e(H5,sQ),e(sQ,oer),e(H5,rer),e(Z,ter),e(Z,J5),e(J5,tbe),e(tbe,aer),e(J5,ner),e(J5,lQ),e(lQ,ser),e(J5,ler),e(Z,ier),e(Z,Y5),e(Y5,abe),e(abe,der),e(Y5,cer),e(Y5,iQ),e(iQ,fer),e(Y5,mer),e(Z,ger),e(Z,K5),e(K5,nbe),e(nbe,her),e(K5,per),e(K5,dQ),e(dQ,_er),e(K5,uer),e(Z,ber),e(Z,Z5),e(Z5,sbe),e(sbe,ver),e(Z5,Fer),e(Z5,cQ),e(cQ,Ter),e(Z5,Mer),e(Z,Eer),e(Z,eF),e(eF,lbe),e(lbe,Cer),e(eF,wer),e(eF,fQ),e(fQ,Aer),e(eF,Ler),e(Z,yer),e(Z,oF),e(oF,ibe),e(ibe,xer),e(oF,$er),e(oF,mQ),e(mQ,ker),e(oF,Ser),e(Z,Rer),e(Z,rF),e(rF,dbe),e(dbe,Per),e(rF,Ber),e(rF,gQ),e(gQ,Ier),e(rF,Ner),e(Z,qer),e(Z,tF),e(tF,cbe),e(cbe,jer),e(tF,Der),e(tF,hQ),e(hQ,Ger),e(tF,Oer),e(Z,Ver),e(Z,aF),e(aF,fbe),e(fbe,Xer),e(aF,zer),e(aF,pQ),e(pQ,Wer),e(aF,Qer),e(Z,Uer),e(Z,nF),e(nF,mbe),e(mbe,Her),e(nF,Jer),e(nF,_Q),e(_Q,Yer),e(nF,Ker),e(Z,Zer),e(Z,sF),e(sF,gbe),e(gbe,eor),e(sF,oor),e(sF,uQ),e(uQ,ror),e(sF,tor),e(ao,aor),e(ao,lF),e(lF,nor),e(lF,hbe),e(hbe,sor),e(lF,lor),e(lF,pbe),e(pbe,ior),e(ao,dor),M(iF,ao,null),b(f,TUe,u),b(f,Ed,u),e(Ed,dF),e(dF,_be),M(My,_be,null),e(Ed,cor),e(Ed,ube),e(ube,mor),b(f,MUe,u),b(f,jo,u),M(Ey,jo,null),e(jo,gor),e(jo,Cd),e(Cd,hor),e(Cd,bQ),e(bQ,por),e(Cd,_or),e(Cd,vQ),e(vQ,uor),e(Cd,bor),e(jo,vor),e(jo,Cy),e(Cy,For),e(Cy,bbe),e(bbe,Tor),e(Cy,Mor),e(jo,Eor),e(jo,vt),M(wy,vt,null),e(vt,Cor),e(vt,vbe),e(vbe,wor),e(vt,Aor),e(vt,wd),e(wd,Lor),e(wd,Fbe),e(Fbe,yor),e(wd,xor),e(wd,FQ),e(FQ,$or),e(wd,kor),e(vt,Sor),M(cF,vt,null),e(jo,Ror),e(jo,no),M(Ay,no,null),e(no,Por),e(no,Tbe),e(Tbe,Bor),e(no,Ior),e(no,Ja),e(Ja,Nor),e(Ja,Mbe),e(Mbe,qor),e(Ja,jor),e(Ja,Ebe),e(Ebe,Dor),e(Ja,Gor),e(Ja,Cbe),e(Cbe,Oor),e(Ja,Vor),e(no,Xor),e(no,Do),e(Do,fF),e(fF,wbe),e(wbe,zor),e(fF,Wor),e(fF,TQ),e(TQ,Qor),e(fF,Uor),e(Do,Hor),e(Do,mF),e(mF,Abe),e(Abe,Jor),e(mF,Yor),e(mF,MQ),e(MQ,Kor),e(mF,Zor),e(Do,err),e(Do,gF),e(gF,Lbe),e(Lbe,orr),e(gF,rrr),e(gF,EQ),e(EQ,trr),e(gF,arr),e(Do,nrr),e(Do,hF),e(hF,ybe),e(ybe,srr),e(hF,lrr),e(hF,CQ),e(CQ,irr),e(hF,drr),e(Do,crr),e(Do,pF),e(pF,xbe),e(xbe,frr),e(pF,mrr),e(pF,wQ),e(wQ,grr),e(pF,hrr),e(Do,prr),e(Do,_F),e(_F,$be),e($be,_rr),e(_F,urr),e(_F,AQ),e(AQ,brr),e(_F,vrr),e(no,Frr),e(no,uF),e(uF,Trr),e(uF,kbe),e(kbe,Mrr),e(uF,Err),e(uF,Sbe),e(Sbe,Crr),e(no,wrr),M(bF,no,null),b(f,EUe,u),b(f,Ad,u),e(Ad,vF),e(vF,Rbe),M(Ly,Rbe,null),e(Ad,Arr),e(Ad,Pbe),e(Pbe,Lrr),b(f,CUe,u),b(f,Go,u),M(yy,Go,null),e(Go,yrr),e(Go,Ld),e(Ld,xrr),e(Ld,LQ),e(LQ,$rr),e(Ld,krr),e(Ld,yQ),e(yQ,Srr),e(Ld,Rrr),e(Go,Prr),e(Go,xy),e(xy,Brr),e(xy,Bbe),e(Bbe,Irr),e(xy,Nrr),e(Go,qrr),e(Go,Ft),M($y,Ft,null),e(Ft,jrr),e(Ft,Ibe),e(Ibe,Drr),e(Ft,Grr),e(Ft,yd),e(yd,Orr),e(yd,Nbe),e(Nbe,Vrr),e(yd,Xrr),e(yd,xQ),e(xQ,zrr),e(yd,Wrr),e(Ft,Qrr),M(FF,Ft,null),e(Go,Urr),e(Go,so),M(ky,so,null),e(so,Hrr),e(so,qbe),e(qbe,Jrr),e(so,Yrr),e(so,Ya),e(Ya,Krr),e(Ya,jbe),e(jbe,Zrr),e(Ya,etr),e(Ya,Dbe),e(Dbe,otr),e(Ya,rtr),e(Ya,Gbe),e(Gbe,ttr),e(Ya,atr),e(so,ntr),e(so,H),e(H,TF),e(TF,Obe),e(Obe,str),e(TF,ltr),e(TF,$Q),e($Q,itr),e(TF,dtr),e(H,ctr),e(H,MF),e(MF,Vbe),e(Vbe,ftr),e(MF,mtr),e(MF,kQ),e(kQ,gtr),e(MF,htr),e(H,ptr),e(H,EF),e(EF,Xbe),e(Xbe,_tr),e(EF,utr),e(EF,SQ),e(SQ,btr),e(EF,vtr),e(H,Ftr),e(H,CF),e(CF,zbe),e(zbe,Ttr),e(CF,Mtr),e(CF,RQ),e(RQ,Etr),e(CF,Ctr),e(H,wtr),e(H,wF),e(wF,Wbe),e(Wbe,Atr),e(wF,Ltr),e(wF,PQ),e(PQ,ytr),e(wF,xtr),e(H,$tr),e(H,AF),e(AF,Qbe),e(Qbe,ktr),e(AF,Str),e(AF,BQ),e(BQ,Rtr),e(AF,Ptr),e(H,Btr),e(H,LF),e(LF,Ube),e(Ube,Itr),e(LF,Ntr),e(LF,IQ),e(IQ,qtr),e(LF,jtr),e(H,Dtr),e(H,yF),e(yF,Hbe),e(Hbe,Gtr),e(yF,Otr),e(yF,NQ),e(NQ,Vtr),e(yF,Xtr),e(H,ztr),e(H,xF),e(xF,Jbe),e(Jbe,Wtr),e(xF,Qtr),e(xF,qQ),e(qQ,Utr),e(xF,Htr),e(H,Jtr),e(H,$F),e($F,Ybe),e(Ybe,Ytr),e($F,Ktr),e($F,jQ),e(jQ,Ztr),e($F,ear),e(H,oar),e(H,kF),e(kF,Kbe),e(Kbe,rar),e(kF,tar),e(kF,DQ),e(DQ,aar),e(kF,nar),e(H,sar),e(H,SF),e(SF,Zbe),e(Zbe,lar),e(SF,iar),e(SF,GQ),e(GQ,dar),e(SF,car),e(H,far),e(H,RF),e(RF,eve),e(eve,mar),e(RF,gar),e(RF,OQ),e(OQ,har),e(RF,par),e(H,_ar),e(H,PF),e(PF,ove),e(ove,uar),e(PF,bar),e(PF,VQ),e(VQ,Far),e(PF,Tar),e(H,Mar),e(H,BF),e(BF,rve),e(rve,Ear),e(BF,Car),e(BF,XQ),e(XQ,war),e(BF,Aar),e(H,Lar),e(H,IF),e(IF,tve),e(tve,yar),e(IF,xar),e(IF,zQ),e(zQ,$ar),e(IF,kar),e(H,Sar),e(H,NF),e(NF,ave),e(ave,Rar),e(NF,Par),e(NF,WQ),e(WQ,Bar),e(NF,Iar),e(H,Nar),e(H,qF),e(qF,nve),e(nve,qar),e(qF,jar),e(qF,QQ),e(QQ,Dar),e(qF,Gar),e(H,Oar),e(H,jF),e(jF,sve),e(sve,Var),e(jF,Xar),e(jF,UQ),e(UQ,zar),e(jF,War),e(H,Qar),e(H,DF),e(DF,lve),e(lve,Uar),e(DF,Har),e(DF,HQ),e(HQ,Jar),e(DF,Yar),e(H,Kar),e(H,GF),e(GF,ive),e(ive,Zar),e(GF,enr),e(GF,JQ),e(JQ,onr),e(GF,rnr),e(H,tnr),e(H,OF),e(OF,dve),e(dve,anr),e(OF,nnr),e(OF,YQ),e(YQ,snr),e(OF,lnr),e(H,inr),e(H,VF),e(VF,cve),e(cve,dnr),e(VF,cnr),e(VF,KQ),e(KQ,fnr),e(VF,mnr),e(H,gnr),e(H,XF),e(XF,fve),e(fve,hnr),e(XF,pnr),e(XF,ZQ),e(ZQ,_nr),e(XF,unr),e(H,bnr),e(H,zF),e(zF,mve),e(mve,vnr),e(zF,Fnr),e(zF,eU),e(eU,Tnr),e(zF,Mnr),e(H,Enr),e(H,WF),e(WF,gve),e(gve,Cnr),e(WF,wnr),e(WF,oU),e(oU,Anr),e(WF,Lnr),e(H,ynr),e(H,QF),e(QF,hve),e(hve,xnr),e(QF,$nr),e(QF,rU),e(rU,knr),e(QF,Snr),e(H,Rnr),e(H,UF),e(UF,pve),e(pve,Pnr),e(UF,Bnr),e(UF,tU),e(tU,Inr),e(UF,Nnr),e(H,qnr),e(H,HF),e(HF,_ve),e(_ve,jnr),e(HF,Dnr),e(HF,aU),e(aU,Gnr),e(HF,Onr),e(H,Vnr),e(H,JF),e(JF,uve),e(uve,Xnr),e(JF,znr),e(JF,nU),e(nU,Wnr),e(JF,Qnr),e(H,Unr),e(H,YF),e(YF,bve),e(bve,Hnr),e(YF,Jnr),e(YF,sU),e(sU,Ynr),e(YF,Knr),e(H,Znr),e(H,KF),e(KF,vve),e(vve,esr),e(KF,osr),e(KF,lU),e(lU,rsr),e(KF,tsr),e(H,asr),e(H,ZF),e(ZF,Fve),e(Fve,nsr),e(ZF,ssr),e(ZF,iU),e(iU,lsr),e(ZF,isr),e(H,dsr),e(H,eT),e(eT,Tve),e(Tve,csr),e(eT,fsr),e(eT,dU),e(dU,msr),e(eT,gsr),e(H,hsr),e(H,oT),e(oT,Mve),e(Mve,psr),e(oT,_sr),e(oT,cU),e(cU,usr),e(oT,bsr),e(H,vsr),e(H,rT),e(rT,Eve),e(Eve,Fsr),e(rT,Tsr),e(rT,fU),e(fU,Msr),e(rT,Esr),e(H,Csr),e(H,tT),e(tT,Cve),e(Cve,wsr),e(tT,Asr),e(tT,mU),e(mU,Lsr),e(tT,ysr),e(so,xsr),e(so,aT),e(aT,$sr),e(aT,wve),e(wve,ksr),e(aT,Ssr),e(aT,Ave),e(Ave,Rsr),e(so,Psr),M(nT,so,null),b(f,wUe,u),b(f,xd,u),e(xd,sT),e(sT,Lve),M(Sy,Lve,null),e(xd,Bsr),e(xd,yve),e(yve,Isr),b(f,AUe,u),b(f,Oo,u),M(Ry,Oo,null),e(Oo,Nsr),e(Oo,$d),e($d,qsr),e($d,gU),e(gU,jsr),e($d,Dsr),e($d,hU),e(hU,Gsr),e($d,Osr),e(Oo,Vsr),e(Oo,Py),e(Py,Xsr),e(Py,xve),e(xve,zsr),e(Py,Wsr),e(Oo,Qsr),e(Oo,Tt),M(By,Tt,null),e(Tt,Usr),e(Tt,$ve),e($ve,Hsr),e(Tt,Jsr),e(Tt,kd),e(kd,Ysr),e(kd,kve),e(kve,Ksr),e(kd,Zsr),e(kd,pU),e(pU,elr),e(kd,olr),e(Tt,rlr),M(lT,Tt,null),e(Oo,tlr),e(Oo,lo),M(Iy,lo,null),e(lo,alr),e(lo,Sve),e(Sve,nlr),e(lo,slr),e(lo,Ka),e(Ka,llr),e(Ka,Rve),e(Rve,ilr),e(Ka,dlr),e(Ka,Pve),e(Pve,clr),e(Ka,flr),e(Ka,Bve),e(Bve,mlr),e(Ka,glr),e(lo,hlr),e(lo,V),e(V,iT),e(iT,Ive),e(Ive,plr),e(iT,_lr),e(iT,_U),e(_U,ulr),e(iT,blr),e(V,vlr),e(V,dT),e(dT,Nve),e(Nve,Flr),e(dT,Tlr),e(dT,uU),e(uU,Mlr),e(dT,Elr),e(V,Clr),e(V,cT),e(cT,qve),e(qve,wlr),e(cT,Alr),e(cT,bU),e(bU,Llr),e(cT,ylr),e(V,xlr),e(V,fT),e(fT,jve),e(jve,$lr),e(fT,klr),e(fT,vU),e(vU,Slr),e(fT,Rlr),e(V,Plr),e(V,mT),e(mT,Dve),e(Dve,Blr),e(mT,Ilr),e(mT,FU),e(FU,Nlr),e(mT,qlr),e(V,jlr),e(V,gT),e(gT,Gve),e(Gve,Dlr),e(gT,Glr),e(gT,TU),e(TU,Olr),e(gT,Vlr),e(V,Xlr),e(V,hT),e(hT,Ove),e(Ove,zlr),e(hT,Wlr),e(hT,MU),e(MU,Qlr),e(hT,Ulr),e(V,Hlr),e(V,pT),e(pT,Vve),e(Vve,Jlr),e(pT,Ylr),e(pT,EU),e(EU,Klr),e(pT,Zlr),e(V,eir),e(V,_T),e(_T,Xve),e(Xve,oir),e(_T,rir),e(_T,CU),e(CU,tir),e(_T,air),e(V,nir),e(V,uT),e(uT,zve),e(zve,sir),e(uT,lir),e(uT,wU),e(wU,iir),e(uT,dir),e(V,cir),e(V,bT),e(bT,Wve),e(Wve,fir),e(bT,mir),e(bT,AU),e(AU,gir),e(bT,hir),e(V,pir),e(V,vT),e(vT,Qve),e(Qve,_ir),e(vT,uir),e(vT,LU),e(LU,bir),e(vT,vir),e(V,Fir),e(V,FT),e(FT,Uve),e(Uve,Tir),e(FT,Mir),e(FT,yU),e(yU,Eir),e(FT,Cir),e(V,wir),e(V,TT),e(TT,Hve),e(Hve,Air),e(TT,Lir),e(TT,xU),e(xU,yir),e(TT,xir),e(V,$ir),e(V,MT),e(MT,Jve),e(Jve,kir),e(MT,Sir),e(MT,$U),e($U,Rir),e(MT,Pir),e(V,Bir),e(V,ET),e(ET,Yve),e(Yve,Iir),e(ET,Nir),e(ET,kU),e(kU,qir),e(ET,jir),e(V,Dir),e(V,CT),e(CT,Kve),e(Kve,Gir),e(CT,Oir),e(CT,SU),e(SU,Vir),e(CT,Xir),e(V,zir),e(V,wT),e(wT,Zve),e(Zve,Wir),e(wT,Qir),e(wT,RU),e(RU,Uir),e(wT,Hir),e(V,Jir),e(V,AT),e(AT,e5e),e(e5e,Yir),e(AT,Kir),e(AT,PU),e(PU,Zir),e(AT,edr),e(V,odr),e(V,LT),e(LT,o5e),e(o5e,rdr),e(LT,tdr),e(LT,BU),e(BU,adr),e(LT,ndr),e(V,sdr),e(V,yT),e(yT,r5e),e(r5e,ldr),e(yT,idr),e(yT,IU),e(IU,ddr),e(yT,cdr),e(V,fdr),e(V,xT),e(xT,t5e),e(t5e,mdr),e(xT,gdr),e(xT,NU),e(NU,hdr),e(xT,pdr),e(V,_dr),e(V,$T),e($T,a5e),e(a5e,udr),e($T,bdr),e($T,qU),e(qU,vdr),e($T,Fdr),e(V,Tdr),e(V,kT),e(kT,n5e),e(n5e,Mdr),e(kT,Edr),e(kT,jU),e(jU,Cdr),e(kT,wdr),e(V,Adr),e(V,ST),e(ST,s5e),e(s5e,Ldr),e(ST,ydr),e(ST,DU),e(DU,xdr),e(ST,$dr),e(V,kdr),e(V,RT),e(RT,l5e),e(l5e,Sdr),e(RT,Rdr),e(RT,GU),e(GU,Pdr),e(RT,Bdr),e(V,Idr),e(V,PT),e(PT,i5e),e(i5e,Ndr),e(PT,qdr),e(PT,OU),e(OU,jdr),e(PT,Ddr),e(V,Gdr),e(V,BT),e(BT,d5e),e(d5e,Odr),e(BT,Vdr),e(BT,VU),e(VU,Xdr),e(BT,zdr),e(V,Wdr),e(V,IT),e(IT,c5e),e(c5e,Qdr),e(IT,Udr),e(IT,XU),e(XU,Hdr),e(IT,Jdr),e(V,Ydr),e(V,NT),e(NT,f5e),e(f5e,Kdr),e(NT,Zdr),e(NT,zU),e(zU,ecr),e(NT,ocr),e(V,rcr),e(V,qT),e(qT,m5e),e(m5e,tcr),e(qT,acr),e(qT,WU),e(WU,ncr),e(qT,scr),e(V,lcr),e(V,jT),e(jT,g5e),e(g5e,icr),e(jT,dcr),e(jT,QU),e(QU,ccr),e(jT,fcr),e(V,mcr),e(V,DT),e(DT,h5e),e(h5e,gcr),e(DT,hcr),e(DT,UU),e(UU,pcr),e(DT,_cr),e(V,ucr),e(V,GT),e(GT,p5e),e(p5e,bcr),e(GT,vcr),e(GT,HU),e(HU,Fcr),e(GT,Tcr),e(V,Mcr),e(V,OT),e(OT,_5e),e(_5e,Ecr),e(OT,Ccr),e(OT,JU),e(JU,wcr),e(OT,Acr),e(V,Lcr),e(V,VT),e(VT,u5e),e(u5e,ycr),e(VT,xcr),e(VT,YU),e(YU,$cr),e(VT,kcr),e(V,Scr),e(V,XT),e(XT,b5e),e(b5e,Rcr),e(XT,Pcr),e(XT,KU),e(KU,Bcr),e(XT,Icr),e(V,Ncr),e(V,zT),e(zT,v5e),e(v5e,qcr),e(zT,jcr),e(zT,ZU),e(ZU,Dcr),e(zT,Gcr),e(V,Ocr),e(V,WT),e(WT,F5e),e(F5e,Vcr),e(WT,Xcr),e(WT,eH),e(eH,zcr),e(WT,Wcr),e(V,Qcr),e(V,QT),e(QT,T5e),e(T5e,Ucr),e(QT,Hcr),e(QT,oH),e(oH,Jcr),e(QT,Ycr),e(V,Kcr),e(V,UT),e(UT,M5e),e(M5e,Zcr),e(UT,efr),e(UT,rH),e(rH,ofr),e(UT,rfr),e(V,tfr),e(V,HT),e(HT,E5e),e(E5e,afr),e(HT,nfr),e(HT,tH),e(tH,sfr),e(HT,lfr),e(V,ifr),e(V,JT),e(JT,C5e),e(C5e,dfr),e(JT,cfr),e(JT,aH),e(aH,ffr),e(JT,mfr),e(lo,gfr),e(lo,YT),e(YT,hfr),e(YT,w5e),e(w5e,pfr),e(YT,_fr),e(YT,A5e),e(A5e,ufr),e(lo,bfr),M(KT,lo,null),b(f,LUe,u),b(f,Sd,u),e(Sd,ZT),e(ZT,L5e),M(Ny,L5e,null),e(Sd,vfr),e(Sd,y5e),e(y5e,Ffr),b(f,yUe,u),b(f,Vo,u),M(qy,Vo,null),e(Vo,Tfr),e(Vo,Rd),e(Rd,Mfr),e(Rd,nH),e(nH,Efr),e(Rd,Cfr),e(Rd,sH),e(sH,wfr),e(Rd,Afr),e(Vo,Lfr),e(Vo,jy),e(jy,yfr),e(jy,x5e),e(x5e,xfr),e(jy,$fr),e(Vo,kfr),e(Vo,Mt),M(Dy,Mt,null),e(Mt,Sfr),e(Mt,$5e),e($5e,Rfr),e(Mt,Pfr),e(Mt,Pd),e(Pd,Bfr),e(Pd,k5e),e(k5e,Ifr),e(Pd,Nfr),e(Pd,lH),e(lH,qfr),e(Pd,jfr),e(Mt,Dfr),M(e7,Mt,null),e(Vo,Gfr),e(Vo,io),M(Gy,io,null),e(io,Ofr),e(io,S5e),e(S5e,Vfr),e(io,Xfr),e(io,Za),e(Za,zfr),e(Za,R5e),e(R5e,Wfr),e(Za,Qfr),e(Za,P5e),e(P5e,Ufr),e(Za,Hfr),e(Za,B5e),e(B5e,Jfr),e(Za,Yfr),e(io,Kfr),e(io,I5e),e(I5e,o7),e(o7,N5e),e(N5e,Zfr),e(o7,emr),e(o7,iH),e(iH,omr),e(o7,rmr),e(io,tmr),e(io,r7),e(r7,amr),e(r7,q5e),e(q5e,nmr),e(r7,smr),e(r7,j5e),e(j5e,lmr),e(io,imr),M(t7,io,null),b(f,xUe,u),b(f,Bd,u),e(Bd,a7),e(a7,D5e),M(Oy,D5e,null),e(Bd,dmr),e(Bd,G5e),e(G5e,cmr),b(f,$Ue,u),b(f,Xo,u),M(Vy,Xo,null),e(Xo,fmr),e(Xo,Id),e(Id,mmr),e(Id,dH),e(dH,gmr),e(Id,hmr),e(Id,cH),e(cH,pmr),e(Id,_mr),e(Xo,umr),e(Xo,Xy),e(Xy,bmr),e(Xy,O5e),e(O5e,vmr),e(Xy,Fmr),e(Xo,Tmr),e(Xo,Et),M(zy,Et,null),e(Et,Mmr),e(Et,V5e),e(V5e,Emr),e(Et,Cmr),e(Et,Nd),e(Nd,wmr),e(Nd,X5e),e(X5e,Amr),e(Nd,Lmr),e(Nd,fH),e(fH,ymr),e(Nd,xmr),e(Et,$mr),M(n7,Et,null),e(Xo,kmr),e(Xo,co),M(Wy,co,null),e(co,Smr),e(co,z5e),e(z5e,Rmr),e(co,Pmr),e(co,en),e(en,Bmr),e(en,W5e),e(W5e,Imr),e(en,Nmr),e(en,Q5e),e(Q5e,qmr),e(en,jmr),e(en,U5e),e(U5e,Dmr),e(en,Gmr),e(co,Omr),e(co,be),e(be,s7),e(s7,H5e),e(H5e,Vmr),e(s7,Xmr),e(s7,mH),e(mH,zmr),e(s7,Wmr),e(be,Qmr),e(be,l7),e(l7,J5e),e(J5e,Umr),e(l7,Hmr),e(l7,gH),e(gH,Jmr),e(l7,Ymr),e(be,Kmr),e(be,i7),e(i7,Y5e),e(Y5e,Zmr),e(i7,egr),e(i7,hH),e(hH,ogr),e(i7,rgr),e(be,tgr),e(be,d7),e(d7,K5e),e(K5e,agr),e(d7,ngr),e(d7,pH),e(pH,sgr),e(d7,lgr),e(be,igr),e(be,sl),e(sl,Z5e),e(Z5e,dgr),e(sl,cgr),e(sl,_H),e(_H,fgr),e(sl,mgr),e(sl,uH),e(uH,ggr),e(sl,hgr),e(be,pgr),e(be,c7),e(c7,eFe),e(eFe,_gr),e(c7,ugr),e(c7,bH),e(bH,bgr),e(c7,vgr),e(be,Fgr),e(be,ll),e(ll,oFe),e(oFe,Tgr),e(ll,Mgr),e(ll,vH),e(vH,Egr),e(ll,Cgr),e(ll,FH),e(FH,wgr),e(ll,Agr),e(be,Lgr),e(be,f7),e(f7,rFe),e(rFe,ygr),e(f7,xgr),e(f7,TH),e(TH,$gr),e(f7,kgr),e(be,Sgr),e(be,Ct),e(Ct,tFe),e(tFe,Rgr),e(Ct,Pgr),e(Ct,MH),e(MH,Bgr),e(Ct,Igr),e(Ct,EH),e(EH,Ngr),e(Ct,qgr),e(Ct,CH),e(CH,jgr),e(Ct,Dgr),e(be,Ggr),e(be,m7),e(m7,aFe),e(aFe,Ogr),e(m7,Vgr),e(m7,wH),e(wH,Xgr),e(m7,zgr),e(be,Wgr),e(be,g7),e(g7,nFe),e(nFe,Qgr),e(g7,Ugr),e(g7,AH),e(AH,Hgr),e(g7,Jgr),e(be,Ygr),e(be,h7),e(h7,sFe),e(sFe,Kgr),e(h7,Zgr),e(h7,LH),e(LH,ehr),e(h7,ohr),e(be,rhr),e(be,p7),e(p7,lFe),e(lFe,thr),e(p7,ahr),e(p7,yH),e(yH,nhr),e(p7,shr),e(be,lhr),e(be,_7),e(_7,iFe),e(iFe,ihr),e(_7,dhr),e(_7,xH),e(xH,chr),e(_7,fhr),e(be,mhr),e(be,u7),e(u7,dFe),e(dFe,ghr),e(u7,hhr),e(u7,$H),e($H,phr),e(u7,_hr),e(be,uhr),e(be,b7),e(b7,cFe),e(cFe,bhr),e(b7,vhr),e(b7,kH),e(kH,Fhr),e(b7,Thr),e(be,Mhr),e(be,v7),e(v7,fFe),e(fFe,Ehr),e(v7,Chr),e(v7,SH),e(SH,whr),e(v7,Ahr),e(co,Lhr),e(co,F7),e(F7,yhr),e(F7,mFe),e(mFe,xhr),e(F7,$hr),e(F7,gFe),e(gFe,khr),e(co,Shr),M(T7,co,null),b(f,kUe,u),b(f,qd,u),e(qd,M7),e(M7,hFe),M(Qy,hFe,null),e(qd,Rhr),e(qd,pFe),e(pFe,Phr),b(f,SUe,u),b(f,zo,u),M(Uy,zo,null),e(zo,Bhr),e(zo,jd),e(jd,Ihr),e(jd,RH),e(RH,Nhr),e(jd,qhr),e(jd,PH),e(PH,jhr),e(jd,Dhr),e(zo,Ghr),e(zo,Hy),e(Hy,Ohr),e(Hy,_Fe),e(_Fe,Vhr),e(Hy,Xhr),e(zo,zhr),e(zo,wt),M(Jy,wt,null),e(wt,Whr),e(wt,uFe),e(uFe,Qhr),e(wt,Uhr),e(wt,Dd),e(Dd,Hhr),e(Dd,bFe),e(bFe,Jhr),e(Dd,Yhr),e(Dd,BH),e(BH,Khr),e(Dd,Zhr),e(wt,epr),M(E7,wt,null),e(zo,opr),e(zo,fo),M(Yy,fo,null),e(fo,rpr),e(fo,vFe),e(vFe,tpr),e(fo,apr),e(fo,on),e(on,npr),e(on,FFe),e(FFe,spr),e(on,lpr),e(on,TFe),e(TFe,ipr),e(on,dpr),e(on,MFe),e(MFe,cpr),e(on,fpr),e(fo,mpr),e(fo,EFe),e(EFe,C7),e(C7,CFe),e(CFe,gpr),e(C7,hpr),e(C7,IH),e(IH,ppr),e(C7,_pr),e(fo,upr),e(fo,w7),e(w7,bpr),e(w7,wFe),e(wFe,vpr),e(w7,Fpr),e(w7,AFe),e(AFe,Tpr),e(fo,Mpr),M(A7,fo,null),b(f,RUe,u),b(f,Gd,u),e(Gd,L7),e(L7,LFe),M(Ky,LFe,null),e(Gd,Epr),e(Gd,yFe),e(yFe,Cpr),b(f,PUe,u),b(f,Wo,u),M(Zy,Wo,null),e(Wo,wpr),e(Wo,Od),e(Od,Apr),e(Od,NH),e(NH,Lpr),e(Od,ypr),e(Od,qH),e(qH,xpr),e(Od,$pr),e(Wo,kpr),e(Wo,ex),e(ex,Spr),e(ex,xFe),e(xFe,Rpr),e(ex,Ppr),e(Wo,Bpr),e(Wo,At),M(ox,At,null),e(At,Ipr),e(At,$Fe),e($Fe,Npr),e(At,qpr),e(At,Vd),e(Vd,jpr),e(Vd,kFe),e(kFe,Dpr),e(Vd,Gpr),e(Vd,jH),e(jH,Opr),e(Vd,Vpr),e(At,Xpr),M(y7,At,null),e(Wo,zpr),e(Wo,mo),M(rx,mo,null),e(mo,Wpr),e(mo,SFe),e(SFe,Qpr),e(mo,Upr),e(mo,rn),e(rn,Hpr),e(rn,RFe),e(RFe,Jpr),e(rn,Ypr),e(rn,PFe),e(PFe,Kpr),e(rn,Zpr),e(rn,BFe),e(BFe,e_r),e(rn,o_r),e(mo,r_r),e(mo,IFe),e(IFe,x7),e(x7,NFe),e(NFe,t_r),e(x7,a_r),e(x7,DH),e(DH,n_r),e(x7,s_r),e(mo,l_r),e(mo,$7),e($7,i_r),e($7,qFe),e(qFe,d_r),e($7,c_r),e($7,jFe),e(jFe,f_r),e(mo,m_r),M(k7,mo,null),b(f,BUe,u),b(f,Xd,u),e(Xd,S7),e(S7,DFe),M(tx,DFe,null),e(Xd,g_r),e(Xd,GFe),e(GFe,h_r),b(f,IUe,u),b(f,Qo,u),M(ax,Qo,null),e(Qo,p_r),e(Qo,zd),e(zd,__r),e(zd,GH),e(GH,u_r),e(zd,b_r),e(zd,OH),e(OH,v_r),e(zd,F_r),e(Qo,T_r),e(Qo,nx),e(nx,M_r),e(nx,OFe),e(OFe,E_r),e(nx,C_r),e(Qo,w_r),e(Qo,Lt),M(sx,Lt,null),e(Lt,A_r),e(Lt,VFe),e(VFe,L_r),e(Lt,y_r),e(Lt,Wd),e(Wd,x_r),e(Wd,XFe),e(XFe,$_r),e(Wd,k_r),e(Wd,VH),e(VH,S_r),e(Wd,R_r),e(Lt,P_r),M(R7,Lt,null),e(Qo,B_r),e(Qo,go),M(lx,go,null),e(go,I_r),e(go,zFe),e(zFe,N_r),e(go,q_r),e(go,tn),e(tn,j_r),e(tn,WFe),e(WFe,D_r),e(tn,G_r),e(tn,QFe),e(QFe,O_r),e(tn,V_r),e(tn,UFe),e(UFe,X_r),e(tn,z_r),e(go,W_r),e(go,HFe),e(HFe,P7),e(P7,JFe),e(JFe,Q_r),e(P7,U_r),e(P7,XH),e(XH,H_r),e(P7,J_r),e(go,Y_r),e(go,B7),e(B7,K_r),e(B7,YFe),e(YFe,Z_r),e(B7,eur),e(B7,KFe),e(KFe,our),e(go,rur),M(I7,go,null),b(f,NUe,u),b(f,Qd,u),e(Qd,N7),e(N7,ZFe),M(ix,ZFe,null),e(Qd,tur),e(Qd,eTe),e(eTe,aur),b(f,qUe,u),b(f,Uo,u),M(dx,Uo,null),e(Uo,nur),e(Uo,Ud),e(Ud,sur),e(Ud,zH),e(zH,lur),e(Ud,iur),e(Ud,WH),e(WH,dur),e(Ud,cur),e(Uo,fur),e(Uo,cx),e(cx,mur),e(cx,oTe),e(oTe,gur),e(cx,hur),e(Uo,pur),e(Uo,yt),M(fx,yt,null),e(yt,_ur),e(yt,rTe),e(rTe,uur),e(yt,bur),e(yt,Hd),e(Hd,vur),e(Hd,tTe),e(tTe,Fur),e(Hd,Tur),e(Hd,QH),e(QH,Mur),e(Hd,Eur),e(yt,Cur),M(q7,yt,null),e(Uo,wur),e(Uo,ho),M(mx,ho,null),e(ho,Aur),e(ho,aTe),e(aTe,Lur),e(ho,yur),e(ho,an),e(an,xur),e(an,nTe),e(nTe,$ur),e(an,kur),e(an,sTe),e(sTe,Sur),e(an,Rur),e(an,lTe),e(lTe,Pur),e(an,Bur),e(ho,Iur),e(ho,Pe),e(Pe,j7),e(j7,iTe),e(iTe,Nur),e(j7,qur),e(j7,UH),e(UH,jur),e(j7,Dur),e(Pe,Gur),e(Pe,D7),e(D7,dTe),e(dTe,Our),e(D7,Vur),e(D7,HH),e(HH,Xur),e(D7,zur),e(Pe,Wur),e(Pe,G7),e(G7,cTe),e(cTe,Qur),e(G7,Uur),e(G7,JH),e(JH,Hur),e(G7,Jur),e(Pe,Yur),e(Pe,O7),e(O7,fTe),e(fTe,Kur),e(O7,Zur),e(O7,YH),e(YH,e1r),e(O7,o1r),e(Pe,r1r),e(Pe,V7),e(V7,mTe),e(mTe,t1r),e(V7,a1r),e(V7,KH),e(KH,n1r),e(V7,s1r),e(Pe,l1r),e(Pe,X7),e(X7,gTe),e(gTe,i1r),e(X7,d1r),e(X7,ZH),e(ZH,c1r),e(X7,f1r),e(Pe,m1r),e(Pe,z7),e(z7,hTe),e(hTe,g1r),e(z7,h1r),e(z7,eJ),e(eJ,p1r),e(z7,_1r),e(Pe,u1r),e(Pe,W7),e(W7,pTe),e(pTe,b1r),e(W7,v1r),e(W7,oJ),e(oJ,F1r),e(W7,T1r),e(Pe,M1r),e(Pe,Q7),e(Q7,_Te),e(_Te,E1r),e(Q7,C1r),e(Q7,rJ),e(rJ,w1r),e(Q7,A1r),e(ho,L1r),e(ho,U7),e(U7,y1r),e(U7,uTe),e(uTe,x1r),e(U7,$1r),e(U7,bTe),e(bTe,k1r),e(ho,S1r),M(H7,ho,null),b(f,jUe,u),b(f,Jd,u),e(Jd,J7),e(J7,vTe),M(gx,vTe,null),e(Jd,R1r),e(Jd,FTe),e(FTe,P1r),b(f,DUe,u),b(f,Ho,u),M(hx,Ho,null),e(Ho,B1r),e(Ho,Yd),e(Yd,I1r),e(Yd,tJ),e(tJ,N1r),e(Yd,q1r),e(Yd,aJ),e(aJ,j1r),e(Yd,D1r),e(Ho,G1r),e(Ho,px),e(px,O1r),e(px,TTe),e(TTe,V1r),e(px,X1r),e(Ho,z1r),e(Ho,xt),M(_x,xt,null),e(xt,W1r),e(xt,MTe),e(MTe,Q1r),e(xt,U1r),e(xt,Kd),e(Kd,H1r),e(Kd,ETe),e(ETe,J1r),e(Kd,Y1r),e(Kd,nJ),e(nJ,K1r),e(Kd,Z1r),e(xt,e2r),M(Y7,xt,null),e(Ho,o2r),e(Ho,po),M(ux,po,null),e(po,r2r),e(po,CTe),e(CTe,t2r),e(po,a2r),e(po,nn),e(nn,n2r),e(nn,wTe),e(wTe,s2r),e(nn,l2r),e(nn,ATe),e(ATe,i2r),e(nn,d2r),e(nn,LTe),e(LTe,c2r),e(nn,f2r),e(po,m2r),e(po,st),e(st,K7),e(K7,yTe),e(yTe,g2r),e(K7,h2r),e(K7,sJ),e(sJ,p2r),e(K7,_2r),e(st,u2r),e(st,Z7),e(Z7,xTe),e(xTe,b2r),e(Z7,v2r),e(Z7,lJ),e(lJ,F2r),e(Z7,T2r),e(st,M2r),e(st,e8),e(e8,$Te),e($Te,E2r),e(e8,C2r),e(e8,iJ),e(iJ,w2r),e(e8,A2r),e(st,L2r),e(st,o8),e(o8,kTe),e(kTe,y2r),e(o8,x2r),e(o8,dJ),e(dJ,$2r),e(o8,k2r),e(st,S2r),e(st,r8),e(r8,STe),e(STe,R2r),e(r8,P2r),e(r8,cJ),e(cJ,B2r),e(r8,I2r),e(po,N2r),e(po,t8),e(t8,q2r),e(t8,RTe),e(RTe,j2r),e(t8,D2r),e(t8,PTe),e(PTe,G2r),e(po,O2r),M(a8,po,null),b(f,GUe,u),b(f,Zd,u),e(Zd,n8),e(n8,BTe),M(bx,BTe,null),e(Zd,V2r),e(Zd,ITe),e(ITe,X2r),b(f,OUe,u),b(f,Jo,u),M(vx,Jo,null),e(Jo,z2r),e(Jo,ec),e(ec,W2r),e(ec,fJ),e(fJ,Q2r),e(ec,U2r),e(ec,mJ),e(mJ,H2r),e(ec,J2r),e(Jo,Y2r),e(Jo,Fx),e(Fx,K2r),e(Fx,NTe),e(NTe,Z2r),e(Fx,ebr),e(Jo,obr),e(Jo,$t),M(Tx,$t,null),e($t,rbr),e($t,qTe),e(qTe,tbr),e($t,abr),e($t,oc),e(oc,nbr),e(oc,jTe),e(jTe,sbr),e(oc,lbr),e(oc,gJ),e(gJ,ibr),e(oc,dbr),e($t,cbr),M(s8,$t,null),e(Jo,fbr),e(Jo,_o),M(Mx,_o,null),e(_o,mbr),e(_o,DTe),e(DTe,gbr),e(_o,hbr),e(_o,sn),e(sn,pbr),e(sn,GTe),e(GTe,_br),e(sn,ubr),e(sn,OTe),e(OTe,bbr),e(sn,vbr),e(sn,VTe),e(VTe,Fbr),e(sn,Tbr),e(_o,Mbr),e(_o,Le),e(Le,l8),e(l8,XTe),e(XTe,Ebr),e(l8,Cbr),e(l8,hJ),e(hJ,wbr),e(l8,Abr),e(Le,Lbr),e(Le,i8),e(i8,zTe),e(zTe,ybr),e(i8,xbr),e(i8,pJ),e(pJ,$br),e(i8,kbr),e(Le,Sbr),e(Le,d8),e(d8,WTe),e(WTe,Rbr),e(d8,Pbr),e(d8,_J),e(_J,Bbr),e(d8,Ibr),e(Le,Nbr),e(Le,c8),e(c8,QTe),e(QTe,qbr),e(c8,jbr),e(c8,uJ),e(uJ,Dbr),e(c8,Gbr),e(Le,Obr),e(Le,f8),e(f8,UTe),e(UTe,Vbr),e(f8,Xbr),e(f8,bJ),e(bJ,zbr),e(f8,Wbr),e(Le,Qbr),e(Le,m8),e(m8,HTe),e(HTe,Ubr),e(m8,Hbr),e(m8,vJ),e(vJ,Jbr),e(m8,Ybr),e(Le,Kbr),e(Le,g8),e(g8,JTe),e(JTe,Zbr),e(g8,evr),e(g8,FJ),e(FJ,ovr),e(g8,rvr),e(Le,tvr),e(Le,h8),e(h8,YTe),e(YTe,avr),e(h8,nvr),e(h8,TJ),e(TJ,svr),e(h8,lvr),e(Le,ivr),e(Le,p8),e(p8,KTe),e(KTe,dvr),e(p8,cvr),e(p8,MJ),e(MJ,fvr),e(p8,mvr),e(Le,gvr),e(Le,_8),e(_8,ZTe),e(ZTe,hvr),e(_8,pvr),e(_8,EJ),e(EJ,_vr),e(_8,uvr),e(_o,bvr),e(_o,u8),e(u8,vvr),e(u8,e7e),e(e7e,Fvr),e(u8,Tvr),e(u8,o7e),e(o7e,Mvr),e(_o,Evr),M(b8,_o,null),b(f,VUe,u),b(f,rc,u),e(rc,v8),e(v8,r7e),M(Ex,r7e,null),e(rc,Cvr),e(rc,t7e),e(t7e,wvr),b(f,XUe,u),b(f,Yo,u),M(Cx,Yo,null),e(Yo,Avr),e(Yo,tc),e(tc,Lvr),e(tc,CJ),e(CJ,yvr),e(tc,xvr),e(tc,wJ),e(wJ,$vr),e(tc,kvr),e(Yo,Svr),e(Yo,wx),e(wx,Rvr),e(wx,a7e),e(a7e,Pvr),e(wx,Bvr),e(Yo,Ivr),e(Yo,kt),M(Ax,kt,null),e(kt,Nvr),e(kt,n7e),e(n7e,qvr),e(kt,jvr),e(kt,ac),e(ac,Dvr),e(ac,s7e),e(s7e,Gvr),e(ac,Ovr),e(ac,AJ),e(AJ,Vvr),e(ac,Xvr),e(kt,zvr),M(F8,kt,null),e(Yo,Wvr),e(Yo,uo),M(Lx,uo,null),e(uo,Qvr),e(uo,l7e),e(l7e,Uvr),e(uo,Hvr),e(uo,ln),e(ln,Jvr),e(ln,i7e),e(i7e,Yvr),e(ln,Kvr),e(ln,d7e),e(d7e,Zvr),e(ln,e5r),e(ln,c7e),e(c7e,o5r),e(ln,r5r),e(uo,t5r),e(uo,yx),e(yx,T8),e(T8,f7e),e(f7e,a5r),e(T8,n5r),e(T8,LJ),e(LJ,s5r),e(T8,l5r),e(yx,i5r),e(yx,M8),e(M8,m7e),e(m7e,d5r),e(M8,c5r),e(M8,yJ),e(yJ,f5r),e(M8,m5r),e(uo,g5r),e(uo,E8),e(E8,h5r),e(E8,g7e),e(g7e,p5r),e(E8,_5r),e(E8,h7e),e(h7e,u5r),e(uo,b5r),M(C8,uo,null),b(f,zUe,u),b(f,nc,u),e(nc,w8),e(w8,p7e),M(xx,p7e,null),e(nc,v5r),e(nc,_7e),e(_7e,F5r),b(f,WUe,u),b(f,Ko,u),M($x,Ko,null),e(Ko,T5r),e(Ko,sc),e(sc,M5r),e(sc,xJ),e(xJ,E5r),e(sc,C5r),e(sc,$J),e($J,w5r),e(sc,A5r),e(Ko,L5r),e(Ko,kx),e(kx,y5r),e(kx,u7e),e(u7e,x5r),e(kx,$5r),e(Ko,k5r),e(Ko,St),M(Sx,St,null),e(St,S5r),e(St,b7e),e(b7e,R5r),e(St,P5r),e(St,lc),e(lc,B5r),e(lc,v7e),e(v7e,I5r),e(lc,N5r),e(lc,kJ),e(kJ,q5r),e(lc,j5r),e(St,D5r),M(A8,St,null),e(Ko,G5r),e(Ko,bo),M(Rx,bo,null),e(bo,O5r),e(bo,F7e),e(F7e,V5r),e(bo,X5r),e(bo,dn),e(dn,z5r),e(dn,T7e),e(T7e,W5r),e(dn,Q5r),e(dn,M7e),e(M7e,U5r),e(dn,H5r),e(dn,E7e),e(E7e,J5r),e(dn,Y5r),e(bo,K5r),e(bo,lt),e(lt,L8),e(L8,C7e),e(C7e,Z5r),e(L8,eFr),e(L8,SJ),e(SJ,oFr),e(L8,rFr),e(lt,tFr),e(lt,y8),e(y8,w7e),e(w7e,aFr),e(y8,nFr),e(y8,RJ),e(RJ,sFr),e(y8,lFr),e(lt,iFr),e(lt,x8),e(x8,A7e),e(A7e,dFr),e(x8,cFr),e(x8,PJ),e(PJ,fFr),e(x8,mFr),e(lt,gFr),e(lt,$8),e($8,L7e),e(L7e,hFr),e($8,pFr),e($8,BJ),e(BJ,_Fr),e($8,uFr),e(lt,bFr),e(lt,k8),e(k8,y7e),e(y7e,vFr),e(k8,FFr),e(k8,IJ),e(IJ,TFr),e(k8,MFr),e(bo,EFr),e(bo,S8),e(S8,CFr),e(S8,x7e),e(x7e,wFr),e(S8,AFr),e(S8,$7e),e($7e,LFr),e(bo,yFr),M(R8,bo,null),b(f,QUe,u),b(f,ic,u),e(ic,P8),e(P8,k7e),M(Px,k7e,null),e(ic,xFr),e(ic,S7e),e(S7e,$Fr),b(f,UUe,u),b(f,Zo,u),M(Bx,Zo,null),e(Zo,kFr),e(Zo,dc),e(dc,SFr),e(dc,NJ),e(NJ,RFr),e(dc,PFr),e(dc,qJ),e(qJ,BFr),e(dc,IFr),e(Zo,NFr),e(Zo,Ix),e(Ix,qFr),e(Ix,R7e),e(R7e,jFr),e(Ix,DFr),e(Zo,GFr),e(Zo,Rt),M(Nx,Rt,null),e(Rt,OFr),e(Rt,P7e),e(P7e,VFr),e(Rt,XFr),e(Rt,cc),e(cc,zFr),e(cc,B7e),e(B7e,WFr),e(cc,QFr),e(cc,jJ),e(jJ,UFr),e(cc,HFr),e(Rt,JFr),M(B8,Rt,null),e(Zo,YFr),e(Zo,vo),M(qx,vo,null),e(vo,KFr),e(vo,I7e),e(I7e,ZFr),e(vo,eTr),e(vo,cn),e(cn,oTr),e(cn,N7e),e(N7e,rTr),e(cn,tTr),e(cn,q7e),e(q7e,aTr),e(cn,nTr),e(cn,j7e),e(j7e,sTr),e(cn,lTr),e(vo,iTr),e(vo,fn),e(fn,I8),e(I8,D7e),e(D7e,dTr),e(I8,cTr),e(I8,DJ),e(DJ,fTr),e(I8,mTr),e(fn,gTr),e(fn,N8),e(N8,G7e),e(G7e,hTr),e(N8,pTr),e(N8,GJ),e(GJ,_Tr),e(N8,uTr),e(fn,bTr),e(fn,q8),e(q8,O7e),e(O7e,vTr),e(q8,FTr),e(q8,OJ),e(OJ,TTr),e(q8,MTr),e(fn,ETr),e(fn,j8),e(j8,V7e),e(V7e,CTr),e(j8,wTr),e(j8,VJ),e(VJ,ATr),e(j8,LTr),e(vo,yTr),e(vo,D8),e(D8,xTr),e(D8,X7e),e(X7e,$Tr),e(D8,kTr),e(D8,z7e),e(z7e,STr),e(vo,RTr),M(G8,vo,null),b(f,HUe,u),b(f,fc,u),e(fc,O8),e(O8,W7e),M(jx,W7e,null),e(fc,PTr),e(fc,Q7e),e(Q7e,BTr),b(f,JUe,u),b(f,er,u),M(Dx,er,null),e(er,ITr),e(er,mc),e(mc,NTr),e(mc,XJ),e(XJ,qTr),e(mc,jTr),e(mc,zJ),e(zJ,DTr),e(mc,GTr),e(er,OTr),e(er,Gx),e(Gx,VTr),e(Gx,U7e),e(U7e,XTr),e(Gx,zTr),e(er,WTr),e(er,Pt),M(Ox,Pt,null),e(Pt,QTr),e(Pt,H7e),e(H7e,UTr),e(Pt,HTr),e(Pt,gc),e(gc,JTr),e(gc,J7e),e(J7e,YTr),e(gc,KTr),e(gc,WJ),e(WJ,ZTr),e(gc,e7r),e(Pt,o7r),M(V8,Pt,null),e(er,r7r),e(er,Fo),M(Vx,Fo,null),e(Fo,t7r),e(Fo,Y7e),e(Y7e,a7r),e(Fo,n7r),e(Fo,mn),e(mn,s7r),e(mn,K7e),e(K7e,l7r),e(mn,i7r),e(mn,Z7e),e(Z7e,d7r),e(mn,c7r),e(mn,e8e),e(e8e,f7r),e(mn,m7r),e(Fo,g7r),e(Fo,Xx),e(Xx,X8),e(X8,o8e),e(o8e,h7r),e(X8,p7r),e(X8,QJ),e(QJ,_7r),e(X8,u7r),e(Xx,b7r),e(Xx,z8),e(z8,r8e),e(r8e,v7r),e(z8,F7r),e(z8,UJ),e(UJ,T7r),e(z8,M7r),e(Fo,E7r),e(Fo,W8),e(W8,C7r),e(W8,t8e),e(t8e,w7r),e(W8,A7r),e(W8,a8e),e(a8e,L7r),e(Fo,y7r),M(Q8,Fo,null),b(f,YUe,u),b(f,hc,u),e(hc,U8),e(U8,n8e),M(zx,n8e,null),e(hc,x7r),e(hc,s8e),e(s8e,$7r),b(f,KUe,u),b(f,or,u),M(Wx,or,null),e(or,k7r),e(or,pc),e(pc,S7r),e(pc,HJ),e(HJ,R7r),e(pc,P7r),e(pc,JJ),e(JJ,B7r),e(pc,I7r),e(or,N7r),e(or,Qx),e(Qx,q7r),e(Qx,l8e),e(l8e,j7r),e(Qx,D7r),e(or,G7r),e(or,Bt),M(Ux,Bt,null),e(Bt,O7r),e(Bt,i8e),e(i8e,V7r),e(Bt,X7r),e(Bt,_c),e(_c,z7r),e(_c,d8e),e(d8e,W7r),e(_c,Q7r),e(_c,YJ),e(YJ,U7r),e(_c,H7r),e(Bt,J7r),M(H8,Bt,null),e(or,Y7r),e(or,To),M(Hx,To,null),e(To,K7r),e(To,c8e),e(c8e,Z7r),e(To,e8r),e(To,gn),e(gn,o8r),e(gn,f8e),e(f8e,r8r),e(gn,t8r),e(gn,m8e),e(m8e,a8r),e(gn,n8r),e(gn,g8e),e(g8e,s8r),e(gn,l8r),e(To,i8r),e(To,h8e),e(h8e,J8),e(J8,p8e),e(p8e,d8r),e(J8,c8r),e(J8,KJ),e(KJ,f8r),e(J8,m8r),e(To,g8r),e(To,Y8),e(Y8,h8r),e(Y8,_8e),e(_8e,p8r),e(Y8,_8r),e(Y8,u8e),e(u8e,u8r),e(To,b8r),M(K8,To,null),b(f,ZUe,u),b(f,uc,u),e(uc,Z8),e(Z8,b8e),M(Jx,b8e,null),e(uc,v8r),e(uc,v8e),e(v8e,F8r),b(f,eHe,u),b(f,rr,u),M(Yx,rr,null),e(rr,T8r),e(rr,bc),e(bc,M8r),e(bc,ZJ),e(ZJ,E8r),e(bc,C8r),e(bc,eY),e(eY,w8r),e(bc,A8r),e(rr,L8r),e(rr,Kx),e(Kx,y8r),e(Kx,F8e),e(F8e,x8r),e(Kx,$8r),e(rr,k8r),e(rr,It),M(Zx,It,null),e(It,S8r),e(It,T8e),e(T8e,R8r),e(It,P8r),e(It,vc),e(vc,B8r),e(vc,M8e),e(M8e,I8r),e(vc,N8r),e(vc,oY),e(oY,q8r),e(vc,j8r),e(It,D8r),M(e9,It,null),e(rr,G8r),e(rr,Mo),M(e$,Mo,null),e(Mo,O8r),e(Mo,E8e),e(E8e,V8r),e(Mo,X8r),e(Mo,hn),e(hn,z8r),e(hn,C8e),e(C8e,W8r),e(hn,Q8r),e(hn,w8e),e(w8e,U8r),e(hn,H8r),e(hn,A8e),e(A8e,J8r),e(hn,Y8r),e(Mo,K8r),e(Mo,it),e(it,o9),e(o9,L8e),e(L8e,Z8r),e(o9,e9r),e(o9,rY),e(rY,o9r),e(o9,r9r),e(it,t9r),e(it,r9),e(r9,y8e),e(y8e,a9r),e(r9,n9r),e(r9,tY),e(tY,s9r),e(r9,l9r),e(it,i9r),e(it,t9),e(t9,x8e),e(x8e,d9r),e(t9,c9r),e(t9,aY),e(aY,f9r),e(t9,m9r),e(it,g9r),e(it,a9),e(a9,$8e),e($8e,h9r),e(a9,p9r),e(a9,nY),e(nY,_9r),e(a9,u9r),e(it,b9r),e(it,n9),e(n9,k8e),e(k8e,v9r),e(n9,F9r),e(n9,sY),e(sY,T9r),e(n9,M9r),e(Mo,E9r),e(Mo,s9),e(s9,C9r),e(s9,S8e),e(S8e,w9r),e(s9,A9r),e(s9,R8e),e(R8e,L9r),e(Mo,y9r),M(l9,Mo,null),b(f,oHe,u),b(f,Fc,u),e(Fc,i9),e(i9,P8e),M(o$,P8e,null),e(Fc,x9r),e(Fc,B8e),e(B8e,$9r),b(f,rHe,u),b(f,tr,u),M(r$,tr,null),e(tr,k9r),e(tr,Tc),e(Tc,S9r),e(Tc,lY),e(lY,R9r),e(Tc,P9r),e(Tc,iY),e(iY,B9r),e(Tc,I9r),e(tr,N9r),e(tr,t$),e(t$,q9r),e(t$,I8e),e(I8e,j9r),e(t$,D9r),e(tr,G9r),e(tr,Nt),M(a$,Nt,null),e(Nt,O9r),e(Nt,N8e),e(N8e,V9r),e(Nt,X9r),e(Nt,Mc),e(Mc,z9r),e(Mc,q8e),e(q8e,W9r),e(Mc,Q9r),e(Mc,dY),e(dY,U9r),e(Mc,H9r),e(Nt,J9r),M(d9,Nt,null),e(tr,Y9r),e(tr,Eo),M(n$,Eo,null),e(Eo,K9r),e(Eo,j8e),e(j8e,Z9r),e(Eo,eMr),e(Eo,pn),e(pn,oMr),e(pn,D8e),e(D8e,rMr),e(pn,tMr),e(pn,G8e),e(G8e,aMr),e(pn,nMr),e(pn,O8e),e(O8e,sMr),e(pn,lMr),e(Eo,iMr),e(Eo,V8e),e(V8e,c9),e(c9,X8e),e(X8e,dMr),e(c9,cMr),e(c9,cY),e(cY,fMr),e(c9,mMr),e(Eo,gMr),e(Eo,f9),e(f9,hMr),e(f9,z8e),e(z8e,pMr),e(f9,_Mr),e(f9,W8e),e(W8e,uMr),e(Eo,bMr),M(m9,Eo,null),b(f,tHe,u),b(f,Ec,u),e(Ec,g9),e(g9,Q8e),M(s$,Q8e,null),e(Ec,vMr),e(Ec,U8e),e(U8e,FMr),b(f,aHe,u),b(f,ar,u),M(l$,ar,null),e(ar,TMr),e(ar,Cc),e(Cc,MMr),e(Cc,fY),e(fY,EMr),e(Cc,CMr),e(Cc,mY),e(mY,wMr),e(Cc,AMr),e(ar,LMr),e(ar,i$),e(i$,yMr),e(i$,H8e),e(H8e,xMr),e(i$,$Mr),e(ar,kMr),e(ar,qt),M(d$,qt,null),e(qt,SMr),e(qt,J8e),e(J8e,RMr),e(qt,PMr),e(qt,wc),e(wc,BMr),e(wc,Y8e),e(Y8e,IMr),e(wc,NMr),e(wc,gY),e(gY,qMr),e(wc,jMr),e(qt,DMr),M(h9,qt,null),e(ar,GMr),e(ar,Rr),M(c$,Rr,null),e(Rr,OMr),e(Rr,K8e),e(K8e,VMr),e(Rr,XMr),e(Rr,_n),e(_n,zMr),e(_n,Z8e),e(Z8e,WMr),e(_n,QMr),e(_n,e9e),e(e9e,UMr),e(_n,HMr),e(_n,o9e),e(o9e,JMr),e(_n,YMr),e(Rr,KMr),e(Rr,q),e(q,p9),e(p9,r9e),e(r9e,ZMr),e(p9,eEr),e(p9,hY),e(hY,oEr),e(p9,rEr),e(q,tEr),e(q,_9),e(_9,t9e),e(t9e,aEr),e(_9,nEr),e(_9,pY),e(pY,sEr),e(_9,lEr),e(q,iEr),e(q,u9),e(u9,a9e),e(a9e,dEr),e(u9,cEr),e(u9,_Y),e(_Y,fEr),e(u9,mEr),e(q,gEr),e(q,b9),e(b9,n9e),e(n9e,hEr),e(b9,pEr),e(b9,uY),e(uY,_Er),e(b9,uEr),e(q,bEr),e(q,v9),e(v9,s9e),e(s9e,vEr),e(v9,FEr),e(v9,bY),e(bY,TEr),e(v9,MEr),e(q,EEr),e(q,F9),e(F9,l9e),e(l9e,CEr),e(F9,wEr),e(F9,vY),e(vY,AEr),e(F9,LEr),e(q,yEr),e(q,T9),e(T9,i9e),e(i9e,xEr),e(T9,$Er),e(T9,FY),e(FY,kEr),e(T9,SEr),e(q,REr),e(q,M9),e(M9,d9e),e(d9e,PEr),e(M9,BEr),e(M9,TY),e(TY,IEr),e(M9,NEr),e(q,qEr),e(q,E9),e(E9,c9e),e(c9e,jEr),e(E9,DEr),e(E9,MY),e(MY,GEr),e(E9,OEr),e(q,VEr),e(q,C9),e(C9,f9e),e(f9e,XEr),e(C9,zEr),e(C9,EY),e(EY,WEr),e(C9,QEr),e(q,UEr),e(q,w9),e(w9,m9e),e(m9e,HEr),e(w9,JEr),e(w9,CY),e(CY,YEr),e(w9,KEr),e(q,ZEr),e(q,A9),e(A9,g9e),e(g9e,e4r),e(A9,o4r),e(A9,wY),e(wY,r4r),e(A9,t4r),e(q,a4r),e(q,L9),e(L9,h9e),e(h9e,n4r),e(L9,s4r),e(L9,AY),e(AY,l4r),e(L9,i4r),e(q,d4r),e(q,y9),e(y9,p9e),e(p9e,c4r),e(y9,f4r),e(y9,LY),e(LY,m4r),e(y9,g4r),e(q,h4r),e(q,x9),e(x9,_9e),e(_9e,p4r),e(x9,_4r),e(x9,yY),e(yY,u4r),e(x9,b4r),e(q,v4r),e(q,$9),e($9,u9e),e(u9e,F4r),e($9,T4r),e($9,xY),e(xY,M4r),e($9,E4r),e(q,C4r),e(q,k9),e(k9,b9e),e(b9e,w4r),e(k9,A4r),e(k9,$Y),e($Y,L4r),e(k9,y4r),e(q,x4r),e(q,S9),e(S9,v9e),e(v9e,$4r),e(S9,k4r),e(S9,kY),e(kY,S4r),e(S9,R4r),e(q,P4r),e(q,R9),e(R9,F9e),e(F9e,B4r),e(R9,I4r),e(R9,SY),e(SY,N4r),e(R9,q4r),e(q,j4r),e(q,il),e(il,T9e),e(T9e,D4r),e(il,G4r),e(il,RY),e(RY,O4r),e(il,V4r),e(il,PY),e(PY,X4r),e(il,z4r),e(q,W4r),e(q,P9),e(P9,M9e),e(M9e,Q4r),e(P9,U4r),e(P9,BY),e(BY,H4r),e(P9,J4r),e(q,Y4r),e(q,B9),e(B9,E9e),e(E9e,K4r),e(B9,Z4r),e(B9,IY),e(IY,eCr),e(B9,oCr),e(q,rCr),e(q,I9),e(I9,C9e),e(C9e,tCr),e(I9,aCr),e(I9,NY),e(NY,nCr),e(I9,sCr),e(q,lCr),e(q,N9),e(N9,w9e),e(w9e,iCr),e(N9,dCr),e(N9,qY),e(qY,cCr),e(N9,fCr),e(q,mCr),e(q,q9),e(q9,A9e),e(A9e,gCr),e(q9,hCr),e(q9,jY),e(jY,pCr),e(q9,_Cr),e(q,uCr),e(q,j9),e(j9,L9e),e(L9e,bCr),e(j9,vCr),e(j9,DY),e(DY,FCr),e(j9,TCr),e(q,MCr),e(q,D9),e(D9,y9e),e(y9e,ECr),e(D9,CCr),e(D9,GY),e(GY,wCr),e(D9,ACr),e(q,LCr),e(q,G9),e(G9,x9e),e(x9e,yCr),e(G9,xCr),e(G9,OY),e(OY,$Cr),e(G9,kCr),e(q,SCr),e(q,O9),e(O9,$9e),e($9e,RCr),e(O9,PCr),e(O9,VY),e(VY,BCr),e(O9,ICr),e(q,NCr),e(q,V9),e(V9,k9e),e(k9e,qCr),e(V9,jCr),e(V9,XY),e(XY,DCr),e(V9,GCr),e(q,OCr),e(q,X9),e(X9,S9e),e(S9e,VCr),e(X9,XCr),e(X9,zY),e(zY,zCr),e(X9,WCr),e(q,QCr),e(q,z9),e(z9,R9e),e(R9e,UCr),e(z9,HCr),e(z9,WY),e(WY,JCr),e(z9,YCr),e(q,KCr),e(q,W9),e(W9,P9e),e(P9e,ZCr),e(W9,e3r),e(W9,QY),e(QY,o3r),e(W9,r3r),e(q,t3r),e(q,Q9),e(Q9,B9e),e(B9e,a3r),e(Q9,n3r),e(Q9,UY),e(UY,s3r),e(Q9,l3r),e(q,i3r),e(q,U9),e(U9,I9e),e(I9e,d3r),e(U9,c3r),e(U9,HY),e(HY,f3r),e(U9,m3r),e(q,g3r),e(q,H9),e(H9,N9e),e(N9e,h3r),e(H9,p3r),e(H9,JY),e(JY,_3r),e(H9,u3r),e(q,b3r),e(q,J9),e(J9,q9e),e(q9e,v3r),e(J9,F3r),e(J9,YY),e(YY,T3r),e(J9,M3r),e(q,E3r),e(q,Y9),e(Y9,j9e),e(j9e,C3r),e(Y9,w3r),e(Y9,KY),e(KY,A3r),e(Y9,L3r),e(q,y3r),e(q,K9),e(K9,D9e),e(D9e,x3r),e(K9,$3r),e(K9,ZY),e(ZY,k3r),e(K9,S3r),e(q,R3r),e(q,Z9),e(Z9,G9e),e(G9e,P3r),e(Z9,B3r),e(Z9,eK),e(eK,I3r),e(Z9,N3r),e(q,q3r),e(q,eM),e(eM,O9e),e(O9e,j3r),e(eM,D3r),e(eM,oK),e(oK,G3r),e(eM,O3r),e(q,V3r),e(q,oM),e(oM,V9e),e(V9e,X3r),e(oM,z3r),e(oM,rK),e(rK,W3r),e(oM,Q3r),e(q,U3r),e(q,rM),e(rM,X9e),e(X9e,H3r),e(rM,J3r),e(rM,tK),e(tK,Y3r),e(rM,K3r),e(q,Z3r),e(q,tM),e(tM,z9e),e(z9e,e0r),e(tM,o0r),e(tM,aK),e(aK,r0r),e(tM,t0r),e(q,a0r),e(q,aM),e(aM,W9e),e(W9e,n0r),e(aM,s0r),e(aM,nK),e(nK,l0r),e(aM,i0r),e(q,d0r),e(q,nM),e(nM,Q9e),e(Q9e,c0r),e(nM,f0r),e(nM,sK),e(sK,m0r),e(nM,g0r),e(q,h0r),e(q,sM),e(sM,U9e),e(U9e,p0r),e(sM,_0r),e(sM,lK),e(lK,u0r),e(sM,b0r),e(q,v0r),e(q,lM),e(lM,H9e),e(H9e,F0r),e(lM,T0r),e(lM,iK),e(iK,M0r),e(lM,E0r),e(q,C0r),e(q,iM),e(iM,J9e),e(J9e,w0r),e(iM,A0r),e(iM,dK),e(dK,L0r),e(iM,y0r),e(q,x0r),e(q,dM),e(dM,Y9e),e(Y9e,$0r),e(dM,k0r),e(dM,cK),e(cK,S0r),e(dM,R0r),e(q,P0r),e(q,cM),e(cM,K9e),e(K9e,B0r),e(cM,I0r),e(cM,fK),e(fK,N0r),e(cM,q0r),e(q,j0r),e(q,fM),e(fM,Z9e),e(Z9e,D0r),e(fM,G0r),e(fM,mK),e(mK,O0r),e(fM,V0r),e(Rr,X0r),M(mM,Rr,null),b(f,nHe,u),b(f,Ac,u),e(Ac,gM),e(gM,eMe),M(f$,eMe,null),e(Ac,z0r),e(Ac,oMe),e(oMe,W0r),b(f,sHe,u),b(f,nr,u),M(m$,nr,null),e(nr,Q0r),e(nr,Lc),e(Lc,U0r),e(Lc,gK),e(gK,H0r),e(Lc,J0r),e(Lc,hK),e(hK,Y0r),e(Lc,K0r),e(nr,Z0r),e(nr,g$),e(g$,ewr),e(g$,rMe),e(rMe,owr),e(g$,rwr),e(nr,twr),e(nr,jt),M(h$,jt,null),e(jt,awr),e(jt,tMe),e(tMe,nwr),e(jt,swr),e(jt,yc),e(yc,lwr),e(yc,aMe),e(aMe,iwr),e(yc,dwr),e(yc,pK),e(pK,cwr),e(yc,fwr),e(jt,mwr),M(hM,jt,null),e(nr,gwr),e(nr,Pr),M(p$,Pr,null),e(Pr,hwr),e(Pr,nMe),e(nMe,pwr),e(Pr,_wr),e(Pr,un),e(un,uwr),e(un,sMe),e(sMe,bwr),e(un,vwr),e(un,lMe),e(lMe,Fwr),e(un,Twr),e(un,iMe),e(iMe,Mwr),e(un,Ewr),e(Pr,Cwr),e(Pr,se),e(se,pM),e(pM,dMe),e(dMe,wwr),e(pM,Awr),e(pM,_K),e(_K,Lwr),e(pM,ywr),e(se,xwr),e(se,_M),e(_M,cMe),e(cMe,$wr),e(_M,kwr),e(_M,uK),e(uK,Swr),e(_M,Rwr),e(se,Pwr),e(se,uM),e(uM,fMe),e(fMe,Bwr),e(uM,Iwr),e(uM,bK),e(bK,Nwr),e(uM,qwr),e(se,jwr),e(se,bM),e(bM,mMe),e(mMe,Dwr),e(bM,Gwr),e(bM,vK),e(vK,Owr),e(bM,Vwr),e(se,Xwr),e(se,vM),e(vM,gMe),e(gMe,zwr),e(vM,Wwr),e(vM,FK),e(FK,Qwr),e(vM,Uwr),e(se,Hwr),e(se,FM),e(FM,hMe),e(hMe,Jwr),e(FM,Ywr),e(FM,TK),e(TK,Kwr),e(FM,Zwr),e(se,e6r),e(se,TM),e(TM,pMe),e(pMe,o6r),e(TM,r6r),e(TM,MK),e(MK,t6r),e(TM,a6r),e(se,n6r),e(se,MM),e(MM,_Me),e(_Me,s6r),e(MM,l6r),e(MM,EK),e(EK,i6r),e(MM,d6r),e(se,c6r),e(se,EM),e(EM,uMe),e(uMe,f6r),e(EM,m6r),e(EM,CK),e(CK,g6r),e(EM,h6r),e(se,p6r),e(se,CM),e(CM,bMe),e(bMe,_6r),e(CM,u6r),e(CM,wK),e(wK,b6r),e(CM,v6r),e(se,F6r),e(se,wM),e(wM,vMe),e(vMe,T6r),e(wM,M6r),e(wM,AK),e(AK,E6r),e(wM,C6r),e(se,w6r),e(se,AM),e(AM,FMe),e(FMe,A6r),e(AM,L6r),e(AM,LK),e(LK,y6r),e(AM,x6r),e(se,$6r),e(se,LM),e(LM,TMe),e(TMe,k6r),e(LM,S6r),e(LM,yK),e(yK,R6r),e(LM,P6r),e(se,B6r),e(se,yM),e(yM,MMe),e(MMe,I6r),e(yM,N6r),e(yM,xK),e(xK,q6r),e(yM,j6r),e(se,D6r),e(se,xM),e(xM,EMe),e(EMe,G6r),e(xM,O6r),e(xM,$K),e($K,V6r),e(xM,X6r),e(se,z6r),e(se,$M),e($M,CMe),e(CMe,W6r),e($M,Q6r),e($M,kK),e(kK,U6r),e($M,H6r),e(se,J6r),e(se,kM),e(kM,wMe),e(wMe,Y6r),e(kM,K6r),e(kM,SK),e(SK,Z6r),e(kM,eAr),e(se,oAr),e(se,SM),e(SM,AMe),e(AMe,rAr),e(SM,tAr),e(SM,RK),e(RK,aAr),e(SM,nAr),e(se,sAr),e(se,RM),e(RM,LMe),e(LMe,lAr),e(RM,iAr),e(RM,PK),e(PK,dAr),e(RM,cAr),e(se,fAr),e(se,PM),e(PM,yMe),e(yMe,mAr),e(PM,gAr),e(PM,BK),e(BK,hAr),e(PM,pAr),e(se,_Ar),e(se,BM),e(BM,xMe),e(xMe,uAr),e(BM,bAr),e(BM,IK),e(IK,vAr),e(BM,FAr),e(se,TAr),e(se,IM),e(IM,$Me),e($Me,MAr),e(IM,EAr),e(IM,NK),e(NK,CAr),e(IM,wAr),e(se,AAr),e(se,NM),e(NM,kMe),e(kMe,LAr),e(NM,yAr),e(NM,qK),e(qK,xAr),e(NM,$Ar),e(Pr,kAr),M(qM,Pr,null),b(f,lHe,u),b(f,xc,u),e(xc,jM),e(jM,SMe),M(_$,SMe,null),e(xc,SAr),e(xc,RMe),e(RMe,RAr),b(f,iHe,u),b(f,sr,u),M(u$,sr,null),e(sr,PAr),e(sr,$c),e($c,BAr),e($c,jK),e(jK,IAr),e($c,NAr),e($c,DK),e(DK,qAr),e($c,jAr),e(sr,DAr),e(sr,b$),e(b$,GAr),e(b$,PMe),e(PMe,OAr),e(b$,VAr),e(sr,XAr),e(sr,Dt),M(v$,Dt,null),e(Dt,zAr),e(Dt,BMe),e(BMe,WAr),e(Dt,QAr),e(Dt,kc),e(kc,UAr),e(kc,IMe),e(IMe,HAr),e(kc,JAr),e(kc,GK),e(GK,YAr),e(kc,KAr),e(Dt,ZAr),M(DM,Dt,null),e(sr,eLr),e(sr,Br),M(F$,Br,null),e(Br,oLr),e(Br,NMe),e(NMe,rLr),e(Br,tLr),e(Br,bn),e(bn,aLr),e(bn,qMe),e(qMe,nLr),e(bn,sLr),e(bn,jMe),e(jMe,lLr),e(bn,iLr),e(bn,DMe),e(DMe,dLr),e(bn,cLr),e(Br,fLr),e(Br,Me),e(Me,GM),e(GM,GMe),e(GMe,mLr),e(GM,gLr),e(GM,OK),e(OK,hLr),e(GM,pLr),e(Me,_Lr),e(Me,OM),e(OM,OMe),e(OMe,uLr),e(OM,bLr),e(OM,VK),e(VK,vLr),e(OM,FLr),e(Me,TLr),e(Me,VM),e(VM,VMe),e(VMe,MLr),e(VM,ELr),e(VM,XK),e(XK,CLr),e(VM,wLr),e(Me,ALr),e(Me,XM),e(XM,XMe),e(XMe,LLr),e(XM,yLr),e(XM,zK),e(zK,xLr),e(XM,$Lr),e(Me,kLr),e(Me,zM),e(zM,zMe),e(zMe,SLr),e(zM,RLr),e(zM,WK),e(WK,PLr),e(zM,BLr),e(Me,ILr),e(Me,WM),e(WM,WMe),e(WMe,NLr),e(WM,qLr),e(WM,QK),e(QK,jLr),e(WM,DLr),e(Me,GLr),e(Me,QM),e(QM,QMe),e(QMe,OLr),e(QM,VLr),e(QM,UK),e(UK,XLr),e(QM,zLr),e(Me,WLr),e(Me,UM),e(UM,UMe),e(UMe,QLr),e(UM,ULr),e(UM,HK),e(HK,HLr),e(UM,JLr),e(Me,YLr),e(Me,HM),e(HM,HMe),e(HMe,KLr),e(HM,ZLr),e(HM,JK),e(JK,eyr),e(HM,oyr),e(Me,ryr),e(Me,JM),e(JM,JMe),e(JMe,tyr),e(JM,ayr),e(JM,YK),e(YK,nyr),e(JM,syr),e(Me,lyr),e(Me,YM),e(YM,YMe),e(YMe,iyr),e(YM,dyr),e(YM,KK),e(KK,cyr),e(YM,fyr),e(Me,myr),e(Me,KM),e(KM,KMe),e(KMe,gyr),e(KM,hyr),e(KM,ZK),e(ZK,pyr),e(KM,_yr),e(Me,uyr),e(Me,ZM),e(ZM,ZMe),e(ZMe,byr),e(ZM,vyr),e(ZM,eZ),e(eZ,Fyr),e(ZM,Tyr),e(Br,Myr),M(eE,Br,null),b(f,dHe,u),b(f,Sc,u),e(Sc,oE),e(oE,eEe),M(T$,eEe,null),e(Sc,Eyr),e(Sc,oEe),e(oEe,Cyr),b(f,cHe,u),b(f,lr,u),M(M$,lr,null),e(lr,wyr),e(lr,Rc),e(Rc,Ayr),e(Rc,oZ),e(oZ,Lyr),e(Rc,yyr),e(Rc,rZ),e(rZ,xyr),e(Rc,$yr),e(lr,kyr),e(lr,E$),e(E$,Syr),e(E$,rEe),e(rEe,Ryr),e(E$,Pyr),e(lr,Byr),e(lr,Gt),M(C$,Gt,null),e(Gt,Iyr),e(Gt,tEe),e(tEe,Nyr),e(Gt,qyr),e(Gt,Pc),e(Pc,jyr),e(Pc,aEe),e(aEe,Dyr),e(Pc,Gyr),e(Pc,tZ),e(tZ,Oyr),e(Pc,Vyr),e(Gt,Xyr),M(rE,Gt,null),e(lr,zyr),e(lr,Ir),M(w$,Ir,null),e(Ir,Wyr),e(Ir,nEe),e(nEe,Qyr),e(Ir,Uyr),e(Ir,vn),e(vn,Hyr),e(vn,sEe),e(sEe,Jyr),e(vn,Yyr),e(vn,lEe),e(lEe,Kyr),e(vn,Zyr),e(vn,iEe),e(iEe,exr),e(vn,oxr),e(Ir,rxr),e(Ir,Be),e(Be,tE),e(tE,dEe),e(dEe,txr),e(tE,axr),e(tE,aZ),e(aZ,nxr),e(tE,sxr),e(Be,lxr),e(Be,aE),e(aE,cEe),e(cEe,ixr),e(aE,dxr),e(aE,nZ),e(nZ,cxr),e(aE,fxr),e(Be,mxr),e(Be,nE),e(nE,fEe),e(fEe,gxr),e(nE,hxr),e(nE,sZ),e(sZ,pxr),e(nE,_xr),e(Be,uxr),e(Be,dl),e(dl,mEe),e(mEe,bxr),e(dl,vxr),e(dl,lZ),e(lZ,Fxr),e(dl,Txr),e(dl,iZ),e(iZ,Mxr),e(dl,Exr),e(Be,Cxr),e(Be,sE),e(sE,gEe),e(gEe,wxr),e(sE,Axr),e(sE,dZ),e(dZ,Lxr),e(sE,yxr),e(Be,xxr),e(Be,lE),e(lE,hEe),e(hEe,$xr),e(lE,kxr),e(lE,cZ),e(cZ,Sxr),e(lE,Rxr),e(Be,Pxr),e(Be,iE),e(iE,pEe),e(pEe,Bxr),e(iE,Ixr),e(iE,fZ),e(fZ,Nxr),e(iE,qxr),e(Be,jxr),e(Be,dE),e(dE,_Ee),e(_Ee,Dxr),e(dE,Gxr),e(dE,mZ),e(mZ,Oxr),e(dE,Vxr),e(Be,Xxr),e(Be,cE),e(cE,uEe),e(uEe,zxr),e(cE,Wxr),e(cE,gZ),e(gZ,Qxr),e(cE,Uxr),e(Ir,Hxr),M(fE,Ir,null),b(f,fHe,u),b(f,Bc,u),e(Bc,mE),e(mE,bEe),M(A$,bEe,null),e(Bc,Jxr),e(Bc,vEe),e(vEe,Yxr),b(f,mHe,u),b(f,ir,u),M(L$,ir,null),e(ir,Kxr),e(ir,Ic),e(Ic,Zxr),e(Ic,hZ),e(hZ,e$r),e(Ic,o$r),e(Ic,pZ),e(pZ,r$r),e(Ic,t$r),e(ir,a$r),e(ir,y$),e(y$,n$r),e(y$,FEe),e(FEe,s$r),e(y$,l$r),e(ir,i$r),e(ir,Ot),M(x$,Ot,null),e(Ot,d$r),e(Ot,TEe),e(TEe,c$r),e(Ot,f$r),e(Ot,Nc),e(Nc,m$r),e(Nc,MEe),e(MEe,g$r),e(Nc,h$r),e(Nc,_Z),e(_Z,p$r),e(Nc,_$r),e(Ot,u$r),M(gE,Ot,null),e(ir,b$r),e(ir,Nr),M($$,Nr,null),e(Nr,v$r),e(Nr,EEe),e(EEe,F$r),e(Nr,T$r),e(Nr,Fn),e(Fn,M$r),e(Fn,CEe),e(CEe,E$r),e(Fn,C$r),e(Fn,wEe),e(wEe,w$r),e(Fn,A$r),e(Fn,AEe),e(AEe,L$r),e(Fn,y$r),e(Nr,x$r),e(Nr,k$),e(k$,hE),e(hE,LEe),e(LEe,$$r),e(hE,k$r),e(hE,uZ),e(uZ,S$r),e(hE,R$r),e(k$,P$r),e(k$,pE),e(pE,yEe),e(yEe,B$r),e(pE,I$r),e(pE,bZ),e(bZ,N$r),e(pE,q$r),e(Nr,j$r),M(_E,Nr,null),b(f,gHe,u),b(f,qc,u),e(qc,uE),e(uE,xEe),M(S$,xEe,null),e(qc,D$r),e(qc,$Ee),e($Ee,G$r),b(f,hHe,u),b(f,dr,u),M(R$,dr,null),e(dr,O$r),e(dr,jc),e(jc,V$r),e(jc,vZ),e(vZ,X$r),e(jc,z$r),e(jc,FZ),e(FZ,W$r),e(jc,Q$r),e(dr,U$r),e(dr,P$),e(P$,H$r),e(P$,kEe),e(kEe,J$r),e(P$,Y$r),e(dr,K$r),e(dr,Vt),M(B$,Vt,null),e(Vt,Z$r),e(Vt,SEe),e(SEe,ekr),e(Vt,okr),e(Vt,Dc),e(Dc,rkr),e(Dc,REe),e(REe,tkr),e(Dc,akr),e(Dc,TZ),e(TZ,nkr),e(Dc,skr),e(Vt,lkr),M(bE,Vt,null),e(dr,ikr),e(dr,qr),M(I$,qr,null),e(qr,dkr),e(qr,PEe),e(PEe,ckr),e(qr,fkr),e(qr,Tn),e(Tn,mkr),e(Tn,BEe),e(BEe,gkr),e(Tn,hkr),e(Tn,IEe),e(IEe,pkr),e(Tn,_kr),e(Tn,NEe),e(NEe,ukr),e(Tn,bkr),e(qr,vkr),e(qr,de),e(de,vE),e(vE,qEe),e(qEe,Fkr),e(vE,Tkr),e(vE,MZ),e(MZ,Mkr),e(vE,Ekr),e(de,Ckr),e(de,FE),e(FE,jEe),e(jEe,wkr),e(FE,Akr),e(FE,EZ),e(EZ,Lkr),e(FE,ykr),e(de,xkr),e(de,TE),e(TE,DEe),e(DEe,$kr),e(TE,kkr),e(TE,CZ),e(CZ,Skr),e(TE,Rkr),e(de,Pkr),e(de,ME),e(ME,GEe),e(GEe,Bkr),e(ME,Ikr),e(ME,wZ),e(wZ,Nkr),e(ME,qkr),e(de,jkr),e(de,EE),e(EE,OEe),e(OEe,Dkr),e(EE,Gkr),e(EE,AZ),e(AZ,Okr),e(EE,Vkr),e(de,Xkr),e(de,CE),e(CE,VEe),e(VEe,zkr),e(CE,Wkr),e(CE,LZ),e(LZ,Qkr),e(CE,Ukr),e(de,Hkr),e(de,wE),e(wE,XEe),e(XEe,Jkr),e(wE,Ykr),e(wE,yZ),e(yZ,Kkr),e(wE,Zkr),e(de,eSr),e(de,AE),e(AE,zEe),e(zEe,oSr),e(AE,rSr),e(AE,xZ),e(xZ,tSr),e(AE,aSr),e(de,nSr),e(de,LE),e(LE,WEe),e(WEe,sSr),e(LE,lSr),e(LE,$Z),e($Z,iSr),e(LE,dSr),e(de,cSr),e(de,yE),e(yE,QEe),e(QEe,fSr),e(yE,mSr),e(yE,kZ),e(kZ,gSr),e(yE,hSr),e(de,pSr),e(de,xE),e(xE,UEe),e(UEe,_Sr),e(xE,uSr),e(xE,SZ),e(SZ,bSr),e(xE,vSr),e(de,FSr),e(de,$E),e($E,HEe),e(HEe,TSr),e($E,MSr),e($E,RZ),e(RZ,ESr),e($E,CSr),e(de,wSr),e(de,kE),e(kE,JEe),e(JEe,ASr),e(kE,LSr),e(kE,PZ),e(PZ,ySr),e(kE,xSr),e(de,$Sr),e(de,SE),e(SE,YEe),e(YEe,kSr),e(SE,SSr),e(SE,BZ),e(BZ,RSr),e(SE,PSr),e(de,BSr),e(de,RE),e(RE,KEe),e(KEe,ISr),e(RE,NSr),e(RE,IZ),e(IZ,qSr),e(RE,jSr),e(de,DSr),e(de,PE),e(PE,ZEe),e(ZEe,GSr),e(PE,OSr),e(PE,NZ),e(NZ,VSr),e(PE,XSr),e(de,zSr),e(de,BE),e(BE,e4e),e(e4e,WSr),e(BE,QSr),e(BE,qZ),e(qZ,USr),e(BE,HSr),e(de,JSr),e(de,IE),e(IE,o4e),e(o4e,YSr),e(IE,KSr),e(IE,jZ),e(jZ,ZSr),e(IE,eRr),e(de,oRr),e(de,NE),e(NE,r4e),e(r4e,rRr),e(NE,tRr),e(NE,DZ),e(DZ,aRr),e(NE,nRr),e(de,sRr),e(de,qE),e(qE,t4e),e(t4e,lRr),e(qE,iRr),e(qE,GZ),e(GZ,dRr),e(qE,cRr),e(qr,fRr),M(jE,qr,null),b(f,pHe,u),b(f,Gc,u),e(Gc,DE),e(DE,a4e),M(N$,a4e,null),e(Gc,mRr),e(Gc,n4e),e(n4e,gRr),b(f,_He,u),b(f,cr,u),M(q$,cr,null),e(cr,hRr),e(cr,Oc),e(Oc,pRr),e(Oc,OZ),e(OZ,_Rr),e(Oc,uRr),e(Oc,VZ),e(VZ,bRr),e(Oc,vRr),e(cr,FRr),e(cr,j$),e(j$,TRr),e(j$,s4e),e(s4e,MRr),e(j$,ERr),e(cr,CRr),e(cr,Xt),M(D$,Xt,null),e(Xt,wRr),e(Xt,l4e),e(l4e,ARr),e(Xt,LRr),e(Xt,Vc),e(Vc,yRr),e(Vc,i4e),e(i4e,xRr),e(Vc,$Rr),e(Vc,XZ),e(XZ,kRr),e(Vc,SRr),e(Xt,RRr),M(GE,Xt,null),e(cr,PRr),e(cr,jr),M(G$,jr,null),e(jr,BRr),e(jr,d4e),e(d4e,IRr),e(jr,NRr),e(jr,Mn),e(Mn,qRr),e(Mn,c4e),e(c4e,jRr),e(Mn,DRr),e(Mn,f4e),e(f4e,GRr),e(Mn,ORr),e(Mn,m4e),e(m4e,VRr),e(Mn,XRr),e(jr,zRr),e(jr,ye),e(ye,OE),e(OE,g4e),e(g4e,WRr),e(OE,QRr),e(OE,zZ),e(zZ,URr),e(OE,HRr),e(ye,JRr),e(ye,VE),e(VE,h4e),e(h4e,YRr),e(VE,KRr),e(VE,WZ),e(WZ,ZRr),e(VE,ePr),e(ye,oPr),e(ye,XE),e(XE,p4e),e(p4e,rPr),e(XE,tPr),e(XE,QZ),e(QZ,aPr),e(XE,nPr),e(ye,sPr),e(ye,zE),e(zE,_4e),e(_4e,lPr),e(zE,iPr),e(zE,UZ),e(UZ,dPr),e(zE,cPr),e(ye,fPr),e(ye,WE),e(WE,u4e),e(u4e,mPr),e(WE,gPr),e(WE,HZ),e(HZ,hPr),e(WE,pPr),e(ye,_Pr),e(ye,QE),e(QE,b4e),e(b4e,uPr),e(QE,bPr),e(QE,JZ),e(JZ,vPr),e(QE,FPr),e(ye,TPr),e(ye,UE),e(UE,v4e),e(v4e,MPr),e(UE,EPr),e(UE,YZ),e(YZ,CPr),e(UE,wPr),e(ye,APr),e(ye,HE),e(HE,F4e),e(F4e,LPr),e(HE,yPr),e(HE,KZ),e(KZ,xPr),e(HE,$Pr),e(ye,kPr),e(ye,JE),e(JE,T4e),e(T4e,SPr),e(JE,RPr),e(JE,ZZ),e(ZZ,PPr),e(JE,BPr),e(ye,IPr),e(ye,YE),e(YE,M4e),e(M4e,NPr),e(YE,qPr),e(YE,eee),e(eee,jPr),e(YE,DPr),e(jr,GPr),M(KE,jr,null),b(f,uHe,u),b(f,Xc,u),e(Xc,ZE),e(ZE,E4e),M(O$,E4e,null),e(Xc,OPr),e(Xc,C4e),e(C4e,VPr),b(f,bHe,u),b(f,fr,u),M(V$,fr,null),e(fr,XPr),e(fr,zc),e(zc,zPr),e(zc,oee),e(oee,WPr),e(zc,QPr),e(zc,ree),e(ree,UPr),e(zc,HPr),e(fr,JPr),e(fr,X$),e(X$,YPr),e(X$,w4e),e(w4e,KPr),e(X$,ZPr),e(fr,eBr),e(fr,zt),M(z$,zt,null),e(zt,oBr),e(zt,A4e),e(A4e,rBr),e(zt,tBr),e(zt,Wc),e(Wc,aBr),e(Wc,L4e),e(L4e,nBr),e(Wc,sBr),e(Wc,tee),e(tee,lBr),e(Wc,iBr),e(zt,dBr),M(e4,zt,null),e(fr,cBr),e(fr,Dr),M(W$,Dr,null),e(Dr,fBr),e(Dr,y4e),e(y4e,mBr),e(Dr,gBr),e(Dr,En),e(En,hBr),e(En,x4e),e(x4e,pBr),e(En,_Br),e(En,$4e),e($4e,uBr),e(En,bBr),e(En,k4e),e(k4e,vBr),e(En,FBr),e(Dr,TBr),e(Dr,te),e(te,o4),e(o4,S4e),e(S4e,MBr),e(o4,EBr),e(o4,aee),e(aee,CBr),e(o4,wBr),e(te,ABr),e(te,r4),e(r4,R4e),e(R4e,LBr),e(r4,yBr),e(r4,nee),e(nee,xBr),e(r4,$Br),e(te,kBr),e(te,t4),e(t4,P4e),e(P4e,SBr),e(t4,RBr),e(t4,see),e(see,PBr),e(t4,BBr),e(te,IBr),e(te,a4),e(a4,B4e),e(B4e,NBr),e(a4,qBr),e(a4,lee),e(lee,jBr),e(a4,DBr),e(te,GBr),e(te,n4),e(n4,I4e),e(I4e,OBr),e(n4,VBr),e(n4,iee),e(iee,XBr),e(n4,zBr),e(te,WBr),e(te,s4),e(s4,N4e),e(N4e,QBr),e(s4,UBr),e(s4,dee),e(dee,HBr),e(s4,JBr),e(te,YBr),e(te,l4),e(l4,q4e),e(q4e,KBr),e(l4,ZBr),e(l4,cee),e(cee,eIr),e(l4,oIr),e(te,rIr),e(te,i4),e(i4,j4e),e(j4e,tIr),e(i4,aIr),e(i4,fee),e(fee,nIr),e(i4,sIr),e(te,lIr),e(te,d4),e(d4,D4e),e(D4e,iIr),e(d4,dIr),e(d4,mee),e(mee,cIr),e(d4,fIr),e(te,mIr),e(te,c4),e(c4,G4e),e(G4e,gIr),e(c4,hIr),e(c4,gee),e(gee,pIr),e(c4,_Ir),e(te,uIr),e(te,f4),e(f4,O4e),e(O4e,bIr),e(f4,vIr),e(f4,hee),e(hee,FIr),e(f4,TIr),e(te,MIr),e(te,m4),e(m4,V4e),e(V4e,EIr),e(m4,CIr),e(m4,pee),e(pee,wIr),e(m4,AIr),e(te,LIr),e(te,g4),e(g4,X4e),e(X4e,yIr),e(g4,xIr),e(g4,_ee),e(_ee,$Ir),e(g4,kIr),e(te,SIr),e(te,h4),e(h4,z4e),e(z4e,RIr),e(h4,PIr),e(h4,uee),e(uee,BIr),e(h4,IIr),e(te,NIr),e(te,p4),e(p4,W4e),e(W4e,qIr),e(p4,jIr),e(p4,bee),e(bee,DIr),e(p4,GIr),e(te,OIr),e(te,_4),e(_4,Q4e),e(Q4e,VIr),e(_4,XIr),e(_4,vee),e(vee,zIr),e(_4,WIr),e(te,QIr),e(te,u4),e(u4,U4e),e(U4e,UIr),e(u4,HIr),e(u4,Fee),e(Fee,JIr),e(u4,YIr),e(te,KIr),e(te,b4),e(b4,H4e),e(H4e,ZIr),e(b4,eNr),e(b4,Tee),e(Tee,oNr),e(b4,rNr),e(te,tNr),e(te,v4),e(v4,J4e),e(J4e,aNr),e(v4,nNr),e(v4,Mee),e(Mee,sNr),e(v4,lNr),e(te,iNr),e(te,F4),e(F4,Y4e),e(Y4e,dNr),e(F4,cNr),e(F4,Eee),e(Eee,fNr),e(F4,mNr),e(te,gNr),e(te,T4),e(T4,K4e),e(K4e,hNr),e(T4,pNr),e(T4,Cee),e(Cee,_Nr),e(T4,uNr),e(te,bNr),e(te,M4),e(M4,Z4e),e(Z4e,vNr),e(M4,FNr),e(M4,wee),e(wee,TNr),e(M4,MNr),e(te,ENr),e(te,E4),e(E4,eCe),e(eCe,CNr),e(E4,wNr),e(E4,Aee),e(Aee,ANr),e(E4,LNr),e(te,yNr),e(te,C4),e(C4,oCe),e(oCe,xNr),e(C4,$Nr),e(C4,Lee),e(Lee,kNr),e(C4,SNr),e(te,RNr),e(te,w4),e(w4,rCe),e(rCe,PNr),e(w4,BNr),e(w4,yee),e(yee,INr),e(w4,NNr),e(te,qNr),e(te,A4),e(A4,tCe),e(tCe,jNr),e(A4,DNr),e(A4,xee),e(xee,GNr),e(A4,ONr),e(Dr,VNr),M(L4,Dr,null),b(f,vHe,u),b(f,Qc,u),e(Qc,y4),e(y4,aCe),M(Q$,aCe,null),e(Qc,XNr),e(Qc,nCe),e(nCe,zNr),b(f,FHe,u),b(f,mr,u),M(U$,mr,null),e(mr,WNr),e(mr,Uc),e(Uc,QNr),e(Uc,$ee),e($ee,UNr),e(Uc,HNr),e(Uc,kee),e(kee,JNr),e(Uc,YNr),e(mr,KNr),e(mr,H$),e(H$,ZNr),e(H$,sCe),e(sCe,eqr),e(H$,oqr),e(mr,rqr),e(mr,Wt),M(J$,Wt,null),e(Wt,tqr),e(Wt,lCe),e(lCe,aqr),e(Wt,nqr),e(Wt,Hc),e(Hc,sqr),e(Hc,iCe),e(iCe,lqr),e(Hc,iqr),e(Hc,See),e(See,dqr),e(Hc,cqr),e(Wt,fqr),M(x4,Wt,null),e(mr,mqr),e(mr,Gr),M(Y$,Gr,null),e(Gr,gqr),e(Gr,dCe),e(dCe,hqr),e(Gr,pqr),e(Gr,Cn),e(Cn,_qr),e(Cn,cCe),e(cCe,uqr),e(Cn,bqr),e(Cn,fCe),e(fCe,vqr),e(Cn,Fqr),e(Cn,mCe),e(mCe,Tqr),e(Cn,Mqr),e(Gr,Eqr),e(Gr,ve),e(ve,$4),e($4,gCe),e(gCe,Cqr),e($4,wqr),e($4,Ree),e(Ree,Aqr),e($4,Lqr),e(ve,yqr),e(ve,k4),e(k4,hCe),e(hCe,xqr),e(k4,$qr),e(k4,Pee),e(Pee,kqr),e(k4,Sqr),e(ve,Rqr),e(ve,S4),e(S4,pCe),e(pCe,Pqr),e(S4,Bqr),e(S4,Bee),e(Bee,Iqr),e(S4,Nqr),e(ve,qqr),e(ve,R4),e(R4,_Ce),e(_Ce,jqr),e(R4,Dqr),e(R4,Iee),e(Iee,Gqr),e(R4,Oqr),e(ve,Vqr),e(ve,P4),e(P4,uCe),e(uCe,Xqr),e(P4,zqr),e(P4,Nee),e(Nee,Wqr),e(P4,Qqr),e(ve,Uqr),e(ve,B4),e(B4,bCe),e(bCe,Hqr),e(B4,Jqr),e(B4,qee),e(qee,Yqr),e(B4,Kqr),e(ve,Zqr),e(ve,I4),e(I4,vCe),e(vCe,ejr),e(I4,ojr),e(I4,jee),e(jee,rjr),e(I4,tjr),e(ve,ajr),e(ve,N4),e(N4,FCe),e(FCe,njr),e(N4,sjr),e(N4,Dee),e(Dee,ljr),e(N4,ijr),e(ve,djr),e(ve,q4),e(q4,TCe),e(TCe,cjr),e(q4,fjr),e(q4,Gee),e(Gee,mjr),e(q4,gjr),e(ve,hjr),e(ve,j4),e(j4,MCe),e(MCe,pjr),e(j4,_jr),e(j4,Oee),e(Oee,ujr),e(j4,bjr),e(ve,vjr),e(ve,D4),e(D4,ECe),e(ECe,Fjr),e(D4,Tjr),e(D4,Vee),e(Vee,Mjr),e(D4,Ejr),e(ve,Cjr),e(ve,G4),e(G4,CCe),e(CCe,wjr),e(G4,Ajr),e(G4,Xee),e(Xee,Ljr),e(G4,yjr),e(ve,xjr),e(ve,O4),e(O4,wCe),e(wCe,$jr),e(O4,kjr),e(O4,zee),e(zee,Sjr),e(O4,Rjr),e(ve,Pjr),e(ve,V4),e(V4,ACe),e(ACe,Bjr),e(V4,Ijr),e(V4,Wee),e(Wee,Njr),e(V4,qjr),e(ve,jjr),e(ve,X4),e(X4,LCe),e(LCe,Djr),e(X4,Gjr),e(X4,Qee),e(Qee,Ojr),e(X4,Vjr),e(ve,Xjr),e(ve,z4),e(z4,yCe),e(yCe,zjr),e(z4,Wjr),e(z4,Uee),e(Uee,Qjr),e(z4,Ujr),e(ve,Hjr),e(ve,W4),e(W4,xCe),e(xCe,Jjr),e(W4,Yjr),e(W4,Hee),e(Hee,Kjr),e(W4,Zjr),e(Gr,eDr),M(Q4,Gr,null),b(f,THe,u),b(f,Jc,u),e(Jc,U4),e(U4,$Ce),M(K$,$Ce,null),e(Jc,oDr),e(Jc,kCe),e(kCe,rDr),b(f,MHe,u),b(f,gr,u),M(Z$,gr,null),e(gr,tDr),e(gr,Yc),e(Yc,aDr),e(Yc,Jee),e(Jee,nDr),e(Yc,sDr),e(Yc,Yee),e(Yee,lDr),e(Yc,iDr),e(gr,dDr),e(gr,ek),e(ek,cDr),e(ek,SCe),e(SCe,fDr),e(ek,mDr),e(gr,gDr),e(gr,Qt),M(ok,Qt,null),e(Qt,hDr),e(Qt,RCe),e(RCe,pDr),e(Qt,_Dr),e(Qt,Kc),e(Kc,uDr),e(Kc,PCe),e(PCe,bDr),e(Kc,vDr),e(Kc,Kee),e(Kee,FDr),e(Kc,TDr),e(Qt,MDr),M(H4,Qt,null),e(gr,EDr),e(gr,Or),M(rk,Or,null),e(Or,CDr),e(Or,BCe),e(BCe,wDr),e(Or,ADr),e(Or,wn),e(wn,LDr),e(wn,ICe),e(ICe,yDr),e(wn,xDr),e(wn,NCe),e(NCe,$Dr),e(wn,kDr),e(wn,qCe),e(qCe,SDr),e(wn,RDr),e(Or,PDr),e(Or,tk),e(tk,J4),e(J4,jCe),e(jCe,BDr),e(J4,IDr),e(J4,Zee),e(Zee,NDr),e(J4,qDr),e(tk,jDr),e(tk,Y4),e(Y4,DCe),e(DCe,DDr),e(Y4,GDr),e(Y4,eoe),e(eoe,ODr),e(Y4,VDr),e(Or,XDr),M(K4,Or,null),b(f,EHe,u),b(f,Zc,u),e(Zc,Z4),e(Z4,GCe),M(ak,GCe,null),e(Zc,zDr),e(Zc,OCe),e(OCe,WDr),b(f,CHe,u),b(f,hr,u),M(nk,hr,null),e(hr,QDr),e(hr,ef),e(ef,UDr),e(ef,ooe),e(ooe,HDr),e(ef,JDr),e(ef,roe),e(roe,YDr),e(ef,KDr),e(hr,ZDr),e(hr,sk),e(sk,eGr),e(sk,VCe),e(VCe,oGr),e(sk,rGr),e(hr,tGr),e(hr,Ut),M(lk,Ut,null),e(Ut,aGr),e(Ut,XCe),e(XCe,nGr),e(Ut,sGr),e(Ut,of),e(of,lGr),e(of,zCe),e(zCe,iGr),e(of,dGr),e(of,toe),e(toe,cGr),e(of,fGr),e(Ut,mGr),M(eC,Ut,null),e(hr,gGr),e(hr,Vr),M(ik,Vr,null),e(Vr,hGr),e(Vr,WCe),e(WCe,pGr),e(Vr,_Gr),e(Vr,An),e(An,uGr),e(An,QCe),e(QCe,bGr),e(An,vGr),e(An,UCe),e(UCe,FGr),e(An,TGr),e(An,HCe),e(HCe,MGr),e(An,EGr),e(Vr,CGr),e(Vr,JCe),e(JCe,oC),e(oC,YCe),e(YCe,wGr),e(oC,AGr),e(oC,aoe),e(aoe,LGr),e(oC,yGr),e(Vr,xGr),M(rC,Vr,null),b(f,wHe,u),b(f,rf,u),e(rf,tC),e(tC,KCe),M(dk,KCe,null),e(rf,$Gr),e(rf,ZCe),e(ZCe,kGr),b(f,AHe,u),b(f,pr,u),M(ck,pr,null),e(pr,SGr),e(pr,tf),e(tf,RGr),e(tf,noe),e(noe,PGr),e(tf,BGr),e(tf,soe),e(soe,IGr),e(tf,NGr),e(pr,qGr),e(pr,fk),e(fk,jGr),e(fk,e3e),e(e3e,DGr),e(fk,GGr),e(pr,OGr),e(pr,Ht),M(mk,Ht,null),e(Ht,VGr),e(Ht,o3e),e(o3e,XGr),e(Ht,zGr),e(Ht,af),e(af,WGr),e(af,r3e),e(r3e,QGr),e(af,UGr),e(af,loe),e(loe,HGr),e(af,JGr),e(Ht,YGr),M(aC,Ht,null),e(pr,KGr),e(pr,Xr),M(gk,Xr,null),e(Xr,ZGr),e(Xr,t3e),e(t3e,eOr),e(Xr,oOr),e(Xr,Ln),e(Ln,rOr),e(Ln,a3e),e(a3e,tOr),e(Ln,aOr),e(Ln,n3e),e(n3e,nOr),e(Ln,sOr),e(Ln,s3e),e(s3e,lOr),e(Ln,iOr),e(Xr,dOr),e(Xr,ce),e(ce,nC),e(nC,l3e),e(l3e,cOr),e(nC,fOr),e(nC,ioe),e(ioe,mOr),e(nC,gOr),e(ce,hOr),e(ce,sC),e(sC,i3e),e(i3e,pOr),e(sC,_Or),e(sC,doe),e(doe,uOr),e(sC,bOr),e(ce,vOr),e(ce,lC),e(lC,d3e),e(d3e,FOr),e(lC,TOr),e(lC,coe),e(coe,MOr),e(lC,EOr),e(ce,COr),e(ce,iC),e(iC,c3e),e(c3e,wOr),e(iC,AOr),e(iC,foe),e(foe,LOr),e(iC,yOr),e(ce,xOr),e(ce,dC),e(dC,f3e),e(f3e,$Or),e(dC,kOr),e(dC,moe),e(moe,SOr),e(dC,ROr),e(ce,POr),e(ce,cC),e(cC,m3e),e(m3e,BOr),e(cC,IOr),e(cC,goe),e(goe,NOr),e(cC,qOr),e(ce,jOr),e(ce,fC),e(fC,g3e),e(g3e,DOr),e(fC,GOr),e(fC,hoe),e(hoe,OOr),e(fC,VOr),e(ce,XOr),e(ce,mC),e(mC,h3e),e(h3e,zOr),e(mC,WOr),e(mC,poe),e(poe,QOr),e(mC,UOr),e(ce,HOr),e(ce,gC),e(gC,p3e),e(p3e,JOr),e(gC,YOr),e(gC,_oe),e(_oe,KOr),e(gC,ZOr),e(ce,eVr),e(ce,hC),e(hC,_3e),e(_3e,oVr),e(hC,rVr),e(hC,uoe),e(uoe,tVr),e(hC,aVr),e(ce,nVr),e(ce,pC),e(pC,u3e),e(u3e,sVr),e(pC,lVr),e(pC,boe),e(boe,iVr),e(pC,dVr),e(ce,cVr),e(ce,_C),e(_C,b3e),e(b3e,fVr),e(_C,mVr),e(_C,voe),e(voe,gVr),e(_C,hVr),e(ce,pVr),e(ce,uC),e(uC,v3e),e(v3e,_Vr),e(uC,uVr),e(uC,Foe),e(Foe,bVr),e(uC,vVr),e(ce,FVr),e(ce,bC),e(bC,F3e),e(F3e,TVr),e(bC,MVr),e(bC,Toe),e(Toe,EVr),e(bC,CVr),e(ce,wVr),e(ce,vC),e(vC,T3e),e(T3e,AVr),e(vC,LVr),e(vC,Moe),e(Moe,yVr),e(vC,xVr),e(ce,$Vr),e(ce,FC),e(FC,M3e),e(M3e,kVr),e(FC,SVr),e(FC,Eoe),e(Eoe,RVr),e(FC,PVr),e(ce,BVr),e(ce,TC),e(TC,E3e),e(E3e,IVr),e(TC,NVr),e(TC,Coe),e(Coe,qVr),e(TC,jVr),e(ce,DVr),e(ce,MC),e(MC,C3e),e(C3e,GVr),e(MC,OVr),e(MC,woe),e(woe,VVr),e(MC,XVr),e(ce,zVr),e(ce,EC),e(EC,w3e),e(w3e,WVr),e(EC,QVr),e(EC,Aoe),e(Aoe,UVr),e(EC,HVr),e(ce,JVr),e(ce,CC),e(CC,A3e),e(A3e,YVr),e(CC,KVr),e(CC,Loe),e(Loe,ZVr),e(CC,eXr),e(Xr,oXr),M(wC,Xr,null),b(f,LHe,u),b(f,nf,u),e(nf,AC),e(AC,L3e),M(hk,L3e,null),e(nf,rXr),e(nf,y3e),e(y3e,tXr),b(f,yHe,u),b(f,_r,u),M(pk,_r,null),e(_r,aXr),e(_r,sf),e(sf,nXr),e(sf,yoe),e(yoe,sXr),e(sf,lXr),e(sf,xoe),e(xoe,iXr),e(sf,dXr),e(_r,cXr),e(_r,_k),e(_k,fXr),e(_k,x3e),e(x3e,mXr),e(_k,gXr),e(_r,hXr),e(_r,Jt),M(uk,Jt,null),e(Jt,pXr),e(Jt,$3e),e($3e,_Xr),e(Jt,uXr),e(Jt,lf),e(lf,bXr),e(lf,k3e),e(k3e,vXr),e(lf,FXr),e(lf,$oe),e($oe,TXr),e(lf,MXr),e(Jt,EXr),M(LC,Jt,null),e(_r,CXr),e(_r,zr),M(bk,zr,null),e(zr,wXr),e(zr,S3e),e(S3e,AXr),e(zr,LXr),e(zr,yn),e(yn,yXr),e(yn,R3e),e(R3e,xXr),e(yn,$Xr),e(yn,P3e),e(P3e,kXr),e(yn,SXr),e(yn,B3e),e(B3e,RXr),e(yn,PXr),e(zr,BXr),e(zr,fe),e(fe,yC),e(yC,I3e),e(I3e,IXr),e(yC,NXr),e(yC,koe),e(koe,qXr),e(yC,jXr),e(fe,DXr),e(fe,xC),e(xC,N3e),e(N3e,GXr),e(xC,OXr),e(xC,Soe),e(Soe,VXr),e(xC,XXr),e(fe,zXr),e(fe,$C),e($C,q3e),e(q3e,WXr),e($C,QXr),e($C,Roe),e(Roe,UXr),e($C,HXr),e(fe,JXr),e(fe,kC),e(kC,j3e),e(j3e,YXr),e(kC,KXr),e(kC,Poe),e(Poe,ZXr),e(kC,ezr),e(fe,ozr),e(fe,SC),e(SC,D3e),e(D3e,rzr),e(SC,tzr),e(SC,Boe),e(Boe,azr),e(SC,nzr),e(fe,szr),e(fe,RC),e(RC,G3e),e(G3e,lzr),e(RC,izr),e(RC,Ioe),e(Ioe,dzr),e(RC,czr),e(fe,fzr),e(fe,PC),e(PC,O3e),e(O3e,mzr),e(PC,gzr),e(PC,Noe),e(Noe,hzr),e(PC,pzr),e(fe,_zr),e(fe,BC),e(BC,V3e),e(V3e,uzr),e(BC,bzr),e(BC,qoe),e(qoe,vzr),e(BC,Fzr),e(fe,Tzr),e(fe,IC),e(IC,X3e),e(X3e,Mzr),e(IC,Ezr),e(IC,joe),e(joe,Czr),e(IC,wzr),e(fe,Azr),e(fe,NC),e(NC,z3e),e(z3e,Lzr),e(NC,yzr),e(NC,Doe),e(Doe,xzr),e(NC,$zr),e(fe,kzr),e(fe,qC),e(qC,W3e),e(W3e,Szr),e(qC,Rzr),e(qC,Goe),e(Goe,Pzr),e(qC,Bzr),e(fe,Izr),e(fe,jC),e(jC,Q3e),e(Q3e,Nzr),e(jC,qzr),e(jC,Ooe),e(Ooe,jzr),e(jC,Dzr),e(fe,Gzr),e(fe,DC),e(DC,U3e),e(U3e,Ozr),e(DC,Vzr),e(DC,Voe),e(Voe,Xzr),e(DC,zzr),e(fe,Wzr),e(fe,GC),e(GC,H3e),e(H3e,Qzr),e(GC,Uzr),e(GC,Xoe),e(Xoe,Hzr),e(GC,Jzr),e(fe,Yzr),e(fe,OC),e(OC,J3e),e(J3e,Kzr),e(OC,Zzr),e(OC,zoe),e(zoe,eWr),e(OC,oWr),e(fe,rWr),e(fe,VC),e(VC,Y3e),e(Y3e,tWr),e(VC,aWr),e(VC,Woe),e(Woe,nWr),e(VC,sWr),e(fe,lWr),e(fe,XC),e(XC,K3e),e(K3e,iWr),e(XC,dWr),e(XC,Qoe),e(Qoe,cWr),e(XC,fWr),e(fe,mWr),e(fe,zC),e(zC,Z3e),e(Z3e,gWr),e(zC,hWr),e(zC,Uoe),e(Uoe,pWr),e(zC,_Wr),e(fe,uWr),e(fe,WC),e(WC,e0e),e(e0e,bWr),e(WC,vWr),e(WC,Hoe),e(Hoe,FWr),e(WC,TWr),e(fe,MWr),e(fe,QC),e(QC,o0e),e(o0e,EWr),e(QC,CWr),e(QC,Joe),e(Joe,wWr),e(QC,AWr),e(zr,LWr),M(UC,zr,null),b(f,xHe,u),b(f,df,u),e(df,HC),e(HC,r0e),M(vk,r0e,null),e(df,yWr),e(df,t0e),e(t0e,xWr),b(f,$He,u),b(f,ur,u),M(Fk,ur,null),e(ur,$Wr),e(ur,cf),e(cf,kWr),e(cf,Yoe),e(Yoe,SWr),e(cf,RWr),e(cf,Koe),e(Koe,PWr),e(cf,BWr),e(ur,IWr),e(ur,Tk),e(Tk,NWr),e(Tk,a0e),e(a0e,qWr),e(Tk,jWr),e(ur,DWr),e(ur,Yt),M(Mk,Yt,null),e(Yt,GWr),e(Yt,n0e),e(n0e,OWr),e(Yt,VWr),e(Yt,ff),e(ff,XWr),e(ff,s0e),e(s0e,zWr),e(ff,WWr),e(ff,Zoe),e(Zoe,QWr),e(ff,UWr),e(Yt,HWr),M(JC,Yt,null),e(ur,JWr),e(ur,Wr),M(Ek,Wr,null),e(Wr,YWr),e(Wr,l0e),e(l0e,KWr),e(Wr,ZWr),e(Wr,xn),e(xn,eQr),e(xn,i0e),e(i0e,oQr),e(xn,rQr),e(xn,d0e),e(d0e,tQr),e(xn,aQr),e(xn,c0e),e(c0e,nQr),e(xn,sQr),e(Wr,lQr),e(Wr,f0e),e(f0e,YC),e(YC,m0e),e(m0e,iQr),e(YC,dQr),e(YC,ere),e(ere,cQr),e(YC,fQr),e(Wr,mQr),M(KC,Wr,null),b(f,kHe,u),b(f,mf,u),e(mf,ZC),e(ZC,g0e),M(Ck,g0e,null),e(mf,gQr),e(mf,h0e),e(h0e,hQr),b(f,SHe,u),b(f,br,u),M(wk,br,null),e(br,pQr),e(br,gf),e(gf,_Qr),e(gf,ore),e(ore,uQr),e(gf,bQr),e(gf,rre),e(rre,vQr),e(gf,FQr),e(br,TQr),e(br,Ak),e(Ak,MQr),e(Ak,p0e),e(p0e,EQr),e(Ak,CQr),e(br,wQr),e(br,Kt),M(Lk,Kt,null),e(Kt,AQr),e(Kt,_0e),e(_0e,LQr),e(Kt,yQr),e(Kt,hf),e(hf,xQr),e(hf,u0e),e(u0e,$Qr),e(hf,kQr),e(hf,tre),e(tre,SQr),e(hf,RQr),e(Kt,PQr),M(e3,Kt,null),e(br,BQr),e(br,Qr),M(yk,Qr,null),e(Qr,IQr),e(Qr,b0e),e(b0e,NQr),e(Qr,qQr),e(Qr,$n),e($n,jQr),e($n,v0e),e(v0e,DQr),e($n,GQr),e($n,F0e),e(F0e,OQr),e($n,VQr),e($n,T0e),e(T0e,XQr),e($n,zQr),e(Qr,WQr),e(Qr,M0e),e(M0e,o3),e(o3,E0e),e(E0e,QQr),e(o3,UQr),e(o3,are),e(are,HQr),e(o3,JQr),e(Qr,YQr),M(r3,Qr,null),b(f,RHe,u),b(f,pf,u),e(pf,t3),e(t3,C0e),M(xk,C0e,null),e(pf,KQr),e(pf,w0e),e(w0e,ZQr),b(f,PHe,u),b(f,vr,u),M($k,vr,null),e(vr,eUr),e(vr,_f),e(_f,oUr),e(_f,nre),e(nre,rUr),e(_f,tUr),e(_f,sre),e(sre,aUr),e(_f,nUr),e(vr,sUr),e(vr,kk),e(kk,lUr),e(kk,A0e),e(A0e,iUr),e(kk,dUr),e(vr,cUr),e(vr,Zt),M(Sk,Zt,null),e(Zt,fUr),e(Zt,L0e),e(L0e,mUr),e(Zt,gUr),e(Zt,uf),e(uf,hUr),e(uf,y0e),e(y0e,pUr),e(uf,_Ur),e(uf,lre),e(lre,uUr),e(uf,bUr),e(Zt,vUr),M(a3,Zt,null),e(vr,FUr),e(vr,Ur),M(Rk,Ur,null),e(Ur,TUr),e(Ur,x0e),e(x0e,MUr),e(Ur,EUr),e(Ur,kn),e(kn,CUr),e(kn,$0e),e($0e,wUr),e(kn,AUr),e(kn,k0e),e(k0e,LUr),e(kn,yUr),e(kn,S0e),e(S0e,xUr),e(kn,$Ur),e(Ur,kUr),e(Ur,re),e(re,n3),e(n3,R0e),e(R0e,SUr),e(n3,RUr),e(n3,ire),e(ire,PUr),e(n3,BUr),e(re,IUr),e(re,s3),e(s3,P0e),e(P0e,NUr),e(s3,qUr),e(s3,dre),e(dre,jUr),e(s3,DUr),e(re,GUr),e(re,l3),e(l3,B0e),e(B0e,OUr),e(l3,VUr),e(l3,cre),e(cre,XUr),e(l3,zUr),e(re,WUr),e(re,i3),e(i3,I0e),e(I0e,QUr),e(i3,UUr),e(i3,fre),e(fre,HUr),e(i3,JUr),e(re,YUr),e(re,d3),e(d3,N0e),e(N0e,KUr),e(d3,ZUr),e(d3,mre),e(mre,eHr),e(d3,oHr),e(re,rHr),e(re,c3),e(c3,q0e),e(q0e,tHr),e(c3,aHr),e(c3,gre),e(gre,nHr),e(c3,sHr),e(re,lHr),e(re,f3),e(f3,j0e),e(j0e,iHr),e(f3,dHr),e(f3,hre),e(hre,cHr),e(f3,fHr),e(re,mHr),e(re,m3),e(m3,D0e),e(D0e,gHr),e(m3,hHr),e(m3,pre),e(pre,pHr),e(m3,_Hr),e(re,uHr),e(re,g3),e(g3,G0e),e(G0e,bHr),e(g3,vHr),e(g3,_re),e(_re,FHr),e(g3,THr),e(re,MHr),e(re,h3),e(h3,O0e),e(O0e,EHr),e(h3,CHr),e(h3,ure),e(ure,wHr),e(h3,AHr),e(re,LHr),e(re,p3),e(p3,V0e),e(V0e,yHr),e(p3,xHr),e(p3,bre),e(bre,$Hr),e(p3,kHr),e(re,SHr),e(re,_3),e(_3,X0e),e(X0e,RHr),e(_3,PHr),e(_3,vre),e(vre,BHr),e(_3,IHr),e(re,NHr),e(re,u3),e(u3,z0e),e(z0e,qHr),e(u3,jHr),e(u3,Fre),e(Fre,DHr),e(u3,GHr),e(re,OHr),e(re,b3),e(b3,W0e),e(W0e,VHr),e(b3,XHr),e(b3,Tre),e(Tre,zHr),e(b3,WHr),e(re,QHr),e(re,v3),e(v3,Q0e),e(Q0e,UHr),e(v3,HHr),e(v3,Mre),e(Mre,JHr),e(v3,YHr),e(re,KHr),e(re,F3),e(F3,U0e),e(U0e,ZHr),e(F3,eJr),e(F3,Ere),e(Ere,oJr),e(F3,rJr),e(re,tJr),e(re,T3),e(T3,H0e),e(H0e,aJr),e(T3,nJr),e(T3,Cre),e(Cre,sJr),e(T3,lJr),e(re,iJr),e(re,M3),e(M3,J0e),e(J0e,dJr),e(M3,cJr),e(M3,wre),e(wre,fJr),e(M3,mJr),e(re,gJr),e(re,E3),e(E3,Y0e),e(Y0e,hJr),e(E3,pJr),e(E3,Are),e(Are,_Jr),e(E3,uJr),e(re,bJr),e(re,C3),e(C3,K0e),e(K0e,vJr),e(C3,FJr),e(C3,Lre),e(Lre,TJr),e(C3,MJr),e(re,EJr),e(re,w3),e(w3,Z0e),e(Z0e,CJr),e(w3,wJr),e(w3,yre),e(yre,AJr),e(w3,LJr),e(re,yJr),e(re,A3),e(A3,ewe),e(ewe,xJr),e(A3,$Jr),e(A3,xre),e(xre,kJr),e(A3,SJr),e(re,RJr),e(re,L3),e(L3,owe),e(owe,PJr),e(L3,BJr),e(L3,$re),e($re,IJr),e(L3,NJr),e(re,qJr),e(re,y3),e(y3,rwe),e(rwe,jJr),e(y3,DJr),e(y3,kre),e(kre,GJr),e(y3,OJr),e(re,VJr),e(re,x3),e(x3,twe),e(twe,XJr),e(x3,zJr),e(x3,Sre),e(Sre,WJr),e(x3,QJr),e(re,UJr),e(re,$3),e($3,awe),e(awe,HJr),e($3,JJr),e($3,Rre),e(Rre,YJr),e($3,KJr),e(re,ZJr),e(re,k3),e(k3,nwe),e(nwe,eYr),e(k3,oYr),e(k3,Pre),e(Pre,rYr),e(k3,tYr),e(Ur,aYr),M(S3,Ur,null),b(f,BHe,u),b(f,bf,u),e(bf,R3),e(R3,swe),M(Pk,swe,null),e(bf,nYr),e(bf,lwe),e(lwe,sYr),b(f,IHe,u),b(f,Fr,u),M(Bk,Fr,null),e(Fr,lYr),e(Fr,vf),e(vf,iYr),e(vf,Bre),e(Bre,dYr),e(vf,cYr),e(vf,Ire),e(Ire,fYr),e(vf,mYr),e(Fr,gYr),e(Fr,Ik),e(Ik,hYr),e(Ik,iwe),e(iwe,pYr),e(Ik,_Yr),e(Fr,uYr),e(Fr,ea),M(Nk,ea,null),e(ea,bYr),e(ea,dwe),e(dwe,vYr),e(ea,FYr),e(ea,Ff),e(Ff,TYr),e(Ff,cwe),e(cwe,MYr),e(Ff,EYr),e(Ff,Nre),e(Nre,CYr),e(Ff,wYr),e(ea,AYr),M(P3,ea,null),e(Fr,LYr),e(Fr,Hr),M(qk,Hr,null),e(Hr,yYr),e(Hr,fwe),e(fwe,xYr),e(Hr,$Yr),e(Hr,Sn),e(Sn,kYr),e(Sn,mwe),e(mwe,SYr),e(Sn,RYr),e(Sn,gwe),e(gwe,PYr),e(Sn,BYr),e(Sn,hwe),e(hwe,IYr),e(Sn,NYr),e(Hr,qYr),e(Hr,xe),e(xe,B3),e(B3,pwe),e(pwe,jYr),e(B3,DYr),e(B3,qre),e(qre,GYr),e(B3,OYr),e(xe,VYr),e(xe,I3),e(I3,_we),e(_we,XYr),e(I3,zYr),e(I3,jre),e(jre,WYr),e(I3,QYr),e(xe,UYr),e(xe,N3),e(N3,uwe),e(uwe,HYr),e(N3,JYr),e(N3,Dre),e(Dre,YYr),e(N3,KYr),e(xe,ZYr),e(xe,q3),e(q3,bwe),e(bwe,eKr),e(q3,oKr),e(q3,Gre),e(Gre,rKr),e(q3,tKr),e(xe,aKr),e(xe,j3),e(j3,vwe),e(vwe,nKr),e(j3,sKr),e(j3,Ore),e(Ore,lKr),e(j3,iKr),e(xe,dKr),e(xe,D3),e(D3,Fwe),e(Fwe,cKr),e(D3,fKr),e(D3,Vre),e(Vre,mKr),e(D3,gKr),e(xe,hKr),e(xe,G3),e(G3,Twe),e(Twe,pKr),e(G3,_Kr),e(G3,Xre),e(Xre,uKr),e(G3,bKr),e(xe,vKr),e(xe,O3),e(O3,Mwe),e(Mwe,FKr),e(O3,TKr),e(O3,zre),e(zre,MKr),e(O3,EKr),e(xe,CKr),e(xe,V3),e(V3,Ewe),e(Ewe,wKr),e(V3,AKr),e(V3,Wre),e(Wre,LKr),e(V3,yKr),e(xe,xKr),e(xe,X3),e(X3,Cwe),e(Cwe,$Kr),e(X3,kKr),e(X3,Qre),e(Qre,SKr),e(X3,RKr),e(Hr,PKr),M(z3,Hr,null),b(f,NHe,u),b(f,Tf,u),e(Tf,W3),e(W3,wwe),M(jk,wwe,null),e(Tf,BKr),e(Tf,Awe),e(Awe,IKr),b(f,qHe,u),b(f,Tr,u),M(Dk,Tr,null),e(Tr,NKr),e(Tr,Mf),e(Mf,qKr),e(Mf,Ure),e(Ure,jKr),e(Mf,DKr),e(Mf,Hre),e(Hre,GKr),e(Mf,OKr),e(Tr,VKr),e(Tr,Gk),e(Gk,XKr),e(Gk,Lwe),e(Lwe,zKr),e(Gk,WKr),e(Tr,QKr),e(Tr,oa),M(Ok,oa,null),e(oa,UKr),e(oa,ywe),e(ywe,HKr),e(oa,JKr),e(oa,Ef),e(Ef,YKr),e(Ef,xwe),e(xwe,KKr),e(Ef,ZKr),e(Ef,Jre),e(Jre,eZr),e(Ef,oZr),e(oa,rZr),M(Q3,oa,null),e(Tr,tZr),e(Tr,Jr),M(Vk,Jr,null),e(Jr,aZr),e(Jr,$we),e($we,nZr),e(Jr,sZr),e(Jr,Rn),e(Rn,lZr),e(Rn,kwe),e(kwe,iZr),e(Rn,dZr),e(Rn,Swe),e(Swe,cZr),e(Rn,fZr),e(Rn,Rwe),e(Rwe,mZr),e(Rn,gZr),e(Jr,hZr),e(Jr,Ee),e(Ee,U3),e(U3,Pwe),e(Pwe,pZr),e(U3,_Zr),e(U3,Yre),e(Yre,uZr),e(U3,bZr),e(Ee,vZr),e(Ee,H3),e(H3,Bwe),e(Bwe,FZr),e(H3,TZr),e(H3,Kre),e(Kre,MZr),e(H3,EZr),e(Ee,CZr),e(Ee,J3),e(J3,Iwe),e(Iwe,wZr),e(J3,AZr),e(J3,Zre),e(Zre,LZr),e(J3,yZr),e(Ee,xZr),e(Ee,Y3),e(Y3,Nwe),e(Nwe,$Zr),e(Y3,kZr),e(Y3,ete),e(ete,SZr),e(Y3,RZr),e(Ee,PZr),e(Ee,K3),e(K3,qwe),e(qwe,BZr),e(K3,IZr),e(K3,ote),e(ote,NZr),e(K3,qZr),e(Ee,jZr),e(Ee,Z3),e(Z3,jwe),e(jwe,DZr),e(Z3,GZr),e(Z3,rte),e(rte,OZr),e(Z3,VZr),e(Ee,XZr),e(Ee,e0),e(e0,Dwe),e(Dwe,zZr),e(e0,WZr),e(e0,tte),e(tte,QZr),e(e0,UZr),e(Ee,HZr),e(Ee,o0),e(o0,Gwe),e(Gwe,JZr),e(o0,YZr),e(o0,ate),e(ate,KZr),e(o0,ZZr),e(Ee,eet),e(Ee,r0),e(r0,Owe),e(Owe,oet),e(r0,ret),e(r0,nte),e(nte,tet),e(r0,aet),e(Ee,net),e(Ee,t0),e(t0,Vwe),e(Vwe,set),e(t0,iet),e(t0,ste),e(ste,det),e(t0,cet),e(Ee,fet),e(Ee,a0),e(a0,Xwe),e(Xwe,met),e(a0,get),e(a0,lte),e(lte,het),e(a0,pet),e(Ee,_et),e(Ee,n0),e(n0,zwe),e(zwe,uet),e(n0,bet),e(n0,ite),e(ite,vet),e(n0,Fet),e(Ee,Tet),e(Ee,s0),e(s0,Wwe),e(Wwe,Met),e(s0,Eet),e(s0,dte),e(dte,Cet),e(s0,wet),e(Jr,Aet),M(l0,Jr,null),b(f,jHe,u),b(f,Cf,u),e(Cf,i0),e(i0,Qwe),M(Xk,Qwe,null),e(Cf,Let),e(Cf,Uwe),e(Uwe,yet),b(f,DHe,u),b(f,Mr,u),M(zk,Mr,null),e(Mr,xet),e(Mr,wf),e(wf,$et),e(wf,cte),e(cte,ket),e(wf,Set),e(wf,fte),e(fte,Ret),e(wf,Pet),e(Mr,Bet),e(Mr,Wk),e(Wk,Iet),e(Wk,Hwe),e(Hwe,Net),e(Wk,qet),e(Mr,jet),e(Mr,ra),M(Qk,ra,null),e(ra,Det),e(ra,Jwe),e(Jwe,Get),e(ra,Oet),e(ra,Af),e(Af,Vet),e(Af,Ywe),e(Ywe,Xet),e(Af,zet),e(Af,mte),e(mte,Wet),e(Af,Qet),e(ra,Uet),M(d0,ra,null),e(Mr,Het),e(Mr,Yr),M(Uk,Yr,null),e(Yr,Jet),e(Yr,Kwe),e(Kwe,Yet),e(Yr,Ket),e(Yr,Pn),e(Pn,Zet),e(Pn,Zwe),e(Zwe,eot),e(Pn,oot),e(Pn,e6e),e(e6e,rot),e(Pn,tot),e(Pn,o6e),e(o6e,aot),e(Pn,not),e(Yr,sot),e(Yr,$e),e($e,c0),e(c0,r6e),e(r6e,lot),e(c0,iot),e(c0,gte),e(gte,dot),e(c0,cot),e($e,fot),e($e,f0),e(f0,t6e),e(t6e,mot),e(f0,got),e(f0,hte),e(hte,hot),e(f0,pot),e($e,_ot),e($e,m0),e(m0,a6e),e(a6e,uot),e(m0,bot),e(m0,pte),e(pte,vot),e(m0,Fot),e($e,Tot),e($e,g0),e(g0,n6e),e(n6e,Mot),e(g0,Eot),e(g0,_te),e(_te,Cot),e(g0,wot),e($e,Aot),e($e,h0),e(h0,s6e),e(s6e,Lot),e(h0,yot),e(h0,ute),e(ute,xot),e(h0,$ot),e($e,kot),e($e,p0),e(p0,l6e),e(l6e,Sot),e(p0,Rot),e(p0,bte),e(bte,Pot),e(p0,Bot),e($e,Iot),e($e,_0),e(_0,i6e),e(i6e,Not),e(_0,qot),e(_0,vte),e(vte,jot),e(_0,Dot),e($e,Got),e($e,u0),e(u0,d6e),e(d6e,Oot),e(u0,Vot),e(u0,Fte),e(Fte,Xot),e(u0,zot),e($e,Wot),e($e,b0),e(b0,c6e),e(c6e,Qot),e(b0,Uot),e(b0,Tte),e(Tte,Hot),e(b0,Jot),e($e,Yot),e($e,v0),e(v0,f6e),e(f6e,Kot),e(v0,Zot),e(v0,Mte),e(Mte,ert),e(v0,ort),e(Yr,rrt),M(F0,Yr,null),b(f,GHe,u),b(f,Lf,u),e(Lf,T0),e(T0,m6e),M(Hk,m6e,null),e(Lf,trt),e(Lf,g6e),e(g6e,art),b(f,OHe,u),b(f,Er,u),M(Jk,Er,null),e(Er,nrt),e(Er,yf),e(yf,srt),e(yf,Ete),e(Ete,lrt),e(yf,irt),e(yf,Cte),e(Cte,drt),e(yf,crt),e(Er,frt),e(Er,Yk),e(Yk,mrt),e(Yk,h6e),e(h6e,grt),e(Yk,hrt),e(Er,prt),e(Er,ta),M(Kk,ta,null),e(ta,_rt),e(ta,p6e),e(p6e,urt),e(ta,brt),e(ta,xf),e(xf,vrt),e(xf,_6e),e(_6e,Frt),e(xf,Trt),e(xf,wte),e(wte,Mrt),e(xf,Ert),e(ta,Crt),M(M0,ta,null),e(Er,wrt),e(Er,Kr),M(Zk,Kr,null),e(Kr,Art),e(Kr,u6e),e(u6e,Lrt),e(Kr,yrt),e(Kr,Bn),e(Bn,xrt),e(Bn,b6e),e(b6e,$rt),e(Bn,krt),e(Bn,v6e),e(v6e,Srt),e(Bn,Rrt),e(Bn,F6e),e(F6e,Prt),e(Bn,Brt),e(Kr,Irt),e(Kr,ke),e(ke,E0),e(E0,T6e),e(T6e,Nrt),e(E0,qrt),e(E0,Ate),e(Ate,jrt),e(E0,Drt),e(ke,Grt),e(ke,C0),e(C0,M6e),e(M6e,Ort),e(C0,Vrt),e(C0,Lte),e(Lte,Xrt),e(C0,zrt),e(ke,Wrt),e(ke,w0),e(w0,E6e),e(E6e,Qrt),e(w0,Urt),e(w0,yte),e(yte,Hrt),e(w0,Jrt),e(ke,Yrt),e(ke,A0),e(A0,C6e),e(C6e,Krt),e(A0,Zrt),e(A0,xte),e(xte,ett),e(A0,ott),e(ke,rtt),e(ke,L0),e(L0,w6e),e(w6e,ttt),e(L0,att),e(L0,$te),e($te,ntt),e(L0,stt),e(ke,ltt),e(ke,y0),e(y0,A6e),e(A6e,itt),e(y0,dtt),e(y0,kte),e(kte,ctt),e(y0,ftt),e(ke,mtt),e(ke,x0),e(x0,L6e),e(L6e,gtt),e(x0,htt),e(x0,Ste),e(Ste,ptt),e(x0,_tt),e(ke,utt),e(ke,$0),e($0,y6e),e(y6e,btt),e($0,vtt),e($0,Rte),e(Rte,Ftt),e($0,Ttt),e(ke,Mtt),e(ke,k0),e(k0,x6e),e(x6e,Ett),e(k0,Ctt),e(k0,Pte),e(Pte,wtt),e(k0,Att),e(ke,Ltt),e(ke,S0),e(S0,$6e),e($6e,ytt),e(S0,xtt),e(S0,Bte),e(Bte,$tt),e(S0,ktt),e(Kr,Stt),M(R0,Kr,null),b(f,VHe,u),b(f,$f,u),e($f,P0),e(P0,k6e),M(eS,k6e,null),e($f,Rtt),e($f,S6e),e(S6e,Ptt),b(f,XHe,u),b(f,Cr,u),M(oS,Cr,null),e(Cr,Btt),e(Cr,kf),e(kf,Itt),e(kf,Ite),e(Ite,Ntt),e(kf,qtt),e(kf,Nte),e(Nte,jtt),e(kf,Dtt),e(Cr,Gtt),e(Cr,rS),e(rS,Ott),e(rS,R6e),e(R6e,Vtt),e(rS,Xtt),e(Cr,ztt),e(Cr,aa),M(tS,aa,null),e(aa,Wtt),e(aa,P6e),e(P6e,Qtt),e(aa,Utt),e(aa,Sf),e(Sf,Htt),e(Sf,B6e),e(B6e,Jtt),e(Sf,Ytt),e(Sf,qte),e(qte,Ktt),e(Sf,Ztt),e(aa,eat),M(B0,aa,null),e(Cr,oat),e(Cr,Zr),M(aS,Zr,null),e(Zr,rat),e(Zr,I6e),e(I6e,tat),e(Zr,aat),e(Zr,In),e(In,nat),e(In,N6e),e(N6e,sat),e(In,lat),e(In,q6e),e(q6e,iat),e(In,dat),e(In,j6e),e(j6e,cat),e(In,fat),e(Zr,mat),e(Zr,Se),e(Se,I0),e(I0,D6e),e(D6e,gat),e(I0,hat),e(I0,jte),e(jte,pat),e(I0,_at),e(Se,uat),e(Se,N0),e(N0,G6e),e(G6e,bat),e(N0,vat),e(N0,Dte),e(Dte,Fat),e(N0,Tat),e(Se,Mat),e(Se,q0),e(q0,O6e),e(O6e,Eat),e(q0,Cat),e(q0,Gte),e(Gte,wat),e(q0,Aat),e(Se,Lat),e(Se,j0),e(j0,V6e),e(V6e,yat),e(j0,xat),e(j0,Ote),e(Ote,$at),e(j0,kat),e(Se,Sat),e(Se,D0),e(D0,X6e),e(X6e,Rat),e(D0,Pat),e(D0,Vte),e(Vte,Bat),e(D0,Iat),e(Se,Nat),e(Se,G0),e(G0,z6e),e(z6e,qat),e(G0,jat),e(G0,Xte),e(Xte,Dat),e(G0,Gat),e(Se,Oat),e(Se,O0),e(O0,W6e),e(W6e,Vat),e(O0,Xat),e(O0,zte),e(zte,zat),e(O0,Wat),e(Se,Qat),e(Se,V0),e(V0,Q6e),e(Q6e,Uat),e(V0,Hat),e(V0,Wte),e(Wte,Jat),e(V0,Yat),e(Se,Kat),e(Se,X0),e(X0,U6e),e(U6e,Zat),e(X0,ent),e(X0,Qte),e(Qte,ont),e(X0,rnt),e(Se,tnt),e(Se,z0),e(z0,H6e),e(H6e,ant),e(z0,nnt),e(z0,Ute),e(Ute,snt),e(z0,lnt),e(Zr,int),M(W0,Zr,null),b(f,zHe,u),b(f,Rf,u),e(Rf,Q0),e(Q0,J6e),M(nS,J6e,null),e(Rf,dnt),e(Rf,Y6e),e(Y6e,cnt),b(f,WHe,u),b(f,wr,u),M(sS,wr,null),e(wr,fnt),e(wr,Pf),e(Pf,mnt),e(Pf,Hte),e(Hte,gnt),e(Pf,hnt),e(Pf,Jte),e(Jte,pnt),e(Pf,_nt),e(wr,unt),e(wr,lS),e(lS,bnt),e(lS,K6e),e(K6e,vnt),e(lS,Fnt),e(wr,Tnt),e(wr,na),M(iS,na,null),e(na,Mnt),e(na,Z6e),e(Z6e,Ent),e(na,Cnt),e(na,Bf),e(Bf,wnt),e(Bf,eAe),e(eAe,Ant),e(Bf,Lnt),e(Bf,Yte),e(Yte,ynt),e(Bf,xnt),e(na,$nt),M(U0,na,null),e(wr,knt),e(wr,et),M(dS,et,null),e(et,Snt),e(et,oAe),e(oAe,Rnt),e(et,Pnt),e(et,Nn),e(Nn,Bnt),e(Nn,rAe),e(rAe,Int),e(Nn,Nnt),e(Nn,tAe),e(tAe,qnt),e(Nn,jnt),e(Nn,aAe),e(aAe,Dnt),e(Nn,Gnt),e(et,Ont),e(et,Re),e(Re,H0),e(H0,nAe),e(nAe,Vnt),e(H0,Xnt),e(H0,Kte),e(Kte,znt),e(H0,Wnt),e(Re,Qnt),e(Re,J0),e(J0,sAe),e(sAe,Unt),e(J0,Hnt),e(J0,Zte),e(Zte,Jnt),e(J0,Ynt),e(Re,Knt),e(Re,Y0),e(Y0,lAe),e(lAe,Znt),e(Y0,est),e(Y0,eae),e(eae,ost),e(Y0,rst),e(Re,tst),e(Re,K0),e(K0,iAe),e(iAe,ast),e(K0,nst),e(K0,oae),e(oae,sst),e(K0,lst),e(Re,ist),e(Re,Z0),e(Z0,dAe),e(dAe,dst),e(Z0,cst),e(Z0,rae),e(rae,fst),e(Z0,mst),e(Re,gst),e(Re,ew),e(ew,cAe),e(cAe,hst),e(ew,pst),e(ew,tae),e(tae,_st),e(ew,ust),e(Re,bst),e(Re,ow),e(ow,fAe),e(fAe,vst),e(ow,Fst),e(ow,aae),e(aae,Tst),e(ow,Mst),e(Re,Est),e(Re,rw),e(rw,mAe),e(mAe,Cst),e(rw,wst),e(rw,nae),e(nae,Ast),e(rw,Lst),e(Re,yst),e(Re,tw),e(tw,gAe),e(gAe,xst),e(tw,$st),e(tw,sae),e(sae,kst),e(tw,Sst),e(Re,Rst),e(Re,aw),e(aw,hAe),e(hAe,Pst),e(aw,Bst),e(aw,lae),e(lae,Ist),e(aw,Nst),e(et,qst),M(nw,et,null),b(f,QHe,u),b(f,If,u),e(If,sw),e(sw,pAe),M(cS,pAe,null),e(If,jst),e(If,_Ae),e(_Ae,Dst),b(f,UHe,u),b(f,Ar,u),M(fS,Ar,null),e(Ar,Gst),e(Ar,Nf),e(Nf,Ost),e(Nf,iae),e(iae,Vst),e(Nf,Xst),e(Nf,dae),e(dae,zst),e(Nf,Wst),e(Ar,Qst),e(Ar,mS),e(mS,Ust),e(mS,uAe),e(uAe,Hst),e(mS,Jst),e(Ar,Yst),e(Ar,sa),M(gS,sa,null),e(sa,Kst),e(sa,bAe),e(bAe,Zst),e(sa,elt),e(sa,qf),e(qf,olt),e(qf,vAe),e(vAe,rlt),e(qf,tlt),e(qf,cae),e(cae,alt),e(qf,nlt),e(sa,slt),M(lw,sa,null),e(Ar,llt),e(Ar,ot),M(hS,ot,null),e(ot,ilt),e(ot,FAe),e(FAe,dlt),e(ot,clt),e(ot,qn),e(qn,flt),e(qn,TAe),e(TAe,mlt),e(qn,glt),e(qn,MAe),e(MAe,hlt),e(qn,plt),e(qn,EAe),e(EAe,_lt),e(qn,ult),e(ot,blt),e(ot,Xe),e(Xe,iw),e(iw,CAe),e(CAe,vlt),e(iw,Flt),e(iw,fae),e(fae,Tlt),e(iw,Mlt),e(Xe,Elt),e(Xe,dw),e(dw,wAe),e(wAe,Clt),e(dw,wlt),e(dw,mae),e(mae,Alt),e(dw,Llt),e(Xe,ylt),e(Xe,cw),e(cw,AAe),e(AAe,xlt),e(cw,$lt),e(cw,gae),e(gae,klt),e(cw,Slt),e(Xe,Rlt),e(Xe,fw),e(fw,LAe),e(LAe,Plt),e(fw,Blt),e(fw,hae),e(hae,Ilt),e(fw,Nlt),e(Xe,qlt),e(Xe,mw),e(mw,yAe),e(yAe,jlt),e(mw,Dlt),e(mw,pae),e(pae,Glt),e(mw,Olt),e(Xe,Vlt),e(Xe,gw),e(gw,xAe),e(xAe,Xlt),e(gw,zlt),e(gw,_ae),e(_ae,Wlt),e(gw,Qlt),e(Xe,Ult),e(Xe,hw),e(hw,$Ae),e($Ae,Hlt),e(hw,Jlt),e(hw,uae),e(uae,Ylt),e(hw,Klt),e(Xe,Zlt),e(Xe,pw),e(pw,kAe),e(kAe,eit),e(pw,oit),e(pw,bae),e(bae,rit),e(pw,tit),e(ot,ait),M(_w,ot,null),b(f,HHe,u),b(f,jf,u),e(jf,uw),e(uw,SAe),M(pS,SAe,null),e(jf,nit),e(jf,RAe),e(RAe,sit),b(f,JHe,u),b(f,Lr,u),M(_S,Lr,null),e(Lr,lit),e(Lr,Df),e(Df,iit),e(Df,vae),e(vae,dit),e(Df,cit),e(Df,Fae),e(Fae,fit),e(Df,mit),e(Lr,git),e(Lr,uS),e(uS,hit),e(uS,PAe),e(PAe,pit),e(uS,_it),e(Lr,uit),e(Lr,la),M(bS,la,null),e(la,bit),e(la,BAe),e(BAe,vit),e(la,Fit),e(la,Gf),e(Gf,Tit),e(Gf,IAe),e(IAe,Mit),e(Gf,Eit),e(Gf,Tae),e(Tae,Cit),e(Gf,wit),e(la,Ait),M(bw,la,null),e(Lr,Lit),e(Lr,rt),M(vS,rt,null),e(rt,yit),e(rt,NAe),e(NAe,xit),e(rt,$it),e(rt,jn),e(jn,kit),e(jn,qAe),e(qAe,Sit),e(jn,Rit),e(jn,jAe),e(jAe,Pit),e(jn,Bit),e(jn,DAe),e(DAe,Iit),e(jn,Nit),e(rt,qit),e(rt,ze),e(ze,vw),e(vw,GAe),e(GAe,jit),e(vw,Dit),e(vw,Mae),e(Mae,Git),e(vw,Oit),e(ze,Vit),e(ze,Fw),e(Fw,OAe),e(OAe,Xit),e(Fw,zit),e(Fw,Eae),e(Eae,Wit),e(Fw,Qit),e(ze,Uit),e(ze,Tw),e(Tw,VAe),e(VAe,Hit),e(Tw,Jit),e(Tw,Cae),e(Cae,Yit),e(Tw,Kit),e(ze,Zit),e(ze,Mw),e(Mw,XAe),e(XAe,edt),e(Mw,odt),e(Mw,wae),e(wae,rdt),e(Mw,tdt),e(ze,adt),e(ze,Ew),e(Ew,zAe),e(zAe,ndt),e(Ew,sdt),e(Ew,Aae),e(Aae,ldt),e(Ew,idt),e(ze,ddt),e(ze,Cw),e(Cw,WAe),e(WAe,cdt),e(Cw,fdt),e(Cw,Lae),e(Lae,mdt),e(Cw,gdt),e(ze,hdt),e(ze,ww),e(ww,QAe),e(QAe,pdt),e(ww,_dt),e(ww,yae),e(yae,udt),e(ww,bdt),e(ze,vdt),e(ze,Aw),e(Aw,UAe),e(UAe,Fdt),e(Aw,Tdt),e(Aw,xae),e(xae,Mdt),e(Aw,Edt),e(rt,Cdt),M(Lw,rt,null),b(f,YHe,u),b(f,Of,u),e(Of,yw),e(yw,HAe),M(FS,HAe,null),e(Of,wdt),e(Of,JAe),e(JAe,Adt),b(f,KHe,u),b(f,yr,u),M(TS,yr,null),e(yr,Ldt),e(yr,Vf),e(Vf,ydt),e(Vf,$ae),e($ae,xdt),e(Vf,$dt),e(Vf,kae),e(kae,kdt),e(Vf,Sdt),e(yr,Rdt),e(yr,MS),e(MS,Pdt),e(MS,YAe),e(YAe,Bdt),e(MS,Idt),e(yr,Ndt),e(yr,ia),M(ES,ia,null),e(ia,qdt),e(ia,KAe),e(KAe,jdt),e(ia,Ddt),e(ia,Xf),e(Xf,Gdt),e(Xf,ZAe),e(ZAe,Odt),e(Xf,Vdt),e(Xf,Sae),e(Sae,Xdt),e(Xf,zdt),e(ia,Wdt),M(xw,ia,null),e(yr,Qdt),e(yr,tt),M(CS,tt,null),e(tt,Udt),e(tt,eLe),e(eLe,Hdt),e(tt,Jdt),e(tt,Dn),e(Dn,Ydt),e(Dn,oLe),e(oLe,Kdt),e(Dn,Zdt),e(Dn,rLe),e(rLe,ect),e(Dn,oct),e(Dn,tLe),e(tLe,rct),e(Dn,tct),e(tt,act),e(tt,aLe),e(aLe,$w),e($w,nLe),e(nLe,nct),e($w,sct),e($w,Rae),e(Rae,lct),e($w,ict),e(tt,dct),M(kw,tt,null),b(f,ZHe,u),b(f,zf,u),e(zf,Sw),e(Sw,sLe),M(wS,sLe,null),e(zf,cct),e(zf,lLe),e(lLe,fct),b(f,eJe,u),b(f,xr,u),M(AS,xr,null),e(xr,mct),e(xr,Wf),e(Wf,gct),e(Wf,Pae),e(Pae,hct),e(Wf,pct),e(Wf,Bae),e(Bae,_ct),e(Wf,uct),e(xr,bct),e(xr,LS),e(LS,vct),e(LS,iLe),e(iLe,Fct),e(LS,Tct),e(xr,Mct),e(xr,da),M(yS,da,null),e(da,Ect),e(da,dLe),e(dLe,Cct),e(da,wct),e(da,Qf),e(Qf,Act),e(Qf,cLe),e(cLe,Lct),e(Qf,yct),e(Qf,Iae),e(Iae,xct),e(Qf,$ct),e(da,kct),M(Rw,da,null),e(xr,Sct),e(xr,at),M(xS,at,null),e(at,Rct),e(at,fLe),e(fLe,Pct),e(at,Bct),e(at,Gn),e(Gn,Ict),e(Gn,mLe),e(mLe,Nct),e(Gn,qct),e(Gn,gLe),e(gLe,jct),e(Gn,Dct),e(Gn,hLe),e(hLe,Gct),e(Gn,Oct),e(at,Vct),e(at,$S),e($S,Pw),e(Pw,pLe),e(pLe,Xct),e(Pw,zct),e(Pw,Nae),e(Nae,Wct),e(Pw,Qct),e($S,Uct),e($S,Bw),e(Bw,_Le),e(_Le,Hct),e(Bw,Jct),e(Bw,qae),e(qae,Yct),e(Bw,Kct),e(at,Zct),M(Iw,at,null),b(f,oJe,u),b(f,Uf,u),e(Uf,Nw),e(Nw,uLe),M(kS,uLe,null),e(Uf,eft),e(Uf,bLe),e(bLe,oft),b(f,rJe,u),b(f,$r,u),M(SS,$r,null),e($r,rft),e($r,Hf),e(Hf,tft),e(Hf,jae),e(jae,aft),e(Hf,nft),e(Hf,Dae),e(Dae,sft),e(Hf,lft),e($r,ift),e($r,RS),e(RS,dft),e(RS,vLe),e(vLe,cft),e(RS,fft),e($r,mft),e($r,ca),M(PS,ca,null),e(ca,gft),e(ca,FLe),e(FLe,hft),e(ca,pft),e(ca,Jf),e(Jf,_ft),e(Jf,TLe),e(TLe,uft),e(Jf,bft),e(Jf,Gae),e(Gae,vft),e(Jf,Fft),e(ca,Tft),M(qw,ca,null),e($r,Mft),e($r,nt),M(BS,nt,null),e(nt,Eft),e(nt,MLe),e(MLe,Cft),e(nt,wft),e(nt,On),e(On,Aft),e(On,ELe),e(ELe,Lft),e(On,yft),e(On,CLe),e(CLe,xft),e(On,$ft),e(On,wLe),e(wLe,kft),e(On,Sft),e(nt,Rft),e(nt,ALe),e(ALe,jw),e(jw,LLe),e(LLe,Pft),e(jw,Bft),e(jw,Oae),e(Oae,Ift),e(jw,Nft),e(nt,qft),M(Dw,nt,null),tJe=!0},p(f,[u]){const IS={};u&2&&(IS.$$scope={dirty:u,ctx:f}),nm.$set(IS);const yLe={};u&2&&(yLe.$$scope={dirty:u,ctx:f}),Th.$set(yLe);const xLe={};u&2&&(xLe.$$scope={dirty:u,ctx:f}),tp.$set(xLe);const $Le={};u&2&&($Le.$$scope={dirty:u,ctx:f}),Xp.$set($Le);const NS={};u&2&&(NS.$$scope={dirty:u,ctx:f}),zp.$set(NS);const kLe={};u&2&&(kLe.$$scope={dirty:u,ctx:f}),h_.$set(kLe);const Vn={};u&2&&(Vn.$$scope={dirty:u,ctx:f}),p_.$set(Vn);const SLe={};u&2&&(SLe.$$scope={dirty:u,ctx:f}),b_.$set(SLe);const RLe={};u&2&&(RLe.$$scope={dirty:u,ctx:f}),L1.$set(RLe);const PLe={};u&2&&(PLe.$$scope={dirty:u,ctx:f}),x1.$set(PLe);const qS={};u&2&&(qS.$$scope={dirty:u,ctx:f}),C2.$set(qS);const BLe={};u&2&&(BLe.$$scope={dirty:u,ctx:f}),A2.$set(BLe);const jS={};u&2&&(jS.$$scope={dirty:u,ctx:f}),hb.$set(jS);const ILe={};u&2&&(ILe.$$scope={dirty:u,ctx:f}),_b.$set(ILe);const DS={};u&2&&(DS.$$scope={dirty:u,ctx:f}),rv.$set(DS);const NLe={};u&2&&(NLe.$$scope={dirty:u,ctx:f}),av.$set(NLe);const qLe={};u&2&&(qLe.$$scope={dirty:u,ctx:f}),wv.$set(qLe);const jLe={};u&2&&(jLe.$$scope={dirty:u,ctx:f}),Lv.$set(jLe);const Yf={};u&2&&(Yf.$$scope={dirty:u,ctx:f}),L5.$set(Yf);const DLe={};u&2&&(DLe.$$scope={dirty:u,ctx:f}),x5.$set(DLe);const GLe={};u&2&&(GLe.$$scope={dirty:u,ctx:f}),iF.$set(GLe);const OLe={};u&2&&(OLe.$$scope={dirty:u,ctx:f}),cF.$set(OLe);const GS={};u&2&&(GS.$$scope={dirty:u,ctx:f}),bF.$set(GS);const VLe={};u&2&&(VLe.$$scope={dirty:u,ctx:f}),FF.$set(VLe);const XLe={};u&2&&(XLe.$$scope={dirty:u,ctx:f}),nT.$set(XLe);const zLe={};u&2&&(zLe.$$scope={dirty:u,ctx:f}),lT.$set(zLe);const dt={};u&2&&(dt.$$scope={dirty:u,ctx:f}),KT.$set(dt);const OS={};u&2&&(OS.$$scope={dirty:u,ctx:f}),e7.$set(OS);const WLe={};u&2&&(WLe.$$scope={dirty:u,ctx:f}),t7.$set(WLe);const VS={};u&2&&(VS.$$scope={dirty:u,ctx:f}),n7.$set(VS);const QLe={};u&2&&(QLe.$$scope={dirty:u,ctx:f}),T7.$set(QLe);const ct={};u&2&&(ct.$$scope={dirty:u,ctx:f}),E7.$set(ct);const ULe={};u&2&&(ULe.$$scope={dirty:u,ctx:f}),A7.$set(ULe);const Kf={};u&2&&(Kf.$$scope={dirty:u,ctx:f}),y7.$set(Kf);const HLe={};u&2&&(HLe.$$scope={dirty:u,ctx:f}),k7.$set(HLe);const JLe={};u&2&&(JLe.$$scope={dirty:u,ctx:f}),R7.$set(JLe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),I7.$set(L);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),q7.$set(Gw);const YLe={};u&2&&(YLe.$$scope={dirty:u,ctx:f}),H7.$set(YLe);const KLe={};u&2&&(KLe.$$scope={dirty:u,ctx:f}),Y7.$set(KLe);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),a8.$set(Ow);const ZLe={};u&2&&(ZLe.$$scope={dirty:u,ctx:f}),s8.$set(ZLe);const eye={};u&2&&(eye.$$scope={dirty:u,ctx:f}),b8.$set(eye);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),F8.$set(Vw);const oye={};u&2&&(oye.$$scope={dirty:u,ctx:f}),C8.$set(oye);const rye={};u&2&&(rye.$$scope={dirty:u,ctx:f}),A8.$set(rye);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),R8.$set(Xw);const tye={};u&2&&(tye.$$scope={dirty:u,ctx:f}),B8.$set(tye);const aye={};u&2&&(aye.$$scope={dirty:u,ctx:f}),G8.$set(aye);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),V8.$set(zw);const nye={};u&2&&(nye.$$scope={dirty:u,ctx:f}),Q8.$set(nye);const sye={};u&2&&(sye.$$scope={dirty:u,ctx:f}),H8.$set(sye);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),K8.$set(Ww);const lye={};u&2&&(lye.$$scope={dirty:u,ctx:f}),e9.$set(lye);const iye={};u&2&&(iye.$$scope={dirty:u,ctx:f}),l9.$set(iye);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),d9.$set(Qw);const dye={};u&2&&(dye.$$scope={dirty:u,ctx:f}),m9.$set(dye);const cye={};u&2&&(cye.$$scope={dirty:u,ctx:f}),h9.$set(cye);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),mM.$set(Uw);const fye={};u&2&&(fye.$$scope={dirty:u,ctx:f}),hM.$set(fye);const mye={};u&2&&(mye.$$scope={dirty:u,ctx:f}),qM.$set(mye);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),DM.$set(Hw);const gye={};u&2&&(gye.$$scope={dirty:u,ctx:f}),eE.$set(gye);const hye={};u&2&&(hye.$$scope={dirty:u,ctx:f}),rE.$set(hye);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),fE.$set(Jw);const pye={};u&2&&(pye.$$scope={dirty:u,ctx:f}),gE.$set(pye);const _ye={};u&2&&(_ye.$$scope={dirty:u,ctx:f}),_E.$set(_ye);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),bE.$set(Yw);const uye={};u&2&&(uye.$$scope={dirty:u,ctx:f}),jE.$set(uye);const bye={};u&2&&(bye.$$scope={dirty:u,ctx:f}),GE.$set(bye);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),KE.$set(Kw);const vye={};u&2&&(vye.$$scope={dirty:u,ctx:f}),e4.$set(vye);const Fye={};u&2&&(Fye.$$scope={dirty:u,ctx:f}),L4.$set(Fye);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),x4.$set(Zw);const Tye={};u&2&&(Tye.$$scope={dirty:u,ctx:f}),Q4.$set(Tye);const Mye={};u&2&&(Mye.$$scope={dirty:u,ctx:f}),H4.$set(Mye);const e6={};u&2&&(e6.$$scope={dirty:u,ctx:f}),K4.$set(e6);const Eye={};u&2&&(Eye.$$scope={dirty:u,ctx:f}),eC.$set(Eye);const Cye={};u&2&&(Cye.$$scope={dirty:u,ctx:f}),rC.$set(Cye);const o6={};u&2&&(o6.$$scope={dirty:u,ctx:f}),aC.$set(o6);const wye={};u&2&&(wye.$$scope={dirty:u,ctx:f}),wC.$set(wye);const Aye={};u&2&&(Aye.$$scope={dirty:u,ctx:f}),LC.$set(Aye);const r6={};u&2&&(r6.$$scope={dirty:u,ctx:f}),UC.$set(r6);const Lye={};u&2&&(Lye.$$scope={dirty:u,ctx:f}),JC.$set(Lye);const yye={};u&2&&(yye.$$scope={dirty:u,ctx:f}),KC.$set(yye);const t6={};u&2&&(t6.$$scope={dirty:u,ctx:f}),e3.$set(t6);const xye={};u&2&&(xye.$$scope={dirty:u,ctx:f}),r3.$set(xye);const $ye={};u&2&&($ye.$$scope={dirty:u,ctx:f}),a3.$set($ye);const a6={};u&2&&(a6.$$scope={dirty:u,ctx:f}),S3.$set(a6);const kye={};u&2&&(kye.$$scope={dirty:u,ctx:f}),P3.$set(kye);const Sye={};u&2&&(Sye.$$scope={dirty:u,ctx:f}),z3.$set(Sye);const n6={};u&2&&(n6.$$scope={dirty:u,ctx:f}),Q3.$set(n6);const Rye={};u&2&&(Rye.$$scope={dirty:u,ctx:f}),l0.$set(Rye);const Pye={};u&2&&(Pye.$$scope={dirty:u,ctx:f}),d0.$set(Pye);const s6={};u&2&&(s6.$$scope={dirty:u,ctx:f}),F0.$set(s6);const Bye={};u&2&&(Bye.$$scope={dirty:u,ctx:f}),M0.$set(Bye);const Iye={};u&2&&(Iye.$$scope={dirty:u,ctx:f}),R0.$set(Iye);const l6={};u&2&&(l6.$$scope={dirty:u,ctx:f}),B0.$set(l6);const Nye={};u&2&&(Nye.$$scope={dirty:u,ctx:f}),W0.$set(Nye);const qye={};u&2&&(qye.$$scope={dirty:u,ctx:f}),U0.$set(qye);const i6={};u&2&&(i6.$$scope={dirty:u,ctx:f}),nw.$set(i6);const jye={};u&2&&(jye.$$scope={dirty:u,ctx:f}),lw.$set(jye);const Dye={};u&2&&(Dye.$$scope={dirty:u,ctx:f}),_w.$set(Dye);const d6={};u&2&&(d6.$$scope={dirty:u,ctx:f}),bw.$set(d6);const Gye={};u&2&&(Gye.$$scope={dirty:u,ctx:f}),Lw.$set(Gye);const Oye={};u&2&&(Oye.$$scope={dirty:u,ctx:f}),xw.$set(Oye);const c6={};u&2&&(c6.$$scope={dirty:u,ctx:f}),kw.$set(c6);const Vye={};u&2&&(Vye.$$scope={dirty:u,ctx:f}),Rw.$set(Vye);const Xye={};u&2&&(Xye.$$scope={dirty:u,ctx:f}),Iw.$set(Xye);const f6={};u&2&&(f6.$$scope={dirty:u,ctx:f}),qw.$set(f6);const zye={};u&2&&(zye.$$scope={dirty:u,ctx:f}),Dw.$set(zye)},i(f){tJe||(E(d.$$.fragment,f),E(ja.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(nm.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(TL.$$.fragment,f),E(Th.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(LL.$$.fragment,f),E(tp.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(RL.$$.fragment,f),E(Xp.$$.fragment,f),E(zp.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(jL.$$.fragment,f),E(h_.$$.fragment,f),E(p_.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(b_.$$.fragment,f),E(zL.$$.fragment,f),E(L1.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(x1.$$.fragment,f),E(JL.$$.fragment,f),E(C2.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(A2.$$.fragment,f),E(oy.$$.fragment,f),E(hb.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(_b.$$.fragment,f),E(sy.$$.fragment,f),E(rv.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(av.$$.fragment,f),E(fy.$$.fragment,f),E(wv.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(Lv.$$.fragment,f),E(_y.$$.fragment,f),E(L5.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(x5.$$.fragment,f),E(Ty.$$.fragment,f),E(iF.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(cF.$$.fragment,f),E(Ay.$$.fragment,f),E(bF.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(FF.$$.fragment,f),E(ky.$$.fragment,f),E(nT.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(lT.$$.fragment,f),E(Iy.$$.fragment,f),E(KT.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(e7.$$.fragment,f),E(Gy.$$.fragment,f),E(t7.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(n7.$$.fragment,f),E(Wy.$$.fragment,f),E(T7.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(E7.$$.fragment,f),E(Yy.$$.fragment,f),E(A7.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(ox.$$.fragment,f),E(y7.$$.fragment,f),E(rx.$$.fragment,f),E(k7.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(R7.$$.fragment,f),E(lx.$$.fragment,f),E(I7.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(q7.$$.fragment,f),E(mx.$$.fragment,f),E(H7.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(Y7.$$.fragment,f),E(ux.$$.fragment,f),E(a8.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(s8.$$.fragment,f),E(Mx.$$.fragment,f),E(b8.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(F8.$$.fragment,f),E(Lx.$$.fragment,f),E(C8.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(A8.$$.fragment,f),E(Rx.$$.fragment,f),E(R8.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(B8.$$.fragment,f),E(qx.$$.fragment,f),E(G8.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(V8.$$.fragment,f),E(Vx.$$.fragment,f),E(Q8.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(H8.$$.fragment,f),E(Hx.$$.fragment,f),E(K8.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(e9.$$.fragment,f),E(e$.$$.fragment,f),E(l9.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(d9.$$.fragment,f),E(n$.$$.fragment,f),E(m9.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(h9.$$.fragment,f),E(c$.$$.fragment,f),E(mM.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(hM.$$.fragment,f),E(p$.$$.fragment,f),E(qM.$$.fragment,f),E(_$.$$.fragment,f),E(u$.$$.fragment,f),E(v$.$$.fragment,f),E(DM.$$.fragment,f),E(F$.$$.fragment,f),E(eE.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(rE.$$.fragment,f),E(w$.$$.fragment,f),E(fE.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(gE.$$.fragment,f),E($$.$$.fragment,f),E(_E.$$.fragment,f),E(S$.$$.fragment,f),E(R$.$$.fragment,f),E(B$.$$.fragment,f),E(bE.$$.fragment,f),E(I$.$$.fragment,f),E(jE.$$.fragment,f),E(N$.$$.fragment,f),E(q$.$$.fragment,f),E(D$.$$.fragment,f),E(GE.$$.fragment,f),E(G$.$$.fragment,f),E(KE.$$.fragment,f),E(O$.$$.fragment,f),E(V$.$$.fragment,f),E(z$.$$.fragment,f),E(e4.$$.fragment,f),E(W$.$$.fragment,f),E(L4.$$.fragment,f),E(Q$.$$.fragment,f),E(U$.$$.fragment,f),E(J$.$$.fragment,f),E(x4.$$.fragment,f),E(Y$.$$.fragment,f),E(Q4.$$.fragment,f),E(K$.$$.fragment,f),E(Z$.$$.fragment,f),E(ok.$$.fragment,f),E(H4.$$.fragment,f),E(rk.$$.fragment,f),E(K4.$$.fragment,f),E(ak.$$.fragment,f),E(nk.$$.fragment,f),E(lk.$$.fragment,f),E(eC.$$.fragment,f),E(ik.$$.fragment,f),E(rC.$$.fragment,f),E(dk.$$.fragment,f),E(ck.$$.fragment,f),E(mk.$$.fragment,f),E(aC.$$.fragment,f),E(gk.$$.fragment,f),E(wC.$$.fragment,f),E(hk.$$.fragment,f),E(pk.$$.fragment,f),E(uk.$$.fragment,f),E(LC.$$.fragment,f),E(bk.$$.fragment,f),E(UC.$$.fragment,f),E(vk.$$.fragment,f),E(Fk.$$.fragment,f),E(Mk.$$.fragment,f),E(JC.$$.fragment,f),E(Ek.$$.fragment,f),E(KC.$$.fragment,f),E(Ck.$$.fragment,f),E(wk.$$.fragment,f),E(Lk.$$.fragment,f),E(e3.$$.fragment,f),E(yk.$$.fragment,f),E(r3.$$.fragment,f),E(xk.$$.fragment,f),E($k.$$.fragment,f),E(Sk.$$.fragment,f),E(a3.$$.fragment,f),E(Rk.$$.fragment,f),E(S3.$$.fragment,f),E(Pk.$$.fragment,f),E(Bk.$$.fragment,f),E(Nk.$$.fragment,f),E(P3.$$.fragment,f),E(qk.$$.fragment,f),E(z3.$$.fragment,f),E(jk.$$.fragment,f),E(Dk.$$.fragment,f),E(Ok.$$.fragment,f),E(Q3.$$.fragment,f),E(Vk.$$.fragment,f),E(l0.$$.fragment,f),E(Xk.$$.fragment,f),E(zk.$$.fragment,f),E(Qk.$$.fragment,f),E(d0.$$.fragment,f),E(Uk.$$.fragment,f),E(F0.$$.fragment,f),E(Hk.$$.fragment,f),E(Jk.$$.fragment,f),E(Kk.$$.fragment,f),E(M0.$$.fragment,f),E(Zk.$$.fragment,f),E(R0.$$.fragment,f),E(eS.$$.fragment,f),E(oS.$$.fragment,f),E(tS.$$.fragment,f),E(B0.$$.fragment,f),E(aS.$$.fragment,f),E(W0.$$.fragment,f),E(nS.$$.fragment,f),E(sS.$$.fragment,f),E(iS.$$.fragment,f),E(U0.$$.fragment,f),E(dS.$$.fragment,f),E(nw.$$.fragment,f),E(cS.$$.fragment,f),E(fS.$$.fragment,f),E(gS.$$.fragment,f),E(lw.$$.fragment,f),E(hS.$$.fragment,f),E(_w.$$.fragment,f),E(pS.$$.fragment,f),E(_S.$$.fragment,f),E(bS.$$.fragment,f),E(bw.$$.fragment,f),E(vS.$$.fragment,f),E(Lw.$$.fragment,f),E(FS.$$.fragment,f),E(TS.$$.fragment,f),E(ES.$$.fragment,f),E(xw.$$.fragment,f),E(CS.$$.fragment,f),E(kw.$$.fragment,f),E(wS.$$.fragment,f),E(AS.$$.fragment,f),E(yS.$$.fragment,f),E(Rw.$$.fragment,f),E(xS.$$.fragment,f),E(Iw.$$.fragment,f),E(kS.$$.fragment,f),E(SS.$$.fragment,f),E(PS.$$.fragment,f),E(qw.$$.fragment,f),E(BS.$$.fragment,f),E(Dw.$$.fragment,f),tJe=!0)},o(f){C(d.$$.fragment,f),C(ja.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(nm.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(TL.$$.fragment,f),C(Th.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(LL.$$.fragment,f),C(tp.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(RL.$$.fragment,f),C(Xp.$$.fragment,f),C(zp.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(jL.$$.fragment,f),C(h_.$$.fragment,f),C(p_.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(b_.$$.fragment,f),C(zL.$$.fragment,f),C(L1.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(x1.$$.fragment,f),C(JL.$$.fragment,f),C(C2.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(A2.$$.fragment,f),C(oy.$$.fragment,f),C(hb.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(_b.$$.fragment,f),C(sy.$$.fragment,f),C(rv.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(av.$$.fragment,f),C(fy.$$.fragment,f),C(wv.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(Lv.$$.fragment,f),C(_y.$$.fragment,f),C(L5.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(x5.$$.fragment,f),C(Ty.$$.fragment,f),C(iF.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(cF.$$.fragment,f),C(Ay.$$.fragment,f),C(bF.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(FF.$$.fragment,f),C(ky.$$.fragment,f),C(nT.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(lT.$$.fragment,f),C(Iy.$$.fragment,f),C(KT.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(e7.$$.fragment,f),C(Gy.$$.fragment,f),C(t7.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(n7.$$.fragment,f),C(Wy.$$.fragment,f),C(T7.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(E7.$$.fragment,f),C(Yy.$$.fragment,f),C(A7.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(ox.$$.fragment,f),C(y7.$$.fragment,f),C(rx.$$.fragment,f),C(k7.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(R7.$$.fragment,f),C(lx.$$.fragment,f),C(I7.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(q7.$$.fragment,f),C(mx.$$.fragment,f),C(H7.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(Y7.$$.fragment,f),C(ux.$$.fragment,f),C(a8.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(s8.$$.fragment,f),C(Mx.$$.fragment,f),C(b8.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(F8.$$.fragment,f),C(Lx.$$.fragment,f),C(C8.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(A8.$$.fragment,f),C(Rx.$$.fragment,f),C(R8.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(B8.$$.fragment,f),C(qx.$$.fragment,f),C(G8.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(V8.$$.fragment,f),C(Vx.$$.fragment,f),C(Q8.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(H8.$$.fragment,f),C(Hx.$$.fragment,f),C(K8.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(e9.$$.fragment,f),C(e$.$$.fragment,f),C(l9.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(d9.$$.fragment,f),C(n$.$$.fragment,f),C(m9.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(h9.$$.fragment,f),C(c$.$$.fragment,f),C(mM.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(hM.$$.fragment,f),C(p$.$$.fragment,f),C(qM.$$.fragment,f),C(_$.$$.fragment,f),C(u$.$$.fragment,f),C(v$.$$.fragment,f),C(DM.$$.fragment,f),C(F$.$$.fragment,f),C(eE.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(rE.$$.fragment,f),C(w$.$$.fragment,f),C(fE.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(gE.$$.fragment,f),C($$.$$.fragment,f),C(_E.$$.fragment,f),C(S$.$$.fragment,f),C(R$.$$.fragment,f),C(B$.$$.fragment,f),C(bE.$$.fragment,f),C(I$.$$.fragment,f),C(jE.$$.fragment,f),C(N$.$$.fragment,f),C(q$.$$.fragment,f),C(D$.$$.fragment,f),C(GE.$$.fragment,f),C(G$.$$.fragment,f),C(KE.$$.fragment,f),C(O$.$$.fragment,f),C(V$.$$.fragment,f),C(z$.$$.fragment,f),C(e4.$$.fragment,f),C(W$.$$.fragment,f),C(L4.$$.fragment,f),C(Q$.$$.fragment,f),C(U$.$$.fragment,f),C(J$.$$.fragment,f),C(x4.$$.fragment,f),C(Y$.$$.fragment,f),C(Q4.$$.fragment,f),C(K$.$$.fragment,f),C(Z$.$$.fragment,f),C(ok.$$.fragment,f),C(H4.$$.fragment,f),C(rk.$$.fragment,f),C(K4.$$.fragment,f),C(ak.$$.fragment,f),C(nk.$$.fragment,f),C(lk.$$.fragment,f),C(eC.$$.fragment,f),C(ik.$$.fragment,f),C(rC.$$.fragment,f),C(dk.$$.fragment,f),C(ck.$$.fragment,f),C(mk.$$.fragment,f),C(aC.$$.fragment,f),C(gk.$$.fragment,f),C(wC.$$.fragment,f),C(hk.$$.fragment,f),C(pk.$$.fragment,f),C(uk.$$.fragment,f),C(LC.$$.fragment,f),C(bk.$$.fragment,f),C(UC.$$.fragment,f),C(vk.$$.fragment,f),C(Fk.$$.fragment,f),C(Mk.$$.fragment,f),C(JC.$$.fragment,f),C(Ek.$$.fragment,f),C(KC.$$.fragment,f),C(Ck.$$.fragment,f),C(wk.$$.fragment,f),C(Lk.$$.fragment,f),C(e3.$$.fragment,f),C(yk.$$.fragment,f),C(r3.$$.fragment,f),C(xk.$$.fragment,f),C($k.$$.fragment,f),C(Sk.$$.fragment,f),C(a3.$$.fragment,f),C(Rk.$$.fragment,f),C(S3.$$.fragment,f),C(Pk.$$.fragment,f),C(Bk.$$.fragment,f),C(Nk.$$.fragment,f),C(P3.$$.fragment,f),C(qk.$$.fragment,f),C(z3.$$.fragment,f),C(jk.$$.fragment,f),C(Dk.$$.fragment,f),C(Ok.$$.fragment,f),C(Q3.$$.fragment,f),C(Vk.$$.fragment,f),C(l0.$$.fragment,f),C(Xk.$$.fragment,f),C(zk.$$.fragment,f),C(Qk.$$.fragment,f),C(d0.$$.fragment,f),C(Uk.$$.fragment,f),C(F0.$$.fragment,f),C(Hk.$$.fragment,f),C(Jk.$$.fragment,f),C(Kk.$$.fragment,f),C(M0.$$.fragment,f),C(Zk.$$.fragment,f),C(R0.$$.fragment,f),C(eS.$$.fragment,f),C(oS.$$.fragment,f),C(tS.$$.fragment,f),C(B0.$$.fragment,f),C(aS.$$.fragment,f),C(W0.$$.fragment,f),C(nS.$$.fragment,f),C(sS.$$.fragment,f),C(iS.$$.fragment,f),C(U0.$$.fragment,f),C(dS.$$.fragment,f),C(nw.$$.fragment,f),C(cS.$$.fragment,f),C(fS.$$.fragment,f),C(gS.$$.fragment,f),C(lw.$$.fragment,f),C(hS.$$.fragment,f),C(_w.$$.fragment,f),C(pS.$$.fragment,f),C(_S.$$.fragment,f),C(bS.$$.fragment,f),C(bw.$$.fragment,f),C(vS.$$.fragment,f),C(Lw.$$.fragment,f),C(FS.$$.fragment,f),C(TS.$$.fragment,f),C(ES.$$.fragment,f),C(xw.$$.fragment,f),C(CS.$$.fragment,f),C(kw.$$.fragment,f),C(wS.$$.fragment,f),C(AS.$$.fragment,f),C(yS.$$.fragment,f),C(Rw.$$.fragment,f),C(xS.$$.fragment,f),C(Iw.$$.fragment,f),C(kS.$$.fragment,f),C(SS.$$.fragment,f),C(PS.$$.fragment,f),C(qw.$$.fragment,f),C(BS.$$.fragment,f),C(Dw.$$.fragment,f),tJe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(em),f&&t(ft),f&&t(Ve),f&&t(Ue),f&&t(rm),w(ja,f),f&&t(He),f&&t(Ae),f&&t(Lo),f&&t(Da),f&&t(UQe),f&&t(Hi),w(pL),f&&t(HQe),f&&t(Un),f&&t(JQe),w(_L,f),f&&t(YQe),f&&t(cP),f&&t(KQe),w(nm,f),f&&t(ZQe),f&&t(Ji),w(uL),f&&t(eUe),f&&t(yo),w(bL),w(TL),w(Th),w(ML),f&&t(oUe),f&&t(Ki),w(EL),f&&t(rUe),f&&t(xo),w(CL),w(LL),w(tp),w(yL),f&&t(tUe),f&&t(Zi),w(xL),f&&t(aUe),f&&t($o),w($L),w(RL),w(Xp),w(zp),w(PL),f&&t(nUe),f&&t(ed),w(BL),f&&t(sUe),f&&t(ko),w(IL),w(jL),w(h_),w(p_),w(DL),f&&t(lUe),f&&t(rd),w(GL),f&&t(iUe),f&&t(So),w(OL),w(XL),w(b_),w(zL),w(L1),f&&t(dUe),f&&t(nd),w(WL),f&&t(cUe),f&&t(Ro),w(QL),w(HL),w(x1),w(JL),w(C2),f&&t(fUe),f&&t(id),w(YL),f&&t(mUe),f&&t(Po),w(KL),w(ey),w(A2),w(oy),w(hb),f&&t(gUe),f&&t(fd),w(ry),f&&t(hUe),f&&t(Bo),w(ty),w(ny),w(_b),w(sy),w(rv),f&&t(pUe),f&&t(hd),w(ly),f&&t(_Ue),f&&t(Io),w(iy),w(cy),w(av),w(fy),w(wv),f&&t(uUe),f&&t(ud),w(my),f&&t(bUe),f&&t(No),w(gy),w(py),w(Lv),w(_y),w(L5),f&&t(vUe),f&&t(Fd),w(uy),f&&t(FUe),f&&t(qo),w(by),w(Fy),w(x5),w(Ty),w(iF),f&&t(TUe),f&&t(Ed),w(My),f&&t(MUe),f&&t(jo),w(Ey),w(wy),w(cF),w(Ay),w(bF),f&&t(EUe),f&&t(Ad),w(Ly),f&&t(CUe),f&&t(Go),w(yy),w($y),w(FF),w(ky),w(nT),f&&t(wUe),f&&t(xd),w(Sy),f&&t(AUe),f&&t(Oo),w(Ry),w(By),w(lT),w(Iy),w(KT),f&&t(LUe),f&&t(Sd),w(Ny),f&&t(yUe),f&&t(Vo),w(qy),w(Dy),w(e7),w(Gy),w(t7),f&&t(xUe),f&&t(Bd),w(Oy),f&&t($Ue),f&&t(Xo),w(Vy),w(zy),w(n7),w(Wy),w(T7),f&&t(kUe),f&&t(qd),w(Qy),f&&t(SUe),f&&t(zo),w(Uy),w(Jy),w(E7),w(Yy),w(A7),f&&t(RUe),f&&t(Gd),w(Ky),f&&t(PUe),f&&t(Wo),w(Zy),w(ox),w(y7),w(rx),w(k7),f&&t(BUe),f&&t(Xd),w(tx),f&&t(IUe),f&&t(Qo),w(ax),w(sx),w(R7),w(lx),w(I7),f&&t(NUe),f&&t(Qd),w(ix),f&&t(qUe),f&&t(Uo),w(dx),w(fx),w(q7),w(mx),w(H7),f&&t(jUe),f&&t(Jd),w(gx),f&&t(DUe),f&&t(Ho),w(hx),w(_x),w(Y7),w(ux),w(a8),f&&t(GUe),f&&t(Zd),w(bx),f&&t(OUe),f&&t(Jo),w(vx),w(Tx),w(s8),w(Mx),w(b8),f&&t(VUe),f&&t(rc),w(Ex),f&&t(XUe),f&&t(Yo),w(Cx),w(Ax),w(F8),w(Lx),w(C8),f&&t(zUe),f&&t(nc),w(xx),f&&t(WUe),f&&t(Ko),w($x),w(Sx),w(A8),w(Rx),w(R8),f&&t(QUe),f&&t(ic),w(Px),f&&t(UUe),f&&t(Zo),w(Bx),w(Nx),w(B8),w(qx),w(G8),f&&t(HUe),f&&t(fc),w(jx),f&&t(JUe),f&&t(er),w(Dx),w(Ox),w(V8),w(Vx),w(Q8),f&&t(YUe),f&&t(hc),w(zx),f&&t(KUe),f&&t(or),w(Wx),w(Ux),w(H8),w(Hx),w(K8),f&&t(ZUe),f&&t(uc),w(Jx),f&&t(eHe),f&&t(rr),w(Yx),w(Zx),w(e9),w(e$),w(l9),f&&t(oHe),f&&t(Fc),w(o$),f&&t(rHe),f&&t(tr),w(r$),w(a$),w(d9),w(n$),w(m9),f&&t(tHe),f&&t(Ec),w(s$),f&&t(aHe),f&&t(ar),w(l$),w(d$),w(h9),w(c$),w(mM),f&&t(nHe),f&&t(Ac),w(f$),f&&t(sHe),f&&t(nr),w(m$),w(h$),w(hM),w(p$),w(qM),f&&t(lHe),f&&t(xc),w(_$),f&&t(iHe),f&&t(sr),w(u$),w(v$),w(DM),w(F$),w(eE),f&&t(dHe),f&&t(Sc),w(T$),f&&t(cHe),f&&t(lr),w(M$),w(C$),w(rE),w(w$),w(fE),f&&t(fHe),f&&t(Bc),w(A$),f&&t(mHe),f&&t(ir),w(L$),w(x$),w(gE),w($$),w(_E),f&&t(gHe),f&&t(qc),w(S$),f&&t(hHe),f&&t(dr),w(R$),w(B$),w(bE),w(I$),w(jE),f&&t(pHe),f&&t(Gc),w(N$),f&&t(_He),f&&t(cr),w(q$),w(D$),w(GE),w(G$),w(KE),f&&t(uHe),f&&t(Xc),w(O$),f&&t(bHe),f&&t(fr),w(V$),w(z$),w(e4),w(W$),w(L4),f&&t(vHe),f&&t(Qc),w(Q$),f&&t(FHe),f&&t(mr),w(U$),w(J$),w(x4),w(Y$),w(Q4),f&&t(THe),f&&t(Jc),w(K$),f&&t(MHe),f&&t(gr),w(Z$),w(ok),w(H4),w(rk),w(K4),f&&t(EHe),f&&t(Zc),w(ak),f&&t(CHe),f&&t(hr),w(nk),w(lk),w(eC),w(ik),w(rC),f&&t(wHe),f&&t(rf),w(dk),f&&t(AHe),f&&t(pr),w(ck),w(mk),w(aC),w(gk),w(wC),f&&t(LHe),f&&t(nf),w(hk),f&&t(yHe),f&&t(_r),w(pk),w(uk),w(LC),w(bk),w(UC),f&&t(xHe),f&&t(df),w(vk),f&&t($He),f&&t(ur),w(Fk),w(Mk),w(JC),w(Ek),w(KC),f&&t(kHe),f&&t(mf),w(Ck),f&&t(SHe),f&&t(br),w(wk),w(Lk),w(e3),w(yk),w(r3),f&&t(RHe),f&&t(pf),w(xk),f&&t(PHe),f&&t(vr),w($k),w(Sk),w(a3),w(Rk),w(S3),f&&t(BHe),f&&t(bf),w(Pk),f&&t(IHe),f&&t(Fr),w(Bk),w(Nk),w(P3),w(qk),w(z3),f&&t(NHe),f&&t(Tf),w(jk),f&&t(qHe),f&&t(Tr),w(Dk),w(Ok),w(Q3),w(Vk),w(l0),f&&t(jHe),f&&t(Cf),w(Xk),f&&t(DHe),f&&t(Mr),w(zk),w(Qk),w(d0),w(Uk),w(F0),f&&t(GHe),f&&t(Lf),w(Hk),f&&t(OHe),f&&t(Er),w(Jk),w(Kk),w(M0),w(Zk),w(R0),f&&t(VHe),f&&t($f),w(eS),f&&t(XHe),f&&t(Cr),w(oS),w(tS),w(B0),w(aS),w(W0),f&&t(zHe),f&&t(Rf),w(nS),f&&t(WHe),f&&t(wr),w(sS),w(iS),w(U0),w(dS),w(nw),f&&t(QHe),f&&t(If),w(cS),f&&t(UHe),f&&t(Ar),w(fS),w(gS),w(lw),w(hS),w(_w),f&&t(HHe),f&&t(jf),w(pS),f&&t(JHe),f&&t(Lr),w(_S),w(bS),w(bw),w(vS),w(Lw),f&&t(YHe),f&&t(Of),w(FS),f&&t(KHe),f&&t(yr),w(TS),w(ES),w(xw),w(CS),w(kw),f&&t(ZHe),f&&t(zf),w(wS),f&&t(eJe),f&&t(xr),w(AS),w(yS),w(Rw),w(xS),w(Iw),f&&t(oJe),f&&t(Uf),w(kS),f&&t(rJe),f&&t($r),w(SS),w(PS),w(qw),w(BS),w(Dw)}}}const cna={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function fna($){return nta(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class bna extends ota{constructor(g){super();rta(this,g,fna,dna,tta,{})}}export{bna as default,cna as metadata};
