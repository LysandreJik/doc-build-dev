import{S as Rra,i as Pra,s as Bra,e as a,k as l,w as F,t as o,M as Ira,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Nra,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Tft}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function qra($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,dL,om,Oe,Qe,zi,Xn,cL,zn,Wn,fL,Wi,Qn,mL,Qi,rm,ja;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),em=o("model_type"),ft=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),dL=o(")."),om=l(),Oe=a("p"),Qe=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),cL=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),fL=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),mL=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),rm=o("NewModelConfig"),ja=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var tP=s(p);m=r(tP,"NewModelConfig"),tP.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var aP=s(Oi);em=r(aP,"model_type"),aP.forEach(t),ft=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var nP=s(Vi);Xi=r(nP,'"new-model"'),nP.forEach(t),dL=r(Ae,")."),Ae.forEach(t),om=i(Ue),Oe=n(Ue,"P",{});var Lo=s(Oe);Qe=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),cL=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var sP=s(zn);Wn=r(sP,"PreTrainedModel"),sP.forEach(t),fL=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var tm=s(Wi);Qn=r(tm,"config_class"),tm.forEach(t),mL=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var lP=s(Qi);rm=r(lP,"NewModelConfig"),lP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,em),e(g,ft),e(g,Vi),e(Vi,Xi),e(g,dL),b(Ue,om,Ae),b(Ue,Oe,Ae),e(Oe,Qe),e(Oe,zi),e(zi,Xn),e(Oe,cL),e(Oe,zn),e(zn,Wn),e(Oe,fL),e(Oe,Wi),e(Wi,Qn),e(Oe,mL),e(Oe,Qi),e(Qi,rm),e(Oe,ja)},d(Ue){Ue&&t(g),Ue&&t(om),Ue&&t(Oe)}}}function jra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gra($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Ora($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vra($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Xra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ura($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gaa($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,dL,om,Oe,Qe,zi,Xn,cL,zn,Wn,fL,Wi,Qn,mL,Qi,rm,ja,Ue,Ae,tP,Ui,aP,nP,Lo,Da,sP,tm,lP,cKe,DQe,Hi,am,Ise,gL,fKe,Nse,mKe,GQe,Un,gKe,qse,hKe,pKe,jse,_Ke,uKe,OQe,hL,VQe,iP,bKe,XQe,nm,zQe,Ji,sm,Dse,pL,vKe,Gse,FKe,WQe,yo,_L,TKe,uL,MKe,dP,EKe,CKe,wKe,bL,AKe,Ose,LKe,yKe,xKe,kr,vL,$Ke,Vse,kKe,SKe,Yi,RKe,Xse,PKe,BKe,zse,IKe,NKe,qKe,A,lm,Wse,jKe,DKe,cP,GKe,OKe,VKe,im,Qse,XKe,zKe,fP,WKe,QKe,UKe,dm,Use,HKe,JKe,mP,YKe,KKe,ZKe,cm,Hse,eZe,oZe,gP,rZe,tZe,aZe,fm,Jse,nZe,sZe,hP,lZe,iZe,dZe,mm,Yse,cZe,fZe,pP,mZe,gZe,hZe,gm,Kse,pZe,_Ze,_P,uZe,bZe,vZe,hm,Zse,FZe,TZe,uP,MZe,EZe,CZe,pm,ele,wZe,AZe,bP,LZe,yZe,xZe,_m,ole,$Ze,kZe,vP,SZe,RZe,PZe,um,rle,BZe,IZe,FP,NZe,qZe,jZe,bm,tle,DZe,GZe,TP,OZe,VZe,XZe,vm,ale,zZe,WZe,MP,QZe,UZe,HZe,Fm,nle,JZe,YZe,EP,KZe,ZZe,eeo,Tm,sle,oeo,reo,CP,teo,aeo,neo,Mm,lle,seo,leo,wP,ieo,deo,ceo,Em,ile,feo,meo,AP,geo,heo,peo,Cm,dle,_eo,ueo,LP,beo,veo,Feo,wm,cle,Teo,Meo,yP,Eeo,Ceo,weo,Am,fle,Aeo,Leo,xP,yeo,xeo,$eo,Lm,mle,keo,Seo,$P,Reo,Peo,Beo,ym,gle,Ieo,Neo,kP,qeo,jeo,Deo,xm,hle,Geo,Oeo,SP,Veo,Xeo,zeo,$m,ple,Weo,Qeo,RP,Ueo,Heo,Jeo,km,_le,Yeo,Keo,PP,Zeo,eoo,ooo,Sm,ule,roo,too,BP,aoo,noo,soo,Rm,ble,loo,ioo,IP,doo,coo,foo,Pm,vle,moo,goo,NP,hoo,poo,_oo,Bm,Fle,uoo,boo,qP,voo,Foo,Too,Im,Tle,Moo,Eoo,jP,Coo,woo,Aoo,Nm,Mle,Loo,yoo,DP,xoo,$oo,koo,qm,Ele,Soo,Roo,GP,Poo,Boo,Ioo,jm,Cle,Noo,qoo,OP,joo,Doo,Goo,Dm,wle,Ooo,Voo,VP,Xoo,zoo,Woo,Gm,Ale,Qoo,Uoo,XP,Hoo,Joo,Yoo,Om,Lle,Koo,Zoo,zP,ero,oro,rro,Vm,yle,tro,aro,WP,nro,sro,lro,Xm,xle,iro,dro,QP,cro,fro,mro,zm,$le,gro,hro,UP,pro,_ro,uro,Wm,kle,bro,vro,HP,Fro,Tro,Mro,Qm,Sle,Ero,Cro,JP,wro,Aro,Lro,Um,Rle,yro,xro,YP,$ro,kro,Sro,Hm,Ple,Rro,Pro,KP,Bro,Iro,Nro,Jm,Ble,qro,jro,ZP,Dro,Gro,Oro,Ym,Ile,Vro,Xro,eB,zro,Wro,Qro,Km,Nle,Uro,Hro,oB,Jro,Yro,Kro,Zm,qle,Zro,eto,rB,oto,rto,tto,eg,jle,ato,nto,tB,sto,lto,ito,og,Dle,dto,cto,aB,fto,mto,gto,rg,Gle,hto,pto,nB,_to,uto,bto,tg,Ole,vto,Fto,sB,Tto,Mto,Eto,ag,Vle,Cto,wto,lB,Ato,Lto,yto,ng,Xle,xto,$to,iB,kto,Sto,Rto,sg,zle,Pto,Bto,dB,Ito,Nto,qto,lg,Wle,jto,Dto,cB,Gto,Oto,Vto,ig,Qle,Xto,zto,fB,Wto,Qto,Uto,dg,Ule,Hto,Jto,mB,Yto,Kto,Zto,cg,Hle,eao,oao,gB,rao,tao,aao,fg,Jle,nao,sao,hB,lao,iao,dao,mg,Yle,cao,fao,pB,mao,gao,hao,gg,Kle,pao,_ao,_B,uao,bao,vao,hg,Zle,Fao,Tao,uB,Mao,Eao,Cao,pg,eie,wao,Aao,bB,Lao,yao,xao,_g,oie,$ao,kao,vB,Sao,Rao,Pao,ug,rie,Bao,Iao,FB,Nao,qao,jao,bg,tie,Dao,Gao,TB,Oao,Vao,Xao,vg,aie,zao,Wao,MB,Qao,Uao,Hao,Fg,nie,Jao,Yao,EB,Kao,Zao,eno,Tg,sie,ono,rno,CB,tno,ano,nno,Mg,lie,sno,lno,wB,ino,dno,cno,Eg,iie,fno,mno,AB,gno,hno,pno,Cg,die,_no,uno,LB,bno,vno,Fno,wg,cie,Tno,Mno,yB,Eno,Cno,wno,Ag,fie,Ano,Lno,xB,yno,xno,$no,Lg,mie,kno,Sno,$B,Rno,Pno,Bno,yg,gie,Ino,Nno,kB,qno,jno,Dno,xg,hie,Gno,Ono,SB,Vno,Xno,zno,$g,pie,Wno,Qno,RB,Uno,Hno,Jno,kg,_ie,Yno,Kno,PB,Zno,eso,oso,Sg,uie,rso,tso,BB,aso,nso,sso,Rg,bie,lso,iso,IB,dso,cso,fso,Pg,vie,mso,gso,NB,hso,pso,_so,Bg,Fie,uso,bso,qB,vso,Fso,Tso,Ig,Tie,Mso,Eso,jB,Cso,wso,Aso,Ng,Mie,Lso,yso,DB,xso,$so,kso,qg,Eie,Sso,Rso,GB,Pso,Bso,Iso,jg,Cie,Nso,qso,OB,jso,Dso,Gso,Dg,wie,Oso,Vso,VB,Xso,zso,Wso,Gg,Aie,Qso,Uso,XB,Hso,Jso,Yso,Og,Lie,Kso,Zso,zB,elo,olo,rlo,Vg,yie,tlo,alo,WB,nlo,slo,llo,Xg,xie,ilo,dlo,QB,clo,flo,mlo,zg,$ie,glo,hlo,UB,plo,_lo,ulo,Wg,kie,blo,vlo,HB,Flo,Tlo,Mlo,Qg,Sie,Elo,Clo,JB,wlo,Alo,Llo,Ug,Rie,ylo,xlo,YB,$lo,klo,Slo,Hg,Pie,Rlo,Plo,KB,Blo,Ilo,Nlo,Jg,Bie,qlo,jlo,ZB,Dlo,Glo,Olo,Yg,Iie,Vlo,Xlo,eI,zlo,Wlo,Qlo,Kg,Nie,Ulo,Hlo,oI,Jlo,Ylo,Klo,Zg,qie,Zlo,eio,rI,oio,rio,tio,eh,jie,aio,nio,tI,sio,lio,iio,oh,Die,dio,cio,aI,fio,mio,gio,rh,Gie,hio,pio,nI,_io,uio,bio,th,Oie,vio,Fio,sI,Tio,Mio,Eio,ah,Vie,Cio,wio,lI,Aio,Lio,yio,nh,Xie,xio,$io,iI,kio,Sio,Rio,sh,zie,Pio,Bio,dI,Iio,Nio,qio,lh,Wie,jio,Dio,cI,Gio,Oio,Vio,ih,Qie,Xio,zio,fI,Wio,Qio,Uio,dh,Uie,Hio,Jio,mI,Yio,Kio,Zio,ch,Hie,edo,odo,gI,rdo,tdo,ado,fh,Jie,ndo,sdo,hI,ldo,ido,ddo,mh,Yie,cdo,fdo,pI,mdo,gdo,hdo,gh,Kie,pdo,_do,_I,udo,bdo,vdo,hh,Zie,Fdo,Tdo,uI,Mdo,Edo,Cdo,ph,ede,wdo,Ado,bI,Ldo,ydo,xdo,_h,ode,$do,kdo,vI,Sdo,Rdo,Pdo,uh,rde,Bdo,Ido,FI,Ndo,qdo,jdo,bh,tde,Ddo,Gdo,TI,Odo,Vdo,Xdo,vh,ade,zdo,Wdo,MI,Qdo,Udo,Hdo,Fh,nde,Jdo,Ydo,EI,Kdo,Zdo,eco,Th,oco,Mh,FL,rco,sde,tco,QQe,Ki,Eh,lde,TL,aco,ide,nco,UQe,xo,ML,sco,EL,lco,CI,ico,dco,cco,CL,fco,dde,mco,gco,hco,Sr,wL,pco,cde,_co,uco,Ga,bco,fde,vco,Fco,mde,Tco,Mco,gde,Eco,Cco,wco,k,Hn,hde,Aco,Lco,wI,yco,xco,AI,$co,kco,Sco,Jn,pde,Rco,Pco,LI,Bco,Ico,yI,Nco,qco,jco,Yn,_de,Dco,Gco,xI,Oco,Vco,$I,Xco,zco,Wco,Ch,ude,Qco,Uco,kI,Hco,Jco,Yco,Kn,bde,Kco,Zco,SI,efo,ofo,RI,rfo,tfo,afo,wh,vde,nfo,sfo,PI,lfo,ifo,dfo,Ah,Fde,cfo,ffo,BI,mfo,gfo,hfo,Lh,Tde,pfo,_fo,II,ufo,bfo,vfo,Zn,Mde,Ffo,Tfo,NI,Mfo,Efo,qI,Cfo,wfo,Afo,es,Ede,Lfo,yfo,jI,xfo,$fo,DI,kfo,Sfo,Rfo,os,Cde,Pfo,Bfo,GI,Ifo,Nfo,OI,qfo,jfo,Dfo,yh,wde,Gfo,Ofo,VI,Vfo,Xfo,zfo,xh,Ade,Wfo,Qfo,XI,Ufo,Hfo,Jfo,$h,Lde,Yfo,Kfo,zI,Zfo,emo,omo,rs,yde,rmo,tmo,WI,amo,nmo,QI,smo,lmo,imo,kh,xde,dmo,cmo,UI,fmo,mmo,gmo,ts,$de,hmo,pmo,HI,_mo,umo,JI,bmo,vmo,Fmo,as,kde,Tmo,Mmo,YI,Emo,Cmo,KI,wmo,Amo,Lmo,ns,Sde,ymo,xmo,ZI,$mo,kmo,eN,Smo,Rmo,Pmo,ss,Rde,Bmo,Imo,oN,Nmo,qmo,rN,jmo,Dmo,Gmo,Sh,Pde,Omo,Vmo,tN,Xmo,zmo,Wmo,ls,Bde,Qmo,Umo,aN,Hmo,Jmo,nN,Ymo,Kmo,Zmo,is,Ide,ego,ogo,sN,rgo,tgo,lN,ago,ngo,sgo,ds,Nde,lgo,igo,iN,dgo,cgo,dN,fgo,mgo,ggo,cs,qde,hgo,pgo,cN,_go,ugo,fN,bgo,vgo,Fgo,fs,jde,Tgo,Mgo,mN,Ego,Cgo,gN,wgo,Ago,Lgo,ms,Dde,ygo,xgo,hN,$go,kgo,pN,Sgo,Rgo,Pgo,Rh,Gde,Bgo,Igo,_N,Ngo,qgo,jgo,gs,Ode,Dgo,Ggo,uN,Ogo,Vgo,bN,Xgo,zgo,Wgo,Ph,Vde,Qgo,Ugo,vN,Hgo,Jgo,Ygo,hs,Xde,Kgo,Zgo,FN,eho,oho,TN,rho,tho,aho,ps,zde,nho,sho,MN,lho,iho,EN,dho,cho,fho,_s,Wde,mho,gho,CN,hho,pho,wN,_ho,uho,bho,Bh,Qde,vho,Fho,AN,Tho,Mho,Eho,us,Ude,Cho,who,LN,Aho,Lho,yN,yho,xho,$ho,bs,Hde,kho,Sho,xN,Rho,Pho,$N,Bho,Iho,Nho,vs,Jde,qho,jho,kN,Dho,Gho,SN,Oho,Vho,Xho,Ih,Yde,zho,Who,RN,Qho,Uho,Hho,Fs,Kde,Jho,Yho,PN,Kho,Zho,BN,epo,opo,rpo,Ts,Zde,tpo,apo,IN,npo,spo,NN,lpo,ipo,dpo,Ms,ece,cpo,fpo,qN,mpo,gpo,jN,hpo,ppo,_po,Es,oce,upo,bpo,DN,vpo,Fpo,GN,Tpo,Mpo,Epo,Cs,rce,Cpo,wpo,ON,Apo,Lpo,VN,ypo,xpo,$po,ws,tce,kpo,Spo,XN,Rpo,Ppo,zN,Bpo,Ipo,Npo,As,ace,qpo,jpo,WN,Dpo,Gpo,QN,Opo,Vpo,Xpo,Ls,nce,zpo,Wpo,UN,Qpo,Upo,HN,Hpo,Jpo,Ypo,Nh,sce,Kpo,Zpo,JN,e_o,o_o,r_o,ys,lce,t_o,a_o,YN,n_o,s_o,KN,l_o,i_o,d_o,qh,ice,c_o,f_o,ZN,m_o,g_o,h_o,jh,dce,p_o,__o,eq,u_o,b_o,v_o,xs,cce,F_o,T_o,oq,M_o,E_o,rq,C_o,w_o,A_o,$s,fce,L_o,y_o,tq,x_o,$_o,aq,k_o,S_o,R_o,ks,mce,P_o,B_o,nq,I_o,N_o,sq,q_o,j_o,D_o,Dh,gce,G_o,O_o,lq,V_o,X_o,z_o,Ss,hce,W_o,Q_o,iq,U_o,H_o,dq,J_o,Y_o,K_o,Rs,pce,Z_o,euo,cq,ouo,ruo,fq,tuo,auo,nuo,Ps,_ce,suo,luo,mq,iuo,duo,gq,cuo,fuo,muo,Bs,uce,guo,huo,hq,puo,_uo,pq,uuo,buo,vuo,Is,bce,Fuo,Tuo,_q,Muo,Euo,uq,Cuo,wuo,Auo,Ns,vce,Luo,yuo,bq,xuo,$uo,vq,kuo,Suo,Ruo,qs,Fce,Puo,Buo,Fq,Iuo,Nuo,Tq,quo,juo,Duo,js,Tce,Guo,Ouo,Mq,Vuo,Xuo,Eq,zuo,Wuo,Quo,Gh,Mce,Uuo,Huo,Cq,Juo,Yuo,Kuo,Ds,Ece,Zuo,e1o,wq,o1o,r1o,Aq,t1o,a1o,n1o,Gs,Cce,s1o,l1o,Lq,i1o,d1o,yq,c1o,f1o,m1o,Oh,wce,g1o,h1o,xq,p1o,_1o,u1o,Vh,Ace,b1o,v1o,$q,F1o,T1o,M1o,Xh,Lce,E1o,C1o,kq,w1o,A1o,L1o,zh,yce,y1o,x1o,Sq,$1o,k1o,S1o,Os,xce,R1o,P1o,Rq,B1o,I1o,Pq,N1o,q1o,j1o,Wh,$ce,D1o,G1o,Bq,O1o,V1o,X1o,Vs,kce,z1o,W1o,Iq,Q1o,U1o,Nq,H1o,J1o,Y1o,Xs,Sce,K1o,Z1o,qq,e2o,o2o,jq,r2o,t2o,a2o,zs,Rce,n2o,s2o,Dq,l2o,i2o,Gq,d2o,c2o,f2o,Ws,Pce,m2o,g2o,Oq,h2o,p2o,Vq,_2o,u2o,b2o,Qs,Bce,v2o,F2o,Xq,T2o,M2o,zq,E2o,C2o,w2o,Us,Ice,A2o,L2o,Wq,y2o,x2o,Qq,$2o,k2o,S2o,Qh,Nce,R2o,P2o,Uq,B2o,I2o,N2o,Uh,qce,q2o,j2o,Hq,D2o,G2o,O2o,Hs,jce,V2o,X2o,Jq,z2o,W2o,Yq,Q2o,U2o,H2o,Js,Dce,J2o,Y2o,Kq,K2o,Z2o,Zq,ebo,obo,rbo,Ys,Gce,tbo,abo,ej,nbo,sbo,oj,lbo,ibo,dbo,Hh,Oce,cbo,fbo,rj,mbo,gbo,hbo,Jh,Vce,pbo,_bo,tj,ubo,bbo,vbo,Yh,Xce,Fbo,Tbo,aj,Mbo,Ebo,Cbo,Ks,zce,wbo,Abo,nj,Lbo,ybo,sj,xbo,$bo,kbo,Zs,Wce,Sbo,Rbo,lj,Pbo,Bbo,ij,Ibo,Nbo,qbo,Kh,Qce,jbo,Dbo,dj,Gbo,Obo,Vbo,Zh,Uce,Xbo,zbo,cj,Wbo,Qbo,Ubo,ep,Hce,Hbo,Jbo,fj,Ybo,Kbo,Zbo,el,Jce,evo,ovo,mj,rvo,tvo,gj,avo,nvo,svo,op,Yce,lvo,ivo,hj,dvo,cvo,fvo,rp,Kce,mvo,gvo,pj,hvo,pvo,_vo,ol,Zce,uvo,bvo,_j,vvo,Fvo,uj,Tvo,Mvo,Evo,rl,efe,Cvo,wvo,bj,Avo,Lvo,vj,yvo,xvo,$vo,tl,ofe,kvo,Svo,Fj,Rvo,Pvo,Tj,Bvo,Ivo,Nvo,al,rfe,qvo,jvo,Mj,Dvo,Gvo,Ej,Ovo,Vvo,Xvo,tp,zvo,ap,AL,Wvo,tfe,Qvo,HQe,Zi,np,afe,LL,Uvo,nfe,Hvo,JQe,$o,yL,Jvo,xL,Yvo,Cj,Kvo,Zvo,e6o,$L,o6o,sfe,r6o,t6o,a6o,He,kL,n6o,lfe,s6o,l6o,Oa,i6o,ife,d6o,c6o,dfe,f6o,m6o,cfe,g6o,h6o,p6o,Q,sp,ffe,_6o,u6o,wj,b6o,v6o,F6o,lp,mfe,T6o,M6o,Aj,E6o,C6o,w6o,ip,gfe,A6o,L6o,Lj,y6o,x6o,$6o,dp,hfe,k6o,S6o,yj,R6o,P6o,B6o,cp,pfe,I6o,N6o,xj,q6o,j6o,D6o,fp,_fe,G6o,O6o,$j,V6o,X6o,z6o,mp,ufe,W6o,Q6o,kj,U6o,H6o,J6o,gp,bfe,Y6o,K6o,Sj,Z6o,eFo,oFo,hp,vfe,rFo,tFo,Rj,aFo,nFo,sFo,pp,Ffe,lFo,iFo,Pj,dFo,cFo,fFo,_p,Tfe,mFo,gFo,Bj,hFo,pFo,_Fo,up,Mfe,uFo,bFo,Ij,vFo,FFo,TFo,bp,Efe,MFo,EFo,Nj,CFo,wFo,AFo,vp,Cfe,LFo,yFo,qj,xFo,$Fo,kFo,Fp,wfe,SFo,RFo,jj,PFo,BFo,IFo,Tp,Afe,NFo,qFo,Dj,jFo,DFo,GFo,Mp,Lfe,OFo,VFo,Gj,XFo,zFo,WFo,Ep,yfe,QFo,UFo,Oj,HFo,JFo,YFo,Cp,xfe,KFo,ZFo,Vj,eTo,oTo,rTo,wp,$fe,tTo,aTo,Xj,nTo,sTo,lTo,Ap,kfe,iTo,dTo,zj,cTo,fTo,mTo,Lp,Sfe,gTo,hTo,Wj,pTo,_To,uTo,yp,Rfe,bTo,vTo,Qj,FTo,TTo,MTo,xp,Pfe,ETo,CTo,Uj,wTo,ATo,LTo,$p,Bfe,yTo,xTo,Hj,$To,kTo,STo,kp,Ife,RTo,PTo,Jj,BTo,ITo,NTo,Sp,Nfe,qTo,jTo,Yj,DTo,GTo,OTo,Rp,qfe,VTo,XTo,Kj,zTo,WTo,QTo,Pp,jfe,UTo,HTo,Zj,JTo,YTo,KTo,Bp,Dfe,ZTo,e7o,eD,o7o,r7o,t7o,Ip,Gfe,a7o,n7o,oD,s7o,l7o,i7o,Np,Ofe,d7o,c7o,rD,f7o,m7o,g7o,qp,Vfe,h7o,p7o,tD,_7o,u7o,b7o,jp,Xfe,v7o,F7o,aD,T7o,M7o,E7o,Dp,zfe,C7o,w7o,nD,A7o,L7o,y7o,Gp,Wfe,x7o,$7o,sD,k7o,S7o,R7o,Op,Qfe,P7o,B7o,lD,I7o,N7o,q7o,Vp,Ufe,j7o,D7o,iD,G7o,O7o,V7o,Xp,X7o,zp,z7o,Wp,SL,W7o,Hfe,Q7o,YQe,ed,Qp,Jfe,RL,U7o,Yfe,H7o,KQe,ko,PL,J7o,BL,Y7o,dD,K7o,Z7o,e8o,IL,o8o,Kfe,r8o,t8o,a8o,Je,NL,n8o,Zfe,s8o,l8o,od,i8o,eme,d8o,c8o,ome,f8o,m8o,g8o,ie,Up,rme,h8o,p8o,cD,_8o,u8o,b8o,Hp,tme,v8o,F8o,fD,T8o,M8o,E8o,Jp,ame,C8o,w8o,mD,A8o,L8o,y8o,Yp,nme,x8o,$8o,gD,k8o,S8o,R8o,Kp,sme,P8o,B8o,hD,I8o,N8o,q8o,Zp,lme,j8o,D8o,pD,G8o,O8o,V8o,e_,ime,X8o,z8o,_D,W8o,Q8o,U8o,o_,dme,H8o,J8o,uD,Y8o,K8o,Z8o,r_,cme,e9o,o9o,bD,r9o,t9o,a9o,t_,fme,n9o,s9o,vD,l9o,i9o,d9o,a_,mme,c9o,f9o,FD,m9o,g9o,h9o,n_,gme,p9o,_9o,TD,u9o,b9o,v9o,s_,hme,F9o,T9o,MD,M9o,E9o,C9o,l_,pme,w9o,A9o,ED,L9o,y9o,x9o,i_,_me,$9o,k9o,CD,S9o,R9o,P9o,d_,ume,B9o,I9o,wD,N9o,q9o,j9o,c_,bme,D9o,G9o,AD,O9o,V9o,X9o,f_,vme,z9o,W9o,LD,Q9o,U9o,H9o,m_,Fme,J9o,Y9o,yD,K9o,Z9o,eMo,g_,Tme,oMo,rMo,xD,tMo,aMo,nMo,h_,sMo,p_,lMo,__,qL,iMo,Mme,dMo,ZQe,rd,u_,Eme,jL,cMo,Cme,fMo,eUe,So,DL,mMo,td,gMo,$D,hMo,pMo,kD,_Mo,uMo,bMo,GL,vMo,wme,FMo,TMo,MMo,mt,OL,EMo,Ame,CMo,wMo,ad,AMo,Lme,LMo,yMo,SD,xMo,$Mo,kMo,b_,SMo,Ye,VL,RMo,yme,PMo,BMo,Va,IMo,xme,NMo,qMo,$me,jMo,DMo,kme,GMo,OMo,VMo,y,v_,Sme,XMo,zMo,RD,WMo,QMo,UMo,F_,Rme,HMo,JMo,PD,YMo,KMo,ZMo,T_,Pme,eEo,oEo,BD,rEo,tEo,aEo,M_,Bme,nEo,sEo,ID,lEo,iEo,dEo,E_,Ime,cEo,fEo,ND,mEo,gEo,hEo,C_,Nme,pEo,_Eo,qD,uEo,bEo,vEo,w_,qme,FEo,TEo,jD,MEo,EEo,CEo,A_,jme,wEo,AEo,DD,LEo,yEo,xEo,L_,Dme,$Eo,kEo,GD,SEo,REo,PEo,y_,Gme,BEo,IEo,OD,NEo,qEo,jEo,x_,Ome,DEo,GEo,VD,OEo,VEo,XEo,$_,Vme,zEo,WEo,XD,QEo,UEo,HEo,k_,Xme,JEo,YEo,zD,KEo,ZEo,e4o,S_,zme,o4o,r4o,WD,t4o,a4o,n4o,R_,Wme,s4o,l4o,QD,i4o,d4o,c4o,P_,Qme,f4o,m4o,UD,g4o,h4o,p4o,B_,Ume,_4o,u4o,HD,b4o,v4o,F4o,I_,Hme,T4o,M4o,JD,E4o,C4o,w4o,N_,Jme,A4o,L4o,YD,y4o,x4o,$4o,q_,Yme,k4o,S4o,KD,R4o,P4o,B4o,j_,Kme,I4o,N4o,ZD,q4o,j4o,D4o,D_,Zme,G4o,O4o,eG,V4o,X4o,z4o,G_,ege,W4o,Q4o,oG,U4o,H4o,J4o,O_,oge,Y4o,K4o,rG,Z4o,eCo,oCo,V_,rge,rCo,tCo,tG,aCo,nCo,sCo,X_,tge,lCo,iCo,aG,dCo,cCo,fCo,z_,age,mCo,gCo,nG,hCo,pCo,_Co,W_,nge,uCo,bCo,sG,vCo,FCo,TCo,Q_,sge,MCo,ECo,lG,CCo,wCo,ACo,U_,lge,LCo,yCo,iG,xCo,$Co,kCo,H_,ige,SCo,RCo,dG,PCo,BCo,ICo,J_,dge,NCo,qCo,cG,jCo,DCo,GCo,Y_,cge,OCo,VCo,fG,XCo,zCo,WCo,K_,fge,QCo,UCo,mG,HCo,JCo,YCo,Z_,mge,KCo,ZCo,gG,e3o,o3o,r3o,nl,gge,t3o,a3o,hG,n3o,s3o,pG,l3o,i3o,d3o,eu,hge,c3o,f3o,_G,m3o,g3o,h3o,ou,pge,p3o,_3o,uG,u3o,b3o,v3o,ru,_ge,F3o,T3o,bG,M3o,E3o,C3o,tu,uge,w3o,A3o,vG,L3o,y3o,x3o,au,bge,$3o,k3o,FG,S3o,R3o,P3o,nu,vge,B3o,I3o,TG,N3o,q3o,j3o,su,Fge,D3o,G3o,MG,O3o,V3o,X3o,lu,Tge,z3o,W3o,EG,Q3o,U3o,H3o,iu,Mge,J3o,Y3o,CG,K3o,Z3o,e5o,du,Ege,o5o,r5o,wG,t5o,a5o,n5o,cu,Cge,s5o,l5o,AG,i5o,d5o,c5o,fu,wge,f5o,m5o,LG,g5o,h5o,p5o,mu,Age,_5o,u5o,yG,b5o,v5o,F5o,gu,Lge,T5o,M5o,xG,E5o,C5o,w5o,hu,yge,A5o,L5o,$G,y5o,x5o,$5o,pu,xge,k5o,S5o,kG,R5o,P5o,B5o,_u,$ge,I5o,N5o,SG,q5o,j5o,D5o,uu,kge,G5o,O5o,RG,V5o,X5o,z5o,bu,Sge,W5o,Q5o,PG,U5o,H5o,J5o,vu,Rge,Y5o,K5o,BG,Z5o,e0o,o0o,Fu,Pge,r0o,t0o,IG,a0o,n0o,s0o,Tu,Bge,l0o,i0o,NG,d0o,c0o,f0o,Mu,Ige,m0o,g0o,qG,h0o,p0o,_0o,Eu,Nge,u0o,b0o,jG,v0o,F0o,T0o,Cu,qge,M0o,E0o,DG,C0o,w0o,A0o,wu,jge,L0o,y0o,GG,x0o,$0o,k0o,Au,Dge,S0o,R0o,OG,P0o,B0o,I0o,Lu,Gge,N0o,q0o,VG,j0o,D0o,G0o,yu,Oge,O0o,V0o,XG,X0o,z0o,W0o,xu,Vge,Q0o,U0o,zG,H0o,J0o,Y0o,$u,Xge,K0o,Z0o,WG,ewo,owo,rwo,ku,zge,two,awo,QG,nwo,swo,lwo,Su,Wge,iwo,dwo,UG,cwo,fwo,mwo,Ru,Qge,gwo,hwo,HG,pwo,_wo,uwo,Pu,Uge,bwo,vwo,JG,Fwo,Two,Mwo,Bu,Hge,Ewo,Cwo,YG,wwo,Awo,Lwo,Iu,Jge,ywo,xwo,KG,$wo,kwo,Swo,Nu,Yge,Rwo,Pwo,ZG,Bwo,Iwo,Nwo,qu,Kge,qwo,jwo,eO,Dwo,Gwo,Owo,ju,Zge,Vwo,Xwo,oO,zwo,Wwo,Qwo,Du,ehe,Uwo,Hwo,rO,Jwo,Ywo,Kwo,Gu,ohe,Zwo,eAo,tO,oAo,rAo,tAo,Ou,rhe,aAo,nAo,aO,sAo,lAo,iAo,Vu,the,dAo,cAo,nO,fAo,mAo,gAo,Xu,ahe,hAo,pAo,sO,_Ao,uAo,bAo,zu,nhe,vAo,FAo,lO,TAo,MAo,EAo,Wu,she,CAo,wAo,iO,AAo,LAo,yAo,Qu,lhe,xAo,$Ao,dO,kAo,SAo,RAo,Uu,ihe,PAo,BAo,cO,IAo,NAo,qAo,Hu,dhe,jAo,DAo,fO,GAo,OAo,VAo,Ju,che,XAo,zAo,mO,WAo,QAo,UAo,Yu,fhe,HAo,JAo,gO,YAo,KAo,ZAo,Ku,mhe,eLo,oLo,hO,rLo,tLo,aLo,Zu,ghe,nLo,sLo,pO,lLo,iLo,dLo,e1,hhe,cLo,fLo,_O,mLo,gLo,hLo,o1,phe,pLo,_Lo,uO,uLo,bLo,vLo,r1,_he,FLo,TLo,bO,MLo,ELo,CLo,t1,uhe,wLo,ALo,vO,LLo,yLo,xLo,a1,bhe,$Lo,kLo,FO,SLo,RLo,PLo,n1,vhe,BLo,ILo,TO,NLo,qLo,jLo,s1,Fhe,DLo,GLo,MO,OLo,VLo,XLo,l1,The,zLo,WLo,EO,QLo,ULo,HLo,i1,Mhe,JLo,YLo,CO,KLo,ZLo,eyo,d1,Ehe,oyo,ryo,wO,tyo,ayo,nyo,c1,Che,syo,lyo,AO,iyo,dyo,cyo,f1,whe,fyo,myo,LO,gyo,hyo,pyo,m1,Ahe,_yo,uyo,yO,byo,vyo,Fyo,g1,Lhe,Tyo,Myo,xO,Eyo,Cyo,wyo,h1,yhe,Ayo,Lyo,$O,yyo,xyo,$yo,p1,xhe,kyo,Syo,kO,Ryo,Pyo,Byo,_1,$he,Iyo,Nyo,SO,qyo,jyo,Dyo,u1,khe,Gyo,Oyo,RO,Vyo,Xyo,zyo,b1,She,Wyo,Qyo,PO,Uyo,Hyo,Jyo,v1,Rhe,Yyo,Kyo,BO,Zyo,exo,oxo,F1,Phe,rxo,txo,IO,axo,nxo,sxo,T1,Bhe,lxo,ixo,NO,dxo,cxo,fxo,M1,Ihe,mxo,gxo,qO,hxo,pxo,_xo,E1,Nhe,uxo,bxo,jO,vxo,Fxo,Txo,C1,qhe,Mxo,Exo,DO,Cxo,wxo,Axo,w1,jhe,Lxo,yxo,GO,xxo,$xo,kxo,A1,Sxo,Dhe,Rxo,Pxo,Ghe,Bxo,Ixo,L1,oUe,nd,y1,Ohe,XL,Nxo,Vhe,qxo,rUe,Ro,zL,jxo,sd,Dxo,OO,Gxo,Oxo,VO,Vxo,Xxo,zxo,WL,Wxo,Xhe,Qxo,Uxo,Hxo,gt,QL,Jxo,zhe,Yxo,Kxo,ld,Zxo,Whe,e$o,o$o,XO,r$o,t$o,a$o,x1,n$o,Ke,UL,s$o,Qhe,l$o,i$o,Xa,d$o,Uhe,c$o,f$o,Hhe,m$o,g$o,Jhe,h$o,p$o,_$o,G,$1,Yhe,u$o,b$o,zO,v$o,F$o,T$o,k1,Khe,M$o,E$o,WO,C$o,w$o,A$o,S1,Zhe,L$o,y$o,QO,x$o,$$o,k$o,R1,epe,S$o,R$o,UO,P$o,B$o,I$o,P1,ope,N$o,q$o,HO,j$o,D$o,G$o,B1,rpe,O$o,V$o,JO,X$o,z$o,W$o,I1,tpe,Q$o,U$o,YO,H$o,J$o,Y$o,N1,ape,K$o,Z$o,KO,eko,oko,rko,q1,npe,tko,ako,ZO,nko,sko,lko,j1,spe,iko,dko,eV,cko,fko,mko,D1,lpe,gko,hko,oV,pko,_ko,uko,G1,ipe,bko,vko,rV,Fko,Tko,Mko,O1,dpe,Eko,Cko,tV,wko,Ako,Lko,V1,cpe,yko,xko,aV,$ko,kko,Sko,X1,fpe,Rko,Pko,nV,Bko,Iko,Nko,z1,mpe,qko,jko,sV,Dko,Gko,Oko,W1,gpe,Vko,Xko,lV,zko,Wko,Qko,Q1,hpe,Uko,Hko,iV,Jko,Yko,Kko,U1,ppe,Zko,eSo,dV,oSo,rSo,tSo,H1,_pe,aSo,nSo,cV,sSo,lSo,iSo,J1,upe,dSo,cSo,fV,fSo,mSo,gSo,Y1,bpe,hSo,pSo,mV,_So,uSo,bSo,K1,vpe,vSo,FSo,gV,TSo,MSo,ESo,Z1,Fpe,CSo,wSo,hV,ASo,LSo,ySo,e2,Tpe,xSo,$So,pV,kSo,SSo,RSo,o2,Mpe,PSo,BSo,_V,ISo,NSo,qSo,r2,Epe,jSo,DSo,uV,GSo,OSo,VSo,t2,Cpe,XSo,zSo,bV,WSo,QSo,USo,a2,wpe,HSo,JSo,vV,YSo,KSo,ZSo,n2,Ape,eRo,oRo,FV,rRo,tRo,aRo,s2,Lpe,nRo,sRo,TV,lRo,iRo,dRo,l2,ype,cRo,fRo,MV,mRo,gRo,hRo,i2,xpe,pRo,_Ro,EV,uRo,bRo,vRo,d2,$pe,FRo,TRo,CV,MRo,ERo,CRo,c2,kpe,wRo,ARo,wV,LRo,yRo,xRo,f2,Spe,$Ro,kRo,AV,SRo,RRo,PRo,m2,Rpe,BRo,IRo,LV,NRo,qRo,jRo,g2,Ppe,DRo,GRo,yV,ORo,VRo,XRo,h2,Bpe,zRo,WRo,xV,QRo,URo,HRo,p2,Ipe,JRo,YRo,$V,KRo,ZRo,ePo,_2,Npe,oPo,rPo,kV,tPo,aPo,nPo,u2,qpe,sPo,lPo,SV,iPo,dPo,cPo,b2,jpe,fPo,mPo,RV,gPo,hPo,pPo,v2,Dpe,_Po,uPo,PV,bPo,vPo,FPo,F2,Gpe,TPo,MPo,BV,EPo,CPo,wPo,T2,Ope,APo,LPo,IV,yPo,xPo,$Po,M2,Vpe,kPo,SPo,NV,RPo,PPo,BPo,E2,IPo,Xpe,NPo,qPo,zpe,jPo,DPo,C2,tUe,id,w2,Wpe,HL,GPo,Qpe,OPo,aUe,Po,JL,VPo,dd,XPo,qV,zPo,WPo,jV,QPo,UPo,HPo,YL,JPo,Upe,YPo,KPo,ZPo,ht,KL,eBo,Hpe,oBo,rBo,cd,tBo,Jpe,aBo,nBo,DV,sBo,lBo,iBo,A2,dBo,Ze,ZL,cBo,Ype,fBo,mBo,za,gBo,Kpe,hBo,pBo,Zpe,_Bo,uBo,e_e,bBo,vBo,FBo,z,L2,o_e,TBo,MBo,GV,EBo,CBo,wBo,y2,r_e,ABo,LBo,OV,yBo,xBo,$Bo,x2,t_e,kBo,SBo,VV,RBo,PBo,BBo,$2,a_e,IBo,NBo,XV,qBo,jBo,DBo,k2,n_e,GBo,OBo,zV,VBo,XBo,zBo,S2,s_e,WBo,QBo,WV,UBo,HBo,JBo,R2,l_e,YBo,KBo,QV,ZBo,eIo,oIo,P2,i_e,rIo,tIo,UV,aIo,nIo,sIo,B2,d_e,lIo,iIo,HV,dIo,cIo,fIo,I2,c_e,mIo,gIo,JV,hIo,pIo,_Io,N2,f_e,uIo,bIo,YV,vIo,FIo,TIo,q2,m_e,MIo,EIo,KV,CIo,wIo,AIo,j2,g_e,LIo,yIo,ZV,xIo,$Io,kIo,D2,h_e,SIo,RIo,eX,PIo,BIo,IIo,G2,p_e,NIo,qIo,oX,jIo,DIo,GIo,O2,__e,OIo,VIo,rX,XIo,zIo,WIo,V2,u_e,QIo,UIo,tX,HIo,JIo,YIo,X2,b_e,KIo,ZIo,aX,eNo,oNo,rNo,z2,v_e,tNo,aNo,nX,nNo,sNo,lNo,W2,F_e,iNo,dNo,sX,cNo,fNo,mNo,Q2,T_e,gNo,hNo,lX,pNo,_No,uNo,U2,M_e,bNo,vNo,iX,FNo,TNo,MNo,H2,E_e,ENo,CNo,dX,wNo,ANo,LNo,J2,C_e,yNo,xNo,cX,$No,kNo,SNo,Y2,w_e,RNo,PNo,fX,BNo,INo,NNo,K2,A_e,qNo,jNo,mX,DNo,GNo,ONo,Z2,L_e,VNo,XNo,gX,zNo,WNo,QNo,eb,y_e,UNo,HNo,hX,JNo,YNo,KNo,ob,x_e,ZNo,eqo,pX,oqo,rqo,tqo,rb,$_e,aqo,nqo,_X,sqo,lqo,iqo,tb,k_e,dqo,cqo,uX,fqo,mqo,gqo,ab,S_e,hqo,pqo,bX,_qo,uqo,bqo,nb,R_e,vqo,Fqo,vX,Tqo,Mqo,Eqo,sb,P_e,Cqo,wqo,FX,Aqo,Lqo,yqo,lb,B_e,xqo,$qo,TX,kqo,Sqo,Rqo,ib,I_e,Pqo,Bqo,MX,Iqo,Nqo,qqo,db,N_e,jqo,Dqo,EX,Gqo,Oqo,Vqo,cb,q_e,Xqo,zqo,CX,Wqo,Qqo,Uqo,fb,j_e,Hqo,Jqo,wX,Yqo,Kqo,Zqo,mb,D_e,ejo,ojo,AX,rjo,tjo,ajo,gb,njo,G_e,sjo,ljo,O_e,ijo,djo,hb,nUe,fd,pb,V_e,ey,cjo,X_e,fjo,sUe,Bo,oy,mjo,md,gjo,LX,hjo,pjo,yX,_jo,ujo,bjo,ry,vjo,z_e,Fjo,Tjo,Mjo,pt,ty,Ejo,W_e,Cjo,wjo,gd,Ajo,Q_e,Ljo,yjo,xX,xjo,$jo,kjo,_b,Sjo,eo,ay,Rjo,U_e,Pjo,Bjo,Wa,Ijo,H_e,Njo,qjo,J_e,jjo,Djo,Y_e,Gjo,Ojo,Vjo,U,ub,K_e,Xjo,zjo,$X,Wjo,Qjo,Ujo,bb,Z_e,Hjo,Jjo,kX,Yjo,Kjo,Zjo,vb,eue,eDo,oDo,SX,rDo,tDo,aDo,Fb,oue,nDo,sDo,RX,lDo,iDo,dDo,Tb,rue,cDo,fDo,PX,mDo,gDo,hDo,Mb,tue,pDo,_Do,BX,uDo,bDo,vDo,Eb,aue,FDo,TDo,IX,MDo,EDo,CDo,Cb,nue,wDo,ADo,NX,LDo,yDo,xDo,wb,sue,$Do,kDo,qX,SDo,RDo,PDo,Ab,lue,BDo,IDo,jX,NDo,qDo,jDo,Lb,iue,DDo,GDo,DX,ODo,VDo,XDo,yb,due,zDo,WDo,GX,QDo,UDo,HDo,xb,cue,JDo,YDo,OX,KDo,ZDo,eGo,$b,fue,oGo,rGo,VX,tGo,aGo,nGo,kb,mue,sGo,lGo,XX,iGo,dGo,cGo,Sb,gue,fGo,mGo,zX,gGo,hGo,pGo,Rb,hue,_Go,uGo,WX,bGo,vGo,FGo,Pb,pue,TGo,MGo,QX,EGo,CGo,wGo,Bb,_ue,AGo,LGo,UX,yGo,xGo,$Go,Ib,uue,kGo,SGo,HX,RGo,PGo,BGo,Nb,bue,IGo,NGo,JX,qGo,jGo,DGo,qb,vue,GGo,OGo,YX,VGo,XGo,zGo,jb,Fue,WGo,QGo,KX,UGo,HGo,JGo,Db,Tue,YGo,KGo,ZX,ZGo,eOo,oOo,Gb,Mue,rOo,tOo,ez,aOo,nOo,sOo,Ob,Eue,lOo,iOo,oz,dOo,cOo,fOo,Vb,Cue,mOo,gOo,rz,hOo,pOo,_Oo,Xb,wue,uOo,bOo,tz,vOo,FOo,TOo,zb,Aue,MOo,EOo,az,COo,wOo,AOo,Wb,Lue,LOo,yOo,nz,xOo,$Oo,kOo,Qb,yue,SOo,ROo,sz,POo,BOo,IOo,Ub,xue,NOo,qOo,lz,jOo,DOo,GOo,Hb,$ue,OOo,VOo,iz,XOo,zOo,WOo,Jb,kue,QOo,UOo,Sue,HOo,JOo,YOo,Yb,Rue,KOo,ZOo,dz,eVo,oVo,rVo,Kb,Pue,tVo,aVo,cz,nVo,sVo,lVo,Zb,Bue,iVo,dVo,fz,cVo,fVo,mVo,ev,Iue,gVo,hVo,mz,pVo,_Vo,uVo,ov,bVo,Nue,vVo,FVo,que,TVo,MVo,rv,lUe,hd,tv,jue,ny,EVo,Due,CVo,iUe,Io,sy,wVo,pd,AVo,gz,LVo,yVo,hz,xVo,$Vo,kVo,ly,SVo,Gue,RVo,PVo,BVo,_t,iy,IVo,Oue,NVo,qVo,_d,jVo,Vue,DVo,GVo,pz,OVo,VVo,XVo,av,zVo,oo,dy,WVo,Xue,QVo,UVo,Qa,HVo,zue,JVo,YVo,Wue,KVo,ZVo,Que,eXo,oXo,rXo,me,nv,Uue,tXo,aXo,_z,nXo,sXo,lXo,sv,Hue,iXo,dXo,uz,cXo,fXo,mXo,lv,Jue,gXo,hXo,bz,pXo,_Xo,uXo,iv,Yue,bXo,vXo,vz,FXo,TXo,MXo,dv,Kue,EXo,CXo,Fz,wXo,AXo,LXo,cv,Zue,yXo,xXo,Tz,$Xo,kXo,SXo,fv,e1e,RXo,PXo,Mz,BXo,IXo,NXo,mv,o1e,qXo,jXo,Ez,DXo,GXo,OXo,gv,r1e,VXo,XXo,Cz,zXo,WXo,QXo,hv,t1e,UXo,HXo,wz,JXo,YXo,KXo,pv,a1e,ZXo,ezo,Az,ozo,rzo,tzo,_v,n1e,azo,nzo,Lz,szo,lzo,izo,uv,s1e,dzo,czo,yz,fzo,mzo,gzo,bv,l1e,hzo,pzo,xz,_zo,uzo,bzo,vv,i1e,vzo,Fzo,$z,Tzo,Mzo,Ezo,Fv,d1e,Czo,wzo,kz,Azo,Lzo,yzo,Tv,c1e,xzo,$zo,Sz,kzo,Szo,Rzo,Mv,f1e,Pzo,Bzo,Rz,Izo,Nzo,qzo,Ev,m1e,jzo,Dzo,Pz,Gzo,Ozo,Vzo,Cv,Xzo,g1e,zzo,Wzo,h1e,Qzo,Uzo,wv,dUe,ud,Av,p1e,cy,Hzo,_1e,Jzo,cUe,No,fy,Yzo,bd,Kzo,Bz,Zzo,eWo,Iz,oWo,rWo,tWo,my,aWo,u1e,nWo,sWo,lWo,ut,gy,iWo,b1e,dWo,cWo,vd,fWo,v1e,mWo,gWo,Nz,hWo,pWo,_Wo,Lv,uWo,ro,hy,bWo,F1e,vWo,FWo,Ua,TWo,T1e,MWo,EWo,M1e,CWo,wWo,E1e,AWo,LWo,yWo,N,yv,C1e,xWo,$Wo,qz,kWo,SWo,RWo,xv,w1e,PWo,BWo,jz,IWo,NWo,qWo,$v,A1e,jWo,DWo,Dz,GWo,OWo,VWo,kv,L1e,XWo,zWo,Gz,WWo,QWo,UWo,Sv,y1e,HWo,JWo,Oz,YWo,KWo,ZWo,Rv,x1e,eQo,oQo,Vz,rQo,tQo,aQo,Pv,$1e,nQo,sQo,Xz,lQo,iQo,dQo,Bv,k1e,cQo,fQo,zz,mQo,gQo,hQo,Iv,S1e,pQo,_Qo,Wz,uQo,bQo,vQo,Nv,R1e,FQo,TQo,Qz,MQo,EQo,CQo,qv,P1e,wQo,AQo,Uz,LQo,yQo,xQo,jv,B1e,$Qo,kQo,Hz,SQo,RQo,PQo,Dv,I1e,BQo,IQo,Jz,NQo,qQo,jQo,Gv,N1e,DQo,GQo,Yz,OQo,VQo,XQo,Ov,q1e,zQo,WQo,Kz,QQo,UQo,HQo,Vv,j1e,JQo,YQo,Zz,KQo,ZQo,eUo,Xv,D1e,oUo,rUo,eW,tUo,aUo,nUo,zv,G1e,sUo,lUo,oW,iUo,dUo,cUo,Wv,O1e,fUo,mUo,rW,gUo,hUo,pUo,Qv,V1e,_Uo,uUo,tW,bUo,vUo,FUo,Uv,X1e,TUo,MUo,aW,EUo,CUo,wUo,Hv,z1e,AUo,LUo,nW,yUo,xUo,$Uo,Jv,W1e,kUo,SUo,sW,RUo,PUo,BUo,Yv,Q1e,IUo,NUo,lW,qUo,jUo,DUo,Kv,U1e,GUo,OUo,iW,VUo,XUo,zUo,Zv,H1e,WUo,QUo,dW,UUo,HUo,JUo,e6,J1e,YUo,KUo,cW,ZUo,eHo,oHo,o6,Y1e,rHo,tHo,fW,aHo,nHo,sHo,r6,K1e,lHo,iHo,mW,dHo,cHo,fHo,t6,Z1e,mHo,gHo,gW,hHo,pHo,_Ho,a6,e2e,uHo,bHo,hW,vHo,FHo,THo,n6,o2e,MHo,EHo,pW,CHo,wHo,AHo,s6,r2e,LHo,yHo,_W,xHo,$Ho,kHo,l6,t2e,SHo,RHo,uW,PHo,BHo,IHo,i6,a2e,NHo,qHo,bW,jHo,DHo,GHo,d6,n2e,OHo,VHo,vW,XHo,zHo,WHo,c6,s2e,QHo,UHo,FW,HHo,JHo,YHo,f6,l2e,KHo,ZHo,TW,eJo,oJo,rJo,m6,i2e,tJo,aJo,MW,nJo,sJo,lJo,g6,d2e,iJo,dJo,EW,cJo,fJo,mJo,h6,c2e,gJo,hJo,CW,pJo,_Jo,uJo,p6,f2e,bJo,vJo,wW,FJo,TJo,MJo,_6,m2e,EJo,CJo,AW,wJo,AJo,LJo,u6,g2e,yJo,xJo,LW,$Jo,kJo,SJo,b6,h2e,RJo,PJo,yW,BJo,IJo,NJo,v6,p2e,qJo,jJo,xW,DJo,GJo,OJo,F6,_2e,VJo,XJo,$W,zJo,WJo,QJo,T6,u2e,UJo,HJo,kW,JJo,YJo,KJo,M6,b2e,ZJo,eYo,SW,oYo,rYo,tYo,E6,v2e,aYo,nYo,RW,sYo,lYo,iYo,C6,F2e,dYo,cYo,PW,fYo,mYo,gYo,w6,T2e,hYo,pYo,BW,_Yo,uYo,bYo,A6,vYo,M2e,FYo,TYo,E2e,MYo,EYo,L6,fUe,Fd,y6,C2e,py,CYo,w2e,wYo,mUe,qo,_y,AYo,Td,LYo,IW,yYo,xYo,NW,$Yo,kYo,SYo,uy,RYo,A2e,PYo,BYo,IYo,bt,by,NYo,L2e,qYo,jYo,Md,DYo,y2e,GYo,OYo,qW,VYo,XYo,zYo,x6,WYo,to,vy,QYo,x2e,UYo,HYo,Ha,JYo,$2e,YYo,KYo,k2e,ZYo,eKo,S2e,oKo,rKo,tKo,Z,$6,R2e,aKo,nKo,jW,sKo,lKo,iKo,k6,P2e,dKo,cKo,DW,fKo,mKo,gKo,S6,B2e,hKo,pKo,GW,_Ko,uKo,bKo,R6,I2e,vKo,FKo,OW,TKo,MKo,EKo,P6,N2e,CKo,wKo,VW,AKo,LKo,yKo,B6,q2e,xKo,$Ko,XW,kKo,SKo,RKo,I6,j2e,PKo,BKo,zW,IKo,NKo,qKo,N6,D2e,jKo,DKo,WW,GKo,OKo,VKo,q6,G2e,XKo,zKo,QW,WKo,QKo,UKo,j6,O2e,HKo,JKo,UW,YKo,KKo,ZKo,D6,V2e,eZo,oZo,HW,rZo,tZo,aZo,G6,X2e,nZo,sZo,JW,lZo,iZo,dZo,O6,z2e,cZo,fZo,YW,mZo,gZo,hZo,V6,W2e,pZo,_Zo,KW,uZo,bZo,vZo,X6,Q2e,FZo,TZo,ZW,MZo,EZo,CZo,z6,U2e,wZo,AZo,eQ,LZo,yZo,xZo,W6,H2e,$Zo,kZo,oQ,SZo,RZo,PZo,Q6,J2e,BZo,IZo,rQ,NZo,qZo,jZo,U6,Y2e,DZo,GZo,tQ,OZo,VZo,XZo,H6,K2e,zZo,WZo,aQ,QZo,UZo,HZo,J6,Z2e,JZo,YZo,nQ,KZo,ZZo,eer,Y6,ebe,oer,rer,sQ,ter,aer,ner,K6,obe,ser,ler,lQ,ier,der,cer,Z6,rbe,fer,mer,iQ,ger,her,per,eF,tbe,_er,uer,dQ,ber,ver,Fer,oF,abe,Ter,Mer,cQ,Eer,Cer,wer,rF,nbe,Aer,Ler,fQ,yer,xer,$er,tF,sbe,ker,Ser,mQ,Rer,Per,Ber,aF,lbe,Ier,Ner,gQ,qer,jer,Der,nF,ibe,Ger,Oer,hQ,Ver,Xer,zer,sF,dbe,Wer,Qer,pQ,Uer,Her,Jer,lF,Yer,cbe,Ker,Zer,fbe,eor,oor,iF,gUe,Ed,dF,mbe,Fy,ror,gbe,tor,hUe,jo,Ty,aor,Cd,nor,_Q,sor,lor,uQ,ior,dor,cor,My,mor,hbe,gor,hor,por,vt,Ey,_or,pbe,uor,bor,wd,vor,_be,For,Tor,bQ,Mor,Eor,Cor,cF,wor,ao,Cy,Aor,ube,Lor,yor,Ja,xor,bbe,$or,kor,vbe,Sor,Ror,Fbe,Por,Bor,Ior,Do,fF,Tbe,Nor,qor,vQ,jor,Dor,Gor,mF,Mbe,Oor,Vor,FQ,Xor,zor,Wor,gF,Ebe,Qor,Uor,TQ,Hor,Jor,Yor,hF,Cbe,Kor,Zor,MQ,err,orr,rrr,pF,wbe,trr,arr,EQ,nrr,srr,lrr,_F,Abe,irr,drr,CQ,crr,frr,mrr,uF,grr,Lbe,hrr,prr,ybe,_rr,urr,bF,pUe,Ad,vF,xbe,wy,brr,$be,vrr,_Ue,Go,Ay,Frr,Ld,Trr,wQ,Mrr,Err,AQ,Crr,wrr,Arr,Ly,Lrr,kbe,yrr,xrr,$rr,Ft,yy,krr,Sbe,Srr,Rrr,yd,Prr,Rbe,Brr,Irr,LQ,Nrr,qrr,jrr,FF,Drr,no,xy,Grr,Pbe,Orr,Vrr,Ya,Xrr,Bbe,zrr,Wrr,Ibe,Qrr,Urr,Nbe,Hrr,Jrr,Yrr,H,TF,qbe,Krr,Zrr,yQ,etr,otr,rtr,MF,jbe,ttr,atr,xQ,ntr,str,ltr,EF,Dbe,itr,dtr,$Q,ctr,ftr,mtr,CF,Gbe,gtr,htr,kQ,ptr,_tr,utr,wF,Obe,btr,vtr,SQ,Ftr,Ttr,Mtr,AF,Vbe,Etr,Ctr,RQ,wtr,Atr,Ltr,LF,Xbe,ytr,xtr,PQ,$tr,ktr,Str,yF,zbe,Rtr,Ptr,BQ,Btr,Itr,Ntr,xF,Wbe,qtr,jtr,IQ,Dtr,Gtr,Otr,$F,Qbe,Vtr,Xtr,NQ,ztr,Wtr,Qtr,kF,Ube,Utr,Htr,qQ,Jtr,Ytr,Ktr,SF,Hbe,Ztr,ear,jQ,oar,rar,tar,RF,Jbe,aar,nar,DQ,sar,lar,iar,PF,Ybe,dar,car,GQ,far,mar,gar,BF,Kbe,har,par,OQ,_ar,uar,bar,IF,Zbe,Far,Tar,VQ,Mar,Ear,Car,NF,eve,war,Aar,XQ,Lar,yar,xar,qF,ove,$ar,kar,zQ,Sar,Rar,Par,jF,rve,Bar,Iar,WQ,Nar,qar,jar,DF,tve,Dar,Gar,QQ,Oar,Var,Xar,GF,ave,zar,War,UQ,Qar,Uar,Har,OF,nve,Jar,Yar,HQ,Kar,Zar,enr,VF,sve,onr,rnr,JQ,tnr,anr,nnr,XF,lve,snr,lnr,YQ,inr,dnr,cnr,zF,ive,fnr,mnr,KQ,gnr,hnr,pnr,WF,dve,_nr,unr,ZQ,bnr,vnr,Fnr,QF,cve,Tnr,Mnr,eU,Enr,Cnr,wnr,UF,fve,Anr,Lnr,oU,ynr,xnr,$nr,HF,mve,knr,Snr,rU,Rnr,Pnr,Bnr,JF,gve,Inr,Nnr,tU,qnr,jnr,Dnr,YF,hve,Gnr,Onr,aU,Vnr,Xnr,znr,KF,pve,Wnr,Qnr,nU,Unr,Hnr,Jnr,ZF,_ve,Ynr,Knr,sU,Znr,esr,osr,eT,uve,rsr,tsr,lU,asr,nsr,ssr,oT,bve,lsr,isr,iU,dsr,csr,fsr,rT,vve,msr,gsr,dU,hsr,psr,_sr,tT,Fve,usr,bsr,cU,vsr,Fsr,Tsr,aT,Msr,Tve,Esr,Csr,Mve,wsr,Asr,nT,uUe,xd,sT,Eve,$y,Lsr,Cve,ysr,bUe,Oo,ky,xsr,$d,$sr,fU,ksr,Ssr,mU,Rsr,Psr,Bsr,Sy,Isr,wve,Nsr,qsr,jsr,Tt,Ry,Dsr,Ave,Gsr,Osr,kd,Vsr,Lve,Xsr,zsr,gU,Wsr,Qsr,Usr,lT,Hsr,so,Py,Jsr,yve,Ysr,Ksr,Ka,Zsr,xve,elr,olr,$ve,rlr,tlr,kve,alr,nlr,slr,V,iT,Sve,llr,ilr,hU,dlr,clr,flr,dT,Rve,mlr,glr,pU,hlr,plr,_lr,cT,Pve,ulr,blr,_U,vlr,Flr,Tlr,fT,Bve,Mlr,Elr,uU,Clr,wlr,Alr,mT,Ive,Llr,ylr,bU,xlr,$lr,klr,gT,Nve,Slr,Rlr,vU,Plr,Blr,Ilr,hT,qve,Nlr,qlr,FU,jlr,Dlr,Glr,pT,jve,Olr,Vlr,TU,Xlr,zlr,Wlr,_T,Dve,Qlr,Ulr,MU,Hlr,Jlr,Ylr,uT,Gve,Klr,Zlr,EU,eir,oir,rir,bT,Ove,tir,air,CU,nir,sir,lir,vT,Vve,iir,dir,wU,cir,fir,mir,FT,Xve,gir,hir,AU,pir,_ir,uir,TT,zve,bir,vir,LU,Fir,Tir,Mir,MT,Wve,Eir,Cir,yU,wir,Air,Lir,ET,Qve,yir,xir,xU,$ir,kir,Sir,CT,Uve,Rir,Pir,$U,Bir,Iir,Nir,wT,Hve,qir,jir,kU,Dir,Gir,Oir,AT,Jve,Vir,Xir,SU,zir,Wir,Qir,LT,Yve,Uir,Hir,RU,Jir,Yir,Kir,yT,Kve,Zir,edr,PU,odr,rdr,tdr,xT,Zve,adr,ndr,BU,sdr,ldr,idr,$T,e6e,ddr,cdr,IU,fdr,mdr,gdr,kT,o6e,hdr,pdr,NU,_dr,udr,bdr,ST,r6e,vdr,Fdr,qU,Tdr,Mdr,Edr,RT,t6e,Cdr,wdr,jU,Adr,Ldr,ydr,PT,a6e,xdr,$dr,DU,kdr,Sdr,Rdr,BT,n6e,Pdr,Bdr,GU,Idr,Ndr,qdr,IT,s6e,jdr,Ddr,OU,Gdr,Odr,Vdr,NT,l6e,Xdr,zdr,VU,Wdr,Qdr,Udr,qT,i6e,Hdr,Jdr,XU,Ydr,Kdr,Zdr,jT,d6e,ecr,ocr,zU,rcr,tcr,acr,DT,c6e,ncr,scr,WU,lcr,icr,dcr,GT,f6e,ccr,fcr,QU,mcr,gcr,hcr,OT,m6e,pcr,_cr,UU,ucr,bcr,vcr,VT,g6e,Fcr,Tcr,HU,Mcr,Ecr,Ccr,XT,h6e,wcr,Acr,JU,Lcr,ycr,xcr,zT,p6e,$cr,kcr,YU,Scr,Rcr,Pcr,WT,_6e,Bcr,Icr,KU,Ncr,qcr,jcr,QT,u6e,Dcr,Gcr,ZU,Ocr,Vcr,Xcr,UT,b6e,zcr,Wcr,eH,Qcr,Ucr,Hcr,HT,v6e,Jcr,Ycr,oH,Kcr,Zcr,efr,JT,F6e,ofr,rfr,rH,tfr,afr,nfr,YT,sfr,T6e,lfr,ifr,M6e,dfr,cfr,KT,vUe,Sd,ZT,E6e,By,ffr,C6e,mfr,FUe,Vo,Iy,gfr,Rd,hfr,tH,pfr,_fr,aH,ufr,bfr,vfr,Ny,Ffr,w6e,Tfr,Mfr,Efr,Mt,qy,Cfr,A6e,wfr,Afr,Pd,Lfr,L6e,yfr,xfr,nH,$fr,kfr,Sfr,e7,Rfr,lo,jy,Pfr,y6e,Bfr,Ifr,Za,Nfr,x6e,qfr,jfr,$6e,Dfr,Gfr,k6e,Ofr,Vfr,Xfr,S6e,o7,R6e,zfr,Wfr,sH,Qfr,Ufr,Hfr,r7,Jfr,P6e,Yfr,Kfr,B6e,Zfr,emr,t7,TUe,Bd,a7,I6e,Dy,omr,N6e,rmr,MUe,Xo,Gy,tmr,Id,amr,lH,nmr,smr,iH,lmr,imr,dmr,Oy,cmr,q6e,fmr,mmr,gmr,Et,Vy,hmr,j6e,pmr,_mr,Nd,umr,D6e,bmr,vmr,dH,Fmr,Tmr,Mmr,n7,Emr,io,Xy,Cmr,G6e,wmr,Amr,en,Lmr,O6e,ymr,xmr,V6e,$mr,kmr,X6e,Smr,Rmr,Pmr,be,s7,z6e,Bmr,Imr,cH,Nmr,qmr,jmr,l7,W6e,Dmr,Gmr,fH,Omr,Vmr,Xmr,i7,Q6e,zmr,Wmr,mH,Qmr,Umr,Hmr,d7,U6e,Jmr,Ymr,gH,Kmr,Zmr,egr,sl,H6e,ogr,rgr,hH,tgr,agr,pH,ngr,sgr,lgr,c7,J6e,igr,dgr,_H,cgr,fgr,mgr,ll,Y6e,ggr,hgr,uH,pgr,_gr,bH,ugr,bgr,vgr,f7,K6e,Fgr,Tgr,vH,Mgr,Egr,Cgr,Ct,Z6e,wgr,Agr,FH,Lgr,ygr,TH,xgr,$gr,MH,kgr,Sgr,Rgr,m7,eFe,Pgr,Bgr,EH,Igr,Ngr,qgr,g7,oFe,jgr,Dgr,CH,Ggr,Ogr,Vgr,h7,rFe,Xgr,zgr,wH,Wgr,Qgr,Ugr,p7,tFe,Hgr,Jgr,AH,Ygr,Kgr,Zgr,_7,aFe,ehr,ohr,LH,rhr,thr,ahr,u7,nFe,nhr,shr,yH,lhr,ihr,dhr,b7,sFe,chr,fhr,xH,mhr,ghr,hhr,v7,lFe,phr,_hr,$H,uhr,bhr,vhr,F7,Fhr,iFe,Thr,Mhr,dFe,Ehr,Chr,T7,EUe,qd,M7,cFe,zy,whr,fFe,Ahr,CUe,zo,Wy,Lhr,jd,yhr,kH,xhr,$hr,SH,khr,Shr,Rhr,Qy,Phr,mFe,Bhr,Ihr,Nhr,wt,Uy,qhr,gFe,jhr,Dhr,Dd,Ghr,hFe,Ohr,Vhr,RH,Xhr,zhr,Whr,E7,Qhr,co,Hy,Uhr,pFe,Hhr,Jhr,on,Yhr,_Fe,Khr,Zhr,uFe,epr,opr,bFe,rpr,tpr,apr,vFe,C7,FFe,npr,spr,PH,lpr,ipr,dpr,w7,cpr,TFe,fpr,mpr,MFe,gpr,hpr,A7,wUe,Gd,L7,EFe,Jy,ppr,CFe,_pr,AUe,Wo,Yy,upr,Od,bpr,BH,vpr,Fpr,IH,Tpr,Mpr,Epr,Ky,Cpr,wFe,wpr,Apr,Lpr,At,Zy,ypr,AFe,xpr,$pr,Vd,kpr,LFe,Spr,Rpr,NH,Ppr,Bpr,Ipr,y7,Npr,fo,ex,qpr,yFe,jpr,Dpr,rn,Gpr,xFe,Opr,Vpr,$Fe,Xpr,zpr,kFe,Wpr,Qpr,Upr,SFe,x7,RFe,Hpr,Jpr,qH,Ypr,Kpr,Zpr,$7,e_r,PFe,o_r,r_r,BFe,t_r,a_r,k7,LUe,Xd,S7,IFe,ox,n_r,NFe,s_r,yUe,Qo,rx,l_r,zd,i_r,jH,d_r,c_r,DH,f_r,m_r,g_r,tx,h_r,qFe,p_r,__r,u_r,Lt,ax,b_r,jFe,v_r,F_r,Wd,T_r,DFe,M_r,E_r,GH,C_r,w_r,A_r,R7,L_r,mo,nx,y_r,GFe,x_r,$_r,tn,k_r,OFe,S_r,R_r,VFe,P_r,B_r,XFe,I_r,N_r,q_r,zFe,P7,WFe,j_r,D_r,OH,G_r,O_r,V_r,B7,X_r,QFe,z_r,W_r,UFe,Q_r,U_r,I7,xUe,Qd,N7,HFe,sx,H_r,JFe,J_r,$Ue,Uo,lx,Y_r,Ud,K_r,VH,Z_r,eur,XH,our,rur,tur,ix,aur,YFe,nur,sur,lur,yt,dx,iur,KFe,dur,cur,Hd,fur,ZFe,mur,gur,zH,hur,pur,_ur,q7,uur,go,cx,bur,eTe,vur,Fur,an,Tur,oTe,Mur,Eur,rTe,Cur,wur,tTe,Aur,Lur,yur,Pe,j7,aTe,xur,$ur,WH,kur,Sur,Rur,D7,nTe,Pur,Bur,QH,Iur,Nur,qur,G7,sTe,jur,Dur,UH,Gur,Our,Vur,O7,lTe,Xur,zur,HH,Wur,Qur,Uur,V7,iTe,Hur,Jur,JH,Yur,Kur,Zur,X7,dTe,e1r,o1r,YH,r1r,t1r,a1r,z7,cTe,n1r,s1r,KH,l1r,i1r,d1r,W7,fTe,c1r,f1r,ZH,m1r,g1r,h1r,Q7,mTe,p1r,_1r,eJ,u1r,b1r,v1r,U7,F1r,gTe,T1r,M1r,hTe,E1r,C1r,H7,kUe,Jd,J7,pTe,fx,w1r,_Te,A1r,SUe,Ho,mx,L1r,Yd,y1r,oJ,x1r,$1r,rJ,k1r,S1r,R1r,gx,P1r,uTe,B1r,I1r,N1r,xt,hx,q1r,bTe,j1r,D1r,Kd,G1r,vTe,O1r,V1r,tJ,X1r,z1r,W1r,Y7,Q1r,ho,px,U1r,FTe,H1r,J1r,nn,Y1r,TTe,K1r,Z1r,MTe,e2r,o2r,ETe,r2r,t2r,a2r,st,K7,CTe,n2r,s2r,aJ,l2r,i2r,d2r,Z7,wTe,c2r,f2r,nJ,m2r,g2r,h2r,e8,ATe,p2r,_2r,sJ,u2r,b2r,v2r,o8,LTe,F2r,T2r,lJ,M2r,E2r,C2r,r8,yTe,w2r,A2r,iJ,L2r,y2r,x2r,t8,$2r,xTe,k2r,S2r,$Te,R2r,P2r,a8,RUe,Zd,n8,kTe,_x,B2r,STe,I2r,PUe,Jo,ux,N2r,ec,q2r,dJ,j2r,D2r,cJ,G2r,O2r,V2r,bx,X2r,RTe,z2r,W2r,Q2r,$t,vx,U2r,PTe,H2r,J2r,oc,Y2r,BTe,K2r,Z2r,fJ,ebr,obr,rbr,s8,tbr,po,Fx,abr,ITe,nbr,sbr,sn,lbr,NTe,ibr,dbr,qTe,cbr,fbr,jTe,mbr,gbr,hbr,Le,l8,DTe,pbr,_br,mJ,ubr,bbr,vbr,i8,GTe,Fbr,Tbr,gJ,Mbr,Ebr,Cbr,d8,OTe,wbr,Abr,hJ,Lbr,ybr,xbr,c8,VTe,$br,kbr,pJ,Sbr,Rbr,Pbr,f8,XTe,Bbr,Ibr,_J,Nbr,qbr,jbr,m8,zTe,Dbr,Gbr,uJ,Obr,Vbr,Xbr,g8,WTe,zbr,Wbr,bJ,Qbr,Ubr,Hbr,h8,QTe,Jbr,Ybr,vJ,Kbr,Zbr,evr,p8,UTe,ovr,rvr,FJ,tvr,avr,nvr,_8,HTe,svr,lvr,TJ,ivr,dvr,cvr,u8,fvr,JTe,mvr,gvr,YTe,hvr,pvr,b8,BUe,rc,v8,KTe,Tx,_vr,ZTe,uvr,IUe,Yo,Mx,bvr,tc,vvr,MJ,Fvr,Tvr,EJ,Mvr,Evr,Cvr,Ex,wvr,e7e,Avr,Lvr,yvr,kt,Cx,xvr,o7e,$vr,kvr,ac,Svr,r7e,Rvr,Pvr,CJ,Bvr,Ivr,Nvr,F8,qvr,_o,wx,jvr,t7e,Dvr,Gvr,ln,Ovr,a7e,Vvr,Xvr,n7e,zvr,Wvr,s7e,Qvr,Uvr,Hvr,Ax,T8,l7e,Jvr,Yvr,wJ,Kvr,Zvr,e6r,M8,i7e,o6r,r6r,AJ,t6r,a6r,n6r,E8,s6r,d7e,l6r,i6r,c7e,d6r,c6r,C8,NUe,nc,w8,f7e,Lx,f6r,m7e,m6r,qUe,Ko,yx,g6r,sc,h6r,LJ,p6r,_6r,yJ,u6r,b6r,v6r,xx,F6r,g7e,T6r,M6r,E6r,St,$x,C6r,h7e,w6r,A6r,lc,L6r,p7e,y6r,x6r,xJ,$6r,k6r,S6r,A8,R6r,uo,kx,P6r,_7e,B6r,I6r,dn,N6r,u7e,q6r,j6r,b7e,D6r,G6r,v7e,O6r,V6r,X6r,lt,L8,F7e,z6r,W6r,$J,Q6r,U6r,H6r,y8,T7e,J6r,Y6r,kJ,K6r,Z6r,eFr,x8,M7e,oFr,rFr,SJ,tFr,aFr,nFr,$8,E7e,sFr,lFr,RJ,iFr,dFr,cFr,k8,C7e,fFr,mFr,PJ,gFr,hFr,pFr,S8,_Fr,w7e,uFr,bFr,A7e,vFr,FFr,R8,jUe,ic,P8,L7e,Sx,TFr,y7e,MFr,DUe,Zo,Rx,EFr,dc,CFr,BJ,wFr,AFr,IJ,LFr,yFr,xFr,Px,$Fr,x7e,kFr,SFr,RFr,Rt,Bx,PFr,$7e,BFr,IFr,cc,NFr,k7e,qFr,jFr,NJ,DFr,GFr,OFr,B8,VFr,bo,Ix,XFr,S7e,zFr,WFr,cn,QFr,R7e,UFr,HFr,P7e,JFr,YFr,B7e,KFr,ZFr,eTr,fn,I8,I7e,oTr,rTr,qJ,tTr,aTr,nTr,N8,N7e,sTr,lTr,jJ,iTr,dTr,cTr,q8,q7e,fTr,mTr,DJ,gTr,hTr,pTr,j8,j7e,_Tr,uTr,GJ,bTr,vTr,FTr,D8,TTr,D7e,MTr,ETr,G7e,CTr,wTr,G8,GUe,fc,O8,O7e,Nx,ATr,V7e,LTr,OUe,er,qx,yTr,mc,xTr,OJ,$Tr,kTr,VJ,STr,RTr,PTr,jx,BTr,X7e,ITr,NTr,qTr,Pt,Dx,jTr,z7e,DTr,GTr,gc,OTr,W7e,VTr,XTr,XJ,zTr,WTr,QTr,V8,UTr,vo,Gx,HTr,Q7e,JTr,YTr,mn,KTr,U7e,ZTr,e7r,H7e,o7r,r7r,J7e,t7r,a7r,n7r,Ox,X8,Y7e,s7r,l7r,zJ,i7r,d7r,c7r,z8,K7e,f7r,m7r,WJ,g7r,h7r,p7r,W8,_7r,Z7e,u7r,b7r,e8e,v7r,F7r,Q8,VUe,hc,U8,o8e,Vx,T7r,r8e,M7r,XUe,or,Xx,E7r,pc,C7r,QJ,w7r,A7r,UJ,L7r,y7r,x7r,zx,$7r,t8e,k7r,S7r,R7r,Bt,Wx,P7r,a8e,B7r,I7r,_c,N7r,n8e,q7r,j7r,HJ,D7r,G7r,O7r,H8,V7r,Fo,Qx,X7r,s8e,z7r,W7r,gn,Q7r,l8e,U7r,H7r,i8e,J7r,Y7r,d8e,K7r,Z7r,e8r,c8e,J8,f8e,o8r,r8r,JJ,t8r,a8r,n8r,Y8,s8r,m8e,l8r,i8r,g8e,d8r,c8r,K8,zUe,uc,Z8,h8e,Ux,f8r,p8e,m8r,WUe,rr,Hx,g8r,bc,h8r,YJ,p8r,_8r,KJ,u8r,b8r,v8r,Jx,F8r,_8e,T8r,M8r,E8r,It,Yx,C8r,u8e,w8r,A8r,vc,L8r,b8e,y8r,x8r,ZJ,$8r,k8r,S8r,e9,R8r,To,Kx,P8r,v8e,B8r,I8r,hn,N8r,F8e,q8r,j8r,T8e,D8r,G8r,M8e,O8r,V8r,X8r,it,o9,E8e,z8r,W8r,eY,Q8r,U8r,H8r,r9,C8e,J8r,Y8r,oY,K8r,Z8r,e9r,t9,w8e,o9r,r9r,rY,t9r,a9r,n9r,a9,A8e,s9r,l9r,tY,i9r,d9r,c9r,n9,L8e,f9r,m9r,aY,g9r,h9r,p9r,s9,_9r,y8e,u9r,b9r,x8e,v9r,F9r,l9,QUe,Fc,i9,$8e,Zx,T9r,k8e,M9r,UUe,tr,e$,E9r,Tc,C9r,nY,w9r,A9r,sY,L9r,y9r,x9r,o$,$9r,S8e,k9r,S9r,R9r,Nt,r$,P9r,R8e,B9r,I9r,Mc,N9r,P8e,q9r,j9r,lY,D9r,G9r,O9r,d9,V9r,Mo,t$,X9r,B8e,z9r,W9r,pn,Q9r,I8e,U9r,H9r,N8e,J9r,Y9r,q8e,K9r,Z9r,eMr,j8e,c9,D8e,oMr,rMr,iY,tMr,aMr,nMr,f9,sMr,G8e,lMr,iMr,O8e,dMr,cMr,m9,HUe,Ec,g9,V8e,a$,fMr,X8e,mMr,JUe,ar,n$,gMr,Cc,hMr,dY,pMr,_Mr,cY,uMr,bMr,vMr,s$,FMr,z8e,TMr,MMr,EMr,qt,l$,CMr,W8e,wMr,AMr,wc,LMr,Q8e,yMr,xMr,fY,$Mr,kMr,SMr,h9,RMr,Rr,i$,PMr,U8e,BMr,IMr,_n,NMr,H8e,qMr,jMr,J8e,DMr,GMr,Y8e,OMr,VMr,XMr,q,p9,K8e,zMr,WMr,mY,QMr,UMr,HMr,_9,Z8e,JMr,YMr,gY,KMr,ZMr,eEr,u9,e9e,oEr,rEr,hY,tEr,aEr,nEr,b9,o9e,sEr,lEr,pY,iEr,dEr,cEr,v9,r9e,fEr,mEr,_Y,gEr,hEr,pEr,F9,t9e,_Er,uEr,uY,bEr,vEr,FEr,T9,a9e,TEr,MEr,bY,EEr,CEr,wEr,M9,n9e,AEr,LEr,vY,yEr,xEr,$Er,E9,s9e,kEr,SEr,FY,REr,PEr,BEr,C9,l9e,IEr,NEr,TY,qEr,jEr,DEr,w9,i9e,GEr,OEr,MY,VEr,XEr,zEr,A9,d9e,WEr,QEr,EY,UEr,HEr,JEr,L9,c9e,YEr,KEr,CY,ZEr,e4r,o4r,y9,f9e,r4r,t4r,wY,a4r,n4r,s4r,x9,m9e,l4r,i4r,AY,d4r,c4r,f4r,$9,g9e,m4r,g4r,LY,h4r,p4r,_4r,k9,h9e,u4r,b4r,yY,v4r,F4r,T4r,S9,p9e,M4r,E4r,xY,C4r,w4r,A4r,il,_9e,L4r,y4r,$Y,x4r,$4r,kY,k4r,S4r,R4r,R9,u9e,P4r,B4r,SY,I4r,N4r,q4r,P9,b9e,j4r,D4r,RY,G4r,O4r,V4r,B9,v9e,X4r,z4r,PY,W4r,Q4r,U4r,I9,F9e,H4r,J4r,BY,Y4r,K4r,Z4r,N9,T9e,eCr,oCr,IY,rCr,tCr,aCr,q9,M9e,nCr,sCr,NY,lCr,iCr,dCr,j9,E9e,cCr,fCr,qY,mCr,gCr,hCr,D9,C9e,pCr,_Cr,jY,uCr,bCr,vCr,G9,w9e,FCr,TCr,DY,MCr,ECr,CCr,O9,A9e,wCr,ACr,GY,LCr,yCr,xCr,V9,L9e,$Cr,kCr,OY,SCr,RCr,PCr,X9,y9e,BCr,ICr,VY,NCr,qCr,jCr,z9,x9e,DCr,GCr,XY,OCr,VCr,XCr,W9,$9e,zCr,WCr,zY,QCr,UCr,HCr,Q9,k9e,JCr,YCr,WY,KCr,ZCr,e3r,U9,S9e,o3r,r3r,QY,t3r,a3r,n3r,H9,R9e,s3r,l3r,UY,i3r,d3r,c3r,J9,P9e,f3r,m3r,HY,g3r,h3r,p3r,Y9,B9e,_3r,u3r,JY,b3r,v3r,F3r,K9,I9e,T3r,M3r,YY,E3r,C3r,w3r,Z9,N9e,A3r,L3r,KY,y3r,x3r,$3r,eM,q9e,k3r,S3r,ZY,R3r,P3r,B3r,oM,j9e,I3r,N3r,eK,q3r,j3r,D3r,rM,D9e,G3r,O3r,oK,V3r,X3r,z3r,tM,G9e,W3r,Q3r,rK,U3r,H3r,J3r,aM,O9e,Y3r,K3r,tK,Z3r,e5r,o5r,nM,V9e,r5r,t5r,aK,a5r,n5r,s5r,sM,X9e,l5r,i5r,nK,d5r,c5r,f5r,lM,z9e,m5r,g5r,sK,h5r,p5r,_5r,iM,W9e,u5r,b5r,lK,v5r,F5r,T5r,dM,Q9e,M5r,E5r,iK,C5r,w5r,A5r,cM,U9e,L5r,y5r,dK,x5r,$5r,k5r,fM,YUe,Ac,mM,H9e,d$,S5r,J9e,R5r,KUe,nr,c$,P5r,Lc,B5r,cK,I5r,N5r,fK,q5r,j5r,D5r,f$,G5r,Y9e,O5r,V5r,X5r,jt,m$,z5r,K9e,W5r,Q5r,yc,U5r,Z9e,H5r,J5r,mK,Y5r,K5r,Z5r,gM,e0r,Pr,g$,o0r,eMe,r0r,t0r,un,a0r,oMe,n0r,s0r,rMe,l0r,i0r,tMe,d0r,c0r,f0r,se,hM,aMe,m0r,g0r,gK,h0r,p0r,_0r,pM,nMe,u0r,b0r,hK,v0r,F0r,T0r,_M,sMe,M0r,E0r,pK,C0r,w0r,A0r,uM,lMe,L0r,y0r,_K,x0r,$0r,k0r,bM,iMe,S0r,R0r,uK,P0r,B0r,I0r,vM,dMe,N0r,q0r,bK,j0r,D0r,G0r,FM,cMe,O0r,V0r,vK,X0r,z0r,W0r,TM,fMe,Q0r,U0r,FK,H0r,J0r,Y0r,MM,mMe,K0r,Z0r,TK,ewr,owr,rwr,EM,gMe,twr,awr,MK,nwr,swr,lwr,CM,hMe,iwr,dwr,EK,cwr,fwr,mwr,wM,pMe,gwr,hwr,CK,pwr,_wr,uwr,AM,_Me,bwr,vwr,wK,Fwr,Twr,Mwr,LM,uMe,Ewr,Cwr,AK,wwr,Awr,Lwr,yM,bMe,ywr,xwr,LK,$wr,kwr,Swr,xM,vMe,Rwr,Pwr,yK,Bwr,Iwr,Nwr,$M,FMe,qwr,jwr,xK,Dwr,Gwr,Owr,kM,TMe,Vwr,Xwr,$K,zwr,Wwr,Qwr,SM,MMe,Uwr,Hwr,kK,Jwr,Ywr,Kwr,RM,EMe,Zwr,eAr,SK,oAr,rAr,tAr,PM,CMe,aAr,nAr,RK,sAr,lAr,iAr,BM,wMe,dAr,cAr,PK,fAr,mAr,gAr,IM,AMe,hAr,pAr,BK,_Ar,uAr,bAr,NM,ZUe,xc,qM,LMe,h$,vAr,yMe,FAr,eHe,sr,p$,TAr,$c,MAr,IK,EAr,CAr,NK,wAr,AAr,LAr,_$,yAr,xMe,xAr,$Ar,kAr,Dt,u$,SAr,$Me,RAr,PAr,kc,BAr,kMe,IAr,NAr,qK,qAr,jAr,DAr,jM,GAr,Br,b$,OAr,SMe,VAr,XAr,bn,zAr,RMe,WAr,QAr,PMe,UAr,HAr,BMe,JAr,YAr,KAr,Me,DM,IMe,ZAr,eLr,jK,oLr,rLr,tLr,GM,NMe,aLr,nLr,DK,sLr,lLr,iLr,OM,qMe,dLr,cLr,GK,fLr,mLr,gLr,VM,jMe,hLr,pLr,OK,_Lr,uLr,bLr,XM,DMe,vLr,FLr,VK,TLr,MLr,ELr,zM,GMe,CLr,wLr,XK,ALr,LLr,yLr,WM,OMe,xLr,$Lr,zK,kLr,SLr,RLr,QM,VMe,PLr,BLr,WK,ILr,NLr,qLr,UM,XMe,jLr,DLr,QK,GLr,OLr,VLr,HM,zMe,XLr,zLr,UK,WLr,QLr,ULr,JM,WMe,HLr,JLr,HK,YLr,KLr,ZLr,YM,QMe,eyr,oyr,JK,ryr,tyr,ayr,KM,UMe,nyr,syr,YK,lyr,iyr,dyr,ZM,oHe,Sc,eE,HMe,v$,cyr,JMe,fyr,rHe,lr,F$,myr,Rc,gyr,KK,hyr,pyr,ZK,_yr,uyr,byr,T$,vyr,YMe,Fyr,Tyr,Myr,Gt,M$,Eyr,KMe,Cyr,wyr,Pc,Ayr,ZMe,Lyr,yyr,eZ,xyr,$yr,kyr,oE,Syr,Ir,E$,Ryr,eEe,Pyr,Byr,vn,Iyr,oEe,Nyr,qyr,rEe,jyr,Dyr,tEe,Gyr,Oyr,Vyr,Ve,rE,aEe,Xyr,zyr,oZ,Wyr,Qyr,Uyr,tE,nEe,Hyr,Jyr,rZ,Yyr,Kyr,Zyr,dl,sEe,exr,oxr,tZ,rxr,txr,aZ,axr,nxr,sxr,aE,lEe,lxr,ixr,nZ,dxr,cxr,fxr,nE,iEe,mxr,gxr,sZ,hxr,pxr,_xr,sE,dEe,uxr,bxr,lZ,vxr,Fxr,Txr,lE,cEe,Mxr,Exr,iZ,Cxr,wxr,Axr,iE,fEe,Lxr,yxr,dZ,xxr,$xr,kxr,dE,tHe,Bc,cE,mEe,C$,Sxr,gEe,Rxr,aHe,ir,w$,Pxr,Ic,Bxr,cZ,Ixr,Nxr,fZ,qxr,jxr,Dxr,A$,Gxr,hEe,Oxr,Vxr,Xxr,Ot,L$,zxr,pEe,Wxr,Qxr,Nc,Uxr,_Ee,Hxr,Jxr,mZ,Yxr,Kxr,Zxr,fE,e$r,Nr,y$,o$r,uEe,r$r,t$r,Fn,a$r,bEe,n$r,s$r,vEe,l$r,i$r,FEe,d$r,c$r,f$r,x$,mE,TEe,m$r,g$r,gZ,h$r,p$r,_$r,gE,MEe,u$r,b$r,hZ,v$r,F$r,T$r,hE,nHe,qc,pE,EEe,$$,M$r,CEe,E$r,sHe,dr,k$,C$r,jc,w$r,pZ,A$r,L$r,_Z,y$r,x$r,$$r,S$,k$r,wEe,S$r,R$r,P$r,Vt,R$,B$r,AEe,I$r,N$r,Dc,q$r,LEe,j$r,D$r,uZ,G$r,O$r,V$r,_E,X$r,qr,P$,z$r,yEe,W$r,Q$r,Tn,U$r,xEe,H$r,J$r,$Ee,Y$r,K$r,kEe,Z$r,ekr,okr,de,uE,SEe,rkr,tkr,bZ,akr,nkr,skr,bE,REe,lkr,ikr,vZ,dkr,ckr,fkr,vE,PEe,mkr,gkr,FZ,hkr,pkr,_kr,FE,BEe,ukr,bkr,TZ,vkr,Fkr,Tkr,TE,IEe,Mkr,Ekr,MZ,Ckr,wkr,Akr,ME,NEe,Lkr,ykr,EZ,xkr,$kr,kkr,EE,qEe,Skr,Rkr,CZ,Pkr,Bkr,Ikr,CE,jEe,Nkr,qkr,wZ,jkr,Dkr,Gkr,wE,DEe,Okr,Vkr,AZ,Xkr,zkr,Wkr,AE,GEe,Qkr,Ukr,LZ,Hkr,Jkr,Ykr,LE,OEe,Kkr,Zkr,yZ,eSr,oSr,rSr,yE,VEe,tSr,aSr,xZ,nSr,sSr,lSr,xE,XEe,iSr,dSr,$Z,cSr,fSr,mSr,$E,zEe,gSr,hSr,kZ,pSr,_Sr,uSr,kE,WEe,bSr,vSr,SZ,FSr,TSr,MSr,SE,QEe,ESr,CSr,RZ,wSr,ASr,LSr,RE,UEe,ySr,xSr,PZ,$Sr,kSr,SSr,PE,HEe,RSr,PSr,BZ,BSr,ISr,NSr,BE,JEe,qSr,jSr,IZ,DSr,GSr,OSr,IE,YEe,VSr,XSr,NZ,zSr,WSr,QSr,NE,lHe,Gc,qE,KEe,B$,USr,ZEe,HSr,iHe,cr,I$,JSr,Oc,YSr,qZ,KSr,ZSr,jZ,eRr,oRr,rRr,N$,tRr,e4e,aRr,nRr,sRr,Xt,q$,lRr,o4e,iRr,dRr,Vc,cRr,r4e,fRr,mRr,DZ,gRr,hRr,pRr,jE,_Rr,jr,j$,uRr,t4e,bRr,vRr,Mn,FRr,a4e,TRr,MRr,n4e,ERr,CRr,s4e,wRr,ARr,LRr,ye,DE,l4e,yRr,xRr,GZ,$Rr,kRr,SRr,GE,i4e,RRr,PRr,OZ,BRr,IRr,NRr,OE,d4e,qRr,jRr,VZ,DRr,GRr,ORr,VE,c4e,VRr,XRr,XZ,zRr,WRr,QRr,XE,f4e,URr,HRr,zZ,JRr,YRr,KRr,zE,m4e,ZRr,ePr,WZ,oPr,rPr,tPr,WE,g4e,aPr,nPr,QZ,sPr,lPr,iPr,QE,h4e,dPr,cPr,UZ,fPr,mPr,gPr,UE,p4e,hPr,pPr,HZ,_Pr,uPr,bPr,HE,_4e,vPr,FPr,JZ,TPr,MPr,EPr,JE,dHe,Xc,YE,u4e,D$,CPr,b4e,wPr,cHe,fr,G$,APr,zc,LPr,YZ,yPr,xPr,KZ,$Pr,kPr,SPr,O$,RPr,v4e,PPr,BPr,IPr,zt,V$,NPr,F4e,qPr,jPr,Wc,DPr,T4e,GPr,OPr,ZZ,VPr,XPr,zPr,KE,WPr,Dr,X$,QPr,M4e,UPr,HPr,En,JPr,E4e,YPr,KPr,C4e,ZPr,eBr,w4e,oBr,rBr,tBr,te,ZE,A4e,aBr,nBr,eee,sBr,lBr,iBr,e4,L4e,dBr,cBr,oee,fBr,mBr,gBr,o4,y4e,hBr,pBr,ree,_Br,uBr,bBr,r4,x4e,vBr,FBr,tee,TBr,MBr,EBr,t4,$4e,CBr,wBr,aee,ABr,LBr,yBr,a4,k4e,xBr,$Br,nee,kBr,SBr,RBr,n4,S4e,PBr,BBr,see,IBr,NBr,qBr,s4,R4e,jBr,DBr,lee,GBr,OBr,VBr,l4,P4e,XBr,zBr,iee,WBr,QBr,UBr,i4,B4e,HBr,JBr,dee,YBr,KBr,ZBr,d4,I4e,eIr,oIr,cee,rIr,tIr,aIr,c4,N4e,nIr,sIr,fee,lIr,iIr,dIr,f4,q4e,cIr,fIr,mee,mIr,gIr,hIr,m4,j4e,pIr,_Ir,gee,uIr,bIr,vIr,g4,D4e,FIr,TIr,hee,MIr,EIr,CIr,h4,G4e,wIr,AIr,pee,LIr,yIr,xIr,p4,O4e,$Ir,kIr,_ee,SIr,RIr,PIr,_4,V4e,BIr,IIr,uee,NIr,qIr,jIr,u4,X4e,DIr,GIr,bee,OIr,VIr,XIr,b4,z4e,zIr,WIr,vee,QIr,UIr,HIr,v4,W4e,JIr,YIr,Fee,KIr,ZIr,eNr,F4,Q4e,oNr,rNr,Tee,tNr,aNr,nNr,T4,U4e,sNr,lNr,Mee,iNr,dNr,cNr,M4,H4e,fNr,mNr,Eee,gNr,hNr,pNr,E4,J4e,_Nr,uNr,Cee,bNr,vNr,FNr,C4,Y4e,TNr,MNr,wee,ENr,CNr,wNr,w4,fHe,Qc,A4,K4e,z$,ANr,Z4e,LNr,mHe,mr,W$,yNr,Uc,xNr,Aee,$Nr,kNr,Lee,SNr,RNr,PNr,Q$,BNr,eCe,INr,NNr,qNr,Wt,U$,jNr,oCe,DNr,GNr,Hc,ONr,rCe,VNr,XNr,yee,zNr,WNr,QNr,L4,UNr,Gr,H$,HNr,tCe,JNr,YNr,Cn,KNr,aCe,ZNr,eqr,nCe,oqr,rqr,sCe,tqr,aqr,nqr,ve,y4,lCe,sqr,lqr,xee,iqr,dqr,cqr,x4,iCe,fqr,mqr,$ee,gqr,hqr,pqr,$4,dCe,_qr,uqr,kee,bqr,vqr,Fqr,k4,cCe,Tqr,Mqr,See,Eqr,Cqr,wqr,S4,fCe,Aqr,Lqr,Ree,yqr,xqr,$qr,R4,mCe,kqr,Sqr,Pee,Rqr,Pqr,Bqr,P4,gCe,Iqr,Nqr,Bee,qqr,jqr,Dqr,B4,hCe,Gqr,Oqr,Iee,Vqr,Xqr,zqr,I4,pCe,Wqr,Qqr,Nee,Uqr,Hqr,Jqr,N4,_Ce,Yqr,Kqr,qee,Zqr,ejr,ojr,q4,uCe,rjr,tjr,jee,ajr,njr,sjr,j4,bCe,ljr,ijr,Dee,djr,cjr,fjr,D4,vCe,mjr,gjr,Gee,hjr,pjr,_jr,G4,FCe,ujr,bjr,Oee,vjr,Fjr,Tjr,O4,TCe,Mjr,Ejr,Vee,Cjr,wjr,Ajr,V4,MCe,Ljr,yjr,Xee,xjr,$jr,kjr,X4,ECe,Sjr,Rjr,zee,Pjr,Bjr,Ijr,z4,gHe,Jc,W4,CCe,J$,Njr,wCe,qjr,hHe,gr,Y$,jjr,Yc,Djr,Wee,Gjr,Ojr,Qee,Vjr,Xjr,zjr,K$,Wjr,ACe,Qjr,Ujr,Hjr,Qt,Z$,Jjr,LCe,Yjr,Kjr,Kc,Zjr,yCe,eDr,oDr,Uee,rDr,tDr,aDr,Q4,nDr,Or,ek,sDr,xCe,lDr,iDr,wn,dDr,$Ce,cDr,fDr,kCe,mDr,gDr,SCe,hDr,pDr,_Dr,ok,U4,RCe,uDr,bDr,Hee,vDr,FDr,TDr,H4,PCe,MDr,EDr,Jee,CDr,wDr,ADr,J4,pHe,Zc,Y4,BCe,rk,LDr,ICe,yDr,_He,hr,tk,xDr,ef,$Dr,Yee,kDr,SDr,Kee,RDr,PDr,BDr,ak,IDr,NCe,NDr,qDr,jDr,Ut,nk,DDr,qCe,GDr,ODr,of,VDr,jCe,XDr,zDr,Zee,WDr,QDr,UDr,K4,HDr,Vr,sk,JDr,DCe,YDr,KDr,An,ZDr,GCe,eGr,oGr,OCe,rGr,tGr,VCe,aGr,nGr,sGr,XCe,Z4,zCe,lGr,iGr,eoe,dGr,cGr,fGr,eC,uHe,rf,oC,WCe,lk,mGr,QCe,gGr,bHe,pr,ik,hGr,tf,pGr,ooe,_Gr,uGr,roe,bGr,vGr,FGr,dk,TGr,UCe,MGr,EGr,CGr,Ht,ck,wGr,HCe,AGr,LGr,af,yGr,JCe,xGr,$Gr,toe,kGr,SGr,RGr,rC,PGr,Xr,fk,BGr,YCe,IGr,NGr,Ln,qGr,KCe,jGr,DGr,ZCe,GGr,OGr,e3e,VGr,XGr,zGr,ce,tC,o3e,WGr,QGr,aoe,UGr,HGr,JGr,aC,r3e,YGr,KGr,noe,ZGr,eOr,oOr,nC,t3e,rOr,tOr,soe,aOr,nOr,sOr,sC,a3e,lOr,iOr,loe,dOr,cOr,fOr,lC,n3e,mOr,gOr,ioe,hOr,pOr,_Or,iC,s3e,uOr,bOr,doe,vOr,FOr,TOr,dC,l3e,MOr,EOr,coe,COr,wOr,AOr,cC,i3e,LOr,yOr,foe,xOr,$Or,kOr,fC,d3e,SOr,ROr,moe,POr,BOr,IOr,mC,c3e,NOr,qOr,goe,jOr,DOr,GOr,gC,f3e,OOr,VOr,hoe,XOr,zOr,WOr,hC,m3e,QOr,UOr,poe,HOr,JOr,YOr,pC,g3e,KOr,ZOr,_oe,eVr,oVr,rVr,_C,h3e,tVr,aVr,uoe,nVr,sVr,lVr,uC,p3e,iVr,dVr,boe,cVr,fVr,mVr,bC,_3e,gVr,hVr,voe,pVr,_Vr,uVr,vC,u3e,bVr,vVr,Foe,FVr,TVr,MVr,FC,b3e,EVr,CVr,Toe,wVr,AVr,LVr,TC,v3e,yVr,xVr,Moe,$Vr,kVr,SVr,MC,F3e,RVr,PVr,Eoe,BVr,IVr,NVr,EC,vHe,nf,CC,T3e,mk,qVr,M3e,jVr,FHe,_r,gk,DVr,sf,GVr,Coe,OVr,VVr,woe,XVr,zVr,WVr,hk,QVr,E3e,UVr,HVr,JVr,Jt,pk,YVr,C3e,KVr,ZVr,lf,eXr,w3e,oXr,rXr,Aoe,tXr,aXr,nXr,wC,sXr,zr,_k,lXr,A3e,iXr,dXr,yn,cXr,L3e,fXr,mXr,y3e,gXr,hXr,x3e,pXr,_Xr,uXr,fe,AC,$3e,bXr,vXr,Loe,FXr,TXr,MXr,LC,k3e,EXr,CXr,yoe,wXr,AXr,LXr,yC,S3e,yXr,xXr,xoe,$Xr,kXr,SXr,xC,R3e,RXr,PXr,$oe,BXr,IXr,NXr,$C,P3e,qXr,jXr,koe,DXr,GXr,OXr,kC,B3e,VXr,XXr,Soe,zXr,WXr,QXr,SC,I3e,UXr,HXr,Roe,JXr,YXr,KXr,RC,N3e,ZXr,ezr,Poe,ozr,rzr,tzr,PC,q3e,azr,nzr,Boe,szr,lzr,izr,BC,j3e,dzr,czr,Ioe,fzr,mzr,gzr,IC,D3e,hzr,pzr,Noe,_zr,uzr,bzr,NC,G3e,vzr,Fzr,qoe,Tzr,Mzr,Ezr,qC,O3e,Czr,wzr,joe,Azr,Lzr,yzr,jC,V3e,xzr,$zr,Doe,kzr,Szr,Rzr,DC,X3e,Pzr,Bzr,Goe,Izr,Nzr,qzr,GC,z3e,jzr,Dzr,Ooe,Gzr,Ozr,Vzr,OC,W3e,Xzr,zzr,Voe,Wzr,Qzr,Uzr,VC,Q3e,Hzr,Jzr,Xoe,Yzr,Kzr,Zzr,XC,U3e,eWr,oWr,zoe,rWr,tWr,aWr,zC,H3e,nWr,sWr,Woe,lWr,iWr,dWr,WC,THe,df,QC,J3e,uk,cWr,Y3e,fWr,MHe,ur,bk,mWr,cf,gWr,Qoe,hWr,pWr,Uoe,_Wr,uWr,bWr,vk,vWr,K3e,FWr,TWr,MWr,Yt,Fk,EWr,Z3e,CWr,wWr,ff,AWr,e5e,LWr,yWr,Hoe,xWr,$Wr,kWr,UC,SWr,Wr,Tk,RWr,o5e,PWr,BWr,xn,IWr,r5e,NWr,qWr,t5e,jWr,DWr,a5e,GWr,OWr,VWr,n5e,HC,s5e,XWr,zWr,Joe,WWr,QWr,UWr,JC,EHe,mf,YC,l5e,Mk,HWr,i5e,JWr,CHe,br,Ek,YWr,gf,KWr,Yoe,ZWr,eQr,Koe,oQr,rQr,tQr,Ck,aQr,d5e,nQr,sQr,lQr,Kt,wk,iQr,c5e,dQr,cQr,hf,fQr,f5e,mQr,gQr,Zoe,hQr,pQr,_Qr,KC,uQr,Qr,Ak,bQr,m5e,vQr,FQr,$n,TQr,g5e,MQr,EQr,h5e,CQr,wQr,p5e,AQr,LQr,yQr,_5e,ZC,u5e,xQr,$Qr,ere,kQr,SQr,RQr,e3,wHe,pf,o3,b5e,Lk,PQr,v5e,BQr,AHe,vr,yk,IQr,_f,NQr,ore,qQr,jQr,rre,DQr,GQr,OQr,xk,VQr,F5e,XQr,zQr,WQr,Zt,$k,QQr,T5e,UQr,HQr,uf,JQr,M5e,YQr,KQr,tre,ZQr,eUr,oUr,r3,rUr,Ur,kk,tUr,E5e,aUr,nUr,kn,sUr,C5e,lUr,iUr,w5e,dUr,cUr,A5e,fUr,mUr,gUr,re,t3,L5e,hUr,pUr,are,_Ur,uUr,bUr,a3,y5e,vUr,FUr,nre,TUr,MUr,EUr,n3,x5e,CUr,wUr,sre,AUr,LUr,yUr,s3,$5e,xUr,$Ur,lre,kUr,SUr,RUr,l3,k5e,PUr,BUr,ire,IUr,NUr,qUr,i3,S5e,jUr,DUr,dre,GUr,OUr,VUr,d3,R5e,XUr,zUr,cre,WUr,QUr,UUr,c3,P5e,HUr,JUr,fre,YUr,KUr,ZUr,f3,B5e,eHr,oHr,mre,rHr,tHr,aHr,m3,I5e,nHr,sHr,gre,lHr,iHr,dHr,g3,N5e,cHr,fHr,hre,mHr,gHr,hHr,h3,q5e,pHr,_Hr,pre,uHr,bHr,vHr,p3,j5e,FHr,THr,_re,MHr,EHr,CHr,_3,D5e,wHr,AHr,ure,LHr,yHr,xHr,u3,G5e,$Hr,kHr,bre,SHr,RHr,PHr,b3,O5e,BHr,IHr,vre,NHr,qHr,jHr,v3,V5e,DHr,GHr,Fre,OHr,VHr,XHr,F3,X5e,zHr,WHr,Tre,QHr,UHr,HHr,T3,z5e,JHr,YHr,Mre,KHr,ZHr,eJr,M3,W5e,oJr,rJr,Ere,tJr,aJr,nJr,E3,Q5e,sJr,lJr,Cre,iJr,dJr,cJr,C3,U5e,fJr,mJr,wre,gJr,hJr,pJr,w3,H5e,_Jr,uJr,Are,bJr,vJr,FJr,A3,J5e,TJr,MJr,Lre,EJr,CJr,wJr,L3,Y5e,AJr,LJr,yre,yJr,xJr,$Jr,y3,K5e,kJr,SJr,xre,RJr,PJr,BJr,x3,Z5e,IJr,NJr,$re,qJr,jJr,DJr,$3,LHe,bf,k3,e0e,Sk,GJr,o0e,OJr,yHe,Fr,Rk,VJr,vf,XJr,kre,zJr,WJr,Sre,QJr,UJr,HJr,Pk,JJr,r0e,YJr,KJr,ZJr,ea,Bk,eYr,t0e,oYr,rYr,Ff,tYr,a0e,aYr,nYr,Rre,sYr,lYr,iYr,S3,dYr,Hr,Ik,cYr,n0e,fYr,mYr,Sn,gYr,s0e,hYr,pYr,l0e,_Yr,uYr,i0e,bYr,vYr,FYr,xe,R3,d0e,TYr,MYr,Pre,EYr,CYr,wYr,P3,c0e,AYr,LYr,Bre,yYr,xYr,$Yr,B3,f0e,kYr,SYr,Ire,RYr,PYr,BYr,I3,m0e,IYr,NYr,Nre,qYr,jYr,DYr,N3,g0e,GYr,OYr,qre,VYr,XYr,zYr,q3,h0e,WYr,QYr,jre,UYr,HYr,JYr,j3,p0e,YYr,KYr,Dre,ZYr,eKr,oKr,D3,_0e,rKr,tKr,Gre,aKr,nKr,sKr,G3,u0e,lKr,iKr,Ore,dKr,cKr,fKr,O3,b0e,mKr,gKr,Vre,hKr,pKr,_Kr,V3,xHe,Tf,X3,v0e,Nk,uKr,F0e,bKr,$He,Tr,qk,vKr,Mf,FKr,Xre,TKr,MKr,zre,EKr,CKr,wKr,jk,AKr,T0e,LKr,yKr,xKr,oa,Dk,$Kr,M0e,kKr,SKr,Ef,RKr,E0e,PKr,BKr,Wre,IKr,NKr,qKr,z3,jKr,Jr,Gk,DKr,C0e,GKr,OKr,Rn,VKr,w0e,XKr,zKr,A0e,WKr,QKr,L0e,UKr,HKr,JKr,Ee,W3,y0e,YKr,KKr,Qre,ZKr,eZr,oZr,Q3,x0e,rZr,tZr,Ure,aZr,nZr,sZr,U3,$0e,lZr,iZr,Hre,dZr,cZr,fZr,H3,k0e,mZr,gZr,Jre,hZr,pZr,_Zr,J3,S0e,uZr,bZr,Yre,vZr,FZr,TZr,Y3,R0e,MZr,EZr,Kre,CZr,wZr,AZr,K3,P0e,LZr,yZr,Zre,xZr,$Zr,kZr,Z3,B0e,SZr,RZr,ete,PZr,BZr,IZr,e5,I0e,NZr,qZr,ote,jZr,DZr,GZr,o5,N0e,OZr,VZr,rte,XZr,zZr,WZr,r5,q0e,QZr,UZr,tte,HZr,JZr,YZr,t5,j0e,KZr,ZZr,ate,eet,oet,ret,a5,D0e,tet,aet,nte,net,set,iet,n5,kHe,Cf,s5,G0e,Ok,det,O0e,cet,SHe,Mr,Vk,fet,wf,met,ste,get,het,lte,pet,_et,uet,Xk,bet,V0e,vet,Fet,Tet,ra,zk,Met,X0e,Eet,Cet,Af,wet,z0e,Aet,Let,ite,yet,xet,$et,l5,ket,Yr,Wk,Set,W0e,Ret,Pet,Pn,Bet,Q0e,Iet,Net,U0e,qet,jet,H0e,Det,Get,Oet,$e,i5,J0e,Vet,Xet,dte,zet,Wet,Qet,d5,Y0e,Uet,Het,cte,Jet,Yet,Ket,c5,K0e,Zet,eot,fte,oot,rot,tot,f5,Z0e,aot,not,mte,sot,lot,iot,m5,ewe,dot,cot,gte,fot,mot,got,g5,owe,hot,pot,hte,_ot,uot,bot,h5,rwe,vot,Fot,pte,Tot,Mot,Eot,p5,twe,Cot,wot,_te,Aot,Lot,yot,_5,awe,xot,$ot,ute,kot,Sot,Rot,u5,nwe,Pot,Bot,bte,Iot,Not,qot,b5,RHe,Lf,v5,swe,Qk,jot,lwe,Dot,PHe,Er,Uk,Got,yf,Oot,vte,Vot,Xot,Fte,zot,Wot,Qot,Hk,Uot,iwe,Hot,Jot,Yot,ta,Jk,Kot,dwe,Zot,ert,xf,ort,cwe,rrt,trt,Tte,art,nrt,srt,F5,lrt,Kr,Yk,irt,fwe,drt,crt,Bn,frt,mwe,mrt,grt,gwe,hrt,prt,hwe,_rt,urt,brt,ke,T5,pwe,vrt,Frt,Mte,Trt,Mrt,Ert,M5,_we,Crt,wrt,Ete,Art,Lrt,yrt,E5,uwe,xrt,$rt,Cte,krt,Srt,Rrt,C5,bwe,Prt,Brt,wte,Irt,Nrt,qrt,w5,vwe,jrt,Drt,Ate,Grt,Ort,Vrt,A5,Fwe,Xrt,zrt,Lte,Wrt,Qrt,Urt,L5,Twe,Hrt,Jrt,yte,Yrt,Krt,Zrt,y5,Mwe,ett,ott,xte,rtt,ttt,att,x5,Ewe,ntt,stt,$te,ltt,itt,dtt,$5,Cwe,ctt,ftt,kte,mtt,gtt,htt,k5,BHe,$f,S5,wwe,Kk,ptt,Awe,_tt,IHe,Cr,Zk,utt,kf,btt,Ste,vtt,Ftt,Rte,Ttt,Mtt,Ett,eS,Ctt,Lwe,wtt,Att,Ltt,aa,oS,ytt,ywe,xtt,$tt,Sf,ktt,xwe,Stt,Rtt,Pte,Ptt,Btt,Itt,R5,Ntt,Zr,rS,qtt,$we,jtt,Dtt,In,Gtt,kwe,Ott,Vtt,Swe,Xtt,ztt,Rwe,Wtt,Qtt,Utt,Se,P5,Pwe,Htt,Jtt,Bte,Ytt,Ktt,Ztt,B5,Bwe,eat,oat,Ite,rat,tat,aat,I5,Iwe,nat,sat,Nte,lat,iat,dat,N5,Nwe,cat,fat,qte,mat,gat,hat,q5,qwe,pat,_at,jte,uat,bat,vat,j5,jwe,Fat,Tat,Dte,Mat,Eat,Cat,D5,Dwe,wat,Aat,Gte,Lat,yat,xat,G5,Gwe,$at,kat,Ote,Sat,Rat,Pat,O5,Owe,Bat,Iat,Vte,Nat,qat,jat,V5,Vwe,Dat,Gat,Xte,Oat,Vat,Xat,X5,NHe,Rf,z5,Xwe,tS,zat,zwe,Wat,qHe,wr,aS,Qat,Pf,Uat,zte,Hat,Jat,Wte,Yat,Kat,Zat,nS,ent,Wwe,ont,rnt,tnt,na,sS,ant,Qwe,nnt,snt,Bf,lnt,Uwe,int,dnt,Qte,cnt,fnt,mnt,W5,gnt,et,lS,hnt,Hwe,pnt,_nt,Nn,unt,Jwe,bnt,vnt,Ywe,Fnt,Tnt,Kwe,Mnt,Ent,Cnt,Re,Q5,Zwe,wnt,Ant,Ute,Lnt,ynt,xnt,U5,eAe,$nt,knt,Hte,Snt,Rnt,Pnt,H5,oAe,Bnt,Int,Jte,Nnt,qnt,jnt,J5,rAe,Dnt,Gnt,Yte,Ont,Vnt,Xnt,Y5,tAe,znt,Wnt,Kte,Qnt,Unt,Hnt,K5,aAe,Jnt,Ynt,Zte,Knt,Znt,est,Z5,nAe,ost,rst,eae,tst,ast,nst,e0,sAe,sst,lst,oae,ist,dst,cst,o0,lAe,fst,mst,rae,gst,hst,pst,r0,iAe,_st,ust,tae,bst,vst,Fst,t0,jHe,If,a0,dAe,iS,Tst,cAe,Mst,DHe,Ar,dS,Est,Nf,Cst,aae,wst,Ast,nae,Lst,yst,xst,cS,$st,fAe,kst,Sst,Rst,sa,fS,Pst,mAe,Bst,Ist,qf,Nst,gAe,qst,jst,sae,Dst,Gst,Ost,n0,Vst,ot,mS,Xst,hAe,zst,Wst,qn,Qst,pAe,Ust,Hst,_Ae,Jst,Yst,uAe,Kst,Zst,elt,Xe,s0,bAe,olt,rlt,lae,tlt,alt,nlt,l0,vAe,slt,llt,iae,ilt,dlt,clt,i0,FAe,flt,mlt,dae,glt,hlt,plt,d0,TAe,_lt,ult,cae,blt,vlt,Flt,c0,MAe,Tlt,Mlt,fae,Elt,Clt,wlt,f0,EAe,Alt,Llt,mae,ylt,xlt,$lt,m0,CAe,klt,Slt,gae,Rlt,Plt,Blt,g0,wAe,Ilt,Nlt,hae,qlt,jlt,Dlt,h0,GHe,jf,p0,AAe,gS,Glt,LAe,Olt,OHe,Lr,hS,Vlt,Df,Xlt,pae,zlt,Wlt,_ae,Qlt,Ult,Hlt,pS,Jlt,yAe,Ylt,Klt,Zlt,la,_S,eit,xAe,oit,rit,Gf,tit,$Ae,ait,nit,uae,sit,lit,iit,_0,dit,rt,uS,cit,kAe,fit,mit,jn,git,SAe,hit,pit,RAe,_it,uit,PAe,bit,vit,Fit,ze,u0,BAe,Tit,Mit,bae,Eit,Cit,wit,b0,IAe,Ait,Lit,vae,yit,xit,$it,v0,NAe,kit,Sit,Fae,Rit,Pit,Bit,F0,qAe,Iit,Nit,Tae,qit,jit,Dit,T0,jAe,Git,Oit,Mae,Vit,Xit,zit,M0,DAe,Wit,Qit,Eae,Uit,Hit,Jit,E0,GAe,Yit,Kit,Cae,Zit,edt,odt,C0,OAe,rdt,tdt,wae,adt,ndt,sdt,w0,VHe,Of,A0,VAe,bS,ldt,XAe,idt,XHe,yr,vS,ddt,Vf,cdt,Aae,fdt,mdt,Lae,gdt,hdt,pdt,FS,_dt,zAe,udt,bdt,vdt,ia,TS,Fdt,WAe,Tdt,Mdt,Xf,Edt,QAe,Cdt,wdt,yae,Adt,Ldt,ydt,L0,xdt,tt,MS,$dt,UAe,kdt,Sdt,Dn,Rdt,HAe,Pdt,Bdt,JAe,Idt,Ndt,YAe,qdt,jdt,Ddt,KAe,y0,ZAe,Gdt,Odt,xae,Vdt,Xdt,zdt,x0,zHe,zf,$0,eLe,ES,Wdt,oLe,Qdt,WHe,xr,CS,Udt,Wf,Hdt,$ae,Jdt,Ydt,kae,Kdt,Zdt,ect,wS,oct,rLe,rct,tct,act,da,AS,nct,tLe,sct,lct,Qf,ict,aLe,dct,cct,Sae,fct,mct,gct,k0,hct,at,LS,pct,nLe,_ct,uct,Gn,bct,sLe,vct,Fct,lLe,Tct,Mct,iLe,Ect,Cct,wct,yS,S0,dLe,Act,Lct,Rae,yct,xct,$ct,R0,cLe,kct,Sct,Pae,Rct,Pct,Bct,P0,QHe,Uf,B0,fLe,xS,Ict,mLe,Nct,UHe,$r,$S,qct,Hf,jct,Bae,Dct,Gct,Iae,Oct,Vct,Xct,kS,zct,gLe,Wct,Qct,Uct,ca,SS,Hct,hLe,Jct,Yct,Jf,Kct,pLe,Zct,eft,Nae,oft,rft,tft,I0,aft,nt,RS,nft,_Le,sft,lft,On,ift,uLe,dft,cft,bLe,fft,mft,vLe,gft,hft,pft,FLe,N0,TLe,_ft,uft,qae,bft,vft,Fft,q0,HHe;return d=new oe({}),ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),gL=new oe({}),hL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),nm=new Tft({props:{warning:!0,$$slots:{default:[qra]},$$scope:{ctx:$}}}),pL=new oe({}),_L=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/configuration_auto.py#L625"}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/configuration_auto.py#L648"}}),Th=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[jra]},$$scope:{ctx:$}}}),FL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/configuration_auto.py#L771"}}),TL=new oe({}),ML=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/tokenization_auto.py#L418"}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18697/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/tokenization_auto.py#L432"}}),tp=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Dra]},$$scope:{ctx:$}}}),AL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/tokenization_auto.py#L633"}}),LL=new oe({}),yL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18697/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),Xp=new Tft({props:{$$slots:{default:[Gra]},$$scope:{ctx:$}}}),zp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Ora]},$$scope:{ctx:$}}}),SL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),RL=new oe({}),PL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/processing_auto.py#L91"}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/processing_auto.py#L105"}}),h_=new Tft({props:{$$slots:{default:[Vra]},$$scope:{ctx:$}}}),p_=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Xra]},$$scope:{ctx:$}}}),qL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/processing_auto.py#L258"}}),jL=new oe({}),DL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L808"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),b_=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[zra]},$$scope:{ctx:$}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),L1=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Wra]},$$scope:{ctx:$}}}),XL=new oe({}),zL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L815"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),x1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Qra]},$$scope:{ctx:$}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),C2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Ura]},$$scope:{ctx:$}}}),HL=new oe({}),JL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L830"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),A2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Hra]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),hb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Jra]},$$scope:{ctx:$}}}),ey=new oe({}),oy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L837"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),_b=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Yra]},$$scope:{ctx:$}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),rv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Kra]},$$scope:{ctx:$}}}),ny=new oe({}),sy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L844"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),av=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Zra]},$$scope:{ctx:$}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[eta]},$$scope:{ctx:$}}}),cy=new oe({}),fy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L853"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[ota]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),L6=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[rta]},$$scope:{ctx:$}}}),py=new oe({}),_y=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L898"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),x6=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[tta]},$$scope:{ctx:$}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ata]},$$scope:{ctx:$}}}),Fy=new oe({}),Ty=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L905"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[nta]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[sta]},$$scope:{ctx:$}}}),wy=new oe({}),Ay=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L891"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[lta]},$$scope:{ctx:$}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ita]},$$scope:{ctx:$}}}),$y=new oe({}),ky=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L862"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dta]},$$scope:{ctx:$}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cta]},$$scope:{ctx:$}}}),By=new oe({}),Iy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L869"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[fta]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[mta]},$$scope:{ctx:$}}}),Dy=new oe({}),Gy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L914"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18697/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[gta]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),T7=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[hta]},$$scope:{ctx:$}}}),zy=new oe({}),Wy=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L953"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),E7=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[pta]},$$scope:{ctx:$}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),A7=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[_ta]},$$scope:{ctx:$}}}),Jy=new oe({}),Yy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L960"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),y7=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[uta]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bta]},$$scope:{ctx:$}}}),ox=new oe({}),rx=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L880"}}),ax=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[vta]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Fta]},$$scope:{ctx:$}}}),sx=new oe({}),lx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L967"}}),dx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Tta]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),H7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Mta]},$$scope:{ctx:$}}}),fx=new oe({}),mx=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L990"}}),hx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),Y7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Eta]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Cta]},$$scope:{ctx:$}}}),_x=new oe({}),ux=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L974"}}),vx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[wta]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Ata]},$$scope:{ctx:$}}}),Tx=new oe({}),Mx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L981"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Lta]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),C8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[yta]},$$scope:{ctx:$}}}),Lx=new oe({}),yx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L999"}}),$x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),A8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[xta]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),R8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[$ta]},$$scope:{ctx:$}}}),Sx=new oe({}),Rx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L1006"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),B8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[kta]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),G8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Sta]},$$scope:{ctx:$}}}),Nx=new oe({}),qx=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L946"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),V8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Rta]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),Q8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Pta]},$$scope:{ctx:$}}}),Vx=new oe({}),Xx=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L921"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),H8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Bta]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),K8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Ita]},$$scope:{ctx:$}}}),Ux=new oe({}),Hx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L928"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),e9=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Nta]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),l9=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[qta]},$$scope:{ctx:$}}}),Zx=new oe({}),e$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_auto.py#L937"}}),r$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),d9=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[jta]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),m9=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Dta]},$$scope:{ctx:$}}}),a$=new oe({}),n$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),l$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),h9=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Gta]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Ota]},$$scope:{ctx:$}}}),d$=new oe({}),c$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),m$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),gM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Vta]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Xta]},$$scope:{ctx:$}}}),h$=new oe({}),p$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),u$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),jM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[zta]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Wta]},$$scope:{ctx:$}}}),v$=new oe({}),F$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),M$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18697/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Qta]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Uta]},$$scope:{ctx:$}}}),C$=new oe({}),w$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L463"}}),L$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Hta]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Jta]},$$scope:{ctx:$}}}),$$=new oe({}),k$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),R$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Yta]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Kta]},$$scope:{ctx:$}}}),B$=new oe({}),I$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),q$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Zta]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[eaa]},$$scope:{ctx:$}}}),D$=new oe({}),G$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),V$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[oaa]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[raa]},$$scope:{ctx:$}}}),z$=new oe({}),W$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),U$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[taa]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[aaa]},$$scope:{ctx:$}}}),J$=new oe({}),Y$=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[naa]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[saa]},$$scope:{ctx:$}}}),rk=new oe({}),tk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),nk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[laa]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[iaa]},$$scope:{ctx:$}}}),lk=new oe({}),ik=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),ck=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[daa]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[caa]},$$scope:{ctx:$}}}),mk=new oe({}),gk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),pk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[faa]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[maa]},$$scope:{ctx:$}}}),uk=new oe({}),bk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),Fk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[gaa]},$$scope:{ctx:$}}}),Tk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[haa]},$$scope:{ctx:$}}}),Mk=new oe({}),Ek=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),wk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[paa]},$$scope:{ctx:$}}}),Ak=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[_aa]},$$scope:{ctx:$}}}),Lk=new oe({}),yk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),$k=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[uaa]},$$scope:{ctx:$}}}),kk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[baa]},$$scope:{ctx:$}}}),Sk=new oe({}),Rk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[vaa]},$$scope:{ctx:$}}}),Ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Faa]},$$scope:{ctx:$}}}),Nk=new oe({}),qk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Dk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Taa]},$$scope:{ctx:$}}}),Gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Maa]},$$scope:{ctx:$}}}),Ok=new oe({}),Vk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),zk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Eaa]},$$scope:{ctx:$}}}),Wk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Caa]},$$scope:{ctx:$}}}),Qk=new oe({}),Uk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Jk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[waa]},$$scope:{ctx:$}}}),Yk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Aaa]},$$scope:{ctx:$}}}),Kk=new oe({}),Zk=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),oS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Laa]},$$scope:{ctx:$}}}),rS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[yaa]},$$scope:{ctx:$}}}),tS=new oe({}),aS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),sS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[xaa]},$$scope:{ctx:$}}}),lS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[$aa]},$$scope:{ctx:$}}}),iS=new oe({}),dS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),fS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[kaa]},$$scope:{ctx:$}}}),mS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Saa]},$$scope:{ctx:$}}}),gS=new oe({}),hS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),_S=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Raa]},$$scope:{ctx:$}}}),uS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Paa]},$$scope:{ctx:$}}}),bS=new oe({}),vS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),TS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Baa]},$$scope:{ctx:$}}}),MS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Iaa]},$$scope:{ctx:$}}}),ES=new oe({}),CS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),AS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Naa]},$$scope:{ctx:$}}}),LS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qaa]},$$scope:{ctx:$}}}),xS=new oe({}),$S=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),SS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18697/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18697/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[jaa]},$$scope:{ctx:$}}}),RS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18697/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18697/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18697/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Daa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),em=l(),ft=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),dL=o("from_pretrained()"),om=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),zi=o("Instantiating one of "),Xn=a("a"),cL=o("AutoConfig"),zn=o(", "),Wn=a("a"),fL=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),mL=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),rm=l(),F(ja.$$.fragment),Ue=l(),Ae=a("p"),tP=o("will create a model that is an instance of "),Ui=a("a"),aP=o("BertModel"),nP=o("."),Lo=l(),Da=a("p"),sP=o("There is one class of "),tm=a("code"),lP=o("AutoModel"),cKe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),DQe=l(),Hi=a("h2"),am=a("a"),Ise=a("span"),F(gL.$$.fragment),fKe=l(),Nse=a("span"),mKe=o("Extending the Auto Classes"),GQe=l(),Un=a("p"),gKe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qse=a("code"),hKe=o("NewModel"),pKe=o(", make sure you have a "),jse=a("code"),_Ke=o("NewModelConfig"),uKe=o(` then you can add those to the auto
classes like this:`),OQe=l(),F(hL.$$.fragment),VQe=l(),iP=a("p"),bKe=o("You will then be able to use the auto classes like you would usually do!"),XQe=l(),F(nm.$$.fragment),zQe=l(),Ji=a("h2"),sm=a("a"),Dse=a("span"),F(pL.$$.fragment),vKe=l(),Gse=a("span"),FKe=o("AutoConfig"),WQe=l(),yo=a("div"),F(_L.$$.fragment),TKe=l(),uL=a("p"),MKe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),dP=a("a"),EKe=o("from_pretrained()"),CKe=o(" class method."),wKe=l(),bL=a("p"),AKe=o("This class cannot be instantiated directly using "),Ose=a("code"),LKe=o("__init__()"),yKe=o(" (throws an error)."),xKe=l(),kr=a("div"),F(vL.$$.fragment),$Ke=l(),Vse=a("p"),kKe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),SKe=l(),Yi=a("p"),RKe=o("The configuration class to instantiate is selected based on the "),Xse=a("code"),PKe=o("model_type"),BKe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zse=a("code"),IKe=o("pretrained_model_name_or_path"),NKe=o(":"),qKe=l(),A=a("ul"),lm=a("li"),Wse=a("strong"),jKe=o("albert"),DKe=o(" \u2014 "),cP=a("a"),GKe=o("AlbertConfig"),OKe=o(" (ALBERT model)"),VKe=l(),im=a("li"),Qse=a("strong"),XKe=o("bart"),zKe=o(" \u2014 "),fP=a("a"),WKe=o("BartConfig"),QKe=o(" (BART model)"),UKe=l(),dm=a("li"),Use=a("strong"),HKe=o("beit"),JKe=o(" \u2014 "),mP=a("a"),YKe=o("BeitConfig"),KKe=o(" (BEiT model)"),ZKe=l(),cm=a("li"),Hse=a("strong"),eZe=o("bert"),oZe=o(" \u2014 "),gP=a("a"),rZe=o("BertConfig"),tZe=o(" (BERT model)"),aZe=l(),fm=a("li"),Jse=a("strong"),nZe=o("bert-generation"),sZe=o(" \u2014 "),hP=a("a"),lZe=o("BertGenerationConfig"),iZe=o(" (Bert Generation model)"),dZe=l(),mm=a("li"),Yse=a("strong"),cZe=o("big_bird"),fZe=o(" \u2014 "),pP=a("a"),mZe=o("BigBirdConfig"),gZe=o(" (BigBird model)"),hZe=l(),gm=a("li"),Kse=a("strong"),pZe=o("bigbird_pegasus"),_Ze=o(" \u2014 "),_P=a("a"),uZe=o("BigBirdPegasusConfig"),bZe=o(" (BigBird-Pegasus model)"),vZe=l(),hm=a("li"),Zse=a("strong"),FZe=o("blenderbot"),TZe=o(" \u2014 "),uP=a("a"),MZe=o("BlenderbotConfig"),EZe=o(" (Blenderbot model)"),CZe=l(),pm=a("li"),ele=a("strong"),wZe=o("blenderbot-small"),AZe=o(" \u2014 "),bP=a("a"),LZe=o("BlenderbotSmallConfig"),yZe=o(" (BlenderbotSmall model)"),xZe=l(),_m=a("li"),ole=a("strong"),$Ze=o("bloom"),kZe=o(" \u2014 "),vP=a("a"),SZe=o("BloomConfig"),RZe=o(" (BLOOM model)"),PZe=l(),um=a("li"),rle=a("strong"),BZe=o("camembert"),IZe=o(" \u2014 "),FP=a("a"),NZe=o("CamembertConfig"),qZe=o(" (CamemBERT model)"),jZe=l(),bm=a("li"),tle=a("strong"),DZe=o("canine"),GZe=o(" \u2014 "),TP=a("a"),OZe=o("CanineConfig"),VZe=o(" (CANINE model)"),XZe=l(),vm=a("li"),ale=a("strong"),zZe=o("clip"),WZe=o(" \u2014 "),MP=a("a"),QZe=o("CLIPConfig"),UZe=o(" (CLIP model)"),HZe=l(),Fm=a("li"),nle=a("strong"),JZe=o("codegen"),YZe=o(" \u2014 "),EP=a("a"),KZe=o("CodeGenConfig"),ZZe=o(" (CodeGen model)"),eeo=l(),Tm=a("li"),sle=a("strong"),oeo=o("convbert"),reo=o(" \u2014 "),CP=a("a"),teo=o("ConvBertConfig"),aeo=o(" (ConvBERT model)"),neo=l(),Mm=a("li"),lle=a("strong"),seo=o("convnext"),leo=o(" \u2014 "),wP=a("a"),ieo=o("ConvNextConfig"),deo=o(" (ConvNeXT model)"),ceo=l(),Em=a("li"),ile=a("strong"),feo=o("ctrl"),meo=o(" \u2014 "),AP=a("a"),geo=o("CTRLConfig"),heo=o(" (CTRL model)"),peo=l(),Cm=a("li"),dle=a("strong"),_eo=o("cvt"),ueo=o(" \u2014 "),LP=a("a"),beo=o("CvtConfig"),veo=o(" (CvT model)"),Feo=l(),wm=a("li"),cle=a("strong"),Teo=o("data2vec-audio"),Meo=o(" \u2014 "),yP=a("a"),Eeo=o("Data2VecAudioConfig"),Ceo=o(" (Data2VecAudio model)"),weo=l(),Am=a("li"),fle=a("strong"),Aeo=o("data2vec-text"),Leo=o(" \u2014 "),xP=a("a"),yeo=o("Data2VecTextConfig"),xeo=o(" (Data2VecText model)"),$eo=l(),Lm=a("li"),mle=a("strong"),keo=o("data2vec-vision"),Seo=o(" \u2014 "),$P=a("a"),Reo=o("Data2VecVisionConfig"),Peo=o(" (Data2VecVision model)"),Beo=l(),ym=a("li"),gle=a("strong"),Ieo=o("deberta"),Neo=o(" \u2014 "),kP=a("a"),qeo=o("DebertaConfig"),jeo=o(" (DeBERTa model)"),Deo=l(),xm=a("li"),hle=a("strong"),Geo=o("deberta-v2"),Oeo=o(" \u2014 "),SP=a("a"),Veo=o("DebertaV2Config"),Xeo=o(" (DeBERTa-v2 model)"),zeo=l(),$m=a("li"),ple=a("strong"),Weo=o("decision_transformer"),Qeo=o(" \u2014 "),RP=a("a"),Ueo=o("DecisionTransformerConfig"),Heo=o(" (Decision Transformer model)"),Jeo=l(),km=a("li"),_le=a("strong"),Yeo=o("deit"),Keo=o(" \u2014 "),PP=a("a"),Zeo=o("DeiTConfig"),eoo=o(" (DeiT model)"),ooo=l(),Sm=a("li"),ule=a("strong"),roo=o("detr"),too=o(" \u2014 "),BP=a("a"),aoo=o("DetrConfig"),noo=o(" (DETR model)"),soo=l(),Rm=a("li"),ble=a("strong"),loo=o("distilbert"),ioo=o(" \u2014 "),IP=a("a"),doo=o("DistilBertConfig"),coo=o(" (DistilBERT model)"),foo=l(),Pm=a("li"),vle=a("strong"),moo=o("donut-swin"),goo=o(" \u2014 "),NP=a("a"),hoo=o("DonutSwinConfig"),poo=o(" (DonutSwin model)"),_oo=l(),Bm=a("li"),Fle=a("strong"),uoo=o("dpr"),boo=o(" \u2014 "),qP=a("a"),voo=o("DPRConfig"),Foo=o(" (DPR model)"),Too=l(),Im=a("li"),Tle=a("strong"),Moo=o("dpt"),Eoo=o(" \u2014 "),jP=a("a"),Coo=o("DPTConfig"),woo=o(" (DPT model)"),Aoo=l(),Nm=a("li"),Mle=a("strong"),Loo=o("electra"),yoo=o(" \u2014 "),DP=a("a"),xoo=o("ElectraConfig"),$oo=o(" (ELECTRA model)"),koo=l(),qm=a("li"),Ele=a("strong"),Soo=o("encoder-decoder"),Roo=o(" \u2014 "),GP=a("a"),Poo=o("EncoderDecoderConfig"),Boo=o(" (Encoder decoder model)"),Ioo=l(),jm=a("li"),Cle=a("strong"),Noo=o("flaubert"),qoo=o(" \u2014 "),OP=a("a"),joo=o("FlaubertConfig"),Doo=o(" (FlauBERT model)"),Goo=l(),Dm=a("li"),wle=a("strong"),Ooo=o("flava"),Voo=o(" \u2014 "),VP=a("a"),Xoo=o("FlavaConfig"),zoo=o(" (FLAVA model)"),Woo=l(),Gm=a("li"),Ale=a("strong"),Qoo=o("fnet"),Uoo=o(" \u2014 "),XP=a("a"),Hoo=o("FNetConfig"),Joo=o(" (FNet model)"),Yoo=l(),Om=a("li"),Lle=a("strong"),Koo=o("fsmt"),Zoo=o(" \u2014 "),zP=a("a"),ero=o("FSMTConfig"),oro=o(" (FairSeq Machine-Translation model)"),rro=l(),Vm=a("li"),yle=a("strong"),tro=o("funnel"),aro=o(" \u2014 "),WP=a("a"),nro=o("FunnelConfig"),sro=o(" (Funnel Transformer model)"),lro=l(),Xm=a("li"),xle=a("strong"),iro=o("glpn"),dro=o(" \u2014 "),QP=a("a"),cro=o("GLPNConfig"),fro=o(" (GLPN model)"),mro=l(),zm=a("li"),$le=a("strong"),gro=o("gpt2"),hro=o(" \u2014 "),UP=a("a"),pro=o("GPT2Config"),_ro=o(" (OpenAI GPT-2 model)"),uro=l(),Wm=a("li"),kle=a("strong"),bro=o("gpt_neo"),vro=o(" \u2014 "),HP=a("a"),Fro=o("GPTNeoConfig"),Tro=o(" (GPT Neo model)"),Mro=l(),Qm=a("li"),Sle=a("strong"),Ero=o("gpt_neox"),Cro=o(" \u2014 "),JP=a("a"),wro=o("GPTNeoXConfig"),Aro=o(" (GPT NeoX model)"),Lro=l(),Um=a("li"),Rle=a("strong"),yro=o("gptj"),xro=o(" \u2014 "),YP=a("a"),$ro=o("GPTJConfig"),kro=o(" (GPT-J model)"),Sro=l(),Hm=a("li"),Ple=a("strong"),Rro=o("groupvit"),Pro=o(" \u2014 "),KP=a("a"),Bro=o("GroupViTConfig"),Iro=o(" (GroupViT model)"),Nro=l(),Jm=a("li"),Ble=a("strong"),qro=o("hubert"),jro=o(" \u2014 "),ZP=a("a"),Dro=o("HubertConfig"),Gro=o(" (Hubert model)"),Oro=l(),Ym=a("li"),Ile=a("strong"),Vro=o("ibert"),Xro=o(" \u2014 "),eB=a("a"),zro=o("IBertConfig"),Wro=o(" (I-BERT model)"),Qro=l(),Km=a("li"),Nle=a("strong"),Uro=o("imagegpt"),Hro=o(" \u2014 "),oB=a("a"),Jro=o("ImageGPTConfig"),Yro=o(" (ImageGPT model)"),Kro=l(),Zm=a("li"),qle=a("strong"),Zro=o("layoutlm"),eto=o(" \u2014 "),rB=a("a"),oto=o("LayoutLMConfig"),rto=o(" (LayoutLM model)"),tto=l(),eg=a("li"),jle=a("strong"),ato=o("layoutlmv2"),nto=o(" \u2014 "),tB=a("a"),sto=o("LayoutLMv2Config"),lto=o(" (LayoutLMv2 model)"),ito=l(),og=a("li"),Dle=a("strong"),dto=o("layoutlmv3"),cto=o(" \u2014 "),aB=a("a"),fto=o("LayoutLMv3Config"),mto=o(" (LayoutLMv3 model)"),gto=l(),rg=a("li"),Gle=a("strong"),hto=o("led"),pto=o(" \u2014 "),nB=a("a"),_to=o("LEDConfig"),uto=o(" (LED model)"),bto=l(),tg=a("li"),Ole=a("strong"),vto=o("levit"),Fto=o(" \u2014 "),sB=a("a"),Tto=o("LevitConfig"),Mto=o(" (LeViT model)"),Eto=l(),ag=a("li"),Vle=a("strong"),Cto=o("longformer"),wto=o(" \u2014 "),lB=a("a"),Ato=o("LongformerConfig"),Lto=o(" (Longformer model)"),yto=l(),ng=a("li"),Xle=a("strong"),xto=o("longt5"),$to=o(" \u2014 "),iB=a("a"),kto=o("LongT5Config"),Sto=o(" (LongT5 model)"),Rto=l(),sg=a("li"),zle=a("strong"),Pto=o("luke"),Bto=o(" \u2014 "),dB=a("a"),Ito=o("LukeConfig"),Nto=o(" (LUKE model)"),qto=l(),lg=a("li"),Wle=a("strong"),jto=o("lxmert"),Dto=o(" \u2014 "),cB=a("a"),Gto=o("LxmertConfig"),Oto=o(" (LXMERT model)"),Vto=l(),ig=a("li"),Qle=a("strong"),Xto=o("m2m_100"),zto=o(" \u2014 "),fB=a("a"),Wto=o("M2M100Config"),Qto=o(" (M2M100 model)"),Uto=l(),dg=a("li"),Ule=a("strong"),Hto=o("marian"),Jto=o(" \u2014 "),mB=a("a"),Yto=o("MarianConfig"),Kto=o(" (Marian model)"),Zto=l(),cg=a("li"),Hle=a("strong"),eao=o("maskformer"),oao=o(" \u2014 "),gB=a("a"),rao=o("MaskFormerConfig"),tao=o(" (MaskFormer model)"),aao=l(),fg=a("li"),Jle=a("strong"),nao=o("mbart"),sao=o(" \u2014 "),hB=a("a"),lao=o("MBartConfig"),iao=o(" (mBART model)"),dao=l(),mg=a("li"),Yle=a("strong"),cao=o("mctct"),fao=o(" \u2014 "),pB=a("a"),mao=o("MCTCTConfig"),gao=o(" (M-CTC-T model)"),hao=l(),gg=a("li"),Kle=a("strong"),pao=o("megatron-bert"),_ao=o(" \u2014 "),_B=a("a"),uao=o("MegatronBertConfig"),bao=o(" (Megatron-BERT model)"),vao=l(),hg=a("li"),Zle=a("strong"),Fao=o("mobilebert"),Tao=o(" \u2014 "),uB=a("a"),Mao=o("MobileBertConfig"),Eao=o(" (MobileBERT model)"),Cao=l(),pg=a("li"),eie=a("strong"),wao=o("mobilevit"),Aao=o(" \u2014 "),bB=a("a"),Lao=o("MobileViTConfig"),yao=o(" (MobileViT model)"),xao=l(),_g=a("li"),oie=a("strong"),$ao=o("mpnet"),kao=o(" \u2014 "),vB=a("a"),Sao=o("MPNetConfig"),Rao=o(" (MPNet model)"),Pao=l(),ug=a("li"),rie=a("strong"),Bao=o("mt5"),Iao=o(" \u2014 "),FB=a("a"),Nao=o("MT5Config"),qao=o(" (MT5 model)"),jao=l(),bg=a("li"),tie=a("strong"),Dao=o("mvp"),Gao=o(" \u2014 "),TB=a("a"),Oao=o("MvpConfig"),Vao=o(" (MVP model)"),Xao=l(),vg=a("li"),aie=a("strong"),zao=o("nezha"),Wao=o(" \u2014 "),MB=a("a"),Qao=o("NezhaConfig"),Uao=o(" (Nezha model)"),Hao=l(),Fg=a("li"),nie=a("strong"),Jao=o("nystromformer"),Yao=o(" \u2014 "),EB=a("a"),Kao=o("NystromformerConfig"),Zao=o(" (Nystr\xF6mformer model)"),eno=l(),Tg=a("li"),sie=a("strong"),ono=o("openai-gpt"),rno=o(" \u2014 "),CB=a("a"),tno=o("OpenAIGPTConfig"),ano=o(" (OpenAI GPT model)"),nno=l(),Mg=a("li"),lie=a("strong"),sno=o("opt"),lno=o(" \u2014 "),wB=a("a"),ino=o("OPTConfig"),dno=o(" (OPT model)"),cno=l(),Eg=a("li"),iie=a("strong"),fno=o("owlvit"),mno=o(" \u2014 "),AB=a("a"),gno=o("OwlViTConfig"),hno=o(" (OWL-ViT model)"),pno=l(),Cg=a("li"),die=a("strong"),_no=o("pegasus"),uno=o(" \u2014 "),LB=a("a"),bno=o("PegasusConfig"),vno=o(" (Pegasus model)"),Fno=l(),wg=a("li"),cie=a("strong"),Tno=o("perceiver"),Mno=o(" \u2014 "),yB=a("a"),Eno=o("PerceiverConfig"),Cno=o(" (Perceiver model)"),wno=l(),Ag=a("li"),fie=a("strong"),Ano=o("plbart"),Lno=o(" \u2014 "),xB=a("a"),yno=o("PLBartConfig"),xno=o(" (PLBart model)"),$no=l(),Lg=a("li"),mie=a("strong"),kno=o("poolformer"),Sno=o(" \u2014 "),$B=a("a"),Rno=o("PoolFormerConfig"),Pno=o(" (PoolFormer model)"),Bno=l(),yg=a("li"),gie=a("strong"),Ino=o("prophetnet"),Nno=o(" \u2014 "),kB=a("a"),qno=o("ProphetNetConfig"),jno=o(" (ProphetNet model)"),Dno=l(),xg=a("li"),hie=a("strong"),Gno=o("qdqbert"),Ono=o(" \u2014 "),SB=a("a"),Vno=o("QDQBertConfig"),Xno=o(" (QDQBert model)"),zno=l(),$g=a("li"),pie=a("strong"),Wno=o("rag"),Qno=o(" \u2014 "),RB=a("a"),Uno=o("RagConfig"),Hno=o(" (RAG model)"),Jno=l(),kg=a("li"),_ie=a("strong"),Yno=o("realm"),Kno=o(" \u2014 "),PB=a("a"),Zno=o("RealmConfig"),eso=o(" (REALM model)"),oso=l(),Sg=a("li"),uie=a("strong"),rso=o("reformer"),tso=o(" \u2014 "),BB=a("a"),aso=o("ReformerConfig"),nso=o(" (Reformer model)"),sso=l(),Rg=a("li"),bie=a("strong"),lso=o("regnet"),iso=o(" \u2014 "),IB=a("a"),dso=o("RegNetConfig"),cso=o(" (RegNet model)"),fso=l(),Pg=a("li"),vie=a("strong"),mso=o("rembert"),gso=o(" \u2014 "),NB=a("a"),hso=o("RemBertConfig"),pso=o(" (RemBERT model)"),_so=l(),Bg=a("li"),Fie=a("strong"),uso=o("resnet"),bso=o(" \u2014 "),qB=a("a"),vso=o("ResNetConfig"),Fso=o(" (ResNet model)"),Tso=l(),Ig=a("li"),Tie=a("strong"),Mso=o("retribert"),Eso=o(" \u2014 "),jB=a("a"),Cso=o("RetriBertConfig"),wso=o(" (RetriBERT model)"),Aso=l(),Ng=a("li"),Mie=a("strong"),Lso=o("roberta"),yso=o(" \u2014 "),DB=a("a"),xso=o("RobertaConfig"),$so=o(" (RoBERTa model)"),kso=l(),qg=a("li"),Eie=a("strong"),Sso=o("roformer"),Rso=o(" \u2014 "),GB=a("a"),Pso=o("RoFormerConfig"),Bso=o(" (RoFormer model)"),Iso=l(),jg=a("li"),Cie=a("strong"),Nso=o("segformer"),qso=o(" \u2014 "),OB=a("a"),jso=o("SegformerConfig"),Dso=o(" (SegFormer model)"),Gso=l(),Dg=a("li"),wie=a("strong"),Oso=o("sew"),Vso=o(" \u2014 "),VB=a("a"),Xso=o("SEWConfig"),zso=o(" (SEW model)"),Wso=l(),Gg=a("li"),Aie=a("strong"),Qso=o("sew-d"),Uso=o(" \u2014 "),XB=a("a"),Hso=o("SEWDConfig"),Jso=o(" (SEW-D model)"),Yso=l(),Og=a("li"),Lie=a("strong"),Kso=o("speech-encoder-decoder"),Zso=o(" \u2014 "),zB=a("a"),elo=o("SpeechEncoderDecoderConfig"),olo=o(" (Speech Encoder decoder model)"),rlo=l(),Vg=a("li"),yie=a("strong"),tlo=o("speech_to_text"),alo=o(" \u2014 "),WB=a("a"),nlo=o("Speech2TextConfig"),slo=o(" (Speech2Text model)"),llo=l(),Xg=a("li"),xie=a("strong"),ilo=o("speech_to_text_2"),dlo=o(" \u2014 "),QB=a("a"),clo=o("Speech2Text2Config"),flo=o(" (Speech2Text2 model)"),mlo=l(),zg=a("li"),$ie=a("strong"),glo=o("splinter"),hlo=o(" \u2014 "),UB=a("a"),plo=o("SplinterConfig"),_lo=o(" (Splinter model)"),ulo=l(),Wg=a("li"),kie=a("strong"),blo=o("squeezebert"),vlo=o(" \u2014 "),HB=a("a"),Flo=o("SqueezeBertConfig"),Tlo=o(" (SqueezeBERT model)"),Mlo=l(),Qg=a("li"),Sie=a("strong"),Elo=o("swin"),Clo=o(" \u2014 "),JB=a("a"),wlo=o("SwinConfig"),Alo=o(" (Swin Transformer model)"),Llo=l(),Ug=a("li"),Rie=a("strong"),ylo=o("swinv2"),xlo=o(" \u2014 "),YB=a("a"),$lo=o("Swinv2Config"),klo=o(" (Swin Transformer V2 model)"),Slo=l(),Hg=a("li"),Pie=a("strong"),Rlo=o("t5"),Plo=o(" \u2014 "),KB=a("a"),Blo=o("T5Config"),Ilo=o(" (T5 model)"),Nlo=l(),Jg=a("li"),Bie=a("strong"),qlo=o("tapas"),jlo=o(" \u2014 "),ZB=a("a"),Dlo=o("TapasConfig"),Glo=o(" (TAPAS model)"),Olo=l(),Yg=a("li"),Iie=a("strong"),Vlo=o("trajectory_transformer"),Xlo=o(" \u2014 "),eI=a("a"),zlo=o("TrajectoryTransformerConfig"),Wlo=o(" (Trajectory Transformer model)"),Qlo=l(),Kg=a("li"),Nie=a("strong"),Ulo=o("transfo-xl"),Hlo=o(" \u2014 "),oI=a("a"),Jlo=o("TransfoXLConfig"),Ylo=o(" (Transformer-XL model)"),Klo=l(),Zg=a("li"),qie=a("strong"),Zlo=o("trocr"),eio=o(" \u2014 "),rI=a("a"),oio=o("TrOCRConfig"),rio=o(" (TrOCR model)"),tio=l(),eh=a("li"),jie=a("strong"),aio=o("unispeech"),nio=o(" \u2014 "),tI=a("a"),sio=o("UniSpeechConfig"),lio=o(" (UniSpeech model)"),iio=l(),oh=a("li"),Die=a("strong"),dio=o("unispeech-sat"),cio=o(" \u2014 "),aI=a("a"),fio=o("UniSpeechSatConfig"),mio=o(" (UniSpeechSat model)"),gio=l(),rh=a("li"),Gie=a("strong"),hio=o("van"),pio=o(" \u2014 "),nI=a("a"),_io=o("VanConfig"),uio=o(" (VAN model)"),bio=l(),th=a("li"),Oie=a("strong"),vio=o("videomae"),Fio=o(" \u2014 "),sI=a("a"),Tio=o("VideoMAEConfig"),Mio=o(" (VideoMAE model)"),Eio=l(),ah=a("li"),Vie=a("strong"),Cio=o("vilt"),wio=o(" \u2014 "),lI=a("a"),Aio=o("ViltConfig"),Lio=o(" (ViLT model)"),yio=l(),nh=a("li"),Xie=a("strong"),xio=o("vision-encoder-decoder"),$io=o(" \u2014 "),iI=a("a"),kio=o("VisionEncoderDecoderConfig"),Sio=o(" (Vision Encoder decoder model)"),Rio=l(),sh=a("li"),zie=a("strong"),Pio=o("vision-text-dual-encoder"),Bio=o(" \u2014 "),dI=a("a"),Iio=o("VisionTextDualEncoderConfig"),Nio=o(" (VisionTextDualEncoder model)"),qio=l(),lh=a("li"),Wie=a("strong"),jio=o("visual_bert"),Dio=o(" \u2014 "),cI=a("a"),Gio=o("VisualBertConfig"),Oio=o(" (VisualBERT model)"),Vio=l(),ih=a("li"),Qie=a("strong"),Xio=o("vit"),zio=o(" \u2014 "),fI=a("a"),Wio=o("ViTConfig"),Qio=o(" (ViT model)"),Uio=l(),dh=a("li"),Uie=a("strong"),Hio=o("vit_mae"),Jio=o(" \u2014 "),mI=a("a"),Yio=o("ViTMAEConfig"),Kio=o(" (ViTMAE model)"),Zio=l(),ch=a("li"),Hie=a("strong"),edo=o("wav2vec2"),odo=o(" \u2014 "),gI=a("a"),rdo=o("Wav2Vec2Config"),tdo=o(" (Wav2Vec2 model)"),ado=l(),fh=a("li"),Jie=a("strong"),ndo=o("wav2vec2-conformer"),sdo=o(" \u2014 "),hI=a("a"),ldo=o("Wav2Vec2ConformerConfig"),ido=o(" (Wav2Vec2-Conformer model)"),ddo=l(),mh=a("li"),Yie=a("strong"),cdo=o("wavlm"),fdo=o(" \u2014 "),pI=a("a"),mdo=o("WavLMConfig"),gdo=o(" (WavLM model)"),hdo=l(),gh=a("li"),Kie=a("strong"),pdo=o("xglm"),_do=o(" \u2014 "),_I=a("a"),udo=o("XGLMConfig"),bdo=o(" (XGLM model)"),vdo=l(),hh=a("li"),Zie=a("strong"),Fdo=o("xlm"),Tdo=o(" \u2014 "),uI=a("a"),Mdo=o("XLMConfig"),Edo=o(" (XLM model)"),Cdo=l(),ph=a("li"),ede=a("strong"),wdo=o("xlm-prophetnet"),Ado=o(" \u2014 "),bI=a("a"),Ldo=o("XLMProphetNetConfig"),ydo=o(" (XLM-ProphetNet model)"),xdo=l(),_h=a("li"),ode=a("strong"),$do=o("xlm-roberta"),kdo=o(" \u2014 "),vI=a("a"),Sdo=o("XLMRobertaConfig"),Rdo=o(" (XLM-RoBERTa model)"),Pdo=l(),uh=a("li"),rde=a("strong"),Bdo=o("xlm-roberta-xl"),Ido=o(" \u2014 "),FI=a("a"),Ndo=o("XLMRobertaXLConfig"),qdo=o(" (XLM-RoBERTa-XL model)"),jdo=l(),bh=a("li"),tde=a("strong"),Ddo=o("xlnet"),Gdo=o(" \u2014 "),TI=a("a"),Odo=o("XLNetConfig"),Vdo=o(" (XLNet model)"),Xdo=l(),vh=a("li"),ade=a("strong"),zdo=o("yolos"),Wdo=o(" \u2014 "),MI=a("a"),Qdo=o("YolosConfig"),Udo=o(" (YOLOS model)"),Hdo=l(),Fh=a("li"),nde=a("strong"),Jdo=o("yoso"),Ydo=o(" \u2014 "),EI=a("a"),Kdo=o("YosoConfig"),Zdo=o(" (YOSO model)"),eco=l(),F(Th.$$.fragment),oco=l(),Mh=a("div"),F(FL.$$.fragment),rco=l(),sde=a("p"),tco=o("Register a new configuration for this class."),QQe=l(),Ki=a("h2"),Eh=a("a"),lde=a("span"),F(TL.$$.fragment),aco=l(),ide=a("span"),nco=o("AutoTokenizer"),UQe=l(),xo=a("div"),F(ML.$$.fragment),sco=l(),EL=a("p"),lco=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),CI=a("a"),ico=o("AutoTokenizer.from_pretrained()"),dco=o(" class method."),cco=l(),CL=a("p"),fco=o("This class cannot be instantiated directly using "),dde=a("code"),mco=o("__init__()"),gco=o(" (throws an error)."),hco=l(),Sr=a("div"),F(wL.$$.fragment),pco=l(),cde=a("p"),_co=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uco=l(),Ga=a("p"),bco=o("The tokenizer class to instantiate is selected based on the "),fde=a("code"),vco=o("model_type"),Fco=o(` property of the config object (either
passed as an argument or loaded from `),mde=a("code"),Tco=o("pretrained_model_name_or_path"),Mco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=a("code"),Eco=o("pretrained_model_name_or_path"),Cco=o(":"),wco=l(),k=a("ul"),Hn=a("li"),hde=a("strong"),Aco=o("albert"),Lco=o(" \u2014 "),wI=a("a"),yco=o("AlbertTokenizer"),xco=o(" or "),AI=a("a"),$co=o("AlbertTokenizerFast"),kco=o(" (ALBERT model)"),Sco=l(),Jn=a("li"),pde=a("strong"),Rco=o("bart"),Pco=o(" \u2014 "),LI=a("a"),Bco=o("BartTokenizer"),Ico=o(" or "),yI=a("a"),Nco=o("BartTokenizerFast"),qco=o(" (BART model)"),jco=l(),Yn=a("li"),_de=a("strong"),Dco=o("barthez"),Gco=o(" \u2014 "),xI=a("a"),Oco=o("BarthezTokenizer"),Vco=o(" or "),$I=a("a"),Xco=o("BarthezTokenizerFast"),zco=o(" (BARThez model)"),Wco=l(),Ch=a("li"),ude=a("strong"),Qco=o("bartpho"),Uco=o(" \u2014 "),kI=a("a"),Hco=o("BartphoTokenizer"),Jco=o(" (BARTpho model)"),Yco=l(),Kn=a("li"),bde=a("strong"),Kco=o("bert"),Zco=o(" \u2014 "),SI=a("a"),efo=o("BertTokenizer"),ofo=o(" or "),RI=a("a"),rfo=o("BertTokenizerFast"),tfo=o(" (BERT model)"),afo=l(),wh=a("li"),vde=a("strong"),nfo=o("bert-generation"),sfo=o(" \u2014 "),PI=a("a"),lfo=o("BertGenerationTokenizer"),ifo=o(" (Bert Generation model)"),dfo=l(),Ah=a("li"),Fde=a("strong"),cfo=o("bert-japanese"),ffo=o(" \u2014 "),BI=a("a"),mfo=o("BertJapaneseTokenizer"),gfo=o(" (BertJapanese model)"),hfo=l(),Lh=a("li"),Tde=a("strong"),pfo=o("bertweet"),_fo=o(" \u2014 "),II=a("a"),ufo=o("BertweetTokenizer"),bfo=o(" (BERTweet model)"),vfo=l(),Zn=a("li"),Mde=a("strong"),Ffo=o("big_bird"),Tfo=o(" \u2014 "),NI=a("a"),Mfo=o("BigBirdTokenizer"),Efo=o(" or "),qI=a("a"),Cfo=o("BigBirdTokenizerFast"),wfo=o(" (BigBird model)"),Afo=l(),es=a("li"),Ede=a("strong"),Lfo=o("bigbird_pegasus"),yfo=o(" \u2014 "),jI=a("a"),xfo=o("PegasusTokenizer"),$fo=o(" or "),DI=a("a"),kfo=o("PegasusTokenizerFast"),Sfo=o(" (BigBird-Pegasus model)"),Rfo=l(),os=a("li"),Cde=a("strong"),Pfo=o("blenderbot"),Bfo=o(" \u2014 "),GI=a("a"),Ifo=o("BlenderbotTokenizer"),Nfo=o(" or "),OI=a("a"),qfo=o("BlenderbotTokenizerFast"),jfo=o(" (Blenderbot model)"),Dfo=l(),yh=a("li"),wde=a("strong"),Gfo=o("blenderbot-small"),Ofo=o(" \u2014 "),VI=a("a"),Vfo=o("BlenderbotSmallTokenizer"),Xfo=o(" (BlenderbotSmall model)"),zfo=l(),xh=a("li"),Ade=a("strong"),Wfo=o("bloom"),Qfo=o(" \u2014 "),XI=a("a"),Ufo=o("BloomTokenizerFast"),Hfo=o(" (BLOOM model)"),Jfo=l(),$h=a("li"),Lde=a("strong"),Yfo=o("byt5"),Kfo=o(" \u2014 "),zI=a("a"),Zfo=o("ByT5Tokenizer"),emo=o(" (ByT5 model)"),omo=l(),rs=a("li"),yde=a("strong"),rmo=o("camembert"),tmo=o(" \u2014 "),WI=a("a"),amo=o("CamembertTokenizer"),nmo=o(" or "),QI=a("a"),smo=o("CamembertTokenizerFast"),lmo=o(" (CamemBERT model)"),imo=l(),kh=a("li"),xde=a("strong"),dmo=o("canine"),cmo=o(" \u2014 "),UI=a("a"),fmo=o("CanineTokenizer"),mmo=o(" (CANINE model)"),gmo=l(),ts=a("li"),$de=a("strong"),hmo=o("clip"),pmo=o(" \u2014 "),HI=a("a"),_mo=o("CLIPTokenizer"),umo=o(" or "),JI=a("a"),bmo=o("CLIPTokenizerFast"),vmo=o(" (CLIP model)"),Fmo=l(),as=a("li"),kde=a("strong"),Tmo=o("codegen"),Mmo=o(" \u2014 "),YI=a("a"),Emo=o("CodeGenTokenizer"),Cmo=o(" or "),KI=a("a"),wmo=o("CodeGenTokenizerFast"),Amo=o(" (CodeGen model)"),Lmo=l(),ns=a("li"),Sde=a("strong"),ymo=o("convbert"),xmo=o(" \u2014 "),ZI=a("a"),$mo=o("ConvBertTokenizer"),kmo=o(" or "),eN=a("a"),Smo=o("ConvBertTokenizerFast"),Rmo=o(" (ConvBERT model)"),Pmo=l(),ss=a("li"),Rde=a("strong"),Bmo=o("cpm"),Imo=o(" \u2014 "),oN=a("a"),Nmo=o("CpmTokenizer"),qmo=o(" or "),rN=a("a"),jmo=o("CpmTokenizerFast"),Dmo=o(" (CPM model)"),Gmo=l(),Sh=a("li"),Pde=a("strong"),Omo=o("ctrl"),Vmo=o(" \u2014 "),tN=a("a"),Xmo=o("CTRLTokenizer"),zmo=o(" (CTRL model)"),Wmo=l(),ls=a("li"),Bde=a("strong"),Qmo=o("data2vec-text"),Umo=o(" \u2014 "),aN=a("a"),Hmo=o("RobertaTokenizer"),Jmo=o(" or "),nN=a("a"),Ymo=o("RobertaTokenizerFast"),Kmo=o(" (Data2VecText model)"),Zmo=l(),is=a("li"),Ide=a("strong"),ego=o("deberta"),ogo=o(" \u2014 "),sN=a("a"),rgo=o("DebertaTokenizer"),tgo=o(" or "),lN=a("a"),ago=o("DebertaTokenizerFast"),ngo=o(" (DeBERTa model)"),sgo=l(),ds=a("li"),Nde=a("strong"),lgo=o("deberta-v2"),igo=o(" \u2014 "),iN=a("a"),dgo=o("DebertaV2Tokenizer"),cgo=o(" or "),dN=a("a"),fgo=o("DebertaV2TokenizerFast"),mgo=o(" (DeBERTa-v2 model)"),ggo=l(),cs=a("li"),qde=a("strong"),hgo=o("distilbert"),pgo=o(" \u2014 "),cN=a("a"),_go=o("DistilBertTokenizer"),ugo=o(" or "),fN=a("a"),bgo=o("DistilBertTokenizerFast"),vgo=o(" (DistilBERT model)"),Fgo=l(),fs=a("li"),jde=a("strong"),Tgo=o("dpr"),Mgo=o(" \u2014 "),mN=a("a"),Ego=o("DPRQuestionEncoderTokenizer"),Cgo=o(" or "),gN=a("a"),wgo=o("DPRQuestionEncoderTokenizerFast"),Ago=o(" (DPR model)"),Lgo=l(),ms=a("li"),Dde=a("strong"),ygo=o("electra"),xgo=o(" \u2014 "),hN=a("a"),$go=o("ElectraTokenizer"),kgo=o(" or "),pN=a("a"),Sgo=o("ElectraTokenizerFast"),Rgo=o(" (ELECTRA model)"),Pgo=l(),Rh=a("li"),Gde=a("strong"),Bgo=o("flaubert"),Igo=o(" \u2014 "),_N=a("a"),Ngo=o("FlaubertTokenizer"),qgo=o(" (FlauBERT model)"),jgo=l(),gs=a("li"),Ode=a("strong"),Dgo=o("fnet"),Ggo=o(" \u2014 "),uN=a("a"),Ogo=o("FNetTokenizer"),Vgo=o(" or "),bN=a("a"),Xgo=o("FNetTokenizerFast"),zgo=o(" (FNet model)"),Wgo=l(),Ph=a("li"),Vde=a("strong"),Qgo=o("fsmt"),Ugo=o(" \u2014 "),vN=a("a"),Hgo=o("FSMTTokenizer"),Jgo=o(" (FairSeq Machine-Translation model)"),Ygo=l(),hs=a("li"),Xde=a("strong"),Kgo=o("funnel"),Zgo=o(" \u2014 "),FN=a("a"),eho=o("FunnelTokenizer"),oho=o(" or "),TN=a("a"),rho=o("FunnelTokenizerFast"),tho=o(" (Funnel Transformer model)"),aho=l(),ps=a("li"),zde=a("strong"),nho=o("gpt2"),sho=o(" \u2014 "),MN=a("a"),lho=o("GPT2Tokenizer"),iho=o(" or "),EN=a("a"),dho=o("GPT2TokenizerFast"),cho=o(" (OpenAI GPT-2 model)"),fho=l(),_s=a("li"),Wde=a("strong"),mho=o("gpt_neo"),gho=o(" \u2014 "),CN=a("a"),hho=o("GPT2Tokenizer"),pho=o(" or "),wN=a("a"),_ho=o("GPT2TokenizerFast"),uho=o(" (GPT Neo model)"),bho=l(),Bh=a("li"),Qde=a("strong"),vho=o("gpt_neox"),Fho=o(" \u2014 "),AN=a("a"),Tho=o("GPTNeoXTokenizerFast"),Mho=o(" (GPT NeoX model)"),Eho=l(),us=a("li"),Ude=a("strong"),Cho=o("gptj"),who=o(" \u2014 "),LN=a("a"),Aho=o("GPT2Tokenizer"),Lho=o(" or "),yN=a("a"),yho=o("GPT2TokenizerFast"),xho=o(" (GPT-J model)"),$ho=l(),bs=a("li"),Hde=a("strong"),kho=o("groupvit"),Sho=o(" \u2014 "),xN=a("a"),Rho=o("CLIPTokenizer"),Pho=o(" or "),$N=a("a"),Bho=o("CLIPTokenizerFast"),Iho=o(" (GroupViT model)"),Nho=l(),vs=a("li"),Jde=a("strong"),qho=o("herbert"),jho=o(" \u2014 "),kN=a("a"),Dho=o("HerbertTokenizer"),Gho=o(" or "),SN=a("a"),Oho=o("HerbertTokenizerFast"),Vho=o(" (HerBERT model)"),Xho=l(),Ih=a("li"),Yde=a("strong"),zho=o("hubert"),Who=o(" \u2014 "),RN=a("a"),Qho=o("Wav2Vec2CTCTokenizer"),Uho=o(" (Hubert model)"),Hho=l(),Fs=a("li"),Kde=a("strong"),Jho=o("ibert"),Yho=o(" \u2014 "),PN=a("a"),Kho=o("RobertaTokenizer"),Zho=o(" or "),BN=a("a"),epo=o("RobertaTokenizerFast"),opo=o(" (I-BERT model)"),rpo=l(),Ts=a("li"),Zde=a("strong"),tpo=o("layoutlm"),apo=o(" \u2014 "),IN=a("a"),npo=o("LayoutLMTokenizer"),spo=o(" or "),NN=a("a"),lpo=o("LayoutLMTokenizerFast"),ipo=o(" (LayoutLM model)"),dpo=l(),Ms=a("li"),ece=a("strong"),cpo=o("layoutlmv2"),fpo=o(" \u2014 "),qN=a("a"),mpo=o("LayoutLMv2Tokenizer"),gpo=o(" or "),jN=a("a"),hpo=o("LayoutLMv2TokenizerFast"),ppo=o(" (LayoutLMv2 model)"),_po=l(),Es=a("li"),oce=a("strong"),upo=o("layoutlmv3"),bpo=o(" \u2014 "),DN=a("a"),vpo=o("LayoutLMv3Tokenizer"),Fpo=o(" or "),GN=a("a"),Tpo=o("LayoutLMv3TokenizerFast"),Mpo=o(" (LayoutLMv3 model)"),Epo=l(),Cs=a("li"),rce=a("strong"),Cpo=o("layoutxlm"),wpo=o(" \u2014 "),ON=a("a"),Apo=o("LayoutXLMTokenizer"),Lpo=o(" or "),VN=a("a"),ypo=o("LayoutXLMTokenizerFast"),xpo=o(" (LayoutXLM model)"),$po=l(),ws=a("li"),tce=a("strong"),kpo=o("led"),Spo=o(" \u2014 "),XN=a("a"),Rpo=o("LEDTokenizer"),Ppo=o(" or "),zN=a("a"),Bpo=o("LEDTokenizerFast"),Ipo=o(" (LED model)"),Npo=l(),As=a("li"),ace=a("strong"),qpo=o("longformer"),jpo=o(" \u2014 "),WN=a("a"),Dpo=o("LongformerTokenizer"),Gpo=o(" or "),QN=a("a"),Opo=o("LongformerTokenizerFast"),Vpo=o(" (Longformer model)"),Xpo=l(),Ls=a("li"),nce=a("strong"),zpo=o("longt5"),Wpo=o(" \u2014 "),UN=a("a"),Qpo=o("T5Tokenizer"),Upo=o(" or "),HN=a("a"),Hpo=o("T5TokenizerFast"),Jpo=o(" (LongT5 model)"),Ypo=l(),Nh=a("li"),sce=a("strong"),Kpo=o("luke"),Zpo=o(" \u2014 "),JN=a("a"),e_o=o("LukeTokenizer"),o_o=o(" (LUKE model)"),r_o=l(),ys=a("li"),lce=a("strong"),t_o=o("lxmert"),a_o=o(" \u2014 "),YN=a("a"),n_o=o("LxmertTokenizer"),s_o=o(" or "),KN=a("a"),l_o=o("LxmertTokenizerFast"),i_o=o(" (LXMERT model)"),d_o=l(),qh=a("li"),ice=a("strong"),c_o=o("m2m_100"),f_o=o(" \u2014 "),ZN=a("a"),m_o=o("M2M100Tokenizer"),g_o=o(" (M2M100 model)"),h_o=l(),jh=a("li"),dce=a("strong"),p_o=o("marian"),__o=o(" \u2014 "),eq=a("a"),u_o=o("MarianTokenizer"),b_o=o(" (Marian model)"),v_o=l(),xs=a("li"),cce=a("strong"),F_o=o("mbart"),T_o=o(" \u2014 "),oq=a("a"),M_o=o("MBartTokenizer"),E_o=o(" or "),rq=a("a"),C_o=o("MBartTokenizerFast"),w_o=o(" (mBART model)"),A_o=l(),$s=a("li"),fce=a("strong"),L_o=o("mbart50"),y_o=o(" \u2014 "),tq=a("a"),x_o=o("MBart50Tokenizer"),$_o=o(" or "),aq=a("a"),k_o=o("MBart50TokenizerFast"),S_o=o(" (mBART-50 model)"),R_o=l(),ks=a("li"),mce=a("strong"),P_o=o("megatron-bert"),B_o=o(" \u2014 "),nq=a("a"),I_o=o("BertTokenizer"),N_o=o(" or "),sq=a("a"),q_o=o("BertTokenizerFast"),j_o=o(" (Megatron-BERT model)"),D_o=l(),Dh=a("li"),gce=a("strong"),G_o=o("mluke"),O_o=o(" \u2014 "),lq=a("a"),V_o=o("MLukeTokenizer"),X_o=o(" (mLUKE model)"),z_o=l(),Ss=a("li"),hce=a("strong"),W_o=o("mobilebert"),Q_o=o(" \u2014 "),iq=a("a"),U_o=o("MobileBertTokenizer"),H_o=o(" or "),dq=a("a"),J_o=o("MobileBertTokenizerFast"),Y_o=o(" (MobileBERT model)"),K_o=l(),Rs=a("li"),pce=a("strong"),Z_o=o("mpnet"),euo=o(" \u2014 "),cq=a("a"),ouo=o("MPNetTokenizer"),ruo=o(" or "),fq=a("a"),tuo=o("MPNetTokenizerFast"),auo=o(" (MPNet model)"),nuo=l(),Ps=a("li"),_ce=a("strong"),suo=o("mt5"),luo=o(" \u2014 "),mq=a("a"),iuo=o("MT5Tokenizer"),duo=o(" or "),gq=a("a"),cuo=o("MT5TokenizerFast"),fuo=o(" (MT5 model)"),muo=l(),Bs=a("li"),uce=a("strong"),guo=o("mvp"),huo=o(" \u2014 "),hq=a("a"),puo=o("MvpTokenizer"),_uo=o(" or "),pq=a("a"),uuo=o("MvpTokenizerFast"),buo=o(" (MVP model)"),vuo=l(),Is=a("li"),bce=a("strong"),Fuo=o("nezha"),Tuo=o(" \u2014 "),_q=a("a"),Muo=o("BertTokenizer"),Euo=o(" or "),uq=a("a"),Cuo=o("BertTokenizerFast"),wuo=o(" (Nezha model)"),Auo=l(),Ns=a("li"),vce=a("strong"),Luo=o("nllb"),yuo=o(" \u2014 "),bq=a("a"),xuo=o("NllbTokenizer"),$uo=o(" or "),vq=a("a"),kuo=o("NllbTokenizerFast"),Suo=o(" (NLLB model)"),Ruo=l(),qs=a("li"),Fce=a("strong"),Puo=o("nystromformer"),Buo=o(" \u2014 "),Fq=a("a"),Iuo=o("AlbertTokenizer"),Nuo=o(" or "),Tq=a("a"),quo=o("AlbertTokenizerFast"),juo=o(" (Nystr\xF6mformer model)"),Duo=l(),js=a("li"),Tce=a("strong"),Guo=o("openai-gpt"),Ouo=o(" \u2014 "),Mq=a("a"),Vuo=o("OpenAIGPTTokenizer"),Xuo=o(" or "),Eq=a("a"),zuo=o("OpenAIGPTTokenizerFast"),Wuo=o(" (OpenAI GPT model)"),Quo=l(),Gh=a("li"),Mce=a("strong"),Uuo=o("opt"),Huo=o(" \u2014 "),Cq=a("a"),Juo=o("GPT2Tokenizer"),Yuo=o(" (OPT model)"),Kuo=l(),Ds=a("li"),Ece=a("strong"),Zuo=o("owlvit"),e1o=o(" \u2014 "),wq=a("a"),o1o=o("CLIPTokenizer"),r1o=o(" or "),Aq=a("a"),t1o=o("CLIPTokenizerFast"),a1o=o(" (OWL-ViT model)"),n1o=l(),Gs=a("li"),Cce=a("strong"),s1o=o("pegasus"),l1o=o(" \u2014 "),Lq=a("a"),i1o=o("PegasusTokenizer"),d1o=o(" or "),yq=a("a"),c1o=o("PegasusTokenizerFast"),f1o=o(" (Pegasus model)"),m1o=l(),Oh=a("li"),wce=a("strong"),g1o=o("perceiver"),h1o=o(" \u2014 "),xq=a("a"),p1o=o("PerceiverTokenizer"),_1o=o(" (Perceiver model)"),u1o=l(),Vh=a("li"),Ace=a("strong"),b1o=o("phobert"),v1o=o(" \u2014 "),$q=a("a"),F1o=o("PhobertTokenizer"),T1o=o(" (PhoBERT model)"),M1o=l(),Xh=a("li"),Lce=a("strong"),E1o=o("plbart"),C1o=o(" \u2014 "),kq=a("a"),w1o=o("PLBartTokenizer"),A1o=o(" (PLBart model)"),L1o=l(),zh=a("li"),yce=a("strong"),y1o=o("prophetnet"),x1o=o(" \u2014 "),Sq=a("a"),$1o=o("ProphetNetTokenizer"),k1o=o(" (ProphetNet model)"),S1o=l(),Os=a("li"),xce=a("strong"),R1o=o("qdqbert"),P1o=o(" \u2014 "),Rq=a("a"),B1o=o("BertTokenizer"),I1o=o(" or "),Pq=a("a"),N1o=o("BertTokenizerFast"),q1o=o(" (QDQBert model)"),j1o=l(),Wh=a("li"),$ce=a("strong"),D1o=o("rag"),G1o=o(" \u2014 "),Bq=a("a"),O1o=o("RagTokenizer"),V1o=o(" (RAG model)"),X1o=l(),Vs=a("li"),kce=a("strong"),z1o=o("realm"),W1o=o(" \u2014 "),Iq=a("a"),Q1o=o("RealmTokenizer"),U1o=o(" or "),Nq=a("a"),H1o=o("RealmTokenizerFast"),J1o=o(" (REALM model)"),Y1o=l(),Xs=a("li"),Sce=a("strong"),K1o=o("reformer"),Z1o=o(" \u2014 "),qq=a("a"),e2o=o("ReformerTokenizer"),o2o=o(" or "),jq=a("a"),r2o=o("ReformerTokenizerFast"),t2o=o(" (Reformer model)"),a2o=l(),zs=a("li"),Rce=a("strong"),n2o=o("rembert"),s2o=o(" \u2014 "),Dq=a("a"),l2o=o("RemBertTokenizer"),i2o=o(" or "),Gq=a("a"),d2o=o("RemBertTokenizerFast"),c2o=o(" (RemBERT model)"),f2o=l(),Ws=a("li"),Pce=a("strong"),m2o=o("retribert"),g2o=o(" \u2014 "),Oq=a("a"),h2o=o("RetriBertTokenizer"),p2o=o(" or "),Vq=a("a"),_2o=o("RetriBertTokenizerFast"),u2o=o(" (RetriBERT model)"),b2o=l(),Qs=a("li"),Bce=a("strong"),v2o=o("roberta"),F2o=o(" \u2014 "),Xq=a("a"),T2o=o("RobertaTokenizer"),M2o=o(" or "),zq=a("a"),E2o=o("RobertaTokenizerFast"),C2o=o(" (RoBERTa model)"),w2o=l(),Us=a("li"),Ice=a("strong"),A2o=o("roformer"),L2o=o(" \u2014 "),Wq=a("a"),y2o=o("RoFormerTokenizer"),x2o=o(" or "),Qq=a("a"),$2o=o("RoFormerTokenizerFast"),k2o=o(" (RoFormer model)"),S2o=l(),Qh=a("li"),Nce=a("strong"),R2o=o("speech_to_text"),P2o=o(" \u2014 "),Uq=a("a"),B2o=o("Speech2TextTokenizer"),I2o=o(" (Speech2Text model)"),N2o=l(),Uh=a("li"),qce=a("strong"),q2o=o("speech_to_text_2"),j2o=o(" \u2014 "),Hq=a("a"),D2o=o("Speech2Text2Tokenizer"),G2o=o(" (Speech2Text2 model)"),O2o=l(),Hs=a("li"),jce=a("strong"),V2o=o("splinter"),X2o=o(" \u2014 "),Jq=a("a"),z2o=o("SplinterTokenizer"),W2o=o(" or "),Yq=a("a"),Q2o=o("SplinterTokenizerFast"),U2o=o(" (Splinter model)"),H2o=l(),Js=a("li"),Dce=a("strong"),J2o=o("squeezebert"),Y2o=o(" \u2014 "),Kq=a("a"),K2o=o("SqueezeBertTokenizer"),Z2o=o(" or "),Zq=a("a"),ebo=o("SqueezeBertTokenizerFast"),obo=o(" (SqueezeBERT model)"),rbo=l(),Ys=a("li"),Gce=a("strong"),tbo=o("t5"),abo=o(" \u2014 "),ej=a("a"),nbo=o("T5Tokenizer"),sbo=o(" or "),oj=a("a"),lbo=o("T5TokenizerFast"),ibo=o(" (T5 model)"),dbo=l(),Hh=a("li"),Oce=a("strong"),cbo=o("tapas"),fbo=o(" \u2014 "),rj=a("a"),mbo=o("TapasTokenizer"),gbo=o(" (TAPAS model)"),hbo=l(),Jh=a("li"),Vce=a("strong"),pbo=o("tapex"),_bo=o(" \u2014 "),tj=a("a"),ubo=o("TapexTokenizer"),bbo=o(" (TAPEX model)"),vbo=l(),Yh=a("li"),Xce=a("strong"),Fbo=o("transfo-xl"),Tbo=o(" \u2014 "),aj=a("a"),Mbo=o("TransfoXLTokenizer"),Ebo=o(" (Transformer-XL model)"),Cbo=l(),Ks=a("li"),zce=a("strong"),wbo=o("vilt"),Abo=o(" \u2014 "),nj=a("a"),Lbo=o("BertTokenizer"),ybo=o(" or "),sj=a("a"),xbo=o("BertTokenizerFast"),$bo=o(" (ViLT model)"),kbo=l(),Zs=a("li"),Wce=a("strong"),Sbo=o("visual_bert"),Rbo=o(" \u2014 "),lj=a("a"),Pbo=o("BertTokenizer"),Bbo=o(" or "),ij=a("a"),Ibo=o("BertTokenizerFast"),Nbo=o(" (VisualBERT model)"),qbo=l(),Kh=a("li"),Qce=a("strong"),jbo=o("wav2vec2"),Dbo=o(" \u2014 "),dj=a("a"),Gbo=o("Wav2Vec2CTCTokenizer"),Obo=o(" (Wav2Vec2 model)"),Vbo=l(),Zh=a("li"),Uce=a("strong"),Xbo=o("wav2vec2-conformer"),zbo=o(" \u2014 "),cj=a("a"),Wbo=o("Wav2Vec2CTCTokenizer"),Qbo=o(" (Wav2Vec2-Conformer model)"),Ubo=l(),ep=a("li"),Hce=a("strong"),Hbo=o("wav2vec2_phoneme"),Jbo=o(" \u2014 "),fj=a("a"),Ybo=o("Wav2Vec2PhonemeCTCTokenizer"),Kbo=o(" (Wav2Vec2Phoneme model)"),Zbo=l(),el=a("li"),Jce=a("strong"),evo=o("xglm"),ovo=o(" \u2014 "),mj=a("a"),rvo=o("XGLMTokenizer"),tvo=o(" or "),gj=a("a"),avo=o("XGLMTokenizerFast"),nvo=o(" (XGLM model)"),svo=l(),op=a("li"),Yce=a("strong"),lvo=o("xlm"),ivo=o(" \u2014 "),hj=a("a"),dvo=o("XLMTokenizer"),cvo=o(" (XLM model)"),fvo=l(),rp=a("li"),Kce=a("strong"),mvo=o("xlm-prophetnet"),gvo=o(" \u2014 "),pj=a("a"),hvo=o("XLMProphetNetTokenizer"),pvo=o(" (XLM-ProphetNet model)"),_vo=l(),ol=a("li"),Zce=a("strong"),uvo=o("xlm-roberta"),bvo=o(" \u2014 "),_j=a("a"),vvo=o("XLMRobertaTokenizer"),Fvo=o(" or "),uj=a("a"),Tvo=o("XLMRobertaTokenizerFast"),Mvo=o(" (XLM-RoBERTa model)"),Evo=l(),rl=a("li"),efe=a("strong"),Cvo=o("xlm-roberta-xl"),wvo=o(" \u2014 "),bj=a("a"),Avo=o("RobertaTokenizer"),Lvo=o(" or "),vj=a("a"),yvo=o("RobertaTokenizerFast"),xvo=o(" (XLM-RoBERTa-XL model)"),$vo=l(),tl=a("li"),ofe=a("strong"),kvo=o("xlnet"),Svo=o(" \u2014 "),Fj=a("a"),Rvo=o("XLNetTokenizer"),Pvo=o(" or "),Tj=a("a"),Bvo=o("XLNetTokenizerFast"),Ivo=o(" (XLNet model)"),Nvo=l(),al=a("li"),rfe=a("strong"),qvo=o("yoso"),jvo=o(" \u2014 "),Mj=a("a"),Dvo=o("AlbertTokenizer"),Gvo=o(" or "),Ej=a("a"),Ovo=o("AlbertTokenizerFast"),Vvo=o(" (YOSO model)"),Xvo=l(),F(tp.$$.fragment),zvo=l(),ap=a("div"),F(AL.$$.fragment),Wvo=l(),tfe=a("p"),Qvo=o("Register a new tokenizer in this mapping."),HQe=l(),Zi=a("h2"),np=a("a"),afe=a("span"),F(LL.$$.fragment),Uvo=l(),nfe=a("span"),Hvo=o("AutoFeatureExtractor"),JQe=l(),$o=a("div"),F(yL.$$.fragment),Jvo=l(),xL=a("p"),Yvo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Cj=a("a"),Kvo=o("AutoFeatureExtractor.from_pretrained()"),Zvo=o(" class method."),e6o=l(),$L=a("p"),o6o=o("This class cannot be instantiated directly using "),sfe=a("code"),r6o=o("__init__()"),t6o=o(" (throws an error)."),a6o=l(),He=a("div"),F(kL.$$.fragment),n6o=l(),lfe=a("p"),s6o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),l6o=l(),Oa=a("p"),i6o=o("The feature extractor class to instantiate is selected based on the "),ife=a("code"),d6o=o("model_type"),c6o=o(` property of the config object
(either passed as an argument or loaded from `),dfe=a("code"),f6o=o("pretrained_model_name_or_path"),m6o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cfe=a("code"),g6o=o("pretrained_model_name_or_path"),h6o=o(":"),p6o=l(),Q=a("ul"),sp=a("li"),ffe=a("strong"),_6o=o("beit"),u6o=o(" \u2014 "),wj=a("a"),b6o=o("BeitFeatureExtractor"),v6o=o(" (BEiT model)"),F6o=l(),lp=a("li"),mfe=a("strong"),T6o=o("clip"),M6o=o(" \u2014 "),Aj=a("a"),E6o=o("CLIPFeatureExtractor"),C6o=o(" (CLIP model)"),w6o=l(),ip=a("li"),gfe=a("strong"),A6o=o("convnext"),L6o=o(" \u2014 "),Lj=a("a"),y6o=o("ConvNextFeatureExtractor"),x6o=o(" (ConvNeXT model)"),$6o=l(),dp=a("li"),hfe=a("strong"),k6o=o("cvt"),S6o=o(" \u2014 "),yj=a("a"),R6o=o("ConvNextFeatureExtractor"),P6o=o(" (CvT model)"),B6o=l(),cp=a("li"),pfe=a("strong"),I6o=o("data2vec-audio"),N6o=o(" \u2014 "),xj=a("a"),q6o=o("Wav2Vec2FeatureExtractor"),j6o=o(" (Data2VecAudio model)"),D6o=l(),fp=a("li"),_fe=a("strong"),G6o=o("data2vec-vision"),O6o=o(" \u2014 "),$j=a("a"),V6o=o("BeitFeatureExtractor"),X6o=o(" (Data2VecVision model)"),z6o=l(),mp=a("li"),ufe=a("strong"),W6o=o("deit"),Q6o=o(" \u2014 "),kj=a("a"),U6o=o("DeiTFeatureExtractor"),H6o=o(" (DeiT model)"),J6o=l(),gp=a("li"),bfe=a("strong"),Y6o=o("detr"),K6o=o(" \u2014 "),Sj=a("a"),Z6o=o("DetrFeatureExtractor"),eFo=o(" (DETR model)"),oFo=l(),hp=a("li"),vfe=a("strong"),rFo=o("donut"),tFo=o(" \u2014 "),Rj=a("a"),aFo=o("DonutFeatureExtractor"),nFo=o(" (Donut model)"),sFo=l(),pp=a("li"),Ffe=a("strong"),lFo=o("dpt"),iFo=o(" \u2014 "),Pj=a("a"),dFo=o("DPTFeatureExtractor"),cFo=o(" (DPT model)"),fFo=l(),_p=a("li"),Tfe=a("strong"),mFo=o("flava"),gFo=o(" \u2014 "),Bj=a("a"),hFo=o("FlavaFeatureExtractor"),pFo=o(" (FLAVA model)"),_Fo=l(),up=a("li"),Mfe=a("strong"),uFo=o("glpn"),bFo=o(" \u2014 "),Ij=a("a"),vFo=o("GLPNFeatureExtractor"),FFo=o(" (GLPN model)"),TFo=l(),bp=a("li"),Efe=a("strong"),MFo=o("groupvit"),EFo=o(" \u2014 "),Nj=a("a"),CFo=o("CLIPFeatureExtractor"),wFo=o(" (GroupViT model)"),AFo=l(),vp=a("li"),Cfe=a("strong"),LFo=o("hubert"),yFo=o(" \u2014 "),qj=a("a"),xFo=o("Wav2Vec2FeatureExtractor"),$Fo=o(" (Hubert model)"),kFo=l(),Fp=a("li"),wfe=a("strong"),SFo=o("imagegpt"),RFo=o(" \u2014 "),jj=a("a"),PFo=o("ImageGPTFeatureExtractor"),BFo=o(" (ImageGPT model)"),IFo=l(),Tp=a("li"),Afe=a("strong"),NFo=o("layoutlmv2"),qFo=o(" \u2014 "),Dj=a("a"),jFo=o("LayoutLMv2FeatureExtractor"),DFo=o(" (LayoutLMv2 model)"),GFo=l(),Mp=a("li"),Lfe=a("strong"),OFo=o("layoutlmv3"),VFo=o(" \u2014 "),Gj=a("a"),XFo=o("LayoutLMv3FeatureExtractor"),zFo=o(" (LayoutLMv3 model)"),WFo=l(),Ep=a("li"),yfe=a("strong"),QFo=o("levit"),UFo=o(" \u2014 "),Oj=a("a"),HFo=o("LevitFeatureExtractor"),JFo=o(" (LeViT model)"),YFo=l(),Cp=a("li"),xfe=a("strong"),KFo=o("maskformer"),ZFo=o(" \u2014 "),Vj=a("a"),eTo=o("MaskFormerFeatureExtractor"),oTo=o(" (MaskFormer model)"),rTo=l(),wp=a("li"),$fe=a("strong"),tTo=o("mctct"),aTo=o(" \u2014 "),Xj=a("a"),nTo=o("MCTCTFeatureExtractor"),sTo=o(" (M-CTC-T model)"),lTo=l(),Ap=a("li"),kfe=a("strong"),iTo=o("mobilevit"),dTo=o(" \u2014 "),zj=a("a"),cTo=o("MobileViTFeatureExtractor"),fTo=o(" (MobileViT model)"),mTo=l(),Lp=a("li"),Sfe=a("strong"),gTo=o("owlvit"),hTo=o(" \u2014 "),Wj=a("a"),pTo=o("OwlViTFeatureExtractor"),_To=o(" (OWL-ViT model)"),uTo=l(),yp=a("li"),Rfe=a("strong"),bTo=o("perceiver"),vTo=o(" \u2014 "),Qj=a("a"),FTo=o("PerceiverFeatureExtractor"),TTo=o(" (Perceiver model)"),MTo=l(),xp=a("li"),Pfe=a("strong"),ETo=o("poolformer"),CTo=o(" \u2014 "),Uj=a("a"),wTo=o("PoolFormerFeatureExtractor"),ATo=o(" (PoolFormer model)"),LTo=l(),$p=a("li"),Bfe=a("strong"),yTo=o("regnet"),xTo=o(" \u2014 "),Hj=a("a"),$To=o("ConvNextFeatureExtractor"),kTo=o(" (RegNet model)"),STo=l(),kp=a("li"),Ife=a("strong"),RTo=o("resnet"),PTo=o(" \u2014 "),Jj=a("a"),BTo=o("ConvNextFeatureExtractor"),ITo=o(" (ResNet model)"),NTo=l(),Sp=a("li"),Nfe=a("strong"),qTo=o("segformer"),jTo=o(" \u2014 "),Yj=a("a"),DTo=o("SegformerFeatureExtractor"),GTo=o(" (SegFormer model)"),OTo=l(),Rp=a("li"),qfe=a("strong"),VTo=o("speech_to_text"),XTo=o(" \u2014 "),Kj=a("a"),zTo=o("Speech2TextFeatureExtractor"),WTo=o(" (Speech2Text model)"),QTo=l(),Pp=a("li"),jfe=a("strong"),UTo=o("swin"),HTo=o(" \u2014 "),Zj=a("a"),JTo=o("ViTFeatureExtractor"),YTo=o(" (Swin Transformer model)"),KTo=l(),Bp=a("li"),Dfe=a("strong"),ZTo=o("swinv2"),e7o=o(" \u2014 "),eD=a("a"),o7o=o("ViTFeatureExtractor"),r7o=o(" (Swin Transformer V2 model)"),t7o=l(),Ip=a("li"),Gfe=a("strong"),a7o=o("van"),n7o=o(" \u2014 "),oD=a("a"),s7o=o("ConvNextFeatureExtractor"),l7o=o(" (VAN model)"),i7o=l(),Np=a("li"),Ofe=a("strong"),d7o=o("videomae"),c7o=o(" \u2014 "),rD=a("a"),f7o=o("ViTFeatureExtractor"),m7o=o(" (VideoMAE model)"),g7o=l(),qp=a("li"),Vfe=a("strong"),h7o=o("vilt"),p7o=o(" \u2014 "),tD=a("a"),_7o=o("ViltFeatureExtractor"),u7o=o(" (ViLT model)"),b7o=l(),jp=a("li"),Xfe=a("strong"),v7o=o("vit"),F7o=o(" \u2014 "),aD=a("a"),T7o=o("ViTFeatureExtractor"),M7o=o(" (ViT model)"),E7o=l(),Dp=a("li"),zfe=a("strong"),C7o=o("vit_mae"),w7o=o(" \u2014 "),nD=a("a"),A7o=o("ViTFeatureExtractor"),L7o=o(" (ViTMAE model)"),y7o=l(),Gp=a("li"),Wfe=a("strong"),x7o=o("wav2vec2"),$7o=o(" \u2014 "),sD=a("a"),k7o=o("Wav2Vec2FeatureExtractor"),S7o=o(" (Wav2Vec2 model)"),R7o=l(),Op=a("li"),Qfe=a("strong"),P7o=o("wav2vec2-conformer"),B7o=o(" \u2014 "),lD=a("a"),I7o=o("Wav2Vec2FeatureExtractor"),N7o=o(" (Wav2Vec2-Conformer model)"),q7o=l(),Vp=a("li"),Ufe=a("strong"),j7o=o("yolos"),D7o=o(" \u2014 "),iD=a("a"),G7o=o("YolosFeatureExtractor"),O7o=o(" (YOLOS model)"),V7o=l(),F(Xp.$$.fragment),X7o=l(),F(zp.$$.fragment),z7o=l(),Wp=a("div"),F(SL.$$.fragment),W7o=l(),Hfe=a("p"),Q7o=o("Register a new feature extractor for this class."),YQe=l(),ed=a("h2"),Qp=a("a"),Jfe=a("span"),F(RL.$$.fragment),U7o=l(),Yfe=a("span"),H7o=o("AutoProcessor"),KQe=l(),ko=a("div"),F(PL.$$.fragment),J7o=l(),BL=a("p"),Y7o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dD=a("a"),K7o=o("AutoProcessor.from_pretrained()"),Z7o=o(" class method."),e8o=l(),IL=a("p"),o8o=o("This class cannot be instantiated directly using "),Kfe=a("code"),r8o=o("__init__()"),t8o=o(" (throws an error)."),a8o=l(),Je=a("div"),F(NL.$$.fragment),n8o=l(),Zfe=a("p"),s8o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),l8o=l(),od=a("p"),i8o=o("The processor class to instantiate is selected based on the "),eme=a("code"),d8o=o("model_type"),c8o=o(` property of the config object (either
passed as an argument or loaded from `),ome=a("code"),f8o=o("pretrained_model_name_or_path"),m8o=o(" if possible):"),g8o=l(),ie=a("ul"),Up=a("li"),rme=a("strong"),h8o=o("clip"),p8o=o(" \u2014 "),cD=a("a"),_8o=o("CLIPProcessor"),u8o=o(" (CLIP model)"),b8o=l(),Hp=a("li"),tme=a("strong"),v8o=o("donut"),F8o=o(" \u2014 "),fD=a("a"),T8o=o("DonutProcessor"),M8o=o(" (Donut model)"),E8o=l(),Jp=a("li"),ame=a("strong"),C8o=o("flava"),w8o=o(" \u2014 "),mD=a("a"),A8o=o("FlavaProcessor"),L8o=o(" (FLAVA model)"),y8o=l(),Yp=a("li"),nme=a("strong"),x8o=o("groupvit"),$8o=o(" \u2014 "),gD=a("a"),k8o=o("CLIPProcessor"),S8o=o(" (GroupViT model)"),R8o=l(),Kp=a("li"),sme=a("strong"),P8o=o("layoutlmv2"),B8o=o(" \u2014 "),hD=a("a"),I8o=o("LayoutLMv2Processor"),N8o=o(" (LayoutLMv2 model)"),q8o=l(),Zp=a("li"),lme=a("strong"),j8o=o("layoutlmv3"),D8o=o(" \u2014 "),pD=a("a"),G8o=o("LayoutLMv3Processor"),O8o=o(" (LayoutLMv3 model)"),V8o=l(),e_=a("li"),ime=a("strong"),X8o=o("layoutxlm"),z8o=o(" \u2014 "),_D=a("a"),W8o=o("LayoutXLMProcessor"),Q8o=o(" (LayoutXLM model)"),U8o=l(),o_=a("li"),dme=a("strong"),H8o=o("owlvit"),J8o=o(" \u2014 "),uD=a("a"),Y8o=o("OwlViTProcessor"),K8o=o(" (OWL-ViT model)"),Z8o=l(),r_=a("li"),cme=a("strong"),e9o=o("sew"),o9o=o(" \u2014 "),bD=a("a"),r9o=o("Wav2Vec2Processor"),t9o=o(" (SEW model)"),a9o=l(),t_=a("li"),fme=a("strong"),n9o=o("sew-d"),s9o=o(" \u2014 "),vD=a("a"),l9o=o("Wav2Vec2Processor"),i9o=o(" (SEW-D model)"),d9o=l(),a_=a("li"),mme=a("strong"),c9o=o("speech_to_text"),f9o=o(" \u2014 "),FD=a("a"),m9o=o("Speech2TextProcessor"),g9o=o(" (Speech2Text model)"),h9o=l(),n_=a("li"),gme=a("strong"),p9o=o("speech_to_text_2"),_9o=o(" \u2014 "),TD=a("a"),u9o=o("Speech2Text2Processor"),b9o=o(" (Speech2Text2 model)"),v9o=l(),s_=a("li"),hme=a("strong"),F9o=o("trocr"),T9o=o(" \u2014 "),MD=a("a"),M9o=o("TrOCRProcessor"),E9o=o(" (TrOCR model)"),C9o=l(),l_=a("li"),pme=a("strong"),w9o=o("unispeech"),A9o=o(" \u2014 "),ED=a("a"),L9o=o("Wav2Vec2Processor"),y9o=o(" (UniSpeech model)"),x9o=l(),i_=a("li"),_me=a("strong"),$9o=o("unispeech-sat"),k9o=o(" \u2014 "),CD=a("a"),S9o=o("Wav2Vec2Processor"),R9o=o(" (UniSpeechSat model)"),P9o=l(),d_=a("li"),ume=a("strong"),B9o=o("vilt"),I9o=o(" \u2014 "),wD=a("a"),N9o=o("ViltProcessor"),q9o=o(" (ViLT model)"),j9o=l(),c_=a("li"),bme=a("strong"),D9o=o("vision-text-dual-encoder"),G9o=o(" \u2014 "),AD=a("a"),O9o=o("VisionTextDualEncoderProcessor"),V9o=o(" (VisionTextDualEncoder model)"),X9o=l(),f_=a("li"),vme=a("strong"),z9o=o("wav2vec2"),W9o=o(" \u2014 "),LD=a("a"),Q9o=o("Wav2Vec2Processor"),U9o=o(" (Wav2Vec2 model)"),H9o=l(),m_=a("li"),Fme=a("strong"),J9o=o("wav2vec2-conformer"),Y9o=o(" \u2014 "),yD=a("a"),K9o=o("Wav2Vec2Processor"),Z9o=o(" (Wav2Vec2-Conformer model)"),eMo=l(),g_=a("li"),Tme=a("strong"),oMo=o("wavlm"),rMo=o(" \u2014 "),xD=a("a"),tMo=o("Wav2Vec2Processor"),aMo=o(" (WavLM model)"),nMo=l(),F(h_.$$.fragment),sMo=l(),F(p_.$$.fragment),lMo=l(),__=a("div"),F(qL.$$.fragment),iMo=l(),Mme=a("p"),dMo=o("Register a new processor for this class."),ZQe=l(),rd=a("h2"),u_=a("a"),Eme=a("span"),F(jL.$$.fragment),cMo=l(),Cme=a("span"),fMo=o("AutoModel"),eUe=l(),So=a("div"),F(DL.$$.fragment),mMo=l(),td=a("p"),gMo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$D=a("a"),hMo=o("from_pretrained()"),pMo=o(" class method or the "),kD=a("a"),_Mo=o("from_config()"),uMo=o(` class
method.`),bMo=l(),GL=a("p"),vMo=o("This class cannot be instantiated directly using "),wme=a("code"),FMo=o("__init__()"),TMo=o(" (throws an error)."),MMo=l(),mt=a("div"),F(OL.$$.fragment),EMo=l(),Ame=a("p"),CMo=o("Instantiates one of the base model classes of the library from a configuration."),wMo=l(),ad=a("p"),AMo=o(`Note:
Loading a model from its configuration file does `),Lme=a("strong"),LMo=o("not"),yMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=a("a"),xMo=o("from_pretrained()"),$Mo=o(" to load the model weights."),kMo=l(),F(b_.$$.fragment),SMo=l(),Ye=a("div"),F(VL.$$.fragment),RMo=l(),yme=a("p"),PMo=o("Instantiate one of the base model classes of the library from a pretrained model."),BMo=l(),Va=a("p"),IMo=o("The model class to instantiate is selected based on the "),xme=a("code"),NMo=o("model_type"),qMo=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),jMo=o("pretrained_model_name_or_path"),DMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=a("code"),GMo=o("pretrained_model_name_or_path"),OMo=o(":"),VMo=l(),y=a("ul"),v_=a("li"),Sme=a("strong"),XMo=o("albert"),zMo=o(" \u2014 "),RD=a("a"),WMo=o("AlbertModel"),QMo=o(" (ALBERT model)"),UMo=l(),F_=a("li"),Rme=a("strong"),HMo=o("bart"),JMo=o(" \u2014 "),PD=a("a"),YMo=o("BartModel"),KMo=o(" (BART model)"),ZMo=l(),T_=a("li"),Pme=a("strong"),eEo=o("beit"),oEo=o(" \u2014 "),BD=a("a"),rEo=o("BeitModel"),tEo=o(" (BEiT model)"),aEo=l(),M_=a("li"),Bme=a("strong"),nEo=o("bert"),sEo=o(" \u2014 "),ID=a("a"),lEo=o("BertModel"),iEo=o(" (BERT model)"),dEo=l(),E_=a("li"),Ime=a("strong"),cEo=o("bert-generation"),fEo=o(" \u2014 "),ND=a("a"),mEo=o("BertGenerationEncoder"),gEo=o(" (Bert Generation model)"),hEo=l(),C_=a("li"),Nme=a("strong"),pEo=o("big_bird"),_Eo=o(" \u2014 "),qD=a("a"),uEo=o("BigBirdModel"),bEo=o(" (BigBird model)"),vEo=l(),w_=a("li"),qme=a("strong"),FEo=o("bigbird_pegasus"),TEo=o(" \u2014 "),jD=a("a"),MEo=o("BigBirdPegasusModel"),EEo=o(" (BigBird-Pegasus model)"),CEo=l(),A_=a("li"),jme=a("strong"),wEo=o("blenderbot"),AEo=o(" \u2014 "),DD=a("a"),LEo=o("BlenderbotModel"),yEo=o(" (Blenderbot model)"),xEo=l(),L_=a("li"),Dme=a("strong"),$Eo=o("blenderbot-small"),kEo=o(" \u2014 "),GD=a("a"),SEo=o("BlenderbotSmallModel"),REo=o(" (BlenderbotSmall model)"),PEo=l(),y_=a("li"),Gme=a("strong"),BEo=o("bloom"),IEo=o(" \u2014 "),OD=a("a"),NEo=o("BloomModel"),qEo=o(" (BLOOM model)"),jEo=l(),x_=a("li"),Ome=a("strong"),DEo=o("camembert"),GEo=o(" \u2014 "),VD=a("a"),OEo=o("CamembertModel"),VEo=o(" (CamemBERT model)"),XEo=l(),$_=a("li"),Vme=a("strong"),zEo=o("canine"),WEo=o(" \u2014 "),XD=a("a"),QEo=o("CanineModel"),UEo=o(" (CANINE model)"),HEo=l(),k_=a("li"),Xme=a("strong"),JEo=o("clip"),YEo=o(" \u2014 "),zD=a("a"),KEo=o("CLIPModel"),ZEo=o(" (CLIP model)"),e4o=l(),S_=a("li"),zme=a("strong"),o4o=o("codegen"),r4o=o(" \u2014 "),WD=a("a"),t4o=o("CodeGenModel"),a4o=o(" (CodeGen model)"),n4o=l(),R_=a("li"),Wme=a("strong"),s4o=o("convbert"),l4o=o(" \u2014 "),QD=a("a"),i4o=o("ConvBertModel"),d4o=o(" (ConvBERT model)"),c4o=l(),P_=a("li"),Qme=a("strong"),f4o=o("convnext"),m4o=o(" \u2014 "),UD=a("a"),g4o=o("ConvNextModel"),h4o=o(" (ConvNeXT model)"),p4o=l(),B_=a("li"),Ume=a("strong"),_4o=o("ctrl"),u4o=o(" \u2014 "),HD=a("a"),b4o=o("CTRLModel"),v4o=o(" (CTRL model)"),F4o=l(),I_=a("li"),Hme=a("strong"),T4o=o("cvt"),M4o=o(" \u2014 "),JD=a("a"),E4o=o("CvtModel"),C4o=o(" (CvT model)"),w4o=l(),N_=a("li"),Jme=a("strong"),A4o=o("data2vec-audio"),L4o=o(" \u2014 "),YD=a("a"),y4o=o("Data2VecAudioModel"),x4o=o(" (Data2VecAudio model)"),$4o=l(),q_=a("li"),Yme=a("strong"),k4o=o("data2vec-text"),S4o=o(" \u2014 "),KD=a("a"),R4o=o("Data2VecTextModel"),P4o=o(" (Data2VecText model)"),B4o=l(),j_=a("li"),Kme=a("strong"),I4o=o("data2vec-vision"),N4o=o(" \u2014 "),ZD=a("a"),q4o=o("Data2VecVisionModel"),j4o=o(" (Data2VecVision model)"),D4o=l(),D_=a("li"),Zme=a("strong"),G4o=o("deberta"),O4o=o(" \u2014 "),eG=a("a"),V4o=o("DebertaModel"),X4o=o(" (DeBERTa model)"),z4o=l(),G_=a("li"),ege=a("strong"),W4o=o("deberta-v2"),Q4o=o(" \u2014 "),oG=a("a"),U4o=o("DebertaV2Model"),H4o=o(" (DeBERTa-v2 model)"),J4o=l(),O_=a("li"),oge=a("strong"),Y4o=o("decision_transformer"),K4o=o(" \u2014 "),rG=a("a"),Z4o=o("DecisionTransformerModel"),eCo=o(" (Decision Transformer model)"),oCo=l(),V_=a("li"),rge=a("strong"),rCo=o("deit"),tCo=o(" \u2014 "),tG=a("a"),aCo=o("DeiTModel"),nCo=o(" (DeiT model)"),sCo=l(),X_=a("li"),tge=a("strong"),lCo=o("detr"),iCo=o(" \u2014 "),aG=a("a"),dCo=o("DetrModel"),cCo=o(" (DETR model)"),fCo=l(),z_=a("li"),age=a("strong"),mCo=o("distilbert"),gCo=o(" \u2014 "),nG=a("a"),hCo=o("DistilBertModel"),pCo=o(" (DistilBERT model)"),_Co=l(),W_=a("li"),nge=a("strong"),uCo=o("donut-swin"),bCo=o(" \u2014 "),sG=a("a"),vCo=o("DonutSwinModel"),FCo=o(" (DonutSwin model)"),TCo=l(),Q_=a("li"),sge=a("strong"),MCo=o("dpr"),ECo=o(" \u2014 "),lG=a("a"),CCo=o("DPRQuestionEncoder"),wCo=o(" (DPR model)"),ACo=l(),U_=a("li"),lge=a("strong"),LCo=o("dpt"),yCo=o(" \u2014 "),iG=a("a"),xCo=o("DPTModel"),$Co=o(" (DPT model)"),kCo=l(),H_=a("li"),ige=a("strong"),SCo=o("electra"),RCo=o(" \u2014 "),dG=a("a"),PCo=o("ElectraModel"),BCo=o(" (ELECTRA model)"),ICo=l(),J_=a("li"),dge=a("strong"),NCo=o("flaubert"),qCo=o(" \u2014 "),cG=a("a"),jCo=o("FlaubertModel"),DCo=o(" (FlauBERT model)"),GCo=l(),Y_=a("li"),cge=a("strong"),OCo=o("flava"),VCo=o(" \u2014 "),fG=a("a"),XCo=o("FlavaModel"),zCo=o(" (FLAVA model)"),WCo=l(),K_=a("li"),fge=a("strong"),QCo=o("fnet"),UCo=o(" \u2014 "),mG=a("a"),HCo=o("FNetModel"),JCo=o(" (FNet model)"),YCo=l(),Z_=a("li"),mge=a("strong"),KCo=o("fsmt"),ZCo=o(" \u2014 "),gG=a("a"),e3o=o("FSMTModel"),o3o=o(" (FairSeq Machine-Translation model)"),r3o=l(),nl=a("li"),gge=a("strong"),t3o=o("funnel"),a3o=o(" \u2014 "),hG=a("a"),n3o=o("FunnelModel"),s3o=o(" or "),pG=a("a"),l3o=o("FunnelBaseModel"),i3o=o(" (Funnel Transformer model)"),d3o=l(),eu=a("li"),hge=a("strong"),c3o=o("glpn"),f3o=o(" \u2014 "),_G=a("a"),m3o=o("GLPNModel"),g3o=o(" (GLPN model)"),h3o=l(),ou=a("li"),pge=a("strong"),p3o=o("gpt2"),_3o=o(" \u2014 "),uG=a("a"),u3o=o("GPT2Model"),b3o=o(" (OpenAI GPT-2 model)"),v3o=l(),ru=a("li"),_ge=a("strong"),F3o=o("gpt_neo"),T3o=o(" \u2014 "),bG=a("a"),M3o=o("GPTNeoModel"),E3o=o(" (GPT Neo model)"),C3o=l(),tu=a("li"),uge=a("strong"),w3o=o("gpt_neox"),A3o=o(" \u2014 "),vG=a("a"),L3o=o("GPTNeoXModel"),y3o=o(" (GPT NeoX model)"),x3o=l(),au=a("li"),bge=a("strong"),$3o=o("gptj"),k3o=o(" \u2014 "),FG=a("a"),S3o=o("GPTJModel"),R3o=o(" (GPT-J model)"),P3o=l(),nu=a("li"),vge=a("strong"),B3o=o("groupvit"),I3o=o(" \u2014 "),TG=a("a"),N3o=o("GroupViTModel"),q3o=o(" (GroupViT model)"),j3o=l(),su=a("li"),Fge=a("strong"),D3o=o("hubert"),G3o=o(" \u2014 "),MG=a("a"),O3o=o("HubertModel"),V3o=o(" (Hubert model)"),X3o=l(),lu=a("li"),Tge=a("strong"),z3o=o("ibert"),W3o=o(" \u2014 "),EG=a("a"),Q3o=o("IBertModel"),U3o=o(" (I-BERT model)"),H3o=l(),iu=a("li"),Mge=a("strong"),J3o=o("imagegpt"),Y3o=o(" \u2014 "),CG=a("a"),K3o=o("ImageGPTModel"),Z3o=o(" (ImageGPT model)"),e5o=l(),du=a("li"),Ege=a("strong"),o5o=o("layoutlm"),r5o=o(" \u2014 "),wG=a("a"),t5o=o("LayoutLMModel"),a5o=o(" (LayoutLM model)"),n5o=l(),cu=a("li"),Cge=a("strong"),s5o=o("layoutlmv2"),l5o=o(" \u2014 "),AG=a("a"),i5o=o("LayoutLMv2Model"),d5o=o(" (LayoutLMv2 model)"),c5o=l(),fu=a("li"),wge=a("strong"),f5o=o("layoutlmv3"),m5o=o(" \u2014 "),LG=a("a"),g5o=o("LayoutLMv3Model"),h5o=o(" (LayoutLMv3 model)"),p5o=l(),mu=a("li"),Age=a("strong"),_5o=o("led"),u5o=o(" \u2014 "),yG=a("a"),b5o=o("LEDModel"),v5o=o(" (LED model)"),F5o=l(),gu=a("li"),Lge=a("strong"),T5o=o("levit"),M5o=o(" \u2014 "),xG=a("a"),E5o=o("LevitModel"),C5o=o(" (LeViT model)"),w5o=l(),hu=a("li"),yge=a("strong"),A5o=o("longformer"),L5o=o(" \u2014 "),$G=a("a"),y5o=o("LongformerModel"),x5o=o(" (Longformer model)"),$5o=l(),pu=a("li"),xge=a("strong"),k5o=o("longt5"),S5o=o(" \u2014 "),kG=a("a"),R5o=o("LongT5Model"),P5o=o(" (LongT5 model)"),B5o=l(),_u=a("li"),$ge=a("strong"),I5o=o("luke"),N5o=o(" \u2014 "),SG=a("a"),q5o=o("LukeModel"),j5o=o(" (LUKE model)"),D5o=l(),uu=a("li"),kge=a("strong"),G5o=o("lxmert"),O5o=o(" \u2014 "),RG=a("a"),V5o=o("LxmertModel"),X5o=o(" (LXMERT model)"),z5o=l(),bu=a("li"),Sge=a("strong"),W5o=o("m2m_100"),Q5o=o(" \u2014 "),PG=a("a"),U5o=o("M2M100Model"),H5o=o(" (M2M100 model)"),J5o=l(),vu=a("li"),Rge=a("strong"),Y5o=o("marian"),K5o=o(" \u2014 "),BG=a("a"),Z5o=o("MarianModel"),e0o=o(" (Marian model)"),o0o=l(),Fu=a("li"),Pge=a("strong"),r0o=o("maskformer"),t0o=o(" \u2014 "),IG=a("a"),a0o=o("MaskFormerModel"),n0o=o(" (MaskFormer model)"),s0o=l(),Tu=a("li"),Bge=a("strong"),l0o=o("mbart"),i0o=o(" \u2014 "),NG=a("a"),d0o=o("MBartModel"),c0o=o(" (mBART model)"),f0o=l(),Mu=a("li"),Ige=a("strong"),m0o=o("mctct"),g0o=o(" \u2014 "),qG=a("a"),h0o=o("MCTCTModel"),p0o=o(" (M-CTC-T model)"),_0o=l(),Eu=a("li"),Nge=a("strong"),u0o=o("megatron-bert"),b0o=o(" \u2014 "),jG=a("a"),v0o=o("MegatronBertModel"),F0o=o(" (Megatron-BERT model)"),T0o=l(),Cu=a("li"),qge=a("strong"),M0o=o("mobilebert"),E0o=o(" \u2014 "),DG=a("a"),C0o=o("MobileBertModel"),w0o=o(" (MobileBERT model)"),A0o=l(),wu=a("li"),jge=a("strong"),L0o=o("mobilevit"),y0o=o(" \u2014 "),GG=a("a"),x0o=o("MobileViTModel"),$0o=o(" (MobileViT model)"),k0o=l(),Au=a("li"),Dge=a("strong"),S0o=o("mpnet"),R0o=o(" \u2014 "),OG=a("a"),P0o=o("MPNetModel"),B0o=o(" (MPNet model)"),I0o=l(),Lu=a("li"),Gge=a("strong"),N0o=o("mt5"),q0o=o(" \u2014 "),VG=a("a"),j0o=o("MT5Model"),D0o=o(" (MT5 model)"),G0o=l(),yu=a("li"),Oge=a("strong"),O0o=o("mvp"),V0o=o(" \u2014 "),XG=a("a"),X0o=o("MvpModel"),z0o=o(" (MVP model)"),W0o=l(),xu=a("li"),Vge=a("strong"),Q0o=o("nezha"),U0o=o(" \u2014 "),zG=a("a"),H0o=o("NezhaModel"),J0o=o(" (Nezha model)"),Y0o=l(),$u=a("li"),Xge=a("strong"),K0o=o("nllb"),Z0o=o(" \u2014 "),WG=a("a"),ewo=o("M2M100Model"),owo=o(" (NLLB model)"),rwo=l(),ku=a("li"),zge=a("strong"),two=o("nystromformer"),awo=o(" \u2014 "),QG=a("a"),nwo=o("NystromformerModel"),swo=o(" (Nystr\xF6mformer model)"),lwo=l(),Su=a("li"),Wge=a("strong"),iwo=o("openai-gpt"),dwo=o(" \u2014 "),UG=a("a"),cwo=o("OpenAIGPTModel"),fwo=o(" (OpenAI GPT model)"),mwo=l(),Ru=a("li"),Qge=a("strong"),gwo=o("opt"),hwo=o(" \u2014 "),HG=a("a"),pwo=o("OPTModel"),_wo=o(" (OPT model)"),uwo=l(),Pu=a("li"),Uge=a("strong"),bwo=o("owlvit"),vwo=o(" \u2014 "),JG=a("a"),Fwo=o("OwlViTModel"),Two=o(" (OWL-ViT model)"),Mwo=l(),Bu=a("li"),Hge=a("strong"),Ewo=o("pegasus"),Cwo=o(" \u2014 "),YG=a("a"),wwo=o("PegasusModel"),Awo=o(" (Pegasus model)"),Lwo=l(),Iu=a("li"),Jge=a("strong"),ywo=o("perceiver"),xwo=o(" \u2014 "),KG=a("a"),$wo=o("PerceiverModel"),kwo=o(" (Perceiver model)"),Swo=l(),Nu=a("li"),Yge=a("strong"),Rwo=o("plbart"),Pwo=o(" \u2014 "),ZG=a("a"),Bwo=o("PLBartModel"),Iwo=o(" (PLBart model)"),Nwo=l(),qu=a("li"),Kge=a("strong"),qwo=o("poolformer"),jwo=o(" \u2014 "),eO=a("a"),Dwo=o("PoolFormerModel"),Gwo=o(" (PoolFormer model)"),Owo=l(),ju=a("li"),Zge=a("strong"),Vwo=o("prophetnet"),Xwo=o(" \u2014 "),oO=a("a"),zwo=o("ProphetNetModel"),Wwo=o(" (ProphetNet model)"),Qwo=l(),Du=a("li"),ehe=a("strong"),Uwo=o("qdqbert"),Hwo=o(" \u2014 "),rO=a("a"),Jwo=o("QDQBertModel"),Ywo=o(" (QDQBert model)"),Kwo=l(),Gu=a("li"),ohe=a("strong"),Zwo=o("reformer"),eAo=o(" \u2014 "),tO=a("a"),oAo=o("ReformerModel"),rAo=o(" (Reformer model)"),tAo=l(),Ou=a("li"),rhe=a("strong"),aAo=o("regnet"),nAo=o(" \u2014 "),aO=a("a"),sAo=o("RegNetModel"),lAo=o(" (RegNet model)"),iAo=l(),Vu=a("li"),the=a("strong"),dAo=o("rembert"),cAo=o(" \u2014 "),nO=a("a"),fAo=o("RemBertModel"),mAo=o(" (RemBERT model)"),gAo=l(),Xu=a("li"),ahe=a("strong"),hAo=o("resnet"),pAo=o(" \u2014 "),sO=a("a"),_Ao=o("ResNetModel"),uAo=o(" (ResNet model)"),bAo=l(),zu=a("li"),nhe=a("strong"),vAo=o("retribert"),FAo=o(" \u2014 "),lO=a("a"),TAo=o("RetriBertModel"),MAo=o(" (RetriBERT model)"),EAo=l(),Wu=a("li"),she=a("strong"),CAo=o("roberta"),wAo=o(" \u2014 "),iO=a("a"),AAo=o("RobertaModel"),LAo=o(" (RoBERTa model)"),yAo=l(),Qu=a("li"),lhe=a("strong"),xAo=o("roformer"),$Ao=o(" \u2014 "),dO=a("a"),kAo=o("RoFormerModel"),SAo=o(" (RoFormer model)"),RAo=l(),Uu=a("li"),ihe=a("strong"),PAo=o("segformer"),BAo=o(" \u2014 "),cO=a("a"),IAo=o("SegformerModel"),NAo=o(" (SegFormer model)"),qAo=l(),Hu=a("li"),dhe=a("strong"),jAo=o("sew"),DAo=o(" \u2014 "),fO=a("a"),GAo=o("SEWModel"),OAo=o(" (SEW model)"),VAo=l(),Ju=a("li"),che=a("strong"),XAo=o("sew-d"),zAo=o(" \u2014 "),mO=a("a"),WAo=o("SEWDModel"),QAo=o(" (SEW-D model)"),UAo=l(),Yu=a("li"),fhe=a("strong"),HAo=o("speech_to_text"),JAo=o(" \u2014 "),gO=a("a"),YAo=o("Speech2TextModel"),KAo=o(" (Speech2Text model)"),ZAo=l(),Ku=a("li"),mhe=a("strong"),eLo=o("splinter"),oLo=o(" \u2014 "),hO=a("a"),rLo=o("SplinterModel"),tLo=o(" (Splinter model)"),aLo=l(),Zu=a("li"),ghe=a("strong"),nLo=o("squeezebert"),sLo=o(" \u2014 "),pO=a("a"),lLo=o("SqueezeBertModel"),iLo=o(" (SqueezeBERT model)"),dLo=l(),e1=a("li"),hhe=a("strong"),cLo=o("swin"),fLo=o(" \u2014 "),_O=a("a"),mLo=o("SwinModel"),gLo=o(" (Swin Transformer model)"),hLo=l(),o1=a("li"),phe=a("strong"),pLo=o("swinv2"),_Lo=o(" \u2014 "),uO=a("a"),uLo=o("Swinv2Model"),bLo=o(" (Swin Transformer V2 model)"),vLo=l(),r1=a("li"),_he=a("strong"),FLo=o("t5"),TLo=o(" \u2014 "),bO=a("a"),MLo=o("T5Model"),ELo=o(" (T5 model)"),CLo=l(),t1=a("li"),uhe=a("strong"),wLo=o("tapas"),ALo=o(" \u2014 "),vO=a("a"),LLo=o("TapasModel"),yLo=o(" (TAPAS model)"),xLo=l(),a1=a("li"),bhe=a("strong"),$Lo=o("trajectory_transformer"),kLo=o(" \u2014 "),FO=a("a"),SLo=o("TrajectoryTransformerModel"),RLo=o(" (Trajectory Transformer model)"),PLo=l(),n1=a("li"),vhe=a("strong"),BLo=o("transfo-xl"),ILo=o(" \u2014 "),TO=a("a"),NLo=o("TransfoXLModel"),qLo=o(" (Transformer-XL model)"),jLo=l(),s1=a("li"),Fhe=a("strong"),DLo=o("unispeech"),GLo=o(" \u2014 "),MO=a("a"),OLo=o("UniSpeechModel"),VLo=o(" (UniSpeech model)"),XLo=l(),l1=a("li"),The=a("strong"),zLo=o("unispeech-sat"),WLo=o(" \u2014 "),EO=a("a"),QLo=o("UniSpeechSatModel"),ULo=o(" (UniSpeechSat model)"),HLo=l(),i1=a("li"),Mhe=a("strong"),JLo=o("van"),YLo=o(" \u2014 "),CO=a("a"),KLo=o("VanModel"),ZLo=o(" (VAN model)"),eyo=l(),d1=a("li"),Ehe=a("strong"),oyo=o("videomae"),ryo=o(" \u2014 "),wO=a("a"),tyo=o("VideoMAEModel"),ayo=o(" (VideoMAE model)"),nyo=l(),c1=a("li"),Che=a("strong"),syo=o("vilt"),lyo=o(" \u2014 "),AO=a("a"),iyo=o("ViltModel"),dyo=o(" (ViLT model)"),cyo=l(),f1=a("li"),whe=a("strong"),fyo=o("vision-text-dual-encoder"),myo=o(" \u2014 "),LO=a("a"),gyo=o("VisionTextDualEncoderModel"),hyo=o(" (VisionTextDualEncoder model)"),pyo=l(),m1=a("li"),Ahe=a("strong"),_yo=o("visual_bert"),uyo=o(" \u2014 "),yO=a("a"),byo=o("VisualBertModel"),vyo=o(" (VisualBERT model)"),Fyo=l(),g1=a("li"),Lhe=a("strong"),Tyo=o("vit"),Myo=o(" \u2014 "),xO=a("a"),Eyo=o("ViTModel"),Cyo=o(" (ViT model)"),wyo=l(),h1=a("li"),yhe=a("strong"),Ayo=o("vit_mae"),Lyo=o(" \u2014 "),$O=a("a"),yyo=o("ViTMAEModel"),xyo=o(" (ViTMAE model)"),$yo=l(),p1=a("li"),xhe=a("strong"),kyo=o("wav2vec2"),Syo=o(" \u2014 "),kO=a("a"),Ryo=o("Wav2Vec2Model"),Pyo=o(" (Wav2Vec2 model)"),Byo=l(),_1=a("li"),$he=a("strong"),Iyo=o("wav2vec2-conformer"),Nyo=o(" \u2014 "),SO=a("a"),qyo=o("Wav2Vec2ConformerModel"),jyo=o(" (Wav2Vec2-Conformer model)"),Dyo=l(),u1=a("li"),khe=a("strong"),Gyo=o("wavlm"),Oyo=o(" \u2014 "),RO=a("a"),Vyo=o("WavLMModel"),Xyo=o(" (WavLM model)"),zyo=l(),b1=a("li"),She=a("strong"),Wyo=o("xglm"),Qyo=o(" \u2014 "),PO=a("a"),Uyo=o("XGLMModel"),Hyo=o(" (XGLM model)"),Jyo=l(),v1=a("li"),Rhe=a("strong"),Yyo=o("xlm"),Kyo=o(" \u2014 "),BO=a("a"),Zyo=o("XLMModel"),exo=o(" (XLM model)"),oxo=l(),F1=a("li"),Phe=a("strong"),rxo=o("xlm-prophetnet"),txo=o(" \u2014 "),IO=a("a"),axo=o("XLMProphetNetModel"),nxo=o(" (XLM-ProphetNet model)"),sxo=l(),T1=a("li"),Bhe=a("strong"),lxo=o("xlm-roberta"),ixo=o(" \u2014 "),NO=a("a"),dxo=o("XLMRobertaModel"),cxo=o(" (XLM-RoBERTa model)"),fxo=l(),M1=a("li"),Ihe=a("strong"),mxo=o("xlm-roberta-xl"),gxo=o(" \u2014 "),qO=a("a"),hxo=o("XLMRobertaXLModel"),pxo=o(" (XLM-RoBERTa-XL model)"),_xo=l(),E1=a("li"),Nhe=a("strong"),uxo=o("xlnet"),bxo=o(" \u2014 "),jO=a("a"),vxo=o("XLNetModel"),Fxo=o(" (XLNet model)"),Txo=l(),C1=a("li"),qhe=a("strong"),Mxo=o("yolos"),Exo=o(" \u2014 "),DO=a("a"),Cxo=o("YolosModel"),wxo=o(" (YOLOS model)"),Axo=l(),w1=a("li"),jhe=a("strong"),Lxo=o("yoso"),yxo=o(" \u2014 "),GO=a("a"),xxo=o("YosoModel"),$xo=o(" (YOSO model)"),kxo=l(),A1=a("p"),Sxo=o("The model is set in evaluation mode by default using "),Dhe=a("code"),Rxo=o("model.eval()"),Pxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=a("code"),Bxo=o("model.train()"),Ixo=l(),F(L1.$$.fragment),oUe=l(),nd=a("h2"),y1=a("a"),Ohe=a("span"),F(XL.$$.fragment),Nxo=l(),Vhe=a("span"),qxo=o("AutoModelForPreTraining"),rUe=l(),Ro=a("div"),F(zL.$$.fragment),jxo=l(),sd=a("p"),Dxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),OO=a("a"),Gxo=o("from_pretrained()"),Oxo=o(" class method or the "),VO=a("a"),Vxo=o("from_config()"),Xxo=o(` class
method.`),zxo=l(),WL=a("p"),Wxo=o("This class cannot be instantiated directly using "),Xhe=a("code"),Qxo=o("__init__()"),Uxo=o(" (throws an error)."),Hxo=l(),gt=a("div"),F(QL.$$.fragment),Jxo=l(),zhe=a("p"),Yxo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Kxo=l(),ld=a("p"),Zxo=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),e$o=o("not"),o$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=a("a"),r$o=o("from_pretrained()"),t$o=o(" to load the model weights."),a$o=l(),F(x1.$$.fragment),n$o=l(),Ke=a("div"),F(UL.$$.fragment),s$o=l(),Qhe=a("p"),l$o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),i$o=l(),Xa=a("p"),d$o=o("The model class to instantiate is selected based on the "),Uhe=a("code"),c$o=o("model_type"),f$o=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),m$o=o("pretrained_model_name_or_path"),g$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),h$o=o("pretrained_model_name_or_path"),p$o=o(":"),_$o=l(),G=a("ul"),$1=a("li"),Yhe=a("strong"),u$o=o("albert"),b$o=o(" \u2014 "),zO=a("a"),v$o=o("AlbertForPreTraining"),F$o=o(" (ALBERT model)"),T$o=l(),k1=a("li"),Khe=a("strong"),M$o=o("bart"),E$o=o(" \u2014 "),WO=a("a"),C$o=o("BartForConditionalGeneration"),w$o=o(" (BART model)"),A$o=l(),S1=a("li"),Zhe=a("strong"),L$o=o("bert"),y$o=o(" \u2014 "),QO=a("a"),x$o=o("BertForPreTraining"),$$o=o(" (BERT model)"),k$o=l(),R1=a("li"),epe=a("strong"),S$o=o("big_bird"),R$o=o(" \u2014 "),UO=a("a"),P$o=o("BigBirdForPreTraining"),B$o=o(" (BigBird model)"),I$o=l(),P1=a("li"),ope=a("strong"),N$o=o("bloom"),q$o=o(" \u2014 "),HO=a("a"),j$o=o("BloomForCausalLM"),D$o=o(" (BLOOM model)"),G$o=l(),B1=a("li"),rpe=a("strong"),O$o=o("camembert"),V$o=o(" \u2014 "),JO=a("a"),X$o=o("CamembertForMaskedLM"),z$o=o(" (CamemBERT model)"),W$o=l(),I1=a("li"),tpe=a("strong"),Q$o=o("ctrl"),U$o=o(" \u2014 "),YO=a("a"),H$o=o("CTRLLMHeadModel"),J$o=o(" (CTRL model)"),Y$o=l(),N1=a("li"),ape=a("strong"),K$o=o("data2vec-text"),Z$o=o(" \u2014 "),KO=a("a"),eko=o("Data2VecTextForMaskedLM"),oko=o(" (Data2VecText model)"),rko=l(),q1=a("li"),npe=a("strong"),tko=o("deberta"),ako=o(" \u2014 "),ZO=a("a"),nko=o("DebertaForMaskedLM"),sko=o(" (DeBERTa model)"),lko=l(),j1=a("li"),spe=a("strong"),iko=o("deberta-v2"),dko=o(" \u2014 "),eV=a("a"),cko=o("DebertaV2ForMaskedLM"),fko=o(" (DeBERTa-v2 model)"),mko=l(),D1=a("li"),lpe=a("strong"),gko=o("distilbert"),hko=o(" \u2014 "),oV=a("a"),pko=o("DistilBertForMaskedLM"),_ko=o(" (DistilBERT model)"),uko=l(),G1=a("li"),ipe=a("strong"),bko=o("electra"),vko=o(" \u2014 "),rV=a("a"),Fko=o("ElectraForPreTraining"),Tko=o(" (ELECTRA model)"),Mko=l(),O1=a("li"),dpe=a("strong"),Eko=o("flaubert"),Cko=o(" \u2014 "),tV=a("a"),wko=o("FlaubertWithLMHeadModel"),Ako=o(" (FlauBERT model)"),Lko=l(),V1=a("li"),cpe=a("strong"),yko=o("flava"),xko=o(" \u2014 "),aV=a("a"),$ko=o("FlavaForPreTraining"),kko=o(" (FLAVA model)"),Sko=l(),X1=a("li"),fpe=a("strong"),Rko=o("fnet"),Pko=o(" \u2014 "),nV=a("a"),Bko=o("FNetForPreTraining"),Iko=o(" (FNet model)"),Nko=l(),z1=a("li"),mpe=a("strong"),qko=o("fsmt"),jko=o(" \u2014 "),sV=a("a"),Dko=o("FSMTForConditionalGeneration"),Gko=o(" (FairSeq Machine-Translation model)"),Oko=l(),W1=a("li"),gpe=a("strong"),Vko=o("funnel"),Xko=o(" \u2014 "),lV=a("a"),zko=o("FunnelForPreTraining"),Wko=o(" (Funnel Transformer model)"),Qko=l(),Q1=a("li"),hpe=a("strong"),Uko=o("gpt2"),Hko=o(" \u2014 "),iV=a("a"),Jko=o("GPT2LMHeadModel"),Yko=o(" (OpenAI GPT-2 model)"),Kko=l(),U1=a("li"),ppe=a("strong"),Zko=o("ibert"),eSo=o(" \u2014 "),dV=a("a"),oSo=o("IBertForMaskedLM"),rSo=o(" (I-BERT model)"),tSo=l(),H1=a("li"),_pe=a("strong"),aSo=o("layoutlm"),nSo=o(" \u2014 "),cV=a("a"),sSo=o("LayoutLMForMaskedLM"),lSo=o(" (LayoutLM model)"),iSo=l(),J1=a("li"),upe=a("strong"),dSo=o("longformer"),cSo=o(" \u2014 "),fV=a("a"),fSo=o("LongformerForMaskedLM"),mSo=o(" (Longformer model)"),gSo=l(),Y1=a("li"),bpe=a("strong"),hSo=o("luke"),pSo=o(" \u2014 "),mV=a("a"),_So=o("LukeForMaskedLM"),uSo=o(" (LUKE model)"),bSo=l(),K1=a("li"),vpe=a("strong"),vSo=o("lxmert"),FSo=o(" \u2014 "),gV=a("a"),TSo=o("LxmertForPreTraining"),MSo=o(" (LXMERT model)"),ESo=l(),Z1=a("li"),Fpe=a("strong"),CSo=o("megatron-bert"),wSo=o(" \u2014 "),hV=a("a"),ASo=o("MegatronBertForPreTraining"),LSo=o(" (Megatron-BERT model)"),ySo=l(),e2=a("li"),Tpe=a("strong"),xSo=o("mobilebert"),$So=o(" \u2014 "),pV=a("a"),kSo=o("MobileBertForPreTraining"),SSo=o(" (MobileBERT model)"),RSo=l(),o2=a("li"),Mpe=a("strong"),PSo=o("mpnet"),BSo=o(" \u2014 "),_V=a("a"),ISo=o("MPNetForMaskedLM"),NSo=o(" (MPNet model)"),qSo=l(),r2=a("li"),Epe=a("strong"),jSo=o("mvp"),DSo=o(" \u2014 "),uV=a("a"),GSo=o("MvpForConditionalGeneration"),OSo=o(" (MVP model)"),VSo=l(),t2=a("li"),Cpe=a("strong"),XSo=o("nezha"),zSo=o(" \u2014 "),bV=a("a"),WSo=o("NezhaForPreTraining"),QSo=o(" (Nezha model)"),USo=l(),a2=a("li"),wpe=a("strong"),HSo=o("openai-gpt"),JSo=o(" \u2014 "),vV=a("a"),YSo=o("OpenAIGPTLMHeadModel"),KSo=o(" (OpenAI GPT model)"),ZSo=l(),n2=a("li"),Ape=a("strong"),eRo=o("retribert"),oRo=o(" \u2014 "),FV=a("a"),rRo=o("RetriBertModel"),tRo=o(" (RetriBERT model)"),aRo=l(),s2=a("li"),Lpe=a("strong"),nRo=o("roberta"),sRo=o(" \u2014 "),TV=a("a"),lRo=o("RobertaForMaskedLM"),iRo=o(" (RoBERTa model)"),dRo=l(),l2=a("li"),ype=a("strong"),cRo=o("splinter"),fRo=o(" \u2014 "),MV=a("a"),mRo=o("SplinterForPreTraining"),gRo=o(" (Splinter model)"),hRo=l(),i2=a("li"),xpe=a("strong"),pRo=o("squeezebert"),_Ro=o(" \u2014 "),EV=a("a"),uRo=o("SqueezeBertForMaskedLM"),bRo=o(" (SqueezeBERT model)"),vRo=l(),d2=a("li"),$pe=a("strong"),FRo=o("t5"),TRo=o(" \u2014 "),CV=a("a"),MRo=o("T5ForConditionalGeneration"),ERo=o(" (T5 model)"),CRo=l(),c2=a("li"),kpe=a("strong"),wRo=o("tapas"),ARo=o(" \u2014 "),wV=a("a"),LRo=o("TapasForMaskedLM"),yRo=o(" (TAPAS model)"),xRo=l(),f2=a("li"),Spe=a("strong"),$Ro=o("transfo-xl"),kRo=o(" \u2014 "),AV=a("a"),SRo=o("TransfoXLLMHeadModel"),RRo=o(" (Transformer-XL model)"),PRo=l(),m2=a("li"),Rpe=a("strong"),BRo=o("unispeech"),IRo=o(" \u2014 "),LV=a("a"),NRo=o("UniSpeechForPreTraining"),qRo=o(" (UniSpeech model)"),jRo=l(),g2=a("li"),Ppe=a("strong"),DRo=o("unispeech-sat"),GRo=o(" \u2014 "),yV=a("a"),ORo=o("UniSpeechSatForPreTraining"),VRo=o(" (UniSpeechSat model)"),XRo=l(),h2=a("li"),Bpe=a("strong"),zRo=o("videomae"),WRo=o(" \u2014 "),xV=a("a"),QRo=o("VideoMAEForPreTraining"),URo=o(" (VideoMAE model)"),HRo=l(),p2=a("li"),Ipe=a("strong"),JRo=o("visual_bert"),YRo=o(" \u2014 "),$V=a("a"),KRo=o("VisualBertForPreTraining"),ZRo=o(" (VisualBERT model)"),ePo=l(),_2=a("li"),Npe=a("strong"),oPo=o("vit_mae"),rPo=o(" \u2014 "),kV=a("a"),tPo=o("ViTMAEForPreTraining"),aPo=o(" (ViTMAE model)"),nPo=l(),u2=a("li"),qpe=a("strong"),sPo=o("wav2vec2"),lPo=o(" \u2014 "),SV=a("a"),iPo=o("Wav2Vec2ForPreTraining"),dPo=o(" (Wav2Vec2 model)"),cPo=l(),b2=a("li"),jpe=a("strong"),fPo=o("wav2vec2-conformer"),mPo=o(" \u2014 "),RV=a("a"),gPo=o("Wav2Vec2ConformerForPreTraining"),hPo=o(" (Wav2Vec2-Conformer model)"),pPo=l(),v2=a("li"),Dpe=a("strong"),_Po=o("xlm"),uPo=o(" \u2014 "),PV=a("a"),bPo=o("XLMWithLMHeadModel"),vPo=o(" (XLM model)"),FPo=l(),F2=a("li"),Gpe=a("strong"),TPo=o("xlm-roberta"),MPo=o(" \u2014 "),BV=a("a"),EPo=o("XLMRobertaForMaskedLM"),CPo=o(" (XLM-RoBERTa model)"),wPo=l(),T2=a("li"),Ope=a("strong"),APo=o("xlm-roberta-xl"),LPo=o(" \u2014 "),IV=a("a"),yPo=o("XLMRobertaXLForMaskedLM"),xPo=o(" (XLM-RoBERTa-XL model)"),$Po=l(),M2=a("li"),Vpe=a("strong"),kPo=o("xlnet"),SPo=o(" \u2014 "),NV=a("a"),RPo=o("XLNetLMHeadModel"),PPo=o(" (XLNet model)"),BPo=l(),E2=a("p"),IPo=o("The model is set in evaluation mode by default using "),Xpe=a("code"),NPo=o("model.eval()"),qPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),jPo=o("model.train()"),DPo=l(),F(C2.$$.fragment),tUe=l(),id=a("h2"),w2=a("a"),Wpe=a("span"),F(HL.$$.fragment),GPo=l(),Qpe=a("span"),OPo=o("AutoModelForCausalLM"),aUe=l(),Po=a("div"),F(JL.$$.fragment),VPo=l(),dd=a("p"),XPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qV=a("a"),zPo=o("from_pretrained()"),WPo=o(" class method or the "),jV=a("a"),QPo=o("from_config()"),UPo=o(` class
method.`),HPo=l(),YL=a("p"),JPo=o("This class cannot be instantiated directly using "),Upe=a("code"),YPo=o("__init__()"),KPo=o(" (throws an error)."),ZPo=l(),ht=a("div"),F(KL.$$.fragment),eBo=l(),Hpe=a("p"),oBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rBo=l(),cd=a("p"),tBo=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),aBo=o("not"),nBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),sBo=o("from_pretrained()"),lBo=o(" to load the model weights."),iBo=l(),F(A2.$$.fragment),dBo=l(),Ze=a("div"),F(ZL.$$.fragment),cBo=l(),Ype=a("p"),fBo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mBo=l(),za=a("p"),gBo=o("The model class to instantiate is selected based on the "),Kpe=a("code"),hBo=o("model_type"),pBo=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),_Bo=o("pretrained_model_name_or_path"),uBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),bBo=o("pretrained_model_name_or_path"),vBo=o(":"),FBo=l(),z=a("ul"),L2=a("li"),o_e=a("strong"),TBo=o("bart"),MBo=o(" \u2014 "),GV=a("a"),EBo=o("BartForCausalLM"),CBo=o(" (BART model)"),wBo=l(),y2=a("li"),r_e=a("strong"),ABo=o("bert"),LBo=o(" \u2014 "),OV=a("a"),yBo=o("BertLMHeadModel"),xBo=o(" (BERT model)"),$Bo=l(),x2=a("li"),t_e=a("strong"),kBo=o("bert-generation"),SBo=o(" \u2014 "),VV=a("a"),RBo=o("BertGenerationDecoder"),PBo=o(" (Bert Generation model)"),BBo=l(),$2=a("li"),a_e=a("strong"),IBo=o("big_bird"),NBo=o(" \u2014 "),XV=a("a"),qBo=o("BigBirdForCausalLM"),jBo=o(" (BigBird model)"),DBo=l(),k2=a("li"),n_e=a("strong"),GBo=o("bigbird_pegasus"),OBo=o(" \u2014 "),zV=a("a"),VBo=o("BigBirdPegasusForCausalLM"),XBo=o(" (BigBird-Pegasus model)"),zBo=l(),S2=a("li"),s_e=a("strong"),WBo=o("blenderbot"),QBo=o(" \u2014 "),WV=a("a"),UBo=o("BlenderbotForCausalLM"),HBo=o(" (Blenderbot model)"),JBo=l(),R2=a("li"),l_e=a("strong"),YBo=o("blenderbot-small"),KBo=o(" \u2014 "),QV=a("a"),ZBo=o("BlenderbotSmallForCausalLM"),eIo=o(" (BlenderbotSmall model)"),oIo=l(),P2=a("li"),i_e=a("strong"),rIo=o("bloom"),tIo=o(" \u2014 "),UV=a("a"),aIo=o("BloomForCausalLM"),nIo=o(" (BLOOM model)"),sIo=l(),B2=a("li"),d_e=a("strong"),lIo=o("camembert"),iIo=o(" \u2014 "),HV=a("a"),dIo=o("CamembertForCausalLM"),cIo=o(" (CamemBERT model)"),fIo=l(),I2=a("li"),c_e=a("strong"),mIo=o("codegen"),gIo=o(" \u2014 "),JV=a("a"),hIo=o("CodeGenForCausalLM"),pIo=o(" (CodeGen model)"),_Io=l(),N2=a("li"),f_e=a("strong"),uIo=o("ctrl"),bIo=o(" \u2014 "),YV=a("a"),vIo=o("CTRLLMHeadModel"),FIo=o(" (CTRL model)"),TIo=l(),q2=a("li"),m_e=a("strong"),MIo=o("data2vec-text"),EIo=o(" \u2014 "),KV=a("a"),CIo=o("Data2VecTextForCausalLM"),wIo=o(" (Data2VecText model)"),AIo=l(),j2=a("li"),g_e=a("strong"),LIo=o("electra"),yIo=o(" \u2014 "),ZV=a("a"),xIo=o("ElectraForCausalLM"),$Io=o(" (ELECTRA model)"),kIo=l(),D2=a("li"),h_e=a("strong"),SIo=o("gpt2"),RIo=o(" \u2014 "),eX=a("a"),PIo=o("GPT2LMHeadModel"),BIo=o(" (OpenAI GPT-2 model)"),IIo=l(),G2=a("li"),p_e=a("strong"),NIo=o("gpt_neo"),qIo=o(" \u2014 "),oX=a("a"),jIo=o("GPTNeoForCausalLM"),DIo=o(" (GPT Neo model)"),GIo=l(),O2=a("li"),__e=a("strong"),OIo=o("gpt_neox"),VIo=o(" \u2014 "),rX=a("a"),XIo=o("GPTNeoXForCausalLM"),zIo=o(" (GPT NeoX model)"),WIo=l(),V2=a("li"),u_e=a("strong"),QIo=o("gptj"),UIo=o(" \u2014 "),tX=a("a"),HIo=o("GPTJForCausalLM"),JIo=o(" (GPT-J model)"),YIo=l(),X2=a("li"),b_e=a("strong"),KIo=o("marian"),ZIo=o(" \u2014 "),aX=a("a"),eNo=o("MarianForCausalLM"),oNo=o(" (Marian model)"),rNo=l(),z2=a("li"),v_e=a("strong"),tNo=o("mbart"),aNo=o(" \u2014 "),nX=a("a"),nNo=o("MBartForCausalLM"),sNo=o(" (mBART model)"),lNo=l(),W2=a("li"),F_e=a("strong"),iNo=o("megatron-bert"),dNo=o(" \u2014 "),sX=a("a"),cNo=o("MegatronBertForCausalLM"),fNo=o(" (Megatron-BERT model)"),mNo=l(),Q2=a("li"),T_e=a("strong"),gNo=o("mvp"),hNo=o(" \u2014 "),lX=a("a"),pNo=o("MvpForCausalLM"),_No=o(" (MVP model)"),uNo=l(),U2=a("li"),M_e=a("strong"),bNo=o("openai-gpt"),vNo=o(" \u2014 "),iX=a("a"),FNo=o("OpenAIGPTLMHeadModel"),TNo=o(" (OpenAI GPT model)"),MNo=l(),H2=a("li"),E_e=a("strong"),ENo=o("opt"),CNo=o(" \u2014 "),dX=a("a"),wNo=o("OPTForCausalLM"),ANo=o(" (OPT model)"),LNo=l(),J2=a("li"),C_e=a("strong"),yNo=o("pegasus"),xNo=o(" \u2014 "),cX=a("a"),$No=o("PegasusForCausalLM"),kNo=o(" (Pegasus model)"),SNo=l(),Y2=a("li"),w_e=a("strong"),RNo=o("plbart"),PNo=o(" \u2014 "),fX=a("a"),BNo=o("PLBartForCausalLM"),INo=o(" (PLBart model)"),NNo=l(),K2=a("li"),A_e=a("strong"),qNo=o("prophetnet"),jNo=o(" \u2014 "),mX=a("a"),DNo=o("ProphetNetForCausalLM"),GNo=o(" (ProphetNet model)"),ONo=l(),Z2=a("li"),L_e=a("strong"),VNo=o("qdqbert"),XNo=o(" \u2014 "),gX=a("a"),zNo=o("QDQBertLMHeadModel"),WNo=o(" (QDQBert model)"),QNo=l(),eb=a("li"),y_e=a("strong"),UNo=o("reformer"),HNo=o(" \u2014 "),hX=a("a"),JNo=o("ReformerModelWithLMHead"),YNo=o(" (Reformer model)"),KNo=l(),ob=a("li"),x_e=a("strong"),ZNo=o("rembert"),eqo=o(" \u2014 "),pX=a("a"),oqo=o("RemBertForCausalLM"),rqo=o(" (RemBERT model)"),tqo=l(),rb=a("li"),$_e=a("strong"),aqo=o("roberta"),nqo=o(" \u2014 "),_X=a("a"),sqo=o("RobertaForCausalLM"),lqo=o(" (RoBERTa model)"),iqo=l(),tb=a("li"),k_e=a("strong"),dqo=o("roformer"),cqo=o(" \u2014 "),uX=a("a"),fqo=o("RoFormerForCausalLM"),mqo=o(" (RoFormer model)"),gqo=l(),ab=a("li"),S_e=a("strong"),hqo=o("speech_to_text_2"),pqo=o(" \u2014 "),bX=a("a"),_qo=o("Speech2Text2ForCausalLM"),uqo=o(" (Speech2Text2 model)"),bqo=l(),nb=a("li"),R_e=a("strong"),vqo=o("transfo-xl"),Fqo=o(" \u2014 "),vX=a("a"),Tqo=o("TransfoXLLMHeadModel"),Mqo=o(" (Transformer-XL model)"),Eqo=l(),sb=a("li"),P_e=a("strong"),Cqo=o("trocr"),wqo=o(" \u2014 "),FX=a("a"),Aqo=o("TrOCRForCausalLM"),Lqo=o(" (TrOCR model)"),yqo=l(),lb=a("li"),B_e=a("strong"),xqo=o("xglm"),$qo=o(" \u2014 "),TX=a("a"),kqo=o("XGLMForCausalLM"),Sqo=o(" (XGLM model)"),Rqo=l(),ib=a("li"),I_e=a("strong"),Pqo=o("xlm"),Bqo=o(" \u2014 "),MX=a("a"),Iqo=o("XLMWithLMHeadModel"),Nqo=o(" (XLM model)"),qqo=l(),db=a("li"),N_e=a("strong"),jqo=o("xlm-prophetnet"),Dqo=o(" \u2014 "),EX=a("a"),Gqo=o("XLMProphetNetForCausalLM"),Oqo=o(" (XLM-ProphetNet model)"),Vqo=l(),cb=a("li"),q_e=a("strong"),Xqo=o("xlm-roberta"),zqo=o(" \u2014 "),CX=a("a"),Wqo=o("XLMRobertaForCausalLM"),Qqo=o(" (XLM-RoBERTa model)"),Uqo=l(),fb=a("li"),j_e=a("strong"),Hqo=o("xlm-roberta-xl"),Jqo=o(" \u2014 "),wX=a("a"),Yqo=o("XLMRobertaXLForCausalLM"),Kqo=o(" (XLM-RoBERTa-XL model)"),Zqo=l(),mb=a("li"),D_e=a("strong"),ejo=o("xlnet"),ojo=o(" \u2014 "),AX=a("a"),rjo=o("XLNetLMHeadModel"),tjo=o(" (XLNet model)"),ajo=l(),gb=a("p"),njo=o("The model is set in evaluation mode by default using "),G_e=a("code"),sjo=o("model.eval()"),ljo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),ijo=o("model.train()"),djo=l(),F(hb.$$.fragment),nUe=l(),fd=a("h2"),pb=a("a"),V_e=a("span"),F(ey.$$.fragment),cjo=l(),X_e=a("span"),fjo=o("AutoModelForMaskedLM"),sUe=l(),Bo=a("div"),F(oy.$$.fragment),mjo=l(),md=a("p"),gjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LX=a("a"),hjo=o("from_pretrained()"),pjo=o(" class method or the "),yX=a("a"),_jo=o("from_config()"),ujo=o(` class
method.`),bjo=l(),ry=a("p"),vjo=o("This class cannot be instantiated directly using "),z_e=a("code"),Fjo=o("__init__()"),Tjo=o(" (throws an error)."),Mjo=l(),pt=a("div"),F(ty.$$.fragment),Ejo=l(),W_e=a("p"),Cjo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wjo=l(),gd=a("p"),Ajo=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),Ljo=o("not"),yjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=a("a"),xjo=o("from_pretrained()"),$jo=o(" to load the model weights."),kjo=l(),F(_b.$$.fragment),Sjo=l(),eo=a("div"),F(ay.$$.fragment),Rjo=l(),U_e=a("p"),Pjo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bjo=l(),Wa=a("p"),Ijo=o("The model class to instantiate is selected based on the "),H_e=a("code"),Njo=o("model_type"),qjo=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),jjo=o("pretrained_model_name_or_path"),Djo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),Gjo=o("pretrained_model_name_or_path"),Ojo=o(":"),Vjo=l(),U=a("ul"),ub=a("li"),K_e=a("strong"),Xjo=o("albert"),zjo=o(" \u2014 "),$X=a("a"),Wjo=o("AlbertForMaskedLM"),Qjo=o(" (ALBERT model)"),Ujo=l(),bb=a("li"),Z_e=a("strong"),Hjo=o("bart"),Jjo=o(" \u2014 "),kX=a("a"),Yjo=o("BartForConditionalGeneration"),Kjo=o(" (BART model)"),Zjo=l(),vb=a("li"),eue=a("strong"),eDo=o("bert"),oDo=o(" \u2014 "),SX=a("a"),rDo=o("BertForMaskedLM"),tDo=o(" (BERT model)"),aDo=l(),Fb=a("li"),oue=a("strong"),nDo=o("big_bird"),sDo=o(" \u2014 "),RX=a("a"),lDo=o("BigBirdForMaskedLM"),iDo=o(" (BigBird model)"),dDo=l(),Tb=a("li"),rue=a("strong"),cDo=o("camembert"),fDo=o(" \u2014 "),PX=a("a"),mDo=o("CamembertForMaskedLM"),gDo=o(" (CamemBERT model)"),hDo=l(),Mb=a("li"),tue=a("strong"),pDo=o("convbert"),_Do=o(" \u2014 "),BX=a("a"),uDo=o("ConvBertForMaskedLM"),bDo=o(" (ConvBERT model)"),vDo=l(),Eb=a("li"),aue=a("strong"),FDo=o("data2vec-text"),TDo=o(" \u2014 "),IX=a("a"),MDo=o("Data2VecTextForMaskedLM"),EDo=o(" (Data2VecText model)"),CDo=l(),Cb=a("li"),nue=a("strong"),wDo=o("deberta"),ADo=o(" \u2014 "),NX=a("a"),LDo=o("DebertaForMaskedLM"),yDo=o(" (DeBERTa model)"),xDo=l(),wb=a("li"),sue=a("strong"),$Do=o("deberta-v2"),kDo=o(" \u2014 "),qX=a("a"),SDo=o("DebertaV2ForMaskedLM"),RDo=o(" (DeBERTa-v2 model)"),PDo=l(),Ab=a("li"),lue=a("strong"),BDo=o("distilbert"),IDo=o(" \u2014 "),jX=a("a"),NDo=o("DistilBertForMaskedLM"),qDo=o(" (DistilBERT model)"),jDo=l(),Lb=a("li"),iue=a("strong"),DDo=o("electra"),GDo=o(" \u2014 "),DX=a("a"),ODo=o("ElectraForMaskedLM"),VDo=o(" (ELECTRA model)"),XDo=l(),yb=a("li"),due=a("strong"),zDo=o("flaubert"),WDo=o(" \u2014 "),GX=a("a"),QDo=o("FlaubertWithLMHeadModel"),UDo=o(" (FlauBERT model)"),HDo=l(),xb=a("li"),cue=a("strong"),JDo=o("fnet"),YDo=o(" \u2014 "),OX=a("a"),KDo=o("FNetForMaskedLM"),ZDo=o(" (FNet model)"),eGo=l(),$b=a("li"),fue=a("strong"),oGo=o("funnel"),rGo=o(" \u2014 "),VX=a("a"),tGo=o("FunnelForMaskedLM"),aGo=o(" (Funnel Transformer model)"),nGo=l(),kb=a("li"),mue=a("strong"),sGo=o("ibert"),lGo=o(" \u2014 "),XX=a("a"),iGo=o("IBertForMaskedLM"),dGo=o(" (I-BERT model)"),cGo=l(),Sb=a("li"),gue=a("strong"),fGo=o("layoutlm"),mGo=o(" \u2014 "),zX=a("a"),gGo=o("LayoutLMForMaskedLM"),hGo=o(" (LayoutLM model)"),pGo=l(),Rb=a("li"),hue=a("strong"),_Go=o("longformer"),uGo=o(" \u2014 "),WX=a("a"),bGo=o("LongformerForMaskedLM"),vGo=o(" (Longformer model)"),FGo=l(),Pb=a("li"),pue=a("strong"),TGo=o("luke"),MGo=o(" \u2014 "),QX=a("a"),EGo=o("LukeForMaskedLM"),CGo=o(" (LUKE model)"),wGo=l(),Bb=a("li"),_ue=a("strong"),AGo=o("mbart"),LGo=o(" \u2014 "),UX=a("a"),yGo=o("MBartForConditionalGeneration"),xGo=o(" (mBART model)"),$Go=l(),Ib=a("li"),uue=a("strong"),kGo=o("megatron-bert"),SGo=o(" \u2014 "),HX=a("a"),RGo=o("MegatronBertForMaskedLM"),PGo=o(" (Megatron-BERT model)"),BGo=l(),Nb=a("li"),bue=a("strong"),IGo=o("mobilebert"),NGo=o(" \u2014 "),JX=a("a"),qGo=o("MobileBertForMaskedLM"),jGo=o(" (MobileBERT model)"),DGo=l(),qb=a("li"),vue=a("strong"),GGo=o("mpnet"),OGo=o(" \u2014 "),YX=a("a"),VGo=o("MPNetForMaskedLM"),XGo=o(" (MPNet model)"),zGo=l(),jb=a("li"),Fue=a("strong"),WGo=o("mvp"),QGo=o(" \u2014 "),KX=a("a"),UGo=o("MvpForConditionalGeneration"),HGo=o(" (MVP model)"),JGo=l(),Db=a("li"),Tue=a("strong"),YGo=o("nezha"),KGo=o(" \u2014 "),ZX=a("a"),ZGo=o("NezhaForMaskedLM"),eOo=o(" (Nezha model)"),oOo=l(),Gb=a("li"),Mue=a("strong"),rOo=o("nystromformer"),tOo=o(" \u2014 "),ez=a("a"),aOo=o("NystromformerForMaskedLM"),nOo=o(" (Nystr\xF6mformer model)"),sOo=l(),Ob=a("li"),Eue=a("strong"),lOo=o("perceiver"),iOo=o(" \u2014 "),oz=a("a"),dOo=o("PerceiverForMaskedLM"),cOo=o(" (Perceiver model)"),fOo=l(),Vb=a("li"),Cue=a("strong"),mOo=o("qdqbert"),gOo=o(" \u2014 "),rz=a("a"),hOo=o("QDQBertForMaskedLM"),pOo=o(" (QDQBert model)"),_Oo=l(),Xb=a("li"),wue=a("strong"),uOo=o("reformer"),bOo=o(" \u2014 "),tz=a("a"),vOo=o("ReformerForMaskedLM"),FOo=o(" (Reformer model)"),TOo=l(),zb=a("li"),Aue=a("strong"),MOo=o("rembert"),EOo=o(" \u2014 "),az=a("a"),COo=o("RemBertForMaskedLM"),wOo=o(" (RemBERT model)"),AOo=l(),Wb=a("li"),Lue=a("strong"),LOo=o("roberta"),yOo=o(" \u2014 "),nz=a("a"),xOo=o("RobertaForMaskedLM"),$Oo=o(" (RoBERTa model)"),kOo=l(),Qb=a("li"),yue=a("strong"),SOo=o("roformer"),ROo=o(" \u2014 "),sz=a("a"),POo=o("RoFormerForMaskedLM"),BOo=o(" (RoFormer model)"),IOo=l(),Ub=a("li"),xue=a("strong"),NOo=o("squeezebert"),qOo=o(" \u2014 "),lz=a("a"),jOo=o("SqueezeBertForMaskedLM"),DOo=o(" (SqueezeBERT model)"),GOo=l(),Hb=a("li"),$ue=a("strong"),OOo=o("tapas"),VOo=o(" \u2014 "),iz=a("a"),XOo=o("TapasForMaskedLM"),zOo=o(" (TAPAS model)"),WOo=l(),Jb=a("li"),kue=a("strong"),QOo=o("wav2vec2"),UOo=o(" \u2014 "),Sue=a("code"),HOo=o("Wav2Vec2ForMaskedLM"),JOo=o(" (Wav2Vec2 model)"),YOo=l(),Yb=a("li"),Rue=a("strong"),KOo=o("xlm"),ZOo=o(" \u2014 "),dz=a("a"),eVo=o("XLMWithLMHeadModel"),oVo=o(" (XLM model)"),rVo=l(),Kb=a("li"),Pue=a("strong"),tVo=o("xlm-roberta"),aVo=o(" \u2014 "),cz=a("a"),nVo=o("XLMRobertaForMaskedLM"),sVo=o(" (XLM-RoBERTa model)"),lVo=l(),Zb=a("li"),Bue=a("strong"),iVo=o("xlm-roberta-xl"),dVo=o(" \u2014 "),fz=a("a"),cVo=o("XLMRobertaXLForMaskedLM"),fVo=o(" (XLM-RoBERTa-XL model)"),mVo=l(),ev=a("li"),Iue=a("strong"),gVo=o("yoso"),hVo=o(" \u2014 "),mz=a("a"),pVo=o("YosoForMaskedLM"),_Vo=o(" (YOSO model)"),uVo=l(),ov=a("p"),bVo=o("The model is set in evaluation mode by default using "),Nue=a("code"),vVo=o("model.eval()"),FVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=a("code"),TVo=o("model.train()"),MVo=l(),F(rv.$$.fragment),lUe=l(),hd=a("h2"),tv=a("a"),jue=a("span"),F(ny.$$.fragment),EVo=l(),Due=a("span"),CVo=o("AutoModelForSeq2SeqLM"),iUe=l(),Io=a("div"),F(sy.$$.fragment),wVo=l(),pd=a("p"),AVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gz=a("a"),LVo=o("from_pretrained()"),yVo=o(" class method or the "),hz=a("a"),xVo=o("from_config()"),$Vo=o(` class
method.`),kVo=l(),ly=a("p"),SVo=o("This class cannot be instantiated directly using "),Gue=a("code"),RVo=o("__init__()"),PVo=o(" (throws an error)."),BVo=l(),_t=a("div"),F(iy.$$.fragment),IVo=l(),Oue=a("p"),NVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qVo=l(),_d=a("p"),jVo=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),DVo=o("not"),GVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),OVo=o("from_pretrained()"),VVo=o(" to load the model weights."),XVo=l(),F(av.$$.fragment),zVo=l(),oo=a("div"),F(dy.$$.fragment),WVo=l(),Xue=a("p"),QVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),UVo=l(),Qa=a("p"),HVo=o("The model class to instantiate is selected based on the "),zue=a("code"),JVo=o("model_type"),YVo=o(` property of the config object (either
passed as an argument or loaded from `),Wue=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),eXo=o("pretrained_model_name_or_path"),oXo=o(":"),rXo=l(),me=a("ul"),nv=a("li"),Uue=a("strong"),tXo=o("bart"),aXo=o(" \u2014 "),_z=a("a"),nXo=o("BartForConditionalGeneration"),sXo=o(" (BART model)"),lXo=l(),sv=a("li"),Hue=a("strong"),iXo=o("bigbird_pegasus"),dXo=o(" \u2014 "),uz=a("a"),cXo=o("BigBirdPegasusForConditionalGeneration"),fXo=o(" (BigBird-Pegasus model)"),mXo=l(),lv=a("li"),Jue=a("strong"),gXo=o("blenderbot"),hXo=o(" \u2014 "),bz=a("a"),pXo=o("BlenderbotForConditionalGeneration"),_Xo=o(" (Blenderbot model)"),uXo=l(),iv=a("li"),Yue=a("strong"),bXo=o("blenderbot-small"),vXo=o(" \u2014 "),vz=a("a"),FXo=o("BlenderbotSmallForConditionalGeneration"),TXo=o(" (BlenderbotSmall model)"),MXo=l(),dv=a("li"),Kue=a("strong"),EXo=o("encoder-decoder"),CXo=o(" \u2014 "),Fz=a("a"),wXo=o("EncoderDecoderModel"),AXo=o(" (Encoder decoder model)"),LXo=l(),cv=a("li"),Zue=a("strong"),yXo=o("fsmt"),xXo=o(" \u2014 "),Tz=a("a"),$Xo=o("FSMTForConditionalGeneration"),kXo=o(" (FairSeq Machine-Translation model)"),SXo=l(),fv=a("li"),e1e=a("strong"),RXo=o("led"),PXo=o(" \u2014 "),Mz=a("a"),BXo=o("LEDForConditionalGeneration"),IXo=o(" (LED model)"),NXo=l(),mv=a("li"),o1e=a("strong"),qXo=o("longt5"),jXo=o(" \u2014 "),Ez=a("a"),DXo=o("LongT5ForConditionalGeneration"),GXo=o(" (LongT5 model)"),OXo=l(),gv=a("li"),r1e=a("strong"),VXo=o("m2m_100"),XXo=o(" \u2014 "),Cz=a("a"),zXo=o("M2M100ForConditionalGeneration"),WXo=o(" (M2M100 model)"),QXo=l(),hv=a("li"),t1e=a("strong"),UXo=o("marian"),HXo=o(" \u2014 "),wz=a("a"),JXo=o("MarianMTModel"),YXo=o(" (Marian model)"),KXo=l(),pv=a("li"),a1e=a("strong"),ZXo=o("mbart"),ezo=o(" \u2014 "),Az=a("a"),ozo=o("MBartForConditionalGeneration"),rzo=o(" (mBART model)"),tzo=l(),_v=a("li"),n1e=a("strong"),azo=o("mt5"),nzo=o(" \u2014 "),Lz=a("a"),szo=o("MT5ForConditionalGeneration"),lzo=o(" (MT5 model)"),izo=l(),uv=a("li"),s1e=a("strong"),dzo=o("mvp"),czo=o(" \u2014 "),yz=a("a"),fzo=o("MvpForConditionalGeneration"),mzo=o(" (MVP model)"),gzo=l(),bv=a("li"),l1e=a("strong"),hzo=o("nllb"),pzo=o(" \u2014 "),xz=a("a"),_zo=o("M2M100ForConditionalGeneration"),uzo=o(" (NLLB model)"),bzo=l(),vv=a("li"),i1e=a("strong"),vzo=o("pegasus"),Fzo=o(" \u2014 "),$z=a("a"),Tzo=o("PegasusForConditionalGeneration"),Mzo=o(" (Pegasus model)"),Ezo=l(),Fv=a("li"),d1e=a("strong"),Czo=o("plbart"),wzo=o(" \u2014 "),kz=a("a"),Azo=o("PLBartForConditionalGeneration"),Lzo=o(" (PLBart model)"),yzo=l(),Tv=a("li"),c1e=a("strong"),xzo=o("prophetnet"),$zo=o(" \u2014 "),Sz=a("a"),kzo=o("ProphetNetForConditionalGeneration"),Szo=o(" (ProphetNet model)"),Rzo=l(),Mv=a("li"),f1e=a("strong"),Pzo=o("t5"),Bzo=o(" \u2014 "),Rz=a("a"),Izo=o("T5ForConditionalGeneration"),Nzo=o(" (T5 model)"),qzo=l(),Ev=a("li"),m1e=a("strong"),jzo=o("xlm-prophetnet"),Dzo=o(" \u2014 "),Pz=a("a"),Gzo=o("XLMProphetNetForConditionalGeneration"),Ozo=o(" (XLM-ProphetNet model)"),Vzo=l(),Cv=a("p"),Xzo=o("The model is set in evaluation mode by default using "),g1e=a("code"),zzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=a("code"),Qzo=o("model.train()"),Uzo=l(),F(wv.$$.fragment),dUe=l(),ud=a("h2"),Av=a("a"),p1e=a("span"),F(cy.$$.fragment),Hzo=l(),_1e=a("span"),Jzo=o("AutoModelForSequenceClassification"),cUe=l(),No=a("div"),F(fy.$$.fragment),Yzo=l(),bd=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bz=a("a"),Zzo=o("from_pretrained()"),eWo=o(" class method or the "),Iz=a("a"),oWo=o("from_config()"),rWo=o(` class
method.`),tWo=l(),my=a("p"),aWo=o("This class cannot be instantiated directly using "),u1e=a("code"),nWo=o("__init__()"),sWo=o(" (throws an error)."),lWo=l(),ut=a("div"),F(gy.$$.fragment),iWo=l(),b1e=a("p"),dWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cWo=l(),vd=a("p"),fWo=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),mWo=o("not"),gWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),hWo=o("from_pretrained()"),pWo=o(" to load the model weights."),_Wo=l(),F(Lv.$$.fragment),uWo=l(),ro=a("div"),F(hy.$$.fragment),bWo=l(),F1e=a("p"),vWo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FWo=l(),Ua=a("p"),TWo=o("The model class to instantiate is selected based on the "),T1e=a("code"),MWo=o("model_type"),EWo=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),CWo=o("pretrained_model_name_or_path"),wWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),AWo=o("pretrained_model_name_or_path"),LWo=o(":"),yWo=l(),N=a("ul"),yv=a("li"),C1e=a("strong"),xWo=o("albert"),$Wo=o(" \u2014 "),qz=a("a"),kWo=o("AlbertForSequenceClassification"),SWo=o(" (ALBERT model)"),RWo=l(),xv=a("li"),w1e=a("strong"),PWo=o("bart"),BWo=o(" \u2014 "),jz=a("a"),IWo=o("BartForSequenceClassification"),NWo=o(" (BART model)"),qWo=l(),$v=a("li"),A1e=a("strong"),jWo=o("bert"),DWo=o(" \u2014 "),Dz=a("a"),GWo=o("BertForSequenceClassification"),OWo=o(" (BERT model)"),VWo=l(),kv=a("li"),L1e=a("strong"),XWo=o("big_bird"),zWo=o(" \u2014 "),Gz=a("a"),WWo=o("BigBirdForSequenceClassification"),QWo=o(" (BigBird model)"),UWo=l(),Sv=a("li"),y1e=a("strong"),HWo=o("bigbird_pegasus"),JWo=o(" \u2014 "),Oz=a("a"),YWo=o("BigBirdPegasusForSequenceClassification"),KWo=o(" (BigBird-Pegasus model)"),ZWo=l(),Rv=a("li"),x1e=a("strong"),eQo=o("bloom"),oQo=o(" \u2014 "),Vz=a("a"),rQo=o("BloomForSequenceClassification"),tQo=o(" (BLOOM model)"),aQo=l(),Pv=a("li"),$1e=a("strong"),nQo=o("camembert"),sQo=o(" \u2014 "),Xz=a("a"),lQo=o("CamembertForSequenceClassification"),iQo=o(" (CamemBERT model)"),dQo=l(),Bv=a("li"),k1e=a("strong"),cQo=o("canine"),fQo=o(" \u2014 "),zz=a("a"),mQo=o("CanineForSequenceClassification"),gQo=o(" (CANINE model)"),hQo=l(),Iv=a("li"),S1e=a("strong"),pQo=o("convbert"),_Qo=o(" \u2014 "),Wz=a("a"),uQo=o("ConvBertForSequenceClassification"),bQo=o(" (ConvBERT model)"),vQo=l(),Nv=a("li"),R1e=a("strong"),FQo=o("ctrl"),TQo=o(" \u2014 "),Qz=a("a"),MQo=o("CTRLForSequenceClassification"),EQo=o(" (CTRL model)"),CQo=l(),qv=a("li"),P1e=a("strong"),wQo=o("data2vec-text"),AQo=o(" \u2014 "),Uz=a("a"),LQo=o("Data2VecTextForSequenceClassification"),yQo=o(" (Data2VecText model)"),xQo=l(),jv=a("li"),B1e=a("strong"),$Qo=o("deberta"),kQo=o(" \u2014 "),Hz=a("a"),SQo=o("DebertaForSequenceClassification"),RQo=o(" (DeBERTa model)"),PQo=l(),Dv=a("li"),I1e=a("strong"),BQo=o("deberta-v2"),IQo=o(" \u2014 "),Jz=a("a"),NQo=o("DebertaV2ForSequenceClassification"),qQo=o(" (DeBERTa-v2 model)"),jQo=l(),Gv=a("li"),N1e=a("strong"),DQo=o("distilbert"),GQo=o(" \u2014 "),Yz=a("a"),OQo=o("DistilBertForSequenceClassification"),VQo=o(" (DistilBERT model)"),XQo=l(),Ov=a("li"),q1e=a("strong"),zQo=o("electra"),WQo=o(" \u2014 "),Kz=a("a"),QQo=o("ElectraForSequenceClassification"),UQo=o(" (ELECTRA model)"),HQo=l(),Vv=a("li"),j1e=a("strong"),JQo=o("flaubert"),YQo=o(" \u2014 "),Zz=a("a"),KQo=o("FlaubertForSequenceClassification"),ZQo=o(" (FlauBERT model)"),eUo=l(),Xv=a("li"),D1e=a("strong"),oUo=o("fnet"),rUo=o(" \u2014 "),eW=a("a"),tUo=o("FNetForSequenceClassification"),aUo=o(" (FNet model)"),nUo=l(),zv=a("li"),G1e=a("strong"),sUo=o("funnel"),lUo=o(" \u2014 "),oW=a("a"),iUo=o("FunnelForSequenceClassification"),dUo=o(" (Funnel Transformer model)"),cUo=l(),Wv=a("li"),O1e=a("strong"),fUo=o("gpt2"),mUo=o(" \u2014 "),rW=a("a"),gUo=o("GPT2ForSequenceClassification"),hUo=o(" (OpenAI GPT-2 model)"),pUo=l(),Qv=a("li"),V1e=a("strong"),_Uo=o("gpt_neo"),uUo=o(" \u2014 "),tW=a("a"),bUo=o("GPTNeoForSequenceClassification"),vUo=o(" (GPT Neo model)"),FUo=l(),Uv=a("li"),X1e=a("strong"),TUo=o("gptj"),MUo=o(" \u2014 "),aW=a("a"),EUo=o("GPTJForSequenceClassification"),CUo=o(" (GPT-J model)"),wUo=l(),Hv=a("li"),z1e=a("strong"),AUo=o("ibert"),LUo=o(" \u2014 "),nW=a("a"),yUo=o("IBertForSequenceClassification"),xUo=o(" (I-BERT model)"),$Uo=l(),Jv=a("li"),W1e=a("strong"),kUo=o("layoutlm"),SUo=o(" \u2014 "),sW=a("a"),RUo=o("LayoutLMForSequenceClassification"),PUo=o(" (LayoutLM model)"),BUo=l(),Yv=a("li"),Q1e=a("strong"),IUo=o("layoutlmv2"),NUo=o(" \u2014 "),lW=a("a"),qUo=o("LayoutLMv2ForSequenceClassification"),jUo=o(" (LayoutLMv2 model)"),DUo=l(),Kv=a("li"),U1e=a("strong"),GUo=o("layoutlmv3"),OUo=o(" \u2014 "),iW=a("a"),VUo=o("LayoutLMv3ForSequenceClassification"),XUo=o(" (LayoutLMv3 model)"),zUo=l(),Zv=a("li"),H1e=a("strong"),WUo=o("led"),QUo=o(" \u2014 "),dW=a("a"),UUo=o("LEDForSequenceClassification"),HUo=o(" (LED model)"),JUo=l(),e6=a("li"),J1e=a("strong"),YUo=o("longformer"),KUo=o(" \u2014 "),cW=a("a"),ZUo=o("LongformerForSequenceClassification"),eHo=o(" (Longformer model)"),oHo=l(),o6=a("li"),Y1e=a("strong"),rHo=o("luke"),tHo=o(" \u2014 "),fW=a("a"),aHo=o("LukeForSequenceClassification"),nHo=o(" (LUKE model)"),sHo=l(),r6=a("li"),K1e=a("strong"),lHo=o("mbart"),iHo=o(" \u2014 "),mW=a("a"),dHo=o("MBartForSequenceClassification"),cHo=o(" (mBART model)"),fHo=l(),t6=a("li"),Z1e=a("strong"),mHo=o("megatron-bert"),gHo=o(" \u2014 "),gW=a("a"),hHo=o("MegatronBertForSequenceClassification"),pHo=o(" (Megatron-BERT model)"),_Ho=l(),a6=a("li"),e2e=a("strong"),uHo=o("mobilebert"),bHo=o(" \u2014 "),hW=a("a"),vHo=o("MobileBertForSequenceClassification"),FHo=o(" (MobileBERT model)"),THo=l(),n6=a("li"),o2e=a("strong"),MHo=o("mpnet"),EHo=o(" \u2014 "),pW=a("a"),CHo=o("MPNetForSequenceClassification"),wHo=o(" (MPNet model)"),AHo=l(),s6=a("li"),r2e=a("strong"),LHo=o("mvp"),yHo=o(" \u2014 "),_W=a("a"),xHo=o("MvpForSequenceClassification"),$Ho=o(" (MVP model)"),kHo=l(),l6=a("li"),t2e=a("strong"),SHo=o("nezha"),RHo=o(" \u2014 "),uW=a("a"),PHo=o("NezhaForSequenceClassification"),BHo=o(" (Nezha model)"),IHo=l(),i6=a("li"),a2e=a("strong"),NHo=o("nystromformer"),qHo=o(" \u2014 "),bW=a("a"),jHo=o("NystromformerForSequenceClassification"),DHo=o(" (Nystr\xF6mformer model)"),GHo=l(),d6=a("li"),n2e=a("strong"),OHo=o("openai-gpt"),VHo=o(" \u2014 "),vW=a("a"),XHo=o("OpenAIGPTForSequenceClassification"),zHo=o(" (OpenAI GPT model)"),WHo=l(),c6=a("li"),s2e=a("strong"),QHo=o("opt"),UHo=o(" \u2014 "),FW=a("a"),HHo=o("OPTForSequenceClassification"),JHo=o(" (OPT model)"),YHo=l(),f6=a("li"),l2e=a("strong"),KHo=o("perceiver"),ZHo=o(" \u2014 "),TW=a("a"),eJo=o("PerceiverForSequenceClassification"),oJo=o(" (Perceiver model)"),rJo=l(),m6=a("li"),i2e=a("strong"),tJo=o("plbart"),aJo=o(" \u2014 "),MW=a("a"),nJo=o("PLBartForSequenceClassification"),sJo=o(" (PLBart model)"),lJo=l(),g6=a("li"),d2e=a("strong"),iJo=o("qdqbert"),dJo=o(" \u2014 "),EW=a("a"),cJo=o("QDQBertForSequenceClassification"),fJo=o(" (QDQBert model)"),mJo=l(),h6=a("li"),c2e=a("strong"),gJo=o("reformer"),hJo=o(" \u2014 "),CW=a("a"),pJo=o("ReformerForSequenceClassification"),_Jo=o(" (Reformer model)"),uJo=l(),p6=a("li"),f2e=a("strong"),bJo=o("rembert"),vJo=o(" \u2014 "),wW=a("a"),FJo=o("RemBertForSequenceClassification"),TJo=o(" (RemBERT model)"),MJo=l(),_6=a("li"),m2e=a("strong"),EJo=o("roberta"),CJo=o(" \u2014 "),AW=a("a"),wJo=o("RobertaForSequenceClassification"),AJo=o(" (RoBERTa model)"),LJo=l(),u6=a("li"),g2e=a("strong"),yJo=o("roformer"),xJo=o(" \u2014 "),LW=a("a"),$Jo=o("RoFormerForSequenceClassification"),kJo=o(" (RoFormer model)"),SJo=l(),b6=a("li"),h2e=a("strong"),RJo=o("squeezebert"),PJo=o(" \u2014 "),yW=a("a"),BJo=o("SqueezeBertForSequenceClassification"),IJo=o(" (SqueezeBERT model)"),NJo=l(),v6=a("li"),p2e=a("strong"),qJo=o("tapas"),jJo=o(" \u2014 "),xW=a("a"),DJo=o("TapasForSequenceClassification"),GJo=o(" (TAPAS model)"),OJo=l(),F6=a("li"),_2e=a("strong"),VJo=o("transfo-xl"),XJo=o(" \u2014 "),$W=a("a"),zJo=o("TransfoXLForSequenceClassification"),WJo=o(" (Transformer-XL model)"),QJo=l(),T6=a("li"),u2e=a("strong"),UJo=o("xlm"),HJo=o(" \u2014 "),kW=a("a"),JJo=o("XLMForSequenceClassification"),YJo=o(" (XLM model)"),KJo=l(),M6=a("li"),b2e=a("strong"),ZJo=o("xlm-roberta"),eYo=o(" \u2014 "),SW=a("a"),oYo=o("XLMRobertaForSequenceClassification"),rYo=o(" (XLM-RoBERTa model)"),tYo=l(),E6=a("li"),v2e=a("strong"),aYo=o("xlm-roberta-xl"),nYo=o(" \u2014 "),RW=a("a"),sYo=o("XLMRobertaXLForSequenceClassification"),lYo=o(" (XLM-RoBERTa-XL model)"),iYo=l(),C6=a("li"),F2e=a("strong"),dYo=o("xlnet"),cYo=o(" \u2014 "),PW=a("a"),fYo=o("XLNetForSequenceClassification"),mYo=o(" (XLNet model)"),gYo=l(),w6=a("li"),T2e=a("strong"),hYo=o("yoso"),pYo=o(" \u2014 "),BW=a("a"),_Yo=o("YosoForSequenceClassification"),uYo=o(" (YOSO model)"),bYo=l(),A6=a("p"),vYo=o("The model is set in evaluation mode by default using "),M2e=a("code"),FYo=o("model.eval()"),TYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E2e=a("code"),MYo=o("model.train()"),EYo=l(),F(L6.$$.fragment),fUe=l(),Fd=a("h2"),y6=a("a"),C2e=a("span"),F(py.$$.fragment),CYo=l(),w2e=a("span"),wYo=o("AutoModelForMultipleChoice"),mUe=l(),qo=a("div"),F(_y.$$.fragment),AYo=l(),Td=a("p"),LYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IW=a("a"),yYo=o("from_pretrained()"),xYo=o(" class method or the "),NW=a("a"),$Yo=o("from_config()"),kYo=o(` class
method.`),SYo=l(),uy=a("p"),RYo=o("This class cannot be instantiated directly using "),A2e=a("code"),PYo=o("__init__()"),BYo=o(" (throws an error)."),IYo=l(),bt=a("div"),F(by.$$.fragment),NYo=l(),L2e=a("p"),qYo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jYo=l(),Md=a("p"),DYo=o(`Note:
Loading a model from its configuration file does `),y2e=a("strong"),GYo=o("not"),OYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),VYo=o("from_pretrained()"),XYo=o(" to load the model weights."),zYo=l(),F(x6.$$.fragment),WYo=l(),to=a("div"),F(vy.$$.fragment),QYo=l(),x2e=a("p"),UYo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HYo=l(),Ha=a("p"),JYo=o("The model class to instantiate is selected based on the "),$2e=a("code"),YYo=o("model_type"),KYo=o(` property of the config object (either
passed as an argument or loaded from `),k2e=a("code"),ZYo=o("pretrained_model_name_or_path"),eKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=a("code"),oKo=o("pretrained_model_name_or_path"),rKo=o(":"),tKo=l(),Z=a("ul"),$6=a("li"),R2e=a("strong"),aKo=o("albert"),nKo=o(" \u2014 "),jW=a("a"),sKo=o("AlbertForMultipleChoice"),lKo=o(" (ALBERT model)"),iKo=l(),k6=a("li"),P2e=a("strong"),dKo=o("bert"),cKo=o(" \u2014 "),DW=a("a"),fKo=o("BertForMultipleChoice"),mKo=o(" (BERT model)"),gKo=l(),S6=a("li"),B2e=a("strong"),hKo=o("big_bird"),pKo=o(" \u2014 "),GW=a("a"),_Ko=o("BigBirdForMultipleChoice"),uKo=o(" (BigBird model)"),bKo=l(),R6=a("li"),I2e=a("strong"),vKo=o("camembert"),FKo=o(" \u2014 "),OW=a("a"),TKo=o("CamembertForMultipleChoice"),MKo=o(" (CamemBERT model)"),EKo=l(),P6=a("li"),N2e=a("strong"),CKo=o("canine"),wKo=o(" \u2014 "),VW=a("a"),AKo=o("CanineForMultipleChoice"),LKo=o(" (CANINE model)"),yKo=l(),B6=a("li"),q2e=a("strong"),xKo=o("convbert"),$Ko=o(" \u2014 "),XW=a("a"),kKo=o("ConvBertForMultipleChoice"),SKo=o(" (ConvBERT model)"),RKo=l(),I6=a("li"),j2e=a("strong"),PKo=o("data2vec-text"),BKo=o(" \u2014 "),zW=a("a"),IKo=o("Data2VecTextForMultipleChoice"),NKo=o(" (Data2VecText model)"),qKo=l(),N6=a("li"),D2e=a("strong"),jKo=o("deberta-v2"),DKo=o(" \u2014 "),WW=a("a"),GKo=o("DebertaV2ForMultipleChoice"),OKo=o(" (DeBERTa-v2 model)"),VKo=l(),q6=a("li"),G2e=a("strong"),XKo=o("distilbert"),zKo=o(" \u2014 "),QW=a("a"),WKo=o("DistilBertForMultipleChoice"),QKo=o(" (DistilBERT model)"),UKo=l(),j6=a("li"),O2e=a("strong"),HKo=o("electra"),JKo=o(" \u2014 "),UW=a("a"),YKo=o("ElectraForMultipleChoice"),KKo=o(" (ELECTRA model)"),ZKo=l(),D6=a("li"),V2e=a("strong"),eZo=o("flaubert"),oZo=o(" \u2014 "),HW=a("a"),rZo=o("FlaubertForMultipleChoice"),tZo=o(" (FlauBERT model)"),aZo=l(),G6=a("li"),X2e=a("strong"),nZo=o("fnet"),sZo=o(" \u2014 "),JW=a("a"),lZo=o("FNetForMultipleChoice"),iZo=o(" (FNet model)"),dZo=l(),O6=a("li"),z2e=a("strong"),cZo=o("funnel"),fZo=o(" \u2014 "),YW=a("a"),mZo=o("FunnelForMultipleChoice"),gZo=o(" (Funnel Transformer model)"),hZo=l(),V6=a("li"),W2e=a("strong"),pZo=o("ibert"),_Zo=o(" \u2014 "),KW=a("a"),uZo=o("IBertForMultipleChoice"),bZo=o(" (I-BERT model)"),vZo=l(),X6=a("li"),Q2e=a("strong"),FZo=o("longformer"),TZo=o(" \u2014 "),ZW=a("a"),MZo=o("LongformerForMultipleChoice"),EZo=o(" (Longformer model)"),CZo=l(),z6=a("li"),U2e=a("strong"),wZo=o("luke"),AZo=o(" \u2014 "),eQ=a("a"),LZo=o("LukeForMultipleChoice"),yZo=o(" (LUKE model)"),xZo=l(),W6=a("li"),H2e=a("strong"),$Zo=o("megatron-bert"),kZo=o(" \u2014 "),oQ=a("a"),SZo=o("MegatronBertForMultipleChoice"),RZo=o(" (Megatron-BERT model)"),PZo=l(),Q6=a("li"),J2e=a("strong"),BZo=o("mobilebert"),IZo=o(" \u2014 "),rQ=a("a"),NZo=o("MobileBertForMultipleChoice"),qZo=o(" (MobileBERT model)"),jZo=l(),U6=a("li"),Y2e=a("strong"),DZo=o("mpnet"),GZo=o(" \u2014 "),tQ=a("a"),OZo=o("MPNetForMultipleChoice"),VZo=o(" (MPNet model)"),XZo=l(),H6=a("li"),K2e=a("strong"),zZo=o("nezha"),WZo=o(" \u2014 "),aQ=a("a"),QZo=o("NezhaForMultipleChoice"),UZo=o(" (Nezha model)"),HZo=l(),J6=a("li"),Z2e=a("strong"),JZo=o("nystromformer"),YZo=o(" \u2014 "),nQ=a("a"),KZo=o("NystromformerForMultipleChoice"),ZZo=o(" (Nystr\xF6mformer model)"),eer=l(),Y6=a("li"),ebe=a("strong"),oer=o("qdqbert"),rer=o(" \u2014 "),sQ=a("a"),ter=o("QDQBertForMultipleChoice"),aer=o(" (QDQBert model)"),ner=l(),K6=a("li"),obe=a("strong"),ser=o("rembert"),ler=o(" \u2014 "),lQ=a("a"),ier=o("RemBertForMultipleChoice"),der=o(" (RemBERT model)"),cer=l(),Z6=a("li"),rbe=a("strong"),fer=o("roberta"),mer=o(" \u2014 "),iQ=a("a"),ger=o("RobertaForMultipleChoice"),her=o(" (RoBERTa model)"),per=l(),eF=a("li"),tbe=a("strong"),_er=o("roformer"),uer=o(" \u2014 "),dQ=a("a"),ber=o("RoFormerForMultipleChoice"),ver=o(" (RoFormer model)"),Fer=l(),oF=a("li"),abe=a("strong"),Ter=o("squeezebert"),Mer=o(" \u2014 "),cQ=a("a"),Eer=o("SqueezeBertForMultipleChoice"),Cer=o(" (SqueezeBERT model)"),wer=l(),rF=a("li"),nbe=a("strong"),Aer=o("xlm"),Ler=o(" \u2014 "),fQ=a("a"),yer=o("XLMForMultipleChoice"),xer=o(" (XLM model)"),$er=l(),tF=a("li"),sbe=a("strong"),ker=o("xlm-roberta"),Ser=o(" \u2014 "),mQ=a("a"),Rer=o("XLMRobertaForMultipleChoice"),Per=o(" (XLM-RoBERTa model)"),Ber=l(),aF=a("li"),lbe=a("strong"),Ier=o("xlm-roberta-xl"),Ner=o(" \u2014 "),gQ=a("a"),qer=o("XLMRobertaXLForMultipleChoice"),jer=o(" (XLM-RoBERTa-XL model)"),Der=l(),nF=a("li"),ibe=a("strong"),Ger=o("xlnet"),Oer=o(" \u2014 "),hQ=a("a"),Ver=o("XLNetForMultipleChoice"),Xer=o(" (XLNet model)"),zer=l(),sF=a("li"),dbe=a("strong"),Wer=o("yoso"),Qer=o(" \u2014 "),pQ=a("a"),Uer=o("YosoForMultipleChoice"),Her=o(" (YOSO model)"),Jer=l(),lF=a("p"),Yer=o("The model is set in evaluation mode by default using "),cbe=a("code"),Ker=o("model.eval()"),Zer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fbe=a("code"),eor=o("model.train()"),oor=l(),F(iF.$$.fragment),gUe=l(),Ed=a("h2"),dF=a("a"),mbe=a("span"),F(Fy.$$.fragment),ror=l(),gbe=a("span"),tor=o("AutoModelForNextSentencePrediction"),hUe=l(),jo=a("div"),F(Ty.$$.fragment),aor=l(),Cd=a("p"),nor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_Q=a("a"),sor=o("from_pretrained()"),lor=o(" class method or the "),uQ=a("a"),ior=o("from_config()"),dor=o(` class
method.`),cor=l(),My=a("p"),mor=o("This class cannot be instantiated directly using "),hbe=a("code"),gor=o("__init__()"),hor=o(" (throws an error)."),por=l(),vt=a("div"),F(Ey.$$.fragment),_or=l(),pbe=a("p"),uor=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bor=l(),wd=a("p"),vor=o(`Note:
Loading a model from its configuration file does `),_be=a("strong"),For=o("not"),Tor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),Mor=o("from_pretrained()"),Eor=o(" to load the model weights."),Cor=l(),F(cF.$$.fragment),wor=l(),ao=a("div"),F(Cy.$$.fragment),Aor=l(),ube=a("p"),Lor=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yor=l(),Ja=a("p"),xor=o("The model class to instantiate is selected based on the "),bbe=a("code"),$or=o("model_type"),kor=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),Sor=o("pretrained_model_name_or_path"),Ror=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),Por=o("pretrained_model_name_or_path"),Bor=o(":"),Ior=l(),Do=a("ul"),fF=a("li"),Tbe=a("strong"),Nor=o("bert"),qor=o(" \u2014 "),vQ=a("a"),jor=o("BertForNextSentencePrediction"),Dor=o(" (BERT model)"),Gor=l(),mF=a("li"),Mbe=a("strong"),Oor=o("fnet"),Vor=o(" \u2014 "),FQ=a("a"),Xor=o("FNetForNextSentencePrediction"),zor=o(" (FNet model)"),Wor=l(),gF=a("li"),Ebe=a("strong"),Qor=o("megatron-bert"),Uor=o(" \u2014 "),TQ=a("a"),Hor=o("MegatronBertForNextSentencePrediction"),Jor=o(" (Megatron-BERT model)"),Yor=l(),hF=a("li"),Cbe=a("strong"),Kor=o("mobilebert"),Zor=o(" \u2014 "),MQ=a("a"),err=o("MobileBertForNextSentencePrediction"),orr=o(" (MobileBERT model)"),rrr=l(),pF=a("li"),wbe=a("strong"),trr=o("nezha"),arr=o(" \u2014 "),EQ=a("a"),nrr=o("NezhaForNextSentencePrediction"),srr=o(" (Nezha model)"),lrr=l(),_F=a("li"),Abe=a("strong"),irr=o("qdqbert"),drr=o(" \u2014 "),CQ=a("a"),crr=o("QDQBertForNextSentencePrediction"),frr=o(" (QDQBert model)"),mrr=l(),uF=a("p"),grr=o("The model is set in evaluation mode by default using "),Lbe=a("code"),hrr=o("model.eval()"),prr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=a("code"),_rr=o("model.train()"),urr=l(),F(bF.$$.fragment),pUe=l(),Ad=a("h2"),vF=a("a"),xbe=a("span"),F(wy.$$.fragment),brr=l(),$be=a("span"),vrr=o("AutoModelForTokenClassification"),_Ue=l(),Go=a("div"),F(Ay.$$.fragment),Frr=l(),Ld=a("p"),Trr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wQ=a("a"),Mrr=o("from_pretrained()"),Err=o(" class method or the "),AQ=a("a"),Crr=o("from_config()"),wrr=o(` class
method.`),Arr=l(),Ly=a("p"),Lrr=o("This class cannot be instantiated directly using "),kbe=a("code"),yrr=o("__init__()"),xrr=o(" (throws an error)."),$rr=l(),Ft=a("div"),F(yy.$$.fragment),krr=l(),Sbe=a("p"),Srr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rrr=l(),yd=a("p"),Prr=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),Brr=o("not"),Irr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=a("a"),Nrr=o("from_pretrained()"),qrr=o(" to load the model weights."),jrr=l(),F(FF.$$.fragment),Drr=l(),no=a("div"),F(xy.$$.fragment),Grr=l(),Pbe=a("p"),Orr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Vrr=l(),Ya=a("p"),Xrr=o("The model class to instantiate is selected based on the "),Bbe=a("code"),zrr=o("model_type"),Wrr=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),Qrr=o("pretrained_model_name_or_path"),Urr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),Hrr=o("pretrained_model_name_or_path"),Jrr=o(":"),Yrr=l(),H=a("ul"),TF=a("li"),qbe=a("strong"),Krr=o("albert"),Zrr=o(" \u2014 "),yQ=a("a"),etr=o("AlbertForTokenClassification"),otr=o(" (ALBERT model)"),rtr=l(),MF=a("li"),jbe=a("strong"),ttr=o("bert"),atr=o(" \u2014 "),xQ=a("a"),ntr=o("BertForTokenClassification"),str=o(" (BERT model)"),ltr=l(),EF=a("li"),Dbe=a("strong"),itr=o("big_bird"),dtr=o(" \u2014 "),$Q=a("a"),ctr=o("BigBirdForTokenClassification"),ftr=o(" (BigBird model)"),mtr=l(),CF=a("li"),Gbe=a("strong"),gtr=o("bloom"),htr=o(" \u2014 "),kQ=a("a"),ptr=o("BloomForTokenClassification"),_tr=o(" (BLOOM model)"),utr=l(),wF=a("li"),Obe=a("strong"),btr=o("camembert"),vtr=o(" \u2014 "),SQ=a("a"),Ftr=o("CamembertForTokenClassification"),Ttr=o(" (CamemBERT model)"),Mtr=l(),AF=a("li"),Vbe=a("strong"),Etr=o("canine"),Ctr=o(" \u2014 "),RQ=a("a"),wtr=o("CanineForTokenClassification"),Atr=o(" (CANINE model)"),Ltr=l(),LF=a("li"),Xbe=a("strong"),ytr=o("convbert"),xtr=o(" \u2014 "),PQ=a("a"),$tr=o("ConvBertForTokenClassification"),ktr=o(" (ConvBERT model)"),Str=l(),yF=a("li"),zbe=a("strong"),Rtr=o("data2vec-text"),Ptr=o(" \u2014 "),BQ=a("a"),Btr=o("Data2VecTextForTokenClassification"),Itr=o(" (Data2VecText model)"),Ntr=l(),xF=a("li"),Wbe=a("strong"),qtr=o("deberta"),jtr=o(" \u2014 "),IQ=a("a"),Dtr=o("DebertaForTokenClassification"),Gtr=o(" (DeBERTa model)"),Otr=l(),$F=a("li"),Qbe=a("strong"),Vtr=o("deberta-v2"),Xtr=o(" \u2014 "),NQ=a("a"),ztr=o("DebertaV2ForTokenClassification"),Wtr=o(" (DeBERTa-v2 model)"),Qtr=l(),kF=a("li"),Ube=a("strong"),Utr=o("distilbert"),Htr=o(" \u2014 "),qQ=a("a"),Jtr=o("DistilBertForTokenClassification"),Ytr=o(" (DistilBERT model)"),Ktr=l(),SF=a("li"),Hbe=a("strong"),Ztr=o("electra"),ear=o(" \u2014 "),jQ=a("a"),oar=o("ElectraForTokenClassification"),rar=o(" (ELECTRA model)"),tar=l(),RF=a("li"),Jbe=a("strong"),aar=o("flaubert"),nar=o(" \u2014 "),DQ=a("a"),sar=o("FlaubertForTokenClassification"),lar=o(" (FlauBERT model)"),iar=l(),PF=a("li"),Ybe=a("strong"),dar=o("fnet"),car=o(" \u2014 "),GQ=a("a"),far=o("FNetForTokenClassification"),mar=o(" (FNet model)"),gar=l(),BF=a("li"),Kbe=a("strong"),har=o("funnel"),par=o(" \u2014 "),OQ=a("a"),_ar=o("FunnelForTokenClassification"),uar=o(" (Funnel Transformer model)"),bar=l(),IF=a("li"),Zbe=a("strong"),Far=o("gpt2"),Tar=o(" \u2014 "),VQ=a("a"),Mar=o("GPT2ForTokenClassification"),Ear=o(" (OpenAI GPT-2 model)"),Car=l(),NF=a("li"),eve=a("strong"),war=o("ibert"),Aar=o(" \u2014 "),XQ=a("a"),Lar=o("IBertForTokenClassification"),yar=o(" (I-BERT model)"),xar=l(),qF=a("li"),ove=a("strong"),$ar=o("layoutlm"),kar=o(" \u2014 "),zQ=a("a"),Sar=o("LayoutLMForTokenClassification"),Rar=o(" (LayoutLM model)"),Par=l(),jF=a("li"),rve=a("strong"),Bar=o("layoutlmv2"),Iar=o(" \u2014 "),WQ=a("a"),Nar=o("LayoutLMv2ForTokenClassification"),qar=o(" (LayoutLMv2 model)"),jar=l(),DF=a("li"),tve=a("strong"),Dar=o("layoutlmv3"),Gar=o(" \u2014 "),QQ=a("a"),Oar=o("LayoutLMv3ForTokenClassification"),Var=o(" (LayoutLMv3 model)"),Xar=l(),GF=a("li"),ave=a("strong"),zar=o("longformer"),War=o(" \u2014 "),UQ=a("a"),Qar=o("LongformerForTokenClassification"),Uar=o(" (Longformer model)"),Har=l(),OF=a("li"),nve=a("strong"),Jar=o("luke"),Yar=o(" \u2014 "),HQ=a("a"),Kar=o("LukeForTokenClassification"),Zar=o(" (LUKE model)"),enr=l(),VF=a("li"),sve=a("strong"),onr=o("megatron-bert"),rnr=o(" \u2014 "),JQ=a("a"),tnr=o("MegatronBertForTokenClassification"),anr=o(" (Megatron-BERT model)"),nnr=l(),XF=a("li"),lve=a("strong"),snr=o("mobilebert"),lnr=o(" \u2014 "),YQ=a("a"),inr=o("MobileBertForTokenClassification"),dnr=o(" (MobileBERT model)"),cnr=l(),zF=a("li"),ive=a("strong"),fnr=o("mpnet"),mnr=o(" \u2014 "),KQ=a("a"),gnr=o("MPNetForTokenClassification"),hnr=o(" (MPNet model)"),pnr=l(),WF=a("li"),dve=a("strong"),_nr=o("nezha"),unr=o(" \u2014 "),ZQ=a("a"),bnr=o("NezhaForTokenClassification"),vnr=o(" (Nezha model)"),Fnr=l(),QF=a("li"),cve=a("strong"),Tnr=o("nystromformer"),Mnr=o(" \u2014 "),eU=a("a"),Enr=o("NystromformerForTokenClassification"),Cnr=o(" (Nystr\xF6mformer model)"),wnr=l(),UF=a("li"),fve=a("strong"),Anr=o("qdqbert"),Lnr=o(" \u2014 "),oU=a("a"),ynr=o("QDQBertForTokenClassification"),xnr=o(" (QDQBert model)"),$nr=l(),HF=a("li"),mve=a("strong"),knr=o("rembert"),Snr=o(" \u2014 "),rU=a("a"),Rnr=o("RemBertForTokenClassification"),Pnr=o(" (RemBERT model)"),Bnr=l(),JF=a("li"),gve=a("strong"),Inr=o("roberta"),Nnr=o(" \u2014 "),tU=a("a"),qnr=o("RobertaForTokenClassification"),jnr=o(" (RoBERTa model)"),Dnr=l(),YF=a("li"),hve=a("strong"),Gnr=o("roformer"),Onr=o(" \u2014 "),aU=a("a"),Vnr=o("RoFormerForTokenClassification"),Xnr=o(" (RoFormer model)"),znr=l(),KF=a("li"),pve=a("strong"),Wnr=o("squeezebert"),Qnr=o(" \u2014 "),nU=a("a"),Unr=o("SqueezeBertForTokenClassification"),Hnr=o(" (SqueezeBERT model)"),Jnr=l(),ZF=a("li"),_ve=a("strong"),Ynr=o("xlm"),Knr=o(" \u2014 "),sU=a("a"),Znr=o("XLMForTokenClassification"),esr=o(" (XLM model)"),osr=l(),eT=a("li"),uve=a("strong"),rsr=o("xlm-roberta"),tsr=o(" \u2014 "),lU=a("a"),asr=o("XLMRobertaForTokenClassification"),nsr=o(" (XLM-RoBERTa model)"),ssr=l(),oT=a("li"),bve=a("strong"),lsr=o("xlm-roberta-xl"),isr=o(" \u2014 "),iU=a("a"),dsr=o("XLMRobertaXLForTokenClassification"),csr=o(" (XLM-RoBERTa-XL model)"),fsr=l(),rT=a("li"),vve=a("strong"),msr=o("xlnet"),gsr=o(" \u2014 "),dU=a("a"),hsr=o("XLNetForTokenClassification"),psr=o(" (XLNet model)"),_sr=l(),tT=a("li"),Fve=a("strong"),usr=o("yoso"),bsr=o(" \u2014 "),cU=a("a"),vsr=o("YosoForTokenClassification"),Fsr=o(" (YOSO model)"),Tsr=l(),aT=a("p"),Msr=o("The model is set in evaluation mode by default using "),Tve=a("code"),Esr=o("model.eval()"),Csr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mve=a("code"),wsr=o("model.train()"),Asr=l(),F(nT.$$.fragment),uUe=l(),xd=a("h2"),sT=a("a"),Eve=a("span"),F($y.$$.fragment),Lsr=l(),Cve=a("span"),ysr=o("AutoModelForQuestionAnswering"),bUe=l(),Oo=a("div"),F(ky.$$.fragment),xsr=l(),$d=a("p"),$sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fU=a("a"),ksr=o("from_pretrained()"),Ssr=o(" class method or the "),mU=a("a"),Rsr=o("from_config()"),Psr=o(` class
method.`),Bsr=l(),Sy=a("p"),Isr=o("This class cannot be instantiated directly using "),wve=a("code"),Nsr=o("__init__()"),qsr=o(" (throws an error)."),jsr=l(),Tt=a("div"),F(Ry.$$.fragment),Dsr=l(),Ave=a("p"),Gsr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Osr=l(),kd=a("p"),Vsr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),Xsr=o("not"),zsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),Wsr=o("from_pretrained()"),Qsr=o(" to load the model weights."),Usr=l(),F(lT.$$.fragment),Hsr=l(),so=a("div"),F(Py.$$.fragment),Jsr=l(),yve=a("p"),Ysr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ksr=l(),Ka=a("p"),Zsr=o("The model class to instantiate is selected based on the "),xve=a("code"),elr=o("model_type"),olr=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),rlr=o("pretrained_model_name_or_path"),tlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),alr=o("pretrained_model_name_or_path"),nlr=o(":"),slr=l(),V=a("ul"),iT=a("li"),Sve=a("strong"),llr=o("albert"),ilr=o(" \u2014 "),hU=a("a"),dlr=o("AlbertForQuestionAnswering"),clr=o(" (ALBERT model)"),flr=l(),dT=a("li"),Rve=a("strong"),mlr=o("bart"),glr=o(" \u2014 "),pU=a("a"),hlr=o("BartForQuestionAnswering"),plr=o(" (BART model)"),_lr=l(),cT=a("li"),Pve=a("strong"),ulr=o("bert"),blr=o(" \u2014 "),_U=a("a"),vlr=o("BertForQuestionAnswering"),Flr=o(" (BERT model)"),Tlr=l(),fT=a("li"),Bve=a("strong"),Mlr=o("big_bird"),Elr=o(" \u2014 "),uU=a("a"),Clr=o("BigBirdForQuestionAnswering"),wlr=o(" (BigBird model)"),Alr=l(),mT=a("li"),Ive=a("strong"),Llr=o("bigbird_pegasus"),ylr=o(" \u2014 "),bU=a("a"),xlr=o("BigBirdPegasusForQuestionAnswering"),$lr=o(" (BigBird-Pegasus model)"),klr=l(),gT=a("li"),Nve=a("strong"),Slr=o("camembert"),Rlr=o(" \u2014 "),vU=a("a"),Plr=o("CamembertForQuestionAnswering"),Blr=o(" (CamemBERT model)"),Ilr=l(),hT=a("li"),qve=a("strong"),Nlr=o("canine"),qlr=o(" \u2014 "),FU=a("a"),jlr=o("CanineForQuestionAnswering"),Dlr=o(" (CANINE model)"),Glr=l(),pT=a("li"),jve=a("strong"),Olr=o("convbert"),Vlr=o(" \u2014 "),TU=a("a"),Xlr=o("ConvBertForQuestionAnswering"),zlr=o(" (ConvBERT model)"),Wlr=l(),_T=a("li"),Dve=a("strong"),Qlr=o("data2vec-text"),Ulr=o(" \u2014 "),MU=a("a"),Hlr=o("Data2VecTextForQuestionAnswering"),Jlr=o(" (Data2VecText model)"),Ylr=l(),uT=a("li"),Gve=a("strong"),Klr=o("deberta"),Zlr=o(" \u2014 "),EU=a("a"),eir=o("DebertaForQuestionAnswering"),oir=o(" (DeBERTa model)"),rir=l(),bT=a("li"),Ove=a("strong"),tir=o("deberta-v2"),air=o(" \u2014 "),CU=a("a"),nir=o("DebertaV2ForQuestionAnswering"),sir=o(" (DeBERTa-v2 model)"),lir=l(),vT=a("li"),Vve=a("strong"),iir=o("distilbert"),dir=o(" \u2014 "),wU=a("a"),cir=o("DistilBertForQuestionAnswering"),fir=o(" (DistilBERT model)"),mir=l(),FT=a("li"),Xve=a("strong"),gir=o("electra"),hir=o(" \u2014 "),AU=a("a"),pir=o("ElectraForQuestionAnswering"),_ir=o(" (ELECTRA model)"),uir=l(),TT=a("li"),zve=a("strong"),bir=o("flaubert"),vir=o(" \u2014 "),LU=a("a"),Fir=o("FlaubertForQuestionAnsweringSimple"),Tir=o(" (FlauBERT model)"),Mir=l(),MT=a("li"),Wve=a("strong"),Eir=o("fnet"),Cir=o(" \u2014 "),yU=a("a"),wir=o("FNetForQuestionAnswering"),Air=o(" (FNet model)"),Lir=l(),ET=a("li"),Qve=a("strong"),yir=o("funnel"),xir=o(" \u2014 "),xU=a("a"),$ir=o("FunnelForQuestionAnswering"),kir=o(" (Funnel Transformer model)"),Sir=l(),CT=a("li"),Uve=a("strong"),Rir=o("gptj"),Pir=o(" \u2014 "),$U=a("a"),Bir=o("GPTJForQuestionAnswering"),Iir=o(" (GPT-J model)"),Nir=l(),wT=a("li"),Hve=a("strong"),qir=o("ibert"),jir=o(" \u2014 "),kU=a("a"),Dir=o("IBertForQuestionAnswering"),Gir=o(" (I-BERT model)"),Oir=l(),AT=a("li"),Jve=a("strong"),Vir=o("layoutlmv2"),Xir=o(" \u2014 "),SU=a("a"),zir=o("LayoutLMv2ForQuestionAnswering"),Wir=o(" (LayoutLMv2 model)"),Qir=l(),LT=a("li"),Yve=a("strong"),Uir=o("layoutlmv3"),Hir=o(" \u2014 "),RU=a("a"),Jir=o("LayoutLMv3ForQuestionAnswering"),Yir=o(" (LayoutLMv3 model)"),Kir=l(),yT=a("li"),Kve=a("strong"),Zir=o("led"),edr=o(" \u2014 "),PU=a("a"),odr=o("LEDForQuestionAnswering"),rdr=o(" (LED model)"),tdr=l(),xT=a("li"),Zve=a("strong"),adr=o("longformer"),ndr=o(" \u2014 "),BU=a("a"),sdr=o("LongformerForQuestionAnswering"),ldr=o(" (Longformer model)"),idr=l(),$T=a("li"),e6e=a("strong"),ddr=o("luke"),cdr=o(" \u2014 "),IU=a("a"),fdr=o("LukeForQuestionAnswering"),mdr=o(" (LUKE model)"),gdr=l(),kT=a("li"),o6e=a("strong"),hdr=o("lxmert"),pdr=o(" \u2014 "),NU=a("a"),_dr=o("LxmertForQuestionAnswering"),udr=o(" (LXMERT model)"),bdr=l(),ST=a("li"),r6e=a("strong"),vdr=o("mbart"),Fdr=o(" \u2014 "),qU=a("a"),Tdr=o("MBartForQuestionAnswering"),Mdr=o(" (mBART model)"),Edr=l(),RT=a("li"),t6e=a("strong"),Cdr=o("megatron-bert"),wdr=o(" \u2014 "),jU=a("a"),Adr=o("MegatronBertForQuestionAnswering"),Ldr=o(" (Megatron-BERT model)"),ydr=l(),PT=a("li"),a6e=a("strong"),xdr=o("mobilebert"),$dr=o(" \u2014 "),DU=a("a"),kdr=o("MobileBertForQuestionAnswering"),Sdr=o(" (MobileBERT model)"),Rdr=l(),BT=a("li"),n6e=a("strong"),Pdr=o("mpnet"),Bdr=o(" \u2014 "),GU=a("a"),Idr=o("MPNetForQuestionAnswering"),Ndr=o(" (MPNet model)"),qdr=l(),IT=a("li"),s6e=a("strong"),jdr=o("mvp"),Ddr=o(" \u2014 "),OU=a("a"),Gdr=o("MvpForQuestionAnswering"),Odr=o(" (MVP model)"),Vdr=l(),NT=a("li"),l6e=a("strong"),Xdr=o("nezha"),zdr=o(" \u2014 "),VU=a("a"),Wdr=o("NezhaForQuestionAnswering"),Qdr=o(" (Nezha model)"),Udr=l(),qT=a("li"),i6e=a("strong"),Hdr=o("nystromformer"),Jdr=o(" \u2014 "),XU=a("a"),Ydr=o("NystromformerForQuestionAnswering"),Kdr=o(" (Nystr\xF6mformer model)"),Zdr=l(),jT=a("li"),d6e=a("strong"),ecr=o("qdqbert"),ocr=o(" \u2014 "),zU=a("a"),rcr=o("QDQBertForQuestionAnswering"),tcr=o(" (QDQBert model)"),acr=l(),DT=a("li"),c6e=a("strong"),ncr=o("reformer"),scr=o(" \u2014 "),WU=a("a"),lcr=o("ReformerForQuestionAnswering"),icr=o(" (Reformer model)"),dcr=l(),GT=a("li"),f6e=a("strong"),ccr=o("rembert"),fcr=o(" \u2014 "),QU=a("a"),mcr=o("RemBertForQuestionAnswering"),gcr=o(" (RemBERT model)"),hcr=l(),OT=a("li"),m6e=a("strong"),pcr=o("roberta"),_cr=o(" \u2014 "),UU=a("a"),ucr=o("RobertaForQuestionAnswering"),bcr=o(" (RoBERTa model)"),vcr=l(),VT=a("li"),g6e=a("strong"),Fcr=o("roformer"),Tcr=o(" \u2014 "),HU=a("a"),Mcr=o("RoFormerForQuestionAnswering"),Ecr=o(" (RoFormer model)"),Ccr=l(),XT=a("li"),h6e=a("strong"),wcr=o("splinter"),Acr=o(" \u2014 "),JU=a("a"),Lcr=o("SplinterForQuestionAnswering"),ycr=o(" (Splinter model)"),xcr=l(),zT=a("li"),p6e=a("strong"),$cr=o("squeezebert"),kcr=o(" \u2014 "),YU=a("a"),Scr=o("SqueezeBertForQuestionAnswering"),Rcr=o(" (SqueezeBERT model)"),Pcr=l(),WT=a("li"),_6e=a("strong"),Bcr=o("xlm"),Icr=o(" \u2014 "),KU=a("a"),Ncr=o("XLMForQuestionAnsweringSimple"),qcr=o(" (XLM model)"),jcr=l(),QT=a("li"),u6e=a("strong"),Dcr=o("xlm-roberta"),Gcr=o(" \u2014 "),ZU=a("a"),Ocr=o("XLMRobertaForQuestionAnswering"),Vcr=o(" (XLM-RoBERTa model)"),Xcr=l(),UT=a("li"),b6e=a("strong"),zcr=o("xlm-roberta-xl"),Wcr=o(" \u2014 "),eH=a("a"),Qcr=o("XLMRobertaXLForQuestionAnswering"),Ucr=o(" (XLM-RoBERTa-XL model)"),Hcr=l(),HT=a("li"),v6e=a("strong"),Jcr=o("xlnet"),Ycr=o(" \u2014 "),oH=a("a"),Kcr=o("XLNetForQuestionAnsweringSimple"),Zcr=o(" (XLNet model)"),efr=l(),JT=a("li"),F6e=a("strong"),ofr=o("yoso"),rfr=o(" \u2014 "),rH=a("a"),tfr=o("YosoForQuestionAnswering"),afr=o(" (YOSO model)"),nfr=l(),YT=a("p"),sfr=o("The model is set in evaluation mode by default using "),T6e=a("code"),lfr=o("model.eval()"),ifr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M6e=a("code"),dfr=o("model.train()"),cfr=l(),F(KT.$$.fragment),vUe=l(),Sd=a("h2"),ZT=a("a"),E6e=a("span"),F(By.$$.fragment),ffr=l(),C6e=a("span"),mfr=o("AutoModelForTableQuestionAnswering"),FUe=l(),Vo=a("div"),F(Iy.$$.fragment),gfr=l(),Rd=a("p"),hfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tH=a("a"),pfr=o("from_pretrained()"),_fr=o(" class method or the "),aH=a("a"),ufr=o("from_config()"),bfr=o(` class
method.`),vfr=l(),Ny=a("p"),Ffr=o("This class cannot be instantiated directly using "),w6e=a("code"),Tfr=o("__init__()"),Mfr=o(" (throws an error)."),Efr=l(),Mt=a("div"),F(qy.$$.fragment),Cfr=l(),A6e=a("p"),wfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Afr=l(),Pd=a("p"),Lfr=o(`Note:
Loading a model from its configuration file does `),L6e=a("strong"),yfr=o("not"),xfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),$fr=o("from_pretrained()"),kfr=o(" to load the model weights."),Sfr=l(),F(e7.$$.fragment),Rfr=l(),lo=a("div"),F(jy.$$.fragment),Pfr=l(),y6e=a("p"),Bfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ifr=l(),Za=a("p"),Nfr=o("The model class to instantiate is selected based on the "),x6e=a("code"),qfr=o("model_type"),jfr=o(` property of the config object (either
passed as an argument or loaded from `),$6e=a("code"),Dfr=o("pretrained_model_name_or_path"),Gfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=a("code"),Ofr=o("pretrained_model_name_or_path"),Vfr=o(":"),Xfr=l(),S6e=a("ul"),o7=a("li"),R6e=a("strong"),zfr=o("tapas"),Wfr=o(" \u2014 "),sH=a("a"),Qfr=o("TapasForQuestionAnswering"),Ufr=o(" (TAPAS model)"),Hfr=l(),r7=a("p"),Jfr=o("The model is set in evaluation mode by default using "),P6e=a("code"),Yfr=o("model.eval()"),Kfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B6e=a("code"),Zfr=o("model.train()"),emr=l(),F(t7.$$.fragment),TUe=l(),Bd=a("h2"),a7=a("a"),I6e=a("span"),F(Dy.$$.fragment),omr=l(),N6e=a("span"),rmr=o("AutoModelForImageClassification"),MUe=l(),Xo=a("div"),F(Gy.$$.fragment),tmr=l(),Id=a("p"),amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lH=a("a"),nmr=o("from_pretrained()"),smr=o(" class method or the "),iH=a("a"),lmr=o("from_config()"),imr=o(` class
method.`),dmr=l(),Oy=a("p"),cmr=o("This class cannot be instantiated directly using "),q6e=a("code"),fmr=o("__init__()"),mmr=o(" (throws an error)."),gmr=l(),Et=a("div"),F(Vy.$$.fragment),hmr=l(),j6e=a("p"),pmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_mr=l(),Nd=a("p"),umr=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),bmr=o("not"),vmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),Fmr=o("from_pretrained()"),Tmr=o(" to load the model weights."),Mmr=l(),F(n7.$$.fragment),Emr=l(),io=a("div"),F(Xy.$$.fragment),Cmr=l(),G6e=a("p"),wmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Amr=l(),en=a("p"),Lmr=o("The model class to instantiate is selected based on the "),O6e=a("code"),ymr=o("model_type"),xmr=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),$mr=o("pretrained_model_name_or_path"),kmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),Smr=o("pretrained_model_name_or_path"),Rmr=o(":"),Pmr=l(),be=a("ul"),s7=a("li"),z6e=a("strong"),Bmr=o("beit"),Imr=o(" \u2014 "),cH=a("a"),Nmr=o("BeitForImageClassification"),qmr=o(" (BEiT model)"),jmr=l(),l7=a("li"),W6e=a("strong"),Dmr=o("convnext"),Gmr=o(" \u2014 "),fH=a("a"),Omr=o("ConvNextForImageClassification"),Vmr=o(" (ConvNeXT model)"),Xmr=l(),i7=a("li"),Q6e=a("strong"),zmr=o("cvt"),Wmr=o(" \u2014 "),mH=a("a"),Qmr=o("CvtForImageClassification"),Umr=o(" (CvT model)"),Hmr=l(),d7=a("li"),U6e=a("strong"),Jmr=o("data2vec-vision"),Ymr=o(" \u2014 "),gH=a("a"),Kmr=o("Data2VecVisionForImageClassification"),Zmr=o(" (Data2VecVision model)"),egr=l(),sl=a("li"),H6e=a("strong"),ogr=o("deit"),rgr=o(" \u2014 "),hH=a("a"),tgr=o("DeiTForImageClassification"),agr=o(" or "),pH=a("a"),ngr=o("DeiTForImageClassificationWithTeacher"),sgr=o(" (DeiT model)"),lgr=l(),c7=a("li"),J6e=a("strong"),igr=o("imagegpt"),dgr=o(" \u2014 "),_H=a("a"),cgr=o("ImageGPTForImageClassification"),fgr=o(" (ImageGPT model)"),mgr=l(),ll=a("li"),Y6e=a("strong"),ggr=o("levit"),hgr=o(" \u2014 "),uH=a("a"),pgr=o("LevitForImageClassification"),_gr=o(" or "),bH=a("a"),ugr=o("LevitForImageClassificationWithTeacher"),bgr=o(" (LeViT model)"),vgr=l(),f7=a("li"),K6e=a("strong"),Fgr=o("mobilevit"),Tgr=o(" \u2014 "),vH=a("a"),Mgr=o("MobileViTForImageClassification"),Egr=o(" (MobileViT model)"),Cgr=l(),Ct=a("li"),Z6e=a("strong"),wgr=o("perceiver"),Agr=o(" \u2014 "),FH=a("a"),Lgr=o("PerceiverForImageClassificationLearned"),ygr=o(" or "),TH=a("a"),xgr=o("PerceiverForImageClassificationFourier"),$gr=o(" or "),MH=a("a"),kgr=o("PerceiverForImageClassificationConvProcessing"),Sgr=o(" (Perceiver model)"),Rgr=l(),m7=a("li"),eFe=a("strong"),Pgr=o("poolformer"),Bgr=o(" \u2014 "),EH=a("a"),Igr=o("PoolFormerForImageClassification"),Ngr=o(" (PoolFormer model)"),qgr=l(),g7=a("li"),oFe=a("strong"),jgr=o("regnet"),Dgr=o(" \u2014 "),CH=a("a"),Ggr=o("RegNetForImageClassification"),Ogr=o(" (RegNet model)"),Vgr=l(),h7=a("li"),rFe=a("strong"),Xgr=o("resnet"),zgr=o(" \u2014 "),wH=a("a"),Wgr=o("ResNetForImageClassification"),Qgr=o(" (ResNet model)"),Ugr=l(),p7=a("li"),tFe=a("strong"),Hgr=o("segformer"),Jgr=o(" \u2014 "),AH=a("a"),Ygr=o("SegformerForImageClassification"),Kgr=o(" (SegFormer model)"),Zgr=l(),_7=a("li"),aFe=a("strong"),ehr=o("swin"),ohr=o(" \u2014 "),LH=a("a"),rhr=o("SwinForImageClassification"),thr=o(" (Swin Transformer model)"),ahr=l(),u7=a("li"),nFe=a("strong"),nhr=o("swinv2"),shr=o(" \u2014 "),yH=a("a"),lhr=o("Swinv2ForImageClassification"),ihr=o(" (Swin Transformer V2 model)"),dhr=l(),b7=a("li"),sFe=a("strong"),chr=o("van"),fhr=o(" \u2014 "),xH=a("a"),mhr=o("VanForImageClassification"),ghr=o(" (VAN model)"),hhr=l(),v7=a("li"),lFe=a("strong"),phr=o("vit"),_hr=o(" \u2014 "),$H=a("a"),uhr=o("ViTForImageClassification"),bhr=o(" (ViT model)"),vhr=l(),F7=a("p"),Fhr=o("The model is set in evaluation mode by default using "),iFe=a("code"),Thr=o("model.eval()"),Mhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dFe=a("code"),Ehr=o("model.train()"),Chr=l(),F(T7.$$.fragment),EUe=l(),qd=a("h2"),M7=a("a"),cFe=a("span"),F(zy.$$.fragment),whr=l(),fFe=a("span"),Ahr=o("AutoModelForVideoClassification"),CUe=l(),zo=a("div"),F(Wy.$$.fragment),Lhr=l(),jd=a("p"),yhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),kH=a("a"),xhr=o("from_pretrained()"),$hr=o(" class method or the "),SH=a("a"),khr=o("from_config()"),Shr=o(` class
method.`),Rhr=l(),Qy=a("p"),Phr=o("This class cannot be instantiated directly using "),mFe=a("code"),Bhr=o("__init__()"),Ihr=o(" (throws an error)."),Nhr=l(),wt=a("div"),F(Uy.$$.fragment),qhr=l(),gFe=a("p"),jhr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Dhr=l(),Dd=a("p"),Ghr=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),Ohr=o("not"),Vhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),Xhr=o("from_pretrained()"),zhr=o(" to load the model weights."),Whr=l(),F(E7.$$.fragment),Qhr=l(),co=a("div"),F(Hy.$$.fragment),Uhr=l(),pFe=a("p"),Hhr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Jhr=l(),on=a("p"),Yhr=o("The model class to instantiate is selected based on the "),_Fe=a("code"),Khr=o("model_type"),Zhr=o(` property of the config object (either
passed as an argument or loaded from `),uFe=a("code"),epr=o("pretrained_model_name_or_path"),opr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),rpr=o("pretrained_model_name_or_path"),tpr=o(":"),apr=l(),vFe=a("ul"),C7=a("li"),FFe=a("strong"),npr=o("videomae"),spr=o(" \u2014 "),PH=a("a"),lpr=o("VideoMAEForVideoClassification"),ipr=o(" (VideoMAE model)"),dpr=l(),w7=a("p"),cpr=o("The model is set in evaluation mode by default using "),TFe=a("code"),fpr=o("model.eval()"),mpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MFe=a("code"),gpr=o("model.train()"),hpr=l(),F(A7.$$.fragment),wUe=l(),Gd=a("h2"),L7=a("a"),EFe=a("span"),F(Jy.$$.fragment),ppr=l(),CFe=a("span"),_pr=o("AutoModelForVision2Seq"),AUe=l(),Wo=a("div"),F(Yy.$$.fragment),upr=l(),Od=a("p"),bpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BH=a("a"),vpr=o("from_pretrained()"),Fpr=o(" class method or the "),IH=a("a"),Tpr=o("from_config()"),Mpr=o(` class
method.`),Epr=l(),Ky=a("p"),Cpr=o("This class cannot be instantiated directly using "),wFe=a("code"),wpr=o("__init__()"),Apr=o(" (throws an error)."),Lpr=l(),At=a("div"),F(Zy.$$.fragment),ypr=l(),AFe=a("p"),xpr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$pr=l(),Vd=a("p"),kpr=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),Spr=o("not"),Rpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),Ppr=o("from_pretrained()"),Bpr=o(" to load the model weights."),Ipr=l(),F(y7.$$.fragment),Npr=l(),fo=a("div"),F(ex.$$.fragment),qpr=l(),yFe=a("p"),jpr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Dpr=l(),rn=a("p"),Gpr=o("The model class to instantiate is selected based on the "),xFe=a("code"),Opr=o("model_type"),Vpr=o(` property of the config object (either
passed as an argument or loaded from `),$Fe=a("code"),Xpr=o("pretrained_model_name_or_path"),zpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=a("code"),Wpr=o("pretrained_model_name_or_path"),Qpr=o(":"),Upr=l(),SFe=a("ul"),x7=a("li"),RFe=a("strong"),Hpr=o("vision-encoder-decoder"),Jpr=o(" \u2014 "),qH=a("a"),Ypr=o("VisionEncoderDecoderModel"),Kpr=o(" (Vision Encoder decoder model)"),Zpr=l(),$7=a("p"),e_r=o("The model is set in evaluation mode by default using "),PFe=a("code"),o_r=o("model.eval()"),r_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BFe=a("code"),t_r=o("model.train()"),a_r=l(),F(k7.$$.fragment),LUe=l(),Xd=a("h2"),S7=a("a"),IFe=a("span"),F(ox.$$.fragment),n_r=l(),NFe=a("span"),s_r=o("AutoModelForVisualQuestionAnswering"),yUe=l(),Qo=a("div"),F(rx.$$.fragment),l_r=l(),zd=a("p"),i_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),jH=a("a"),d_r=o("from_pretrained()"),c_r=o(" class method or the "),DH=a("a"),f_r=o("from_config()"),m_r=o(` class
method.`),g_r=l(),tx=a("p"),h_r=o("This class cannot be instantiated directly using "),qFe=a("code"),p_r=o("__init__()"),__r=o(" (throws an error)."),u_r=l(),Lt=a("div"),F(ax.$$.fragment),b_r=l(),jFe=a("p"),v_r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),F_r=l(),Wd=a("p"),T_r=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),M_r=o("not"),E_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),C_r=o("from_pretrained()"),w_r=o(" to load the model weights."),A_r=l(),F(R7.$$.fragment),L_r=l(),mo=a("div"),F(nx.$$.fragment),y_r=l(),GFe=a("p"),x_r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),$_r=l(),tn=a("p"),k_r=o("The model class to instantiate is selected based on the "),OFe=a("code"),S_r=o("model_type"),R_r=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),P_r=o("pretrained_model_name_or_path"),B_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),I_r=o("pretrained_model_name_or_path"),N_r=o(":"),q_r=l(),zFe=a("ul"),P7=a("li"),WFe=a("strong"),j_r=o("vilt"),D_r=o(" \u2014 "),OH=a("a"),G_r=o("ViltForQuestionAnswering"),O_r=o(" (ViLT model)"),V_r=l(),B7=a("p"),X_r=o("The model is set in evaluation mode by default using "),QFe=a("code"),z_r=o("model.eval()"),W_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UFe=a("code"),Q_r=o("model.train()"),U_r=l(),F(I7.$$.fragment),xUe=l(),Qd=a("h2"),N7=a("a"),HFe=a("span"),F(sx.$$.fragment),H_r=l(),JFe=a("span"),J_r=o("AutoModelForAudioClassification"),$Ue=l(),Uo=a("div"),F(lx.$$.fragment),Y_r=l(),Ud=a("p"),K_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),VH=a("a"),Z_r=o("from_pretrained()"),eur=o(" class method or the "),XH=a("a"),our=o("from_config()"),rur=o(` class
method.`),tur=l(),ix=a("p"),aur=o("This class cannot be instantiated directly using "),YFe=a("code"),nur=o("__init__()"),sur=o(" (throws an error)."),lur=l(),yt=a("div"),F(dx.$$.fragment),iur=l(),KFe=a("p"),dur=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),cur=l(),Hd=a("p"),fur=o(`Note:
Loading a model from its configuration file does `),ZFe=a("strong"),mur=o("not"),gur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),hur=o("from_pretrained()"),pur=o(" to load the model weights."),_ur=l(),F(q7.$$.fragment),uur=l(),go=a("div"),F(cx.$$.fragment),bur=l(),eTe=a("p"),vur=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Fur=l(),an=a("p"),Tur=o("The model class to instantiate is selected based on the "),oTe=a("code"),Mur=o("model_type"),Eur=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),Cur=o("pretrained_model_name_or_path"),wur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),Aur=o("pretrained_model_name_or_path"),Lur=o(":"),yur=l(),Pe=a("ul"),j7=a("li"),aTe=a("strong"),xur=o("data2vec-audio"),$ur=o(" \u2014 "),WH=a("a"),kur=o("Data2VecAudioForSequenceClassification"),Sur=o(" (Data2VecAudio model)"),Rur=l(),D7=a("li"),nTe=a("strong"),Pur=o("hubert"),Bur=o(" \u2014 "),QH=a("a"),Iur=o("HubertForSequenceClassification"),Nur=o(" (Hubert model)"),qur=l(),G7=a("li"),sTe=a("strong"),jur=o("sew"),Dur=o(" \u2014 "),UH=a("a"),Gur=o("SEWForSequenceClassification"),Our=o(" (SEW model)"),Vur=l(),O7=a("li"),lTe=a("strong"),Xur=o("sew-d"),zur=o(" \u2014 "),HH=a("a"),Wur=o("SEWDForSequenceClassification"),Qur=o(" (SEW-D model)"),Uur=l(),V7=a("li"),iTe=a("strong"),Hur=o("unispeech"),Jur=o(" \u2014 "),JH=a("a"),Yur=o("UniSpeechForSequenceClassification"),Kur=o(" (UniSpeech model)"),Zur=l(),X7=a("li"),dTe=a("strong"),e1r=o("unispeech-sat"),o1r=o(" \u2014 "),YH=a("a"),r1r=o("UniSpeechSatForSequenceClassification"),t1r=o(" (UniSpeechSat model)"),a1r=l(),z7=a("li"),cTe=a("strong"),n1r=o("wav2vec2"),s1r=o(" \u2014 "),KH=a("a"),l1r=o("Wav2Vec2ForSequenceClassification"),i1r=o(" (Wav2Vec2 model)"),d1r=l(),W7=a("li"),fTe=a("strong"),c1r=o("wav2vec2-conformer"),f1r=o(" \u2014 "),ZH=a("a"),m1r=o("Wav2Vec2ConformerForSequenceClassification"),g1r=o(" (Wav2Vec2-Conformer model)"),h1r=l(),Q7=a("li"),mTe=a("strong"),p1r=o("wavlm"),_1r=o(" \u2014 "),eJ=a("a"),u1r=o("WavLMForSequenceClassification"),b1r=o(" (WavLM model)"),v1r=l(),U7=a("p"),F1r=o("The model is set in evaluation mode by default using "),gTe=a("code"),T1r=o("model.eval()"),M1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hTe=a("code"),E1r=o("model.train()"),C1r=l(),F(H7.$$.fragment),kUe=l(),Jd=a("h2"),J7=a("a"),pTe=a("span"),F(fx.$$.fragment),w1r=l(),_Te=a("span"),A1r=o("AutoModelForAudioFrameClassification"),SUe=l(),Ho=a("div"),F(mx.$$.fragment),L1r=l(),Yd=a("p"),y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),oJ=a("a"),x1r=o("from_pretrained()"),$1r=o(" class method or the "),rJ=a("a"),k1r=o("from_config()"),S1r=o(` class
method.`),R1r=l(),gx=a("p"),P1r=o("This class cannot be instantiated directly using "),uTe=a("code"),B1r=o("__init__()"),I1r=o(" (throws an error)."),N1r=l(),xt=a("div"),F(hx.$$.fragment),q1r=l(),bTe=a("p"),j1r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),D1r=l(),Kd=a("p"),G1r=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),O1r=o("not"),V1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),X1r=o("from_pretrained()"),z1r=o(" to load the model weights."),W1r=l(),F(Y7.$$.fragment),Q1r=l(),ho=a("div"),F(px.$$.fragment),U1r=l(),FTe=a("p"),H1r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),J1r=l(),nn=a("p"),Y1r=o("The model class to instantiate is selected based on the "),TTe=a("code"),K1r=o("model_type"),Z1r=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),e2r=o("pretrained_model_name_or_path"),o2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),r2r=o("pretrained_model_name_or_path"),t2r=o(":"),a2r=l(),st=a("ul"),K7=a("li"),CTe=a("strong"),n2r=o("data2vec-audio"),s2r=o(" \u2014 "),aJ=a("a"),l2r=o("Data2VecAudioForAudioFrameClassification"),i2r=o(" (Data2VecAudio model)"),d2r=l(),Z7=a("li"),wTe=a("strong"),c2r=o("unispeech-sat"),f2r=o(" \u2014 "),nJ=a("a"),m2r=o("UniSpeechSatForAudioFrameClassification"),g2r=o(" (UniSpeechSat model)"),h2r=l(),e8=a("li"),ATe=a("strong"),p2r=o("wav2vec2"),_2r=o(" \u2014 "),sJ=a("a"),u2r=o("Wav2Vec2ForAudioFrameClassification"),b2r=o(" (Wav2Vec2 model)"),v2r=l(),o8=a("li"),LTe=a("strong"),F2r=o("wav2vec2-conformer"),T2r=o(" \u2014 "),lJ=a("a"),M2r=o("Wav2Vec2ConformerForAudioFrameClassification"),E2r=o(" (Wav2Vec2-Conformer model)"),C2r=l(),r8=a("li"),yTe=a("strong"),w2r=o("wavlm"),A2r=o(" \u2014 "),iJ=a("a"),L2r=o("WavLMForAudioFrameClassification"),y2r=o(" (WavLM model)"),x2r=l(),t8=a("p"),$2r=o("The model is set in evaluation mode by default using "),xTe=a("code"),k2r=o("model.eval()"),S2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Te=a("code"),R2r=o("model.train()"),P2r=l(),F(a8.$$.fragment),RUe=l(),Zd=a("h2"),n8=a("a"),kTe=a("span"),F(_x.$$.fragment),B2r=l(),STe=a("span"),I2r=o("AutoModelForCTC"),PUe=l(),Jo=a("div"),F(ux.$$.fragment),N2r=l(),ec=a("p"),q2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dJ=a("a"),j2r=o("from_pretrained()"),D2r=o(" class method or the "),cJ=a("a"),G2r=o("from_config()"),O2r=o(` class
method.`),V2r=l(),bx=a("p"),X2r=o("This class cannot be instantiated directly using "),RTe=a("code"),z2r=o("__init__()"),W2r=o(" (throws an error)."),Q2r=l(),$t=a("div"),F(vx.$$.fragment),U2r=l(),PTe=a("p"),H2r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),J2r=l(),oc=a("p"),Y2r=o(`Note:
Loading a model from its configuration file does `),BTe=a("strong"),K2r=o("not"),Z2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),ebr=o("from_pretrained()"),obr=o(" to load the model weights."),rbr=l(),F(s8.$$.fragment),tbr=l(),po=a("div"),F(Fx.$$.fragment),abr=l(),ITe=a("p"),nbr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),sbr=l(),sn=a("p"),lbr=o("The model class to instantiate is selected based on the "),NTe=a("code"),ibr=o("model_type"),dbr=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),cbr=o("pretrained_model_name_or_path"),fbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),mbr=o("pretrained_model_name_or_path"),gbr=o(":"),hbr=l(),Le=a("ul"),l8=a("li"),DTe=a("strong"),pbr=o("data2vec-audio"),_br=o(" \u2014 "),mJ=a("a"),ubr=o("Data2VecAudioForCTC"),bbr=o(" (Data2VecAudio model)"),vbr=l(),i8=a("li"),GTe=a("strong"),Fbr=o("hubert"),Tbr=o(" \u2014 "),gJ=a("a"),Mbr=o("HubertForCTC"),Ebr=o(" (Hubert model)"),Cbr=l(),d8=a("li"),OTe=a("strong"),wbr=o("mctct"),Abr=o(" \u2014 "),hJ=a("a"),Lbr=o("MCTCTForCTC"),ybr=o(" (M-CTC-T model)"),xbr=l(),c8=a("li"),VTe=a("strong"),$br=o("sew"),kbr=o(" \u2014 "),pJ=a("a"),Sbr=o("SEWForCTC"),Rbr=o(" (SEW model)"),Pbr=l(),f8=a("li"),XTe=a("strong"),Bbr=o("sew-d"),Ibr=o(" \u2014 "),_J=a("a"),Nbr=o("SEWDForCTC"),qbr=o(" (SEW-D model)"),jbr=l(),m8=a("li"),zTe=a("strong"),Dbr=o("unispeech"),Gbr=o(" \u2014 "),uJ=a("a"),Obr=o("UniSpeechForCTC"),Vbr=o(" (UniSpeech model)"),Xbr=l(),g8=a("li"),WTe=a("strong"),zbr=o("unispeech-sat"),Wbr=o(" \u2014 "),bJ=a("a"),Qbr=o("UniSpeechSatForCTC"),Ubr=o(" (UniSpeechSat model)"),Hbr=l(),h8=a("li"),QTe=a("strong"),Jbr=o("wav2vec2"),Ybr=o(" \u2014 "),vJ=a("a"),Kbr=o("Wav2Vec2ForCTC"),Zbr=o(" (Wav2Vec2 model)"),evr=l(),p8=a("li"),UTe=a("strong"),ovr=o("wav2vec2-conformer"),rvr=o(" \u2014 "),FJ=a("a"),tvr=o("Wav2Vec2ConformerForCTC"),avr=o(" (Wav2Vec2-Conformer model)"),nvr=l(),_8=a("li"),HTe=a("strong"),svr=o("wavlm"),lvr=o(" \u2014 "),TJ=a("a"),ivr=o("WavLMForCTC"),dvr=o(" (WavLM model)"),cvr=l(),u8=a("p"),fvr=o("The model is set in evaluation mode by default using "),JTe=a("code"),mvr=o("model.eval()"),gvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),YTe=a("code"),hvr=o("model.train()"),pvr=l(),F(b8.$$.fragment),BUe=l(),rc=a("h2"),v8=a("a"),KTe=a("span"),F(Tx.$$.fragment),_vr=l(),ZTe=a("span"),uvr=o("AutoModelForSpeechSeq2Seq"),IUe=l(),Yo=a("div"),F(Mx.$$.fragment),bvr=l(),tc=a("p"),vvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MJ=a("a"),Fvr=o("from_pretrained()"),Tvr=o(" class method or the "),EJ=a("a"),Mvr=o("from_config()"),Evr=o(` class
method.`),Cvr=l(),Ex=a("p"),wvr=o("This class cannot be instantiated directly using "),e7e=a("code"),Avr=o("__init__()"),Lvr=o(" (throws an error)."),yvr=l(),kt=a("div"),F(Cx.$$.fragment),xvr=l(),o7e=a("p"),$vr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kvr=l(),ac=a("p"),Svr=o(`Note:
Loading a model from its configuration file does `),r7e=a("strong"),Rvr=o("not"),Pvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=a("a"),Bvr=o("from_pretrained()"),Ivr=o(" to load the model weights."),Nvr=l(),F(F8.$$.fragment),qvr=l(),_o=a("div"),F(wx.$$.fragment),jvr=l(),t7e=a("p"),Dvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Gvr=l(),ln=a("p"),Ovr=o("The model class to instantiate is selected based on the "),a7e=a("code"),Vvr=o("model_type"),Xvr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),zvr=o("pretrained_model_name_or_path"),Wvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),Qvr=o("pretrained_model_name_or_path"),Uvr=o(":"),Hvr=l(),Ax=a("ul"),T8=a("li"),l7e=a("strong"),Jvr=o("speech-encoder-decoder"),Yvr=o(" \u2014 "),wJ=a("a"),Kvr=o("SpeechEncoderDecoderModel"),Zvr=o(" (Speech Encoder decoder model)"),e6r=l(),M8=a("li"),i7e=a("strong"),o6r=o("speech_to_text"),r6r=o(" \u2014 "),AJ=a("a"),t6r=o("Speech2TextForConditionalGeneration"),a6r=o(" (Speech2Text model)"),n6r=l(),E8=a("p"),s6r=o("The model is set in evaluation mode by default using "),d7e=a("code"),l6r=o("model.eval()"),i6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c7e=a("code"),d6r=o("model.train()"),c6r=l(),F(C8.$$.fragment),NUe=l(),nc=a("h2"),w8=a("a"),f7e=a("span"),F(Lx.$$.fragment),f6r=l(),m7e=a("span"),m6r=o("AutoModelForAudioXVector"),qUe=l(),Ko=a("div"),F(yx.$$.fragment),g6r=l(),sc=a("p"),h6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),LJ=a("a"),p6r=o("from_pretrained()"),_6r=o(" class method or the "),yJ=a("a"),u6r=o("from_config()"),b6r=o(` class
method.`),v6r=l(),xx=a("p"),F6r=o("This class cannot be instantiated directly using "),g7e=a("code"),T6r=o("__init__()"),M6r=o(" (throws an error)."),E6r=l(),St=a("div"),F($x.$$.fragment),C6r=l(),h7e=a("p"),w6r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),A6r=l(),lc=a("p"),L6r=o(`Note:
Loading a model from its configuration file does `),p7e=a("strong"),y6r=o("not"),x6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),$6r=o("from_pretrained()"),k6r=o(" to load the model weights."),S6r=l(),F(A8.$$.fragment),R6r=l(),uo=a("div"),F(kx.$$.fragment),P6r=l(),_7e=a("p"),B6r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),I6r=l(),dn=a("p"),N6r=o("The model class to instantiate is selected based on the "),u7e=a("code"),q6r=o("model_type"),j6r=o(` property of the config object (either
passed as an argument or loaded from `),b7e=a("code"),D6r=o("pretrained_model_name_or_path"),G6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v7e=a("code"),O6r=o("pretrained_model_name_or_path"),V6r=o(":"),X6r=l(),lt=a("ul"),L8=a("li"),F7e=a("strong"),z6r=o("data2vec-audio"),W6r=o(" \u2014 "),$J=a("a"),Q6r=o("Data2VecAudioForXVector"),U6r=o(" (Data2VecAudio model)"),H6r=l(),y8=a("li"),T7e=a("strong"),J6r=o("unispeech-sat"),Y6r=o(" \u2014 "),kJ=a("a"),K6r=o("UniSpeechSatForXVector"),Z6r=o(" (UniSpeechSat model)"),eFr=l(),x8=a("li"),M7e=a("strong"),oFr=o("wav2vec2"),rFr=o(" \u2014 "),SJ=a("a"),tFr=o("Wav2Vec2ForXVector"),aFr=o(" (Wav2Vec2 model)"),nFr=l(),$8=a("li"),E7e=a("strong"),sFr=o("wav2vec2-conformer"),lFr=o(" \u2014 "),RJ=a("a"),iFr=o("Wav2Vec2ConformerForXVector"),dFr=o(" (Wav2Vec2-Conformer model)"),cFr=l(),k8=a("li"),C7e=a("strong"),fFr=o("wavlm"),mFr=o(" \u2014 "),PJ=a("a"),gFr=o("WavLMForXVector"),hFr=o(" (WavLM model)"),pFr=l(),S8=a("p"),_Fr=o("The model is set in evaluation mode by default using "),w7e=a("code"),uFr=o("model.eval()"),bFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A7e=a("code"),vFr=o("model.train()"),FFr=l(),F(R8.$$.fragment),jUe=l(),ic=a("h2"),P8=a("a"),L7e=a("span"),F(Sx.$$.fragment),TFr=l(),y7e=a("span"),MFr=o("AutoModelForMaskedImageModeling"),DUe=l(),Zo=a("div"),F(Rx.$$.fragment),EFr=l(),dc=a("p"),CFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BJ=a("a"),wFr=o("from_pretrained()"),AFr=o(" class method or the "),IJ=a("a"),LFr=o("from_config()"),yFr=o(` class
method.`),xFr=l(),Px=a("p"),$Fr=o("This class cannot be instantiated directly using "),x7e=a("code"),kFr=o("__init__()"),SFr=o(" (throws an error)."),RFr=l(),Rt=a("div"),F(Bx.$$.fragment),PFr=l(),$7e=a("p"),BFr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),IFr=l(),cc=a("p"),NFr=o(`Note:
Loading a model from its configuration file does `),k7e=a("strong"),qFr=o("not"),jFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),DFr=o("from_pretrained()"),GFr=o(" to load the model weights."),OFr=l(),F(B8.$$.fragment),VFr=l(),bo=a("div"),F(Ix.$$.fragment),XFr=l(),S7e=a("p"),zFr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),WFr=l(),cn=a("p"),QFr=o("The model class to instantiate is selected based on the "),R7e=a("code"),UFr=o("model_type"),HFr=o(` property of the config object (either
passed as an argument or loaded from `),P7e=a("code"),JFr=o("pretrained_model_name_or_path"),YFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B7e=a("code"),KFr=o("pretrained_model_name_or_path"),ZFr=o(":"),eTr=l(),fn=a("ul"),I8=a("li"),I7e=a("strong"),oTr=o("deit"),rTr=o(" \u2014 "),qJ=a("a"),tTr=o("DeiTForMaskedImageModeling"),aTr=o(" (DeiT model)"),nTr=l(),N8=a("li"),N7e=a("strong"),sTr=o("swin"),lTr=o(" \u2014 "),jJ=a("a"),iTr=o("SwinForMaskedImageModeling"),dTr=o(" (Swin Transformer model)"),cTr=l(),q8=a("li"),q7e=a("strong"),fTr=o("swinv2"),mTr=o(" \u2014 "),DJ=a("a"),gTr=o("Swinv2ForMaskedImageModeling"),hTr=o(" (Swin Transformer V2 model)"),pTr=l(),j8=a("li"),j7e=a("strong"),_Tr=o("vit"),uTr=o(" \u2014 "),GJ=a("a"),bTr=o("ViTForMaskedImageModeling"),vTr=o(" (ViT model)"),FTr=l(),D8=a("p"),TTr=o("The model is set in evaluation mode by default using "),D7e=a("code"),MTr=o("model.eval()"),ETr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G7e=a("code"),CTr=o("model.train()"),wTr=l(),F(G8.$$.fragment),GUe=l(),fc=a("h2"),O8=a("a"),O7e=a("span"),F(Nx.$$.fragment),ATr=l(),V7e=a("span"),LTr=o("AutoModelForObjectDetection"),OUe=l(),er=a("div"),F(qx.$$.fragment),yTr=l(),mc=a("p"),xTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OJ=a("a"),$Tr=o("from_pretrained()"),kTr=o(" class method or the "),VJ=a("a"),STr=o("from_config()"),RTr=o(` class
method.`),PTr=l(),jx=a("p"),BTr=o("This class cannot be instantiated directly using "),X7e=a("code"),ITr=o("__init__()"),NTr=o(" (throws an error)."),qTr=l(),Pt=a("div"),F(Dx.$$.fragment),jTr=l(),z7e=a("p"),DTr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),GTr=l(),gc=a("p"),OTr=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),VTr=o("not"),XTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),zTr=o("from_pretrained()"),WTr=o(" to load the model weights."),QTr=l(),F(V8.$$.fragment),UTr=l(),vo=a("div"),F(Gx.$$.fragment),HTr=l(),Q7e=a("p"),JTr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),YTr=l(),mn=a("p"),KTr=o("The model class to instantiate is selected based on the "),U7e=a("code"),ZTr=o("model_type"),e7r=o(` property of the config object (either
passed as an argument or loaded from `),H7e=a("code"),o7r=o("pretrained_model_name_or_path"),r7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=a("code"),t7r=o("pretrained_model_name_or_path"),a7r=o(":"),n7r=l(),Ox=a("ul"),X8=a("li"),Y7e=a("strong"),s7r=o("detr"),l7r=o(" \u2014 "),zJ=a("a"),i7r=o("DetrForObjectDetection"),d7r=o(" (DETR model)"),c7r=l(),z8=a("li"),K7e=a("strong"),f7r=o("yolos"),m7r=o(" \u2014 "),WJ=a("a"),g7r=o("YolosForObjectDetection"),h7r=o(" (YOLOS model)"),p7r=l(),W8=a("p"),_7r=o("The model is set in evaluation mode by default using "),Z7e=a("code"),u7r=o("model.eval()"),b7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e8e=a("code"),v7r=o("model.train()"),F7r=l(),F(Q8.$$.fragment),VUe=l(),hc=a("h2"),U8=a("a"),o8e=a("span"),F(Vx.$$.fragment),T7r=l(),r8e=a("span"),M7r=o("AutoModelForImageSegmentation"),XUe=l(),or=a("div"),F(Xx.$$.fragment),E7r=l(),pc=a("p"),C7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),QJ=a("a"),w7r=o("from_pretrained()"),A7r=o(" class method or the "),UJ=a("a"),L7r=o("from_config()"),y7r=o(` class
method.`),x7r=l(),zx=a("p"),$7r=o("This class cannot be instantiated directly using "),t8e=a("code"),k7r=o("__init__()"),S7r=o(" (throws an error)."),R7r=l(),Bt=a("div"),F(Wx.$$.fragment),P7r=l(),a8e=a("p"),B7r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),I7r=l(),_c=a("p"),N7r=o(`Note:
Loading a model from its configuration file does `),n8e=a("strong"),q7r=o("not"),j7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),D7r=o("from_pretrained()"),G7r=o(" to load the model weights."),O7r=l(),F(H8.$$.fragment),V7r=l(),Fo=a("div"),F(Qx.$$.fragment),X7r=l(),s8e=a("p"),z7r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),W7r=l(),gn=a("p"),Q7r=o("The model class to instantiate is selected based on the "),l8e=a("code"),U7r=o("model_type"),H7r=o(` property of the config object (either
passed as an argument or loaded from `),i8e=a("code"),J7r=o("pretrained_model_name_or_path"),Y7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d8e=a("code"),K7r=o("pretrained_model_name_or_path"),Z7r=o(":"),e8r=l(),c8e=a("ul"),J8=a("li"),f8e=a("strong"),o8r=o("detr"),r8r=o(" \u2014 "),JJ=a("a"),t8r=o("DetrForSegmentation"),a8r=o(" (DETR model)"),n8r=l(),Y8=a("p"),s8r=o("The model is set in evaluation mode by default using "),m8e=a("code"),l8r=o("model.eval()"),i8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g8e=a("code"),d8r=o("model.train()"),c8r=l(),F(K8.$$.fragment),zUe=l(),uc=a("h2"),Z8=a("a"),h8e=a("span"),F(Ux.$$.fragment),f8r=l(),p8e=a("span"),m8r=o("AutoModelForSemanticSegmentation"),WUe=l(),rr=a("div"),F(Hx.$$.fragment),g8r=l(),bc=a("p"),h8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YJ=a("a"),p8r=o("from_pretrained()"),_8r=o(" class method or the "),KJ=a("a"),u8r=o("from_config()"),b8r=o(` class
method.`),v8r=l(),Jx=a("p"),F8r=o("This class cannot be instantiated directly using "),_8e=a("code"),T8r=o("__init__()"),M8r=o(" (throws an error)."),E8r=l(),It=a("div"),F(Yx.$$.fragment),C8r=l(),u8e=a("p"),w8r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),A8r=l(),vc=a("p"),L8r=o(`Note:
Loading a model from its configuration file does `),b8e=a("strong"),y8r=o("not"),x8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),$8r=o("from_pretrained()"),k8r=o(" to load the model weights."),S8r=l(),F(e9.$$.fragment),R8r=l(),To=a("div"),F(Kx.$$.fragment),P8r=l(),v8e=a("p"),B8r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),I8r=l(),hn=a("p"),N8r=o("The model class to instantiate is selected based on the "),F8e=a("code"),q8r=o("model_type"),j8r=o(` property of the config object (either
passed as an argument or loaded from `),T8e=a("code"),D8r=o("pretrained_model_name_or_path"),G8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M8e=a("code"),O8r=o("pretrained_model_name_or_path"),V8r=o(":"),X8r=l(),it=a("ul"),o9=a("li"),E8e=a("strong"),z8r=o("beit"),W8r=o(" \u2014 "),eY=a("a"),Q8r=o("BeitForSemanticSegmentation"),U8r=o(" (BEiT model)"),H8r=l(),r9=a("li"),C8e=a("strong"),J8r=o("data2vec-vision"),Y8r=o(" \u2014 "),oY=a("a"),K8r=o("Data2VecVisionForSemanticSegmentation"),Z8r=o(" (Data2VecVision model)"),e9r=l(),t9=a("li"),w8e=a("strong"),o9r=o("dpt"),r9r=o(" \u2014 "),rY=a("a"),t9r=o("DPTForSemanticSegmentation"),a9r=o(" (DPT model)"),n9r=l(),a9=a("li"),A8e=a("strong"),s9r=o("mobilevit"),l9r=o(" \u2014 "),tY=a("a"),i9r=o("MobileViTForSemanticSegmentation"),d9r=o(" (MobileViT model)"),c9r=l(),n9=a("li"),L8e=a("strong"),f9r=o("segformer"),m9r=o(" \u2014 "),aY=a("a"),g9r=o("SegformerForSemanticSegmentation"),h9r=o(" (SegFormer model)"),p9r=l(),s9=a("p"),_9r=o("The model is set in evaluation mode by default using "),y8e=a("code"),u9r=o("model.eval()"),b9r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x8e=a("code"),v9r=o("model.train()"),F9r=l(),F(l9.$$.fragment),QUe=l(),Fc=a("h2"),i9=a("a"),$8e=a("span"),F(Zx.$$.fragment),T9r=l(),k8e=a("span"),M9r=o("AutoModelForInstanceSegmentation"),UUe=l(),tr=a("div"),F(e$.$$.fragment),E9r=l(),Tc=a("p"),C9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nY=a("a"),w9r=o("from_pretrained()"),A9r=o(" class method or the "),sY=a("a"),L9r=o("from_config()"),y9r=o(` class
method.`),x9r=l(),o$=a("p"),$9r=o("This class cannot be instantiated directly using "),S8e=a("code"),k9r=o("__init__()"),S9r=o(" (throws an error)."),R9r=l(),Nt=a("div"),F(r$.$$.fragment),P9r=l(),R8e=a("p"),B9r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),I9r=l(),Mc=a("p"),N9r=o(`Note:
Loading a model from its configuration file does `),P8e=a("strong"),q9r=o("not"),j9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),D9r=o("from_pretrained()"),G9r=o(" to load the model weights."),O9r=l(),F(d9.$$.fragment),V9r=l(),Mo=a("div"),F(t$.$$.fragment),X9r=l(),B8e=a("p"),z9r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),W9r=l(),pn=a("p"),Q9r=o("The model class to instantiate is selected based on the "),I8e=a("code"),U9r=o("model_type"),H9r=o(` property of the config object (either
passed as an argument or loaded from `),N8e=a("code"),J9r=o("pretrained_model_name_or_path"),Y9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q8e=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(":"),eMr=l(),j8e=a("ul"),c9=a("li"),D8e=a("strong"),oMr=o("maskformer"),rMr=o(" \u2014 "),iY=a("a"),tMr=o("MaskFormerForInstanceSegmentation"),aMr=o(" (MaskFormer model)"),nMr=l(),f9=a("p"),sMr=o("The model is set in evaluation mode by default using "),G8e=a("code"),lMr=o("model.eval()"),iMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O8e=a("code"),dMr=o("model.train()"),cMr=l(),F(m9.$$.fragment),HUe=l(),Ec=a("h2"),g9=a("a"),V8e=a("span"),F(a$.$$.fragment),fMr=l(),X8e=a("span"),mMr=o("TFAutoModel"),JUe=l(),ar=a("div"),F(n$.$$.fragment),gMr=l(),Cc=a("p"),hMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dY=a("a"),pMr=o("from_pretrained()"),_Mr=o(" class method or the "),cY=a("a"),uMr=o("from_config()"),bMr=o(` class
method.`),vMr=l(),s$=a("p"),FMr=o("This class cannot be instantiated directly using "),z8e=a("code"),TMr=o("__init__()"),MMr=o(" (throws an error)."),EMr=l(),qt=a("div"),F(l$.$$.fragment),CMr=l(),W8e=a("p"),wMr=o("Instantiates one of the base model classes of the library from a configuration."),AMr=l(),wc=a("p"),LMr=o(`Note:
Loading a model from its configuration file does `),Q8e=a("strong"),yMr=o("not"),xMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),$Mr=o("from_pretrained()"),kMr=o(" to load the model weights."),SMr=l(),F(h9.$$.fragment),RMr=l(),Rr=a("div"),F(i$.$$.fragment),PMr=l(),U8e=a("p"),BMr=o("Instantiate one of the base model classes of the library from a pretrained model."),IMr=l(),_n=a("p"),NMr=o("The model class to instantiate is selected based on the "),H8e=a("code"),qMr=o("model_type"),jMr=o(` property of the config object (either
passed as an argument or loaded from `),J8e=a("code"),DMr=o("pretrained_model_name_or_path"),GMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=a("code"),OMr=o("pretrained_model_name_or_path"),VMr=o(":"),XMr=l(),q=a("ul"),p9=a("li"),K8e=a("strong"),zMr=o("albert"),WMr=o(" \u2014 "),mY=a("a"),QMr=o("TFAlbertModel"),UMr=o(" (ALBERT model)"),HMr=l(),_9=a("li"),Z8e=a("strong"),JMr=o("bart"),YMr=o(" \u2014 "),gY=a("a"),KMr=o("TFBartModel"),ZMr=o(" (BART model)"),eEr=l(),u9=a("li"),e9e=a("strong"),oEr=o("bert"),rEr=o(" \u2014 "),hY=a("a"),tEr=o("TFBertModel"),aEr=o(" (BERT model)"),nEr=l(),b9=a("li"),o9e=a("strong"),sEr=o("blenderbot"),lEr=o(" \u2014 "),pY=a("a"),iEr=o("TFBlenderbotModel"),dEr=o(" (Blenderbot model)"),cEr=l(),v9=a("li"),r9e=a("strong"),fEr=o("blenderbot-small"),mEr=o(" \u2014 "),_Y=a("a"),gEr=o("TFBlenderbotSmallModel"),hEr=o(" (BlenderbotSmall model)"),pEr=l(),F9=a("li"),t9e=a("strong"),_Er=o("camembert"),uEr=o(" \u2014 "),uY=a("a"),bEr=o("TFCamembertModel"),vEr=o(" (CamemBERT model)"),FEr=l(),T9=a("li"),a9e=a("strong"),TEr=o("clip"),MEr=o(" \u2014 "),bY=a("a"),EEr=o("TFCLIPModel"),CEr=o(" (CLIP model)"),wEr=l(),M9=a("li"),n9e=a("strong"),AEr=o("convbert"),LEr=o(" \u2014 "),vY=a("a"),yEr=o("TFConvBertModel"),xEr=o(" (ConvBERT model)"),$Er=l(),E9=a("li"),s9e=a("strong"),kEr=o("convnext"),SEr=o(" \u2014 "),FY=a("a"),REr=o("TFConvNextModel"),PEr=o(" (ConvNeXT model)"),BEr=l(),C9=a("li"),l9e=a("strong"),IEr=o("ctrl"),NEr=o(" \u2014 "),TY=a("a"),qEr=o("TFCTRLModel"),jEr=o(" (CTRL model)"),DEr=l(),w9=a("li"),i9e=a("strong"),GEr=o("data2vec-vision"),OEr=o(" \u2014 "),MY=a("a"),VEr=o("TFData2VecVisionModel"),XEr=o(" (Data2VecVision model)"),zEr=l(),A9=a("li"),d9e=a("strong"),WEr=o("deberta"),QEr=o(" \u2014 "),EY=a("a"),UEr=o("TFDebertaModel"),HEr=o(" (DeBERTa model)"),JEr=l(),L9=a("li"),c9e=a("strong"),YEr=o("deberta-v2"),KEr=o(" \u2014 "),CY=a("a"),ZEr=o("TFDebertaV2Model"),e4r=o(" (DeBERTa-v2 model)"),o4r=l(),y9=a("li"),f9e=a("strong"),r4r=o("deit"),t4r=o(" \u2014 "),wY=a("a"),a4r=o("TFDeiTModel"),n4r=o(" (DeiT model)"),s4r=l(),x9=a("li"),m9e=a("strong"),l4r=o("distilbert"),i4r=o(" \u2014 "),AY=a("a"),d4r=o("TFDistilBertModel"),c4r=o(" (DistilBERT model)"),f4r=l(),$9=a("li"),g9e=a("strong"),m4r=o("dpr"),g4r=o(" \u2014 "),LY=a("a"),h4r=o("TFDPRQuestionEncoder"),p4r=o(" (DPR model)"),_4r=l(),k9=a("li"),h9e=a("strong"),u4r=o("electra"),b4r=o(" \u2014 "),yY=a("a"),v4r=o("TFElectraModel"),F4r=o(" (ELECTRA model)"),T4r=l(),S9=a("li"),p9e=a("strong"),M4r=o("flaubert"),E4r=o(" \u2014 "),xY=a("a"),C4r=o("TFFlaubertModel"),w4r=o(" (FlauBERT model)"),A4r=l(),il=a("li"),_9e=a("strong"),L4r=o("funnel"),y4r=o(" \u2014 "),$Y=a("a"),x4r=o("TFFunnelModel"),$4r=o(" or "),kY=a("a"),k4r=o("TFFunnelBaseModel"),S4r=o(" (Funnel Transformer model)"),R4r=l(),R9=a("li"),u9e=a("strong"),P4r=o("gpt2"),B4r=o(" \u2014 "),SY=a("a"),I4r=o("TFGPT2Model"),N4r=o(" (OpenAI GPT-2 model)"),q4r=l(),P9=a("li"),b9e=a("strong"),j4r=o("gptj"),D4r=o(" \u2014 "),RY=a("a"),G4r=o("TFGPTJModel"),O4r=o(" (GPT-J model)"),V4r=l(),B9=a("li"),v9e=a("strong"),X4r=o("hubert"),z4r=o(" \u2014 "),PY=a("a"),W4r=o("TFHubertModel"),Q4r=o(" (Hubert model)"),U4r=l(),I9=a("li"),F9e=a("strong"),H4r=o("layoutlm"),J4r=o(" \u2014 "),BY=a("a"),Y4r=o("TFLayoutLMModel"),K4r=o(" (LayoutLM model)"),Z4r=l(),N9=a("li"),T9e=a("strong"),eCr=o("led"),oCr=o(" \u2014 "),IY=a("a"),rCr=o("TFLEDModel"),tCr=o(" (LED model)"),aCr=l(),q9=a("li"),M9e=a("strong"),nCr=o("longformer"),sCr=o(" \u2014 "),NY=a("a"),lCr=o("TFLongformerModel"),iCr=o(" (Longformer model)"),dCr=l(),j9=a("li"),E9e=a("strong"),cCr=o("lxmert"),fCr=o(" \u2014 "),qY=a("a"),mCr=o("TFLxmertModel"),gCr=o(" (LXMERT model)"),hCr=l(),D9=a("li"),C9e=a("strong"),pCr=o("marian"),_Cr=o(" \u2014 "),jY=a("a"),uCr=o("TFMarianModel"),bCr=o(" (Marian model)"),vCr=l(),G9=a("li"),w9e=a("strong"),FCr=o("mbart"),TCr=o(" \u2014 "),DY=a("a"),MCr=o("TFMBartModel"),ECr=o(" (mBART model)"),CCr=l(),O9=a("li"),A9e=a("strong"),wCr=o("mobilebert"),ACr=o(" \u2014 "),GY=a("a"),LCr=o("TFMobileBertModel"),yCr=o(" (MobileBERT model)"),xCr=l(),V9=a("li"),L9e=a("strong"),$Cr=o("mpnet"),kCr=o(" \u2014 "),OY=a("a"),SCr=o("TFMPNetModel"),RCr=o(" (MPNet model)"),PCr=l(),X9=a("li"),y9e=a("strong"),BCr=o("mt5"),ICr=o(" \u2014 "),VY=a("a"),NCr=o("TFMT5Model"),qCr=o(" (MT5 model)"),jCr=l(),z9=a("li"),x9e=a("strong"),DCr=o("openai-gpt"),GCr=o(" \u2014 "),XY=a("a"),OCr=o("TFOpenAIGPTModel"),VCr=o(" (OpenAI GPT model)"),XCr=l(),W9=a("li"),$9e=a("strong"),zCr=o("opt"),WCr=o(" \u2014 "),zY=a("a"),QCr=o("TFOPTModel"),UCr=o(" (OPT model)"),HCr=l(),Q9=a("li"),k9e=a("strong"),JCr=o("pegasus"),YCr=o(" \u2014 "),WY=a("a"),KCr=o("TFPegasusModel"),ZCr=o(" (Pegasus model)"),e3r=l(),U9=a("li"),S9e=a("strong"),o3r=o("regnet"),r3r=o(" \u2014 "),QY=a("a"),t3r=o("TFRegNetModel"),a3r=o(" (RegNet model)"),n3r=l(),H9=a("li"),R9e=a("strong"),s3r=o("rembert"),l3r=o(" \u2014 "),UY=a("a"),i3r=o("TFRemBertModel"),d3r=o(" (RemBERT model)"),c3r=l(),J9=a("li"),P9e=a("strong"),f3r=o("resnet"),m3r=o(" \u2014 "),HY=a("a"),g3r=o("TFResNetModel"),h3r=o(" (ResNet model)"),p3r=l(),Y9=a("li"),B9e=a("strong"),_3r=o("roberta"),u3r=o(" \u2014 "),JY=a("a"),b3r=o("TFRobertaModel"),v3r=o(" (RoBERTa model)"),F3r=l(),K9=a("li"),I9e=a("strong"),T3r=o("roformer"),M3r=o(" \u2014 "),YY=a("a"),E3r=o("TFRoFormerModel"),C3r=o(" (RoFormer model)"),w3r=l(),Z9=a("li"),N9e=a("strong"),A3r=o("segformer"),L3r=o(" \u2014 "),KY=a("a"),y3r=o("TFSegformerModel"),x3r=o(" (SegFormer model)"),$3r=l(),eM=a("li"),q9e=a("strong"),k3r=o("speech_to_text"),S3r=o(" \u2014 "),ZY=a("a"),R3r=o("TFSpeech2TextModel"),P3r=o(" (Speech2Text model)"),B3r=l(),oM=a("li"),j9e=a("strong"),I3r=o("swin"),N3r=o(" \u2014 "),eK=a("a"),q3r=o("TFSwinModel"),j3r=o(" (Swin Transformer model)"),D3r=l(),rM=a("li"),D9e=a("strong"),G3r=o("t5"),O3r=o(" \u2014 "),oK=a("a"),V3r=o("TFT5Model"),X3r=o(" (T5 model)"),z3r=l(),tM=a("li"),G9e=a("strong"),W3r=o("tapas"),Q3r=o(" \u2014 "),rK=a("a"),U3r=o("TFTapasModel"),H3r=o(" (TAPAS model)"),J3r=l(),aM=a("li"),O9e=a("strong"),Y3r=o("transfo-xl"),K3r=o(" \u2014 "),tK=a("a"),Z3r=o("TFTransfoXLModel"),e5r=o(" (Transformer-XL model)"),o5r=l(),nM=a("li"),V9e=a("strong"),r5r=o("vit"),t5r=o(" \u2014 "),aK=a("a"),a5r=o("TFViTModel"),n5r=o(" (ViT model)"),s5r=l(),sM=a("li"),X9e=a("strong"),l5r=o("vit_mae"),i5r=o(" \u2014 "),nK=a("a"),d5r=o("TFViTMAEModel"),c5r=o(" (ViTMAE model)"),f5r=l(),lM=a("li"),z9e=a("strong"),m5r=o("wav2vec2"),g5r=o(" \u2014 "),sK=a("a"),h5r=o("TFWav2Vec2Model"),p5r=o(" (Wav2Vec2 model)"),_5r=l(),iM=a("li"),W9e=a("strong"),u5r=o("xlm"),b5r=o(" \u2014 "),lK=a("a"),v5r=o("TFXLMModel"),F5r=o(" (XLM model)"),T5r=l(),dM=a("li"),Q9e=a("strong"),M5r=o("xlm-roberta"),E5r=o(" \u2014 "),iK=a("a"),C5r=o("TFXLMRobertaModel"),w5r=o(" (XLM-RoBERTa model)"),A5r=l(),cM=a("li"),U9e=a("strong"),L5r=o("xlnet"),y5r=o(" \u2014 "),dK=a("a"),x5r=o("TFXLNetModel"),$5r=o(" (XLNet model)"),k5r=l(),F(fM.$$.fragment),YUe=l(),Ac=a("h2"),mM=a("a"),H9e=a("span"),F(d$.$$.fragment),S5r=l(),J9e=a("span"),R5r=o("TFAutoModelForPreTraining"),KUe=l(),nr=a("div"),F(c$.$$.fragment),P5r=l(),Lc=a("p"),B5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cK=a("a"),I5r=o("from_pretrained()"),N5r=o(" class method or the "),fK=a("a"),q5r=o("from_config()"),j5r=o(` class
method.`),D5r=l(),f$=a("p"),G5r=o("This class cannot be instantiated directly using "),Y9e=a("code"),O5r=o("__init__()"),V5r=o(" (throws an error)."),X5r=l(),jt=a("div"),F(m$.$$.fragment),z5r=l(),K9e=a("p"),W5r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q5r=l(),yc=a("p"),U5r=o(`Note:
Loading a model from its configuration file does `),Z9e=a("strong"),H5r=o("not"),J5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),Y5r=o("from_pretrained()"),K5r=o(" to load the model weights."),Z5r=l(),F(gM.$$.fragment),e0r=l(),Pr=a("div"),F(g$.$$.fragment),o0r=l(),eMe=a("p"),r0r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),t0r=l(),un=a("p"),a0r=o("The model class to instantiate is selected based on the "),oMe=a("code"),n0r=o("model_type"),s0r=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),l0r=o("pretrained_model_name_or_path"),i0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),d0r=o("pretrained_model_name_or_path"),c0r=o(":"),f0r=l(),se=a("ul"),hM=a("li"),aMe=a("strong"),m0r=o("albert"),g0r=o(" \u2014 "),gK=a("a"),h0r=o("TFAlbertForPreTraining"),p0r=o(" (ALBERT model)"),_0r=l(),pM=a("li"),nMe=a("strong"),u0r=o("bart"),b0r=o(" \u2014 "),hK=a("a"),v0r=o("TFBartForConditionalGeneration"),F0r=o(" (BART model)"),T0r=l(),_M=a("li"),sMe=a("strong"),M0r=o("bert"),E0r=o(" \u2014 "),pK=a("a"),C0r=o("TFBertForPreTraining"),w0r=o(" (BERT model)"),A0r=l(),uM=a("li"),lMe=a("strong"),L0r=o("camembert"),y0r=o(" \u2014 "),_K=a("a"),x0r=o("TFCamembertForMaskedLM"),$0r=o(" (CamemBERT model)"),k0r=l(),bM=a("li"),iMe=a("strong"),S0r=o("ctrl"),R0r=o(" \u2014 "),uK=a("a"),P0r=o("TFCTRLLMHeadModel"),B0r=o(" (CTRL model)"),I0r=l(),vM=a("li"),dMe=a("strong"),N0r=o("distilbert"),q0r=o(" \u2014 "),bK=a("a"),j0r=o("TFDistilBertForMaskedLM"),D0r=o(" (DistilBERT model)"),G0r=l(),FM=a("li"),cMe=a("strong"),O0r=o("electra"),V0r=o(" \u2014 "),vK=a("a"),X0r=o("TFElectraForPreTraining"),z0r=o(" (ELECTRA model)"),W0r=l(),TM=a("li"),fMe=a("strong"),Q0r=o("flaubert"),U0r=o(" \u2014 "),FK=a("a"),H0r=o("TFFlaubertWithLMHeadModel"),J0r=o(" (FlauBERT model)"),Y0r=l(),MM=a("li"),mMe=a("strong"),K0r=o("funnel"),Z0r=o(" \u2014 "),TK=a("a"),ewr=o("TFFunnelForPreTraining"),owr=o(" (Funnel Transformer model)"),rwr=l(),EM=a("li"),gMe=a("strong"),twr=o("gpt2"),awr=o(" \u2014 "),MK=a("a"),nwr=o("TFGPT2LMHeadModel"),swr=o(" (OpenAI GPT-2 model)"),lwr=l(),CM=a("li"),hMe=a("strong"),iwr=o("layoutlm"),dwr=o(" \u2014 "),EK=a("a"),cwr=o("TFLayoutLMForMaskedLM"),fwr=o(" (LayoutLM model)"),mwr=l(),wM=a("li"),pMe=a("strong"),gwr=o("lxmert"),hwr=o(" \u2014 "),CK=a("a"),pwr=o("TFLxmertForPreTraining"),_wr=o(" (LXMERT model)"),uwr=l(),AM=a("li"),_Me=a("strong"),bwr=o("mobilebert"),vwr=o(" \u2014 "),wK=a("a"),Fwr=o("TFMobileBertForPreTraining"),Twr=o(" (MobileBERT model)"),Mwr=l(),LM=a("li"),uMe=a("strong"),Ewr=o("mpnet"),Cwr=o(" \u2014 "),AK=a("a"),wwr=o("TFMPNetForMaskedLM"),Awr=o(" (MPNet model)"),Lwr=l(),yM=a("li"),bMe=a("strong"),ywr=o("openai-gpt"),xwr=o(" \u2014 "),LK=a("a"),$wr=o("TFOpenAIGPTLMHeadModel"),kwr=o(" (OpenAI GPT model)"),Swr=l(),xM=a("li"),vMe=a("strong"),Rwr=o("roberta"),Pwr=o(" \u2014 "),yK=a("a"),Bwr=o("TFRobertaForMaskedLM"),Iwr=o(" (RoBERTa model)"),Nwr=l(),$M=a("li"),FMe=a("strong"),qwr=o("t5"),jwr=o(" \u2014 "),xK=a("a"),Dwr=o("TFT5ForConditionalGeneration"),Gwr=o(" (T5 model)"),Owr=l(),kM=a("li"),TMe=a("strong"),Vwr=o("tapas"),Xwr=o(" \u2014 "),$K=a("a"),zwr=o("TFTapasForMaskedLM"),Wwr=o(" (TAPAS model)"),Qwr=l(),SM=a("li"),MMe=a("strong"),Uwr=o("transfo-xl"),Hwr=o(" \u2014 "),kK=a("a"),Jwr=o("TFTransfoXLLMHeadModel"),Ywr=o(" (Transformer-XL model)"),Kwr=l(),RM=a("li"),EMe=a("strong"),Zwr=o("vit_mae"),eAr=o(" \u2014 "),SK=a("a"),oAr=o("TFViTMAEForPreTraining"),rAr=o(" (ViTMAE model)"),tAr=l(),PM=a("li"),CMe=a("strong"),aAr=o("xlm"),nAr=o(" \u2014 "),RK=a("a"),sAr=o("TFXLMWithLMHeadModel"),lAr=o(" (XLM model)"),iAr=l(),BM=a("li"),wMe=a("strong"),dAr=o("xlm-roberta"),cAr=o(" \u2014 "),PK=a("a"),fAr=o("TFXLMRobertaForMaskedLM"),mAr=o(" (XLM-RoBERTa model)"),gAr=l(),IM=a("li"),AMe=a("strong"),hAr=o("xlnet"),pAr=o(" \u2014 "),BK=a("a"),_Ar=o("TFXLNetLMHeadModel"),uAr=o(" (XLNet model)"),bAr=l(),F(NM.$$.fragment),ZUe=l(),xc=a("h2"),qM=a("a"),LMe=a("span"),F(h$.$$.fragment),vAr=l(),yMe=a("span"),FAr=o("TFAutoModelForCausalLM"),eHe=l(),sr=a("div"),F(p$.$$.fragment),TAr=l(),$c=a("p"),MAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IK=a("a"),EAr=o("from_pretrained()"),CAr=o(" class method or the "),NK=a("a"),wAr=o("from_config()"),AAr=o(` class
method.`),LAr=l(),_$=a("p"),yAr=o("This class cannot be instantiated directly using "),xMe=a("code"),xAr=o("__init__()"),$Ar=o(" (throws an error)."),kAr=l(),Dt=a("div"),F(u$.$$.fragment),SAr=l(),$Me=a("p"),RAr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PAr=l(),kc=a("p"),BAr=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),IAr=o("not"),NAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),qAr=o("from_pretrained()"),jAr=o(" to load the model weights."),DAr=l(),F(jM.$$.fragment),GAr=l(),Br=a("div"),F(b$.$$.fragment),OAr=l(),SMe=a("p"),VAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XAr=l(),bn=a("p"),zAr=o("The model class to instantiate is selected based on the "),RMe=a("code"),WAr=o("model_type"),QAr=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),UAr=o("pretrained_model_name_or_path"),HAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),JAr=o("pretrained_model_name_or_path"),YAr=o(":"),KAr=l(),Me=a("ul"),DM=a("li"),IMe=a("strong"),ZAr=o("bert"),eLr=o(" \u2014 "),jK=a("a"),oLr=o("TFBertLMHeadModel"),rLr=o(" (BERT model)"),tLr=l(),GM=a("li"),NMe=a("strong"),aLr=o("camembert"),nLr=o(" \u2014 "),DK=a("a"),sLr=o("TFCamembertForCausalLM"),lLr=o(" (CamemBERT model)"),iLr=l(),OM=a("li"),qMe=a("strong"),dLr=o("ctrl"),cLr=o(" \u2014 "),GK=a("a"),fLr=o("TFCTRLLMHeadModel"),mLr=o(" (CTRL model)"),gLr=l(),VM=a("li"),jMe=a("strong"),hLr=o("gpt2"),pLr=o(" \u2014 "),OK=a("a"),_Lr=o("TFGPT2LMHeadModel"),uLr=o(" (OpenAI GPT-2 model)"),bLr=l(),XM=a("li"),DMe=a("strong"),vLr=o("gptj"),FLr=o(" \u2014 "),VK=a("a"),TLr=o("TFGPTJForCausalLM"),MLr=o(" (GPT-J model)"),ELr=l(),zM=a("li"),GMe=a("strong"),CLr=o("openai-gpt"),wLr=o(" \u2014 "),XK=a("a"),ALr=o("TFOpenAIGPTLMHeadModel"),LLr=o(" (OpenAI GPT model)"),yLr=l(),WM=a("li"),OMe=a("strong"),xLr=o("opt"),$Lr=o(" \u2014 "),zK=a("a"),kLr=o("TFOPTForCausalLM"),SLr=o(" (OPT model)"),RLr=l(),QM=a("li"),VMe=a("strong"),PLr=o("rembert"),BLr=o(" \u2014 "),WK=a("a"),ILr=o("TFRemBertForCausalLM"),NLr=o(" (RemBERT model)"),qLr=l(),UM=a("li"),XMe=a("strong"),jLr=o("roberta"),DLr=o(" \u2014 "),QK=a("a"),GLr=o("TFRobertaForCausalLM"),OLr=o(" (RoBERTa model)"),VLr=l(),HM=a("li"),zMe=a("strong"),XLr=o("roformer"),zLr=o(" \u2014 "),UK=a("a"),WLr=o("TFRoFormerForCausalLM"),QLr=o(" (RoFormer model)"),ULr=l(),JM=a("li"),WMe=a("strong"),HLr=o("transfo-xl"),JLr=o(" \u2014 "),HK=a("a"),YLr=o("TFTransfoXLLMHeadModel"),KLr=o(" (Transformer-XL model)"),ZLr=l(),YM=a("li"),QMe=a("strong"),eyr=o("xlm"),oyr=o(" \u2014 "),JK=a("a"),ryr=o("TFXLMWithLMHeadModel"),tyr=o(" (XLM model)"),ayr=l(),KM=a("li"),UMe=a("strong"),nyr=o("xlnet"),syr=o(" \u2014 "),YK=a("a"),lyr=o("TFXLNetLMHeadModel"),iyr=o(" (XLNet model)"),dyr=l(),F(ZM.$$.fragment),oHe=l(),Sc=a("h2"),eE=a("a"),HMe=a("span"),F(v$.$$.fragment),cyr=l(),JMe=a("span"),fyr=o("TFAutoModelForImageClassification"),rHe=l(),lr=a("div"),F(F$.$$.fragment),myr=l(),Rc=a("p"),gyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KK=a("a"),hyr=o("from_pretrained()"),pyr=o(" class method or the "),ZK=a("a"),_yr=o("from_config()"),uyr=o(` class
method.`),byr=l(),T$=a("p"),vyr=o("This class cannot be instantiated directly using "),YMe=a("code"),Fyr=o("__init__()"),Tyr=o(" (throws an error)."),Myr=l(),Gt=a("div"),F(M$.$$.fragment),Eyr=l(),KMe=a("p"),Cyr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wyr=l(),Pc=a("p"),Ayr=o(`Note:
Loading a model from its configuration file does `),ZMe=a("strong"),Lyr=o("not"),yyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),xyr=o("from_pretrained()"),$yr=o(" to load the model weights."),kyr=l(),F(oE.$$.fragment),Syr=l(),Ir=a("div"),F(E$.$$.fragment),Ryr=l(),eEe=a("p"),Pyr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Byr=l(),vn=a("p"),Iyr=o("The model class to instantiate is selected based on the "),oEe=a("code"),Nyr=o("model_type"),qyr=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),jyr=o("pretrained_model_name_or_path"),Dyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),Gyr=o("pretrained_model_name_or_path"),Oyr=o(":"),Vyr=l(),Ve=a("ul"),rE=a("li"),aEe=a("strong"),Xyr=o("convnext"),zyr=o(" \u2014 "),oZ=a("a"),Wyr=o("TFConvNextForImageClassification"),Qyr=o(" (ConvNeXT model)"),Uyr=l(),tE=a("li"),nEe=a("strong"),Hyr=o("data2vec-vision"),Jyr=o(" \u2014 "),rZ=a("a"),Yyr=o("TFData2VecVisionForImageClassification"),Kyr=o(" (Data2VecVision model)"),Zyr=l(),dl=a("li"),sEe=a("strong"),exr=o("deit"),oxr=o(" \u2014 "),tZ=a("a"),rxr=o("TFDeiTForImageClassification"),txr=o(" or "),aZ=a("a"),axr=o("TFDeiTForImageClassificationWithTeacher"),nxr=o(" (DeiT model)"),sxr=l(),aE=a("li"),lEe=a("strong"),lxr=o("regnet"),ixr=o(" \u2014 "),nZ=a("a"),dxr=o("TFRegNetForImageClassification"),cxr=o(" (RegNet model)"),fxr=l(),nE=a("li"),iEe=a("strong"),mxr=o("resnet"),gxr=o(" \u2014 "),sZ=a("a"),hxr=o("TFResNetForImageClassification"),pxr=o(" (ResNet model)"),_xr=l(),sE=a("li"),dEe=a("strong"),uxr=o("segformer"),bxr=o(" \u2014 "),lZ=a("a"),vxr=o("TFSegformerForImageClassification"),Fxr=o(" (SegFormer model)"),Txr=l(),lE=a("li"),cEe=a("strong"),Mxr=o("swin"),Exr=o(" \u2014 "),iZ=a("a"),Cxr=o("TFSwinForImageClassification"),wxr=o(" (Swin Transformer model)"),Axr=l(),iE=a("li"),fEe=a("strong"),Lxr=o("vit"),yxr=o(" \u2014 "),dZ=a("a"),xxr=o("TFViTForImageClassification"),$xr=o(" (ViT model)"),kxr=l(),F(dE.$$.fragment),tHe=l(),Bc=a("h2"),cE=a("a"),mEe=a("span"),F(C$.$$.fragment),Sxr=l(),gEe=a("span"),Rxr=o("TFAutoModelForSemanticSegmentation"),aHe=l(),ir=a("div"),F(w$.$$.fragment),Pxr=l(),Ic=a("p"),Bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cZ=a("a"),Ixr=o("from_pretrained()"),Nxr=o(" class method or the "),fZ=a("a"),qxr=o("from_config()"),jxr=o(` class
method.`),Dxr=l(),A$=a("p"),Gxr=o("This class cannot be instantiated directly using "),hEe=a("code"),Oxr=o("__init__()"),Vxr=o(" (throws an error)."),Xxr=l(),Ot=a("div"),F(L$.$$.fragment),zxr=l(),pEe=a("p"),Wxr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Qxr=l(),Nc=a("p"),Uxr=o(`Note:
Loading a model from its configuration file does `),_Ee=a("strong"),Hxr=o("not"),Jxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),Yxr=o("from_pretrained()"),Kxr=o(" to load the model weights."),Zxr=l(),F(fE.$$.fragment),e$r=l(),Nr=a("div"),F(y$.$$.fragment),o$r=l(),uEe=a("p"),r$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),t$r=l(),Fn=a("p"),a$r=o("The model class to instantiate is selected based on the "),bEe=a("code"),n$r=o("model_type"),s$r=o(` property of the config object (either
passed as an argument or loaded from `),vEe=a("code"),l$r=o("pretrained_model_name_or_path"),i$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=a("code"),d$r=o("pretrained_model_name_or_path"),c$r=o(":"),f$r=l(),x$=a("ul"),mE=a("li"),TEe=a("strong"),m$r=o("data2vec-vision"),g$r=o(" \u2014 "),gZ=a("a"),h$r=o("TFData2VecVisionForSemanticSegmentation"),p$r=o(" (Data2VecVision model)"),_$r=l(),gE=a("li"),MEe=a("strong"),u$r=o("segformer"),b$r=o(" \u2014 "),hZ=a("a"),v$r=o("TFSegformerForSemanticSegmentation"),F$r=o(" (SegFormer model)"),T$r=l(),F(hE.$$.fragment),nHe=l(),qc=a("h2"),pE=a("a"),EEe=a("span"),F($$.$$.fragment),M$r=l(),CEe=a("span"),E$r=o("TFAutoModelForMaskedLM"),sHe=l(),dr=a("div"),F(k$.$$.fragment),C$r=l(),jc=a("p"),w$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pZ=a("a"),A$r=o("from_pretrained()"),L$r=o(" class method or the "),_Z=a("a"),y$r=o("from_config()"),x$r=o(` class
method.`),$$r=l(),S$=a("p"),k$r=o("This class cannot be instantiated directly using "),wEe=a("code"),S$r=o("__init__()"),R$r=o(" (throws an error)."),P$r=l(),Vt=a("div"),F(R$.$$.fragment),B$r=l(),AEe=a("p"),I$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),N$r=l(),Dc=a("p"),q$r=o(`Note:
Loading a model from its configuration file does `),LEe=a("strong"),j$r=o("not"),D$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),G$r=o("from_pretrained()"),O$r=o(" to load the model weights."),V$r=l(),F(_E.$$.fragment),X$r=l(),qr=a("div"),F(P$.$$.fragment),z$r=l(),yEe=a("p"),W$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Q$r=l(),Tn=a("p"),U$r=o("The model class to instantiate is selected based on the "),xEe=a("code"),H$r=o("model_type"),J$r=o(` property of the config object (either
passed as an argument or loaded from `),$Ee=a("code"),Y$r=o("pretrained_model_name_or_path"),K$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=a("code"),Z$r=o("pretrained_model_name_or_path"),ekr=o(":"),okr=l(),de=a("ul"),uE=a("li"),SEe=a("strong"),rkr=o("albert"),tkr=o(" \u2014 "),bZ=a("a"),akr=o("TFAlbertForMaskedLM"),nkr=o(" (ALBERT model)"),skr=l(),bE=a("li"),REe=a("strong"),lkr=o("bert"),ikr=o(" \u2014 "),vZ=a("a"),dkr=o("TFBertForMaskedLM"),ckr=o(" (BERT model)"),fkr=l(),vE=a("li"),PEe=a("strong"),mkr=o("camembert"),gkr=o(" \u2014 "),FZ=a("a"),hkr=o("TFCamembertForMaskedLM"),pkr=o(" (CamemBERT model)"),_kr=l(),FE=a("li"),BEe=a("strong"),ukr=o("convbert"),bkr=o(" \u2014 "),TZ=a("a"),vkr=o("TFConvBertForMaskedLM"),Fkr=o(" (ConvBERT model)"),Tkr=l(),TE=a("li"),IEe=a("strong"),Mkr=o("deberta"),Ekr=o(" \u2014 "),MZ=a("a"),Ckr=o("TFDebertaForMaskedLM"),wkr=o(" (DeBERTa model)"),Akr=l(),ME=a("li"),NEe=a("strong"),Lkr=o("deberta-v2"),ykr=o(" \u2014 "),EZ=a("a"),xkr=o("TFDebertaV2ForMaskedLM"),$kr=o(" (DeBERTa-v2 model)"),kkr=l(),EE=a("li"),qEe=a("strong"),Skr=o("distilbert"),Rkr=o(" \u2014 "),CZ=a("a"),Pkr=o("TFDistilBertForMaskedLM"),Bkr=o(" (DistilBERT model)"),Ikr=l(),CE=a("li"),jEe=a("strong"),Nkr=o("electra"),qkr=o(" \u2014 "),wZ=a("a"),jkr=o("TFElectraForMaskedLM"),Dkr=o(" (ELECTRA model)"),Gkr=l(),wE=a("li"),DEe=a("strong"),Okr=o("flaubert"),Vkr=o(" \u2014 "),AZ=a("a"),Xkr=o("TFFlaubertWithLMHeadModel"),zkr=o(" (FlauBERT model)"),Wkr=l(),AE=a("li"),GEe=a("strong"),Qkr=o("funnel"),Ukr=o(" \u2014 "),LZ=a("a"),Hkr=o("TFFunnelForMaskedLM"),Jkr=o(" (Funnel Transformer model)"),Ykr=l(),LE=a("li"),OEe=a("strong"),Kkr=o("layoutlm"),Zkr=o(" \u2014 "),yZ=a("a"),eSr=o("TFLayoutLMForMaskedLM"),oSr=o(" (LayoutLM model)"),rSr=l(),yE=a("li"),VEe=a("strong"),tSr=o("longformer"),aSr=o(" \u2014 "),xZ=a("a"),nSr=o("TFLongformerForMaskedLM"),sSr=o(" (Longformer model)"),lSr=l(),xE=a("li"),XEe=a("strong"),iSr=o("mobilebert"),dSr=o(" \u2014 "),$Z=a("a"),cSr=o("TFMobileBertForMaskedLM"),fSr=o(" (MobileBERT model)"),mSr=l(),$E=a("li"),zEe=a("strong"),gSr=o("mpnet"),hSr=o(" \u2014 "),kZ=a("a"),pSr=o("TFMPNetForMaskedLM"),_Sr=o(" (MPNet model)"),uSr=l(),kE=a("li"),WEe=a("strong"),bSr=o("rembert"),vSr=o(" \u2014 "),SZ=a("a"),FSr=o("TFRemBertForMaskedLM"),TSr=o(" (RemBERT model)"),MSr=l(),SE=a("li"),QEe=a("strong"),ESr=o("roberta"),CSr=o(" \u2014 "),RZ=a("a"),wSr=o("TFRobertaForMaskedLM"),ASr=o(" (RoBERTa model)"),LSr=l(),RE=a("li"),UEe=a("strong"),ySr=o("roformer"),xSr=o(" \u2014 "),PZ=a("a"),$Sr=o("TFRoFormerForMaskedLM"),kSr=o(" (RoFormer model)"),SSr=l(),PE=a("li"),HEe=a("strong"),RSr=o("tapas"),PSr=o(" \u2014 "),BZ=a("a"),BSr=o("TFTapasForMaskedLM"),ISr=o(" (TAPAS model)"),NSr=l(),BE=a("li"),JEe=a("strong"),qSr=o("xlm"),jSr=o(" \u2014 "),IZ=a("a"),DSr=o("TFXLMWithLMHeadModel"),GSr=o(" (XLM model)"),OSr=l(),IE=a("li"),YEe=a("strong"),VSr=o("xlm-roberta"),XSr=o(" \u2014 "),NZ=a("a"),zSr=o("TFXLMRobertaForMaskedLM"),WSr=o(" (XLM-RoBERTa model)"),QSr=l(),F(NE.$$.fragment),lHe=l(),Gc=a("h2"),qE=a("a"),KEe=a("span"),F(B$.$$.fragment),USr=l(),ZEe=a("span"),HSr=o("TFAutoModelForSeq2SeqLM"),iHe=l(),cr=a("div"),F(I$.$$.fragment),JSr=l(),Oc=a("p"),YSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qZ=a("a"),KSr=o("from_pretrained()"),ZSr=o(" class method or the "),jZ=a("a"),eRr=o("from_config()"),oRr=o(` class
method.`),rRr=l(),N$=a("p"),tRr=o("This class cannot be instantiated directly using "),e4e=a("code"),aRr=o("__init__()"),nRr=o(" (throws an error)."),sRr=l(),Xt=a("div"),F(q$.$$.fragment),lRr=l(),o4e=a("p"),iRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dRr=l(),Vc=a("p"),cRr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),fRr=o("not"),mRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=a("a"),gRr=o("from_pretrained()"),hRr=o(" to load the model weights."),pRr=l(),F(jE.$$.fragment),_Rr=l(),jr=a("div"),F(j$.$$.fragment),uRr=l(),t4e=a("p"),bRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vRr=l(),Mn=a("p"),FRr=o("The model class to instantiate is selected based on the "),a4e=a("code"),TRr=o("model_type"),MRr=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),ERr=o("pretrained_model_name_or_path"),CRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(":"),LRr=l(),ye=a("ul"),DE=a("li"),l4e=a("strong"),yRr=o("bart"),xRr=o(" \u2014 "),GZ=a("a"),$Rr=o("TFBartForConditionalGeneration"),kRr=o(" (BART model)"),SRr=l(),GE=a("li"),i4e=a("strong"),RRr=o("blenderbot"),PRr=o(" \u2014 "),OZ=a("a"),BRr=o("TFBlenderbotForConditionalGeneration"),IRr=o(" (Blenderbot model)"),NRr=l(),OE=a("li"),d4e=a("strong"),qRr=o("blenderbot-small"),jRr=o(" \u2014 "),VZ=a("a"),DRr=o("TFBlenderbotSmallForConditionalGeneration"),GRr=o(" (BlenderbotSmall model)"),ORr=l(),VE=a("li"),c4e=a("strong"),VRr=o("encoder-decoder"),XRr=o(" \u2014 "),XZ=a("a"),zRr=o("TFEncoderDecoderModel"),WRr=o(" (Encoder decoder model)"),QRr=l(),XE=a("li"),f4e=a("strong"),URr=o("led"),HRr=o(" \u2014 "),zZ=a("a"),JRr=o("TFLEDForConditionalGeneration"),YRr=o(" (LED model)"),KRr=l(),zE=a("li"),m4e=a("strong"),ZRr=o("marian"),ePr=o(" \u2014 "),WZ=a("a"),oPr=o("TFMarianMTModel"),rPr=o(" (Marian model)"),tPr=l(),WE=a("li"),g4e=a("strong"),aPr=o("mbart"),nPr=o(" \u2014 "),QZ=a("a"),sPr=o("TFMBartForConditionalGeneration"),lPr=o(" (mBART model)"),iPr=l(),QE=a("li"),h4e=a("strong"),dPr=o("mt5"),cPr=o(" \u2014 "),UZ=a("a"),fPr=o("TFMT5ForConditionalGeneration"),mPr=o(" (MT5 model)"),gPr=l(),UE=a("li"),p4e=a("strong"),hPr=o("pegasus"),pPr=o(" \u2014 "),HZ=a("a"),_Pr=o("TFPegasusForConditionalGeneration"),uPr=o(" (Pegasus model)"),bPr=l(),HE=a("li"),_4e=a("strong"),vPr=o("t5"),FPr=o(" \u2014 "),JZ=a("a"),TPr=o("TFT5ForConditionalGeneration"),MPr=o(" (T5 model)"),EPr=l(),F(JE.$$.fragment),dHe=l(),Xc=a("h2"),YE=a("a"),u4e=a("span"),F(D$.$$.fragment),CPr=l(),b4e=a("span"),wPr=o("TFAutoModelForSequenceClassification"),cHe=l(),fr=a("div"),F(G$.$$.fragment),APr=l(),zc=a("p"),LPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YZ=a("a"),yPr=o("from_pretrained()"),xPr=o(" class method or the "),KZ=a("a"),$Pr=o("from_config()"),kPr=o(` class
method.`),SPr=l(),O$=a("p"),RPr=o("This class cannot be instantiated directly using "),v4e=a("code"),PPr=o("__init__()"),BPr=o(" (throws an error)."),IPr=l(),zt=a("div"),F(V$.$$.fragment),NPr=l(),F4e=a("p"),qPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jPr=l(),Wc=a("p"),DPr=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),GPr=o("not"),OPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=a("a"),VPr=o("from_pretrained()"),XPr=o(" to load the model weights."),zPr=l(),F(KE.$$.fragment),WPr=l(),Dr=a("div"),F(X$.$$.fragment),QPr=l(),M4e=a("p"),UPr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HPr=l(),En=a("p"),JPr=o("The model class to instantiate is selected based on the "),E4e=a("code"),YPr=o("model_type"),KPr=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),ZPr=o("pretrained_model_name_or_path"),eBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),oBr=o("pretrained_model_name_or_path"),rBr=o(":"),tBr=l(),te=a("ul"),ZE=a("li"),A4e=a("strong"),aBr=o("albert"),nBr=o(" \u2014 "),eee=a("a"),sBr=o("TFAlbertForSequenceClassification"),lBr=o(" (ALBERT model)"),iBr=l(),e4=a("li"),L4e=a("strong"),dBr=o("bert"),cBr=o(" \u2014 "),oee=a("a"),fBr=o("TFBertForSequenceClassification"),mBr=o(" (BERT model)"),gBr=l(),o4=a("li"),y4e=a("strong"),hBr=o("camembert"),pBr=o(" \u2014 "),ree=a("a"),_Br=o("TFCamembertForSequenceClassification"),uBr=o(" (CamemBERT model)"),bBr=l(),r4=a("li"),x4e=a("strong"),vBr=o("convbert"),FBr=o(" \u2014 "),tee=a("a"),TBr=o("TFConvBertForSequenceClassification"),MBr=o(" (ConvBERT model)"),EBr=l(),t4=a("li"),$4e=a("strong"),CBr=o("ctrl"),wBr=o(" \u2014 "),aee=a("a"),ABr=o("TFCTRLForSequenceClassification"),LBr=o(" (CTRL model)"),yBr=l(),a4=a("li"),k4e=a("strong"),xBr=o("deberta"),$Br=o(" \u2014 "),nee=a("a"),kBr=o("TFDebertaForSequenceClassification"),SBr=o(" (DeBERTa model)"),RBr=l(),n4=a("li"),S4e=a("strong"),PBr=o("deberta-v2"),BBr=o(" \u2014 "),see=a("a"),IBr=o("TFDebertaV2ForSequenceClassification"),NBr=o(" (DeBERTa-v2 model)"),qBr=l(),s4=a("li"),R4e=a("strong"),jBr=o("distilbert"),DBr=o(" \u2014 "),lee=a("a"),GBr=o("TFDistilBertForSequenceClassification"),OBr=o(" (DistilBERT model)"),VBr=l(),l4=a("li"),P4e=a("strong"),XBr=o("electra"),zBr=o(" \u2014 "),iee=a("a"),WBr=o("TFElectraForSequenceClassification"),QBr=o(" (ELECTRA model)"),UBr=l(),i4=a("li"),B4e=a("strong"),HBr=o("flaubert"),JBr=o(" \u2014 "),dee=a("a"),YBr=o("TFFlaubertForSequenceClassification"),KBr=o(" (FlauBERT model)"),ZBr=l(),d4=a("li"),I4e=a("strong"),eIr=o("funnel"),oIr=o(" \u2014 "),cee=a("a"),rIr=o("TFFunnelForSequenceClassification"),tIr=o(" (Funnel Transformer model)"),aIr=l(),c4=a("li"),N4e=a("strong"),nIr=o("gpt2"),sIr=o(" \u2014 "),fee=a("a"),lIr=o("TFGPT2ForSequenceClassification"),iIr=o(" (OpenAI GPT-2 model)"),dIr=l(),f4=a("li"),q4e=a("strong"),cIr=o("gptj"),fIr=o(" \u2014 "),mee=a("a"),mIr=o("TFGPTJForSequenceClassification"),gIr=o(" (GPT-J model)"),hIr=l(),m4=a("li"),j4e=a("strong"),pIr=o("layoutlm"),_Ir=o(" \u2014 "),gee=a("a"),uIr=o("TFLayoutLMForSequenceClassification"),bIr=o(" (LayoutLM model)"),vIr=l(),g4=a("li"),D4e=a("strong"),FIr=o("longformer"),TIr=o(" \u2014 "),hee=a("a"),MIr=o("TFLongformerForSequenceClassification"),EIr=o(" (Longformer model)"),CIr=l(),h4=a("li"),G4e=a("strong"),wIr=o("mobilebert"),AIr=o(" \u2014 "),pee=a("a"),LIr=o("TFMobileBertForSequenceClassification"),yIr=o(" (MobileBERT model)"),xIr=l(),p4=a("li"),O4e=a("strong"),$Ir=o("mpnet"),kIr=o(" \u2014 "),_ee=a("a"),SIr=o("TFMPNetForSequenceClassification"),RIr=o(" (MPNet model)"),PIr=l(),_4=a("li"),V4e=a("strong"),BIr=o("openai-gpt"),IIr=o(" \u2014 "),uee=a("a"),NIr=o("TFOpenAIGPTForSequenceClassification"),qIr=o(" (OpenAI GPT model)"),jIr=l(),u4=a("li"),X4e=a("strong"),DIr=o("rembert"),GIr=o(" \u2014 "),bee=a("a"),OIr=o("TFRemBertForSequenceClassification"),VIr=o(" (RemBERT model)"),XIr=l(),b4=a("li"),z4e=a("strong"),zIr=o("roberta"),WIr=o(" \u2014 "),vee=a("a"),QIr=o("TFRobertaForSequenceClassification"),UIr=o(" (RoBERTa model)"),HIr=l(),v4=a("li"),W4e=a("strong"),JIr=o("roformer"),YIr=o(" \u2014 "),Fee=a("a"),KIr=o("TFRoFormerForSequenceClassification"),ZIr=o(" (RoFormer model)"),eNr=l(),F4=a("li"),Q4e=a("strong"),oNr=o("tapas"),rNr=o(" \u2014 "),Tee=a("a"),tNr=o("TFTapasForSequenceClassification"),aNr=o(" (TAPAS model)"),nNr=l(),T4=a("li"),U4e=a("strong"),sNr=o("transfo-xl"),lNr=o(" \u2014 "),Mee=a("a"),iNr=o("TFTransfoXLForSequenceClassification"),dNr=o(" (Transformer-XL model)"),cNr=l(),M4=a("li"),H4e=a("strong"),fNr=o("xlm"),mNr=o(" \u2014 "),Eee=a("a"),gNr=o("TFXLMForSequenceClassification"),hNr=o(" (XLM model)"),pNr=l(),E4=a("li"),J4e=a("strong"),_Nr=o("xlm-roberta"),uNr=o(" \u2014 "),Cee=a("a"),bNr=o("TFXLMRobertaForSequenceClassification"),vNr=o(" (XLM-RoBERTa model)"),FNr=l(),C4=a("li"),Y4e=a("strong"),TNr=o("xlnet"),MNr=o(" \u2014 "),wee=a("a"),ENr=o("TFXLNetForSequenceClassification"),CNr=o(" (XLNet model)"),wNr=l(),F(w4.$$.fragment),fHe=l(),Qc=a("h2"),A4=a("a"),K4e=a("span"),F(z$.$$.fragment),ANr=l(),Z4e=a("span"),LNr=o("TFAutoModelForMultipleChoice"),mHe=l(),mr=a("div"),F(W$.$$.fragment),yNr=l(),Uc=a("p"),xNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Aee=a("a"),$Nr=o("from_pretrained()"),kNr=o(" class method or the "),Lee=a("a"),SNr=o("from_config()"),RNr=o(` class
method.`),PNr=l(),Q$=a("p"),BNr=o("This class cannot be instantiated directly using "),eCe=a("code"),INr=o("__init__()"),NNr=o(" (throws an error)."),qNr=l(),Wt=a("div"),F(U$.$$.fragment),jNr=l(),oCe=a("p"),DNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GNr=l(),Hc=a("p"),ONr=o(`Note:
Loading a model from its configuration file does `),rCe=a("strong"),VNr=o("not"),XNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("a"),zNr=o("from_pretrained()"),WNr=o(" to load the model weights."),QNr=l(),F(L4.$$.fragment),UNr=l(),Gr=a("div"),F(H$.$$.fragment),HNr=l(),tCe=a("p"),JNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),YNr=l(),Cn=a("p"),KNr=o("The model class to instantiate is selected based on the "),aCe=a("code"),ZNr=o("model_type"),eqr=o(` property of the config object (either
passed as an argument or loaded from `),nCe=a("code"),oqr=o("pretrained_model_name_or_path"),rqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=a("code"),tqr=o("pretrained_model_name_or_path"),aqr=o(":"),nqr=l(),ve=a("ul"),y4=a("li"),lCe=a("strong"),sqr=o("albert"),lqr=o(" \u2014 "),xee=a("a"),iqr=o("TFAlbertForMultipleChoice"),dqr=o(" (ALBERT model)"),cqr=l(),x4=a("li"),iCe=a("strong"),fqr=o("bert"),mqr=o(" \u2014 "),$ee=a("a"),gqr=o("TFBertForMultipleChoice"),hqr=o(" (BERT model)"),pqr=l(),$4=a("li"),dCe=a("strong"),_qr=o("camembert"),uqr=o(" \u2014 "),kee=a("a"),bqr=o("TFCamembertForMultipleChoice"),vqr=o(" (CamemBERT model)"),Fqr=l(),k4=a("li"),cCe=a("strong"),Tqr=o("convbert"),Mqr=o(" \u2014 "),See=a("a"),Eqr=o("TFConvBertForMultipleChoice"),Cqr=o(" (ConvBERT model)"),wqr=l(),S4=a("li"),fCe=a("strong"),Aqr=o("distilbert"),Lqr=o(" \u2014 "),Ree=a("a"),yqr=o("TFDistilBertForMultipleChoice"),xqr=o(" (DistilBERT model)"),$qr=l(),R4=a("li"),mCe=a("strong"),kqr=o("electra"),Sqr=o(" \u2014 "),Pee=a("a"),Rqr=o("TFElectraForMultipleChoice"),Pqr=o(" (ELECTRA model)"),Bqr=l(),P4=a("li"),gCe=a("strong"),Iqr=o("flaubert"),Nqr=o(" \u2014 "),Bee=a("a"),qqr=o("TFFlaubertForMultipleChoice"),jqr=o(" (FlauBERT model)"),Dqr=l(),B4=a("li"),hCe=a("strong"),Gqr=o("funnel"),Oqr=o(" \u2014 "),Iee=a("a"),Vqr=o("TFFunnelForMultipleChoice"),Xqr=o(" (Funnel Transformer model)"),zqr=l(),I4=a("li"),pCe=a("strong"),Wqr=o("longformer"),Qqr=o(" \u2014 "),Nee=a("a"),Uqr=o("TFLongformerForMultipleChoice"),Hqr=o(" (Longformer model)"),Jqr=l(),N4=a("li"),_Ce=a("strong"),Yqr=o("mobilebert"),Kqr=o(" \u2014 "),qee=a("a"),Zqr=o("TFMobileBertForMultipleChoice"),ejr=o(" (MobileBERT model)"),ojr=l(),q4=a("li"),uCe=a("strong"),rjr=o("mpnet"),tjr=o(" \u2014 "),jee=a("a"),ajr=o("TFMPNetForMultipleChoice"),njr=o(" (MPNet model)"),sjr=l(),j4=a("li"),bCe=a("strong"),ljr=o("rembert"),ijr=o(" \u2014 "),Dee=a("a"),djr=o("TFRemBertForMultipleChoice"),cjr=o(" (RemBERT model)"),fjr=l(),D4=a("li"),vCe=a("strong"),mjr=o("roberta"),gjr=o(" \u2014 "),Gee=a("a"),hjr=o("TFRobertaForMultipleChoice"),pjr=o(" (RoBERTa model)"),_jr=l(),G4=a("li"),FCe=a("strong"),ujr=o("roformer"),bjr=o(" \u2014 "),Oee=a("a"),vjr=o("TFRoFormerForMultipleChoice"),Fjr=o(" (RoFormer model)"),Tjr=l(),O4=a("li"),TCe=a("strong"),Mjr=o("xlm"),Ejr=o(" \u2014 "),Vee=a("a"),Cjr=o("TFXLMForMultipleChoice"),wjr=o(" (XLM model)"),Ajr=l(),V4=a("li"),MCe=a("strong"),Ljr=o("xlm-roberta"),yjr=o(" \u2014 "),Xee=a("a"),xjr=o("TFXLMRobertaForMultipleChoice"),$jr=o(" (XLM-RoBERTa model)"),kjr=l(),X4=a("li"),ECe=a("strong"),Sjr=o("xlnet"),Rjr=o(" \u2014 "),zee=a("a"),Pjr=o("TFXLNetForMultipleChoice"),Bjr=o(" (XLNet model)"),Ijr=l(),F(z4.$$.fragment),gHe=l(),Jc=a("h2"),W4=a("a"),CCe=a("span"),F(J$.$$.fragment),Njr=l(),wCe=a("span"),qjr=o("TFAutoModelForNextSentencePrediction"),hHe=l(),gr=a("div"),F(Y$.$$.fragment),jjr=l(),Yc=a("p"),Djr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Wee=a("a"),Gjr=o("from_pretrained()"),Ojr=o(" class method or the "),Qee=a("a"),Vjr=o("from_config()"),Xjr=o(` class
method.`),zjr=l(),K$=a("p"),Wjr=o("This class cannot be instantiated directly using "),ACe=a("code"),Qjr=o("__init__()"),Ujr=o(" (throws an error)."),Hjr=l(),Qt=a("div"),F(Z$.$$.fragment),Jjr=l(),LCe=a("p"),Yjr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Kjr=l(),Kc=a("p"),Zjr=o(`Note:
Loading a model from its configuration file does `),yCe=a("strong"),eDr=o("not"),oDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=a("a"),rDr=o("from_pretrained()"),tDr=o(" to load the model weights."),aDr=l(),F(Q4.$$.fragment),nDr=l(),Or=a("div"),F(ek.$$.fragment),sDr=l(),xCe=a("p"),lDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iDr=l(),wn=a("p"),dDr=o("The model class to instantiate is selected based on the "),$Ce=a("code"),cDr=o("model_type"),fDr=o(` property of the config object (either
passed as an argument or loaded from `),kCe=a("code"),mDr=o("pretrained_model_name_or_path"),gDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=a("code"),hDr=o("pretrained_model_name_or_path"),pDr=o(":"),_Dr=l(),ok=a("ul"),U4=a("li"),RCe=a("strong"),uDr=o("bert"),bDr=o(" \u2014 "),Hee=a("a"),vDr=o("TFBertForNextSentencePrediction"),FDr=o(" (BERT model)"),TDr=l(),H4=a("li"),PCe=a("strong"),MDr=o("mobilebert"),EDr=o(" \u2014 "),Jee=a("a"),CDr=o("TFMobileBertForNextSentencePrediction"),wDr=o(" (MobileBERT model)"),ADr=l(),F(J4.$$.fragment),pHe=l(),Zc=a("h2"),Y4=a("a"),BCe=a("span"),F(rk.$$.fragment),LDr=l(),ICe=a("span"),yDr=o("TFAutoModelForTableQuestionAnswering"),_He=l(),hr=a("div"),F(tk.$$.fragment),xDr=l(),ef=a("p"),$Dr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Yee=a("a"),kDr=o("from_pretrained()"),SDr=o(" class method or the "),Kee=a("a"),RDr=o("from_config()"),PDr=o(` class
method.`),BDr=l(),ak=a("p"),IDr=o("This class cannot be instantiated directly using "),NCe=a("code"),NDr=o("__init__()"),qDr=o(" (throws an error)."),jDr=l(),Ut=a("div"),F(nk.$$.fragment),DDr=l(),qCe=a("p"),GDr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ODr=l(),of=a("p"),VDr=o(`Note:
Loading a model from its configuration file does `),jCe=a("strong"),XDr=o("not"),zDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=a("a"),WDr=o("from_pretrained()"),QDr=o(" to load the model weights."),UDr=l(),F(K4.$$.fragment),HDr=l(),Vr=a("div"),F(sk.$$.fragment),JDr=l(),DCe=a("p"),YDr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),KDr=l(),An=a("p"),ZDr=o("The model class to instantiate is selected based on the "),GCe=a("code"),eGr=o("model_type"),oGr=o(` property of the config object (either
passed as an argument or loaded from `),OCe=a("code"),rGr=o("pretrained_model_name_or_path"),tGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VCe=a("code"),aGr=o("pretrained_model_name_or_path"),nGr=o(":"),sGr=l(),XCe=a("ul"),Z4=a("li"),zCe=a("strong"),lGr=o("tapas"),iGr=o(" \u2014 "),eoe=a("a"),dGr=o("TFTapasForQuestionAnswering"),cGr=o(" (TAPAS model)"),fGr=l(),F(eC.$$.fragment),uHe=l(),rf=a("h2"),oC=a("a"),WCe=a("span"),F(lk.$$.fragment),mGr=l(),QCe=a("span"),gGr=o("TFAutoModelForTokenClassification"),bHe=l(),pr=a("div"),F(ik.$$.fragment),hGr=l(),tf=a("p"),pGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ooe=a("a"),_Gr=o("from_pretrained()"),uGr=o(" class method or the "),roe=a("a"),bGr=o("from_config()"),vGr=o(` class
method.`),FGr=l(),dk=a("p"),TGr=o("This class cannot be instantiated directly using "),UCe=a("code"),MGr=o("__init__()"),EGr=o(" (throws an error)."),CGr=l(),Ht=a("div"),F(ck.$$.fragment),wGr=l(),HCe=a("p"),AGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),LGr=l(),af=a("p"),yGr=o(`Note:
Loading a model from its configuration file does `),JCe=a("strong"),xGr=o("not"),$Gr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=a("a"),kGr=o("from_pretrained()"),SGr=o(" to load the model weights."),RGr=l(),F(rC.$$.fragment),PGr=l(),Xr=a("div"),F(fk.$$.fragment),BGr=l(),YCe=a("p"),IGr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NGr=l(),Ln=a("p"),qGr=o("The model class to instantiate is selected based on the "),KCe=a("code"),jGr=o("model_type"),DGr=o(` property of the config object (either
passed as an argument or loaded from `),ZCe=a("code"),GGr=o("pretrained_model_name_or_path"),OGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=a("code"),VGr=o("pretrained_model_name_or_path"),XGr=o(":"),zGr=l(),ce=a("ul"),tC=a("li"),o3e=a("strong"),WGr=o("albert"),QGr=o(" \u2014 "),aoe=a("a"),UGr=o("TFAlbertForTokenClassification"),HGr=o(" (ALBERT model)"),JGr=l(),aC=a("li"),r3e=a("strong"),YGr=o("bert"),KGr=o(" \u2014 "),noe=a("a"),ZGr=o("TFBertForTokenClassification"),eOr=o(" (BERT model)"),oOr=l(),nC=a("li"),t3e=a("strong"),rOr=o("camembert"),tOr=o(" \u2014 "),soe=a("a"),aOr=o("TFCamembertForTokenClassification"),nOr=o(" (CamemBERT model)"),sOr=l(),sC=a("li"),a3e=a("strong"),lOr=o("convbert"),iOr=o(" \u2014 "),loe=a("a"),dOr=o("TFConvBertForTokenClassification"),cOr=o(" (ConvBERT model)"),fOr=l(),lC=a("li"),n3e=a("strong"),mOr=o("deberta"),gOr=o(" \u2014 "),ioe=a("a"),hOr=o("TFDebertaForTokenClassification"),pOr=o(" (DeBERTa model)"),_Or=l(),iC=a("li"),s3e=a("strong"),uOr=o("deberta-v2"),bOr=o(" \u2014 "),doe=a("a"),vOr=o("TFDebertaV2ForTokenClassification"),FOr=o(" (DeBERTa-v2 model)"),TOr=l(),dC=a("li"),l3e=a("strong"),MOr=o("distilbert"),EOr=o(" \u2014 "),coe=a("a"),COr=o("TFDistilBertForTokenClassification"),wOr=o(" (DistilBERT model)"),AOr=l(),cC=a("li"),i3e=a("strong"),LOr=o("electra"),yOr=o(" \u2014 "),foe=a("a"),xOr=o("TFElectraForTokenClassification"),$Or=o(" (ELECTRA model)"),kOr=l(),fC=a("li"),d3e=a("strong"),SOr=o("flaubert"),ROr=o(" \u2014 "),moe=a("a"),POr=o("TFFlaubertForTokenClassification"),BOr=o(" (FlauBERT model)"),IOr=l(),mC=a("li"),c3e=a("strong"),NOr=o("funnel"),qOr=o(" \u2014 "),goe=a("a"),jOr=o("TFFunnelForTokenClassification"),DOr=o(" (Funnel Transformer model)"),GOr=l(),gC=a("li"),f3e=a("strong"),OOr=o("layoutlm"),VOr=o(" \u2014 "),hoe=a("a"),XOr=o("TFLayoutLMForTokenClassification"),zOr=o(" (LayoutLM model)"),WOr=l(),hC=a("li"),m3e=a("strong"),QOr=o("longformer"),UOr=o(" \u2014 "),poe=a("a"),HOr=o("TFLongformerForTokenClassification"),JOr=o(" (Longformer model)"),YOr=l(),pC=a("li"),g3e=a("strong"),KOr=o("mobilebert"),ZOr=o(" \u2014 "),_oe=a("a"),eVr=o("TFMobileBertForTokenClassification"),oVr=o(" (MobileBERT model)"),rVr=l(),_C=a("li"),h3e=a("strong"),tVr=o("mpnet"),aVr=o(" \u2014 "),uoe=a("a"),nVr=o("TFMPNetForTokenClassification"),sVr=o(" (MPNet model)"),lVr=l(),uC=a("li"),p3e=a("strong"),iVr=o("rembert"),dVr=o(" \u2014 "),boe=a("a"),cVr=o("TFRemBertForTokenClassification"),fVr=o(" (RemBERT model)"),mVr=l(),bC=a("li"),_3e=a("strong"),gVr=o("roberta"),hVr=o(" \u2014 "),voe=a("a"),pVr=o("TFRobertaForTokenClassification"),_Vr=o(" (RoBERTa model)"),uVr=l(),vC=a("li"),u3e=a("strong"),bVr=o("roformer"),vVr=o(" \u2014 "),Foe=a("a"),FVr=o("TFRoFormerForTokenClassification"),TVr=o(" (RoFormer model)"),MVr=l(),FC=a("li"),b3e=a("strong"),EVr=o("xlm"),CVr=o(" \u2014 "),Toe=a("a"),wVr=o("TFXLMForTokenClassification"),AVr=o(" (XLM model)"),LVr=l(),TC=a("li"),v3e=a("strong"),yVr=o("xlm-roberta"),xVr=o(" \u2014 "),Moe=a("a"),$Vr=o("TFXLMRobertaForTokenClassification"),kVr=o(" (XLM-RoBERTa model)"),SVr=l(),MC=a("li"),F3e=a("strong"),RVr=o("xlnet"),PVr=o(" \u2014 "),Eoe=a("a"),BVr=o("TFXLNetForTokenClassification"),IVr=o(" (XLNet model)"),NVr=l(),F(EC.$$.fragment),vHe=l(),nf=a("h2"),CC=a("a"),T3e=a("span"),F(mk.$$.fragment),qVr=l(),M3e=a("span"),jVr=o("TFAutoModelForQuestionAnswering"),FHe=l(),_r=a("div"),F(gk.$$.fragment),DVr=l(),sf=a("p"),GVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Coe=a("a"),OVr=o("from_pretrained()"),VVr=o(" class method or the "),woe=a("a"),XVr=o("from_config()"),zVr=o(` class
method.`),WVr=l(),hk=a("p"),QVr=o("This class cannot be instantiated directly using "),E3e=a("code"),UVr=o("__init__()"),HVr=o(" (throws an error)."),JVr=l(),Jt=a("div"),F(pk.$$.fragment),YVr=l(),C3e=a("p"),KVr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ZVr=l(),lf=a("p"),eXr=o(`Note:
Loading a model from its configuration file does `),w3e=a("strong"),oXr=o("not"),rXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=a("a"),tXr=o("from_pretrained()"),aXr=o(" to load the model weights."),nXr=l(),F(wC.$$.fragment),sXr=l(),zr=a("div"),F(_k.$$.fragment),lXr=l(),A3e=a("p"),iXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dXr=l(),yn=a("p"),cXr=o("The model class to instantiate is selected based on the "),L3e=a("code"),fXr=o("model_type"),mXr=o(` property of the config object (either
passed as an argument or loaded from `),y3e=a("code"),gXr=o("pretrained_model_name_or_path"),hXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=a("code"),pXr=o("pretrained_model_name_or_path"),_Xr=o(":"),uXr=l(),fe=a("ul"),AC=a("li"),$3e=a("strong"),bXr=o("albert"),vXr=o(" \u2014 "),Loe=a("a"),FXr=o("TFAlbertForQuestionAnswering"),TXr=o(" (ALBERT model)"),MXr=l(),LC=a("li"),k3e=a("strong"),EXr=o("bert"),CXr=o(" \u2014 "),yoe=a("a"),wXr=o("TFBertForQuestionAnswering"),AXr=o(" (BERT model)"),LXr=l(),yC=a("li"),S3e=a("strong"),yXr=o("camembert"),xXr=o(" \u2014 "),xoe=a("a"),$Xr=o("TFCamembertForQuestionAnswering"),kXr=o(" (CamemBERT model)"),SXr=l(),xC=a("li"),R3e=a("strong"),RXr=o("convbert"),PXr=o(" \u2014 "),$oe=a("a"),BXr=o("TFConvBertForQuestionAnswering"),IXr=o(" (ConvBERT model)"),NXr=l(),$C=a("li"),P3e=a("strong"),qXr=o("deberta"),jXr=o(" \u2014 "),koe=a("a"),DXr=o("TFDebertaForQuestionAnswering"),GXr=o(" (DeBERTa model)"),OXr=l(),kC=a("li"),B3e=a("strong"),VXr=o("deberta-v2"),XXr=o(" \u2014 "),Soe=a("a"),zXr=o("TFDebertaV2ForQuestionAnswering"),WXr=o(" (DeBERTa-v2 model)"),QXr=l(),SC=a("li"),I3e=a("strong"),UXr=o("distilbert"),HXr=o(" \u2014 "),Roe=a("a"),JXr=o("TFDistilBertForQuestionAnswering"),YXr=o(" (DistilBERT model)"),KXr=l(),RC=a("li"),N3e=a("strong"),ZXr=o("electra"),ezr=o(" \u2014 "),Poe=a("a"),ozr=o("TFElectraForQuestionAnswering"),rzr=o(" (ELECTRA model)"),tzr=l(),PC=a("li"),q3e=a("strong"),azr=o("flaubert"),nzr=o(" \u2014 "),Boe=a("a"),szr=o("TFFlaubertForQuestionAnsweringSimple"),lzr=o(" (FlauBERT model)"),izr=l(),BC=a("li"),j3e=a("strong"),dzr=o("funnel"),czr=o(" \u2014 "),Ioe=a("a"),fzr=o("TFFunnelForQuestionAnswering"),mzr=o(" (Funnel Transformer model)"),gzr=l(),IC=a("li"),D3e=a("strong"),hzr=o("gptj"),pzr=o(" \u2014 "),Noe=a("a"),_zr=o("TFGPTJForQuestionAnswering"),uzr=o(" (GPT-J model)"),bzr=l(),NC=a("li"),G3e=a("strong"),vzr=o("longformer"),Fzr=o(" \u2014 "),qoe=a("a"),Tzr=o("TFLongformerForQuestionAnswering"),Mzr=o(" (Longformer model)"),Ezr=l(),qC=a("li"),O3e=a("strong"),Czr=o("mobilebert"),wzr=o(" \u2014 "),joe=a("a"),Azr=o("TFMobileBertForQuestionAnswering"),Lzr=o(" (MobileBERT model)"),yzr=l(),jC=a("li"),V3e=a("strong"),xzr=o("mpnet"),$zr=o(" \u2014 "),Doe=a("a"),kzr=o("TFMPNetForQuestionAnswering"),Szr=o(" (MPNet model)"),Rzr=l(),DC=a("li"),X3e=a("strong"),Pzr=o("rembert"),Bzr=o(" \u2014 "),Goe=a("a"),Izr=o("TFRemBertForQuestionAnswering"),Nzr=o(" (RemBERT model)"),qzr=l(),GC=a("li"),z3e=a("strong"),jzr=o("roberta"),Dzr=o(" \u2014 "),Ooe=a("a"),Gzr=o("TFRobertaForQuestionAnswering"),Ozr=o(" (RoBERTa model)"),Vzr=l(),OC=a("li"),W3e=a("strong"),Xzr=o("roformer"),zzr=o(" \u2014 "),Voe=a("a"),Wzr=o("TFRoFormerForQuestionAnswering"),Qzr=o(" (RoFormer model)"),Uzr=l(),VC=a("li"),Q3e=a("strong"),Hzr=o("xlm"),Jzr=o(" \u2014 "),Xoe=a("a"),Yzr=o("TFXLMForQuestionAnsweringSimple"),Kzr=o(" (XLM model)"),Zzr=l(),XC=a("li"),U3e=a("strong"),eWr=o("xlm-roberta"),oWr=o(" \u2014 "),zoe=a("a"),rWr=o("TFXLMRobertaForQuestionAnswering"),tWr=o(" (XLM-RoBERTa model)"),aWr=l(),zC=a("li"),H3e=a("strong"),nWr=o("xlnet"),sWr=o(" \u2014 "),Woe=a("a"),lWr=o("TFXLNetForQuestionAnsweringSimple"),iWr=o(" (XLNet model)"),dWr=l(),F(WC.$$.fragment),THe=l(),df=a("h2"),QC=a("a"),J3e=a("span"),F(uk.$$.fragment),cWr=l(),Y3e=a("span"),fWr=o("TFAutoModelForVision2Seq"),MHe=l(),ur=a("div"),F(bk.$$.fragment),mWr=l(),cf=a("p"),gWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Qoe=a("a"),hWr=o("from_pretrained()"),pWr=o(" class method or the "),Uoe=a("a"),_Wr=o("from_config()"),uWr=o(` class
method.`),bWr=l(),vk=a("p"),vWr=o("This class cannot be instantiated directly using "),K3e=a("code"),FWr=o("__init__()"),TWr=o(" (throws an error)."),MWr=l(),Yt=a("div"),F(Fk.$$.fragment),EWr=l(),Z3e=a("p"),CWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wWr=l(),ff=a("p"),AWr=o(`Note:
Loading a model from its configuration file does `),e5e=a("strong"),LWr=o("not"),yWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=a("a"),xWr=o("from_pretrained()"),$Wr=o(" to load the model weights."),kWr=l(),F(UC.$$.fragment),SWr=l(),Wr=a("div"),F(Tk.$$.fragment),RWr=l(),o5e=a("p"),PWr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BWr=l(),xn=a("p"),IWr=o("The model class to instantiate is selected based on the "),r5e=a("code"),NWr=o("model_type"),qWr=o(` property of the config object (either
passed as an argument or loaded from `),t5e=a("code"),jWr=o("pretrained_model_name_or_path"),DWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=a("code"),GWr=o("pretrained_model_name_or_path"),OWr=o(":"),VWr=l(),n5e=a("ul"),HC=a("li"),s5e=a("strong"),XWr=o("vision-encoder-decoder"),zWr=o(" \u2014 "),Joe=a("a"),WWr=o("TFVisionEncoderDecoderModel"),QWr=o(" (Vision Encoder decoder model)"),UWr=l(),F(JC.$$.fragment),EHe=l(),mf=a("h2"),YC=a("a"),l5e=a("span"),F(Mk.$$.fragment),HWr=l(),i5e=a("span"),JWr=o("TFAutoModelForSpeechSeq2Seq"),CHe=l(),br=a("div"),F(Ek.$$.fragment),YWr=l(),gf=a("p"),KWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Yoe=a("a"),ZWr=o("from_pretrained()"),eQr=o(" class method or the "),Koe=a("a"),oQr=o("from_config()"),rQr=o(` class
method.`),tQr=l(),Ck=a("p"),aQr=o("This class cannot be instantiated directly using "),d5e=a("code"),nQr=o("__init__()"),sQr=o(" (throws an error)."),lQr=l(),Kt=a("div"),F(wk.$$.fragment),iQr=l(),c5e=a("p"),dQr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cQr=l(),hf=a("p"),fQr=o(`Note:
Loading a model from its configuration file does `),f5e=a("strong"),mQr=o("not"),gQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("a"),hQr=o("from_pretrained()"),pQr=o(" to load the model weights."),_Qr=l(),F(KC.$$.fragment),uQr=l(),Qr=a("div"),F(Ak.$$.fragment),bQr=l(),m5e=a("p"),vQr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),FQr=l(),$n=a("p"),TQr=o("The model class to instantiate is selected based on the "),g5e=a("code"),MQr=o("model_type"),EQr=o(` property of the config object (either
passed as an argument or loaded from `),h5e=a("code"),CQr=o("pretrained_model_name_or_path"),wQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=a("code"),AQr=o("pretrained_model_name_or_path"),LQr=o(":"),yQr=l(),_5e=a("ul"),ZC=a("li"),u5e=a("strong"),xQr=o("speech_to_text"),$Qr=o(" \u2014 "),ere=a("a"),kQr=o("TFSpeech2TextForConditionalGeneration"),SQr=o(" (Speech2Text model)"),RQr=l(),F(e3.$$.fragment),wHe=l(),pf=a("h2"),o3=a("a"),b5e=a("span"),F(Lk.$$.fragment),PQr=l(),v5e=a("span"),BQr=o("FlaxAutoModel"),AHe=l(),vr=a("div"),F(yk.$$.fragment),IQr=l(),_f=a("p"),NQr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ore=a("a"),qQr=o("from_pretrained()"),jQr=o(" class method or the "),rre=a("a"),DQr=o("from_config()"),GQr=o(` class
method.`),OQr=l(),xk=a("p"),VQr=o("This class cannot be instantiated directly using "),F5e=a("code"),XQr=o("__init__()"),zQr=o(" (throws an error)."),WQr=l(),Zt=a("div"),F($k.$$.fragment),QQr=l(),T5e=a("p"),UQr=o("Instantiates one of the base model classes of the library from a configuration."),HQr=l(),uf=a("p"),JQr=o(`Note:
Loading a model from its configuration file does `),M5e=a("strong"),YQr=o("not"),KQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=a("a"),ZQr=o("from_pretrained()"),eUr=o(" to load the model weights."),oUr=l(),F(r3.$$.fragment),rUr=l(),Ur=a("div"),F(kk.$$.fragment),tUr=l(),E5e=a("p"),aUr=o("Instantiate one of the base model classes of the library from a pretrained model."),nUr=l(),kn=a("p"),sUr=o("The model class to instantiate is selected based on the "),C5e=a("code"),lUr=o("model_type"),iUr=o(` property of the config object (either
passed as an argument or loaded from `),w5e=a("code"),dUr=o("pretrained_model_name_or_path"),cUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=a("code"),fUr=o("pretrained_model_name_or_path"),mUr=o(":"),gUr=l(),re=a("ul"),t3=a("li"),L5e=a("strong"),hUr=o("albert"),pUr=o(" \u2014 "),are=a("a"),_Ur=o("FlaxAlbertModel"),uUr=o(" (ALBERT model)"),bUr=l(),a3=a("li"),y5e=a("strong"),vUr=o("bart"),FUr=o(" \u2014 "),nre=a("a"),TUr=o("FlaxBartModel"),MUr=o(" (BART model)"),EUr=l(),n3=a("li"),x5e=a("strong"),CUr=o("beit"),wUr=o(" \u2014 "),sre=a("a"),AUr=o("FlaxBeitModel"),LUr=o(" (BEiT model)"),yUr=l(),s3=a("li"),$5e=a("strong"),xUr=o("bert"),$Ur=o(" \u2014 "),lre=a("a"),kUr=o("FlaxBertModel"),SUr=o(" (BERT model)"),RUr=l(),l3=a("li"),k5e=a("strong"),PUr=o("big_bird"),BUr=o(" \u2014 "),ire=a("a"),IUr=o("FlaxBigBirdModel"),NUr=o(" (BigBird model)"),qUr=l(),i3=a("li"),S5e=a("strong"),jUr=o("blenderbot"),DUr=o(" \u2014 "),dre=a("a"),GUr=o("FlaxBlenderbotModel"),OUr=o(" (Blenderbot model)"),VUr=l(),d3=a("li"),R5e=a("strong"),XUr=o("blenderbot-small"),zUr=o(" \u2014 "),cre=a("a"),WUr=o("FlaxBlenderbotSmallModel"),QUr=o(" (BlenderbotSmall model)"),UUr=l(),c3=a("li"),P5e=a("strong"),HUr=o("clip"),JUr=o(" \u2014 "),fre=a("a"),YUr=o("FlaxCLIPModel"),KUr=o(" (CLIP model)"),ZUr=l(),f3=a("li"),B5e=a("strong"),eHr=o("distilbert"),oHr=o(" \u2014 "),mre=a("a"),rHr=o("FlaxDistilBertModel"),tHr=o(" (DistilBERT model)"),aHr=l(),m3=a("li"),I5e=a("strong"),nHr=o("electra"),sHr=o(" \u2014 "),gre=a("a"),lHr=o("FlaxElectraModel"),iHr=o(" (ELECTRA model)"),dHr=l(),g3=a("li"),N5e=a("strong"),cHr=o("gpt2"),fHr=o(" \u2014 "),hre=a("a"),mHr=o("FlaxGPT2Model"),gHr=o(" (OpenAI GPT-2 model)"),hHr=l(),h3=a("li"),q5e=a("strong"),pHr=o("gpt_neo"),_Hr=o(" \u2014 "),pre=a("a"),uHr=o("FlaxGPTNeoModel"),bHr=o(" (GPT Neo model)"),vHr=l(),p3=a("li"),j5e=a("strong"),FHr=o("gptj"),THr=o(" \u2014 "),_re=a("a"),MHr=o("FlaxGPTJModel"),EHr=o(" (GPT-J model)"),CHr=l(),_3=a("li"),D5e=a("strong"),wHr=o("longt5"),AHr=o(" \u2014 "),ure=a("a"),LHr=o("FlaxLongT5Model"),yHr=o(" (LongT5 model)"),xHr=l(),u3=a("li"),G5e=a("strong"),$Hr=o("marian"),kHr=o(" \u2014 "),bre=a("a"),SHr=o("FlaxMarianModel"),RHr=o(" (Marian model)"),PHr=l(),b3=a("li"),O5e=a("strong"),BHr=o("mbart"),IHr=o(" \u2014 "),vre=a("a"),NHr=o("FlaxMBartModel"),qHr=o(" (mBART model)"),jHr=l(),v3=a("li"),V5e=a("strong"),DHr=o("mt5"),GHr=o(" \u2014 "),Fre=a("a"),OHr=o("FlaxMT5Model"),VHr=o(" (MT5 model)"),XHr=l(),F3=a("li"),X5e=a("strong"),zHr=o("opt"),WHr=o(" \u2014 "),Tre=a("a"),QHr=o("FlaxOPTModel"),UHr=o(" (OPT model)"),HHr=l(),T3=a("li"),z5e=a("strong"),JHr=o("pegasus"),YHr=o(" \u2014 "),Mre=a("a"),KHr=o("FlaxPegasusModel"),ZHr=o(" (Pegasus model)"),eJr=l(),M3=a("li"),W5e=a("strong"),oJr=o("roberta"),rJr=o(" \u2014 "),Ere=a("a"),tJr=o("FlaxRobertaModel"),aJr=o(" (RoBERTa model)"),nJr=l(),E3=a("li"),Q5e=a("strong"),sJr=o("roformer"),lJr=o(" \u2014 "),Cre=a("a"),iJr=o("FlaxRoFormerModel"),dJr=o(" (RoFormer model)"),cJr=l(),C3=a("li"),U5e=a("strong"),fJr=o("t5"),mJr=o(" \u2014 "),wre=a("a"),gJr=o("FlaxT5Model"),hJr=o(" (T5 model)"),pJr=l(),w3=a("li"),H5e=a("strong"),_Jr=o("vision-text-dual-encoder"),uJr=o(" \u2014 "),Are=a("a"),bJr=o("FlaxVisionTextDualEncoderModel"),vJr=o(" (VisionTextDualEncoder model)"),FJr=l(),A3=a("li"),J5e=a("strong"),TJr=o("vit"),MJr=o(" \u2014 "),Lre=a("a"),EJr=o("FlaxViTModel"),CJr=o(" (ViT model)"),wJr=l(),L3=a("li"),Y5e=a("strong"),AJr=o("wav2vec2"),LJr=o(" \u2014 "),yre=a("a"),yJr=o("FlaxWav2Vec2Model"),xJr=o(" (Wav2Vec2 model)"),$Jr=l(),y3=a("li"),K5e=a("strong"),kJr=o("xglm"),SJr=o(" \u2014 "),xre=a("a"),RJr=o("FlaxXGLMModel"),PJr=o(" (XGLM model)"),BJr=l(),x3=a("li"),Z5e=a("strong"),IJr=o("xlm-roberta"),NJr=o(" \u2014 "),$re=a("a"),qJr=o("FlaxXLMRobertaModel"),jJr=o(" (XLM-RoBERTa model)"),DJr=l(),F($3.$$.fragment),LHe=l(),bf=a("h2"),k3=a("a"),e0e=a("span"),F(Sk.$$.fragment),GJr=l(),o0e=a("span"),OJr=o("FlaxAutoModelForCausalLM"),yHe=l(),Fr=a("div"),F(Rk.$$.fragment),VJr=l(),vf=a("p"),XJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kre=a("a"),zJr=o("from_pretrained()"),WJr=o(" class method or the "),Sre=a("a"),QJr=o("from_config()"),UJr=o(` class
method.`),HJr=l(),Pk=a("p"),JJr=o("This class cannot be instantiated directly using "),r0e=a("code"),YJr=o("__init__()"),KJr=o(" (throws an error)."),ZJr=l(),ea=a("div"),F(Bk.$$.fragment),eYr=l(),t0e=a("p"),oYr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rYr=l(),Ff=a("p"),tYr=o(`Note:
Loading a model from its configuration file does `),a0e=a("strong"),aYr=o("not"),nYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=a("a"),sYr=o("from_pretrained()"),lYr=o(" to load the model weights."),iYr=l(),F(S3.$$.fragment),dYr=l(),Hr=a("div"),F(Ik.$$.fragment),cYr=l(),n0e=a("p"),fYr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mYr=l(),Sn=a("p"),gYr=o("The model class to instantiate is selected based on the "),s0e=a("code"),hYr=o("model_type"),pYr=o(` property of the config object (either
passed as an argument or loaded from `),l0e=a("code"),_Yr=o("pretrained_model_name_or_path"),uYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=a("code"),bYr=o("pretrained_model_name_or_path"),vYr=o(":"),FYr=l(),xe=a("ul"),R3=a("li"),d0e=a("strong"),TYr=o("bart"),MYr=o(" \u2014 "),Pre=a("a"),EYr=o("FlaxBartForCausalLM"),CYr=o(" (BART model)"),wYr=l(),P3=a("li"),c0e=a("strong"),AYr=o("bert"),LYr=o(" \u2014 "),Bre=a("a"),yYr=o("FlaxBertForCausalLM"),xYr=o(" (BERT model)"),$Yr=l(),B3=a("li"),f0e=a("strong"),kYr=o("big_bird"),SYr=o(" \u2014 "),Ire=a("a"),RYr=o("FlaxBigBirdForCausalLM"),PYr=o(" (BigBird model)"),BYr=l(),I3=a("li"),m0e=a("strong"),IYr=o("electra"),NYr=o(" \u2014 "),Nre=a("a"),qYr=o("FlaxElectraForCausalLM"),jYr=o(" (ELECTRA model)"),DYr=l(),N3=a("li"),g0e=a("strong"),GYr=o("gpt2"),OYr=o(" \u2014 "),qre=a("a"),VYr=o("FlaxGPT2LMHeadModel"),XYr=o(" (OpenAI GPT-2 model)"),zYr=l(),q3=a("li"),h0e=a("strong"),WYr=o("gpt_neo"),QYr=o(" \u2014 "),jre=a("a"),UYr=o("FlaxGPTNeoForCausalLM"),HYr=o(" (GPT Neo model)"),JYr=l(),j3=a("li"),p0e=a("strong"),YYr=o("gptj"),KYr=o(" \u2014 "),Dre=a("a"),ZYr=o("FlaxGPTJForCausalLM"),eKr=o(" (GPT-J model)"),oKr=l(),D3=a("li"),_0e=a("strong"),rKr=o("opt"),tKr=o(" \u2014 "),Gre=a("a"),aKr=o("FlaxOPTForCausalLM"),nKr=o(" (OPT model)"),sKr=l(),G3=a("li"),u0e=a("strong"),lKr=o("roberta"),iKr=o(" \u2014 "),Ore=a("a"),dKr=o("FlaxRobertaForCausalLM"),cKr=o(" (RoBERTa model)"),fKr=l(),O3=a("li"),b0e=a("strong"),mKr=o("xglm"),gKr=o(" \u2014 "),Vre=a("a"),hKr=o("FlaxXGLMForCausalLM"),pKr=o(" (XGLM model)"),_Kr=l(),F(V3.$$.fragment),xHe=l(),Tf=a("h2"),X3=a("a"),v0e=a("span"),F(Nk.$$.fragment),uKr=l(),F0e=a("span"),bKr=o("FlaxAutoModelForPreTraining"),$He=l(),Tr=a("div"),F(qk.$$.fragment),vKr=l(),Mf=a("p"),FKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xre=a("a"),TKr=o("from_pretrained()"),MKr=o(" class method or the "),zre=a("a"),EKr=o("from_config()"),CKr=o(` class
method.`),wKr=l(),jk=a("p"),AKr=o("This class cannot be instantiated directly using "),T0e=a("code"),LKr=o("__init__()"),yKr=o(" (throws an error)."),xKr=l(),oa=a("div"),F(Dk.$$.fragment),$Kr=l(),M0e=a("p"),kKr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SKr=l(),Ef=a("p"),RKr=o(`Note:
Loading a model from its configuration file does `),E0e=a("strong"),PKr=o("not"),BKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=a("a"),IKr=o("from_pretrained()"),NKr=o(" to load the model weights."),qKr=l(),F(z3.$$.fragment),jKr=l(),Jr=a("div"),F(Gk.$$.fragment),DKr=l(),C0e=a("p"),GKr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OKr=l(),Rn=a("p"),VKr=o("The model class to instantiate is selected based on the "),w0e=a("code"),XKr=o("model_type"),zKr=o(` property of the config object (either
passed as an argument or loaded from `),A0e=a("code"),WKr=o("pretrained_model_name_or_path"),QKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=a("code"),UKr=o("pretrained_model_name_or_path"),HKr=o(":"),JKr=l(),Ee=a("ul"),W3=a("li"),y0e=a("strong"),YKr=o("albert"),KKr=o(" \u2014 "),Qre=a("a"),ZKr=o("FlaxAlbertForPreTraining"),eZr=o(" (ALBERT model)"),oZr=l(),Q3=a("li"),x0e=a("strong"),rZr=o("bart"),tZr=o(" \u2014 "),Ure=a("a"),aZr=o("FlaxBartForConditionalGeneration"),nZr=o(" (BART model)"),sZr=l(),U3=a("li"),$0e=a("strong"),lZr=o("bert"),iZr=o(" \u2014 "),Hre=a("a"),dZr=o("FlaxBertForPreTraining"),cZr=o(" (BERT model)"),fZr=l(),H3=a("li"),k0e=a("strong"),mZr=o("big_bird"),gZr=o(" \u2014 "),Jre=a("a"),hZr=o("FlaxBigBirdForPreTraining"),pZr=o(" (BigBird model)"),_Zr=l(),J3=a("li"),S0e=a("strong"),uZr=o("electra"),bZr=o(" \u2014 "),Yre=a("a"),vZr=o("FlaxElectraForPreTraining"),FZr=o(" (ELECTRA model)"),TZr=l(),Y3=a("li"),R0e=a("strong"),MZr=o("longt5"),EZr=o(" \u2014 "),Kre=a("a"),CZr=o("FlaxLongT5ForConditionalGeneration"),wZr=o(" (LongT5 model)"),AZr=l(),K3=a("li"),P0e=a("strong"),LZr=o("mbart"),yZr=o(" \u2014 "),Zre=a("a"),xZr=o("FlaxMBartForConditionalGeneration"),$Zr=o(" (mBART model)"),kZr=l(),Z3=a("li"),B0e=a("strong"),SZr=o("mt5"),RZr=o(" \u2014 "),ete=a("a"),PZr=o("FlaxMT5ForConditionalGeneration"),BZr=o(" (MT5 model)"),IZr=l(),e5=a("li"),I0e=a("strong"),NZr=o("roberta"),qZr=o(" \u2014 "),ote=a("a"),jZr=o("FlaxRobertaForMaskedLM"),DZr=o(" (RoBERTa model)"),GZr=l(),o5=a("li"),N0e=a("strong"),OZr=o("roformer"),VZr=o(" \u2014 "),rte=a("a"),XZr=o("FlaxRoFormerForMaskedLM"),zZr=o(" (RoFormer model)"),WZr=l(),r5=a("li"),q0e=a("strong"),QZr=o("t5"),UZr=o(" \u2014 "),tte=a("a"),HZr=o("FlaxT5ForConditionalGeneration"),JZr=o(" (T5 model)"),YZr=l(),t5=a("li"),j0e=a("strong"),KZr=o("wav2vec2"),ZZr=o(" \u2014 "),ate=a("a"),eet=o("FlaxWav2Vec2ForPreTraining"),oet=o(" (Wav2Vec2 model)"),ret=l(),a5=a("li"),D0e=a("strong"),tet=o("xlm-roberta"),aet=o(" \u2014 "),nte=a("a"),net=o("FlaxXLMRobertaForMaskedLM"),set=o(" (XLM-RoBERTa model)"),iet=l(),F(n5.$$.fragment),kHe=l(),Cf=a("h2"),s5=a("a"),G0e=a("span"),F(Ok.$$.fragment),det=l(),O0e=a("span"),cet=o("FlaxAutoModelForMaskedLM"),SHe=l(),Mr=a("div"),F(Vk.$$.fragment),fet=l(),wf=a("p"),met=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ste=a("a"),get=o("from_pretrained()"),het=o(" class method or the "),lte=a("a"),pet=o("from_config()"),_et=o(` class
method.`),uet=l(),Xk=a("p"),bet=o("This class cannot be instantiated directly using "),V0e=a("code"),vet=o("__init__()"),Fet=o(" (throws an error)."),Tet=l(),ra=a("div"),F(zk.$$.fragment),Met=l(),X0e=a("p"),Eet=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cet=l(),Af=a("p"),wet=o(`Note:
Loading a model from its configuration file does `),z0e=a("strong"),Aet=o("not"),Let=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=a("a"),yet=o("from_pretrained()"),xet=o(" to load the model weights."),$et=l(),F(l5.$$.fragment),ket=l(),Yr=a("div"),F(Wk.$$.fragment),Set=l(),W0e=a("p"),Ret=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pet=l(),Pn=a("p"),Bet=o("The model class to instantiate is selected based on the "),Q0e=a("code"),Iet=o("model_type"),Net=o(` property of the config object (either
passed as an argument or loaded from `),U0e=a("code"),qet=o("pretrained_model_name_or_path"),jet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),Det=o("pretrained_model_name_or_path"),Get=o(":"),Oet=l(),$e=a("ul"),i5=a("li"),J0e=a("strong"),Vet=o("albert"),Xet=o(" \u2014 "),dte=a("a"),zet=o("FlaxAlbertForMaskedLM"),Wet=o(" (ALBERT model)"),Qet=l(),d5=a("li"),Y0e=a("strong"),Uet=o("bart"),Het=o(" \u2014 "),cte=a("a"),Jet=o("FlaxBartForConditionalGeneration"),Yet=o(" (BART model)"),Ket=l(),c5=a("li"),K0e=a("strong"),Zet=o("bert"),eot=o(" \u2014 "),fte=a("a"),oot=o("FlaxBertForMaskedLM"),rot=o(" (BERT model)"),tot=l(),f5=a("li"),Z0e=a("strong"),aot=o("big_bird"),not=o(" \u2014 "),mte=a("a"),sot=o("FlaxBigBirdForMaskedLM"),lot=o(" (BigBird model)"),iot=l(),m5=a("li"),ewe=a("strong"),dot=o("distilbert"),cot=o(" \u2014 "),gte=a("a"),fot=o("FlaxDistilBertForMaskedLM"),mot=o(" (DistilBERT model)"),got=l(),g5=a("li"),owe=a("strong"),hot=o("electra"),pot=o(" \u2014 "),hte=a("a"),_ot=o("FlaxElectraForMaskedLM"),uot=o(" (ELECTRA model)"),bot=l(),h5=a("li"),rwe=a("strong"),vot=o("mbart"),Fot=o(" \u2014 "),pte=a("a"),Tot=o("FlaxMBartForConditionalGeneration"),Mot=o(" (mBART model)"),Eot=l(),p5=a("li"),twe=a("strong"),Cot=o("roberta"),wot=o(" \u2014 "),_te=a("a"),Aot=o("FlaxRobertaForMaskedLM"),Lot=o(" (RoBERTa model)"),yot=l(),_5=a("li"),awe=a("strong"),xot=o("roformer"),$ot=o(" \u2014 "),ute=a("a"),kot=o("FlaxRoFormerForMaskedLM"),Sot=o(" (RoFormer model)"),Rot=l(),u5=a("li"),nwe=a("strong"),Pot=o("xlm-roberta"),Bot=o(" \u2014 "),bte=a("a"),Iot=o("FlaxXLMRobertaForMaskedLM"),Not=o(" (XLM-RoBERTa model)"),qot=l(),F(b5.$$.fragment),RHe=l(),Lf=a("h2"),v5=a("a"),swe=a("span"),F(Qk.$$.fragment),jot=l(),lwe=a("span"),Dot=o("FlaxAutoModelForSeq2SeqLM"),PHe=l(),Er=a("div"),F(Uk.$$.fragment),Got=l(),yf=a("p"),Oot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vte=a("a"),Vot=o("from_pretrained()"),Xot=o(" class method or the "),Fte=a("a"),zot=o("from_config()"),Wot=o(` class
method.`),Qot=l(),Hk=a("p"),Uot=o("This class cannot be instantiated directly using "),iwe=a("code"),Hot=o("__init__()"),Jot=o(" (throws an error)."),Yot=l(),ta=a("div"),F(Jk.$$.fragment),Kot=l(),dwe=a("p"),Zot=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ert=l(),xf=a("p"),ort=o(`Note:
Loading a model from its configuration file does `),cwe=a("strong"),rrt=o("not"),trt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=a("a"),art=o("from_pretrained()"),nrt=o(" to load the model weights."),srt=l(),F(F5.$$.fragment),lrt=l(),Kr=a("div"),F(Yk.$$.fragment),irt=l(),fwe=a("p"),drt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),crt=l(),Bn=a("p"),frt=o("The model class to instantiate is selected based on the "),mwe=a("code"),mrt=o("model_type"),grt=o(` property of the config object (either
passed as an argument or loaded from `),gwe=a("code"),hrt=o("pretrained_model_name_or_path"),prt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hwe=a("code"),_rt=o("pretrained_model_name_or_path"),urt=o(":"),brt=l(),ke=a("ul"),T5=a("li"),pwe=a("strong"),vrt=o("bart"),Frt=o(" \u2014 "),Mte=a("a"),Trt=o("FlaxBartForConditionalGeneration"),Mrt=o(" (BART model)"),Ert=l(),M5=a("li"),_we=a("strong"),Crt=o("blenderbot"),wrt=o(" \u2014 "),Ete=a("a"),Art=o("FlaxBlenderbotForConditionalGeneration"),Lrt=o(" (Blenderbot model)"),yrt=l(),E5=a("li"),uwe=a("strong"),xrt=o("blenderbot-small"),$rt=o(" \u2014 "),Cte=a("a"),krt=o("FlaxBlenderbotSmallForConditionalGeneration"),Srt=o(" (BlenderbotSmall model)"),Rrt=l(),C5=a("li"),bwe=a("strong"),Prt=o("encoder-decoder"),Brt=o(" \u2014 "),wte=a("a"),Irt=o("FlaxEncoderDecoderModel"),Nrt=o(" (Encoder decoder model)"),qrt=l(),w5=a("li"),vwe=a("strong"),jrt=o("longt5"),Drt=o(" \u2014 "),Ate=a("a"),Grt=o("FlaxLongT5ForConditionalGeneration"),Ort=o(" (LongT5 model)"),Vrt=l(),A5=a("li"),Fwe=a("strong"),Xrt=o("marian"),zrt=o(" \u2014 "),Lte=a("a"),Wrt=o("FlaxMarianMTModel"),Qrt=o(" (Marian model)"),Urt=l(),L5=a("li"),Twe=a("strong"),Hrt=o("mbart"),Jrt=o(" \u2014 "),yte=a("a"),Yrt=o("FlaxMBartForConditionalGeneration"),Krt=o(" (mBART model)"),Zrt=l(),y5=a("li"),Mwe=a("strong"),ett=o("mt5"),ott=o(" \u2014 "),xte=a("a"),rtt=o("FlaxMT5ForConditionalGeneration"),ttt=o(" (MT5 model)"),att=l(),x5=a("li"),Ewe=a("strong"),ntt=o("pegasus"),stt=o(" \u2014 "),$te=a("a"),ltt=o("FlaxPegasusForConditionalGeneration"),itt=o(" (Pegasus model)"),dtt=l(),$5=a("li"),Cwe=a("strong"),ctt=o("t5"),ftt=o(" \u2014 "),kte=a("a"),mtt=o("FlaxT5ForConditionalGeneration"),gtt=o(" (T5 model)"),htt=l(),F(k5.$$.fragment),BHe=l(),$f=a("h2"),S5=a("a"),wwe=a("span"),F(Kk.$$.fragment),ptt=l(),Awe=a("span"),_tt=o("FlaxAutoModelForSequenceClassification"),IHe=l(),Cr=a("div"),F(Zk.$$.fragment),utt=l(),kf=a("p"),btt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ste=a("a"),vtt=o("from_pretrained()"),Ftt=o(" class method or the "),Rte=a("a"),Ttt=o("from_config()"),Mtt=o(` class
method.`),Ett=l(),eS=a("p"),Ctt=o("This class cannot be instantiated directly using "),Lwe=a("code"),wtt=o("__init__()"),Att=o(" (throws an error)."),Ltt=l(),aa=a("div"),F(oS.$$.fragment),ytt=l(),ywe=a("p"),xtt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$tt=l(),Sf=a("p"),ktt=o(`Note:
Loading a model from its configuration file does `),xwe=a("strong"),Stt=o("not"),Rtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pte=a("a"),Ptt=o("from_pretrained()"),Btt=o(" to load the model weights."),Itt=l(),F(R5.$$.fragment),Ntt=l(),Zr=a("div"),F(rS.$$.fragment),qtt=l(),$we=a("p"),jtt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Dtt=l(),In=a("p"),Gtt=o("The model class to instantiate is selected based on the "),kwe=a("code"),Ott=o("model_type"),Vtt=o(` property of the config object (either
passed as an argument or loaded from `),Swe=a("code"),Xtt=o("pretrained_model_name_or_path"),ztt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rwe=a("code"),Wtt=o("pretrained_model_name_or_path"),Qtt=o(":"),Utt=l(),Se=a("ul"),P5=a("li"),Pwe=a("strong"),Htt=o("albert"),Jtt=o(" \u2014 "),Bte=a("a"),Ytt=o("FlaxAlbertForSequenceClassification"),Ktt=o(" (ALBERT model)"),Ztt=l(),B5=a("li"),Bwe=a("strong"),eat=o("bart"),oat=o(" \u2014 "),Ite=a("a"),rat=o("FlaxBartForSequenceClassification"),tat=o(" (BART model)"),aat=l(),I5=a("li"),Iwe=a("strong"),nat=o("bert"),sat=o(" \u2014 "),Nte=a("a"),lat=o("FlaxBertForSequenceClassification"),iat=o(" (BERT model)"),dat=l(),N5=a("li"),Nwe=a("strong"),cat=o("big_bird"),fat=o(" \u2014 "),qte=a("a"),mat=o("FlaxBigBirdForSequenceClassification"),gat=o(" (BigBird model)"),hat=l(),q5=a("li"),qwe=a("strong"),pat=o("distilbert"),_at=o(" \u2014 "),jte=a("a"),uat=o("FlaxDistilBertForSequenceClassification"),bat=o(" (DistilBERT model)"),vat=l(),j5=a("li"),jwe=a("strong"),Fat=o("electra"),Tat=o(" \u2014 "),Dte=a("a"),Mat=o("FlaxElectraForSequenceClassification"),Eat=o(" (ELECTRA model)"),Cat=l(),D5=a("li"),Dwe=a("strong"),wat=o("mbart"),Aat=o(" \u2014 "),Gte=a("a"),Lat=o("FlaxMBartForSequenceClassification"),yat=o(" (mBART model)"),xat=l(),G5=a("li"),Gwe=a("strong"),$at=o("roberta"),kat=o(" \u2014 "),Ote=a("a"),Sat=o("FlaxRobertaForSequenceClassification"),Rat=o(" (RoBERTa model)"),Pat=l(),O5=a("li"),Owe=a("strong"),Bat=o("roformer"),Iat=o(" \u2014 "),Vte=a("a"),Nat=o("FlaxRoFormerForSequenceClassification"),qat=o(" (RoFormer model)"),jat=l(),V5=a("li"),Vwe=a("strong"),Dat=o("xlm-roberta"),Gat=o(" \u2014 "),Xte=a("a"),Oat=o("FlaxXLMRobertaForSequenceClassification"),Vat=o(" (XLM-RoBERTa model)"),Xat=l(),F(X5.$$.fragment),NHe=l(),Rf=a("h2"),z5=a("a"),Xwe=a("span"),F(tS.$$.fragment),zat=l(),zwe=a("span"),Wat=o("FlaxAutoModelForQuestionAnswering"),qHe=l(),wr=a("div"),F(aS.$$.fragment),Qat=l(),Pf=a("p"),Uat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zte=a("a"),Hat=o("from_pretrained()"),Jat=o(" class method or the "),Wte=a("a"),Yat=o("from_config()"),Kat=o(` class
method.`),Zat=l(),nS=a("p"),ent=o("This class cannot be instantiated directly using "),Wwe=a("code"),ont=o("__init__()"),rnt=o(" (throws an error)."),tnt=l(),na=a("div"),F(sS.$$.fragment),ant=l(),Qwe=a("p"),nnt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),snt=l(),Bf=a("p"),lnt=o(`Note:
Loading a model from its configuration file does `),Uwe=a("strong"),int=o("not"),dnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qte=a("a"),cnt=o("from_pretrained()"),fnt=o(" to load the model weights."),mnt=l(),F(W5.$$.fragment),gnt=l(),et=a("div"),F(lS.$$.fragment),hnt=l(),Hwe=a("p"),pnt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_nt=l(),Nn=a("p"),unt=o("The model class to instantiate is selected based on the "),Jwe=a("code"),bnt=o("model_type"),vnt=o(` property of the config object (either
passed as an argument or loaded from `),Ywe=a("code"),Fnt=o("pretrained_model_name_or_path"),Tnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kwe=a("code"),Mnt=o("pretrained_model_name_or_path"),Ent=o(":"),Cnt=l(),Re=a("ul"),Q5=a("li"),Zwe=a("strong"),wnt=o("albert"),Ant=o(" \u2014 "),Ute=a("a"),Lnt=o("FlaxAlbertForQuestionAnswering"),ynt=o(" (ALBERT model)"),xnt=l(),U5=a("li"),eAe=a("strong"),$nt=o("bart"),knt=o(" \u2014 "),Hte=a("a"),Snt=o("FlaxBartForQuestionAnswering"),Rnt=o(" (BART model)"),Pnt=l(),H5=a("li"),oAe=a("strong"),Bnt=o("bert"),Int=o(" \u2014 "),Jte=a("a"),Nnt=o("FlaxBertForQuestionAnswering"),qnt=o(" (BERT model)"),jnt=l(),J5=a("li"),rAe=a("strong"),Dnt=o("big_bird"),Gnt=o(" \u2014 "),Yte=a("a"),Ont=o("FlaxBigBirdForQuestionAnswering"),Vnt=o(" (BigBird model)"),Xnt=l(),Y5=a("li"),tAe=a("strong"),znt=o("distilbert"),Wnt=o(" \u2014 "),Kte=a("a"),Qnt=o("FlaxDistilBertForQuestionAnswering"),Unt=o(" (DistilBERT model)"),Hnt=l(),K5=a("li"),aAe=a("strong"),Jnt=o("electra"),Ynt=o(" \u2014 "),Zte=a("a"),Knt=o("FlaxElectraForQuestionAnswering"),Znt=o(" (ELECTRA model)"),est=l(),Z5=a("li"),nAe=a("strong"),ost=o("mbart"),rst=o(" \u2014 "),eae=a("a"),tst=o("FlaxMBartForQuestionAnswering"),ast=o(" (mBART model)"),nst=l(),e0=a("li"),sAe=a("strong"),sst=o("roberta"),lst=o(" \u2014 "),oae=a("a"),ist=o("FlaxRobertaForQuestionAnswering"),dst=o(" (RoBERTa model)"),cst=l(),o0=a("li"),lAe=a("strong"),fst=o("roformer"),mst=o(" \u2014 "),rae=a("a"),gst=o("FlaxRoFormerForQuestionAnswering"),hst=o(" (RoFormer model)"),pst=l(),r0=a("li"),iAe=a("strong"),_st=o("xlm-roberta"),ust=o(" \u2014 "),tae=a("a"),bst=o("FlaxXLMRobertaForQuestionAnswering"),vst=o(" (XLM-RoBERTa model)"),Fst=l(),F(t0.$$.fragment),jHe=l(),If=a("h2"),a0=a("a"),dAe=a("span"),F(iS.$$.fragment),Tst=l(),cAe=a("span"),Mst=o("FlaxAutoModelForTokenClassification"),DHe=l(),Ar=a("div"),F(dS.$$.fragment),Est=l(),Nf=a("p"),Cst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aae=a("a"),wst=o("from_pretrained()"),Ast=o(" class method or the "),nae=a("a"),Lst=o("from_config()"),yst=o(` class
method.`),xst=l(),cS=a("p"),$st=o("This class cannot be instantiated directly using "),fAe=a("code"),kst=o("__init__()"),Sst=o(" (throws an error)."),Rst=l(),sa=a("div"),F(fS.$$.fragment),Pst=l(),mAe=a("p"),Bst=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ist=l(),qf=a("p"),Nst=o(`Note:
Loading a model from its configuration file does `),gAe=a("strong"),qst=o("not"),jst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sae=a("a"),Dst=o("from_pretrained()"),Gst=o(" to load the model weights."),Ost=l(),F(n0.$$.fragment),Vst=l(),ot=a("div"),F(mS.$$.fragment),Xst=l(),hAe=a("p"),zst=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wst=l(),qn=a("p"),Qst=o("The model class to instantiate is selected based on the "),pAe=a("code"),Ust=o("model_type"),Hst=o(` property of the config object (either
passed as an argument or loaded from `),_Ae=a("code"),Jst=o("pretrained_model_name_or_path"),Yst=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uAe=a("code"),Kst=o("pretrained_model_name_or_path"),Zst=o(":"),elt=l(),Xe=a("ul"),s0=a("li"),bAe=a("strong"),olt=o("albert"),rlt=o(" \u2014 "),lae=a("a"),tlt=o("FlaxAlbertForTokenClassification"),alt=o(" (ALBERT model)"),nlt=l(),l0=a("li"),vAe=a("strong"),slt=o("bert"),llt=o(" \u2014 "),iae=a("a"),ilt=o("FlaxBertForTokenClassification"),dlt=o(" (BERT model)"),clt=l(),i0=a("li"),FAe=a("strong"),flt=o("big_bird"),mlt=o(" \u2014 "),dae=a("a"),glt=o("FlaxBigBirdForTokenClassification"),hlt=o(" (BigBird model)"),plt=l(),d0=a("li"),TAe=a("strong"),_lt=o("distilbert"),ult=o(" \u2014 "),cae=a("a"),blt=o("FlaxDistilBertForTokenClassification"),vlt=o(" (DistilBERT model)"),Flt=l(),c0=a("li"),MAe=a("strong"),Tlt=o("electra"),Mlt=o(" \u2014 "),fae=a("a"),Elt=o("FlaxElectraForTokenClassification"),Clt=o(" (ELECTRA model)"),wlt=l(),f0=a("li"),EAe=a("strong"),Alt=o("roberta"),Llt=o(" \u2014 "),mae=a("a"),ylt=o("FlaxRobertaForTokenClassification"),xlt=o(" (RoBERTa model)"),$lt=l(),m0=a("li"),CAe=a("strong"),klt=o("roformer"),Slt=o(" \u2014 "),gae=a("a"),Rlt=o("FlaxRoFormerForTokenClassification"),Plt=o(" (RoFormer model)"),Blt=l(),g0=a("li"),wAe=a("strong"),Ilt=o("xlm-roberta"),Nlt=o(" \u2014 "),hae=a("a"),qlt=o("FlaxXLMRobertaForTokenClassification"),jlt=o(" (XLM-RoBERTa model)"),Dlt=l(),F(h0.$$.fragment),GHe=l(),jf=a("h2"),p0=a("a"),AAe=a("span"),F(gS.$$.fragment),Glt=l(),LAe=a("span"),Olt=o("FlaxAutoModelForMultipleChoice"),OHe=l(),Lr=a("div"),F(hS.$$.fragment),Vlt=l(),Df=a("p"),Xlt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pae=a("a"),zlt=o("from_pretrained()"),Wlt=o(" class method or the "),_ae=a("a"),Qlt=o("from_config()"),Ult=o(` class
method.`),Hlt=l(),pS=a("p"),Jlt=o("This class cannot be instantiated directly using "),yAe=a("code"),Ylt=o("__init__()"),Klt=o(" (throws an error)."),Zlt=l(),la=a("div"),F(_S.$$.fragment),eit=l(),xAe=a("p"),oit=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rit=l(),Gf=a("p"),tit=o(`Note:
Loading a model from its configuration file does `),$Ae=a("strong"),ait=o("not"),nit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uae=a("a"),sit=o("from_pretrained()"),lit=o(" to load the model weights."),iit=l(),F(_0.$$.fragment),dit=l(),rt=a("div"),F(uS.$$.fragment),cit=l(),kAe=a("p"),fit=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mit=l(),jn=a("p"),git=o("The model class to instantiate is selected based on the "),SAe=a("code"),hit=o("model_type"),pit=o(` property of the config object (either
passed as an argument or loaded from `),RAe=a("code"),_it=o("pretrained_model_name_or_path"),uit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PAe=a("code"),bit=o("pretrained_model_name_or_path"),vit=o(":"),Fit=l(),ze=a("ul"),u0=a("li"),BAe=a("strong"),Tit=o("albert"),Mit=o(" \u2014 "),bae=a("a"),Eit=o("FlaxAlbertForMultipleChoice"),Cit=o(" (ALBERT model)"),wit=l(),b0=a("li"),IAe=a("strong"),Ait=o("bert"),Lit=o(" \u2014 "),vae=a("a"),yit=o("FlaxBertForMultipleChoice"),xit=o(" (BERT model)"),$it=l(),v0=a("li"),NAe=a("strong"),kit=o("big_bird"),Sit=o(" \u2014 "),Fae=a("a"),Rit=o("FlaxBigBirdForMultipleChoice"),Pit=o(" (BigBird model)"),Bit=l(),F0=a("li"),qAe=a("strong"),Iit=o("distilbert"),Nit=o(" \u2014 "),Tae=a("a"),qit=o("FlaxDistilBertForMultipleChoice"),jit=o(" (DistilBERT model)"),Dit=l(),T0=a("li"),jAe=a("strong"),Git=o("electra"),Oit=o(" \u2014 "),Mae=a("a"),Vit=o("FlaxElectraForMultipleChoice"),Xit=o(" (ELECTRA model)"),zit=l(),M0=a("li"),DAe=a("strong"),Wit=o("roberta"),Qit=o(" \u2014 "),Eae=a("a"),Uit=o("FlaxRobertaForMultipleChoice"),Hit=o(" (RoBERTa model)"),Jit=l(),E0=a("li"),GAe=a("strong"),Yit=o("roformer"),Kit=o(" \u2014 "),Cae=a("a"),Zit=o("FlaxRoFormerForMultipleChoice"),edt=o(" (RoFormer model)"),odt=l(),C0=a("li"),OAe=a("strong"),rdt=o("xlm-roberta"),tdt=o(" \u2014 "),wae=a("a"),adt=o("FlaxXLMRobertaForMultipleChoice"),ndt=o(" (XLM-RoBERTa model)"),sdt=l(),F(w0.$$.fragment),VHe=l(),Of=a("h2"),A0=a("a"),VAe=a("span"),F(bS.$$.fragment),ldt=l(),XAe=a("span"),idt=o("FlaxAutoModelForNextSentencePrediction"),XHe=l(),yr=a("div"),F(vS.$$.fragment),ddt=l(),Vf=a("p"),cdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Aae=a("a"),fdt=o("from_pretrained()"),mdt=o(" class method or the "),Lae=a("a"),gdt=o("from_config()"),hdt=o(` class
method.`),pdt=l(),FS=a("p"),_dt=o("This class cannot be instantiated directly using "),zAe=a("code"),udt=o("__init__()"),bdt=o(" (throws an error)."),vdt=l(),ia=a("div"),F(TS.$$.fragment),Fdt=l(),WAe=a("p"),Tdt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mdt=l(),Xf=a("p"),Edt=o(`Note:
Loading a model from its configuration file does `),QAe=a("strong"),Cdt=o("not"),wdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yae=a("a"),Adt=o("from_pretrained()"),Ldt=o(" to load the model weights."),ydt=l(),F(L0.$$.fragment),xdt=l(),tt=a("div"),F(MS.$$.fragment),$dt=l(),UAe=a("p"),kdt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Sdt=l(),Dn=a("p"),Rdt=o("The model class to instantiate is selected based on the "),HAe=a("code"),Pdt=o("model_type"),Bdt=o(` property of the config object (either
passed as an argument or loaded from `),JAe=a("code"),Idt=o("pretrained_model_name_or_path"),Ndt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YAe=a("code"),qdt=o("pretrained_model_name_or_path"),jdt=o(":"),Ddt=l(),KAe=a("ul"),y0=a("li"),ZAe=a("strong"),Gdt=o("bert"),Odt=o(" \u2014 "),xae=a("a"),Vdt=o("FlaxBertForNextSentencePrediction"),Xdt=o(" (BERT model)"),zdt=l(),F(x0.$$.fragment),zHe=l(),zf=a("h2"),$0=a("a"),eLe=a("span"),F(ES.$$.fragment),Wdt=l(),oLe=a("span"),Qdt=o("FlaxAutoModelForImageClassification"),WHe=l(),xr=a("div"),F(CS.$$.fragment),Udt=l(),Wf=a("p"),Hdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$ae=a("a"),Jdt=o("from_pretrained()"),Ydt=o(" class method or the "),kae=a("a"),Kdt=o("from_config()"),Zdt=o(` class
method.`),ect=l(),wS=a("p"),oct=o("This class cannot be instantiated directly using "),rLe=a("code"),rct=o("__init__()"),tct=o(" (throws an error)."),act=l(),da=a("div"),F(AS.$$.fragment),nct=l(),tLe=a("p"),sct=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lct=l(),Qf=a("p"),ict=o(`Note:
Loading a model from its configuration file does `),aLe=a("strong"),dct=o("not"),cct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=a("a"),fct=o("from_pretrained()"),mct=o(" to load the model weights."),gct=l(),F(k0.$$.fragment),hct=l(),at=a("div"),F(LS.$$.fragment),pct=l(),nLe=a("p"),_ct=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uct=l(),Gn=a("p"),bct=o("The model class to instantiate is selected based on the "),sLe=a("code"),vct=o("model_type"),Fct=o(` property of the config object (either
passed as an argument or loaded from `),lLe=a("code"),Tct=o("pretrained_model_name_or_path"),Mct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iLe=a("code"),Ect=o("pretrained_model_name_or_path"),Cct=o(":"),wct=l(),yS=a("ul"),S0=a("li"),dLe=a("strong"),Act=o("beit"),Lct=o(" \u2014 "),Rae=a("a"),yct=o("FlaxBeitForImageClassification"),xct=o(" (BEiT model)"),$ct=l(),R0=a("li"),cLe=a("strong"),kct=o("vit"),Sct=o(" \u2014 "),Pae=a("a"),Rct=o("FlaxViTForImageClassification"),Pct=o(" (ViT model)"),Bct=l(),F(P0.$$.fragment),QHe=l(),Uf=a("h2"),B0=a("a"),fLe=a("span"),F(xS.$$.fragment),Ict=l(),mLe=a("span"),Nct=o("FlaxAutoModelForVision2Seq"),UHe=l(),$r=a("div"),F($S.$$.fragment),qct=l(),Hf=a("p"),jct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Bae=a("a"),Dct=o("from_pretrained()"),Gct=o(" class method or the "),Iae=a("a"),Oct=o("from_config()"),Vct=o(` class
method.`),Xct=l(),kS=a("p"),zct=o("This class cannot be instantiated directly using "),gLe=a("code"),Wct=o("__init__()"),Qct=o(" (throws an error)."),Uct=l(),ca=a("div"),F(SS.$$.fragment),Hct=l(),hLe=a("p"),Jct=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Yct=l(),Jf=a("p"),Kct=o(`Note:
Loading a model from its configuration file does `),pLe=a("strong"),Zct=o("not"),eft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=a("a"),oft=o("from_pretrained()"),rft=o(" to load the model weights."),tft=l(),F(I0.$$.fragment),aft=l(),nt=a("div"),F(RS.$$.fragment),nft=l(),_Le=a("p"),sft=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lft=l(),On=a("p"),ift=o("The model class to instantiate is selected based on the "),uLe=a("code"),dft=o("model_type"),cft=o(` property of the config object (either
passed as an argument or loaded from `),bLe=a("code"),fft=o("pretrained_model_name_or_path"),mft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vLe=a("code"),gft=o("pretrained_model_name_or_path"),hft=o(":"),pft=l(),FLe=a("ul"),N0=a("li"),TLe=a("strong"),_ft=o("vision-encoder-decoder"),uft=o(" \u2014 "),qae=a("a"),bft=o("FlaxVisionEncoderDecoderModel"),vft=o(" (Vision Encoder decoder model)"),Fft=l(),F(q0.$$.fragment),this.h()},l(f){const u=Ira('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var PS=s(p);m=n(PS,"A",{id:!0,class:!0,href:!0});var MLe=s(m);_=n(MLe,"SPAN",{});var ELe=s(_);T(d.$$.fragment,ELe),ELe.forEach(t),MLe.forEach(t),h=i(PS),Ao=n(PS,"SPAN",{});var CLe=s(Ao);Oi=r(CLe,"Auto Classes"),CLe.forEach(t),PS.forEach(t),em=i(f),ft=n(f,"P",{});var BS=s(ft);Vi=r(BS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(BS,"CODE",{});var wLe=s(Xi);dL=r(wLe,"from_pretrained()"),wLe.forEach(t),om=r(BS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),BS.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Vn=s(Qe);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var ALe=s(Xn);cL=r(ALe,"AutoConfig"),ALe.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var LLe=s(Wn);fL=r(LLe,"AutoModel"),LLe.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var yLe=s(Qn);mL=r(yLe,"AutoTokenizer"),yLe.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),rm=i(f),T(ja.$$.fragment,f),Ue=i(f),Ae=n(f,"P",{});var IS=s(Ae);tP=r(IS,"will create a model that is an instance of "),Ui=n(IS,"A",{href:!0});var xLe=s(Ui);aP=r(xLe,"BertModel"),xLe.forEach(t),nP=r(IS,"."),IS.forEach(t),Lo=i(f),Da=n(f,"P",{});var NS=s(Da);sP=r(NS,"There is one class of "),tm=n(NS,"CODE",{});var $Le=s(tm);lP=r($Le,"AutoModel"),$Le.forEach(t),cKe=r(NS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),NS.forEach(t),DQe=i(f),Hi=n(f,"H2",{class:!0});var qS=s(Hi);am=n(qS,"A",{id:!0,class:!0,href:!0});var kLe=s(am);Ise=n(kLe,"SPAN",{});var SLe=s(Ise);T(gL.$$.fragment,SLe),SLe.forEach(t),kLe.forEach(t),fKe=i(qS),Nse=n(qS,"SPAN",{});var RLe=s(Nse);mKe=r(RLe,"Extending the Auto Classes"),RLe.forEach(t),qS.forEach(t),GQe=i(f),Un=n(f,"P",{});var Yf=s(Un);gKe=r(Yf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qse=n(Yf,"CODE",{});var PLe=s(qse);hKe=r(PLe,"NewModel"),PLe.forEach(t),pKe=r(Yf,", make sure you have a "),jse=n(Yf,"CODE",{});var BLe=s(jse);_Ke=r(BLe,"NewModelConfig"),BLe.forEach(t),uKe=r(Yf,` then you can add those to the auto
classes like this:`),Yf.forEach(t),OQe=i(f),T(hL.$$.fragment,f),VQe=i(f),iP=n(f,"P",{});var ILe=s(iP);bKe=r(ILe,"You will then be able to use the auto classes like you would usually do!"),ILe.forEach(t),XQe=i(f),T(nm.$$.fragment,f),zQe=i(f),Ji=n(f,"H2",{class:!0});var jS=s(Ji);sm=n(jS,"A",{id:!0,class:!0,href:!0});var NLe=s(sm);Dse=n(NLe,"SPAN",{});var qLe=s(Dse);T(pL.$$.fragment,qLe),qLe.forEach(t),NLe.forEach(t),vKe=i(jS),Gse=n(jS,"SPAN",{});var jLe=s(Gse);FKe=r(jLe,"AutoConfig"),jLe.forEach(t),jS.forEach(t),WQe=i(f),yo=n(f,"DIV",{class:!0});var dt=s(yo);T(_L.$$.fragment,dt),TKe=i(dt),uL=n(dt,"P",{});var DS=s(uL);MKe=r(DS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),dP=n(DS,"A",{href:!0});var DLe=s(dP);EKe=r(DLe,"from_pretrained()"),DLe.forEach(t),CKe=r(DS," class method."),DS.forEach(t),wKe=i(dt),bL=n(dt,"P",{});var GS=s(bL);AKe=r(GS,"This class cannot be instantiated directly using "),Ose=n(GS,"CODE",{});var GLe=s(Ose);LKe=r(GLe,"__init__()"),GLe.forEach(t),yKe=r(GS," (throws an error)."),GS.forEach(t),xKe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(vL.$$.fragment,ct),$Ke=i(ct),Vse=n(ct,"P",{});var OLe=s(Vse);kKe=r(OLe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),OLe.forEach(t),SKe=i(ct),Yi=n(ct,"P",{});var Kf=s(Yi);RKe=r(Kf,"The configuration class to instantiate is selected based on the "),Xse=n(Kf,"CODE",{});var VLe=s(Xse);PKe=r(VLe,"model_type"),VLe.forEach(t),BKe=r(Kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zse=n(Kf,"CODE",{});var XLe=s(zse);IKe=r(XLe,"pretrained_model_name_or_path"),XLe.forEach(t),NKe=r(Kf,":"),Kf.forEach(t),qKe=i(ct),A=n(ct,"UL",{});var L=s(A);lm=n(L,"LI",{});var j0=s(lm);Wse=n(j0,"STRONG",{});var zLe=s(Wse);jKe=r(zLe,"albert"),zLe.forEach(t),DKe=r(j0," \u2014 "),cP=n(j0,"A",{href:!0});var WLe=s(cP);GKe=r(WLe,"AlbertConfig"),WLe.forEach(t),OKe=r(j0," (ALBERT model)"),j0.forEach(t),VKe=i(L),im=n(L,"LI",{});var D0=s(im);Qse=n(D0,"STRONG",{});var QLe=s(Qse);XKe=r(QLe,"bart"),QLe.forEach(t),zKe=r(D0," \u2014 "),fP=n(D0,"A",{href:!0});var ULe=s(fP);WKe=r(ULe,"BartConfig"),ULe.forEach(t),QKe=r(D0," (BART model)"),D0.forEach(t),UKe=i(L),dm=n(L,"LI",{});var G0=s(dm);Use=n(G0,"STRONG",{});var HLe=s(Use);HKe=r(HLe,"beit"),HLe.forEach(t),JKe=r(G0," \u2014 "),mP=n(G0,"A",{href:!0});var JLe=s(mP);YKe=r(JLe,"BeitConfig"),JLe.forEach(t),KKe=r(G0," (BEiT model)"),G0.forEach(t),ZKe=i(L),cm=n(L,"LI",{});var O0=s(cm);Hse=n(O0,"STRONG",{});var YLe=s(Hse);eZe=r(YLe,"bert"),YLe.forEach(t),oZe=r(O0," \u2014 "),gP=n(O0,"A",{href:!0});var KLe=s(gP);rZe=r(KLe,"BertConfig"),KLe.forEach(t),tZe=r(O0," (BERT model)"),O0.forEach(t),aZe=i(L),fm=n(L,"LI",{});var V0=s(fm);Jse=n(V0,"STRONG",{});var ZLe=s(Jse);nZe=r(ZLe,"bert-generation"),ZLe.forEach(t),sZe=r(V0," \u2014 "),hP=n(V0,"A",{href:!0});var eye=s(hP);lZe=r(eye,"BertGenerationConfig"),eye.forEach(t),iZe=r(V0," (Bert Generation model)"),V0.forEach(t),dZe=i(L),mm=n(L,"LI",{});var X0=s(mm);Yse=n(X0,"STRONG",{});var oye=s(Yse);cZe=r(oye,"big_bird"),oye.forEach(t),fZe=r(X0," \u2014 "),pP=n(X0,"A",{href:!0});var rye=s(pP);mZe=r(rye,"BigBirdConfig"),rye.forEach(t),gZe=r(X0," (BigBird model)"),X0.forEach(t),hZe=i(L),gm=n(L,"LI",{});var z0=s(gm);Kse=n(z0,"STRONG",{});var tye=s(Kse);pZe=r(tye,"bigbird_pegasus"),tye.forEach(t),_Ze=r(z0," \u2014 "),_P=n(z0,"A",{href:!0});var aye=s(_P);uZe=r(aye,"BigBirdPegasusConfig"),aye.forEach(t),bZe=r(z0," (BigBird-Pegasus model)"),z0.forEach(t),vZe=i(L),hm=n(L,"LI",{});var W0=s(hm);Zse=n(W0,"STRONG",{});var nye=s(Zse);FZe=r(nye,"blenderbot"),nye.forEach(t),TZe=r(W0," \u2014 "),uP=n(W0,"A",{href:!0});var sye=s(uP);MZe=r(sye,"BlenderbotConfig"),sye.forEach(t),EZe=r(W0," (Blenderbot model)"),W0.forEach(t),CZe=i(L),pm=n(L,"LI",{});var Q0=s(pm);ele=n(Q0,"STRONG",{});var lye=s(ele);wZe=r(lye,"blenderbot-small"),lye.forEach(t),AZe=r(Q0," \u2014 "),bP=n(Q0,"A",{href:!0});var iye=s(bP);LZe=r(iye,"BlenderbotSmallConfig"),iye.forEach(t),yZe=r(Q0," (BlenderbotSmall model)"),Q0.forEach(t),xZe=i(L),_m=n(L,"LI",{});var U0=s(_m);ole=n(U0,"STRONG",{});var dye=s(ole);$Ze=r(dye,"bloom"),dye.forEach(t),kZe=r(U0," \u2014 "),vP=n(U0,"A",{href:!0});var cye=s(vP);SZe=r(cye,"BloomConfig"),cye.forEach(t),RZe=r(U0," (BLOOM model)"),U0.forEach(t),PZe=i(L),um=n(L,"LI",{});var H0=s(um);rle=n(H0,"STRONG",{});var fye=s(rle);BZe=r(fye,"camembert"),fye.forEach(t),IZe=r(H0," \u2014 "),FP=n(H0,"A",{href:!0});var mye=s(FP);NZe=r(mye,"CamembertConfig"),mye.forEach(t),qZe=r(H0," (CamemBERT model)"),H0.forEach(t),jZe=i(L),bm=n(L,"LI",{});var J0=s(bm);tle=n(J0,"STRONG",{});var gye=s(tle);DZe=r(gye,"canine"),gye.forEach(t),GZe=r(J0," \u2014 "),TP=n(J0,"A",{href:!0});var hye=s(TP);OZe=r(hye,"CanineConfig"),hye.forEach(t),VZe=r(J0," (CANINE model)"),J0.forEach(t),XZe=i(L),vm=n(L,"LI",{});var Y0=s(vm);ale=n(Y0,"STRONG",{});var pye=s(ale);zZe=r(pye,"clip"),pye.forEach(t),WZe=r(Y0," \u2014 "),MP=n(Y0,"A",{href:!0});var _ye=s(MP);QZe=r(_ye,"CLIPConfig"),_ye.forEach(t),UZe=r(Y0," (CLIP model)"),Y0.forEach(t),HZe=i(L),Fm=n(L,"LI",{});var K0=s(Fm);nle=n(K0,"STRONG",{});var uye=s(nle);JZe=r(uye,"codegen"),uye.forEach(t),YZe=r(K0," \u2014 "),EP=n(K0,"A",{href:!0});var bye=s(EP);KZe=r(bye,"CodeGenConfig"),bye.forEach(t),ZZe=r(K0," (CodeGen model)"),K0.forEach(t),eeo=i(L),Tm=n(L,"LI",{});var Z0=s(Tm);sle=n(Z0,"STRONG",{});var vye=s(sle);oeo=r(vye,"convbert"),vye.forEach(t),reo=r(Z0," \u2014 "),CP=n(Z0,"A",{href:!0});var Fye=s(CP);teo=r(Fye,"ConvBertConfig"),Fye.forEach(t),aeo=r(Z0," (ConvBERT model)"),Z0.forEach(t),neo=i(L),Mm=n(L,"LI",{});var ew=s(Mm);lle=n(ew,"STRONG",{});var Tye=s(lle);seo=r(Tye,"convnext"),Tye.forEach(t),leo=r(ew," \u2014 "),wP=n(ew,"A",{href:!0});var Mye=s(wP);ieo=r(Mye,"ConvNextConfig"),Mye.forEach(t),deo=r(ew," (ConvNeXT model)"),ew.forEach(t),ceo=i(L),Em=n(L,"LI",{});var ow=s(Em);ile=n(ow,"STRONG",{});var Eye=s(ile);feo=r(Eye,"ctrl"),Eye.forEach(t),meo=r(ow," \u2014 "),AP=n(ow,"A",{href:!0});var Cye=s(AP);geo=r(Cye,"CTRLConfig"),Cye.forEach(t),heo=r(ow," (CTRL model)"),ow.forEach(t),peo=i(L),Cm=n(L,"LI",{});var rw=s(Cm);dle=n(rw,"STRONG",{});var wye=s(dle);_eo=r(wye,"cvt"),wye.forEach(t),ueo=r(rw," \u2014 "),LP=n(rw,"A",{href:!0});var Aye=s(LP);beo=r(Aye,"CvtConfig"),Aye.forEach(t),veo=r(rw," (CvT model)"),rw.forEach(t),Feo=i(L),wm=n(L,"LI",{});var tw=s(wm);cle=n(tw,"STRONG",{});var Lye=s(cle);Teo=r(Lye,"data2vec-audio"),Lye.forEach(t),Meo=r(tw," \u2014 "),yP=n(tw,"A",{href:!0});var yye=s(yP);Eeo=r(yye,"Data2VecAudioConfig"),yye.forEach(t),Ceo=r(tw," (Data2VecAudio model)"),tw.forEach(t),weo=i(L),Am=n(L,"LI",{});var aw=s(Am);fle=n(aw,"STRONG",{});var xye=s(fle);Aeo=r(xye,"data2vec-text"),xye.forEach(t),Leo=r(aw," \u2014 "),xP=n(aw,"A",{href:!0});var $ye=s(xP);yeo=r($ye,"Data2VecTextConfig"),$ye.forEach(t),xeo=r(aw," (Data2VecText model)"),aw.forEach(t),$eo=i(L),Lm=n(L,"LI",{});var nw=s(Lm);mle=n(nw,"STRONG",{});var kye=s(mle);keo=r(kye,"data2vec-vision"),kye.forEach(t),Seo=r(nw," \u2014 "),$P=n(nw,"A",{href:!0});var Sye=s($P);Reo=r(Sye,"Data2VecVisionConfig"),Sye.forEach(t),Peo=r(nw," (Data2VecVision model)"),nw.forEach(t),Beo=i(L),ym=n(L,"LI",{});var sw=s(ym);gle=n(sw,"STRONG",{});var Rye=s(gle);Ieo=r(Rye,"deberta"),Rye.forEach(t),Neo=r(sw," \u2014 "),kP=n(sw,"A",{href:!0});var Pye=s(kP);qeo=r(Pye,"DebertaConfig"),Pye.forEach(t),jeo=r(sw," (DeBERTa model)"),sw.forEach(t),Deo=i(L),xm=n(L,"LI",{});var lw=s(xm);hle=n(lw,"STRONG",{});var Bye=s(hle);Geo=r(Bye,"deberta-v2"),Bye.forEach(t),Oeo=r(lw," \u2014 "),SP=n(lw,"A",{href:!0});var Iye=s(SP);Veo=r(Iye,"DebertaV2Config"),Iye.forEach(t),Xeo=r(lw," (DeBERTa-v2 model)"),lw.forEach(t),zeo=i(L),$m=n(L,"LI",{});var iw=s($m);ple=n(iw,"STRONG",{});var Nye=s(ple);Weo=r(Nye,"decision_transformer"),Nye.forEach(t),Qeo=r(iw," \u2014 "),RP=n(iw,"A",{href:!0});var qye=s(RP);Ueo=r(qye,"DecisionTransformerConfig"),qye.forEach(t),Heo=r(iw," (Decision Transformer model)"),iw.forEach(t),Jeo=i(L),km=n(L,"LI",{});var dw=s(km);_le=n(dw,"STRONG",{});var jye=s(_le);Yeo=r(jye,"deit"),jye.forEach(t),Keo=r(dw," \u2014 "),PP=n(dw,"A",{href:!0});var Mft=s(PP);Zeo=r(Mft,"DeiTConfig"),Mft.forEach(t),eoo=r(dw," (DeiT model)"),dw.forEach(t),ooo=i(L),Sm=n(L,"LI",{});var Dye=s(Sm);ule=n(Dye,"STRONG",{});var Eft=s(ule);roo=r(Eft,"detr"),Eft.forEach(t),too=r(Dye," \u2014 "),BP=n(Dye,"A",{href:!0});var Cft=s(BP);aoo=r(Cft,"DetrConfig"),Cft.forEach(t),noo=r(Dye," (DETR model)"),Dye.forEach(t),soo=i(L),Rm=n(L,"LI",{});var Gye=s(Rm);ble=n(Gye,"STRONG",{});var wft=s(ble);loo=r(wft,"distilbert"),wft.forEach(t),ioo=r(Gye," \u2014 "),IP=n(Gye,"A",{href:!0});var Aft=s(IP);doo=r(Aft,"DistilBertConfig"),Aft.forEach(t),coo=r(Gye," (DistilBERT model)"),Gye.forEach(t),foo=i(L),Pm=n(L,"LI",{});var Oye=s(Pm);vle=n(Oye,"STRONG",{});var Lft=s(vle);moo=r(Lft,"donut-swin"),Lft.forEach(t),goo=r(Oye," \u2014 "),NP=n(Oye,"A",{href:!0});var yft=s(NP);hoo=r(yft,"DonutSwinConfig"),yft.forEach(t),poo=r(Oye," (DonutSwin model)"),Oye.forEach(t),_oo=i(L),Bm=n(L,"LI",{});var Vye=s(Bm);Fle=n(Vye,"STRONG",{});var xft=s(Fle);uoo=r(xft,"dpr"),xft.forEach(t),boo=r(Vye," \u2014 "),qP=n(Vye,"A",{href:!0});var $ft=s(qP);voo=r($ft,"DPRConfig"),$ft.forEach(t),Foo=r(Vye," (DPR model)"),Vye.forEach(t),Too=i(L),Im=n(L,"LI",{});var Xye=s(Im);Tle=n(Xye,"STRONG",{});var kft=s(Tle);Moo=r(kft,"dpt"),kft.forEach(t),Eoo=r(Xye," \u2014 "),jP=n(Xye,"A",{href:!0});var Sft=s(jP);Coo=r(Sft,"DPTConfig"),Sft.forEach(t),woo=r(Xye," (DPT model)"),Xye.forEach(t),Aoo=i(L),Nm=n(L,"LI",{});var zye=s(Nm);Mle=n(zye,"STRONG",{});var Rft=s(Mle);Loo=r(Rft,"electra"),Rft.forEach(t),yoo=r(zye," \u2014 "),DP=n(zye,"A",{href:!0});var Pft=s(DP);xoo=r(Pft,"ElectraConfig"),Pft.forEach(t),$oo=r(zye," (ELECTRA model)"),zye.forEach(t),koo=i(L),qm=n(L,"LI",{});var Wye=s(qm);Ele=n(Wye,"STRONG",{});var Bft=s(Ele);Soo=r(Bft,"encoder-decoder"),Bft.forEach(t),Roo=r(Wye," \u2014 "),GP=n(Wye,"A",{href:!0});var Ift=s(GP);Poo=r(Ift,"EncoderDecoderConfig"),Ift.forEach(t),Boo=r(Wye," (Encoder decoder model)"),Wye.forEach(t),Ioo=i(L),jm=n(L,"LI",{});var Qye=s(jm);Cle=n(Qye,"STRONG",{});var Nft=s(Cle);Noo=r(Nft,"flaubert"),Nft.forEach(t),qoo=r(Qye," \u2014 "),OP=n(Qye,"A",{href:!0});var qft=s(OP);joo=r(qft,"FlaubertConfig"),qft.forEach(t),Doo=r(Qye," (FlauBERT model)"),Qye.forEach(t),Goo=i(L),Dm=n(L,"LI",{});var Uye=s(Dm);wle=n(Uye,"STRONG",{});var jft=s(wle);Ooo=r(jft,"flava"),jft.forEach(t),Voo=r(Uye," \u2014 "),VP=n(Uye,"A",{href:!0});var Dft=s(VP);Xoo=r(Dft,"FlavaConfig"),Dft.forEach(t),zoo=r(Uye," (FLAVA model)"),Uye.forEach(t),Woo=i(L),Gm=n(L,"LI",{});var Hye=s(Gm);Ale=n(Hye,"STRONG",{});var Gft=s(Ale);Qoo=r(Gft,"fnet"),Gft.forEach(t),Uoo=r(Hye," \u2014 "),XP=n(Hye,"A",{href:!0});var Oft=s(XP);Hoo=r(Oft,"FNetConfig"),Oft.forEach(t),Joo=r(Hye," (FNet model)"),Hye.forEach(t),Yoo=i(L),Om=n(L,"LI",{});var Jye=s(Om);Lle=n(Jye,"STRONG",{});var Vft=s(Lle);Koo=r(Vft,"fsmt"),Vft.forEach(t),Zoo=r(Jye," \u2014 "),zP=n(Jye,"A",{href:!0});var Xft=s(zP);ero=r(Xft,"FSMTConfig"),Xft.forEach(t),oro=r(Jye," (FairSeq Machine-Translation model)"),Jye.forEach(t),rro=i(L),Vm=n(L,"LI",{});var Yye=s(Vm);yle=n(Yye,"STRONG",{});var zft=s(yle);tro=r(zft,"funnel"),zft.forEach(t),aro=r(Yye," \u2014 "),WP=n(Yye,"A",{href:!0});var Wft=s(WP);nro=r(Wft,"FunnelConfig"),Wft.forEach(t),sro=r(Yye," (Funnel Transformer model)"),Yye.forEach(t),lro=i(L),Xm=n(L,"LI",{});var Kye=s(Xm);xle=n(Kye,"STRONG",{});var Qft=s(xle);iro=r(Qft,"glpn"),Qft.forEach(t),dro=r(Kye," \u2014 "),QP=n(Kye,"A",{href:!0});var Uft=s(QP);cro=r(Uft,"GLPNConfig"),Uft.forEach(t),fro=r(Kye," (GLPN model)"),Kye.forEach(t),mro=i(L),zm=n(L,"LI",{});var Zye=s(zm);$le=n(Zye,"STRONG",{});var Hft=s($le);gro=r(Hft,"gpt2"),Hft.forEach(t),hro=r(Zye," \u2014 "),UP=n(Zye,"A",{href:!0});var Jft=s(UP);pro=r(Jft,"GPT2Config"),Jft.forEach(t),_ro=r(Zye," (OpenAI GPT-2 model)"),Zye.forEach(t),uro=i(L),Wm=n(L,"LI",{});var exe=s(Wm);kle=n(exe,"STRONG",{});var Yft=s(kle);bro=r(Yft,"gpt_neo"),Yft.forEach(t),vro=r(exe," \u2014 "),HP=n(exe,"A",{href:!0});var Kft=s(HP);Fro=r(Kft,"GPTNeoConfig"),Kft.forEach(t),Tro=r(exe," (GPT Neo model)"),exe.forEach(t),Mro=i(L),Qm=n(L,"LI",{});var oxe=s(Qm);Sle=n(oxe,"STRONG",{});var Zft=s(Sle);Ero=r(Zft,"gpt_neox"),Zft.forEach(t),Cro=r(oxe," \u2014 "),JP=n(oxe,"A",{href:!0});var emt=s(JP);wro=r(emt,"GPTNeoXConfig"),emt.forEach(t),Aro=r(oxe," (GPT NeoX model)"),oxe.forEach(t),Lro=i(L),Um=n(L,"LI",{});var rxe=s(Um);Rle=n(rxe,"STRONG",{});var omt=s(Rle);yro=r(omt,"gptj"),omt.forEach(t),xro=r(rxe," \u2014 "),YP=n(rxe,"A",{href:!0});var rmt=s(YP);$ro=r(rmt,"GPTJConfig"),rmt.forEach(t),kro=r(rxe," (GPT-J model)"),rxe.forEach(t),Sro=i(L),Hm=n(L,"LI",{});var txe=s(Hm);Ple=n(txe,"STRONG",{});var tmt=s(Ple);Rro=r(tmt,"groupvit"),tmt.forEach(t),Pro=r(txe," \u2014 "),KP=n(txe,"A",{href:!0});var amt=s(KP);Bro=r(amt,"GroupViTConfig"),amt.forEach(t),Iro=r(txe," (GroupViT model)"),txe.forEach(t),Nro=i(L),Jm=n(L,"LI",{});var axe=s(Jm);Ble=n(axe,"STRONG",{});var nmt=s(Ble);qro=r(nmt,"hubert"),nmt.forEach(t),jro=r(axe," \u2014 "),ZP=n(axe,"A",{href:!0});var smt=s(ZP);Dro=r(smt,"HubertConfig"),smt.forEach(t),Gro=r(axe," (Hubert model)"),axe.forEach(t),Oro=i(L),Ym=n(L,"LI",{});var nxe=s(Ym);Ile=n(nxe,"STRONG",{});var lmt=s(Ile);Vro=r(lmt,"ibert"),lmt.forEach(t),Xro=r(nxe," \u2014 "),eB=n(nxe,"A",{href:!0});var imt=s(eB);zro=r(imt,"IBertConfig"),imt.forEach(t),Wro=r(nxe," (I-BERT model)"),nxe.forEach(t),Qro=i(L),Km=n(L,"LI",{});var sxe=s(Km);Nle=n(sxe,"STRONG",{});var dmt=s(Nle);Uro=r(dmt,"imagegpt"),dmt.forEach(t),Hro=r(sxe," \u2014 "),oB=n(sxe,"A",{href:!0});var cmt=s(oB);Jro=r(cmt,"ImageGPTConfig"),cmt.forEach(t),Yro=r(sxe," (ImageGPT model)"),sxe.forEach(t),Kro=i(L),Zm=n(L,"LI",{});var lxe=s(Zm);qle=n(lxe,"STRONG",{});var fmt=s(qle);Zro=r(fmt,"layoutlm"),fmt.forEach(t),eto=r(lxe," \u2014 "),rB=n(lxe,"A",{href:!0});var mmt=s(rB);oto=r(mmt,"LayoutLMConfig"),mmt.forEach(t),rto=r(lxe," (LayoutLM model)"),lxe.forEach(t),tto=i(L),eg=n(L,"LI",{});var ixe=s(eg);jle=n(ixe,"STRONG",{});var gmt=s(jle);ato=r(gmt,"layoutlmv2"),gmt.forEach(t),nto=r(ixe," \u2014 "),tB=n(ixe,"A",{href:!0});var hmt=s(tB);sto=r(hmt,"LayoutLMv2Config"),hmt.forEach(t),lto=r(ixe," (LayoutLMv2 model)"),ixe.forEach(t),ito=i(L),og=n(L,"LI",{});var dxe=s(og);Dle=n(dxe,"STRONG",{});var pmt=s(Dle);dto=r(pmt,"layoutlmv3"),pmt.forEach(t),cto=r(dxe," \u2014 "),aB=n(dxe,"A",{href:!0});var _mt=s(aB);fto=r(_mt,"LayoutLMv3Config"),_mt.forEach(t),mto=r(dxe," (LayoutLMv3 model)"),dxe.forEach(t),gto=i(L),rg=n(L,"LI",{});var cxe=s(rg);Gle=n(cxe,"STRONG",{});var umt=s(Gle);hto=r(umt,"led"),umt.forEach(t),pto=r(cxe," \u2014 "),nB=n(cxe,"A",{href:!0});var bmt=s(nB);_to=r(bmt,"LEDConfig"),bmt.forEach(t),uto=r(cxe," (LED model)"),cxe.forEach(t),bto=i(L),tg=n(L,"LI",{});var fxe=s(tg);Ole=n(fxe,"STRONG",{});var vmt=s(Ole);vto=r(vmt,"levit"),vmt.forEach(t),Fto=r(fxe," \u2014 "),sB=n(fxe,"A",{href:!0});var Fmt=s(sB);Tto=r(Fmt,"LevitConfig"),Fmt.forEach(t),Mto=r(fxe," (LeViT model)"),fxe.forEach(t),Eto=i(L),ag=n(L,"LI",{});var mxe=s(ag);Vle=n(mxe,"STRONG",{});var Tmt=s(Vle);Cto=r(Tmt,"longformer"),Tmt.forEach(t),wto=r(mxe," \u2014 "),lB=n(mxe,"A",{href:!0});var Mmt=s(lB);Ato=r(Mmt,"LongformerConfig"),Mmt.forEach(t),Lto=r(mxe," (Longformer model)"),mxe.forEach(t),yto=i(L),ng=n(L,"LI",{});var gxe=s(ng);Xle=n(gxe,"STRONG",{});var Emt=s(Xle);xto=r(Emt,"longt5"),Emt.forEach(t),$to=r(gxe," \u2014 "),iB=n(gxe,"A",{href:!0});var Cmt=s(iB);kto=r(Cmt,"LongT5Config"),Cmt.forEach(t),Sto=r(gxe," (LongT5 model)"),gxe.forEach(t),Rto=i(L),sg=n(L,"LI",{});var hxe=s(sg);zle=n(hxe,"STRONG",{});var wmt=s(zle);Pto=r(wmt,"luke"),wmt.forEach(t),Bto=r(hxe," \u2014 "),dB=n(hxe,"A",{href:!0});var Amt=s(dB);Ito=r(Amt,"LukeConfig"),Amt.forEach(t),Nto=r(hxe," (LUKE model)"),hxe.forEach(t),qto=i(L),lg=n(L,"LI",{});var pxe=s(lg);Wle=n(pxe,"STRONG",{});var Lmt=s(Wle);jto=r(Lmt,"lxmert"),Lmt.forEach(t),Dto=r(pxe," \u2014 "),cB=n(pxe,"A",{href:!0});var ymt=s(cB);Gto=r(ymt,"LxmertConfig"),ymt.forEach(t),Oto=r(pxe," (LXMERT model)"),pxe.forEach(t),Vto=i(L),ig=n(L,"LI",{});var _xe=s(ig);Qle=n(_xe,"STRONG",{});var xmt=s(Qle);Xto=r(xmt,"m2m_100"),xmt.forEach(t),zto=r(_xe," \u2014 "),fB=n(_xe,"A",{href:!0});var $mt=s(fB);Wto=r($mt,"M2M100Config"),$mt.forEach(t),Qto=r(_xe," (M2M100 model)"),_xe.forEach(t),Uto=i(L),dg=n(L,"LI",{});var uxe=s(dg);Ule=n(uxe,"STRONG",{});var kmt=s(Ule);Hto=r(kmt,"marian"),kmt.forEach(t),Jto=r(uxe," \u2014 "),mB=n(uxe,"A",{href:!0});var Smt=s(mB);Yto=r(Smt,"MarianConfig"),Smt.forEach(t),Kto=r(uxe," (Marian model)"),uxe.forEach(t),Zto=i(L),cg=n(L,"LI",{});var bxe=s(cg);Hle=n(bxe,"STRONG",{});var Rmt=s(Hle);eao=r(Rmt,"maskformer"),Rmt.forEach(t),oao=r(bxe," \u2014 "),gB=n(bxe,"A",{href:!0});var Pmt=s(gB);rao=r(Pmt,"MaskFormerConfig"),Pmt.forEach(t),tao=r(bxe," (MaskFormer model)"),bxe.forEach(t),aao=i(L),fg=n(L,"LI",{});var vxe=s(fg);Jle=n(vxe,"STRONG",{});var Bmt=s(Jle);nao=r(Bmt,"mbart"),Bmt.forEach(t),sao=r(vxe," \u2014 "),hB=n(vxe,"A",{href:!0});var Imt=s(hB);lao=r(Imt,"MBartConfig"),Imt.forEach(t),iao=r(vxe," (mBART model)"),vxe.forEach(t),dao=i(L),mg=n(L,"LI",{});var Fxe=s(mg);Yle=n(Fxe,"STRONG",{});var Nmt=s(Yle);cao=r(Nmt,"mctct"),Nmt.forEach(t),fao=r(Fxe," \u2014 "),pB=n(Fxe,"A",{href:!0});var qmt=s(pB);mao=r(qmt,"MCTCTConfig"),qmt.forEach(t),gao=r(Fxe," (M-CTC-T model)"),Fxe.forEach(t),hao=i(L),gg=n(L,"LI",{});var Txe=s(gg);Kle=n(Txe,"STRONG",{});var jmt=s(Kle);pao=r(jmt,"megatron-bert"),jmt.forEach(t),_ao=r(Txe," \u2014 "),_B=n(Txe,"A",{href:!0});var Dmt=s(_B);uao=r(Dmt,"MegatronBertConfig"),Dmt.forEach(t),bao=r(Txe," (Megatron-BERT model)"),Txe.forEach(t),vao=i(L),hg=n(L,"LI",{});var Mxe=s(hg);Zle=n(Mxe,"STRONG",{});var Gmt=s(Zle);Fao=r(Gmt,"mobilebert"),Gmt.forEach(t),Tao=r(Mxe," \u2014 "),uB=n(Mxe,"A",{href:!0});var Omt=s(uB);Mao=r(Omt,"MobileBertConfig"),Omt.forEach(t),Eao=r(Mxe," (MobileBERT model)"),Mxe.forEach(t),Cao=i(L),pg=n(L,"LI",{});var Exe=s(pg);eie=n(Exe,"STRONG",{});var Vmt=s(eie);wao=r(Vmt,"mobilevit"),Vmt.forEach(t),Aao=r(Exe," \u2014 "),bB=n(Exe,"A",{href:!0});var Xmt=s(bB);Lao=r(Xmt,"MobileViTConfig"),Xmt.forEach(t),yao=r(Exe," (MobileViT model)"),Exe.forEach(t),xao=i(L),_g=n(L,"LI",{});var Cxe=s(_g);oie=n(Cxe,"STRONG",{});var zmt=s(oie);$ao=r(zmt,"mpnet"),zmt.forEach(t),kao=r(Cxe," \u2014 "),vB=n(Cxe,"A",{href:!0});var Wmt=s(vB);Sao=r(Wmt,"MPNetConfig"),Wmt.forEach(t),Rao=r(Cxe," (MPNet model)"),Cxe.forEach(t),Pao=i(L),ug=n(L,"LI",{});var wxe=s(ug);rie=n(wxe,"STRONG",{});var Qmt=s(rie);Bao=r(Qmt,"mt5"),Qmt.forEach(t),Iao=r(wxe," \u2014 "),FB=n(wxe,"A",{href:!0});var Umt=s(FB);Nao=r(Umt,"MT5Config"),Umt.forEach(t),qao=r(wxe," (MT5 model)"),wxe.forEach(t),jao=i(L),bg=n(L,"LI",{});var Axe=s(bg);tie=n(Axe,"STRONG",{});var Hmt=s(tie);Dao=r(Hmt,"mvp"),Hmt.forEach(t),Gao=r(Axe," \u2014 "),TB=n(Axe,"A",{href:!0});var Jmt=s(TB);Oao=r(Jmt,"MvpConfig"),Jmt.forEach(t),Vao=r(Axe," (MVP model)"),Axe.forEach(t),Xao=i(L),vg=n(L,"LI",{});var Lxe=s(vg);aie=n(Lxe,"STRONG",{});var Ymt=s(aie);zao=r(Ymt,"nezha"),Ymt.forEach(t),Wao=r(Lxe," \u2014 "),MB=n(Lxe,"A",{href:!0});var Kmt=s(MB);Qao=r(Kmt,"NezhaConfig"),Kmt.forEach(t),Uao=r(Lxe," (Nezha model)"),Lxe.forEach(t),Hao=i(L),Fg=n(L,"LI",{});var yxe=s(Fg);nie=n(yxe,"STRONG",{});var Zmt=s(nie);Jao=r(Zmt,"nystromformer"),Zmt.forEach(t),Yao=r(yxe," \u2014 "),EB=n(yxe,"A",{href:!0});var egt=s(EB);Kao=r(egt,"NystromformerConfig"),egt.forEach(t),Zao=r(yxe," (Nystr\xF6mformer model)"),yxe.forEach(t),eno=i(L),Tg=n(L,"LI",{});var xxe=s(Tg);sie=n(xxe,"STRONG",{});var ogt=s(sie);ono=r(ogt,"openai-gpt"),ogt.forEach(t),rno=r(xxe," \u2014 "),CB=n(xxe,"A",{href:!0});var rgt=s(CB);tno=r(rgt,"OpenAIGPTConfig"),rgt.forEach(t),ano=r(xxe," (OpenAI GPT model)"),xxe.forEach(t),nno=i(L),Mg=n(L,"LI",{});var $xe=s(Mg);lie=n($xe,"STRONG",{});var tgt=s(lie);sno=r(tgt,"opt"),tgt.forEach(t),lno=r($xe," \u2014 "),wB=n($xe,"A",{href:!0});var agt=s(wB);ino=r(agt,"OPTConfig"),agt.forEach(t),dno=r($xe," (OPT model)"),$xe.forEach(t),cno=i(L),Eg=n(L,"LI",{});var kxe=s(Eg);iie=n(kxe,"STRONG",{});var ngt=s(iie);fno=r(ngt,"owlvit"),ngt.forEach(t),mno=r(kxe," \u2014 "),AB=n(kxe,"A",{href:!0});var sgt=s(AB);gno=r(sgt,"OwlViTConfig"),sgt.forEach(t),hno=r(kxe," (OWL-ViT model)"),kxe.forEach(t),pno=i(L),Cg=n(L,"LI",{});var Sxe=s(Cg);die=n(Sxe,"STRONG",{});var lgt=s(die);_no=r(lgt,"pegasus"),lgt.forEach(t),uno=r(Sxe," \u2014 "),LB=n(Sxe,"A",{href:!0});var igt=s(LB);bno=r(igt,"PegasusConfig"),igt.forEach(t),vno=r(Sxe," (Pegasus model)"),Sxe.forEach(t),Fno=i(L),wg=n(L,"LI",{});var Rxe=s(wg);cie=n(Rxe,"STRONG",{});var dgt=s(cie);Tno=r(dgt,"perceiver"),dgt.forEach(t),Mno=r(Rxe," \u2014 "),yB=n(Rxe,"A",{href:!0});var cgt=s(yB);Eno=r(cgt,"PerceiverConfig"),cgt.forEach(t),Cno=r(Rxe," (Perceiver model)"),Rxe.forEach(t),wno=i(L),Ag=n(L,"LI",{});var Pxe=s(Ag);fie=n(Pxe,"STRONG",{});var fgt=s(fie);Ano=r(fgt,"plbart"),fgt.forEach(t),Lno=r(Pxe," \u2014 "),xB=n(Pxe,"A",{href:!0});var mgt=s(xB);yno=r(mgt,"PLBartConfig"),mgt.forEach(t),xno=r(Pxe," (PLBart model)"),Pxe.forEach(t),$no=i(L),Lg=n(L,"LI",{});var Bxe=s(Lg);mie=n(Bxe,"STRONG",{});var ggt=s(mie);kno=r(ggt,"poolformer"),ggt.forEach(t),Sno=r(Bxe," \u2014 "),$B=n(Bxe,"A",{href:!0});var hgt=s($B);Rno=r(hgt,"PoolFormerConfig"),hgt.forEach(t),Pno=r(Bxe," (PoolFormer model)"),Bxe.forEach(t),Bno=i(L),yg=n(L,"LI",{});var Ixe=s(yg);gie=n(Ixe,"STRONG",{});var pgt=s(gie);Ino=r(pgt,"prophetnet"),pgt.forEach(t),Nno=r(Ixe," \u2014 "),kB=n(Ixe,"A",{href:!0});var _gt=s(kB);qno=r(_gt,"ProphetNetConfig"),_gt.forEach(t),jno=r(Ixe," (ProphetNet model)"),Ixe.forEach(t),Dno=i(L),xg=n(L,"LI",{});var Nxe=s(xg);hie=n(Nxe,"STRONG",{});var ugt=s(hie);Gno=r(ugt,"qdqbert"),ugt.forEach(t),Ono=r(Nxe," \u2014 "),SB=n(Nxe,"A",{href:!0});var bgt=s(SB);Vno=r(bgt,"QDQBertConfig"),bgt.forEach(t),Xno=r(Nxe," (QDQBert model)"),Nxe.forEach(t),zno=i(L),$g=n(L,"LI",{});var qxe=s($g);pie=n(qxe,"STRONG",{});var vgt=s(pie);Wno=r(vgt,"rag"),vgt.forEach(t),Qno=r(qxe," \u2014 "),RB=n(qxe,"A",{href:!0});var Fgt=s(RB);Uno=r(Fgt,"RagConfig"),Fgt.forEach(t),Hno=r(qxe," (RAG model)"),qxe.forEach(t),Jno=i(L),kg=n(L,"LI",{});var jxe=s(kg);_ie=n(jxe,"STRONG",{});var Tgt=s(_ie);Yno=r(Tgt,"realm"),Tgt.forEach(t),Kno=r(jxe," \u2014 "),PB=n(jxe,"A",{href:!0});var Mgt=s(PB);Zno=r(Mgt,"RealmConfig"),Mgt.forEach(t),eso=r(jxe," (REALM model)"),jxe.forEach(t),oso=i(L),Sg=n(L,"LI",{});var Dxe=s(Sg);uie=n(Dxe,"STRONG",{});var Egt=s(uie);rso=r(Egt,"reformer"),Egt.forEach(t),tso=r(Dxe," \u2014 "),BB=n(Dxe,"A",{href:!0});var Cgt=s(BB);aso=r(Cgt,"ReformerConfig"),Cgt.forEach(t),nso=r(Dxe," (Reformer model)"),Dxe.forEach(t),sso=i(L),Rg=n(L,"LI",{});var Gxe=s(Rg);bie=n(Gxe,"STRONG",{});var wgt=s(bie);lso=r(wgt,"regnet"),wgt.forEach(t),iso=r(Gxe," \u2014 "),IB=n(Gxe,"A",{href:!0});var Agt=s(IB);dso=r(Agt,"RegNetConfig"),Agt.forEach(t),cso=r(Gxe," (RegNet model)"),Gxe.forEach(t),fso=i(L),Pg=n(L,"LI",{});var Oxe=s(Pg);vie=n(Oxe,"STRONG",{});var Lgt=s(vie);mso=r(Lgt,"rembert"),Lgt.forEach(t),gso=r(Oxe," \u2014 "),NB=n(Oxe,"A",{href:!0});var ygt=s(NB);hso=r(ygt,"RemBertConfig"),ygt.forEach(t),pso=r(Oxe," (RemBERT model)"),Oxe.forEach(t),_so=i(L),Bg=n(L,"LI",{});var Vxe=s(Bg);Fie=n(Vxe,"STRONG",{});var xgt=s(Fie);uso=r(xgt,"resnet"),xgt.forEach(t),bso=r(Vxe," \u2014 "),qB=n(Vxe,"A",{href:!0});var $gt=s(qB);vso=r($gt,"ResNetConfig"),$gt.forEach(t),Fso=r(Vxe," (ResNet model)"),Vxe.forEach(t),Tso=i(L),Ig=n(L,"LI",{});var Xxe=s(Ig);Tie=n(Xxe,"STRONG",{});var kgt=s(Tie);Mso=r(kgt,"retribert"),kgt.forEach(t),Eso=r(Xxe," \u2014 "),jB=n(Xxe,"A",{href:!0});var Sgt=s(jB);Cso=r(Sgt,"RetriBertConfig"),Sgt.forEach(t),wso=r(Xxe," (RetriBERT model)"),Xxe.forEach(t),Aso=i(L),Ng=n(L,"LI",{});var zxe=s(Ng);Mie=n(zxe,"STRONG",{});var Rgt=s(Mie);Lso=r(Rgt,"roberta"),Rgt.forEach(t),yso=r(zxe," \u2014 "),DB=n(zxe,"A",{href:!0});var Pgt=s(DB);xso=r(Pgt,"RobertaConfig"),Pgt.forEach(t),$so=r(zxe," (RoBERTa model)"),zxe.forEach(t),kso=i(L),qg=n(L,"LI",{});var Wxe=s(qg);Eie=n(Wxe,"STRONG",{});var Bgt=s(Eie);Sso=r(Bgt,"roformer"),Bgt.forEach(t),Rso=r(Wxe," \u2014 "),GB=n(Wxe,"A",{href:!0});var Igt=s(GB);Pso=r(Igt,"RoFormerConfig"),Igt.forEach(t),Bso=r(Wxe," (RoFormer model)"),Wxe.forEach(t),Iso=i(L),jg=n(L,"LI",{});var Qxe=s(jg);Cie=n(Qxe,"STRONG",{});var Ngt=s(Cie);Nso=r(Ngt,"segformer"),Ngt.forEach(t),qso=r(Qxe," \u2014 "),OB=n(Qxe,"A",{href:!0});var qgt=s(OB);jso=r(qgt,"SegformerConfig"),qgt.forEach(t),Dso=r(Qxe," (SegFormer model)"),Qxe.forEach(t),Gso=i(L),Dg=n(L,"LI",{});var Uxe=s(Dg);wie=n(Uxe,"STRONG",{});var jgt=s(wie);Oso=r(jgt,"sew"),jgt.forEach(t),Vso=r(Uxe," \u2014 "),VB=n(Uxe,"A",{href:!0});var Dgt=s(VB);Xso=r(Dgt,"SEWConfig"),Dgt.forEach(t),zso=r(Uxe," (SEW model)"),Uxe.forEach(t),Wso=i(L),Gg=n(L,"LI",{});var Hxe=s(Gg);Aie=n(Hxe,"STRONG",{});var Ggt=s(Aie);Qso=r(Ggt,"sew-d"),Ggt.forEach(t),Uso=r(Hxe," \u2014 "),XB=n(Hxe,"A",{href:!0});var Ogt=s(XB);Hso=r(Ogt,"SEWDConfig"),Ogt.forEach(t),Jso=r(Hxe," (SEW-D model)"),Hxe.forEach(t),Yso=i(L),Og=n(L,"LI",{});var Jxe=s(Og);Lie=n(Jxe,"STRONG",{});var Vgt=s(Lie);Kso=r(Vgt,"speech-encoder-decoder"),Vgt.forEach(t),Zso=r(Jxe," \u2014 "),zB=n(Jxe,"A",{href:!0});var Xgt=s(zB);elo=r(Xgt,"SpeechEncoderDecoderConfig"),Xgt.forEach(t),olo=r(Jxe," (Speech Encoder decoder model)"),Jxe.forEach(t),rlo=i(L),Vg=n(L,"LI",{});var Yxe=s(Vg);yie=n(Yxe,"STRONG",{});var zgt=s(yie);tlo=r(zgt,"speech_to_text"),zgt.forEach(t),alo=r(Yxe," \u2014 "),WB=n(Yxe,"A",{href:!0});var Wgt=s(WB);nlo=r(Wgt,"Speech2TextConfig"),Wgt.forEach(t),slo=r(Yxe," (Speech2Text model)"),Yxe.forEach(t),llo=i(L),Xg=n(L,"LI",{});var Kxe=s(Xg);xie=n(Kxe,"STRONG",{});var Qgt=s(xie);ilo=r(Qgt,"speech_to_text_2"),Qgt.forEach(t),dlo=r(Kxe," \u2014 "),QB=n(Kxe,"A",{href:!0});var Ugt=s(QB);clo=r(Ugt,"Speech2Text2Config"),Ugt.forEach(t),flo=r(Kxe," (Speech2Text2 model)"),Kxe.forEach(t),mlo=i(L),zg=n(L,"LI",{});var Zxe=s(zg);$ie=n(Zxe,"STRONG",{});var Hgt=s($ie);glo=r(Hgt,"splinter"),Hgt.forEach(t),hlo=r(Zxe," \u2014 "),UB=n(Zxe,"A",{href:!0});var Jgt=s(UB);plo=r(Jgt,"SplinterConfig"),Jgt.forEach(t),_lo=r(Zxe," (Splinter model)"),Zxe.forEach(t),ulo=i(L),Wg=n(L,"LI",{});var e$e=s(Wg);kie=n(e$e,"STRONG",{});var Ygt=s(kie);blo=r(Ygt,"squeezebert"),Ygt.forEach(t),vlo=r(e$e," \u2014 "),HB=n(e$e,"A",{href:!0});var Kgt=s(HB);Flo=r(Kgt,"SqueezeBertConfig"),Kgt.forEach(t),Tlo=r(e$e," (SqueezeBERT model)"),e$e.forEach(t),Mlo=i(L),Qg=n(L,"LI",{});var o$e=s(Qg);Sie=n(o$e,"STRONG",{});var Zgt=s(Sie);Elo=r(Zgt,"swin"),Zgt.forEach(t),Clo=r(o$e," \u2014 "),JB=n(o$e,"A",{href:!0});var eht=s(JB);wlo=r(eht,"SwinConfig"),eht.forEach(t),Alo=r(o$e," (Swin Transformer model)"),o$e.forEach(t),Llo=i(L),Ug=n(L,"LI",{});var r$e=s(Ug);Rie=n(r$e,"STRONG",{});var oht=s(Rie);ylo=r(oht,"swinv2"),oht.forEach(t),xlo=r(r$e," \u2014 "),YB=n(r$e,"A",{href:!0});var rht=s(YB);$lo=r(rht,"Swinv2Config"),rht.forEach(t),klo=r(r$e," (Swin Transformer V2 model)"),r$e.forEach(t),Slo=i(L),Hg=n(L,"LI",{});var t$e=s(Hg);Pie=n(t$e,"STRONG",{});var tht=s(Pie);Rlo=r(tht,"t5"),tht.forEach(t),Plo=r(t$e," \u2014 "),KB=n(t$e,"A",{href:!0});var aht=s(KB);Blo=r(aht,"T5Config"),aht.forEach(t),Ilo=r(t$e," (T5 model)"),t$e.forEach(t),Nlo=i(L),Jg=n(L,"LI",{});var a$e=s(Jg);Bie=n(a$e,"STRONG",{});var nht=s(Bie);qlo=r(nht,"tapas"),nht.forEach(t),jlo=r(a$e," \u2014 "),ZB=n(a$e,"A",{href:!0});var sht=s(ZB);Dlo=r(sht,"TapasConfig"),sht.forEach(t),Glo=r(a$e," (TAPAS model)"),a$e.forEach(t),Olo=i(L),Yg=n(L,"LI",{});var n$e=s(Yg);Iie=n(n$e,"STRONG",{});var lht=s(Iie);Vlo=r(lht,"trajectory_transformer"),lht.forEach(t),Xlo=r(n$e," \u2014 "),eI=n(n$e,"A",{href:!0});var iht=s(eI);zlo=r(iht,"TrajectoryTransformerConfig"),iht.forEach(t),Wlo=r(n$e," (Trajectory Transformer model)"),n$e.forEach(t),Qlo=i(L),Kg=n(L,"LI",{});var s$e=s(Kg);Nie=n(s$e,"STRONG",{});var dht=s(Nie);Ulo=r(dht,"transfo-xl"),dht.forEach(t),Hlo=r(s$e," \u2014 "),oI=n(s$e,"A",{href:!0});var cht=s(oI);Jlo=r(cht,"TransfoXLConfig"),cht.forEach(t),Ylo=r(s$e," (Transformer-XL model)"),s$e.forEach(t),Klo=i(L),Zg=n(L,"LI",{});var l$e=s(Zg);qie=n(l$e,"STRONG",{});var fht=s(qie);Zlo=r(fht,"trocr"),fht.forEach(t),eio=r(l$e," \u2014 "),rI=n(l$e,"A",{href:!0});var mht=s(rI);oio=r(mht,"TrOCRConfig"),mht.forEach(t),rio=r(l$e," (TrOCR model)"),l$e.forEach(t),tio=i(L),eh=n(L,"LI",{});var i$e=s(eh);jie=n(i$e,"STRONG",{});var ght=s(jie);aio=r(ght,"unispeech"),ght.forEach(t),nio=r(i$e," \u2014 "),tI=n(i$e,"A",{href:!0});var hht=s(tI);sio=r(hht,"UniSpeechConfig"),hht.forEach(t),lio=r(i$e," (UniSpeech model)"),i$e.forEach(t),iio=i(L),oh=n(L,"LI",{});var d$e=s(oh);Die=n(d$e,"STRONG",{});var pht=s(Die);dio=r(pht,"unispeech-sat"),pht.forEach(t),cio=r(d$e," \u2014 "),aI=n(d$e,"A",{href:!0});var _ht=s(aI);fio=r(_ht,"UniSpeechSatConfig"),_ht.forEach(t),mio=r(d$e," (UniSpeechSat model)"),d$e.forEach(t),gio=i(L),rh=n(L,"LI",{});var c$e=s(rh);Gie=n(c$e,"STRONG",{});var uht=s(Gie);hio=r(uht,"van"),uht.forEach(t),pio=r(c$e," \u2014 "),nI=n(c$e,"A",{href:!0});var bht=s(nI);_io=r(bht,"VanConfig"),bht.forEach(t),uio=r(c$e," (VAN model)"),c$e.forEach(t),bio=i(L),th=n(L,"LI",{});var f$e=s(th);Oie=n(f$e,"STRONG",{});var vht=s(Oie);vio=r(vht,"videomae"),vht.forEach(t),Fio=r(f$e," \u2014 "),sI=n(f$e,"A",{href:!0});var Fht=s(sI);Tio=r(Fht,"VideoMAEConfig"),Fht.forEach(t),Mio=r(f$e," (VideoMAE model)"),f$e.forEach(t),Eio=i(L),ah=n(L,"LI",{});var m$e=s(ah);Vie=n(m$e,"STRONG",{});var Tht=s(Vie);Cio=r(Tht,"vilt"),Tht.forEach(t),wio=r(m$e," \u2014 "),lI=n(m$e,"A",{href:!0});var Mht=s(lI);Aio=r(Mht,"ViltConfig"),Mht.forEach(t),Lio=r(m$e," (ViLT model)"),m$e.forEach(t),yio=i(L),nh=n(L,"LI",{});var g$e=s(nh);Xie=n(g$e,"STRONG",{});var Eht=s(Xie);xio=r(Eht,"vision-encoder-decoder"),Eht.forEach(t),$io=r(g$e," \u2014 "),iI=n(g$e,"A",{href:!0});var Cht=s(iI);kio=r(Cht,"VisionEncoderDecoderConfig"),Cht.forEach(t),Sio=r(g$e," (Vision Encoder decoder model)"),g$e.forEach(t),Rio=i(L),sh=n(L,"LI",{});var h$e=s(sh);zie=n(h$e,"STRONG",{});var wht=s(zie);Pio=r(wht,"vision-text-dual-encoder"),wht.forEach(t),Bio=r(h$e," \u2014 "),dI=n(h$e,"A",{href:!0});var Aht=s(dI);Iio=r(Aht,"VisionTextDualEncoderConfig"),Aht.forEach(t),Nio=r(h$e," (VisionTextDualEncoder model)"),h$e.forEach(t),qio=i(L),lh=n(L,"LI",{});var p$e=s(lh);Wie=n(p$e,"STRONG",{});var Lht=s(Wie);jio=r(Lht,"visual_bert"),Lht.forEach(t),Dio=r(p$e," \u2014 "),cI=n(p$e,"A",{href:!0});var yht=s(cI);Gio=r(yht,"VisualBertConfig"),yht.forEach(t),Oio=r(p$e," (VisualBERT model)"),p$e.forEach(t),Vio=i(L),ih=n(L,"LI",{});var _$e=s(ih);Qie=n(_$e,"STRONG",{});var xht=s(Qie);Xio=r(xht,"vit"),xht.forEach(t),zio=r(_$e," \u2014 "),fI=n(_$e,"A",{href:!0});var $ht=s(fI);Wio=r($ht,"ViTConfig"),$ht.forEach(t),Qio=r(_$e," (ViT model)"),_$e.forEach(t),Uio=i(L),dh=n(L,"LI",{});var u$e=s(dh);Uie=n(u$e,"STRONG",{});var kht=s(Uie);Hio=r(kht,"vit_mae"),kht.forEach(t),Jio=r(u$e," \u2014 "),mI=n(u$e,"A",{href:!0});var Sht=s(mI);Yio=r(Sht,"ViTMAEConfig"),Sht.forEach(t),Kio=r(u$e," (ViTMAE model)"),u$e.forEach(t),Zio=i(L),ch=n(L,"LI",{});var b$e=s(ch);Hie=n(b$e,"STRONG",{});var Rht=s(Hie);edo=r(Rht,"wav2vec2"),Rht.forEach(t),odo=r(b$e," \u2014 "),gI=n(b$e,"A",{href:!0});var Pht=s(gI);rdo=r(Pht,"Wav2Vec2Config"),Pht.forEach(t),tdo=r(b$e," (Wav2Vec2 model)"),b$e.forEach(t),ado=i(L),fh=n(L,"LI",{});var v$e=s(fh);Jie=n(v$e,"STRONG",{});var Bht=s(Jie);ndo=r(Bht,"wav2vec2-conformer"),Bht.forEach(t),sdo=r(v$e," \u2014 "),hI=n(v$e,"A",{href:!0});var Iht=s(hI);ldo=r(Iht,"Wav2Vec2ConformerConfig"),Iht.forEach(t),ido=r(v$e," (Wav2Vec2-Conformer model)"),v$e.forEach(t),ddo=i(L),mh=n(L,"LI",{});var F$e=s(mh);Yie=n(F$e,"STRONG",{});var Nht=s(Yie);cdo=r(Nht,"wavlm"),Nht.forEach(t),fdo=r(F$e," \u2014 "),pI=n(F$e,"A",{href:!0});var qht=s(pI);mdo=r(qht,"WavLMConfig"),qht.forEach(t),gdo=r(F$e," (WavLM model)"),F$e.forEach(t),hdo=i(L),gh=n(L,"LI",{});var T$e=s(gh);Kie=n(T$e,"STRONG",{});var jht=s(Kie);pdo=r(jht,"xglm"),jht.forEach(t),_do=r(T$e," \u2014 "),_I=n(T$e,"A",{href:!0});var Dht=s(_I);udo=r(Dht,"XGLMConfig"),Dht.forEach(t),bdo=r(T$e," (XGLM model)"),T$e.forEach(t),vdo=i(L),hh=n(L,"LI",{});var M$e=s(hh);Zie=n(M$e,"STRONG",{});var Ght=s(Zie);Fdo=r(Ght,"xlm"),Ght.forEach(t),Tdo=r(M$e," \u2014 "),uI=n(M$e,"A",{href:!0});var Oht=s(uI);Mdo=r(Oht,"XLMConfig"),Oht.forEach(t),Edo=r(M$e," (XLM model)"),M$e.forEach(t),Cdo=i(L),ph=n(L,"LI",{});var E$e=s(ph);ede=n(E$e,"STRONG",{});var Vht=s(ede);wdo=r(Vht,"xlm-prophetnet"),Vht.forEach(t),Ado=r(E$e," \u2014 "),bI=n(E$e,"A",{href:!0});var Xht=s(bI);Ldo=r(Xht,"XLMProphetNetConfig"),Xht.forEach(t),ydo=r(E$e," (XLM-ProphetNet model)"),E$e.forEach(t),xdo=i(L),_h=n(L,"LI",{});var C$e=s(_h);ode=n(C$e,"STRONG",{});var zht=s(ode);$do=r(zht,"xlm-roberta"),zht.forEach(t),kdo=r(C$e," \u2014 "),vI=n(C$e,"A",{href:!0});var Wht=s(vI);Sdo=r(Wht,"XLMRobertaConfig"),Wht.forEach(t),Rdo=r(C$e," (XLM-RoBERTa model)"),C$e.forEach(t),Pdo=i(L),uh=n(L,"LI",{});var w$e=s(uh);rde=n(w$e,"STRONG",{});var Qht=s(rde);Bdo=r(Qht,"xlm-roberta-xl"),Qht.forEach(t),Ido=r(w$e," \u2014 "),FI=n(w$e,"A",{href:!0});var Uht=s(FI);Ndo=r(Uht,"XLMRobertaXLConfig"),Uht.forEach(t),qdo=r(w$e," (XLM-RoBERTa-XL model)"),w$e.forEach(t),jdo=i(L),bh=n(L,"LI",{});var A$e=s(bh);tde=n(A$e,"STRONG",{});var Hht=s(tde);Ddo=r(Hht,"xlnet"),Hht.forEach(t),Gdo=r(A$e," \u2014 "),TI=n(A$e,"A",{href:!0});var Jht=s(TI);Odo=r(Jht,"XLNetConfig"),Jht.forEach(t),Vdo=r(A$e," (XLNet model)"),A$e.forEach(t),Xdo=i(L),vh=n(L,"LI",{});var L$e=s(vh);ade=n(L$e,"STRONG",{});var Yht=s(ade);zdo=r(Yht,"yolos"),Yht.forEach(t),Wdo=r(L$e," \u2014 "),MI=n(L$e,"A",{href:!0});var Kht=s(MI);Qdo=r(Kht,"YolosConfig"),Kht.forEach(t),Udo=r(L$e," (YOLOS model)"),L$e.forEach(t),Hdo=i(L),Fh=n(L,"LI",{});var y$e=s(Fh);nde=n(y$e,"STRONG",{});var Zht=s(nde);Jdo=r(Zht,"yoso"),Zht.forEach(t),Ydo=r(y$e," \u2014 "),EI=n(y$e,"A",{href:!0});var ept=s(EI);Kdo=r(ept,"YosoConfig"),ept.forEach(t),Zdo=r(y$e," (YOSO model)"),y$e.forEach(t),L.forEach(t),eco=i(ct),T(Th.$$.fragment,ct),ct.forEach(t),oco=i(dt),Mh=n(dt,"DIV",{class:!0});var JHe=s(Mh);T(FL.$$.fragment,JHe),rco=i(JHe),sde=n(JHe,"P",{});var opt=s(sde);tco=r(opt,"Register a new configuration for this class."),opt.forEach(t),JHe.forEach(t),dt.forEach(t),QQe=i(f),Ki=n(f,"H2",{class:!0});var YHe=s(Ki);Eh=n(YHe,"A",{id:!0,class:!0,href:!0});var rpt=s(Eh);lde=n(rpt,"SPAN",{});var tpt=s(lde);T(TL.$$.fragment,tpt),tpt.forEach(t),rpt.forEach(t),aco=i(YHe),ide=n(YHe,"SPAN",{});var apt=s(ide);nco=r(apt,"AutoTokenizer"),apt.forEach(t),YHe.forEach(t),UQe=i(f),xo=n(f,"DIV",{class:!0});var cl=s(xo);T(ML.$$.fragment,cl),sco=i(cl),EL=n(cl,"P",{});var KHe=s(EL);lco=r(KHe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),CI=n(KHe,"A",{href:!0});var npt=s(CI);ico=r(npt,"AutoTokenizer.from_pretrained()"),npt.forEach(t),dco=r(KHe," class method."),KHe.forEach(t),cco=i(cl),CL=n(cl,"P",{});var ZHe=s(CL);fco=r(ZHe,"This class cannot be instantiated directly using "),dde=n(ZHe,"CODE",{});var spt=s(dde);mco=r(spt,"__init__()"),spt.forEach(t),gco=r(ZHe," (throws an error)."),ZHe.forEach(t),hco=i(cl),Sr=n(cl,"DIV",{class:!0});var fl=s(Sr);T(wL.$$.fragment,fl),pco=i(fl),cde=n(fl,"P",{});var lpt=s(cde);_co=r(lpt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lpt.forEach(t),uco=i(fl),Ga=n(fl,"P",{});var cw=s(Ga);bco=r(cw,"The tokenizer class to instantiate is selected based on the "),fde=n(cw,"CODE",{});var ipt=s(fde);vco=r(ipt,"model_type"),ipt.forEach(t),Fco=r(cw,` property of the config object (either
passed as an argument or loaded from `),mde=n(cw,"CODE",{});var dpt=s(mde);Tco=r(dpt,"pretrained_model_name_or_path"),dpt.forEach(t),Mco=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=n(cw,"CODE",{});var cpt=s(gde);Eco=r(cpt,"pretrained_model_name_or_path"),cpt.forEach(t),Cco=r(cw,":"),cw.forEach(t),wco=i(fl),k=n(fl,"UL",{});var S=s(k);Hn=n(S,"LI",{});var OS=s(Hn);hde=n(OS,"STRONG",{});var fpt=s(hde);Aco=r(fpt,"albert"),fpt.forEach(t),Lco=r(OS," \u2014 "),wI=n(OS,"A",{href:!0});var mpt=s(wI);yco=r(mpt,"AlbertTokenizer"),mpt.forEach(t),xco=r(OS," or "),AI=n(OS,"A",{href:!0});var gpt=s(AI);$co=r(gpt,"AlbertTokenizerFast"),gpt.forEach(t),kco=r(OS," (ALBERT model)"),OS.forEach(t),Sco=i(S),Jn=n(S,"LI",{});var VS=s(Jn);pde=n(VS,"STRONG",{});var hpt=s(pde);Rco=r(hpt,"bart"),hpt.forEach(t),Pco=r(VS," \u2014 "),LI=n(VS,"A",{href:!0});var ppt=s(LI);Bco=r(ppt,"BartTokenizer"),ppt.forEach(t),Ico=r(VS," or "),yI=n(VS,"A",{href:!0});var _pt=s(yI);Nco=r(_pt,"BartTokenizerFast"),_pt.forEach(t),qco=r(VS," (BART model)"),VS.forEach(t),jco=i(S),Yn=n(S,"LI",{});var XS=s(Yn);_de=n(XS,"STRONG",{});var upt=s(_de);Dco=r(upt,"barthez"),upt.forEach(t),Gco=r(XS," \u2014 "),xI=n(XS,"A",{href:!0});var bpt=s(xI);Oco=r(bpt,"BarthezTokenizer"),bpt.forEach(t),Vco=r(XS," or "),$I=n(XS,"A",{href:!0});var vpt=s($I);Xco=r(vpt,"BarthezTokenizerFast"),vpt.forEach(t),zco=r(XS," (BARThez model)"),XS.forEach(t),Wco=i(S),Ch=n(S,"LI",{});var x$e=s(Ch);ude=n(x$e,"STRONG",{});var Fpt=s(ude);Qco=r(Fpt,"bartpho"),Fpt.forEach(t),Uco=r(x$e," \u2014 "),kI=n(x$e,"A",{href:!0});var Tpt=s(kI);Hco=r(Tpt,"BartphoTokenizer"),Tpt.forEach(t),Jco=r(x$e," (BARTpho model)"),x$e.forEach(t),Yco=i(S),Kn=n(S,"LI",{});var zS=s(Kn);bde=n(zS,"STRONG",{});var Mpt=s(bde);Kco=r(Mpt,"bert"),Mpt.forEach(t),Zco=r(zS," \u2014 "),SI=n(zS,"A",{href:!0});var Ept=s(SI);efo=r(Ept,"BertTokenizer"),Ept.forEach(t),ofo=r(zS," or "),RI=n(zS,"A",{href:!0});var Cpt=s(RI);rfo=r(Cpt,"BertTokenizerFast"),Cpt.forEach(t),tfo=r(zS," (BERT model)"),zS.forEach(t),afo=i(S),wh=n(S,"LI",{});var $$e=s(wh);vde=n($$e,"STRONG",{});var wpt=s(vde);nfo=r(wpt,"bert-generation"),wpt.forEach(t),sfo=r($$e," \u2014 "),PI=n($$e,"A",{href:!0});var Apt=s(PI);lfo=r(Apt,"BertGenerationTokenizer"),Apt.forEach(t),ifo=r($$e," (Bert Generation model)"),$$e.forEach(t),dfo=i(S),Ah=n(S,"LI",{});var k$e=s(Ah);Fde=n(k$e,"STRONG",{});var Lpt=s(Fde);cfo=r(Lpt,"bert-japanese"),Lpt.forEach(t),ffo=r(k$e," \u2014 "),BI=n(k$e,"A",{href:!0});var ypt=s(BI);mfo=r(ypt,"BertJapaneseTokenizer"),ypt.forEach(t),gfo=r(k$e," (BertJapanese model)"),k$e.forEach(t),hfo=i(S),Lh=n(S,"LI",{});var S$e=s(Lh);Tde=n(S$e,"STRONG",{});var xpt=s(Tde);pfo=r(xpt,"bertweet"),xpt.forEach(t),_fo=r(S$e," \u2014 "),II=n(S$e,"A",{href:!0});var $pt=s(II);ufo=r($pt,"BertweetTokenizer"),$pt.forEach(t),bfo=r(S$e," (BERTweet model)"),S$e.forEach(t),vfo=i(S),Zn=n(S,"LI",{});var WS=s(Zn);Mde=n(WS,"STRONG",{});var kpt=s(Mde);Ffo=r(kpt,"big_bird"),kpt.forEach(t),Tfo=r(WS," \u2014 "),NI=n(WS,"A",{href:!0});var Spt=s(NI);Mfo=r(Spt,"BigBirdTokenizer"),Spt.forEach(t),Efo=r(WS," or "),qI=n(WS,"A",{href:!0});var Rpt=s(qI);Cfo=r(Rpt,"BigBirdTokenizerFast"),Rpt.forEach(t),wfo=r(WS," (BigBird model)"),WS.forEach(t),Afo=i(S),es=n(S,"LI",{});var QS=s(es);Ede=n(QS,"STRONG",{});var Ppt=s(Ede);Lfo=r(Ppt,"bigbird_pegasus"),Ppt.forEach(t),yfo=r(QS," \u2014 "),jI=n(QS,"A",{href:!0});var Bpt=s(jI);xfo=r(Bpt,"PegasusTokenizer"),Bpt.forEach(t),$fo=r(QS," or "),DI=n(QS,"A",{href:!0});var Ipt=s(DI);kfo=r(Ipt,"PegasusTokenizerFast"),Ipt.forEach(t),Sfo=r(QS," (BigBird-Pegasus model)"),QS.forEach(t),Rfo=i(S),os=n(S,"LI",{});var US=s(os);Cde=n(US,"STRONG",{});var Npt=s(Cde);Pfo=r(Npt,"blenderbot"),Npt.forEach(t),Bfo=r(US," \u2014 "),GI=n(US,"A",{href:!0});var qpt=s(GI);Ifo=r(qpt,"BlenderbotTokenizer"),qpt.forEach(t),Nfo=r(US," or "),OI=n(US,"A",{href:!0});var jpt=s(OI);qfo=r(jpt,"BlenderbotTokenizerFast"),jpt.forEach(t),jfo=r(US," (Blenderbot model)"),US.forEach(t),Dfo=i(S),yh=n(S,"LI",{});var R$e=s(yh);wde=n(R$e,"STRONG",{});var Dpt=s(wde);Gfo=r(Dpt,"blenderbot-small"),Dpt.forEach(t),Ofo=r(R$e," \u2014 "),VI=n(R$e,"A",{href:!0});var Gpt=s(VI);Vfo=r(Gpt,"BlenderbotSmallTokenizer"),Gpt.forEach(t),Xfo=r(R$e," (BlenderbotSmall model)"),R$e.forEach(t),zfo=i(S),xh=n(S,"LI",{});var P$e=s(xh);Ade=n(P$e,"STRONG",{});var Opt=s(Ade);Wfo=r(Opt,"bloom"),Opt.forEach(t),Qfo=r(P$e," \u2014 "),XI=n(P$e,"A",{href:!0});var Vpt=s(XI);Ufo=r(Vpt,"BloomTokenizerFast"),Vpt.forEach(t),Hfo=r(P$e," (BLOOM model)"),P$e.forEach(t),Jfo=i(S),$h=n(S,"LI",{});var B$e=s($h);Lde=n(B$e,"STRONG",{});var Xpt=s(Lde);Yfo=r(Xpt,"byt5"),Xpt.forEach(t),Kfo=r(B$e," \u2014 "),zI=n(B$e,"A",{href:!0});var zpt=s(zI);Zfo=r(zpt,"ByT5Tokenizer"),zpt.forEach(t),emo=r(B$e," (ByT5 model)"),B$e.forEach(t),omo=i(S),rs=n(S,"LI",{});var HS=s(rs);yde=n(HS,"STRONG",{});var Wpt=s(yde);rmo=r(Wpt,"camembert"),Wpt.forEach(t),tmo=r(HS," \u2014 "),WI=n(HS,"A",{href:!0});var Qpt=s(WI);amo=r(Qpt,"CamembertTokenizer"),Qpt.forEach(t),nmo=r(HS," or "),QI=n(HS,"A",{href:!0});var Upt=s(QI);smo=r(Upt,"CamembertTokenizerFast"),Upt.forEach(t),lmo=r(HS," (CamemBERT model)"),HS.forEach(t),imo=i(S),kh=n(S,"LI",{});var I$e=s(kh);xde=n(I$e,"STRONG",{});var Hpt=s(xde);dmo=r(Hpt,"canine"),Hpt.forEach(t),cmo=r(I$e," \u2014 "),UI=n(I$e,"A",{href:!0});var Jpt=s(UI);fmo=r(Jpt,"CanineTokenizer"),Jpt.forEach(t),mmo=r(I$e," (CANINE model)"),I$e.forEach(t),gmo=i(S),ts=n(S,"LI",{});var JS=s(ts);$de=n(JS,"STRONG",{});var Ypt=s($de);hmo=r(Ypt,"clip"),Ypt.forEach(t),pmo=r(JS," \u2014 "),HI=n(JS,"A",{href:!0});var Kpt=s(HI);_mo=r(Kpt,"CLIPTokenizer"),Kpt.forEach(t),umo=r(JS," or "),JI=n(JS,"A",{href:!0});var Zpt=s(JI);bmo=r(Zpt,"CLIPTokenizerFast"),Zpt.forEach(t),vmo=r(JS," (CLIP model)"),JS.forEach(t),Fmo=i(S),as=n(S,"LI",{});var YS=s(as);kde=n(YS,"STRONG",{});var e_t=s(kde);Tmo=r(e_t,"codegen"),e_t.forEach(t),Mmo=r(YS," \u2014 "),YI=n(YS,"A",{href:!0});var o_t=s(YI);Emo=r(o_t,"CodeGenTokenizer"),o_t.forEach(t),Cmo=r(YS," or "),KI=n(YS,"A",{href:!0});var r_t=s(KI);wmo=r(r_t,"CodeGenTokenizerFast"),r_t.forEach(t),Amo=r(YS," (CodeGen model)"),YS.forEach(t),Lmo=i(S),ns=n(S,"LI",{});var KS=s(ns);Sde=n(KS,"STRONG",{});var t_t=s(Sde);ymo=r(t_t,"convbert"),t_t.forEach(t),xmo=r(KS," \u2014 "),ZI=n(KS,"A",{href:!0});var a_t=s(ZI);$mo=r(a_t,"ConvBertTokenizer"),a_t.forEach(t),kmo=r(KS," or "),eN=n(KS,"A",{href:!0});var n_t=s(eN);Smo=r(n_t,"ConvBertTokenizerFast"),n_t.forEach(t),Rmo=r(KS," (ConvBERT model)"),KS.forEach(t),Pmo=i(S),ss=n(S,"LI",{});var ZS=s(ss);Rde=n(ZS,"STRONG",{});var s_t=s(Rde);Bmo=r(s_t,"cpm"),s_t.forEach(t),Imo=r(ZS," \u2014 "),oN=n(ZS,"A",{href:!0});var l_t=s(oN);Nmo=r(l_t,"CpmTokenizer"),l_t.forEach(t),qmo=r(ZS," or "),rN=n(ZS,"A",{href:!0});var i_t=s(rN);jmo=r(i_t,"CpmTokenizerFast"),i_t.forEach(t),Dmo=r(ZS," (CPM model)"),ZS.forEach(t),Gmo=i(S),Sh=n(S,"LI",{});var N$e=s(Sh);Pde=n(N$e,"STRONG",{});var d_t=s(Pde);Omo=r(d_t,"ctrl"),d_t.forEach(t),Vmo=r(N$e," \u2014 "),tN=n(N$e,"A",{href:!0});var c_t=s(tN);Xmo=r(c_t,"CTRLTokenizer"),c_t.forEach(t),zmo=r(N$e," (CTRL model)"),N$e.forEach(t),Wmo=i(S),ls=n(S,"LI",{});var eR=s(ls);Bde=n(eR,"STRONG",{});var f_t=s(Bde);Qmo=r(f_t,"data2vec-text"),f_t.forEach(t),Umo=r(eR," \u2014 "),aN=n(eR,"A",{href:!0});var m_t=s(aN);Hmo=r(m_t,"RobertaTokenizer"),m_t.forEach(t),Jmo=r(eR," or "),nN=n(eR,"A",{href:!0});var g_t=s(nN);Ymo=r(g_t,"RobertaTokenizerFast"),g_t.forEach(t),Kmo=r(eR," (Data2VecText model)"),eR.forEach(t),Zmo=i(S),is=n(S,"LI",{});var oR=s(is);Ide=n(oR,"STRONG",{});var h_t=s(Ide);ego=r(h_t,"deberta"),h_t.forEach(t),ogo=r(oR," \u2014 "),sN=n(oR,"A",{href:!0});var p_t=s(sN);rgo=r(p_t,"DebertaTokenizer"),p_t.forEach(t),tgo=r(oR," or "),lN=n(oR,"A",{href:!0});var __t=s(lN);ago=r(__t,"DebertaTokenizerFast"),__t.forEach(t),ngo=r(oR," (DeBERTa model)"),oR.forEach(t),sgo=i(S),ds=n(S,"LI",{});var rR=s(ds);Nde=n(rR,"STRONG",{});var u_t=s(Nde);lgo=r(u_t,"deberta-v2"),u_t.forEach(t),igo=r(rR," \u2014 "),iN=n(rR,"A",{href:!0});var b_t=s(iN);dgo=r(b_t,"DebertaV2Tokenizer"),b_t.forEach(t),cgo=r(rR," or "),dN=n(rR,"A",{href:!0});var v_t=s(dN);fgo=r(v_t,"DebertaV2TokenizerFast"),v_t.forEach(t),mgo=r(rR," (DeBERTa-v2 model)"),rR.forEach(t),ggo=i(S),cs=n(S,"LI",{});var tR=s(cs);qde=n(tR,"STRONG",{});var F_t=s(qde);hgo=r(F_t,"distilbert"),F_t.forEach(t),pgo=r(tR," \u2014 "),cN=n(tR,"A",{href:!0});var T_t=s(cN);_go=r(T_t,"DistilBertTokenizer"),T_t.forEach(t),ugo=r(tR," or "),fN=n(tR,"A",{href:!0});var M_t=s(fN);bgo=r(M_t,"DistilBertTokenizerFast"),M_t.forEach(t),vgo=r(tR," (DistilBERT model)"),tR.forEach(t),Fgo=i(S),fs=n(S,"LI",{});var aR=s(fs);jde=n(aR,"STRONG",{});var E_t=s(jde);Tgo=r(E_t,"dpr"),E_t.forEach(t),Mgo=r(aR," \u2014 "),mN=n(aR,"A",{href:!0});var C_t=s(mN);Ego=r(C_t,"DPRQuestionEncoderTokenizer"),C_t.forEach(t),Cgo=r(aR," or "),gN=n(aR,"A",{href:!0});var w_t=s(gN);wgo=r(w_t,"DPRQuestionEncoderTokenizerFast"),w_t.forEach(t),Ago=r(aR," (DPR model)"),aR.forEach(t),Lgo=i(S),ms=n(S,"LI",{});var nR=s(ms);Dde=n(nR,"STRONG",{});var A_t=s(Dde);ygo=r(A_t,"electra"),A_t.forEach(t),xgo=r(nR," \u2014 "),hN=n(nR,"A",{href:!0});var L_t=s(hN);$go=r(L_t,"ElectraTokenizer"),L_t.forEach(t),kgo=r(nR," or "),pN=n(nR,"A",{href:!0});var y_t=s(pN);Sgo=r(y_t,"ElectraTokenizerFast"),y_t.forEach(t),Rgo=r(nR," (ELECTRA model)"),nR.forEach(t),Pgo=i(S),Rh=n(S,"LI",{});var q$e=s(Rh);Gde=n(q$e,"STRONG",{});var x_t=s(Gde);Bgo=r(x_t,"flaubert"),x_t.forEach(t),Igo=r(q$e," \u2014 "),_N=n(q$e,"A",{href:!0});var $_t=s(_N);Ngo=r($_t,"FlaubertTokenizer"),$_t.forEach(t),qgo=r(q$e," (FlauBERT model)"),q$e.forEach(t),jgo=i(S),gs=n(S,"LI",{});var sR=s(gs);Ode=n(sR,"STRONG",{});var k_t=s(Ode);Dgo=r(k_t,"fnet"),k_t.forEach(t),Ggo=r(sR," \u2014 "),uN=n(sR,"A",{href:!0});var S_t=s(uN);Ogo=r(S_t,"FNetTokenizer"),S_t.forEach(t),Vgo=r(sR," or "),bN=n(sR,"A",{href:!0});var R_t=s(bN);Xgo=r(R_t,"FNetTokenizerFast"),R_t.forEach(t),zgo=r(sR," (FNet model)"),sR.forEach(t),Wgo=i(S),Ph=n(S,"LI",{});var j$e=s(Ph);Vde=n(j$e,"STRONG",{});var P_t=s(Vde);Qgo=r(P_t,"fsmt"),P_t.forEach(t),Ugo=r(j$e," \u2014 "),vN=n(j$e,"A",{href:!0});var B_t=s(vN);Hgo=r(B_t,"FSMTTokenizer"),B_t.forEach(t),Jgo=r(j$e," (FairSeq Machine-Translation model)"),j$e.forEach(t),Ygo=i(S),hs=n(S,"LI",{});var lR=s(hs);Xde=n(lR,"STRONG",{});var I_t=s(Xde);Kgo=r(I_t,"funnel"),I_t.forEach(t),Zgo=r(lR," \u2014 "),FN=n(lR,"A",{href:!0});var N_t=s(FN);eho=r(N_t,"FunnelTokenizer"),N_t.forEach(t),oho=r(lR," or "),TN=n(lR,"A",{href:!0});var q_t=s(TN);rho=r(q_t,"FunnelTokenizerFast"),q_t.forEach(t),tho=r(lR," (Funnel Transformer model)"),lR.forEach(t),aho=i(S),ps=n(S,"LI",{});var iR=s(ps);zde=n(iR,"STRONG",{});var j_t=s(zde);nho=r(j_t,"gpt2"),j_t.forEach(t),sho=r(iR," \u2014 "),MN=n(iR,"A",{href:!0});var D_t=s(MN);lho=r(D_t,"GPT2Tokenizer"),D_t.forEach(t),iho=r(iR," or "),EN=n(iR,"A",{href:!0});var G_t=s(EN);dho=r(G_t,"GPT2TokenizerFast"),G_t.forEach(t),cho=r(iR," (OpenAI GPT-2 model)"),iR.forEach(t),fho=i(S),_s=n(S,"LI",{});var dR=s(_s);Wde=n(dR,"STRONG",{});var O_t=s(Wde);mho=r(O_t,"gpt_neo"),O_t.forEach(t),gho=r(dR," \u2014 "),CN=n(dR,"A",{href:!0});var V_t=s(CN);hho=r(V_t,"GPT2Tokenizer"),V_t.forEach(t),pho=r(dR," or "),wN=n(dR,"A",{href:!0});var X_t=s(wN);_ho=r(X_t,"GPT2TokenizerFast"),X_t.forEach(t),uho=r(dR," (GPT Neo model)"),dR.forEach(t),bho=i(S),Bh=n(S,"LI",{});var D$e=s(Bh);Qde=n(D$e,"STRONG",{});var z_t=s(Qde);vho=r(z_t,"gpt_neox"),z_t.forEach(t),Fho=r(D$e," \u2014 "),AN=n(D$e,"A",{href:!0});var W_t=s(AN);Tho=r(W_t,"GPTNeoXTokenizerFast"),W_t.forEach(t),Mho=r(D$e," (GPT NeoX model)"),D$e.forEach(t),Eho=i(S),us=n(S,"LI",{});var cR=s(us);Ude=n(cR,"STRONG",{});var Q_t=s(Ude);Cho=r(Q_t,"gptj"),Q_t.forEach(t),who=r(cR," \u2014 "),LN=n(cR,"A",{href:!0});var U_t=s(LN);Aho=r(U_t,"GPT2Tokenizer"),U_t.forEach(t),Lho=r(cR," or "),yN=n(cR,"A",{href:!0});var H_t=s(yN);yho=r(H_t,"GPT2TokenizerFast"),H_t.forEach(t),xho=r(cR," (GPT-J model)"),cR.forEach(t),$ho=i(S),bs=n(S,"LI",{});var fR=s(bs);Hde=n(fR,"STRONG",{});var J_t=s(Hde);kho=r(J_t,"groupvit"),J_t.forEach(t),Sho=r(fR," \u2014 "),xN=n(fR,"A",{href:!0});var Y_t=s(xN);Rho=r(Y_t,"CLIPTokenizer"),Y_t.forEach(t),Pho=r(fR," or "),$N=n(fR,"A",{href:!0});var K_t=s($N);Bho=r(K_t,"CLIPTokenizerFast"),K_t.forEach(t),Iho=r(fR," (GroupViT model)"),fR.forEach(t),Nho=i(S),vs=n(S,"LI",{});var mR=s(vs);Jde=n(mR,"STRONG",{});var Z_t=s(Jde);qho=r(Z_t,"herbert"),Z_t.forEach(t),jho=r(mR," \u2014 "),kN=n(mR,"A",{href:!0});var eut=s(kN);Dho=r(eut,"HerbertTokenizer"),eut.forEach(t),Gho=r(mR," or "),SN=n(mR,"A",{href:!0});var out=s(SN);Oho=r(out,"HerbertTokenizerFast"),out.forEach(t),Vho=r(mR," (HerBERT model)"),mR.forEach(t),Xho=i(S),Ih=n(S,"LI",{});var G$e=s(Ih);Yde=n(G$e,"STRONG",{});var rut=s(Yde);zho=r(rut,"hubert"),rut.forEach(t),Who=r(G$e," \u2014 "),RN=n(G$e,"A",{href:!0});var tut=s(RN);Qho=r(tut,"Wav2Vec2CTCTokenizer"),tut.forEach(t),Uho=r(G$e," (Hubert model)"),G$e.forEach(t),Hho=i(S),Fs=n(S,"LI",{});var gR=s(Fs);Kde=n(gR,"STRONG",{});var aut=s(Kde);Jho=r(aut,"ibert"),aut.forEach(t),Yho=r(gR," \u2014 "),PN=n(gR,"A",{href:!0});var nut=s(PN);Kho=r(nut,"RobertaTokenizer"),nut.forEach(t),Zho=r(gR," or "),BN=n(gR,"A",{href:!0});var sut=s(BN);epo=r(sut,"RobertaTokenizerFast"),sut.forEach(t),opo=r(gR," (I-BERT model)"),gR.forEach(t),rpo=i(S),Ts=n(S,"LI",{});var hR=s(Ts);Zde=n(hR,"STRONG",{});var lut=s(Zde);tpo=r(lut,"layoutlm"),lut.forEach(t),apo=r(hR," \u2014 "),IN=n(hR,"A",{href:!0});var iut=s(IN);npo=r(iut,"LayoutLMTokenizer"),iut.forEach(t),spo=r(hR," or "),NN=n(hR,"A",{href:!0});var dut=s(NN);lpo=r(dut,"LayoutLMTokenizerFast"),dut.forEach(t),ipo=r(hR," (LayoutLM model)"),hR.forEach(t),dpo=i(S),Ms=n(S,"LI",{});var pR=s(Ms);ece=n(pR,"STRONG",{});var cut=s(ece);cpo=r(cut,"layoutlmv2"),cut.forEach(t),fpo=r(pR," \u2014 "),qN=n(pR,"A",{href:!0});var fut=s(qN);mpo=r(fut,"LayoutLMv2Tokenizer"),fut.forEach(t),gpo=r(pR," or "),jN=n(pR,"A",{href:!0});var mut=s(jN);hpo=r(mut,"LayoutLMv2TokenizerFast"),mut.forEach(t),ppo=r(pR," (LayoutLMv2 model)"),pR.forEach(t),_po=i(S),Es=n(S,"LI",{});var _R=s(Es);oce=n(_R,"STRONG",{});var gut=s(oce);upo=r(gut,"layoutlmv3"),gut.forEach(t),bpo=r(_R," \u2014 "),DN=n(_R,"A",{href:!0});var hut=s(DN);vpo=r(hut,"LayoutLMv3Tokenizer"),hut.forEach(t),Fpo=r(_R," or "),GN=n(_R,"A",{href:!0});var put=s(GN);Tpo=r(put,"LayoutLMv3TokenizerFast"),put.forEach(t),Mpo=r(_R," (LayoutLMv3 model)"),_R.forEach(t),Epo=i(S),Cs=n(S,"LI",{});var uR=s(Cs);rce=n(uR,"STRONG",{});var _ut=s(rce);Cpo=r(_ut,"layoutxlm"),_ut.forEach(t),wpo=r(uR," \u2014 "),ON=n(uR,"A",{href:!0});var uut=s(ON);Apo=r(uut,"LayoutXLMTokenizer"),uut.forEach(t),Lpo=r(uR," or "),VN=n(uR,"A",{href:!0});var but=s(VN);ypo=r(but,"LayoutXLMTokenizerFast"),but.forEach(t),xpo=r(uR," (LayoutXLM model)"),uR.forEach(t),$po=i(S),ws=n(S,"LI",{});var bR=s(ws);tce=n(bR,"STRONG",{});var vut=s(tce);kpo=r(vut,"led"),vut.forEach(t),Spo=r(bR," \u2014 "),XN=n(bR,"A",{href:!0});var Fut=s(XN);Rpo=r(Fut,"LEDTokenizer"),Fut.forEach(t),Ppo=r(bR," or "),zN=n(bR,"A",{href:!0});var Tut=s(zN);Bpo=r(Tut,"LEDTokenizerFast"),Tut.forEach(t),Ipo=r(bR," (LED model)"),bR.forEach(t),Npo=i(S),As=n(S,"LI",{});var vR=s(As);ace=n(vR,"STRONG",{});var Mut=s(ace);qpo=r(Mut,"longformer"),Mut.forEach(t),jpo=r(vR," \u2014 "),WN=n(vR,"A",{href:!0});var Eut=s(WN);Dpo=r(Eut,"LongformerTokenizer"),Eut.forEach(t),Gpo=r(vR," or "),QN=n(vR,"A",{href:!0});var Cut=s(QN);Opo=r(Cut,"LongformerTokenizerFast"),Cut.forEach(t),Vpo=r(vR," (Longformer model)"),vR.forEach(t),Xpo=i(S),Ls=n(S,"LI",{});var FR=s(Ls);nce=n(FR,"STRONG",{});var wut=s(nce);zpo=r(wut,"longt5"),wut.forEach(t),Wpo=r(FR," \u2014 "),UN=n(FR,"A",{href:!0});var Aut=s(UN);Qpo=r(Aut,"T5Tokenizer"),Aut.forEach(t),Upo=r(FR," or "),HN=n(FR,"A",{href:!0});var Lut=s(HN);Hpo=r(Lut,"T5TokenizerFast"),Lut.forEach(t),Jpo=r(FR," (LongT5 model)"),FR.forEach(t),Ypo=i(S),Nh=n(S,"LI",{});var O$e=s(Nh);sce=n(O$e,"STRONG",{});var yut=s(sce);Kpo=r(yut,"luke"),yut.forEach(t),Zpo=r(O$e," \u2014 "),JN=n(O$e,"A",{href:!0});var xut=s(JN);e_o=r(xut,"LukeTokenizer"),xut.forEach(t),o_o=r(O$e," (LUKE model)"),O$e.forEach(t),r_o=i(S),ys=n(S,"LI",{});var TR=s(ys);lce=n(TR,"STRONG",{});var $ut=s(lce);t_o=r($ut,"lxmert"),$ut.forEach(t),a_o=r(TR," \u2014 "),YN=n(TR,"A",{href:!0});var kut=s(YN);n_o=r(kut,"LxmertTokenizer"),kut.forEach(t),s_o=r(TR," or "),KN=n(TR,"A",{href:!0});var Sut=s(KN);l_o=r(Sut,"LxmertTokenizerFast"),Sut.forEach(t),i_o=r(TR," (LXMERT model)"),TR.forEach(t),d_o=i(S),qh=n(S,"LI",{});var V$e=s(qh);ice=n(V$e,"STRONG",{});var Rut=s(ice);c_o=r(Rut,"m2m_100"),Rut.forEach(t),f_o=r(V$e," \u2014 "),ZN=n(V$e,"A",{href:!0});var Put=s(ZN);m_o=r(Put,"M2M100Tokenizer"),Put.forEach(t),g_o=r(V$e," (M2M100 model)"),V$e.forEach(t),h_o=i(S),jh=n(S,"LI",{});var X$e=s(jh);dce=n(X$e,"STRONG",{});var But=s(dce);p_o=r(But,"marian"),But.forEach(t),__o=r(X$e," \u2014 "),eq=n(X$e,"A",{href:!0});var Iut=s(eq);u_o=r(Iut,"MarianTokenizer"),Iut.forEach(t),b_o=r(X$e," (Marian model)"),X$e.forEach(t),v_o=i(S),xs=n(S,"LI",{});var MR=s(xs);cce=n(MR,"STRONG",{});var Nut=s(cce);F_o=r(Nut,"mbart"),Nut.forEach(t),T_o=r(MR," \u2014 "),oq=n(MR,"A",{href:!0});var qut=s(oq);M_o=r(qut,"MBartTokenizer"),qut.forEach(t),E_o=r(MR," or "),rq=n(MR,"A",{href:!0});var jut=s(rq);C_o=r(jut,"MBartTokenizerFast"),jut.forEach(t),w_o=r(MR," (mBART model)"),MR.forEach(t),A_o=i(S),$s=n(S,"LI",{});var ER=s($s);fce=n(ER,"STRONG",{});var Dut=s(fce);L_o=r(Dut,"mbart50"),Dut.forEach(t),y_o=r(ER," \u2014 "),tq=n(ER,"A",{href:!0});var Gut=s(tq);x_o=r(Gut,"MBart50Tokenizer"),Gut.forEach(t),$_o=r(ER," or "),aq=n(ER,"A",{href:!0});var Out=s(aq);k_o=r(Out,"MBart50TokenizerFast"),Out.forEach(t),S_o=r(ER," (mBART-50 model)"),ER.forEach(t),R_o=i(S),ks=n(S,"LI",{});var CR=s(ks);mce=n(CR,"STRONG",{});var Vut=s(mce);P_o=r(Vut,"megatron-bert"),Vut.forEach(t),B_o=r(CR," \u2014 "),nq=n(CR,"A",{href:!0});var Xut=s(nq);I_o=r(Xut,"BertTokenizer"),Xut.forEach(t),N_o=r(CR," or "),sq=n(CR,"A",{href:!0});var zut=s(sq);q_o=r(zut,"BertTokenizerFast"),zut.forEach(t),j_o=r(CR," (Megatron-BERT model)"),CR.forEach(t),D_o=i(S),Dh=n(S,"LI",{});var z$e=s(Dh);gce=n(z$e,"STRONG",{});var Wut=s(gce);G_o=r(Wut,"mluke"),Wut.forEach(t),O_o=r(z$e," \u2014 "),lq=n(z$e,"A",{href:!0});var Qut=s(lq);V_o=r(Qut,"MLukeTokenizer"),Qut.forEach(t),X_o=r(z$e," (mLUKE model)"),z$e.forEach(t),z_o=i(S),Ss=n(S,"LI",{});var wR=s(Ss);hce=n(wR,"STRONG",{});var Uut=s(hce);W_o=r(Uut,"mobilebert"),Uut.forEach(t),Q_o=r(wR," \u2014 "),iq=n(wR,"A",{href:!0});var Hut=s(iq);U_o=r(Hut,"MobileBertTokenizer"),Hut.forEach(t),H_o=r(wR," or "),dq=n(wR,"A",{href:!0});var Jut=s(dq);J_o=r(Jut,"MobileBertTokenizerFast"),Jut.forEach(t),Y_o=r(wR," (MobileBERT model)"),wR.forEach(t),K_o=i(S),Rs=n(S,"LI",{});var AR=s(Rs);pce=n(AR,"STRONG",{});var Yut=s(pce);Z_o=r(Yut,"mpnet"),Yut.forEach(t),euo=r(AR," \u2014 "),cq=n(AR,"A",{href:!0});var Kut=s(cq);ouo=r(Kut,"MPNetTokenizer"),Kut.forEach(t),ruo=r(AR," or "),fq=n(AR,"A",{href:!0});var Zut=s(fq);tuo=r(Zut,"MPNetTokenizerFast"),Zut.forEach(t),auo=r(AR," (MPNet model)"),AR.forEach(t),nuo=i(S),Ps=n(S,"LI",{});var LR=s(Ps);_ce=n(LR,"STRONG",{});var e1t=s(_ce);suo=r(e1t,"mt5"),e1t.forEach(t),luo=r(LR," \u2014 "),mq=n(LR,"A",{href:!0});var o1t=s(mq);iuo=r(o1t,"MT5Tokenizer"),o1t.forEach(t),duo=r(LR," or "),gq=n(LR,"A",{href:!0});var r1t=s(gq);cuo=r(r1t,"MT5TokenizerFast"),r1t.forEach(t),fuo=r(LR," (MT5 model)"),LR.forEach(t),muo=i(S),Bs=n(S,"LI",{});var yR=s(Bs);uce=n(yR,"STRONG",{});var t1t=s(uce);guo=r(t1t,"mvp"),t1t.forEach(t),huo=r(yR," \u2014 "),hq=n(yR,"A",{href:!0});var a1t=s(hq);puo=r(a1t,"MvpTokenizer"),a1t.forEach(t),_uo=r(yR," or "),pq=n(yR,"A",{href:!0});var n1t=s(pq);uuo=r(n1t,"MvpTokenizerFast"),n1t.forEach(t),buo=r(yR," (MVP model)"),yR.forEach(t),vuo=i(S),Is=n(S,"LI",{});var xR=s(Is);bce=n(xR,"STRONG",{});var s1t=s(bce);Fuo=r(s1t,"nezha"),s1t.forEach(t),Tuo=r(xR," \u2014 "),_q=n(xR,"A",{href:!0});var l1t=s(_q);Muo=r(l1t,"BertTokenizer"),l1t.forEach(t),Euo=r(xR," or "),uq=n(xR,"A",{href:!0});var i1t=s(uq);Cuo=r(i1t,"BertTokenizerFast"),i1t.forEach(t),wuo=r(xR," (Nezha model)"),xR.forEach(t),Auo=i(S),Ns=n(S,"LI",{});var $R=s(Ns);vce=n($R,"STRONG",{});var d1t=s(vce);Luo=r(d1t,"nllb"),d1t.forEach(t),yuo=r($R," \u2014 "),bq=n($R,"A",{href:!0});var c1t=s(bq);xuo=r(c1t,"NllbTokenizer"),c1t.forEach(t),$uo=r($R," or "),vq=n($R,"A",{href:!0});var f1t=s(vq);kuo=r(f1t,"NllbTokenizerFast"),f1t.forEach(t),Suo=r($R," (NLLB model)"),$R.forEach(t),Ruo=i(S),qs=n(S,"LI",{});var kR=s(qs);Fce=n(kR,"STRONG",{});var m1t=s(Fce);Puo=r(m1t,"nystromformer"),m1t.forEach(t),Buo=r(kR," \u2014 "),Fq=n(kR,"A",{href:!0});var g1t=s(Fq);Iuo=r(g1t,"AlbertTokenizer"),g1t.forEach(t),Nuo=r(kR," or "),Tq=n(kR,"A",{href:!0});var h1t=s(Tq);quo=r(h1t,"AlbertTokenizerFast"),h1t.forEach(t),juo=r(kR," (Nystr\xF6mformer model)"),kR.forEach(t),Duo=i(S),js=n(S,"LI",{});var SR=s(js);Tce=n(SR,"STRONG",{});var p1t=s(Tce);Guo=r(p1t,"openai-gpt"),p1t.forEach(t),Ouo=r(SR," \u2014 "),Mq=n(SR,"A",{href:!0});var _1t=s(Mq);Vuo=r(_1t,"OpenAIGPTTokenizer"),_1t.forEach(t),Xuo=r(SR," or "),Eq=n(SR,"A",{href:!0});var u1t=s(Eq);zuo=r(u1t,"OpenAIGPTTokenizerFast"),u1t.forEach(t),Wuo=r(SR," (OpenAI GPT model)"),SR.forEach(t),Quo=i(S),Gh=n(S,"LI",{});var W$e=s(Gh);Mce=n(W$e,"STRONG",{});var b1t=s(Mce);Uuo=r(b1t,"opt"),b1t.forEach(t),Huo=r(W$e," \u2014 "),Cq=n(W$e,"A",{href:!0});var v1t=s(Cq);Juo=r(v1t,"GPT2Tokenizer"),v1t.forEach(t),Yuo=r(W$e," (OPT model)"),W$e.forEach(t),Kuo=i(S),Ds=n(S,"LI",{});var RR=s(Ds);Ece=n(RR,"STRONG",{});var F1t=s(Ece);Zuo=r(F1t,"owlvit"),F1t.forEach(t),e1o=r(RR," \u2014 "),wq=n(RR,"A",{href:!0});var T1t=s(wq);o1o=r(T1t,"CLIPTokenizer"),T1t.forEach(t),r1o=r(RR," or "),Aq=n(RR,"A",{href:!0});var M1t=s(Aq);t1o=r(M1t,"CLIPTokenizerFast"),M1t.forEach(t),a1o=r(RR," (OWL-ViT model)"),RR.forEach(t),n1o=i(S),Gs=n(S,"LI",{});var PR=s(Gs);Cce=n(PR,"STRONG",{});var E1t=s(Cce);s1o=r(E1t,"pegasus"),E1t.forEach(t),l1o=r(PR," \u2014 "),Lq=n(PR,"A",{href:!0});var C1t=s(Lq);i1o=r(C1t,"PegasusTokenizer"),C1t.forEach(t),d1o=r(PR," or "),yq=n(PR,"A",{href:!0});var w1t=s(yq);c1o=r(w1t,"PegasusTokenizerFast"),w1t.forEach(t),f1o=r(PR," (Pegasus model)"),PR.forEach(t),m1o=i(S),Oh=n(S,"LI",{});var Q$e=s(Oh);wce=n(Q$e,"STRONG",{});var A1t=s(wce);g1o=r(A1t,"perceiver"),A1t.forEach(t),h1o=r(Q$e," \u2014 "),xq=n(Q$e,"A",{href:!0});var L1t=s(xq);p1o=r(L1t,"PerceiverTokenizer"),L1t.forEach(t),_1o=r(Q$e," (Perceiver model)"),Q$e.forEach(t),u1o=i(S),Vh=n(S,"LI",{});var U$e=s(Vh);Ace=n(U$e,"STRONG",{});var y1t=s(Ace);b1o=r(y1t,"phobert"),y1t.forEach(t),v1o=r(U$e," \u2014 "),$q=n(U$e,"A",{href:!0});var x1t=s($q);F1o=r(x1t,"PhobertTokenizer"),x1t.forEach(t),T1o=r(U$e," (PhoBERT model)"),U$e.forEach(t),M1o=i(S),Xh=n(S,"LI",{});var H$e=s(Xh);Lce=n(H$e,"STRONG",{});var $1t=s(Lce);E1o=r($1t,"plbart"),$1t.forEach(t),C1o=r(H$e," \u2014 "),kq=n(H$e,"A",{href:!0});var k1t=s(kq);w1o=r(k1t,"PLBartTokenizer"),k1t.forEach(t),A1o=r(H$e," (PLBart model)"),H$e.forEach(t),L1o=i(S),zh=n(S,"LI",{});var J$e=s(zh);yce=n(J$e,"STRONG",{});var S1t=s(yce);y1o=r(S1t,"prophetnet"),S1t.forEach(t),x1o=r(J$e," \u2014 "),Sq=n(J$e,"A",{href:!0});var R1t=s(Sq);$1o=r(R1t,"ProphetNetTokenizer"),R1t.forEach(t),k1o=r(J$e," (ProphetNet model)"),J$e.forEach(t),S1o=i(S),Os=n(S,"LI",{});var BR=s(Os);xce=n(BR,"STRONG",{});var P1t=s(xce);R1o=r(P1t,"qdqbert"),P1t.forEach(t),P1o=r(BR," \u2014 "),Rq=n(BR,"A",{href:!0});var B1t=s(Rq);B1o=r(B1t,"BertTokenizer"),B1t.forEach(t),I1o=r(BR," or "),Pq=n(BR,"A",{href:!0});var I1t=s(Pq);N1o=r(I1t,"BertTokenizerFast"),I1t.forEach(t),q1o=r(BR," (QDQBert model)"),BR.forEach(t),j1o=i(S),Wh=n(S,"LI",{});var Y$e=s(Wh);$ce=n(Y$e,"STRONG",{});var N1t=s($ce);D1o=r(N1t,"rag"),N1t.forEach(t),G1o=r(Y$e," \u2014 "),Bq=n(Y$e,"A",{href:!0});var q1t=s(Bq);O1o=r(q1t,"RagTokenizer"),q1t.forEach(t),V1o=r(Y$e," (RAG model)"),Y$e.forEach(t),X1o=i(S),Vs=n(S,"LI",{});var IR=s(Vs);kce=n(IR,"STRONG",{});var j1t=s(kce);z1o=r(j1t,"realm"),j1t.forEach(t),W1o=r(IR," \u2014 "),Iq=n(IR,"A",{href:!0});var D1t=s(Iq);Q1o=r(D1t,"RealmTokenizer"),D1t.forEach(t),U1o=r(IR," or "),Nq=n(IR,"A",{href:!0});var G1t=s(Nq);H1o=r(G1t,"RealmTokenizerFast"),G1t.forEach(t),J1o=r(IR," (REALM model)"),IR.forEach(t),Y1o=i(S),Xs=n(S,"LI",{});var NR=s(Xs);Sce=n(NR,"STRONG",{});var O1t=s(Sce);K1o=r(O1t,"reformer"),O1t.forEach(t),Z1o=r(NR," \u2014 "),qq=n(NR,"A",{href:!0});var V1t=s(qq);e2o=r(V1t,"ReformerTokenizer"),V1t.forEach(t),o2o=r(NR," or "),jq=n(NR,"A",{href:!0});var X1t=s(jq);r2o=r(X1t,"ReformerTokenizerFast"),X1t.forEach(t),t2o=r(NR," (Reformer model)"),NR.forEach(t),a2o=i(S),zs=n(S,"LI",{});var qR=s(zs);Rce=n(qR,"STRONG",{});var z1t=s(Rce);n2o=r(z1t,"rembert"),z1t.forEach(t),s2o=r(qR," \u2014 "),Dq=n(qR,"A",{href:!0});var W1t=s(Dq);l2o=r(W1t,"RemBertTokenizer"),W1t.forEach(t),i2o=r(qR," or "),Gq=n(qR,"A",{href:!0});var Q1t=s(Gq);d2o=r(Q1t,"RemBertTokenizerFast"),Q1t.forEach(t),c2o=r(qR," (RemBERT model)"),qR.forEach(t),f2o=i(S),Ws=n(S,"LI",{});var jR=s(Ws);Pce=n(jR,"STRONG",{});var U1t=s(Pce);m2o=r(U1t,"retribert"),U1t.forEach(t),g2o=r(jR," \u2014 "),Oq=n(jR,"A",{href:!0});var H1t=s(Oq);h2o=r(H1t,"RetriBertTokenizer"),H1t.forEach(t),p2o=r(jR," or "),Vq=n(jR,"A",{href:!0});var J1t=s(Vq);_2o=r(J1t,"RetriBertTokenizerFast"),J1t.forEach(t),u2o=r(jR," (RetriBERT model)"),jR.forEach(t),b2o=i(S),Qs=n(S,"LI",{});var DR=s(Qs);Bce=n(DR,"STRONG",{});var Y1t=s(Bce);v2o=r(Y1t,"roberta"),Y1t.forEach(t),F2o=r(DR," \u2014 "),Xq=n(DR,"A",{href:!0});var K1t=s(Xq);T2o=r(K1t,"RobertaTokenizer"),K1t.forEach(t),M2o=r(DR," or "),zq=n(DR,"A",{href:!0});var Z1t=s(zq);E2o=r(Z1t,"RobertaTokenizerFast"),Z1t.forEach(t),C2o=r(DR," (RoBERTa model)"),DR.forEach(t),w2o=i(S),Us=n(S,"LI",{});var GR=s(Us);Ice=n(GR,"STRONG",{});var e2t=s(Ice);A2o=r(e2t,"roformer"),e2t.forEach(t),L2o=r(GR," \u2014 "),Wq=n(GR,"A",{href:!0});var o2t=s(Wq);y2o=r(o2t,"RoFormerTokenizer"),o2t.forEach(t),x2o=r(GR," or "),Qq=n(GR,"A",{href:!0});var r2t=s(Qq);$2o=r(r2t,"RoFormerTokenizerFast"),r2t.forEach(t),k2o=r(GR," (RoFormer model)"),GR.forEach(t),S2o=i(S),Qh=n(S,"LI",{});var K$e=s(Qh);Nce=n(K$e,"STRONG",{});var t2t=s(Nce);R2o=r(t2t,"speech_to_text"),t2t.forEach(t),P2o=r(K$e," \u2014 "),Uq=n(K$e,"A",{href:!0});var a2t=s(Uq);B2o=r(a2t,"Speech2TextTokenizer"),a2t.forEach(t),I2o=r(K$e," (Speech2Text model)"),K$e.forEach(t),N2o=i(S),Uh=n(S,"LI",{});var Z$e=s(Uh);qce=n(Z$e,"STRONG",{});var n2t=s(qce);q2o=r(n2t,"speech_to_text_2"),n2t.forEach(t),j2o=r(Z$e," \u2014 "),Hq=n(Z$e,"A",{href:!0});var s2t=s(Hq);D2o=r(s2t,"Speech2Text2Tokenizer"),s2t.forEach(t),G2o=r(Z$e," (Speech2Text2 model)"),Z$e.forEach(t),O2o=i(S),Hs=n(S,"LI",{});var OR=s(Hs);jce=n(OR,"STRONG",{});var l2t=s(jce);V2o=r(l2t,"splinter"),l2t.forEach(t),X2o=r(OR," \u2014 "),Jq=n(OR,"A",{href:!0});var i2t=s(Jq);z2o=r(i2t,"SplinterTokenizer"),i2t.forEach(t),W2o=r(OR," or "),Yq=n(OR,"A",{href:!0});var d2t=s(Yq);Q2o=r(d2t,"SplinterTokenizerFast"),d2t.forEach(t),U2o=r(OR," (Splinter model)"),OR.forEach(t),H2o=i(S),Js=n(S,"LI",{});var VR=s(Js);Dce=n(VR,"STRONG",{});var c2t=s(Dce);J2o=r(c2t,"squeezebert"),c2t.forEach(t),Y2o=r(VR," \u2014 "),Kq=n(VR,"A",{href:!0});var f2t=s(Kq);K2o=r(f2t,"SqueezeBertTokenizer"),f2t.forEach(t),Z2o=r(VR," or "),Zq=n(VR,"A",{href:!0});var m2t=s(Zq);ebo=r(m2t,"SqueezeBertTokenizerFast"),m2t.forEach(t),obo=r(VR," (SqueezeBERT model)"),VR.forEach(t),rbo=i(S),Ys=n(S,"LI",{});var XR=s(Ys);Gce=n(XR,"STRONG",{});var g2t=s(Gce);tbo=r(g2t,"t5"),g2t.forEach(t),abo=r(XR," \u2014 "),ej=n(XR,"A",{href:!0});var h2t=s(ej);nbo=r(h2t,"T5Tokenizer"),h2t.forEach(t),sbo=r(XR," or "),oj=n(XR,"A",{href:!0});var p2t=s(oj);lbo=r(p2t,"T5TokenizerFast"),p2t.forEach(t),ibo=r(XR," (T5 model)"),XR.forEach(t),dbo=i(S),Hh=n(S,"LI",{});var eke=s(Hh);Oce=n(eke,"STRONG",{});var _2t=s(Oce);cbo=r(_2t,"tapas"),_2t.forEach(t),fbo=r(eke," \u2014 "),rj=n(eke,"A",{href:!0});var u2t=s(rj);mbo=r(u2t,"TapasTokenizer"),u2t.forEach(t),gbo=r(eke," (TAPAS model)"),eke.forEach(t),hbo=i(S),Jh=n(S,"LI",{});var oke=s(Jh);Vce=n(oke,"STRONG",{});var b2t=s(Vce);pbo=r(b2t,"tapex"),b2t.forEach(t),_bo=r(oke," \u2014 "),tj=n(oke,"A",{href:!0});var v2t=s(tj);ubo=r(v2t,"TapexTokenizer"),v2t.forEach(t),bbo=r(oke," (TAPEX model)"),oke.forEach(t),vbo=i(S),Yh=n(S,"LI",{});var rke=s(Yh);Xce=n(rke,"STRONG",{});var F2t=s(Xce);Fbo=r(F2t,"transfo-xl"),F2t.forEach(t),Tbo=r(rke," \u2014 "),aj=n(rke,"A",{href:!0});var T2t=s(aj);Mbo=r(T2t,"TransfoXLTokenizer"),T2t.forEach(t),Ebo=r(rke," (Transformer-XL model)"),rke.forEach(t),Cbo=i(S),Ks=n(S,"LI",{});var zR=s(Ks);zce=n(zR,"STRONG",{});var M2t=s(zce);wbo=r(M2t,"vilt"),M2t.forEach(t),Abo=r(zR," \u2014 "),nj=n(zR,"A",{href:!0});var E2t=s(nj);Lbo=r(E2t,"BertTokenizer"),E2t.forEach(t),ybo=r(zR," or "),sj=n(zR,"A",{href:!0});var C2t=s(sj);xbo=r(C2t,"BertTokenizerFast"),C2t.forEach(t),$bo=r(zR," (ViLT model)"),zR.forEach(t),kbo=i(S),Zs=n(S,"LI",{});var WR=s(Zs);Wce=n(WR,"STRONG",{});var w2t=s(Wce);Sbo=r(w2t,"visual_bert"),w2t.forEach(t),Rbo=r(WR," \u2014 "),lj=n(WR,"A",{href:!0});var A2t=s(lj);Pbo=r(A2t,"BertTokenizer"),A2t.forEach(t),Bbo=r(WR," or "),ij=n(WR,"A",{href:!0});var L2t=s(ij);Ibo=r(L2t,"BertTokenizerFast"),L2t.forEach(t),Nbo=r(WR," (VisualBERT model)"),WR.forEach(t),qbo=i(S),Kh=n(S,"LI",{});var tke=s(Kh);Qce=n(tke,"STRONG",{});var y2t=s(Qce);jbo=r(y2t,"wav2vec2"),y2t.forEach(t),Dbo=r(tke," \u2014 "),dj=n(tke,"A",{href:!0});var x2t=s(dj);Gbo=r(x2t,"Wav2Vec2CTCTokenizer"),x2t.forEach(t),Obo=r(tke," (Wav2Vec2 model)"),tke.forEach(t),Vbo=i(S),Zh=n(S,"LI",{});var ake=s(Zh);Uce=n(ake,"STRONG",{});var $2t=s(Uce);Xbo=r($2t,"wav2vec2-conformer"),$2t.forEach(t),zbo=r(ake," \u2014 "),cj=n(ake,"A",{href:!0});var k2t=s(cj);Wbo=r(k2t,"Wav2Vec2CTCTokenizer"),k2t.forEach(t),Qbo=r(ake," (Wav2Vec2-Conformer model)"),ake.forEach(t),Ubo=i(S),ep=n(S,"LI",{});var nke=s(ep);Hce=n(nke,"STRONG",{});var S2t=s(Hce);Hbo=r(S2t,"wav2vec2_phoneme"),S2t.forEach(t),Jbo=r(nke," \u2014 "),fj=n(nke,"A",{href:!0});var R2t=s(fj);Ybo=r(R2t,"Wav2Vec2PhonemeCTCTokenizer"),R2t.forEach(t),Kbo=r(nke," (Wav2Vec2Phoneme model)"),nke.forEach(t),Zbo=i(S),el=n(S,"LI",{});var QR=s(el);Jce=n(QR,"STRONG",{});var P2t=s(Jce);evo=r(P2t,"xglm"),P2t.forEach(t),ovo=r(QR," \u2014 "),mj=n(QR,"A",{href:!0});var B2t=s(mj);rvo=r(B2t,"XGLMTokenizer"),B2t.forEach(t),tvo=r(QR," or "),gj=n(QR,"A",{href:!0});var I2t=s(gj);avo=r(I2t,"XGLMTokenizerFast"),I2t.forEach(t),nvo=r(QR," (XGLM model)"),QR.forEach(t),svo=i(S),op=n(S,"LI",{});var ske=s(op);Yce=n(ske,"STRONG",{});var N2t=s(Yce);lvo=r(N2t,"xlm"),N2t.forEach(t),ivo=r(ske," \u2014 "),hj=n(ske,"A",{href:!0});var q2t=s(hj);dvo=r(q2t,"XLMTokenizer"),q2t.forEach(t),cvo=r(ske," (XLM model)"),ske.forEach(t),fvo=i(S),rp=n(S,"LI",{});var lke=s(rp);Kce=n(lke,"STRONG",{});var j2t=s(Kce);mvo=r(j2t,"xlm-prophetnet"),j2t.forEach(t),gvo=r(lke," \u2014 "),pj=n(lke,"A",{href:!0});var D2t=s(pj);hvo=r(D2t,"XLMProphetNetTokenizer"),D2t.forEach(t),pvo=r(lke," (XLM-ProphetNet model)"),lke.forEach(t),_vo=i(S),ol=n(S,"LI",{});var UR=s(ol);Zce=n(UR,"STRONG",{});var G2t=s(Zce);uvo=r(G2t,"xlm-roberta"),G2t.forEach(t),bvo=r(UR," \u2014 "),_j=n(UR,"A",{href:!0});var O2t=s(_j);vvo=r(O2t,"XLMRobertaTokenizer"),O2t.forEach(t),Fvo=r(UR," or "),uj=n(UR,"A",{href:!0});var V2t=s(uj);Tvo=r(V2t,"XLMRobertaTokenizerFast"),V2t.forEach(t),Mvo=r(UR," (XLM-RoBERTa model)"),UR.forEach(t),Evo=i(S),rl=n(S,"LI",{});var HR=s(rl);efe=n(HR,"STRONG",{});var X2t=s(efe);Cvo=r(X2t,"xlm-roberta-xl"),X2t.forEach(t),wvo=r(HR," \u2014 "),bj=n(HR,"A",{href:!0});var z2t=s(bj);Avo=r(z2t,"RobertaTokenizer"),z2t.forEach(t),Lvo=r(HR," or "),vj=n(HR,"A",{href:!0});var W2t=s(vj);yvo=r(W2t,"RobertaTokenizerFast"),W2t.forEach(t),xvo=r(HR," (XLM-RoBERTa-XL model)"),HR.forEach(t),$vo=i(S),tl=n(S,"LI",{});var JR=s(tl);ofe=n(JR,"STRONG",{});var Q2t=s(ofe);kvo=r(Q2t,"xlnet"),Q2t.forEach(t),Svo=r(JR," \u2014 "),Fj=n(JR,"A",{href:!0});var U2t=s(Fj);Rvo=r(U2t,"XLNetTokenizer"),U2t.forEach(t),Pvo=r(JR," or "),Tj=n(JR,"A",{href:!0});var H2t=s(Tj);Bvo=r(H2t,"XLNetTokenizerFast"),H2t.forEach(t),Ivo=r(JR," (XLNet model)"),JR.forEach(t),Nvo=i(S),al=n(S,"LI",{});var YR=s(al);rfe=n(YR,"STRONG",{});var J2t=s(rfe);qvo=r(J2t,"yoso"),J2t.forEach(t),jvo=r(YR," \u2014 "),Mj=n(YR,"A",{href:!0});var Y2t=s(Mj);Dvo=r(Y2t,"AlbertTokenizer"),Y2t.forEach(t),Gvo=r(YR," or "),Ej=n(YR,"A",{href:!0});var K2t=s(Ej);Ovo=r(K2t,"AlbertTokenizerFast"),K2t.forEach(t),Vvo=r(YR," (YOSO model)"),YR.forEach(t),S.forEach(t),Xvo=i(fl),T(tp.$$.fragment,fl),fl.forEach(t),zvo=i(cl),ap=n(cl,"DIV",{class:!0});var eJe=s(ap);T(AL.$$.fragment,eJe),Wvo=i(eJe),tfe=n(eJe,"P",{});var Z2t=s(tfe);Qvo=r(Z2t,"Register a new tokenizer in this mapping."),Z2t.forEach(t),eJe.forEach(t),cl.forEach(t),HQe=i(f),Zi=n(f,"H2",{class:!0});var oJe=s(Zi);np=n(oJe,"A",{id:!0,class:!0,href:!0});var ebt=s(np);afe=n(ebt,"SPAN",{});var obt=s(afe);T(LL.$$.fragment,obt),obt.forEach(t),ebt.forEach(t),Uvo=i(oJe),nfe=n(oJe,"SPAN",{});var rbt=s(nfe);Hvo=r(rbt,"AutoFeatureExtractor"),rbt.forEach(t),oJe.forEach(t),JQe=i(f),$o=n(f,"DIV",{class:!0});var ml=s($o);T(yL.$$.fragment,ml),Jvo=i(ml),xL=n(ml,"P",{});var rJe=s(xL);Yvo=r(rJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Cj=n(rJe,"A",{href:!0});var tbt=s(Cj);Kvo=r(tbt,"AutoFeatureExtractor.from_pretrained()"),tbt.forEach(t),Zvo=r(rJe," class method."),rJe.forEach(t),e6o=i(ml),$L=n(ml,"P",{});var tJe=s($L);o6o=r(tJe,"This class cannot be instantiated directly using "),sfe=n(tJe,"CODE",{});var abt=s(sfe);r6o=r(abt,"__init__()"),abt.forEach(t),t6o=r(tJe," (throws an error)."),tJe.forEach(t),a6o=i(ml),He=n(ml,"DIV",{class:!0});var fa=s(He);T(kL.$$.fragment,fa),n6o=i(fa),lfe=n(fa,"P",{});var nbt=s(lfe);s6o=r(nbt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),nbt.forEach(t),l6o=i(fa),Oa=n(fa,"P",{});var fw=s(Oa);i6o=r(fw,"The feature extractor class to instantiate is selected based on the "),ife=n(fw,"CODE",{});var sbt=s(ife);d6o=r(sbt,"model_type"),sbt.forEach(t),c6o=r(fw,` property of the config object
(either passed as an argument or loaded from `),dfe=n(fw,"CODE",{});var lbt=s(dfe);f6o=r(lbt,"pretrained_model_name_or_path"),lbt.forEach(t),m6o=r(fw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cfe=n(fw,"CODE",{});var ibt=s(cfe);g6o=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),h6o=r(fw,":"),fw.forEach(t),p6o=i(fa),Q=n(fa,"UL",{});var J=s(Q);sp=n(J,"LI",{});var ike=s(sp);ffe=n(ike,"STRONG",{});var dbt=s(ffe);_6o=r(dbt,"beit"),dbt.forEach(t),u6o=r(ike," \u2014 "),wj=n(ike,"A",{href:!0});var cbt=s(wj);b6o=r(cbt,"BeitFeatureExtractor"),cbt.forEach(t),v6o=r(ike," (BEiT model)"),ike.forEach(t),F6o=i(J),lp=n(J,"LI",{});var dke=s(lp);mfe=n(dke,"STRONG",{});var fbt=s(mfe);T6o=r(fbt,"clip"),fbt.forEach(t),M6o=r(dke," \u2014 "),Aj=n(dke,"A",{href:!0});var mbt=s(Aj);E6o=r(mbt,"CLIPFeatureExtractor"),mbt.forEach(t),C6o=r(dke," (CLIP model)"),dke.forEach(t),w6o=i(J),ip=n(J,"LI",{});var cke=s(ip);gfe=n(cke,"STRONG",{});var gbt=s(gfe);A6o=r(gbt,"convnext"),gbt.forEach(t),L6o=r(cke," \u2014 "),Lj=n(cke,"A",{href:!0});var hbt=s(Lj);y6o=r(hbt,"ConvNextFeatureExtractor"),hbt.forEach(t),x6o=r(cke," (ConvNeXT model)"),cke.forEach(t),$6o=i(J),dp=n(J,"LI",{});var fke=s(dp);hfe=n(fke,"STRONG",{});var pbt=s(hfe);k6o=r(pbt,"cvt"),pbt.forEach(t),S6o=r(fke," \u2014 "),yj=n(fke,"A",{href:!0});var _bt=s(yj);R6o=r(_bt,"ConvNextFeatureExtractor"),_bt.forEach(t),P6o=r(fke," (CvT model)"),fke.forEach(t),B6o=i(J),cp=n(J,"LI",{});var mke=s(cp);pfe=n(mke,"STRONG",{});var ubt=s(pfe);I6o=r(ubt,"data2vec-audio"),ubt.forEach(t),N6o=r(mke," \u2014 "),xj=n(mke,"A",{href:!0});var bbt=s(xj);q6o=r(bbt,"Wav2Vec2FeatureExtractor"),bbt.forEach(t),j6o=r(mke," (Data2VecAudio model)"),mke.forEach(t),D6o=i(J),fp=n(J,"LI",{});var gke=s(fp);_fe=n(gke,"STRONG",{});var vbt=s(_fe);G6o=r(vbt,"data2vec-vision"),vbt.forEach(t),O6o=r(gke," \u2014 "),$j=n(gke,"A",{href:!0});var Fbt=s($j);V6o=r(Fbt,"BeitFeatureExtractor"),Fbt.forEach(t),X6o=r(gke," (Data2VecVision model)"),gke.forEach(t),z6o=i(J),mp=n(J,"LI",{});var hke=s(mp);ufe=n(hke,"STRONG",{});var Tbt=s(ufe);W6o=r(Tbt,"deit"),Tbt.forEach(t),Q6o=r(hke," \u2014 "),kj=n(hke,"A",{href:!0});var Mbt=s(kj);U6o=r(Mbt,"DeiTFeatureExtractor"),Mbt.forEach(t),H6o=r(hke," (DeiT model)"),hke.forEach(t),J6o=i(J),gp=n(J,"LI",{});var pke=s(gp);bfe=n(pke,"STRONG",{});var Ebt=s(bfe);Y6o=r(Ebt,"detr"),Ebt.forEach(t),K6o=r(pke," \u2014 "),Sj=n(pke,"A",{href:!0});var Cbt=s(Sj);Z6o=r(Cbt,"DetrFeatureExtractor"),Cbt.forEach(t),eFo=r(pke," (DETR model)"),pke.forEach(t),oFo=i(J),hp=n(J,"LI",{});var _ke=s(hp);vfe=n(_ke,"STRONG",{});var wbt=s(vfe);rFo=r(wbt,"donut"),wbt.forEach(t),tFo=r(_ke," \u2014 "),Rj=n(_ke,"A",{href:!0});var Abt=s(Rj);aFo=r(Abt,"DonutFeatureExtractor"),Abt.forEach(t),nFo=r(_ke," (Donut model)"),_ke.forEach(t),sFo=i(J),pp=n(J,"LI",{});var uke=s(pp);Ffe=n(uke,"STRONG",{});var Lbt=s(Ffe);lFo=r(Lbt,"dpt"),Lbt.forEach(t),iFo=r(uke," \u2014 "),Pj=n(uke,"A",{href:!0});var ybt=s(Pj);dFo=r(ybt,"DPTFeatureExtractor"),ybt.forEach(t),cFo=r(uke," (DPT model)"),uke.forEach(t),fFo=i(J),_p=n(J,"LI",{});var bke=s(_p);Tfe=n(bke,"STRONG",{});var xbt=s(Tfe);mFo=r(xbt,"flava"),xbt.forEach(t),gFo=r(bke," \u2014 "),Bj=n(bke,"A",{href:!0});var $bt=s(Bj);hFo=r($bt,"FlavaFeatureExtractor"),$bt.forEach(t),pFo=r(bke," (FLAVA model)"),bke.forEach(t),_Fo=i(J),up=n(J,"LI",{});var vke=s(up);Mfe=n(vke,"STRONG",{});var kbt=s(Mfe);uFo=r(kbt,"glpn"),kbt.forEach(t),bFo=r(vke," \u2014 "),Ij=n(vke,"A",{href:!0});var Sbt=s(Ij);vFo=r(Sbt,"GLPNFeatureExtractor"),Sbt.forEach(t),FFo=r(vke," (GLPN model)"),vke.forEach(t),TFo=i(J),bp=n(J,"LI",{});var Fke=s(bp);Efe=n(Fke,"STRONG",{});var Rbt=s(Efe);MFo=r(Rbt,"groupvit"),Rbt.forEach(t),EFo=r(Fke," \u2014 "),Nj=n(Fke,"A",{href:!0});var Pbt=s(Nj);CFo=r(Pbt,"CLIPFeatureExtractor"),Pbt.forEach(t),wFo=r(Fke," (GroupViT model)"),Fke.forEach(t),AFo=i(J),vp=n(J,"LI",{});var Tke=s(vp);Cfe=n(Tke,"STRONG",{});var Bbt=s(Cfe);LFo=r(Bbt,"hubert"),Bbt.forEach(t),yFo=r(Tke," \u2014 "),qj=n(Tke,"A",{href:!0});var Ibt=s(qj);xFo=r(Ibt,"Wav2Vec2FeatureExtractor"),Ibt.forEach(t),$Fo=r(Tke," (Hubert model)"),Tke.forEach(t),kFo=i(J),Fp=n(J,"LI",{});var Mke=s(Fp);wfe=n(Mke,"STRONG",{});var Nbt=s(wfe);SFo=r(Nbt,"imagegpt"),Nbt.forEach(t),RFo=r(Mke," \u2014 "),jj=n(Mke,"A",{href:!0});var qbt=s(jj);PFo=r(qbt,"ImageGPTFeatureExtractor"),qbt.forEach(t),BFo=r(Mke," (ImageGPT model)"),Mke.forEach(t),IFo=i(J),Tp=n(J,"LI",{});var Eke=s(Tp);Afe=n(Eke,"STRONG",{});var jbt=s(Afe);NFo=r(jbt,"layoutlmv2"),jbt.forEach(t),qFo=r(Eke," \u2014 "),Dj=n(Eke,"A",{href:!0});var Dbt=s(Dj);jFo=r(Dbt,"LayoutLMv2FeatureExtractor"),Dbt.forEach(t),DFo=r(Eke," (LayoutLMv2 model)"),Eke.forEach(t),GFo=i(J),Mp=n(J,"LI",{});var Cke=s(Mp);Lfe=n(Cke,"STRONG",{});var Gbt=s(Lfe);OFo=r(Gbt,"layoutlmv3"),Gbt.forEach(t),VFo=r(Cke," \u2014 "),Gj=n(Cke,"A",{href:!0});var Obt=s(Gj);XFo=r(Obt,"LayoutLMv3FeatureExtractor"),Obt.forEach(t),zFo=r(Cke," (LayoutLMv3 model)"),Cke.forEach(t),WFo=i(J),Ep=n(J,"LI",{});var wke=s(Ep);yfe=n(wke,"STRONG",{});var Vbt=s(yfe);QFo=r(Vbt,"levit"),Vbt.forEach(t),UFo=r(wke," \u2014 "),Oj=n(wke,"A",{href:!0});var Xbt=s(Oj);HFo=r(Xbt,"LevitFeatureExtractor"),Xbt.forEach(t),JFo=r(wke," (LeViT model)"),wke.forEach(t),YFo=i(J),Cp=n(J,"LI",{});var Ake=s(Cp);xfe=n(Ake,"STRONG",{});var zbt=s(xfe);KFo=r(zbt,"maskformer"),zbt.forEach(t),ZFo=r(Ake," \u2014 "),Vj=n(Ake,"A",{href:!0});var Wbt=s(Vj);eTo=r(Wbt,"MaskFormerFeatureExtractor"),Wbt.forEach(t),oTo=r(Ake," (MaskFormer model)"),Ake.forEach(t),rTo=i(J),wp=n(J,"LI",{});var Lke=s(wp);$fe=n(Lke,"STRONG",{});var Qbt=s($fe);tTo=r(Qbt,"mctct"),Qbt.forEach(t),aTo=r(Lke," \u2014 "),Xj=n(Lke,"A",{href:!0});var Ubt=s(Xj);nTo=r(Ubt,"MCTCTFeatureExtractor"),Ubt.forEach(t),sTo=r(Lke," (M-CTC-T model)"),Lke.forEach(t),lTo=i(J),Ap=n(J,"LI",{});var yke=s(Ap);kfe=n(yke,"STRONG",{});var Hbt=s(kfe);iTo=r(Hbt,"mobilevit"),Hbt.forEach(t),dTo=r(yke," \u2014 "),zj=n(yke,"A",{href:!0});var Jbt=s(zj);cTo=r(Jbt,"MobileViTFeatureExtractor"),Jbt.forEach(t),fTo=r(yke," (MobileViT model)"),yke.forEach(t),mTo=i(J),Lp=n(J,"LI",{});var xke=s(Lp);Sfe=n(xke,"STRONG",{});var Ybt=s(Sfe);gTo=r(Ybt,"owlvit"),Ybt.forEach(t),hTo=r(xke," \u2014 "),Wj=n(xke,"A",{href:!0});var Kbt=s(Wj);pTo=r(Kbt,"OwlViTFeatureExtractor"),Kbt.forEach(t),_To=r(xke," (OWL-ViT model)"),xke.forEach(t),uTo=i(J),yp=n(J,"LI",{});var $ke=s(yp);Rfe=n($ke,"STRONG",{});var Zbt=s(Rfe);bTo=r(Zbt,"perceiver"),Zbt.forEach(t),vTo=r($ke," \u2014 "),Qj=n($ke,"A",{href:!0});var evt=s(Qj);FTo=r(evt,"PerceiverFeatureExtractor"),evt.forEach(t),TTo=r($ke," (Perceiver model)"),$ke.forEach(t),MTo=i(J),xp=n(J,"LI",{});var kke=s(xp);Pfe=n(kke,"STRONG",{});var ovt=s(Pfe);ETo=r(ovt,"poolformer"),ovt.forEach(t),CTo=r(kke," \u2014 "),Uj=n(kke,"A",{href:!0});var rvt=s(Uj);wTo=r(rvt,"PoolFormerFeatureExtractor"),rvt.forEach(t),ATo=r(kke," (PoolFormer model)"),kke.forEach(t),LTo=i(J),$p=n(J,"LI",{});var Ske=s($p);Bfe=n(Ske,"STRONG",{});var tvt=s(Bfe);yTo=r(tvt,"regnet"),tvt.forEach(t),xTo=r(Ske," \u2014 "),Hj=n(Ske,"A",{href:!0});var avt=s(Hj);$To=r(avt,"ConvNextFeatureExtractor"),avt.forEach(t),kTo=r(Ske," (RegNet model)"),Ske.forEach(t),STo=i(J),kp=n(J,"LI",{});var Rke=s(kp);Ife=n(Rke,"STRONG",{});var nvt=s(Ife);RTo=r(nvt,"resnet"),nvt.forEach(t),PTo=r(Rke," \u2014 "),Jj=n(Rke,"A",{href:!0});var svt=s(Jj);BTo=r(svt,"ConvNextFeatureExtractor"),svt.forEach(t),ITo=r(Rke," (ResNet model)"),Rke.forEach(t),NTo=i(J),Sp=n(J,"LI",{});var Pke=s(Sp);Nfe=n(Pke,"STRONG",{});var lvt=s(Nfe);qTo=r(lvt,"segformer"),lvt.forEach(t),jTo=r(Pke," \u2014 "),Yj=n(Pke,"A",{href:!0});var ivt=s(Yj);DTo=r(ivt,"SegformerFeatureExtractor"),ivt.forEach(t),GTo=r(Pke," (SegFormer model)"),Pke.forEach(t),OTo=i(J),Rp=n(J,"LI",{});var Bke=s(Rp);qfe=n(Bke,"STRONG",{});var dvt=s(qfe);VTo=r(dvt,"speech_to_text"),dvt.forEach(t),XTo=r(Bke," \u2014 "),Kj=n(Bke,"A",{href:!0});var cvt=s(Kj);zTo=r(cvt,"Speech2TextFeatureExtractor"),cvt.forEach(t),WTo=r(Bke," (Speech2Text model)"),Bke.forEach(t),QTo=i(J),Pp=n(J,"LI",{});var Ike=s(Pp);jfe=n(Ike,"STRONG",{});var fvt=s(jfe);UTo=r(fvt,"swin"),fvt.forEach(t),HTo=r(Ike," \u2014 "),Zj=n(Ike,"A",{href:!0});var mvt=s(Zj);JTo=r(mvt,"ViTFeatureExtractor"),mvt.forEach(t),YTo=r(Ike," (Swin Transformer model)"),Ike.forEach(t),KTo=i(J),Bp=n(J,"LI",{});var Nke=s(Bp);Dfe=n(Nke,"STRONG",{});var gvt=s(Dfe);ZTo=r(gvt,"swinv2"),gvt.forEach(t),e7o=r(Nke," \u2014 "),eD=n(Nke,"A",{href:!0});var hvt=s(eD);o7o=r(hvt,"ViTFeatureExtractor"),hvt.forEach(t),r7o=r(Nke," (Swin Transformer V2 model)"),Nke.forEach(t),t7o=i(J),Ip=n(J,"LI",{});var qke=s(Ip);Gfe=n(qke,"STRONG",{});var pvt=s(Gfe);a7o=r(pvt,"van"),pvt.forEach(t),n7o=r(qke," \u2014 "),oD=n(qke,"A",{href:!0});var _vt=s(oD);s7o=r(_vt,"ConvNextFeatureExtractor"),_vt.forEach(t),l7o=r(qke," (VAN model)"),qke.forEach(t),i7o=i(J),Np=n(J,"LI",{});var jke=s(Np);Ofe=n(jke,"STRONG",{});var uvt=s(Ofe);d7o=r(uvt,"videomae"),uvt.forEach(t),c7o=r(jke," \u2014 "),rD=n(jke,"A",{href:!0});var bvt=s(rD);f7o=r(bvt,"ViTFeatureExtractor"),bvt.forEach(t),m7o=r(jke," (VideoMAE model)"),jke.forEach(t),g7o=i(J),qp=n(J,"LI",{});var Dke=s(qp);Vfe=n(Dke,"STRONG",{});var vvt=s(Vfe);h7o=r(vvt,"vilt"),vvt.forEach(t),p7o=r(Dke," \u2014 "),tD=n(Dke,"A",{href:!0});var Fvt=s(tD);_7o=r(Fvt,"ViltFeatureExtractor"),Fvt.forEach(t),u7o=r(Dke," (ViLT model)"),Dke.forEach(t),b7o=i(J),jp=n(J,"LI",{});var Gke=s(jp);Xfe=n(Gke,"STRONG",{});var Tvt=s(Xfe);v7o=r(Tvt,"vit"),Tvt.forEach(t),F7o=r(Gke," \u2014 "),aD=n(Gke,"A",{href:!0});var Mvt=s(aD);T7o=r(Mvt,"ViTFeatureExtractor"),Mvt.forEach(t),M7o=r(Gke," (ViT model)"),Gke.forEach(t),E7o=i(J),Dp=n(J,"LI",{});var Oke=s(Dp);zfe=n(Oke,"STRONG",{});var Evt=s(zfe);C7o=r(Evt,"vit_mae"),Evt.forEach(t),w7o=r(Oke," \u2014 "),nD=n(Oke,"A",{href:!0});var Cvt=s(nD);A7o=r(Cvt,"ViTFeatureExtractor"),Cvt.forEach(t),L7o=r(Oke," (ViTMAE model)"),Oke.forEach(t),y7o=i(J),Gp=n(J,"LI",{});var Vke=s(Gp);Wfe=n(Vke,"STRONG",{});var wvt=s(Wfe);x7o=r(wvt,"wav2vec2"),wvt.forEach(t),$7o=r(Vke," \u2014 "),sD=n(Vke,"A",{href:!0});var Avt=s(sD);k7o=r(Avt,"Wav2Vec2FeatureExtractor"),Avt.forEach(t),S7o=r(Vke," (Wav2Vec2 model)"),Vke.forEach(t),R7o=i(J),Op=n(J,"LI",{});var Xke=s(Op);Qfe=n(Xke,"STRONG",{});var Lvt=s(Qfe);P7o=r(Lvt,"wav2vec2-conformer"),Lvt.forEach(t),B7o=r(Xke," \u2014 "),lD=n(Xke,"A",{href:!0});var yvt=s(lD);I7o=r(yvt,"Wav2Vec2FeatureExtractor"),yvt.forEach(t),N7o=r(Xke," (Wav2Vec2-Conformer model)"),Xke.forEach(t),q7o=i(J),Vp=n(J,"LI",{});var zke=s(Vp);Ufe=n(zke,"STRONG",{});var xvt=s(Ufe);j7o=r(xvt,"yolos"),xvt.forEach(t),D7o=r(zke," \u2014 "),iD=n(zke,"A",{href:!0});var $vt=s(iD);G7o=r($vt,"YolosFeatureExtractor"),$vt.forEach(t),O7o=r(zke," (YOLOS model)"),zke.forEach(t),J.forEach(t),V7o=i(fa),T(Xp.$$.fragment,fa),X7o=i(fa),T(zp.$$.fragment,fa),fa.forEach(t),z7o=i(ml),Wp=n(ml,"DIV",{class:!0});var aJe=s(Wp);T(SL.$$.fragment,aJe),W7o=i(aJe),Hfe=n(aJe,"P",{});var kvt=s(Hfe);Q7o=r(kvt,"Register a new feature extractor for this class."),kvt.forEach(t),aJe.forEach(t),ml.forEach(t),YQe=i(f),ed=n(f,"H2",{class:!0});var nJe=s(ed);Qp=n(nJe,"A",{id:!0,class:!0,href:!0});var Svt=s(Qp);Jfe=n(Svt,"SPAN",{});var Rvt=s(Jfe);T(RL.$$.fragment,Rvt),Rvt.forEach(t),Svt.forEach(t),U7o=i(nJe),Yfe=n(nJe,"SPAN",{});var Pvt=s(Yfe);H7o=r(Pvt,"AutoProcessor"),Pvt.forEach(t),nJe.forEach(t),KQe=i(f),ko=n(f,"DIV",{class:!0});var gl=s(ko);T(PL.$$.fragment,gl),J7o=i(gl),BL=n(gl,"P",{});var sJe=s(BL);Y7o=r(sJe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dD=n(sJe,"A",{href:!0});var Bvt=s(dD);K7o=r(Bvt,"AutoProcessor.from_pretrained()"),Bvt.forEach(t),Z7o=r(sJe," class method."),sJe.forEach(t),e8o=i(gl),IL=n(gl,"P",{});var lJe=s(IL);o8o=r(lJe,"This class cannot be instantiated directly using "),Kfe=n(lJe,"CODE",{});var Ivt=s(Kfe);r8o=r(Ivt,"__init__()"),Ivt.forEach(t),t8o=r(lJe," (throws an error)."),lJe.forEach(t),a8o=i(gl),Je=n(gl,"DIV",{class:!0});var ma=s(Je);T(NL.$$.fragment,ma),n8o=i(ma),Zfe=n(ma,"P",{});var Nvt=s(Zfe);s8o=r(Nvt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Nvt.forEach(t),l8o=i(ma),od=n(ma,"P",{});var jae=s(od);i8o=r(jae,"The processor class to instantiate is selected based on the "),eme=n(jae,"CODE",{});var qvt=s(eme);d8o=r(qvt,"model_type"),qvt.forEach(t),c8o=r(jae,` property of the config object (either
passed as an argument or loaded from `),ome=n(jae,"CODE",{});var jvt=s(ome);f8o=r(jvt,"pretrained_model_name_or_path"),jvt.forEach(t),m8o=r(jae," if possible):"),jae.forEach(t),g8o=i(ma),ie=n(ma,"UL",{});var ge=s(ie);Up=n(ge,"LI",{});var Wke=s(Up);rme=n(Wke,"STRONG",{});var Dvt=s(rme);h8o=r(Dvt,"clip"),Dvt.forEach(t),p8o=r(Wke," \u2014 "),cD=n(Wke,"A",{href:!0});var Gvt=s(cD);_8o=r(Gvt,"CLIPProcessor"),Gvt.forEach(t),u8o=r(Wke," (CLIP model)"),Wke.forEach(t),b8o=i(ge),Hp=n(ge,"LI",{});var Qke=s(Hp);tme=n(Qke,"STRONG",{});var Ovt=s(tme);v8o=r(Ovt,"donut"),Ovt.forEach(t),F8o=r(Qke," \u2014 "),fD=n(Qke,"A",{href:!0});var Vvt=s(fD);T8o=r(Vvt,"DonutProcessor"),Vvt.forEach(t),M8o=r(Qke," (Donut model)"),Qke.forEach(t),E8o=i(ge),Jp=n(ge,"LI",{});var Uke=s(Jp);ame=n(Uke,"STRONG",{});var Xvt=s(ame);C8o=r(Xvt,"flava"),Xvt.forEach(t),w8o=r(Uke," \u2014 "),mD=n(Uke,"A",{href:!0});var zvt=s(mD);A8o=r(zvt,"FlavaProcessor"),zvt.forEach(t),L8o=r(Uke," (FLAVA model)"),Uke.forEach(t),y8o=i(ge),Yp=n(ge,"LI",{});var Hke=s(Yp);nme=n(Hke,"STRONG",{});var Wvt=s(nme);x8o=r(Wvt,"groupvit"),Wvt.forEach(t),$8o=r(Hke," \u2014 "),gD=n(Hke,"A",{href:!0});var Qvt=s(gD);k8o=r(Qvt,"CLIPProcessor"),Qvt.forEach(t),S8o=r(Hke," (GroupViT model)"),Hke.forEach(t),R8o=i(ge),Kp=n(ge,"LI",{});var Jke=s(Kp);sme=n(Jke,"STRONG",{});var Uvt=s(sme);P8o=r(Uvt,"layoutlmv2"),Uvt.forEach(t),B8o=r(Jke," \u2014 "),hD=n(Jke,"A",{href:!0});var Hvt=s(hD);I8o=r(Hvt,"LayoutLMv2Processor"),Hvt.forEach(t),N8o=r(Jke," (LayoutLMv2 model)"),Jke.forEach(t),q8o=i(ge),Zp=n(ge,"LI",{});var Yke=s(Zp);lme=n(Yke,"STRONG",{});var Jvt=s(lme);j8o=r(Jvt,"layoutlmv3"),Jvt.forEach(t),D8o=r(Yke," \u2014 "),pD=n(Yke,"A",{href:!0});var Yvt=s(pD);G8o=r(Yvt,"LayoutLMv3Processor"),Yvt.forEach(t),O8o=r(Yke," (LayoutLMv3 model)"),Yke.forEach(t),V8o=i(ge),e_=n(ge,"LI",{});var Kke=s(e_);ime=n(Kke,"STRONG",{});var Kvt=s(ime);X8o=r(Kvt,"layoutxlm"),Kvt.forEach(t),z8o=r(Kke," \u2014 "),_D=n(Kke,"A",{href:!0});var Zvt=s(_D);W8o=r(Zvt,"LayoutXLMProcessor"),Zvt.forEach(t),Q8o=r(Kke," (LayoutXLM model)"),Kke.forEach(t),U8o=i(ge),o_=n(ge,"LI",{});var Zke=s(o_);dme=n(Zke,"STRONG",{});var e6t=s(dme);H8o=r(e6t,"owlvit"),e6t.forEach(t),J8o=r(Zke," \u2014 "),uD=n(Zke,"A",{href:!0});var o6t=s(uD);Y8o=r(o6t,"OwlViTProcessor"),o6t.forEach(t),K8o=r(Zke," (OWL-ViT model)"),Zke.forEach(t),Z8o=i(ge),r_=n(ge,"LI",{});var eSe=s(r_);cme=n(eSe,"STRONG",{});var r6t=s(cme);e9o=r(r6t,"sew"),r6t.forEach(t),o9o=r(eSe," \u2014 "),bD=n(eSe,"A",{href:!0});var t6t=s(bD);r9o=r(t6t,"Wav2Vec2Processor"),t6t.forEach(t),t9o=r(eSe," (SEW model)"),eSe.forEach(t),a9o=i(ge),t_=n(ge,"LI",{});var oSe=s(t_);fme=n(oSe,"STRONG",{});var a6t=s(fme);n9o=r(a6t,"sew-d"),a6t.forEach(t),s9o=r(oSe," \u2014 "),vD=n(oSe,"A",{href:!0});var n6t=s(vD);l9o=r(n6t,"Wav2Vec2Processor"),n6t.forEach(t),i9o=r(oSe," (SEW-D model)"),oSe.forEach(t),d9o=i(ge),a_=n(ge,"LI",{});var rSe=s(a_);mme=n(rSe,"STRONG",{});var s6t=s(mme);c9o=r(s6t,"speech_to_text"),s6t.forEach(t),f9o=r(rSe," \u2014 "),FD=n(rSe,"A",{href:!0});var l6t=s(FD);m9o=r(l6t,"Speech2TextProcessor"),l6t.forEach(t),g9o=r(rSe," (Speech2Text model)"),rSe.forEach(t),h9o=i(ge),n_=n(ge,"LI",{});var tSe=s(n_);gme=n(tSe,"STRONG",{});var i6t=s(gme);p9o=r(i6t,"speech_to_text_2"),i6t.forEach(t),_9o=r(tSe," \u2014 "),TD=n(tSe,"A",{href:!0});var d6t=s(TD);u9o=r(d6t,"Speech2Text2Processor"),d6t.forEach(t),b9o=r(tSe," (Speech2Text2 model)"),tSe.forEach(t),v9o=i(ge),s_=n(ge,"LI",{});var aSe=s(s_);hme=n(aSe,"STRONG",{});var c6t=s(hme);F9o=r(c6t,"trocr"),c6t.forEach(t),T9o=r(aSe," \u2014 "),MD=n(aSe,"A",{href:!0});var f6t=s(MD);M9o=r(f6t,"TrOCRProcessor"),f6t.forEach(t),E9o=r(aSe," (TrOCR model)"),aSe.forEach(t),C9o=i(ge),l_=n(ge,"LI",{});var nSe=s(l_);pme=n(nSe,"STRONG",{});var m6t=s(pme);w9o=r(m6t,"unispeech"),m6t.forEach(t),A9o=r(nSe," \u2014 "),ED=n(nSe,"A",{href:!0});var g6t=s(ED);L9o=r(g6t,"Wav2Vec2Processor"),g6t.forEach(t),y9o=r(nSe," (UniSpeech model)"),nSe.forEach(t),x9o=i(ge),i_=n(ge,"LI",{});var sSe=s(i_);_me=n(sSe,"STRONG",{});var h6t=s(_me);$9o=r(h6t,"unispeech-sat"),h6t.forEach(t),k9o=r(sSe," \u2014 "),CD=n(sSe,"A",{href:!0});var p6t=s(CD);S9o=r(p6t,"Wav2Vec2Processor"),p6t.forEach(t),R9o=r(sSe," (UniSpeechSat model)"),sSe.forEach(t),P9o=i(ge),d_=n(ge,"LI",{});var lSe=s(d_);ume=n(lSe,"STRONG",{});var _6t=s(ume);B9o=r(_6t,"vilt"),_6t.forEach(t),I9o=r(lSe," \u2014 "),wD=n(lSe,"A",{href:!0});var u6t=s(wD);N9o=r(u6t,"ViltProcessor"),u6t.forEach(t),q9o=r(lSe," (ViLT model)"),lSe.forEach(t),j9o=i(ge),c_=n(ge,"LI",{});var iSe=s(c_);bme=n(iSe,"STRONG",{});var b6t=s(bme);D9o=r(b6t,"vision-text-dual-encoder"),b6t.forEach(t),G9o=r(iSe," \u2014 "),AD=n(iSe,"A",{href:!0});var v6t=s(AD);O9o=r(v6t,"VisionTextDualEncoderProcessor"),v6t.forEach(t),V9o=r(iSe," (VisionTextDualEncoder model)"),iSe.forEach(t),X9o=i(ge),f_=n(ge,"LI",{});var dSe=s(f_);vme=n(dSe,"STRONG",{});var F6t=s(vme);z9o=r(F6t,"wav2vec2"),F6t.forEach(t),W9o=r(dSe," \u2014 "),LD=n(dSe,"A",{href:!0});var T6t=s(LD);Q9o=r(T6t,"Wav2Vec2Processor"),T6t.forEach(t),U9o=r(dSe," (Wav2Vec2 model)"),dSe.forEach(t),H9o=i(ge),m_=n(ge,"LI",{});var cSe=s(m_);Fme=n(cSe,"STRONG",{});var M6t=s(Fme);J9o=r(M6t,"wav2vec2-conformer"),M6t.forEach(t),Y9o=r(cSe," \u2014 "),yD=n(cSe,"A",{href:!0});var E6t=s(yD);K9o=r(E6t,"Wav2Vec2Processor"),E6t.forEach(t),Z9o=r(cSe," (Wav2Vec2-Conformer model)"),cSe.forEach(t),eMo=i(ge),g_=n(ge,"LI",{});var fSe=s(g_);Tme=n(fSe,"STRONG",{});var C6t=s(Tme);oMo=r(C6t,"wavlm"),C6t.forEach(t),rMo=r(fSe," \u2014 "),xD=n(fSe,"A",{href:!0});var w6t=s(xD);tMo=r(w6t,"Wav2Vec2Processor"),w6t.forEach(t),aMo=r(fSe," (WavLM model)"),fSe.forEach(t),ge.forEach(t),nMo=i(ma),T(h_.$$.fragment,ma),sMo=i(ma),T(p_.$$.fragment,ma),ma.forEach(t),lMo=i(gl),__=n(gl,"DIV",{class:!0});var iJe=s(__);T(qL.$$.fragment,iJe),iMo=i(iJe),Mme=n(iJe,"P",{});var A6t=s(Mme);dMo=r(A6t,"Register a new processor for this class."),A6t.forEach(t),iJe.forEach(t),gl.forEach(t),ZQe=i(f),rd=n(f,"H2",{class:!0});var dJe=s(rd);u_=n(dJe,"A",{id:!0,class:!0,href:!0});var L6t=s(u_);Eme=n(L6t,"SPAN",{});var y6t=s(Eme);T(jL.$$.fragment,y6t),y6t.forEach(t),L6t.forEach(t),cMo=i(dJe),Cme=n(dJe,"SPAN",{});var x6t=s(Cme);fMo=r(x6t,"AutoModel"),x6t.forEach(t),dJe.forEach(t),eUe=i(f),So=n(f,"DIV",{class:!0});var hl=s(So);T(DL.$$.fragment,hl),mMo=i(hl),td=n(hl,"P",{});var Dae=s(td);gMo=r(Dae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$D=n(Dae,"A",{href:!0});var $6t=s($D);hMo=r($6t,"from_pretrained()"),$6t.forEach(t),pMo=r(Dae," class method or the "),kD=n(Dae,"A",{href:!0});var k6t=s(kD);_Mo=r(k6t,"from_config()"),k6t.forEach(t),uMo=r(Dae,` class
method.`),Dae.forEach(t),bMo=i(hl),GL=n(hl,"P",{});var cJe=s(GL);vMo=r(cJe,"This class cannot be instantiated directly using "),wme=n(cJe,"CODE",{});var S6t=s(wme);FMo=r(S6t,"__init__()"),S6t.forEach(t),TMo=r(cJe," (throws an error)."),cJe.forEach(t),MMo=i(hl),mt=n(hl,"DIV",{class:!0});var mw=s(mt);T(OL.$$.fragment,mw),EMo=i(mw),Ame=n(mw,"P",{});var R6t=s(Ame);CMo=r(R6t,"Instantiates one of the base model classes of the library from a configuration."),R6t.forEach(t),wMo=i(mw),ad=n(mw,"P",{});var Gae=s(ad);AMo=r(Gae,`Note:
Loading a model from its configuration file does `),Lme=n(Gae,"STRONG",{});var P6t=s(Lme);LMo=r(P6t,"not"),P6t.forEach(t),yMo=r(Gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=n(Gae,"A",{href:!0});var B6t=s(SD);xMo=r(B6t,"from_pretrained()"),B6t.forEach(t),$Mo=r(Gae," to load the model weights."),Gae.forEach(t),kMo=i(mw),T(b_.$$.fragment,mw),mw.forEach(t),SMo=i(hl),Ye=n(hl,"DIV",{class:!0});var ga=s(Ye);T(VL.$$.fragment,ga),RMo=i(ga),yme=n(ga,"P",{});var I6t=s(yme);PMo=r(I6t,"Instantiate one of the base model classes of the library from a pretrained model."),I6t.forEach(t),BMo=i(ga),Va=n(ga,"P",{});var gw=s(Va);IMo=r(gw,"The model class to instantiate is selected based on the "),xme=n(gw,"CODE",{});var N6t=s(xme);NMo=r(N6t,"model_type"),N6t.forEach(t),qMo=r(gw,` property of the config object (either
passed as an argument or loaded from `),$me=n(gw,"CODE",{});var q6t=s($me);jMo=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),DMo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=n(gw,"CODE",{});var j6t=s(kme);GMo=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),OMo=r(gw,":"),gw.forEach(t),VMo=i(ga),y=n(ga,"UL",{});var x=s(y);v_=n(x,"LI",{});var mSe=s(v_);Sme=n(mSe,"STRONG",{});var D6t=s(Sme);XMo=r(D6t,"albert"),D6t.forEach(t),zMo=r(mSe," \u2014 "),RD=n(mSe,"A",{href:!0});var G6t=s(RD);WMo=r(G6t,"AlbertModel"),G6t.forEach(t),QMo=r(mSe," (ALBERT model)"),mSe.forEach(t),UMo=i(x),F_=n(x,"LI",{});var gSe=s(F_);Rme=n(gSe,"STRONG",{});var O6t=s(Rme);HMo=r(O6t,"bart"),O6t.forEach(t),JMo=r(gSe," \u2014 "),PD=n(gSe,"A",{href:!0});var V6t=s(PD);YMo=r(V6t,"BartModel"),V6t.forEach(t),KMo=r(gSe," (BART model)"),gSe.forEach(t),ZMo=i(x),T_=n(x,"LI",{});var hSe=s(T_);Pme=n(hSe,"STRONG",{});var X6t=s(Pme);eEo=r(X6t,"beit"),X6t.forEach(t),oEo=r(hSe," \u2014 "),BD=n(hSe,"A",{href:!0});var z6t=s(BD);rEo=r(z6t,"BeitModel"),z6t.forEach(t),tEo=r(hSe," (BEiT model)"),hSe.forEach(t),aEo=i(x),M_=n(x,"LI",{});var pSe=s(M_);Bme=n(pSe,"STRONG",{});var W6t=s(Bme);nEo=r(W6t,"bert"),W6t.forEach(t),sEo=r(pSe," \u2014 "),ID=n(pSe,"A",{href:!0});var Q6t=s(ID);lEo=r(Q6t,"BertModel"),Q6t.forEach(t),iEo=r(pSe," (BERT model)"),pSe.forEach(t),dEo=i(x),E_=n(x,"LI",{});var _Se=s(E_);Ime=n(_Se,"STRONG",{});var U6t=s(Ime);cEo=r(U6t,"bert-generation"),U6t.forEach(t),fEo=r(_Se," \u2014 "),ND=n(_Se,"A",{href:!0});var H6t=s(ND);mEo=r(H6t,"BertGenerationEncoder"),H6t.forEach(t),gEo=r(_Se," (Bert Generation model)"),_Se.forEach(t),hEo=i(x),C_=n(x,"LI",{});var uSe=s(C_);Nme=n(uSe,"STRONG",{});var J6t=s(Nme);pEo=r(J6t,"big_bird"),J6t.forEach(t),_Eo=r(uSe," \u2014 "),qD=n(uSe,"A",{href:!0});var Y6t=s(qD);uEo=r(Y6t,"BigBirdModel"),Y6t.forEach(t),bEo=r(uSe," (BigBird model)"),uSe.forEach(t),vEo=i(x),w_=n(x,"LI",{});var bSe=s(w_);qme=n(bSe,"STRONG",{});var K6t=s(qme);FEo=r(K6t,"bigbird_pegasus"),K6t.forEach(t),TEo=r(bSe," \u2014 "),jD=n(bSe,"A",{href:!0});var Z6t=s(jD);MEo=r(Z6t,"BigBirdPegasusModel"),Z6t.forEach(t),EEo=r(bSe," (BigBird-Pegasus model)"),bSe.forEach(t),CEo=i(x),A_=n(x,"LI",{});var vSe=s(A_);jme=n(vSe,"STRONG",{});var eFt=s(jme);wEo=r(eFt,"blenderbot"),eFt.forEach(t),AEo=r(vSe," \u2014 "),DD=n(vSe,"A",{href:!0});var oFt=s(DD);LEo=r(oFt,"BlenderbotModel"),oFt.forEach(t),yEo=r(vSe," (Blenderbot model)"),vSe.forEach(t),xEo=i(x),L_=n(x,"LI",{});var FSe=s(L_);Dme=n(FSe,"STRONG",{});var rFt=s(Dme);$Eo=r(rFt,"blenderbot-small"),rFt.forEach(t),kEo=r(FSe," \u2014 "),GD=n(FSe,"A",{href:!0});var tFt=s(GD);SEo=r(tFt,"BlenderbotSmallModel"),tFt.forEach(t),REo=r(FSe," (BlenderbotSmall model)"),FSe.forEach(t),PEo=i(x),y_=n(x,"LI",{});var TSe=s(y_);Gme=n(TSe,"STRONG",{});var aFt=s(Gme);BEo=r(aFt,"bloom"),aFt.forEach(t),IEo=r(TSe," \u2014 "),OD=n(TSe,"A",{href:!0});var nFt=s(OD);NEo=r(nFt,"BloomModel"),nFt.forEach(t),qEo=r(TSe," (BLOOM model)"),TSe.forEach(t),jEo=i(x),x_=n(x,"LI",{});var MSe=s(x_);Ome=n(MSe,"STRONG",{});var sFt=s(Ome);DEo=r(sFt,"camembert"),sFt.forEach(t),GEo=r(MSe," \u2014 "),VD=n(MSe,"A",{href:!0});var lFt=s(VD);OEo=r(lFt,"CamembertModel"),lFt.forEach(t),VEo=r(MSe," (CamemBERT model)"),MSe.forEach(t),XEo=i(x),$_=n(x,"LI",{});var ESe=s($_);Vme=n(ESe,"STRONG",{});var iFt=s(Vme);zEo=r(iFt,"canine"),iFt.forEach(t),WEo=r(ESe," \u2014 "),XD=n(ESe,"A",{href:!0});var dFt=s(XD);QEo=r(dFt,"CanineModel"),dFt.forEach(t),UEo=r(ESe," (CANINE model)"),ESe.forEach(t),HEo=i(x),k_=n(x,"LI",{});var CSe=s(k_);Xme=n(CSe,"STRONG",{});var cFt=s(Xme);JEo=r(cFt,"clip"),cFt.forEach(t),YEo=r(CSe," \u2014 "),zD=n(CSe,"A",{href:!0});var fFt=s(zD);KEo=r(fFt,"CLIPModel"),fFt.forEach(t),ZEo=r(CSe," (CLIP model)"),CSe.forEach(t),e4o=i(x),S_=n(x,"LI",{});var wSe=s(S_);zme=n(wSe,"STRONG",{});var mFt=s(zme);o4o=r(mFt,"codegen"),mFt.forEach(t),r4o=r(wSe," \u2014 "),WD=n(wSe,"A",{href:!0});var gFt=s(WD);t4o=r(gFt,"CodeGenModel"),gFt.forEach(t),a4o=r(wSe," (CodeGen model)"),wSe.forEach(t),n4o=i(x),R_=n(x,"LI",{});var ASe=s(R_);Wme=n(ASe,"STRONG",{});var hFt=s(Wme);s4o=r(hFt,"convbert"),hFt.forEach(t),l4o=r(ASe," \u2014 "),QD=n(ASe,"A",{href:!0});var pFt=s(QD);i4o=r(pFt,"ConvBertModel"),pFt.forEach(t),d4o=r(ASe," (ConvBERT model)"),ASe.forEach(t),c4o=i(x),P_=n(x,"LI",{});var LSe=s(P_);Qme=n(LSe,"STRONG",{});var _Ft=s(Qme);f4o=r(_Ft,"convnext"),_Ft.forEach(t),m4o=r(LSe," \u2014 "),UD=n(LSe,"A",{href:!0});var uFt=s(UD);g4o=r(uFt,"ConvNextModel"),uFt.forEach(t),h4o=r(LSe," (ConvNeXT model)"),LSe.forEach(t),p4o=i(x),B_=n(x,"LI",{});var ySe=s(B_);Ume=n(ySe,"STRONG",{});var bFt=s(Ume);_4o=r(bFt,"ctrl"),bFt.forEach(t),u4o=r(ySe," \u2014 "),HD=n(ySe,"A",{href:!0});var vFt=s(HD);b4o=r(vFt,"CTRLModel"),vFt.forEach(t),v4o=r(ySe," (CTRL model)"),ySe.forEach(t),F4o=i(x),I_=n(x,"LI",{});var xSe=s(I_);Hme=n(xSe,"STRONG",{});var FFt=s(Hme);T4o=r(FFt,"cvt"),FFt.forEach(t),M4o=r(xSe," \u2014 "),JD=n(xSe,"A",{href:!0});var TFt=s(JD);E4o=r(TFt,"CvtModel"),TFt.forEach(t),C4o=r(xSe," (CvT model)"),xSe.forEach(t),w4o=i(x),N_=n(x,"LI",{});var $Se=s(N_);Jme=n($Se,"STRONG",{});var MFt=s(Jme);A4o=r(MFt,"data2vec-audio"),MFt.forEach(t),L4o=r($Se," \u2014 "),YD=n($Se,"A",{href:!0});var EFt=s(YD);y4o=r(EFt,"Data2VecAudioModel"),EFt.forEach(t),x4o=r($Se," (Data2VecAudio model)"),$Se.forEach(t),$4o=i(x),q_=n(x,"LI",{});var kSe=s(q_);Yme=n(kSe,"STRONG",{});var CFt=s(Yme);k4o=r(CFt,"data2vec-text"),CFt.forEach(t),S4o=r(kSe," \u2014 "),KD=n(kSe,"A",{href:!0});var wFt=s(KD);R4o=r(wFt,"Data2VecTextModel"),wFt.forEach(t),P4o=r(kSe," (Data2VecText model)"),kSe.forEach(t),B4o=i(x),j_=n(x,"LI",{});var SSe=s(j_);Kme=n(SSe,"STRONG",{});var AFt=s(Kme);I4o=r(AFt,"data2vec-vision"),AFt.forEach(t),N4o=r(SSe," \u2014 "),ZD=n(SSe,"A",{href:!0});var LFt=s(ZD);q4o=r(LFt,"Data2VecVisionModel"),LFt.forEach(t),j4o=r(SSe," (Data2VecVision model)"),SSe.forEach(t),D4o=i(x),D_=n(x,"LI",{});var RSe=s(D_);Zme=n(RSe,"STRONG",{});var yFt=s(Zme);G4o=r(yFt,"deberta"),yFt.forEach(t),O4o=r(RSe," \u2014 "),eG=n(RSe,"A",{href:!0});var xFt=s(eG);V4o=r(xFt,"DebertaModel"),xFt.forEach(t),X4o=r(RSe," (DeBERTa model)"),RSe.forEach(t),z4o=i(x),G_=n(x,"LI",{});var PSe=s(G_);ege=n(PSe,"STRONG",{});var $Ft=s(ege);W4o=r($Ft,"deberta-v2"),$Ft.forEach(t),Q4o=r(PSe," \u2014 "),oG=n(PSe,"A",{href:!0});var kFt=s(oG);U4o=r(kFt,"DebertaV2Model"),kFt.forEach(t),H4o=r(PSe," (DeBERTa-v2 model)"),PSe.forEach(t),J4o=i(x),O_=n(x,"LI",{});var BSe=s(O_);oge=n(BSe,"STRONG",{});var SFt=s(oge);Y4o=r(SFt,"decision_transformer"),SFt.forEach(t),K4o=r(BSe," \u2014 "),rG=n(BSe,"A",{href:!0});var RFt=s(rG);Z4o=r(RFt,"DecisionTransformerModel"),RFt.forEach(t),eCo=r(BSe," (Decision Transformer model)"),BSe.forEach(t),oCo=i(x),V_=n(x,"LI",{});var ISe=s(V_);rge=n(ISe,"STRONG",{});var PFt=s(rge);rCo=r(PFt,"deit"),PFt.forEach(t),tCo=r(ISe," \u2014 "),tG=n(ISe,"A",{href:!0});var BFt=s(tG);aCo=r(BFt,"DeiTModel"),BFt.forEach(t),nCo=r(ISe," (DeiT model)"),ISe.forEach(t),sCo=i(x),X_=n(x,"LI",{});var NSe=s(X_);tge=n(NSe,"STRONG",{});var IFt=s(tge);lCo=r(IFt,"detr"),IFt.forEach(t),iCo=r(NSe," \u2014 "),aG=n(NSe,"A",{href:!0});var NFt=s(aG);dCo=r(NFt,"DetrModel"),NFt.forEach(t),cCo=r(NSe," (DETR model)"),NSe.forEach(t),fCo=i(x),z_=n(x,"LI",{});var qSe=s(z_);age=n(qSe,"STRONG",{});var qFt=s(age);mCo=r(qFt,"distilbert"),qFt.forEach(t),gCo=r(qSe," \u2014 "),nG=n(qSe,"A",{href:!0});var jFt=s(nG);hCo=r(jFt,"DistilBertModel"),jFt.forEach(t),pCo=r(qSe," (DistilBERT model)"),qSe.forEach(t),_Co=i(x),W_=n(x,"LI",{});var jSe=s(W_);nge=n(jSe,"STRONG",{});var DFt=s(nge);uCo=r(DFt,"donut-swin"),DFt.forEach(t),bCo=r(jSe," \u2014 "),sG=n(jSe,"A",{href:!0});var GFt=s(sG);vCo=r(GFt,"DonutSwinModel"),GFt.forEach(t),FCo=r(jSe," (DonutSwin model)"),jSe.forEach(t),TCo=i(x),Q_=n(x,"LI",{});var DSe=s(Q_);sge=n(DSe,"STRONG",{});var OFt=s(sge);MCo=r(OFt,"dpr"),OFt.forEach(t),ECo=r(DSe," \u2014 "),lG=n(DSe,"A",{href:!0});var VFt=s(lG);CCo=r(VFt,"DPRQuestionEncoder"),VFt.forEach(t),wCo=r(DSe," (DPR model)"),DSe.forEach(t),ACo=i(x),U_=n(x,"LI",{});var GSe=s(U_);lge=n(GSe,"STRONG",{});var XFt=s(lge);LCo=r(XFt,"dpt"),XFt.forEach(t),yCo=r(GSe," \u2014 "),iG=n(GSe,"A",{href:!0});var zFt=s(iG);xCo=r(zFt,"DPTModel"),zFt.forEach(t),$Co=r(GSe," (DPT model)"),GSe.forEach(t),kCo=i(x),H_=n(x,"LI",{});var OSe=s(H_);ige=n(OSe,"STRONG",{});var WFt=s(ige);SCo=r(WFt,"electra"),WFt.forEach(t),RCo=r(OSe," \u2014 "),dG=n(OSe,"A",{href:!0});var QFt=s(dG);PCo=r(QFt,"ElectraModel"),QFt.forEach(t),BCo=r(OSe," (ELECTRA model)"),OSe.forEach(t),ICo=i(x),J_=n(x,"LI",{});var VSe=s(J_);dge=n(VSe,"STRONG",{});var UFt=s(dge);NCo=r(UFt,"flaubert"),UFt.forEach(t),qCo=r(VSe," \u2014 "),cG=n(VSe,"A",{href:!0});var HFt=s(cG);jCo=r(HFt,"FlaubertModel"),HFt.forEach(t),DCo=r(VSe," (FlauBERT model)"),VSe.forEach(t),GCo=i(x),Y_=n(x,"LI",{});var XSe=s(Y_);cge=n(XSe,"STRONG",{});var JFt=s(cge);OCo=r(JFt,"flava"),JFt.forEach(t),VCo=r(XSe," \u2014 "),fG=n(XSe,"A",{href:!0});var YFt=s(fG);XCo=r(YFt,"FlavaModel"),YFt.forEach(t),zCo=r(XSe," (FLAVA model)"),XSe.forEach(t),WCo=i(x),K_=n(x,"LI",{});var zSe=s(K_);fge=n(zSe,"STRONG",{});var KFt=s(fge);QCo=r(KFt,"fnet"),KFt.forEach(t),UCo=r(zSe," \u2014 "),mG=n(zSe,"A",{href:!0});var ZFt=s(mG);HCo=r(ZFt,"FNetModel"),ZFt.forEach(t),JCo=r(zSe," (FNet model)"),zSe.forEach(t),YCo=i(x),Z_=n(x,"LI",{});var WSe=s(Z_);mge=n(WSe,"STRONG",{});var eTt=s(mge);KCo=r(eTt,"fsmt"),eTt.forEach(t),ZCo=r(WSe," \u2014 "),gG=n(WSe,"A",{href:!0});var oTt=s(gG);e3o=r(oTt,"FSMTModel"),oTt.forEach(t),o3o=r(WSe," (FairSeq Machine-Translation model)"),WSe.forEach(t),r3o=i(x),nl=n(x,"LI",{});var KR=s(nl);gge=n(KR,"STRONG",{});var rTt=s(gge);t3o=r(rTt,"funnel"),rTt.forEach(t),a3o=r(KR," \u2014 "),hG=n(KR,"A",{href:!0});var tTt=s(hG);n3o=r(tTt,"FunnelModel"),tTt.forEach(t),s3o=r(KR," or "),pG=n(KR,"A",{href:!0});var aTt=s(pG);l3o=r(aTt,"FunnelBaseModel"),aTt.forEach(t),i3o=r(KR," (Funnel Transformer model)"),KR.forEach(t),d3o=i(x),eu=n(x,"LI",{});var QSe=s(eu);hge=n(QSe,"STRONG",{});var nTt=s(hge);c3o=r(nTt,"glpn"),nTt.forEach(t),f3o=r(QSe," \u2014 "),_G=n(QSe,"A",{href:!0});var sTt=s(_G);m3o=r(sTt,"GLPNModel"),sTt.forEach(t),g3o=r(QSe," (GLPN model)"),QSe.forEach(t),h3o=i(x),ou=n(x,"LI",{});var USe=s(ou);pge=n(USe,"STRONG",{});var lTt=s(pge);p3o=r(lTt,"gpt2"),lTt.forEach(t),_3o=r(USe," \u2014 "),uG=n(USe,"A",{href:!0});var iTt=s(uG);u3o=r(iTt,"GPT2Model"),iTt.forEach(t),b3o=r(USe," (OpenAI GPT-2 model)"),USe.forEach(t),v3o=i(x),ru=n(x,"LI",{});var HSe=s(ru);_ge=n(HSe,"STRONG",{});var dTt=s(_ge);F3o=r(dTt,"gpt_neo"),dTt.forEach(t),T3o=r(HSe," \u2014 "),bG=n(HSe,"A",{href:!0});var cTt=s(bG);M3o=r(cTt,"GPTNeoModel"),cTt.forEach(t),E3o=r(HSe," (GPT Neo model)"),HSe.forEach(t),C3o=i(x),tu=n(x,"LI",{});var JSe=s(tu);uge=n(JSe,"STRONG",{});var fTt=s(uge);w3o=r(fTt,"gpt_neox"),fTt.forEach(t),A3o=r(JSe," \u2014 "),vG=n(JSe,"A",{href:!0});var mTt=s(vG);L3o=r(mTt,"GPTNeoXModel"),mTt.forEach(t),y3o=r(JSe," (GPT NeoX model)"),JSe.forEach(t),x3o=i(x),au=n(x,"LI",{});var YSe=s(au);bge=n(YSe,"STRONG",{});var gTt=s(bge);$3o=r(gTt,"gptj"),gTt.forEach(t),k3o=r(YSe," \u2014 "),FG=n(YSe,"A",{href:!0});var hTt=s(FG);S3o=r(hTt,"GPTJModel"),hTt.forEach(t),R3o=r(YSe," (GPT-J model)"),YSe.forEach(t),P3o=i(x),nu=n(x,"LI",{});var KSe=s(nu);vge=n(KSe,"STRONG",{});var pTt=s(vge);B3o=r(pTt,"groupvit"),pTt.forEach(t),I3o=r(KSe," \u2014 "),TG=n(KSe,"A",{href:!0});var _Tt=s(TG);N3o=r(_Tt,"GroupViTModel"),_Tt.forEach(t),q3o=r(KSe," (GroupViT model)"),KSe.forEach(t),j3o=i(x),su=n(x,"LI",{});var ZSe=s(su);Fge=n(ZSe,"STRONG",{});var uTt=s(Fge);D3o=r(uTt,"hubert"),uTt.forEach(t),G3o=r(ZSe," \u2014 "),MG=n(ZSe,"A",{href:!0});var bTt=s(MG);O3o=r(bTt,"HubertModel"),bTt.forEach(t),V3o=r(ZSe," (Hubert model)"),ZSe.forEach(t),X3o=i(x),lu=n(x,"LI",{});var eRe=s(lu);Tge=n(eRe,"STRONG",{});var vTt=s(Tge);z3o=r(vTt,"ibert"),vTt.forEach(t),W3o=r(eRe," \u2014 "),EG=n(eRe,"A",{href:!0});var FTt=s(EG);Q3o=r(FTt,"IBertModel"),FTt.forEach(t),U3o=r(eRe," (I-BERT model)"),eRe.forEach(t),H3o=i(x),iu=n(x,"LI",{});var oRe=s(iu);Mge=n(oRe,"STRONG",{});var TTt=s(Mge);J3o=r(TTt,"imagegpt"),TTt.forEach(t),Y3o=r(oRe," \u2014 "),CG=n(oRe,"A",{href:!0});var MTt=s(CG);K3o=r(MTt,"ImageGPTModel"),MTt.forEach(t),Z3o=r(oRe," (ImageGPT model)"),oRe.forEach(t),e5o=i(x),du=n(x,"LI",{});var rRe=s(du);Ege=n(rRe,"STRONG",{});var ETt=s(Ege);o5o=r(ETt,"layoutlm"),ETt.forEach(t),r5o=r(rRe," \u2014 "),wG=n(rRe,"A",{href:!0});var CTt=s(wG);t5o=r(CTt,"LayoutLMModel"),CTt.forEach(t),a5o=r(rRe," (LayoutLM model)"),rRe.forEach(t),n5o=i(x),cu=n(x,"LI",{});var tRe=s(cu);Cge=n(tRe,"STRONG",{});var wTt=s(Cge);s5o=r(wTt,"layoutlmv2"),wTt.forEach(t),l5o=r(tRe," \u2014 "),AG=n(tRe,"A",{href:!0});var ATt=s(AG);i5o=r(ATt,"LayoutLMv2Model"),ATt.forEach(t),d5o=r(tRe," (LayoutLMv2 model)"),tRe.forEach(t),c5o=i(x),fu=n(x,"LI",{});var aRe=s(fu);wge=n(aRe,"STRONG",{});var LTt=s(wge);f5o=r(LTt,"layoutlmv3"),LTt.forEach(t),m5o=r(aRe," \u2014 "),LG=n(aRe,"A",{href:!0});var yTt=s(LG);g5o=r(yTt,"LayoutLMv3Model"),yTt.forEach(t),h5o=r(aRe," (LayoutLMv3 model)"),aRe.forEach(t),p5o=i(x),mu=n(x,"LI",{});var nRe=s(mu);Age=n(nRe,"STRONG",{});var xTt=s(Age);_5o=r(xTt,"led"),xTt.forEach(t),u5o=r(nRe," \u2014 "),yG=n(nRe,"A",{href:!0});var $Tt=s(yG);b5o=r($Tt,"LEDModel"),$Tt.forEach(t),v5o=r(nRe," (LED model)"),nRe.forEach(t),F5o=i(x),gu=n(x,"LI",{});var sRe=s(gu);Lge=n(sRe,"STRONG",{});var kTt=s(Lge);T5o=r(kTt,"levit"),kTt.forEach(t),M5o=r(sRe," \u2014 "),xG=n(sRe,"A",{href:!0});var STt=s(xG);E5o=r(STt,"LevitModel"),STt.forEach(t),C5o=r(sRe," (LeViT model)"),sRe.forEach(t),w5o=i(x),hu=n(x,"LI",{});var lRe=s(hu);yge=n(lRe,"STRONG",{});var RTt=s(yge);A5o=r(RTt,"longformer"),RTt.forEach(t),L5o=r(lRe," \u2014 "),$G=n(lRe,"A",{href:!0});var PTt=s($G);y5o=r(PTt,"LongformerModel"),PTt.forEach(t),x5o=r(lRe," (Longformer model)"),lRe.forEach(t),$5o=i(x),pu=n(x,"LI",{});var iRe=s(pu);xge=n(iRe,"STRONG",{});var BTt=s(xge);k5o=r(BTt,"longt5"),BTt.forEach(t),S5o=r(iRe," \u2014 "),kG=n(iRe,"A",{href:!0});var ITt=s(kG);R5o=r(ITt,"LongT5Model"),ITt.forEach(t),P5o=r(iRe," (LongT5 model)"),iRe.forEach(t),B5o=i(x),_u=n(x,"LI",{});var dRe=s(_u);$ge=n(dRe,"STRONG",{});var NTt=s($ge);I5o=r(NTt,"luke"),NTt.forEach(t),N5o=r(dRe," \u2014 "),SG=n(dRe,"A",{href:!0});var qTt=s(SG);q5o=r(qTt,"LukeModel"),qTt.forEach(t),j5o=r(dRe," (LUKE model)"),dRe.forEach(t),D5o=i(x),uu=n(x,"LI",{});var cRe=s(uu);kge=n(cRe,"STRONG",{});var jTt=s(kge);G5o=r(jTt,"lxmert"),jTt.forEach(t),O5o=r(cRe," \u2014 "),RG=n(cRe,"A",{href:!0});var DTt=s(RG);V5o=r(DTt,"LxmertModel"),DTt.forEach(t),X5o=r(cRe," (LXMERT model)"),cRe.forEach(t),z5o=i(x),bu=n(x,"LI",{});var fRe=s(bu);Sge=n(fRe,"STRONG",{});var GTt=s(Sge);W5o=r(GTt,"m2m_100"),GTt.forEach(t),Q5o=r(fRe," \u2014 "),PG=n(fRe,"A",{href:!0});var OTt=s(PG);U5o=r(OTt,"M2M100Model"),OTt.forEach(t),H5o=r(fRe," (M2M100 model)"),fRe.forEach(t),J5o=i(x),vu=n(x,"LI",{});var mRe=s(vu);Rge=n(mRe,"STRONG",{});var VTt=s(Rge);Y5o=r(VTt,"marian"),VTt.forEach(t),K5o=r(mRe," \u2014 "),BG=n(mRe,"A",{href:!0});var XTt=s(BG);Z5o=r(XTt,"MarianModel"),XTt.forEach(t),e0o=r(mRe," (Marian model)"),mRe.forEach(t),o0o=i(x),Fu=n(x,"LI",{});var gRe=s(Fu);Pge=n(gRe,"STRONG",{});var zTt=s(Pge);r0o=r(zTt,"maskformer"),zTt.forEach(t),t0o=r(gRe," \u2014 "),IG=n(gRe,"A",{href:!0});var WTt=s(IG);a0o=r(WTt,"MaskFormerModel"),WTt.forEach(t),n0o=r(gRe," (MaskFormer model)"),gRe.forEach(t),s0o=i(x),Tu=n(x,"LI",{});var hRe=s(Tu);Bge=n(hRe,"STRONG",{});var QTt=s(Bge);l0o=r(QTt,"mbart"),QTt.forEach(t),i0o=r(hRe," \u2014 "),NG=n(hRe,"A",{href:!0});var UTt=s(NG);d0o=r(UTt,"MBartModel"),UTt.forEach(t),c0o=r(hRe," (mBART model)"),hRe.forEach(t),f0o=i(x),Mu=n(x,"LI",{});var pRe=s(Mu);Ige=n(pRe,"STRONG",{});var HTt=s(Ige);m0o=r(HTt,"mctct"),HTt.forEach(t),g0o=r(pRe," \u2014 "),qG=n(pRe,"A",{href:!0});var JTt=s(qG);h0o=r(JTt,"MCTCTModel"),JTt.forEach(t),p0o=r(pRe," (M-CTC-T model)"),pRe.forEach(t),_0o=i(x),Eu=n(x,"LI",{});var _Re=s(Eu);Nge=n(_Re,"STRONG",{});var YTt=s(Nge);u0o=r(YTt,"megatron-bert"),YTt.forEach(t),b0o=r(_Re," \u2014 "),jG=n(_Re,"A",{href:!0});var KTt=s(jG);v0o=r(KTt,"MegatronBertModel"),KTt.forEach(t),F0o=r(_Re," (Megatron-BERT model)"),_Re.forEach(t),T0o=i(x),Cu=n(x,"LI",{});var uRe=s(Cu);qge=n(uRe,"STRONG",{});var ZTt=s(qge);M0o=r(ZTt,"mobilebert"),ZTt.forEach(t),E0o=r(uRe," \u2014 "),DG=n(uRe,"A",{href:!0});var e7t=s(DG);C0o=r(e7t,"MobileBertModel"),e7t.forEach(t),w0o=r(uRe," (MobileBERT model)"),uRe.forEach(t),A0o=i(x),wu=n(x,"LI",{});var bRe=s(wu);jge=n(bRe,"STRONG",{});var o7t=s(jge);L0o=r(o7t,"mobilevit"),o7t.forEach(t),y0o=r(bRe," \u2014 "),GG=n(bRe,"A",{href:!0});var r7t=s(GG);x0o=r(r7t,"MobileViTModel"),r7t.forEach(t),$0o=r(bRe," (MobileViT model)"),bRe.forEach(t),k0o=i(x),Au=n(x,"LI",{});var vRe=s(Au);Dge=n(vRe,"STRONG",{});var t7t=s(Dge);S0o=r(t7t,"mpnet"),t7t.forEach(t),R0o=r(vRe," \u2014 "),OG=n(vRe,"A",{href:!0});var a7t=s(OG);P0o=r(a7t,"MPNetModel"),a7t.forEach(t),B0o=r(vRe," (MPNet model)"),vRe.forEach(t),I0o=i(x),Lu=n(x,"LI",{});var FRe=s(Lu);Gge=n(FRe,"STRONG",{});var n7t=s(Gge);N0o=r(n7t,"mt5"),n7t.forEach(t),q0o=r(FRe," \u2014 "),VG=n(FRe,"A",{href:!0});var s7t=s(VG);j0o=r(s7t,"MT5Model"),s7t.forEach(t),D0o=r(FRe," (MT5 model)"),FRe.forEach(t),G0o=i(x),yu=n(x,"LI",{});var TRe=s(yu);Oge=n(TRe,"STRONG",{});var l7t=s(Oge);O0o=r(l7t,"mvp"),l7t.forEach(t),V0o=r(TRe," \u2014 "),XG=n(TRe,"A",{href:!0});var i7t=s(XG);X0o=r(i7t,"MvpModel"),i7t.forEach(t),z0o=r(TRe," (MVP model)"),TRe.forEach(t),W0o=i(x),xu=n(x,"LI",{});var MRe=s(xu);Vge=n(MRe,"STRONG",{});var d7t=s(Vge);Q0o=r(d7t,"nezha"),d7t.forEach(t),U0o=r(MRe," \u2014 "),zG=n(MRe,"A",{href:!0});var c7t=s(zG);H0o=r(c7t,"NezhaModel"),c7t.forEach(t),J0o=r(MRe," (Nezha model)"),MRe.forEach(t),Y0o=i(x),$u=n(x,"LI",{});var ERe=s($u);Xge=n(ERe,"STRONG",{});var f7t=s(Xge);K0o=r(f7t,"nllb"),f7t.forEach(t),Z0o=r(ERe," \u2014 "),WG=n(ERe,"A",{href:!0});var m7t=s(WG);ewo=r(m7t,"M2M100Model"),m7t.forEach(t),owo=r(ERe," (NLLB model)"),ERe.forEach(t),rwo=i(x),ku=n(x,"LI",{});var CRe=s(ku);zge=n(CRe,"STRONG",{});var g7t=s(zge);two=r(g7t,"nystromformer"),g7t.forEach(t),awo=r(CRe," \u2014 "),QG=n(CRe,"A",{href:!0});var h7t=s(QG);nwo=r(h7t,"NystromformerModel"),h7t.forEach(t),swo=r(CRe," (Nystr\xF6mformer model)"),CRe.forEach(t),lwo=i(x),Su=n(x,"LI",{});var wRe=s(Su);Wge=n(wRe,"STRONG",{});var p7t=s(Wge);iwo=r(p7t,"openai-gpt"),p7t.forEach(t),dwo=r(wRe," \u2014 "),UG=n(wRe,"A",{href:!0});var _7t=s(UG);cwo=r(_7t,"OpenAIGPTModel"),_7t.forEach(t),fwo=r(wRe," (OpenAI GPT model)"),wRe.forEach(t),mwo=i(x),Ru=n(x,"LI",{});var ARe=s(Ru);Qge=n(ARe,"STRONG",{});var u7t=s(Qge);gwo=r(u7t,"opt"),u7t.forEach(t),hwo=r(ARe," \u2014 "),HG=n(ARe,"A",{href:!0});var b7t=s(HG);pwo=r(b7t,"OPTModel"),b7t.forEach(t),_wo=r(ARe," (OPT model)"),ARe.forEach(t),uwo=i(x),Pu=n(x,"LI",{});var LRe=s(Pu);Uge=n(LRe,"STRONG",{});var v7t=s(Uge);bwo=r(v7t,"owlvit"),v7t.forEach(t),vwo=r(LRe," \u2014 "),JG=n(LRe,"A",{href:!0});var F7t=s(JG);Fwo=r(F7t,"OwlViTModel"),F7t.forEach(t),Two=r(LRe," (OWL-ViT model)"),LRe.forEach(t),Mwo=i(x),Bu=n(x,"LI",{});var yRe=s(Bu);Hge=n(yRe,"STRONG",{});var T7t=s(Hge);Ewo=r(T7t,"pegasus"),T7t.forEach(t),Cwo=r(yRe," \u2014 "),YG=n(yRe,"A",{href:!0});var M7t=s(YG);wwo=r(M7t,"PegasusModel"),M7t.forEach(t),Awo=r(yRe," (Pegasus model)"),yRe.forEach(t),Lwo=i(x),Iu=n(x,"LI",{});var xRe=s(Iu);Jge=n(xRe,"STRONG",{});var E7t=s(Jge);ywo=r(E7t,"perceiver"),E7t.forEach(t),xwo=r(xRe," \u2014 "),KG=n(xRe,"A",{href:!0});var C7t=s(KG);$wo=r(C7t,"PerceiverModel"),C7t.forEach(t),kwo=r(xRe," (Perceiver model)"),xRe.forEach(t),Swo=i(x),Nu=n(x,"LI",{});var $Re=s(Nu);Yge=n($Re,"STRONG",{});var w7t=s(Yge);Rwo=r(w7t,"plbart"),w7t.forEach(t),Pwo=r($Re," \u2014 "),ZG=n($Re,"A",{href:!0});var A7t=s(ZG);Bwo=r(A7t,"PLBartModel"),A7t.forEach(t),Iwo=r($Re," (PLBart model)"),$Re.forEach(t),Nwo=i(x),qu=n(x,"LI",{});var kRe=s(qu);Kge=n(kRe,"STRONG",{});var L7t=s(Kge);qwo=r(L7t,"poolformer"),L7t.forEach(t),jwo=r(kRe," \u2014 "),eO=n(kRe,"A",{href:!0});var y7t=s(eO);Dwo=r(y7t,"PoolFormerModel"),y7t.forEach(t),Gwo=r(kRe," (PoolFormer model)"),kRe.forEach(t),Owo=i(x),ju=n(x,"LI",{});var SRe=s(ju);Zge=n(SRe,"STRONG",{});var x7t=s(Zge);Vwo=r(x7t,"prophetnet"),x7t.forEach(t),Xwo=r(SRe," \u2014 "),oO=n(SRe,"A",{href:!0});var $7t=s(oO);zwo=r($7t,"ProphetNetModel"),$7t.forEach(t),Wwo=r(SRe," (ProphetNet model)"),SRe.forEach(t),Qwo=i(x),Du=n(x,"LI",{});var RRe=s(Du);ehe=n(RRe,"STRONG",{});var k7t=s(ehe);Uwo=r(k7t,"qdqbert"),k7t.forEach(t),Hwo=r(RRe," \u2014 "),rO=n(RRe,"A",{href:!0});var S7t=s(rO);Jwo=r(S7t,"QDQBertModel"),S7t.forEach(t),Ywo=r(RRe," (QDQBert model)"),RRe.forEach(t),Kwo=i(x),Gu=n(x,"LI",{});var PRe=s(Gu);ohe=n(PRe,"STRONG",{});var R7t=s(ohe);Zwo=r(R7t,"reformer"),R7t.forEach(t),eAo=r(PRe," \u2014 "),tO=n(PRe,"A",{href:!0});var P7t=s(tO);oAo=r(P7t,"ReformerModel"),P7t.forEach(t),rAo=r(PRe," (Reformer model)"),PRe.forEach(t),tAo=i(x),Ou=n(x,"LI",{});var BRe=s(Ou);rhe=n(BRe,"STRONG",{});var B7t=s(rhe);aAo=r(B7t,"regnet"),B7t.forEach(t),nAo=r(BRe," \u2014 "),aO=n(BRe,"A",{href:!0});var I7t=s(aO);sAo=r(I7t,"RegNetModel"),I7t.forEach(t),lAo=r(BRe," (RegNet model)"),BRe.forEach(t),iAo=i(x),Vu=n(x,"LI",{});var IRe=s(Vu);the=n(IRe,"STRONG",{});var N7t=s(the);dAo=r(N7t,"rembert"),N7t.forEach(t),cAo=r(IRe," \u2014 "),nO=n(IRe,"A",{href:!0});var q7t=s(nO);fAo=r(q7t,"RemBertModel"),q7t.forEach(t),mAo=r(IRe," (RemBERT model)"),IRe.forEach(t),gAo=i(x),Xu=n(x,"LI",{});var NRe=s(Xu);ahe=n(NRe,"STRONG",{});var j7t=s(ahe);hAo=r(j7t,"resnet"),j7t.forEach(t),pAo=r(NRe," \u2014 "),sO=n(NRe,"A",{href:!0});var D7t=s(sO);_Ao=r(D7t,"ResNetModel"),D7t.forEach(t),uAo=r(NRe," (ResNet model)"),NRe.forEach(t),bAo=i(x),zu=n(x,"LI",{});var qRe=s(zu);nhe=n(qRe,"STRONG",{});var G7t=s(nhe);vAo=r(G7t,"retribert"),G7t.forEach(t),FAo=r(qRe," \u2014 "),lO=n(qRe,"A",{href:!0});var O7t=s(lO);TAo=r(O7t,"RetriBertModel"),O7t.forEach(t),MAo=r(qRe," (RetriBERT model)"),qRe.forEach(t),EAo=i(x),Wu=n(x,"LI",{});var jRe=s(Wu);she=n(jRe,"STRONG",{});var V7t=s(she);CAo=r(V7t,"roberta"),V7t.forEach(t),wAo=r(jRe," \u2014 "),iO=n(jRe,"A",{href:!0});var X7t=s(iO);AAo=r(X7t,"RobertaModel"),X7t.forEach(t),LAo=r(jRe," (RoBERTa model)"),jRe.forEach(t),yAo=i(x),Qu=n(x,"LI",{});var DRe=s(Qu);lhe=n(DRe,"STRONG",{});var z7t=s(lhe);xAo=r(z7t,"roformer"),z7t.forEach(t),$Ao=r(DRe," \u2014 "),dO=n(DRe,"A",{href:!0});var W7t=s(dO);kAo=r(W7t,"RoFormerModel"),W7t.forEach(t),SAo=r(DRe," (RoFormer model)"),DRe.forEach(t),RAo=i(x),Uu=n(x,"LI",{});var GRe=s(Uu);ihe=n(GRe,"STRONG",{});var Q7t=s(ihe);PAo=r(Q7t,"segformer"),Q7t.forEach(t),BAo=r(GRe," \u2014 "),cO=n(GRe,"A",{href:!0});var U7t=s(cO);IAo=r(U7t,"SegformerModel"),U7t.forEach(t),NAo=r(GRe," (SegFormer model)"),GRe.forEach(t),qAo=i(x),Hu=n(x,"LI",{});var ORe=s(Hu);dhe=n(ORe,"STRONG",{});var H7t=s(dhe);jAo=r(H7t,"sew"),H7t.forEach(t),DAo=r(ORe," \u2014 "),fO=n(ORe,"A",{href:!0});var J7t=s(fO);GAo=r(J7t,"SEWModel"),J7t.forEach(t),OAo=r(ORe," (SEW model)"),ORe.forEach(t),VAo=i(x),Ju=n(x,"LI",{});var VRe=s(Ju);che=n(VRe,"STRONG",{});var Y7t=s(che);XAo=r(Y7t,"sew-d"),Y7t.forEach(t),zAo=r(VRe," \u2014 "),mO=n(VRe,"A",{href:!0});var K7t=s(mO);WAo=r(K7t,"SEWDModel"),K7t.forEach(t),QAo=r(VRe," (SEW-D model)"),VRe.forEach(t),UAo=i(x),Yu=n(x,"LI",{});var XRe=s(Yu);fhe=n(XRe,"STRONG",{});var Z7t=s(fhe);HAo=r(Z7t,"speech_to_text"),Z7t.forEach(t),JAo=r(XRe," \u2014 "),gO=n(XRe,"A",{href:!0});var e8t=s(gO);YAo=r(e8t,"Speech2TextModel"),e8t.forEach(t),KAo=r(XRe," (Speech2Text model)"),XRe.forEach(t),ZAo=i(x),Ku=n(x,"LI",{});var zRe=s(Ku);mhe=n(zRe,"STRONG",{});var o8t=s(mhe);eLo=r(o8t,"splinter"),o8t.forEach(t),oLo=r(zRe," \u2014 "),hO=n(zRe,"A",{href:!0});var r8t=s(hO);rLo=r(r8t,"SplinterModel"),r8t.forEach(t),tLo=r(zRe," (Splinter model)"),zRe.forEach(t),aLo=i(x),Zu=n(x,"LI",{});var WRe=s(Zu);ghe=n(WRe,"STRONG",{});var t8t=s(ghe);nLo=r(t8t,"squeezebert"),t8t.forEach(t),sLo=r(WRe," \u2014 "),pO=n(WRe,"A",{href:!0});var a8t=s(pO);lLo=r(a8t,"SqueezeBertModel"),a8t.forEach(t),iLo=r(WRe," (SqueezeBERT model)"),WRe.forEach(t),dLo=i(x),e1=n(x,"LI",{});var QRe=s(e1);hhe=n(QRe,"STRONG",{});var n8t=s(hhe);cLo=r(n8t,"swin"),n8t.forEach(t),fLo=r(QRe," \u2014 "),_O=n(QRe,"A",{href:!0});var s8t=s(_O);mLo=r(s8t,"SwinModel"),s8t.forEach(t),gLo=r(QRe," (Swin Transformer model)"),QRe.forEach(t),hLo=i(x),o1=n(x,"LI",{});var URe=s(o1);phe=n(URe,"STRONG",{});var l8t=s(phe);pLo=r(l8t,"swinv2"),l8t.forEach(t),_Lo=r(URe," \u2014 "),uO=n(URe,"A",{href:!0});var i8t=s(uO);uLo=r(i8t,"Swinv2Model"),i8t.forEach(t),bLo=r(URe," (Swin Transformer V2 model)"),URe.forEach(t),vLo=i(x),r1=n(x,"LI",{});var HRe=s(r1);_he=n(HRe,"STRONG",{});var d8t=s(_he);FLo=r(d8t,"t5"),d8t.forEach(t),TLo=r(HRe," \u2014 "),bO=n(HRe,"A",{href:!0});var c8t=s(bO);MLo=r(c8t,"T5Model"),c8t.forEach(t),ELo=r(HRe," (T5 model)"),HRe.forEach(t),CLo=i(x),t1=n(x,"LI",{});var JRe=s(t1);uhe=n(JRe,"STRONG",{});var f8t=s(uhe);wLo=r(f8t,"tapas"),f8t.forEach(t),ALo=r(JRe," \u2014 "),vO=n(JRe,"A",{href:!0});var m8t=s(vO);LLo=r(m8t,"TapasModel"),m8t.forEach(t),yLo=r(JRe," (TAPAS model)"),JRe.forEach(t),xLo=i(x),a1=n(x,"LI",{});var YRe=s(a1);bhe=n(YRe,"STRONG",{});var g8t=s(bhe);$Lo=r(g8t,"trajectory_transformer"),g8t.forEach(t),kLo=r(YRe," \u2014 "),FO=n(YRe,"A",{href:!0});var h8t=s(FO);SLo=r(h8t,"TrajectoryTransformerModel"),h8t.forEach(t),RLo=r(YRe," (Trajectory Transformer model)"),YRe.forEach(t),PLo=i(x),n1=n(x,"LI",{});var KRe=s(n1);vhe=n(KRe,"STRONG",{});var p8t=s(vhe);BLo=r(p8t,"transfo-xl"),p8t.forEach(t),ILo=r(KRe," \u2014 "),TO=n(KRe,"A",{href:!0});var _8t=s(TO);NLo=r(_8t,"TransfoXLModel"),_8t.forEach(t),qLo=r(KRe," (Transformer-XL model)"),KRe.forEach(t),jLo=i(x),s1=n(x,"LI",{});var ZRe=s(s1);Fhe=n(ZRe,"STRONG",{});var u8t=s(Fhe);DLo=r(u8t,"unispeech"),u8t.forEach(t),GLo=r(ZRe," \u2014 "),MO=n(ZRe,"A",{href:!0});var b8t=s(MO);OLo=r(b8t,"UniSpeechModel"),b8t.forEach(t),VLo=r(ZRe," (UniSpeech model)"),ZRe.forEach(t),XLo=i(x),l1=n(x,"LI",{});var ePe=s(l1);The=n(ePe,"STRONG",{});var v8t=s(The);zLo=r(v8t,"unispeech-sat"),v8t.forEach(t),WLo=r(ePe," \u2014 "),EO=n(ePe,"A",{href:!0});var F8t=s(EO);QLo=r(F8t,"UniSpeechSatModel"),F8t.forEach(t),ULo=r(ePe," (UniSpeechSat model)"),ePe.forEach(t),HLo=i(x),i1=n(x,"LI",{});var oPe=s(i1);Mhe=n(oPe,"STRONG",{});var T8t=s(Mhe);JLo=r(T8t,"van"),T8t.forEach(t),YLo=r(oPe," \u2014 "),CO=n(oPe,"A",{href:!0});var M8t=s(CO);KLo=r(M8t,"VanModel"),M8t.forEach(t),ZLo=r(oPe," (VAN model)"),oPe.forEach(t),eyo=i(x),d1=n(x,"LI",{});var rPe=s(d1);Ehe=n(rPe,"STRONG",{});var E8t=s(Ehe);oyo=r(E8t,"videomae"),E8t.forEach(t),ryo=r(rPe," \u2014 "),wO=n(rPe,"A",{href:!0});var C8t=s(wO);tyo=r(C8t,"VideoMAEModel"),C8t.forEach(t),ayo=r(rPe," (VideoMAE model)"),rPe.forEach(t),nyo=i(x),c1=n(x,"LI",{});var tPe=s(c1);Che=n(tPe,"STRONG",{});var w8t=s(Che);syo=r(w8t,"vilt"),w8t.forEach(t),lyo=r(tPe," \u2014 "),AO=n(tPe,"A",{href:!0});var A8t=s(AO);iyo=r(A8t,"ViltModel"),A8t.forEach(t),dyo=r(tPe," (ViLT model)"),tPe.forEach(t),cyo=i(x),f1=n(x,"LI",{});var aPe=s(f1);whe=n(aPe,"STRONG",{});var L8t=s(whe);fyo=r(L8t,"vision-text-dual-encoder"),L8t.forEach(t),myo=r(aPe," \u2014 "),LO=n(aPe,"A",{href:!0});var y8t=s(LO);gyo=r(y8t,"VisionTextDualEncoderModel"),y8t.forEach(t),hyo=r(aPe," (VisionTextDualEncoder model)"),aPe.forEach(t),pyo=i(x),m1=n(x,"LI",{});var nPe=s(m1);Ahe=n(nPe,"STRONG",{});var x8t=s(Ahe);_yo=r(x8t,"visual_bert"),x8t.forEach(t),uyo=r(nPe," \u2014 "),yO=n(nPe,"A",{href:!0});var $8t=s(yO);byo=r($8t,"VisualBertModel"),$8t.forEach(t),vyo=r(nPe," (VisualBERT model)"),nPe.forEach(t),Fyo=i(x),g1=n(x,"LI",{});var sPe=s(g1);Lhe=n(sPe,"STRONG",{});var k8t=s(Lhe);Tyo=r(k8t,"vit"),k8t.forEach(t),Myo=r(sPe," \u2014 "),xO=n(sPe,"A",{href:!0});var S8t=s(xO);Eyo=r(S8t,"ViTModel"),S8t.forEach(t),Cyo=r(sPe," (ViT model)"),sPe.forEach(t),wyo=i(x),h1=n(x,"LI",{});var lPe=s(h1);yhe=n(lPe,"STRONG",{});var R8t=s(yhe);Ayo=r(R8t,"vit_mae"),R8t.forEach(t),Lyo=r(lPe," \u2014 "),$O=n(lPe,"A",{href:!0});var P8t=s($O);yyo=r(P8t,"ViTMAEModel"),P8t.forEach(t),xyo=r(lPe," (ViTMAE model)"),lPe.forEach(t),$yo=i(x),p1=n(x,"LI",{});var iPe=s(p1);xhe=n(iPe,"STRONG",{});var B8t=s(xhe);kyo=r(B8t,"wav2vec2"),B8t.forEach(t),Syo=r(iPe," \u2014 "),kO=n(iPe,"A",{href:!0});var I8t=s(kO);Ryo=r(I8t,"Wav2Vec2Model"),I8t.forEach(t),Pyo=r(iPe," (Wav2Vec2 model)"),iPe.forEach(t),Byo=i(x),_1=n(x,"LI",{});var dPe=s(_1);$he=n(dPe,"STRONG",{});var N8t=s($he);Iyo=r(N8t,"wav2vec2-conformer"),N8t.forEach(t),Nyo=r(dPe," \u2014 "),SO=n(dPe,"A",{href:!0});var q8t=s(SO);qyo=r(q8t,"Wav2Vec2ConformerModel"),q8t.forEach(t),jyo=r(dPe," (Wav2Vec2-Conformer model)"),dPe.forEach(t),Dyo=i(x),u1=n(x,"LI",{});var cPe=s(u1);khe=n(cPe,"STRONG",{});var j8t=s(khe);Gyo=r(j8t,"wavlm"),j8t.forEach(t),Oyo=r(cPe," \u2014 "),RO=n(cPe,"A",{href:!0});var D8t=s(RO);Vyo=r(D8t,"WavLMModel"),D8t.forEach(t),Xyo=r(cPe," (WavLM model)"),cPe.forEach(t),zyo=i(x),b1=n(x,"LI",{});var fPe=s(b1);She=n(fPe,"STRONG",{});var G8t=s(She);Wyo=r(G8t,"xglm"),G8t.forEach(t),Qyo=r(fPe," \u2014 "),PO=n(fPe,"A",{href:!0});var O8t=s(PO);Uyo=r(O8t,"XGLMModel"),O8t.forEach(t),Hyo=r(fPe," (XGLM model)"),fPe.forEach(t),Jyo=i(x),v1=n(x,"LI",{});var mPe=s(v1);Rhe=n(mPe,"STRONG",{});var V8t=s(Rhe);Yyo=r(V8t,"xlm"),V8t.forEach(t),Kyo=r(mPe," \u2014 "),BO=n(mPe,"A",{href:!0});var X8t=s(BO);Zyo=r(X8t,"XLMModel"),X8t.forEach(t),exo=r(mPe," (XLM model)"),mPe.forEach(t),oxo=i(x),F1=n(x,"LI",{});var gPe=s(F1);Phe=n(gPe,"STRONG",{});var z8t=s(Phe);rxo=r(z8t,"xlm-prophetnet"),z8t.forEach(t),txo=r(gPe," \u2014 "),IO=n(gPe,"A",{href:!0});var W8t=s(IO);axo=r(W8t,"XLMProphetNetModel"),W8t.forEach(t),nxo=r(gPe," (XLM-ProphetNet model)"),gPe.forEach(t),sxo=i(x),T1=n(x,"LI",{});var hPe=s(T1);Bhe=n(hPe,"STRONG",{});var Q8t=s(Bhe);lxo=r(Q8t,"xlm-roberta"),Q8t.forEach(t),ixo=r(hPe," \u2014 "),NO=n(hPe,"A",{href:!0});var U8t=s(NO);dxo=r(U8t,"XLMRobertaModel"),U8t.forEach(t),cxo=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),fxo=i(x),M1=n(x,"LI",{});var pPe=s(M1);Ihe=n(pPe,"STRONG",{});var H8t=s(Ihe);mxo=r(H8t,"xlm-roberta-xl"),H8t.forEach(t),gxo=r(pPe," \u2014 "),qO=n(pPe,"A",{href:!0});var J8t=s(qO);hxo=r(J8t,"XLMRobertaXLModel"),J8t.forEach(t),pxo=r(pPe," (XLM-RoBERTa-XL model)"),pPe.forEach(t),_xo=i(x),E1=n(x,"LI",{});var _Pe=s(E1);Nhe=n(_Pe,"STRONG",{});var Y8t=s(Nhe);uxo=r(Y8t,"xlnet"),Y8t.forEach(t),bxo=r(_Pe," \u2014 "),jO=n(_Pe,"A",{href:!0});var K8t=s(jO);vxo=r(K8t,"XLNetModel"),K8t.forEach(t),Fxo=r(_Pe," (XLNet model)"),_Pe.forEach(t),Txo=i(x),C1=n(x,"LI",{});var uPe=s(C1);qhe=n(uPe,"STRONG",{});var Z8t=s(qhe);Mxo=r(Z8t,"yolos"),Z8t.forEach(t),Exo=r(uPe," \u2014 "),DO=n(uPe,"A",{href:!0});var e9t=s(DO);Cxo=r(e9t,"YolosModel"),e9t.forEach(t),wxo=r(uPe," (YOLOS model)"),uPe.forEach(t),Axo=i(x),w1=n(x,"LI",{});var bPe=s(w1);jhe=n(bPe,"STRONG",{});var o9t=s(jhe);Lxo=r(o9t,"yoso"),o9t.forEach(t),yxo=r(bPe," \u2014 "),GO=n(bPe,"A",{href:!0});var r9t=s(GO);xxo=r(r9t,"YosoModel"),r9t.forEach(t),$xo=r(bPe," (YOSO model)"),bPe.forEach(t),x.forEach(t),kxo=i(ga),A1=n(ga,"P",{});var vPe=s(A1);Sxo=r(vPe,"The model is set in evaluation mode by default using "),Dhe=n(vPe,"CODE",{});var t9t=s(Dhe);Rxo=r(t9t,"model.eval()"),t9t.forEach(t),Pxo=r(vPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=n(vPe,"CODE",{});var a9t=s(Ghe);Bxo=r(a9t,"model.train()"),a9t.forEach(t),vPe.forEach(t),Ixo=i(ga),T(L1.$$.fragment,ga),ga.forEach(t),hl.forEach(t),oUe=i(f),nd=n(f,"H2",{class:!0});var fJe=s(nd);y1=n(fJe,"A",{id:!0,class:!0,href:!0});var n9t=s(y1);Ohe=n(n9t,"SPAN",{});var s9t=s(Ohe);T(XL.$$.fragment,s9t),s9t.forEach(t),n9t.forEach(t),Nxo=i(fJe),Vhe=n(fJe,"SPAN",{});var l9t=s(Vhe);qxo=r(l9t,"AutoModelForPreTraining"),l9t.forEach(t),fJe.forEach(t),rUe=i(f),Ro=n(f,"DIV",{class:!0});var pl=s(Ro);T(zL.$$.fragment,pl),jxo=i(pl),sd=n(pl,"P",{});var Oae=s(sd);Dxo=r(Oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),OO=n(Oae,"A",{href:!0});var i9t=s(OO);Gxo=r(i9t,"from_pretrained()"),i9t.forEach(t),Oxo=r(Oae," class method or the "),VO=n(Oae,"A",{href:!0});var d9t=s(VO);Vxo=r(d9t,"from_config()"),d9t.forEach(t),Xxo=r(Oae,` class
method.`),Oae.forEach(t),zxo=i(pl),WL=n(pl,"P",{});var mJe=s(WL);Wxo=r(mJe,"This class cannot be instantiated directly using "),Xhe=n(mJe,"CODE",{});var c9t=s(Xhe);Qxo=r(c9t,"__init__()"),c9t.forEach(t),Uxo=r(mJe," (throws an error)."),mJe.forEach(t),Hxo=i(pl),gt=n(pl,"DIV",{class:!0});var hw=s(gt);T(QL.$$.fragment,hw),Jxo=i(hw),zhe=n(hw,"P",{});var f9t=s(zhe);Yxo=r(f9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),f9t.forEach(t),Kxo=i(hw),ld=n(hw,"P",{});var Vae=s(ld);Zxo=r(Vae,`Note:
Loading a model from its configuration file does `),Whe=n(Vae,"STRONG",{});var m9t=s(Whe);e$o=r(m9t,"not"),m9t.forEach(t),o$o=r(Vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=n(Vae,"A",{href:!0});var g9t=s(XO);r$o=r(g9t,"from_pretrained()"),g9t.forEach(t),t$o=r(Vae," to load the model weights."),Vae.forEach(t),a$o=i(hw),T(x1.$$.fragment,hw),hw.forEach(t),n$o=i(pl),Ke=n(pl,"DIV",{class:!0});var ha=s(Ke);T(UL.$$.fragment,ha),s$o=i(ha),Qhe=n(ha,"P",{});var h9t=s(Qhe);l$o=r(h9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),h9t.forEach(t),i$o=i(ha),Xa=n(ha,"P",{});var pw=s(Xa);d$o=r(pw,"The model class to instantiate is selected based on the "),Uhe=n(pw,"CODE",{});var p9t=s(Uhe);c$o=r(p9t,"model_type"),p9t.forEach(t),f$o=r(pw,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(pw,"CODE",{});var _9t=s(Hhe);m$o=r(_9t,"pretrained_model_name_or_path"),_9t.forEach(t),g$o=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(pw,"CODE",{});var u9t=s(Jhe);h$o=r(u9t,"pretrained_model_name_or_path"),u9t.forEach(t),p$o=r(pw,":"),pw.forEach(t),_$o=i(ha),G=n(ha,"UL",{});var O=s(G);$1=n(O,"LI",{});var FPe=s($1);Yhe=n(FPe,"STRONG",{});var b9t=s(Yhe);u$o=r(b9t,"albert"),b9t.forEach(t),b$o=r(FPe," \u2014 "),zO=n(FPe,"A",{href:!0});var v9t=s(zO);v$o=r(v9t,"AlbertForPreTraining"),v9t.forEach(t),F$o=r(FPe," (ALBERT model)"),FPe.forEach(t),T$o=i(O),k1=n(O,"LI",{});var TPe=s(k1);Khe=n(TPe,"STRONG",{});var F9t=s(Khe);M$o=r(F9t,"bart"),F9t.forEach(t),E$o=r(TPe," \u2014 "),WO=n(TPe,"A",{href:!0});var T9t=s(WO);C$o=r(T9t,"BartForConditionalGeneration"),T9t.forEach(t),w$o=r(TPe," (BART model)"),TPe.forEach(t),A$o=i(O),S1=n(O,"LI",{});var MPe=s(S1);Zhe=n(MPe,"STRONG",{});var M9t=s(Zhe);L$o=r(M9t,"bert"),M9t.forEach(t),y$o=r(MPe," \u2014 "),QO=n(MPe,"A",{href:!0});var E9t=s(QO);x$o=r(E9t,"BertForPreTraining"),E9t.forEach(t),$$o=r(MPe," (BERT model)"),MPe.forEach(t),k$o=i(O),R1=n(O,"LI",{});var EPe=s(R1);epe=n(EPe,"STRONG",{});var C9t=s(epe);S$o=r(C9t,"big_bird"),C9t.forEach(t),R$o=r(EPe," \u2014 "),UO=n(EPe,"A",{href:!0});var w9t=s(UO);P$o=r(w9t,"BigBirdForPreTraining"),w9t.forEach(t),B$o=r(EPe," (BigBird model)"),EPe.forEach(t),I$o=i(O),P1=n(O,"LI",{});var CPe=s(P1);ope=n(CPe,"STRONG",{});var A9t=s(ope);N$o=r(A9t,"bloom"),A9t.forEach(t),q$o=r(CPe," \u2014 "),HO=n(CPe,"A",{href:!0});var L9t=s(HO);j$o=r(L9t,"BloomForCausalLM"),L9t.forEach(t),D$o=r(CPe," (BLOOM model)"),CPe.forEach(t),G$o=i(O),B1=n(O,"LI",{});var wPe=s(B1);rpe=n(wPe,"STRONG",{});var y9t=s(rpe);O$o=r(y9t,"camembert"),y9t.forEach(t),V$o=r(wPe," \u2014 "),JO=n(wPe,"A",{href:!0});var x9t=s(JO);X$o=r(x9t,"CamembertForMaskedLM"),x9t.forEach(t),z$o=r(wPe," (CamemBERT model)"),wPe.forEach(t),W$o=i(O),I1=n(O,"LI",{});var APe=s(I1);tpe=n(APe,"STRONG",{});var $9t=s(tpe);Q$o=r($9t,"ctrl"),$9t.forEach(t),U$o=r(APe," \u2014 "),YO=n(APe,"A",{href:!0});var k9t=s(YO);H$o=r(k9t,"CTRLLMHeadModel"),k9t.forEach(t),J$o=r(APe," (CTRL model)"),APe.forEach(t),Y$o=i(O),N1=n(O,"LI",{});var LPe=s(N1);ape=n(LPe,"STRONG",{});var S9t=s(ape);K$o=r(S9t,"data2vec-text"),S9t.forEach(t),Z$o=r(LPe," \u2014 "),KO=n(LPe,"A",{href:!0});var R9t=s(KO);eko=r(R9t,"Data2VecTextForMaskedLM"),R9t.forEach(t),oko=r(LPe," (Data2VecText model)"),LPe.forEach(t),rko=i(O),q1=n(O,"LI",{});var yPe=s(q1);npe=n(yPe,"STRONG",{});var P9t=s(npe);tko=r(P9t,"deberta"),P9t.forEach(t),ako=r(yPe," \u2014 "),ZO=n(yPe,"A",{href:!0});var B9t=s(ZO);nko=r(B9t,"DebertaForMaskedLM"),B9t.forEach(t),sko=r(yPe," (DeBERTa model)"),yPe.forEach(t),lko=i(O),j1=n(O,"LI",{});var xPe=s(j1);spe=n(xPe,"STRONG",{});var I9t=s(spe);iko=r(I9t,"deberta-v2"),I9t.forEach(t),dko=r(xPe," \u2014 "),eV=n(xPe,"A",{href:!0});var N9t=s(eV);cko=r(N9t,"DebertaV2ForMaskedLM"),N9t.forEach(t),fko=r(xPe," (DeBERTa-v2 model)"),xPe.forEach(t),mko=i(O),D1=n(O,"LI",{});var $Pe=s(D1);lpe=n($Pe,"STRONG",{});var q9t=s(lpe);gko=r(q9t,"distilbert"),q9t.forEach(t),hko=r($Pe," \u2014 "),oV=n($Pe,"A",{href:!0});var j9t=s(oV);pko=r(j9t,"DistilBertForMaskedLM"),j9t.forEach(t),_ko=r($Pe," (DistilBERT model)"),$Pe.forEach(t),uko=i(O),G1=n(O,"LI",{});var kPe=s(G1);ipe=n(kPe,"STRONG",{});var D9t=s(ipe);bko=r(D9t,"electra"),D9t.forEach(t),vko=r(kPe," \u2014 "),rV=n(kPe,"A",{href:!0});var G9t=s(rV);Fko=r(G9t,"ElectraForPreTraining"),G9t.forEach(t),Tko=r(kPe," (ELECTRA model)"),kPe.forEach(t),Mko=i(O),O1=n(O,"LI",{});var SPe=s(O1);dpe=n(SPe,"STRONG",{});var O9t=s(dpe);Eko=r(O9t,"flaubert"),O9t.forEach(t),Cko=r(SPe," \u2014 "),tV=n(SPe,"A",{href:!0});var V9t=s(tV);wko=r(V9t,"FlaubertWithLMHeadModel"),V9t.forEach(t),Ako=r(SPe," (FlauBERT model)"),SPe.forEach(t),Lko=i(O),V1=n(O,"LI",{});var RPe=s(V1);cpe=n(RPe,"STRONG",{});var X9t=s(cpe);yko=r(X9t,"flava"),X9t.forEach(t),xko=r(RPe," \u2014 "),aV=n(RPe,"A",{href:!0});var z9t=s(aV);$ko=r(z9t,"FlavaForPreTraining"),z9t.forEach(t),kko=r(RPe," (FLAVA model)"),RPe.forEach(t),Sko=i(O),X1=n(O,"LI",{});var PPe=s(X1);fpe=n(PPe,"STRONG",{});var W9t=s(fpe);Rko=r(W9t,"fnet"),W9t.forEach(t),Pko=r(PPe," \u2014 "),nV=n(PPe,"A",{href:!0});var Q9t=s(nV);Bko=r(Q9t,"FNetForPreTraining"),Q9t.forEach(t),Iko=r(PPe," (FNet model)"),PPe.forEach(t),Nko=i(O),z1=n(O,"LI",{});var BPe=s(z1);mpe=n(BPe,"STRONG",{});var U9t=s(mpe);qko=r(U9t,"fsmt"),U9t.forEach(t),jko=r(BPe," \u2014 "),sV=n(BPe,"A",{href:!0});var H9t=s(sV);Dko=r(H9t,"FSMTForConditionalGeneration"),H9t.forEach(t),Gko=r(BPe," (FairSeq Machine-Translation model)"),BPe.forEach(t),Oko=i(O),W1=n(O,"LI",{});var IPe=s(W1);gpe=n(IPe,"STRONG",{});var J9t=s(gpe);Vko=r(J9t,"funnel"),J9t.forEach(t),Xko=r(IPe," \u2014 "),lV=n(IPe,"A",{href:!0});var Y9t=s(lV);zko=r(Y9t,"FunnelForPreTraining"),Y9t.forEach(t),Wko=r(IPe," (Funnel Transformer model)"),IPe.forEach(t),Qko=i(O),Q1=n(O,"LI",{});var NPe=s(Q1);hpe=n(NPe,"STRONG",{});var K9t=s(hpe);Uko=r(K9t,"gpt2"),K9t.forEach(t),Hko=r(NPe," \u2014 "),iV=n(NPe,"A",{href:!0});var Z9t=s(iV);Jko=r(Z9t,"GPT2LMHeadModel"),Z9t.forEach(t),Yko=r(NPe," (OpenAI GPT-2 model)"),NPe.forEach(t),Kko=i(O),U1=n(O,"LI",{});var qPe=s(U1);ppe=n(qPe,"STRONG",{});var eMt=s(ppe);Zko=r(eMt,"ibert"),eMt.forEach(t),eSo=r(qPe," \u2014 "),dV=n(qPe,"A",{href:!0});var oMt=s(dV);oSo=r(oMt,"IBertForMaskedLM"),oMt.forEach(t),rSo=r(qPe," (I-BERT model)"),qPe.forEach(t),tSo=i(O),H1=n(O,"LI",{});var jPe=s(H1);_pe=n(jPe,"STRONG",{});var rMt=s(_pe);aSo=r(rMt,"layoutlm"),rMt.forEach(t),nSo=r(jPe," \u2014 "),cV=n(jPe,"A",{href:!0});var tMt=s(cV);sSo=r(tMt,"LayoutLMForMaskedLM"),tMt.forEach(t),lSo=r(jPe," (LayoutLM model)"),jPe.forEach(t),iSo=i(O),J1=n(O,"LI",{});var DPe=s(J1);upe=n(DPe,"STRONG",{});var aMt=s(upe);dSo=r(aMt,"longformer"),aMt.forEach(t),cSo=r(DPe," \u2014 "),fV=n(DPe,"A",{href:!0});var nMt=s(fV);fSo=r(nMt,"LongformerForMaskedLM"),nMt.forEach(t),mSo=r(DPe," (Longformer model)"),DPe.forEach(t),gSo=i(O),Y1=n(O,"LI",{});var GPe=s(Y1);bpe=n(GPe,"STRONG",{});var sMt=s(bpe);hSo=r(sMt,"luke"),sMt.forEach(t),pSo=r(GPe," \u2014 "),mV=n(GPe,"A",{href:!0});var lMt=s(mV);_So=r(lMt,"LukeForMaskedLM"),lMt.forEach(t),uSo=r(GPe," (LUKE model)"),GPe.forEach(t),bSo=i(O),K1=n(O,"LI",{});var OPe=s(K1);vpe=n(OPe,"STRONG",{});var iMt=s(vpe);vSo=r(iMt,"lxmert"),iMt.forEach(t),FSo=r(OPe," \u2014 "),gV=n(OPe,"A",{href:!0});var dMt=s(gV);TSo=r(dMt,"LxmertForPreTraining"),dMt.forEach(t),MSo=r(OPe," (LXMERT model)"),OPe.forEach(t),ESo=i(O),Z1=n(O,"LI",{});var VPe=s(Z1);Fpe=n(VPe,"STRONG",{});var cMt=s(Fpe);CSo=r(cMt,"megatron-bert"),cMt.forEach(t),wSo=r(VPe," \u2014 "),hV=n(VPe,"A",{href:!0});var fMt=s(hV);ASo=r(fMt,"MegatronBertForPreTraining"),fMt.forEach(t),LSo=r(VPe," (Megatron-BERT model)"),VPe.forEach(t),ySo=i(O),e2=n(O,"LI",{});var XPe=s(e2);Tpe=n(XPe,"STRONG",{});var mMt=s(Tpe);xSo=r(mMt,"mobilebert"),mMt.forEach(t),$So=r(XPe," \u2014 "),pV=n(XPe,"A",{href:!0});var gMt=s(pV);kSo=r(gMt,"MobileBertForPreTraining"),gMt.forEach(t),SSo=r(XPe," (MobileBERT model)"),XPe.forEach(t),RSo=i(O),o2=n(O,"LI",{});var zPe=s(o2);Mpe=n(zPe,"STRONG",{});var hMt=s(Mpe);PSo=r(hMt,"mpnet"),hMt.forEach(t),BSo=r(zPe," \u2014 "),_V=n(zPe,"A",{href:!0});var pMt=s(_V);ISo=r(pMt,"MPNetForMaskedLM"),pMt.forEach(t),NSo=r(zPe," (MPNet model)"),zPe.forEach(t),qSo=i(O),r2=n(O,"LI",{});var WPe=s(r2);Epe=n(WPe,"STRONG",{});var _Mt=s(Epe);jSo=r(_Mt,"mvp"),_Mt.forEach(t),DSo=r(WPe," \u2014 "),uV=n(WPe,"A",{href:!0});var uMt=s(uV);GSo=r(uMt,"MvpForConditionalGeneration"),uMt.forEach(t),OSo=r(WPe," (MVP model)"),WPe.forEach(t),VSo=i(O),t2=n(O,"LI",{});var QPe=s(t2);Cpe=n(QPe,"STRONG",{});var bMt=s(Cpe);XSo=r(bMt,"nezha"),bMt.forEach(t),zSo=r(QPe," \u2014 "),bV=n(QPe,"A",{href:!0});var vMt=s(bV);WSo=r(vMt,"NezhaForPreTraining"),vMt.forEach(t),QSo=r(QPe," (Nezha model)"),QPe.forEach(t),USo=i(O),a2=n(O,"LI",{});var UPe=s(a2);wpe=n(UPe,"STRONG",{});var FMt=s(wpe);HSo=r(FMt,"openai-gpt"),FMt.forEach(t),JSo=r(UPe," \u2014 "),vV=n(UPe,"A",{href:!0});var TMt=s(vV);YSo=r(TMt,"OpenAIGPTLMHeadModel"),TMt.forEach(t),KSo=r(UPe," (OpenAI GPT model)"),UPe.forEach(t),ZSo=i(O),n2=n(O,"LI",{});var HPe=s(n2);Ape=n(HPe,"STRONG",{});var MMt=s(Ape);eRo=r(MMt,"retribert"),MMt.forEach(t),oRo=r(HPe," \u2014 "),FV=n(HPe,"A",{href:!0});var EMt=s(FV);rRo=r(EMt,"RetriBertModel"),EMt.forEach(t),tRo=r(HPe," (RetriBERT model)"),HPe.forEach(t),aRo=i(O),s2=n(O,"LI",{});var JPe=s(s2);Lpe=n(JPe,"STRONG",{});var CMt=s(Lpe);nRo=r(CMt,"roberta"),CMt.forEach(t),sRo=r(JPe," \u2014 "),TV=n(JPe,"A",{href:!0});var wMt=s(TV);lRo=r(wMt,"RobertaForMaskedLM"),wMt.forEach(t),iRo=r(JPe," (RoBERTa model)"),JPe.forEach(t),dRo=i(O),l2=n(O,"LI",{});var YPe=s(l2);ype=n(YPe,"STRONG",{});var AMt=s(ype);cRo=r(AMt,"splinter"),AMt.forEach(t),fRo=r(YPe," \u2014 "),MV=n(YPe,"A",{href:!0});var LMt=s(MV);mRo=r(LMt,"SplinterForPreTraining"),LMt.forEach(t),gRo=r(YPe," (Splinter model)"),YPe.forEach(t),hRo=i(O),i2=n(O,"LI",{});var KPe=s(i2);xpe=n(KPe,"STRONG",{});var yMt=s(xpe);pRo=r(yMt,"squeezebert"),yMt.forEach(t),_Ro=r(KPe," \u2014 "),EV=n(KPe,"A",{href:!0});var xMt=s(EV);uRo=r(xMt,"SqueezeBertForMaskedLM"),xMt.forEach(t),bRo=r(KPe," (SqueezeBERT model)"),KPe.forEach(t),vRo=i(O),d2=n(O,"LI",{});var ZPe=s(d2);$pe=n(ZPe,"STRONG",{});var $Mt=s($pe);FRo=r($Mt,"t5"),$Mt.forEach(t),TRo=r(ZPe," \u2014 "),CV=n(ZPe,"A",{href:!0});var kMt=s(CV);MRo=r(kMt,"T5ForConditionalGeneration"),kMt.forEach(t),ERo=r(ZPe," (T5 model)"),ZPe.forEach(t),CRo=i(O),c2=n(O,"LI",{});var eBe=s(c2);kpe=n(eBe,"STRONG",{});var SMt=s(kpe);wRo=r(SMt,"tapas"),SMt.forEach(t),ARo=r(eBe," \u2014 "),wV=n(eBe,"A",{href:!0});var RMt=s(wV);LRo=r(RMt,"TapasForMaskedLM"),RMt.forEach(t),yRo=r(eBe," (TAPAS model)"),eBe.forEach(t),xRo=i(O),f2=n(O,"LI",{});var oBe=s(f2);Spe=n(oBe,"STRONG",{});var PMt=s(Spe);$Ro=r(PMt,"transfo-xl"),PMt.forEach(t),kRo=r(oBe," \u2014 "),AV=n(oBe,"A",{href:!0});var BMt=s(AV);SRo=r(BMt,"TransfoXLLMHeadModel"),BMt.forEach(t),RRo=r(oBe," (Transformer-XL model)"),oBe.forEach(t),PRo=i(O),m2=n(O,"LI",{});var rBe=s(m2);Rpe=n(rBe,"STRONG",{});var IMt=s(Rpe);BRo=r(IMt,"unispeech"),IMt.forEach(t),IRo=r(rBe," \u2014 "),LV=n(rBe,"A",{href:!0});var NMt=s(LV);NRo=r(NMt,"UniSpeechForPreTraining"),NMt.forEach(t),qRo=r(rBe," (UniSpeech model)"),rBe.forEach(t),jRo=i(O),g2=n(O,"LI",{});var tBe=s(g2);Ppe=n(tBe,"STRONG",{});var qMt=s(Ppe);DRo=r(qMt,"unispeech-sat"),qMt.forEach(t),GRo=r(tBe," \u2014 "),yV=n(tBe,"A",{href:!0});var jMt=s(yV);ORo=r(jMt,"UniSpeechSatForPreTraining"),jMt.forEach(t),VRo=r(tBe," (UniSpeechSat model)"),tBe.forEach(t),XRo=i(O),h2=n(O,"LI",{});var aBe=s(h2);Bpe=n(aBe,"STRONG",{});var DMt=s(Bpe);zRo=r(DMt,"videomae"),DMt.forEach(t),WRo=r(aBe," \u2014 "),xV=n(aBe,"A",{href:!0});var GMt=s(xV);QRo=r(GMt,"VideoMAEForPreTraining"),GMt.forEach(t),URo=r(aBe," (VideoMAE model)"),aBe.forEach(t),HRo=i(O),p2=n(O,"LI",{});var nBe=s(p2);Ipe=n(nBe,"STRONG",{});var OMt=s(Ipe);JRo=r(OMt,"visual_bert"),OMt.forEach(t),YRo=r(nBe," \u2014 "),$V=n(nBe,"A",{href:!0});var VMt=s($V);KRo=r(VMt,"VisualBertForPreTraining"),VMt.forEach(t),ZRo=r(nBe," (VisualBERT model)"),nBe.forEach(t),ePo=i(O),_2=n(O,"LI",{});var sBe=s(_2);Npe=n(sBe,"STRONG",{});var XMt=s(Npe);oPo=r(XMt,"vit_mae"),XMt.forEach(t),rPo=r(sBe," \u2014 "),kV=n(sBe,"A",{href:!0});var zMt=s(kV);tPo=r(zMt,"ViTMAEForPreTraining"),zMt.forEach(t),aPo=r(sBe," (ViTMAE model)"),sBe.forEach(t),nPo=i(O),u2=n(O,"LI",{});var lBe=s(u2);qpe=n(lBe,"STRONG",{});var WMt=s(qpe);sPo=r(WMt,"wav2vec2"),WMt.forEach(t),lPo=r(lBe," \u2014 "),SV=n(lBe,"A",{href:!0});var QMt=s(SV);iPo=r(QMt,"Wav2Vec2ForPreTraining"),QMt.forEach(t),dPo=r(lBe," (Wav2Vec2 model)"),lBe.forEach(t),cPo=i(O),b2=n(O,"LI",{});var iBe=s(b2);jpe=n(iBe,"STRONG",{});var UMt=s(jpe);fPo=r(UMt,"wav2vec2-conformer"),UMt.forEach(t),mPo=r(iBe," \u2014 "),RV=n(iBe,"A",{href:!0});var HMt=s(RV);gPo=r(HMt,"Wav2Vec2ConformerForPreTraining"),HMt.forEach(t),hPo=r(iBe," (Wav2Vec2-Conformer model)"),iBe.forEach(t),pPo=i(O),v2=n(O,"LI",{});var dBe=s(v2);Dpe=n(dBe,"STRONG",{});var JMt=s(Dpe);_Po=r(JMt,"xlm"),JMt.forEach(t),uPo=r(dBe," \u2014 "),PV=n(dBe,"A",{href:!0});var YMt=s(PV);bPo=r(YMt,"XLMWithLMHeadModel"),YMt.forEach(t),vPo=r(dBe," (XLM model)"),dBe.forEach(t),FPo=i(O),F2=n(O,"LI",{});var cBe=s(F2);Gpe=n(cBe,"STRONG",{});var KMt=s(Gpe);TPo=r(KMt,"xlm-roberta"),KMt.forEach(t),MPo=r(cBe," \u2014 "),BV=n(cBe,"A",{href:!0});var ZMt=s(BV);EPo=r(ZMt,"XLMRobertaForMaskedLM"),ZMt.forEach(t),CPo=r(cBe," (XLM-RoBERTa model)"),cBe.forEach(t),wPo=i(O),T2=n(O,"LI",{});var fBe=s(T2);Ope=n(fBe,"STRONG",{});var eEt=s(Ope);APo=r(eEt,"xlm-roberta-xl"),eEt.forEach(t),LPo=r(fBe," \u2014 "),IV=n(fBe,"A",{href:!0});var oEt=s(IV);yPo=r(oEt,"XLMRobertaXLForMaskedLM"),oEt.forEach(t),xPo=r(fBe," (XLM-RoBERTa-XL model)"),fBe.forEach(t),$Po=i(O),M2=n(O,"LI",{});var mBe=s(M2);Vpe=n(mBe,"STRONG",{});var rEt=s(Vpe);kPo=r(rEt,"xlnet"),rEt.forEach(t),SPo=r(mBe," \u2014 "),NV=n(mBe,"A",{href:!0});var tEt=s(NV);RPo=r(tEt,"XLNetLMHeadModel"),tEt.forEach(t),PPo=r(mBe," (XLNet model)"),mBe.forEach(t),O.forEach(t),BPo=i(ha),E2=n(ha,"P",{});var gBe=s(E2);IPo=r(gBe,"The model is set in evaluation mode by default using "),Xpe=n(gBe,"CODE",{});var aEt=s(Xpe);NPo=r(aEt,"model.eval()"),aEt.forEach(t),qPo=r(gBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(gBe,"CODE",{});var nEt=s(zpe);jPo=r(nEt,"model.train()"),nEt.forEach(t),gBe.forEach(t),DPo=i(ha),T(C2.$$.fragment,ha),ha.forEach(t),pl.forEach(t),tUe=i(f),id=n(f,"H2",{class:!0});var gJe=s(id);w2=n(gJe,"A",{id:!0,class:!0,href:!0});var sEt=s(w2);Wpe=n(sEt,"SPAN",{});var lEt=s(Wpe);T(HL.$$.fragment,lEt),lEt.forEach(t),sEt.forEach(t),GPo=i(gJe),Qpe=n(gJe,"SPAN",{});var iEt=s(Qpe);OPo=r(iEt,"AutoModelForCausalLM"),iEt.forEach(t),gJe.forEach(t),aUe=i(f),Po=n(f,"DIV",{class:!0});var _l=s(Po);T(JL.$$.fragment,_l),VPo=i(_l),dd=n(_l,"P",{});var Xae=s(dd);XPo=r(Xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qV=n(Xae,"A",{href:!0});var dEt=s(qV);zPo=r(dEt,"from_pretrained()"),dEt.forEach(t),WPo=r(Xae," class method or the "),jV=n(Xae,"A",{href:!0});var cEt=s(jV);QPo=r(cEt,"from_config()"),cEt.forEach(t),UPo=r(Xae,` class
method.`),Xae.forEach(t),HPo=i(_l),YL=n(_l,"P",{});var hJe=s(YL);JPo=r(hJe,"This class cannot be instantiated directly using "),Upe=n(hJe,"CODE",{});var fEt=s(Upe);YPo=r(fEt,"__init__()"),fEt.forEach(t),KPo=r(hJe," (throws an error)."),hJe.forEach(t),ZPo=i(_l),ht=n(_l,"DIV",{class:!0});var _w=s(ht);T(KL.$$.fragment,_w),eBo=i(_w),Hpe=n(_w,"P",{});var mEt=s(Hpe);oBo=r(mEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mEt.forEach(t),rBo=i(_w),cd=n(_w,"P",{});var zae=s(cd);tBo=r(zae,`Note:
Loading a model from its configuration file does `),Jpe=n(zae,"STRONG",{});var gEt=s(Jpe);aBo=r(gEt,"not"),gEt.forEach(t),nBo=r(zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(zae,"A",{href:!0});var hEt=s(DV);sBo=r(hEt,"from_pretrained()"),hEt.forEach(t),lBo=r(zae," to load the model weights."),zae.forEach(t),iBo=i(_w),T(A2.$$.fragment,_w),_w.forEach(t),dBo=i(_l),Ze=n(_l,"DIV",{class:!0});var pa=s(Ze);T(ZL.$$.fragment,pa),cBo=i(pa),Ype=n(pa,"P",{});var pEt=s(Ype);fBo=r(pEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pEt.forEach(t),mBo=i(pa),za=n(pa,"P",{});var uw=s(za);gBo=r(uw,"The model class to instantiate is selected based on the "),Kpe=n(uw,"CODE",{});var _Et=s(Kpe);hBo=r(_Et,"model_type"),_Et.forEach(t),pBo=r(uw,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(uw,"CODE",{});var uEt=s(Zpe);_Bo=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),uBo=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(uw,"CODE",{});var bEt=s(e_e);bBo=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),vBo=r(uw,":"),uw.forEach(t),FBo=i(pa),z=n(pa,"UL",{});var W=s(z);L2=n(W,"LI",{});var hBe=s(L2);o_e=n(hBe,"STRONG",{});var vEt=s(o_e);TBo=r(vEt,"bart"),vEt.forEach(t),MBo=r(hBe," \u2014 "),GV=n(hBe,"A",{href:!0});var FEt=s(GV);EBo=r(FEt,"BartForCausalLM"),FEt.forEach(t),CBo=r(hBe," (BART model)"),hBe.forEach(t),wBo=i(W),y2=n(W,"LI",{});var pBe=s(y2);r_e=n(pBe,"STRONG",{});var TEt=s(r_e);ABo=r(TEt,"bert"),TEt.forEach(t),LBo=r(pBe," \u2014 "),OV=n(pBe,"A",{href:!0});var MEt=s(OV);yBo=r(MEt,"BertLMHeadModel"),MEt.forEach(t),xBo=r(pBe," (BERT model)"),pBe.forEach(t),$Bo=i(W),x2=n(W,"LI",{});var _Be=s(x2);t_e=n(_Be,"STRONG",{});var EEt=s(t_e);kBo=r(EEt,"bert-generation"),EEt.forEach(t),SBo=r(_Be," \u2014 "),VV=n(_Be,"A",{href:!0});var CEt=s(VV);RBo=r(CEt,"BertGenerationDecoder"),CEt.forEach(t),PBo=r(_Be," (Bert Generation model)"),_Be.forEach(t),BBo=i(W),$2=n(W,"LI",{});var uBe=s($2);a_e=n(uBe,"STRONG",{});var wEt=s(a_e);IBo=r(wEt,"big_bird"),wEt.forEach(t),NBo=r(uBe," \u2014 "),XV=n(uBe,"A",{href:!0});var AEt=s(XV);qBo=r(AEt,"BigBirdForCausalLM"),AEt.forEach(t),jBo=r(uBe," (BigBird model)"),uBe.forEach(t),DBo=i(W),k2=n(W,"LI",{});var bBe=s(k2);n_e=n(bBe,"STRONG",{});var LEt=s(n_e);GBo=r(LEt,"bigbird_pegasus"),LEt.forEach(t),OBo=r(bBe," \u2014 "),zV=n(bBe,"A",{href:!0});var yEt=s(zV);VBo=r(yEt,"BigBirdPegasusForCausalLM"),yEt.forEach(t),XBo=r(bBe," (BigBird-Pegasus model)"),bBe.forEach(t),zBo=i(W),S2=n(W,"LI",{});var vBe=s(S2);s_e=n(vBe,"STRONG",{});var xEt=s(s_e);WBo=r(xEt,"blenderbot"),xEt.forEach(t),QBo=r(vBe," \u2014 "),WV=n(vBe,"A",{href:!0});var $Et=s(WV);UBo=r($Et,"BlenderbotForCausalLM"),$Et.forEach(t),HBo=r(vBe," (Blenderbot model)"),vBe.forEach(t),JBo=i(W),R2=n(W,"LI",{});var FBe=s(R2);l_e=n(FBe,"STRONG",{});var kEt=s(l_e);YBo=r(kEt,"blenderbot-small"),kEt.forEach(t),KBo=r(FBe," \u2014 "),QV=n(FBe,"A",{href:!0});var SEt=s(QV);ZBo=r(SEt,"BlenderbotSmallForCausalLM"),SEt.forEach(t),eIo=r(FBe," (BlenderbotSmall model)"),FBe.forEach(t),oIo=i(W),P2=n(W,"LI",{});var TBe=s(P2);i_e=n(TBe,"STRONG",{});var REt=s(i_e);rIo=r(REt,"bloom"),REt.forEach(t),tIo=r(TBe," \u2014 "),UV=n(TBe,"A",{href:!0});var PEt=s(UV);aIo=r(PEt,"BloomForCausalLM"),PEt.forEach(t),nIo=r(TBe," (BLOOM model)"),TBe.forEach(t),sIo=i(W),B2=n(W,"LI",{});var MBe=s(B2);d_e=n(MBe,"STRONG",{});var BEt=s(d_e);lIo=r(BEt,"camembert"),BEt.forEach(t),iIo=r(MBe," \u2014 "),HV=n(MBe,"A",{href:!0});var IEt=s(HV);dIo=r(IEt,"CamembertForCausalLM"),IEt.forEach(t),cIo=r(MBe," (CamemBERT model)"),MBe.forEach(t),fIo=i(W),I2=n(W,"LI",{});var EBe=s(I2);c_e=n(EBe,"STRONG",{});var NEt=s(c_e);mIo=r(NEt,"codegen"),NEt.forEach(t),gIo=r(EBe," \u2014 "),JV=n(EBe,"A",{href:!0});var qEt=s(JV);hIo=r(qEt,"CodeGenForCausalLM"),qEt.forEach(t),pIo=r(EBe," (CodeGen model)"),EBe.forEach(t),_Io=i(W),N2=n(W,"LI",{});var CBe=s(N2);f_e=n(CBe,"STRONG",{});var jEt=s(f_e);uIo=r(jEt,"ctrl"),jEt.forEach(t),bIo=r(CBe," \u2014 "),YV=n(CBe,"A",{href:!0});var DEt=s(YV);vIo=r(DEt,"CTRLLMHeadModel"),DEt.forEach(t),FIo=r(CBe," (CTRL model)"),CBe.forEach(t),TIo=i(W),q2=n(W,"LI",{});var wBe=s(q2);m_e=n(wBe,"STRONG",{});var GEt=s(m_e);MIo=r(GEt,"data2vec-text"),GEt.forEach(t),EIo=r(wBe," \u2014 "),KV=n(wBe,"A",{href:!0});var OEt=s(KV);CIo=r(OEt,"Data2VecTextForCausalLM"),OEt.forEach(t),wIo=r(wBe," (Data2VecText model)"),wBe.forEach(t),AIo=i(W),j2=n(W,"LI",{});var ABe=s(j2);g_e=n(ABe,"STRONG",{});var VEt=s(g_e);LIo=r(VEt,"electra"),VEt.forEach(t),yIo=r(ABe," \u2014 "),ZV=n(ABe,"A",{href:!0});var XEt=s(ZV);xIo=r(XEt,"ElectraForCausalLM"),XEt.forEach(t),$Io=r(ABe," (ELECTRA model)"),ABe.forEach(t),kIo=i(W),D2=n(W,"LI",{});var LBe=s(D2);h_e=n(LBe,"STRONG",{});var zEt=s(h_e);SIo=r(zEt,"gpt2"),zEt.forEach(t),RIo=r(LBe," \u2014 "),eX=n(LBe,"A",{href:!0});var WEt=s(eX);PIo=r(WEt,"GPT2LMHeadModel"),WEt.forEach(t),BIo=r(LBe," (OpenAI GPT-2 model)"),LBe.forEach(t),IIo=i(W),G2=n(W,"LI",{});var yBe=s(G2);p_e=n(yBe,"STRONG",{});var QEt=s(p_e);NIo=r(QEt,"gpt_neo"),QEt.forEach(t),qIo=r(yBe," \u2014 "),oX=n(yBe,"A",{href:!0});var UEt=s(oX);jIo=r(UEt,"GPTNeoForCausalLM"),UEt.forEach(t),DIo=r(yBe," (GPT Neo model)"),yBe.forEach(t),GIo=i(W),O2=n(W,"LI",{});var xBe=s(O2);__e=n(xBe,"STRONG",{});var HEt=s(__e);OIo=r(HEt,"gpt_neox"),HEt.forEach(t),VIo=r(xBe," \u2014 "),rX=n(xBe,"A",{href:!0});var JEt=s(rX);XIo=r(JEt,"GPTNeoXForCausalLM"),JEt.forEach(t),zIo=r(xBe," (GPT NeoX model)"),xBe.forEach(t),WIo=i(W),V2=n(W,"LI",{});var $Be=s(V2);u_e=n($Be,"STRONG",{});var YEt=s(u_e);QIo=r(YEt,"gptj"),YEt.forEach(t),UIo=r($Be," \u2014 "),tX=n($Be,"A",{href:!0});var KEt=s(tX);HIo=r(KEt,"GPTJForCausalLM"),KEt.forEach(t),JIo=r($Be," (GPT-J model)"),$Be.forEach(t),YIo=i(W),X2=n(W,"LI",{});var kBe=s(X2);b_e=n(kBe,"STRONG",{});var ZEt=s(b_e);KIo=r(ZEt,"marian"),ZEt.forEach(t),ZIo=r(kBe," \u2014 "),aX=n(kBe,"A",{href:!0});var e4t=s(aX);eNo=r(e4t,"MarianForCausalLM"),e4t.forEach(t),oNo=r(kBe," (Marian model)"),kBe.forEach(t),rNo=i(W),z2=n(W,"LI",{});var SBe=s(z2);v_e=n(SBe,"STRONG",{});var o4t=s(v_e);tNo=r(o4t,"mbart"),o4t.forEach(t),aNo=r(SBe," \u2014 "),nX=n(SBe,"A",{href:!0});var r4t=s(nX);nNo=r(r4t,"MBartForCausalLM"),r4t.forEach(t),sNo=r(SBe," (mBART model)"),SBe.forEach(t),lNo=i(W),W2=n(W,"LI",{});var RBe=s(W2);F_e=n(RBe,"STRONG",{});var t4t=s(F_e);iNo=r(t4t,"megatron-bert"),t4t.forEach(t),dNo=r(RBe," \u2014 "),sX=n(RBe,"A",{href:!0});var a4t=s(sX);cNo=r(a4t,"MegatronBertForCausalLM"),a4t.forEach(t),fNo=r(RBe," (Megatron-BERT model)"),RBe.forEach(t),mNo=i(W),Q2=n(W,"LI",{});var PBe=s(Q2);T_e=n(PBe,"STRONG",{});var n4t=s(T_e);gNo=r(n4t,"mvp"),n4t.forEach(t),hNo=r(PBe," \u2014 "),lX=n(PBe,"A",{href:!0});var s4t=s(lX);pNo=r(s4t,"MvpForCausalLM"),s4t.forEach(t),_No=r(PBe," (MVP model)"),PBe.forEach(t),uNo=i(W),U2=n(W,"LI",{});var BBe=s(U2);M_e=n(BBe,"STRONG",{});var l4t=s(M_e);bNo=r(l4t,"openai-gpt"),l4t.forEach(t),vNo=r(BBe," \u2014 "),iX=n(BBe,"A",{href:!0});var i4t=s(iX);FNo=r(i4t,"OpenAIGPTLMHeadModel"),i4t.forEach(t),TNo=r(BBe," (OpenAI GPT model)"),BBe.forEach(t),MNo=i(W),H2=n(W,"LI",{});var IBe=s(H2);E_e=n(IBe,"STRONG",{});var d4t=s(E_e);ENo=r(d4t,"opt"),d4t.forEach(t),CNo=r(IBe," \u2014 "),dX=n(IBe,"A",{href:!0});var c4t=s(dX);wNo=r(c4t,"OPTForCausalLM"),c4t.forEach(t),ANo=r(IBe," (OPT model)"),IBe.forEach(t),LNo=i(W),J2=n(W,"LI",{});var NBe=s(J2);C_e=n(NBe,"STRONG",{});var f4t=s(C_e);yNo=r(f4t,"pegasus"),f4t.forEach(t),xNo=r(NBe," \u2014 "),cX=n(NBe,"A",{href:!0});var m4t=s(cX);$No=r(m4t,"PegasusForCausalLM"),m4t.forEach(t),kNo=r(NBe," (Pegasus model)"),NBe.forEach(t),SNo=i(W),Y2=n(W,"LI",{});var qBe=s(Y2);w_e=n(qBe,"STRONG",{});var g4t=s(w_e);RNo=r(g4t,"plbart"),g4t.forEach(t),PNo=r(qBe," \u2014 "),fX=n(qBe,"A",{href:!0});var h4t=s(fX);BNo=r(h4t,"PLBartForCausalLM"),h4t.forEach(t),INo=r(qBe," (PLBart model)"),qBe.forEach(t),NNo=i(W),K2=n(W,"LI",{});var jBe=s(K2);A_e=n(jBe,"STRONG",{});var p4t=s(A_e);qNo=r(p4t,"prophetnet"),p4t.forEach(t),jNo=r(jBe," \u2014 "),mX=n(jBe,"A",{href:!0});var _4t=s(mX);DNo=r(_4t,"ProphetNetForCausalLM"),_4t.forEach(t),GNo=r(jBe," (ProphetNet model)"),jBe.forEach(t),ONo=i(W),Z2=n(W,"LI",{});var DBe=s(Z2);L_e=n(DBe,"STRONG",{});var u4t=s(L_e);VNo=r(u4t,"qdqbert"),u4t.forEach(t),XNo=r(DBe," \u2014 "),gX=n(DBe,"A",{href:!0});var b4t=s(gX);zNo=r(b4t,"QDQBertLMHeadModel"),b4t.forEach(t),WNo=r(DBe," (QDQBert model)"),DBe.forEach(t),QNo=i(W),eb=n(W,"LI",{});var GBe=s(eb);y_e=n(GBe,"STRONG",{});var v4t=s(y_e);UNo=r(v4t,"reformer"),v4t.forEach(t),HNo=r(GBe," \u2014 "),hX=n(GBe,"A",{href:!0});var F4t=s(hX);JNo=r(F4t,"ReformerModelWithLMHead"),F4t.forEach(t),YNo=r(GBe," (Reformer model)"),GBe.forEach(t),KNo=i(W),ob=n(W,"LI",{});var OBe=s(ob);x_e=n(OBe,"STRONG",{});var T4t=s(x_e);ZNo=r(T4t,"rembert"),T4t.forEach(t),eqo=r(OBe," \u2014 "),pX=n(OBe,"A",{href:!0});var M4t=s(pX);oqo=r(M4t,"RemBertForCausalLM"),M4t.forEach(t),rqo=r(OBe," (RemBERT model)"),OBe.forEach(t),tqo=i(W),rb=n(W,"LI",{});var VBe=s(rb);$_e=n(VBe,"STRONG",{});var E4t=s($_e);aqo=r(E4t,"roberta"),E4t.forEach(t),nqo=r(VBe," \u2014 "),_X=n(VBe,"A",{href:!0});var C4t=s(_X);sqo=r(C4t,"RobertaForCausalLM"),C4t.forEach(t),lqo=r(VBe," (RoBERTa model)"),VBe.forEach(t),iqo=i(W),tb=n(W,"LI",{});var XBe=s(tb);k_e=n(XBe,"STRONG",{});var w4t=s(k_e);dqo=r(w4t,"roformer"),w4t.forEach(t),cqo=r(XBe," \u2014 "),uX=n(XBe,"A",{href:!0});var A4t=s(uX);fqo=r(A4t,"RoFormerForCausalLM"),A4t.forEach(t),mqo=r(XBe," (RoFormer model)"),XBe.forEach(t),gqo=i(W),ab=n(W,"LI",{});var zBe=s(ab);S_e=n(zBe,"STRONG",{});var L4t=s(S_e);hqo=r(L4t,"speech_to_text_2"),L4t.forEach(t),pqo=r(zBe," \u2014 "),bX=n(zBe,"A",{href:!0});var y4t=s(bX);_qo=r(y4t,"Speech2Text2ForCausalLM"),y4t.forEach(t),uqo=r(zBe," (Speech2Text2 model)"),zBe.forEach(t),bqo=i(W),nb=n(W,"LI",{});var WBe=s(nb);R_e=n(WBe,"STRONG",{});var x4t=s(R_e);vqo=r(x4t,"transfo-xl"),x4t.forEach(t),Fqo=r(WBe," \u2014 "),vX=n(WBe,"A",{href:!0});var $4t=s(vX);Tqo=r($4t,"TransfoXLLMHeadModel"),$4t.forEach(t),Mqo=r(WBe," (Transformer-XL model)"),WBe.forEach(t),Eqo=i(W),sb=n(W,"LI",{});var QBe=s(sb);P_e=n(QBe,"STRONG",{});var k4t=s(P_e);Cqo=r(k4t,"trocr"),k4t.forEach(t),wqo=r(QBe," \u2014 "),FX=n(QBe,"A",{href:!0});var S4t=s(FX);Aqo=r(S4t,"TrOCRForCausalLM"),S4t.forEach(t),Lqo=r(QBe," (TrOCR model)"),QBe.forEach(t),yqo=i(W),lb=n(W,"LI",{});var UBe=s(lb);B_e=n(UBe,"STRONG",{});var R4t=s(B_e);xqo=r(R4t,"xglm"),R4t.forEach(t),$qo=r(UBe," \u2014 "),TX=n(UBe,"A",{href:!0});var P4t=s(TX);kqo=r(P4t,"XGLMForCausalLM"),P4t.forEach(t),Sqo=r(UBe," (XGLM model)"),UBe.forEach(t),Rqo=i(W),ib=n(W,"LI",{});var HBe=s(ib);I_e=n(HBe,"STRONG",{});var B4t=s(I_e);Pqo=r(B4t,"xlm"),B4t.forEach(t),Bqo=r(HBe," \u2014 "),MX=n(HBe,"A",{href:!0});var I4t=s(MX);Iqo=r(I4t,"XLMWithLMHeadModel"),I4t.forEach(t),Nqo=r(HBe," (XLM model)"),HBe.forEach(t),qqo=i(W),db=n(W,"LI",{});var JBe=s(db);N_e=n(JBe,"STRONG",{});var N4t=s(N_e);jqo=r(N4t,"xlm-prophetnet"),N4t.forEach(t),Dqo=r(JBe," \u2014 "),EX=n(JBe,"A",{href:!0});var q4t=s(EX);Gqo=r(q4t,"XLMProphetNetForCausalLM"),q4t.forEach(t),Oqo=r(JBe," (XLM-ProphetNet model)"),JBe.forEach(t),Vqo=i(W),cb=n(W,"LI",{});var YBe=s(cb);q_e=n(YBe,"STRONG",{});var j4t=s(q_e);Xqo=r(j4t,"xlm-roberta"),j4t.forEach(t),zqo=r(YBe," \u2014 "),CX=n(YBe,"A",{href:!0});var D4t=s(CX);Wqo=r(D4t,"XLMRobertaForCausalLM"),D4t.forEach(t),Qqo=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),Uqo=i(W),fb=n(W,"LI",{});var KBe=s(fb);j_e=n(KBe,"STRONG",{});var G4t=s(j_e);Hqo=r(G4t,"xlm-roberta-xl"),G4t.forEach(t),Jqo=r(KBe," \u2014 "),wX=n(KBe,"A",{href:!0});var O4t=s(wX);Yqo=r(O4t,"XLMRobertaXLForCausalLM"),O4t.forEach(t),Kqo=r(KBe," (XLM-RoBERTa-XL model)"),KBe.forEach(t),Zqo=i(W),mb=n(W,"LI",{});var ZBe=s(mb);D_e=n(ZBe,"STRONG",{});var V4t=s(D_e);ejo=r(V4t,"xlnet"),V4t.forEach(t),ojo=r(ZBe," \u2014 "),AX=n(ZBe,"A",{href:!0});var X4t=s(AX);rjo=r(X4t,"XLNetLMHeadModel"),X4t.forEach(t),tjo=r(ZBe," (XLNet model)"),ZBe.forEach(t),W.forEach(t),ajo=i(pa),gb=n(pa,"P",{});var eIe=s(gb);njo=r(eIe,"The model is set in evaluation mode by default using "),G_e=n(eIe,"CODE",{});var z4t=s(G_e);sjo=r(z4t,"model.eval()"),z4t.forEach(t),ljo=r(eIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(eIe,"CODE",{});var W4t=s(O_e);ijo=r(W4t,"model.train()"),W4t.forEach(t),eIe.forEach(t),djo=i(pa),T(hb.$$.fragment,pa),pa.forEach(t),_l.forEach(t),nUe=i(f),fd=n(f,"H2",{class:!0});var pJe=s(fd);pb=n(pJe,"A",{id:!0,class:!0,href:!0});var Q4t=s(pb);V_e=n(Q4t,"SPAN",{});var U4t=s(V_e);T(ey.$$.fragment,U4t),U4t.forEach(t),Q4t.forEach(t),cjo=i(pJe),X_e=n(pJe,"SPAN",{});var H4t=s(X_e);fjo=r(H4t,"AutoModelForMaskedLM"),H4t.forEach(t),pJe.forEach(t),sUe=i(f),Bo=n(f,"DIV",{class:!0});var ul=s(Bo);T(oy.$$.fragment,ul),mjo=i(ul),md=n(ul,"P",{});var Wae=s(md);gjo=r(Wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LX=n(Wae,"A",{href:!0});var J4t=s(LX);hjo=r(J4t,"from_pretrained()"),J4t.forEach(t),pjo=r(Wae," class method or the "),yX=n(Wae,"A",{href:!0});var Y4t=s(yX);_jo=r(Y4t,"from_config()"),Y4t.forEach(t),ujo=r(Wae,` class
method.`),Wae.forEach(t),bjo=i(ul),ry=n(ul,"P",{});var _Je=s(ry);vjo=r(_Je,"This class cannot be instantiated directly using "),z_e=n(_Je,"CODE",{});var K4t=s(z_e);Fjo=r(K4t,"__init__()"),K4t.forEach(t),Tjo=r(_Je," (throws an error)."),_Je.forEach(t),Mjo=i(ul),pt=n(ul,"DIV",{class:!0});var bw=s(pt);T(ty.$$.fragment,bw),Ejo=i(bw),W_e=n(bw,"P",{});var Z4t=s(W_e);Cjo=r(Z4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z4t.forEach(t),wjo=i(bw),gd=n(bw,"P",{});var Qae=s(gd);Ajo=r(Qae,`Note:
Loading a model from its configuration file does `),Q_e=n(Qae,"STRONG",{});var eCt=s(Q_e);Ljo=r(eCt,"not"),eCt.forEach(t),yjo=r(Qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=n(Qae,"A",{href:!0});var oCt=s(xX);xjo=r(oCt,"from_pretrained()"),oCt.forEach(t),$jo=r(Qae," to load the model weights."),Qae.forEach(t),kjo=i(bw),T(_b.$$.fragment,bw),bw.forEach(t),Sjo=i(ul),eo=n(ul,"DIV",{class:!0});var _a=s(eo);T(ay.$$.fragment,_a),Rjo=i(_a),U_e=n(_a,"P",{});var rCt=s(U_e);Pjo=r(rCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rCt.forEach(t),Bjo=i(_a),Wa=n(_a,"P",{});var vw=s(Wa);Ijo=r(vw,"The model class to instantiate is selected based on the "),H_e=n(vw,"CODE",{});var tCt=s(H_e);Njo=r(tCt,"model_type"),tCt.forEach(t),qjo=r(vw,` property of the config object (either
passed as an argument or loaded from `),J_e=n(vw,"CODE",{});var aCt=s(J_e);jjo=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),Djo=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(vw,"CODE",{});var nCt=s(Y_e);Gjo=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),Ojo=r(vw,":"),vw.forEach(t),Vjo=i(_a),U=n(_a,"UL",{});var Y=s(U);ub=n(Y,"LI",{});var oIe=s(ub);K_e=n(oIe,"STRONG",{});var sCt=s(K_e);Xjo=r(sCt,"albert"),sCt.forEach(t),zjo=r(oIe," \u2014 "),$X=n(oIe,"A",{href:!0});var lCt=s($X);Wjo=r(lCt,"AlbertForMaskedLM"),lCt.forEach(t),Qjo=r(oIe," (ALBERT model)"),oIe.forEach(t),Ujo=i(Y),bb=n(Y,"LI",{});var rIe=s(bb);Z_e=n(rIe,"STRONG",{});var iCt=s(Z_e);Hjo=r(iCt,"bart"),iCt.forEach(t),Jjo=r(rIe," \u2014 "),kX=n(rIe,"A",{href:!0});var dCt=s(kX);Yjo=r(dCt,"BartForConditionalGeneration"),dCt.forEach(t),Kjo=r(rIe," (BART model)"),rIe.forEach(t),Zjo=i(Y),vb=n(Y,"LI",{});var tIe=s(vb);eue=n(tIe,"STRONG",{});var cCt=s(eue);eDo=r(cCt,"bert"),cCt.forEach(t),oDo=r(tIe," \u2014 "),SX=n(tIe,"A",{href:!0});var fCt=s(SX);rDo=r(fCt,"BertForMaskedLM"),fCt.forEach(t),tDo=r(tIe," (BERT model)"),tIe.forEach(t),aDo=i(Y),Fb=n(Y,"LI",{});var aIe=s(Fb);oue=n(aIe,"STRONG",{});var mCt=s(oue);nDo=r(mCt,"big_bird"),mCt.forEach(t),sDo=r(aIe," \u2014 "),RX=n(aIe,"A",{href:!0});var gCt=s(RX);lDo=r(gCt,"BigBirdForMaskedLM"),gCt.forEach(t),iDo=r(aIe," (BigBird model)"),aIe.forEach(t),dDo=i(Y),Tb=n(Y,"LI",{});var nIe=s(Tb);rue=n(nIe,"STRONG",{});var hCt=s(rue);cDo=r(hCt,"camembert"),hCt.forEach(t),fDo=r(nIe," \u2014 "),PX=n(nIe,"A",{href:!0});var pCt=s(PX);mDo=r(pCt,"CamembertForMaskedLM"),pCt.forEach(t),gDo=r(nIe," (CamemBERT model)"),nIe.forEach(t),hDo=i(Y),Mb=n(Y,"LI",{});var sIe=s(Mb);tue=n(sIe,"STRONG",{});var _Ct=s(tue);pDo=r(_Ct,"convbert"),_Ct.forEach(t),_Do=r(sIe," \u2014 "),BX=n(sIe,"A",{href:!0});var uCt=s(BX);uDo=r(uCt,"ConvBertForMaskedLM"),uCt.forEach(t),bDo=r(sIe," (ConvBERT model)"),sIe.forEach(t),vDo=i(Y),Eb=n(Y,"LI",{});var lIe=s(Eb);aue=n(lIe,"STRONG",{});var bCt=s(aue);FDo=r(bCt,"data2vec-text"),bCt.forEach(t),TDo=r(lIe," \u2014 "),IX=n(lIe,"A",{href:!0});var vCt=s(IX);MDo=r(vCt,"Data2VecTextForMaskedLM"),vCt.forEach(t),EDo=r(lIe," (Data2VecText model)"),lIe.forEach(t),CDo=i(Y),Cb=n(Y,"LI",{});var iIe=s(Cb);nue=n(iIe,"STRONG",{});var FCt=s(nue);wDo=r(FCt,"deberta"),FCt.forEach(t),ADo=r(iIe," \u2014 "),NX=n(iIe,"A",{href:!0});var TCt=s(NX);LDo=r(TCt,"DebertaForMaskedLM"),TCt.forEach(t),yDo=r(iIe," (DeBERTa model)"),iIe.forEach(t),xDo=i(Y),wb=n(Y,"LI",{});var dIe=s(wb);sue=n(dIe,"STRONG",{});var MCt=s(sue);$Do=r(MCt,"deberta-v2"),MCt.forEach(t),kDo=r(dIe," \u2014 "),qX=n(dIe,"A",{href:!0});var ECt=s(qX);SDo=r(ECt,"DebertaV2ForMaskedLM"),ECt.forEach(t),RDo=r(dIe," (DeBERTa-v2 model)"),dIe.forEach(t),PDo=i(Y),Ab=n(Y,"LI",{});var cIe=s(Ab);lue=n(cIe,"STRONG",{});var CCt=s(lue);BDo=r(CCt,"distilbert"),CCt.forEach(t),IDo=r(cIe," \u2014 "),jX=n(cIe,"A",{href:!0});var wCt=s(jX);NDo=r(wCt,"DistilBertForMaskedLM"),wCt.forEach(t),qDo=r(cIe," (DistilBERT model)"),cIe.forEach(t),jDo=i(Y),Lb=n(Y,"LI",{});var fIe=s(Lb);iue=n(fIe,"STRONG",{});var ACt=s(iue);DDo=r(ACt,"electra"),ACt.forEach(t),GDo=r(fIe," \u2014 "),DX=n(fIe,"A",{href:!0});var LCt=s(DX);ODo=r(LCt,"ElectraForMaskedLM"),LCt.forEach(t),VDo=r(fIe," (ELECTRA model)"),fIe.forEach(t),XDo=i(Y),yb=n(Y,"LI",{});var mIe=s(yb);due=n(mIe,"STRONG",{});var yCt=s(due);zDo=r(yCt,"flaubert"),yCt.forEach(t),WDo=r(mIe," \u2014 "),GX=n(mIe,"A",{href:!0});var xCt=s(GX);QDo=r(xCt,"FlaubertWithLMHeadModel"),xCt.forEach(t),UDo=r(mIe," (FlauBERT model)"),mIe.forEach(t),HDo=i(Y),xb=n(Y,"LI",{});var gIe=s(xb);cue=n(gIe,"STRONG",{});var $Ct=s(cue);JDo=r($Ct,"fnet"),$Ct.forEach(t),YDo=r(gIe," \u2014 "),OX=n(gIe,"A",{href:!0});var kCt=s(OX);KDo=r(kCt,"FNetForMaskedLM"),kCt.forEach(t),ZDo=r(gIe," (FNet model)"),gIe.forEach(t),eGo=i(Y),$b=n(Y,"LI",{});var hIe=s($b);fue=n(hIe,"STRONG",{});var SCt=s(fue);oGo=r(SCt,"funnel"),SCt.forEach(t),rGo=r(hIe," \u2014 "),VX=n(hIe,"A",{href:!0});var RCt=s(VX);tGo=r(RCt,"FunnelForMaskedLM"),RCt.forEach(t),aGo=r(hIe," (Funnel Transformer model)"),hIe.forEach(t),nGo=i(Y),kb=n(Y,"LI",{});var pIe=s(kb);mue=n(pIe,"STRONG",{});var PCt=s(mue);sGo=r(PCt,"ibert"),PCt.forEach(t),lGo=r(pIe," \u2014 "),XX=n(pIe,"A",{href:!0});var BCt=s(XX);iGo=r(BCt,"IBertForMaskedLM"),BCt.forEach(t),dGo=r(pIe," (I-BERT model)"),pIe.forEach(t),cGo=i(Y),Sb=n(Y,"LI",{});var _Ie=s(Sb);gue=n(_Ie,"STRONG",{});var ICt=s(gue);fGo=r(ICt,"layoutlm"),ICt.forEach(t),mGo=r(_Ie," \u2014 "),zX=n(_Ie,"A",{href:!0});var NCt=s(zX);gGo=r(NCt,"LayoutLMForMaskedLM"),NCt.forEach(t),hGo=r(_Ie," (LayoutLM model)"),_Ie.forEach(t),pGo=i(Y),Rb=n(Y,"LI",{});var uIe=s(Rb);hue=n(uIe,"STRONG",{});var qCt=s(hue);_Go=r(qCt,"longformer"),qCt.forEach(t),uGo=r(uIe," \u2014 "),WX=n(uIe,"A",{href:!0});var jCt=s(WX);bGo=r(jCt,"LongformerForMaskedLM"),jCt.forEach(t),vGo=r(uIe," (Longformer model)"),uIe.forEach(t),FGo=i(Y),Pb=n(Y,"LI",{});var bIe=s(Pb);pue=n(bIe,"STRONG",{});var DCt=s(pue);TGo=r(DCt,"luke"),DCt.forEach(t),MGo=r(bIe," \u2014 "),QX=n(bIe,"A",{href:!0});var GCt=s(QX);EGo=r(GCt,"LukeForMaskedLM"),GCt.forEach(t),CGo=r(bIe," (LUKE model)"),bIe.forEach(t),wGo=i(Y),Bb=n(Y,"LI",{});var vIe=s(Bb);_ue=n(vIe,"STRONG",{});var OCt=s(_ue);AGo=r(OCt,"mbart"),OCt.forEach(t),LGo=r(vIe," \u2014 "),UX=n(vIe,"A",{href:!0});var VCt=s(UX);yGo=r(VCt,"MBartForConditionalGeneration"),VCt.forEach(t),xGo=r(vIe," (mBART model)"),vIe.forEach(t),$Go=i(Y),Ib=n(Y,"LI",{});var FIe=s(Ib);uue=n(FIe,"STRONG",{});var XCt=s(uue);kGo=r(XCt,"megatron-bert"),XCt.forEach(t),SGo=r(FIe," \u2014 "),HX=n(FIe,"A",{href:!0});var zCt=s(HX);RGo=r(zCt,"MegatronBertForMaskedLM"),zCt.forEach(t),PGo=r(FIe," (Megatron-BERT model)"),FIe.forEach(t),BGo=i(Y),Nb=n(Y,"LI",{});var TIe=s(Nb);bue=n(TIe,"STRONG",{});var WCt=s(bue);IGo=r(WCt,"mobilebert"),WCt.forEach(t),NGo=r(TIe," \u2014 "),JX=n(TIe,"A",{href:!0});var QCt=s(JX);qGo=r(QCt,"MobileBertForMaskedLM"),QCt.forEach(t),jGo=r(TIe," (MobileBERT model)"),TIe.forEach(t),DGo=i(Y),qb=n(Y,"LI",{});var MIe=s(qb);vue=n(MIe,"STRONG",{});var UCt=s(vue);GGo=r(UCt,"mpnet"),UCt.forEach(t),OGo=r(MIe," \u2014 "),YX=n(MIe,"A",{href:!0});var HCt=s(YX);VGo=r(HCt,"MPNetForMaskedLM"),HCt.forEach(t),XGo=r(MIe," (MPNet model)"),MIe.forEach(t),zGo=i(Y),jb=n(Y,"LI",{});var EIe=s(jb);Fue=n(EIe,"STRONG",{});var JCt=s(Fue);WGo=r(JCt,"mvp"),JCt.forEach(t),QGo=r(EIe," \u2014 "),KX=n(EIe,"A",{href:!0});var YCt=s(KX);UGo=r(YCt,"MvpForConditionalGeneration"),YCt.forEach(t),HGo=r(EIe," (MVP model)"),EIe.forEach(t),JGo=i(Y),Db=n(Y,"LI",{});var CIe=s(Db);Tue=n(CIe,"STRONG",{});var KCt=s(Tue);YGo=r(KCt,"nezha"),KCt.forEach(t),KGo=r(CIe," \u2014 "),ZX=n(CIe,"A",{href:!0});var ZCt=s(ZX);ZGo=r(ZCt,"NezhaForMaskedLM"),ZCt.forEach(t),eOo=r(CIe," (Nezha model)"),CIe.forEach(t),oOo=i(Y),Gb=n(Y,"LI",{});var wIe=s(Gb);Mue=n(wIe,"STRONG",{});var e3t=s(Mue);rOo=r(e3t,"nystromformer"),e3t.forEach(t),tOo=r(wIe," \u2014 "),ez=n(wIe,"A",{href:!0});var o3t=s(ez);aOo=r(o3t,"NystromformerForMaskedLM"),o3t.forEach(t),nOo=r(wIe," (Nystr\xF6mformer model)"),wIe.forEach(t),sOo=i(Y),Ob=n(Y,"LI",{});var AIe=s(Ob);Eue=n(AIe,"STRONG",{});var r3t=s(Eue);lOo=r(r3t,"perceiver"),r3t.forEach(t),iOo=r(AIe," \u2014 "),oz=n(AIe,"A",{href:!0});var t3t=s(oz);dOo=r(t3t,"PerceiverForMaskedLM"),t3t.forEach(t),cOo=r(AIe," (Perceiver model)"),AIe.forEach(t),fOo=i(Y),Vb=n(Y,"LI",{});var LIe=s(Vb);Cue=n(LIe,"STRONG",{});var a3t=s(Cue);mOo=r(a3t,"qdqbert"),a3t.forEach(t),gOo=r(LIe," \u2014 "),rz=n(LIe,"A",{href:!0});var n3t=s(rz);hOo=r(n3t,"QDQBertForMaskedLM"),n3t.forEach(t),pOo=r(LIe," (QDQBert model)"),LIe.forEach(t),_Oo=i(Y),Xb=n(Y,"LI",{});var yIe=s(Xb);wue=n(yIe,"STRONG",{});var s3t=s(wue);uOo=r(s3t,"reformer"),s3t.forEach(t),bOo=r(yIe," \u2014 "),tz=n(yIe,"A",{href:!0});var l3t=s(tz);vOo=r(l3t,"ReformerForMaskedLM"),l3t.forEach(t),FOo=r(yIe," (Reformer model)"),yIe.forEach(t),TOo=i(Y),zb=n(Y,"LI",{});var xIe=s(zb);Aue=n(xIe,"STRONG",{});var i3t=s(Aue);MOo=r(i3t,"rembert"),i3t.forEach(t),EOo=r(xIe," \u2014 "),az=n(xIe,"A",{href:!0});var d3t=s(az);COo=r(d3t,"RemBertForMaskedLM"),d3t.forEach(t),wOo=r(xIe," (RemBERT model)"),xIe.forEach(t),AOo=i(Y),Wb=n(Y,"LI",{});var $Ie=s(Wb);Lue=n($Ie,"STRONG",{});var c3t=s(Lue);LOo=r(c3t,"roberta"),c3t.forEach(t),yOo=r($Ie," \u2014 "),nz=n($Ie,"A",{href:!0});var f3t=s(nz);xOo=r(f3t,"RobertaForMaskedLM"),f3t.forEach(t),$Oo=r($Ie," (RoBERTa model)"),$Ie.forEach(t),kOo=i(Y),Qb=n(Y,"LI",{});var kIe=s(Qb);yue=n(kIe,"STRONG",{});var m3t=s(yue);SOo=r(m3t,"roformer"),m3t.forEach(t),ROo=r(kIe," \u2014 "),sz=n(kIe,"A",{href:!0});var g3t=s(sz);POo=r(g3t,"RoFormerForMaskedLM"),g3t.forEach(t),BOo=r(kIe," (RoFormer model)"),kIe.forEach(t),IOo=i(Y),Ub=n(Y,"LI",{});var SIe=s(Ub);xue=n(SIe,"STRONG",{});var h3t=s(xue);NOo=r(h3t,"squeezebert"),h3t.forEach(t),qOo=r(SIe," \u2014 "),lz=n(SIe,"A",{href:!0});var p3t=s(lz);jOo=r(p3t,"SqueezeBertForMaskedLM"),p3t.forEach(t),DOo=r(SIe," (SqueezeBERT model)"),SIe.forEach(t),GOo=i(Y),Hb=n(Y,"LI",{});var RIe=s(Hb);$ue=n(RIe,"STRONG",{});var _3t=s($ue);OOo=r(_3t,"tapas"),_3t.forEach(t),VOo=r(RIe," \u2014 "),iz=n(RIe,"A",{href:!0});var u3t=s(iz);XOo=r(u3t,"TapasForMaskedLM"),u3t.forEach(t),zOo=r(RIe," (TAPAS model)"),RIe.forEach(t),WOo=i(Y),Jb=n(Y,"LI",{});var PIe=s(Jb);kue=n(PIe,"STRONG",{});var b3t=s(kue);QOo=r(b3t,"wav2vec2"),b3t.forEach(t),UOo=r(PIe," \u2014 "),Sue=n(PIe,"CODE",{});var v3t=s(Sue);HOo=r(v3t,"Wav2Vec2ForMaskedLM"),v3t.forEach(t),JOo=r(PIe," (Wav2Vec2 model)"),PIe.forEach(t),YOo=i(Y),Yb=n(Y,"LI",{});var BIe=s(Yb);Rue=n(BIe,"STRONG",{});var F3t=s(Rue);KOo=r(F3t,"xlm"),F3t.forEach(t),ZOo=r(BIe," \u2014 "),dz=n(BIe,"A",{href:!0});var T3t=s(dz);eVo=r(T3t,"XLMWithLMHeadModel"),T3t.forEach(t),oVo=r(BIe," (XLM model)"),BIe.forEach(t),rVo=i(Y),Kb=n(Y,"LI",{});var IIe=s(Kb);Pue=n(IIe,"STRONG",{});var M3t=s(Pue);tVo=r(M3t,"xlm-roberta"),M3t.forEach(t),aVo=r(IIe," \u2014 "),cz=n(IIe,"A",{href:!0});var E3t=s(cz);nVo=r(E3t,"XLMRobertaForMaskedLM"),E3t.forEach(t),sVo=r(IIe," (XLM-RoBERTa model)"),IIe.forEach(t),lVo=i(Y),Zb=n(Y,"LI",{});var NIe=s(Zb);Bue=n(NIe,"STRONG",{});var C3t=s(Bue);iVo=r(C3t,"xlm-roberta-xl"),C3t.forEach(t),dVo=r(NIe," \u2014 "),fz=n(NIe,"A",{href:!0});var w3t=s(fz);cVo=r(w3t,"XLMRobertaXLForMaskedLM"),w3t.forEach(t),fVo=r(NIe," (XLM-RoBERTa-XL model)"),NIe.forEach(t),mVo=i(Y),ev=n(Y,"LI",{});var qIe=s(ev);Iue=n(qIe,"STRONG",{});var A3t=s(Iue);gVo=r(A3t,"yoso"),A3t.forEach(t),hVo=r(qIe," \u2014 "),mz=n(qIe,"A",{href:!0});var L3t=s(mz);pVo=r(L3t,"YosoForMaskedLM"),L3t.forEach(t),_Vo=r(qIe," (YOSO model)"),qIe.forEach(t),Y.forEach(t),uVo=i(_a),ov=n(_a,"P",{});var jIe=s(ov);bVo=r(jIe,"The model is set in evaluation mode by default using "),Nue=n(jIe,"CODE",{});var y3t=s(Nue);vVo=r(y3t,"model.eval()"),y3t.forEach(t),FVo=r(jIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=n(jIe,"CODE",{});var x3t=s(que);TVo=r(x3t,"model.train()"),x3t.forEach(t),jIe.forEach(t),MVo=i(_a),T(rv.$$.fragment,_a),_a.forEach(t),ul.forEach(t),lUe=i(f),hd=n(f,"H2",{class:!0});var uJe=s(hd);tv=n(uJe,"A",{id:!0,class:!0,href:!0});var $3t=s(tv);jue=n($3t,"SPAN",{});var k3t=s(jue);T(ny.$$.fragment,k3t),k3t.forEach(t),$3t.forEach(t),EVo=i(uJe),Due=n(uJe,"SPAN",{});var S3t=s(Due);CVo=r(S3t,"AutoModelForSeq2SeqLM"),S3t.forEach(t),uJe.forEach(t),iUe=i(f),Io=n(f,"DIV",{class:!0});var bl=s(Io);T(sy.$$.fragment,bl),wVo=i(bl),pd=n(bl,"P",{});var Uae=s(pd);AVo=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gz=n(Uae,"A",{href:!0});var R3t=s(gz);LVo=r(R3t,"from_pretrained()"),R3t.forEach(t),yVo=r(Uae," class method or the "),hz=n(Uae,"A",{href:!0});var P3t=s(hz);xVo=r(P3t,"from_config()"),P3t.forEach(t),$Vo=r(Uae,` class
method.`),Uae.forEach(t),kVo=i(bl),ly=n(bl,"P",{});var bJe=s(ly);SVo=r(bJe,"This class cannot be instantiated directly using "),Gue=n(bJe,"CODE",{});var B3t=s(Gue);RVo=r(B3t,"__init__()"),B3t.forEach(t),PVo=r(bJe," (throws an error)."),bJe.forEach(t),BVo=i(bl),_t=n(bl,"DIV",{class:!0});var Fw=s(_t);T(iy.$$.fragment,Fw),IVo=i(Fw),Oue=n(Fw,"P",{});var I3t=s(Oue);NVo=r(I3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),I3t.forEach(t),qVo=i(Fw),_d=n(Fw,"P",{});var Hae=s(_d);jVo=r(Hae,`Note:
Loading a model from its configuration file does `),Vue=n(Hae,"STRONG",{});var N3t=s(Vue);DVo=r(N3t,"not"),N3t.forEach(t),GVo=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(Hae,"A",{href:!0});var q3t=s(pz);OVo=r(q3t,"from_pretrained()"),q3t.forEach(t),VVo=r(Hae," to load the model weights."),Hae.forEach(t),XVo=i(Fw),T(av.$$.fragment,Fw),Fw.forEach(t),zVo=i(bl),oo=n(bl,"DIV",{class:!0});var ua=s(oo);T(dy.$$.fragment,ua),WVo=i(ua),Xue=n(ua,"P",{});var j3t=s(Xue);QVo=r(j3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j3t.forEach(t),UVo=i(ua),Qa=n(ua,"P",{});var Tw=s(Qa);HVo=r(Tw,"The model class to instantiate is selected based on the "),zue=n(Tw,"CODE",{});var D3t=s(zue);JVo=r(D3t,"model_type"),D3t.forEach(t),YVo=r(Tw,` property of the config object (either
passed as an argument or loaded from `),Wue=n(Tw,"CODE",{});var G3t=s(Wue);KVo=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),ZVo=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(Tw,"CODE",{});var O3t=s(Que);eXo=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),oXo=r(Tw,":"),Tw.forEach(t),rXo=i(ua),me=n(ua,"UL",{});var ue=s(me);nv=n(ue,"LI",{});var DIe=s(nv);Uue=n(DIe,"STRONG",{});var V3t=s(Uue);tXo=r(V3t,"bart"),V3t.forEach(t),aXo=r(DIe," \u2014 "),_z=n(DIe,"A",{href:!0});var X3t=s(_z);nXo=r(X3t,"BartForConditionalGeneration"),X3t.forEach(t),sXo=r(DIe," (BART model)"),DIe.forEach(t),lXo=i(ue),sv=n(ue,"LI",{});var GIe=s(sv);Hue=n(GIe,"STRONG",{});var z3t=s(Hue);iXo=r(z3t,"bigbird_pegasus"),z3t.forEach(t),dXo=r(GIe," \u2014 "),uz=n(GIe,"A",{href:!0});var W3t=s(uz);cXo=r(W3t,"BigBirdPegasusForConditionalGeneration"),W3t.forEach(t),fXo=r(GIe," (BigBird-Pegasus model)"),GIe.forEach(t),mXo=i(ue),lv=n(ue,"LI",{});var OIe=s(lv);Jue=n(OIe,"STRONG",{});var Q3t=s(Jue);gXo=r(Q3t,"blenderbot"),Q3t.forEach(t),hXo=r(OIe," \u2014 "),bz=n(OIe,"A",{href:!0});var U3t=s(bz);pXo=r(U3t,"BlenderbotForConditionalGeneration"),U3t.forEach(t),_Xo=r(OIe," (Blenderbot model)"),OIe.forEach(t),uXo=i(ue),iv=n(ue,"LI",{});var VIe=s(iv);Yue=n(VIe,"STRONG",{});var H3t=s(Yue);bXo=r(H3t,"blenderbot-small"),H3t.forEach(t),vXo=r(VIe," \u2014 "),vz=n(VIe,"A",{href:!0});var J3t=s(vz);FXo=r(J3t,"BlenderbotSmallForConditionalGeneration"),J3t.forEach(t),TXo=r(VIe," (BlenderbotSmall model)"),VIe.forEach(t),MXo=i(ue),dv=n(ue,"LI",{});var XIe=s(dv);Kue=n(XIe,"STRONG",{});var Y3t=s(Kue);EXo=r(Y3t,"encoder-decoder"),Y3t.forEach(t),CXo=r(XIe," \u2014 "),Fz=n(XIe,"A",{href:!0});var K3t=s(Fz);wXo=r(K3t,"EncoderDecoderModel"),K3t.forEach(t),AXo=r(XIe," (Encoder decoder model)"),XIe.forEach(t),LXo=i(ue),cv=n(ue,"LI",{});var zIe=s(cv);Zue=n(zIe,"STRONG",{});var Z3t=s(Zue);yXo=r(Z3t,"fsmt"),Z3t.forEach(t),xXo=r(zIe," \u2014 "),Tz=n(zIe,"A",{href:!0});var e5t=s(Tz);$Xo=r(e5t,"FSMTForConditionalGeneration"),e5t.forEach(t),kXo=r(zIe," (FairSeq Machine-Translation model)"),zIe.forEach(t),SXo=i(ue),fv=n(ue,"LI",{});var WIe=s(fv);e1e=n(WIe,"STRONG",{});var o5t=s(e1e);RXo=r(o5t,"led"),o5t.forEach(t),PXo=r(WIe," \u2014 "),Mz=n(WIe,"A",{href:!0});var r5t=s(Mz);BXo=r(r5t,"LEDForConditionalGeneration"),r5t.forEach(t),IXo=r(WIe," (LED model)"),WIe.forEach(t),NXo=i(ue),mv=n(ue,"LI",{});var QIe=s(mv);o1e=n(QIe,"STRONG",{});var t5t=s(o1e);qXo=r(t5t,"longt5"),t5t.forEach(t),jXo=r(QIe," \u2014 "),Ez=n(QIe,"A",{href:!0});var a5t=s(Ez);DXo=r(a5t,"LongT5ForConditionalGeneration"),a5t.forEach(t),GXo=r(QIe," (LongT5 model)"),QIe.forEach(t),OXo=i(ue),gv=n(ue,"LI",{});var UIe=s(gv);r1e=n(UIe,"STRONG",{});var n5t=s(r1e);VXo=r(n5t,"m2m_100"),n5t.forEach(t),XXo=r(UIe," \u2014 "),Cz=n(UIe,"A",{href:!0});var s5t=s(Cz);zXo=r(s5t,"M2M100ForConditionalGeneration"),s5t.forEach(t),WXo=r(UIe," (M2M100 model)"),UIe.forEach(t),QXo=i(ue),hv=n(ue,"LI",{});var HIe=s(hv);t1e=n(HIe,"STRONG",{});var l5t=s(t1e);UXo=r(l5t,"marian"),l5t.forEach(t),HXo=r(HIe," \u2014 "),wz=n(HIe,"A",{href:!0});var i5t=s(wz);JXo=r(i5t,"MarianMTModel"),i5t.forEach(t),YXo=r(HIe," (Marian model)"),HIe.forEach(t),KXo=i(ue),pv=n(ue,"LI",{});var JIe=s(pv);a1e=n(JIe,"STRONG",{});var d5t=s(a1e);ZXo=r(d5t,"mbart"),d5t.forEach(t),ezo=r(JIe," \u2014 "),Az=n(JIe,"A",{href:!0});var c5t=s(Az);ozo=r(c5t,"MBartForConditionalGeneration"),c5t.forEach(t),rzo=r(JIe," (mBART model)"),JIe.forEach(t),tzo=i(ue),_v=n(ue,"LI",{});var YIe=s(_v);n1e=n(YIe,"STRONG",{});var f5t=s(n1e);azo=r(f5t,"mt5"),f5t.forEach(t),nzo=r(YIe," \u2014 "),Lz=n(YIe,"A",{href:!0});var m5t=s(Lz);szo=r(m5t,"MT5ForConditionalGeneration"),m5t.forEach(t),lzo=r(YIe," (MT5 model)"),YIe.forEach(t),izo=i(ue),uv=n(ue,"LI",{});var KIe=s(uv);s1e=n(KIe,"STRONG",{});var g5t=s(s1e);dzo=r(g5t,"mvp"),g5t.forEach(t),czo=r(KIe," \u2014 "),yz=n(KIe,"A",{href:!0});var h5t=s(yz);fzo=r(h5t,"MvpForConditionalGeneration"),h5t.forEach(t),mzo=r(KIe," (MVP model)"),KIe.forEach(t),gzo=i(ue),bv=n(ue,"LI",{});var ZIe=s(bv);l1e=n(ZIe,"STRONG",{});var p5t=s(l1e);hzo=r(p5t,"nllb"),p5t.forEach(t),pzo=r(ZIe," \u2014 "),xz=n(ZIe,"A",{href:!0});var _5t=s(xz);_zo=r(_5t,"M2M100ForConditionalGeneration"),_5t.forEach(t),uzo=r(ZIe," (NLLB model)"),ZIe.forEach(t),bzo=i(ue),vv=n(ue,"LI",{});var eNe=s(vv);i1e=n(eNe,"STRONG",{});var u5t=s(i1e);vzo=r(u5t,"pegasus"),u5t.forEach(t),Fzo=r(eNe," \u2014 "),$z=n(eNe,"A",{href:!0});var b5t=s($z);Tzo=r(b5t,"PegasusForConditionalGeneration"),b5t.forEach(t),Mzo=r(eNe," (Pegasus model)"),eNe.forEach(t),Ezo=i(ue),Fv=n(ue,"LI",{});var oNe=s(Fv);d1e=n(oNe,"STRONG",{});var v5t=s(d1e);Czo=r(v5t,"plbart"),v5t.forEach(t),wzo=r(oNe," \u2014 "),kz=n(oNe,"A",{href:!0});var F5t=s(kz);Azo=r(F5t,"PLBartForConditionalGeneration"),F5t.forEach(t),Lzo=r(oNe," (PLBart model)"),oNe.forEach(t),yzo=i(ue),Tv=n(ue,"LI",{});var rNe=s(Tv);c1e=n(rNe,"STRONG",{});var T5t=s(c1e);xzo=r(T5t,"prophetnet"),T5t.forEach(t),$zo=r(rNe," \u2014 "),Sz=n(rNe,"A",{href:!0});var M5t=s(Sz);kzo=r(M5t,"ProphetNetForConditionalGeneration"),M5t.forEach(t),Szo=r(rNe," (ProphetNet model)"),rNe.forEach(t),Rzo=i(ue),Mv=n(ue,"LI",{});var tNe=s(Mv);f1e=n(tNe,"STRONG",{});var E5t=s(f1e);Pzo=r(E5t,"t5"),E5t.forEach(t),Bzo=r(tNe," \u2014 "),Rz=n(tNe,"A",{href:!0});var C5t=s(Rz);Izo=r(C5t,"T5ForConditionalGeneration"),C5t.forEach(t),Nzo=r(tNe," (T5 model)"),tNe.forEach(t),qzo=i(ue),Ev=n(ue,"LI",{});var aNe=s(Ev);m1e=n(aNe,"STRONG",{});var w5t=s(m1e);jzo=r(w5t,"xlm-prophetnet"),w5t.forEach(t),Dzo=r(aNe," \u2014 "),Pz=n(aNe,"A",{href:!0});var A5t=s(Pz);Gzo=r(A5t,"XLMProphetNetForConditionalGeneration"),A5t.forEach(t),Ozo=r(aNe," (XLM-ProphetNet model)"),aNe.forEach(t),ue.forEach(t),Vzo=i(ua),Cv=n(ua,"P",{});var nNe=s(Cv);Xzo=r(nNe,"The model is set in evaluation mode by default using "),g1e=n(nNe,"CODE",{});var L5t=s(g1e);zzo=r(L5t,"model.eval()"),L5t.forEach(t),Wzo=r(nNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=n(nNe,"CODE",{});var y5t=s(h1e);Qzo=r(y5t,"model.train()"),y5t.forEach(t),nNe.forEach(t),Uzo=i(ua),T(wv.$$.fragment,ua),ua.forEach(t),bl.forEach(t),dUe=i(f),ud=n(f,"H2",{class:!0});var vJe=s(ud);Av=n(vJe,"A",{id:!0,class:!0,href:!0});var x5t=s(Av);p1e=n(x5t,"SPAN",{});var $5t=s(p1e);T(cy.$$.fragment,$5t),$5t.forEach(t),x5t.forEach(t),Hzo=i(vJe),_1e=n(vJe,"SPAN",{});var k5t=s(_1e);Jzo=r(k5t,"AutoModelForSequenceClassification"),k5t.forEach(t),vJe.forEach(t),cUe=i(f),No=n(f,"DIV",{class:!0});var vl=s(No);T(fy.$$.fragment,vl),Yzo=i(vl),bd=n(vl,"P",{});var Jae=s(bd);Kzo=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bz=n(Jae,"A",{href:!0});var S5t=s(Bz);Zzo=r(S5t,"from_pretrained()"),S5t.forEach(t),eWo=r(Jae," class method or the "),Iz=n(Jae,"A",{href:!0});var R5t=s(Iz);oWo=r(R5t,"from_config()"),R5t.forEach(t),rWo=r(Jae,` class
method.`),Jae.forEach(t),tWo=i(vl),my=n(vl,"P",{});var FJe=s(my);aWo=r(FJe,"This class cannot be instantiated directly using "),u1e=n(FJe,"CODE",{});var P5t=s(u1e);nWo=r(P5t,"__init__()"),P5t.forEach(t),sWo=r(FJe," (throws an error)."),FJe.forEach(t),lWo=i(vl),ut=n(vl,"DIV",{class:!0});var Mw=s(ut);T(gy.$$.fragment,Mw),iWo=i(Mw),b1e=n(Mw,"P",{});var B5t=s(b1e);dWo=r(B5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),B5t.forEach(t),cWo=i(Mw),vd=n(Mw,"P",{});var Yae=s(vd);fWo=r(Yae,`Note:
Loading a model from its configuration file does `),v1e=n(Yae,"STRONG",{});var I5t=s(v1e);mWo=r(I5t,"not"),I5t.forEach(t),gWo=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(Yae,"A",{href:!0});var N5t=s(Nz);hWo=r(N5t,"from_pretrained()"),N5t.forEach(t),pWo=r(Yae," to load the model weights."),Yae.forEach(t),_Wo=i(Mw),T(Lv.$$.fragment,Mw),Mw.forEach(t),uWo=i(vl),ro=n(vl,"DIV",{class:!0});var ba=s(ro);T(hy.$$.fragment,ba),bWo=i(ba),F1e=n(ba,"P",{});var q5t=s(F1e);vWo=r(q5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),q5t.forEach(t),FWo=i(ba),Ua=n(ba,"P",{});var Ew=s(Ua);TWo=r(Ew,"The model class to instantiate is selected based on the "),T1e=n(Ew,"CODE",{});var j5t=s(T1e);MWo=r(j5t,"model_type"),j5t.forEach(t),EWo=r(Ew,` property of the config object (either
passed as an argument or loaded from `),M1e=n(Ew,"CODE",{});var D5t=s(M1e);CWo=r(D5t,"pretrained_model_name_or_path"),D5t.forEach(t),wWo=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(Ew,"CODE",{});var G5t=s(E1e);AWo=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),LWo=r(Ew,":"),Ew.forEach(t),yWo=i(ba),N=n(ba,"UL",{});var j=s(N);yv=n(j,"LI",{});var sNe=s(yv);C1e=n(sNe,"STRONG",{});var O5t=s(C1e);xWo=r(O5t,"albert"),O5t.forEach(t),$Wo=r(sNe," \u2014 "),qz=n(sNe,"A",{href:!0});var V5t=s(qz);kWo=r(V5t,"AlbertForSequenceClassification"),V5t.forEach(t),SWo=r(sNe," (ALBERT model)"),sNe.forEach(t),RWo=i(j),xv=n(j,"LI",{});var lNe=s(xv);w1e=n(lNe,"STRONG",{});var X5t=s(w1e);PWo=r(X5t,"bart"),X5t.forEach(t),BWo=r(lNe," \u2014 "),jz=n(lNe,"A",{href:!0});var z5t=s(jz);IWo=r(z5t,"BartForSequenceClassification"),z5t.forEach(t),NWo=r(lNe," (BART model)"),lNe.forEach(t),qWo=i(j),$v=n(j,"LI",{});var iNe=s($v);A1e=n(iNe,"STRONG",{});var W5t=s(A1e);jWo=r(W5t,"bert"),W5t.forEach(t),DWo=r(iNe," \u2014 "),Dz=n(iNe,"A",{href:!0});var Q5t=s(Dz);GWo=r(Q5t,"BertForSequenceClassification"),Q5t.forEach(t),OWo=r(iNe," (BERT model)"),iNe.forEach(t),VWo=i(j),kv=n(j,"LI",{});var dNe=s(kv);L1e=n(dNe,"STRONG",{});var U5t=s(L1e);XWo=r(U5t,"big_bird"),U5t.forEach(t),zWo=r(dNe," \u2014 "),Gz=n(dNe,"A",{href:!0});var H5t=s(Gz);WWo=r(H5t,"BigBirdForSequenceClassification"),H5t.forEach(t),QWo=r(dNe," (BigBird model)"),dNe.forEach(t),UWo=i(j),Sv=n(j,"LI",{});var cNe=s(Sv);y1e=n(cNe,"STRONG",{});var J5t=s(y1e);HWo=r(J5t,"bigbird_pegasus"),J5t.forEach(t),JWo=r(cNe," \u2014 "),Oz=n(cNe,"A",{href:!0});var Y5t=s(Oz);YWo=r(Y5t,"BigBirdPegasusForSequenceClassification"),Y5t.forEach(t),KWo=r(cNe," (BigBird-Pegasus model)"),cNe.forEach(t),ZWo=i(j),Rv=n(j,"LI",{});var fNe=s(Rv);x1e=n(fNe,"STRONG",{});var K5t=s(x1e);eQo=r(K5t,"bloom"),K5t.forEach(t),oQo=r(fNe," \u2014 "),Vz=n(fNe,"A",{href:!0});var Z5t=s(Vz);rQo=r(Z5t,"BloomForSequenceClassification"),Z5t.forEach(t),tQo=r(fNe," (BLOOM model)"),fNe.forEach(t),aQo=i(j),Pv=n(j,"LI",{});var mNe=s(Pv);$1e=n(mNe,"STRONG",{});var e0t=s($1e);nQo=r(e0t,"camembert"),e0t.forEach(t),sQo=r(mNe," \u2014 "),Xz=n(mNe,"A",{href:!0});var o0t=s(Xz);lQo=r(o0t,"CamembertForSequenceClassification"),o0t.forEach(t),iQo=r(mNe," (CamemBERT model)"),mNe.forEach(t),dQo=i(j),Bv=n(j,"LI",{});var gNe=s(Bv);k1e=n(gNe,"STRONG",{});var r0t=s(k1e);cQo=r(r0t,"canine"),r0t.forEach(t),fQo=r(gNe," \u2014 "),zz=n(gNe,"A",{href:!0});var t0t=s(zz);mQo=r(t0t,"CanineForSequenceClassification"),t0t.forEach(t),gQo=r(gNe," (CANINE model)"),gNe.forEach(t),hQo=i(j),Iv=n(j,"LI",{});var hNe=s(Iv);S1e=n(hNe,"STRONG",{});var a0t=s(S1e);pQo=r(a0t,"convbert"),a0t.forEach(t),_Qo=r(hNe," \u2014 "),Wz=n(hNe,"A",{href:!0});var n0t=s(Wz);uQo=r(n0t,"ConvBertForSequenceClassification"),n0t.forEach(t),bQo=r(hNe," (ConvBERT model)"),hNe.forEach(t),vQo=i(j),Nv=n(j,"LI",{});var pNe=s(Nv);R1e=n(pNe,"STRONG",{});var s0t=s(R1e);FQo=r(s0t,"ctrl"),s0t.forEach(t),TQo=r(pNe," \u2014 "),Qz=n(pNe,"A",{href:!0});var l0t=s(Qz);MQo=r(l0t,"CTRLForSequenceClassification"),l0t.forEach(t),EQo=r(pNe," (CTRL model)"),pNe.forEach(t),CQo=i(j),qv=n(j,"LI",{});var _Ne=s(qv);P1e=n(_Ne,"STRONG",{});var i0t=s(P1e);wQo=r(i0t,"data2vec-text"),i0t.forEach(t),AQo=r(_Ne," \u2014 "),Uz=n(_Ne,"A",{href:!0});var d0t=s(Uz);LQo=r(d0t,"Data2VecTextForSequenceClassification"),d0t.forEach(t),yQo=r(_Ne," (Data2VecText model)"),_Ne.forEach(t),xQo=i(j),jv=n(j,"LI",{});var uNe=s(jv);B1e=n(uNe,"STRONG",{});var c0t=s(B1e);$Qo=r(c0t,"deberta"),c0t.forEach(t),kQo=r(uNe," \u2014 "),Hz=n(uNe,"A",{href:!0});var f0t=s(Hz);SQo=r(f0t,"DebertaForSequenceClassification"),f0t.forEach(t),RQo=r(uNe," (DeBERTa model)"),uNe.forEach(t),PQo=i(j),Dv=n(j,"LI",{});var bNe=s(Dv);I1e=n(bNe,"STRONG",{});var m0t=s(I1e);BQo=r(m0t,"deberta-v2"),m0t.forEach(t),IQo=r(bNe," \u2014 "),Jz=n(bNe,"A",{href:!0});var g0t=s(Jz);NQo=r(g0t,"DebertaV2ForSequenceClassification"),g0t.forEach(t),qQo=r(bNe," (DeBERTa-v2 model)"),bNe.forEach(t),jQo=i(j),Gv=n(j,"LI",{});var vNe=s(Gv);N1e=n(vNe,"STRONG",{});var h0t=s(N1e);DQo=r(h0t,"distilbert"),h0t.forEach(t),GQo=r(vNe," \u2014 "),Yz=n(vNe,"A",{href:!0});var p0t=s(Yz);OQo=r(p0t,"DistilBertForSequenceClassification"),p0t.forEach(t),VQo=r(vNe," (DistilBERT model)"),vNe.forEach(t),XQo=i(j),Ov=n(j,"LI",{});var FNe=s(Ov);q1e=n(FNe,"STRONG",{});var _0t=s(q1e);zQo=r(_0t,"electra"),_0t.forEach(t),WQo=r(FNe," \u2014 "),Kz=n(FNe,"A",{href:!0});var u0t=s(Kz);QQo=r(u0t,"ElectraForSequenceClassification"),u0t.forEach(t),UQo=r(FNe," (ELECTRA model)"),FNe.forEach(t),HQo=i(j),Vv=n(j,"LI",{});var TNe=s(Vv);j1e=n(TNe,"STRONG",{});var b0t=s(j1e);JQo=r(b0t,"flaubert"),b0t.forEach(t),YQo=r(TNe," \u2014 "),Zz=n(TNe,"A",{href:!0});var v0t=s(Zz);KQo=r(v0t,"FlaubertForSequenceClassification"),v0t.forEach(t),ZQo=r(TNe," (FlauBERT model)"),TNe.forEach(t),eUo=i(j),Xv=n(j,"LI",{});var MNe=s(Xv);D1e=n(MNe,"STRONG",{});var F0t=s(D1e);oUo=r(F0t,"fnet"),F0t.forEach(t),rUo=r(MNe," \u2014 "),eW=n(MNe,"A",{href:!0});var T0t=s(eW);tUo=r(T0t,"FNetForSequenceClassification"),T0t.forEach(t),aUo=r(MNe," (FNet model)"),MNe.forEach(t),nUo=i(j),zv=n(j,"LI",{});var ENe=s(zv);G1e=n(ENe,"STRONG",{});var M0t=s(G1e);sUo=r(M0t,"funnel"),M0t.forEach(t),lUo=r(ENe," \u2014 "),oW=n(ENe,"A",{href:!0});var E0t=s(oW);iUo=r(E0t,"FunnelForSequenceClassification"),E0t.forEach(t),dUo=r(ENe," (Funnel Transformer model)"),ENe.forEach(t),cUo=i(j),Wv=n(j,"LI",{});var CNe=s(Wv);O1e=n(CNe,"STRONG",{});var C0t=s(O1e);fUo=r(C0t,"gpt2"),C0t.forEach(t),mUo=r(CNe," \u2014 "),rW=n(CNe,"A",{href:!0});var w0t=s(rW);gUo=r(w0t,"GPT2ForSequenceClassification"),w0t.forEach(t),hUo=r(CNe," (OpenAI GPT-2 model)"),CNe.forEach(t),pUo=i(j),Qv=n(j,"LI",{});var wNe=s(Qv);V1e=n(wNe,"STRONG",{});var A0t=s(V1e);_Uo=r(A0t,"gpt_neo"),A0t.forEach(t),uUo=r(wNe," \u2014 "),tW=n(wNe,"A",{href:!0});var L0t=s(tW);bUo=r(L0t,"GPTNeoForSequenceClassification"),L0t.forEach(t),vUo=r(wNe," (GPT Neo model)"),wNe.forEach(t),FUo=i(j),Uv=n(j,"LI",{});var ANe=s(Uv);X1e=n(ANe,"STRONG",{});var y0t=s(X1e);TUo=r(y0t,"gptj"),y0t.forEach(t),MUo=r(ANe," \u2014 "),aW=n(ANe,"A",{href:!0});var x0t=s(aW);EUo=r(x0t,"GPTJForSequenceClassification"),x0t.forEach(t),CUo=r(ANe," (GPT-J model)"),ANe.forEach(t),wUo=i(j),Hv=n(j,"LI",{});var LNe=s(Hv);z1e=n(LNe,"STRONG",{});var $0t=s(z1e);AUo=r($0t,"ibert"),$0t.forEach(t),LUo=r(LNe," \u2014 "),nW=n(LNe,"A",{href:!0});var k0t=s(nW);yUo=r(k0t,"IBertForSequenceClassification"),k0t.forEach(t),xUo=r(LNe," (I-BERT model)"),LNe.forEach(t),$Uo=i(j),Jv=n(j,"LI",{});var yNe=s(Jv);W1e=n(yNe,"STRONG",{});var S0t=s(W1e);kUo=r(S0t,"layoutlm"),S0t.forEach(t),SUo=r(yNe," \u2014 "),sW=n(yNe,"A",{href:!0});var R0t=s(sW);RUo=r(R0t,"LayoutLMForSequenceClassification"),R0t.forEach(t),PUo=r(yNe," (LayoutLM model)"),yNe.forEach(t),BUo=i(j),Yv=n(j,"LI",{});var xNe=s(Yv);Q1e=n(xNe,"STRONG",{});var P0t=s(Q1e);IUo=r(P0t,"layoutlmv2"),P0t.forEach(t),NUo=r(xNe," \u2014 "),lW=n(xNe,"A",{href:!0});var B0t=s(lW);qUo=r(B0t,"LayoutLMv2ForSequenceClassification"),B0t.forEach(t),jUo=r(xNe," (LayoutLMv2 model)"),xNe.forEach(t),DUo=i(j),Kv=n(j,"LI",{});var $Ne=s(Kv);U1e=n($Ne,"STRONG",{});var I0t=s(U1e);GUo=r(I0t,"layoutlmv3"),I0t.forEach(t),OUo=r($Ne," \u2014 "),iW=n($Ne,"A",{href:!0});var N0t=s(iW);VUo=r(N0t,"LayoutLMv3ForSequenceClassification"),N0t.forEach(t),XUo=r($Ne," (LayoutLMv3 model)"),$Ne.forEach(t),zUo=i(j),Zv=n(j,"LI",{});var kNe=s(Zv);H1e=n(kNe,"STRONG",{});var q0t=s(H1e);WUo=r(q0t,"led"),q0t.forEach(t),QUo=r(kNe," \u2014 "),dW=n(kNe,"A",{href:!0});var j0t=s(dW);UUo=r(j0t,"LEDForSequenceClassification"),j0t.forEach(t),HUo=r(kNe," (LED model)"),kNe.forEach(t),JUo=i(j),e6=n(j,"LI",{});var SNe=s(e6);J1e=n(SNe,"STRONG",{});var D0t=s(J1e);YUo=r(D0t,"longformer"),D0t.forEach(t),KUo=r(SNe," \u2014 "),cW=n(SNe,"A",{href:!0});var G0t=s(cW);ZUo=r(G0t,"LongformerForSequenceClassification"),G0t.forEach(t),eHo=r(SNe," (Longformer model)"),SNe.forEach(t),oHo=i(j),o6=n(j,"LI",{});var RNe=s(o6);Y1e=n(RNe,"STRONG",{});var O0t=s(Y1e);rHo=r(O0t,"luke"),O0t.forEach(t),tHo=r(RNe," \u2014 "),fW=n(RNe,"A",{href:!0});var V0t=s(fW);aHo=r(V0t,"LukeForSequenceClassification"),V0t.forEach(t),nHo=r(RNe," (LUKE model)"),RNe.forEach(t),sHo=i(j),r6=n(j,"LI",{});var PNe=s(r6);K1e=n(PNe,"STRONG",{});var X0t=s(K1e);lHo=r(X0t,"mbart"),X0t.forEach(t),iHo=r(PNe," \u2014 "),mW=n(PNe,"A",{href:!0});var z0t=s(mW);dHo=r(z0t,"MBartForSequenceClassification"),z0t.forEach(t),cHo=r(PNe," (mBART model)"),PNe.forEach(t),fHo=i(j),t6=n(j,"LI",{});var BNe=s(t6);Z1e=n(BNe,"STRONG",{});var W0t=s(Z1e);mHo=r(W0t,"megatron-bert"),W0t.forEach(t),gHo=r(BNe," \u2014 "),gW=n(BNe,"A",{href:!0});var Q0t=s(gW);hHo=r(Q0t,"MegatronBertForSequenceClassification"),Q0t.forEach(t),pHo=r(BNe," (Megatron-BERT model)"),BNe.forEach(t),_Ho=i(j),a6=n(j,"LI",{});var INe=s(a6);e2e=n(INe,"STRONG",{});var U0t=s(e2e);uHo=r(U0t,"mobilebert"),U0t.forEach(t),bHo=r(INe," \u2014 "),hW=n(INe,"A",{href:!0});var H0t=s(hW);vHo=r(H0t,"MobileBertForSequenceClassification"),H0t.forEach(t),FHo=r(INe," (MobileBERT model)"),INe.forEach(t),THo=i(j),n6=n(j,"LI",{});var NNe=s(n6);o2e=n(NNe,"STRONG",{});var J0t=s(o2e);MHo=r(J0t,"mpnet"),J0t.forEach(t),EHo=r(NNe," \u2014 "),pW=n(NNe,"A",{href:!0});var Y0t=s(pW);CHo=r(Y0t,"MPNetForSequenceClassification"),Y0t.forEach(t),wHo=r(NNe," (MPNet model)"),NNe.forEach(t),AHo=i(j),s6=n(j,"LI",{});var qNe=s(s6);r2e=n(qNe,"STRONG",{});var K0t=s(r2e);LHo=r(K0t,"mvp"),K0t.forEach(t),yHo=r(qNe," \u2014 "),_W=n(qNe,"A",{href:!0});var Z0t=s(_W);xHo=r(Z0t,"MvpForSequenceClassification"),Z0t.forEach(t),$Ho=r(qNe," (MVP model)"),qNe.forEach(t),kHo=i(j),l6=n(j,"LI",{});var jNe=s(l6);t2e=n(jNe,"STRONG",{});var ewt=s(t2e);SHo=r(ewt,"nezha"),ewt.forEach(t),RHo=r(jNe," \u2014 "),uW=n(jNe,"A",{href:!0});var owt=s(uW);PHo=r(owt,"NezhaForSequenceClassification"),owt.forEach(t),BHo=r(jNe," (Nezha model)"),jNe.forEach(t),IHo=i(j),i6=n(j,"LI",{});var DNe=s(i6);a2e=n(DNe,"STRONG",{});var rwt=s(a2e);NHo=r(rwt,"nystromformer"),rwt.forEach(t),qHo=r(DNe," \u2014 "),bW=n(DNe,"A",{href:!0});var twt=s(bW);jHo=r(twt,"NystromformerForSequenceClassification"),twt.forEach(t),DHo=r(DNe," (Nystr\xF6mformer model)"),DNe.forEach(t),GHo=i(j),d6=n(j,"LI",{});var GNe=s(d6);n2e=n(GNe,"STRONG",{});var awt=s(n2e);OHo=r(awt,"openai-gpt"),awt.forEach(t),VHo=r(GNe," \u2014 "),vW=n(GNe,"A",{href:!0});var nwt=s(vW);XHo=r(nwt,"OpenAIGPTForSequenceClassification"),nwt.forEach(t),zHo=r(GNe," (OpenAI GPT model)"),GNe.forEach(t),WHo=i(j),c6=n(j,"LI",{});var ONe=s(c6);s2e=n(ONe,"STRONG",{});var swt=s(s2e);QHo=r(swt,"opt"),swt.forEach(t),UHo=r(ONe," \u2014 "),FW=n(ONe,"A",{href:!0});var lwt=s(FW);HHo=r(lwt,"OPTForSequenceClassification"),lwt.forEach(t),JHo=r(ONe," (OPT model)"),ONe.forEach(t),YHo=i(j),f6=n(j,"LI",{});var VNe=s(f6);l2e=n(VNe,"STRONG",{});var iwt=s(l2e);KHo=r(iwt,"perceiver"),iwt.forEach(t),ZHo=r(VNe," \u2014 "),TW=n(VNe,"A",{href:!0});var dwt=s(TW);eJo=r(dwt,"PerceiverForSequenceClassification"),dwt.forEach(t),oJo=r(VNe," (Perceiver model)"),VNe.forEach(t),rJo=i(j),m6=n(j,"LI",{});var XNe=s(m6);i2e=n(XNe,"STRONG",{});var cwt=s(i2e);tJo=r(cwt,"plbart"),cwt.forEach(t),aJo=r(XNe," \u2014 "),MW=n(XNe,"A",{href:!0});var fwt=s(MW);nJo=r(fwt,"PLBartForSequenceClassification"),fwt.forEach(t),sJo=r(XNe," (PLBart model)"),XNe.forEach(t),lJo=i(j),g6=n(j,"LI",{});var zNe=s(g6);d2e=n(zNe,"STRONG",{});var mwt=s(d2e);iJo=r(mwt,"qdqbert"),mwt.forEach(t),dJo=r(zNe," \u2014 "),EW=n(zNe,"A",{href:!0});var gwt=s(EW);cJo=r(gwt,"QDQBertForSequenceClassification"),gwt.forEach(t),fJo=r(zNe," (QDQBert model)"),zNe.forEach(t),mJo=i(j),h6=n(j,"LI",{});var WNe=s(h6);c2e=n(WNe,"STRONG",{});var hwt=s(c2e);gJo=r(hwt,"reformer"),hwt.forEach(t),hJo=r(WNe," \u2014 "),CW=n(WNe,"A",{href:!0});var pwt=s(CW);pJo=r(pwt,"ReformerForSequenceClassification"),pwt.forEach(t),_Jo=r(WNe," (Reformer model)"),WNe.forEach(t),uJo=i(j),p6=n(j,"LI",{});var QNe=s(p6);f2e=n(QNe,"STRONG",{});var _wt=s(f2e);bJo=r(_wt,"rembert"),_wt.forEach(t),vJo=r(QNe," \u2014 "),wW=n(QNe,"A",{href:!0});var uwt=s(wW);FJo=r(uwt,"RemBertForSequenceClassification"),uwt.forEach(t),TJo=r(QNe," (RemBERT model)"),QNe.forEach(t),MJo=i(j),_6=n(j,"LI",{});var UNe=s(_6);m2e=n(UNe,"STRONG",{});var bwt=s(m2e);EJo=r(bwt,"roberta"),bwt.forEach(t),CJo=r(UNe," \u2014 "),AW=n(UNe,"A",{href:!0});var vwt=s(AW);wJo=r(vwt,"RobertaForSequenceClassification"),vwt.forEach(t),AJo=r(UNe," (RoBERTa model)"),UNe.forEach(t),LJo=i(j),u6=n(j,"LI",{});var HNe=s(u6);g2e=n(HNe,"STRONG",{});var Fwt=s(g2e);yJo=r(Fwt,"roformer"),Fwt.forEach(t),xJo=r(HNe," \u2014 "),LW=n(HNe,"A",{href:!0});var Twt=s(LW);$Jo=r(Twt,"RoFormerForSequenceClassification"),Twt.forEach(t),kJo=r(HNe," (RoFormer model)"),HNe.forEach(t),SJo=i(j),b6=n(j,"LI",{});var JNe=s(b6);h2e=n(JNe,"STRONG",{});var Mwt=s(h2e);RJo=r(Mwt,"squeezebert"),Mwt.forEach(t),PJo=r(JNe," \u2014 "),yW=n(JNe,"A",{href:!0});var Ewt=s(yW);BJo=r(Ewt,"SqueezeBertForSequenceClassification"),Ewt.forEach(t),IJo=r(JNe," (SqueezeBERT model)"),JNe.forEach(t),NJo=i(j),v6=n(j,"LI",{});var YNe=s(v6);p2e=n(YNe,"STRONG",{});var Cwt=s(p2e);qJo=r(Cwt,"tapas"),Cwt.forEach(t),jJo=r(YNe," \u2014 "),xW=n(YNe,"A",{href:!0});var wwt=s(xW);DJo=r(wwt,"TapasForSequenceClassification"),wwt.forEach(t),GJo=r(YNe," (TAPAS model)"),YNe.forEach(t),OJo=i(j),F6=n(j,"LI",{});var KNe=s(F6);_2e=n(KNe,"STRONG",{});var Awt=s(_2e);VJo=r(Awt,"transfo-xl"),Awt.forEach(t),XJo=r(KNe," \u2014 "),$W=n(KNe,"A",{href:!0});var Lwt=s($W);zJo=r(Lwt,"TransfoXLForSequenceClassification"),Lwt.forEach(t),WJo=r(KNe," (Transformer-XL model)"),KNe.forEach(t),QJo=i(j),T6=n(j,"LI",{});var ZNe=s(T6);u2e=n(ZNe,"STRONG",{});var ywt=s(u2e);UJo=r(ywt,"xlm"),ywt.forEach(t),HJo=r(ZNe," \u2014 "),kW=n(ZNe,"A",{href:!0});var xwt=s(kW);JJo=r(xwt,"XLMForSequenceClassification"),xwt.forEach(t),YJo=r(ZNe," (XLM model)"),ZNe.forEach(t),KJo=i(j),M6=n(j,"LI",{});var eqe=s(M6);b2e=n(eqe,"STRONG",{});var $wt=s(b2e);ZJo=r($wt,"xlm-roberta"),$wt.forEach(t),eYo=r(eqe," \u2014 "),SW=n(eqe,"A",{href:!0});var kwt=s(SW);oYo=r(kwt,"XLMRobertaForSequenceClassification"),kwt.forEach(t),rYo=r(eqe," (XLM-RoBERTa model)"),eqe.forEach(t),tYo=i(j),E6=n(j,"LI",{});var oqe=s(E6);v2e=n(oqe,"STRONG",{});var Swt=s(v2e);aYo=r(Swt,"xlm-roberta-xl"),Swt.forEach(t),nYo=r(oqe," \u2014 "),RW=n(oqe,"A",{href:!0});var Rwt=s(RW);sYo=r(Rwt,"XLMRobertaXLForSequenceClassification"),Rwt.forEach(t),lYo=r(oqe," (XLM-RoBERTa-XL model)"),oqe.forEach(t),iYo=i(j),C6=n(j,"LI",{});var rqe=s(C6);F2e=n(rqe,"STRONG",{});var Pwt=s(F2e);dYo=r(Pwt,"xlnet"),Pwt.forEach(t),cYo=r(rqe," \u2014 "),PW=n(rqe,"A",{href:!0});var Bwt=s(PW);fYo=r(Bwt,"XLNetForSequenceClassification"),Bwt.forEach(t),mYo=r(rqe," (XLNet model)"),rqe.forEach(t),gYo=i(j),w6=n(j,"LI",{});var tqe=s(w6);T2e=n(tqe,"STRONG",{});var Iwt=s(T2e);hYo=r(Iwt,"yoso"),Iwt.forEach(t),pYo=r(tqe," \u2014 "),BW=n(tqe,"A",{href:!0});var Nwt=s(BW);_Yo=r(Nwt,"YosoForSequenceClassification"),Nwt.forEach(t),uYo=r(tqe," (YOSO model)"),tqe.forEach(t),j.forEach(t),bYo=i(ba),A6=n(ba,"P",{});var aqe=s(A6);vYo=r(aqe,"The model is set in evaluation mode by default using "),M2e=n(aqe,"CODE",{});var qwt=s(M2e);FYo=r(qwt,"model.eval()"),qwt.forEach(t),TYo=r(aqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E2e=n(aqe,"CODE",{});var jwt=s(E2e);MYo=r(jwt,"model.train()"),jwt.forEach(t),aqe.forEach(t),EYo=i(ba),T(L6.$$.fragment,ba),ba.forEach(t),vl.forEach(t),fUe=i(f),Fd=n(f,"H2",{class:!0});var TJe=s(Fd);y6=n(TJe,"A",{id:!0,class:!0,href:!0});var Dwt=s(y6);C2e=n(Dwt,"SPAN",{});var Gwt=s(C2e);T(py.$$.fragment,Gwt),Gwt.forEach(t),Dwt.forEach(t),CYo=i(TJe),w2e=n(TJe,"SPAN",{});var Owt=s(w2e);wYo=r(Owt,"AutoModelForMultipleChoice"),Owt.forEach(t),TJe.forEach(t),mUe=i(f),qo=n(f,"DIV",{class:!0});var Fl=s(qo);T(_y.$$.fragment,Fl),AYo=i(Fl),Td=n(Fl,"P",{});var Kae=s(Td);LYo=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IW=n(Kae,"A",{href:!0});var Vwt=s(IW);yYo=r(Vwt,"from_pretrained()"),Vwt.forEach(t),xYo=r(Kae," class method or the "),NW=n(Kae,"A",{href:!0});var Xwt=s(NW);$Yo=r(Xwt,"from_config()"),Xwt.forEach(t),kYo=r(Kae,` class
method.`),Kae.forEach(t),SYo=i(Fl),uy=n(Fl,"P",{});var MJe=s(uy);RYo=r(MJe,"This class cannot be instantiated directly using "),A2e=n(MJe,"CODE",{});var zwt=s(A2e);PYo=r(zwt,"__init__()"),zwt.forEach(t),BYo=r(MJe," (throws an error)."),MJe.forEach(t),IYo=i(Fl),bt=n(Fl,"DIV",{class:!0});var Cw=s(bt);T(by.$$.fragment,Cw),NYo=i(Cw),L2e=n(Cw,"P",{});var Wwt=s(L2e);qYo=r(Wwt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Wwt.forEach(t),jYo=i(Cw),Md=n(Cw,"P",{});var Zae=s(Md);DYo=r(Zae,`Note:
Loading a model from its configuration file does `),y2e=n(Zae,"STRONG",{});var Qwt=s(y2e);GYo=r(Qwt,"not"),Qwt.forEach(t),OYo=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(Zae,"A",{href:!0});var Uwt=s(qW);VYo=r(Uwt,"from_pretrained()"),Uwt.forEach(t),XYo=r(Zae," to load the model weights."),Zae.forEach(t),zYo=i(Cw),T(x6.$$.fragment,Cw),Cw.forEach(t),WYo=i(Fl),to=n(Fl,"DIV",{class:!0});var va=s(to);T(vy.$$.fragment,va),QYo=i(va),x2e=n(va,"P",{});var Hwt=s(x2e);UYo=r(Hwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hwt.forEach(t),HYo=i(va),Ha=n(va,"P",{});var ww=s(Ha);JYo=r(ww,"The model class to instantiate is selected based on the "),$2e=n(ww,"CODE",{});var Jwt=s($2e);YYo=r(Jwt,"model_type"),Jwt.forEach(t),KYo=r(ww,` property of the config object (either
passed as an argument or loaded from `),k2e=n(ww,"CODE",{});var Ywt=s(k2e);ZYo=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),eKo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=n(ww,"CODE",{});var Kwt=s(S2e);oKo=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),rKo=r(ww,":"),ww.forEach(t),tKo=i(va),Z=n(va,"UL",{});var ee=s(Z);$6=n(ee,"LI",{});var nqe=s($6);R2e=n(nqe,"STRONG",{});var Zwt=s(R2e);aKo=r(Zwt,"albert"),Zwt.forEach(t),nKo=r(nqe," \u2014 "),jW=n(nqe,"A",{href:!0});var eAt=s(jW);sKo=r(eAt,"AlbertForMultipleChoice"),eAt.forEach(t),lKo=r(nqe," (ALBERT model)"),nqe.forEach(t),iKo=i(ee),k6=n(ee,"LI",{});var sqe=s(k6);P2e=n(sqe,"STRONG",{});var oAt=s(P2e);dKo=r(oAt,"bert"),oAt.forEach(t),cKo=r(sqe," \u2014 "),DW=n(sqe,"A",{href:!0});var rAt=s(DW);fKo=r(rAt,"BertForMultipleChoice"),rAt.forEach(t),mKo=r(sqe," (BERT model)"),sqe.forEach(t),gKo=i(ee),S6=n(ee,"LI",{});var lqe=s(S6);B2e=n(lqe,"STRONG",{});var tAt=s(B2e);hKo=r(tAt,"big_bird"),tAt.forEach(t),pKo=r(lqe," \u2014 "),GW=n(lqe,"A",{href:!0});var aAt=s(GW);_Ko=r(aAt,"BigBirdForMultipleChoice"),aAt.forEach(t),uKo=r(lqe," (BigBird model)"),lqe.forEach(t),bKo=i(ee),R6=n(ee,"LI",{});var iqe=s(R6);I2e=n(iqe,"STRONG",{});var nAt=s(I2e);vKo=r(nAt,"camembert"),nAt.forEach(t),FKo=r(iqe," \u2014 "),OW=n(iqe,"A",{href:!0});var sAt=s(OW);TKo=r(sAt,"CamembertForMultipleChoice"),sAt.forEach(t),MKo=r(iqe," (CamemBERT model)"),iqe.forEach(t),EKo=i(ee),P6=n(ee,"LI",{});var dqe=s(P6);N2e=n(dqe,"STRONG",{});var lAt=s(N2e);CKo=r(lAt,"canine"),lAt.forEach(t),wKo=r(dqe," \u2014 "),VW=n(dqe,"A",{href:!0});var iAt=s(VW);AKo=r(iAt,"CanineForMultipleChoice"),iAt.forEach(t),LKo=r(dqe," (CANINE model)"),dqe.forEach(t),yKo=i(ee),B6=n(ee,"LI",{});var cqe=s(B6);q2e=n(cqe,"STRONG",{});var dAt=s(q2e);xKo=r(dAt,"convbert"),dAt.forEach(t),$Ko=r(cqe," \u2014 "),XW=n(cqe,"A",{href:!0});var cAt=s(XW);kKo=r(cAt,"ConvBertForMultipleChoice"),cAt.forEach(t),SKo=r(cqe," (ConvBERT model)"),cqe.forEach(t),RKo=i(ee),I6=n(ee,"LI",{});var fqe=s(I6);j2e=n(fqe,"STRONG",{});var fAt=s(j2e);PKo=r(fAt,"data2vec-text"),fAt.forEach(t),BKo=r(fqe," \u2014 "),zW=n(fqe,"A",{href:!0});var mAt=s(zW);IKo=r(mAt,"Data2VecTextForMultipleChoice"),mAt.forEach(t),NKo=r(fqe," (Data2VecText model)"),fqe.forEach(t),qKo=i(ee),N6=n(ee,"LI",{});var mqe=s(N6);D2e=n(mqe,"STRONG",{});var gAt=s(D2e);jKo=r(gAt,"deberta-v2"),gAt.forEach(t),DKo=r(mqe," \u2014 "),WW=n(mqe,"A",{href:!0});var hAt=s(WW);GKo=r(hAt,"DebertaV2ForMultipleChoice"),hAt.forEach(t),OKo=r(mqe," (DeBERTa-v2 model)"),mqe.forEach(t),VKo=i(ee),q6=n(ee,"LI",{});var gqe=s(q6);G2e=n(gqe,"STRONG",{});var pAt=s(G2e);XKo=r(pAt,"distilbert"),pAt.forEach(t),zKo=r(gqe," \u2014 "),QW=n(gqe,"A",{href:!0});var _At=s(QW);WKo=r(_At,"DistilBertForMultipleChoice"),_At.forEach(t),QKo=r(gqe," (DistilBERT model)"),gqe.forEach(t),UKo=i(ee),j6=n(ee,"LI",{});var hqe=s(j6);O2e=n(hqe,"STRONG",{});var uAt=s(O2e);HKo=r(uAt,"electra"),uAt.forEach(t),JKo=r(hqe," \u2014 "),UW=n(hqe,"A",{href:!0});var bAt=s(UW);YKo=r(bAt,"ElectraForMultipleChoice"),bAt.forEach(t),KKo=r(hqe," (ELECTRA model)"),hqe.forEach(t),ZKo=i(ee),D6=n(ee,"LI",{});var pqe=s(D6);V2e=n(pqe,"STRONG",{});var vAt=s(V2e);eZo=r(vAt,"flaubert"),vAt.forEach(t),oZo=r(pqe," \u2014 "),HW=n(pqe,"A",{href:!0});var FAt=s(HW);rZo=r(FAt,"FlaubertForMultipleChoice"),FAt.forEach(t),tZo=r(pqe," (FlauBERT model)"),pqe.forEach(t),aZo=i(ee),G6=n(ee,"LI",{});var _qe=s(G6);X2e=n(_qe,"STRONG",{});var TAt=s(X2e);nZo=r(TAt,"fnet"),TAt.forEach(t),sZo=r(_qe," \u2014 "),JW=n(_qe,"A",{href:!0});var MAt=s(JW);lZo=r(MAt,"FNetForMultipleChoice"),MAt.forEach(t),iZo=r(_qe," (FNet model)"),_qe.forEach(t),dZo=i(ee),O6=n(ee,"LI",{});var uqe=s(O6);z2e=n(uqe,"STRONG",{});var EAt=s(z2e);cZo=r(EAt,"funnel"),EAt.forEach(t),fZo=r(uqe," \u2014 "),YW=n(uqe,"A",{href:!0});var CAt=s(YW);mZo=r(CAt,"FunnelForMultipleChoice"),CAt.forEach(t),gZo=r(uqe," (Funnel Transformer model)"),uqe.forEach(t),hZo=i(ee),V6=n(ee,"LI",{});var bqe=s(V6);W2e=n(bqe,"STRONG",{});var wAt=s(W2e);pZo=r(wAt,"ibert"),wAt.forEach(t),_Zo=r(bqe," \u2014 "),KW=n(bqe,"A",{href:!0});var AAt=s(KW);uZo=r(AAt,"IBertForMultipleChoice"),AAt.forEach(t),bZo=r(bqe," (I-BERT model)"),bqe.forEach(t),vZo=i(ee),X6=n(ee,"LI",{});var vqe=s(X6);Q2e=n(vqe,"STRONG",{});var LAt=s(Q2e);FZo=r(LAt,"longformer"),LAt.forEach(t),TZo=r(vqe," \u2014 "),ZW=n(vqe,"A",{href:!0});var yAt=s(ZW);MZo=r(yAt,"LongformerForMultipleChoice"),yAt.forEach(t),EZo=r(vqe," (Longformer model)"),vqe.forEach(t),CZo=i(ee),z6=n(ee,"LI",{});var Fqe=s(z6);U2e=n(Fqe,"STRONG",{});var xAt=s(U2e);wZo=r(xAt,"luke"),xAt.forEach(t),AZo=r(Fqe," \u2014 "),eQ=n(Fqe,"A",{href:!0});var $At=s(eQ);LZo=r($At,"LukeForMultipleChoice"),$At.forEach(t),yZo=r(Fqe," (LUKE model)"),Fqe.forEach(t),xZo=i(ee),W6=n(ee,"LI",{});var Tqe=s(W6);H2e=n(Tqe,"STRONG",{});var kAt=s(H2e);$Zo=r(kAt,"megatron-bert"),kAt.forEach(t),kZo=r(Tqe," \u2014 "),oQ=n(Tqe,"A",{href:!0});var SAt=s(oQ);SZo=r(SAt,"MegatronBertForMultipleChoice"),SAt.forEach(t),RZo=r(Tqe," (Megatron-BERT model)"),Tqe.forEach(t),PZo=i(ee),Q6=n(ee,"LI",{});var Mqe=s(Q6);J2e=n(Mqe,"STRONG",{});var RAt=s(J2e);BZo=r(RAt,"mobilebert"),RAt.forEach(t),IZo=r(Mqe," \u2014 "),rQ=n(Mqe,"A",{href:!0});var PAt=s(rQ);NZo=r(PAt,"MobileBertForMultipleChoice"),PAt.forEach(t),qZo=r(Mqe," (MobileBERT model)"),Mqe.forEach(t),jZo=i(ee),U6=n(ee,"LI",{});var Eqe=s(U6);Y2e=n(Eqe,"STRONG",{});var BAt=s(Y2e);DZo=r(BAt,"mpnet"),BAt.forEach(t),GZo=r(Eqe," \u2014 "),tQ=n(Eqe,"A",{href:!0});var IAt=s(tQ);OZo=r(IAt,"MPNetForMultipleChoice"),IAt.forEach(t),VZo=r(Eqe," (MPNet model)"),Eqe.forEach(t),XZo=i(ee),H6=n(ee,"LI",{});var Cqe=s(H6);K2e=n(Cqe,"STRONG",{});var NAt=s(K2e);zZo=r(NAt,"nezha"),NAt.forEach(t),WZo=r(Cqe," \u2014 "),aQ=n(Cqe,"A",{href:!0});var qAt=s(aQ);QZo=r(qAt,"NezhaForMultipleChoice"),qAt.forEach(t),UZo=r(Cqe," (Nezha model)"),Cqe.forEach(t),HZo=i(ee),J6=n(ee,"LI",{});var wqe=s(J6);Z2e=n(wqe,"STRONG",{});var jAt=s(Z2e);JZo=r(jAt,"nystromformer"),jAt.forEach(t),YZo=r(wqe," \u2014 "),nQ=n(wqe,"A",{href:!0});var DAt=s(nQ);KZo=r(DAt,"NystromformerForMultipleChoice"),DAt.forEach(t),ZZo=r(wqe," (Nystr\xF6mformer model)"),wqe.forEach(t),eer=i(ee),Y6=n(ee,"LI",{});var Aqe=s(Y6);ebe=n(Aqe,"STRONG",{});var GAt=s(ebe);oer=r(GAt,"qdqbert"),GAt.forEach(t),rer=r(Aqe," \u2014 "),sQ=n(Aqe,"A",{href:!0});var OAt=s(sQ);ter=r(OAt,"QDQBertForMultipleChoice"),OAt.forEach(t),aer=r(Aqe," (QDQBert model)"),Aqe.forEach(t),ner=i(ee),K6=n(ee,"LI",{});var Lqe=s(K6);obe=n(Lqe,"STRONG",{});var VAt=s(obe);ser=r(VAt,"rembert"),VAt.forEach(t),ler=r(Lqe," \u2014 "),lQ=n(Lqe,"A",{href:!0});var XAt=s(lQ);ier=r(XAt,"RemBertForMultipleChoice"),XAt.forEach(t),der=r(Lqe," (RemBERT model)"),Lqe.forEach(t),cer=i(ee),Z6=n(ee,"LI",{});var yqe=s(Z6);rbe=n(yqe,"STRONG",{});var zAt=s(rbe);fer=r(zAt,"roberta"),zAt.forEach(t),mer=r(yqe," \u2014 "),iQ=n(yqe,"A",{href:!0});var WAt=s(iQ);ger=r(WAt,"RobertaForMultipleChoice"),WAt.forEach(t),her=r(yqe," (RoBERTa model)"),yqe.forEach(t),per=i(ee),eF=n(ee,"LI",{});var xqe=s(eF);tbe=n(xqe,"STRONG",{});var QAt=s(tbe);_er=r(QAt,"roformer"),QAt.forEach(t),uer=r(xqe," \u2014 "),dQ=n(xqe,"A",{href:!0});var UAt=s(dQ);ber=r(UAt,"RoFormerForMultipleChoice"),UAt.forEach(t),ver=r(xqe," (RoFormer model)"),xqe.forEach(t),Fer=i(ee),oF=n(ee,"LI",{});var $qe=s(oF);abe=n($qe,"STRONG",{});var HAt=s(abe);Ter=r(HAt,"squeezebert"),HAt.forEach(t),Mer=r($qe," \u2014 "),cQ=n($qe,"A",{href:!0});var JAt=s(cQ);Eer=r(JAt,"SqueezeBertForMultipleChoice"),JAt.forEach(t),Cer=r($qe," (SqueezeBERT model)"),$qe.forEach(t),wer=i(ee),rF=n(ee,"LI",{});var kqe=s(rF);nbe=n(kqe,"STRONG",{});var YAt=s(nbe);Aer=r(YAt,"xlm"),YAt.forEach(t),Ler=r(kqe," \u2014 "),fQ=n(kqe,"A",{href:!0});var KAt=s(fQ);yer=r(KAt,"XLMForMultipleChoice"),KAt.forEach(t),xer=r(kqe," (XLM model)"),kqe.forEach(t),$er=i(ee),tF=n(ee,"LI",{});var Sqe=s(tF);sbe=n(Sqe,"STRONG",{});var ZAt=s(sbe);ker=r(ZAt,"xlm-roberta"),ZAt.forEach(t),Ser=r(Sqe," \u2014 "),mQ=n(Sqe,"A",{href:!0});var eLt=s(mQ);Rer=r(eLt,"XLMRobertaForMultipleChoice"),eLt.forEach(t),Per=r(Sqe," (XLM-RoBERTa model)"),Sqe.forEach(t),Ber=i(ee),aF=n(ee,"LI",{});var Rqe=s(aF);lbe=n(Rqe,"STRONG",{});var oLt=s(lbe);Ier=r(oLt,"xlm-roberta-xl"),oLt.forEach(t),Ner=r(Rqe," \u2014 "),gQ=n(Rqe,"A",{href:!0});var rLt=s(gQ);qer=r(rLt,"XLMRobertaXLForMultipleChoice"),rLt.forEach(t),jer=r(Rqe," (XLM-RoBERTa-XL model)"),Rqe.forEach(t),Der=i(ee),nF=n(ee,"LI",{});var Pqe=s(nF);ibe=n(Pqe,"STRONG",{});var tLt=s(ibe);Ger=r(tLt,"xlnet"),tLt.forEach(t),Oer=r(Pqe," \u2014 "),hQ=n(Pqe,"A",{href:!0});var aLt=s(hQ);Ver=r(aLt,"XLNetForMultipleChoice"),aLt.forEach(t),Xer=r(Pqe," (XLNet model)"),Pqe.forEach(t),zer=i(ee),sF=n(ee,"LI",{});var Bqe=s(sF);dbe=n(Bqe,"STRONG",{});var nLt=s(dbe);Wer=r(nLt,"yoso"),nLt.forEach(t),Qer=r(Bqe," \u2014 "),pQ=n(Bqe,"A",{href:!0});var sLt=s(pQ);Uer=r(sLt,"YosoForMultipleChoice"),sLt.forEach(t),Her=r(Bqe," (YOSO model)"),Bqe.forEach(t),ee.forEach(t),Jer=i(va),lF=n(va,"P",{});var Iqe=s(lF);Yer=r(Iqe,"The model is set in evaluation mode by default using "),cbe=n(Iqe,"CODE",{});var lLt=s(cbe);Ker=r(lLt,"model.eval()"),lLt.forEach(t),Zer=r(Iqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fbe=n(Iqe,"CODE",{});var iLt=s(fbe);eor=r(iLt,"model.train()"),iLt.forEach(t),Iqe.forEach(t),oor=i(va),T(iF.$$.fragment,va),va.forEach(t),Fl.forEach(t),gUe=i(f),Ed=n(f,"H2",{class:!0});var EJe=s(Ed);dF=n(EJe,"A",{id:!0,class:!0,href:!0});var dLt=s(dF);mbe=n(dLt,"SPAN",{});var cLt=s(mbe);T(Fy.$$.fragment,cLt),cLt.forEach(t),dLt.forEach(t),ror=i(EJe),gbe=n(EJe,"SPAN",{});var fLt=s(gbe);tor=r(fLt,"AutoModelForNextSentencePrediction"),fLt.forEach(t),EJe.forEach(t),hUe=i(f),jo=n(f,"DIV",{class:!0});var Tl=s(jo);T(Ty.$$.fragment,Tl),aor=i(Tl),Cd=n(Tl,"P",{});var ene=s(Cd);nor=r(ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_Q=n(ene,"A",{href:!0});var mLt=s(_Q);sor=r(mLt,"from_pretrained()"),mLt.forEach(t),lor=r(ene," class method or the "),uQ=n(ene,"A",{href:!0});var gLt=s(uQ);ior=r(gLt,"from_config()"),gLt.forEach(t),dor=r(ene,` class
method.`),ene.forEach(t),cor=i(Tl),My=n(Tl,"P",{});var CJe=s(My);mor=r(CJe,"This class cannot be instantiated directly using "),hbe=n(CJe,"CODE",{});var hLt=s(hbe);gor=r(hLt,"__init__()"),hLt.forEach(t),hor=r(CJe," (throws an error)."),CJe.forEach(t),por=i(Tl),vt=n(Tl,"DIV",{class:!0});var Aw=s(vt);T(Ey.$$.fragment,Aw),_or=i(Aw),pbe=n(Aw,"P",{});var pLt=s(pbe);uor=r(pLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pLt.forEach(t),bor=i(Aw),wd=n(Aw,"P",{});var one=s(wd);vor=r(one,`Note:
Loading a model from its configuration file does `),_be=n(one,"STRONG",{});var _Lt=s(_be);For=r(_Lt,"not"),_Lt.forEach(t),Tor=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(one,"A",{href:!0});var uLt=s(bQ);Mor=r(uLt,"from_pretrained()"),uLt.forEach(t),Eor=r(one," to load the model weights."),one.forEach(t),Cor=i(Aw),T(cF.$$.fragment,Aw),Aw.forEach(t),wor=i(Tl),ao=n(Tl,"DIV",{class:!0});var Fa=s(ao);T(Cy.$$.fragment,Fa),Aor=i(Fa),ube=n(Fa,"P",{});var bLt=s(ube);Lor=r(bLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bLt.forEach(t),yor=i(Fa),Ja=n(Fa,"P",{});var Lw=s(Ja);xor=r(Lw,"The model class to instantiate is selected based on the "),bbe=n(Lw,"CODE",{});var vLt=s(bbe);$or=r(vLt,"model_type"),vLt.forEach(t),kor=r(Lw,` property of the config object (either
passed as an argument or loaded from `),vbe=n(Lw,"CODE",{});var FLt=s(vbe);Sor=r(FLt,"pretrained_model_name_or_path"),FLt.forEach(t),Ror=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(Lw,"CODE",{});var TLt=s(Fbe);Por=r(TLt,"pretrained_model_name_or_path"),TLt.forEach(t),Bor=r(Lw,":"),Lw.forEach(t),Ior=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);fF=n(Ta,"LI",{});var Nqe=s(fF);Tbe=n(Nqe,"STRONG",{});var MLt=s(Tbe);Nor=r(MLt,"bert"),MLt.forEach(t),qor=r(Nqe," \u2014 "),vQ=n(Nqe,"A",{href:!0});var ELt=s(vQ);jor=r(ELt,"BertForNextSentencePrediction"),ELt.forEach(t),Dor=r(Nqe," (BERT model)"),Nqe.forEach(t),Gor=i(Ta),mF=n(Ta,"LI",{});var qqe=s(mF);Mbe=n(qqe,"STRONG",{});var CLt=s(Mbe);Oor=r(CLt,"fnet"),CLt.forEach(t),Vor=r(qqe," \u2014 "),FQ=n(qqe,"A",{href:!0});var wLt=s(FQ);Xor=r(wLt,"FNetForNextSentencePrediction"),wLt.forEach(t),zor=r(qqe," (FNet model)"),qqe.forEach(t),Wor=i(Ta),gF=n(Ta,"LI",{});var jqe=s(gF);Ebe=n(jqe,"STRONG",{});var ALt=s(Ebe);Qor=r(ALt,"megatron-bert"),ALt.forEach(t),Uor=r(jqe," \u2014 "),TQ=n(jqe,"A",{href:!0});var LLt=s(TQ);Hor=r(LLt,"MegatronBertForNextSentencePrediction"),LLt.forEach(t),Jor=r(jqe," (Megatron-BERT model)"),jqe.forEach(t),Yor=i(Ta),hF=n(Ta,"LI",{});var Dqe=s(hF);Cbe=n(Dqe,"STRONG",{});var yLt=s(Cbe);Kor=r(yLt,"mobilebert"),yLt.forEach(t),Zor=r(Dqe," \u2014 "),MQ=n(Dqe,"A",{href:!0});var xLt=s(MQ);err=r(xLt,"MobileBertForNextSentencePrediction"),xLt.forEach(t),orr=r(Dqe," (MobileBERT model)"),Dqe.forEach(t),rrr=i(Ta),pF=n(Ta,"LI",{});var Gqe=s(pF);wbe=n(Gqe,"STRONG",{});var $Lt=s(wbe);trr=r($Lt,"nezha"),$Lt.forEach(t),arr=r(Gqe," \u2014 "),EQ=n(Gqe,"A",{href:!0});var kLt=s(EQ);nrr=r(kLt,"NezhaForNextSentencePrediction"),kLt.forEach(t),srr=r(Gqe," (Nezha model)"),Gqe.forEach(t),lrr=i(Ta),_F=n(Ta,"LI",{});var Oqe=s(_F);Abe=n(Oqe,"STRONG",{});var SLt=s(Abe);irr=r(SLt,"qdqbert"),SLt.forEach(t),drr=r(Oqe," \u2014 "),CQ=n(Oqe,"A",{href:!0});var RLt=s(CQ);crr=r(RLt,"QDQBertForNextSentencePrediction"),RLt.forEach(t),frr=r(Oqe," (QDQBert model)"),Oqe.forEach(t),Ta.forEach(t),mrr=i(Fa),uF=n(Fa,"P",{});var Vqe=s(uF);grr=r(Vqe,"The model is set in evaluation mode by default using "),Lbe=n(Vqe,"CODE",{});var PLt=s(Lbe);hrr=r(PLt,"model.eval()"),PLt.forEach(t),prr=r(Vqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=n(Vqe,"CODE",{});var BLt=s(ybe);_rr=r(BLt,"model.train()"),BLt.forEach(t),Vqe.forEach(t),urr=i(Fa),T(bF.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),pUe=i(f),Ad=n(f,"H2",{class:!0});var wJe=s(Ad);vF=n(wJe,"A",{id:!0,class:!0,href:!0});var ILt=s(vF);xbe=n(ILt,"SPAN",{});var NLt=s(xbe);T(wy.$$.fragment,NLt),NLt.forEach(t),ILt.forEach(t),brr=i(wJe),$be=n(wJe,"SPAN",{});var qLt=s($be);vrr=r(qLt,"AutoModelForTokenClassification"),qLt.forEach(t),wJe.forEach(t),_Ue=i(f),Go=n(f,"DIV",{class:!0});var Ml=s(Go);T(Ay.$$.fragment,Ml),Frr=i(Ml),Ld=n(Ml,"P",{});var rne=s(Ld);Trr=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wQ=n(rne,"A",{href:!0});var jLt=s(wQ);Mrr=r(jLt,"from_pretrained()"),jLt.forEach(t),Err=r(rne," class method or the "),AQ=n(rne,"A",{href:!0});var DLt=s(AQ);Crr=r(DLt,"from_config()"),DLt.forEach(t),wrr=r(rne,` class
method.`),rne.forEach(t),Arr=i(Ml),Ly=n(Ml,"P",{});var AJe=s(Ly);Lrr=r(AJe,"This class cannot be instantiated directly using "),kbe=n(AJe,"CODE",{});var GLt=s(kbe);yrr=r(GLt,"__init__()"),GLt.forEach(t),xrr=r(AJe," (throws an error)."),AJe.forEach(t),$rr=i(Ml),Ft=n(Ml,"DIV",{class:!0});var yw=s(Ft);T(yy.$$.fragment,yw),krr=i(yw),Sbe=n(yw,"P",{});var OLt=s(Sbe);Srr=r(OLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OLt.forEach(t),Rrr=i(yw),yd=n(yw,"P",{});var tne=s(yd);Prr=r(tne,`Note:
Loading a model from its configuration file does `),Rbe=n(tne,"STRONG",{});var VLt=s(Rbe);Brr=r(VLt,"not"),VLt.forEach(t),Irr=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=n(tne,"A",{href:!0});var XLt=s(LQ);Nrr=r(XLt,"from_pretrained()"),XLt.forEach(t),qrr=r(tne," to load the model weights."),tne.forEach(t),jrr=i(yw),T(FF.$$.fragment,yw),yw.forEach(t),Drr=i(Ml),no=n(Ml,"DIV",{class:!0});var Ma=s(no);T(xy.$$.fragment,Ma),Grr=i(Ma),Pbe=n(Ma,"P",{});var zLt=s(Pbe);Orr=r(zLt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zLt.forEach(t),Vrr=i(Ma),Ya=n(Ma,"P",{});var xw=s(Ya);Xrr=r(xw,"The model class to instantiate is selected based on the "),Bbe=n(xw,"CODE",{});var WLt=s(Bbe);zrr=r(WLt,"model_type"),WLt.forEach(t),Wrr=r(xw,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(xw,"CODE",{});var QLt=s(Ibe);Qrr=r(QLt,"pretrained_model_name_or_path"),QLt.forEach(t),Urr=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(xw,"CODE",{});var ULt=s(Nbe);Hrr=r(ULt,"pretrained_model_name_or_path"),ULt.forEach(t),Jrr=r(xw,":"),xw.forEach(t),Yrr=i(Ma),H=n(Ma,"UL",{});var K=s(H);TF=n(K,"LI",{});var Xqe=s(TF);qbe=n(Xqe,"STRONG",{});var HLt=s(qbe);Krr=r(HLt,"albert"),HLt.forEach(t),Zrr=r(Xqe," \u2014 "),yQ=n(Xqe,"A",{href:!0});var JLt=s(yQ);etr=r(JLt,"AlbertForTokenClassification"),JLt.forEach(t),otr=r(Xqe," (ALBERT model)"),Xqe.forEach(t),rtr=i(K),MF=n(K,"LI",{});var zqe=s(MF);jbe=n(zqe,"STRONG",{});var YLt=s(jbe);ttr=r(YLt,"bert"),YLt.forEach(t),atr=r(zqe," \u2014 "),xQ=n(zqe,"A",{href:!0});var KLt=s(xQ);ntr=r(KLt,"BertForTokenClassification"),KLt.forEach(t),str=r(zqe," (BERT model)"),zqe.forEach(t),ltr=i(K),EF=n(K,"LI",{});var Wqe=s(EF);Dbe=n(Wqe,"STRONG",{});var ZLt=s(Dbe);itr=r(ZLt,"big_bird"),ZLt.forEach(t),dtr=r(Wqe," \u2014 "),$Q=n(Wqe,"A",{href:!0});var eyt=s($Q);ctr=r(eyt,"BigBirdForTokenClassification"),eyt.forEach(t),ftr=r(Wqe," (BigBird model)"),Wqe.forEach(t),mtr=i(K),CF=n(K,"LI",{});var Qqe=s(CF);Gbe=n(Qqe,"STRONG",{});var oyt=s(Gbe);gtr=r(oyt,"bloom"),oyt.forEach(t),htr=r(Qqe," \u2014 "),kQ=n(Qqe,"A",{href:!0});var ryt=s(kQ);ptr=r(ryt,"BloomForTokenClassification"),ryt.forEach(t),_tr=r(Qqe," (BLOOM model)"),Qqe.forEach(t),utr=i(K),wF=n(K,"LI",{});var Uqe=s(wF);Obe=n(Uqe,"STRONG",{});var tyt=s(Obe);btr=r(tyt,"camembert"),tyt.forEach(t),vtr=r(Uqe," \u2014 "),SQ=n(Uqe,"A",{href:!0});var ayt=s(SQ);Ftr=r(ayt,"CamembertForTokenClassification"),ayt.forEach(t),Ttr=r(Uqe," (CamemBERT model)"),Uqe.forEach(t),Mtr=i(K),AF=n(K,"LI",{});var Hqe=s(AF);Vbe=n(Hqe,"STRONG",{});var nyt=s(Vbe);Etr=r(nyt,"canine"),nyt.forEach(t),Ctr=r(Hqe," \u2014 "),RQ=n(Hqe,"A",{href:!0});var syt=s(RQ);wtr=r(syt,"CanineForTokenClassification"),syt.forEach(t),Atr=r(Hqe," (CANINE model)"),Hqe.forEach(t),Ltr=i(K),LF=n(K,"LI",{});var Jqe=s(LF);Xbe=n(Jqe,"STRONG",{});var lyt=s(Xbe);ytr=r(lyt,"convbert"),lyt.forEach(t),xtr=r(Jqe," \u2014 "),PQ=n(Jqe,"A",{href:!0});var iyt=s(PQ);$tr=r(iyt,"ConvBertForTokenClassification"),iyt.forEach(t),ktr=r(Jqe," (ConvBERT model)"),Jqe.forEach(t),Str=i(K),yF=n(K,"LI",{});var Yqe=s(yF);zbe=n(Yqe,"STRONG",{});var dyt=s(zbe);Rtr=r(dyt,"data2vec-text"),dyt.forEach(t),Ptr=r(Yqe," \u2014 "),BQ=n(Yqe,"A",{href:!0});var cyt=s(BQ);Btr=r(cyt,"Data2VecTextForTokenClassification"),cyt.forEach(t),Itr=r(Yqe," (Data2VecText model)"),Yqe.forEach(t),Ntr=i(K),xF=n(K,"LI",{});var Kqe=s(xF);Wbe=n(Kqe,"STRONG",{});var fyt=s(Wbe);qtr=r(fyt,"deberta"),fyt.forEach(t),jtr=r(Kqe," \u2014 "),IQ=n(Kqe,"A",{href:!0});var myt=s(IQ);Dtr=r(myt,"DebertaForTokenClassification"),myt.forEach(t),Gtr=r(Kqe," (DeBERTa model)"),Kqe.forEach(t),Otr=i(K),$F=n(K,"LI",{});var Zqe=s($F);Qbe=n(Zqe,"STRONG",{});var gyt=s(Qbe);Vtr=r(gyt,"deberta-v2"),gyt.forEach(t),Xtr=r(Zqe," \u2014 "),NQ=n(Zqe,"A",{href:!0});var hyt=s(NQ);ztr=r(hyt,"DebertaV2ForTokenClassification"),hyt.forEach(t),Wtr=r(Zqe," (DeBERTa-v2 model)"),Zqe.forEach(t),Qtr=i(K),kF=n(K,"LI",{});var eje=s(kF);Ube=n(eje,"STRONG",{});var pyt=s(Ube);Utr=r(pyt,"distilbert"),pyt.forEach(t),Htr=r(eje," \u2014 "),qQ=n(eje,"A",{href:!0});var _yt=s(qQ);Jtr=r(_yt,"DistilBertForTokenClassification"),_yt.forEach(t),Ytr=r(eje," (DistilBERT model)"),eje.forEach(t),Ktr=i(K),SF=n(K,"LI",{});var oje=s(SF);Hbe=n(oje,"STRONG",{});var uyt=s(Hbe);Ztr=r(uyt,"electra"),uyt.forEach(t),ear=r(oje," \u2014 "),jQ=n(oje,"A",{href:!0});var byt=s(jQ);oar=r(byt,"ElectraForTokenClassification"),byt.forEach(t),rar=r(oje," (ELECTRA model)"),oje.forEach(t),tar=i(K),RF=n(K,"LI",{});var rje=s(RF);Jbe=n(rje,"STRONG",{});var vyt=s(Jbe);aar=r(vyt,"flaubert"),vyt.forEach(t),nar=r(rje," \u2014 "),DQ=n(rje,"A",{href:!0});var Fyt=s(DQ);sar=r(Fyt,"FlaubertForTokenClassification"),Fyt.forEach(t),lar=r(rje," (FlauBERT model)"),rje.forEach(t),iar=i(K),PF=n(K,"LI",{});var tje=s(PF);Ybe=n(tje,"STRONG",{});var Tyt=s(Ybe);dar=r(Tyt,"fnet"),Tyt.forEach(t),car=r(tje," \u2014 "),GQ=n(tje,"A",{href:!0});var Myt=s(GQ);far=r(Myt,"FNetForTokenClassification"),Myt.forEach(t),mar=r(tje," (FNet model)"),tje.forEach(t),gar=i(K),BF=n(K,"LI",{});var aje=s(BF);Kbe=n(aje,"STRONG",{});var Eyt=s(Kbe);har=r(Eyt,"funnel"),Eyt.forEach(t),par=r(aje," \u2014 "),OQ=n(aje,"A",{href:!0});var Cyt=s(OQ);_ar=r(Cyt,"FunnelForTokenClassification"),Cyt.forEach(t),uar=r(aje," (Funnel Transformer model)"),aje.forEach(t),bar=i(K),IF=n(K,"LI",{});var nje=s(IF);Zbe=n(nje,"STRONG",{});var wyt=s(Zbe);Far=r(wyt,"gpt2"),wyt.forEach(t),Tar=r(nje," \u2014 "),VQ=n(nje,"A",{href:!0});var Ayt=s(VQ);Mar=r(Ayt,"GPT2ForTokenClassification"),Ayt.forEach(t),Ear=r(nje," (OpenAI GPT-2 model)"),nje.forEach(t),Car=i(K),NF=n(K,"LI",{});var sje=s(NF);eve=n(sje,"STRONG",{});var Lyt=s(eve);war=r(Lyt,"ibert"),Lyt.forEach(t),Aar=r(sje," \u2014 "),XQ=n(sje,"A",{href:!0});var yyt=s(XQ);Lar=r(yyt,"IBertForTokenClassification"),yyt.forEach(t),yar=r(sje," (I-BERT model)"),sje.forEach(t),xar=i(K),qF=n(K,"LI",{});var lje=s(qF);ove=n(lje,"STRONG",{});var xyt=s(ove);$ar=r(xyt,"layoutlm"),xyt.forEach(t),kar=r(lje," \u2014 "),zQ=n(lje,"A",{href:!0});var $yt=s(zQ);Sar=r($yt,"LayoutLMForTokenClassification"),$yt.forEach(t),Rar=r(lje," (LayoutLM model)"),lje.forEach(t),Par=i(K),jF=n(K,"LI",{});var ije=s(jF);rve=n(ije,"STRONG",{});var kyt=s(rve);Bar=r(kyt,"layoutlmv2"),kyt.forEach(t),Iar=r(ije," \u2014 "),WQ=n(ije,"A",{href:!0});var Syt=s(WQ);Nar=r(Syt,"LayoutLMv2ForTokenClassification"),Syt.forEach(t),qar=r(ije," (LayoutLMv2 model)"),ije.forEach(t),jar=i(K),DF=n(K,"LI",{});var dje=s(DF);tve=n(dje,"STRONG",{});var Ryt=s(tve);Dar=r(Ryt,"layoutlmv3"),Ryt.forEach(t),Gar=r(dje," \u2014 "),QQ=n(dje,"A",{href:!0});var Pyt=s(QQ);Oar=r(Pyt,"LayoutLMv3ForTokenClassification"),Pyt.forEach(t),Var=r(dje," (LayoutLMv3 model)"),dje.forEach(t),Xar=i(K),GF=n(K,"LI",{});var cje=s(GF);ave=n(cje,"STRONG",{});var Byt=s(ave);zar=r(Byt,"longformer"),Byt.forEach(t),War=r(cje," \u2014 "),UQ=n(cje,"A",{href:!0});var Iyt=s(UQ);Qar=r(Iyt,"LongformerForTokenClassification"),Iyt.forEach(t),Uar=r(cje," (Longformer model)"),cje.forEach(t),Har=i(K),OF=n(K,"LI",{});var fje=s(OF);nve=n(fje,"STRONG",{});var Nyt=s(nve);Jar=r(Nyt,"luke"),Nyt.forEach(t),Yar=r(fje," \u2014 "),HQ=n(fje,"A",{href:!0});var qyt=s(HQ);Kar=r(qyt,"LukeForTokenClassification"),qyt.forEach(t),Zar=r(fje," (LUKE model)"),fje.forEach(t),enr=i(K),VF=n(K,"LI",{});var mje=s(VF);sve=n(mje,"STRONG",{});var jyt=s(sve);onr=r(jyt,"megatron-bert"),jyt.forEach(t),rnr=r(mje," \u2014 "),JQ=n(mje,"A",{href:!0});var Dyt=s(JQ);tnr=r(Dyt,"MegatronBertForTokenClassification"),Dyt.forEach(t),anr=r(mje," (Megatron-BERT model)"),mje.forEach(t),nnr=i(K),XF=n(K,"LI",{});var gje=s(XF);lve=n(gje,"STRONG",{});var Gyt=s(lve);snr=r(Gyt,"mobilebert"),Gyt.forEach(t),lnr=r(gje," \u2014 "),YQ=n(gje,"A",{href:!0});var Oyt=s(YQ);inr=r(Oyt,"MobileBertForTokenClassification"),Oyt.forEach(t),dnr=r(gje," (MobileBERT model)"),gje.forEach(t),cnr=i(K),zF=n(K,"LI",{});var hje=s(zF);ive=n(hje,"STRONG",{});var Vyt=s(ive);fnr=r(Vyt,"mpnet"),Vyt.forEach(t),mnr=r(hje," \u2014 "),KQ=n(hje,"A",{href:!0});var Xyt=s(KQ);gnr=r(Xyt,"MPNetForTokenClassification"),Xyt.forEach(t),hnr=r(hje," (MPNet model)"),hje.forEach(t),pnr=i(K),WF=n(K,"LI",{});var pje=s(WF);dve=n(pje,"STRONG",{});var zyt=s(dve);_nr=r(zyt,"nezha"),zyt.forEach(t),unr=r(pje," \u2014 "),ZQ=n(pje,"A",{href:!0});var Wyt=s(ZQ);bnr=r(Wyt,"NezhaForTokenClassification"),Wyt.forEach(t),vnr=r(pje," (Nezha model)"),pje.forEach(t),Fnr=i(K),QF=n(K,"LI",{});var _je=s(QF);cve=n(_je,"STRONG",{});var Qyt=s(cve);Tnr=r(Qyt,"nystromformer"),Qyt.forEach(t),Mnr=r(_je," \u2014 "),eU=n(_je,"A",{href:!0});var Uyt=s(eU);Enr=r(Uyt,"NystromformerForTokenClassification"),Uyt.forEach(t),Cnr=r(_je," (Nystr\xF6mformer model)"),_je.forEach(t),wnr=i(K),UF=n(K,"LI",{});var uje=s(UF);fve=n(uje,"STRONG",{});var Hyt=s(fve);Anr=r(Hyt,"qdqbert"),Hyt.forEach(t),Lnr=r(uje," \u2014 "),oU=n(uje,"A",{href:!0});var Jyt=s(oU);ynr=r(Jyt,"QDQBertForTokenClassification"),Jyt.forEach(t),xnr=r(uje," (QDQBert model)"),uje.forEach(t),$nr=i(K),HF=n(K,"LI",{});var bje=s(HF);mve=n(bje,"STRONG",{});var Yyt=s(mve);knr=r(Yyt,"rembert"),Yyt.forEach(t),Snr=r(bje," \u2014 "),rU=n(bje,"A",{href:!0});var Kyt=s(rU);Rnr=r(Kyt,"RemBertForTokenClassification"),Kyt.forEach(t),Pnr=r(bje," (RemBERT model)"),bje.forEach(t),Bnr=i(K),JF=n(K,"LI",{});var vje=s(JF);gve=n(vje,"STRONG",{});var Zyt=s(gve);Inr=r(Zyt,"roberta"),Zyt.forEach(t),Nnr=r(vje," \u2014 "),tU=n(vje,"A",{href:!0});var ext=s(tU);qnr=r(ext,"RobertaForTokenClassification"),ext.forEach(t),jnr=r(vje," (RoBERTa model)"),vje.forEach(t),Dnr=i(K),YF=n(K,"LI",{});var Fje=s(YF);hve=n(Fje,"STRONG",{});var oxt=s(hve);Gnr=r(oxt,"roformer"),oxt.forEach(t),Onr=r(Fje," \u2014 "),aU=n(Fje,"A",{href:!0});var rxt=s(aU);Vnr=r(rxt,"RoFormerForTokenClassification"),rxt.forEach(t),Xnr=r(Fje," (RoFormer model)"),Fje.forEach(t),znr=i(K),KF=n(K,"LI",{});var Tje=s(KF);pve=n(Tje,"STRONG",{});var txt=s(pve);Wnr=r(txt,"squeezebert"),txt.forEach(t),Qnr=r(Tje," \u2014 "),nU=n(Tje,"A",{href:!0});var axt=s(nU);Unr=r(axt,"SqueezeBertForTokenClassification"),axt.forEach(t),Hnr=r(Tje," (SqueezeBERT model)"),Tje.forEach(t),Jnr=i(K),ZF=n(K,"LI",{});var Mje=s(ZF);_ve=n(Mje,"STRONG",{});var nxt=s(_ve);Ynr=r(nxt,"xlm"),nxt.forEach(t),Knr=r(Mje," \u2014 "),sU=n(Mje,"A",{href:!0});var sxt=s(sU);Znr=r(sxt,"XLMForTokenClassification"),sxt.forEach(t),esr=r(Mje," (XLM model)"),Mje.forEach(t),osr=i(K),eT=n(K,"LI",{});var Eje=s(eT);uve=n(Eje,"STRONG",{});var lxt=s(uve);rsr=r(lxt,"xlm-roberta"),lxt.forEach(t),tsr=r(Eje," \u2014 "),lU=n(Eje,"A",{href:!0});var ixt=s(lU);asr=r(ixt,"XLMRobertaForTokenClassification"),ixt.forEach(t),nsr=r(Eje," (XLM-RoBERTa model)"),Eje.forEach(t),ssr=i(K),oT=n(K,"LI",{});var Cje=s(oT);bve=n(Cje,"STRONG",{});var dxt=s(bve);lsr=r(dxt,"xlm-roberta-xl"),dxt.forEach(t),isr=r(Cje," \u2014 "),iU=n(Cje,"A",{href:!0});var cxt=s(iU);dsr=r(cxt,"XLMRobertaXLForTokenClassification"),cxt.forEach(t),csr=r(Cje," (XLM-RoBERTa-XL model)"),Cje.forEach(t),fsr=i(K),rT=n(K,"LI",{});var wje=s(rT);vve=n(wje,"STRONG",{});var fxt=s(vve);msr=r(fxt,"xlnet"),fxt.forEach(t),gsr=r(wje," \u2014 "),dU=n(wje,"A",{href:!0});var mxt=s(dU);hsr=r(mxt,"XLNetForTokenClassification"),mxt.forEach(t),psr=r(wje," (XLNet model)"),wje.forEach(t),_sr=i(K),tT=n(K,"LI",{});var Aje=s(tT);Fve=n(Aje,"STRONG",{});var gxt=s(Fve);usr=r(gxt,"yoso"),gxt.forEach(t),bsr=r(Aje," \u2014 "),cU=n(Aje,"A",{href:!0});var hxt=s(cU);vsr=r(hxt,"YosoForTokenClassification"),hxt.forEach(t),Fsr=r(Aje," (YOSO model)"),Aje.forEach(t),K.forEach(t),Tsr=i(Ma),aT=n(Ma,"P",{});var Lje=s(aT);Msr=r(Lje,"The model is set in evaluation mode by default using "),Tve=n(Lje,"CODE",{});var pxt=s(Tve);Esr=r(pxt,"model.eval()"),pxt.forEach(t),Csr=r(Lje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mve=n(Lje,"CODE",{});var _xt=s(Mve);wsr=r(_xt,"model.train()"),_xt.forEach(t),Lje.forEach(t),Asr=i(Ma),T(nT.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),uUe=i(f),xd=n(f,"H2",{class:!0});var LJe=s(xd);sT=n(LJe,"A",{id:!0,class:!0,href:!0});var uxt=s(sT);Eve=n(uxt,"SPAN",{});var bxt=s(Eve);T($y.$$.fragment,bxt),bxt.forEach(t),uxt.forEach(t),Lsr=i(LJe),Cve=n(LJe,"SPAN",{});var vxt=s(Cve);ysr=r(vxt,"AutoModelForQuestionAnswering"),vxt.forEach(t),LJe.forEach(t),bUe=i(f),Oo=n(f,"DIV",{class:!0});var El=s(Oo);T(ky.$$.fragment,El),xsr=i(El),$d=n(El,"P",{});var ane=s($d);$sr=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fU=n(ane,"A",{href:!0});var Fxt=s(fU);ksr=r(Fxt,"from_pretrained()"),Fxt.forEach(t),Ssr=r(ane," class method or the "),mU=n(ane,"A",{href:!0});var Txt=s(mU);Rsr=r(Txt,"from_config()"),Txt.forEach(t),Psr=r(ane,` class
method.`),ane.forEach(t),Bsr=i(El),Sy=n(El,"P",{});var yJe=s(Sy);Isr=r(yJe,"This class cannot be instantiated directly using "),wve=n(yJe,"CODE",{});var Mxt=s(wve);Nsr=r(Mxt,"__init__()"),Mxt.forEach(t),qsr=r(yJe," (throws an error)."),yJe.forEach(t),jsr=i(El),Tt=n(El,"DIV",{class:!0});var $w=s(Tt);T(Ry.$$.fragment,$w),Dsr=i($w),Ave=n($w,"P",{});var Ext=s(Ave);Gsr=r(Ext,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ext.forEach(t),Osr=i($w),kd=n($w,"P",{});var nne=s(kd);Vsr=r(nne,`Note:
Loading a model from its configuration file does `),Lve=n(nne,"STRONG",{});var Cxt=s(Lve);Xsr=r(Cxt,"not"),Cxt.forEach(t),zsr=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(nne,"A",{href:!0});var wxt=s(gU);Wsr=r(wxt,"from_pretrained()"),wxt.forEach(t),Qsr=r(nne," to load the model weights."),nne.forEach(t),Usr=i($w),T(lT.$$.fragment,$w),$w.forEach(t),Hsr=i(El),so=n(El,"DIV",{class:!0});var Ea=s(so);T(Py.$$.fragment,Ea),Jsr=i(Ea),yve=n(Ea,"P",{});var Axt=s(yve);Ysr=r(Axt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Axt.forEach(t),Ksr=i(Ea),Ka=n(Ea,"P",{});var kw=s(Ka);Zsr=r(kw,"The model class to instantiate is selected based on the "),xve=n(kw,"CODE",{});var Lxt=s(xve);elr=r(Lxt,"model_type"),Lxt.forEach(t),olr=r(kw,` property of the config object (either
passed as an argument or loaded from `),$ve=n(kw,"CODE",{});var yxt=s($ve);rlr=r(yxt,"pretrained_model_name_or_path"),yxt.forEach(t),tlr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n(kw,"CODE",{});var xxt=s(kve);alr=r(xxt,"pretrained_model_name_or_path"),xxt.forEach(t),nlr=r(kw,":"),kw.forEach(t),slr=i(Ea),V=n(Ea,"UL",{});var X=s(V);iT=n(X,"LI",{});var yje=s(iT);Sve=n(yje,"STRONG",{});var $xt=s(Sve);llr=r($xt,"albert"),$xt.forEach(t),ilr=r(yje," \u2014 "),hU=n(yje,"A",{href:!0});var kxt=s(hU);dlr=r(kxt,"AlbertForQuestionAnswering"),kxt.forEach(t),clr=r(yje," (ALBERT model)"),yje.forEach(t),flr=i(X),dT=n(X,"LI",{});var xje=s(dT);Rve=n(xje,"STRONG",{});var Sxt=s(Rve);mlr=r(Sxt,"bart"),Sxt.forEach(t),glr=r(xje," \u2014 "),pU=n(xje,"A",{href:!0});var Rxt=s(pU);hlr=r(Rxt,"BartForQuestionAnswering"),Rxt.forEach(t),plr=r(xje," (BART model)"),xje.forEach(t),_lr=i(X),cT=n(X,"LI",{});var $je=s(cT);Pve=n($je,"STRONG",{});var Pxt=s(Pve);ulr=r(Pxt,"bert"),Pxt.forEach(t),blr=r($je," \u2014 "),_U=n($je,"A",{href:!0});var Bxt=s(_U);vlr=r(Bxt,"BertForQuestionAnswering"),Bxt.forEach(t),Flr=r($je," (BERT model)"),$je.forEach(t),Tlr=i(X),fT=n(X,"LI",{});var kje=s(fT);Bve=n(kje,"STRONG",{});var Ixt=s(Bve);Mlr=r(Ixt,"big_bird"),Ixt.forEach(t),Elr=r(kje," \u2014 "),uU=n(kje,"A",{href:!0});var Nxt=s(uU);Clr=r(Nxt,"BigBirdForQuestionAnswering"),Nxt.forEach(t),wlr=r(kje," (BigBird model)"),kje.forEach(t),Alr=i(X),mT=n(X,"LI",{});var Sje=s(mT);Ive=n(Sje,"STRONG",{});var qxt=s(Ive);Llr=r(qxt,"bigbird_pegasus"),qxt.forEach(t),ylr=r(Sje," \u2014 "),bU=n(Sje,"A",{href:!0});var jxt=s(bU);xlr=r(jxt,"BigBirdPegasusForQuestionAnswering"),jxt.forEach(t),$lr=r(Sje," (BigBird-Pegasus model)"),Sje.forEach(t),klr=i(X),gT=n(X,"LI",{});var Rje=s(gT);Nve=n(Rje,"STRONG",{});var Dxt=s(Nve);Slr=r(Dxt,"camembert"),Dxt.forEach(t),Rlr=r(Rje," \u2014 "),vU=n(Rje,"A",{href:!0});var Gxt=s(vU);Plr=r(Gxt,"CamembertForQuestionAnswering"),Gxt.forEach(t),Blr=r(Rje," (CamemBERT model)"),Rje.forEach(t),Ilr=i(X),hT=n(X,"LI",{});var Pje=s(hT);qve=n(Pje,"STRONG",{});var Oxt=s(qve);Nlr=r(Oxt,"canine"),Oxt.forEach(t),qlr=r(Pje," \u2014 "),FU=n(Pje,"A",{href:!0});var Vxt=s(FU);jlr=r(Vxt,"CanineForQuestionAnswering"),Vxt.forEach(t),Dlr=r(Pje," (CANINE model)"),Pje.forEach(t),Glr=i(X),pT=n(X,"LI",{});var Bje=s(pT);jve=n(Bje,"STRONG",{});var Xxt=s(jve);Olr=r(Xxt,"convbert"),Xxt.forEach(t),Vlr=r(Bje," \u2014 "),TU=n(Bje,"A",{href:!0});var zxt=s(TU);Xlr=r(zxt,"ConvBertForQuestionAnswering"),zxt.forEach(t),zlr=r(Bje," (ConvBERT model)"),Bje.forEach(t),Wlr=i(X),_T=n(X,"LI",{});var Ije=s(_T);Dve=n(Ije,"STRONG",{});var Wxt=s(Dve);Qlr=r(Wxt,"data2vec-text"),Wxt.forEach(t),Ulr=r(Ije," \u2014 "),MU=n(Ije,"A",{href:!0});var Qxt=s(MU);Hlr=r(Qxt,"Data2VecTextForQuestionAnswering"),Qxt.forEach(t),Jlr=r(Ije," (Data2VecText model)"),Ije.forEach(t),Ylr=i(X),uT=n(X,"LI",{});var Nje=s(uT);Gve=n(Nje,"STRONG",{});var Uxt=s(Gve);Klr=r(Uxt,"deberta"),Uxt.forEach(t),Zlr=r(Nje," \u2014 "),EU=n(Nje,"A",{href:!0});var Hxt=s(EU);eir=r(Hxt,"DebertaForQuestionAnswering"),Hxt.forEach(t),oir=r(Nje," (DeBERTa model)"),Nje.forEach(t),rir=i(X),bT=n(X,"LI",{});var qje=s(bT);Ove=n(qje,"STRONG",{});var Jxt=s(Ove);tir=r(Jxt,"deberta-v2"),Jxt.forEach(t),air=r(qje," \u2014 "),CU=n(qje,"A",{href:!0});var Yxt=s(CU);nir=r(Yxt,"DebertaV2ForQuestionAnswering"),Yxt.forEach(t),sir=r(qje," (DeBERTa-v2 model)"),qje.forEach(t),lir=i(X),vT=n(X,"LI",{});var jje=s(vT);Vve=n(jje,"STRONG",{});var Kxt=s(Vve);iir=r(Kxt,"distilbert"),Kxt.forEach(t),dir=r(jje," \u2014 "),wU=n(jje,"A",{href:!0});var Zxt=s(wU);cir=r(Zxt,"DistilBertForQuestionAnswering"),Zxt.forEach(t),fir=r(jje," (DistilBERT model)"),jje.forEach(t),mir=i(X),FT=n(X,"LI",{});var Dje=s(FT);Xve=n(Dje,"STRONG",{});var e$t=s(Xve);gir=r(e$t,"electra"),e$t.forEach(t),hir=r(Dje," \u2014 "),AU=n(Dje,"A",{href:!0});var o$t=s(AU);pir=r(o$t,"ElectraForQuestionAnswering"),o$t.forEach(t),_ir=r(Dje," (ELECTRA model)"),Dje.forEach(t),uir=i(X),TT=n(X,"LI",{});var Gje=s(TT);zve=n(Gje,"STRONG",{});var r$t=s(zve);bir=r(r$t,"flaubert"),r$t.forEach(t),vir=r(Gje," \u2014 "),LU=n(Gje,"A",{href:!0});var t$t=s(LU);Fir=r(t$t,"FlaubertForQuestionAnsweringSimple"),t$t.forEach(t),Tir=r(Gje," (FlauBERT model)"),Gje.forEach(t),Mir=i(X),MT=n(X,"LI",{});var Oje=s(MT);Wve=n(Oje,"STRONG",{});var a$t=s(Wve);Eir=r(a$t,"fnet"),a$t.forEach(t),Cir=r(Oje," \u2014 "),yU=n(Oje,"A",{href:!0});var n$t=s(yU);wir=r(n$t,"FNetForQuestionAnswering"),n$t.forEach(t),Air=r(Oje," (FNet model)"),Oje.forEach(t),Lir=i(X),ET=n(X,"LI",{});var Vje=s(ET);Qve=n(Vje,"STRONG",{});var s$t=s(Qve);yir=r(s$t,"funnel"),s$t.forEach(t),xir=r(Vje," \u2014 "),xU=n(Vje,"A",{href:!0});var l$t=s(xU);$ir=r(l$t,"FunnelForQuestionAnswering"),l$t.forEach(t),kir=r(Vje," (Funnel Transformer model)"),Vje.forEach(t),Sir=i(X),CT=n(X,"LI",{});var Xje=s(CT);Uve=n(Xje,"STRONG",{});var i$t=s(Uve);Rir=r(i$t,"gptj"),i$t.forEach(t),Pir=r(Xje," \u2014 "),$U=n(Xje,"A",{href:!0});var d$t=s($U);Bir=r(d$t,"GPTJForQuestionAnswering"),d$t.forEach(t),Iir=r(Xje," (GPT-J model)"),Xje.forEach(t),Nir=i(X),wT=n(X,"LI",{});var zje=s(wT);Hve=n(zje,"STRONG",{});var c$t=s(Hve);qir=r(c$t,"ibert"),c$t.forEach(t),jir=r(zje," \u2014 "),kU=n(zje,"A",{href:!0});var f$t=s(kU);Dir=r(f$t,"IBertForQuestionAnswering"),f$t.forEach(t),Gir=r(zje," (I-BERT model)"),zje.forEach(t),Oir=i(X),AT=n(X,"LI",{});var Wje=s(AT);Jve=n(Wje,"STRONG",{});var m$t=s(Jve);Vir=r(m$t,"layoutlmv2"),m$t.forEach(t),Xir=r(Wje," \u2014 "),SU=n(Wje,"A",{href:!0});var g$t=s(SU);zir=r(g$t,"LayoutLMv2ForQuestionAnswering"),g$t.forEach(t),Wir=r(Wje," (LayoutLMv2 model)"),Wje.forEach(t),Qir=i(X),LT=n(X,"LI",{});var Qje=s(LT);Yve=n(Qje,"STRONG",{});var h$t=s(Yve);Uir=r(h$t,"layoutlmv3"),h$t.forEach(t),Hir=r(Qje," \u2014 "),RU=n(Qje,"A",{href:!0});var p$t=s(RU);Jir=r(p$t,"LayoutLMv3ForQuestionAnswering"),p$t.forEach(t),Yir=r(Qje," (LayoutLMv3 model)"),Qje.forEach(t),Kir=i(X),yT=n(X,"LI",{});var Uje=s(yT);Kve=n(Uje,"STRONG",{});var _$t=s(Kve);Zir=r(_$t,"led"),_$t.forEach(t),edr=r(Uje," \u2014 "),PU=n(Uje,"A",{href:!0});var u$t=s(PU);odr=r(u$t,"LEDForQuestionAnswering"),u$t.forEach(t),rdr=r(Uje," (LED model)"),Uje.forEach(t),tdr=i(X),xT=n(X,"LI",{});var Hje=s(xT);Zve=n(Hje,"STRONG",{});var b$t=s(Zve);adr=r(b$t,"longformer"),b$t.forEach(t),ndr=r(Hje," \u2014 "),BU=n(Hje,"A",{href:!0});var v$t=s(BU);sdr=r(v$t,"LongformerForQuestionAnswering"),v$t.forEach(t),ldr=r(Hje," (Longformer model)"),Hje.forEach(t),idr=i(X),$T=n(X,"LI",{});var Jje=s($T);e6e=n(Jje,"STRONG",{});var F$t=s(e6e);ddr=r(F$t,"luke"),F$t.forEach(t),cdr=r(Jje," \u2014 "),IU=n(Jje,"A",{href:!0});var T$t=s(IU);fdr=r(T$t,"LukeForQuestionAnswering"),T$t.forEach(t),mdr=r(Jje," (LUKE model)"),Jje.forEach(t),gdr=i(X),kT=n(X,"LI",{});var Yje=s(kT);o6e=n(Yje,"STRONG",{});var M$t=s(o6e);hdr=r(M$t,"lxmert"),M$t.forEach(t),pdr=r(Yje," \u2014 "),NU=n(Yje,"A",{href:!0});var E$t=s(NU);_dr=r(E$t,"LxmertForQuestionAnswering"),E$t.forEach(t),udr=r(Yje," (LXMERT model)"),Yje.forEach(t),bdr=i(X),ST=n(X,"LI",{});var Kje=s(ST);r6e=n(Kje,"STRONG",{});var C$t=s(r6e);vdr=r(C$t,"mbart"),C$t.forEach(t),Fdr=r(Kje," \u2014 "),qU=n(Kje,"A",{href:!0});var w$t=s(qU);Tdr=r(w$t,"MBartForQuestionAnswering"),w$t.forEach(t),Mdr=r(Kje," (mBART model)"),Kje.forEach(t),Edr=i(X),RT=n(X,"LI",{});var Zje=s(RT);t6e=n(Zje,"STRONG",{});var A$t=s(t6e);Cdr=r(A$t,"megatron-bert"),A$t.forEach(t),wdr=r(Zje," \u2014 "),jU=n(Zje,"A",{href:!0});var L$t=s(jU);Adr=r(L$t,"MegatronBertForQuestionAnswering"),L$t.forEach(t),Ldr=r(Zje," (Megatron-BERT model)"),Zje.forEach(t),ydr=i(X),PT=n(X,"LI",{});var eDe=s(PT);a6e=n(eDe,"STRONG",{});var y$t=s(a6e);xdr=r(y$t,"mobilebert"),y$t.forEach(t),$dr=r(eDe," \u2014 "),DU=n(eDe,"A",{href:!0});var x$t=s(DU);kdr=r(x$t,"MobileBertForQuestionAnswering"),x$t.forEach(t),Sdr=r(eDe," (MobileBERT model)"),eDe.forEach(t),Rdr=i(X),BT=n(X,"LI",{});var oDe=s(BT);n6e=n(oDe,"STRONG",{});var $$t=s(n6e);Pdr=r($$t,"mpnet"),$$t.forEach(t),Bdr=r(oDe," \u2014 "),GU=n(oDe,"A",{href:!0});var k$t=s(GU);Idr=r(k$t,"MPNetForQuestionAnswering"),k$t.forEach(t),Ndr=r(oDe," (MPNet model)"),oDe.forEach(t),qdr=i(X),IT=n(X,"LI",{});var rDe=s(IT);s6e=n(rDe,"STRONG",{});var S$t=s(s6e);jdr=r(S$t,"mvp"),S$t.forEach(t),Ddr=r(rDe," \u2014 "),OU=n(rDe,"A",{href:!0});var R$t=s(OU);Gdr=r(R$t,"MvpForQuestionAnswering"),R$t.forEach(t),Odr=r(rDe," (MVP model)"),rDe.forEach(t),Vdr=i(X),NT=n(X,"LI",{});var tDe=s(NT);l6e=n(tDe,"STRONG",{});var P$t=s(l6e);Xdr=r(P$t,"nezha"),P$t.forEach(t),zdr=r(tDe," \u2014 "),VU=n(tDe,"A",{href:!0});var B$t=s(VU);Wdr=r(B$t,"NezhaForQuestionAnswering"),B$t.forEach(t),Qdr=r(tDe," (Nezha model)"),tDe.forEach(t),Udr=i(X),qT=n(X,"LI",{});var aDe=s(qT);i6e=n(aDe,"STRONG",{});var I$t=s(i6e);Hdr=r(I$t,"nystromformer"),I$t.forEach(t),Jdr=r(aDe," \u2014 "),XU=n(aDe,"A",{href:!0});var N$t=s(XU);Ydr=r(N$t,"NystromformerForQuestionAnswering"),N$t.forEach(t),Kdr=r(aDe," (Nystr\xF6mformer model)"),aDe.forEach(t),Zdr=i(X),jT=n(X,"LI",{});var nDe=s(jT);d6e=n(nDe,"STRONG",{});var q$t=s(d6e);ecr=r(q$t,"qdqbert"),q$t.forEach(t),ocr=r(nDe," \u2014 "),zU=n(nDe,"A",{href:!0});var j$t=s(zU);rcr=r(j$t,"QDQBertForQuestionAnswering"),j$t.forEach(t),tcr=r(nDe," (QDQBert model)"),nDe.forEach(t),acr=i(X),DT=n(X,"LI",{});var sDe=s(DT);c6e=n(sDe,"STRONG",{});var D$t=s(c6e);ncr=r(D$t,"reformer"),D$t.forEach(t),scr=r(sDe," \u2014 "),WU=n(sDe,"A",{href:!0});var G$t=s(WU);lcr=r(G$t,"ReformerForQuestionAnswering"),G$t.forEach(t),icr=r(sDe," (Reformer model)"),sDe.forEach(t),dcr=i(X),GT=n(X,"LI",{});var lDe=s(GT);f6e=n(lDe,"STRONG",{});var O$t=s(f6e);ccr=r(O$t,"rembert"),O$t.forEach(t),fcr=r(lDe," \u2014 "),QU=n(lDe,"A",{href:!0});var V$t=s(QU);mcr=r(V$t,"RemBertForQuestionAnswering"),V$t.forEach(t),gcr=r(lDe," (RemBERT model)"),lDe.forEach(t),hcr=i(X),OT=n(X,"LI",{});var iDe=s(OT);m6e=n(iDe,"STRONG",{});var X$t=s(m6e);pcr=r(X$t,"roberta"),X$t.forEach(t),_cr=r(iDe," \u2014 "),UU=n(iDe,"A",{href:!0});var z$t=s(UU);ucr=r(z$t,"RobertaForQuestionAnswering"),z$t.forEach(t),bcr=r(iDe," (RoBERTa model)"),iDe.forEach(t),vcr=i(X),VT=n(X,"LI",{});var dDe=s(VT);g6e=n(dDe,"STRONG",{});var W$t=s(g6e);Fcr=r(W$t,"roformer"),W$t.forEach(t),Tcr=r(dDe," \u2014 "),HU=n(dDe,"A",{href:!0});var Q$t=s(HU);Mcr=r(Q$t,"RoFormerForQuestionAnswering"),Q$t.forEach(t),Ecr=r(dDe," (RoFormer model)"),dDe.forEach(t),Ccr=i(X),XT=n(X,"LI",{});var cDe=s(XT);h6e=n(cDe,"STRONG",{});var U$t=s(h6e);wcr=r(U$t,"splinter"),U$t.forEach(t),Acr=r(cDe," \u2014 "),JU=n(cDe,"A",{href:!0});var H$t=s(JU);Lcr=r(H$t,"SplinterForQuestionAnswering"),H$t.forEach(t),ycr=r(cDe," (Splinter model)"),cDe.forEach(t),xcr=i(X),zT=n(X,"LI",{});var fDe=s(zT);p6e=n(fDe,"STRONG",{});var J$t=s(p6e);$cr=r(J$t,"squeezebert"),J$t.forEach(t),kcr=r(fDe," \u2014 "),YU=n(fDe,"A",{href:!0});var Y$t=s(YU);Scr=r(Y$t,"SqueezeBertForQuestionAnswering"),Y$t.forEach(t),Rcr=r(fDe," (SqueezeBERT model)"),fDe.forEach(t),Pcr=i(X),WT=n(X,"LI",{});var mDe=s(WT);_6e=n(mDe,"STRONG",{});var K$t=s(_6e);Bcr=r(K$t,"xlm"),K$t.forEach(t),Icr=r(mDe," \u2014 "),KU=n(mDe,"A",{href:!0});var Z$t=s(KU);Ncr=r(Z$t,"XLMForQuestionAnsweringSimple"),Z$t.forEach(t),qcr=r(mDe," (XLM model)"),mDe.forEach(t),jcr=i(X),QT=n(X,"LI",{});var gDe=s(QT);u6e=n(gDe,"STRONG",{});var ekt=s(u6e);Dcr=r(ekt,"xlm-roberta"),ekt.forEach(t),Gcr=r(gDe," \u2014 "),ZU=n(gDe,"A",{href:!0});var okt=s(ZU);Ocr=r(okt,"XLMRobertaForQuestionAnswering"),okt.forEach(t),Vcr=r(gDe," (XLM-RoBERTa model)"),gDe.forEach(t),Xcr=i(X),UT=n(X,"LI",{});var hDe=s(UT);b6e=n(hDe,"STRONG",{});var rkt=s(b6e);zcr=r(rkt,"xlm-roberta-xl"),rkt.forEach(t),Wcr=r(hDe," \u2014 "),eH=n(hDe,"A",{href:!0});var tkt=s(eH);Qcr=r(tkt,"XLMRobertaXLForQuestionAnswering"),tkt.forEach(t),Ucr=r(hDe," (XLM-RoBERTa-XL model)"),hDe.forEach(t),Hcr=i(X),HT=n(X,"LI",{});var pDe=s(HT);v6e=n(pDe,"STRONG",{});var akt=s(v6e);Jcr=r(akt,"xlnet"),akt.forEach(t),Ycr=r(pDe," \u2014 "),oH=n(pDe,"A",{href:!0});var nkt=s(oH);Kcr=r(nkt,"XLNetForQuestionAnsweringSimple"),nkt.forEach(t),Zcr=r(pDe," (XLNet model)"),pDe.forEach(t),efr=i(X),JT=n(X,"LI",{});var _De=s(JT);F6e=n(_De,"STRONG",{});var skt=s(F6e);ofr=r(skt,"yoso"),skt.forEach(t),rfr=r(_De," \u2014 "),rH=n(_De,"A",{href:!0});var lkt=s(rH);tfr=r(lkt,"YosoForQuestionAnswering"),lkt.forEach(t),afr=r(_De," (YOSO model)"),_De.forEach(t),X.forEach(t),nfr=i(Ea),YT=n(Ea,"P",{});var uDe=s(YT);sfr=r(uDe,"The model is set in evaluation mode by default using "),T6e=n(uDe,"CODE",{});var ikt=s(T6e);lfr=r(ikt,"model.eval()"),ikt.forEach(t),ifr=r(uDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M6e=n(uDe,"CODE",{});var dkt=s(M6e);dfr=r(dkt,"model.train()"),dkt.forEach(t),uDe.forEach(t),cfr=i(Ea),T(KT.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),vUe=i(f),Sd=n(f,"H2",{class:!0});var xJe=s(Sd);ZT=n(xJe,"A",{id:!0,class:!0,href:!0});var ckt=s(ZT);E6e=n(ckt,"SPAN",{});var fkt=s(E6e);T(By.$$.fragment,fkt),fkt.forEach(t),ckt.forEach(t),ffr=i(xJe),C6e=n(xJe,"SPAN",{});var mkt=s(C6e);mfr=r(mkt,"AutoModelForTableQuestionAnswering"),mkt.forEach(t),xJe.forEach(t),FUe=i(f),Vo=n(f,"DIV",{class:!0});var Cl=s(Vo);T(Iy.$$.fragment,Cl),gfr=i(Cl),Rd=n(Cl,"P",{});var sne=s(Rd);hfr=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tH=n(sne,"A",{href:!0});var gkt=s(tH);pfr=r(gkt,"from_pretrained()"),gkt.forEach(t),_fr=r(sne," class method or the "),aH=n(sne,"A",{href:!0});var hkt=s(aH);ufr=r(hkt,"from_config()"),hkt.forEach(t),bfr=r(sne,` class
method.`),sne.forEach(t),vfr=i(Cl),Ny=n(Cl,"P",{});var $Je=s(Ny);Ffr=r($Je,"This class cannot be instantiated directly using "),w6e=n($Je,"CODE",{});var pkt=s(w6e);Tfr=r(pkt,"__init__()"),pkt.forEach(t),Mfr=r($Je," (throws an error)."),$Je.forEach(t),Efr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var Sw=s(Mt);T(qy.$$.fragment,Sw),Cfr=i(Sw),A6e=n(Sw,"P",{});var _kt=s(A6e);wfr=r(_kt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_kt.forEach(t),Afr=i(Sw),Pd=n(Sw,"P",{});var lne=s(Pd);Lfr=r(lne,`Note:
Loading a model from its configuration file does `),L6e=n(lne,"STRONG",{});var ukt=s(L6e);yfr=r(ukt,"not"),ukt.forEach(t),xfr=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(lne,"A",{href:!0});var bkt=s(nH);$fr=r(bkt,"from_pretrained()"),bkt.forEach(t),kfr=r(lne," to load the model weights."),lne.forEach(t),Sfr=i(Sw),T(e7.$$.fragment,Sw),Sw.forEach(t),Rfr=i(Cl),lo=n(Cl,"DIV",{class:!0});var Ca=s(lo);T(jy.$$.fragment,Ca),Pfr=i(Ca),y6e=n(Ca,"P",{});var vkt=s(y6e);Bfr=r(vkt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vkt.forEach(t),Ifr=i(Ca),Za=n(Ca,"P",{});var Rw=s(Za);Nfr=r(Rw,"The model class to instantiate is selected based on the "),x6e=n(Rw,"CODE",{});var Fkt=s(x6e);qfr=r(Fkt,"model_type"),Fkt.forEach(t),jfr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),$6e=n(Rw,"CODE",{});var Tkt=s($6e);Dfr=r(Tkt,"pretrained_model_name_or_path"),Tkt.forEach(t),Gfr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=n(Rw,"CODE",{});var Mkt=s(k6e);Ofr=r(Mkt,"pretrained_model_name_or_path"),Mkt.forEach(t),Vfr=r(Rw,":"),Rw.forEach(t),Xfr=i(Ca),S6e=n(Ca,"UL",{});var Ekt=s(S6e);o7=n(Ekt,"LI",{});var bDe=s(o7);R6e=n(bDe,"STRONG",{});var Ckt=s(R6e);zfr=r(Ckt,"tapas"),Ckt.forEach(t),Wfr=r(bDe," \u2014 "),sH=n(bDe,"A",{href:!0});var wkt=s(sH);Qfr=r(wkt,"TapasForQuestionAnswering"),wkt.forEach(t),Ufr=r(bDe," (TAPAS model)"),bDe.forEach(t),Ekt.forEach(t),Hfr=i(Ca),r7=n(Ca,"P",{});var vDe=s(r7);Jfr=r(vDe,"The model is set in evaluation mode by default using "),P6e=n(vDe,"CODE",{});var Akt=s(P6e);Yfr=r(Akt,"model.eval()"),Akt.forEach(t),Kfr=r(vDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B6e=n(vDe,"CODE",{});var Lkt=s(B6e);Zfr=r(Lkt,"model.train()"),Lkt.forEach(t),vDe.forEach(t),emr=i(Ca),T(t7.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),TUe=i(f),Bd=n(f,"H2",{class:!0});var kJe=s(Bd);a7=n(kJe,"A",{id:!0,class:!0,href:!0});var ykt=s(a7);I6e=n(ykt,"SPAN",{});var xkt=s(I6e);T(Dy.$$.fragment,xkt),xkt.forEach(t),ykt.forEach(t),omr=i(kJe),N6e=n(kJe,"SPAN",{});var $kt=s(N6e);rmr=r($kt,"AutoModelForImageClassification"),$kt.forEach(t),kJe.forEach(t),MUe=i(f),Xo=n(f,"DIV",{class:!0});var wl=s(Xo);T(Gy.$$.fragment,wl),tmr=i(wl),Id=n(wl,"P",{});var ine=s(Id);amr=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lH=n(ine,"A",{href:!0});var kkt=s(lH);nmr=r(kkt,"from_pretrained()"),kkt.forEach(t),smr=r(ine," class method or the "),iH=n(ine,"A",{href:!0});var Skt=s(iH);lmr=r(Skt,"from_config()"),Skt.forEach(t),imr=r(ine,` class
method.`),ine.forEach(t),dmr=i(wl),Oy=n(wl,"P",{});var SJe=s(Oy);cmr=r(SJe,"This class cannot be instantiated directly using "),q6e=n(SJe,"CODE",{});var Rkt=s(q6e);fmr=r(Rkt,"__init__()"),Rkt.forEach(t),mmr=r(SJe," (throws an error)."),SJe.forEach(t),gmr=i(wl),Et=n(wl,"DIV",{class:!0});var Pw=s(Et);T(Vy.$$.fragment,Pw),hmr=i(Pw),j6e=n(Pw,"P",{});var Pkt=s(j6e);pmr=r(Pkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pkt.forEach(t),_mr=i(Pw),Nd=n(Pw,"P",{});var dne=s(Nd);umr=r(dne,`Note:
Loading a model from its configuration file does `),D6e=n(dne,"STRONG",{});var Bkt=s(D6e);bmr=r(Bkt,"not"),Bkt.forEach(t),vmr=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(dne,"A",{href:!0});var Ikt=s(dH);Fmr=r(Ikt,"from_pretrained()"),Ikt.forEach(t),Tmr=r(dne," to load the model weights."),dne.forEach(t),Mmr=i(Pw),T(n7.$$.fragment,Pw),Pw.forEach(t),Emr=i(wl),io=n(wl,"DIV",{class:!0});var wa=s(io);T(Xy.$$.fragment,wa),Cmr=i(wa),G6e=n(wa,"P",{});var Nkt=s(G6e);wmr=r(Nkt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Nkt.forEach(t),Amr=i(wa),en=n(wa,"P",{});var Bw=s(en);Lmr=r(Bw,"The model class to instantiate is selected based on the "),O6e=n(Bw,"CODE",{});var qkt=s(O6e);ymr=r(qkt,"model_type"),qkt.forEach(t),xmr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),V6e=n(Bw,"CODE",{});var jkt=s(V6e);$mr=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),kmr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(Bw,"CODE",{});var Dkt=s(X6e);Smr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),Rmr=r(Bw,":"),Bw.forEach(t),Pmr=i(wa),be=n(wa,"UL",{});var Fe=s(be);s7=n(Fe,"LI",{});var FDe=s(s7);z6e=n(FDe,"STRONG",{});var Gkt=s(z6e);Bmr=r(Gkt,"beit"),Gkt.forEach(t),Imr=r(FDe," \u2014 "),cH=n(FDe,"A",{href:!0});var Okt=s(cH);Nmr=r(Okt,"BeitForImageClassification"),Okt.forEach(t),qmr=r(FDe," (BEiT model)"),FDe.forEach(t),jmr=i(Fe),l7=n(Fe,"LI",{});var TDe=s(l7);W6e=n(TDe,"STRONG",{});var Vkt=s(W6e);Dmr=r(Vkt,"convnext"),Vkt.forEach(t),Gmr=r(TDe," \u2014 "),fH=n(TDe,"A",{href:!0});var Xkt=s(fH);Omr=r(Xkt,"ConvNextForImageClassification"),Xkt.forEach(t),Vmr=r(TDe," (ConvNeXT model)"),TDe.forEach(t),Xmr=i(Fe),i7=n(Fe,"LI",{});var MDe=s(i7);Q6e=n(MDe,"STRONG",{});var zkt=s(Q6e);zmr=r(zkt,"cvt"),zkt.forEach(t),Wmr=r(MDe," \u2014 "),mH=n(MDe,"A",{href:!0});var Wkt=s(mH);Qmr=r(Wkt,"CvtForImageClassification"),Wkt.forEach(t),Umr=r(MDe," (CvT model)"),MDe.forEach(t),Hmr=i(Fe),d7=n(Fe,"LI",{});var EDe=s(d7);U6e=n(EDe,"STRONG",{});var Qkt=s(U6e);Jmr=r(Qkt,"data2vec-vision"),Qkt.forEach(t),Ymr=r(EDe," \u2014 "),gH=n(EDe,"A",{href:!0});var Ukt=s(gH);Kmr=r(Ukt,"Data2VecVisionForImageClassification"),Ukt.forEach(t),Zmr=r(EDe," (Data2VecVision model)"),EDe.forEach(t),egr=i(Fe),sl=n(Fe,"LI",{});var ZR=s(sl);H6e=n(ZR,"STRONG",{});var Hkt=s(H6e);ogr=r(Hkt,"deit"),Hkt.forEach(t),rgr=r(ZR," \u2014 "),hH=n(ZR,"A",{href:!0});var Jkt=s(hH);tgr=r(Jkt,"DeiTForImageClassification"),Jkt.forEach(t),agr=r(ZR," or "),pH=n(ZR,"A",{href:!0});var Ykt=s(pH);ngr=r(Ykt,"DeiTForImageClassificationWithTeacher"),Ykt.forEach(t),sgr=r(ZR," (DeiT model)"),ZR.forEach(t),lgr=i(Fe),c7=n(Fe,"LI",{});var CDe=s(c7);J6e=n(CDe,"STRONG",{});var Kkt=s(J6e);igr=r(Kkt,"imagegpt"),Kkt.forEach(t),dgr=r(CDe," \u2014 "),_H=n(CDe,"A",{href:!0});var Zkt=s(_H);cgr=r(Zkt,"ImageGPTForImageClassification"),Zkt.forEach(t),fgr=r(CDe," (ImageGPT model)"),CDe.forEach(t),mgr=i(Fe),ll=n(Fe,"LI",{});var eP=s(ll);Y6e=n(eP,"STRONG",{});var eSt=s(Y6e);ggr=r(eSt,"levit"),eSt.forEach(t),hgr=r(eP," \u2014 "),uH=n(eP,"A",{href:!0});var oSt=s(uH);pgr=r(oSt,"LevitForImageClassification"),oSt.forEach(t),_gr=r(eP," or "),bH=n(eP,"A",{href:!0});var rSt=s(bH);ugr=r(rSt,"LevitForImageClassificationWithTeacher"),rSt.forEach(t),bgr=r(eP," (LeViT model)"),eP.forEach(t),vgr=i(Fe),f7=n(Fe,"LI",{});var wDe=s(f7);K6e=n(wDe,"STRONG",{});var tSt=s(K6e);Fgr=r(tSt,"mobilevit"),tSt.forEach(t),Tgr=r(wDe," \u2014 "),vH=n(wDe,"A",{href:!0});var aSt=s(vH);Mgr=r(aSt,"MobileViTForImageClassification"),aSt.forEach(t),Egr=r(wDe," (MobileViT model)"),wDe.forEach(t),Cgr=i(Fe),Ct=n(Fe,"LI",{});var Zf=s(Ct);Z6e=n(Zf,"STRONG",{});var nSt=s(Z6e);wgr=r(nSt,"perceiver"),nSt.forEach(t),Agr=r(Zf," \u2014 "),FH=n(Zf,"A",{href:!0});var sSt=s(FH);Lgr=r(sSt,"PerceiverForImageClassificationLearned"),sSt.forEach(t),ygr=r(Zf," or "),TH=n(Zf,"A",{href:!0});var lSt=s(TH);xgr=r(lSt,"PerceiverForImageClassificationFourier"),lSt.forEach(t),$gr=r(Zf," or "),MH=n(Zf,"A",{href:!0});var iSt=s(MH);kgr=r(iSt,"PerceiverForImageClassificationConvProcessing"),iSt.forEach(t),Sgr=r(Zf," (Perceiver model)"),Zf.forEach(t),Rgr=i(Fe),m7=n(Fe,"LI",{});var ADe=s(m7);eFe=n(ADe,"STRONG",{});var dSt=s(eFe);Pgr=r(dSt,"poolformer"),dSt.forEach(t),Bgr=r(ADe," \u2014 "),EH=n(ADe,"A",{href:!0});var cSt=s(EH);Igr=r(cSt,"PoolFormerForImageClassification"),cSt.forEach(t),Ngr=r(ADe," (PoolFormer model)"),ADe.forEach(t),qgr=i(Fe),g7=n(Fe,"LI",{});var LDe=s(g7);oFe=n(LDe,"STRONG",{});var fSt=s(oFe);jgr=r(fSt,"regnet"),fSt.forEach(t),Dgr=r(LDe," \u2014 "),CH=n(LDe,"A",{href:!0});var mSt=s(CH);Ggr=r(mSt,"RegNetForImageClassification"),mSt.forEach(t),Ogr=r(LDe," (RegNet model)"),LDe.forEach(t),Vgr=i(Fe),h7=n(Fe,"LI",{});var yDe=s(h7);rFe=n(yDe,"STRONG",{});var gSt=s(rFe);Xgr=r(gSt,"resnet"),gSt.forEach(t),zgr=r(yDe," \u2014 "),wH=n(yDe,"A",{href:!0});var hSt=s(wH);Wgr=r(hSt,"ResNetForImageClassification"),hSt.forEach(t),Qgr=r(yDe," (ResNet model)"),yDe.forEach(t),Ugr=i(Fe),p7=n(Fe,"LI",{});var xDe=s(p7);tFe=n(xDe,"STRONG",{});var pSt=s(tFe);Hgr=r(pSt,"segformer"),pSt.forEach(t),Jgr=r(xDe," \u2014 "),AH=n(xDe,"A",{href:!0});var _St=s(AH);Ygr=r(_St,"SegformerForImageClassification"),_St.forEach(t),Kgr=r(xDe," (SegFormer model)"),xDe.forEach(t),Zgr=i(Fe),_7=n(Fe,"LI",{});var $De=s(_7);aFe=n($De,"STRONG",{});var uSt=s(aFe);ehr=r(uSt,"swin"),uSt.forEach(t),ohr=r($De," \u2014 "),LH=n($De,"A",{href:!0});var bSt=s(LH);rhr=r(bSt,"SwinForImageClassification"),bSt.forEach(t),thr=r($De," (Swin Transformer model)"),$De.forEach(t),ahr=i(Fe),u7=n(Fe,"LI",{});var kDe=s(u7);nFe=n(kDe,"STRONG",{});var vSt=s(nFe);nhr=r(vSt,"swinv2"),vSt.forEach(t),shr=r(kDe," \u2014 "),yH=n(kDe,"A",{href:!0});var FSt=s(yH);lhr=r(FSt,"Swinv2ForImageClassification"),FSt.forEach(t),ihr=r(kDe," (Swin Transformer V2 model)"),kDe.forEach(t),dhr=i(Fe),b7=n(Fe,"LI",{});var SDe=s(b7);sFe=n(SDe,"STRONG",{});var TSt=s(sFe);chr=r(TSt,"van"),TSt.forEach(t),fhr=r(SDe," \u2014 "),xH=n(SDe,"A",{href:!0});var MSt=s(xH);mhr=r(MSt,"VanForImageClassification"),MSt.forEach(t),ghr=r(SDe," (VAN model)"),SDe.forEach(t),hhr=i(Fe),v7=n(Fe,"LI",{});var RDe=s(v7);lFe=n(RDe,"STRONG",{});var ESt=s(lFe);phr=r(ESt,"vit"),ESt.forEach(t),_hr=r(RDe," \u2014 "),$H=n(RDe,"A",{href:!0});var CSt=s($H);uhr=r(CSt,"ViTForImageClassification"),CSt.forEach(t),bhr=r(RDe," (ViT model)"),RDe.forEach(t),Fe.forEach(t),vhr=i(wa),F7=n(wa,"P",{});var PDe=s(F7);Fhr=r(PDe,"The model is set in evaluation mode by default using "),iFe=n(PDe,"CODE",{});var wSt=s(iFe);Thr=r(wSt,"model.eval()"),wSt.forEach(t),Mhr=r(PDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dFe=n(PDe,"CODE",{});var ASt=s(dFe);Ehr=r(ASt,"model.train()"),ASt.forEach(t),PDe.forEach(t),Chr=i(wa),T(T7.$$.fragment,wa),wa.forEach(t),wl.forEach(t),EUe=i(f),qd=n(f,"H2",{class:!0});var RJe=s(qd);M7=n(RJe,"A",{id:!0,class:!0,href:!0});var LSt=s(M7);cFe=n(LSt,"SPAN",{});var ySt=s(cFe);T(zy.$$.fragment,ySt),ySt.forEach(t),LSt.forEach(t),whr=i(RJe),fFe=n(RJe,"SPAN",{});var xSt=s(fFe);Ahr=r(xSt,"AutoModelForVideoClassification"),xSt.forEach(t),RJe.forEach(t),CUe=i(f),zo=n(f,"DIV",{class:!0});var Al=s(zo);T(Wy.$$.fragment,Al),Lhr=i(Al),jd=n(Al,"P",{});var cne=s(jd);yhr=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),kH=n(cne,"A",{href:!0});var $St=s(kH);xhr=r($St,"from_pretrained()"),$St.forEach(t),$hr=r(cne," class method or the "),SH=n(cne,"A",{href:!0});var kSt=s(SH);khr=r(kSt,"from_config()"),kSt.forEach(t),Shr=r(cne,` class
method.`),cne.forEach(t),Rhr=i(Al),Qy=n(Al,"P",{});var PJe=s(Qy);Phr=r(PJe,"This class cannot be instantiated directly using "),mFe=n(PJe,"CODE",{});var SSt=s(mFe);Bhr=r(SSt,"__init__()"),SSt.forEach(t),Ihr=r(PJe," (throws an error)."),PJe.forEach(t),Nhr=i(Al),wt=n(Al,"DIV",{class:!0});var Iw=s(wt);T(Uy.$$.fragment,Iw),qhr=i(Iw),gFe=n(Iw,"P",{});var RSt=s(gFe);jhr=r(RSt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),RSt.forEach(t),Dhr=i(Iw),Dd=n(Iw,"P",{});var fne=s(Dd);Ghr=r(fne,`Note:
Loading a model from its configuration file does `),hFe=n(fne,"STRONG",{});var PSt=s(hFe);Ohr=r(PSt,"not"),PSt.forEach(t),Vhr=r(fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(fne,"A",{href:!0});var BSt=s(RH);Xhr=r(BSt,"from_pretrained()"),BSt.forEach(t),zhr=r(fne," to load the model weights."),fne.forEach(t),Whr=i(Iw),T(E7.$$.fragment,Iw),Iw.forEach(t),Qhr=i(Al),co=n(Al,"DIV",{class:!0});var Aa=s(co);T(Hy.$$.fragment,Aa),Uhr=i(Aa),pFe=n(Aa,"P",{});var ISt=s(pFe);Hhr=r(ISt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),ISt.forEach(t),Jhr=i(Aa),on=n(Aa,"P",{});var Nw=s(on);Yhr=r(Nw,"The model class to instantiate is selected based on the "),_Fe=n(Nw,"CODE",{});var NSt=s(_Fe);Khr=r(NSt,"model_type"),NSt.forEach(t),Zhr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),uFe=n(Nw,"CODE",{});var qSt=s(uFe);epr=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),opr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(Nw,"CODE",{});var jSt=s(bFe);rpr=r(jSt,"pretrained_model_name_or_path"),jSt.forEach(t),tpr=r(Nw,":"),Nw.forEach(t),apr=i(Aa),vFe=n(Aa,"UL",{});var DSt=s(vFe);C7=n(DSt,"LI",{});var BDe=s(C7);FFe=n(BDe,"STRONG",{});var GSt=s(FFe);npr=r(GSt,"videomae"),GSt.forEach(t),spr=r(BDe," \u2014 "),PH=n(BDe,"A",{href:!0});var OSt=s(PH);lpr=r(OSt,"VideoMAEForVideoClassification"),OSt.forEach(t),ipr=r(BDe," (VideoMAE model)"),BDe.forEach(t),DSt.forEach(t),dpr=i(Aa),w7=n(Aa,"P",{});var IDe=s(w7);cpr=r(IDe,"The model is set in evaluation mode by default using "),TFe=n(IDe,"CODE",{});var VSt=s(TFe);fpr=r(VSt,"model.eval()"),VSt.forEach(t),mpr=r(IDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MFe=n(IDe,"CODE",{});var XSt=s(MFe);gpr=r(XSt,"model.train()"),XSt.forEach(t),IDe.forEach(t),hpr=i(Aa),T(A7.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),wUe=i(f),Gd=n(f,"H2",{class:!0});var BJe=s(Gd);L7=n(BJe,"A",{id:!0,class:!0,href:!0});var zSt=s(L7);EFe=n(zSt,"SPAN",{});var WSt=s(EFe);T(Jy.$$.fragment,WSt),WSt.forEach(t),zSt.forEach(t),ppr=i(BJe),CFe=n(BJe,"SPAN",{});var QSt=s(CFe);_pr=r(QSt,"AutoModelForVision2Seq"),QSt.forEach(t),BJe.forEach(t),AUe=i(f),Wo=n(f,"DIV",{class:!0});var Ll=s(Wo);T(Yy.$$.fragment,Ll),upr=i(Ll),Od=n(Ll,"P",{});var mne=s(Od);bpr=r(mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BH=n(mne,"A",{href:!0});var USt=s(BH);vpr=r(USt,"from_pretrained()"),USt.forEach(t),Fpr=r(mne," class method or the "),IH=n(mne,"A",{href:!0});var HSt=s(IH);Tpr=r(HSt,"from_config()"),HSt.forEach(t),Mpr=r(mne,` class
method.`),mne.forEach(t),Epr=i(Ll),Ky=n(Ll,"P",{});var IJe=s(Ky);Cpr=r(IJe,"This class cannot be instantiated directly using "),wFe=n(IJe,"CODE",{});var JSt=s(wFe);wpr=r(JSt,"__init__()"),JSt.forEach(t),Apr=r(IJe," (throws an error)."),IJe.forEach(t),Lpr=i(Ll),At=n(Ll,"DIV",{class:!0});var qw=s(At);T(Zy.$$.fragment,qw),ypr=i(qw),AFe=n(qw,"P",{});var YSt=s(AFe);xpr=r(YSt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YSt.forEach(t),$pr=i(qw),Vd=n(qw,"P",{});var gne=s(Vd);kpr=r(gne,`Note:
Loading a model from its configuration file does `),LFe=n(gne,"STRONG",{});var KSt=s(LFe);Spr=r(KSt,"not"),KSt.forEach(t),Rpr=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(gne,"A",{href:!0});var ZSt=s(NH);Ppr=r(ZSt,"from_pretrained()"),ZSt.forEach(t),Bpr=r(gne," to load the model weights."),gne.forEach(t),Ipr=i(qw),T(y7.$$.fragment,qw),qw.forEach(t),Npr=i(Ll),fo=n(Ll,"DIV",{class:!0});var La=s(fo);T(ex.$$.fragment,La),qpr=i(La),yFe=n(La,"P",{});var eRt=s(yFe);jpr=r(eRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eRt.forEach(t),Dpr=i(La),rn=n(La,"P",{});var jw=s(rn);Gpr=r(jw,"The model class to instantiate is selected based on the "),xFe=n(jw,"CODE",{});var oRt=s(xFe);Opr=r(oRt,"model_type"),oRt.forEach(t),Vpr=r(jw,` property of the config object (either
passed as an argument or loaded from `),$Fe=n(jw,"CODE",{});var rRt=s($Fe);Xpr=r(rRt,"pretrained_model_name_or_path"),rRt.forEach(t),zpr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=n(jw,"CODE",{});var tRt=s(kFe);Wpr=r(tRt,"pretrained_model_name_or_path"),tRt.forEach(t),Qpr=r(jw,":"),jw.forEach(t),Upr=i(La),SFe=n(La,"UL",{});var aRt=s(SFe);x7=n(aRt,"LI",{});var NDe=s(x7);RFe=n(NDe,"STRONG",{});var nRt=s(RFe);Hpr=r(nRt,"vision-encoder-decoder"),nRt.forEach(t),Jpr=r(NDe," \u2014 "),qH=n(NDe,"A",{href:!0});var sRt=s(qH);Ypr=r(sRt,"VisionEncoderDecoderModel"),sRt.forEach(t),Kpr=r(NDe," (Vision Encoder decoder model)"),NDe.forEach(t),aRt.forEach(t),Zpr=i(La),$7=n(La,"P",{});var qDe=s($7);e_r=r(qDe,"The model is set in evaluation mode by default using "),PFe=n(qDe,"CODE",{});var lRt=s(PFe);o_r=r(lRt,"model.eval()"),lRt.forEach(t),r_r=r(qDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BFe=n(qDe,"CODE",{});var iRt=s(BFe);t_r=r(iRt,"model.train()"),iRt.forEach(t),qDe.forEach(t),a_r=i(La),T(k7.$$.fragment,La),La.forEach(t),Ll.forEach(t),LUe=i(f),Xd=n(f,"H2",{class:!0});var NJe=s(Xd);S7=n(NJe,"A",{id:!0,class:!0,href:!0});var dRt=s(S7);IFe=n(dRt,"SPAN",{});var cRt=s(IFe);T(ox.$$.fragment,cRt),cRt.forEach(t),dRt.forEach(t),n_r=i(NJe),NFe=n(NJe,"SPAN",{});var fRt=s(NFe);s_r=r(fRt,"AutoModelForVisualQuestionAnswering"),fRt.forEach(t),NJe.forEach(t),yUe=i(f),Qo=n(f,"DIV",{class:!0});var yl=s(Qo);T(rx.$$.fragment,yl),l_r=i(yl),zd=n(yl,"P",{});var hne=s(zd);i_r=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),jH=n(hne,"A",{href:!0});var mRt=s(jH);d_r=r(mRt,"from_pretrained()"),mRt.forEach(t),c_r=r(hne," class method or the "),DH=n(hne,"A",{href:!0});var gRt=s(DH);f_r=r(gRt,"from_config()"),gRt.forEach(t),m_r=r(hne,` class
method.`),hne.forEach(t),g_r=i(yl),tx=n(yl,"P",{});var qJe=s(tx);h_r=r(qJe,"This class cannot be instantiated directly using "),qFe=n(qJe,"CODE",{});var hRt=s(qFe);p_r=r(hRt,"__init__()"),hRt.forEach(t),__r=r(qJe," (throws an error)."),qJe.forEach(t),u_r=i(yl),Lt=n(yl,"DIV",{class:!0});var Dw=s(Lt);T(ax.$$.fragment,Dw),b_r=i(Dw),jFe=n(Dw,"P",{});var pRt=s(jFe);v_r=r(pRt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),pRt.forEach(t),F_r=i(Dw),Wd=n(Dw,"P",{});var pne=s(Wd);T_r=r(pne,`Note:
Loading a model from its configuration file does `),DFe=n(pne,"STRONG",{});var _Rt=s(DFe);M_r=r(_Rt,"not"),_Rt.forEach(t),E_r=r(pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(pne,"A",{href:!0});var uRt=s(GH);C_r=r(uRt,"from_pretrained()"),uRt.forEach(t),w_r=r(pne," to load the model weights."),pne.forEach(t),A_r=i(Dw),T(R7.$$.fragment,Dw),Dw.forEach(t),L_r=i(yl),mo=n(yl,"DIV",{class:!0});var ya=s(mo);T(nx.$$.fragment,ya),y_r=i(ya),GFe=n(ya,"P",{});var bRt=s(GFe);x_r=r(bRt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),bRt.forEach(t),$_r=i(ya),tn=n(ya,"P",{});var Gw=s(tn);k_r=r(Gw,"The model class to instantiate is selected based on the "),OFe=n(Gw,"CODE",{});var vRt=s(OFe);S_r=r(vRt,"model_type"),vRt.forEach(t),R_r=r(Gw,` property of the config object (either
passed as an argument or loaded from `),VFe=n(Gw,"CODE",{});var FRt=s(VFe);P_r=r(FRt,"pretrained_model_name_or_path"),FRt.forEach(t),B_r=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(Gw,"CODE",{});var TRt=s(XFe);I_r=r(TRt,"pretrained_model_name_or_path"),TRt.forEach(t),N_r=r(Gw,":"),Gw.forEach(t),q_r=i(ya),zFe=n(ya,"UL",{});var MRt=s(zFe);P7=n(MRt,"LI",{});var jDe=s(P7);WFe=n(jDe,"STRONG",{});var ERt=s(WFe);j_r=r(ERt,"vilt"),ERt.forEach(t),D_r=r(jDe," \u2014 "),OH=n(jDe,"A",{href:!0});var CRt=s(OH);G_r=r(CRt,"ViltForQuestionAnswering"),CRt.forEach(t),O_r=r(jDe," (ViLT model)"),jDe.forEach(t),MRt.forEach(t),V_r=i(ya),B7=n(ya,"P",{});var DDe=s(B7);X_r=r(DDe,"The model is set in evaluation mode by default using "),QFe=n(DDe,"CODE",{});var wRt=s(QFe);z_r=r(wRt,"model.eval()"),wRt.forEach(t),W_r=r(DDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UFe=n(DDe,"CODE",{});var ARt=s(UFe);Q_r=r(ARt,"model.train()"),ARt.forEach(t),DDe.forEach(t),U_r=i(ya),T(I7.$$.fragment,ya),ya.forEach(t),yl.forEach(t),xUe=i(f),Qd=n(f,"H2",{class:!0});var jJe=s(Qd);N7=n(jJe,"A",{id:!0,class:!0,href:!0});var LRt=s(N7);HFe=n(LRt,"SPAN",{});var yRt=s(HFe);T(sx.$$.fragment,yRt),yRt.forEach(t),LRt.forEach(t),H_r=i(jJe),JFe=n(jJe,"SPAN",{});var xRt=s(JFe);J_r=r(xRt,"AutoModelForAudioClassification"),xRt.forEach(t),jJe.forEach(t),$Ue=i(f),Uo=n(f,"DIV",{class:!0});var xl=s(Uo);T(lx.$$.fragment,xl),Y_r=i(xl),Ud=n(xl,"P",{});var _ne=s(Ud);K_r=r(_ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),VH=n(_ne,"A",{href:!0});var $Rt=s(VH);Z_r=r($Rt,"from_pretrained()"),$Rt.forEach(t),eur=r(_ne," class method or the "),XH=n(_ne,"A",{href:!0});var kRt=s(XH);our=r(kRt,"from_config()"),kRt.forEach(t),rur=r(_ne,` class
method.`),_ne.forEach(t),tur=i(xl),ix=n(xl,"P",{});var DJe=s(ix);aur=r(DJe,"This class cannot be instantiated directly using "),YFe=n(DJe,"CODE",{});var SRt=s(YFe);nur=r(SRt,"__init__()"),SRt.forEach(t),sur=r(DJe," (throws an error)."),DJe.forEach(t),lur=i(xl),yt=n(xl,"DIV",{class:!0});var Ow=s(yt);T(dx.$$.fragment,Ow),iur=i(Ow),KFe=n(Ow,"P",{});var RRt=s(KFe);dur=r(RRt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),RRt.forEach(t),cur=i(Ow),Hd=n(Ow,"P",{});var une=s(Hd);fur=r(une,`Note:
Loading a model from its configuration file does `),ZFe=n(une,"STRONG",{});var PRt=s(ZFe);mur=r(PRt,"not"),PRt.forEach(t),gur=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(une,"A",{href:!0});var BRt=s(zH);hur=r(BRt,"from_pretrained()"),BRt.forEach(t),pur=r(une," to load the model weights."),une.forEach(t),_ur=i(Ow),T(q7.$$.fragment,Ow),Ow.forEach(t),uur=i(xl),go=n(xl,"DIV",{class:!0});var xa=s(go);T(cx.$$.fragment,xa),bur=i(xa),eTe=n(xa,"P",{});var IRt=s(eTe);vur=r(IRt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),IRt.forEach(t),Fur=i(xa),an=n(xa,"P",{});var Vw=s(an);Tur=r(Vw,"The model class to instantiate is selected based on the "),oTe=n(Vw,"CODE",{});var NRt=s(oTe);Mur=r(NRt,"model_type"),NRt.forEach(t),Eur=r(Vw,` property of the config object (either
passed as an argument or loaded from `),rTe=n(Vw,"CODE",{});var qRt=s(rTe);Cur=r(qRt,"pretrained_model_name_or_path"),qRt.forEach(t),wur=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(Vw,"CODE",{});var jRt=s(tTe);Aur=r(jRt,"pretrained_model_name_or_path"),jRt.forEach(t),Lur=r(Vw,":"),Vw.forEach(t),yur=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);j7=n(We,"LI",{});var GDe=s(j7);aTe=n(GDe,"STRONG",{});var DRt=s(aTe);xur=r(DRt,"data2vec-audio"),DRt.forEach(t),$ur=r(GDe," \u2014 "),WH=n(GDe,"A",{href:!0});var GRt=s(WH);kur=r(GRt,"Data2VecAudioForSequenceClassification"),GRt.forEach(t),Sur=r(GDe," (Data2VecAudio model)"),GDe.forEach(t),Rur=i(We),D7=n(We,"LI",{});var ODe=s(D7);nTe=n(ODe,"STRONG",{});var ORt=s(nTe);Pur=r(ORt,"hubert"),ORt.forEach(t),Bur=r(ODe," \u2014 "),QH=n(ODe,"A",{href:!0});var VRt=s(QH);Iur=r(VRt,"HubertForSequenceClassification"),VRt.forEach(t),Nur=r(ODe," (Hubert model)"),ODe.forEach(t),qur=i(We),G7=n(We,"LI",{});var VDe=s(G7);sTe=n(VDe,"STRONG",{});var XRt=s(sTe);jur=r(XRt,"sew"),XRt.forEach(t),Dur=r(VDe," \u2014 "),UH=n(VDe,"A",{href:!0});var zRt=s(UH);Gur=r(zRt,"SEWForSequenceClassification"),zRt.forEach(t),Our=r(VDe," (SEW model)"),VDe.forEach(t),Vur=i(We),O7=n(We,"LI",{});var XDe=s(O7);lTe=n(XDe,"STRONG",{});var WRt=s(lTe);Xur=r(WRt,"sew-d"),WRt.forEach(t),zur=r(XDe," \u2014 "),HH=n(XDe,"A",{href:!0});var QRt=s(HH);Wur=r(QRt,"SEWDForSequenceClassification"),QRt.forEach(t),Qur=r(XDe," (SEW-D model)"),XDe.forEach(t),Uur=i(We),V7=n(We,"LI",{});var zDe=s(V7);iTe=n(zDe,"STRONG",{});var URt=s(iTe);Hur=r(URt,"unispeech"),URt.forEach(t),Jur=r(zDe," \u2014 "),JH=n(zDe,"A",{href:!0});var HRt=s(JH);Yur=r(HRt,"UniSpeechForSequenceClassification"),HRt.forEach(t),Kur=r(zDe," (UniSpeech model)"),zDe.forEach(t),Zur=i(We),X7=n(We,"LI",{});var WDe=s(X7);dTe=n(WDe,"STRONG",{});var JRt=s(dTe);e1r=r(JRt,"unispeech-sat"),JRt.forEach(t),o1r=r(WDe," \u2014 "),YH=n(WDe,"A",{href:!0});var YRt=s(YH);r1r=r(YRt,"UniSpeechSatForSequenceClassification"),YRt.forEach(t),t1r=r(WDe," (UniSpeechSat model)"),WDe.forEach(t),a1r=i(We),z7=n(We,"LI",{});var QDe=s(z7);cTe=n(QDe,"STRONG",{});var KRt=s(cTe);n1r=r(KRt,"wav2vec2"),KRt.forEach(t),s1r=r(QDe," \u2014 "),KH=n(QDe,"A",{href:!0});var ZRt=s(KH);l1r=r(ZRt,"Wav2Vec2ForSequenceClassification"),ZRt.forEach(t),i1r=r(QDe," (Wav2Vec2 model)"),QDe.forEach(t),d1r=i(We),W7=n(We,"LI",{});var UDe=s(W7);fTe=n(UDe,"STRONG",{});var ePt=s(fTe);c1r=r(ePt,"wav2vec2-conformer"),ePt.forEach(t),f1r=r(UDe," \u2014 "),ZH=n(UDe,"A",{href:!0});var oPt=s(ZH);m1r=r(oPt,"Wav2Vec2ConformerForSequenceClassification"),oPt.forEach(t),g1r=r(UDe," (Wav2Vec2-Conformer model)"),UDe.forEach(t),h1r=i(We),Q7=n(We,"LI",{});var HDe=s(Q7);mTe=n(HDe,"STRONG",{});var rPt=s(mTe);p1r=r(rPt,"wavlm"),rPt.forEach(t),_1r=r(HDe," \u2014 "),eJ=n(HDe,"A",{href:!0});var tPt=s(eJ);u1r=r(tPt,"WavLMForSequenceClassification"),tPt.forEach(t),b1r=r(HDe," (WavLM model)"),HDe.forEach(t),We.forEach(t),v1r=i(xa),U7=n(xa,"P",{});var JDe=s(U7);F1r=r(JDe,"The model is set in evaluation mode by default using "),gTe=n(JDe,"CODE",{});var aPt=s(gTe);T1r=r(aPt,"model.eval()"),aPt.forEach(t),M1r=r(JDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hTe=n(JDe,"CODE",{});var nPt=s(hTe);E1r=r(nPt,"model.train()"),nPt.forEach(t),JDe.forEach(t),C1r=i(xa),T(H7.$$.fragment,xa),xa.forEach(t),xl.forEach(t),kUe=i(f),Jd=n(f,"H2",{class:!0});var GJe=s(Jd);J7=n(GJe,"A",{id:!0,class:!0,href:!0});var sPt=s(J7);pTe=n(sPt,"SPAN",{});var lPt=s(pTe);T(fx.$$.fragment,lPt),lPt.forEach(t),sPt.forEach(t),w1r=i(GJe),_Te=n(GJe,"SPAN",{});var iPt=s(_Te);A1r=r(iPt,"AutoModelForAudioFrameClassification"),iPt.forEach(t),GJe.forEach(t),SUe=i(f),Ho=n(f,"DIV",{class:!0});var $l=s(Ho);T(mx.$$.fragment,$l),L1r=i($l),Yd=n($l,"P",{});var bne=s(Yd);y1r=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),oJ=n(bne,"A",{href:!0});var dPt=s(oJ);x1r=r(dPt,"from_pretrained()"),dPt.forEach(t),$1r=r(bne," class method or the "),rJ=n(bne,"A",{href:!0});var cPt=s(rJ);k1r=r(cPt,"from_config()"),cPt.forEach(t),S1r=r(bne,` class
method.`),bne.forEach(t),R1r=i($l),gx=n($l,"P",{});var OJe=s(gx);P1r=r(OJe,"This class cannot be instantiated directly using "),uTe=n(OJe,"CODE",{});var fPt=s(uTe);B1r=r(fPt,"__init__()"),fPt.forEach(t),I1r=r(OJe," (throws an error)."),OJe.forEach(t),N1r=i($l),xt=n($l,"DIV",{class:!0});var Xw=s(xt);T(hx.$$.fragment,Xw),q1r=i(Xw),bTe=n(Xw,"P",{});var mPt=s(bTe);j1r=r(mPt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),mPt.forEach(t),D1r=i(Xw),Kd=n(Xw,"P",{});var vne=s(Kd);G1r=r(vne,`Note:
Loading a model from its configuration file does `),vTe=n(vne,"STRONG",{});var gPt=s(vTe);O1r=r(gPt,"not"),gPt.forEach(t),V1r=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(vne,"A",{href:!0});var hPt=s(tJ);X1r=r(hPt,"from_pretrained()"),hPt.forEach(t),z1r=r(vne," to load the model weights."),vne.forEach(t),W1r=i(Xw),T(Y7.$$.fragment,Xw),Xw.forEach(t),Q1r=i($l),ho=n($l,"DIV",{class:!0});var $a=s(ho);T(px.$$.fragment,$a),U1r=i($a),FTe=n($a,"P",{});var pPt=s(FTe);H1r=r(pPt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pPt.forEach(t),J1r=i($a),nn=n($a,"P",{});var zw=s(nn);Y1r=r(zw,"The model class to instantiate is selected based on the "),TTe=n(zw,"CODE",{});var _Pt=s(TTe);K1r=r(_Pt,"model_type"),_Pt.forEach(t),Z1r=r(zw,` property of the config object (either
passed as an argument or loaded from `),MTe=n(zw,"CODE",{});var uPt=s(MTe);e2r=r(uPt,"pretrained_model_name_or_path"),uPt.forEach(t),o2r=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(zw,"CODE",{});var bPt=s(ETe);r2r=r(bPt,"pretrained_model_name_or_path"),bPt.forEach(t),t2r=r(zw,":"),zw.forEach(t),a2r=i($a),st=n($a,"UL",{});var kl=s(st);K7=n(kl,"LI",{});var YDe=s(K7);CTe=n(YDe,"STRONG",{});var vPt=s(CTe);n2r=r(vPt,"data2vec-audio"),vPt.forEach(t),s2r=r(YDe," \u2014 "),aJ=n(YDe,"A",{href:!0});var FPt=s(aJ);l2r=r(FPt,"Data2VecAudioForAudioFrameClassification"),FPt.forEach(t),i2r=r(YDe," (Data2VecAudio model)"),YDe.forEach(t),d2r=i(kl),Z7=n(kl,"LI",{});var KDe=s(Z7);wTe=n(KDe,"STRONG",{});var TPt=s(wTe);c2r=r(TPt,"unispeech-sat"),TPt.forEach(t),f2r=r(KDe," \u2014 "),nJ=n(KDe,"A",{href:!0});var MPt=s(nJ);m2r=r(MPt,"UniSpeechSatForAudioFrameClassification"),MPt.forEach(t),g2r=r(KDe," (UniSpeechSat model)"),KDe.forEach(t),h2r=i(kl),e8=n(kl,"LI",{});var ZDe=s(e8);ATe=n(ZDe,"STRONG",{});var EPt=s(ATe);p2r=r(EPt,"wav2vec2"),EPt.forEach(t),_2r=r(ZDe," \u2014 "),sJ=n(ZDe,"A",{href:!0});var CPt=s(sJ);u2r=r(CPt,"Wav2Vec2ForAudioFrameClassification"),CPt.forEach(t),b2r=r(ZDe," (Wav2Vec2 model)"),ZDe.forEach(t),v2r=i(kl),o8=n(kl,"LI",{});var eGe=s(o8);LTe=n(eGe,"STRONG",{});var wPt=s(LTe);F2r=r(wPt,"wav2vec2-conformer"),wPt.forEach(t),T2r=r(eGe," \u2014 "),lJ=n(eGe,"A",{href:!0});var APt=s(lJ);M2r=r(APt,"Wav2Vec2ConformerForAudioFrameClassification"),APt.forEach(t),E2r=r(eGe," (Wav2Vec2-Conformer model)"),eGe.forEach(t),C2r=i(kl),r8=n(kl,"LI",{});var oGe=s(r8);yTe=n(oGe,"STRONG",{});var LPt=s(yTe);w2r=r(LPt,"wavlm"),LPt.forEach(t),A2r=r(oGe," \u2014 "),iJ=n(oGe,"A",{href:!0});var yPt=s(iJ);L2r=r(yPt,"WavLMForAudioFrameClassification"),yPt.forEach(t),y2r=r(oGe," (WavLM model)"),oGe.forEach(t),kl.forEach(t),x2r=i($a),t8=n($a,"P",{});var rGe=s(t8);$2r=r(rGe,"The model is set in evaluation mode by default using "),xTe=n(rGe,"CODE",{});var xPt=s(xTe);k2r=r(xPt,"model.eval()"),xPt.forEach(t),S2r=r(rGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Te=n(rGe,"CODE",{});var $Pt=s($Te);R2r=r($Pt,"model.train()"),$Pt.forEach(t),rGe.forEach(t),P2r=i($a),T(a8.$$.fragment,$a),$a.forEach(t),$l.forEach(t),RUe=i(f),Zd=n(f,"H2",{class:!0});var VJe=s(Zd);n8=n(VJe,"A",{id:!0,class:!0,href:!0});var kPt=s(n8);kTe=n(kPt,"SPAN",{});var SPt=s(kTe);T(_x.$$.fragment,SPt),SPt.forEach(t),kPt.forEach(t),B2r=i(VJe),STe=n(VJe,"SPAN",{});var RPt=s(STe);I2r=r(RPt,"AutoModelForCTC"),RPt.forEach(t),VJe.forEach(t),PUe=i(f),Jo=n(f,"DIV",{class:!0});var Sl=s(Jo);T(ux.$$.fragment,Sl),N2r=i(Sl),ec=n(Sl,"P",{});var Fne=s(ec);q2r=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dJ=n(Fne,"A",{href:!0});var PPt=s(dJ);j2r=r(PPt,"from_pretrained()"),PPt.forEach(t),D2r=r(Fne," class method or the "),cJ=n(Fne,"A",{href:!0});var BPt=s(cJ);G2r=r(BPt,"from_config()"),BPt.forEach(t),O2r=r(Fne,` class
method.`),Fne.forEach(t),V2r=i(Sl),bx=n(Sl,"P",{});var XJe=s(bx);X2r=r(XJe,"This class cannot be instantiated directly using "),RTe=n(XJe,"CODE",{});var IPt=s(RTe);z2r=r(IPt,"__init__()"),IPt.forEach(t),W2r=r(XJe," (throws an error)."),XJe.forEach(t),Q2r=i(Sl),$t=n(Sl,"DIV",{class:!0});var Ww=s($t);T(vx.$$.fragment,Ww),U2r=i(Ww),PTe=n(Ww,"P",{});var NPt=s(PTe);H2r=r(NPt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),NPt.forEach(t),J2r=i(Ww),oc=n(Ww,"P",{});var Tne=s(oc);Y2r=r(Tne,`Note:
Loading a model from its configuration file does `),BTe=n(Tne,"STRONG",{});var qPt=s(BTe);K2r=r(qPt,"not"),qPt.forEach(t),Z2r=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(Tne,"A",{href:!0});var jPt=s(fJ);ebr=r(jPt,"from_pretrained()"),jPt.forEach(t),obr=r(Tne," to load the model weights."),Tne.forEach(t),rbr=i(Ww),T(s8.$$.fragment,Ww),Ww.forEach(t),tbr=i(Sl),po=n(Sl,"DIV",{class:!0});var ka=s(po);T(Fx.$$.fragment,ka),abr=i(ka),ITe=n(ka,"P",{});var DPt=s(ITe);nbr=r(DPt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),DPt.forEach(t),sbr=i(ka),sn=n(ka,"P",{});var Qw=s(sn);lbr=r(Qw,"The model class to instantiate is selected based on the "),NTe=n(Qw,"CODE",{});var GPt=s(NTe);ibr=r(GPt,"model_type"),GPt.forEach(t),dbr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),qTe=n(Qw,"CODE",{});var OPt=s(qTe);cbr=r(OPt,"pretrained_model_name_or_path"),OPt.forEach(t),fbr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n(Qw,"CODE",{});var VPt=s(jTe);mbr=r(VPt,"pretrained_model_name_or_path"),VPt.forEach(t),gbr=r(Qw,":"),Qw.forEach(t),hbr=i(ka),Le=n(ka,"UL",{});var Be=s(Le);l8=n(Be,"LI",{});var tGe=s(l8);DTe=n(tGe,"STRONG",{});var XPt=s(DTe);pbr=r(XPt,"data2vec-audio"),XPt.forEach(t),_br=r(tGe," \u2014 "),mJ=n(tGe,"A",{href:!0});var zPt=s(mJ);ubr=r(zPt,"Data2VecAudioForCTC"),zPt.forEach(t),bbr=r(tGe," (Data2VecAudio model)"),tGe.forEach(t),vbr=i(Be),i8=n(Be,"LI",{});var aGe=s(i8);GTe=n(aGe,"STRONG",{});var WPt=s(GTe);Fbr=r(WPt,"hubert"),WPt.forEach(t),Tbr=r(aGe," \u2014 "),gJ=n(aGe,"A",{href:!0});var QPt=s(gJ);Mbr=r(QPt,"HubertForCTC"),QPt.forEach(t),Ebr=r(aGe," (Hubert model)"),aGe.forEach(t),Cbr=i(Be),d8=n(Be,"LI",{});var nGe=s(d8);OTe=n(nGe,"STRONG",{});var UPt=s(OTe);wbr=r(UPt,"mctct"),UPt.forEach(t),Abr=r(nGe," \u2014 "),hJ=n(nGe,"A",{href:!0});var HPt=s(hJ);Lbr=r(HPt,"MCTCTForCTC"),HPt.forEach(t),ybr=r(nGe," (M-CTC-T model)"),nGe.forEach(t),xbr=i(Be),c8=n(Be,"LI",{});var sGe=s(c8);VTe=n(sGe,"STRONG",{});var JPt=s(VTe);$br=r(JPt,"sew"),JPt.forEach(t),kbr=r(sGe," \u2014 "),pJ=n(sGe,"A",{href:!0});var YPt=s(pJ);Sbr=r(YPt,"SEWForCTC"),YPt.forEach(t),Rbr=r(sGe," (SEW model)"),sGe.forEach(t),Pbr=i(Be),f8=n(Be,"LI",{});var lGe=s(f8);XTe=n(lGe,"STRONG",{});var KPt=s(XTe);Bbr=r(KPt,"sew-d"),KPt.forEach(t),Ibr=r(lGe," \u2014 "),_J=n(lGe,"A",{href:!0});var ZPt=s(_J);Nbr=r(ZPt,"SEWDForCTC"),ZPt.forEach(t),qbr=r(lGe," (SEW-D model)"),lGe.forEach(t),jbr=i(Be),m8=n(Be,"LI",{});var iGe=s(m8);zTe=n(iGe,"STRONG",{});var eBt=s(zTe);Dbr=r(eBt,"unispeech"),eBt.forEach(t),Gbr=r(iGe," \u2014 "),uJ=n(iGe,"A",{href:!0});var oBt=s(uJ);Obr=r(oBt,"UniSpeechForCTC"),oBt.forEach(t),Vbr=r(iGe," (UniSpeech model)"),iGe.forEach(t),Xbr=i(Be),g8=n(Be,"LI",{});var dGe=s(g8);WTe=n(dGe,"STRONG",{});var rBt=s(WTe);zbr=r(rBt,"unispeech-sat"),rBt.forEach(t),Wbr=r(dGe," \u2014 "),bJ=n(dGe,"A",{href:!0});var tBt=s(bJ);Qbr=r(tBt,"UniSpeechSatForCTC"),tBt.forEach(t),Ubr=r(dGe," (UniSpeechSat model)"),dGe.forEach(t),Hbr=i(Be),h8=n(Be,"LI",{});var cGe=s(h8);QTe=n(cGe,"STRONG",{});var aBt=s(QTe);Jbr=r(aBt,"wav2vec2"),aBt.forEach(t),Ybr=r(cGe," \u2014 "),vJ=n(cGe,"A",{href:!0});var nBt=s(vJ);Kbr=r(nBt,"Wav2Vec2ForCTC"),nBt.forEach(t),Zbr=r(cGe," (Wav2Vec2 model)"),cGe.forEach(t),evr=i(Be),p8=n(Be,"LI",{});var fGe=s(p8);UTe=n(fGe,"STRONG",{});var sBt=s(UTe);ovr=r(sBt,"wav2vec2-conformer"),sBt.forEach(t),rvr=r(fGe," \u2014 "),FJ=n(fGe,"A",{href:!0});var lBt=s(FJ);tvr=r(lBt,"Wav2Vec2ConformerForCTC"),lBt.forEach(t),avr=r(fGe," (Wav2Vec2-Conformer model)"),fGe.forEach(t),nvr=i(Be),_8=n(Be,"LI",{});var mGe=s(_8);HTe=n(mGe,"STRONG",{});var iBt=s(HTe);svr=r(iBt,"wavlm"),iBt.forEach(t),lvr=r(mGe," \u2014 "),TJ=n(mGe,"A",{href:!0});var dBt=s(TJ);ivr=r(dBt,"WavLMForCTC"),dBt.forEach(t),dvr=r(mGe," (WavLM model)"),mGe.forEach(t),Be.forEach(t),cvr=i(ka),u8=n(ka,"P",{});var gGe=s(u8);fvr=r(gGe,"The model is set in evaluation mode by default using "),JTe=n(gGe,"CODE",{});var cBt=s(JTe);mvr=r(cBt,"model.eval()"),cBt.forEach(t),gvr=r(gGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),YTe=n(gGe,"CODE",{});var fBt=s(YTe);hvr=r(fBt,"model.train()"),fBt.forEach(t),gGe.forEach(t),pvr=i(ka),T(b8.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),BUe=i(f),rc=n(f,"H2",{class:!0});var zJe=s(rc);v8=n(zJe,"A",{id:!0,class:!0,href:!0});var mBt=s(v8);KTe=n(mBt,"SPAN",{});var gBt=s(KTe);T(Tx.$$.fragment,gBt),gBt.forEach(t),mBt.forEach(t),_vr=i(zJe),ZTe=n(zJe,"SPAN",{});var hBt=s(ZTe);uvr=r(hBt,"AutoModelForSpeechSeq2Seq"),hBt.forEach(t),zJe.forEach(t),IUe=i(f),Yo=n(f,"DIV",{class:!0});var Rl=s(Yo);T(Mx.$$.fragment,Rl),bvr=i(Rl),tc=n(Rl,"P",{});var Mne=s(tc);vvr=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MJ=n(Mne,"A",{href:!0});var pBt=s(MJ);Fvr=r(pBt,"from_pretrained()"),pBt.forEach(t),Tvr=r(Mne," class method or the "),EJ=n(Mne,"A",{href:!0});var _Bt=s(EJ);Mvr=r(_Bt,"from_config()"),_Bt.forEach(t),Evr=r(Mne,` class
method.`),Mne.forEach(t),Cvr=i(Rl),Ex=n(Rl,"P",{});var WJe=s(Ex);wvr=r(WJe,"This class cannot be instantiated directly using "),e7e=n(WJe,"CODE",{});var uBt=s(e7e);Avr=r(uBt,"__init__()"),uBt.forEach(t),Lvr=r(WJe," (throws an error)."),WJe.forEach(t),yvr=i(Rl),kt=n(Rl,"DIV",{class:!0});var Uw=s(kt);T(Cx.$$.fragment,Uw),xvr=i(Uw),o7e=n(Uw,"P",{});var bBt=s(o7e);$vr=r(bBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bBt.forEach(t),kvr=i(Uw),ac=n(Uw,"P",{});var Ene=s(ac);Svr=r(Ene,`Note:
Loading a model from its configuration file does `),r7e=n(Ene,"STRONG",{});var vBt=s(r7e);Rvr=r(vBt,"not"),vBt.forEach(t),Pvr=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=n(Ene,"A",{href:!0});var FBt=s(CJ);Bvr=r(FBt,"from_pretrained()"),FBt.forEach(t),Ivr=r(Ene," to load the model weights."),Ene.forEach(t),Nvr=i(Uw),T(F8.$$.fragment,Uw),Uw.forEach(t),qvr=i(Rl),_o=n(Rl,"DIV",{class:!0});var Sa=s(_o);T(wx.$$.fragment,Sa),jvr=i(Sa),t7e=n(Sa,"P",{});var TBt=s(t7e);Dvr=r(TBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TBt.forEach(t),Gvr=i(Sa),ln=n(Sa,"P",{});var Hw=s(ln);Ovr=r(Hw,"The model class to instantiate is selected based on the "),a7e=n(Hw,"CODE",{});var MBt=s(a7e);Vvr=r(MBt,"model_type"),MBt.forEach(t),Xvr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),n7e=n(Hw,"CODE",{});var EBt=s(n7e);zvr=r(EBt,"pretrained_model_name_or_path"),EBt.forEach(t),Wvr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(Hw,"CODE",{});var CBt=s(s7e);Qvr=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),Uvr=r(Hw,":"),Hw.forEach(t),Hvr=i(Sa),Ax=n(Sa,"UL",{});var QJe=s(Ax);T8=n(QJe,"LI",{});var hGe=s(T8);l7e=n(hGe,"STRONG",{});var wBt=s(l7e);Jvr=r(wBt,"speech-encoder-decoder"),wBt.forEach(t),Yvr=r(hGe," \u2014 "),wJ=n(hGe,"A",{href:!0});var ABt=s(wJ);Kvr=r(ABt,"SpeechEncoderDecoderModel"),ABt.forEach(t),Zvr=r(hGe," (Speech Encoder decoder model)"),hGe.forEach(t),e6r=i(QJe),M8=n(QJe,"LI",{});var pGe=s(M8);i7e=n(pGe,"STRONG",{});var LBt=s(i7e);o6r=r(LBt,"speech_to_text"),LBt.forEach(t),r6r=r(pGe," \u2014 "),AJ=n(pGe,"A",{href:!0});var yBt=s(AJ);t6r=r(yBt,"Speech2TextForConditionalGeneration"),yBt.forEach(t),a6r=r(pGe," (Speech2Text model)"),pGe.forEach(t),QJe.forEach(t),n6r=i(Sa),E8=n(Sa,"P",{});var _Ge=s(E8);s6r=r(_Ge,"The model is set in evaluation mode by default using "),d7e=n(_Ge,"CODE",{});var xBt=s(d7e);l6r=r(xBt,"model.eval()"),xBt.forEach(t),i6r=r(_Ge,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c7e=n(_Ge,"CODE",{});var $Bt=s(c7e);d6r=r($Bt,"model.train()"),$Bt.forEach(t),_Ge.forEach(t),c6r=i(Sa),T(C8.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),NUe=i(f),nc=n(f,"H2",{class:!0});var UJe=s(nc);w8=n(UJe,"A",{id:!0,class:!0,href:!0});var kBt=s(w8);f7e=n(kBt,"SPAN",{});var SBt=s(f7e);T(Lx.$$.fragment,SBt),SBt.forEach(t),kBt.forEach(t),f6r=i(UJe),m7e=n(UJe,"SPAN",{});var RBt=s(m7e);m6r=r(RBt,"AutoModelForAudioXVector"),RBt.forEach(t),UJe.forEach(t),qUe=i(f),Ko=n(f,"DIV",{class:!0});var Pl=s(Ko);T(yx.$$.fragment,Pl),g6r=i(Pl),sc=n(Pl,"P",{});var Cne=s(sc);h6r=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),LJ=n(Cne,"A",{href:!0});var PBt=s(LJ);p6r=r(PBt,"from_pretrained()"),PBt.forEach(t),_6r=r(Cne," class method or the "),yJ=n(Cne,"A",{href:!0});var BBt=s(yJ);u6r=r(BBt,"from_config()"),BBt.forEach(t),b6r=r(Cne,` class
method.`),Cne.forEach(t),v6r=i(Pl),xx=n(Pl,"P",{});var HJe=s(xx);F6r=r(HJe,"This class cannot be instantiated directly using "),g7e=n(HJe,"CODE",{});var IBt=s(g7e);T6r=r(IBt,"__init__()"),IBt.forEach(t),M6r=r(HJe," (throws an error)."),HJe.forEach(t),E6r=i(Pl),St=n(Pl,"DIV",{class:!0});var Jw=s(St);T($x.$$.fragment,Jw),C6r=i(Jw),h7e=n(Jw,"P",{});var NBt=s(h7e);w6r=r(NBt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),NBt.forEach(t),A6r=i(Jw),lc=n(Jw,"P",{});var wne=s(lc);L6r=r(wne,`Note:
Loading a model from its configuration file does `),p7e=n(wne,"STRONG",{});var qBt=s(p7e);y6r=r(qBt,"not"),qBt.forEach(t),x6r=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(wne,"A",{href:!0});var jBt=s(xJ);$6r=r(jBt,"from_pretrained()"),jBt.forEach(t),k6r=r(wne," to load the model weights."),wne.forEach(t),S6r=i(Jw),T(A8.$$.fragment,Jw),Jw.forEach(t),R6r=i(Pl),uo=n(Pl,"DIV",{class:!0});var Ra=s(uo);T(kx.$$.fragment,Ra),P6r=i(Ra),_7e=n(Ra,"P",{});var DBt=s(_7e);B6r=r(DBt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),DBt.forEach(t),I6r=i(Ra),dn=n(Ra,"P",{});var Yw=s(dn);N6r=r(Yw,"The model class to instantiate is selected based on the "),u7e=n(Yw,"CODE",{});var GBt=s(u7e);q6r=r(GBt,"model_type"),GBt.forEach(t),j6r=r(Yw,` property of the config object (either
passed as an argument or loaded from `),b7e=n(Yw,"CODE",{});var OBt=s(b7e);D6r=r(OBt,"pretrained_model_name_or_path"),OBt.forEach(t),G6r=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v7e=n(Yw,"CODE",{});var VBt=s(v7e);O6r=r(VBt,"pretrained_model_name_or_path"),VBt.forEach(t),V6r=r(Yw,":"),Yw.forEach(t),X6r=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);L8=n(Bl,"LI",{});var uGe=s(L8);F7e=n(uGe,"STRONG",{});var XBt=s(F7e);z6r=r(XBt,"data2vec-audio"),XBt.forEach(t),W6r=r(uGe," \u2014 "),$J=n(uGe,"A",{href:!0});var zBt=s($J);Q6r=r(zBt,"Data2VecAudioForXVector"),zBt.forEach(t),U6r=r(uGe," (Data2VecAudio model)"),uGe.forEach(t),H6r=i(Bl),y8=n(Bl,"LI",{});var bGe=s(y8);T7e=n(bGe,"STRONG",{});var WBt=s(T7e);J6r=r(WBt,"unispeech-sat"),WBt.forEach(t),Y6r=r(bGe," \u2014 "),kJ=n(bGe,"A",{href:!0});var QBt=s(kJ);K6r=r(QBt,"UniSpeechSatForXVector"),QBt.forEach(t),Z6r=r(bGe," (UniSpeechSat model)"),bGe.forEach(t),eFr=i(Bl),x8=n(Bl,"LI",{});var vGe=s(x8);M7e=n(vGe,"STRONG",{});var UBt=s(M7e);oFr=r(UBt,"wav2vec2"),UBt.forEach(t),rFr=r(vGe," \u2014 "),SJ=n(vGe,"A",{href:!0});var HBt=s(SJ);tFr=r(HBt,"Wav2Vec2ForXVector"),HBt.forEach(t),aFr=r(vGe," (Wav2Vec2 model)"),vGe.forEach(t),nFr=i(Bl),$8=n(Bl,"LI",{});var FGe=s($8);E7e=n(FGe,"STRONG",{});var JBt=s(E7e);sFr=r(JBt,"wav2vec2-conformer"),JBt.forEach(t),lFr=r(FGe," \u2014 "),RJ=n(FGe,"A",{href:!0});var YBt=s(RJ);iFr=r(YBt,"Wav2Vec2ConformerForXVector"),YBt.forEach(t),dFr=r(FGe," (Wav2Vec2-Conformer model)"),FGe.forEach(t),cFr=i(Bl),k8=n(Bl,"LI",{});var TGe=s(k8);C7e=n(TGe,"STRONG",{});var KBt=s(C7e);fFr=r(KBt,"wavlm"),KBt.forEach(t),mFr=r(TGe," \u2014 "),PJ=n(TGe,"A",{href:!0});var ZBt=s(PJ);gFr=r(ZBt,"WavLMForXVector"),ZBt.forEach(t),hFr=r(TGe," (WavLM model)"),TGe.forEach(t),Bl.forEach(t),pFr=i(Ra),S8=n(Ra,"P",{});var MGe=s(S8);_Fr=r(MGe,"The model is set in evaluation mode by default using "),w7e=n(MGe,"CODE",{});var eIt=s(w7e);uFr=r(eIt,"model.eval()"),eIt.forEach(t),bFr=r(MGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A7e=n(MGe,"CODE",{});var oIt=s(A7e);vFr=r(oIt,"model.train()"),oIt.forEach(t),MGe.forEach(t),FFr=i(Ra),T(R8.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),jUe=i(f),ic=n(f,"H2",{class:!0});var JJe=s(ic);P8=n(JJe,"A",{id:!0,class:!0,href:!0});var rIt=s(P8);L7e=n(rIt,"SPAN",{});var tIt=s(L7e);T(Sx.$$.fragment,tIt),tIt.forEach(t),rIt.forEach(t),TFr=i(JJe),y7e=n(JJe,"SPAN",{});var aIt=s(y7e);MFr=r(aIt,"AutoModelForMaskedImageModeling"),aIt.forEach(t),JJe.forEach(t),DUe=i(f),Zo=n(f,"DIV",{class:!0});var Il=s(Zo);T(Rx.$$.fragment,Il),EFr=i(Il),dc=n(Il,"P",{});var Ane=s(dc);CFr=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BJ=n(Ane,"A",{href:!0});var nIt=s(BJ);wFr=r(nIt,"from_pretrained()"),nIt.forEach(t),AFr=r(Ane," class method or the "),IJ=n(Ane,"A",{href:!0});var sIt=s(IJ);LFr=r(sIt,"from_config()"),sIt.forEach(t),yFr=r(Ane,` class
method.`),Ane.forEach(t),xFr=i(Il),Px=n(Il,"P",{});var YJe=s(Px);$Fr=r(YJe,"This class cannot be instantiated directly using "),x7e=n(YJe,"CODE",{});var lIt=s(x7e);kFr=r(lIt,"__init__()"),lIt.forEach(t),SFr=r(YJe," (throws an error)."),YJe.forEach(t),RFr=i(Il),Rt=n(Il,"DIV",{class:!0});var Kw=s(Rt);T(Bx.$$.fragment,Kw),PFr=i(Kw),$7e=n(Kw,"P",{});var iIt=s($7e);BFr=r(iIt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),iIt.forEach(t),IFr=i(Kw),cc=n(Kw,"P",{});var Lne=s(cc);NFr=r(Lne,`Note:
Loading a model from its configuration file does `),k7e=n(Lne,"STRONG",{});var dIt=s(k7e);qFr=r(dIt,"not"),dIt.forEach(t),jFr=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(Lne,"A",{href:!0});var cIt=s(NJ);DFr=r(cIt,"from_pretrained()"),cIt.forEach(t),GFr=r(Lne," to load the model weights."),Lne.forEach(t),OFr=i(Kw),T(B8.$$.fragment,Kw),Kw.forEach(t),VFr=i(Il),bo=n(Il,"DIV",{class:!0});var Pa=s(bo);T(Ix.$$.fragment,Pa),XFr=i(Pa),S7e=n(Pa,"P",{});var fIt=s(S7e);zFr=r(fIt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fIt.forEach(t),WFr=i(Pa),cn=n(Pa,"P",{});var Zw=s(cn);QFr=r(Zw,"The model class to instantiate is selected based on the "),R7e=n(Zw,"CODE",{});var mIt=s(R7e);UFr=r(mIt,"model_type"),mIt.forEach(t),HFr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),P7e=n(Zw,"CODE",{});var gIt=s(P7e);JFr=r(gIt,"pretrained_model_name_or_path"),gIt.forEach(t),YFr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B7e=n(Zw,"CODE",{});var hIt=s(B7e);KFr=r(hIt,"pretrained_model_name_or_path"),hIt.forEach(t),ZFr=r(Zw,":"),Zw.forEach(t),eTr=i(Pa),fn=n(Pa,"UL",{});var eA=s(fn);I8=n(eA,"LI",{});var EGe=s(I8);I7e=n(EGe,"STRONG",{});var pIt=s(I7e);oTr=r(pIt,"deit"),pIt.forEach(t),rTr=r(EGe," \u2014 "),qJ=n(EGe,"A",{href:!0});var _It=s(qJ);tTr=r(_It,"DeiTForMaskedImageModeling"),_It.forEach(t),aTr=r(EGe," (DeiT model)"),EGe.forEach(t),nTr=i(eA),N8=n(eA,"LI",{});var CGe=s(N8);N7e=n(CGe,"STRONG",{});var uIt=s(N7e);sTr=r(uIt,"swin"),uIt.forEach(t),lTr=r(CGe," \u2014 "),jJ=n(CGe,"A",{href:!0});var bIt=s(jJ);iTr=r(bIt,"SwinForMaskedImageModeling"),bIt.forEach(t),dTr=r(CGe," (Swin Transformer model)"),CGe.forEach(t),cTr=i(eA),q8=n(eA,"LI",{});var wGe=s(q8);q7e=n(wGe,"STRONG",{});var vIt=s(q7e);fTr=r(vIt,"swinv2"),vIt.forEach(t),mTr=r(wGe," \u2014 "),DJ=n(wGe,"A",{href:!0});var FIt=s(DJ);gTr=r(FIt,"Swinv2ForMaskedImageModeling"),FIt.forEach(t),hTr=r(wGe," (Swin Transformer V2 model)"),wGe.forEach(t),pTr=i(eA),j8=n(eA,"LI",{});var AGe=s(j8);j7e=n(AGe,"STRONG",{});var TIt=s(j7e);_Tr=r(TIt,"vit"),TIt.forEach(t),uTr=r(AGe," \u2014 "),GJ=n(AGe,"A",{href:!0});var MIt=s(GJ);bTr=r(MIt,"ViTForMaskedImageModeling"),MIt.forEach(t),vTr=r(AGe," (ViT model)"),AGe.forEach(t),eA.forEach(t),FTr=i(Pa),D8=n(Pa,"P",{});var LGe=s(D8);TTr=r(LGe,"The model is set in evaluation mode by default using "),D7e=n(LGe,"CODE",{});var EIt=s(D7e);MTr=r(EIt,"model.eval()"),EIt.forEach(t),ETr=r(LGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G7e=n(LGe,"CODE",{});var CIt=s(G7e);CTr=r(CIt,"model.train()"),CIt.forEach(t),LGe.forEach(t),wTr=i(Pa),T(G8.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),GUe=i(f),fc=n(f,"H2",{class:!0});var KJe=s(fc);O8=n(KJe,"A",{id:!0,class:!0,href:!0});var wIt=s(O8);O7e=n(wIt,"SPAN",{});var AIt=s(O7e);T(Nx.$$.fragment,AIt),AIt.forEach(t),wIt.forEach(t),ATr=i(KJe),V7e=n(KJe,"SPAN",{});var LIt=s(V7e);LTr=r(LIt,"AutoModelForObjectDetection"),LIt.forEach(t),KJe.forEach(t),OUe=i(f),er=n(f,"DIV",{class:!0});var Nl=s(er);T(qx.$$.fragment,Nl),yTr=i(Nl),mc=n(Nl,"P",{});var yne=s(mc);xTr=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OJ=n(yne,"A",{href:!0});var yIt=s(OJ);$Tr=r(yIt,"from_pretrained()"),yIt.forEach(t),kTr=r(yne," class method or the "),VJ=n(yne,"A",{href:!0});var xIt=s(VJ);STr=r(xIt,"from_config()"),xIt.forEach(t),RTr=r(yne,` class
method.`),yne.forEach(t),PTr=i(Nl),jx=n(Nl,"P",{});var ZJe=s(jx);BTr=r(ZJe,"This class cannot be instantiated directly using "),X7e=n(ZJe,"CODE",{});var $It=s(X7e);ITr=r($It,"__init__()"),$It.forEach(t),NTr=r(ZJe," (throws an error)."),ZJe.forEach(t),qTr=i(Nl),Pt=n(Nl,"DIV",{class:!0});var oA=s(Pt);T(Dx.$$.fragment,oA),jTr=i(oA),z7e=n(oA,"P",{});var kIt=s(z7e);DTr=r(kIt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),kIt.forEach(t),GTr=i(oA),gc=n(oA,"P",{});var xne=s(gc);OTr=r(xne,`Note:
Loading a model from its configuration file does `),W7e=n(xne,"STRONG",{});var SIt=s(W7e);VTr=r(SIt,"not"),SIt.forEach(t),XTr=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(xne,"A",{href:!0});var RIt=s(XJ);zTr=r(RIt,"from_pretrained()"),RIt.forEach(t),WTr=r(xne," to load the model weights."),xne.forEach(t),QTr=i(oA),T(V8.$$.fragment,oA),oA.forEach(t),UTr=i(Nl),vo=n(Nl,"DIV",{class:!0});var Ba=s(vo);T(Gx.$$.fragment,Ba),HTr=i(Ba),Q7e=n(Ba,"P",{});var PIt=s(Q7e);JTr=r(PIt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),PIt.forEach(t),YTr=i(Ba),mn=n(Ba,"P",{});var rA=s(mn);KTr=r(rA,"The model class to instantiate is selected based on the "),U7e=n(rA,"CODE",{});var BIt=s(U7e);ZTr=r(BIt,"model_type"),BIt.forEach(t),e7r=r(rA,` property of the config object (either
passed as an argument or loaded from `),H7e=n(rA,"CODE",{});var IIt=s(H7e);o7r=r(IIt,"pretrained_model_name_or_path"),IIt.forEach(t),r7r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=n(rA,"CODE",{});var NIt=s(J7e);t7r=r(NIt,"pretrained_model_name_or_path"),NIt.forEach(t),a7r=r(rA,":"),rA.forEach(t),n7r=i(Ba),Ox=n(Ba,"UL",{});var eYe=s(Ox);X8=n(eYe,"LI",{});var yGe=s(X8);Y7e=n(yGe,"STRONG",{});var qIt=s(Y7e);s7r=r(qIt,"detr"),qIt.forEach(t),l7r=r(yGe," \u2014 "),zJ=n(yGe,"A",{href:!0});var jIt=s(zJ);i7r=r(jIt,"DetrForObjectDetection"),jIt.forEach(t),d7r=r(yGe," (DETR model)"),yGe.forEach(t),c7r=i(eYe),z8=n(eYe,"LI",{});var xGe=s(z8);K7e=n(xGe,"STRONG",{});var DIt=s(K7e);f7r=r(DIt,"yolos"),DIt.forEach(t),m7r=r(xGe," \u2014 "),WJ=n(xGe,"A",{href:!0});var GIt=s(WJ);g7r=r(GIt,"YolosForObjectDetection"),GIt.forEach(t),h7r=r(xGe," (YOLOS model)"),xGe.forEach(t),eYe.forEach(t),p7r=i(Ba),W8=n(Ba,"P",{});var $Ge=s(W8);_7r=r($Ge,"The model is set in evaluation mode by default using "),Z7e=n($Ge,"CODE",{});var OIt=s(Z7e);u7r=r(OIt,"model.eval()"),OIt.forEach(t),b7r=r($Ge,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e8e=n($Ge,"CODE",{});var VIt=s(e8e);v7r=r(VIt,"model.train()"),VIt.forEach(t),$Ge.forEach(t),F7r=i(Ba),T(Q8.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),VUe=i(f),hc=n(f,"H2",{class:!0});var oYe=s(hc);U8=n(oYe,"A",{id:!0,class:!0,href:!0});var XIt=s(U8);o8e=n(XIt,"SPAN",{});var zIt=s(o8e);T(Vx.$$.fragment,zIt),zIt.forEach(t),XIt.forEach(t),T7r=i(oYe),r8e=n(oYe,"SPAN",{});var WIt=s(r8e);M7r=r(WIt,"AutoModelForImageSegmentation"),WIt.forEach(t),oYe.forEach(t),XUe=i(f),or=n(f,"DIV",{class:!0});var ql=s(or);T(Xx.$$.fragment,ql),E7r=i(ql),pc=n(ql,"P",{});var $ne=s(pc);C7r=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),QJ=n($ne,"A",{href:!0});var QIt=s(QJ);w7r=r(QIt,"from_pretrained()"),QIt.forEach(t),A7r=r($ne," class method or the "),UJ=n($ne,"A",{href:!0});var UIt=s(UJ);L7r=r(UIt,"from_config()"),UIt.forEach(t),y7r=r($ne,` class
method.`),$ne.forEach(t),x7r=i(ql),zx=n(ql,"P",{});var rYe=s(zx);$7r=r(rYe,"This class cannot be instantiated directly using "),t8e=n(rYe,"CODE",{});var HIt=s(t8e);k7r=r(HIt,"__init__()"),HIt.forEach(t),S7r=r(rYe," (throws an error)."),rYe.forEach(t),R7r=i(ql),Bt=n(ql,"DIV",{class:!0});var tA=s(Bt);T(Wx.$$.fragment,tA),P7r=i(tA),a8e=n(tA,"P",{});var JIt=s(a8e);B7r=r(JIt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),JIt.forEach(t),I7r=i(tA),_c=n(tA,"P",{});var kne=s(_c);N7r=r(kne,`Note:
Loading a model from its configuration file does `),n8e=n(kne,"STRONG",{});var YIt=s(n8e);q7r=r(YIt,"not"),YIt.forEach(t),j7r=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(kne,"A",{href:!0});var KIt=s(HJ);D7r=r(KIt,"from_pretrained()"),KIt.forEach(t),G7r=r(kne," to load the model weights."),kne.forEach(t),O7r=i(tA),T(H8.$$.fragment,tA),tA.forEach(t),V7r=i(ql),Fo=n(ql,"DIV",{class:!0});var Ia=s(Fo);T(Qx.$$.fragment,Ia),X7r=i(Ia),s8e=n(Ia,"P",{});var ZIt=s(s8e);z7r=r(ZIt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ZIt.forEach(t),W7r=i(Ia),gn=n(Ia,"P",{});var aA=s(gn);Q7r=r(aA,"The model class to instantiate is selected based on the "),l8e=n(aA,"CODE",{});var eNt=s(l8e);U7r=r(eNt,"model_type"),eNt.forEach(t),H7r=r(aA,` property of the config object (either
passed as an argument or loaded from `),i8e=n(aA,"CODE",{});var oNt=s(i8e);J7r=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),Y7r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d8e=n(aA,"CODE",{});var rNt=s(d8e);K7r=r(rNt,"pretrained_model_name_or_path"),rNt.forEach(t),Z7r=r(aA,":"),aA.forEach(t),e8r=i(Ia),c8e=n(Ia,"UL",{});var tNt=s(c8e);J8=n(tNt,"LI",{});var kGe=s(J8);f8e=n(kGe,"STRONG",{});var aNt=s(f8e);o8r=r(aNt,"detr"),aNt.forEach(t),r8r=r(kGe," \u2014 "),JJ=n(kGe,"A",{href:!0});var nNt=s(JJ);t8r=r(nNt,"DetrForSegmentation"),nNt.forEach(t),a8r=r(kGe," (DETR model)"),kGe.forEach(t),tNt.forEach(t),n8r=i(Ia),Y8=n(Ia,"P",{});var SGe=s(Y8);s8r=r(SGe,"The model is set in evaluation mode by default using "),m8e=n(SGe,"CODE",{});var sNt=s(m8e);l8r=r(sNt,"model.eval()"),sNt.forEach(t),i8r=r(SGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g8e=n(SGe,"CODE",{});var lNt=s(g8e);d8r=r(lNt,"model.train()"),lNt.forEach(t),SGe.forEach(t),c8r=i(Ia),T(K8.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),zUe=i(f),uc=n(f,"H2",{class:!0});var tYe=s(uc);Z8=n(tYe,"A",{id:!0,class:!0,href:!0});var iNt=s(Z8);h8e=n(iNt,"SPAN",{});var dNt=s(h8e);T(Ux.$$.fragment,dNt),dNt.forEach(t),iNt.forEach(t),f8r=i(tYe),p8e=n(tYe,"SPAN",{});var cNt=s(p8e);m8r=r(cNt,"AutoModelForSemanticSegmentation"),cNt.forEach(t),tYe.forEach(t),WUe=i(f),rr=n(f,"DIV",{class:!0});var jl=s(rr);T(Hx.$$.fragment,jl),g8r=i(jl),bc=n(jl,"P",{});var Sne=s(bc);h8r=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YJ=n(Sne,"A",{href:!0});var fNt=s(YJ);p8r=r(fNt,"from_pretrained()"),fNt.forEach(t),_8r=r(Sne," class method or the "),KJ=n(Sne,"A",{href:!0});var mNt=s(KJ);u8r=r(mNt,"from_config()"),mNt.forEach(t),b8r=r(Sne,` class
method.`),Sne.forEach(t),v8r=i(jl),Jx=n(jl,"P",{});var aYe=s(Jx);F8r=r(aYe,"This class cannot be instantiated directly using "),_8e=n(aYe,"CODE",{});var gNt=s(_8e);T8r=r(gNt,"__init__()"),gNt.forEach(t),M8r=r(aYe," (throws an error)."),aYe.forEach(t),E8r=i(jl),It=n(jl,"DIV",{class:!0});var nA=s(It);T(Yx.$$.fragment,nA),C8r=i(nA),u8e=n(nA,"P",{});var hNt=s(u8e);w8r=r(hNt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),hNt.forEach(t),A8r=i(nA),vc=n(nA,"P",{});var Rne=s(vc);L8r=r(Rne,`Note:
Loading a model from its configuration file does `),b8e=n(Rne,"STRONG",{});var pNt=s(b8e);y8r=r(pNt,"not"),pNt.forEach(t),x8r=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(Rne,"A",{href:!0});var _Nt=s(ZJ);$8r=r(_Nt,"from_pretrained()"),_Nt.forEach(t),k8r=r(Rne," to load the model weights."),Rne.forEach(t),S8r=i(nA),T(e9.$$.fragment,nA),nA.forEach(t),R8r=i(jl),To=n(jl,"DIV",{class:!0});var Na=s(To);T(Kx.$$.fragment,Na),P8r=i(Na),v8e=n(Na,"P",{});var uNt=s(v8e);B8r=r(uNt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),uNt.forEach(t),I8r=i(Na),hn=n(Na,"P",{});var sA=s(hn);N8r=r(sA,"The model class to instantiate is selected based on the "),F8e=n(sA,"CODE",{});var bNt=s(F8e);q8r=r(bNt,"model_type"),bNt.forEach(t),j8r=r(sA,` property of the config object (either
passed as an argument or loaded from `),T8e=n(sA,"CODE",{});var vNt=s(T8e);D8r=r(vNt,"pretrained_model_name_or_path"),vNt.forEach(t),G8r=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M8e=n(sA,"CODE",{});var FNt=s(M8e);O8r=r(FNt,"pretrained_model_name_or_path"),FNt.forEach(t),V8r=r(sA,":"),sA.forEach(t),X8r=i(Na),it=n(Na,"UL",{});var Dl=s(it);o9=n(Dl,"LI",{});var RGe=s(o9);E8e=n(RGe,"STRONG",{});var TNt=s(E8e);z8r=r(TNt,"beit"),TNt.forEach(t),W8r=r(RGe," \u2014 "),eY=n(RGe,"A",{href:!0});var MNt=s(eY);Q8r=r(MNt,"BeitForSemanticSegmentation"),MNt.forEach(t),U8r=r(RGe," (BEiT model)"),RGe.forEach(t),H8r=i(Dl),r9=n(Dl,"LI",{});var PGe=s(r9);C8e=n(PGe,"STRONG",{});var ENt=s(C8e);J8r=r(ENt,"data2vec-vision"),ENt.forEach(t),Y8r=r(PGe," \u2014 "),oY=n(PGe,"A",{href:!0});var CNt=s(oY);K8r=r(CNt,"Data2VecVisionForSemanticSegmentation"),CNt.forEach(t),Z8r=r(PGe," (Data2VecVision model)"),PGe.forEach(t),e9r=i(Dl),t9=n(Dl,"LI",{});var BGe=s(t9);w8e=n(BGe,"STRONG",{});var wNt=s(w8e);o9r=r(wNt,"dpt"),wNt.forEach(t),r9r=r(BGe," \u2014 "),rY=n(BGe,"A",{href:!0});var ANt=s(rY);t9r=r(ANt,"DPTForSemanticSegmentation"),ANt.forEach(t),a9r=r(BGe," (DPT model)"),BGe.forEach(t),n9r=i(Dl),a9=n(Dl,"LI",{});var IGe=s(a9);A8e=n(IGe,"STRONG",{});var LNt=s(A8e);s9r=r(LNt,"mobilevit"),LNt.forEach(t),l9r=r(IGe," \u2014 "),tY=n(IGe,"A",{href:!0});var yNt=s(tY);i9r=r(yNt,"MobileViTForSemanticSegmentation"),yNt.forEach(t),d9r=r(IGe," (MobileViT model)"),IGe.forEach(t),c9r=i(Dl),n9=n(Dl,"LI",{});var NGe=s(n9);L8e=n(NGe,"STRONG",{});var xNt=s(L8e);f9r=r(xNt,"segformer"),xNt.forEach(t),m9r=r(NGe," \u2014 "),aY=n(NGe,"A",{href:!0});var $Nt=s(aY);g9r=r($Nt,"SegformerForSemanticSegmentation"),$Nt.forEach(t),h9r=r(NGe," (SegFormer model)"),NGe.forEach(t),Dl.forEach(t),p9r=i(Na),s9=n(Na,"P",{});var qGe=s(s9);_9r=r(qGe,"The model is set in evaluation mode by default using "),y8e=n(qGe,"CODE",{});var kNt=s(y8e);u9r=r(kNt,"model.eval()"),kNt.forEach(t),b9r=r(qGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x8e=n(qGe,"CODE",{});var SNt=s(x8e);v9r=r(SNt,"model.train()"),SNt.forEach(t),qGe.forEach(t),F9r=i(Na),T(l9.$$.fragment,Na),Na.forEach(t),jl.forEach(t),QUe=i(f),Fc=n(f,"H2",{class:!0});var nYe=s(Fc);i9=n(nYe,"A",{id:!0,class:!0,href:!0});var RNt=s(i9);$8e=n(RNt,"SPAN",{});var PNt=s($8e);T(Zx.$$.fragment,PNt),PNt.forEach(t),RNt.forEach(t),T9r=i(nYe),k8e=n(nYe,"SPAN",{});var BNt=s(k8e);M9r=r(BNt,"AutoModelForInstanceSegmentation"),BNt.forEach(t),nYe.forEach(t),UUe=i(f),tr=n(f,"DIV",{class:!0});var Gl=s(tr);T(e$.$$.fragment,Gl),E9r=i(Gl),Tc=n(Gl,"P",{});var Pne=s(Tc);C9r=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nY=n(Pne,"A",{href:!0});var INt=s(nY);w9r=r(INt,"from_pretrained()"),INt.forEach(t),A9r=r(Pne," class method or the "),sY=n(Pne,"A",{href:!0});var NNt=s(sY);L9r=r(NNt,"from_config()"),NNt.forEach(t),y9r=r(Pne,` class
method.`),Pne.forEach(t),x9r=i(Gl),o$=n(Gl,"P",{});var sYe=s(o$);$9r=r(sYe,"This class cannot be instantiated directly using "),S8e=n(sYe,"CODE",{});var qNt=s(S8e);k9r=r(qNt,"__init__()"),qNt.forEach(t),S9r=r(sYe," (throws an error)."),sYe.forEach(t),R9r=i(Gl),Nt=n(Gl,"DIV",{class:!0});var lA=s(Nt);T(r$.$$.fragment,lA),P9r=i(lA),R8e=n(lA,"P",{});var jNt=s(R8e);B9r=r(jNt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),jNt.forEach(t),I9r=i(lA),Mc=n(lA,"P",{});var Bne=s(Mc);N9r=r(Bne,`Note:
Loading a model from its configuration file does `),P8e=n(Bne,"STRONG",{});var DNt=s(P8e);q9r=r(DNt,"not"),DNt.forEach(t),j9r=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(Bne,"A",{href:!0});var GNt=s(lY);D9r=r(GNt,"from_pretrained()"),GNt.forEach(t),G9r=r(Bne," to load the model weights."),Bne.forEach(t),O9r=i(lA),T(d9.$$.fragment,lA),lA.forEach(t),V9r=i(Gl),Mo=n(Gl,"DIV",{class:!0});var qa=s(Mo);T(t$.$$.fragment,qa),X9r=i(qa),B8e=n(qa,"P",{});var ONt=s(B8e);z9r=r(ONt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ONt.forEach(t),W9r=i(qa),pn=n(qa,"P",{});var iA=s(pn);Q9r=r(iA,"The model class to instantiate is selected based on the "),I8e=n(iA,"CODE",{});var VNt=s(I8e);U9r=r(VNt,"model_type"),VNt.forEach(t),H9r=r(iA,` property of the config object (either
passed as an argument or loaded from `),N8e=n(iA,"CODE",{});var XNt=s(N8e);J9r=r(XNt,"pretrained_model_name_or_path"),XNt.forEach(t),Y9r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q8e=n(iA,"CODE",{});var zNt=s(q8e);K9r=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),Z9r=r(iA,":"),iA.forEach(t),eMr=i(qa),j8e=n(qa,"UL",{});var WNt=s(j8e);c9=n(WNt,"LI",{});var jGe=s(c9);D8e=n(jGe,"STRONG",{});var QNt=s(D8e);oMr=r(QNt,"maskformer"),QNt.forEach(t),rMr=r(jGe," \u2014 "),iY=n(jGe,"A",{href:!0});var UNt=s(iY);tMr=r(UNt,"MaskFormerForInstanceSegmentation"),UNt.forEach(t),aMr=r(jGe," (MaskFormer model)"),jGe.forEach(t),WNt.forEach(t),nMr=i(qa),f9=n(qa,"P",{});var DGe=s(f9);sMr=r(DGe,"The model is set in evaluation mode by default using "),G8e=n(DGe,"CODE",{});var HNt=s(G8e);lMr=r(HNt,"model.eval()"),HNt.forEach(t),iMr=r(DGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O8e=n(DGe,"CODE",{});var JNt=s(O8e);dMr=r(JNt,"model.train()"),JNt.forEach(t),DGe.forEach(t),cMr=i(qa),T(m9.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),HUe=i(f),Ec=n(f,"H2",{class:!0});var lYe=s(Ec);g9=n(lYe,"A",{id:!0,class:!0,href:!0});var YNt=s(g9);V8e=n(YNt,"SPAN",{});var KNt=s(V8e);T(a$.$$.fragment,KNt),KNt.forEach(t),YNt.forEach(t),fMr=i(lYe),X8e=n(lYe,"SPAN",{});var ZNt=s(X8e);mMr=r(ZNt,"TFAutoModel"),ZNt.forEach(t),lYe.forEach(t),JUe=i(f),ar=n(f,"DIV",{class:!0});var Ol=s(ar);T(n$.$$.fragment,Ol),gMr=i(Ol),Cc=n(Ol,"P",{});var Ine=s(Cc);hMr=r(Ine,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dY=n(Ine,"A",{href:!0});var eqt=s(dY);pMr=r(eqt,"from_pretrained()"),eqt.forEach(t),_Mr=r(Ine," class method or the "),cY=n(Ine,"A",{href:!0});var oqt=s(cY);uMr=r(oqt,"from_config()"),oqt.forEach(t),bMr=r(Ine,` class
method.`),Ine.forEach(t),vMr=i(Ol),s$=n(Ol,"P",{});var iYe=s(s$);FMr=r(iYe,"This class cannot be instantiated directly using "),z8e=n(iYe,"CODE",{});var rqt=s(z8e);TMr=r(rqt,"__init__()"),rqt.forEach(t),MMr=r(iYe," (throws an error)."),iYe.forEach(t),EMr=i(Ol),qt=n(Ol,"DIV",{class:!0});var dA=s(qt);T(l$.$$.fragment,dA),CMr=i(dA),W8e=n(dA,"P",{});var tqt=s(W8e);wMr=r(tqt,"Instantiates one of the base model classes of the library from a configuration."),tqt.forEach(t),AMr=i(dA),wc=n(dA,"P",{});var Nne=s(wc);LMr=r(Nne,`Note:
Loading a model from its configuration file does `),Q8e=n(Nne,"STRONG",{});var aqt=s(Q8e);yMr=r(aqt,"not"),aqt.forEach(t),xMr=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(Nne,"A",{href:!0});var nqt=s(fY);$Mr=r(nqt,"from_pretrained()"),nqt.forEach(t),kMr=r(Nne," to load the model weights."),Nne.forEach(t),SMr=i(dA),T(h9.$$.fragment,dA),dA.forEach(t),RMr=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(i$.$$.fragment,Vl),PMr=i(Vl),U8e=n(Vl,"P",{});var sqt=s(U8e);BMr=r(sqt,"Instantiate one of the base model classes of the library from a pretrained model."),sqt.forEach(t),IMr=i(Vl),_n=n(Vl,"P",{});var cA=s(_n);NMr=r(cA,"The model class to instantiate is selected based on the "),H8e=n(cA,"CODE",{});var lqt=s(H8e);qMr=r(lqt,"model_type"),lqt.forEach(t),jMr=r(cA,` property of the config object (either
passed as an argument or loaded from `),J8e=n(cA,"CODE",{});var iqt=s(J8e);DMr=r(iqt,"pretrained_model_name_or_path"),iqt.forEach(t),GMr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=n(cA,"CODE",{});var dqt=s(Y8e);OMr=r(dqt,"pretrained_model_name_or_path"),dqt.forEach(t),VMr=r(cA,":"),cA.forEach(t),XMr=i(Vl),q=n(Vl,"UL",{});var D=s(q);p9=n(D,"LI",{});var GGe=s(p9);K8e=n(GGe,"STRONG",{});var cqt=s(K8e);zMr=r(cqt,"albert"),cqt.forEach(t),WMr=r(GGe," \u2014 "),mY=n(GGe,"A",{href:!0});var fqt=s(mY);QMr=r(fqt,"TFAlbertModel"),fqt.forEach(t),UMr=r(GGe," (ALBERT model)"),GGe.forEach(t),HMr=i(D),_9=n(D,"LI",{});var OGe=s(_9);Z8e=n(OGe,"STRONG",{});var mqt=s(Z8e);JMr=r(mqt,"bart"),mqt.forEach(t),YMr=r(OGe," \u2014 "),gY=n(OGe,"A",{href:!0});var gqt=s(gY);KMr=r(gqt,"TFBartModel"),gqt.forEach(t),ZMr=r(OGe," (BART model)"),OGe.forEach(t),eEr=i(D),u9=n(D,"LI",{});var VGe=s(u9);e9e=n(VGe,"STRONG",{});var hqt=s(e9e);oEr=r(hqt,"bert"),hqt.forEach(t),rEr=r(VGe," \u2014 "),hY=n(VGe,"A",{href:!0});var pqt=s(hY);tEr=r(pqt,"TFBertModel"),pqt.forEach(t),aEr=r(VGe," (BERT model)"),VGe.forEach(t),nEr=i(D),b9=n(D,"LI",{});var XGe=s(b9);o9e=n(XGe,"STRONG",{});var _qt=s(o9e);sEr=r(_qt,"blenderbot"),_qt.forEach(t),lEr=r(XGe," \u2014 "),pY=n(XGe,"A",{href:!0});var uqt=s(pY);iEr=r(uqt,"TFBlenderbotModel"),uqt.forEach(t),dEr=r(XGe," (Blenderbot model)"),XGe.forEach(t),cEr=i(D),v9=n(D,"LI",{});var zGe=s(v9);r9e=n(zGe,"STRONG",{});var bqt=s(r9e);fEr=r(bqt,"blenderbot-small"),bqt.forEach(t),mEr=r(zGe," \u2014 "),_Y=n(zGe,"A",{href:!0});var vqt=s(_Y);gEr=r(vqt,"TFBlenderbotSmallModel"),vqt.forEach(t),hEr=r(zGe," (BlenderbotSmall model)"),zGe.forEach(t),pEr=i(D),F9=n(D,"LI",{});var WGe=s(F9);t9e=n(WGe,"STRONG",{});var Fqt=s(t9e);_Er=r(Fqt,"camembert"),Fqt.forEach(t),uEr=r(WGe," \u2014 "),uY=n(WGe,"A",{href:!0});var Tqt=s(uY);bEr=r(Tqt,"TFCamembertModel"),Tqt.forEach(t),vEr=r(WGe," (CamemBERT model)"),WGe.forEach(t),FEr=i(D),T9=n(D,"LI",{});var QGe=s(T9);a9e=n(QGe,"STRONG",{});var Mqt=s(a9e);TEr=r(Mqt,"clip"),Mqt.forEach(t),MEr=r(QGe," \u2014 "),bY=n(QGe,"A",{href:!0});var Eqt=s(bY);EEr=r(Eqt,"TFCLIPModel"),Eqt.forEach(t),CEr=r(QGe," (CLIP model)"),QGe.forEach(t),wEr=i(D),M9=n(D,"LI",{});var UGe=s(M9);n9e=n(UGe,"STRONG",{});var Cqt=s(n9e);AEr=r(Cqt,"convbert"),Cqt.forEach(t),LEr=r(UGe," \u2014 "),vY=n(UGe,"A",{href:!0});var wqt=s(vY);yEr=r(wqt,"TFConvBertModel"),wqt.forEach(t),xEr=r(UGe," (ConvBERT model)"),UGe.forEach(t),$Er=i(D),E9=n(D,"LI",{});var HGe=s(E9);s9e=n(HGe,"STRONG",{});var Aqt=s(s9e);kEr=r(Aqt,"convnext"),Aqt.forEach(t),SEr=r(HGe," \u2014 "),FY=n(HGe,"A",{href:!0});var Lqt=s(FY);REr=r(Lqt,"TFConvNextModel"),Lqt.forEach(t),PEr=r(HGe," (ConvNeXT model)"),HGe.forEach(t),BEr=i(D),C9=n(D,"LI",{});var JGe=s(C9);l9e=n(JGe,"STRONG",{});var yqt=s(l9e);IEr=r(yqt,"ctrl"),yqt.forEach(t),NEr=r(JGe," \u2014 "),TY=n(JGe,"A",{href:!0});var xqt=s(TY);qEr=r(xqt,"TFCTRLModel"),xqt.forEach(t),jEr=r(JGe," (CTRL model)"),JGe.forEach(t),DEr=i(D),w9=n(D,"LI",{});var YGe=s(w9);i9e=n(YGe,"STRONG",{});var $qt=s(i9e);GEr=r($qt,"data2vec-vision"),$qt.forEach(t),OEr=r(YGe," \u2014 "),MY=n(YGe,"A",{href:!0});var kqt=s(MY);VEr=r(kqt,"TFData2VecVisionModel"),kqt.forEach(t),XEr=r(YGe," (Data2VecVision model)"),YGe.forEach(t),zEr=i(D),A9=n(D,"LI",{});var KGe=s(A9);d9e=n(KGe,"STRONG",{});var Sqt=s(d9e);WEr=r(Sqt,"deberta"),Sqt.forEach(t),QEr=r(KGe," \u2014 "),EY=n(KGe,"A",{href:!0});var Rqt=s(EY);UEr=r(Rqt,"TFDebertaModel"),Rqt.forEach(t),HEr=r(KGe," (DeBERTa model)"),KGe.forEach(t),JEr=i(D),L9=n(D,"LI",{});var ZGe=s(L9);c9e=n(ZGe,"STRONG",{});var Pqt=s(c9e);YEr=r(Pqt,"deberta-v2"),Pqt.forEach(t),KEr=r(ZGe," \u2014 "),CY=n(ZGe,"A",{href:!0});var Bqt=s(CY);ZEr=r(Bqt,"TFDebertaV2Model"),Bqt.forEach(t),e4r=r(ZGe," (DeBERTa-v2 model)"),ZGe.forEach(t),o4r=i(D),y9=n(D,"LI",{});var eOe=s(y9);f9e=n(eOe,"STRONG",{});var Iqt=s(f9e);r4r=r(Iqt,"deit"),Iqt.forEach(t),t4r=r(eOe," \u2014 "),wY=n(eOe,"A",{href:!0});var Nqt=s(wY);a4r=r(Nqt,"TFDeiTModel"),Nqt.forEach(t),n4r=r(eOe," (DeiT model)"),eOe.forEach(t),s4r=i(D),x9=n(D,"LI",{});var oOe=s(x9);m9e=n(oOe,"STRONG",{});var qqt=s(m9e);l4r=r(qqt,"distilbert"),qqt.forEach(t),i4r=r(oOe," \u2014 "),AY=n(oOe,"A",{href:!0});var jqt=s(AY);d4r=r(jqt,"TFDistilBertModel"),jqt.forEach(t),c4r=r(oOe," (DistilBERT model)"),oOe.forEach(t),f4r=i(D),$9=n(D,"LI",{});var rOe=s($9);g9e=n(rOe,"STRONG",{});var Dqt=s(g9e);m4r=r(Dqt,"dpr"),Dqt.forEach(t),g4r=r(rOe," \u2014 "),LY=n(rOe,"A",{href:!0});var Gqt=s(LY);h4r=r(Gqt,"TFDPRQuestionEncoder"),Gqt.forEach(t),p4r=r(rOe," (DPR model)"),rOe.forEach(t),_4r=i(D),k9=n(D,"LI",{});var tOe=s(k9);h9e=n(tOe,"STRONG",{});var Oqt=s(h9e);u4r=r(Oqt,"electra"),Oqt.forEach(t),b4r=r(tOe," \u2014 "),yY=n(tOe,"A",{href:!0});var Vqt=s(yY);v4r=r(Vqt,"TFElectraModel"),Vqt.forEach(t),F4r=r(tOe," (ELECTRA model)"),tOe.forEach(t),T4r=i(D),S9=n(D,"LI",{});var aOe=s(S9);p9e=n(aOe,"STRONG",{});var Xqt=s(p9e);M4r=r(Xqt,"flaubert"),Xqt.forEach(t),E4r=r(aOe," \u2014 "),xY=n(aOe,"A",{href:!0});var zqt=s(xY);C4r=r(zqt,"TFFlaubertModel"),zqt.forEach(t),w4r=r(aOe," (FlauBERT model)"),aOe.forEach(t),A4r=i(D),il=n(D,"LI",{});var oP=s(il);_9e=n(oP,"STRONG",{});var Wqt=s(_9e);L4r=r(Wqt,"funnel"),Wqt.forEach(t),y4r=r(oP," \u2014 "),$Y=n(oP,"A",{href:!0});var Qqt=s($Y);x4r=r(Qqt,"TFFunnelModel"),Qqt.forEach(t),$4r=r(oP," or "),kY=n(oP,"A",{href:!0});var Uqt=s(kY);k4r=r(Uqt,"TFFunnelBaseModel"),Uqt.forEach(t),S4r=r(oP," (Funnel Transformer model)"),oP.forEach(t),R4r=i(D),R9=n(D,"LI",{});var nOe=s(R9);u9e=n(nOe,"STRONG",{});var Hqt=s(u9e);P4r=r(Hqt,"gpt2"),Hqt.forEach(t),B4r=r(nOe," \u2014 "),SY=n(nOe,"A",{href:!0});var Jqt=s(SY);I4r=r(Jqt,"TFGPT2Model"),Jqt.forEach(t),N4r=r(nOe," (OpenAI GPT-2 model)"),nOe.forEach(t),q4r=i(D),P9=n(D,"LI",{});var sOe=s(P9);b9e=n(sOe,"STRONG",{});var Yqt=s(b9e);j4r=r(Yqt,"gptj"),Yqt.forEach(t),D4r=r(sOe," \u2014 "),RY=n(sOe,"A",{href:!0});var Kqt=s(RY);G4r=r(Kqt,"TFGPTJModel"),Kqt.forEach(t),O4r=r(sOe," (GPT-J model)"),sOe.forEach(t),V4r=i(D),B9=n(D,"LI",{});var lOe=s(B9);v9e=n(lOe,"STRONG",{});var Zqt=s(v9e);X4r=r(Zqt,"hubert"),Zqt.forEach(t),z4r=r(lOe," \u2014 "),PY=n(lOe,"A",{href:!0});var ejt=s(PY);W4r=r(ejt,"TFHubertModel"),ejt.forEach(t),Q4r=r(lOe," (Hubert model)"),lOe.forEach(t),U4r=i(D),I9=n(D,"LI",{});var iOe=s(I9);F9e=n(iOe,"STRONG",{});var ojt=s(F9e);H4r=r(ojt,"layoutlm"),ojt.forEach(t),J4r=r(iOe," \u2014 "),BY=n(iOe,"A",{href:!0});var rjt=s(BY);Y4r=r(rjt,"TFLayoutLMModel"),rjt.forEach(t),K4r=r(iOe," (LayoutLM model)"),iOe.forEach(t),Z4r=i(D),N9=n(D,"LI",{});var dOe=s(N9);T9e=n(dOe,"STRONG",{});var tjt=s(T9e);eCr=r(tjt,"led"),tjt.forEach(t),oCr=r(dOe," \u2014 "),IY=n(dOe,"A",{href:!0});var ajt=s(IY);rCr=r(ajt,"TFLEDModel"),ajt.forEach(t),tCr=r(dOe," (LED model)"),dOe.forEach(t),aCr=i(D),q9=n(D,"LI",{});var cOe=s(q9);M9e=n(cOe,"STRONG",{});var njt=s(M9e);nCr=r(njt,"longformer"),njt.forEach(t),sCr=r(cOe," \u2014 "),NY=n(cOe,"A",{href:!0});var sjt=s(NY);lCr=r(sjt,"TFLongformerModel"),sjt.forEach(t),iCr=r(cOe," (Longformer model)"),cOe.forEach(t),dCr=i(D),j9=n(D,"LI",{});var fOe=s(j9);E9e=n(fOe,"STRONG",{});var ljt=s(E9e);cCr=r(ljt,"lxmert"),ljt.forEach(t),fCr=r(fOe," \u2014 "),qY=n(fOe,"A",{href:!0});var ijt=s(qY);mCr=r(ijt,"TFLxmertModel"),ijt.forEach(t),gCr=r(fOe," (LXMERT model)"),fOe.forEach(t),hCr=i(D),D9=n(D,"LI",{});var mOe=s(D9);C9e=n(mOe,"STRONG",{});var djt=s(C9e);pCr=r(djt,"marian"),djt.forEach(t),_Cr=r(mOe," \u2014 "),jY=n(mOe,"A",{href:!0});var cjt=s(jY);uCr=r(cjt,"TFMarianModel"),cjt.forEach(t),bCr=r(mOe," (Marian model)"),mOe.forEach(t),vCr=i(D),G9=n(D,"LI",{});var gOe=s(G9);w9e=n(gOe,"STRONG",{});var fjt=s(w9e);FCr=r(fjt,"mbart"),fjt.forEach(t),TCr=r(gOe," \u2014 "),DY=n(gOe,"A",{href:!0});var mjt=s(DY);MCr=r(mjt,"TFMBartModel"),mjt.forEach(t),ECr=r(gOe," (mBART model)"),gOe.forEach(t),CCr=i(D),O9=n(D,"LI",{});var hOe=s(O9);A9e=n(hOe,"STRONG",{});var gjt=s(A9e);wCr=r(gjt,"mobilebert"),gjt.forEach(t),ACr=r(hOe," \u2014 "),GY=n(hOe,"A",{href:!0});var hjt=s(GY);LCr=r(hjt,"TFMobileBertModel"),hjt.forEach(t),yCr=r(hOe," (MobileBERT model)"),hOe.forEach(t),xCr=i(D),V9=n(D,"LI",{});var pOe=s(V9);L9e=n(pOe,"STRONG",{});var pjt=s(L9e);$Cr=r(pjt,"mpnet"),pjt.forEach(t),kCr=r(pOe," \u2014 "),OY=n(pOe,"A",{href:!0});var _jt=s(OY);SCr=r(_jt,"TFMPNetModel"),_jt.forEach(t),RCr=r(pOe," (MPNet model)"),pOe.forEach(t),PCr=i(D),X9=n(D,"LI",{});var _Oe=s(X9);y9e=n(_Oe,"STRONG",{});var ujt=s(y9e);BCr=r(ujt,"mt5"),ujt.forEach(t),ICr=r(_Oe," \u2014 "),VY=n(_Oe,"A",{href:!0});var bjt=s(VY);NCr=r(bjt,"TFMT5Model"),bjt.forEach(t),qCr=r(_Oe," (MT5 model)"),_Oe.forEach(t),jCr=i(D),z9=n(D,"LI",{});var uOe=s(z9);x9e=n(uOe,"STRONG",{});var vjt=s(x9e);DCr=r(vjt,"openai-gpt"),vjt.forEach(t),GCr=r(uOe," \u2014 "),XY=n(uOe,"A",{href:!0});var Fjt=s(XY);OCr=r(Fjt,"TFOpenAIGPTModel"),Fjt.forEach(t),VCr=r(uOe," (OpenAI GPT model)"),uOe.forEach(t),XCr=i(D),W9=n(D,"LI",{});var bOe=s(W9);$9e=n(bOe,"STRONG",{});var Tjt=s($9e);zCr=r(Tjt,"opt"),Tjt.forEach(t),WCr=r(bOe," \u2014 "),zY=n(bOe,"A",{href:!0});var Mjt=s(zY);QCr=r(Mjt,"TFOPTModel"),Mjt.forEach(t),UCr=r(bOe," (OPT model)"),bOe.forEach(t),HCr=i(D),Q9=n(D,"LI",{});var vOe=s(Q9);k9e=n(vOe,"STRONG",{});var Ejt=s(k9e);JCr=r(Ejt,"pegasus"),Ejt.forEach(t),YCr=r(vOe," \u2014 "),WY=n(vOe,"A",{href:!0});var Cjt=s(WY);KCr=r(Cjt,"TFPegasusModel"),Cjt.forEach(t),ZCr=r(vOe," (Pegasus model)"),vOe.forEach(t),e3r=i(D),U9=n(D,"LI",{});var FOe=s(U9);S9e=n(FOe,"STRONG",{});var wjt=s(S9e);o3r=r(wjt,"regnet"),wjt.forEach(t),r3r=r(FOe," \u2014 "),QY=n(FOe,"A",{href:!0});var Ajt=s(QY);t3r=r(Ajt,"TFRegNetModel"),Ajt.forEach(t),a3r=r(FOe," (RegNet model)"),FOe.forEach(t),n3r=i(D),H9=n(D,"LI",{});var TOe=s(H9);R9e=n(TOe,"STRONG",{});var Ljt=s(R9e);s3r=r(Ljt,"rembert"),Ljt.forEach(t),l3r=r(TOe," \u2014 "),UY=n(TOe,"A",{href:!0});var yjt=s(UY);i3r=r(yjt,"TFRemBertModel"),yjt.forEach(t),d3r=r(TOe," (RemBERT model)"),TOe.forEach(t),c3r=i(D),J9=n(D,"LI",{});var MOe=s(J9);P9e=n(MOe,"STRONG",{});var xjt=s(P9e);f3r=r(xjt,"resnet"),xjt.forEach(t),m3r=r(MOe," \u2014 "),HY=n(MOe,"A",{href:!0});var $jt=s(HY);g3r=r($jt,"TFResNetModel"),$jt.forEach(t),h3r=r(MOe," (ResNet model)"),MOe.forEach(t),p3r=i(D),Y9=n(D,"LI",{});var EOe=s(Y9);B9e=n(EOe,"STRONG",{});var kjt=s(B9e);_3r=r(kjt,"roberta"),kjt.forEach(t),u3r=r(EOe," \u2014 "),JY=n(EOe,"A",{href:!0});var Sjt=s(JY);b3r=r(Sjt,"TFRobertaModel"),Sjt.forEach(t),v3r=r(EOe," (RoBERTa model)"),EOe.forEach(t),F3r=i(D),K9=n(D,"LI",{});var COe=s(K9);I9e=n(COe,"STRONG",{});var Rjt=s(I9e);T3r=r(Rjt,"roformer"),Rjt.forEach(t),M3r=r(COe," \u2014 "),YY=n(COe,"A",{href:!0});var Pjt=s(YY);E3r=r(Pjt,"TFRoFormerModel"),Pjt.forEach(t),C3r=r(COe," (RoFormer model)"),COe.forEach(t),w3r=i(D),Z9=n(D,"LI",{});var wOe=s(Z9);N9e=n(wOe,"STRONG",{});var Bjt=s(N9e);A3r=r(Bjt,"segformer"),Bjt.forEach(t),L3r=r(wOe," \u2014 "),KY=n(wOe,"A",{href:!0});var Ijt=s(KY);y3r=r(Ijt,"TFSegformerModel"),Ijt.forEach(t),x3r=r(wOe," (SegFormer model)"),wOe.forEach(t),$3r=i(D),eM=n(D,"LI",{});var AOe=s(eM);q9e=n(AOe,"STRONG",{});var Njt=s(q9e);k3r=r(Njt,"speech_to_text"),Njt.forEach(t),S3r=r(AOe," \u2014 "),ZY=n(AOe,"A",{href:!0});var qjt=s(ZY);R3r=r(qjt,"TFSpeech2TextModel"),qjt.forEach(t),P3r=r(AOe," (Speech2Text model)"),AOe.forEach(t),B3r=i(D),oM=n(D,"LI",{});var LOe=s(oM);j9e=n(LOe,"STRONG",{});var jjt=s(j9e);I3r=r(jjt,"swin"),jjt.forEach(t),N3r=r(LOe," \u2014 "),eK=n(LOe,"A",{href:!0});var Djt=s(eK);q3r=r(Djt,"TFSwinModel"),Djt.forEach(t),j3r=r(LOe," (Swin Transformer model)"),LOe.forEach(t),D3r=i(D),rM=n(D,"LI",{});var yOe=s(rM);D9e=n(yOe,"STRONG",{});var Gjt=s(D9e);G3r=r(Gjt,"t5"),Gjt.forEach(t),O3r=r(yOe," \u2014 "),oK=n(yOe,"A",{href:!0});var Ojt=s(oK);V3r=r(Ojt,"TFT5Model"),Ojt.forEach(t),X3r=r(yOe," (T5 model)"),yOe.forEach(t),z3r=i(D),tM=n(D,"LI",{});var xOe=s(tM);G9e=n(xOe,"STRONG",{});var Vjt=s(G9e);W3r=r(Vjt,"tapas"),Vjt.forEach(t),Q3r=r(xOe," \u2014 "),rK=n(xOe,"A",{href:!0});var Xjt=s(rK);U3r=r(Xjt,"TFTapasModel"),Xjt.forEach(t),H3r=r(xOe," (TAPAS model)"),xOe.forEach(t),J3r=i(D),aM=n(D,"LI",{});var $Oe=s(aM);O9e=n($Oe,"STRONG",{});var zjt=s(O9e);Y3r=r(zjt,"transfo-xl"),zjt.forEach(t),K3r=r($Oe," \u2014 "),tK=n($Oe,"A",{href:!0});var Wjt=s(tK);Z3r=r(Wjt,"TFTransfoXLModel"),Wjt.forEach(t),e5r=r($Oe," (Transformer-XL model)"),$Oe.forEach(t),o5r=i(D),nM=n(D,"LI",{});var kOe=s(nM);V9e=n(kOe,"STRONG",{});var Qjt=s(V9e);r5r=r(Qjt,"vit"),Qjt.forEach(t),t5r=r(kOe," \u2014 "),aK=n(kOe,"A",{href:!0});var Ujt=s(aK);a5r=r(Ujt,"TFViTModel"),Ujt.forEach(t),n5r=r(kOe," (ViT model)"),kOe.forEach(t),s5r=i(D),sM=n(D,"LI",{});var SOe=s(sM);X9e=n(SOe,"STRONG",{});var Hjt=s(X9e);l5r=r(Hjt,"vit_mae"),Hjt.forEach(t),i5r=r(SOe," \u2014 "),nK=n(SOe,"A",{href:!0});var Jjt=s(nK);d5r=r(Jjt,"TFViTMAEModel"),Jjt.forEach(t),c5r=r(SOe," (ViTMAE model)"),SOe.forEach(t),f5r=i(D),lM=n(D,"LI",{});var ROe=s(lM);z9e=n(ROe,"STRONG",{});var Yjt=s(z9e);m5r=r(Yjt,"wav2vec2"),Yjt.forEach(t),g5r=r(ROe," \u2014 "),sK=n(ROe,"A",{href:!0});var Kjt=s(sK);h5r=r(Kjt,"TFWav2Vec2Model"),Kjt.forEach(t),p5r=r(ROe," (Wav2Vec2 model)"),ROe.forEach(t),_5r=i(D),iM=n(D,"LI",{});var POe=s(iM);W9e=n(POe,"STRONG",{});var Zjt=s(W9e);u5r=r(Zjt,"xlm"),Zjt.forEach(t),b5r=r(POe," \u2014 "),lK=n(POe,"A",{href:!0});var eDt=s(lK);v5r=r(eDt,"TFXLMModel"),eDt.forEach(t),F5r=r(POe," (XLM model)"),POe.forEach(t),T5r=i(D),dM=n(D,"LI",{});var BOe=s(dM);Q9e=n(BOe,"STRONG",{});var oDt=s(Q9e);M5r=r(oDt,"xlm-roberta"),oDt.forEach(t),E5r=r(BOe," \u2014 "),iK=n(BOe,"A",{href:!0});var rDt=s(iK);C5r=r(rDt,"TFXLMRobertaModel"),rDt.forEach(t),w5r=r(BOe," (XLM-RoBERTa model)"),BOe.forEach(t),A5r=i(D),cM=n(D,"LI",{});var IOe=s(cM);U9e=n(IOe,"STRONG",{});var tDt=s(U9e);L5r=r(tDt,"xlnet"),tDt.forEach(t),y5r=r(IOe," \u2014 "),dK=n(IOe,"A",{href:!0});var aDt=s(dK);x5r=r(aDt,"TFXLNetModel"),aDt.forEach(t),$5r=r(IOe," (XLNet model)"),IOe.forEach(t),D.forEach(t),k5r=i(Vl),T(fM.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),YUe=i(f),Ac=n(f,"H2",{class:!0});var dYe=s(Ac);mM=n(dYe,"A",{id:!0,class:!0,href:!0});var nDt=s(mM);H9e=n(nDt,"SPAN",{});var sDt=s(H9e);T(d$.$$.fragment,sDt),sDt.forEach(t),nDt.forEach(t),S5r=i(dYe),J9e=n(dYe,"SPAN",{});var lDt=s(J9e);R5r=r(lDt,"TFAutoModelForPreTraining"),lDt.forEach(t),dYe.forEach(t),KUe=i(f),nr=n(f,"DIV",{class:!0});var Xl=s(nr);T(c$.$$.fragment,Xl),P5r=i(Xl),Lc=n(Xl,"P",{});var qne=s(Lc);B5r=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cK=n(qne,"A",{href:!0});var iDt=s(cK);I5r=r(iDt,"from_pretrained()"),iDt.forEach(t),N5r=r(qne," class method or the "),fK=n(qne,"A",{href:!0});var dDt=s(fK);q5r=r(dDt,"from_config()"),dDt.forEach(t),j5r=r(qne,` class
method.`),qne.forEach(t),D5r=i(Xl),f$=n(Xl,"P",{});var cYe=s(f$);G5r=r(cYe,"This class cannot be instantiated directly using "),Y9e=n(cYe,"CODE",{});var cDt=s(Y9e);O5r=r(cDt,"__init__()"),cDt.forEach(t),V5r=r(cYe," (throws an error)."),cYe.forEach(t),X5r=i(Xl),jt=n(Xl,"DIV",{class:!0});var fA=s(jt);T(m$.$$.fragment,fA),z5r=i(fA),K9e=n(fA,"P",{});var fDt=s(K9e);W5r=r(fDt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fDt.forEach(t),Q5r=i(fA),yc=n(fA,"P",{});var jne=s(yc);U5r=r(jne,`Note:
Loading a model from its configuration file does `),Z9e=n(jne,"STRONG",{});var mDt=s(Z9e);H5r=r(mDt,"not"),mDt.forEach(t),J5r=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(jne,"A",{href:!0});var gDt=s(mK);Y5r=r(gDt,"from_pretrained()"),gDt.forEach(t),K5r=r(jne," to load the model weights."),jne.forEach(t),Z5r=i(fA),T(gM.$$.fragment,fA),fA.forEach(t),e0r=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(g$.$$.fragment,zl),o0r=i(zl),eMe=n(zl,"P",{});var hDt=s(eMe);r0r=r(hDt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hDt.forEach(t),t0r=i(zl),un=n(zl,"P",{});var mA=s(un);a0r=r(mA,"The model class to instantiate is selected based on the "),oMe=n(mA,"CODE",{});var pDt=s(oMe);n0r=r(pDt,"model_type"),pDt.forEach(t),s0r=r(mA,` property of the config object (either
passed as an argument or loaded from `),rMe=n(mA,"CODE",{});var _Dt=s(rMe);l0r=r(_Dt,"pretrained_model_name_or_path"),_Dt.forEach(t),i0r=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(mA,"CODE",{});var uDt=s(tMe);d0r=r(uDt,"pretrained_model_name_or_path"),uDt.forEach(t),c0r=r(mA,":"),mA.forEach(t),f0r=i(zl),se=n(zl,"UL",{});var le=s(se);hM=n(le,"LI",{});var NOe=s(hM);aMe=n(NOe,"STRONG",{});var bDt=s(aMe);m0r=r(bDt,"albert"),bDt.forEach(t),g0r=r(NOe," \u2014 "),gK=n(NOe,"A",{href:!0});var vDt=s(gK);h0r=r(vDt,"TFAlbertForPreTraining"),vDt.forEach(t),p0r=r(NOe," (ALBERT model)"),NOe.forEach(t),_0r=i(le),pM=n(le,"LI",{});var qOe=s(pM);nMe=n(qOe,"STRONG",{});var FDt=s(nMe);u0r=r(FDt,"bart"),FDt.forEach(t),b0r=r(qOe," \u2014 "),hK=n(qOe,"A",{href:!0});var TDt=s(hK);v0r=r(TDt,"TFBartForConditionalGeneration"),TDt.forEach(t),F0r=r(qOe," (BART model)"),qOe.forEach(t),T0r=i(le),_M=n(le,"LI",{});var jOe=s(_M);sMe=n(jOe,"STRONG",{});var MDt=s(sMe);M0r=r(MDt,"bert"),MDt.forEach(t),E0r=r(jOe," \u2014 "),pK=n(jOe,"A",{href:!0});var EDt=s(pK);C0r=r(EDt,"TFBertForPreTraining"),EDt.forEach(t),w0r=r(jOe," (BERT model)"),jOe.forEach(t),A0r=i(le),uM=n(le,"LI",{});var DOe=s(uM);lMe=n(DOe,"STRONG",{});var CDt=s(lMe);L0r=r(CDt,"camembert"),CDt.forEach(t),y0r=r(DOe," \u2014 "),_K=n(DOe,"A",{href:!0});var wDt=s(_K);x0r=r(wDt,"TFCamembertForMaskedLM"),wDt.forEach(t),$0r=r(DOe," (CamemBERT model)"),DOe.forEach(t),k0r=i(le),bM=n(le,"LI",{});var GOe=s(bM);iMe=n(GOe,"STRONG",{});var ADt=s(iMe);S0r=r(ADt,"ctrl"),ADt.forEach(t),R0r=r(GOe," \u2014 "),uK=n(GOe,"A",{href:!0});var LDt=s(uK);P0r=r(LDt,"TFCTRLLMHeadModel"),LDt.forEach(t),B0r=r(GOe," (CTRL model)"),GOe.forEach(t),I0r=i(le),vM=n(le,"LI",{});var OOe=s(vM);dMe=n(OOe,"STRONG",{});var yDt=s(dMe);N0r=r(yDt,"distilbert"),yDt.forEach(t),q0r=r(OOe," \u2014 "),bK=n(OOe,"A",{href:!0});var xDt=s(bK);j0r=r(xDt,"TFDistilBertForMaskedLM"),xDt.forEach(t),D0r=r(OOe," (DistilBERT model)"),OOe.forEach(t),G0r=i(le),FM=n(le,"LI",{});var VOe=s(FM);cMe=n(VOe,"STRONG",{});var $Dt=s(cMe);O0r=r($Dt,"electra"),$Dt.forEach(t),V0r=r(VOe," \u2014 "),vK=n(VOe,"A",{href:!0});var kDt=s(vK);X0r=r(kDt,"TFElectraForPreTraining"),kDt.forEach(t),z0r=r(VOe," (ELECTRA model)"),VOe.forEach(t),W0r=i(le),TM=n(le,"LI",{});var XOe=s(TM);fMe=n(XOe,"STRONG",{});var SDt=s(fMe);Q0r=r(SDt,"flaubert"),SDt.forEach(t),U0r=r(XOe," \u2014 "),FK=n(XOe,"A",{href:!0});var RDt=s(FK);H0r=r(RDt,"TFFlaubertWithLMHeadModel"),RDt.forEach(t),J0r=r(XOe," (FlauBERT model)"),XOe.forEach(t),Y0r=i(le),MM=n(le,"LI",{});var zOe=s(MM);mMe=n(zOe,"STRONG",{});var PDt=s(mMe);K0r=r(PDt,"funnel"),PDt.forEach(t),Z0r=r(zOe," \u2014 "),TK=n(zOe,"A",{href:!0});var BDt=s(TK);ewr=r(BDt,"TFFunnelForPreTraining"),BDt.forEach(t),owr=r(zOe," (Funnel Transformer model)"),zOe.forEach(t),rwr=i(le),EM=n(le,"LI",{});var WOe=s(EM);gMe=n(WOe,"STRONG",{});var IDt=s(gMe);twr=r(IDt,"gpt2"),IDt.forEach(t),awr=r(WOe," \u2014 "),MK=n(WOe,"A",{href:!0});var NDt=s(MK);nwr=r(NDt,"TFGPT2LMHeadModel"),NDt.forEach(t),swr=r(WOe," (OpenAI GPT-2 model)"),WOe.forEach(t),lwr=i(le),CM=n(le,"LI",{});var QOe=s(CM);hMe=n(QOe,"STRONG",{});var qDt=s(hMe);iwr=r(qDt,"layoutlm"),qDt.forEach(t),dwr=r(QOe," \u2014 "),EK=n(QOe,"A",{href:!0});var jDt=s(EK);cwr=r(jDt,"TFLayoutLMForMaskedLM"),jDt.forEach(t),fwr=r(QOe," (LayoutLM model)"),QOe.forEach(t),mwr=i(le),wM=n(le,"LI",{});var UOe=s(wM);pMe=n(UOe,"STRONG",{});var DDt=s(pMe);gwr=r(DDt,"lxmert"),DDt.forEach(t),hwr=r(UOe," \u2014 "),CK=n(UOe,"A",{href:!0});var GDt=s(CK);pwr=r(GDt,"TFLxmertForPreTraining"),GDt.forEach(t),_wr=r(UOe," (LXMERT model)"),UOe.forEach(t),uwr=i(le),AM=n(le,"LI",{});var HOe=s(AM);_Me=n(HOe,"STRONG",{});var ODt=s(_Me);bwr=r(ODt,"mobilebert"),ODt.forEach(t),vwr=r(HOe," \u2014 "),wK=n(HOe,"A",{href:!0});var VDt=s(wK);Fwr=r(VDt,"TFMobileBertForPreTraining"),VDt.forEach(t),Twr=r(HOe," (MobileBERT model)"),HOe.forEach(t),Mwr=i(le),LM=n(le,"LI",{});var JOe=s(LM);uMe=n(JOe,"STRONG",{});var XDt=s(uMe);Ewr=r(XDt,"mpnet"),XDt.forEach(t),Cwr=r(JOe," \u2014 "),AK=n(JOe,"A",{href:!0});var zDt=s(AK);wwr=r(zDt,"TFMPNetForMaskedLM"),zDt.forEach(t),Awr=r(JOe," (MPNet model)"),JOe.forEach(t),Lwr=i(le),yM=n(le,"LI",{});var YOe=s(yM);bMe=n(YOe,"STRONG",{});var WDt=s(bMe);ywr=r(WDt,"openai-gpt"),WDt.forEach(t),xwr=r(YOe," \u2014 "),LK=n(YOe,"A",{href:!0});var QDt=s(LK);$wr=r(QDt,"TFOpenAIGPTLMHeadModel"),QDt.forEach(t),kwr=r(YOe," (OpenAI GPT model)"),YOe.forEach(t),Swr=i(le),xM=n(le,"LI",{});var KOe=s(xM);vMe=n(KOe,"STRONG",{});var UDt=s(vMe);Rwr=r(UDt,"roberta"),UDt.forEach(t),Pwr=r(KOe," \u2014 "),yK=n(KOe,"A",{href:!0});var HDt=s(yK);Bwr=r(HDt,"TFRobertaForMaskedLM"),HDt.forEach(t),Iwr=r(KOe," (RoBERTa model)"),KOe.forEach(t),Nwr=i(le),$M=n(le,"LI",{});var ZOe=s($M);FMe=n(ZOe,"STRONG",{});var JDt=s(FMe);qwr=r(JDt,"t5"),JDt.forEach(t),jwr=r(ZOe," \u2014 "),xK=n(ZOe,"A",{href:!0});var YDt=s(xK);Dwr=r(YDt,"TFT5ForConditionalGeneration"),YDt.forEach(t),Gwr=r(ZOe," (T5 model)"),ZOe.forEach(t),Owr=i(le),kM=n(le,"LI",{});var eVe=s(kM);TMe=n(eVe,"STRONG",{});var KDt=s(TMe);Vwr=r(KDt,"tapas"),KDt.forEach(t),Xwr=r(eVe," \u2014 "),$K=n(eVe,"A",{href:!0});var ZDt=s($K);zwr=r(ZDt,"TFTapasForMaskedLM"),ZDt.forEach(t),Wwr=r(eVe," (TAPAS model)"),eVe.forEach(t),Qwr=i(le),SM=n(le,"LI",{});var oVe=s(SM);MMe=n(oVe,"STRONG",{});var eGt=s(MMe);Uwr=r(eGt,"transfo-xl"),eGt.forEach(t),Hwr=r(oVe," \u2014 "),kK=n(oVe,"A",{href:!0});var oGt=s(kK);Jwr=r(oGt,"TFTransfoXLLMHeadModel"),oGt.forEach(t),Ywr=r(oVe," (Transformer-XL model)"),oVe.forEach(t),Kwr=i(le),RM=n(le,"LI",{});var rVe=s(RM);EMe=n(rVe,"STRONG",{});var rGt=s(EMe);Zwr=r(rGt,"vit_mae"),rGt.forEach(t),eAr=r(rVe," \u2014 "),SK=n(rVe,"A",{href:!0});var tGt=s(SK);oAr=r(tGt,"TFViTMAEForPreTraining"),tGt.forEach(t),rAr=r(rVe," (ViTMAE model)"),rVe.forEach(t),tAr=i(le),PM=n(le,"LI",{});var tVe=s(PM);CMe=n(tVe,"STRONG",{});var aGt=s(CMe);aAr=r(aGt,"xlm"),aGt.forEach(t),nAr=r(tVe," \u2014 "),RK=n(tVe,"A",{href:!0});var nGt=s(RK);sAr=r(nGt,"TFXLMWithLMHeadModel"),nGt.forEach(t),lAr=r(tVe," (XLM model)"),tVe.forEach(t),iAr=i(le),BM=n(le,"LI",{});var aVe=s(BM);wMe=n(aVe,"STRONG",{});var sGt=s(wMe);dAr=r(sGt,"xlm-roberta"),sGt.forEach(t),cAr=r(aVe," \u2014 "),PK=n(aVe,"A",{href:!0});var lGt=s(PK);fAr=r(lGt,"TFXLMRobertaForMaskedLM"),lGt.forEach(t),mAr=r(aVe," (XLM-RoBERTa model)"),aVe.forEach(t),gAr=i(le),IM=n(le,"LI",{});var nVe=s(IM);AMe=n(nVe,"STRONG",{});var iGt=s(AMe);hAr=r(iGt,"xlnet"),iGt.forEach(t),pAr=r(nVe," \u2014 "),BK=n(nVe,"A",{href:!0});var dGt=s(BK);_Ar=r(dGt,"TFXLNetLMHeadModel"),dGt.forEach(t),uAr=r(nVe," (XLNet model)"),nVe.forEach(t),le.forEach(t),bAr=i(zl),T(NM.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),ZUe=i(f),xc=n(f,"H2",{class:!0});var fYe=s(xc);qM=n(fYe,"A",{id:!0,class:!0,href:!0});var cGt=s(qM);LMe=n(cGt,"SPAN",{});var fGt=s(LMe);T(h$.$$.fragment,fGt),fGt.forEach(t),cGt.forEach(t),vAr=i(fYe),yMe=n(fYe,"SPAN",{});var mGt=s(yMe);FAr=r(mGt,"TFAutoModelForCausalLM"),mGt.forEach(t),fYe.forEach(t),eHe=i(f),sr=n(f,"DIV",{class:!0});var Wl=s(sr);T(p$.$$.fragment,Wl),TAr=i(Wl),$c=n(Wl,"P",{});var Dne=s($c);MAr=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IK=n(Dne,"A",{href:!0});var gGt=s(IK);EAr=r(gGt,"from_pretrained()"),gGt.forEach(t),CAr=r(Dne," class method or the "),NK=n(Dne,"A",{href:!0});var hGt=s(NK);wAr=r(hGt,"from_config()"),hGt.forEach(t),AAr=r(Dne,` class
method.`),Dne.forEach(t),LAr=i(Wl),_$=n(Wl,"P",{});var mYe=s(_$);yAr=r(mYe,"This class cannot be instantiated directly using "),xMe=n(mYe,"CODE",{});var pGt=s(xMe);xAr=r(pGt,"__init__()"),pGt.forEach(t),$Ar=r(mYe," (throws an error)."),mYe.forEach(t),kAr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var gA=s(Dt);T(u$.$$.fragment,gA),SAr=i(gA),$Me=n(gA,"P",{});var _Gt=s($Me);RAr=r(_Gt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Gt.forEach(t),PAr=i(gA),kc=n(gA,"P",{});var Gne=s(kc);BAr=r(Gne,`Note:
Loading a model from its configuration file does `),kMe=n(Gne,"STRONG",{});var uGt=s(kMe);IAr=r(uGt,"not"),uGt.forEach(t),NAr=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Gne,"A",{href:!0});var bGt=s(qK);qAr=r(bGt,"from_pretrained()"),bGt.forEach(t),jAr=r(Gne," to load the model weights."),Gne.forEach(t),DAr=i(gA),T(jM.$$.fragment,gA),gA.forEach(t),GAr=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(b$.$$.fragment,Ql),OAr=i(Ql),SMe=n(Ql,"P",{});var vGt=s(SMe);VAr=r(vGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vGt.forEach(t),XAr=i(Ql),bn=n(Ql,"P",{});var hA=s(bn);zAr=r(hA,"The model class to instantiate is selected based on the "),RMe=n(hA,"CODE",{});var FGt=s(RMe);WAr=r(FGt,"model_type"),FGt.forEach(t),QAr=r(hA,` property of the config object (either
passed as an argument or loaded from `),PMe=n(hA,"CODE",{});var TGt=s(PMe);UAr=r(TGt,"pretrained_model_name_or_path"),TGt.forEach(t),HAr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(hA,"CODE",{});var MGt=s(BMe);JAr=r(MGt,"pretrained_model_name_or_path"),MGt.forEach(t),YAr=r(hA,":"),hA.forEach(t),KAr=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);DM=n(Ce,"LI",{});var sVe=s(DM);IMe=n(sVe,"STRONG",{});var EGt=s(IMe);ZAr=r(EGt,"bert"),EGt.forEach(t),eLr=r(sVe," \u2014 "),jK=n(sVe,"A",{href:!0});var CGt=s(jK);oLr=r(CGt,"TFBertLMHeadModel"),CGt.forEach(t),rLr=r(sVe," (BERT model)"),sVe.forEach(t),tLr=i(Ce),GM=n(Ce,"LI",{});var lVe=s(GM);NMe=n(lVe,"STRONG",{});var wGt=s(NMe);aLr=r(wGt,"camembert"),wGt.forEach(t),nLr=r(lVe," \u2014 "),DK=n(lVe,"A",{href:!0});var AGt=s(DK);sLr=r(AGt,"TFCamembertForCausalLM"),AGt.forEach(t),lLr=r(lVe," (CamemBERT model)"),lVe.forEach(t),iLr=i(Ce),OM=n(Ce,"LI",{});var iVe=s(OM);qMe=n(iVe,"STRONG",{});var LGt=s(qMe);dLr=r(LGt,"ctrl"),LGt.forEach(t),cLr=r(iVe," \u2014 "),GK=n(iVe,"A",{href:!0});var yGt=s(GK);fLr=r(yGt,"TFCTRLLMHeadModel"),yGt.forEach(t),mLr=r(iVe," (CTRL model)"),iVe.forEach(t),gLr=i(Ce),VM=n(Ce,"LI",{});var dVe=s(VM);jMe=n(dVe,"STRONG",{});var xGt=s(jMe);hLr=r(xGt,"gpt2"),xGt.forEach(t),pLr=r(dVe," \u2014 "),OK=n(dVe,"A",{href:!0});var $Gt=s(OK);_Lr=r($Gt,"TFGPT2LMHeadModel"),$Gt.forEach(t),uLr=r(dVe," (OpenAI GPT-2 model)"),dVe.forEach(t),bLr=i(Ce),XM=n(Ce,"LI",{});var cVe=s(XM);DMe=n(cVe,"STRONG",{});var kGt=s(DMe);vLr=r(kGt,"gptj"),kGt.forEach(t),FLr=r(cVe," \u2014 "),VK=n(cVe,"A",{href:!0});var SGt=s(VK);TLr=r(SGt,"TFGPTJForCausalLM"),SGt.forEach(t),MLr=r(cVe," (GPT-J model)"),cVe.forEach(t),ELr=i(Ce),zM=n(Ce,"LI",{});var fVe=s(zM);GMe=n(fVe,"STRONG",{});var RGt=s(GMe);CLr=r(RGt,"openai-gpt"),RGt.forEach(t),wLr=r(fVe," \u2014 "),XK=n(fVe,"A",{href:!0});var PGt=s(XK);ALr=r(PGt,"TFOpenAIGPTLMHeadModel"),PGt.forEach(t),LLr=r(fVe," (OpenAI GPT model)"),fVe.forEach(t),yLr=i(Ce),WM=n(Ce,"LI",{});var mVe=s(WM);OMe=n(mVe,"STRONG",{});var BGt=s(OMe);xLr=r(BGt,"opt"),BGt.forEach(t),$Lr=r(mVe," \u2014 "),zK=n(mVe,"A",{href:!0});var IGt=s(zK);kLr=r(IGt,"TFOPTForCausalLM"),IGt.forEach(t),SLr=r(mVe," (OPT model)"),mVe.forEach(t),RLr=i(Ce),QM=n(Ce,"LI",{});var gVe=s(QM);VMe=n(gVe,"STRONG",{});var NGt=s(VMe);PLr=r(NGt,"rembert"),NGt.forEach(t),BLr=r(gVe," \u2014 "),WK=n(gVe,"A",{href:!0});var qGt=s(WK);ILr=r(qGt,"TFRemBertForCausalLM"),qGt.forEach(t),NLr=r(gVe," (RemBERT model)"),gVe.forEach(t),qLr=i(Ce),UM=n(Ce,"LI",{});var hVe=s(UM);XMe=n(hVe,"STRONG",{});var jGt=s(XMe);jLr=r(jGt,"roberta"),jGt.forEach(t),DLr=r(hVe," \u2014 "),QK=n(hVe,"A",{href:!0});var DGt=s(QK);GLr=r(DGt,"TFRobertaForCausalLM"),DGt.forEach(t),OLr=r(hVe," (RoBERTa model)"),hVe.forEach(t),VLr=i(Ce),HM=n(Ce,"LI",{});var pVe=s(HM);zMe=n(pVe,"STRONG",{});var GGt=s(zMe);XLr=r(GGt,"roformer"),GGt.forEach(t),zLr=r(pVe," \u2014 "),UK=n(pVe,"A",{href:!0});var OGt=s(UK);WLr=r(OGt,"TFRoFormerForCausalLM"),OGt.forEach(t),QLr=r(pVe," (RoFormer model)"),pVe.forEach(t),ULr=i(Ce),JM=n(Ce,"LI",{});var _Ve=s(JM);WMe=n(_Ve,"STRONG",{});var VGt=s(WMe);HLr=r(VGt,"transfo-xl"),VGt.forEach(t),JLr=r(_Ve," \u2014 "),HK=n(_Ve,"A",{href:!0});var XGt=s(HK);YLr=r(XGt,"TFTransfoXLLMHeadModel"),XGt.forEach(t),KLr=r(_Ve," (Transformer-XL model)"),_Ve.forEach(t),ZLr=i(Ce),YM=n(Ce,"LI",{});var uVe=s(YM);QMe=n(uVe,"STRONG",{});var zGt=s(QMe);eyr=r(zGt,"xlm"),zGt.forEach(t),oyr=r(uVe," \u2014 "),JK=n(uVe,"A",{href:!0});var WGt=s(JK);ryr=r(WGt,"TFXLMWithLMHeadModel"),WGt.forEach(t),tyr=r(uVe," (XLM model)"),uVe.forEach(t),ayr=i(Ce),KM=n(Ce,"LI",{});var bVe=s(KM);UMe=n(bVe,"STRONG",{});var QGt=s(UMe);nyr=r(QGt,"xlnet"),QGt.forEach(t),syr=r(bVe," \u2014 "),YK=n(bVe,"A",{href:!0});var UGt=s(YK);lyr=r(UGt,"TFXLNetLMHeadModel"),UGt.forEach(t),iyr=r(bVe," (XLNet model)"),bVe.forEach(t),Ce.forEach(t),dyr=i(Ql),T(ZM.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),oHe=i(f),Sc=n(f,"H2",{class:!0});var gYe=s(Sc);eE=n(gYe,"A",{id:!0,class:!0,href:!0});var HGt=s(eE);HMe=n(HGt,"SPAN",{});var JGt=s(HMe);T(v$.$$.fragment,JGt),JGt.forEach(t),HGt.forEach(t),cyr=i(gYe),JMe=n(gYe,"SPAN",{});var YGt=s(JMe);fyr=r(YGt,"TFAutoModelForImageClassification"),YGt.forEach(t),gYe.forEach(t),rHe=i(f),lr=n(f,"DIV",{class:!0});var Ul=s(lr);T(F$.$$.fragment,Ul),myr=i(Ul),Rc=n(Ul,"P",{});var One=s(Rc);gyr=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KK=n(One,"A",{href:!0});var KGt=s(KK);hyr=r(KGt,"from_pretrained()"),KGt.forEach(t),pyr=r(One," class method or the "),ZK=n(One,"A",{href:!0});var ZGt=s(ZK);_yr=r(ZGt,"from_config()"),ZGt.forEach(t),uyr=r(One,` class
method.`),One.forEach(t),byr=i(Ul),T$=n(Ul,"P",{});var hYe=s(T$);vyr=r(hYe,"This class cannot be instantiated directly using "),YMe=n(hYe,"CODE",{});var eOt=s(YMe);Fyr=r(eOt,"__init__()"),eOt.forEach(t),Tyr=r(hYe," (throws an error)."),hYe.forEach(t),Myr=i(Ul),Gt=n(Ul,"DIV",{class:!0});var pA=s(Gt);T(M$.$$.fragment,pA),Eyr=i(pA),KMe=n(pA,"P",{});var oOt=s(KMe);Cyr=r(oOt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oOt.forEach(t),wyr=i(pA),Pc=n(pA,"P",{});var Vne=s(Pc);Ayr=r(Vne,`Note:
Loading a model from its configuration file does `),ZMe=n(Vne,"STRONG",{});var rOt=s(ZMe);Lyr=r(rOt,"not"),rOt.forEach(t),yyr=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(Vne,"A",{href:!0});var tOt=s(eZ);xyr=r(tOt,"from_pretrained()"),tOt.forEach(t),$yr=r(Vne," to load the model weights."),Vne.forEach(t),kyr=i(pA),T(oE.$$.fragment,pA),pA.forEach(t),Syr=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(E$.$$.fragment,Hl),Ryr=i(Hl),eEe=n(Hl,"P",{});var aOt=s(eEe);Pyr=r(aOt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aOt.forEach(t),Byr=i(Hl),vn=n(Hl,"P",{});var _A=s(vn);Iyr=r(_A,"The model class to instantiate is selected based on the "),oEe=n(_A,"CODE",{});var nOt=s(oEe);Nyr=r(nOt,"model_type"),nOt.forEach(t),qyr=r(_A,` property of the config object (either
passed as an argument or loaded from `),rEe=n(_A,"CODE",{});var sOt=s(rEe);jyr=r(sOt,"pretrained_model_name_or_path"),sOt.forEach(t),Dyr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n(_A,"CODE",{});var lOt=s(tEe);Gyr=r(lOt,"pretrained_model_name_or_path"),lOt.forEach(t),Oyr=r(_A,":"),_A.forEach(t),Vyr=i(Hl),Ve=n(Hl,"UL",{});var Eo=s(Ve);rE=n(Eo,"LI",{});var vVe=s(rE);aEe=n(vVe,"STRONG",{});var iOt=s(aEe);Xyr=r(iOt,"convnext"),iOt.forEach(t),zyr=r(vVe," \u2014 "),oZ=n(vVe,"A",{href:!0});var dOt=s(oZ);Wyr=r(dOt,"TFConvNextForImageClassification"),dOt.forEach(t),Qyr=r(vVe," (ConvNeXT model)"),vVe.forEach(t),Uyr=i(Eo),tE=n(Eo,"LI",{});var FVe=s(tE);nEe=n(FVe,"STRONG",{});var cOt=s(nEe);Hyr=r(cOt,"data2vec-vision"),cOt.forEach(t),Jyr=r(FVe," \u2014 "),rZ=n(FVe,"A",{href:!0});var fOt=s(rZ);Yyr=r(fOt,"TFData2VecVisionForImageClassification"),fOt.forEach(t),Kyr=r(FVe," (Data2VecVision model)"),FVe.forEach(t),Zyr=i(Eo),dl=n(Eo,"LI",{});var rP=s(dl);sEe=n(rP,"STRONG",{});var mOt=s(sEe);exr=r(mOt,"deit"),mOt.forEach(t),oxr=r(rP," \u2014 "),tZ=n(rP,"A",{href:!0});var gOt=s(tZ);rxr=r(gOt,"TFDeiTForImageClassification"),gOt.forEach(t),txr=r(rP," or "),aZ=n(rP,"A",{href:!0});var hOt=s(aZ);axr=r(hOt,"TFDeiTForImageClassificationWithTeacher"),hOt.forEach(t),nxr=r(rP," (DeiT model)"),rP.forEach(t),sxr=i(Eo),aE=n(Eo,"LI",{});var TVe=s(aE);lEe=n(TVe,"STRONG",{});var pOt=s(lEe);lxr=r(pOt,"regnet"),pOt.forEach(t),ixr=r(TVe," \u2014 "),nZ=n(TVe,"A",{href:!0});var _Ot=s(nZ);dxr=r(_Ot,"TFRegNetForImageClassification"),_Ot.forEach(t),cxr=r(TVe," (RegNet model)"),TVe.forEach(t),fxr=i(Eo),nE=n(Eo,"LI",{});var MVe=s(nE);iEe=n(MVe,"STRONG",{});var uOt=s(iEe);mxr=r(uOt,"resnet"),uOt.forEach(t),gxr=r(MVe," \u2014 "),sZ=n(MVe,"A",{href:!0});var bOt=s(sZ);hxr=r(bOt,"TFResNetForImageClassification"),bOt.forEach(t),pxr=r(MVe," (ResNet model)"),MVe.forEach(t),_xr=i(Eo),sE=n(Eo,"LI",{});var EVe=s(sE);dEe=n(EVe,"STRONG",{});var vOt=s(dEe);uxr=r(vOt,"segformer"),vOt.forEach(t),bxr=r(EVe," \u2014 "),lZ=n(EVe,"A",{href:!0});var FOt=s(lZ);vxr=r(FOt,"TFSegformerForImageClassification"),FOt.forEach(t),Fxr=r(EVe," (SegFormer model)"),EVe.forEach(t),Txr=i(Eo),lE=n(Eo,"LI",{});var CVe=s(lE);cEe=n(CVe,"STRONG",{});var TOt=s(cEe);Mxr=r(TOt,"swin"),TOt.forEach(t),Exr=r(CVe," \u2014 "),iZ=n(CVe,"A",{href:!0});var MOt=s(iZ);Cxr=r(MOt,"TFSwinForImageClassification"),MOt.forEach(t),wxr=r(CVe," (Swin Transformer model)"),CVe.forEach(t),Axr=i(Eo),iE=n(Eo,"LI",{});var wVe=s(iE);fEe=n(wVe,"STRONG",{});var EOt=s(fEe);Lxr=r(EOt,"vit"),EOt.forEach(t),yxr=r(wVe," \u2014 "),dZ=n(wVe,"A",{href:!0});var COt=s(dZ);xxr=r(COt,"TFViTForImageClassification"),COt.forEach(t),$xr=r(wVe," (ViT model)"),wVe.forEach(t),Eo.forEach(t),kxr=i(Hl),T(dE.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),tHe=i(f),Bc=n(f,"H2",{class:!0});var pYe=s(Bc);cE=n(pYe,"A",{id:!0,class:!0,href:!0});var wOt=s(cE);mEe=n(wOt,"SPAN",{});var AOt=s(mEe);T(C$.$$.fragment,AOt),AOt.forEach(t),wOt.forEach(t),Sxr=i(pYe),gEe=n(pYe,"SPAN",{});var LOt=s(gEe);Rxr=r(LOt,"TFAutoModelForSemanticSegmentation"),LOt.forEach(t),pYe.forEach(t),aHe=i(f),ir=n(f,"DIV",{class:!0});var Jl=s(ir);T(w$.$$.fragment,Jl),Pxr=i(Jl),Ic=n(Jl,"P",{});var Xne=s(Ic);Bxr=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cZ=n(Xne,"A",{href:!0});var yOt=s(cZ);Ixr=r(yOt,"from_pretrained()"),yOt.forEach(t),Nxr=r(Xne," class method or the "),fZ=n(Xne,"A",{href:!0});var xOt=s(fZ);qxr=r(xOt,"from_config()"),xOt.forEach(t),jxr=r(Xne,` class
method.`),Xne.forEach(t),Dxr=i(Jl),A$=n(Jl,"P",{});var _Ye=s(A$);Gxr=r(_Ye,"This class cannot be instantiated directly using "),hEe=n(_Ye,"CODE",{});var $Ot=s(hEe);Oxr=r($Ot,"__init__()"),$Ot.forEach(t),Vxr=r(_Ye," (throws an error)."),_Ye.forEach(t),Xxr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var uA=s(Ot);T(L$.$$.fragment,uA),zxr=i(uA),pEe=n(uA,"P",{});var kOt=s(pEe);Wxr=r(kOt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kOt.forEach(t),Qxr=i(uA),Nc=n(uA,"P",{});var zne=s(Nc);Uxr=r(zne,`Note:
Loading a model from its configuration file does `),_Ee=n(zne,"STRONG",{});var SOt=s(_Ee);Hxr=r(SOt,"not"),SOt.forEach(t),Jxr=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(zne,"A",{href:!0});var ROt=s(mZ);Yxr=r(ROt,"from_pretrained()"),ROt.forEach(t),Kxr=r(zne," to load the model weights."),zne.forEach(t),Zxr=i(uA),T(fE.$$.fragment,uA),uA.forEach(t),e$r=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T(y$.$$.fragment,Yl),o$r=i(Yl),uEe=n(Yl,"P",{});var POt=s(uEe);r$r=r(POt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),POt.forEach(t),t$r=i(Yl),Fn=n(Yl,"P",{});var bA=s(Fn);a$r=r(bA,"The model class to instantiate is selected based on the "),bEe=n(bA,"CODE",{});var BOt=s(bEe);n$r=r(BOt,"model_type"),BOt.forEach(t),s$r=r(bA,` property of the config object (either
passed as an argument or loaded from `),vEe=n(bA,"CODE",{});var IOt=s(vEe);l$r=r(IOt,"pretrained_model_name_or_path"),IOt.forEach(t),i$r=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=n(bA,"CODE",{});var NOt=s(FEe);d$r=r(NOt,"pretrained_model_name_or_path"),NOt.forEach(t),c$r=r(bA,":"),bA.forEach(t),f$r=i(Yl),x$=n(Yl,"UL",{});var uYe=s(x$);mE=n(uYe,"LI",{});var AVe=s(mE);TEe=n(AVe,"STRONG",{});var qOt=s(TEe);m$r=r(qOt,"data2vec-vision"),qOt.forEach(t),g$r=r(AVe," \u2014 "),gZ=n(AVe,"A",{href:!0});var jOt=s(gZ);h$r=r(jOt,"TFData2VecVisionForSemanticSegmentation"),jOt.forEach(t),p$r=r(AVe," (Data2VecVision model)"),AVe.forEach(t),_$r=i(uYe),gE=n(uYe,"LI",{});var LVe=s(gE);MEe=n(LVe,"STRONG",{});var DOt=s(MEe);u$r=r(DOt,"segformer"),DOt.forEach(t),b$r=r(LVe," \u2014 "),hZ=n(LVe,"A",{href:!0});var GOt=s(hZ);v$r=r(GOt,"TFSegformerForSemanticSegmentation"),GOt.forEach(t),F$r=r(LVe," (SegFormer model)"),LVe.forEach(t),uYe.forEach(t),T$r=i(Yl),T(hE.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),nHe=i(f),qc=n(f,"H2",{class:!0});var bYe=s(qc);pE=n(bYe,"A",{id:!0,class:!0,href:!0});var OOt=s(pE);EEe=n(OOt,"SPAN",{});var VOt=s(EEe);T($$.$$.fragment,VOt),VOt.forEach(t),OOt.forEach(t),M$r=i(bYe),CEe=n(bYe,"SPAN",{});var XOt=s(CEe);E$r=r(XOt,"TFAutoModelForMaskedLM"),XOt.forEach(t),bYe.forEach(t),sHe=i(f),dr=n(f,"DIV",{class:!0});var Kl=s(dr);T(k$.$$.fragment,Kl),C$r=i(Kl),jc=n(Kl,"P",{});var Wne=s(jc);w$r=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pZ=n(Wne,"A",{href:!0});var zOt=s(pZ);A$r=r(zOt,"from_pretrained()"),zOt.forEach(t),L$r=r(Wne," class method or the "),_Z=n(Wne,"A",{href:!0});var WOt=s(_Z);y$r=r(WOt,"from_config()"),WOt.forEach(t),x$r=r(Wne,` class
method.`),Wne.forEach(t),$$r=i(Kl),S$=n(Kl,"P",{});var vYe=s(S$);k$r=r(vYe,"This class cannot be instantiated directly using "),wEe=n(vYe,"CODE",{});var QOt=s(wEe);S$r=r(QOt,"__init__()"),QOt.forEach(t),R$r=r(vYe," (throws an error)."),vYe.forEach(t),P$r=i(Kl),Vt=n(Kl,"DIV",{class:!0});var vA=s(Vt);T(R$.$$.fragment,vA),B$r=i(vA),AEe=n(vA,"P",{});var UOt=s(AEe);I$r=r(UOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),UOt.forEach(t),N$r=i(vA),Dc=n(vA,"P",{});var Qne=s(Dc);q$r=r(Qne,`Note:
Loading a model from its configuration file does `),LEe=n(Qne,"STRONG",{});var HOt=s(LEe);j$r=r(HOt,"not"),HOt.forEach(t),D$r=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(Qne,"A",{href:!0});var JOt=s(uZ);G$r=r(JOt,"from_pretrained()"),JOt.forEach(t),O$r=r(Qne," to load the model weights."),Qne.forEach(t),V$r=i(vA),T(_E.$$.fragment,vA),vA.forEach(t),X$r=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T(P$.$$.fragment,Zl),z$r=i(Zl),yEe=n(Zl,"P",{});var YOt=s(yEe);W$r=r(YOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),YOt.forEach(t),Q$r=i(Zl),Tn=n(Zl,"P",{});var FA=s(Tn);U$r=r(FA,"The model class to instantiate is selected based on the "),xEe=n(FA,"CODE",{});var KOt=s(xEe);H$r=r(KOt,"model_type"),KOt.forEach(t),J$r=r(FA,` property of the config object (either
passed as an argument or loaded from `),$Ee=n(FA,"CODE",{});var ZOt=s($Ee);Y$r=r(ZOt,"pretrained_model_name_or_path"),ZOt.forEach(t),K$r=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=n(FA,"CODE",{});var eVt=s(kEe);Z$r=r(eVt,"pretrained_model_name_or_path"),eVt.forEach(t),ekr=r(FA,":"),FA.forEach(t),okr=i(Zl),de=n(Zl,"UL",{});var he=s(de);uE=n(he,"LI",{});var yVe=s(uE);SEe=n(yVe,"STRONG",{});var oVt=s(SEe);rkr=r(oVt,"albert"),oVt.forEach(t),tkr=r(yVe," \u2014 "),bZ=n(yVe,"A",{href:!0});var rVt=s(bZ);akr=r(rVt,"TFAlbertForMaskedLM"),rVt.forEach(t),nkr=r(yVe," (ALBERT model)"),yVe.forEach(t),skr=i(he),bE=n(he,"LI",{});var xVe=s(bE);REe=n(xVe,"STRONG",{});var tVt=s(REe);lkr=r(tVt,"bert"),tVt.forEach(t),ikr=r(xVe," \u2014 "),vZ=n(xVe,"A",{href:!0});var aVt=s(vZ);dkr=r(aVt,"TFBertForMaskedLM"),aVt.forEach(t),ckr=r(xVe," (BERT model)"),xVe.forEach(t),fkr=i(he),vE=n(he,"LI",{});var $Ve=s(vE);PEe=n($Ve,"STRONG",{});var nVt=s(PEe);mkr=r(nVt,"camembert"),nVt.forEach(t),gkr=r($Ve," \u2014 "),FZ=n($Ve,"A",{href:!0});var sVt=s(FZ);hkr=r(sVt,"TFCamembertForMaskedLM"),sVt.forEach(t),pkr=r($Ve," (CamemBERT model)"),$Ve.forEach(t),_kr=i(he),FE=n(he,"LI",{});var kVe=s(FE);BEe=n(kVe,"STRONG",{});var lVt=s(BEe);ukr=r(lVt,"convbert"),lVt.forEach(t),bkr=r(kVe," \u2014 "),TZ=n(kVe,"A",{href:!0});var iVt=s(TZ);vkr=r(iVt,"TFConvBertForMaskedLM"),iVt.forEach(t),Fkr=r(kVe," (ConvBERT model)"),kVe.forEach(t),Tkr=i(he),TE=n(he,"LI",{});var SVe=s(TE);IEe=n(SVe,"STRONG",{});var dVt=s(IEe);Mkr=r(dVt,"deberta"),dVt.forEach(t),Ekr=r(SVe," \u2014 "),MZ=n(SVe,"A",{href:!0});var cVt=s(MZ);Ckr=r(cVt,"TFDebertaForMaskedLM"),cVt.forEach(t),wkr=r(SVe," (DeBERTa model)"),SVe.forEach(t),Akr=i(he),ME=n(he,"LI",{});var RVe=s(ME);NEe=n(RVe,"STRONG",{});var fVt=s(NEe);Lkr=r(fVt,"deberta-v2"),fVt.forEach(t),ykr=r(RVe," \u2014 "),EZ=n(RVe,"A",{href:!0});var mVt=s(EZ);xkr=r(mVt,"TFDebertaV2ForMaskedLM"),mVt.forEach(t),$kr=r(RVe," (DeBERTa-v2 model)"),RVe.forEach(t),kkr=i(he),EE=n(he,"LI",{});var PVe=s(EE);qEe=n(PVe,"STRONG",{});var gVt=s(qEe);Skr=r(gVt,"distilbert"),gVt.forEach(t),Rkr=r(PVe," \u2014 "),CZ=n(PVe,"A",{href:!0});var hVt=s(CZ);Pkr=r(hVt,"TFDistilBertForMaskedLM"),hVt.forEach(t),Bkr=r(PVe," (DistilBERT model)"),PVe.forEach(t),Ikr=i(he),CE=n(he,"LI",{});var BVe=s(CE);jEe=n(BVe,"STRONG",{});var pVt=s(jEe);Nkr=r(pVt,"electra"),pVt.forEach(t),qkr=r(BVe," \u2014 "),wZ=n(BVe,"A",{href:!0});var _Vt=s(wZ);jkr=r(_Vt,"TFElectraForMaskedLM"),_Vt.forEach(t),Dkr=r(BVe," (ELECTRA model)"),BVe.forEach(t),Gkr=i(he),wE=n(he,"LI",{});var IVe=s(wE);DEe=n(IVe,"STRONG",{});var uVt=s(DEe);Okr=r(uVt,"flaubert"),uVt.forEach(t),Vkr=r(IVe," \u2014 "),AZ=n(IVe,"A",{href:!0});var bVt=s(AZ);Xkr=r(bVt,"TFFlaubertWithLMHeadModel"),bVt.forEach(t),zkr=r(IVe," (FlauBERT model)"),IVe.forEach(t),Wkr=i(he),AE=n(he,"LI",{});var NVe=s(AE);GEe=n(NVe,"STRONG",{});var vVt=s(GEe);Qkr=r(vVt,"funnel"),vVt.forEach(t),Ukr=r(NVe," \u2014 "),LZ=n(NVe,"A",{href:!0});var FVt=s(LZ);Hkr=r(FVt,"TFFunnelForMaskedLM"),FVt.forEach(t),Jkr=r(NVe," (Funnel Transformer model)"),NVe.forEach(t),Ykr=i(he),LE=n(he,"LI",{});var qVe=s(LE);OEe=n(qVe,"STRONG",{});var TVt=s(OEe);Kkr=r(TVt,"layoutlm"),TVt.forEach(t),Zkr=r(qVe," \u2014 "),yZ=n(qVe,"A",{href:!0});var MVt=s(yZ);eSr=r(MVt,"TFLayoutLMForMaskedLM"),MVt.forEach(t),oSr=r(qVe," (LayoutLM model)"),qVe.forEach(t),rSr=i(he),yE=n(he,"LI",{});var jVe=s(yE);VEe=n(jVe,"STRONG",{});var EVt=s(VEe);tSr=r(EVt,"longformer"),EVt.forEach(t),aSr=r(jVe," \u2014 "),xZ=n(jVe,"A",{href:!0});var CVt=s(xZ);nSr=r(CVt,"TFLongformerForMaskedLM"),CVt.forEach(t),sSr=r(jVe," (Longformer model)"),jVe.forEach(t),lSr=i(he),xE=n(he,"LI",{});var DVe=s(xE);XEe=n(DVe,"STRONG",{});var wVt=s(XEe);iSr=r(wVt,"mobilebert"),wVt.forEach(t),dSr=r(DVe," \u2014 "),$Z=n(DVe,"A",{href:!0});var AVt=s($Z);cSr=r(AVt,"TFMobileBertForMaskedLM"),AVt.forEach(t),fSr=r(DVe," (MobileBERT model)"),DVe.forEach(t),mSr=i(he),$E=n(he,"LI",{});var GVe=s($E);zEe=n(GVe,"STRONG",{});var LVt=s(zEe);gSr=r(LVt,"mpnet"),LVt.forEach(t),hSr=r(GVe," \u2014 "),kZ=n(GVe,"A",{href:!0});var yVt=s(kZ);pSr=r(yVt,"TFMPNetForMaskedLM"),yVt.forEach(t),_Sr=r(GVe," (MPNet model)"),GVe.forEach(t),uSr=i(he),kE=n(he,"LI",{});var OVe=s(kE);WEe=n(OVe,"STRONG",{});var xVt=s(WEe);bSr=r(xVt,"rembert"),xVt.forEach(t),vSr=r(OVe," \u2014 "),SZ=n(OVe,"A",{href:!0});var $Vt=s(SZ);FSr=r($Vt,"TFRemBertForMaskedLM"),$Vt.forEach(t),TSr=r(OVe," (RemBERT model)"),OVe.forEach(t),MSr=i(he),SE=n(he,"LI",{});var VVe=s(SE);QEe=n(VVe,"STRONG",{});var kVt=s(QEe);ESr=r(kVt,"roberta"),kVt.forEach(t),CSr=r(VVe," \u2014 "),RZ=n(VVe,"A",{href:!0});var SVt=s(RZ);wSr=r(SVt,"TFRobertaForMaskedLM"),SVt.forEach(t),ASr=r(VVe," (RoBERTa model)"),VVe.forEach(t),LSr=i(he),RE=n(he,"LI",{});var XVe=s(RE);UEe=n(XVe,"STRONG",{});var RVt=s(UEe);ySr=r(RVt,"roformer"),RVt.forEach(t),xSr=r(XVe," \u2014 "),PZ=n(XVe,"A",{href:!0});var PVt=s(PZ);$Sr=r(PVt,"TFRoFormerForMaskedLM"),PVt.forEach(t),kSr=r(XVe," (RoFormer model)"),XVe.forEach(t),SSr=i(he),PE=n(he,"LI",{});var zVe=s(PE);HEe=n(zVe,"STRONG",{});var BVt=s(HEe);RSr=r(BVt,"tapas"),BVt.forEach(t),PSr=r(zVe," \u2014 "),BZ=n(zVe,"A",{href:!0});var IVt=s(BZ);BSr=r(IVt,"TFTapasForMaskedLM"),IVt.forEach(t),ISr=r(zVe," (TAPAS model)"),zVe.forEach(t),NSr=i(he),BE=n(he,"LI",{});var WVe=s(BE);JEe=n(WVe,"STRONG",{});var NVt=s(JEe);qSr=r(NVt,"xlm"),NVt.forEach(t),jSr=r(WVe," \u2014 "),IZ=n(WVe,"A",{href:!0});var qVt=s(IZ);DSr=r(qVt,"TFXLMWithLMHeadModel"),qVt.forEach(t),GSr=r(WVe," (XLM model)"),WVe.forEach(t),OSr=i(he),IE=n(he,"LI",{});var QVe=s(IE);YEe=n(QVe,"STRONG",{});var jVt=s(YEe);VSr=r(jVt,"xlm-roberta"),jVt.forEach(t),XSr=r(QVe," \u2014 "),NZ=n(QVe,"A",{href:!0});var DVt=s(NZ);zSr=r(DVt,"TFXLMRobertaForMaskedLM"),DVt.forEach(t),WSr=r(QVe," (XLM-RoBERTa model)"),QVe.forEach(t),he.forEach(t),QSr=i(Zl),T(NE.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),lHe=i(f),Gc=n(f,"H2",{class:!0});var FYe=s(Gc);qE=n(FYe,"A",{id:!0,class:!0,href:!0});var GVt=s(qE);KEe=n(GVt,"SPAN",{});var OVt=s(KEe);T(B$.$$.fragment,OVt),OVt.forEach(t),GVt.forEach(t),USr=i(FYe),ZEe=n(FYe,"SPAN",{});var VVt=s(ZEe);HSr=r(VVt,"TFAutoModelForSeq2SeqLM"),VVt.forEach(t),FYe.forEach(t),iHe=i(f),cr=n(f,"DIV",{class:!0});var ei=s(cr);T(I$.$$.fragment,ei),JSr=i(ei),Oc=n(ei,"P",{});var Une=s(Oc);YSr=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qZ=n(Une,"A",{href:!0});var XVt=s(qZ);KSr=r(XVt,"from_pretrained()"),XVt.forEach(t),ZSr=r(Une," class method or the "),jZ=n(Une,"A",{href:!0});var zVt=s(jZ);eRr=r(zVt,"from_config()"),zVt.forEach(t),oRr=r(Une,` class
method.`),Une.forEach(t),rRr=i(ei),N$=n(ei,"P",{});var TYe=s(N$);tRr=r(TYe,"This class cannot be instantiated directly using "),e4e=n(TYe,"CODE",{});var WVt=s(e4e);aRr=r(WVt,"__init__()"),WVt.forEach(t),nRr=r(TYe," (throws an error)."),TYe.forEach(t),sRr=i(ei),Xt=n(ei,"DIV",{class:!0});var TA=s(Xt);T(q$.$$.fragment,TA),lRr=i(TA),o4e=n(TA,"P",{});var QVt=s(o4e);iRr=r(QVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QVt.forEach(t),dRr=i(TA),Vc=n(TA,"P",{});var Hne=s(Vc);cRr=r(Hne,`Note:
Loading a model from its configuration file does `),r4e=n(Hne,"STRONG",{});var UVt=s(r4e);fRr=r(UVt,"not"),UVt.forEach(t),mRr=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=n(Hne,"A",{href:!0});var HVt=s(DZ);gRr=r(HVt,"from_pretrained()"),HVt.forEach(t),hRr=r(Hne," to load the model weights."),Hne.forEach(t),pRr=i(TA),T(jE.$$.fragment,TA),TA.forEach(t),_Rr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(j$.$$.fragment,oi),uRr=i(oi),t4e=n(oi,"P",{});var JVt=s(t4e);bRr=r(JVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JVt.forEach(t),vRr=i(oi),Mn=n(oi,"P",{});var MA=s(Mn);FRr=r(MA,"The model class to instantiate is selected based on the "),a4e=n(MA,"CODE",{});var YVt=s(a4e);TRr=r(YVt,"model_type"),YVt.forEach(t),MRr=r(MA,` property of the config object (either
passed as an argument or loaded from `),n4e=n(MA,"CODE",{});var KVt=s(n4e);ERr=r(KVt,"pretrained_model_name_or_path"),KVt.forEach(t),CRr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(MA,"CODE",{});var ZVt=s(s4e);wRr=r(ZVt,"pretrained_model_name_or_path"),ZVt.forEach(t),ARr=r(MA,":"),MA.forEach(t),LRr=i(oi),ye=n(oi,"UL",{});var Ie=s(ye);DE=n(Ie,"LI",{});var UVe=s(DE);l4e=n(UVe,"STRONG",{});var eXt=s(l4e);yRr=r(eXt,"bart"),eXt.forEach(t),xRr=r(UVe," \u2014 "),GZ=n(UVe,"A",{href:!0});var oXt=s(GZ);$Rr=r(oXt,"TFBartForConditionalGeneration"),oXt.forEach(t),kRr=r(UVe," (BART model)"),UVe.forEach(t),SRr=i(Ie),GE=n(Ie,"LI",{});var HVe=s(GE);i4e=n(HVe,"STRONG",{});var rXt=s(i4e);RRr=r(rXt,"blenderbot"),rXt.forEach(t),PRr=r(HVe," \u2014 "),OZ=n(HVe,"A",{href:!0});var tXt=s(OZ);BRr=r(tXt,"TFBlenderbotForConditionalGeneration"),tXt.forEach(t),IRr=r(HVe," (Blenderbot model)"),HVe.forEach(t),NRr=i(Ie),OE=n(Ie,"LI",{});var JVe=s(OE);d4e=n(JVe,"STRONG",{});var aXt=s(d4e);qRr=r(aXt,"blenderbot-small"),aXt.forEach(t),jRr=r(JVe," \u2014 "),VZ=n(JVe,"A",{href:!0});var nXt=s(VZ);DRr=r(nXt,"TFBlenderbotSmallForConditionalGeneration"),nXt.forEach(t),GRr=r(JVe," (BlenderbotSmall model)"),JVe.forEach(t),ORr=i(Ie),VE=n(Ie,"LI",{});var YVe=s(VE);c4e=n(YVe,"STRONG",{});var sXt=s(c4e);VRr=r(sXt,"encoder-decoder"),sXt.forEach(t),XRr=r(YVe," \u2014 "),XZ=n(YVe,"A",{href:!0});var lXt=s(XZ);zRr=r(lXt,"TFEncoderDecoderModel"),lXt.forEach(t),WRr=r(YVe," (Encoder decoder model)"),YVe.forEach(t),QRr=i(Ie),XE=n(Ie,"LI",{});var KVe=s(XE);f4e=n(KVe,"STRONG",{});var iXt=s(f4e);URr=r(iXt,"led"),iXt.forEach(t),HRr=r(KVe," \u2014 "),zZ=n(KVe,"A",{href:!0});var dXt=s(zZ);JRr=r(dXt,"TFLEDForConditionalGeneration"),dXt.forEach(t),YRr=r(KVe," (LED model)"),KVe.forEach(t),KRr=i(Ie),zE=n(Ie,"LI",{});var ZVe=s(zE);m4e=n(ZVe,"STRONG",{});var cXt=s(m4e);ZRr=r(cXt,"marian"),cXt.forEach(t),ePr=r(ZVe," \u2014 "),WZ=n(ZVe,"A",{href:!0});var fXt=s(WZ);oPr=r(fXt,"TFMarianMTModel"),fXt.forEach(t),rPr=r(ZVe," (Marian model)"),ZVe.forEach(t),tPr=i(Ie),WE=n(Ie,"LI",{});var eXe=s(WE);g4e=n(eXe,"STRONG",{});var mXt=s(g4e);aPr=r(mXt,"mbart"),mXt.forEach(t),nPr=r(eXe," \u2014 "),QZ=n(eXe,"A",{href:!0});var gXt=s(QZ);sPr=r(gXt,"TFMBartForConditionalGeneration"),gXt.forEach(t),lPr=r(eXe," (mBART model)"),eXe.forEach(t),iPr=i(Ie),QE=n(Ie,"LI",{});var oXe=s(QE);h4e=n(oXe,"STRONG",{});var hXt=s(h4e);dPr=r(hXt,"mt5"),hXt.forEach(t),cPr=r(oXe," \u2014 "),UZ=n(oXe,"A",{href:!0});var pXt=s(UZ);fPr=r(pXt,"TFMT5ForConditionalGeneration"),pXt.forEach(t),mPr=r(oXe," (MT5 model)"),oXe.forEach(t),gPr=i(Ie),UE=n(Ie,"LI",{});var rXe=s(UE);p4e=n(rXe,"STRONG",{});var _Xt=s(p4e);hPr=r(_Xt,"pegasus"),_Xt.forEach(t),pPr=r(rXe," \u2014 "),HZ=n(rXe,"A",{href:!0});var uXt=s(HZ);_Pr=r(uXt,"TFPegasusForConditionalGeneration"),uXt.forEach(t),uPr=r(rXe," (Pegasus model)"),rXe.forEach(t),bPr=i(Ie),HE=n(Ie,"LI",{});var tXe=s(HE);_4e=n(tXe,"STRONG",{});var bXt=s(_4e);vPr=r(bXt,"t5"),bXt.forEach(t),FPr=r(tXe," \u2014 "),JZ=n(tXe,"A",{href:!0});var vXt=s(JZ);TPr=r(vXt,"TFT5ForConditionalGeneration"),vXt.forEach(t),MPr=r(tXe," (T5 model)"),tXe.forEach(t),Ie.forEach(t),EPr=i(oi),T(JE.$$.fragment,oi),oi.forEach(t),ei.forEach(t),dHe=i(f),Xc=n(f,"H2",{class:!0});var MYe=s(Xc);YE=n(MYe,"A",{id:!0,class:!0,href:!0});var FXt=s(YE);u4e=n(FXt,"SPAN",{});var TXt=s(u4e);T(D$.$$.fragment,TXt),TXt.forEach(t),FXt.forEach(t),CPr=i(MYe),b4e=n(MYe,"SPAN",{});var MXt=s(b4e);wPr=r(MXt,"TFAutoModelForSequenceClassification"),MXt.forEach(t),MYe.forEach(t),cHe=i(f),fr=n(f,"DIV",{class:!0});var ri=s(fr);T(G$.$$.fragment,ri),APr=i(ri),zc=n(ri,"P",{});var Jne=s(zc);LPr=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YZ=n(Jne,"A",{href:!0});var EXt=s(YZ);yPr=r(EXt,"from_pretrained()"),EXt.forEach(t),xPr=r(Jne," class method or the "),KZ=n(Jne,"A",{href:!0});var CXt=s(KZ);$Pr=r(CXt,"from_config()"),CXt.forEach(t),kPr=r(Jne,` class
method.`),Jne.forEach(t),SPr=i(ri),O$=n(ri,"P",{});var EYe=s(O$);RPr=r(EYe,"This class cannot be instantiated directly using "),v4e=n(EYe,"CODE",{});var wXt=s(v4e);PPr=r(wXt,"__init__()"),wXt.forEach(t),BPr=r(EYe," (throws an error)."),EYe.forEach(t),IPr=i(ri),zt=n(ri,"DIV",{class:!0});var EA=s(zt);T(V$.$$.fragment,EA),NPr=i(EA),F4e=n(EA,"P",{});var AXt=s(F4e);qPr=r(AXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),AXt.forEach(t),jPr=i(EA),Wc=n(EA,"P",{});var Yne=s(Wc);DPr=r(Yne,`Note:
Loading a model from its configuration file does `),T4e=n(Yne,"STRONG",{});var LXt=s(T4e);GPr=r(LXt,"not"),LXt.forEach(t),OPr=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=n(Yne,"A",{href:!0});var yXt=s(ZZ);VPr=r(yXt,"from_pretrained()"),yXt.forEach(t),XPr=r(Yne," to load the model weights."),Yne.forEach(t),zPr=i(EA),T(KE.$$.fragment,EA),EA.forEach(t),WPr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(X$.$$.fragment,ti),QPr=i(ti),M4e=n(ti,"P",{});var xXt=s(M4e);UPr=r(xXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xXt.forEach(t),HPr=i(ti),En=n(ti,"P",{});var CA=s(En);JPr=r(CA,"The model class to instantiate is selected based on the "),E4e=n(CA,"CODE",{});var $Xt=s(E4e);YPr=r($Xt,"model_type"),$Xt.forEach(t),KPr=r(CA,` property of the config object (either
passed as an argument or loaded from `),C4e=n(CA,"CODE",{});var kXt=s(C4e);ZPr=r(kXt,"pretrained_model_name_or_path"),kXt.forEach(t),eBr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(CA,"CODE",{});var SXt=s(w4e);oBr=r(SXt,"pretrained_model_name_or_path"),SXt.forEach(t),rBr=r(CA,":"),CA.forEach(t),tBr=i(ti),te=n(ti,"UL",{});var ne=s(te);ZE=n(ne,"LI",{});var aXe=s(ZE);A4e=n(aXe,"STRONG",{});var RXt=s(A4e);aBr=r(RXt,"albert"),RXt.forEach(t),nBr=r(aXe," \u2014 "),eee=n(aXe,"A",{href:!0});var PXt=s(eee);sBr=r(PXt,"TFAlbertForSequenceClassification"),PXt.forEach(t),lBr=r(aXe," (ALBERT model)"),aXe.forEach(t),iBr=i(ne),e4=n(ne,"LI",{});var nXe=s(e4);L4e=n(nXe,"STRONG",{});var BXt=s(L4e);dBr=r(BXt,"bert"),BXt.forEach(t),cBr=r(nXe," \u2014 "),oee=n(nXe,"A",{href:!0});var IXt=s(oee);fBr=r(IXt,"TFBertForSequenceClassification"),IXt.forEach(t),mBr=r(nXe," (BERT model)"),nXe.forEach(t),gBr=i(ne),o4=n(ne,"LI",{});var sXe=s(o4);y4e=n(sXe,"STRONG",{});var NXt=s(y4e);hBr=r(NXt,"camembert"),NXt.forEach(t),pBr=r(sXe," \u2014 "),ree=n(sXe,"A",{href:!0});var qXt=s(ree);_Br=r(qXt,"TFCamembertForSequenceClassification"),qXt.forEach(t),uBr=r(sXe," (CamemBERT model)"),sXe.forEach(t),bBr=i(ne),r4=n(ne,"LI",{});var lXe=s(r4);x4e=n(lXe,"STRONG",{});var jXt=s(x4e);vBr=r(jXt,"convbert"),jXt.forEach(t),FBr=r(lXe," \u2014 "),tee=n(lXe,"A",{href:!0});var DXt=s(tee);TBr=r(DXt,"TFConvBertForSequenceClassification"),DXt.forEach(t),MBr=r(lXe," (ConvBERT model)"),lXe.forEach(t),EBr=i(ne),t4=n(ne,"LI",{});var iXe=s(t4);$4e=n(iXe,"STRONG",{});var GXt=s($4e);CBr=r(GXt,"ctrl"),GXt.forEach(t),wBr=r(iXe," \u2014 "),aee=n(iXe,"A",{href:!0});var OXt=s(aee);ABr=r(OXt,"TFCTRLForSequenceClassification"),OXt.forEach(t),LBr=r(iXe," (CTRL model)"),iXe.forEach(t),yBr=i(ne),a4=n(ne,"LI",{});var dXe=s(a4);k4e=n(dXe,"STRONG",{});var VXt=s(k4e);xBr=r(VXt,"deberta"),VXt.forEach(t),$Br=r(dXe," \u2014 "),nee=n(dXe,"A",{href:!0});var XXt=s(nee);kBr=r(XXt,"TFDebertaForSequenceClassification"),XXt.forEach(t),SBr=r(dXe," (DeBERTa model)"),dXe.forEach(t),RBr=i(ne),n4=n(ne,"LI",{});var cXe=s(n4);S4e=n(cXe,"STRONG",{});var zXt=s(S4e);PBr=r(zXt,"deberta-v2"),zXt.forEach(t),BBr=r(cXe," \u2014 "),see=n(cXe,"A",{href:!0});var WXt=s(see);IBr=r(WXt,"TFDebertaV2ForSequenceClassification"),WXt.forEach(t),NBr=r(cXe," (DeBERTa-v2 model)"),cXe.forEach(t),qBr=i(ne),s4=n(ne,"LI",{});var fXe=s(s4);R4e=n(fXe,"STRONG",{});var QXt=s(R4e);jBr=r(QXt,"distilbert"),QXt.forEach(t),DBr=r(fXe," \u2014 "),lee=n(fXe,"A",{href:!0});var UXt=s(lee);GBr=r(UXt,"TFDistilBertForSequenceClassification"),UXt.forEach(t),OBr=r(fXe," (DistilBERT model)"),fXe.forEach(t),VBr=i(ne),l4=n(ne,"LI",{});var mXe=s(l4);P4e=n(mXe,"STRONG",{});var HXt=s(P4e);XBr=r(HXt,"electra"),HXt.forEach(t),zBr=r(mXe," \u2014 "),iee=n(mXe,"A",{href:!0});var JXt=s(iee);WBr=r(JXt,"TFElectraForSequenceClassification"),JXt.forEach(t),QBr=r(mXe," (ELECTRA model)"),mXe.forEach(t),UBr=i(ne),i4=n(ne,"LI",{});var gXe=s(i4);B4e=n(gXe,"STRONG",{});var YXt=s(B4e);HBr=r(YXt,"flaubert"),YXt.forEach(t),JBr=r(gXe," \u2014 "),dee=n(gXe,"A",{href:!0});var KXt=s(dee);YBr=r(KXt,"TFFlaubertForSequenceClassification"),KXt.forEach(t),KBr=r(gXe," (FlauBERT model)"),gXe.forEach(t),ZBr=i(ne),d4=n(ne,"LI",{});var hXe=s(d4);I4e=n(hXe,"STRONG",{});var ZXt=s(I4e);eIr=r(ZXt,"funnel"),ZXt.forEach(t),oIr=r(hXe," \u2014 "),cee=n(hXe,"A",{href:!0});var ezt=s(cee);rIr=r(ezt,"TFFunnelForSequenceClassification"),ezt.forEach(t),tIr=r(hXe," (Funnel Transformer model)"),hXe.forEach(t),aIr=i(ne),c4=n(ne,"LI",{});var pXe=s(c4);N4e=n(pXe,"STRONG",{});var ozt=s(N4e);nIr=r(ozt,"gpt2"),ozt.forEach(t),sIr=r(pXe," \u2014 "),fee=n(pXe,"A",{href:!0});var rzt=s(fee);lIr=r(rzt,"TFGPT2ForSequenceClassification"),rzt.forEach(t),iIr=r(pXe," (OpenAI GPT-2 model)"),pXe.forEach(t),dIr=i(ne),f4=n(ne,"LI",{});var _Xe=s(f4);q4e=n(_Xe,"STRONG",{});var tzt=s(q4e);cIr=r(tzt,"gptj"),tzt.forEach(t),fIr=r(_Xe," \u2014 "),mee=n(_Xe,"A",{href:!0});var azt=s(mee);mIr=r(azt,"TFGPTJForSequenceClassification"),azt.forEach(t),gIr=r(_Xe," (GPT-J model)"),_Xe.forEach(t),hIr=i(ne),m4=n(ne,"LI",{});var uXe=s(m4);j4e=n(uXe,"STRONG",{});var nzt=s(j4e);pIr=r(nzt,"layoutlm"),nzt.forEach(t),_Ir=r(uXe," \u2014 "),gee=n(uXe,"A",{href:!0});var szt=s(gee);uIr=r(szt,"TFLayoutLMForSequenceClassification"),szt.forEach(t),bIr=r(uXe," (LayoutLM model)"),uXe.forEach(t),vIr=i(ne),g4=n(ne,"LI",{});var bXe=s(g4);D4e=n(bXe,"STRONG",{});var lzt=s(D4e);FIr=r(lzt,"longformer"),lzt.forEach(t),TIr=r(bXe," \u2014 "),hee=n(bXe,"A",{href:!0});var izt=s(hee);MIr=r(izt,"TFLongformerForSequenceClassification"),izt.forEach(t),EIr=r(bXe," (Longformer model)"),bXe.forEach(t),CIr=i(ne),h4=n(ne,"LI",{});var vXe=s(h4);G4e=n(vXe,"STRONG",{});var dzt=s(G4e);wIr=r(dzt,"mobilebert"),dzt.forEach(t),AIr=r(vXe," \u2014 "),pee=n(vXe,"A",{href:!0});var czt=s(pee);LIr=r(czt,"TFMobileBertForSequenceClassification"),czt.forEach(t),yIr=r(vXe," (MobileBERT model)"),vXe.forEach(t),xIr=i(ne),p4=n(ne,"LI",{});var FXe=s(p4);O4e=n(FXe,"STRONG",{});var fzt=s(O4e);$Ir=r(fzt,"mpnet"),fzt.forEach(t),kIr=r(FXe," \u2014 "),_ee=n(FXe,"A",{href:!0});var mzt=s(_ee);SIr=r(mzt,"TFMPNetForSequenceClassification"),mzt.forEach(t),RIr=r(FXe," (MPNet model)"),FXe.forEach(t),PIr=i(ne),_4=n(ne,"LI",{});var TXe=s(_4);V4e=n(TXe,"STRONG",{});var gzt=s(V4e);BIr=r(gzt,"openai-gpt"),gzt.forEach(t),IIr=r(TXe," \u2014 "),uee=n(TXe,"A",{href:!0});var hzt=s(uee);NIr=r(hzt,"TFOpenAIGPTForSequenceClassification"),hzt.forEach(t),qIr=r(TXe," (OpenAI GPT model)"),TXe.forEach(t),jIr=i(ne),u4=n(ne,"LI",{});var MXe=s(u4);X4e=n(MXe,"STRONG",{});var pzt=s(X4e);DIr=r(pzt,"rembert"),pzt.forEach(t),GIr=r(MXe," \u2014 "),bee=n(MXe,"A",{href:!0});var _zt=s(bee);OIr=r(_zt,"TFRemBertForSequenceClassification"),_zt.forEach(t),VIr=r(MXe," (RemBERT model)"),MXe.forEach(t),XIr=i(ne),b4=n(ne,"LI",{});var EXe=s(b4);z4e=n(EXe,"STRONG",{});var uzt=s(z4e);zIr=r(uzt,"roberta"),uzt.forEach(t),WIr=r(EXe," \u2014 "),vee=n(EXe,"A",{href:!0});var bzt=s(vee);QIr=r(bzt,"TFRobertaForSequenceClassification"),bzt.forEach(t),UIr=r(EXe," (RoBERTa model)"),EXe.forEach(t),HIr=i(ne),v4=n(ne,"LI",{});var CXe=s(v4);W4e=n(CXe,"STRONG",{});var vzt=s(W4e);JIr=r(vzt,"roformer"),vzt.forEach(t),YIr=r(CXe," \u2014 "),Fee=n(CXe,"A",{href:!0});var Fzt=s(Fee);KIr=r(Fzt,"TFRoFormerForSequenceClassification"),Fzt.forEach(t),ZIr=r(CXe," (RoFormer model)"),CXe.forEach(t),eNr=i(ne),F4=n(ne,"LI",{});var wXe=s(F4);Q4e=n(wXe,"STRONG",{});var Tzt=s(Q4e);oNr=r(Tzt,"tapas"),Tzt.forEach(t),rNr=r(wXe," \u2014 "),Tee=n(wXe,"A",{href:!0});var Mzt=s(Tee);tNr=r(Mzt,"TFTapasForSequenceClassification"),Mzt.forEach(t),aNr=r(wXe," (TAPAS model)"),wXe.forEach(t),nNr=i(ne),T4=n(ne,"LI",{});var AXe=s(T4);U4e=n(AXe,"STRONG",{});var Ezt=s(U4e);sNr=r(Ezt,"transfo-xl"),Ezt.forEach(t),lNr=r(AXe," \u2014 "),Mee=n(AXe,"A",{href:!0});var Czt=s(Mee);iNr=r(Czt,"TFTransfoXLForSequenceClassification"),Czt.forEach(t),dNr=r(AXe," (Transformer-XL model)"),AXe.forEach(t),cNr=i(ne),M4=n(ne,"LI",{});var LXe=s(M4);H4e=n(LXe,"STRONG",{});var wzt=s(H4e);fNr=r(wzt,"xlm"),wzt.forEach(t),mNr=r(LXe," \u2014 "),Eee=n(LXe,"A",{href:!0});var Azt=s(Eee);gNr=r(Azt,"TFXLMForSequenceClassification"),Azt.forEach(t),hNr=r(LXe," (XLM model)"),LXe.forEach(t),pNr=i(ne),E4=n(ne,"LI",{});var yXe=s(E4);J4e=n(yXe,"STRONG",{});var Lzt=s(J4e);_Nr=r(Lzt,"xlm-roberta"),Lzt.forEach(t),uNr=r(yXe," \u2014 "),Cee=n(yXe,"A",{href:!0});var yzt=s(Cee);bNr=r(yzt,"TFXLMRobertaForSequenceClassification"),yzt.forEach(t),vNr=r(yXe," (XLM-RoBERTa model)"),yXe.forEach(t),FNr=i(ne),C4=n(ne,"LI",{});var xXe=s(C4);Y4e=n(xXe,"STRONG",{});var xzt=s(Y4e);TNr=r(xzt,"xlnet"),xzt.forEach(t),MNr=r(xXe," \u2014 "),wee=n(xXe,"A",{href:!0});var $zt=s(wee);ENr=r($zt,"TFXLNetForSequenceClassification"),$zt.forEach(t),CNr=r(xXe," (XLNet model)"),xXe.forEach(t),ne.forEach(t),wNr=i(ti),T(w4.$$.fragment,ti),ti.forEach(t),ri.forEach(t),fHe=i(f),Qc=n(f,"H2",{class:!0});var CYe=s(Qc);A4=n(CYe,"A",{id:!0,class:!0,href:!0});var kzt=s(A4);K4e=n(kzt,"SPAN",{});var Szt=s(K4e);T(z$.$$.fragment,Szt),Szt.forEach(t),kzt.forEach(t),ANr=i(CYe),Z4e=n(CYe,"SPAN",{});var Rzt=s(Z4e);LNr=r(Rzt,"TFAutoModelForMultipleChoice"),Rzt.forEach(t),CYe.forEach(t),mHe=i(f),mr=n(f,"DIV",{class:!0});var ai=s(mr);T(W$.$$.fragment,ai),yNr=i(ai),Uc=n(ai,"P",{});var Kne=s(Uc);xNr=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Aee=n(Kne,"A",{href:!0});var Pzt=s(Aee);$Nr=r(Pzt,"from_pretrained()"),Pzt.forEach(t),kNr=r(Kne," class method or the "),Lee=n(Kne,"A",{href:!0});var Bzt=s(Lee);SNr=r(Bzt,"from_config()"),Bzt.forEach(t),RNr=r(Kne,` class
method.`),Kne.forEach(t),PNr=i(ai),Q$=n(ai,"P",{});var wYe=s(Q$);BNr=r(wYe,"This class cannot be instantiated directly using "),eCe=n(wYe,"CODE",{});var Izt=s(eCe);INr=r(Izt,"__init__()"),Izt.forEach(t),NNr=r(wYe," (throws an error)."),wYe.forEach(t),qNr=i(ai),Wt=n(ai,"DIV",{class:!0});var wA=s(Wt);T(U$.$$.fragment,wA),jNr=i(wA),oCe=n(wA,"P",{});var Nzt=s(oCe);DNr=r(Nzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Nzt.forEach(t),GNr=i(wA),Hc=n(wA,"P",{});var Zne=s(Hc);ONr=r(Zne,`Note:
Loading a model from its configuration file does `),rCe=n(Zne,"STRONG",{});var qzt=s(rCe);VNr=r(qzt,"not"),qzt.forEach(t),XNr=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(Zne,"A",{href:!0});var jzt=s(yee);zNr=r(jzt,"from_pretrained()"),jzt.forEach(t),WNr=r(Zne," to load the model weights."),Zne.forEach(t),QNr=i(wA),T(L4.$$.fragment,wA),wA.forEach(t),UNr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(H$.$$.fragment,ni),HNr=i(ni),tCe=n(ni,"P",{});var Dzt=s(tCe);JNr=r(Dzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Dzt.forEach(t),YNr=i(ni),Cn=n(ni,"P",{});var AA=s(Cn);KNr=r(AA,"The model class to instantiate is selected based on the "),aCe=n(AA,"CODE",{});var Gzt=s(aCe);ZNr=r(Gzt,"model_type"),Gzt.forEach(t),eqr=r(AA,` property of the config object (either
passed as an argument or loaded from `),nCe=n(AA,"CODE",{});var Ozt=s(nCe);oqr=r(Ozt,"pretrained_model_name_or_path"),Ozt.forEach(t),rqr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=n(AA,"CODE",{});var Vzt=s(sCe);tqr=r(Vzt,"pretrained_model_name_or_path"),Vzt.forEach(t),aqr=r(AA,":"),AA.forEach(t),nqr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);y4=n(Te,"LI",{});var $Xe=s(y4);lCe=n($Xe,"STRONG",{});var Xzt=s(lCe);sqr=r(Xzt,"albert"),Xzt.forEach(t),lqr=r($Xe," \u2014 "),xee=n($Xe,"A",{href:!0});var zzt=s(xee);iqr=r(zzt,"TFAlbertForMultipleChoice"),zzt.forEach(t),dqr=r($Xe," (ALBERT model)"),$Xe.forEach(t),cqr=i(Te),x4=n(Te,"LI",{});var kXe=s(x4);iCe=n(kXe,"STRONG",{});var Wzt=s(iCe);fqr=r(Wzt,"bert"),Wzt.forEach(t),mqr=r(kXe," \u2014 "),$ee=n(kXe,"A",{href:!0});var Qzt=s($ee);gqr=r(Qzt,"TFBertForMultipleChoice"),Qzt.forEach(t),hqr=r(kXe," (BERT model)"),kXe.forEach(t),pqr=i(Te),$4=n(Te,"LI",{});var SXe=s($4);dCe=n(SXe,"STRONG",{});var Uzt=s(dCe);_qr=r(Uzt,"camembert"),Uzt.forEach(t),uqr=r(SXe," \u2014 "),kee=n(SXe,"A",{href:!0});var Hzt=s(kee);bqr=r(Hzt,"TFCamembertForMultipleChoice"),Hzt.forEach(t),vqr=r(SXe," (CamemBERT model)"),SXe.forEach(t),Fqr=i(Te),k4=n(Te,"LI",{});var RXe=s(k4);cCe=n(RXe,"STRONG",{});var Jzt=s(cCe);Tqr=r(Jzt,"convbert"),Jzt.forEach(t),Mqr=r(RXe," \u2014 "),See=n(RXe,"A",{href:!0});var Yzt=s(See);Eqr=r(Yzt,"TFConvBertForMultipleChoice"),Yzt.forEach(t),Cqr=r(RXe," (ConvBERT model)"),RXe.forEach(t),wqr=i(Te),S4=n(Te,"LI",{});var PXe=s(S4);fCe=n(PXe,"STRONG",{});var Kzt=s(fCe);Aqr=r(Kzt,"distilbert"),Kzt.forEach(t),Lqr=r(PXe," \u2014 "),Ree=n(PXe,"A",{href:!0});var Zzt=s(Ree);yqr=r(Zzt,"TFDistilBertForMultipleChoice"),Zzt.forEach(t),xqr=r(PXe," (DistilBERT model)"),PXe.forEach(t),$qr=i(Te),R4=n(Te,"LI",{});var BXe=s(R4);mCe=n(BXe,"STRONG",{});var eWt=s(mCe);kqr=r(eWt,"electra"),eWt.forEach(t),Sqr=r(BXe," \u2014 "),Pee=n(BXe,"A",{href:!0});var oWt=s(Pee);Rqr=r(oWt,"TFElectraForMultipleChoice"),oWt.forEach(t),Pqr=r(BXe," (ELECTRA model)"),BXe.forEach(t),Bqr=i(Te),P4=n(Te,"LI",{});var IXe=s(P4);gCe=n(IXe,"STRONG",{});var rWt=s(gCe);Iqr=r(rWt,"flaubert"),rWt.forEach(t),Nqr=r(IXe," \u2014 "),Bee=n(IXe,"A",{href:!0});var tWt=s(Bee);qqr=r(tWt,"TFFlaubertForMultipleChoice"),tWt.forEach(t),jqr=r(IXe," (FlauBERT model)"),IXe.forEach(t),Dqr=i(Te),B4=n(Te,"LI",{});var NXe=s(B4);hCe=n(NXe,"STRONG",{});var aWt=s(hCe);Gqr=r(aWt,"funnel"),aWt.forEach(t),Oqr=r(NXe," \u2014 "),Iee=n(NXe,"A",{href:!0});var nWt=s(Iee);Vqr=r(nWt,"TFFunnelForMultipleChoice"),nWt.forEach(t),Xqr=r(NXe," (Funnel Transformer model)"),NXe.forEach(t),zqr=i(Te),I4=n(Te,"LI",{});var qXe=s(I4);pCe=n(qXe,"STRONG",{});var sWt=s(pCe);Wqr=r(sWt,"longformer"),sWt.forEach(t),Qqr=r(qXe," \u2014 "),Nee=n(qXe,"A",{href:!0});var lWt=s(Nee);Uqr=r(lWt,"TFLongformerForMultipleChoice"),lWt.forEach(t),Hqr=r(qXe," (Longformer model)"),qXe.forEach(t),Jqr=i(Te),N4=n(Te,"LI",{});var jXe=s(N4);_Ce=n(jXe,"STRONG",{});var iWt=s(_Ce);Yqr=r(iWt,"mobilebert"),iWt.forEach(t),Kqr=r(jXe," \u2014 "),qee=n(jXe,"A",{href:!0});var dWt=s(qee);Zqr=r(dWt,"TFMobileBertForMultipleChoice"),dWt.forEach(t),ejr=r(jXe," (MobileBERT model)"),jXe.forEach(t),ojr=i(Te),q4=n(Te,"LI",{});var DXe=s(q4);uCe=n(DXe,"STRONG",{});var cWt=s(uCe);rjr=r(cWt,"mpnet"),cWt.forEach(t),tjr=r(DXe," \u2014 "),jee=n(DXe,"A",{href:!0});var fWt=s(jee);ajr=r(fWt,"TFMPNetForMultipleChoice"),fWt.forEach(t),njr=r(DXe," (MPNet model)"),DXe.forEach(t),sjr=i(Te),j4=n(Te,"LI",{});var GXe=s(j4);bCe=n(GXe,"STRONG",{});var mWt=s(bCe);ljr=r(mWt,"rembert"),mWt.forEach(t),ijr=r(GXe," \u2014 "),Dee=n(GXe,"A",{href:!0});var gWt=s(Dee);djr=r(gWt,"TFRemBertForMultipleChoice"),gWt.forEach(t),cjr=r(GXe," (RemBERT model)"),GXe.forEach(t),fjr=i(Te),D4=n(Te,"LI",{});var OXe=s(D4);vCe=n(OXe,"STRONG",{});var hWt=s(vCe);mjr=r(hWt,"roberta"),hWt.forEach(t),gjr=r(OXe," \u2014 "),Gee=n(OXe,"A",{href:!0});var pWt=s(Gee);hjr=r(pWt,"TFRobertaForMultipleChoice"),pWt.forEach(t),pjr=r(OXe," (RoBERTa model)"),OXe.forEach(t),_jr=i(Te),G4=n(Te,"LI",{});var VXe=s(G4);FCe=n(VXe,"STRONG",{});var _Wt=s(FCe);ujr=r(_Wt,"roformer"),_Wt.forEach(t),bjr=r(VXe," \u2014 "),Oee=n(VXe,"A",{href:!0});var uWt=s(Oee);vjr=r(uWt,"TFRoFormerForMultipleChoice"),uWt.forEach(t),Fjr=r(VXe," (RoFormer model)"),VXe.forEach(t),Tjr=i(Te),O4=n(Te,"LI",{});var XXe=s(O4);TCe=n(XXe,"STRONG",{});var bWt=s(TCe);Mjr=r(bWt,"xlm"),bWt.forEach(t),Ejr=r(XXe," \u2014 "),Vee=n(XXe,"A",{href:!0});var vWt=s(Vee);Cjr=r(vWt,"TFXLMForMultipleChoice"),vWt.forEach(t),wjr=r(XXe," (XLM model)"),XXe.forEach(t),Ajr=i(Te),V4=n(Te,"LI",{});var zXe=s(V4);MCe=n(zXe,"STRONG",{});var FWt=s(MCe);Ljr=r(FWt,"xlm-roberta"),FWt.forEach(t),yjr=r(zXe," \u2014 "),Xee=n(zXe,"A",{href:!0});var TWt=s(Xee);xjr=r(TWt,"TFXLMRobertaForMultipleChoice"),TWt.forEach(t),$jr=r(zXe," (XLM-RoBERTa model)"),zXe.forEach(t),kjr=i(Te),X4=n(Te,"LI",{});var WXe=s(X4);ECe=n(WXe,"STRONG",{});var MWt=s(ECe);Sjr=r(MWt,"xlnet"),MWt.forEach(t),Rjr=r(WXe," \u2014 "),zee=n(WXe,"A",{href:!0});var EWt=s(zee);Pjr=r(EWt,"TFXLNetForMultipleChoice"),EWt.forEach(t),Bjr=r(WXe," (XLNet model)"),WXe.forEach(t),Te.forEach(t),Ijr=i(ni),T(z4.$$.fragment,ni),ni.forEach(t),ai.forEach(t),gHe=i(f),Jc=n(f,"H2",{class:!0});var AYe=s(Jc);W4=n(AYe,"A",{id:!0,class:!0,href:!0});var CWt=s(W4);CCe=n(CWt,"SPAN",{});var wWt=s(CCe);T(J$.$$.fragment,wWt),wWt.forEach(t),CWt.forEach(t),Njr=i(AYe),wCe=n(AYe,"SPAN",{});var AWt=s(wCe);qjr=r(AWt,"TFAutoModelForNextSentencePrediction"),AWt.forEach(t),AYe.forEach(t),hHe=i(f),gr=n(f,"DIV",{class:!0});var si=s(gr);T(Y$.$$.fragment,si),jjr=i(si),Yc=n(si,"P",{});var ese=s(Yc);Djr=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Wee=n(ese,"A",{href:!0});var LWt=s(Wee);Gjr=r(LWt,"from_pretrained()"),LWt.forEach(t),Ojr=r(ese," class method or the "),Qee=n(ese,"A",{href:!0});var yWt=s(Qee);Vjr=r(yWt,"from_config()"),yWt.forEach(t),Xjr=r(ese,` class
method.`),ese.forEach(t),zjr=i(si),K$=n(si,"P",{});var LYe=s(K$);Wjr=r(LYe,"This class cannot be instantiated directly using "),ACe=n(LYe,"CODE",{});var xWt=s(ACe);Qjr=r(xWt,"__init__()"),xWt.forEach(t),Ujr=r(LYe," (throws an error)."),LYe.forEach(t),Hjr=i(si),Qt=n(si,"DIV",{class:!0});var LA=s(Qt);T(Z$.$$.fragment,LA),Jjr=i(LA),LCe=n(LA,"P",{});var $Wt=s(LCe);Yjr=r($Wt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Wt.forEach(t),Kjr=i(LA),Kc=n(LA,"P",{});var ose=s(Kc);Zjr=r(ose,`Note:
Loading a model from its configuration file does `),yCe=n(ose,"STRONG",{});var kWt=s(yCe);eDr=r(kWt,"not"),kWt.forEach(t),oDr=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=n(ose,"A",{href:!0});var SWt=s(Uee);rDr=r(SWt,"from_pretrained()"),SWt.forEach(t),tDr=r(ose," to load the model weights."),ose.forEach(t),aDr=i(LA),T(Q4.$$.fragment,LA),LA.forEach(t),nDr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(ek.$$.fragment,li),sDr=i(li),xCe=n(li,"P",{});var RWt=s(xCe);lDr=r(RWt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),RWt.forEach(t),iDr=i(li),wn=n(li,"P",{});var yA=s(wn);dDr=r(yA,"The model class to instantiate is selected based on the "),$Ce=n(yA,"CODE",{});var PWt=s($Ce);cDr=r(PWt,"model_type"),PWt.forEach(t),fDr=r(yA,` property of the config object (either
passed as an argument or loaded from `),kCe=n(yA,"CODE",{});var BWt=s(kCe);mDr=r(BWt,"pretrained_model_name_or_path"),BWt.forEach(t),gDr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=n(yA,"CODE",{});var IWt=s(SCe);hDr=r(IWt,"pretrained_model_name_or_path"),IWt.forEach(t),pDr=r(yA,":"),yA.forEach(t),_Dr=i(li),ok=n(li,"UL",{});var yYe=s(ok);U4=n(yYe,"LI",{});var QXe=s(U4);RCe=n(QXe,"STRONG",{});var NWt=s(RCe);uDr=r(NWt,"bert"),NWt.forEach(t),bDr=r(QXe," \u2014 "),Hee=n(QXe,"A",{href:!0});var qWt=s(Hee);vDr=r(qWt,"TFBertForNextSentencePrediction"),qWt.forEach(t),FDr=r(QXe," (BERT model)"),QXe.forEach(t),TDr=i(yYe),H4=n(yYe,"LI",{});var UXe=s(H4);PCe=n(UXe,"STRONG",{});var jWt=s(PCe);MDr=r(jWt,"mobilebert"),jWt.forEach(t),EDr=r(UXe," \u2014 "),Jee=n(UXe,"A",{href:!0});var DWt=s(Jee);CDr=r(DWt,"TFMobileBertForNextSentencePrediction"),DWt.forEach(t),wDr=r(UXe," (MobileBERT model)"),UXe.forEach(t),yYe.forEach(t),ADr=i(li),T(J4.$$.fragment,li),li.forEach(t),si.forEach(t),pHe=i(f),Zc=n(f,"H2",{class:!0});var xYe=s(Zc);Y4=n(xYe,"A",{id:!0,class:!0,href:!0});var GWt=s(Y4);BCe=n(GWt,"SPAN",{});var OWt=s(BCe);T(rk.$$.fragment,OWt),OWt.forEach(t),GWt.forEach(t),LDr=i(xYe),ICe=n(xYe,"SPAN",{});var VWt=s(ICe);yDr=r(VWt,"TFAutoModelForTableQuestionAnswering"),VWt.forEach(t),xYe.forEach(t),_He=i(f),hr=n(f,"DIV",{class:!0});var ii=s(hr);T(tk.$$.fragment,ii),xDr=i(ii),ef=n(ii,"P",{});var rse=s(ef);$Dr=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Yee=n(rse,"A",{href:!0});var XWt=s(Yee);kDr=r(XWt,"from_pretrained()"),XWt.forEach(t),SDr=r(rse," class method or the "),Kee=n(rse,"A",{href:!0});var zWt=s(Kee);RDr=r(zWt,"from_config()"),zWt.forEach(t),PDr=r(rse,` class
method.`),rse.forEach(t),BDr=i(ii),ak=n(ii,"P",{});var $Ye=s(ak);IDr=r($Ye,"This class cannot be instantiated directly using "),NCe=n($Ye,"CODE",{});var WWt=s(NCe);NDr=r(WWt,"__init__()"),WWt.forEach(t),qDr=r($Ye," (throws an error)."),$Ye.forEach(t),jDr=i(ii),Ut=n(ii,"DIV",{class:!0});var xA=s(Ut);T(nk.$$.fragment,xA),DDr=i(xA),qCe=n(xA,"P",{});var QWt=s(qCe);GDr=r(QWt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),QWt.forEach(t),ODr=i(xA),of=n(xA,"P",{});var tse=s(of);VDr=r(tse,`Note:
Loading a model from its configuration file does `),jCe=n(tse,"STRONG",{});var UWt=s(jCe);XDr=r(UWt,"not"),UWt.forEach(t),zDr=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=n(tse,"A",{href:!0});var HWt=s(Zee);WDr=r(HWt,"from_pretrained()"),HWt.forEach(t),QDr=r(tse," to load the model weights."),tse.forEach(t),UDr=i(xA),T(K4.$$.fragment,xA),xA.forEach(t),HDr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(sk.$$.fragment,di),JDr=i(di),DCe=n(di,"P",{});var JWt=s(DCe);YDr=r(JWt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),JWt.forEach(t),KDr=i(di),An=n(di,"P",{});var $A=s(An);ZDr=r($A,"The model class to instantiate is selected based on the "),GCe=n($A,"CODE",{});var YWt=s(GCe);eGr=r(YWt,"model_type"),YWt.forEach(t),oGr=r($A,` property of the config object (either
passed as an argument or loaded from `),OCe=n($A,"CODE",{});var KWt=s(OCe);rGr=r(KWt,"pretrained_model_name_or_path"),KWt.forEach(t),tGr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VCe=n($A,"CODE",{});var ZWt=s(VCe);aGr=r(ZWt,"pretrained_model_name_or_path"),ZWt.forEach(t),nGr=r($A,":"),$A.forEach(t),sGr=i(di),XCe=n(di,"UL",{});var eQt=s(XCe);Z4=n(eQt,"LI",{});var HXe=s(Z4);zCe=n(HXe,"STRONG",{});var oQt=s(zCe);lGr=r(oQt,"tapas"),oQt.forEach(t),iGr=r(HXe," \u2014 "),eoe=n(HXe,"A",{href:!0});var rQt=s(eoe);dGr=r(rQt,"TFTapasForQuestionAnswering"),rQt.forEach(t),cGr=r(HXe," (TAPAS model)"),HXe.forEach(t),eQt.forEach(t),fGr=i(di),T(eC.$$.fragment,di),di.forEach(t),ii.forEach(t),uHe=i(f),rf=n(f,"H2",{class:!0});var kYe=s(rf);oC=n(kYe,"A",{id:!0,class:!0,href:!0});var tQt=s(oC);WCe=n(tQt,"SPAN",{});var aQt=s(WCe);T(lk.$$.fragment,aQt),aQt.forEach(t),tQt.forEach(t),mGr=i(kYe),QCe=n(kYe,"SPAN",{});var nQt=s(QCe);gGr=r(nQt,"TFAutoModelForTokenClassification"),nQt.forEach(t),kYe.forEach(t),bHe=i(f),pr=n(f,"DIV",{class:!0});var ci=s(pr);T(ik.$$.fragment,ci),hGr=i(ci),tf=n(ci,"P",{});var ase=s(tf);pGr=r(ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ooe=n(ase,"A",{href:!0});var sQt=s(ooe);_Gr=r(sQt,"from_pretrained()"),sQt.forEach(t),uGr=r(ase," class method or the "),roe=n(ase,"A",{href:!0});var lQt=s(roe);bGr=r(lQt,"from_config()"),lQt.forEach(t),vGr=r(ase,` class
method.`),ase.forEach(t),FGr=i(ci),dk=n(ci,"P",{});var SYe=s(dk);TGr=r(SYe,"This class cannot be instantiated directly using "),UCe=n(SYe,"CODE",{});var iQt=s(UCe);MGr=r(iQt,"__init__()"),iQt.forEach(t),EGr=r(SYe," (throws an error)."),SYe.forEach(t),CGr=i(ci),Ht=n(ci,"DIV",{class:!0});var kA=s(Ht);T(ck.$$.fragment,kA),wGr=i(kA),HCe=n(kA,"P",{});var dQt=s(HCe);AGr=r(dQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dQt.forEach(t),LGr=i(kA),af=n(kA,"P",{});var nse=s(af);yGr=r(nse,`Note:
Loading a model from its configuration file does `),JCe=n(nse,"STRONG",{});var cQt=s(JCe);xGr=r(cQt,"not"),cQt.forEach(t),$Gr=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=n(nse,"A",{href:!0});var fQt=s(toe);kGr=r(fQt,"from_pretrained()"),fQt.forEach(t),SGr=r(nse," to load the model weights."),nse.forEach(t),RGr=i(kA),T(rC.$$.fragment,kA),kA.forEach(t),PGr=i(ci),Xr=n(ci,"DIV",{class:!0});var fi=s(Xr);T(fk.$$.fragment,fi),BGr=i(fi),YCe=n(fi,"P",{});var mQt=s(YCe);IGr=r(mQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mQt.forEach(t),NGr=i(fi),Ln=n(fi,"P",{});var SA=s(Ln);qGr=r(SA,"The model class to instantiate is selected based on the "),KCe=n(SA,"CODE",{});var gQt=s(KCe);jGr=r(gQt,"model_type"),gQt.forEach(t),DGr=r(SA,` property of the config object (either
passed as an argument or loaded from `),ZCe=n(SA,"CODE",{});var hQt=s(ZCe);GGr=r(hQt,"pretrained_model_name_or_path"),hQt.forEach(t),OGr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=n(SA,"CODE",{});var pQt=s(e3e);VGr=r(pQt,"pretrained_model_name_or_path"),pQt.forEach(t),XGr=r(SA,":"),SA.forEach(t),zGr=i(fi),ce=n(fi,"UL",{});var pe=s(ce);tC=n(pe,"LI",{});var JXe=s(tC);o3e=n(JXe,"STRONG",{});var _Qt=s(o3e);WGr=r(_Qt,"albert"),_Qt.forEach(t),QGr=r(JXe," \u2014 "),aoe=n(JXe,"A",{href:!0});var uQt=s(aoe);UGr=r(uQt,"TFAlbertForTokenClassification"),uQt.forEach(t),HGr=r(JXe," (ALBERT model)"),JXe.forEach(t),JGr=i(pe),aC=n(pe,"LI",{});var YXe=s(aC);r3e=n(YXe,"STRONG",{});var bQt=s(r3e);YGr=r(bQt,"bert"),bQt.forEach(t),KGr=r(YXe," \u2014 "),noe=n(YXe,"A",{href:!0});var vQt=s(noe);ZGr=r(vQt,"TFBertForTokenClassification"),vQt.forEach(t),eOr=r(YXe," (BERT model)"),YXe.forEach(t),oOr=i(pe),nC=n(pe,"LI",{});var KXe=s(nC);t3e=n(KXe,"STRONG",{});var FQt=s(t3e);rOr=r(FQt,"camembert"),FQt.forEach(t),tOr=r(KXe," \u2014 "),soe=n(KXe,"A",{href:!0});var TQt=s(soe);aOr=r(TQt,"TFCamembertForTokenClassification"),TQt.forEach(t),nOr=r(KXe," (CamemBERT model)"),KXe.forEach(t),sOr=i(pe),sC=n(pe,"LI",{});var ZXe=s(sC);a3e=n(ZXe,"STRONG",{});var MQt=s(a3e);lOr=r(MQt,"convbert"),MQt.forEach(t),iOr=r(ZXe," \u2014 "),loe=n(ZXe,"A",{href:!0});var EQt=s(loe);dOr=r(EQt,"TFConvBertForTokenClassification"),EQt.forEach(t),cOr=r(ZXe," (ConvBERT model)"),ZXe.forEach(t),fOr=i(pe),lC=n(pe,"LI",{});var eze=s(lC);n3e=n(eze,"STRONG",{});var CQt=s(n3e);mOr=r(CQt,"deberta"),CQt.forEach(t),gOr=r(eze," \u2014 "),ioe=n(eze,"A",{href:!0});var wQt=s(ioe);hOr=r(wQt,"TFDebertaForTokenClassification"),wQt.forEach(t),pOr=r(eze," (DeBERTa model)"),eze.forEach(t),_Or=i(pe),iC=n(pe,"LI",{});var oze=s(iC);s3e=n(oze,"STRONG",{});var AQt=s(s3e);uOr=r(AQt,"deberta-v2"),AQt.forEach(t),bOr=r(oze," \u2014 "),doe=n(oze,"A",{href:!0});var LQt=s(doe);vOr=r(LQt,"TFDebertaV2ForTokenClassification"),LQt.forEach(t),FOr=r(oze," (DeBERTa-v2 model)"),oze.forEach(t),TOr=i(pe),dC=n(pe,"LI",{});var rze=s(dC);l3e=n(rze,"STRONG",{});var yQt=s(l3e);MOr=r(yQt,"distilbert"),yQt.forEach(t),EOr=r(rze," \u2014 "),coe=n(rze,"A",{href:!0});var xQt=s(coe);COr=r(xQt,"TFDistilBertForTokenClassification"),xQt.forEach(t),wOr=r(rze," (DistilBERT model)"),rze.forEach(t),AOr=i(pe),cC=n(pe,"LI",{});var tze=s(cC);i3e=n(tze,"STRONG",{});var $Qt=s(i3e);LOr=r($Qt,"electra"),$Qt.forEach(t),yOr=r(tze," \u2014 "),foe=n(tze,"A",{href:!0});var kQt=s(foe);xOr=r(kQt,"TFElectraForTokenClassification"),kQt.forEach(t),$Or=r(tze," (ELECTRA model)"),tze.forEach(t),kOr=i(pe),fC=n(pe,"LI",{});var aze=s(fC);d3e=n(aze,"STRONG",{});var SQt=s(d3e);SOr=r(SQt,"flaubert"),SQt.forEach(t),ROr=r(aze," \u2014 "),moe=n(aze,"A",{href:!0});var RQt=s(moe);POr=r(RQt,"TFFlaubertForTokenClassification"),RQt.forEach(t),BOr=r(aze," (FlauBERT model)"),aze.forEach(t),IOr=i(pe),mC=n(pe,"LI",{});var nze=s(mC);c3e=n(nze,"STRONG",{});var PQt=s(c3e);NOr=r(PQt,"funnel"),PQt.forEach(t),qOr=r(nze," \u2014 "),goe=n(nze,"A",{href:!0});var BQt=s(goe);jOr=r(BQt,"TFFunnelForTokenClassification"),BQt.forEach(t),DOr=r(nze," (Funnel Transformer model)"),nze.forEach(t),GOr=i(pe),gC=n(pe,"LI",{});var sze=s(gC);f3e=n(sze,"STRONG",{});var IQt=s(f3e);OOr=r(IQt,"layoutlm"),IQt.forEach(t),VOr=r(sze," \u2014 "),hoe=n(sze,"A",{href:!0});var NQt=s(hoe);XOr=r(NQt,"TFLayoutLMForTokenClassification"),NQt.forEach(t),zOr=r(sze," (LayoutLM model)"),sze.forEach(t),WOr=i(pe),hC=n(pe,"LI",{});var lze=s(hC);m3e=n(lze,"STRONG",{});var qQt=s(m3e);QOr=r(qQt,"longformer"),qQt.forEach(t),UOr=r(lze," \u2014 "),poe=n(lze,"A",{href:!0});var jQt=s(poe);HOr=r(jQt,"TFLongformerForTokenClassification"),jQt.forEach(t),JOr=r(lze," (Longformer model)"),lze.forEach(t),YOr=i(pe),pC=n(pe,"LI",{});var ize=s(pC);g3e=n(ize,"STRONG",{});var DQt=s(g3e);KOr=r(DQt,"mobilebert"),DQt.forEach(t),ZOr=r(ize," \u2014 "),_oe=n(ize,"A",{href:!0});var GQt=s(_oe);eVr=r(GQt,"TFMobileBertForTokenClassification"),GQt.forEach(t),oVr=r(ize," (MobileBERT model)"),ize.forEach(t),rVr=i(pe),_C=n(pe,"LI",{});var dze=s(_C);h3e=n(dze,"STRONG",{});var OQt=s(h3e);tVr=r(OQt,"mpnet"),OQt.forEach(t),aVr=r(dze," \u2014 "),uoe=n(dze,"A",{href:!0});var VQt=s(uoe);nVr=r(VQt,"TFMPNetForTokenClassification"),VQt.forEach(t),sVr=r(dze," (MPNet model)"),dze.forEach(t),lVr=i(pe),uC=n(pe,"LI",{});var cze=s(uC);p3e=n(cze,"STRONG",{});var XQt=s(p3e);iVr=r(XQt,"rembert"),XQt.forEach(t),dVr=r(cze," \u2014 "),boe=n(cze,"A",{href:!0});var zQt=s(boe);cVr=r(zQt,"TFRemBertForTokenClassification"),zQt.forEach(t),fVr=r(cze," (RemBERT model)"),cze.forEach(t),mVr=i(pe),bC=n(pe,"LI",{});var fze=s(bC);_3e=n(fze,"STRONG",{});var WQt=s(_3e);gVr=r(WQt,"roberta"),WQt.forEach(t),hVr=r(fze," \u2014 "),voe=n(fze,"A",{href:!0});var QQt=s(voe);pVr=r(QQt,"TFRobertaForTokenClassification"),QQt.forEach(t),_Vr=r(fze," (RoBERTa model)"),fze.forEach(t),uVr=i(pe),vC=n(pe,"LI",{});var mze=s(vC);u3e=n(mze,"STRONG",{});var UQt=s(u3e);bVr=r(UQt,"roformer"),UQt.forEach(t),vVr=r(mze," \u2014 "),Foe=n(mze,"A",{href:!0});var HQt=s(Foe);FVr=r(HQt,"TFRoFormerForTokenClassification"),HQt.forEach(t),TVr=r(mze," (RoFormer model)"),mze.forEach(t),MVr=i(pe),FC=n(pe,"LI",{});var gze=s(FC);b3e=n(gze,"STRONG",{});var JQt=s(b3e);EVr=r(JQt,"xlm"),JQt.forEach(t),CVr=r(gze," \u2014 "),Toe=n(gze,"A",{href:!0});var YQt=s(Toe);wVr=r(YQt,"TFXLMForTokenClassification"),YQt.forEach(t),AVr=r(gze," (XLM model)"),gze.forEach(t),LVr=i(pe),TC=n(pe,"LI",{});var hze=s(TC);v3e=n(hze,"STRONG",{});var KQt=s(v3e);yVr=r(KQt,"xlm-roberta"),KQt.forEach(t),xVr=r(hze," \u2014 "),Moe=n(hze,"A",{href:!0});var ZQt=s(Moe);$Vr=r(ZQt,"TFXLMRobertaForTokenClassification"),ZQt.forEach(t),kVr=r(hze," (XLM-RoBERTa model)"),hze.forEach(t),SVr=i(pe),MC=n(pe,"LI",{});var pze=s(MC);F3e=n(pze,"STRONG",{});var eUt=s(F3e);RVr=r(eUt,"xlnet"),eUt.forEach(t),PVr=r(pze," \u2014 "),Eoe=n(pze,"A",{href:!0});var oUt=s(Eoe);BVr=r(oUt,"TFXLNetForTokenClassification"),oUt.forEach(t),IVr=r(pze," (XLNet model)"),pze.forEach(t),pe.forEach(t),NVr=i(fi),T(EC.$$.fragment,fi),fi.forEach(t),ci.forEach(t),vHe=i(f),nf=n(f,"H2",{class:!0});var RYe=s(nf);CC=n(RYe,"A",{id:!0,class:!0,href:!0});var rUt=s(CC);T3e=n(rUt,"SPAN",{});var tUt=s(T3e);T(mk.$$.fragment,tUt),tUt.forEach(t),rUt.forEach(t),qVr=i(RYe),M3e=n(RYe,"SPAN",{});var aUt=s(M3e);jVr=r(aUt,"TFAutoModelForQuestionAnswering"),aUt.forEach(t),RYe.forEach(t),FHe=i(f),_r=n(f,"DIV",{class:!0});var mi=s(_r);T(gk.$$.fragment,mi),DVr=i(mi),sf=n(mi,"P",{});var sse=s(sf);GVr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Coe=n(sse,"A",{href:!0});var nUt=s(Coe);OVr=r(nUt,"from_pretrained()"),nUt.forEach(t),VVr=r(sse," class method or the "),woe=n(sse,"A",{href:!0});var sUt=s(woe);XVr=r(sUt,"from_config()"),sUt.forEach(t),zVr=r(sse,` class
method.`),sse.forEach(t),WVr=i(mi),hk=n(mi,"P",{});var PYe=s(hk);QVr=r(PYe,"This class cannot be instantiated directly using "),E3e=n(PYe,"CODE",{});var lUt=s(E3e);UVr=r(lUt,"__init__()"),lUt.forEach(t),HVr=r(PYe," (throws an error)."),PYe.forEach(t),JVr=i(mi),Jt=n(mi,"DIV",{class:!0});var RA=s(Jt);T(pk.$$.fragment,RA),YVr=i(RA),C3e=n(RA,"P",{});var iUt=s(C3e);KVr=r(iUt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iUt.forEach(t),ZVr=i(RA),lf=n(RA,"P",{});var lse=s(lf);eXr=r(lse,`Note:
Loading a model from its configuration file does `),w3e=n(lse,"STRONG",{});var dUt=s(w3e);oXr=r(dUt,"not"),dUt.forEach(t),rXr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=n(lse,"A",{href:!0});var cUt=s(Aoe);tXr=r(cUt,"from_pretrained()"),cUt.forEach(t),aXr=r(lse," to load the model weights."),lse.forEach(t),nXr=i(RA),T(wC.$$.fragment,RA),RA.forEach(t),sXr=i(mi),zr=n(mi,"DIV",{class:!0});var gi=s(zr);T(_k.$$.fragment,gi),lXr=i(gi),A3e=n(gi,"P",{});var fUt=s(A3e);iXr=r(fUt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fUt.forEach(t),dXr=i(gi),yn=n(gi,"P",{});var PA=s(yn);cXr=r(PA,"The model class to instantiate is selected based on the "),L3e=n(PA,"CODE",{});var mUt=s(L3e);fXr=r(mUt,"model_type"),mUt.forEach(t),mXr=r(PA,` property of the config object (either
passed as an argument or loaded from `),y3e=n(PA,"CODE",{});var gUt=s(y3e);gXr=r(gUt,"pretrained_model_name_or_path"),gUt.forEach(t),hXr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=n(PA,"CODE",{});var hUt=s(x3e);pXr=r(hUt,"pretrained_model_name_or_path"),hUt.forEach(t),_Xr=r(PA,":"),PA.forEach(t),uXr=i(gi),fe=n(gi,"UL",{});var _e=s(fe);AC=n(_e,"LI",{});var _ze=s(AC);$3e=n(_ze,"STRONG",{});var pUt=s($3e);bXr=r(pUt,"albert"),pUt.forEach(t),vXr=r(_ze," \u2014 "),Loe=n(_ze,"A",{href:!0});var _Ut=s(Loe);FXr=r(_Ut,"TFAlbertForQuestionAnswering"),_Ut.forEach(t),TXr=r(_ze," (ALBERT model)"),_ze.forEach(t),MXr=i(_e),LC=n(_e,"LI",{});var uze=s(LC);k3e=n(uze,"STRONG",{});var uUt=s(k3e);EXr=r(uUt,"bert"),uUt.forEach(t),CXr=r(uze," \u2014 "),yoe=n(uze,"A",{href:!0});var bUt=s(yoe);wXr=r(bUt,"TFBertForQuestionAnswering"),bUt.forEach(t),AXr=r(uze," (BERT model)"),uze.forEach(t),LXr=i(_e),yC=n(_e,"LI",{});var bze=s(yC);S3e=n(bze,"STRONG",{});var vUt=s(S3e);yXr=r(vUt,"camembert"),vUt.forEach(t),xXr=r(bze," \u2014 "),xoe=n(bze,"A",{href:!0});var FUt=s(xoe);$Xr=r(FUt,"TFCamembertForQuestionAnswering"),FUt.forEach(t),kXr=r(bze," (CamemBERT model)"),bze.forEach(t),SXr=i(_e),xC=n(_e,"LI",{});var vze=s(xC);R3e=n(vze,"STRONG",{});var TUt=s(R3e);RXr=r(TUt,"convbert"),TUt.forEach(t),PXr=r(vze," \u2014 "),$oe=n(vze,"A",{href:!0});var MUt=s($oe);BXr=r(MUt,"TFConvBertForQuestionAnswering"),MUt.forEach(t),IXr=r(vze," (ConvBERT model)"),vze.forEach(t),NXr=i(_e),$C=n(_e,"LI",{});var Fze=s($C);P3e=n(Fze,"STRONG",{});var EUt=s(P3e);qXr=r(EUt,"deberta"),EUt.forEach(t),jXr=r(Fze," \u2014 "),koe=n(Fze,"A",{href:!0});var CUt=s(koe);DXr=r(CUt,"TFDebertaForQuestionAnswering"),CUt.forEach(t),GXr=r(Fze," (DeBERTa model)"),Fze.forEach(t),OXr=i(_e),kC=n(_e,"LI",{});var Tze=s(kC);B3e=n(Tze,"STRONG",{});var wUt=s(B3e);VXr=r(wUt,"deberta-v2"),wUt.forEach(t),XXr=r(Tze," \u2014 "),Soe=n(Tze,"A",{href:!0});var AUt=s(Soe);zXr=r(AUt,"TFDebertaV2ForQuestionAnswering"),AUt.forEach(t),WXr=r(Tze," (DeBERTa-v2 model)"),Tze.forEach(t),QXr=i(_e),SC=n(_e,"LI",{});var Mze=s(SC);I3e=n(Mze,"STRONG",{});var LUt=s(I3e);UXr=r(LUt,"distilbert"),LUt.forEach(t),HXr=r(Mze," \u2014 "),Roe=n(Mze,"A",{href:!0});var yUt=s(Roe);JXr=r(yUt,"TFDistilBertForQuestionAnswering"),yUt.forEach(t),YXr=r(Mze," (DistilBERT model)"),Mze.forEach(t),KXr=i(_e),RC=n(_e,"LI",{});var Eze=s(RC);N3e=n(Eze,"STRONG",{});var xUt=s(N3e);ZXr=r(xUt,"electra"),xUt.forEach(t),ezr=r(Eze," \u2014 "),Poe=n(Eze,"A",{href:!0});var $Ut=s(Poe);ozr=r($Ut,"TFElectraForQuestionAnswering"),$Ut.forEach(t),rzr=r(Eze," (ELECTRA model)"),Eze.forEach(t),tzr=i(_e),PC=n(_e,"LI",{});var Cze=s(PC);q3e=n(Cze,"STRONG",{});var kUt=s(q3e);azr=r(kUt,"flaubert"),kUt.forEach(t),nzr=r(Cze," \u2014 "),Boe=n(Cze,"A",{href:!0});var SUt=s(Boe);szr=r(SUt,"TFFlaubertForQuestionAnsweringSimple"),SUt.forEach(t),lzr=r(Cze," (FlauBERT model)"),Cze.forEach(t),izr=i(_e),BC=n(_e,"LI",{});var wze=s(BC);j3e=n(wze,"STRONG",{});var RUt=s(j3e);dzr=r(RUt,"funnel"),RUt.forEach(t),czr=r(wze," \u2014 "),Ioe=n(wze,"A",{href:!0});var PUt=s(Ioe);fzr=r(PUt,"TFFunnelForQuestionAnswering"),PUt.forEach(t),mzr=r(wze," (Funnel Transformer model)"),wze.forEach(t),gzr=i(_e),IC=n(_e,"LI",{});var Aze=s(IC);D3e=n(Aze,"STRONG",{});var BUt=s(D3e);hzr=r(BUt,"gptj"),BUt.forEach(t),pzr=r(Aze," \u2014 "),Noe=n(Aze,"A",{href:!0});var IUt=s(Noe);_zr=r(IUt,"TFGPTJForQuestionAnswering"),IUt.forEach(t),uzr=r(Aze," (GPT-J model)"),Aze.forEach(t),bzr=i(_e),NC=n(_e,"LI",{});var Lze=s(NC);G3e=n(Lze,"STRONG",{});var NUt=s(G3e);vzr=r(NUt,"longformer"),NUt.forEach(t),Fzr=r(Lze," \u2014 "),qoe=n(Lze,"A",{href:!0});var qUt=s(qoe);Tzr=r(qUt,"TFLongformerForQuestionAnswering"),qUt.forEach(t),Mzr=r(Lze," (Longformer model)"),Lze.forEach(t),Ezr=i(_e),qC=n(_e,"LI",{});var yze=s(qC);O3e=n(yze,"STRONG",{});var jUt=s(O3e);Czr=r(jUt,"mobilebert"),jUt.forEach(t),wzr=r(yze," \u2014 "),joe=n(yze,"A",{href:!0});var DUt=s(joe);Azr=r(DUt,"TFMobileBertForQuestionAnswering"),DUt.forEach(t),Lzr=r(yze," (MobileBERT model)"),yze.forEach(t),yzr=i(_e),jC=n(_e,"LI",{});var xze=s(jC);V3e=n(xze,"STRONG",{});var GUt=s(V3e);xzr=r(GUt,"mpnet"),GUt.forEach(t),$zr=r(xze," \u2014 "),Doe=n(xze,"A",{href:!0});var OUt=s(Doe);kzr=r(OUt,"TFMPNetForQuestionAnswering"),OUt.forEach(t),Szr=r(xze," (MPNet model)"),xze.forEach(t),Rzr=i(_e),DC=n(_e,"LI",{});var $ze=s(DC);X3e=n($ze,"STRONG",{});var VUt=s(X3e);Pzr=r(VUt,"rembert"),VUt.forEach(t),Bzr=r($ze," \u2014 "),Goe=n($ze,"A",{href:!0});var XUt=s(Goe);Izr=r(XUt,"TFRemBertForQuestionAnswering"),XUt.forEach(t),Nzr=r($ze," (RemBERT model)"),$ze.forEach(t),qzr=i(_e),GC=n(_e,"LI",{});var kze=s(GC);z3e=n(kze,"STRONG",{});var zUt=s(z3e);jzr=r(zUt,"roberta"),zUt.forEach(t),Dzr=r(kze," \u2014 "),Ooe=n(kze,"A",{href:!0});var WUt=s(Ooe);Gzr=r(WUt,"TFRobertaForQuestionAnswering"),WUt.forEach(t),Ozr=r(kze," (RoBERTa model)"),kze.forEach(t),Vzr=i(_e),OC=n(_e,"LI",{});var Sze=s(OC);W3e=n(Sze,"STRONG",{});var QUt=s(W3e);Xzr=r(QUt,"roformer"),QUt.forEach(t),zzr=r(Sze," \u2014 "),Voe=n(Sze,"A",{href:!0});var UUt=s(Voe);Wzr=r(UUt,"TFRoFormerForQuestionAnswering"),UUt.forEach(t),Qzr=r(Sze," (RoFormer model)"),Sze.forEach(t),Uzr=i(_e),VC=n(_e,"LI",{});var Rze=s(VC);Q3e=n(Rze,"STRONG",{});var HUt=s(Q3e);Hzr=r(HUt,"xlm"),HUt.forEach(t),Jzr=r(Rze," \u2014 "),Xoe=n(Rze,"A",{href:!0});var JUt=s(Xoe);Yzr=r(JUt,"TFXLMForQuestionAnsweringSimple"),JUt.forEach(t),Kzr=r(Rze," (XLM model)"),Rze.forEach(t),Zzr=i(_e),XC=n(_e,"LI",{});var Pze=s(XC);U3e=n(Pze,"STRONG",{});var YUt=s(U3e);eWr=r(YUt,"xlm-roberta"),YUt.forEach(t),oWr=r(Pze," \u2014 "),zoe=n(Pze,"A",{href:!0});var KUt=s(zoe);rWr=r(KUt,"TFXLMRobertaForQuestionAnswering"),KUt.forEach(t),tWr=r(Pze," (XLM-RoBERTa model)"),Pze.forEach(t),aWr=i(_e),zC=n(_e,"LI",{});var Bze=s(zC);H3e=n(Bze,"STRONG",{});var ZUt=s(H3e);nWr=r(ZUt,"xlnet"),ZUt.forEach(t),sWr=r(Bze," \u2014 "),Woe=n(Bze,"A",{href:!0});var eHt=s(Woe);lWr=r(eHt,"TFXLNetForQuestionAnsweringSimple"),eHt.forEach(t),iWr=r(Bze," (XLNet model)"),Bze.forEach(t),_e.forEach(t),dWr=i(gi),T(WC.$$.fragment,gi),gi.forEach(t),mi.forEach(t),THe=i(f),df=n(f,"H2",{class:!0});var BYe=s(df);QC=n(BYe,"A",{id:!0,class:!0,href:!0});var oHt=s(QC);J3e=n(oHt,"SPAN",{});var rHt=s(J3e);T(uk.$$.fragment,rHt),rHt.forEach(t),oHt.forEach(t),cWr=i(BYe),Y3e=n(BYe,"SPAN",{});var tHt=s(Y3e);fWr=r(tHt,"TFAutoModelForVision2Seq"),tHt.forEach(t),BYe.forEach(t),MHe=i(f),ur=n(f,"DIV",{class:!0});var hi=s(ur);T(bk.$$.fragment,hi),mWr=i(hi),cf=n(hi,"P",{});var ise=s(cf);gWr=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Qoe=n(ise,"A",{href:!0});var aHt=s(Qoe);hWr=r(aHt,"from_pretrained()"),aHt.forEach(t),pWr=r(ise," class method or the "),Uoe=n(ise,"A",{href:!0});var nHt=s(Uoe);_Wr=r(nHt,"from_config()"),nHt.forEach(t),uWr=r(ise,` class
method.`),ise.forEach(t),bWr=i(hi),vk=n(hi,"P",{});var IYe=s(vk);vWr=r(IYe,"This class cannot be instantiated directly using "),K3e=n(IYe,"CODE",{});var sHt=s(K3e);FWr=r(sHt,"__init__()"),sHt.forEach(t),TWr=r(IYe," (throws an error)."),IYe.forEach(t),MWr=i(hi),Yt=n(hi,"DIV",{class:!0});var BA=s(Yt);T(Fk.$$.fragment,BA),EWr=i(BA),Z3e=n(BA,"P",{});var lHt=s(Z3e);CWr=r(lHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lHt.forEach(t),wWr=i(BA),ff=n(BA,"P",{});var dse=s(ff);AWr=r(dse,`Note:
Loading a model from its configuration file does `),e5e=n(dse,"STRONG",{});var iHt=s(e5e);LWr=r(iHt,"not"),iHt.forEach(t),yWr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=n(dse,"A",{href:!0});var dHt=s(Hoe);xWr=r(dHt,"from_pretrained()"),dHt.forEach(t),$Wr=r(dse," to load the model weights."),dse.forEach(t),kWr=i(BA),T(UC.$$.fragment,BA),BA.forEach(t),SWr=i(hi),Wr=n(hi,"DIV",{class:!0});var pi=s(Wr);T(Tk.$$.fragment,pi),RWr=i(pi),o5e=n(pi,"P",{});var cHt=s(o5e);PWr=r(cHt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cHt.forEach(t),BWr=i(pi),xn=n(pi,"P",{});var IA=s(xn);IWr=r(IA,"The model class to instantiate is selected based on the "),r5e=n(IA,"CODE",{});var fHt=s(r5e);NWr=r(fHt,"model_type"),fHt.forEach(t),qWr=r(IA,` property of the config object (either
passed as an argument or loaded from `),t5e=n(IA,"CODE",{});var mHt=s(t5e);jWr=r(mHt,"pretrained_model_name_or_path"),mHt.forEach(t),DWr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=n(IA,"CODE",{});var gHt=s(a5e);GWr=r(gHt,"pretrained_model_name_or_path"),gHt.forEach(t),OWr=r(IA,":"),IA.forEach(t),VWr=i(pi),n5e=n(pi,"UL",{});var hHt=s(n5e);HC=n(hHt,"LI",{});var Ize=s(HC);s5e=n(Ize,"STRONG",{});var pHt=s(s5e);XWr=r(pHt,"vision-encoder-decoder"),pHt.forEach(t),zWr=r(Ize," \u2014 "),Joe=n(Ize,"A",{href:!0});var _Ht=s(Joe);WWr=r(_Ht,"TFVisionEncoderDecoderModel"),_Ht.forEach(t),QWr=r(Ize," (Vision Encoder decoder model)"),Ize.forEach(t),hHt.forEach(t),UWr=i(pi),T(JC.$$.fragment,pi),pi.forEach(t),hi.forEach(t),EHe=i(f),mf=n(f,"H2",{class:!0});var NYe=s(mf);YC=n(NYe,"A",{id:!0,class:!0,href:!0});var uHt=s(YC);l5e=n(uHt,"SPAN",{});var bHt=s(l5e);T(Mk.$$.fragment,bHt),bHt.forEach(t),uHt.forEach(t),HWr=i(NYe),i5e=n(NYe,"SPAN",{});var vHt=s(i5e);JWr=r(vHt,"TFAutoModelForSpeechSeq2Seq"),vHt.forEach(t),NYe.forEach(t),CHe=i(f),br=n(f,"DIV",{class:!0});var _i=s(br);T(Ek.$$.fragment,_i),YWr=i(_i),gf=n(_i,"P",{});var cse=s(gf);KWr=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Yoe=n(cse,"A",{href:!0});var FHt=s(Yoe);ZWr=r(FHt,"from_pretrained()"),FHt.forEach(t),eQr=r(cse," class method or the "),Koe=n(cse,"A",{href:!0});var THt=s(Koe);oQr=r(THt,"from_config()"),THt.forEach(t),rQr=r(cse,` class
method.`),cse.forEach(t),tQr=i(_i),Ck=n(_i,"P",{});var qYe=s(Ck);aQr=r(qYe,"This class cannot be instantiated directly using "),d5e=n(qYe,"CODE",{});var MHt=s(d5e);nQr=r(MHt,"__init__()"),MHt.forEach(t),sQr=r(qYe," (throws an error)."),qYe.forEach(t),lQr=i(_i),Kt=n(_i,"DIV",{class:!0});var NA=s(Kt);T(wk.$$.fragment,NA),iQr=i(NA),c5e=n(NA,"P",{});var EHt=s(c5e);dQr=r(EHt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),EHt.forEach(t),cQr=i(NA),hf=n(NA,"P",{});var fse=s(hf);fQr=r(fse,`Note:
Loading a model from its configuration file does `),f5e=n(fse,"STRONG",{});var CHt=s(f5e);mQr=r(CHt,"not"),CHt.forEach(t),gQr=r(fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(fse,"A",{href:!0});var wHt=s(Zoe);hQr=r(wHt,"from_pretrained()"),wHt.forEach(t),pQr=r(fse," to load the model weights."),fse.forEach(t),_Qr=i(NA),T(KC.$$.fragment,NA),NA.forEach(t),uQr=i(_i),Qr=n(_i,"DIV",{class:!0});var ui=s(Qr);T(Ak.$$.fragment,ui),bQr=i(ui),m5e=n(ui,"P",{});var AHt=s(m5e);vQr=r(AHt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),AHt.forEach(t),FQr=i(ui),$n=n(ui,"P",{});var qA=s($n);TQr=r(qA,"The model class to instantiate is selected based on the "),g5e=n(qA,"CODE",{});var LHt=s(g5e);MQr=r(LHt,"model_type"),LHt.forEach(t),EQr=r(qA,` property of the config object (either
passed as an argument or loaded from `),h5e=n(qA,"CODE",{});var yHt=s(h5e);CQr=r(yHt,"pretrained_model_name_or_path"),yHt.forEach(t),wQr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=n(qA,"CODE",{});var xHt=s(p5e);AQr=r(xHt,"pretrained_model_name_or_path"),xHt.forEach(t),LQr=r(qA,":"),qA.forEach(t),yQr=i(ui),_5e=n(ui,"UL",{});var $Ht=s(_5e);ZC=n($Ht,"LI",{});var Nze=s(ZC);u5e=n(Nze,"STRONG",{});var kHt=s(u5e);xQr=r(kHt,"speech_to_text"),kHt.forEach(t),$Qr=r(Nze," \u2014 "),ere=n(Nze,"A",{href:!0});var SHt=s(ere);kQr=r(SHt,"TFSpeech2TextForConditionalGeneration"),SHt.forEach(t),SQr=r(Nze," (Speech2Text model)"),Nze.forEach(t),$Ht.forEach(t),RQr=i(ui),T(e3.$$.fragment,ui),ui.forEach(t),_i.forEach(t),wHe=i(f),pf=n(f,"H2",{class:!0});var jYe=s(pf);o3=n(jYe,"A",{id:!0,class:!0,href:!0});var RHt=s(o3);b5e=n(RHt,"SPAN",{});var PHt=s(b5e);T(Lk.$$.fragment,PHt),PHt.forEach(t),RHt.forEach(t),PQr=i(jYe),v5e=n(jYe,"SPAN",{});var BHt=s(v5e);BQr=r(BHt,"FlaxAutoModel"),BHt.forEach(t),jYe.forEach(t),AHe=i(f),vr=n(f,"DIV",{class:!0});var bi=s(vr);T(yk.$$.fragment,bi),IQr=i(bi),_f=n(bi,"P",{});var mse=s(_f);NQr=r(mse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ore=n(mse,"A",{href:!0});var IHt=s(ore);qQr=r(IHt,"from_pretrained()"),IHt.forEach(t),jQr=r(mse," class method or the "),rre=n(mse,"A",{href:!0});var NHt=s(rre);DQr=r(NHt,"from_config()"),NHt.forEach(t),GQr=r(mse,` class
method.`),mse.forEach(t),OQr=i(bi),xk=n(bi,"P",{});var DYe=s(xk);VQr=r(DYe,"This class cannot be instantiated directly using "),F5e=n(DYe,"CODE",{});var qHt=s(F5e);XQr=r(qHt,"__init__()"),qHt.forEach(t),zQr=r(DYe," (throws an error)."),DYe.forEach(t),WQr=i(bi),Zt=n(bi,"DIV",{class:!0});var jA=s(Zt);T($k.$$.fragment,jA),QQr=i(jA),T5e=n(jA,"P",{});var jHt=s(T5e);UQr=r(jHt,"Instantiates one of the base model classes of the library from a configuration."),jHt.forEach(t),HQr=i(jA),uf=n(jA,"P",{});var gse=s(uf);JQr=r(gse,`Note:
Loading a model from its configuration file does `),M5e=n(gse,"STRONG",{});var DHt=s(M5e);YQr=r(DHt,"not"),DHt.forEach(t),KQr=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=n(gse,"A",{href:!0});var GHt=s(tre);ZQr=r(GHt,"from_pretrained()"),GHt.forEach(t),eUr=r(gse," to load the model weights."),gse.forEach(t),oUr=i(jA),T(r3.$$.fragment,jA),jA.forEach(t),rUr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(kk.$$.fragment,vi),tUr=i(vi),E5e=n(vi,"P",{});var OHt=s(E5e);aUr=r(OHt,"Instantiate one of the base model classes of the library from a pretrained model."),OHt.forEach(t),nUr=i(vi),kn=n(vi,"P",{});var DA=s(kn);sUr=r(DA,"The model class to instantiate is selected based on the "),C5e=n(DA,"CODE",{});var VHt=s(C5e);lUr=r(VHt,"model_type"),VHt.forEach(t),iUr=r(DA,` property of the config object (either
passed as an argument or loaded from `),w5e=n(DA,"CODE",{});var XHt=s(w5e);dUr=r(XHt,"pretrained_model_name_or_path"),XHt.forEach(t),cUr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=n(DA,"CODE",{});var zHt=s(A5e);fUr=r(zHt,"pretrained_model_name_or_path"),zHt.forEach(t),mUr=r(DA,":"),DA.forEach(t),gUr=i(vi),re=n(vi,"UL",{});var ae=s(re);t3=n(ae,"LI",{});var qze=s(t3);L5e=n(qze,"STRONG",{});var WHt=s(L5e);hUr=r(WHt,"albert"),WHt.forEach(t),pUr=r(qze," \u2014 "),are=n(qze,"A",{href:!0});var QHt=s(are);_Ur=r(QHt,"FlaxAlbertModel"),QHt.forEach(t),uUr=r(qze," (ALBERT model)"),qze.forEach(t),bUr=i(ae),a3=n(ae,"LI",{});var jze=s(a3);y5e=n(jze,"STRONG",{});var UHt=s(y5e);vUr=r(UHt,"bart"),UHt.forEach(t),FUr=r(jze," \u2014 "),nre=n(jze,"A",{href:!0});var HHt=s(nre);TUr=r(HHt,"FlaxBartModel"),HHt.forEach(t),MUr=r(jze," (BART model)"),jze.forEach(t),EUr=i(ae),n3=n(ae,"LI",{});var Dze=s(n3);x5e=n(Dze,"STRONG",{});var JHt=s(x5e);CUr=r(JHt,"beit"),JHt.forEach(t),wUr=r(Dze," \u2014 "),sre=n(Dze,"A",{href:!0});var YHt=s(sre);AUr=r(YHt,"FlaxBeitModel"),YHt.forEach(t),LUr=r(Dze," (BEiT model)"),Dze.forEach(t),yUr=i(ae),s3=n(ae,"LI",{});var Gze=s(s3);$5e=n(Gze,"STRONG",{});var KHt=s($5e);xUr=r(KHt,"bert"),KHt.forEach(t),$Ur=r(Gze," \u2014 "),lre=n(Gze,"A",{href:!0});var ZHt=s(lre);kUr=r(ZHt,"FlaxBertModel"),ZHt.forEach(t),SUr=r(Gze," (BERT model)"),Gze.forEach(t),RUr=i(ae),l3=n(ae,"LI",{});var Oze=s(l3);k5e=n(Oze,"STRONG",{});var eJt=s(k5e);PUr=r(eJt,"big_bird"),eJt.forEach(t),BUr=r(Oze," \u2014 "),ire=n(Oze,"A",{href:!0});var oJt=s(ire);IUr=r(oJt,"FlaxBigBirdModel"),oJt.forEach(t),NUr=r(Oze," (BigBird model)"),Oze.forEach(t),qUr=i(ae),i3=n(ae,"LI",{});var Vze=s(i3);S5e=n(Vze,"STRONG",{});var rJt=s(S5e);jUr=r(rJt,"blenderbot"),rJt.forEach(t),DUr=r(Vze," \u2014 "),dre=n(Vze,"A",{href:!0});var tJt=s(dre);GUr=r(tJt,"FlaxBlenderbotModel"),tJt.forEach(t),OUr=r(Vze," (Blenderbot model)"),Vze.forEach(t),VUr=i(ae),d3=n(ae,"LI",{});var Xze=s(d3);R5e=n(Xze,"STRONG",{});var aJt=s(R5e);XUr=r(aJt,"blenderbot-small"),aJt.forEach(t),zUr=r(Xze," \u2014 "),cre=n(Xze,"A",{href:!0});var nJt=s(cre);WUr=r(nJt,"FlaxBlenderbotSmallModel"),nJt.forEach(t),QUr=r(Xze," (BlenderbotSmall model)"),Xze.forEach(t),UUr=i(ae),c3=n(ae,"LI",{});var zze=s(c3);P5e=n(zze,"STRONG",{});var sJt=s(P5e);HUr=r(sJt,"clip"),sJt.forEach(t),JUr=r(zze," \u2014 "),fre=n(zze,"A",{href:!0});var lJt=s(fre);YUr=r(lJt,"FlaxCLIPModel"),lJt.forEach(t),KUr=r(zze," (CLIP model)"),zze.forEach(t),ZUr=i(ae),f3=n(ae,"LI",{});var Wze=s(f3);B5e=n(Wze,"STRONG",{});var iJt=s(B5e);eHr=r(iJt,"distilbert"),iJt.forEach(t),oHr=r(Wze," \u2014 "),mre=n(Wze,"A",{href:!0});var dJt=s(mre);rHr=r(dJt,"FlaxDistilBertModel"),dJt.forEach(t),tHr=r(Wze," (DistilBERT model)"),Wze.forEach(t),aHr=i(ae),m3=n(ae,"LI",{});var Qze=s(m3);I5e=n(Qze,"STRONG",{});var cJt=s(I5e);nHr=r(cJt,"electra"),cJt.forEach(t),sHr=r(Qze," \u2014 "),gre=n(Qze,"A",{href:!0});var fJt=s(gre);lHr=r(fJt,"FlaxElectraModel"),fJt.forEach(t),iHr=r(Qze," (ELECTRA model)"),Qze.forEach(t),dHr=i(ae),g3=n(ae,"LI",{});var Uze=s(g3);N5e=n(Uze,"STRONG",{});var mJt=s(N5e);cHr=r(mJt,"gpt2"),mJt.forEach(t),fHr=r(Uze," \u2014 "),hre=n(Uze,"A",{href:!0});var gJt=s(hre);mHr=r(gJt,"FlaxGPT2Model"),gJt.forEach(t),gHr=r(Uze," (OpenAI GPT-2 model)"),Uze.forEach(t),hHr=i(ae),h3=n(ae,"LI",{});var Hze=s(h3);q5e=n(Hze,"STRONG",{});var hJt=s(q5e);pHr=r(hJt,"gpt_neo"),hJt.forEach(t),_Hr=r(Hze," \u2014 "),pre=n(Hze,"A",{href:!0});var pJt=s(pre);uHr=r(pJt,"FlaxGPTNeoModel"),pJt.forEach(t),bHr=r(Hze," (GPT Neo model)"),Hze.forEach(t),vHr=i(ae),p3=n(ae,"LI",{});var Jze=s(p3);j5e=n(Jze,"STRONG",{});var _Jt=s(j5e);FHr=r(_Jt,"gptj"),_Jt.forEach(t),THr=r(Jze," \u2014 "),_re=n(Jze,"A",{href:!0});var uJt=s(_re);MHr=r(uJt,"FlaxGPTJModel"),uJt.forEach(t),EHr=r(Jze," (GPT-J model)"),Jze.forEach(t),CHr=i(ae),_3=n(ae,"LI",{});var Yze=s(_3);D5e=n(Yze,"STRONG",{});var bJt=s(D5e);wHr=r(bJt,"longt5"),bJt.forEach(t),AHr=r(Yze," \u2014 "),ure=n(Yze,"A",{href:!0});var vJt=s(ure);LHr=r(vJt,"FlaxLongT5Model"),vJt.forEach(t),yHr=r(Yze," (LongT5 model)"),Yze.forEach(t),xHr=i(ae),u3=n(ae,"LI",{});var Kze=s(u3);G5e=n(Kze,"STRONG",{});var FJt=s(G5e);$Hr=r(FJt,"marian"),FJt.forEach(t),kHr=r(Kze," \u2014 "),bre=n(Kze,"A",{href:!0});var TJt=s(bre);SHr=r(TJt,"FlaxMarianModel"),TJt.forEach(t),RHr=r(Kze," (Marian model)"),Kze.forEach(t),PHr=i(ae),b3=n(ae,"LI",{});var Zze=s(b3);O5e=n(Zze,"STRONG",{});var MJt=s(O5e);BHr=r(MJt,"mbart"),MJt.forEach(t),IHr=r(Zze," \u2014 "),vre=n(Zze,"A",{href:!0});var EJt=s(vre);NHr=r(EJt,"FlaxMBartModel"),EJt.forEach(t),qHr=r(Zze," (mBART model)"),Zze.forEach(t),jHr=i(ae),v3=n(ae,"LI",{});var eWe=s(v3);V5e=n(eWe,"STRONG",{});var CJt=s(V5e);DHr=r(CJt,"mt5"),CJt.forEach(t),GHr=r(eWe," \u2014 "),Fre=n(eWe,"A",{href:!0});var wJt=s(Fre);OHr=r(wJt,"FlaxMT5Model"),wJt.forEach(t),VHr=r(eWe," (MT5 model)"),eWe.forEach(t),XHr=i(ae),F3=n(ae,"LI",{});var oWe=s(F3);X5e=n(oWe,"STRONG",{});var AJt=s(X5e);zHr=r(AJt,"opt"),AJt.forEach(t),WHr=r(oWe," \u2014 "),Tre=n(oWe,"A",{href:!0});var LJt=s(Tre);QHr=r(LJt,"FlaxOPTModel"),LJt.forEach(t),UHr=r(oWe," (OPT model)"),oWe.forEach(t),HHr=i(ae),T3=n(ae,"LI",{});var rWe=s(T3);z5e=n(rWe,"STRONG",{});var yJt=s(z5e);JHr=r(yJt,"pegasus"),yJt.forEach(t),YHr=r(rWe," \u2014 "),Mre=n(rWe,"A",{href:!0});var xJt=s(Mre);KHr=r(xJt,"FlaxPegasusModel"),xJt.forEach(t),ZHr=r(rWe," (Pegasus model)"),rWe.forEach(t),eJr=i(ae),M3=n(ae,"LI",{});var tWe=s(M3);W5e=n(tWe,"STRONG",{});var $Jt=s(W5e);oJr=r($Jt,"roberta"),$Jt.forEach(t),rJr=r(tWe," \u2014 "),Ere=n(tWe,"A",{href:!0});var kJt=s(Ere);tJr=r(kJt,"FlaxRobertaModel"),kJt.forEach(t),aJr=r(tWe," (RoBERTa model)"),tWe.forEach(t),nJr=i(ae),E3=n(ae,"LI",{});var aWe=s(E3);Q5e=n(aWe,"STRONG",{});var SJt=s(Q5e);sJr=r(SJt,"roformer"),SJt.forEach(t),lJr=r(aWe," \u2014 "),Cre=n(aWe,"A",{href:!0});var RJt=s(Cre);iJr=r(RJt,"FlaxRoFormerModel"),RJt.forEach(t),dJr=r(aWe," (RoFormer model)"),aWe.forEach(t),cJr=i(ae),C3=n(ae,"LI",{});var nWe=s(C3);U5e=n(nWe,"STRONG",{});var PJt=s(U5e);fJr=r(PJt,"t5"),PJt.forEach(t),mJr=r(nWe," \u2014 "),wre=n(nWe,"A",{href:!0});var BJt=s(wre);gJr=r(BJt,"FlaxT5Model"),BJt.forEach(t),hJr=r(nWe," (T5 model)"),nWe.forEach(t),pJr=i(ae),w3=n(ae,"LI",{});var sWe=s(w3);H5e=n(sWe,"STRONG",{});var IJt=s(H5e);_Jr=r(IJt,"vision-text-dual-encoder"),IJt.forEach(t),uJr=r(sWe," \u2014 "),Are=n(sWe,"A",{href:!0});var NJt=s(Are);bJr=r(NJt,"FlaxVisionTextDualEncoderModel"),NJt.forEach(t),vJr=r(sWe," (VisionTextDualEncoder model)"),sWe.forEach(t),FJr=i(ae),A3=n(ae,"LI",{});var lWe=s(A3);J5e=n(lWe,"STRONG",{});var qJt=s(J5e);TJr=r(qJt,"vit"),qJt.forEach(t),MJr=r(lWe," \u2014 "),Lre=n(lWe,"A",{href:!0});var jJt=s(Lre);EJr=r(jJt,"FlaxViTModel"),jJt.forEach(t),CJr=r(lWe," (ViT model)"),lWe.forEach(t),wJr=i(ae),L3=n(ae,"LI",{});var iWe=s(L3);Y5e=n(iWe,"STRONG",{});var DJt=s(Y5e);AJr=r(DJt,"wav2vec2"),DJt.forEach(t),LJr=r(iWe," \u2014 "),yre=n(iWe,"A",{href:!0});var GJt=s(yre);yJr=r(GJt,"FlaxWav2Vec2Model"),GJt.forEach(t),xJr=r(iWe," (Wav2Vec2 model)"),iWe.forEach(t),$Jr=i(ae),y3=n(ae,"LI",{});var dWe=s(y3);K5e=n(dWe,"STRONG",{});var OJt=s(K5e);kJr=r(OJt,"xglm"),OJt.forEach(t),SJr=r(dWe," \u2014 "),xre=n(dWe,"A",{href:!0});var VJt=s(xre);RJr=r(VJt,"FlaxXGLMModel"),VJt.forEach(t),PJr=r(dWe," (XGLM model)"),dWe.forEach(t),BJr=i(ae),x3=n(ae,"LI",{});var cWe=s(x3);Z5e=n(cWe,"STRONG",{});var XJt=s(Z5e);IJr=r(XJt,"xlm-roberta"),XJt.forEach(t),NJr=r(cWe," \u2014 "),$re=n(cWe,"A",{href:!0});var zJt=s($re);qJr=r(zJt,"FlaxXLMRobertaModel"),zJt.forEach(t),jJr=r(cWe," (XLM-RoBERTa model)"),cWe.forEach(t),ae.forEach(t),DJr=i(vi),T($3.$$.fragment,vi),vi.forEach(t),bi.forEach(t),LHe=i(f),bf=n(f,"H2",{class:!0});var GYe=s(bf);k3=n(GYe,"A",{id:!0,class:!0,href:!0});var WJt=s(k3);e0e=n(WJt,"SPAN",{});var QJt=s(e0e);T(Sk.$$.fragment,QJt),QJt.forEach(t),WJt.forEach(t),GJr=i(GYe),o0e=n(GYe,"SPAN",{});var UJt=s(o0e);OJr=r(UJt,"FlaxAutoModelForCausalLM"),UJt.forEach(t),GYe.forEach(t),yHe=i(f),Fr=n(f,"DIV",{class:!0});var Fi=s(Fr);T(Rk.$$.fragment,Fi),VJr=i(Fi),vf=n(Fi,"P",{});var hse=s(vf);XJr=r(hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kre=n(hse,"A",{href:!0});var HJt=s(kre);zJr=r(HJt,"from_pretrained()"),HJt.forEach(t),WJr=r(hse," class method or the "),Sre=n(hse,"A",{href:!0});var JJt=s(Sre);QJr=r(JJt,"from_config()"),JJt.forEach(t),UJr=r(hse,` class
method.`),hse.forEach(t),HJr=i(Fi),Pk=n(Fi,"P",{});var OYe=s(Pk);JJr=r(OYe,"This class cannot be instantiated directly using "),r0e=n(OYe,"CODE",{});var YJt=s(r0e);YJr=r(YJt,"__init__()"),YJt.forEach(t),KJr=r(OYe," (throws an error)."),OYe.forEach(t),ZJr=i(Fi),ea=n(Fi,"DIV",{class:!0});var GA=s(ea);T(Bk.$$.fragment,GA),eYr=i(GA),t0e=n(GA,"P",{});var KJt=s(t0e);oYr=r(KJt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KJt.forEach(t),rYr=i(GA),Ff=n(GA,"P",{});var pse=s(Ff);tYr=r(pse,`Note:
Loading a model from its configuration file does `),a0e=n(pse,"STRONG",{});var ZJt=s(a0e);aYr=r(ZJt,"not"),ZJt.forEach(t),nYr=r(pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=n(pse,"A",{href:!0});var eYt=s(Rre);sYr=r(eYt,"from_pretrained()"),eYt.forEach(t),lYr=r(pse," to load the model weights."),pse.forEach(t),iYr=i(GA),T(S3.$$.fragment,GA),GA.forEach(t),dYr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(Ik.$$.fragment,Ti),cYr=i(Ti),n0e=n(Ti,"P",{});var oYt=s(n0e);fYr=r(oYt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oYt.forEach(t),mYr=i(Ti),Sn=n(Ti,"P",{});var OA=s(Sn);gYr=r(OA,"The model class to instantiate is selected based on the "),s0e=n(OA,"CODE",{});var rYt=s(s0e);hYr=r(rYt,"model_type"),rYt.forEach(t),pYr=r(OA,` property of the config object (either
passed as an argument or loaded from `),l0e=n(OA,"CODE",{});var tYt=s(l0e);_Yr=r(tYt,"pretrained_model_name_or_path"),tYt.forEach(t),uYr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=n(OA,"CODE",{});var aYt=s(i0e);bYr=r(aYt,"pretrained_model_name_or_path"),aYt.forEach(t),vYr=r(OA,":"),OA.forEach(t),FYr=i(Ti),xe=n(Ti,"UL",{});var Ne=s(xe);R3=n(Ne,"LI",{});var fWe=s(R3);d0e=n(fWe,"STRONG",{});var nYt=s(d0e);TYr=r(nYt,"bart"),nYt.forEach(t),MYr=r(fWe," \u2014 "),Pre=n(fWe,"A",{href:!0});var sYt=s(Pre);EYr=r(sYt,"FlaxBartForCausalLM"),sYt.forEach(t),CYr=r(fWe," (BART model)"),fWe.forEach(t),wYr=i(Ne),P3=n(Ne,"LI",{});var mWe=s(P3);c0e=n(mWe,"STRONG",{});var lYt=s(c0e);AYr=r(lYt,"bert"),lYt.forEach(t),LYr=r(mWe," \u2014 "),Bre=n(mWe,"A",{href:!0});var iYt=s(Bre);yYr=r(iYt,"FlaxBertForCausalLM"),iYt.forEach(t),xYr=r(mWe," (BERT model)"),mWe.forEach(t),$Yr=i(Ne),B3=n(Ne,"LI",{});var gWe=s(B3);f0e=n(gWe,"STRONG",{});var dYt=s(f0e);kYr=r(dYt,"big_bird"),dYt.forEach(t),SYr=r(gWe," \u2014 "),Ire=n(gWe,"A",{href:!0});var cYt=s(Ire);RYr=r(cYt,"FlaxBigBirdForCausalLM"),cYt.forEach(t),PYr=r(gWe," (BigBird model)"),gWe.forEach(t),BYr=i(Ne),I3=n(Ne,"LI",{});var hWe=s(I3);m0e=n(hWe,"STRONG",{});var fYt=s(m0e);IYr=r(fYt,"electra"),fYt.forEach(t),NYr=r(hWe," \u2014 "),Nre=n(hWe,"A",{href:!0});var mYt=s(Nre);qYr=r(mYt,"FlaxElectraForCausalLM"),mYt.forEach(t),jYr=r(hWe," (ELECTRA model)"),hWe.forEach(t),DYr=i(Ne),N3=n(Ne,"LI",{});var pWe=s(N3);g0e=n(pWe,"STRONG",{});var gYt=s(g0e);GYr=r(gYt,"gpt2"),gYt.forEach(t),OYr=r(pWe," \u2014 "),qre=n(pWe,"A",{href:!0});var hYt=s(qre);VYr=r(hYt,"FlaxGPT2LMHeadModel"),hYt.forEach(t),XYr=r(pWe," (OpenAI GPT-2 model)"),pWe.forEach(t),zYr=i(Ne),q3=n(Ne,"LI",{});var _We=s(q3);h0e=n(_We,"STRONG",{});var pYt=s(h0e);WYr=r(pYt,"gpt_neo"),pYt.forEach(t),QYr=r(_We," \u2014 "),jre=n(_We,"A",{href:!0});var _Yt=s(jre);UYr=r(_Yt,"FlaxGPTNeoForCausalLM"),_Yt.forEach(t),HYr=r(_We," (GPT Neo model)"),_We.forEach(t),JYr=i(Ne),j3=n(Ne,"LI",{});var uWe=s(j3);p0e=n(uWe,"STRONG",{});var uYt=s(p0e);YYr=r(uYt,"gptj"),uYt.forEach(t),KYr=r(uWe," \u2014 "),Dre=n(uWe,"A",{href:!0});var bYt=s(Dre);ZYr=r(bYt,"FlaxGPTJForCausalLM"),bYt.forEach(t),eKr=r(uWe," (GPT-J model)"),uWe.forEach(t),oKr=i(Ne),D3=n(Ne,"LI",{});var bWe=s(D3);_0e=n(bWe,"STRONG",{});var vYt=s(_0e);rKr=r(vYt,"opt"),vYt.forEach(t),tKr=r(bWe," \u2014 "),Gre=n(bWe,"A",{href:!0});var FYt=s(Gre);aKr=r(FYt,"FlaxOPTForCausalLM"),FYt.forEach(t),nKr=r(bWe," (OPT model)"),bWe.forEach(t),sKr=i(Ne),G3=n(Ne,"LI",{});var vWe=s(G3);u0e=n(vWe,"STRONG",{});var TYt=s(u0e);lKr=r(TYt,"roberta"),TYt.forEach(t),iKr=r(vWe," \u2014 "),Ore=n(vWe,"A",{href:!0});var MYt=s(Ore);dKr=r(MYt,"FlaxRobertaForCausalLM"),MYt.forEach(t),cKr=r(vWe," (RoBERTa model)"),vWe.forEach(t),fKr=i(Ne),O3=n(Ne,"LI",{});var FWe=s(O3);b0e=n(FWe,"STRONG",{});var EYt=s(b0e);mKr=r(EYt,"xglm"),EYt.forEach(t),gKr=r(FWe," \u2014 "),Vre=n(FWe,"A",{href:!0});var CYt=s(Vre);hKr=r(CYt,"FlaxXGLMForCausalLM"),CYt.forEach(t),pKr=r(FWe," (XGLM model)"),FWe.forEach(t),Ne.forEach(t),_Kr=i(Ti),T(V3.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),xHe=i(f),Tf=n(f,"H2",{class:!0});var VYe=s(Tf);X3=n(VYe,"A",{id:!0,class:!0,href:!0});var wYt=s(X3);v0e=n(wYt,"SPAN",{});var AYt=s(v0e);T(Nk.$$.fragment,AYt),AYt.forEach(t),wYt.forEach(t),uKr=i(VYe),F0e=n(VYe,"SPAN",{});var LYt=s(F0e);bKr=r(LYt,"FlaxAutoModelForPreTraining"),LYt.forEach(t),VYe.forEach(t),$He=i(f),Tr=n(f,"DIV",{class:!0});var Mi=s(Tr);T(qk.$$.fragment,Mi),vKr=i(Mi),Mf=n(Mi,"P",{});var _se=s(Mf);FKr=r(_se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xre=n(_se,"A",{href:!0});var yYt=s(Xre);TKr=r(yYt,"from_pretrained()"),yYt.forEach(t),MKr=r(_se," class method or the "),zre=n(_se,"A",{href:!0});var xYt=s(zre);EKr=r(xYt,"from_config()"),xYt.forEach(t),CKr=r(_se,` class
method.`),_se.forEach(t),wKr=i(Mi),jk=n(Mi,"P",{});var XYe=s(jk);AKr=r(XYe,"This class cannot be instantiated directly using "),T0e=n(XYe,"CODE",{});var $Yt=s(T0e);LKr=r($Yt,"__init__()"),$Yt.forEach(t),yKr=r(XYe," (throws an error)."),XYe.forEach(t),xKr=i(Mi),oa=n(Mi,"DIV",{class:!0});var VA=s(oa);T(Dk.$$.fragment,VA),$Kr=i(VA),M0e=n(VA,"P",{});var kYt=s(M0e);kKr=r(kYt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kYt.forEach(t),SKr=i(VA),Ef=n(VA,"P",{});var use=s(Ef);RKr=r(use,`Note:
Loading a model from its configuration file does `),E0e=n(use,"STRONG",{});var SYt=s(E0e);PKr=r(SYt,"not"),SYt.forEach(t),BKr=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=n(use,"A",{href:!0});var RYt=s(Wre);IKr=r(RYt,"from_pretrained()"),RYt.forEach(t),NKr=r(use," to load the model weights."),use.forEach(t),qKr=i(VA),T(z3.$$.fragment,VA),VA.forEach(t),jKr=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(Gk.$$.fragment,Ei),DKr=i(Ei),C0e=n(Ei,"P",{});var PYt=s(C0e);GKr=r(PYt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),PYt.forEach(t),OKr=i(Ei),Rn=n(Ei,"P",{});var XA=s(Rn);VKr=r(XA,"The model class to instantiate is selected based on the "),w0e=n(XA,"CODE",{});var BYt=s(w0e);XKr=r(BYt,"model_type"),BYt.forEach(t),zKr=r(XA,` property of the config object (either
passed as an argument or loaded from `),A0e=n(XA,"CODE",{});var IYt=s(A0e);WKr=r(IYt,"pretrained_model_name_or_path"),IYt.forEach(t),QKr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=n(XA,"CODE",{});var NYt=s(L0e);UKr=r(NYt,"pretrained_model_name_or_path"),NYt.forEach(t),HKr=r(XA,":"),XA.forEach(t),JKr=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);W3=n(we,"LI",{});var TWe=s(W3);y0e=n(TWe,"STRONG",{});var qYt=s(y0e);YKr=r(qYt,"albert"),qYt.forEach(t),KKr=r(TWe," \u2014 "),Qre=n(TWe,"A",{href:!0});var jYt=s(Qre);ZKr=r(jYt,"FlaxAlbertForPreTraining"),jYt.forEach(t),eZr=r(TWe," (ALBERT model)"),TWe.forEach(t),oZr=i(we),Q3=n(we,"LI",{});var MWe=s(Q3);x0e=n(MWe,"STRONG",{});var DYt=s(x0e);rZr=r(DYt,"bart"),DYt.forEach(t),tZr=r(MWe," \u2014 "),Ure=n(MWe,"A",{href:!0});var GYt=s(Ure);aZr=r(GYt,"FlaxBartForConditionalGeneration"),GYt.forEach(t),nZr=r(MWe," (BART model)"),MWe.forEach(t),sZr=i(we),U3=n(we,"LI",{});var EWe=s(U3);$0e=n(EWe,"STRONG",{});var OYt=s($0e);lZr=r(OYt,"bert"),OYt.forEach(t),iZr=r(EWe," \u2014 "),Hre=n(EWe,"A",{href:!0});var VYt=s(Hre);dZr=r(VYt,"FlaxBertForPreTraining"),VYt.forEach(t),cZr=r(EWe," (BERT model)"),EWe.forEach(t),fZr=i(we),H3=n(we,"LI",{});var CWe=s(H3);k0e=n(CWe,"STRONG",{});var XYt=s(k0e);mZr=r(XYt,"big_bird"),XYt.forEach(t),gZr=r(CWe," \u2014 "),Jre=n(CWe,"A",{href:!0});var zYt=s(Jre);hZr=r(zYt,"FlaxBigBirdForPreTraining"),zYt.forEach(t),pZr=r(CWe," (BigBird model)"),CWe.forEach(t),_Zr=i(we),J3=n(we,"LI",{});var wWe=s(J3);S0e=n(wWe,"STRONG",{});var WYt=s(S0e);uZr=r(WYt,"electra"),WYt.forEach(t),bZr=r(wWe," \u2014 "),Yre=n(wWe,"A",{href:!0});var QYt=s(Yre);vZr=r(QYt,"FlaxElectraForPreTraining"),QYt.forEach(t),FZr=r(wWe," (ELECTRA model)"),wWe.forEach(t),TZr=i(we),Y3=n(we,"LI",{});var AWe=s(Y3);R0e=n(AWe,"STRONG",{});var UYt=s(R0e);MZr=r(UYt,"longt5"),UYt.forEach(t),EZr=r(AWe," \u2014 "),Kre=n(AWe,"A",{href:!0});var HYt=s(Kre);CZr=r(HYt,"FlaxLongT5ForConditionalGeneration"),HYt.forEach(t),wZr=r(AWe," (LongT5 model)"),AWe.forEach(t),AZr=i(we),K3=n(we,"LI",{});var LWe=s(K3);P0e=n(LWe,"STRONG",{});var JYt=s(P0e);LZr=r(JYt,"mbart"),JYt.forEach(t),yZr=r(LWe," \u2014 "),Zre=n(LWe,"A",{href:!0});var YYt=s(Zre);xZr=r(YYt,"FlaxMBartForConditionalGeneration"),YYt.forEach(t),$Zr=r(LWe," (mBART model)"),LWe.forEach(t),kZr=i(we),Z3=n(we,"LI",{});var yWe=s(Z3);B0e=n(yWe,"STRONG",{});var KYt=s(B0e);SZr=r(KYt,"mt5"),KYt.forEach(t),RZr=r(yWe," \u2014 "),ete=n(yWe,"A",{href:!0});var ZYt=s(ete);PZr=r(ZYt,"FlaxMT5ForConditionalGeneration"),ZYt.forEach(t),BZr=r(yWe," (MT5 model)"),yWe.forEach(t),IZr=i(we),e5=n(we,"LI",{});var xWe=s(e5);I0e=n(xWe,"STRONG",{});var eKt=s(I0e);NZr=r(eKt,"roberta"),eKt.forEach(t),qZr=r(xWe," \u2014 "),ote=n(xWe,"A",{href:!0});var oKt=s(ote);jZr=r(oKt,"FlaxRobertaForMaskedLM"),oKt.forEach(t),DZr=r(xWe," (RoBERTa model)"),xWe.forEach(t),GZr=i(we),o5=n(we,"LI",{});var $We=s(o5);N0e=n($We,"STRONG",{});var rKt=s(N0e);OZr=r(rKt,"roformer"),rKt.forEach(t),VZr=r($We," \u2014 "),rte=n($We,"A",{href:!0});var tKt=s(rte);XZr=r(tKt,"FlaxRoFormerForMaskedLM"),tKt.forEach(t),zZr=r($We," (RoFormer model)"),$We.forEach(t),WZr=i(we),r5=n(we,"LI",{});var kWe=s(r5);q0e=n(kWe,"STRONG",{});var aKt=s(q0e);QZr=r(aKt,"t5"),aKt.forEach(t),UZr=r(kWe," \u2014 "),tte=n(kWe,"A",{href:!0});var nKt=s(tte);HZr=r(nKt,"FlaxT5ForConditionalGeneration"),nKt.forEach(t),JZr=r(kWe," (T5 model)"),kWe.forEach(t),YZr=i(we),t5=n(we,"LI",{});var SWe=s(t5);j0e=n(SWe,"STRONG",{});var sKt=s(j0e);KZr=r(sKt,"wav2vec2"),sKt.forEach(t),ZZr=r(SWe," \u2014 "),ate=n(SWe,"A",{href:!0});var lKt=s(ate);eet=r(lKt,"FlaxWav2Vec2ForPreTraining"),lKt.forEach(t),oet=r(SWe," (Wav2Vec2 model)"),SWe.forEach(t),ret=i(we),a5=n(we,"LI",{});var RWe=s(a5);D0e=n(RWe,"STRONG",{});var iKt=s(D0e);tet=r(iKt,"xlm-roberta"),iKt.forEach(t),aet=r(RWe," \u2014 "),nte=n(RWe,"A",{href:!0});var dKt=s(nte);net=r(dKt,"FlaxXLMRobertaForMaskedLM"),dKt.forEach(t),set=r(RWe," (XLM-RoBERTa model)"),RWe.forEach(t),we.forEach(t),iet=i(Ei),T(n5.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),kHe=i(f),Cf=n(f,"H2",{class:!0});var zYe=s(Cf);s5=n(zYe,"A",{id:!0,class:!0,href:!0});var cKt=s(s5);G0e=n(cKt,"SPAN",{});var fKt=s(G0e);T(Ok.$$.fragment,fKt),fKt.forEach(t),cKt.forEach(t),det=i(zYe),O0e=n(zYe,"SPAN",{});var mKt=s(O0e);cet=r(mKt,"FlaxAutoModelForMaskedLM"),mKt.forEach(t),zYe.forEach(t),SHe=i(f),Mr=n(f,"DIV",{class:!0});var Ci=s(Mr);T(Vk.$$.fragment,Ci),fet=i(Ci),wf=n(Ci,"P",{});var bse=s(wf);met=r(bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ste=n(bse,"A",{href:!0});var gKt=s(ste);get=r(gKt,"from_pretrained()"),gKt.forEach(t),het=r(bse," class method or the "),lte=n(bse,"A",{href:!0});var hKt=s(lte);pet=r(hKt,"from_config()"),hKt.forEach(t),_et=r(bse,` class
method.`),bse.forEach(t),uet=i(Ci),Xk=n(Ci,"P",{});var WYe=s(Xk);bet=r(WYe,"This class cannot be instantiated directly using "),V0e=n(WYe,"CODE",{});var pKt=s(V0e);vet=r(pKt,"__init__()"),pKt.forEach(t),Fet=r(WYe," (throws an error)."),WYe.forEach(t),Tet=i(Ci),ra=n(Ci,"DIV",{class:!0});var zA=s(ra);T(zk.$$.fragment,zA),Met=i(zA),X0e=n(zA,"P",{});var _Kt=s(X0e);Eet=r(_Kt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Kt.forEach(t),Cet=i(zA),Af=n(zA,"P",{});var vse=s(Af);wet=r(vse,`Note:
Loading a model from its configuration file does `),z0e=n(vse,"STRONG",{});var uKt=s(z0e);Aet=r(uKt,"not"),uKt.forEach(t),Let=r(vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=n(vse,"A",{href:!0});var bKt=s(ite);yet=r(bKt,"from_pretrained()"),bKt.forEach(t),xet=r(vse," to load the model weights."),vse.forEach(t),$et=i(zA),T(l5.$$.fragment,zA),zA.forEach(t),ket=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(Wk.$$.fragment,wi),Set=i(wi),W0e=n(wi,"P",{});var vKt=s(W0e);Ret=r(vKt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vKt.forEach(t),Pet=i(wi),Pn=n(wi,"P",{});var WA=s(Pn);Bet=r(WA,"The model class to instantiate is selected based on the "),Q0e=n(WA,"CODE",{});var FKt=s(Q0e);Iet=r(FKt,"model_type"),FKt.forEach(t),Net=r(WA,` property of the config object (either
passed as an argument or loaded from `),U0e=n(WA,"CODE",{});var TKt=s(U0e);qet=r(TKt,"pretrained_model_name_or_path"),TKt.forEach(t),jet=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(WA,"CODE",{});var MKt=s(H0e);Det=r(MKt,"pretrained_model_name_or_path"),MKt.forEach(t),Get=r(WA,":"),WA.forEach(t),Oet=i(wi),$e=n(wi,"UL",{});var qe=s($e);i5=n(qe,"LI",{});var PWe=s(i5);J0e=n(PWe,"STRONG",{});var EKt=s(J0e);Vet=r(EKt,"albert"),EKt.forEach(t),Xet=r(PWe," \u2014 "),dte=n(PWe,"A",{href:!0});var CKt=s(dte);zet=r(CKt,"FlaxAlbertForMaskedLM"),CKt.forEach(t),Wet=r(PWe," (ALBERT model)"),PWe.forEach(t),Qet=i(qe),d5=n(qe,"LI",{});var BWe=s(d5);Y0e=n(BWe,"STRONG",{});var wKt=s(Y0e);Uet=r(wKt,"bart"),wKt.forEach(t),Het=r(BWe," \u2014 "),cte=n(BWe,"A",{href:!0});var AKt=s(cte);Jet=r(AKt,"FlaxBartForConditionalGeneration"),AKt.forEach(t),Yet=r(BWe," (BART model)"),BWe.forEach(t),Ket=i(qe),c5=n(qe,"LI",{});var IWe=s(c5);K0e=n(IWe,"STRONG",{});var LKt=s(K0e);Zet=r(LKt,"bert"),LKt.forEach(t),eot=r(IWe," \u2014 "),fte=n(IWe,"A",{href:!0});var yKt=s(fte);oot=r(yKt,"FlaxBertForMaskedLM"),yKt.forEach(t),rot=r(IWe," (BERT model)"),IWe.forEach(t),tot=i(qe),f5=n(qe,"LI",{});var NWe=s(f5);Z0e=n(NWe,"STRONG",{});var xKt=s(Z0e);aot=r(xKt,"big_bird"),xKt.forEach(t),not=r(NWe," \u2014 "),mte=n(NWe,"A",{href:!0});var $Kt=s(mte);sot=r($Kt,"FlaxBigBirdForMaskedLM"),$Kt.forEach(t),lot=r(NWe," (BigBird model)"),NWe.forEach(t),iot=i(qe),m5=n(qe,"LI",{});var qWe=s(m5);ewe=n(qWe,"STRONG",{});var kKt=s(ewe);dot=r(kKt,"distilbert"),kKt.forEach(t),cot=r(qWe," \u2014 "),gte=n(qWe,"A",{href:!0});var SKt=s(gte);fot=r(SKt,"FlaxDistilBertForMaskedLM"),SKt.forEach(t),mot=r(qWe," (DistilBERT model)"),qWe.forEach(t),got=i(qe),g5=n(qe,"LI",{});var jWe=s(g5);owe=n(jWe,"STRONG",{});var RKt=s(owe);hot=r(RKt,"electra"),RKt.forEach(t),pot=r(jWe," \u2014 "),hte=n(jWe,"A",{href:!0});var PKt=s(hte);_ot=r(PKt,"FlaxElectraForMaskedLM"),PKt.forEach(t),uot=r(jWe," (ELECTRA model)"),jWe.forEach(t),bot=i(qe),h5=n(qe,"LI",{});var DWe=s(h5);rwe=n(DWe,"STRONG",{});var BKt=s(rwe);vot=r(BKt,"mbart"),BKt.forEach(t),Fot=r(DWe," \u2014 "),pte=n(DWe,"A",{href:!0});var IKt=s(pte);Tot=r(IKt,"FlaxMBartForConditionalGeneration"),IKt.forEach(t),Mot=r(DWe," (mBART model)"),DWe.forEach(t),Eot=i(qe),p5=n(qe,"LI",{});var GWe=s(p5);twe=n(GWe,"STRONG",{});var NKt=s(twe);Cot=r(NKt,"roberta"),NKt.forEach(t),wot=r(GWe," \u2014 "),_te=n(GWe,"A",{href:!0});var qKt=s(_te);Aot=r(qKt,"FlaxRobertaForMaskedLM"),qKt.forEach(t),Lot=r(GWe," (RoBERTa model)"),GWe.forEach(t),yot=i(qe),_5=n(qe,"LI",{});var OWe=s(_5);awe=n(OWe,"STRONG",{});var jKt=s(awe);xot=r(jKt,"roformer"),jKt.forEach(t),$ot=r(OWe," \u2014 "),ute=n(OWe,"A",{href:!0});var DKt=s(ute);kot=r(DKt,"FlaxRoFormerForMaskedLM"),DKt.forEach(t),Sot=r(OWe," (RoFormer model)"),OWe.forEach(t),Rot=i(qe),u5=n(qe,"LI",{});var VWe=s(u5);nwe=n(VWe,"STRONG",{});var GKt=s(nwe);Pot=r(GKt,"xlm-roberta"),GKt.forEach(t),Bot=r(VWe," \u2014 "),bte=n(VWe,"A",{href:!0});var OKt=s(bte);Iot=r(OKt,"FlaxXLMRobertaForMaskedLM"),OKt.forEach(t),Not=r(VWe," (XLM-RoBERTa model)"),VWe.forEach(t),qe.forEach(t),qot=i(wi),T(b5.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),RHe=i(f),Lf=n(f,"H2",{class:!0});var QYe=s(Lf);v5=n(QYe,"A",{id:!0,class:!0,href:!0});var VKt=s(v5);swe=n(VKt,"SPAN",{});var XKt=s(swe);T(Qk.$$.fragment,XKt),XKt.forEach(t),VKt.forEach(t),jot=i(QYe),lwe=n(QYe,"SPAN",{});var zKt=s(lwe);Dot=r(zKt,"FlaxAutoModelForSeq2SeqLM"),zKt.forEach(t),QYe.forEach(t),PHe=i(f),Er=n(f,"DIV",{class:!0});var Ai=s(Er);T(Uk.$$.fragment,Ai),Got=i(Ai),yf=n(Ai,"P",{});var Fse=s(yf);Oot=r(Fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vte=n(Fse,"A",{href:!0});var WKt=s(vte);Vot=r(WKt,"from_pretrained()"),WKt.forEach(t),Xot=r(Fse," class method or the "),Fte=n(Fse,"A",{href:!0});var QKt=s(Fte);zot=r(QKt,"from_config()"),QKt.forEach(t),Wot=r(Fse,` class
method.`),Fse.forEach(t),Qot=i(Ai),Hk=n(Ai,"P",{});var UYe=s(Hk);Uot=r(UYe,"This class cannot be instantiated directly using "),iwe=n(UYe,"CODE",{});var UKt=s(iwe);Hot=r(UKt,"__init__()"),UKt.forEach(t),Jot=r(UYe," (throws an error)."),UYe.forEach(t),Yot=i(Ai),ta=n(Ai,"DIV",{class:!0});var QA=s(ta);T(Jk.$$.fragment,QA),Kot=i(QA),dwe=n(QA,"P",{});var HKt=s(dwe);Zot=r(HKt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),HKt.forEach(t),ert=i(QA),xf=n(QA,"P",{});var Tse=s(xf);ort=r(Tse,`Note:
Loading a model from its configuration file does `),cwe=n(Tse,"STRONG",{});var JKt=s(cwe);rrt=r(JKt,"not"),JKt.forEach(t),trt=r(Tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=n(Tse,"A",{href:!0});var YKt=s(Tte);art=r(YKt,"from_pretrained()"),YKt.forEach(t),nrt=r(Tse," to load the model weights."),Tse.forEach(t),srt=i(QA),T(F5.$$.fragment,QA),QA.forEach(t),lrt=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(Yk.$$.fragment,Li),irt=i(Li),fwe=n(Li,"P",{});var KKt=s(fwe);drt=r(KKt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KKt.forEach(t),crt=i(Li),Bn=n(Li,"P",{});var UA=s(Bn);frt=r(UA,"The model class to instantiate is selected based on the "),mwe=n(UA,"CODE",{});var ZKt=s(mwe);mrt=r(ZKt,"model_type"),ZKt.forEach(t),grt=r(UA,` property of the config object (either
passed as an argument or loaded from `),gwe=n(UA,"CODE",{});var eZt=s(gwe);hrt=r(eZt,"pretrained_model_name_or_path"),eZt.forEach(t),prt=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hwe=n(UA,"CODE",{});var oZt=s(hwe);_rt=r(oZt,"pretrained_model_name_or_path"),oZt.forEach(t),urt=r(UA,":"),UA.forEach(t),brt=i(Li),ke=n(Li,"UL",{});var je=s(ke);T5=n(je,"LI",{});var XWe=s(T5);pwe=n(XWe,"STRONG",{});var rZt=s(pwe);vrt=r(rZt,"bart"),rZt.forEach(t),Frt=r(XWe," \u2014 "),Mte=n(XWe,"A",{href:!0});var tZt=s(Mte);Trt=r(tZt,"FlaxBartForConditionalGeneration"),tZt.forEach(t),Mrt=r(XWe," (BART model)"),XWe.forEach(t),Ert=i(je),M5=n(je,"LI",{});var zWe=s(M5);_we=n(zWe,"STRONG",{});var aZt=s(_we);Crt=r(aZt,"blenderbot"),aZt.forEach(t),wrt=r(zWe," \u2014 "),Ete=n(zWe,"A",{href:!0});var nZt=s(Ete);Art=r(nZt,"FlaxBlenderbotForConditionalGeneration"),nZt.forEach(t),Lrt=r(zWe," (Blenderbot model)"),zWe.forEach(t),yrt=i(je),E5=n(je,"LI",{});var WWe=s(E5);uwe=n(WWe,"STRONG",{});var sZt=s(uwe);xrt=r(sZt,"blenderbot-small"),sZt.forEach(t),$rt=r(WWe," \u2014 "),Cte=n(WWe,"A",{href:!0});var lZt=s(Cte);krt=r(lZt,"FlaxBlenderbotSmallForConditionalGeneration"),lZt.forEach(t),Srt=r(WWe," (BlenderbotSmall model)"),WWe.forEach(t),Rrt=i(je),C5=n(je,"LI",{});var QWe=s(C5);bwe=n(QWe,"STRONG",{});var iZt=s(bwe);Prt=r(iZt,"encoder-decoder"),iZt.forEach(t),Brt=r(QWe," \u2014 "),wte=n(QWe,"A",{href:!0});var dZt=s(wte);Irt=r(dZt,"FlaxEncoderDecoderModel"),dZt.forEach(t),Nrt=r(QWe," (Encoder decoder model)"),QWe.forEach(t),qrt=i(je),w5=n(je,"LI",{});var UWe=s(w5);vwe=n(UWe,"STRONG",{});var cZt=s(vwe);jrt=r(cZt,"longt5"),cZt.forEach(t),Drt=r(UWe," \u2014 "),Ate=n(UWe,"A",{href:!0});var fZt=s(Ate);Grt=r(fZt,"FlaxLongT5ForConditionalGeneration"),fZt.forEach(t),Ort=r(UWe," (LongT5 model)"),UWe.forEach(t),Vrt=i(je),A5=n(je,"LI",{});var HWe=s(A5);Fwe=n(HWe,"STRONG",{});var mZt=s(Fwe);Xrt=r(mZt,"marian"),mZt.forEach(t),zrt=r(HWe," \u2014 "),Lte=n(HWe,"A",{href:!0});var gZt=s(Lte);Wrt=r(gZt,"FlaxMarianMTModel"),gZt.forEach(t),Qrt=r(HWe," (Marian model)"),HWe.forEach(t),Urt=i(je),L5=n(je,"LI",{});var JWe=s(L5);Twe=n(JWe,"STRONG",{});var hZt=s(Twe);Hrt=r(hZt,"mbart"),hZt.forEach(t),Jrt=r(JWe," \u2014 "),yte=n(JWe,"A",{href:!0});var pZt=s(yte);Yrt=r(pZt,"FlaxMBartForConditionalGeneration"),pZt.forEach(t),Krt=r(JWe," (mBART model)"),JWe.forEach(t),Zrt=i(je),y5=n(je,"LI",{});var YWe=s(y5);Mwe=n(YWe,"STRONG",{});var _Zt=s(Mwe);ett=r(_Zt,"mt5"),_Zt.forEach(t),ott=r(YWe," \u2014 "),xte=n(YWe,"A",{href:!0});var uZt=s(xte);rtt=r(uZt,"FlaxMT5ForConditionalGeneration"),uZt.forEach(t),ttt=r(YWe," (MT5 model)"),YWe.forEach(t),att=i(je),x5=n(je,"LI",{});var KWe=s(x5);Ewe=n(KWe,"STRONG",{});var bZt=s(Ewe);ntt=r(bZt,"pegasus"),bZt.forEach(t),stt=r(KWe," \u2014 "),$te=n(KWe,"A",{href:!0});var vZt=s($te);ltt=r(vZt,"FlaxPegasusForConditionalGeneration"),vZt.forEach(t),itt=r(KWe," (Pegasus model)"),KWe.forEach(t),dtt=i(je),$5=n(je,"LI",{});var ZWe=s($5);Cwe=n(ZWe,"STRONG",{});var FZt=s(Cwe);ctt=r(FZt,"t5"),FZt.forEach(t),ftt=r(ZWe," \u2014 "),kte=n(ZWe,"A",{href:!0});var TZt=s(kte);mtt=r(TZt,"FlaxT5ForConditionalGeneration"),TZt.forEach(t),gtt=r(ZWe," (T5 model)"),ZWe.forEach(t),je.forEach(t),htt=i(Li),T(k5.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),BHe=i(f),$f=n(f,"H2",{class:!0});var HYe=s($f);S5=n(HYe,"A",{id:!0,class:!0,href:!0});var MZt=s(S5);wwe=n(MZt,"SPAN",{});var EZt=s(wwe);T(Kk.$$.fragment,EZt),EZt.forEach(t),MZt.forEach(t),ptt=i(HYe),Awe=n(HYe,"SPAN",{});var CZt=s(Awe);_tt=r(CZt,"FlaxAutoModelForSequenceClassification"),CZt.forEach(t),HYe.forEach(t),IHe=i(f),Cr=n(f,"DIV",{class:!0});var yi=s(Cr);T(Zk.$$.fragment,yi),utt=i(yi),kf=n(yi,"P",{});var Mse=s(kf);btt=r(Mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ste=n(Mse,"A",{href:!0});var wZt=s(Ste);vtt=r(wZt,"from_pretrained()"),wZt.forEach(t),Ftt=r(Mse," class method or the "),Rte=n(Mse,"A",{href:!0});var AZt=s(Rte);Ttt=r(AZt,"from_config()"),AZt.forEach(t),Mtt=r(Mse,` class
method.`),Mse.forEach(t),Ett=i(yi),eS=n(yi,"P",{});var JYe=s(eS);Ctt=r(JYe,"This class cannot be instantiated directly using "),Lwe=n(JYe,"CODE",{});var LZt=s(Lwe);wtt=r(LZt,"__init__()"),LZt.forEach(t),Att=r(JYe," (throws an error)."),JYe.forEach(t),Ltt=i(yi),aa=n(yi,"DIV",{class:!0});var HA=s(aa);T(oS.$$.fragment,HA),ytt=i(HA),ywe=n(HA,"P",{});var yZt=s(ywe);xtt=r(yZt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yZt.forEach(t),$tt=i(HA),Sf=n(HA,"P",{});var Ese=s(Sf);ktt=r(Ese,`Note:
Loading a model from its configuration file does `),xwe=n(Ese,"STRONG",{});var xZt=s(xwe);Stt=r(xZt,"not"),xZt.forEach(t),Rtt=r(Ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pte=n(Ese,"A",{href:!0});var $Zt=s(Pte);Ptt=r($Zt,"from_pretrained()"),$Zt.forEach(t),Btt=r(Ese," to load the model weights."),Ese.forEach(t),Itt=i(HA),T(R5.$$.fragment,HA),HA.forEach(t),Ntt=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(rS.$$.fragment,xi),qtt=i(xi),$we=n(xi,"P",{});var kZt=s($we);jtt=r(kZt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kZt.forEach(t),Dtt=i(xi),In=n(xi,"P",{});var JA=s(In);Gtt=r(JA,"The model class to instantiate is selected based on the "),kwe=n(JA,"CODE",{});var SZt=s(kwe);Ott=r(SZt,"model_type"),SZt.forEach(t),Vtt=r(JA,` property of the config object (either
passed as an argument or loaded from `),Swe=n(JA,"CODE",{});var RZt=s(Swe);Xtt=r(RZt,"pretrained_model_name_or_path"),RZt.forEach(t),ztt=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rwe=n(JA,"CODE",{});var PZt=s(Rwe);Wtt=r(PZt,"pretrained_model_name_or_path"),PZt.forEach(t),Qtt=r(JA,":"),JA.forEach(t),Utt=i(xi),Se=n(xi,"UL",{});var De=s(Se);P5=n(De,"LI",{});var eQe=s(P5);Pwe=n(eQe,"STRONG",{});var BZt=s(Pwe);Htt=r(BZt,"albert"),BZt.forEach(t),Jtt=r(eQe," \u2014 "),Bte=n(eQe,"A",{href:!0});var IZt=s(Bte);Ytt=r(IZt,"FlaxAlbertForSequenceClassification"),IZt.forEach(t),Ktt=r(eQe," (ALBERT model)"),eQe.forEach(t),Ztt=i(De),B5=n(De,"LI",{});var oQe=s(B5);Bwe=n(oQe,"STRONG",{});var NZt=s(Bwe);eat=r(NZt,"bart"),NZt.forEach(t),oat=r(oQe," \u2014 "),Ite=n(oQe,"A",{href:!0});var qZt=s(Ite);rat=r(qZt,"FlaxBartForSequenceClassification"),qZt.forEach(t),tat=r(oQe," (BART model)"),oQe.forEach(t),aat=i(De),I5=n(De,"LI",{});var rQe=s(I5);Iwe=n(rQe,"STRONG",{});var jZt=s(Iwe);nat=r(jZt,"bert"),jZt.forEach(t),sat=r(rQe," \u2014 "),Nte=n(rQe,"A",{href:!0});var DZt=s(Nte);lat=r(DZt,"FlaxBertForSequenceClassification"),DZt.forEach(t),iat=r(rQe," (BERT model)"),rQe.forEach(t),dat=i(De),N5=n(De,"LI",{});var tQe=s(N5);Nwe=n(tQe,"STRONG",{});var GZt=s(Nwe);cat=r(GZt,"big_bird"),GZt.forEach(t),fat=r(tQe," \u2014 "),qte=n(tQe,"A",{href:!0});var OZt=s(qte);mat=r(OZt,"FlaxBigBirdForSequenceClassification"),OZt.forEach(t),gat=r(tQe," (BigBird model)"),tQe.forEach(t),hat=i(De),q5=n(De,"LI",{});var aQe=s(q5);qwe=n(aQe,"STRONG",{});var VZt=s(qwe);pat=r(VZt,"distilbert"),VZt.forEach(t),_at=r(aQe," \u2014 "),jte=n(aQe,"A",{href:!0});var XZt=s(jte);uat=r(XZt,"FlaxDistilBertForSequenceClassification"),XZt.forEach(t),bat=r(aQe," (DistilBERT model)"),aQe.forEach(t),vat=i(De),j5=n(De,"LI",{});var nQe=s(j5);jwe=n(nQe,"STRONG",{});var zZt=s(jwe);Fat=r(zZt,"electra"),zZt.forEach(t),Tat=r(nQe," \u2014 "),Dte=n(nQe,"A",{href:!0});var WZt=s(Dte);Mat=r(WZt,"FlaxElectraForSequenceClassification"),WZt.forEach(t),Eat=r(nQe," (ELECTRA model)"),nQe.forEach(t),Cat=i(De),D5=n(De,"LI",{});var sQe=s(D5);Dwe=n(sQe,"STRONG",{});var QZt=s(Dwe);wat=r(QZt,"mbart"),QZt.forEach(t),Aat=r(sQe," \u2014 "),Gte=n(sQe,"A",{href:!0});var UZt=s(Gte);Lat=r(UZt,"FlaxMBartForSequenceClassification"),UZt.forEach(t),yat=r(sQe," (mBART model)"),sQe.forEach(t),xat=i(De),G5=n(De,"LI",{});var lQe=s(G5);Gwe=n(lQe,"STRONG",{});var HZt=s(Gwe);$at=r(HZt,"roberta"),HZt.forEach(t),kat=r(lQe," \u2014 "),Ote=n(lQe,"A",{href:!0});var JZt=s(Ote);Sat=r(JZt,"FlaxRobertaForSequenceClassification"),JZt.forEach(t),Rat=r(lQe," (RoBERTa model)"),lQe.forEach(t),Pat=i(De),O5=n(De,"LI",{});var iQe=s(O5);Owe=n(iQe,"STRONG",{});var YZt=s(Owe);Bat=r(YZt,"roformer"),YZt.forEach(t),Iat=r(iQe," \u2014 "),Vte=n(iQe,"A",{href:!0});var KZt=s(Vte);Nat=r(KZt,"FlaxRoFormerForSequenceClassification"),KZt.forEach(t),qat=r(iQe," (RoFormer model)"),iQe.forEach(t),jat=i(De),V5=n(De,"LI",{});var dQe=s(V5);Vwe=n(dQe,"STRONG",{});var ZZt=s(Vwe);Dat=r(ZZt,"xlm-roberta"),ZZt.forEach(t),Gat=r(dQe," \u2014 "),Xte=n(dQe,"A",{href:!0});var eea=s(Xte);Oat=r(eea,"FlaxXLMRobertaForSequenceClassification"),eea.forEach(t),Vat=r(dQe," (XLM-RoBERTa model)"),dQe.forEach(t),De.forEach(t),Xat=i(xi),T(X5.$$.fragment,xi),xi.forEach(t),yi.forEach(t),NHe=i(f),Rf=n(f,"H2",{class:!0});var YYe=s(Rf);z5=n(YYe,"A",{id:!0,class:!0,href:!0});var oea=s(z5);Xwe=n(oea,"SPAN",{});var rea=s(Xwe);T(tS.$$.fragment,rea),rea.forEach(t),oea.forEach(t),zat=i(YYe),zwe=n(YYe,"SPAN",{});var tea=s(zwe);Wat=r(tea,"FlaxAutoModelForQuestionAnswering"),tea.forEach(t),YYe.forEach(t),qHe=i(f),wr=n(f,"DIV",{class:!0});var $i=s(wr);T(aS.$$.fragment,$i),Qat=i($i),Pf=n($i,"P",{});var Cse=s(Pf);Uat=r(Cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zte=n(Cse,"A",{href:!0});var aea=s(zte);Hat=r(aea,"from_pretrained()"),aea.forEach(t),Jat=r(Cse," class method or the "),Wte=n(Cse,"A",{href:!0});var nea=s(Wte);Yat=r(nea,"from_config()"),nea.forEach(t),Kat=r(Cse,` class
method.`),Cse.forEach(t),Zat=i($i),nS=n($i,"P",{});var KYe=s(nS);ent=r(KYe,"This class cannot be instantiated directly using "),Wwe=n(KYe,"CODE",{});var sea=s(Wwe);ont=r(sea,"__init__()"),sea.forEach(t),rnt=r(KYe," (throws an error)."),KYe.forEach(t),tnt=i($i),na=n($i,"DIV",{class:!0});var YA=s(na);T(sS.$$.fragment,YA),ant=i(YA),Qwe=n(YA,"P",{});var lea=s(Qwe);nnt=r(lea,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lea.forEach(t),snt=i(YA),Bf=n(YA,"P",{});var wse=s(Bf);lnt=r(wse,`Note:
Loading a model from its configuration file does `),Uwe=n(wse,"STRONG",{});var iea=s(Uwe);int=r(iea,"not"),iea.forEach(t),dnt=r(wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qte=n(wse,"A",{href:!0});var dea=s(Qte);cnt=r(dea,"from_pretrained()"),dea.forEach(t),fnt=r(wse," to load the model weights."),wse.forEach(t),mnt=i(YA),T(W5.$$.fragment,YA),YA.forEach(t),gnt=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(lS.$$.fragment,ki),hnt=i(ki),Hwe=n(ki,"P",{});var cea=s(Hwe);pnt=r(cea,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cea.forEach(t),_nt=i(ki),Nn=n(ki,"P",{});var KA=s(Nn);unt=r(KA,"The model class to instantiate is selected based on the "),Jwe=n(KA,"CODE",{});var fea=s(Jwe);bnt=r(fea,"model_type"),fea.forEach(t),vnt=r(KA,` property of the config object (either
passed as an argument or loaded from `),Ywe=n(KA,"CODE",{});var mea=s(Ywe);Fnt=r(mea,"pretrained_model_name_or_path"),mea.forEach(t),Tnt=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kwe=n(KA,"CODE",{});var gea=s(Kwe);Mnt=r(gea,"pretrained_model_name_or_path"),gea.forEach(t),Ent=r(KA,":"),KA.forEach(t),Cnt=i(ki),Re=n(ki,"UL",{});var Ge=s(Re);Q5=n(Ge,"LI",{});var cQe=s(Q5);Zwe=n(cQe,"STRONG",{});var hea=s(Zwe);wnt=r(hea,"albert"),hea.forEach(t),Ant=r(cQe," \u2014 "),Ute=n(cQe,"A",{href:!0});var pea=s(Ute);Lnt=r(pea,"FlaxAlbertForQuestionAnswering"),pea.forEach(t),ynt=r(cQe," (ALBERT model)"),cQe.forEach(t),xnt=i(Ge),U5=n(Ge,"LI",{});var fQe=s(U5);eAe=n(fQe,"STRONG",{});var _ea=s(eAe);$nt=r(_ea,"bart"),_ea.forEach(t),knt=r(fQe," \u2014 "),Hte=n(fQe,"A",{href:!0});var uea=s(Hte);Snt=r(uea,"FlaxBartForQuestionAnswering"),uea.forEach(t),Rnt=r(fQe," (BART model)"),fQe.forEach(t),Pnt=i(Ge),H5=n(Ge,"LI",{});var mQe=s(H5);oAe=n(mQe,"STRONG",{});var bea=s(oAe);Bnt=r(bea,"bert"),bea.forEach(t),Int=r(mQe," \u2014 "),Jte=n(mQe,"A",{href:!0});var vea=s(Jte);Nnt=r(vea,"FlaxBertForQuestionAnswering"),vea.forEach(t),qnt=r(mQe," (BERT model)"),mQe.forEach(t),jnt=i(Ge),J5=n(Ge,"LI",{});var gQe=s(J5);rAe=n(gQe,"STRONG",{});var Fea=s(rAe);Dnt=r(Fea,"big_bird"),Fea.forEach(t),Gnt=r(gQe," \u2014 "),Yte=n(gQe,"A",{href:!0});var Tea=s(Yte);Ont=r(Tea,"FlaxBigBirdForQuestionAnswering"),Tea.forEach(t),Vnt=r(gQe," (BigBird model)"),gQe.forEach(t),Xnt=i(Ge),Y5=n(Ge,"LI",{});var hQe=s(Y5);tAe=n(hQe,"STRONG",{});var Mea=s(tAe);znt=r(Mea,"distilbert"),Mea.forEach(t),Wnt=r(hQe," \u2014 "),Kte=n(hQe,"A",{href:!0});var Eea=s(Kte);Qnt=r(Eea,"FlaxDistilBertForQuestionAnswering"),Eea.forEach(t),Unt=r(hQe," (DistilBERT model)"),hQe.forEach(t),Hnt=i(Ge),K5=n(Ge,"LI",{});var pQe=s(K5);aAe=n(pQe,"STRONG",{});var Cea=s(aAe);Jnt=r(Cea,"electra"),Cea.forEach(t),Ynt=r(pQe," \u2014 "),Zte=n(pQe,"A",{href:!0});var wea=s(Zte);Knt=r(wea,"FlaxElectraForQuestionAnswering"),wea.forEach(t),Znt=r(pQe," (ELECTRA model)"),pQe.forEach(t),est=i(Ge),Z5=n(Ge,"LI",{});var _Qe=s(Z5);nAe=n(_Qe,"STRONG",{});var Aea=s(nAe);ost=r(Aea,"mbart"),Aea.forEach(t),rst=r(_Qe," \u2014 "),eae=n(_Qe,"A",{href:!0});var Lea=s(eae);tst=r(Lea,"FlaxMBartForQuestionAnswering"),Lea.forEach(t),ast=r(_Qe," (mBART model)"),_Qe.forEach(t),nst=i(Ge),e0=n(Ge,"LI",{});var uQe=s(e0);sAe=n(uQe,"STRONG",{});var yea=s(sAe);sst=r(yea,"roberta"),yea.forEach(t),lst=r(uQe," \u2014 "),oae=n(uQe,"A",{href:!0});var xea=s(oae);ist=r(xea,"FlaxRobertaForQuestionAnswering"),xea.forEach(t),dst=r(uQe," (RoBERTa model)"),uQe.forEach(t),cst=i(Ge),o0=n(Ge,"LI",{});var bQe=s(o0);lAe=n(bQe,"STRONG",{});var $ea=s(lAe);fst=r($ea,"roformer"),$ea.forEach(t),mst=r(bQe," \u2014 "),rae=n(bQe,"A",{href:!0});var kea=s(rae);gst=r(kea,"FlaxRoFormerForQuestionAnswering"),kea.forEach(t),hst=r(bQe," (RoFormer model)"),bQe.forEach(t),pst=i(Ge),r0=n(Ge,"LI",{});var vQe=s(r0);iAe=n(vQe,"STRONG",{});var Sea=s(iAe);_st=r(Sea,"xlm-roberta"),Sea.forEach(t),ust=r(vQe," \u2014 "),tae=n(vQe,"A",{href:!0});var Rea=s(tae);bst=r(Rea,"FlaxXLMRobertaForQuestionAnswering"),Rea.forEach(t),vst=r(vQe," (XLM-RoBERTa model)"),vQe.forEach(t),Ge.forEach(t),Fst=i(ki),T(t0.$$.fragment,ki),ki.forEach(t),$i.forEach(t),jHe=i(f),If=n(f,"H2",{class:!0});var ZYe=s(If);a0=n(ZYe,"A",{id:!0,class:!0,href:!0});var Pea=s(a0);dAe=n(Pea,"SPAN",{});var Bea=s(dAe);T(iS.$$.fragment,Bea),Bea.forEach(t),Pea.forEach(t),Tst=i(ZYe),cAe=n(ZYe,"SPAN",{});var Iea=s(cAe);Mst=r(Iea,"FlaxAutoModelForTokenClassification"),Iea.forEach(t),ZYe.forEach(t),DHe=i(f),Ar=n(f,"DIV",{class:!0});var Si=s(Ar);T(dS.$$.fragment,Si),Est=i(Si),Nf=n(Si,"P",{});var Ase=s(Nf);Cst=r(Ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aae=n(Ase,"A",{href:!0});var Nea=s(aae);wst=r(Nea,"from_pretrained()"),Nea.forEach(t),Ast=r(Ase," class method or the "),nae=n(Ase,"A",{href:!0});var qea=s(nae);Lst=r(qea,"from_config()"),qea.forEach(t),yst=r(Ase,` class
method.`),Ase.forEach(t),xst=i(Si),cS=n(Si,"P",{});var eKe=s(cS);$st=r(eKe,"This class cannot be instantiated directly using "),fAe=n(eKe,"CODE",{});var jea=s(fAe);kst=r(jea,"__init__()"),jea.forEach(t),Sst=r(eKe," (throws an error)."),eKe.forEach(t),Rst=i(Si),sa=n(Si,"DIV",{class:!0});var ZA=s(sa);T(fS.$$.fragment,ZA),Pst=i(ZA),mAe=n(ZA,"P",{});var Dea=s(mAe);Bst=r(Dea,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Dea.forEach(t),Ist=i(ZA),qf=n(ZA,"P",{});var Lse=s(qf);Nst=r(Lse,`Note:
Loading a model from its configuration file does `),gAe=n(Lse,"STRONG",{});var Gea=s(gAe);qst=r(Gea,"not"),Gea.forEach(t),jst=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),sae=n(Lse,"A",{href:!0});var Oea=s(sae);Dst=r(Oea,"from_pretrained()"),Oea.forEach(t),Gst=r(Lse," to load the model weights."),Lse.forEach(t),Ost=i(ZA),T(n0.$$.fragment,ZA),ZA.forEach(t),Vst=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(mS.$$.fragment,Ri),Xst=i(Ri),hAe=n(Ri,"P",{});var Vea=s(hAe);zst=r(Vea,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Vea.forEach(t),Wst=i(Ri),qn=n(Ri,"P",{});var eL=s(qn);Qst=r(eL,"The model class to instantiate is selected based on the "),pAe=n(eL,"CODE",{});var Xea=s(pAe);Ust=r(Xea,"model_type"),Xea.forEach(t),Hst=r(eL,` property of the config object (either
passed as an argument or loaded from `),_Ae=n(eL,"CODE",{});var zea=s(_Ae);Jst=r(zea,"pretrained_model_name_or_path"),zea.forEach(t),Yst=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uAe=n(eL,"CODE",{});var Wea=s(uAe);Kst=r(Wea,"pretrained_model_name_or_path"),Wea.forEach(t),Zst=r(eL,":"),eL.forEach(t),elt=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);s0=n(Co,"LI",{});var FQe=s(s0);bAe=n(FQe,"STRONG",{});var Qea=s(bAe);olt=r(Qea,"albert"),Qea.forEach(t),rlt=r(FQe," \u2014 "),lae=n(FQe,"A",{href:!0});var Uea=s(lae);tlt=r(Uea,"FlaxAlbertForTokenClassification"),Uea.forEach(t),alt=r(FQe," (ALBERT model)"),FQe.forEach(t),nlt=i(Co),l0=n(Co,"LI",{});var TQe=s(l0);vAe=n(TQe,"STRONG",{});var Hea=s(vAe);slt=r(Hea,"bert"),Hea.forEach(t),llt=r(TQe," \u2014 "),iae=n(TQe,"A",{href:!0});var Jea=s(iae);ilt=r(Jea,"FlaxBertForTokenClassification"),Jea.forEach(t),dlt=r(TQe," (BERT model)"),TQe.forEach(t),clt=i(Co),i0=n(Co,"LI",{});var MQe=s(i0);FAe=n(MQe,"STRONG",{});var Yea=s(FAe);flt=r(Yea,"big_bird"),Yea.forEach(t),mlt=r(MQe," \u2014 "),dae=n(MQe,"A",{href:!0});var Kea=s(dae);glt=r(Kea,"FlaxBigBirdForTokenClassification"),Kea.forEach(t),hlt=r(MQe," (BigBird model)"),MQe.forEach(t),plt=i(Co),d0=n(Co,"LI",{});var EQe=s(d0);TAe=n(EQe,"STRONG",{});var Zea=s(TAe);_lt=r(Zea,"distilbert"),Zea.forEach(t),ult=r(EQe," \u2014 "),cae=n(EQe,"A",{href:!0});var eoa=s(cae);blt=r(eoa,"FlaxDistilBertForTokenClassification"),eoa.forEach(t),vlt=r(EQe," (DistilBERT model)"),EQe.forEach(t),Flt=i(Co),c0=n(Co,"LI",{});var CQe=s(c0);MAe=n(CQe,"STRONG",{});var ooa=s(MAe);Tlt=r(ooa,"electra"),ooa.forEach(t),Mlt=r(CQe," \u2014 "),fae=n(CQe,"A",{href:!0});var roa=s(fae);Elt=r(roa,"FlaxElectraForTokenClassification"),roa.forEach(t),Clt=r(CQe," (ELECTRA model)"),CQe.forEach(t),wlt=i(Co),f0=n(Co,"LI",{});var wQe=s(f0);EAe=n(wQe,"STRONG",{});var toa=s(EAe);Alt=r(toa,"roberta"),toa.forEach(t),Llt=r(wQe," \u2014 "),mae=n(wQe,"A",{href:!0});var aoa=s(mae);ylt=r(aoa,"FlaxRobertaForTokenClassification"),aoa.forEach(t),xlt=r(wQe," (RoBERTa model)"),wQe.forEach(t),$lt=i(Co),m0=n(Co,"LI",{});var AQe=s(m0);CAe=n(AQe,"STRONG",{});var noa=s(CAe);klt=r(noa,"roformer"),noa.forEach(t),Slt=r(AQe," \u2014 "),gae=n(AQe,"A",{href:!0});var soa=s(gae);Rlt=r(soa,"FlaxRoFormerForTokenClassification"),soa.forEach(t),Plt=r(AQe," (RoFormer model)"),AQe.forEach(t),Blt=i(Co),g0=n(Co,"LI",{});var LQe=s(g0);wAe=n(LQe,"STRONG",{});var loa=s(wAe);Ilt=r(loa,"xlm-roberta"),loa.forEach(t),Nlt=r(LQe," \u2014 "),hae=n(LQe,"A",{href:!0});var ioa=s(hae);qlt=r(ioa,"FlaxXLMRobertaForTokenClassification"),ioa.forEach(t),jlt=r(LQe," (XLM-RoBERTa model)"),LQe.forEach(t),Co.forEach(t),Dlt=i(Ri),T(h0.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),GHe=i(f),jf=n(f,"H2",{class:!0});var oKe=s(jf);p0=n(oKe,"A",{id:!0,class:!0,href:!0});var doa=s(p0);AAe=n(doa,"SPAN",{});var coa=s(AAe);T(gS.$$.fragment,coa),coa.forEach(t),doa.forEach(t),Glt=i(oKe),LAe=n(oKe,"SPAN",{});var foa=s(LAe);Olt=r(foa,"FlaxAutoModelForMultipleChoice"),foa.forEach(t),oKe.forEach(t),OHe=i(f),Lr=n(f,"DIV",{class:!0});var Pi=s(Lr);T(hS.$$.fragment,Pi),Vlt=i(Pi),Df=n(Pi,"P",{});var yse=s(Df);Xlt=r(yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pae=n(yse,"A",{href:!0});var moa=s(pae);zlt=r(moa,"from_pretrained()"),moa.forEach(t),Wlt=r(yse," class method or the "),_ae=n(yse,"A",{href:!0});var goa=s(_ae);Qlt=r(goa,"from_config()"),goa.forEach(t),Ult=r(yse,` class
method.`),yse.forEach(t),Hlt=i(Pi),pS=n(Pi,"P",{});var rKe=s(pS);Jlt=r(rKe,"This class cannot be instantiated directly using "),yAe=n(rKe,"CODE",{});var hoa=s(yAe);Ylt=r(hoa,"__init__()"),hoa.forEach(t),Klt=r(rKe," (throws an error)."),rKe.forEach(t),Zlt=i(Pi),la=n(Pi,"DIV",{class:!0});var oL=s(la);T(_S.$$.fragment,oL),eit=i(oL),xAe=n(oL,"P",{});var poa=s(xAe);oit=r(poa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),poa.forEach(t),rit=i(oL),Gf=n(oL,"P",{});var xse=s(Gf);tit=r(xse,`Note:
Loading a model from its configuration file does `),$Ae=n(xse,"STRONG",{});var _oa=s($Ae);ait=r(_oa,"not"),_oa.forEach(t),nit=r(xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),uae=n(xse,"A",{href:!0});var uoa=s(uae);sit=r(uoa,"from_pretrained()"),uoa.forEach(t),lit=r(xse," to load the model weights."),xse.forEach(t),iit=i(oL),T(_0.$$.fragment,oL),oL.forEach(t),dit=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(uS.$$.fragment,Bi),cit=i(Bi),kAe=n(Bi,"P",{});var boa=s(kAe);fit=r(boa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),boa.forEach(t),mit=i(Bi),jn=n(Bi,"P",{});var rL=s(jn);git=r(rL,"The model class to instantiate is selected based on the "),SAe=n(rL,"CODE",{});var voa=s(SAe);hit=r(voa,"model_type"),voa.forEach(t),pit=r(rL,` property of the config object (either
passed as an argument or loaded from `),RAe=n(rL,"CODE",{});var Foa=s(RAe);_it=r(Foa,"pretrained_model_name_or_path"),Foa.forEach(t),uit=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PAe=n(rL,"CODE",{});var Toa=s(PAe);bit=r(Toa,"pretrained_model_name_or_path"),Toa.forEach(t),vit=r(rL,":"),rL.forEach(t),Fit=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);u0=n(wo,"LI",{});var yQe=s(u0);BAe=n(yQe,"STRONG",{});var Moa=s(BAe);Tit=r(Moa,"albert"),Moa.forEach(t),Mit=r(yQe," \u2014 "),bae=n(yQe,"A",{href:!0});var Eoa=s(bae);Eit=r(Eoa,"FlaxAlbertForMultipleChoice"),Eoa.forEach(t),Cit=r(yQe," (ALBERT model)"),yQe.forEach(t),wit=i(wo),b0=n(wo,"LI",{});var xQe=s(b0);IAe=n(xQe,"STRONG",{});var Coa=s(IAe);Ait=r(Coa,"bert"),Coa.forEach(t),Lit=r(xQe," \u2014 "),vae=n(xQe,"A",{href:!0});var woa=s(vae);yit=r(woa,"FlaxBertForMultipleChoice"),woa.forEach(t),xit=r(xQe," (BERT model)"),xQe.forEach(t),$it=i(wo),v0=n(wo,"LI",{});var $Qe=s(v0);NAe=n($Qe,"STRONG",{});var Aoa=s(NAe);kit=r(Aoa,"big_bird"),Aoa.forEach(t),Sit=r($Qe," \u2014 "),Fae=n($Qe,"A",{href:!0});var Loa=s(Fae);Rit=r(Loa,"FlaxBigBirdForMultipleChoice"),Loa.forEach(t),Pit=r($Qe," (BigBird model)"),$Qe.forEach(t),Bit=i(wo),F0=n(wo,"LI",{});var kQe=s(F0);qAe=n(kQe,"STRONG",{});var yoa=s(qAe);Iit=r(yoa,"distilbert"),yoa.forEach(t),Nit=r(kQe," \u2014 "),Tae=n(kQe,"A",{href:!0});var xoa=s(Tae);qit=r(xoa,"FlaxDistilBertForMultipleChoice"),xoa.forEach(t),jit=r(kQe," (DistilBERT model)"),kQe.forEach(t),Dit=i(wo),T0=n(wo,"LI",{});var SQe=s(T0);jAe=n(SQe,"STRONG",{});var $oa=s(jAe);Git=r($oa,"electra"),$oa.forEach(t),Oit=r(SQe," \u2014 "),Mae=n(SQe,"A",{href:!0});var koa=s(Mae);Vit=r(koa,"FlaxElectraForMultipleChoice"),koa.forEach(t),Xit=r(SQe," (ELECTRA model)"),SQe.forEach(t),zit=i(wo),M0=n(wo,"LI",{});var RQe=s(M0);DAe=n(RQe,"STRONG",{});var Soa=s(DAe);Wit=r(Soa,"roberta"),Soa.forEach(t),Qit=r(RQe," \u2014 "),Eae=n(RQe,"A",{href:!0});var Roa=s(Eae);Uit=r(Roa,"FlaxRobertaForMultipleChoice"),Roa.forEach(t),Hit=r(RQe," (RoBERTa model)"),RQe.forEach(t),Jit=i(wo),E0=n(wo,"LI",{});var PQe=s(E0);GAe=n(PQe,"STRONG",{});var Poa=s(GAe);Yit=r(Poa,"roformer"),Poa.forEach(t),Kit=r(PQe," \u2014 "),Cae=n(PQe,"A",{href:!0});var Boa=s(Cae);Zit=r(Boa,"FlaxRoFormerForMultipleChoice"),Boa.forEach(t),edt=r(PQe," (RoFormer model)"),PQe.forEach(t),odt=i(wo),C0=n(wo,"LI",{});var BQe=s(C0);OAe=n(BQe,"STRONG",{});var Ioa=s(OAe);rdt=r(Ioa,"xlm-roberta"),Ioa.forEach(t),tdt=r(BQe," \u2014 "),wae=n(BQe,"A",{href:!0});var Noa=s(wae);adt=r(Noa,"FlaxXLMRobertaForMultipleChoice"),Noa.forEach(t),ndt=r(BQe," (XLM-RoBERTa model)"),BQe.forEach(t),wo.forEach(t),sdt=i(Bi),T(w0.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),VHe=i(f),Of=n(f,"H2",{class:!0});var tKe=s(Of);A0=n(tKe,"A",{id:!0,class:!0,href:!0});var qoa=s(A0);VAe=n(qoa,"SPAN",{});var joa=s(VAe);T(bS.$$.fragment,joa),joa.forEach(t),qoa.forEach(t),ldt=i(tKe),XAe=n(tKe,"SPAN",{});var Doa=s(XAe);idt=r(Doa,"FlaxAutoModelForNextSentencePrediction"),Doa.forEach(t),tKe.forEach(t),XHe=i(f),yr=n(f,"DIV",{class:!0});var Ii=s(yr);T(vS.$$.fragment,Ii),ddt=i(Ii),Vf=n(Ii,"P",{});var $se=s(Vf);cdt=r($se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Aae=n($se,"A",{href:!0});var Goa=s(Aae);fdt=r(Goa,"from_pretrained()"),Goa.forEach(t),mdt=r($se," class method or the "),Lae=n($se,"A",{href:!0});var Ooa=s(Lae);gdt=r(Ooa,"from_config()"),Ooa.forEach(t),hdt=r($se,` class
method.`),$se.forEach(t),pdt=i(Ii),FS=n(Ii,"P",{});var aKe=s(FS);_dt=r(aKe,"This class cannot be instantiated directly using "),zAe=n(aKe,"CODE",{});var Voa=s(zAe);udt=r(Voa,"__init__()"),Voa.forEach(t),bdt=r(aKe," (throws an error)."),aKe.forEach(t),vdt=i(Ii),ia=n(Ii,"DIV",{class:!0});var tL=s(ia);T(TS.$$.fragment,tL),Fdt=i(tL),WAe=n(tL,"P",{});var Xoa=s(WAe);Tdt=r(Xoa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xoa.forEach(t),Mdt=i(tL),Xf=n(tL,"P",{});var kse=s(Xf);Edt=r(kse,`Note:
Loading a model from its configuration file does `),QAe=n(kse,"STRONG",{});var zoa=s(QAe);Cdt=r(zoa,"not"),zoa.forEach(t),wdt=r(kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),yae=n(kse,"A",{href:!0});var Woa=s(yae);Adt=r(Woa,"from_pretrained()"),Woa.forEach(t),Ldt=r(kse," to load the model weights."),kse.forEach(t),ydt=i(tL),T(L0.$$.fragment,tL),tL.forEach(t),xdt=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(MS.$$.fragment,Ni),$dt=i(Ni),UAe=n(Ni,"P",{});var Qoa=s(UAe);kdt=r(Qoa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qoa.forEach(t),Sdt=i(Ni),Dn=n(Ni,"P",{});var aL=s(Dn);Rdt=r(aL,"The model class to instantiate is selected based on the "),HAe=n(aL,"CODE",{});var Uoa=s(HAe);Pdt=r(Uoa,"model_type"),Uoa.forEach(t),Bdt=r(aL,` property of the config object (either
passed as an argument or loaded from `),JAe=n(aL,"CODE",{});var Hoa=s(JAe);Idt=r(Hoa,"pretrained_model_name_or_path"),Hoa.forEach(t),Ndt=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YAe=n(aL,"CODE",{});var Joa=s(YAe);qdt=r(Joa,"pretrained_model_name_or_path"),Joa.forEach(t),jdt=r(aL,":"),aL.forEach(t),Ddt=i(Ni),KAe=n(Ni,"UL",{});var Yoa=s(KAe);y0=n(Yoa,"LI",{});var IQe=s(y0);ZAe=n(IQe,"STRONG",{});var Koa=s(ZAe);Gdt=r(Koa,"bert"),Koa.forEach(t),Odt=r(IQe," \u2014 "),xae=n(IQe,"A",{href:!0});var Zoa=s(xae);Vdt=r(Zoa,"FlaxBertForNextSentencePrediction"),Zoa.forEach(t),Xdt=r(IQe," (BERT model)"),IQe.forEach(t),Yoa.forEach(t),zdt=i(Ni),T(x0.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),zHe=i(f),zf=n(f,"H2",{class:!0});var nKe=s(zf);$0=n(nKe,"A",{id:!0,class:!0,href:!0});var era=s($0);eLe=n(era,"SPAN",{});var ora=s(eLe);T(ES.$$.fragment,ora),ora.forEach(t),era.forEach(t),Wdt=i(nKe),oLe=n(nKe,"SPAN",{});var rra=s(oLe);Qdt=r(rra,"FlaxAutoModelForImageClassification"),rra.forEach(t),nKe.forEach(t),WHe=i(f),xr=n(f,"DIV",{class:!0});var qi=s(xr);T(CS.$$.fragment,qi),Udt=i(qi),Wf=n(qi,"P",{});var Sse=s(Wf);Hdt=r(Sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$ae=n(Sse,"A",{href:!0});var tra=s($ae);Jdt=r(tra,"from_pretrained()"),tra.forEach(t),Ydt=r(Sse," class method or the "),kae=n(Sse,"A",{href:!0});var ara=s(kae);Kdt=r(ara,"from_config()"),ara.forEach(t),Zdt=r(Sse,` class
method.`),Sse.forEach(t),ect=i(qi),wS=n(qi,"P",{});var sKe=s(wS);oct=r(sKe,"This class cannot be instantiated directly using "),rLe=n(sKe,"CODE",{});var nra=s(rLe);rct=r(nra,"__init__()"),nra.forEach(t),tct=r(sKe," (throws an error)."),sKe.forEach(t),act=i(qi),da=n(qi,"DIV",{class:!0});var nL=s(da);T(AS.$$.fragment,nL),nct=i(nL),tLe=n(nL,"P",{});var sra=s(tLe);sct=r(sra,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sra.forEach(t),lct=i(nL),Qf=n(nL,"P",{});var Rse=s(Qf);ict=r(Rse,`Note:
Loading a model from its configuration file does `),aLe=n(Rse,"STRONG",{});var lra=s(aLe);dct=r(lra,"not"),lra.forEach(t),cct=r(Rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=n(Rse,"A",{href:!0});var ira=s(Sae);fct=r(ira,"from_pretrained()"),ira.forEach(t),mct=r(Rse," to load the model weights."),Rse.forEach(t),gct=i(nL),T(k0.$$.fragment,nL),nL.forEach(t),hct=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T(LS.$$.fragment,ji),pct=i(ji),nLe=n(ji,"P",{});var dra=s(nLe);_ct=r(dra,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dra.forEach(t),uct=i(ji),Gn=n(ji,"P",{});var sL=s(Gn);bct=r(sL,"The model class to instantiate is selected based on the "),sLe=n(sL,"CODE",{});var cra=s(sLe);vct=r(cra,"model_type"),cra.forEach(t),Fct=r(sL,` property of the config object (either
passed as an argument or loaded from `),lLe=n(sL,"CODE",{});var fra=s(lLe);Tct=r(fra,"pretrained_model_name_or_path"),fra.forEach(t),Mct=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iLe=n(sL,"CODE",{});var mra=s(iLe);Ect=r(mra,"pretrained_model_name_or_path"),mra.forEach(t),Cct=r(sL,":"),sL.forEach(t),wct=i(ji),yS=n(ji,"UL",{});var lKe=s(yS);S0=n(lKe,"LI",{});var NQe=s(S0);dLe=n(NQe,"STRONG",{});var gra=s(dLe);Act=r(gra,"beit"),gra.forEach(t),Lct=r(NQe," \u2014 "),Rae=n(NQe,"A",{href:!0});var hra=s(Rae);yct=r(hra,"FlaxBeitForImageClassification"),hra.forEach(t),xct=r(NQe," (BEiT model)"),NQe.forEach(t),$ct=i(lKe),R0=n(lKe,"LI",{});var qQe=s(R0);cLe=n(qQe,"STRONG",{});var pra=s(cLe);kct=r(pra,"vit"),pra.forEach(t),Sct=r(qQe," \u2014 "),Pae=n(qQe,"A",{href:!0});var _ra=s(Pae);Rct=r(_ra,"FlaxViTForImageClassification"),_ra.forEach(t),Pct=r(qQe," (ViT model)"),qQe.forEach(t),lKe.forEach(t),Bct=i(ji),T(P0.$$.fragment,ji),ji.forEach(t),qi.forEach(t),QHe=i(f),Uf=n(f,"H2",{class:!0});var iKe=s(Uf);B0=n(iKe,"A",{id:!0,class:!0,href:!0});var ura=s(B0);fLe=n(ura,"SPAN",{});var bra=s(fLe);T(xS.$$.fragment,bra),bra.forEach(t),ura.forEach(t),Ict=i(iKe),mLe=n(iKe,"SPAN",{});var vra=s(mLe);Nct=r(vra,"FlaxAutoModelForVision2Seq"),vra.forEach(t),iKe.forEach(t),UHe=i(f),$r=n(f,"DIV",{class:!0});var Di=s($r);T($S.$$.fragment,Di),qct=i(Di),Hf=n(Di,"P",{});var Pse=s(Hf);jct=r(Pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Bae=n(Pse,"A",{href:!0});var Fra=s(Bae);Dct=r(Fra,"from_pretrained()"),Fra.forEach(t),Gct=r(Pse," class method or the "),Iae=n(Pse,"A",{href:!0});var Tra=s(Iae);Oct=r(Tra,"from_config()"),Tra.forEach(t),Vct=r(Pse,` class
method.`),Pse.forEach(t),Xct=i(Di),kS=n(Di,"P",{});var dKe=s(kS);zct=r(dKe,"This class cannot be instantiated directly using "),gLe=n(dKe,"CODE",{});var Mra=s(gLe);Wct=r(Mra,"__init__()"),Mra.forEach(t),Qct=r(dKe," (throws an error)."),dKe.forEach(t),Uct=i(Di),ca=n(Di,"DIV",{class:!0});var lL=s(ca);T(SS.$$.fragment,lL),Hct=i(lL),hLe=n(lL,"P",{});var Era=s(hLe);Jct=r(Era,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Era.forEach(t),Yct=i(lL),Jf=n(lL,"P",{});var Bse=s(Jf);Kct=r(Bse,`Note:
Loading a model from its configuration file does `),pLe=n(Bse,"STRONG",{});var Cra=s(pLe);Zct=r(Cra,"not"),Cra.forEach(t),eft=r(Bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=n(Bse,"A",{href:!0});var wra=s(Nae);oft=r(wra,"from_pretrained()"),wra.forEach(t),rft=r(Bse," to load the model weights."),Bse.forEach(t),tft=i(lL),T(I0.$$.fragment,lL),lL.forEach(t),aft=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(RS.$$.fragment,Gi),nft=i(Gi),_Le=n(Gi,"P",{});var Ara=s(_Le);sft=r(Ara,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ara.forEach(t),lft=i(Gi),On=n(Gi,"P",{});var iL=s(On);ift=r(iL,"The model class to instantiate is selected based on the "),uLe=n(iL,"CODE",{});var Lra=s(uLe);dft=r(Lra,"model_type"),Lra.forEach(t),cft=r(iL,` property of the config object (either
passed as an argument or loaded from `),bLe=n(iL,"CODE",{});var yra=s(bLe);fft=r(yra,"pretrained_model_name_or_path"),yra.forEach(t),mft=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vLe=n(iL,"CODE",{});var xra=s(vLe);gft=r(xra,"pretrained_model_name_or_path"),xra.forEach(t),hft=r(iL,":"),iL.forEach(t),pft=i(Gi),FLe=n(Gi,"UL",{});var $ra=s(FLe);N0=n($ra,"LI",{});var jQe=s(N0);TLe=n(jQe,"STRONG",{});var kra=s(TLe);_ft=r(kra,"vision-encoder-decoder"),kra.forEach(t),uft=r(jQe," \u2014 "),qae=n(jQe,"A",{href:!0});var Sra=s(qae);bft=r(Sra,"FlaxVisionEncoderDecoderModel"),Sra.forEach(t),vft=r(jQe," (Vision Encoder decoder model)"),jQe.forEach(t),$ra.forEach(t),Fft=i(Gi),T(q0.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Oaa)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Xn,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertModel"),c(am,"id","extending-the-auto-classes"),c(am,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(am,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(sm,"id","transformers.AutoConfig"),c(sm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sm,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(dP,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(cP,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertConfig"),c(fP,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartConfig"),c(mP,"href","/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitConfig"),c(gP,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertConfig"),c(hP,"href","/docs/transformers/pr_18697/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(pP,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdConfig"),c(_P,"href","/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(uP,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(bP,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(vP,"href","/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomConfig"),c(FP,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertConfig"),c(TP,"href","/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineConfig"),c(MP,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPConfig"),c(EP,"href","/docs/transformers/pr_18697/en/model_doc/codegen#transformers.CodeGenConfig"),c(CP,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertConfig"),c(wP,"href","/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextConfig"),c(AP,"href","/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLConfig"),c(LP,"href","/docs/transformers/pr_18697/en/model_doc/cvt#transformers.CvtConfig"),c(yP,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(xP,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c($P,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(kP,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaConfig"),c(SP,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(RP,"href","/docs/transformers/pr_18697/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(PP,"href","/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTConfig"),c(BP,"href","/docs/transformers/pr_18697/en/model_doc/detr#transformers.DetrConfig"),c(IP,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertConfig"),c(NP,"href","/docs/transformers/pr_18697/en/model_doc/donut#transformers.DonutSwinConfig"),c(qP,"href","/docs/transformers/pr_18697/en/model_doc/dpr#transformers.DPRConfig"),c(jP,"href","/docs/transformers/pr_18697/en/model_doc/dpt#transformers.DPTConfig"),c(DP,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraConfig"),c(GP,"href","/docs/transformers/pr_18697/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(OP,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertConfig"),c(VP,"href","/docs/transformers/pr_18697/en/model_doc/flava#transformers.FlavaConfig"),c(XP,"href","/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetConfig"),c(zP,"href","/docs/transformers/pr_18697/en/model_doc/fsmt#transformers.FSMTConfig"),c(WP,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelConfig"),c(QP,"href","/docs/transformers/pr_18697/en/model_doc/glpn#transformers.GLPNConfig"),c(UP,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Config"),c(HP,"href","/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(JP,"href","/docs/transformers/pr_18697/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(YP,"href","/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJConfig"),c(KP,"href","/docs/transformers/pr_18697/en/model_doc/groupvit#transformers.GroupViTConfig"),c(ZP,"href","/docs/transformers/pr_18697/en/model_doc/hubert#transformers.HubertConfig"),c(eB,"href","/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertConfig"),c(oB,"href","/docs/transformers/pr_18697/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(rB,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(tB,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(aB,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(nB,"href","/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDConfig"),c(sB,"href","/docs/transformers/pr_18697/en/model_doc/levit#transformers.LevitConfig"),c(lB,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerConfig"),c(iB,"href","/docs/transformers/pr_18697/en/model_doc/longt5#transformers.LongT5Config"),c(dB,"href","/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeConfig"),c(cB,"href","/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertConfig"),c(fB,"href","/docs/transformers/pr_18697/en/model_doc/m2m_100#transformers.M2M100Config"),c(mB,"href","/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianConfig"),c(gB,"href","/docs/transformers/pr_18697/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(hB,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartConfig"),c(pB,"href","/docs/transformers/pr_18697/en/model_doc/mctct#transformers.MCTCTConfig"),c(_B,"href","/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(uB,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(bB,"href","/docs/transformers/pr_18697/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(vB,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetConfig"),c(FB,"href","/docs/transformers/pr_18697/en/model_doc/mt5#transformers.MT5Config"),c(TB,"href","/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpConfig"),c(MB,"href","/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaConfig"),c(EB,"href","/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(CB,"href","/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(wB,"href","/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTConfig"),c(AB,"href","/docs/transformers/pr_18697/en/model_doc/owlvit#transformers.OwlViTConfig"),c(LB,"href","/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusConfig"),c(yB,"href","/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverConfig"),c(xB,"href","/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartConfig"),c($B,"href","/docs/transformers/pr_18697/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(kB,"href","/docs/transformers/pr_18697/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(SB,"href","/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(RB,"href","/docs/transformers/pr_18697/en/model_doc/rag#transformers.RagConfig"),c(PB,"href","/docs/transformers/pr_18697/en/model_doc/realm#transformers.RealmConfig"),c(BB,"href","/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerConfig"),c(IB,"href","/docs/transformers/pr_18697/en/model_doc/regnet#transformers.RegNetConfig"),c(NB,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertConfig"),c(qB,"href","/docs/transformers/pr_18697/en/model_doc/resnet#transformers.ResNetConfig"),c(jB,"href","/docs/transformers/pr_18697/en/model_doc/retribert#transformers.RetriBertConfig"),c(DB,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaConfig"),c(GB,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerConfig"),c(OB,"href","/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerConfig"),c(VB,"href","/docs/transformers/pr_18697/en/model_doc/sew#transformers.SEWConfig"),c(XB,"href","/docs/transformers/pr_18697/en/model_doc/sew-d#transformers.SEWDConfig"),c(zB,"href","/docs/transformers/pr_18697/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(WB,"href","/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(QB,"href","/docs/transformers/pr_18697/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(UB,"href","/docs/transformers/pr_18697/en/model_doc/splinter#transformers.SplinterConfig"),c(HB,"href","/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(JB,"href","/docs/transformers/pr_18697/en/model_doc/swin#transformers.SwinConfig"),c(YB,"href","/docs/transformers/pr_18697/en/model_doc/swinv2#transformers.Swinv2Config"),c(KB,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Config"),c(ZB,"href","/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasConfig"),c(eI,"href","/docs/transformers/pr_18697/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(oI,"href","/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(rI,"href","/docs/transformers/pr_18697/en/model_doc/trocr#transformers.TrOCRConfig"),c(tI,"href","/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(aI,"href","/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(nI,"href","/docs/transformers/pr_18697/en/model_doc/van#transformers.VanConfig"),c(sI,"href","/docs/transformers/pr_18697/en/model_doc/videomae#transformers.VideoMAEConfig"),c(lI,"href","/docs/transformers/pr_18697/en/model_doc/vilt#transformers.ViltConfig"),c(iI,"href","/docs/transformers/pr_18697/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(dI,"href","/docs/transformers/pr_18697/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(cI,"href","/docs/transformers/pr_18697/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(fI,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTConfig"),c(mI,"href","/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(gI,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(hI,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(pI,"href","/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMConfig"),c(_I,"href","/docs/transformers/pr_18697/en/model_doc/xglm#transformers.XGLMConfig"),c(uI,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMConfig"),c(bI,"href","/docs/transformers/pr_18697/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(vI,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(FI,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(TI,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetConfig"),c(MI,"href","/docs/transformers/pr_18697/en/model_doc/yolos#transformers.YolosConfig"),c(EI,"href","/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoTokenizer"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c(CI,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(wI,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertTokenizer"),c(AI,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(LI,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartTokenizer"),c(yI,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartTokenizerFast"),c(xI,"href","/docs/transformers/pr_18697/en/model_doc/barthez#transformers.BarthezTokenizer"),c($I,"href","/docs/transformers/pr_18697/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(kI,"href","/docs/transformers/pr_18697/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(SI,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertTokenizer"),c(RI,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertTokenizerFast"),c(PI,"href","/docs/transformers/pr_18697/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(BI,"href","/docs/transformers/pr_18697/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(II,"href","/docs/transformers/pr_18697/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(NI,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(qI,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(jI,"href","/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(DI,"href","/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(GI,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(OI,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(VI,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(XI,"href","/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(zI,"href","/docs/transformers/pr_18697/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(WI,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertTokenizer"),c(QI,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(UI,"href","/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineTokenizer"),c(HI,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPTokenizer"),c(JI,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(YI,"href","/docs/transformers/pr_18697/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(KI,"href","/docs/transformers/pr_18697/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(ZI,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(eN,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(oN,"href","/docs/transformers/pr_18697/en/model_doc/cpm#transformers.CpmTokenizer"),c(rN,"href","/docs/transformers/pr_18697/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(tN,"href","/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(aN,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nN,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sN,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaTokenizer"),c(lN,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(iN,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(dN,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(cN,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(fN,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(mN,"href","/docs/transformers/pr_18697/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(gN,"href","/docs/transformers/pr_18697/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(hN,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraTokenizer"),c(pN,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(_N,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(uN,"href","/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetTokenizer"),c(bN,"href","/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(vN,"href","/docs/transformers/pr_18697/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(FN,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelTokenizer"),c(TN,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(MN,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EN,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CN,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wN,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AN,"href","/docs/transformers/pr_18697/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(LN,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yN,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xN,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPTokenizer"),c($N,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(kN,"href","/docs/transformers/pr_18697/en/model_doc/herbert#transformers.HerbertTokenizer"),c(SN,"href","/docs/transformers/pr_18697/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(RN,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PN,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BN,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IN,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(NN,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(qN,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(jN,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(DN,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(GN,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(ON,"href","/docs/transformers/pr_18697/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(VN,"href","/docs/transformers/pr_18697/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(XN,"href","/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDTokenizer"),c(zN,"href","/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDTokenizerFast"),c(WN,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerTokenizer"),c(QN,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(UN,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Tokenizer"),c(HN,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5TokenizerFast"),c(JN,"href","/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeTokenizer"),c(YN,"href","/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(KN,"href","/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(ZN,"href","/docs/transformers/pr_18697/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(eq,"href","/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianTokenizer"),c(oq,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartTokenizer"),c(rq,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(tq,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(aq,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(nq,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertTokenizer"),c(sq,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertTokenizerFast"),c(lq,"href","/docs/transformers/pr_18697/en/model_doc/mluke#transformers.MLukeTokenizer"),c(iq,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(dq,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(cq,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(fq,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(mq,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Tokenizer"),c(gq,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5TokenizerFast"),c(hq,"href","/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpTokenizer"),c(pq,"href","/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(_q,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertTokenizer"),c(uq,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertTokenizerFast"),c(bq,"href","/docs/transformers/pr_18697/en/model_doc/nllb#transformers.NllbTokenizer"),c(vq,"href","/docs/transformers/pr_18697/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Fq,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertTokenizer"),c(Tq,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Mq,"href","/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Eq,"href","/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Cq,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wq,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPTokenizer"),c(Aq,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Lq,"href","/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(yq,"href","/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(xq,"href","/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c($q,"href","/docs/transformers/pr_18697/en/model_doc/phobert#transformers.PhobertTokenizer"),c(kq,"href","/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Sq,"href","/docs/transformers/pr_18697/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Rq,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertTokenizer"),c(Pq,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertTokenizerFast"),c(Bq,"href","/docs/transformers/pr_18697/en/model_doc/rag#transformers.RagTokenizer"),c(Iq,"href","/docs/transformers/pr_18697/en/model_doc/realm#transformers.RealmTokenizer"),c(Nq,"href","/docs/transformers/pr_18697/en/model_doc/realm#transformers.RealmTokenizerFast"),c(qq,"href","/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerTokenizer"),c(jq,"href","/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Dq,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Gq,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Oq,"href","/docs/transformers/pr_18697/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Vq,"href","/docs/transformers/pr_18697/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Xq,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zq,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Wq,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Qq,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Uq,"href","/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Hq,"href","/docs/transformers/pr_18697/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Jq,"href","/docs/transformers/pr_18697/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Yq,"href","/docs/transformers/pr_18697/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Kq,"href","/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Zq,"href","/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(ej,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Tokenizer"),c(oj,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5TokenizerFast"),c(rj,"href","/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasTokenizer"),c(tj,"href","/docs/transformers/pr_18697/en/model_doc/tapex#transformers.TapexTokenizer"),c(aj,"href","/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(nj,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertTokenizer"),c(sj,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertTokenizerFast"),c(lj,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertTokenizer"),c(ij,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertTokenizerFast"),c(dj,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cj,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fj,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(mj,"href","/docs/transformers/pr_18697/en/model_doc/xglm#transformers.XGLMTokenizer"),c(gj,"href","/docs/transformers/pr_18697/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(hj,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMTokenizer"),c(pj,"href","/docs/transformers/pr_18697/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(_j,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(uj,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(bj,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vj,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Fj,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Tj,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Mj,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertTokenizer"),c(Ej,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoFeatureExtractor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c(Cj,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(wj,"href","/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Aj,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Lj,"href","/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yj,"href","/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xj,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($j,"href","/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(kj,"href","/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Sj,"href","/docs/transformers/pr_18697/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Rj,"href","/docs/transformers/pr_18697/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(Pj,"href","/docs/transformers/pr_18697/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(Bj,"href","/docs/transformers/pr_18697/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(Ij,"href","/docs/transformers/pr_18697/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(Nj,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(qj,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jj,"href","/docs/transformers/pr_18697/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Dj,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Gj,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Oj,"href","/docs/transformers/pr_18697/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Vj,"href","/docs/transformers/pr_18697/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Xj,"href","/docs/transformers/pr_18697/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(zj,"href","/docs/transformers/pr_18697/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Wj,"href","/docs/transformers/pr_18697/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Qj,"href","/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Uj,"href","/docs/transformers/pr_18697/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Hj,"href","/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Jj,"href","/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eD,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oD,"href","/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rD,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tD,"href","/docs/transformers/pr_18697/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(aD,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nD,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sD,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lD,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iD,"href","/docs/transformers/pr_18697/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qp,"id","transformers.AutoProcessor"),c(Qp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qp,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(dD,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(cD,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPProcessor"),c(fD,"href","/docs/transformers/pr_18697/en/model_doc/donut#transformers.DonutProcessor"),c(mD,"href","/docs/transformers/pr_18697/en/model_doc/flava#transformers.FlavaProcessor"),c(gD,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPProcessor"),c(hD,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(pD,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(_D,"href","/docs/transformers/pr_18697/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(uD,"href","/docs/transformers/pr_18697/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(bD,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vD,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FD,"href","/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(TD,"href","/docs/transformers/pr_18697/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(MD,"href","/docs/transformers/pr_18697/en/model_doc/trocr#transformers.TrOCRProcessor"),c(ED,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CD,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wD,"href","/docs/transformers/pr_18697/en/model_doc/vilt#transformers.ViltProcessor"),c(AD,"href","/docs/transformers/pr_18697/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(LD,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yD,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xD,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(__,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u_,"id","transformers.AutoModel"),c(u_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u_,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c($D,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kD,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SD,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RD,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertModel"),c(PD,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartModel"),c(BD,"href","/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitModel"),c(ID,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertModel"),c(ND,"href","/docs/transformers/pr_18697/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(qD,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdModel"),c(jD,"href","/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(DD,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(GD,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(OD,"href","/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomModel"),c(VD,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertModel"),c(XD,"href","/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineModel"),c(zD,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.CLIPModel"),c(WD,"href","/docs/transformers/pr_18697/en/model_doc/codegen#transformers.CodeGenModel"),c(QD,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertModel"),c(UD,"href","/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextModel"),c(HD,"href","/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLModel"),c(JD,"href","/docs/transformers/pr_18697/en/model_doc/cvt#transformers.CvtModel"),c(YD,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(KD,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(ZD,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(eG,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaModel"),c(oG,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(rG,"href","/docs/transformers/pr_18697/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(tG,"href","/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTModel"),c(aG,"href","/docs/transformers/pr_18697/en/model_doc/detr#transformers.DetrModel"),c(nG,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertModel"),c(sG,"href","/docs/transformers/pr_18697/en/model_doc/donut#transformers.DonutSwinModel"),c(lG,"href","/docs/transformers/pr_18697/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(iG,"href","/docs/transformers/pr_18697/en/model_doc/dpt#transformers.DPTModel"),c(dG,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraModel"),c(cG,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertModel"),c(fG,"href","/docs/transformers/pr_18697/en/model_doc/flava#transformers.FlavaModel"),c(mG,"href","/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetModel"),c(gG,"href","/docs/transformers/pr_18697/en/model_doc/fsmt#transformers.FSMTModel"),c(hG,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelModel"),c(pG,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelBaseModel"),c(_G,"href","/docs/transformers/pr_18697/en/model_doc/glpn#transformers.GLPNModel"),c(uG,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2Model"),c(bG,"href","/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(vG,"href","/docs/transformers/pr_18697/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(FG,"href","/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJModel"),c(TG,"href","/docs/transformers/pr_18697/en/model_doc/groupvit#transformers.GroupViTModel"),c(MG,"href","/docs/transformers/pr_18697/en/model_doc/hubert#transformers.HubertModel"),c(EG,"href","/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertModel"),c(CG,"href","/docs/transformers/pr_18697/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(wG,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(AG,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(LG,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(yG,"href","/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDModel"),c(xG,"href","/docs/transformers/pr_18697/en/model_doc/levit#transformers.LevitModel"),c($G,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerModel"),c(kG,"href","/docs/transformers/pr_18697/en/model_doc/longt5#transformers.LongT5Model"),c(SG,"href","/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeModel"),c(RG,"href","/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertModel"),c(PG,"href","/docs/transformers/pr_18697/en/model_doc/m2m_100#transformers.M2M100Model"),c(BG,"href","/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianModel"),c(IG,"href","/docs/transformers/pr_18697/en/model_doc/maskformer#transformers.MaskFormerModel"),c(NG,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartModel"),c(qG,"href","/docs/transformers/pr_18697/en/model_doc/mctct#transformers.MCTCTModel"),c(jG,"href","/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(DG,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertModel"),c(GG,"href","/docs/transformers/pr_18697/en/model_doc/mobilevit#transformers.MobileViTModel"),c(OG,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetModel"),c(VG,"href","/docs/transformers/pr_18697/en/model_doc/mt5#transformers.MT5Model"),c(XG,"href","/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpModel"),c(zG,"href","/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaModel"),c(WG,"href","/docs/transformers/pr_18697/en/model_doc/m2m_100#transformers.M2M100Model"),c(QG,"href","/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerModel"),c(UG,"href","/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(HG,"href","/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTModel"),c(JG,"href","/docs/transformers/pr_18697/en/model_doc/owlvit#transformers.OwlViTModel"),c(YG,"href","/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusModel"),c(KG,"href","/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverModel"),c(ZG,"href","/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartModel"),c(eO,"href","/docs/transformers/pr_18697/en/model_doc/poolformer#transformers.PoolFormerModel"),c(oO,"href","/docs/transformers/pr_18697/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(rO,"href","/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertModel"),c(tO,"href","/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerModel"),c(aO,"href","/docs/transformers/pr_18697/en/model_doc/regnet#transformers.RegNetModel"),c(nO,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertModel"),c(sO,"href","/docs/transformers/pr_18697/en/model_doc/resnet#transformers.ResNetModel"),c(lO,"href","/docs/transformers/pr_18697/en/model_doc/retribert#transformers.RetriBertModel"),c(iO,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaModel"),c(dO,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerModel"),c(cO,"href","/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerModel"),c(fO,"href","/docs/transformers/pr_18697/en/model_doc/sew#transformers.SEWModel"),c(mO,"href","/docs/transformers/pr_18697/en/model_doc/sew-d#transformers.SEWDModel"),c(gO,"href","/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(hO,"href","/docs/transformers/pr_18697/en/model_doc/splinter#transformers.SplinterModel"),c(pO,"href","/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_O,"href","/docs/transformers/pr_18697/en/model_doc/swin#transformers.SwinModel"),c(uO,"href","/docs/transformers/pr_18697/en/model_doc/swinv2#transformers.Swinv2Model"),c(bO,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5Model"),c(vO,"href","/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasModel"),c(FO,"href","/docs/transformers/pr_18697/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(TO,"href","/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(MO,"href","/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechModel"),c(EO,"href","/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(CO,"href","/docs/transformers/pr_18697/en/model_doc/van#transformers.VanModel"),c(wO,"href","/docs/transformers/pr_18697/en/model_doc/videomae#transformers.VideoMAEModel"),c(AO,"href","/docs/transformers/pr_18697/en/model_doc/vilt#transformers.ViltModel"),c(LO,"href","/docs/transformers/pr_18697/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(yO,"href","/docs/transformers/pr_18697/en/model_doc/visual_bert#transformers.VisualBertModel"),c(xO,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTModel"),c($O,"href","/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(kO,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(SO,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(RO,"href","/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMModel"),c(PO,"href","/docs/transformers/pr_18697/en/model_doc/xglm#transformers.XGLMModel"),c(BO,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMModel"),c(IO,"href","/docs/transformers/pr_18697/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(NO,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(qO,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(jO,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetModel"),c(DO,"href","/docs/transformers/pr_18697/en/model_doc/yolos#transformers.YolosModel"),c(GO,"href","/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y1,"id","transformers.AutoModelForPreTraining"),c(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y1,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(OO,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VO,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XO,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zO,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertForPreTraining"),c(WO,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForPreTraining"),c(UO,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(HO,"href","/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomForCausalLM"),c(JO,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(YO,"href","/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(KO,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ZO,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(eV,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(oV,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(rV,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForPreTraining"),c(tV,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(aV,"href","/docs/transformers/pr_18697/en/model_doc/flava#transformers.FlavaForPreTraining"),c(nV,"href","/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForPreTraining"),c(sV,"href","/docs/transformers/pr_18697/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(iV,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(dV,"href","/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(cV,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(fV,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(mV,"href","/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeForMaskedLM"),c(gV,"href","/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(hV,"href","/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(pV,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(_V,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(uV,"href","/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(bV,"href","/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(vV,"href","/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(FV,"href","/docs/transformers/pr_18697/en/model_doc/retribert#transformers.RetriBertModel"),c(TV,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(MV,"href","/docs/transformers/pr_18697/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(EV,"href","/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(CV,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(wV,"href","/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AV,"href","/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(LV,"href","/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(yV,"href","/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(xV,"href","/docs/transformers/pr_18697/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c($V,"href","/docs/transformers/pr_18697/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(kV,"href","/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(SV,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(RV,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(PV,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(BV,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(IV,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(NV,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w2,"id","transformers.AutoModelForCausalLM"),c(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w2,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c(qV,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartForCausalLM"),c(OV,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertLMHeadModel"),c(VV,"href","/docs/transformers/pr_18697/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(XV,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(zV,"href","/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(WV,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(QV,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(UV,"href","/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomForCausalLM"),c(HV,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(JV,"href","/docs/transformers/pr_18697/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(YV,"href","/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(KV,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(ZV,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForCausalLM"),c(eX,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(oX,"href","/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(rX,"href","/docs/transformers/pr_18697/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(tX,"href","/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(aX,"href","/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianForCausalLM"),c(nX,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartForCausalLM"),c(sX,"href","/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(lX,"href","/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpForCausalLM"),c(iX,"href","/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(dX,"href","/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTForCausalLM"),c(cX,"href","/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(fX,"href","/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(mX,"href","/docs/transformers/pr_18697/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(gX,"href","/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(hX,"href","/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(pX,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(_X,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(uX,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(bX,"href","/docs/transformers/pr_18697/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(vX,"href","/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(FX,"href","/docs/transformers/pr_18697/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(TX,"href","/docs/transformers/pr_18697/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(MX,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(EX,"href","/docs/transformers/pr_18697/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(CX,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(wX,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(AX,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pb,"id","transformers.AutoModelForMaskedLM"),c(pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pb,"href","#transformers.AutoModelForMaskedLM"),c(fd,"class","relative group"),c(LX,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xX,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($X,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(kX,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SX,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForMaskedLM"),c(RX,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(PX,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(BX,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(IX,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(NX,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(qX,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jX,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(DX,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(GX,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(OX,"href","/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(VX,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(XX,"href","/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(zX,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(WX,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(QX,"href","/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeForMaskedLM"),c(UX,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(HX,"href","/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(JX,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(YX,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(KX,"href","/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(ZX,"href","/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(ez,"href","/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(oz,"href","/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(rz,"href","/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(tz,"href","/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(az,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(nz,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sz,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(lz,"href","/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iz,"href","/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dz,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cz,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(fz,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(mz,"href","/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tv,"id","transformers.AutoModelForSeq2SeqLM"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(gz,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uz,"href","/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(bz,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(vz,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_18697/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Tz,"href","/docs/transformers/pr_18697/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Mz,"href","/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Ez,"href","/docs/transformers/pr_18697/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(Cz,"href","/docs/transformers/pr_18697/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(wz,"href","/docs/transformers/pr_18697/en/model_doc/marian#transformers.MarianMTModel"),c(Az,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Lz,"href","/docs/transformers/pr_18697/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(yz,"href","/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(xz,"href","/docs/transformers/pr_18697/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c($z,"href","/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(kz,"href","/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Sz,"href","/docs/transformers/pr_18697/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Rz,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_18697/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForSequenceClassification"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForSequenceClassification"),c(ud,"class","relative group"),c(Bz,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(jz,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Dz,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Gz,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Oz,"href","/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Vz,"href","/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(Xz,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(zz,"href","/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Wz,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Qz,"href","/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Uz,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Hz,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Jz,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Yz,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Kz,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Zz,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(eW,"href","/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(oW,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(rW,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(tW,"href","/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(aW,"href","/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(nW,"href","/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(sW,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(lW,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(iW,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(dW,"href","/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDForSequenceClassification"),c(cW,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(fW,"href","/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(mW,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(gW,"href","/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(hW,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(pW,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(_W,"href","/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(uW,"href","/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(bW,"href","/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(vW,"href","/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(FW,"href","/docs/transformers/pr_18697/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(TW,"href","/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(MW,"href","/docs/transformers/pr_18697/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(EW,"href","/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(CW,"href","/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(wW,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(AW,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(LW,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(yW,"href","/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c($W,"href","/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(kW,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(SW,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(RW,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(PW,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(BW,"href","/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y6,"id","transformers.AutoModelForMultipleChoice"),c(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y6,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(IW,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(DW,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForMultipleChoice"),c(GW,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(OW,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(VW,"href","/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(XW,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(zW,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(WW,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(QW,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(HW,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(JW,"href","/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(YW,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(KW,"href","/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(eQ,"href","/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(oQ,"href","/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(rQ,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(tQ,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(aQ,"href","/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(nQ,"href","/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(sQ,"href","/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(lQ,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(iQ,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(dQ,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(cQ,"href","/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(fQ,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(mQ,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(gQ,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(hQ,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(pQ,"href","/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForNextSentencePrediction"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(_Q,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(FQ,"href","/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(TQ,"href","/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(MQ,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(EQ,"href","/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(CQ,"href","/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForTokenClassification"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(wQ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LQ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yQ,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(xQ,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForTokenClassification"),c($Q,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(kQ,"href","/docs/transformers/pr_18697/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(SQ,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(RQ,"href","/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineForTokenClassification"),c(PQ,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(BQ,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(IQ,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(NQ,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(qQ,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(jQ,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(DQ,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(GQ,"href","/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(OQ,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(VQ,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(XQ,"href","/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(zQ,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(WQ,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(QQ,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(UQ,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(HQ,"href","/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeForTokenClassification"),c(JQ,"href","/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(YQ,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(KQ,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(ZQ,"href","/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(eU,"href","/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(oU,"href","/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(rU,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(tU,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(aU,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(nU,"href","/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(sU,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(lU,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(iU,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(dU,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(cU,"href","/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sT,"id","transformers.AutoModelForQuestionAnswering"),c(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sT,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(fU,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_18697/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_18697/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(yU,"href","/docs/transformers/pr_18697/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c($U,"href","/docs/transformers/pr_18697/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_18697/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_18697/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_18697/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_18697/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_18697/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_18697/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_18697/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_18697/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_18697/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_18697/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_18697/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_18697/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(ZU,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(rH,"href","/docs/transformers/pr_18697/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.AutoModelForTableQuestionAnswering"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(tH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.AutoModelForImageClassification"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(lH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitForImageClassification"),c(fH,"href","/docs/transformers/pr_18697/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(mH,"href","/docs/transformers/pr_18697/en/model_doc/cvt#transformers.CvtForImageClassification"),c(gH,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(hH,"href","/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTForImageClassification"),c(pH,"href","/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(_H,"href","/docs/transformers/pr_18697/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(uH,"href","/docs/transformers/pr_18697/en/model_doc/levit#transformers.LevitForImageClassification"),c(bH,"href","/docs/transformers/pr_18697/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(vH,"href","/docs/transformers/pr_18697/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(FH,"href","/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(TH,"href","/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(MH,"href","/docs/transformers/pr_18697/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(EH,"href","/docs/transformers/pr_18697/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(CH,"href","/docs/transformers/pr_18697/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(wH,"href","/docs/transformers/pr_18697/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(AH,"href","/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(LH,"href","/docs/transformers/pr_18697/en/model_doc/swin#transformers.SwinForImageClassification"),c(yH,"href","/docs/transformers/pr_18697/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(xH,"href","/docs/transformers/pr_18697/en/model_doc/van#transformers.VanForImageClassification"),c($H,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M7,"id","transformers.AutoModelForVideoClassification"),c(M7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M7,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(kH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_18697/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L7,"id","transformers.AutoModelForVision2Seq"),c(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L7,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(BH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_18697/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.AutoModelForVisualQuestionAnswering"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(jH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_18697/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N7,"id","transformers.AutoModelForAudioClassification"),c(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N7,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(VH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(QH,"href","/docs/transformers/pr_18697/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(UH,"href","/docs/transformers/pr_18697/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(HH,"href","/docs/transformers/pr_18697/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(JH,"href","/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(YH,"href","/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(KH,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J7,"id","transformers.AutoModelForAudioFrameClassification"),c(J7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J7,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(oJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(nJ,"href","/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(sJ,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(lJ,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(iJ,"href","/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n8,"id","transformers.AutoModelForCTC"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(dJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(gJ,"href","/docs/transformers/pr_18697/en/model_doc/hubert#transformers.HubertForCTC"),c(hJ,"href","/docs/transformers/pr_18697/en/model_doc/mctct#transformers.MCTCTForCTC"),c(pJ,"href","/docs/transformers/pr_18697/en/model_doc/sew#transformers.SEWForCTC"),c(_J,"href","/docs/transformers/pr_18697/en/model_doc/sew-d#transformers.SEWDForCTC"),c(uJ,"href","/docs/transformers/pr_18697/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(bJ,"href","/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(vJ,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(FJ,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(TJ,"href","/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMForCTC"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(v8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(MJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wJ,"href","/docs/transformers/pr_18697/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(AJ,"href","/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w8,"id","transformers.AutoModelForAudioXVector"),c(w8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w8,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c(LJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(kJ,"href","/docs/transformers/pr_18697/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(SJ,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(RJ,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(PJ,"href","/docs/transformers/pr_18697/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P8,"id","transformers.AutoModelForMaskedImageModeling"),c(P8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P8,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(BJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_18697/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(jJ,"href","/docs/transformers/pr_18697/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(DJ,"href","/docs/transformers/pr_18697/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(GJ,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O8,"id","transformers.AutoModelForObjectDetection"),c(O8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O8,"href","#transformers.AutoModelForObjectDetection"),c(fc,"class","relative group"),c(OJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/pr_18697/en/model_doc/detr#transformers.DetrForObjectDetection"),c(WJ,"href","/docs/transformers/pr_18697/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U8,"id","transformers.AutoModelForImageSegmentation"),c(U8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U8,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(QJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_18697/en/model_doc/detr#transformers.DetrForSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z8,"id","transformers.AutoModelForSemanticSegmentation"),c(Z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z8,"href","#transformers.AutoModelForSemanticSegmentation"),c(uc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_18697/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(oY,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(rY,"href","/docs/transformers/pr_18697/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(tY,"href","/docs/transformers/pr_18697/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(aY,"href","/docs/transformers/pr_18697/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i9,"id","transformers.AutoModelForInstanceSegmentation"),c(i9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i9,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(nY,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/pr_18697/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g9,"id","transformers.TFAutoModel"),c(g9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g9,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(dY,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertModel"),c(gY,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.TFBartModel"),c(hY,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertModel"),c(pY,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(_Y,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(uY,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertModel"),c(bY,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.TFCLIPModel"),c(vY,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.TFConvBertModel"),c(FY,"href","/docs/transformers/pr_18697/en/model_doc/convnext#transformers.TFConvNextModel"),c(TY,"href","/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.TFCTRLModel"),c(MY,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(EY,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.TFDebertaModel"),c(CY,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(wY,"href","/docs/transformers/pr_18697/en/model_doc/deit#transformers.TFDeiTModel"),c(AY,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(LY,"href","/docs/transformers/pr_18697/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(yY,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraModel"),c(xY,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertModel"),c($Y,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelModel"),c(kY,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(SY,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.TFGPT2Model"),c(RY,"href","/docs/transformers/pr_18697/en/model_doc/gptj#transformers.TFGPTJModel"),c(PY,"href","/docs/transformers/pr_18697/en/model_doc/hubert#transformers.TFHubertModel"),c(BY,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(IY,"href","/docs/transformers/pr_18697/en/model_doc/led#transformers.TFLEDModel"),c(NY,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.TFLongformerModel"),c(qY,"href","/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.TFLxmertModel"),c(jY,"href","/docs/transformers/pr_18697/en/model_doc/marian#transformers.TFMarianModel"),c(DY,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.TFMBartModel"),c(GY,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(OY,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetModel"),c(VY,"href","/docs/transformers/pr_18697/en/model_doc/mt5#transformers.TFMT5Model"),c(XY,"href","/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(zY,"href","/docs/transformers/pr_18697/en/model_doc/opt#transformers.TFOPTModel"),c(WY,"href","/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.TFPegasusModel"),c(QY,"href","/docs/transformers/pr_18697/en/model_doc/regnet#transformers.TFRegNetModel"),c(UY,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertModel"),c(HY,"href","/docs/transformers/pr_18697/en/model_doc/resnet#transformers.TFResNetModel"),c(JY,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaModel"),c(YY,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerModel"),c(KY,"href","/docs/transformers/pr_18697/en/model_doc/segformer#transformers.TFSegformerModel"),c(ZY,"href","/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(eK,"href","/docs/transformers/pr_18697/en/model_doc/swin#transformers.TFSwinModel"),c(oK,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.TFT5Model"),c(rK,"href","/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TFTapasModel"),c(tK,"href","/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(aK,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.TFViTModel"),c(nK,"href","/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(sK,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(lK,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMModel"),c(iK,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(dK,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mM,"id","transformers.TFAutoModelForPreTraining"),c(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mM,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(cK,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(hK,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(pK,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForPreTraining"),c(_K,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uK,"href","/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(bK,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(vK,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(FK,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(TK,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(MK,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(EK,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(CK,"href","/docs/transformers/pr_18697/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(wK,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(AK,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LK,"href","/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(yK,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(xK,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($K,"href","/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(kK,"href","/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(SK,"href","/docs/transformers/pr_18697/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(RK,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(PK,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(BK,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qM,"id","transformers.TFAutoModelForCausalLM"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(IK,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(DK,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(GK,"href","/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(OK,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(VK,"href","/docs/transformers/pr_18697/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(XK,"href","/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(zK,"href","/docs/transformers/pr_18697/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(WK,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(QK,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(UK,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(HK,"href","/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JK,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YK,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.TFAutoModelForImageClassification"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(KK,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_18697/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(rZ,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(tZ,"href","/docs/transformers/pr_18697/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(aZ,"href","/docs/transformers/pr_18697/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(nZ,"href","/docs/transformers/pr_18697/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(sZ,"href","/docs/transformers/pr_18697/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(lZ,"href","/docs/transformers/pr_18697/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(iZ,"href","/docs/transformers/pr_18697/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(dZ,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForSemanticSegmentation"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c(cZ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mZ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gZ,"href","/docs/transformers/pr_18697/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(hZ,"href","/docs/transformers/pr_18697/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForMaskedLM"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForMaskedLM"),c(qc,"class","relative group"),c(pZ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(vZ,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(FZ,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(TZ,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(MZ,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(EZ,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(CZ,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(AZ,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(LZ,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(yZ,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xZ,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c($Z,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(kZ,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SZ,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(RZ,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PZ,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(BZ,"href","/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IZ,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NZ,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(qZ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jZ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DZ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GZ,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(VZ,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_18697/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(zZ,"href","/docs/transformers/pr_18697/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_18697/en/model_doc/marian#transformers.TFMarianMTModel"),c(QZ,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_18697/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForSequenceClassification"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(YZ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KZ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZZ,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eee,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(oee,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(ree,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(tee,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(aee,"href","/docs/transformers/pr_18697/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(nee,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(see,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(lee,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(iee,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(dee,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(cee,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(fee,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(mee,"href","/docs/transformers/pr_18697/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(gee,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(hee,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(pee,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(uee,"href","/docs/transformers/pr_18697/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(bee,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(vee,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Fee,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Tee,"href","/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Mee,"href","/docs/transformers/pr_18697/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Eee,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Cee,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(wee,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForMultipleChoice"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Qc,"class","relative group"),c(Aee,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lee,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yee,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xee,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c($ee,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(kee,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(See,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Ree,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(qee,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(jee,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(zee,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Jc,"class","relative group"),c(Wee,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qee,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uee,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Jee,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Zc,"class","relative group"),c(Yee,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kee,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zee,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eoe,"href","/docs/transformers/pr_18697/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.TFAutoModelForTokenClassification"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.TFAutoModelForTokenClassification"),c(rf,"class","relative group"),c(ooe,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(roe,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(toe,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aoe,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(noe,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(soe,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(loe,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(ioe,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(doe,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(coe,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(foe,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(moe,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(goe,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(hoe,"href","/docs/transformers/pr_18697/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(poe,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(_oe,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(uoe,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(boe,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(voe,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Foe,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Toe,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Moe,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Eoe,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.TFAutoModelForQuestionAnswering"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(Coe,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(woe,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aoe,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Loe,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(yoe,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(xoe,"href","/docs/transformers/pr_18697/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c($oe,"href","/docs/transformers/pr_18697/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(koe,"href","/docs/transformers/pr_18697/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Soe,"href","/docs/transformers/pr_18697/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Roe,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_18697/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Ioe,"href","/docs/transformers/pr_18697/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_18697/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_18697/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_18697/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_18697/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_18697/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_18697/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(zoe,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_18697/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.TFAutoModelForVision2Seq"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.TFAutoModelForVision2Seq"),c(df,"class","relative group"),c(Qoe,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uoe,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hoe,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Joe,"href","/docs/transformers/pr_18697/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(mf,"class","relative group"),c(Yoe,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zoe,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ere,"href","/docs/transformers/pr_18697/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.FlaxAutoModel"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.FlaxAutoModel"),c(pf,"class","relative group"),c(ore,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rre,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tre,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(are,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertModel"),c(nre,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartModel"),c(sre,"href","/docs/transformers/pr_18697/en/model_doc/beit#transformers.FlaxBeitModel"),c(lre,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertModel"),c(ire,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(dre,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(cre,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(fre,"href","/docs/transformers/pr_18697/en/model_doc/clip#transformers.FlaxCLIPModel"),c(mre,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(gre,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraModel"),c(hre,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(pre,"href","/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(_re,"href","/docs/transformers/pr_18697/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(ure,"href","/docs/transformers/pr_18697/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(bre,"href","/docs/transformers/pr_18697/en/model_doc/marian#transformers.FlaxMarianModel"),c(vre,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Fre,"href","/docs/transformers/pr_18697/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Tre,"href","/docs/transformers/pr_18697/en/model_doc/opt#transformers.FlaxOPTModel"),c(Mre,"href","/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Ere,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Cre,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(wre,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.FlaxT5Model"),c(Are,"href","/docs/transformers/pr_18697/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Lre,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.FlaxViTModel"),c(yre,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(xre,"href","/docs/transformers/pr_18697/en/model_doc/xglm#transformers.FlaxXGLMModel"),c($re,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.FlaxAutoModelForCausalLM"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.FlaxAutoModelForCausalLM"),c(bf,"class","relative group"),c(kre,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sre,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rre,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pre,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Bre,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Ire,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Nre,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(qre,"href","/docs/transformers/pr_18697/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(jre,"href","/docs/transformers/pr_18697/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Dre,"href","/docs/transformers/pr_18697/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Gre,"href","/docs/transformers/pr_18697/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Ore,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Vre,"href","/docs/transformers/pr_18697/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.FlaxAutoModelForPreTraining"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Tf,"class","relative group"),c(Xre,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zre,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wre,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qre,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Ure,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Hre,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Jre,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Yre,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Kre,"href","/docs/transformers/pr_18697/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Zre,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ete,"href","/docs/transformers/pr_18697/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ote,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(rte,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(tte,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ate,"href","/docs/transformers/pr_18697/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(nte,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.FlaxAutoModelForMaskedLM"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Cf,"class","relative group"),c(ste,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lte,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ite,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dte,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(cte,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(fte,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(mte,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(gte,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(hte,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(pte,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_te,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ute,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(bte,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lf,"class","relative group"),c(vte,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fte,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tte,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mte,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Ete,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Cte,"href","/docs/transformers/pr_18697/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(wte,"href","/docs/transformers/pr_18697/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Ate,"href","/docs/transformers/pr_18697/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Lte,"href","/docs/transformers/pr_18697/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(yte,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(xte,"href","/docs/transformers/pr_18697/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c($te,"href","/docs/transformers/pr_18697/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(kte,"href","/docs/transformers/pr_18697/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c($f,"class","relative group"),c(Ste,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rte,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pte,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bte,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ite,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Nte,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(qte,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(jte,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Dte,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Gte,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Ote,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Vte,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Xte,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Rf,"class","relative group"),c(zte,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wte,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qte,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ute,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Hte,"href","/docs/transformers/pr_18697/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Jte,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Yte,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Kte,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Zte,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(eae,"href","/docs/transformers/pr_18697/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(oae,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(rae,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(tae,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.FlaxAutoModelForTokenClassification"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(If,"class","relative group"),c(aae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lae,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(iae,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(dae,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(cae,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(fae,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(mae,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(gae,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(hae,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(p0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(jf,"class","relative group"),c(pae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_ae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bae,"href","/docs/transformers/pr_18697/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(vae,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Fae,"href","/docs/transformers/pr_18697/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Tae,"href","/docs/transformers/pr_18697/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Mae,"href","/docs/transformers/pr_18697/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Eae,"href","/docs/transformers/pr_18697/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Cae,"href","/docs/transformers/pr_18697/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(wae,"href","/docs/transformers/pr_18697/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Of,"class","relative group"),c(Aae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xae,"href","/docs/transformers/pr_18697/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.FlaxAutoModelForImageClassification"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.FlaxAutoModelForImageClassification"),c(zf,"class","relative group"),c($ae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rae,"href","/docs/transformers/pr_18697/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Pae,"href","/docs/transformers/pr_18697/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.FlaxAutoModelForVision2Seq"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uf,"class","relative group"),c(Bae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nae,"href","/docs/transformers/pr_18697/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qae,"href","/docs/transformers/pr_18697/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Ao),e(Ao,Oi),b(f,em,u),b(f,ft,u),e(ft,Vi),e(ft,Xi),e(Xi,dL),e(ft,om),b(f,Oe,u),b(f,Qe,u),e(Qe,zi),e(Qe,Xn),e(Xn,cL),e(Qe,zn),e(Qe,Wn),e(Wn,fL),e(Qe,Wi),e(Qe,Qn),e(Qn,mL),e(Qe,Qi),b(f,rm,u),M(ja,f,u),b(f,Ue,u),b(f,Ae,u),e(Ae,tP),e(Ae,Ui),e(Ui,aP),e(Ae,nP),b(f,Lo,u),b(f,Da,u),e(Da,sP),e(Da,tm),e(tm,lP),e(Da,cKe),b(f,DQe,u),b(f,Hi,u),e(Hi,am),e(am,Ise),M(gL,Ise,null),e(Hi,fKe),e(Hi,Nse),e(Nse,mKe),b(f,GQe,u),b(f,Un,u),e(Un,gKe),e(Un,qse),e(qse,hKe),e(Un,pKe),e(Un,jse),e(jse,_Ke),e(Un,uKe),b(f,OQe,u),M(hL,f,u),b(f,VQe,u),b(f,iP,u),e(iP,bKe),b(f,XQe,u),M(nm,f,u),b(f,zQe,u),b(f,Ji,u),e(Ji,sm),e(sm,Dse),M(pL,Dse,null),e(Ji,vKe),e(Ji,Gse),e(Gse,FKe),b(f,WQe,u),b(f,yo,u),M(_L,yo,null),e(yo,TKe),e(yo,uL),e(uL,MKe),e(uL,dP),e(dP,EKe),e(uL,CKe),e(yo,wKe),e(yo,bL),e(bL,AKe),e(bL,Ose),e(Ose,LKe),e(bL,yKe),e(yo,xKe),e(yo,kr),M(vL,kr,null),e(kr,$Ke),e(kr,Vse),e(Vse,kKe),e(kr,SKe),e(kr,Yi),e(Yi,RKe),e(Yi,Xse),e(Xse,PKe),e(Yi,BKe),e(Yi,zse),e(zse,IKe),e(Yi,NKe),e(kr,qKe),e(kr,A),e(A,lm),e(lm,Wse),e(Wse,jKe),e(lm,DKe),e(lm,cP),e(cP,GKe),e(lm,OKe),e(A,VKe),e(A,im),e(im,Qse),e(Qse,XKe),e(im,zKe),e(im,fP),e(fP,WKe),e(im,QKe),e(A,UKe),e(A,dm),e(dm,Use),e(Use,HKe),e(dm,JKe),e(dm,mP),e(mP,YKe),e(dm,KKe),e(A,ZKe),e(A,cm),e(cm,Hse),e(Hse,eZe),e(cm,oZe),e(cm,gP),e(gP,rZe),e(cm,tZe),e(A,aZe),e(A,fm),e(fm,Jse),e(Jse,nZe),e(fm,sZe),e(fm,hP),e(hP,lZe),e(fm,iZe),e(A,dZe),e(A,mm),e(mm,Yse),e(Yse,cZe),e(mm,fZe),e(mm,pP),e(pP,mZe),e(mm,gZe),e(A,hZe),e(A,gm),e(gm,Kse),e(Kse,pZe),e(gm,_Ze),e(gm,_P),e(_P,uZe),e(gm,bZe),e(A,vZe),e(A,hm),e(hm,Zse),e(Zse,FZe),e(hm,TZe),e(hm,uP),e(uP,MZe),e(hm,EZe),e(A,CZe),e(A,pm),e(pm,ele),e(ele,wZe),e(pm,AZe),e(pm,bP),e(bP,LZe),e(pm,yZe),e(A,xZe),e(A,_m),e(_m,ole),e(ole,$Ze),e(_m,kZe),e(_m,vP),e(vP,SZe),e(_m,RZe),e(A,PZe),e(A,um),e(um,rle),e(rle,BZe),e(um,IZe),e(um,FP),e(FP,NZe),e(um,qZe),e(A,jZe),e(A,bm),e(bm,tle),e(tle,DZe),e(bm,GZe),e(bm,TP),e(TP,OZe),e(bm,VZe),e(A,XZe),e(A,vm),e(vm,ale),e(ale,zZe),e(vm,WZe),e(vm,MP),e(MP,QZe),e(vm,UZe),e(A,HZe),e(A,Fm),e(Fm,nle),e(nle,JZe),e(Fm,YZe),e(Fm,EP),e(EP,KZe),e(Fm,ZZe),e(A,eeo),e(A,Tm),e(Tm,sle),e(sle,oeo),e(Tm,reo),e(Tm,CP),e(CP,teo),e(Tm,aeo),e(A,neo),e(A,Mm),e(Mm,lle),e(lle,seo),e(Mm,leo),e(Mm,wP),e(wP,ieo),e(Mm,deo),e(A,ceo),e(A,Em),e(Em,ile),e(ile,feo),e(Em,meo),e(Em,AP),e(AP,geo),e(Em,heo),e(A,peo),e(A,Cm),e(Cm,dle),e(dle,_eo),e(Cm,ueo),e(Cm,LP),e(LP,beo),e(Cm,veo),e(A,Feo),e(A,wm),e(wm,cle),e(cle,Teo),e(wm,Meo),e(wm,yP),e(yP,Eeo),e(wm,Ceo),e(A,weo),e(A,Am),e(Am,fle),e(fle,Aeo),e(Am,Leo),e(Am,xP),e(xP,yeo),e(Am,xeo),e(A,$eo),e(A,Lm),e(Lm,mle),e(mle,keo),e(Lm,Seo),e(Lm,$P),e($P,Reo),e(Lm,Peo),e(A,Beo),e(A,ym),e(ym,gle),e(gle,Ieo),e(ym,Neo),e(ym,kP),e(kP,qeo),e(ym,jeo),e(A,Deo),e(A,xm),e(xm,hle),e(hle,Geo),e(xm,Oeo),e(xm,SP),e(SP,Veo),e(xm,Xeo),e(A,zeo),e(A,$m),e($m,ple),e(ple,Weo),e($m,Qeo),e($m,RP),e(RP,Ueo),e($m,Heo),e(A,Jeo),e(A,km),e(km,_le),e(_le,Yeo),e(km,Keo),e(km,PP),e(PP,Zeo),e(km,eoo),e(A,ooo),e(A,Sm),e(Sm,ule),e(ule,roo),e(Sm,too),e(Sm,BP),e(BP,aoo),e(Sm,noo),e(A,soo),e(A,Rm),e(Rm,ble),e(ble,loo),e(Rm,ioo),e(Rm,IP),e(IP,doo),e(Rm,coo),e(A,foo),e(A,Pm),e(Pm,vle),e(vle,moo),e(Pm,goo),e(Pm,NP),e(NP,hoo),e(Pm,poo),e(A,_oo),e(A,Bm),e(Bm,Fle),e(Fle,uoo),e(Bm,boo),e(Bm,qP),e(qP,voo),e(Bm,Foo),e(A,Too),e(A,Im),e(Im,Tle),e(Tle,Moo),e(Im,Eoo),e(Im,jP),e(jP,Coo),e(Im,woo),e(A,Aoo),e(A,Nm),e(Nm,Mle),e(Mle,Loo),e(Nm,yoo),e(Nm,DP),e(DP,xoo),e(Nm,$oo),e(A,koo),e(A,qm),e(qm,Ele),e(Ele,Soo),e(qm,Roo),e(qm,GP),e(GP,Poo),e(qm,Boo),e(A,Ioo),e(A,jm),e(jm,Cle),e(Cle,Noo),e(jm,qoo),e(jm,OP),e(OP,joo),e(jm,Doo),e(A,Goo),e(A,Dm),e(Dm,wle),e(wle,Ooo),e(Dm,Voo),e(Dm,VP),e(VP,Xoo),e(Dm,zoo),e(A,Woo),e(A,Gm),e(Gm,Ale),e(Ale,Qoo),e(Gm,Uoo),e(Gm,XP),e(XP,Hoo),e(Gm,Joo),e(A,Yoo),e(A,Om),e(Om,Lle),e(Lle,Koo),e(Om,Zoo),e(Om,zP),e(zP,ero),e(Om,oro),e(A,rro),e(A,Vm),e(Vm,yle),e(yle,tro),e(Vm,aro),e(Vm,WP),e(WP,nro),e(Vm,sro),e(A,lro),e(A,Xm),e(Xm,xle),e(xle,iro),e(Xm,dro),e(Xm,QP),e(QP,cro),e(Xm,fro),e(A,mro),e(A,zm),e(zm,$le),e($le,gro),e(zm,hro),e(zm,UP),e(UP,pro),e(zm,_ro),e(A,uro),e(A,Wm),e(Wm,kle),e(kle,bro),e(Wm,vro),e(Wm,HP),e(HP,Fro),e(Wm,Tro),e(A,Mro),e(A,Qm),e(Qm,Sle),e(Sle,Ero),e(Qm,Cro),e(Qm,JP),e(JP,wro),e(Qm,Aro),e(A,Lro),e(A,Um),e(Um,Rle),e(Rle,yro),e(Um,xro),e(Um,YP),e(YP,$ro),e(Um,kro),e(A,Sro),e(A,Hm),e(Hm,Ple),e(Ple,Rro),e(Hm,Pro),e(Hm,KP),e(KP,Bro),e(Hm,Iro),e(A,Nro),e(A,Jm),e(Jm,Ble),e(Ble,qro),e(Jm,jro),e(Jm,ZP),e(ZP,Dro),e(Jm,Gro),e(A,Oro),e(A,Ym),e(Ym,Ile),e(Ile,Vro),e(Ym,Xro),e(Ym,eB),e(eB,zro),e(Ym,Wro),e(A,Qro),e(A,Km),e(Km,Nle),e(Nle,Uro),e(Km,Hro),e(Km,oB),e(oB,Jro),e(Km,Yro),e(A,Kro),e(A,Zm),e(Zm,qle),e(qle,Zro),e(Zm,eto),e(Zm,rB),e(rB,oto),e(Zm,rto),e(A,tto),e(A,eg),e(eg,jle),e(jle,ato),e(eg,nto),e(eg,tB),e(tB,sto),e(eg,lto),e(A,ito),e(A,og),e(og,Dle),e(Dle,dto),e(og,cto),e(og,aB),e(aB,fto),e(og,mto),e(A,gto),e(A,rg),e(rg,Gle),e(Gle,hto),e(rg,pto),e(rg,nB),e(nB,_to),e(rg,uto),e(A,bto),e(A,tg),e(tg,Ole),e(Ole,vto),e(tg,Fto),e(tg,sB),e(sB,Tto),e(tg,Mto),e(A,Eto),e(A,ag),e(ag,Vle),e(Vle,Cto),e(ag,wto),e(ag,lB),e(lB,Ato),e(ag,Lto),e(A,yto),e(A,ng),e(ng,Xle),e(Xle,xto),e(ng,$to),e(ng,iB),e(iB,kto),e(ng,Sto),e(A,Rto),e(A,sg),e(sg,zle),e(zle,Pto),e(sg,Bto),e(sg,dB),e(dB,Ito),e(sg,Nto),e(A,qto),e(A,lg),e(lg,Wle),e(Wle,jto),e(lg,Dto),e(lg,cB),e(cB,Gto),e(lg,Oto),e(A,Vto),e(A,ig),e(ig,Qle),e(Qle,Xto),e(ig,zto),e(ig,fB),e(fB,Wto),e(ig,Qto),e(A,Uto),e(A,dg),e(dg,Ule),e(Ule,Hto),e(dg,Jto),e(dg,mB),e(mB,Yto),e(dg,Kto),e(A,Zto),e(A,cg),e(cg,Hle),e(Hle,eao),e(cg,oao),e(cg,gB),e(gB,rao),e(cg,tao),e(A,aao),e(A,fg),e(fg,Jle),e(Jle,nao),e(fg,sao),e(fg,hB),e(hB,lao),e(fg,iao),e(A,dao),e(A,mg),e(mg,Yle),e(Yle,cao),e(mg,fao),e(mg,pB),e(pB,mao),e(mg,gao),e(A,hao),e(A,gg),e(gg,Kle),e(Kle,pao),e(gg,_ao),e(gg,_B),e(_B,uao),e(gg,bao),e(A,vao),e(A,hg),e(hg,Zle),e(Zle,Fao),e(hg,Tao),e(hg,uB),e(uB,Mao),e(hg,Eao),e(A,Cao),e(A,pg),e(pg,eie),e(eie,wao),e(pg,Aao),e(pg,bB),e(bB,Lao),e(pg,yao),e(A,xao),e(A,_g),e(_g,oie),e(oie,$ao),e(_g,kao),e(_g,vB),e(vB,Sao),e(_g,Rao),e(A,Pao),e(A,ug),e(ug,rie),e(rie,Bao),e(ug,Iao),e(ug,FB),e(FB,Nao),e(ug,qao),e(A,jao),e(A,bg),e(bg,tie),e(tie,Dao),e(bg,Gao),e(bg,TB),e(TB,Oao),e(bg,Vao),e(A,Xao),e(A,vg),e(vg,aie),e(aie,zao),e(vg,Wao),e(vg,MB),e(MB,Qao),e(vg,Uao),e(A,Hao),e(A,Fg),e(Fg,nie),e(nie,Jao),e(Fg,Yao),e(Fg,EB),e(EB,Kao),e(Fg,Zao),e(A,eno),e(A,Tg),e(Tg,sie),e(sie,ono),e(Tg,rno),e(Tg,CB),e(CB,tno),e(Tg,ano),e(A,nno),e(A,Mg),e(Mg,lie),e(lie,sno),e(Mg,lno),e(Mg,wB),e(wB,ino),e(Mg,dno),e(A,cno),e(A,Eg),e(Eg,iie),e(iie,fno),e(Eg,mno),e(Eg,AB),e(AB,gno),e(Eg,hno),e(A,pno),e(A,Cg),e(Cg,die),e(die,_no),e(Cg,uno),e(Cg,LB),e(LB,bno),e(Cg,vno),e(A,Fno),e(A,wg),e(wg,cie),e(cie,Tno),e(wg,Mno),e(wg,yB),e(yB,Eno),e(wg,Cno),e(A,wno),e(A,Ag),e(Ag,fie),e(fie,Ano),e(Ag,Lno),e(Ag,xB),e(xB,yno),e(Ag,xno),e(A,$no),e(A,Lg),e(Lg,mie),e(mie,kno),e(Lg,Sno),e(Lg,$B),e($B,Rno),e(Lg,Pno),e(A,Bno),e(A,yg),e(yg,gie),e(gie,Ino),e(yg,Nno),e(yg,kB),e(kB,qno),e(yg,jno),e(A,Dno),e(A,xg),e(xg,hie),e(hie,Gno),e(xg,Ono),e(xg,SB),e(SB,Vno),e(xg,Xno),e(A,zno),e(A,$g),e($g,pie),e(pie,Wno),e($g,Qno),e($g,RB),e(RB,Uno),e($g,Hno),e(A,Jno),e(A,kg),e(kg,_ie),e(_ie,Yno),e(kg,Kno),e(kg,PB),e(PB,Zno),e(kg,eso),e(A,oso),e(A,Sg),e(Sg,uie),e(uie,rso),e(Sg,tso),e(Sg,BB),e(BB,aso),e(Sg,nso),e(A,sso),e(A,Rg),e(Rg,bie),e(bie,lso),e(Rg,iso),e(Rg,IB),e(IB,dso),e(Rg,cso),e(A,fso),e(A,Pg),e(Pg,vie),e(vie,mso),e(Pg,gso),e(Pg,NB),e(NB,hso),e(Pg,pso),e(A,_so),e(A,Bg),e(Bg,Fie),e(Fie,uso),e(Bg,bso),e(Bg,qB),e(qB,vso),e(Bg,Fso),e(A,Tso),e(A,Ig),e(Ig,Tie),e(Tie,Mso),e(Ig,Eso),e(Ig,jB),e(jB,Cso),e(Ig,wso),e(A,Aso),e(A,Ng),e(Ng,Mie),e(Mie,Lso),e(Ng,yso),e(Ng,DB),e(DB,xso),e(Ng,$so),e(A,kso),e(A,qg),e(qg,Eie),e(Eie,Sso),e(qg,Rso),e(qg,GB),e(GB,Pso),e(qg,Bso),e(A,Iso),e(A,jg),e(jg,Cie),e(Cie,Nso),e(jg,qso),e(jg,OB),e(OB,jso),e(jg,Dso),e(A,Gso),e(A,Dg),e(Dg,wie),e(wie,Oso),e(Dg,Vso),e(Dg,VB),e(VB,Xso),e(Dg,zso),e(A,Wso),e(A,Gg),e(Gg,Aie),e(Aie,Qso),e(Gg,Uso),e(Gg,XB),e(XB,Hso),e(Gg,Jso),e(A,Yso),e(A,Og),e(Og,Lie),e(Lie,Kso),e(Og,Zso),e(Og,zB),e(zB,elo),e(Og,olo),e(A,rlo),e(A,Vg),e(Vg,yie),e(yie,tlo),e(Vg,alo),e(Vg,WB),e(WB,nlo),e(Vg,slo),e(A,llo),e(A,Xg),e(Xg,xie),e(xie,ilo),e(Xg,dlo),e(Xg,QB),e(QB,clo),e(Xg,flo),e(A,mlo),e(A,zg),e(zg,$ie),e($ie,glo),e(zg,hlo),e(zg,UB),e(UB,plo),e(zg,_lo),e(A,ulo),e(A,Wg),e(Wg,kie),e(kie,blo),e(Wg,vlo),e(Wg,HB),e(HB,Flo),e(Wg,Tlo),e(A,Mlo),e(A,Qg),e(Qg,Sie),e(Sie,Elo),e(Qg,Clo),e(Qg,JB),e(JB,wlo),e(Qg,Alo),e(A,Llo),e(A,Ug),e(Ug,Rie),e(Rie,ylo),e(Ug,xlo),e(Ug,YB),e(YB,$lo),e(Ug,klo),e(A,Slo),e(A,Hg),e(Hg,Pie),e(Pie,Rlo),e(Hg,Plo),e(Hg,KB),e(KB,Blo),e(Hg,Ilo),e(A,Nlo),e(A,Jg),e(Jg,Bie),e(Bie,qlo),e(Jg,jlo),e(Jg,ZB),e(ZB,Dlo),e(Jg,Glo),e(A,Olo),e(A,Yg),e(Yg,Iie),e(Iie,Vlo),e(Yg,Xlo),e(Yg,eI),e(eI,zlo),e(Yg,Wlo),e(A,Qlo),e(A,Kg),e(Kg,Nie),e(Nie,Ulo),e(Kg,Hlo),e(Kg,oI),e(oI,Jlo),e(Kg,Ylo),e(A,Klo),e(A,Zg),e(Zg,qie),e(qie,Zlo),e(Zg,eio),e(Zg,rI),e(rI,oio),e(Zg,rio),e(A,tio),e(A,eh),e(eh,jie),e(jie,aio),e(eh,nio),e(eh,tI),e(tI,sio),e(eh,lio),e(A,iio),e(A,oh),e(oh,Die),e(Die,dio),e(oh,cio),e(oh,aI),e(aI,fio),e(oh,mio),e(A,gio),e(A,rh),e(rh,Gie),e(Gie,hio),e(rh,pio),e(rh,nI),e(nI,_io),e(rh,uio),e(A,bio),e(A,th),e(th,Oie),e(Oie,vio),e(th,Fio),e(th,sI),e(sI,Tio),e(th,Mio),e(A,Eio),e(A,ah),e(ah,Vie),e(Vie,Cio),e(ah,wio),e(ah,lI),e(lI,Aio),e(ah,Lio),e(A,yio),e(A,nh),e(nh,Xie),e(Xie,xio),e(nh,$io),e(nh,iI),e(iI,kio),e(nh,Sio),e(A,Rio),e(A,sh),e(sh,zie),e(zie,Pio),e(sh,Bio),e(sh,dI),e(dI,Iio),e(sh,Nio),e(A,qio),e(A,lh),e(lh,Wie),e(Wie,jio),e(lh,Dio),e(lh,cI),e(cI,Gio),e(lh,Oio),e(A,Vio),e(A,ih),e(ih,Qie),e(Qie,Xio),e(ih,zio),e(ih,fI),e(fI,Wio),e(ih,Qio),e(A,Uio),e(A,dh),e(dh,Uie),e(Uie,Hio),e(dh,Jio),e(dh,mI),e(mI,Yio),e(dh,Kio),e(A,Zio),e(A,ch),e(ch,Hie),e(Hie,edo),e(ch,odo),e(ch,gI),e(gI,rdo),e(ch,tdo),e(A,ado),e(A,fh),e(fh,Jie),e(Jie,ndo),e(fh,sdo),e(fh,hI),e(hI,ldo),e(fh,ido),e(A,ddo),e(A,mh),e(mh,Yie),e(Yie,cdo),e(mh,fdo),e(mh,pI),e(pI,mdo),e(mh,gdo),e(A,hdo),e(A,gh),e(gh,Kie),e(Kie,pdo),e(gh,_do),e(gh,_I),e(_I,udo),e(gh,bdo),e(A,vdo),e(A,hh),e(hh,Zie),e(Zie,Fdo),e(hh,Tdo),e(hh,uI),e(uI,Mdo),e(hh,Edo),e(A,Cdo),e(A,ph),e(ph,ede),e(ede,wdo),e(ph,Ado),e(ph,bI),e(bI,Ldo),e(ph,ydo),e(A,xdo),e(A,_h),e(_h,ode),e(ode,$do),e(_h,kdo),e(_h,vI),e(vI,Sdo),e(_h,Rdo),e(A,Pdo),e(A,uh),e(uh,rde),e(rde,Bdo),e(uh,Ido),e(uh,FI),e(FI,Ndo),e(uh,qdo),e(A,jdo),e(A,bh),e(bh,tde),e(tde,Ddo),e(bh,Gdo),e(bh,TI),e(TI,Odo),e(bh,Vdo),e(A,Xdo),e(A,vh),e(vh,ade),e(ade,zdo),e(vh,Wdo),e(vh,MI),e(MI,Qdo),e(vh,Udo),e(A,Hdo),e(A,Fh),e(Fh,nde),e(nde,Jdo),e(Fh,Ydo),e(Fh,EI),e(EI,Kdo),e(Fh,Zdo),e(kr,eco),M(Th,kr,null),e(yo,oco),e(yo,Mh),M(FL,Mh,null),e(Mh,rco),e(Mh,sde),e(sde,tco),b(f,QQe,u),b(f,Ki,u),e(Ki,Eh),e(Eh,lde),M(TL,lde,null),e(Ki,aco),e(Ki,ide),e(ide,nco),b(f,UQe,u),b(f,xo,u),M(ML,xo,null),e(xo,sco),e(xo,EL),e(EL,lco),e(EL,CI),e(CI,ico),e(EL,dco),e(xo,cco),e(xo,CL),e(CL,fco),e(CL,dde),e(dde,mco),e(CL,gco),e(xo,hco),e(xo,Sr),M(wL,Sr,null),e(Sr,pco),e(Sr,cde),e(cde,_co),e(Sr,uco),e(Sr,Ga),e(Ga,bco),e(Ga,fde),e(fde,vco),e(Ga,Fco),e(Ga,mde),e(mde,Tco),e(Ga,Mco),e(Ga,gde),e(gde,Eco),e(Ga,Cco),e(Sr,wco),e(Sr,k),e(k,Hn),e(Hn,hde),e(hde,Aco),e(Hn,Lco),e(Hn,wI),e(wI,yco),e(Hn,xco),e(Hn,AI),e(AI,$co),e(Hn,kco),e(k,Sco),e(k,Jn),e(Jn,pde),e(pde,Rco),e(Jn,Pco),e(Jn,LI),e(LI,Bco),e(Jn,Ico),e(Jn,yI),e(yI,Nco),e(Jn,qco),e(k,jco),e(k,Yn),e(Yn,_de),e(_de,Dco),e(Yn,Gco),e(Yn,xI),e(xI,Oco),e(Yn,Vco),e(Yn,$I),e($I,Xco),e(Yn,zco),e(k,Wco),e(k,Ch),e(Ch,ude),e(ude,Qco),e(Ch,Uco),e(Ch,kI),e(kI,Hco),e(Ch,Jco),e(k,Yco),e(k,Kn),e(Kn,bde),e(bde,Kco),e(Kn,Zco),e(Kn,SI),e(SI,efo),e(Kn,ofo),e(Kn,RI),e(RI,rfo),e(Kn,tfo),e(k,afo),e(k,wh),e(wh,vde),e(vde,nfo),e(wh,sfo),e(wh,PI),e(PI,lfo),e(wh,ifo),e(k,dfo),e(k,Ah),e(Ah,Fde),e(Fde,cfo),e(Ah,ffo),e(Ah,BI),e(BI,mfo),e(Ah,gfo),e(k,hfo),e(k,Lh),e(Lh,Tde),e(Tde,pfo),e(Lh,_fo),e(Lh,II),e(II,ufo),e(Lh,bfo),e(k,vfo),e(k,Zn),e(Zn,Mde),e(Mde,Ffo),e(Zn,Tfo),e(Zn,NI),e(NI,Mfo),e(Zn,Efo),e(Zn,qI),e(qI,Cfo),e(Zn,wfo),e(k,Afo),e(k,es),e(es,Ede),e(Ede,Lfo),e(es,yfo),e(es,jI),e(jI,xfo),e(es,$fo),e(es,DI),e(DI,kfo),e(es,Sfo),e(k,Rfo),e(k,os),e(os,Cde),e(Cde,Pfo),e(os,Bfo),e(os,GI),e(GI,Ifo),e(os,Nfo),e(os,OI),e(OI,qfo),e(os,jfo),e(k,Dfo),e(k,yh),e(yh,wde),e(wde,Gfo),e(yh,Ofo),e(yh,VI),e(VI,Vfo),e(yh,Xfo),e(k,zfo),e(k,xh),e(xh,Ade),e(Ade,Wfo),e(xh,Qfo),e(xh,XI),e(XI,Ufo),e(xh,Hfo),e(k,Jfo),e(k,$h),e($h,Lde),e(Lde,Yfo),e($h,Kfo),e($h,zI),e(zI,Zfo),e($h,emo),e(k,omo),e(k,rs),e(rs,yde),e(yde,rmo),e(rs,tmo),e(rs,WI),e(WI,amo),e(rs,nmo),e(rs,QI),e(QI,smo),e(rs,lmo),e(k,imo),e(k,kh),e(kh,xde),e(xde,dmo),e(kh,cmo),e(kh,UI),e(UI,fmo),e(kh,mmo),e(k,gmo),e(k,ts),e(ts,$de),e($de,hmo),e(ts,pmo),e(ts,HI),e(HI,_mo),e(ts,umo),e(ts,JI),e(JI,bmo),e(ts,vmo),e(k,Fmo),e(k,as),e(as,kde),e(kde,Tmo),e(as,Mmo),e(as,YI),e(YI,Emo),e(as,Cmo),e(as,KI),e(KI,wmo),e(as,Amo),e(k,Lmo),e(k,ns),e(ns,Sde),e(Sde,ymo),e(ns,xmo),e(ns,ZI),e(ZI,$mo),e(ns,kmo),e(ns,eN),e(eN,Smo),e(ns,Rmo),e(k,Pmo),e(k,ss),e(ss,Rde),e(Rde,Bmo),e(ss,Imo),e(ss,oN),e(oN,Nmo),e(ss,qmo),e(ss,rN),e(rN,jmo),e(ss,Dmo),e(k,Gmo),e(k,Sh),e(Sh,Pde),e(Pde,Omo),e(Sh,Vmo),e(Sh,tN),e(tN,Xmo),e(Sh,zmo),e(k,Wmo),e(k,ls),e(ls,Bde),e(Bde,Qmo),e(ls,Umo),e(ls,aN),e(aN,Hmo),e(ls,Jmo),e(ls,nN),e(nN,Ymo),e(ls,Kmo),e(k,Zmo),e(k,is),e(is,Ide),e(Ide,ego),e(is,ogo),e(is,sN),e(sN,rgo),e(is,tgo),e(is,lN),e(lN,ago),e(is,ngo),e(k,sgo),e(k,ds),e(ds,Nde),e(Nde,lgo),e(ds,igo),e(ds,iN),e(iN,dgo),e(ds,cgo),e(ds,dN),e(dN,fgo),e(ds,mgo),e(k,ggo),e(k,cs),e(cs,qde),e(qde,hgo),e(cs,pgo),e(cs,cN),e(cN,_go),e(cs,ugo),e(cs,fN),e(fN,bgo),e(cs,vgo),e(k,Fgo),e(k,fs),e(fs,jde),e(jde,Tgo),e(fs,Mgo),e(fs,mN),e(mN,Ego),e(fs,Cgo),e(fs,gN),e(gN,wgo),e(fs,Ago),e(k,Lgo),e(k,ms),e(ms,Dde),e(Dde,ygo),e(ms,xgo),e(ms,hN),e(hN,$go),e(ms,kgo),e(ms,pN),e(pN,Sgo),e(ms,Rgo),e(k,Pgo),e(k,Rh),e(Rh,Gde),e(Gde,Bgo),e(Rh,Igo),e(Rh,_N),e(_N,Ngo),e(Rh,qgo),e(k,jgo),e(k,gs),e(gs,Ode),e(Ode,Dgo),e(gs,Ggo),e(gs,uN),e(uN,Ogo),e(gs,Vgo),e(gs,bN),e(bN,Xgo),e(gs,zgo),e(k,Wgo),e(k,Ph),e(Ph,Vde),e(Vde,Qgo),e(Ph,Ugo),e(Ph,vN),e(vN,Hgo),e(Ph,Jgo),e(k,Ygo),e(k,hs),e(hs,Xde),e(Xde,Kgo),e(hs,Zgo),e(hs,FN),e(FN,eho),e(hs,oho),e(hs,TN),e(TN,rho),e(hs,tho),e(k,aho),e(k,ps),e(ps,zde),e(zde,nho),e(ps,sho),e(ps,MN),e(MN,lho),e(ps,iho),e(ps,EN),e(EN,dho),e(ps,cho),e(k,fho),e(k,_s),e(_s,Wde),e(Wde,mho),e(_s,gho),e(_s,CN),e(CN,hho),e(_s,pho),e(_s,wN),e(wN,_ho),e(_s,uho),e(k,bho),e(k,Bh),e(Bh,Qde),e(Qde,vho),e(Bh,Fho),e(Bh,AN),e(AN,Tho),e(Bh,Mho),e(k,Eho),e(k,us),e(us,Ude),e(Ude,Cho),e(us,who),e(us,LN),e(LN,Aho),e(us,Lho),e(us,yN),e(yN,yho),e(us,xho),e(k,$ho),e(k,bs),e(bs,Hde),e(Hde,kho),e(bs,Sho),e(bs,xN),e(xN,Rho),e(bs,Pho),e(bs,$N),e($N,Bho),e(bs,Iho),e(k,Nho),e(k,vs),e(vs,Jde),e(Jde,qho),e(vs,jho),e(vs,kN),e(kN,Dho),e(vs,Gho),e(vs,SN),e(SN,Oho),e(vs,Vho),e(k,Xho),e(k,Ih),e(Ih,Yde),e(Yde,zho),e(Ih,Who),e(Ih,RN),e(RN,Qho),e(Ih,Uho),e(k,Hho),e(k,Fs),e(Fs,Kde),e(Kde,Jho),e(Fs,Yho),e(Fs,PN),e(PN,Kho),e(Fs,Zho),e(Fs,BN),e(BN,epo),e(Fs,opo),e(k,rpo),e(k,Ts),e(Ts,Zde),e(Zde,tpo),e(Ts,apo),e(Ts,IN),e(IN,npo),e(Ts,spo),e(Ts,NN),e(NN,lpo),e(Ts,ipo),e(k,dpo),e(k,Ms),e(Ms,ece),e(ece,cpo),e(Ms,fpo),e(Ms,qN),e(qN,mpo),e(Ms,gpo),e(Ms,jN),e(jN,hpo),e(Ms,ppo),e(k,_po),e(k,Es),e(Es,oce),e(oce,upo),e(Es,bpo),e(Es,DN),e(DN,vpo),e(Es,Fpo),e(Es,GN),e(GN,Tpo),e(Es,Mpo),e(k,Epo),e(k,Cs),e(Cs,rce),e(rce,Cpo),e(Cs,wpo),e(Cs,ON),e(ON,Apo),e(Cs,Lpo),e(Cs,VN),e(VN,ypo),e(Cs,xpo),e(k,$po),e(k,ws),e(ws,tce),e(tce,kpo),e(ws,Spo),e(ws,XN),e(XN,Rpo),e(ws,Ppo),e(ws,zN),e(zN,Bpo),e(ws,Ipo),e(k,Npo),e(k,As),e(As,ace),e(ace,qpo),e(As,jpo),e(As,WN),e(WN,Dpo),e(As,Gpo),e(As,QN),e(QN,Opo),e(As,Vpo),e(k,Xpo),e(k,Ls),e(Ls,nce),e(nce,zpo),e(Ls,Wpo),e(Ls,UN),e(UN,Qpo),e(Ls,Upo),e(Ls,HN),e(HN,Hpo),e(Ls,Jpo),e(k,Ypo),e(k,Nh),e(Nh,sce),e(sce,Kpo),e(Nh,Zpo),e(Nh,JN),e(JN,e_o),e(Nh,o_o),e(k,r_o),e(k,ys),e(ys,lce),e(lce,t_o),e(ys,a_o),e(ys,YN),e(YN,n_o),e(ys,s_o),e(ys,KN),e(KN,l_o),e(ys,i_o),e(k,d_o),e(k,qh),e(qh,ice),e(ice,c_o),e(qh,f_o),e(qh,ZN),e(ZN,m_o),e(qh,g_o),e(k,h_o),e(k,jh),e(jh,dce),e(dce,p_o),e(jh,__o),e(jh,eq),e(eq,u_o),e(jh,b_o),e(k,v_o),e(k,xs),e(xs,cce),e(cce,F_o),e(xs,T_o),e(xs,oq),e(oq,M_o),e(xs,E_o),e(xs,rq),e(rq,C_o),e(xs,w_o),e(k,A_o),e(k,$s),e($s,fce),e(fce,L_o),e($s,y_o),e($s,tq),e(tq,x_o),e($s,$_o),e($s,aq),e(aq,k_o),e($s,S_o),e(k,R_o),e(k,ks),e(ks,mce),e(mce,P_o),e(ks,B_o),e(ks,nq),e(nq,I_o),e(ks,N_o),e(ks,sq),e(sq,q_o),e(ks,j_o),e(k,D_o),e(k,Dh),e(Dh,gce),e(gce,G_o),e(Dh,O_o),e(Dh,lq),e(lq,V_o),e(Dh,X_o),e(k,z_o),e(k,Ss),e(Ss,hce),e(hce,W_o),e(Ss,Q_o),e(Ss,iq),e(iq,U_o),e(Ss,H_o),e(Ss,dq),e(dq,J_o),e(Ss,Y_o),e(k,K_o),e(k,Rs),e(Rs,pce),e(pce,Z_o),e(Rs,euo),e(Rs,cq),e(cq,ouo),e(Rs,ruo),e(Rs,fq),e(fq,tuo),e(Rs,auo),e(k,nuo),e(k,Ps),e(Ps,_ce),e(_ce,suo),e(Ps,luo),e(Ps,mq),e(mq,iuo),e(Ps,duo),e(Ps,gq),e(gq,cuo),e(Ps,fuo),e(k,muo),e(k,Bs),e(Bs,uce),e(uce,guo),e(Bs,huo),e(Bs,hq),e(hq,puo),e(Bs,_uo),e(Bs,pq),e(pq,uuo),e(Bs,buo),e(k,vuo),e(k,Is),e(Is,bce),e(bce,Fuo),e(Is,Tuo),e(Is,_q),e(_q,Muo),e(Is,Euo),e(Is,uq),e(uq,Cuo),e(Is,wuo),e(k,Auo),e(k,Ns),e(Ns,vce),e(vce,Luo),e(Ns,yuo),e(Ns,bq),e(bq,xuo),e(Ns,$uo),e(Ns,vq),e(vq,kuo),e(Ns,Suo),e(k,Ruo),e(k,qs),e(qs,Fce),e(Fce,Puo),e(qs,Buo),e(qs,Fq),e(Fq,Iuo),e(qs,Nuo),e(qs,Tq),e(Tq,quo),e(qs,juo),e(k,Duo),e(k,js),e(js,Tce),e(Tce,Guo),e(js,Ouo),e(js,Mq),e(Mq,Vuo),e(js,Xuo),e(js,Eq),e(Eq,zuo),e(js,Wuo),e(k,Quo),e(k,Gh),e(Gh,Mce),e(Mce,Uuo),e(Gh,Huo),e(Gh,Cq),e(Cq,Juo),e(Gh,Yuo),e(k,Kuo),e(k,Ds),e(Ds,Ece),e(Ece,Zuo),e(Ds,e1o),e(Ds,wq),e(wq,o1o),e(Ds,r1o),e(Ds,Aq),e(Aq,t1o),e(Ds,a1o),e(k,n1o),e(k,Gs),e(Gs,Cce),e(Cce,s1o),e(Gs,l1o),e(Gs,Lq),e(Lq,i1o),e(Gs,d1o),e(Gs,yq),e(yq,c1o),e(Gs,f1o),e(k,m1o),e(k,Oh),e(Oh,wce),e(wce,g1o),e(Oh,h1o),e(Oh,xq),e(xq,p1o),e(Oh,_1o),e(k,u1o),e(k,Vh),e(Vh,Ace),e(Ace,b1o),e(Vh,v1o),e(Vh,$q),e($q,F1o),e(Vh,T1o),e(k,M1o),e(k,Xh),e(Xh,Lce),e(Lce,E1o),e(Xh,C1o),e(Xh,kq),e(kq,w1o),e(Xh,A1o),e(k,L1o),e(k,zh),e(zh,yce),e(yce,y1o),e(zh,x1o),e(zh,Sq),e(Sq,$1o),e(zh,k1o),e(k,S1o),e(k,Os),e(Os,xce),e(xce,R1o),e(Os,P1o),e(Os,Rq),e(Rq,B1o),e(Os,I1o),e(Os,Pq),e(Pq,N1o),e(Os,q1o),e(k,j1o),e(k,Wh),e(Wh,$ce),e($ce,D1o),e(Wh,G1o),e(Wh,Bq),e(Bq,O1o),e(Wh,V1o),e(k,X1o),e(k,Vs),e(Vs,kce),e(kce,z1o),e(Vs,W1o),e(Vs,Iq),e(Iq,Q1o),e(Vs,U1o),e(Vs,Nq),e(Nq,H1o),e(Vs,J1o),e(k,Y1o),e(k,Xs),e(Xs,Sce),e(Sce,K1o),e(Xs,Z1o),e(Xs,qq),e(qq,e2o),e(Xs,o2o),e(Xs,jq),e(jq,r2o),e(Xs,t2o),e(k,a2o),e(k,zs),e(zs,Rce),e(Rce,n2o),e(zs,s2o),e(zs,Dq),e(Dq,l2o),e(zs,i2o),e(zs,Gq),e(Gq,d2o),e(zs,c2o),e(k,f2o),e(k,Ws),e(Ws,Pce),e(Pce,m2o),e(Ws,g2o),e(Ws,Oq),e(Oq,h2o),e(Ws,p2o),e(Ws,Vq),e(Vq,_2o),e(Ws,u2o),e(k,b2o),e(k,Qs),e(Qs,Bce),e(Bce,v2o),e(Qs,F2o),e(Qs,Xq),e(Xq,T2o),e(Qs,M2o),e(Qs,zq),e(zq,E2o),e(Qs,C2o),e(k,w2o),e(k,Us),e(Us,Ice),e(Ice,A2o),e(Us,L2o),e(Us,Wq),e(Wq,y2o),e(Us,x2o),e(Us,Qq),e(Qq,$2o),e(Us,k2o),e(k,S2o),e(k,Qh),e(Qh,Nce),e(Nce,R2o),e(Qh,P2o),e(Qh,Uq),e(Uq,B2o),e(Qh,I2o),e(k,N2o),e(k,Uh),e(Uh,qce),e(qce,q2o),e(Uh,j2o),e(Uh,Hq),e(Hq,D2o),e(Uh,G2o),e(k,O2o),e(k,Hs),e(Hs,jce),e(jce,V2o),e(Hs,X2o),e(Hs,Jq),e(Jq,z2o),e(Hs,W2o),e(Hs,Yq),e(Yq,Q2o),e(Hs,U2o),e(k,H2o),e(k,Js),e(Js,Dce),e(Dce,J2o),e(Js,Y2o),e(Js,Kq),e(Kq,K2o),e(Js,Z2o),e(Js,Zq),e(Zq,ebo),e(Js,obo),e(k,rbo),e(k,Ys),e(Ys,Gce),e(Gce,tbo),e(Ys,abo),e(Ys,ej),e(ej,nbo),e(Ys,sbo),e(Ys,oj),e(oj,lbo),e(Ys,ibo),e(k,dbo),e(k,Hh),e(Hh,Oce),e(Oce,cbo),e(Hh,fbo),e(Hh,rj),e(rj,mbo),e(Hh,gbo),e(k,hbo),e(k,Jh),e(Jh,Vce),e(Vce,pbo),e(Jh,_bo),e(Jh,tj),e(tj,ubo),e(Jh,bbo),e(k,vbo),e(k,Yh),e(Yh,Xce),e(Xce,Fbo),e(Yh,Tbo),e(Yh,aj),e(aj,Mbo),e(Yh,Ebo),e(k,Cbo),e(k,Ks),e(Ks,zce),e(zce,wbo),e(Ks,Abo),e(Ks,nj),e(nj,Lbo),e(Ks,ybo),e(Ks,sj),e(sj,xbo),e(Ks,$bo),e(k,kbo),e(k,Zs),e(Zs,Wce),e(Wce,Sbo),e(Zs,Rbo),e(Zs,lj),e(lj,Pbo),e(Zs,Bbo),e(Zs,ij),e(ij,Ibo),e(Zs,Nbo),e(k,qbo),e(k,Kh),e(Kh,Qce),e(Qce,jbo),e(Kh,Dbo),e(Kh,dj),e(dj,Gbo),e(Kh,Obo),e(k,Vbo),e(k,Zh),e(Zh,Uce),e(Uce,Xbo),e(Zh,zbo),e(Zh,cj),e(cj,Wbo),e(Zh,Qbo),e(k,Ubo),e(k,ep),e(ep,Hce),e(Hce,Hbo),e(ep,Jbo),e(ep,fj),e(fj,Ybo),e(ep,Kbo),e(k,Zbo),e(k,el),e(el,Jce),e(Jce,evo),e(el,ovo),e(el,mj),e(mj,rvo),e(el,tvo),e(el,gj),e(gj,avo),e(el,nvo),e(k,svo),e(k,op),e(op,Yce),e(Yce,lvo),e(op,ivo),e(op,hj),e(hj,dvo),e(op,cvo),e(k,fvo),e(k,rp),e(rp,Kce),e(Kce,mvo),e(rp,gvo),e(rp,pj),e(pj,hvo),e(rp,pvo),e(k,_vo),e(k,ol),e(ol,Zce),e(Zce,uvo),e(ol,bvo),e(ol,_j),e(_j,vvo),e(ol,Fvo),e(ol,uj),e(uj,Tvo),e(ol,Mvo),e(k,Evo),e(k,rl),e(rl,efe),e(efe,Cvo),e(rl,wvo),e(rl,bj),e(bj,Avo),e(rl,Lvo),e(rl,vj),e(vj,yvo),e(rl,xvo),e(k,$vo),e(k,tl),e(tl,ofe),e(ofe,kvo),e(tl,Svo),e(tl,Fj),e(Fj,Rvo),e(tl,Pvo),e(tl,Tj),e(Tj,Bvo),e(tl,Ivo),e(k,Nvo),e(k,al),e(al,rfe),e(rfe,qvo),e(al,jvo),e(al,Mj),e(Mj,Dvo),e(al,Gvo),e(al,Ej),e(Ej,Ovo),e(al,Vvo),e(Sr,Xvo),M(tp,Sr,null),e(xo,zvo),e(xo,ap),M(AL,ap,null),e(ap,Wvo),e(ap,tfe),e(tfe,Qvo),b(f,HQe,u),b(f,Zi,u),e(Zi,np),e(np,afe),M(LL,afe,null),e(Zi,Uvo),e(Zi,nfe),e(nfe,Hvo),b(f,JQe,u),b(f,$o,u),M(yL,$o,null),e($o,Jvo),e($o,xL),e(xL,Yvo),e(xL,Cj),e(Cj,Kvo),e(xL,Zvo),e($o,e6o),e($o,$L),e($L,o6o),e($L,sfe),e(sfe,r6o),e($L,t6o),e($o,a6o),e($o,He),M(kL,He,null),e(He,n6o),e(He,lfe),e(lfe,s6o),e(He,l6o),e(He,Oa),e(Oa,i6o),e(Oa,ife),e(ife,d6o),e(Oa,c6o),e(Oa,dfe),e(dfe,f6o),e(Oa,m6o),e(Oa,cfe),e(cfe,g6o),e(Oa,h6o),e(He,p6o),e(He,Q),e(Q,sp),e(sp,ffe),e(ffe,_6o),e(sp,u6o),e(sp,wj),e(wj,b6o),e(sp,v6o),e(Q,F6o),e(Q,lp),e(lp,mfe),e(mfe,T6o),e(lp,M6o),e(lp,Aj),e(Aj,E6o),e(lp,C6o),e(Q,w6o),e(Q,ip),e(ip,gfe),e(gfe,A6o),e(ip,L6o),e(ip,Lj),e(Lj,y6o),e(ip,x6o),e(Q,$6o),e(Q,dp),e(dp,hfe),e(hfe,k6o),e(dp,S6o),e(dp,yj),e(yj,R6o),e(dp,P6o),e(Q,B6o),e(Q,cp),e(cp,pfe),e(pfe,I6o),e(cp,N6o),e(cp,xj),e(xj,q6o),e(cp,j6o),e(Q,D6o),e(Q,fp),e(fp,_fe),e(_fe,G6o),e(fp,O6o),e(fp,$j),e($j,V6o),e(fp,X6o),e(Q,z6o),e(Q,mp),e(mp,ufe),e(ufe,W6o),e(mp,Q6o),e(mp,kj),e(kj,U6o),e(mp,H6o),e(Q,J6o),e(Q,gp),e(gp,bfe),e(bfe,Y6o),e(gp,K6o),e(gp,Sj),e(Sj,Z6o),e(gp,eFo),e(Q,oFo),e(Q,hp),e(hp,vfe),e(vfe,rFo),e(hp,tFo),e(hp,Rj),e(Rj,aFo),e(hp,nFo),e(Q,sFo),e(Q,pp),e(pp,Ffe),e(Ffe,lFo),e(pp,iFo),e(pp,Pj),e(Pj,dFo),e(pp,cFo),e(Q,fFo),e(Q,_p),e(_p,Tfe),e(Tfe,mFo),e(_p,gFo),e(_p,Bj),e(Bj,hFo),e(_p,pFo),e(Q,_Fo),e(Q,up),e(up,Mfe),e(Mfe,uFo),e(up,bFo),e(up,Ij),e(Ij,vFo),e(up,FFo),e(Q,TFo),e(Q,bp),e(bp,Efe),e(Efe,MFo),e(bp,EFo),e(bp,Nj),e(Nj,CFo),e(bp,wFo),e(Q,AFo),e(Q,vp),e(vp,Cfe),e(Cfe,LFo),e(vp,yFo),e(vp,qj),e(qj,xFo),e(vp,$Fo),e(Q,kFo),e(Q,Fp),e(Fp,wfe),e(wfe,SFo),e(Fp,RFo),e(Fp,jj),e(jj,PFo),e(Fp,BFo),e(Q,IFo),e(Q,Tp),e(Tp,Afe),e(Afe,NFo),e(Tp,qFo),e(Tp,Dj),e(Dj,jFo),e(Tp,DFo),e(Q,GFo),e(Q,Mp),e(Mp,Lfe),e(Lfe,OFo),e(Mp,VFo),e(Mp,Gj),e(Gj,XFo),e(Mp,zFo),e(Q,WFo),e(Q,Ep),e(Ep,yfe),e(yfe,QFo),e(Ep,UFo),e(Ep,Oj),e(Oj,HFo),e(Ep,JFo),e(Q,YFo),e(Q,Cp),e(Cp,xfe),e(xfe,KFo),e(Cp,ZFo),e(Cp,Vj),e(Vj,eTo),e(Cp,oTo),e(Q,rTo),e(Q,wp),e(wp,$fe),e($fe,tTo),e(wp,aTo),e(wp,Xj),e(Xj,nTo),e(wp,sTo),e(Q,lTo),e(Q,Ap),e(Ap,kfe),e(kfe,iTo),e(Ap,dTo),e(Ap,zj),e(zj,cTo),e(Ap,fTo),e(Q,mTo),e(Q,Lp),e(Lp,Sfe),e(Sfe,gTo),e(Lp,hTo),e(Lp,Wj),e(Wj,pTo),e(Lp,_To),e(Q,uTo),e(Q,yp),e(yp,Rfe),e(Rfe,bTo),e(yp,vTo),e(yp,Qj),e(Qj,FTo),e(yp,TTo),e(Q,MTo),e(Q,xp),e(xp,Pfe),e(Pfe,ETo),e(xp,CTo),e(xp,Uj),e(Uj,wTo),e(xp,ATo),e(Q,LTo),e(Q,$p),e($p,Bfe),e(Bfe,yTo),e($p,xTo),e($p,Hj),e(Hj,$To),e($p,kTo),e(Q,STo),e(Q,kp),e(kp,Ife),e(Ife,RTo),e(kp,PTo),e(kp,Jj),e(Jj,BTo),e(kp,ITo),e(Q,NTo),e(Q,Sp),e(Sp,Nfe),e(Nfe,qTo),e(Sp,jTo),e(Sp,Yj),e(Yj,DTo),e(Sp,GTo),e(Q,OTo),e(Q,Rp),e(Rp,qfe),e(qfe,VTo),e(Rp,XTo),e(Rp,Kj),e(Kj,zTo),e(Rp,WTo),e(Q,QTo),e(Q,Pp),e(Pp,jfe),e(jfe,UTo),e(Pp,HTo),e(Pp,Zj),e(Zj,JTo),e(Pp,YTo),e(Q,KTo),e(Q,Bp),e(Bp,Dfe),e(Dfe,ZTo),e(Bp,e7o),e(Bp,eD),e(eD,o7o),e(Bp,r7o),e(Q,t7o),e(Q,Ip),e(Ip,Gfe),e(Gfe,a7o),e(Ip,n7o),e(Ip,oD),e(oD,s7o),e(Ip,l7o),e(Q,i7o),e(Q,Np),e(Np,Ofe),e(Ofe,d7o),e(Np,c7o),e(Np,rD),e(rD,f7o),e(Np,m7o),e(Q,g7o),e(Q,qp),e(qp,Vfe),e(Vfe,h7o),e(qp,p7o),e(qp,tD),e(tD,_7o),e(qp,u7o),e(Q,b7o),e(Q,jp),e(jp,Xfe),e(Xfe,v7o),e(jp,F7o),e(jp,aD),e(aD,T7o),e(jp,M7o),e(Q,E7o),e(Q,Dp),e(Dp,zfe),e(zfe,C7o),e(Dp,w7o),e(Dp,nD),e(nD,A7o),e(Dp,L7o),e(Q,y7o),e(Q,Gp),e(Gp,Wfe),e(Wfe,x7o),e(Gp,$7o),e(Gp,sD),e(sD,k7o),e(Gp,S7o),e(Q,R7o),e(Q,Op),e(Op,Qfe),e(Qfe,P7o),e(Op,B7o),e(Op,lD),e(lD,I7o),e(Op,N7o),e(Q,q7o),e(Q,Vp),e(Vp,Ufe),e(Ufe,j7o),e(Vp,D7o),e(Vp,iD),e(iD,G7o),e(Vp,O7o),e(He,V7o),M(Xp,He,null),e(He,X7o),M(zp,He,null),e($o,z7o),e($o,Wp),M(SL,Wp,null),e(Wp,W7o),e(Wp,Hfe),e(Hfe,Q7o),b(f,YQe,u),b(f,ed,u),e(ed,Qp),e(Qp,Jfe),M(RL,Jfe,null),e(ed,U7o),e(ed,Yfe),e(Yfe,H7o),b(f,KQe,u),b(f,ko,u),M(PL,ko,null),e(ko,J7o),e(ko,BL),e(BL,Y7o),e(BL,dD),e(dD,K7o),e(BL,Z7o),e(ko,e8o),e(ko,IL),e(IL,o8o),e(IL,Kfe),e(Kfe,r8o),e(IL,t8o),e(ko,a8o),e(ko,Je),M(NL,Je,null),e(Je,n8o),e(Je,Zfe),e(Zfe,s8o),e(Je,l8o),e(Je,od),e(od,i8o),e(od,eme),e(eme,d8o),e(od,c8o),e(od,ome),e(ome,f8o),e(od,m8o),e(Je,g8o),e(Je,ie),e(ie,Up),e(Up,rme),e(rme,h8o),e(Up,p8o),e(Up,cD),e(cD,_8o),e(Up,u8o),e(ie,b8o),e(ie,Hp),e(Hp,tme),e(tme,v8o),e(Hp,F8o),e(Hp,fD),e(fD,T8o),e(Hp,M8o),e(ie,E8o),e(ie,Jp),e(Jp,ame),e(ame,C8o),e(Jp,w8o),e(Jp,mD),e(mD,A8o),e(Jp,L8o),e(ie,y8o),e(ie,Yp),e(Yp,nme),e(nme,x8o),e(Yp,$8o),e(Yp,gD),e(gD,k8o),e(Yp,S8o),e(ie,R8o),e(ie,Kp),e(Kp,sme),e(sme,P8o),e(Kp,B8o),e(Kp,hD),e(hD,I8o),e(Kp,N8o),e(ie,q8o),e(ie,Zp),e(Zp,lme),e(lme,j8o),e(Zp,D8o),e(Zp,pD),e(pD,G8o),e(Zp,O8o),e(ie,V8o),e(ie,e_),e(e_,ime),e(ime,X8o),e(e_,z8o),e(e_,_D),e(_D,W8o),e(e_,Q8o),e(ie,U8o),e(ie,o_),e(o_,dme),e(dme,H8o),e(o_,J8o),e(o_,uD),e(uD,Y8o),e(o_,K8o),e(ie,Z8o),e(ie,r_),e(r_,cme),e(cme,e9o),e(r_,o9o),e(r_,bD),e(bD,r9o),e(r_,t9o),e(ie,a9o),e(ie,t_),e(t_,fme),e(fme,n9o),e(t_,s9o),e(t_,vD),e(vD,l9o),e(t_,i9o),e(ie,d9o),e(ie,a_),e(a_,mme),e(mme,c9o),e(a_,f9o),e(a_,FD),e(FD,m9o),e(a_,g9o),e(ie,h9o),e(ie,n_),e(n_,gme),e(gme,p9o),e(n_,_9o),e(n_,TD),e(TD,u9o),e(n_,b9o),e(ie,v9o),e(ie,s_),e(s_,hme),e(hme,F9o),e(s_,T9o),e(s_,MD),e(MD,M9o),e(s_,E9o),e(ie,C9o),e(ie,l_),e(l_,pme),e(pme,w9o),e(l_,A9o),e(l_,ED),e(ED,L9o),e(l_,y9o),e(ie,x9o),e(ie,i_),e(i_,_me),e(_me,$9o),e(i_,k9o),e(i_,CD),e(CD,S9o),e(i_,R9o),e(ie,P9o),e(ie,d_),e(d_,ume),e(ume,B9o),e(d_,I9o),e(d_,wD),e(wD,N9o),e(d_,q9o),e(ie,j9o),e(ie,c_),e(c_,bme),e(bme,D9o),e(c_,G9o),e(c_,AD),e(AD,O9o),e(c_,V9o),e(ie,X9o),e(ie,f_),e(f_,vme),e(vme,z9o),e(f_,W9o),e(f_,LD),e(LD,Q9o),e(f_,U9o),e(ie,H9o),e(ie,m_),e(m_,Fme),e(Fme,J9o),e(m_,Y9o),e(m_,yD),e(yD,K9o),e(m_,Z9o),e(ie,eMo),e(ie,g_),e(g_,Tme),e(Tme,oMo),e(g_,rMo),e(g_,xD),e(xD,tMo),e(g_,aMo),e(Je,nMo),M(h_,Je,null),e(Je,sMo),M(p_,Je,null),e(ko,lMo),e(ko,__),M(qL,__,null),e(__,iMo),e(__,Mme),e(Mme,dMo),b(f,ZQe,u),b(f,rd,u),e(rd,u_),e(u_,Eme),M(jL,Eme,null),e(rd,cMo),e(rd,Cme),e(Cme,fMo),b(f,eUe,u),b(f,So,u),M(DL,So,null),e(So,mMo),e(So,td),e(td,gMo),e(td,$D),e($D,hMo),e(td,pMo),e(td,kD),e(kD,_Mo),e(td,uMo),e(So,bMo),e(So,GL),e(GL,vMo),e(GL,wme),e(wme,FMo),e(GL,TMo),e(So,MMo),e(So,mt),M(OL,mt,null),e(mt,EMo),e(mt,Ame),e(Ame,CMo),e(mt,wMo),e(mt,ad),e(ad,AMo),e(ad,Lme),e(Lme,LMo),e(ad,yMo),e(ad,SD),e(SD,xMo),e(ad,$Mo),e(mt,kMo),M(b_,mt,null),e(So,SMo),e(So,Ye),M(VL,Ye,null),e(Ye,RMo),e(Ye,yme),e(yme,PMo),e(Ye,BMo),e(Ye,Va),e(Va,IMo),e(Va,xme),e(xme,NMo),e(Va,qMo),e(Va,$me),e($me,jMo),e(Va,DMo),e(Va,kme),e(kme,GMo),e(Va,OMo),e(Ye,VMo),e(Ye,y),e(y,v_),e(v_,Sme),e(Sme,XMo),e(v_,zMo),e(v_,RD),e(RD,WMo),e(v_,QMo),e(y,UMo),e(y,F_),e(F_,Rme),e(Rme,HMo),e(F_,JMo),e(F_,PD),e(PD,YMo),e(F_,KMo),e(y,ZMo),e(y,T_),e(T_,Pme),e(Pme,eEo),e(T_,oEo),e(T_,BD),e(BD,rEo),e(T_,tEo),e(y,aEo),e(y,M_),e(M_,Bme),e(Bme,nEo),e(M_,sEo),e(M_,ID),e(ID,lEo),e(M_,iEo),e(y,dEo),e(y,E_),e(E_,Ime),e(Ime,cEo),e(E_,fEo),e(E_,ND),e(ND,mEo),e(E_,gEo),e(y,hEo),e(y,C_),e(C_,Nme),e(Nme,pEo),e(C_,_Eo),e(C_,qD),e(qD,uEo),e(C_,bEo),e(y,vEo),e(y,w_),e(w_,qme),e(qme,FEo),e(w_,TEo),e(w_,jD),e(jD,MEo),e(w_,EEo),e(y,CEo),e(y,A_),e(A_,jme),e(jme,wEo),e(A_,AEo),e(A_,DD),e(DD,LEo),e(A_,yEo),e(y,xEo),e(y,L_),e(L_,Dme),e(Dme,$Eo),e(L_,kEo),e(L_,GD),e(GD,SEo),e(L_,REo),e(y,PEo),e(y,y_),e(y_,Gme),e(Gme,BEo),e(y_,IEo),e(y_,OD),e(OD,NEo),e(y_,qEo),e(y,jEo),e(y,x_),e(x_,Ome),e(Ome,DEo),e(x_,GEo),e(x_,VD),e(VD,OEo),e(x_,VEo),e(y,XEo),e(y,$_),e($_,Vme),e(Vme,zEo),e($_,WEo),e($_,XD),e(XD,QEo),e($_,UEo),e(y,HEo),e(y,k_),e(k_,Xme),e(Xme,JEo),e(k_,YEo),e(k_,zD),e(zD,KEo),e(k_,ZEo),e(y,e4o),e(y,S_),e(S_,zme),e(zme,o4o),e(S_,r4o),e(S_,WD),e(WD,t4o),e(S_,a4o),e(y,n4o),e(y,R_),e(R_,Wme),e(Wme,s4o),e(R_,l4o),e(R_,QD),e(QD,i4o),e(R_,d4o),e(y,c4o),e(y,P_),e(P_,Qme),e(Qme,f4o),e(P_,m4o),e(P_,UD),e(UD,g4o),e(P_,h4o),e(y,p4o),e(y,B_),e(B_,Ume),e(Ume,_4o),e(B_,u4o),e(B_,HD),e(HD,b4o),e(B_,v4o),e(y,F4o),e(y,I_),e(I_,Hme),e(Hme,T4o),e(I_,M4o),e(I_,JD),e(JD,E4o),e(I_,C4o),e(y,w4o),e(y,N_),e(N_,Jme),e(Jme,A4o),e(N_,L4o),e(N_,YD),e(YD,y4o),e(N_,x4o),e(y,$4o),e(y,q_),e(q_,Yme),e(Yme,k4o),e(q_,S4o),e(q_,KD),e(KD,R4o),e(q_,P4o),e(y,B4o),e(y,j_),e(j_,Kme),e(Kme,I4o),e(j_,N4o),e(j_,ZD),e(ZD,q4o),e(j_,j4o),e(y,D4o),e(y,D_),e(D_,Zme),e(Zme,G4o),e(D_,O4o),e(D_,eG),e(eG,V4o),e(D_,X4o),e(y,z4o),e(y,G_),e(G_,ege),e(ege,W4o),e(G_,Q4o),e(G_,oG),e(oG,U4o),e(G_,H4o),e(y,J4o),e(y,O_),e(O_,oge),e(oge,Y4o),e(O_,K4o),e(O_,rG),e(rG,Z4o),e(O_,eCo),e(y,oCo),e(y,V_),e(V_,rge),e(rge,rCo),e(V_,tCo),e(V_,tG),e(tG,aCo),e(V_,nCo),e(y,sCo),e(y,X_),e(X_,tge),e(tge,lCo),e(X_,iCo),e(X_,aG),e(aG,dCo),e(X_,cCo),e(y,fCo),e(y,z_),e(z_,age),e(age,mCo),e(z_,gCo),e(z_,nG),e(nG,hCo),e(z_,pCo),e(y,_Co),e(y,W_),e(W_,nge),e(nge,uCo),e(W_,bCo),e(W_,sG),e(sG,vCo),e(W_,FCo),e(y,TCo),e(y,Q_),e(Q_,sge),e(sge,MCo),e(Q_,ECo),e(Q_,lG),e(lG,CCo),e(Q_,wCo),e(y,ACo),e(y,U_),e(U_,lge),e(lge,LCo),e(U_,yCo),e(U_,iG),e(iG,xCo),e(U_,$Co),e(y,kCo),e(y,H_),e(H_,ige),e(ige,SCo),e(H_,RCo),e(H_,dG),e(dG,PCo),e(H_,BCo),e(y,ICo),e(y,J_),e(J_,dge),e(dge,NCo),e(J_,qCo),e(J_,cG),e(cG,jCo),e(J_,DCo),e(y,GCo),e(y,Y_),e(Y_,cge),e(cge,OCo),e(Y_,VCo),e(Y_,fG),e(fG,XCo),e(Y_,zCo),e(y,WCo),e(y,K_),e(K_,fge),e(fge,QCo),e(K_,UCo),e(K_,mG),e(mG,HCo),e(K_,JCo),e(y,YCo),e(y,Z_),e(Z_,mge),e(mge,KCo),e(Z_,ZCo),e(Z_,gG),e(gG,e3o),e(Z_,o3o),e(y,r3o),e(y,nl),e(nl,gge),e(gge,t3o),e(nl,a3o),e(nl,hG),e(hG,n3o),e(nl,s3o),e(nl,pG),e(pG,l3o),e(nl,i3o),e(y,d3o),e(y,eu),e(eu,hge),e(hge,c3o),e(eu,f3o),e(eu,_G),e(_G,m3o),e(eu,g3o),e(y,h3o),e(y,ou),e(ou,pge),e(pge,p3o),e(ou,_3o),e(ou,uG),e(uG,u3o),e(ou,b3o),e(y,v3o),e(y,ru),e(ru,_ge),e(_ge,F3o),e(ru,T3o),e(ru,bG),e(bG,M3o),e(ru,E3o),e(y,C3o),e(y,tu),e(tu,uge),e(uge,w3o),e(tu,A3o),e(tu,vG),e(vG,L3o),e(tu,y3o),e(y,x3o),e(y,au),e(au,bge),e(bge,$3o),e(au,k3o),e(au,FG),e(FG,S3o),e(au,R3o),e(y,P3o),e(y,nu),e(nu,vge),e(vge,B3o),e(nu,I3o),e(nu,TG),e(TG,N3o),e(nu,q3o),e(y,j3o),e(y,su),e(su,Fge),e(Fge,D3o),e(su,G3o),e(su,MG),e(MG,O3o),e(su,V3o),e(y,X3o),e(y,lu),e(lu,Tge),e(Tge,z3o),e(lu,W3o),e(lu,EG),e(EG,Q3o),e(lu,U3o),e(y,H3o),e(y,iu),e(iu,Mge),e(Mge,J3o),e(iu,Y3o),e(iu,CG),e(CG,K3o),e(iu,Z3o),e(y,e5o),e(y,du),e(du,Ege),e(Ege,o5o),e(du,r5o),e(du,wG),e(wG,t5o),e(du,a5o),e(y,n5o),e(y,cu),e(cu,Cge),e(Cge,s5o),e(cu,l5o),e(cu,AG),e(AG,i5o),e(cu,d5o),e(y,c5o),e(y,fu),e(fu,wge),e(wge,f5o),e(fu,m5o),e(fu,LG),e(LG,g5o),e(fu,h5o),e(y,p5o),e(y,mu),e(mu,Age),e(Age,_5o),e(mu,u5o),e(mu,yG),e(yG,b5o),e(mu,v5o),e(y,F5o),e(y,gu),e(gu,Lge),e(Lge,T5o),e(gu,M5o),e(gu,xG),e(xG,E5o),e(gu,C5o),e(y,w5o),e(y,hu),e(hu,yge),e(yge,A5o),e(hu,L5o),e(hu,$G),e($G,y5o),e(hu,x5o),e(y,$5o),e(y,pu),e(pu,xge),e(xge,k5o),e(pu,S5o),e(pu,kG),e(kG,R5o),e(pu,P5o),e(y,B5o),e(y,_u),e(_u,$ge),e($ge,I5o),e(_u,N5o),e(_u,SG),e(SG,q5o),e(_u,j5o),e(y,D5o),e(y,uu),e(uu,kge),e(kge,G5o),e(uu,O5o),e(uu,RG),e(RG,V5o),e(uu,X5o),e(y,z5o),e(y,bu),e(bu,Sge),e(Sge,W5o),e(bu,Q5o),e(bu,PG),e(PG,U5o),e(bu,H5o),e(y,J5o),e(y,vu),e(vu,Rge),e(Rge,Y5o),e(vu,K5o),e(vu,BG),e(BG,Z5o),e(vu,e0o),e(y,o0o),e(y,Fu),e(Fu,Pge),e(Pge,r0o),e(Fu,t0o),e(Fu,IG),e(IG,a0o),e(Fu,n0o),e(y,s0o),e(y,Tu),e(Tu,Bge),e(Bge,l0o),e(Tu,i0o),e(Tu,NG),e(NG,d0o),e(Tu,c0o),e(y,f0o),e(y,Mu),e(Mu,Ige),e(Ige,m0o),e(Mu,g0o),e(Mu,qG),e(qG,h0o),e(Mu,p0o),e(y,_0o),e(y,Eu),e(Eu,Nge),e(Nge,u0o),e(Eu,b0o),e(Eu,jG),e(jG,v0o),e(Eu,F0o),e(y,T0o),e(y,Cu),e(Cu,qge),e(qge,M0o),e(Cu,E0o),e(Cu,DG),e(DG,C0o),e(Cu,w0o),e(y,A0o),e(y,wu),e(wu,jge),e(jge,L0o),e(wu,y0o),e(wu,GG),e(GG,x0o),e(wu,$0o),e(y,k0o),e(y,Au),e(Au,Dge),e(Dge,S0o),e(Au,R0o),e(Au,OG),e(OG,P0o),e(Au,B0o),e(y,I0o),e(y,Lu),e(Lu,Gge),e(Gge,N0o),e(Lu,q0o),e(Lu,VG),e(VG,j0o),e(Lu,D0o),e(y,G0o),e(y,yu),e(yu,Oge),e(Oge,O0o),e(yu,V0o),e(yu,XG),e(XG,X0o),e(yu,z0o),e(y,W0o),e(y,xu),e(xu,Vge),e(Vge,Q0o),e(xu,U0o),e(xu,zG),e(zG,H0o),e(xu,J0o),e(y,Y0o),e(y,$u),e($u,Xge),e(Xge,K0o),e($u,Z0o),e($u,WG),e(WG,ewo),e($u,owo),e(y,rwo),e(y,ku),e(ku,zge),e(zge,two),e(ku,awo),e(ku,QG),e(QG,nwo),e(ku,swo),e(y,lwo),e(y,Su),e(Su,Wge),e(Wge,iwo),e(Su,dwo),e(Su,UG),e(UG,cwo),e(Su,fwo),e(y,mwo),e(y,Ru),e(Ru,Qge),e(Qge,gwo),e(Ru,hwo),e(Ru,HG),e(HG,pwo),e(Ru,_wo),e(y,uwo),e(y,Pu),e(Pu,Uge),e(Uge,bwo),e(Pu,vwo),e(Pu,JG),e(JG,Fwo),e(Pu,Two),e(y,Mwo),e(y,Bu),e(Bu,Hge),e(Hge,Ewo),e(Bu,Cwo),e(Bu,YG),e(YG,wwo),e(Bu,Awo),e(y,Lwo),e(y,Iu),e(Iu,Jge),e(Jge,ywo),e(Iu,xwo),e(Iu,KG),e(KG,$wo),e(Iu,kwo),e(y,Swo),e(y,Nu),e(Nu,Yge),e(Yge,Rwo),e(Nu,Pwo),e(Nu,ZG),e(ZG,Bwo),e(Nu,Iwo),e(y,Nwo),e(y,qu),e(qu,Kge),e(Kge,qwo),e(qu,jwo),e(qu,eO),e(eO,Dwo),e(qu,Gwo),e(y,Owo),e(y,ju),e(ju,Zge),e(Zge,Vwo),e(ju,Xwo),e(ju,oO),e(oO,zwo),e(ju,Wwo),e(y,Qwo),e(y,Du),e(Du,ehe),e(ehe,Uwo),e(Du,Hwo),e(Du,rO),e(rO,Jwo),e(Du,Ywo),e(y,Kwo),e(y,Gu),e(Gu,ohe),e(ohe,Zwo),e(Gu,eAo),e(Gu,tO),e(tO,oAo),e(Gu,rAo),e(y,tAo),e(y,Ou),e(Ou,rhe),e(rhe,aAo),e(Ou,nAo),e(Ou,aO),e(aO,sAo),e(Ou,lAo),e(y,iAo),e(y,Vu),e(Vu,the),e(the,dAo),e(Vu,cAo),e(Vu,nO),e(nO,fAo),e(Vu,mAo),e(y,gAo),e(y,Xu),e(Xu,ahe),e(ahe,hAo),e(Xu,pAo),e(Xu,sO),e(sO,_Ao),e(Xu,uAo),e(y,bAo),e(y,zu),e(zu,nhe),e(nhe,vAo),e(zu,FAo),e(zu,lO),e(lO,TAo),e(zu,MAo),e(y,EAo),e(y,Wu),e(Wu,she),e(she,CAo),e(Wu,wAo),e(Wu,iO),e(iO,AAo),e(Wu,LAo),e(y,yAo),e(y,Qu),e(Qu,lhe),e(lhe,xAo),e(Qu,$Ao),e(Qu,dO),e(dO,kAo),e(Qu,SAo),e(y,RAo),e(y,Uu),e(Uu,ihe),e(ihe,PAo),e(Uu,BAo),e(Uu,cO),e(cO,IAo),e(Uu,NAo),e(y,qAo),e(y,Hu),e(Hu,dhe),e(dhe,jAo),e(Hu,DAo),e(Hu,fO),e(fO,GAo),e(Hu,OAo),e(y,VAo),e(y,Ju),e(Ju,che),e(che,XAo),e(Ju,zAo),e(Ju,mO),e(mO,WAo),e(Ju,QAo),e(y,UAo),e(y,Yu),e(Yu,fhe),e(fhe,HAo),e(Yu,JAo),e(Yu,gO),e(gO,YAo),e(Yu,KAo),e(y,ZAo),e(y,Ku),e(Ku,mhe),e(mhe,eLo),e(Ku,oLo),e(Ku,hO),e(hO,rLo),e(Ku,tLo),e(y,aLo),e(y,Zu),e(Zu,ghe),e(ghe,nLo),e(Zu,sLo),e(Zu,pO),e(pO,lLo),e(Zu,iLo),e(y,dLo),e(y,e1),e(e1,hhe),e(hhe,cLo),e(e1,fLo),e(e1,_O),e(_O,mLo),e(e1,gLo),e(y,hLo),e(y,o1),e(o1,phe),e(phe,pLo),e(o1,_Lo),e(o1,uO),e(uO,uLo),e(o1,bLo),e(y,vLo),e(y,r1),e(r1,_he),e(_he,FLo),e(r1,TLo),e(r1,bO),e(bO,MLo),e(r1,ELo),e(y,CLo),e(y,t1),e(t1,uhe),e(uhe,wLo),e(t1,ALo),e(t1,vO),e(vO,LLo),e(t1,yLo),e(y,xLo),e(y,a1),e(a1,bhe),e(bhe,$Lo),e(a1,kLo),e(a1,FO),e(FO,SLo),e(a1,RLo),e(y,PLo),e(y,n1),e(n1,vhe),e(vhe,BLo),e(n1,ILo),e(n1,TO),e(TO,NLo),e(n1,qLo),e(y,jLo),e(y,s1),e(s1,Fhe),e(Fhe,DLo),e(s1,GLo),e(s1,MO),e(MO,OLo),e(s1,VLo),e(y,XLo),e(y,l1),e(l1,The),e(The,zLo),e(l1,WLo),e(l1,EO),e(EO,QLo),e(l1,ULo),e(y,HLo),e(y,i1),e(i1,Mhe),e(Mhe,JLo),e(i1,YLo),e(i1,CO),e(CO,KLo),e(i1,ZLo),e(y,eyo),e(y,d1),e(d1,Ehe),e(Ehe,oyo),e(d1,ryo),e(d1,wO),e(wO,tyo),e(d1,ayo),e(y,nyo),e(y,c1),e(c1,Che),e(Che,syo),e(c1,lyo),e(c1,AO),e(AO,iyo),e(c1,dyo),e(y,cyo),e(y,f1),e(f1,whe),e(whe,fyo),e(f1,myo),e(f1,LO),e(LO,gyo),e(f1,hyo),e(y,pyo),e(y,m1),e(m1,Ahe),e(Ahe,_yo),e(m1,uyo),e(m1,yO),e(yO,byo),e(m1,vyo),e(y,Fyo),e(y,g1),e(g1,Lhe),e(Lhe,Tyo),e(g1,Myo),e(g1,xO),e(xO,Eyo),e(g1,Cyo),e(y,wyo),e(y,h1),e(h1,yhe),e(yhe,Ayo),e(h1,Lyo),e(h1,$O),e($O,yyo),e(h1,xyo),e(y,$yo),e(y,p1),e(p1,xhe),e(xhe,kyo),e(p1,Syo),e(p1,kO),e(kO,Ryo),e(p1,Pyo),e(y,Byo),e(y,_1),e(_1,$he),e($he,Iyo),e(_1,Nyo),e(_1,SO),e(SO,qyo),e(_1,jyo),e(y,Dyo),e(y,u1),e(u1,khe),e(khe,Gyo),e(u1,Oyo),e(u1,RO),e(RO,Vyo),e(u1,Xyo),e(y,zyo),e(y,b1),e(b1,She),e(She,Wyo),e(b1,Qyo),e(b1,PO),e(PO,Uyo),e(b1,Hyo),e(y,Jyo),e(y,v1),e(v1,Rhe),e(Rhe,Yyo),e(v1,Kyo),e(v1,BO),e(BO,Zyo),e(v1,exo),e(y,oxo),e(y,F1),e(F1,Phe),e(Phe,rxo),e(F1,txo),e(F1,IO),e(IO,axo),e(F1,nxo),e(y,sxo),e(y,T1),e(T1,Bhe),e(Bhe,lxo),e(T1,ixo),e(T1,NO),e(NO,dxo),e(T1,cxo),e(y,fxo),e(y,M1),e(M1,Ihe),e(Ihe,mxo),e(M1,gxo),e(M1,qO),e(qO,hxo),e(M1,pxo),e(y,_xo),e(y,E1),e(E1,Nhe),e(Nhe,uxo),e(E1,bxo),e(E1,jO),e(jO,vxo),e(E1,Fxo),e(y,Txo),e(y,C1),e(C1,qhe),e(qhe,Mxo),e(C1,Exo),e(C1,DO),e(DO,Cxo),e(C1,wxo),e(y,Axo),e(y,w1),e(w1,jhe),e(jhe,Lxo),e(w1,yxo),e(w1,GO),e(GO,xxo),e(w1,$xo),e(Ye,kxo),e(Ye,A1),e(A1,Sxo),e(A1,Dhe),e(Dhe,Rxo),e(A1,Pxo),e(A1,Ghe),e(Ghe,Bxo),e(Ye,Ixo),M(L1,Ye,null),b(f,oUe,u),b(f,nd,u),e(nd,y1),e(y1,Ohe),M(XL,Ohe,null),e(nd,Nxo),e(nd,Vhe),e(Vhe,qxo),b(f,rUe,u),b(f,Ro,u),M(zL,Ro,null),e(Ro,jxo),e(Ro,sd),e(sd,Dxo),e(sd,OO),e(OO,Gxo),e(sd,Oxo),e(sd,VO),e(VO,Vxo),e(sd,Xxo),e(Ro,zxo),e(Ro,WL),e(WL,Wxo),e(WL,Xhe),e(Xhe,Qxo),e(WL,Uxo),e(Ro,Hxo),e(Ro,gt),M(QL,gt,null),e(gt,Jxo),e(gt,zhe),e(zhe,Yxo),e(gt,Kxo),e(gt,ld),e(ld,Zxo),e(ld,Whe),e(Whe,e$o),e(ld,o$o),e(ld,XO),e(XO,r$o),e(ld,t$o),e(gt,a$o),M(x1,gt,null),e(Ro,n$o),e(Ro,Ke),M(UL,Ke,null),e(Ke,s$o),e(Ke,Qhe),e(Qhe,l$o),e(Ke,i$o),e(Ke,Xa),e(Xa,d$o),e(Xa,Uhe),e(Uhe,c$o),e(Xa,f$o),e(Xa,Hhe),e(Hhe,m$o),e(Xa,g$o),e(Xa,Jhe),e(Jhe,h$o),e(Xa,p$o),e(Ke,_$o),e(Ke,G),e(G,$1),e($1,Yhe),e(Yhe,u$o),e($1,b$o),e($1,zO),e(zO,v$o),e($1,F$o),e(G,T$o),e(G,k1),e(k1,Khe),e(Khe,M$o),e(k1,E$o),e(k1,WO),e(WO,C$o),e(k1,w$o),e(G,A$o),e(G,S1),e(S1,Zhe),e(Zhe,L$o),e(S1,y$o),e(S1,QO),e(QO,x$o),e(S1,$$o),e(G,k$o),e(G,R1),e(R1,epe),e(epe,S$o),e(R1,R$o),e(R1,UO),e(UO,P$o),e(R1,B$o),e(G,I$o),e(G,P1),e(P1,ope),e(ope,N$o),e(P1,q$o),e(P1,HO),e(HO,j$o),e(P1,D$o),e(G,G$o),e(G,B1),e(B1,rpe),e(rpe,O$o),e(B1,V$o),e(B1,JO),e(JO,X$o),e(B1,z$o),e(G,W$o),e(G,I1),e(I1,tpe),e(tpe,Q$o),e(I1,U$o),e(I1,YO),e(YO,H$o),e(I1,J$o),e(G,Y$o),e(G,N1),e(N1,ape),e(ape,K$o),e(N1,Z$o),e(N1,KO),e(KO,eko),e(N1,oko),e(G,rko),e(G,q1),e(q1,npe),e(npe,tko),e(q1,ako),e(q1,ZO),e(ZO,nko),e(q1,sko),e(G,lko),e(G,j1),e(j1,spe),e(spe,iko),e(j1,dko),e(j1,eV),e(eV,cko),e(j1,fko),e(G,mko),e(G,D1),e(D1,lpe),e(lpe,gko),e(D1,hko),e(D1,oV),e(oV,pko),e(D1,_ko),e(G,uko),e(G,G1),e(G1,ipe),e(ipe,bko),e(G1,vko),e(G1,rV),e(rV,Fko),e(G1,Tko),e(G,Mko),e(G,O1),e(O1,dpe),e(dpe,Eko),e(O1,Cko),e(O1,tV),e(tV,wko),e(O1,Ako),e(G,Lko),e(G,V1),e(V1,cpe),e(cpe,yko),e(V1,xko),e(V1,aV),e(aV,$ko),e(V1,kko),e(G,Sko),e(G,X1),e(X1,fpe),e(fpe,Rko),e(X1,Pko),e(X1,nV),e(nV,Bko),e(X1,Iko),e(G,Nko),e(G,z1),e(z1,mpe),e(mpe,qko),e(z1,jko),e(z1,sV),e(sV,Dko),e(z1,Gko),e(G,Oko),e(G,W1),e(W1,gpe),e(gpe,Vko),e(W1,Xko),e(W1,lV),e(lV,zko),e(W1,Wko),e(G,Qko),e(G,Q1),e(Q1,hpe),e(hpe,Uko),e(Q1,Hko),e(Q1,iV),e(iV,Jko),e(Q1,Yko),e(G,Kko),e(G,U1),e(U1,ppe),e(ppe,Zko),e(U1,eSo),e(U1,dV),e(dV,oSo),e(U1,rSo),e(G,tSo),e(G,H1),e(H1,_pe),e(_pe,aSo),e(H1,nSo),e(H1,cV),e(cV,sSo),e(H1,lSo),e(G,iSo),e(G,J1),e(J1,upe),e(upe,dSo),e(J1,cSo),e(J1,fV),e(fV,fSo),e(J1,mSo),e(G,gSo),e(G,Y1),e(Y1,bpe),e(bpe,hSo),e(Y1,pSo),e(Y1,mV),e(mV,_So),e(Y1,uSo),e(G,bSo),e(G,K1),e(K1,vpe),e(vpe,vSo),e(K1,FSo),e(K1,gV),e(gV,TSo),e(K1,MSo),e(G,ESo),e(G,Z1),e(Z1,Fpe),e(Fpe,CSo),e(Z1,wSo),e(Z1,hV),e(hV,ASo),e(Z1,LSo),e(G,ySo),e(G,e2),e(e2,Tpe),e(Tpe,xSo),e(e2,$So),e(e2,pV),e(pV,kSo),e(e2,SSo),e(G,RSo),e(G,o2),e(o2,Mpe),e(Mpe,PSo),e(o2,BSo),e(o2,_V),e(_V,ISo),e(o2,NSo),e(G,qSo),e(G,r2),e(r2,Epe),e(Epe,jSo),e(r2,DSo),e(r2,uV),e(uV,GSo),e(r2,OSo),e(G,VSo),e(G,t2),e(t2,Cpe),e(Cpe,XSo),e(t2,zSo),e(t2,bV),e(bV,WSo),e(t2,QSo),e(G,USo),e(G,a2),e(a2,wpe),e(wpe,HSo),e(a2,JSo),e(a2,vV),e(vV,YSo),e(a2,KSo),e(G,ZSo),e(G,n2),e(n2,Ape),e(Ape,eRo),e(n2,oRo),e(n2,FV),e(FV,rRo),e(n2,tRo),e(G,aRo),e(G,s2),e(s2,Lpe),e(Lpe,nRo),e(s2,sRo),e(s2,TV),e(TV,lRo),e(s2,iRo),e(G,dRo),e(G,l2),e(l2,ype),e(ype,cRo),e(l2,fRo),e(l2,MV),e(MV,mRo),e(l2,gRo),e(G,hRo),e(G,i2),e(i2,xpe),e(xpe,pRo),e(i2,_Ro),e(i2,EV),e(EV,uRo),e(i2,bRo),e(G,vRo),e(G,d2),e(d2,$pe),e($pe,FRo),e(d2,TRo),e(d2,CV),e(CV,MRo),e(d2,ERo),e(G,CRo),e(G,c2),e(c2,kpe),e(kpe,wRo),e(c2,ARo),e(c2,wV),e(wV,LRo),e(c2,yRo),e(G,xRo),e(G,f2),e(f2,Spe),e(Spe,$Ro),e(f2,kRo),e(f2,AV),e(AV,SRo),e(f2,RRo),e(G,PRo),e(G,m2),e(m2,Rpe),e(Rpe,BRo),e(m2,IRo),e(m2,LV),e(LV,NRo),e(m2,qRo),e(G,jRo),e(G,g2),e(g2,Ppe),e(Ppe,DRo),e(g2,GRo),e(g2,yV),e(yV,ORo),e(g2,VRo),e(G,XRo),e(G,h2),e(h2,Bpe),e(Bpe,zRo),e(h2,WRo),e(h2,xV),e(xV,QRo),e(h2,URo),e(G,HRo),e(G,p2),e(p2,Ipe),e(Ipe,JRo),e(p2,YRo),e(p2,$V),e($V,KRo),e(p2,ZRo),e(G,ePo),e(G,_2),e(_2,Npe),e(Npe,oPo),e(_2,rPo),e(_2,kV),e(kV,tPo),e(_2,aPo),e(G,nPo),e(G,u2),e(u2,qpe),e(qpe,sPo),e(u2,lPo),e(u2,SV),e(SV,iPo),e(u2,dPo),e(G,cPo),e(G,b2),e(b2,jpe),e(jpe,fPo),e(b2,mPo),e(b2,RV),e(RV,gPo),e(b2,hPo),e(G,pPo),e(G,v2),e(v2,Dpe),e(Dpe,_Po),e(v2,uPo),e(v2,PV),e(PV,bPo),e(v2,vPo),e(G,FPo),e(G,F2),e(F2,Gpe),e(Gpe,TPo),e(F2,MPo),e(F2,BV),e(BV,EPo),e(F2,CPo),e(G,wPo),e(G,T2),e(T2,Ope),e(Ope,APo),e(T2,LPo),e(T2,IV),e(IV,yPo),e(T2,xPo),e(G,$Po),e(G,M2),e(M2,Vpe),e(Vpe,kPo),e(M2,SPo),e(M2,NV),e(NV,RPo),e(M2,PPo),e(Ke,BPo),e(Ke,E2),e(E2,IPo),e(E2,Xpe),e(Xpe,NPo),e(E2,qPo),e(E2,zpe),e(zpe,jPo),e(Ke,DPo),M(C2,Ke,null),b(f,tUe,u),b(f,id,u),e(id,w2),e(w2,Wpe),M(HL,Wpe,null),e(id,GPo),e(id,Qpe),e(Qpe,OPo),b(f,aUe,u),b(f,Po,u),M(JL,Po,null),e(Po,VPo),e(Po,dd),e(dd,XPo),e(dd,qV),e(qV,zPo),e(dd,WPo),e(dd,jV),e(jV,QPo),e(dd,UPo),e(Po,HPo),e(Po,YL),e(YL,JPo),e(YL,Upe),e(Upe,YPo),e(YL,KPo),e(Po,ZPo),e(Po,ht),M(KL,ht,null),e(ht,eBo),e(ht,Hpe),e(Hpe,oBo),e(ht,rBo),e(ht,cd),e(cd,tBo),e(cd,Jpe),e(Jpe,aBo),e(cd,nBo),e(cd,DV),e(DV,sBo),e(cd,lBo),e(ht,iBo),M(A2,ht,null),e(Po,dBo),e(Po,Ze),M(ZL,Ze,null),e(Ze,cBo),e(Ze,Ype),e(Ype,fBo),e(Ze,mBo),e(Ze,za),e(za,gBo),e(za,Kpe),e(Kpe,hBo),e(za,pBo),e(za,Zpe),e(Zpe,_Bo),e(za,uBo),e(za,e_e),e(e_e,bBo),e(za,vBo),e(Ze,FBo),e(Ze,z),e(z,L2),e(L2,o_e),e(o_e,TBo),e(L2,MBo),e(L2,GV),e(GV,EBo),e(L2,CBo),e(z,wBo),e(z,y2),e(y2,r_e),e(r_e,ABo),e(y2,LBo),e(y2,OV),e(OV,yBo),e(y2,xBo),e(z,$Bo),e(z,x2),e(x2,t_e),e(t_e,kBo),e(x2,SBo),e(x2,VV),e(VV,RBo),e(x2,PBo),e(z,BBo),e(z,$2),e($2,a_e),e(a_e,IBo),e($2,NBo),e($2,XV),e(XV,qBo),e($2,jBo),e(z,DBo),e(z,k2),e(k2,n_e),e(n_e,GBo),e(k2,OBo),e(k2,zV),e(zV,VBo),e(k2,XBo),e(z,zBo),e(z,S2),e(S2,s_e),e(s_e,WBo),e(S2,QBo),e(S2,WV),e(WV,UBo),e(S2,HBo),e(z,JBo),e(z,R2),e(R2,l_e),e(l_e,YBo),e(R2,KBo),e(R2,QV),e(QV,ZBo),e(R2,eIo),e(z,oIo),e(z,P2),e(P2,i_e),e(i_e,rIo),e(P2,tIo),e(P2,UV),e(UV,aIo),e(P2,nIo),e(z,sIo),e(z,B2),e(B2,d_e),e(d_e,lIo),e(B2,iIo),e(B2,HV),e(HV,dIo),e(B2,cIo),e(z,fIo),e(z,I2),e(I2,c_e),e(c_e,mIo),e(I2,gIo),e(I2,JV),e(JV,hIo),e(I2,pIo),e(z,_Io),e(z,N2),e(N2,f_e),e(f_e,uIo),e(N2,bIo),e(N2,YV),e(YV,vIo),e(N2,FIo),e(z,TIo),e(z,q2),e(q2,m_e),e(m_e,MIo),e(q2,EIo),e(q2,KV),e(KV,CIo),e(q2,wIo),e(z,AIo),e(z,j2),e(j2,g_e),e(g_e,LIo),e(j2,yIo),e(j2,ZV),e(ZV,xIo),e(j2,$Io),e(z,kIo),e(z,D2),e(D2,h_e),e(h_e,SIo),e(D2,RIo),e(D2,eX),e(eX,PIo),e(D2,BIo),e(z,IIo),e(z,G2),e(G2,p_e),e(p_e,NIo),e(G2,qIo),e(G2,oX),e(oX,jIo),e(G2,DIo),e(z,GIo),e(z,O2),e(O2,__e),e(__e,OIo),e(O2,VIo),e(O2,rX),e(rX,XIo),e(O2,zIo),e(z,WIo),e(z,V2),e(V2,u_e),e(u_e,QIo),e(V2,UIo),e(V2,tX),e(tX,HIo),e(V2,JIo),e(z,YIo),e(z,X2),e(X2,b_e),e(b_e,KIo),e(X2,ZIo),e(X2,aX),e(aX,eNo),e(X2,oNo),e(z,rNo),e(z,z2),e(z2,v_e),e(v_e,tNo),e(z2,aNo),e(z2,nX),e(nX,nNo),e(z2,sNo),e(z,lNo),e(z,W2),e(W2,F_e),e(F_e,iNo),e(W2,dNo),e(W2,sX),e(sX,cNo),e(W2,fNo),e(z,mNo),e(z,Q2),e(Q2,T_e),e(T_e,gNo),e(Q2,hNo),e(Q2,lX),e(lX,pNo),e(Q2,_No),e(z,uNo),e(z,U2),e(U2,M_e),e(M_e,bNo),e(U2,vNo),e(U2,iX),e(iX,FNo),e(U2,TNo),e(z,MNo),e(z,H2),e(H2,E_e),e(E_e,ENo),e(H2,CNo),e(H2,dX),e(dX,wNo),e(H2,ANo),e(z,LNo),e(z,J2),e(J2,C_e),e(C_e,yNo),e(J2,xNo),e(J2,cX),e(cX,$No),e(J2,kNo),e(z,SNo),e(z,Y2),e(Y2,w_e),e(w_e,RNo),e(Y2,PNo),e(Y2,fX),e(fX,BNo),e(Y2,INo),e(z,NNo),e(z,K2),e(K2,A_e),e(A_e,qNo),e(K2,jNo),e(K2,mX),e(mX,DNo),e(K2,GNo),e(z,ONo),e(z,Z2),e(Z2,L_e),e(L_e,VNo),e(Z2,XNo),e(Z2,gX),e(gX,zNo),e(Z2,WNo),e(z,QNo),e(z,eb),e(eb,y_e),e(y_e,UNo),e(eb,HNo),e(eb,hX),e(hX,JNo),e(eb,YNo),e(z,KNo),e(z,ob),e(ob,x_e),e(x_e,ZNo),e(ob,eqo),e(ob,pX),e(pX,oqo),e(ob,rqo),e(z,tqo),e(z,rb),e(rb,$_e),e($_e,aqo),e(rb,nqo),e(rb,_X),e(_X,sqo),e(rb,lqo),e(z,iqo),e(z,tb),e(tb,k_e),e(k_e,dqo),e(tb,cqo),e(tb,uX),e(uX,fqo),e(tb,mqo),e(z,gqo),e(z,ab),e(ab,S_e),e(S_e,hqo),e(ab,pqo),e(ab,bX),e(bX,_qo),e(ab,uqo),e(z,bqo),e(z,nb),e(nb,R_e),e(R_e,vqo),e(nb,Fqo),e(nb,vX),e(vX,Tqo),e(nb,Mqo),e(z,Eqo),e(z,sb),e(sb,P_e),e(P_e,Cqo),e(sb,wqo),e(sb,FX),e(FX,Aqo),e(sb,Lqo),e(z,yqo),e(z,lb),e(lb,B_e),e(B_e,xqo),e(lb,$qo),e(lb,TX),e(TX,kqo),e(lb,Sqo),e(z,Rqo),e(z,ib),e(ib,I_e),e(I_e,Pqo),e(ib,Bqo),e(ib,MX),e(MX,Iqo),e(ib,Nqo),e(z,qqo),e(z,db),e(db,N_e),e(N_e,jqo),e(db,Dqo),e(db,EX),e(EX,Gqo),e(db,Oqo),e(z,Vqo),e(z,cb),e(cb,q_e),e(q_e,Xqo),e(cb,zqo),e(cb,CX),e(CX,Wqo),e(cb,Qqo),e(z,Uqo),e(z,fb),e(fb,j_e),e(j_e,Hqo),e(fb,Jqo),e(fb,wX),e(wX,Yqo),e(fb,Kqo),e(z,Zqo),e(z,mb),e(mb,D_e),e(D_e,ejo),e(mb,ojo),e(mb,AX),e(AX,rjo),e(mb,tjo),e(Ze,ajo),e(Ze,gb),e(gb,njo),e(gb,G_e),e(G_e,sjo),e(gb,ljo),e(gb,O_e),e(O_e,ijo),e(Ze,djo),M(hb,Ze,null),b(f,nUe,u),b(f,fd,u),e(fd,pb),e(pb,V_e),M(ey,V_e,null),e(fd,cjo),e(fd,X_e),e(X_e,fjo),b(f,sUe,u),b(f,Bo,u),M(oy,Bo,null),e(Bo,mjo),e(Bo,md),e(md,gjo),e(md,LX),e(LX,hjo),e(md,pjo),e(md,yX),e(yX,_jo),e(md,ujo),e(Bo,bjo),e(Bo,ry),e(ry,vjo),e(ry,z_e),e(z_e,Fjo),e(ry,Tjo),e(Bo,Mjo),e(Bo,pt),M(ty,pt,null),e(pt,Ejo),e(pt,W_e),e(W_e,Cjo),e(pt,wjo),e(pt,gd),e(gd,Ajo),e(gd,Q_e),e(Q_e,Ljo),e(gd,yjo),e(gd,xX),e(xX,xjo),e(gd,$jo),e(pt,kjo),M(_b,pt,null),e(Bo,Sjo),e(Bo,eo),M(ay,eo,null),e(eo,Rjo),e(eo,U_e),e(U_e,Pjo),e(eo,Bjo),e(eo,Wa),e(Wa,Ijo),e(Wa,H_e),e(H_e,Njo),e(Wa,qjo),e(Wa,J_e),e(J_e,jjo),e(Wa,Djo),e(Wa,Y_e),e(Y_e,Gjo),e(Wa,Ojo),e(eo,Vjo),e(eo,U),e(U,ub),e(ub,K_e),e(K_e,Xjo),e(ub,zjo),e(ub,$X),e($X,Wjo),e(ub,Qjo),e(U,Ujo),e(U,bb),e(bb,Z_e),e(Z_e,Hjo),e(bb,Jjo),e(bb,kX),e(kX,Yjo),e(bb,Kjo),e(U,Zjo),e(U,vb),e(vb,eue),e(eue,eDo),e(vb,oDo),e(vb,SX),e(SX,rDo),e(vb,tDo),e(U,aDo),e(U,Fb),e(Fb,oue),e(oue,nDo),e(Fb,sDo),e(Fb,RX),e(RX,lDo),e(Fb,iDo),e(U,dDo),e(U,Tb),e(Tb,rue),e(rue,cDo),e(Tb,fDo),e(Tb,PX),e(PX,mDo),e(Tb,gDo),e(U,hDo),e(U,Mb),e(Mb,tue),e(tue,pDo),e(Mb,_Do),e(Mb,BX),e(BX,uDo),e(Mb,bDo),e(U,vDo),e(U,Eb),e(Eb,aue),e(aue,FDo),e(Eb,TDo),e(Eb,IX),e(IX,MDo),e(Eb,EDo),e(U,CDo),e(U,Cb),e(Cb,nue),e(nue,wDo),e(Cb,ADo),e(Cb,NX),e(NX,LDo),e(Cb,yDo),e(U,xDo),e(U,wb),e(wb,sue),e(sue,$Do),e(wb,kDo),e(wb,qX),e(qX,SDo),e(wb,RDo),e(U,PDo),e(U,Ab),e(Ab,lue),e(lue,BDo),e(Ab,IDo),e(Ab,jX),e(jX,NDo),e(Ab,qDo),e(U,jDo),e(U,Lb),e(Lb,iue),e(iue,DDo),e(Lb,GDo),e(Lb,DX),e(DX,ODo),e(Lb,VDo),e(U,XDo),e(U,yb),e(yb,due),e(due,zDo),e(yb,WDo),e(yb,GX),e(GX,QDo),e(yb,UDo),e(U,HDo),e(U,xb),e(xb,cue),e(cue,JDo),e(xb,YDo),e(xb,OX),e(OX,KDo),e(xb,ZDo),e(U,eGo),e(U,$b),e($b,fue),e(fue,oGo),e($b,rGo),e($b,VX),e(VX,tGo),e($b,aGo),e(U,nGo),e(U,kb),e(kb,mue),e(mue,sGo),e(kb,lGo),e(kb,XX),e(XX,iGo),e(kb,dGo),e(U,cGo),e(U,Sb),e(Sb,gue),e(gue,fGo),e(Sb,mGo),e(Sb,zX),e(zX,gGo),e(Sb,hGo),e(U,pGo),e(U,Rb),e(Rb,hue),e(hue,_Go),e(Rb,uGo),e(Rb,WX),e(WX,bGo),e(Rb,vGo),e(U,FGo),e(U,Pb),e(Pb,pue),e(pue,TGo),e(Pb,MGo),e(Pb,QX),e(QX,EGo),e(Pb,CGo),e(U,wGo),e(U,Bb),e(Bb,_ue),e(_ue,AGo),e(Bb,LGo),e(Bb,UX),e(UX,yGo),e(Bb,xGo),e(U,$Go),e(U,Ib),e(Ib,uue),e(uue,kGo),e(Ib,SGo),e(Ib,HX),e(HX,RGo),e(Ib,PGo),e(U,BGo),e(U,Nb),e(Nb,bue),e(bue,IGo),e(Nb,NGo),e(Nb,JX),e(JX,qGo),e(Nb,jGo),e(U,DGo),e(U,qb),e(qb,vue),e(vue,GGo),e(qb,OGo),e(qb,YX),e(YX,VGo),e(qb,XGo),e(U,zGo),e(U,jb),e(jb,Fue),e(Fue,WGo),e(jb,QGo),e(jb,KX),e(KX,UGo),e(jb,HGo),e(U,JGo),e(U,Db),e(Db,Tue),e(Tue,YGo),e(Db,KGo),e(Db,ZX),e(ZX,ZGo),e(Db,eOo),e(U,oOo),e(U,Gb),e(Gb,Mue),e(Mue,rOo),e(Gb,tOo),e(Gb,ez),e(ez,aOo),e(Gb,nOo),e(U,sOo),e(U,Ob),e(Ob,Eue),e(Eue,lOo),e(Ob,iOo),e(Ob,oz),e(oz,dOo),e(Ob,cOo),e(U,fOo),e(U,Vb),e(Vb,Cue),e(Cue,mOo),e(Vb,gOo),e(Vb,rz),e(rz,hOo),e(Vb,pOo),e(U,_Oo),e(U,Xb),e(Xb,wue),e(wue,uOo),e(Xb,bOo),e(Xb,tz),e(tz,vOo),e(Xb,FOo),e(U,TOo),e(U,zb),e(zb,Aue),e(Aue,MOo),e(zb,EOo),e(zb,az),e(az,COo),e(zb,wOo),e(U,AOo),e(U,Wb),e(Wb,Lue),e(Lue,LOo),e(Wb,yOo),e(Wb,nz),e(nz,xOo),e(Wb,$Oo),e(U,kOo),e(U,Qb),e(Qb,yue),e(yue,SOo),e(Qb,ROo),e(Qb,sz),e(sz,POo),e(Qb,BOo),e(U,IOo),e(U,Ub),e(Ub,xue),e(xue,NOo),e(Ub,qOo),e(Ub,lz),e(lz,jOo),e(Ub,DOo),e(U,GOo),e(U,Hb),e(Hb,$ue),e($ue,OOo),e(Hb,VOo),e(Hb,iz),e(iz,XOo),e(Hb,zOo),e(U,WOo),e(U,Jb),e(Jb,kue),e(kue,QOo),e(Jb,UOo),e(Jb,Sue),e(Sue,HOo),e(Jb,JOo),e(U,YOo),e(U,Yb),e(Yb,Rue),e(Rue,KOo),e(Yb,ZOo),e(Yb,dz),e(dz,eVo),e(Yb,oVo),e(U,rVo),e(U,Kb),e(Kb,Pue),e(Pue,tVo),e(Kb,aVo),e(Kb,cz),e(cz,nVo),e(Kb,sVo),e(U,lVo),e(U,Zb),e(Zb,Bue),e(Bue,iVo),e(Zb,dVo),e(Zb,fz),e(fz,cVo),e(Zb,fVo),e(U,mVo),e(U,ev),e(ev,Iue),e(Iue,gVo),e(ev,hVo),e(ev,mz),e(mz,pVo),e(ev,_Vo),e(eo,uVo),e(eo,ov),e(ov,bVo),e(ov,Nue),e(Nue,vVo),e(ov,FVo),e(ov,que),e(que,TVo),e(eo,MVo),M(rv,eo,null),b(f,lUe,u),b(f,hd,u),e(hd,tv),e(tv,jue),M(ny,jue,null),e(hd,EVo),e(hd,Due),e(Due,CVo),b(f,iUe,u),b(f,Io,u),M(sy,Io,null),e(Io,wVo),e(Io,pd),e(pd,AVo),e(pd,gz),e(gz,LVo),e(pd,yVo),e(pd,hz),e(hz,xVo),e(pd,$Vo),e(Io,kVo),e(Io,ly),e(ly,SVo),e(ly,Gue),e(Gue,RVo),e(ly,PVo),e(Io,BVo),e(Io,_t),M(iy,_t,null),e(_t,IVo),e(_t,Oue),e(Oue,NVo),e(_t,qVo),e(_t,_d),e(_d,jVo),e(_d,Vue),e(Vue,DVo),e(_d,GVo),e(_d,pz),e(pz,OVo),e(_d,VVo),e(_t,XVo),M(av,_t,null),e(Io,zVo),e(Io,oo),M(dy,oo,null),e(oo,WVo),e(oo,Xue),e(Xue,QVo),e(oo,UVo),e(oo,Qa),e(Qa,HVo),e(Qa,zue),e(zue,JVo),e(Qa,YVo),e(Qa,Wue),e(Wue,KVo),e(Qa,ZVo),e(Qa,Que),e(Que,eXo),e(Qa,oXo),e(oo,rXo),e(oo,me),e(me,nv),e(nv,Uue),e(Uue,tXo),e(nv,aXo),e(nv,_z),e(_z,nXo),e(nv,sXo),e(me,lXo),e(me,sv),e(sv,Hue),e(Hue,iXo),e(sv,dXo),e(sv,uz),e(uz,cXo),e(sv,fXo),e(me,mXo),e(me,lv),e(lv,Jue),e(Jue,gXo),e(lv,hXo),e(lv,bz),e(bz,pXo),e(lv,_Xo),e(me,uXo),e(me,iv),e(iv,Yue),e(Yue,bXo),e(iv,vXo),e(iv,vz),e(vz,FXo),e(iv,TXo),e(me,MXo),e(me,dv),e(dv,Kue),e(Kue,EXo),e(dv,CXo),e(dv,Fz),e(Fz,wXo),e(dv,AXo),e(me,LXo),e(me,cv),e(cv,Zue),e(Zue,yXo),e(cv,xXo),e(cv,Tz),e(Tz,$Xo),e(cv,kXo),e(me,SXo),e(me,fv),e(fv,e1e),e(e1e,RXo),e(fv,PXo),e(fv,Mz),e(Mz,BXo),e(fv,IXo),e(me,NXo),e(me,mv),e(mv,o1e),e(o1e,qXo),e(mv,jXo),e(mv,Ez),e(Ez,DXo),e(mv,GXo),e(me,OXo),e(me,gv),e(gv,r1e),e(r1e,VXo),e(gv,XXo),e(gv,Cz),e(Cz,zXo),e(gv,WXo),e(me,QXo),e(me,hv),e(hv,t1e),e(t1e,UXo),e(hv,HXo),e(hv,wz),e(wz,JXo),e(hv,YXo),e(me,KXo),e(me,pv),e(pv,a1e),e(a1e,ZXo),e(pv,ezo),e(pv,Az),e(Az,ozo),e(pv,rzo),e(me,tzo),e(me,_v),e(_v,n1e),e(n1e,azo),e(_v,nzo),e(_v,Lz),e(Lz,szo),e(_v,lzo),e(me,izo),e(me,uv),e(uv,s1e),e(s1e,dzo),e(uv,czo),e(uv,yz),e(yz,fzo),e(uv,mzo),e(me,gzo),e(me,bv),e(bv,l1e),e(l1e,hzo),e(bv,pzo),e(bv,xz),e(xz,_zo),e(bv,uzo),e(me,bzo),e(me,vv),e(vv,i1e),e(i1e,vzo),e(vv,Fzo),e(vv,$z),e($z,Tzo),e(vv,Mzo),e(me,Ezo),e(me,Fv),e(Fv,d1e),e(d1e,Czo),e(Fv,wzo),e(Fv,kz),e(kz,Azo),e(Fv,Lzo),e(me,yzo),e(me,Tv),e(Tv,c1e),e(c1e,xzo),e(Tv,$zo),e(Tv,Sz),e(Sz,kzo),e(Tv,Szo),e(me,Rzo),e(me,Mv),e(Mv,f1e),e(f1e,Pzo),e(Mv,Bzo),e(Mv,Rz),e(Rz,Izo),e(Mv,Nzo),e(me,qzo),e(me,Ev),e(Ev,m1e),e(m1e,jzo),e(Ev,Dzo),e(Ev,Pz),e(Pz,Gzo),e(Ev,Ozo),e(oo,Vzo),e(oo,Cv),e(Cv,Xzo),e(Cv,g1e),e(g1e,zzo),e(Cv,Wzo),e(Cv,h1e),e(h1e,Qzo),e(oo,Uzo),M(wv,oo,null),b(f,dUe,u),b(f,ud,u),e(ud,Av),e(Av,p1e),M(cy,p1e,null),e(ud,Hzo),e(ud,_1e),e(_1e,Jzo),b(f,cUe,u),b(f,No,u),M(fy,No,null),e(No,Yzo),e(No,bd),e(bd,Kzo),e(bd,Bz),e(Bz,Zzo),e(bd,eWo),e(bd,Iz),e(Iz,oWo),e(bd,rWo),e(No,tWo),e(No,my),e(my,aWo),e(my,u1e),e(u1e,nWo),e(my,sWo),e(No,lWo),e(No,ut),M(gy,ut,null),e(ut,iWo),e(ut,b1e),e(b1e,dWo),e(ut,cWo),e(ut,vd),e(vd,fWo),e(vd,v1e),e(v1e,mWo),e(vd,gWo),e(vd,Nz),e(Nz,hWo),e(vd,pWo),e(ut,_Wo),M(Lv,ut,null),e(No,uWo),e(No,ro),M(hy,ro,null),e(ro,bWo),e(ro,F1e),e(F1e,vWo),e(ro,FWo),e(ro,Ua),e(Ua,TWo),e(Ua,T1e),e(T1e,MWo),e(Ua,EWo),e(Ua,M1e),e(M1e,CWo),e(Ua,wWo),e(Ua,E1e),e(E1e,AWo),e(Ua,LWo),e(ro,yWo),e(ro,N),e(N,yv),e(yv,C1e),e(C1e,xWo),e(yv,$Wo),e(yv,qz),e(qz,kWo),e(yv,SWo),e(N,RWo),e(N,xv),e(xv,w1e),e(w1e,PWo),e(xv,BWo),e(xv,jz),e(jz,IWo),e(xv,NWo),e(N,qWo),e(N,$v),e($v,A1e),e(A1e,jWo),e($v,DWo),e($v,Dz),e(Dz,GWo),e($v,OWo),e(N,VWo),e(N,kv),e(kv,L1e),e(L1e,XWo),e(kv,zWo),e(kv,Gz),e(Gz,WWo),e(kv,QWo),e(N,UWo),e(N,Sv),e(Sv,y1e),e(y1e,HWo),e(Sv,JWo),e(Sv,Oz),e(Oz,YWo),e(Sv,KWo),e(N,ZWo),e(N,Rv),e(Rv,x1e),e(x1e,eQo),e(Rv,oQo),e(Rv,Vz),e(Vz,rQo),e(Rv,tQo),e(N,aQo),e(N,Pv),e(Pv,$1e),e($1e,nQo),e(Pv,sQo),e(Pv,Xz),e(Xz,lQo),e(Pv,iQo),e(N,dQo),e(N,Bv),e(Bv,k1e),e(k1e,cQo),e(Bv,fQo),e(Bv,zz),e(zz,mQo),e(Bv,gQo),e(N,hQo),e(N,Iv),e(Iv,S1e),e(S1e,pQo),e(Iv,_Qo),e(Iv,Wz),e(Wz,uQo),e(Iv,bQo),e(N,vQo),e(N,Nv),e(Nv,R1e),e(R1e,FQo),e(Nv,TQo),e(Nv,Qz),e(Qz,MQo),e(Nv,EQo),e(N,CQo),e(N,qv),e(qv,P1e),e(P1e,wQo),e(qv,AQo),e(qv,Uz),e(Uz,LQo),e(qv,yQo),e(N,xQo),e(N,jv),e(jv,B1e),e(B1e,$Qo),e(jv,kQo),e(jv,Hz),e(Hz,SQo),e(jv,RQo),e(N,PQo),e(N,Dv),e(Dv,I1e),e(I1e,BQo),e(Dv,IQo),e(Dv,Jz),e(Jz,NQo),e(Dv,qQo),e(N,jQo),e(N,Gv),e(Gv,N1e),e(N1e,DQo),e(Gv,GQo),e(Gv,Yz),e(Yz,OQo),e(Gv,VQo),e(N,XQo),e(N,Ov),e(Ov,q1e),e(q1e,zQo),e(Ov,WQo),e(Ov,Kz),e(Kz,QQo),e(Ov,UQo),e(N,HQo),e(N,Vv),e(Vv,j1e),e(j1e,JQo),e(Vv,YQo),e(Vv,Zz),e(Zz,KQo),e(Vv,ZQo),e(N,eUo),e(N,Xv),e(Xv,D1e),e(D1e,oUo),e(Xv,rUo),e(Xv,eW),e(eW,tUo),e(Xv,aUo),e(N,nUo),e(N,zv),e(zv,G1e),e(G1e,sUo),e(zv,lUo),e(zv,oW),e(oW,iUo),e(zv,dUo),e(N,cUo),e(N,Wv),e(Wv,O1e),e(O1e,fUo),e(Wv,mUo),e(Wv,rW),e(rW,gUo),e(Wv,hUo),e(N,pUo),e(N,Qv),e(Qv,V1e),e(V1e,_Uo),e(Qv,uUo),e(Qv,tW),e(tW,bUo),e(Qv,vUo),e(N,FUo),e(N,Uv),e(Uv,X1e),e(X1e,TUo),e(Uv,MUo),e(Uv,aW),e(aW,EUo),e(Uv,CUo),e(N,wUo),e(N,Hv),e(Hv,z1e),e(z1e,AUo),e(Hv,LUo),e(Hv,nW),e(nW,yUo),e(Hv,xUo),e(N,$Uo),e(N,Jv),e(Jv,W1e),e(W1e,kUo),e(Jv,SUo),e(Jv,sW),e(sW,RUo),e(Jv,PUo),e(N,BUo),e(N,Yv),e(Yv,Q1e),e(Q1e,IUo),e(Yv,NUo),e(Yv,lW),e(lW,qUo),e(Yv,jUo),e(N,DUo),e(N,Kv),e(Kv,U1e),e(U1e,GUo),e(Kv,OUo),e(Kv,iW),e(iW,VUo),e(Kv,XUo),e(N,zUo),e(N,Zv),e(Zv,H1e),e(H1e,WUo),e(Zv,QUo),e(Zv,dW),e(dW,UUo),e(Zv,HUo),e(N,JUo),e(N,e6),e(e6,J1e),e(J1e,YUo),e(e6,KUo),e(e6,cW),e(cW,ZUo),e(e6,eHo),e(N,oHo),e(N,o6),e(o6,Y1e),e(Y1e,rHo),e(o6,tHo),e(o6,fW),e(fW,aHo),e(o6,nHo),e(N,sHo),e(N,r6),e(r6,K1e),e(K1e,lHo),e(r6,iHo),e(r6,mW),e(mW,dHo),e(r6,cHo),e(N,fHo),e(N,t6),e(t6,Z1e),e(Z1e,mHo),e(t6,gHo),e(t6,gW),e(gW,hHo),e(t6,pHo),e(N,_Ho),e(N,a6),e(a6,e2e),e(e2e,uHo),e(a6,bHo),e(a6,hW),e(hW,vHo),e(a6,FHo),e(N,THo),e(N,n6),e(n6,o2e),e(o2e,MHo),e(n6,EHo),e(n6,pW),e(pW,CHo),e(n6,wHo),e(N,AHo),e(N,s6),e(s6,r2e),e(r2e,LHo),e(s6,yHo),e(s6,_W),e(_W,xHo),e(s6,$Ho),e(N,kHo),e(N,l6),e(l6,t2e),e(t2e,SHo),e(l6,RHo),e(l6,uW),e(uW,PHo),e(l6,BHo),e(N,IHo),e(N,i6),e(i6,a2e),e(a2e,NHo),e(i6,qHo),e(i6,bW),e(bW,jHo),e(i6,DHo),e(N,GHo),e(N,d6),e(d6,n2e),e(n2e,OHo),e(d6,VHo),e(d6,vW),e(vW,XHo),e(d6,zHo),e(N,WHo),e(N,c6),e(c6,s2e),e(s2e,QHo),e(c6,UHo),e(c6,FW),e(FW,HHo),e(c6,JHo),e(N,YHo),e(N,f6),e(f6,l2e),e(l2e,KHo),e(f6,ZHo),e(f6,TW),e(TW,eJo),e(f6,oJo),e(N,rJo),e(N,m6),e(m6,i2e),e(i2e,tJo),e(m6,aJo),e(m6,MW),e(MW,nJo),e(m6,sJo),e(N,lJo),e(N,g6),e(g6,d2e),e(d2e,iJo),e(g6,dJo),e(g6,EW),e(EW,cJo),e(g6,fJo),e(N,mJo),e(N,h6),e(h6,c2e),e(c2e,gJo),e(h6,hJo),e(h6,CW),e(CW,pJo),e(h6,_Jo),e(N,uJo),e(N,p6),e(p6,f2e),e(f2e,bJo),e(p6,vJo),e(p6,wW),e(wW,FJo),e(p6,TJo),e(N,MJo),e(N,_6),e(_6,m2e),e(m2e,EJo),e(_6,CJo),e(_6,AW),e(AW,wJo),e(_6,AJo),e(N,LJo),e(N,u6),e(u6,g2e),e(g2e,yJo),e(u6,xJo),e(u6,LW),e(LW,$Jo),e(u6,kJo),e(N,SJo),e(N,b6),e(b6,h2e),e(h2e,RJo),e(b6,PJo),e(b6,yW),e(yW,BJo),e(b6,IJo),e(N,NJo),e(N,v6),e(v6,p2e),e(p2e,qJo),e(v6,jJo),e(v6,xW),e(xW,DJo),e(v6,GJo),e(N,OJo),e(N,F6),e(F6,_2e),e(_2e,VJo),e(F6,XJo),e(F6,$W),e($W,zJo),e(F6,WJo),e(N,QJo),e(N,T6),e(T6,u2e),e(u2e,UJo),e(T6,HJo),e(T6,kW),e(kW,JJo),e(T6,YJo),e(N,KJo),e(N,M6),e(M6,b2e),e(b2e,ZJo),e(M6,eYo),e(M6,SW),e(SW,oYo),e(M6,rYo),e(N,tYo),e(N,E6),e(E6,v2e),e(v2e,aYo),e(E6,nYo),e(E6,RW),e(RW,sYo),e(E6,lYo),e(N,iYo),e(N,C6),e(C6,F2e),e(F2e,dYo),e(C6,cYo),e(C6,PW),e(PW,fYo),e(C6,mYo),e(N,gYo),e(N,w6),e(w6,T2e),e(T2e,hYo),e(w6,pYo),e(w6,BW),e(BW,_Yo),e(w6,uYo),e(ro,bYo),e(ro,A6),e(A6,vYo),e(A6,M2e),e(M2e,FYo),e(A6,TYo),e(A6,E2e),e(E2e,MYo),e(ro,EYo),M(L6,ro,null),b(f,fUe,u),b(f,Fd,u),e(Fd,y6),e(y6,C2e),M(py,C2e,null),e(Fd,CYo),e(Fd,w2e),e(w2e,wYo),b(f,mUe,u),b(f,qo,u),M(_y,qo,null),e(qo,AYo),e(qo,Td),e(Td,LYo),e(Td,IW),e(IW,yYo),e(Td,xYo),e(Td,NW),e(NW,$Yo),e(Td,kYo),e(qo,SYo),e(qo,uy),e(uy,RYo),e(uy,A2e),e(A2e,PYo),e(uy,BYo),e(qo,IYo),e(qo,bt),M(by,bt,null),e(bt,NYo),e(bt,L2e),e(L2e,qYo),e(bt,jYo),e(bt,Md),e(Md,DYo),e(Md,y2e),e(y2e,GYo),e(Md,OYo),e(Md,qW),e(qW,VYo),e(Md,XYo),e(bt,zYo),M(x6,bt,null),e(qo,WYo),e(qo,to),M(vy,to,null),e(to,QYo),e(to,x2e),e(x2e,UYo),e(to,HYo),e(to,Ha),e(Ha,JYo),e(Ha,$2e),e($2e,YYo),e(Ha,KYo),e(Ha,k2e),e(k2e,ZYo),e(Ha,eKo),e(Ha,S2e),e(S2e,oKo),e(Ha,rKo),e(to,tKo),e(to,Z),e(Z,$6),e($6,R2e),e(R2e,aKo),e($6,nKo),e($6,jW),e(jW,sKo),e($6,lKo),e(Z,iKo),e(Z,k6),e(k6,P2e),e(P2e,dKo),e(k6,cKo),e(k6,DW),e(DW,fKo),e(k6,mKo),e(Z,gKo),e(Z,S6),e(S6,B2e),e(B2e,hKo),e(S6,pKo),e(S6,GW),e(GW,_Ko),e(S6,uKo),e(Z,bKo),e(Z,R6),e(R6,I2e),e(I2e,vKo),e(R6,FKo),e(R6,OW),e(OW,TKo),e(R6,MKo),e(Z,EKo),e(Z,P6),e(P6,N2e),e(N2e,CKo),e(P6,wKo),e(P6,VW),e(VW,AKo),e(P6,LKo),e(Z,yKo),e(Z,B6),e(B6,q2e),e(q2e,xKo),e(B6,$Ko),e(B6,XW),e(XW,kKo),e(B6,SKo),e(Z,RKo),e(Z,I6),e(I6,j2e),e(j2e,PKo),e(I6,BKo),e(I6,zW),e(zW,IKo),e(I6,NKo),e(Z,qKo),e(Z,N6),e(N6,D2e),e(D2e,jKo),e(N6,DKo),e(N6,WW),e(WW,GKo),e(N6,OKo),e(Z,VKo),e(Z,q6),e(q6,G2e),e(G2e,XKo),e(q6,zKo),e(q6,QW),e(QW,WKo),e(q6,QKo),e(Z,UKo),e(Z,j6),e(j6,O2e),e(O2e,HKo),e(j6,JKo),e(j6,UW),e(UW,YKo),e(j6,KKo),e(Z,ZKo),e(Z,D6),e(D6,V2e),e(V2e,eZo),e(D6,oZo),e(D6,HW),e(HW,rZo),e(D6,tZo),e(Z,aZo),e(Z,G6),e(G6,X2e),e(X2e,nZo),e(G6,sZo),e(G6,JW),e(JW,lZo),e(G6,iZo),e(Z,dZo),e(Z,O6),e(O6,z2e),e(z2e,cZo),e(O6,fZo),e(O6,YW),e(YW,mZo),e(O6,gZo),e(Z,hZo),e(Z,V6),e(V6,W2e),e(W2e,pZo),e(V6,_Zo),e(V6,KW),e(KW,uZo),e(V6,bZo),e(Z,vZo),e(Z,X6),e(X6,Q2e),e(Q2e,FZo),e(X6,TZo),e(X6,ZW),e(ZW,MZo),e(X6,EZo),e(Z,CZo),e(Z,z6),e(z6,U2e),e(U2e,wZo),e(z6,AZo),e(z6,eQ),e(eQ,LZo),e(z6,yZo),e(Z,xZo),e(Z,W6),e(W6,H2e),e(H2e,$Zo),e(W6,kZo),e(W6,oQ),e(oQ,SZo),e(W6,RZo),e(Z,PZo),e(Z,Q6),e(Q6,J2e),e(J2e,BZo),e(Q6,IZo),e(Q6,rQ),e(rQ,NZo),e(Q6,qZo),e(Z,jZo),e(Z,U6),e(U6,Y2e),e(Y2e,DZo),e(U6,GZo),e(U6,tQ),e(tQ,OZo),e(U6,VZo),e(Z,XZo),e(Z,H6),e(H6,K2e),e(K2e,zZo),e(H6,WZo),e(H6,aQ),e(aQ,QZo),e(H6,UZo),e(Z,HZo),e(Z,J6),e(J6,Z2e),e(Z2e,JZo),e(J6,YZo),e(J6,nQ),e(nQ,KZo),e(J6,ZZo),e(Z,eer),e(Z,Y6),e(Y6,ebe),e(ebe,oer),e(Y6,rer),e(Y6,sQ),e(sQ,ter),e(Y6,aer),e(Z,ner),e(Z,K6),e(K6,obe),e(obe,ser),e(K6,ler),e(K6,lQ),e(lQ,ier),e(K6,der),e(Z,cer),e(Z,Z6),e(Z6,rbe),e(rbe,fer),e(Z6,mer),e(Z6,iQ),e(iQ,ger),e(Z6,her),e(Z,per),e(Z,eF),e(eF,tbe),e(tbe,_er),e(eF,uer),e(eF,dQ),e(dQ,ber),e(eF,ver),e(Z,Fer),e(Z,oF),e(oF,abe),e(abe,Ter),e(oF,Mer),e(oF,cQ),e(cQ,Eer),e(oF,Cer),e(Z,wer),e(Z,rF),e(rF,nbe),e(nbe,Aer),e(rF,Ler),e(rF,fQ),e(fQ,yer),e(rF,xer),e(Z,$er),e(Z,tF),e(tF,sbe),e(sbe,ker),e(tF,Ser),e(tF,mQ),e(mQ,Rer),e(tF,Per),e(Z,Ber),e(Z,aF),e(aF,lbe),e(lbe,Ier),e(aF,Ner),e(aF,gQ),e(gQ,qer),e(aF,jer),e(Z,Der),e(Z,nF),e(nF,ibe),e(ibe,Ger),e(nF,Oer),e(nF,hQ),e(hQ,Ver),e(nF,Xer),e(Z,zer),e(Z,sF),e(sF,dbe),e(dbe,Wer),e(sF,Qer),e(sF,pQ),e(pQ,Uer),e(sF,Her),e(to,Jer),e(to,lF),e(lF,Yer),e(lF,cbe),e(cbe,Ker),e(lF,Zer),e(lF,fbe),e(fbe,eor),e(to,oor),M(iF,to,null),b(f,gUe,u),b(f,Ed,u),e(Ed,dF),e(dF,mbe),M(Fy,mbe,null),e(Ed,ror),e(Ed,gbe),e(gbe,tor),b(f,hUe,u),b(f,jo,u),M(Ty,jo,null),e(jo,aor),e(jo,Cd),e(Cd,nor),e(Cd,_Q),e(_Q,sor),e(Cd,lor),e(Cd,uQ),e(uQ,ior),e(Cd,dor),e(jo,cor),e(jo,My),e(My,mor),e(My,hbe),e(hbe,gor),e(My,hor),e(jo,por),e(jo,vt),M(Ey,vt,null),e(vt,_or),e(vt,pbe),e(pbe,uor),e(vt,bor),e(vt,wd),e(wd,vor),e(wd,_be),e(_be,For),e(wd,Tor),e(wd,bQ),e(bQ,Mor),e(wd,Eor),e(vt,Cor),M(cF,vt,null),e(jo,wor),e(jo,ao),M(Cy,ao,null),e(ao,Aor),e(ao,ube),e(ube,Lor),e(ao,yor),e(ao,Ja),e(Ja,xor),e(Ja,bbe),e(bbe,$or),e(Ja,kor),e(Ja,vbe),e(vbe,Sor),e(Ja,Ror),e(Ja,Fbe),e(Fbe,Por),e(Ja,Bor),e(ao,Ior),e(ao,Do),e(Do,fF),e(fF,Tbe),e(Tbe,Nor),e(fF,qor),e(fF,vQ),e(vQ,jor),e(fF,Dor),e(Do,Gor),e(Do,mF),e(mF,Mbe),e(Mbe,Oor),e(mF,Vor),e(mF,FQ),e(FQ,Xor),e(mF,zor),e(Do,Wor),e(Do,gF),e(gF,Ebe),e(Ebe,Qor),e(gF,Uor),e(gF,TQ),e(TQ,Hor),e(gF,Jor),e(Do,Yor),e(Do,hF),e(hF,Cbe),e(Cbe,Kor),e(hF,Zor),e(hF,MQ),e(MQ,err),e(hF,orr),e(Do,rrr),e(Do,pF),e(pF,wbe),e(wbe,trr),e(pF,arr),e(pF,EQ),e(EQ,nrr),e(pF,srr),e(Do,lrr),e(Do,_F),e(_F,Abe),e(Abe,irr),e(_F,drr),e(_F,CQ),e(CQ,crr),e(_F,frr),e(ao,mrr),e(ao,uF),e(uF,grr),e(uF,Lbe),e(Lbe,hrr),e(uF,prr),e(uF,ybe),e(ybe,_rr),e(ao,urr),M(bF,ao,null),b(f,pUe,u),b(f,Ad,u),e(Ad,vF),e(vF,xbe),M(wy,xbe,null),e(Ad,brr),e(Ad,$be),e($be,vrr),b(f,_Ue,u),b(f,Go,u),M(Ay,Go,null),e(Go,Frr),e(Go,Ld),e(Ld,Trr),e(Ld,wQ),e(wQ,Mrr),e(Ld,Err),e(Ld,AQ),e(AQ,Crr),e(Ld,wrr),e(Go,Arr),e(Go,Ly),e(Ly,Lrr),e(Ly,kbe),e(kbe,yrr),e(Ly,xrr),e(Go,$rr),e(Go,Ft),M(yy,Ft,null),e(Ft,krr),e(Ft,Sbe),e(Sbe,Srr),e(Ft,Rrr),e(Ft,yd),e(yd,Prr),e(yd,Rbe),e(Rbe,Brr),e(yd,Irr),e(yd,LQ),e(LQ,Nrr),e(yd,qrr),e(Ft,jrr),M(FF,Ft,null),e(Go,Drr),e(Go,no),M(xy,no,null),e(no,Grr),e(no,Pbe),e(Pbe,Orr),e(no,Vrr),e(no,Ya),e(Ya,Xrr),e(Ya,Bbe),e(Bbe,zrr),e(Ya,Wrr),e(Ya,Ibe),e(Ibe,Qrr),e(Ya,Urr),e(Ya,Nbe),e(Nbe,Hrr),e(Ya,Jrr),e(no,Yrr),e(no,H),e(H,TF),e(TF,qbe),e(qbe,Krr),e(TF,Zrr),e(TF,yQ),e(yQ,etr),e(TF,otr),e(H,rtr),e(H,MF),e(MF,jbe),e(jbe,ttr),e(MF,atr),e(MF,xQ),e(xQ,ntr),e(MF,str),e(H,ltr),e(H,EF),e(EF,Dbe),e(Dbe,itr),e(EF,dtr),e(EF,$Q),e($Q,ctr),e(EF,ftr),e(H,mtr),e(H,CF),e(CF,Gbe),e(Gbe,gtr),e(CF,htr),e(CF,kQ),e(kQ,ptr),e(CF,_tr),e(H,utr),e(H,wF),e(wF,Obe),e(Obe,btr),e(wF,vtr),e(wF,SQ),e(SQ,Ftr),e(wF,Ttr),e(H,Mtr),e(H,AF),e(AF,Vbe),e(Vbe,Etr),e(AF,Ctr),e(AF,RQ),e(RQ,wtr),e(AF,Atr),e(H,Ltr),e(H,LF),e(LF,Xbe),e(Xbe,ytr),e(LF,xtr),e(LF,PQ),e(PQ,$tr),e(LF,ktr),e(H,Str),e(H,yF),e(yF,zbe),e(zbe,Rtr),e(yF,Ptr),e(yF,BQ),e(BQ,Btr),e(yF,Itr),e(H,Ntr),e(H,xF),e(xF,Wbe),e(Wbe,qtr),e(xF,jtr),e(xF,IQ),e(IQ,Dtr),e(xF,Gtr),e(H,Otr),e(H,$F),e($F,Qbe),e(Qbe,Vtr),e($F,Xtr),e($F,NQ),e(NQ,ztr),e($F,Wtr),e(H,Qtr),e(H,kF),e(kF,Ube),e(Ube,Utr),e(kF,Htr),e(kF,qQ),e(qQ,Jtr),e(kF,Ytr),e(H,Ktr),e(H,SF),e(SF,Hbe),e(Hbe,Ztr),e(SF,ear),e(SF,jQ),e(jQ,oar),e(SF,rar),e(H,tar),e(H,RF),e(RF,Jbe),e(Jbe,aar),e(RF,nar),e(RF,DQ),e(DQ,sar),e(RF,lar),e(H,iar),e(H,PF),e(PF,Ybe),e(Ybe,dar),e(PF,car),e(PF,GQ),e(GQ,far),e(PF,mar),e(H,gar),e(H,BF),e(BF,Kbe),e(Kbe,har),e(BF,par),e(BF,OQ),e(OQ,_ar),e(BF,uar),e(H,bar),e(H,IF),e(IF,Zbe),e(Zbe,Far),e(IF,Tar),e(IF,VQ),e(VQ,Mar),e(IF,Ear),e(H,Car),e(H,NF),e(NF,eve),e(eve,war),e(NF,Aar),e(NF,XQ),e(XQ,Lar),e(NF,yar),e(H,xar),e(H,qF),e(qF,ove),e(ove,$ar),e(qF,kar),e(qF,zQ),e(zQ,Sar),e(qF,Rar),e(H,Par),e(H,jF),e(jF,rve),e(rve,Bar),e(jF,Iar),e(jF,WQ),e(WQ,Nar),e(jF,qar),e(H,jar),e(H,DF),e(DF,tve),e(tve,Dar),e(DF,Gar),e(DF,QQ),e(QQ,Oar),e(DF,Var),e(H,Xar),e(H,GF),e(GF,ave),e(ave,zar),e(GF,War),e(GF,UQ),e(UQ,Qar),e(GF,Uar),e(H,Har),e(H,OF),e(OF,nve),e(nve,Jar),e(OF,Yar),e(OF,HQ),e(HQ,Kar),e(OF,Zar),e(H,enr),e(H,VF),e(VF,sve),e(sve,onr),e(VF,rnr),e(VF,JQ),e(JQ,tnr),e(VF,anr),e(H,nnr),e(H,XF),e(XF,lve),e(lve,snr),e(XF,lnr),e(XF,YQ),e(YQ,inr),e(XF,dnr),e(H,cnr),e(H,zF),e(zF,ive),e(ive,fnr),e(zF,mnr),e(zF,KQ),e(KQ,gnr),e(zF,hnr),e(H,pnr),e(H,WF),e(WF,dve),e(dve,_nr),e(WF,unr),e(WF,ZQ),e(ZQ,bnr),e(WF,vnr),e(H,Fnr),e(H,QF),e(QF,cve),e(cve,Tnr),e(QF,Mnr),e(QF,eU),e(eU,Enr),e(QF,Cnr),e(H,wnr),e(H,UF),e(UF,fve),e(fve,Anr),e(UF,Lnr),e(UF,oU),e(oU,ynr),e(UF,xnr),e(H,$nr),e(H,HF),e(HF,mve),e(mve,knr),e(HF,Snr),e(HF,rU),e(rU,Rnr),e(HF,Pnr),e(H,Bnr),e(H,JF),e(JF,gve),e(gve,Inr),e(JF,Nnr),e(JF,tU),e(tU,qnr),e(JF,jnr),e(H,Dnr),e(H,YF),e(YF,hve),e(hve,Gnr),e(YF,Onr),e(YF,aU),e(aU,Vnr),e(YF,Xnr),e(H,znr),e(H,KF),e(KF,pve),e(pve,Wnr),e(KF,Qnr),e(KF,nU),e(nU,Unr),e(KF,Hnr),e(H,Jnr),e(H,ZF),e(ZF,_ve),e(_ve,Ynr),e(ZF,Knr),e(ZF,sU),e(sU,Znr),e(ZF,esr),e(H,osr),e(H,eT),e(eT,uve),e(uve,rsr),e(eT,tsr),e(eT,lU),e(lU,asr),e(eT,nsr),e(H,ssr),e(H,oT),e(oT,bve),e(bve,lsr),e(oT,isr),e(oT,iU),e(iU,dsr),e(oT,csr),e(H,fsr),e(H,rT),e(rT,vve),e(vve,msr),e(rT,gsr),e(rT,dU),e(dU,hsr),e(rT,psr),e(H,_sr),e(H,tT),e(tT,Fve),e(Fve,usr),e(tT,bsr),e(tT,cU),e(cU,vsr),e(tT,Fsr),e(no,Tsr),e(no,aT),e(aT,Msr),e(aT,Tve),e(Tve,Esr),e(aT,Csr),e(aT,Mve),e(Mve,wsr),e(no,Asr),M(nT,no,null),b(f,uUe,u),b(f,xd,u),e(xd,sT),e(sT,Eve),M($y,Eve,null),e(xd,Lsr),e(xd,Cve),e(Cve,ysr),b(f,bUe,u),b(f,Oo,u),M(ky,Oo,null),e(Oo,xsr),e(Oo,$d),e($d,$sr),e($d,fU),e(fU,ksr),e($d,Ssr),e($d,mU),e(mU,Rsr),e($d,Psr),e(Oo,Bsr),e(Oo,Sy),e(Sy,Isr),e(Sy,wve),e(wve,Nsr),e(Sy,qsr),e(Oo,jsr),e(Oo,Tt),M(Ry,Tt,null),e(Tt,Dsr),e(Tt,Ave),e(Ave,Gsr),e(Tt,Osr),e(Tt,kd),e(kd,Vsr),e(kd,Lve),e(Lve,Xsr),e(kd,zsr),e(kd,gU),e(gU,Wsr),e(kd,Qsr),e(Tt,Usr),M(lT,Tt,null),e(Oo,Hsr),e(Oo,so),M(Py,so,null),e(so,Jsr),e(so,yve),e(yve,Ysr),e(so,Ksr),e(so,Ka),e(Ka,Zsr),e(Ka,xve),e(xve,elr),e(Ka,olr),e(Ka,$ve),e($ve,rlr),e(Ka,tlr),e(Ka,kve),e(kve,alr),e(Ka,nlr),e(so,slr),e(so,V),e(V,iT),e(iT,Sve),e(Sve,llr),e(iT,ilr),e(iT,hU),e(hU,dlr),e(iT,clr),e(V,flr),e(V,dT),e(dT,Rve),e(Rve,mlr),e(dT,glr),e(dT,pU),e(pU,hlr),e(dT,plr),e(V,_lr),e(V,cT),e(cT,Pve),e(Pve,ulr),e(cT,blr),e(cT,_U),e(_U,vlr),e(cT,Flr),e(V,Tlr),e(V,fT),e(fT,Bve),e(Bve,Mlr),e(fT,Elr),e(fT,uU),e(uU,Clr),e(fT,wlr),e(V,Alr),e(V,mT),e(mT,Ive),e(Ive,Llr),e(mT,ylr),e(mT,bU),e(bU,xlr),e(mT,$lr),e(V,klr),e(V,gT),e(gT,Nve),e(Nve,Slr),e(gT,Rlr),e(gT,vU),e(vU,Plr),e(gT,Blr),e(V,Ilr),e(V,hT),e(hT,qve),e(qve,Nlr),e(hT,qlr),e(hT,FU),e(FU,jlr),e(hT,Dlr),e(V,Glr),e(V,pT),e(pT,jve),e(jve,Olr),e(pT,Vlr),e(pT,TU),e(TU,Xlr),e(pT,zlr),e(V,Wlr),e(V,_T),e(_T,Dve),e(Dve,Qlr),e(_T,Ulr),e(_T,MU),e(MU,Hlr),e(_T,Jlr),e(V,Ylr),e(V,uT),e(uT,Gve),e(Gve,Klr),e(uT,Zlr),e(uT,EU),e(EU,eir),e(uT,oir),e(V,rir),e(V,bT),e(bT,Ove),e(Ove,tir),e(bT,air),e(bT,CU),e(CU,nir),e(bT,sir),e(V,lir),e(V,vT),e(vT,Vve),e(Vve,iir),e(vT,dir),e(vT,wU),e(wU,cir),e(vT,fir),e(V,mir),e(V,FT),e(FT,Xve),e(Xve,gir),e(FT,hir),e(FT,AU),e(AU,pir),e(FT,_ir),e(V,uir),e(V,TT),e(TT,zve),e(zve,bir),e(TT,vir),e(TT,LU),e(LU,Fir),e(TT,Tir),e(V,Mir),e(V,MT),e(MT,Wve),e(Wve,Eir),e(MT,Cir),e(MT,yU),e(yU,wir),e(MT,Air),e(V,Lir),e(V,ET),e(ET,Qve),e(Qve,yir),e(ET,xir),e(ET,xU),e(xU,$ir),e(ET,kir),e(V,Sir),e(V,CT),e(CT,Uve),e(Uve,Rir),e(CT,Pir),e(CT,$U),e($U,Bir),e(CT,Iir),e(V,Nir),e(V,wT),e(wT,Hve),e(Hve,qir),e(wT,jir),e(wT,kU),e(kU,Dir),e(wT,Gir),e(V,Oir),e(V,AT),e(AT,Jve),e(Jve,Vir),e(AT,Xir),e(AT,SU),e(SU,zir),e(AT,Wir),e(V,Qir),e(V,LT),e(LT,Yve),e(Yve,Uir),e(LT,Hir),e(LT,RU),e(RU,Jir),e(LT,Yir),e(V,Kir),e(V,yT),e(yT,Kve),e(Kve,Zir),e(yT,edr),e(yT,PU),e(PU,odr),e(yT,rdr),e(V,tdr),e(V,xT),e(xT,Zve),e(Zve,adr),e(xT,ndr),e(xT,BU),e(BU,sdr),e(xT,ldr),e(V,idr),e(V,$T),e($T,e6e),e(e6e,ddr),e($T,cdr),e($T,IU),e(IU,fdr),e($T,mdr),e(V,gdr),e(V,kT),e(kT,o6e),e(o6e,hdr),e(kT,pdr),e(kT,NU),e(NU,_dr),e(kT,udr),e(V,bdr),e(V,ST),e(ST,r6e),e(r6e,vdr),e(ST,Fdr),e(ST,qU),e(qU,Tdr),e(ST,Mdr),e(V,Edr),e(V,RT),e(RT,t6e),e(t6e,Cdr),e(RT,wdr),e(RT,jU),e(jU,Adr),e(RT,Ldr),e(V,ydr),e(V,PT),e(PT,a6e),e(a6e,xdr),e(PT,$dr),e(PT,DU),e(DU,kdr),e(PT,Sdr),e(V,Rdr),e(V,BT),e(BT,n6e),e(n6e,Pdr),e(BT,Bdr),e(BT,GU),e(GU,Idr),e(BT,Ndr),e(V,qdr),e(V,IT),e(IT,s6e),e(s6e,jdr),e(IT,Ddr),e(IT,OU),e(OU,Gdr),e(IT,Odr),e(V,Vdr),e(V,NT),e(NT,l6e),e(l6e,Xdr),e(NT,zdr),e(NT,VU),e(VU,Wdr),e(NT,Qdr),e(V,Udr),e(V,qT),e(qT,i6e),e(i6e,Hdr),e(qT,Jdr),e(qT,XU),e(XU,Ydr),e(qT,Kdr),e(V,Zdr),e(V,jT),e(jT,d6e),e(d6e,ecr),e(jT,ocr),e(jT,zU),e(zU,rcr),e(jT,tcr),e(V,acr),e(V,DT),e(DT,c6e),e(c6e,ncr),e(DT,scr),e(DT,WU),e(WU,lcr),e(DT,icr),e(V,dcr),e(V,GT),e(GT,f6e),e(f6e,ccr),e(GT,fcr),e(GT,QU),e(QU,mcr),e(GT,gcr),e(V,hcr),e(V,OT),e(OT,m6e),e(m6e,pcr),e(OT,_cr),e(OT,UU),e(UU,ucr),e(OT,bcr),e(V,vcr),e(V,VT),e(VT,g6e),e(g6e,Fcr),e(VT,Tcr),e(VT,HU),e(HU,Mcr),e(VT,Ecr),e(V,Ccr),e(V,XT),e(XT,h6e),e(h6e,wcr),e(XT,Acr),e(XT,JU),e(JU,Lcr),e(XT,ycr),e(V,xcr),e(V,zT),e(zT,p6e),e(p6e,$cr),e(zT,kcr),e(zT,YU),e(YU,Scr),e(zT,Rcr),e(V,Pcr),e(V,WT),e(WT,_6e),e(_6e,Bcr),e(WT,Icr),e(WT,KU),e(KU,Ncr),e(WT,qcr),e(V,jcr),e(V,QT),e(QT,u6e),e(u6e,Dcr),e(QT,Gcr),e(QT,ZU),e(ZU,Ocr),e(QT,Vcr),e(V,Xcr),e(V,UT),e(UT,b6e),e(b6e,zcr),e(UT,Wcr),e(UT,eH),e(eH,Qcr),e(UT,Ucr),e(V,Hcr),e(V,HT),e(HT,v6e),e(v6e,Jcr),e(HT,Ycr),e(HT,oH),e(oH,Kcr),e(HT,Zcr),e(V,efr),e(V,JT),e(JT,F6e),e(F6e,ofr),e(JT,rfr),e(JT,rH),e(rH,tfr),e(JT,afr),e(so,nfr),e(so,YT),e(YT,sfr),e(YT,T6e),e(T6e,lfr),e(YT,ifr),e(YT,M6e),e(M6e,dfr),e(so,cfr),M(KT,so,null),b(f,vUe,u),b(f,Sd,u),e(Sd,ZT),e(ZT,E6e),M(By,E6e,null),e(Sd,ffr),e(Sd,C6e),e(C6e,mfr),b(f,FUe,u),b(f,Vo,u),M(Iy,Vo,null),e(Vo,gfr),e(Vo,Rd),e(Rd,hfr),e(Rd,tH),e(tH,pfr),e(Rd,_fr),e(Rd,aH),e(aH,ufr),e(Rd,bfr),e(Vo,vfr),e(Vo,Ny),e(Ny,Ffr),e(Ny,w6e),e(w6e,Tfr),e(Ny,Mfr),e(Vo,Efr),e(Vo,Mt),M(qy,Mt,null),e(Mt,Cfr),e(Mt,A6e),e(A6e,wfr),e(Mt,Afr),e(Mt,Pd),e(Pd,Lfr),e(Pd,L6e),e(L6e,yfr),e(Pd,xfr),e(Pd,nH),e(nH,$fr),e(Pd,kfr),e(Mt,Sfr),M(e7,Mt,null),e(Vo,Rfr),e(Vo,lo),M(jy,lo,null),e(lo,Pfr),e(lo,y6e),e(y6e,Bfr),e(lo,Ifr),e(lo,Za),e(Za,Nfr),e(Za,x6e),e(x6e,qfr),e(Za,jfr),e(Za,$6e),e($6e,Dfr),e(Za,Gfr),e(Za,k6e),e(k6e,Ofr),e(Za,Vfr),e(lo,Xfr),e(lo,S6e),e(S6e,o7),e(o7,R6e),e(R6e,zfr),e(o7,Wfr),e(o7,sH),e(sH,Qfr),e(o7,Ufr),e(lo,Hfr),e(lo,r7),e(r7,Jfr),e(r7,P6e),e(P6e,Yfr),e(r7,Kfr),e(r7,B6e),e(B6e,Zfr),e(lo,emr),M(t7,lo,null),b(f,TUe,u),b(f,Bd,u),e(Bd,a7),e(a7,I6e),M(Dy,I6e,null),e(Bd,omr),e(Bd,N6e),e(N6e,rmr),b(f,MUe,u),b(f,Xo,u),M(Gy,Xo,null),e(Xo,tmr),e(Xo,Id),e(Id,amr),e(Id,lH),e(lH,nmr),e(Id,smr),e(Id,iH),e(iH,lmr),e(Id,imr),e(Xo,dmr),e(Xo,Oy),e(Oy,cmr),e(Oy,q6e),e(q6e,fmr),e(Oy,mmr),e(Xo,gmr),e(Xo,Et),M(Vy,Et,null),e(Et,hmr),e(Et,j6e),e(j6e,pmr),e(Et,_mr),e(Et,Nd),e(Nd,umr),e(Nd,D6e),e(D6e,bmr),e(Nd,vmr),e(Nd,dH),e(dH,Fmr),e(Nd,Tmr),e(Et,Mmr),M(n7,Et,null),e(Xo,Emr),e(Xo,io),M(Xy,io,null),e(io,Cmr),e(io,G6e),e(G6e,wmr),e(io,Amr),e(io,en),e(en,Lmr),e(en,O6e),e(O6e,ymr),e(en,xmr),e(en,V6e),e(V6e,$mr),e(en,kmr),e(en,X6e),e(X6e,Smr),e(en,Rmr),e(io,Pmr),e(io,be),e(be,s7),e(s7,z6e),e(z6e,Bmr),e(s7,Imr),e(s7,cH),e(cH,Nmr),e(s7,qmr),e(be,jmr),e(be,l7),e(l7,W6e),e(W6e,Dmr),e(l7,Gmr),e(l7,fH),e(fH,Omr),e(l7,Vmr),e(be,Xmr),e(be,i7),e(i7,Q6e),e(Q6e,zmr),e(i7,Wmr),e(i7,mH),e(mH,Qmr),e(i7,Umr),e(be,Hmr),e(be,d7),e(d7,U6e),e(U6e,Jmr),e(d7,Ymr),e(d7,gH),e(gH,Kmr),e(d7,Zmr),e(be,egr),e(be,sl),e(sl,H6e),e(H6e,ogr),e(sl,rgr),e(sl,hH),e(hH,tgr),e(sl,agr),e(sl,pH),e(pH,ngr),e(sl,sgr),e(be,lgr),e(be,c7),e(c7,J6e),e(J6e,igr),e(c7,dgr),e(c7,_H),e(_H,cgr),e(c7,fgr),e(be,mgr),e(be,ll),e(ll,Y6e),e(Y6e,ggr),e(ll,hgr),e(ll,uH),e(uH,pgr),e(ll,_gr),e(ll,bH),e(bH,ugr),e(ll,bgr),e(be,vgr),e(be,f7),e(f7,K6e),e(K6e,Fgr),e(f7,Tgr),e(f7,vH),e(vH,Mgr),e(f7,Egr),e(be,Cgr),e(be,Ct),e(Ct,Z6e),e(Z6e,wgr),e(Ct,Agr),e(Ct,FH),e(FH,Lgr),e(Ct,ygr),e(Ct,TH),e(TH,xgr),e(Ct,$gr),e(Ct,MH),e(MH,kgr),e(Ct,Sgr),e(be,Rgr),e(be,m7),e(m7,eFe),e(eFe,Pgr),e(m7,Bgr),e(m7,EH),e(EH,Igr),e(m7,Ngr),e(be,qgr),e(be,g7),e(g7,oFe),e(oFe,jgr),e(g7,Dgr),e(g7,CH),e(CH,Ggr),e(g7,Ogr),e(be,Vgr),e(be,h7),e(h7,rFe),e(rFe,Xgr),e(h7,zgr),e(h7,wH),e(wH,Wgr),e(h7,Qgr),e(be,Ugr),e(be,p7),e(p7,tFe),e(tFe,Hgr),e(p7,Jgr),e(p7,AH),e(AH,Ygr),e(p7,Kgr),e(be,Zgr),e(be,_7),e(_7,aFe),e(aFe,ehr),e(_7,ohr),e(_7,LH),e(LH,rhr),e(_7,thr),e(be,ahr),e(be,u7),e(u7,nFe),e(nFe,nhr),e(u7,shr),e(u7,yH),e(yH,lhr),e(u7,ihr),e(be,dhr),e(be,b7),e(b7,sFe),e(sFe,chr),e(b7,fhr),e(b7,xH),e(xH,mhr),e(b7,ghr),e(be,hhr),e(be,v7),e(v7,lFe),e(lFe,phr),e(v7,_hr),e(v7,$H),e($H,uhr),e(v7,bhr),e(io,vhr),e(io,F7),e(F7,Fhr),e(F7,iFe),e(iFe,Thr),e(F7,Mhr),e(F7,dFe),e(dFe,Ehr),e(io,Chr),M(T7,io,null),b(f,EUe,u),b(f,qd,u),e(qd,M7),e(M7,cFe),M(zy,cFe,null),e(qd,whr),e(qd,fFe),e(fFe,Ahr),b(f,CUe,u),b(f,zo,u),M(Wy,zo,null),e(zo,Lhr),e(zo,jd),e(jd,yhr),e(jd,kH),e(kH,xhr),e(jd,$hr),e(jd,SH),e(SH,khr),e(jd,Shr),e(zo,Rhr),e(zo,Qy),e(Qy,Phr),e(Qy,mFe),e(mFe,Bhr),e(Qy,Ihr),e(zo,Nhr),e(zo,wt),M(Uy,wt,null),e(wt,qhr),e(wt,gFe),e(gFe,jhr),e(wt,Dhr),e(wt,Dd),e(Dd,Ghr),e(Dd,hFe),e(hFe,Ohr),e(Dd,Vhr),e(Dd,RH),e(RH,Xhr),e(Dd,zhr),e(wt,Whr),M(E7,wt,null),e(zo,Qhr),e(zo,co),M(Hy,co,null),e(co,Uhr),e(co,pFe),e(pFe,Hhr),e(co,Jhr),e(co,on),e(on,Yhr),e(on,_Fe),e(_Fe,Khr),e(on,Zhr),e(on,uFe),e(uFe,epr),e(on,opr),e(on,bFe),e(bFe,rpr),e(on,tpr),e(co,apr),e(co,vFe),e(vFe,C7),e(C7,FFe),e(FFe,npr),e(C7,spr),e(C7,PH),e(PH,lpr),e(C7,ipr),e(co,dpr),e(co,w7),e(w7,cpr),e(w7,TFe),e(TFe,fpr),e(w7,mpr),e(w7,MFe),e(MFe,gpr),e(co,hpr),M(A7,co,null),b(f,wUe,u),b(f,Gd,u),e(Gd,L7),e(L7,EFe),M(Jy,EFe,null),e(Gd,ppr),e(Gd,CFe),e(CFe,_pr),b(f,AUe,u),b(f,Wo,u),M(Yy,Wo,null),e(Wo,upr),e(Wo,Od),e(Od,bpr),e(Od,BH),e(BH,vpr),e(Od,Fpr),e(Od,IH),e(IH,Tpr),e(Od,Mpr),e(Wo,Epr),e(Wo,Ky),e(Ky,Cpr),e(Ky,wFe),e(wFe,wpr),e(Ky,Apr),e(Wo,Lpr),e(Wo,At),M(Zy,At,null),e(At,ypr),e(At,AFe),e(AFe,xpr),e(At,$pr),e(At,Vd),e(Vd,kpr),e(Vd,LFe),e(LFe,Spr),e(Vd,Rpr),e(Vd,NH),e(NH,Ppr),e(Vd,Bpr),e(At,Ipr),M(y7,At,null),e(Wo,Npr),e(Wo,fo),M(ex,fo,null),e(fo,qpr),e(fo,yFe),e(yFe,jpr),e(fo,Dpr),e(fo,rn),e(rn,Gpr),e(rn,xFe),e(xFe,Opr),e(rn,Vpr),e(rn,$Fe),e($Fe,Xpr),e(rn,zpr),e(rn,kFe),e(kFe,Wpr),e(rn,Qpr),e(fo,Upr),e(fo,SFe),e(SFe,x7),e(x7,RFe),e(RFe,Hpr),e(x7,Jpr),e(x7,qH),e(qH,Ypr),e(x7,Kpr),e(fo,Zpr),e(fo,$7),e($7,e_r),e($7,PFe),e(PFe,o_r),e($7,r_r),e($7,BFe),e(BFe,t_r),e(fo,a_r),M(k7,fo,null),b(f,LUe,u),b(f,Xd,u),e(Xd,S7),e(S7,IFe),M(ox,IFe,null),e(Xd,n_r),e(Xd,NFe),e(NFe,s_r),b(f,yUe,u),b(f,Qo,u),M(rx,Qo,null),e(Qo,l_r),e(Qo,zd),e(zd,i_r),e(zd,jH),e(jH,d_r),e(zd,c_r),e(zd,DH),e(DH,f_r),e(zd,m_r),e(Qo,g_r),e(Qo,tx),e(tx,h_r),e(tx,qFe),e(qFe,p_r),e(tx,__r),e(Qo,u_r),e(Qo,Lt),M(ax,Lt,null),e(Lt,b_r),e(Lt,jFe),e(jFe,v_r),e(Lt,F_r),e(Lt,Wd),e(Wd,T_r),e(Wd,DFe),e(DFe,M_r),e(Wd,E_r),e(Wd,GH),e(GH,C_r),e(Wd,w_r),e(Lt,A_r),M(R7,Lt,null),e(Qo,L_r),e(Qo,mo),M(nx,mo,null),e(mo,y_r),e(mo,GFe),e(GFe,x_r),e(mo,$_r),e(mo,tn),e(tn,k_r),e(tn,OFe),e(OFe,S_r),e(tn,R_r),e(tn,VFe),e(VFe,P_r),e(tn,B_r),e(tn,XFe),e(XFe,I_r),e(tn,N_r),e(mo,q_r),e(mo,zFe),e(zFe,P7),e(P7,WFe),e(WFe,j_r),e(P7,D_r),e(P7,OH),e(OH,G_r),e(P7,O_r),e(mo,V_r),e(mo,B7),e(B7,X_r),e(B7,QFe),e(QFe,z_r),e(B7,W_r),e(B7,UFe),e(UFe,Q_r),e(mo,U_r),M(I7,mo,null),b(f,xUe,u),b(f,Qd,u),e(Qd,N7),e(N7,HFe),M(sx,HFe,null),e(Qd,H_r),e(Qd,JFe),e(JFe,J_r),b(f,$Ue,u),b(f,Uo,u),M(lx,Uo,null),e(Uo,Y_r),e(Uo,Ud),e(Ud,K_r),e(Ud,VH),e(VH,Z_r),e(Ud,eur),e(Ud,XH),e(XH,our),e(Ud,rur),e(Uo,tur),e(Uo,ix),e(ix,aur),e(ix,YFe),e(YFe,nur),e(ix,sur),e(Uo,lur),e(Uo,yt),M(dx,yt,null),e(yt,iur),e(yt,KFe),e(KFe,dur),e(yt,cur),e(yt,Hd),e(Hd,fur),e(Hd,ZFe),e(ZFe,mur),e(Hd,gur),e(Hd,zH),e(zH,hur),e(Hd,pur),e(yt,_ur),M(q7,yt,null),e(Uo,uur),e(Uo,go),M(cx,go,null),e(go,bur),e(go,eTe),e(eTe,vur),e(go,Fur),e(go,an),e(an,Tur),e(an,oTe),e(oTe,Mur),e(an,Eur),e(an,rTe),e(rTe,Cur),e(an,wur),e(an,tTe),e(tTe,Aur),e(an,Lur),e(go,yur),e(go,Pe),e(Pe,j7),e(j7,aTe),e(aTe,xur),e(j7,$ur),e(j7,WH),e(WH,kur),e(j7,Sur),e(Pe,Rur),e(Pe,D7),e(D7,nTe),e(nTe,Pur),e(D7,Bur),e(D7,QH),e(QH,Iur),e(D7,Nur),e(Pe,qur),e(Pe,G7),e(G7,sTe),e(sTe,jur),e(G7,Dur),e(G7,UH),e(UH,Gur),e(G7,Our),e(Pe,Vur),e(Pe,O7),e(O7,lTe),e(lTe,Xur),e(O7,zur),e(O7,HH),e(HH,Wur),e(O7,Qur),e(Pe,Uur),e(Pe,V7),e(V7,iTe),e(iTe,Hur),e(V7,Jur),e(V7,JH),e(JH,Yur),e(V7,Kur),e(Pe,Zur),e(Pe,X7),e(X7,dTe),e(dTe,e1r),e(X7,o1r),e(X7,YH),e(YH,r1r),e(X7,t1r),e(Pe,a1r),e(Pe,z7),e(z7,cTe),e(cTe,n1r),e(z7,s1r),e(z7,KH),e(KH,l1r),e(z7,i1r),e(Pe,d1r),e(Pe,W7),e(W7,fTe),e(fTe,c1r),e(W7,f1r),e(W7,ZH),e(ZH,m1r),e(W7,g1r),e(Pe,h1r),e(Pe,Q7),e(Q7,mTe),e(mTe,p1r),e(Q7,_1r),e(Q7,eJ),e(eJ,u1r),e(Q7,b1r),e(go,v1r),e(go,U7),e(U7,F1r),e(U7,gTe),e(gTe,T1r),e(U7,M1r),e(U7,hTe),e(hTe,E1r),e(go,C1r),M(H7,go,null),b(f,kUe,u),b(f,Jd,u),e(Jd,J7),e(J7,pTe),M(fx,pTe,null),e(Jd,w1r),e(Jd,_Te),e(_Te,A1r),b(f,SUe,u),b(f,Ho,u),M(mx,Ho,null),e(Ho,L1r),e(Ho,Yd),e(Yd,y1r),e(Yd,oJ),e(oJ,x1r),e(Yd,$1r),e(Yd,rJ),e(rJ,k1r),e(Yd,S1r),e(Ho,R1r),e(Ho,gx),e(gx,P1r),e(gx,uTe),e(uTe,B1r),e(gx,I1r),e(Ho,N1r),e(Ho,xt),M(hx,xt,null),e(xt,q1r),e(xt,bTe),e(bTe,j1r),e(xt,D1r),e(xt,Kd),e(Kd,G1r),e(Kd,vTe),e(vTe,O1r),e(Kd,V1r),e(Kd,tJ),e(tJ,X1r),e(Kd,z1r),e(xt,W1r),M(Y7,xt,null),e(Ho,Q1r),e(Ho,ho),M(px,ho,null),e(ho,U1r),e(ho,FTe),e(FTe,H1r),e(ho,J1r),e(ho,nn),e(nn,Y1r),e(nn,TTe),e(TTe,K1r),e(nn,Z1r),e(nn,MTe),e(MTe,e2r),e(nn,o2r),e(nn,ETe),e(ETe,r2r),e(nn,t2r),e(ho,a2r),e(ho,st),e(st,K7),e(K7,CTe),e(CTe,n2r),e(K7,s2r),e(K7,aJ),e(aJ,l2r),e(K7,i2r),e(st,d2r),e(st,Z7),e(Z7,wTe),e(wTe,c2r),e(Z7,f2r),e(Z7,nJ),e(nJ,m2r),e(Z7,g2r),e(st,h2r),e(st,e8),e(e8,ATe),e(ATe,p2r),e(e8,_2r),e(e8,sJ),e(sJ,u2r),e(e8,b2r),e(st,v2r),e(st,o8),e(o8,LTe),e(LTe,F2r),e(o8,T2r),e(o8,lJ),e(lJ,M2r),e(o8,E2r),e(st,C2r),e(st,r8),e(r8,yTe),e(yTe,w2r),e(r8,A2r),e(r8,iJ),e(iJ,L2r),e(r8,y2r),e(ho,x2r),e(ho,t8),e(t8,$2r),e(t8,xTe),e(xTe,k2r),e(t8,S2r),e(t8,$Te),e($Te,R2r),e(ho,P2r),M(a8,ho,null),b(f,RUe,u),b(f,Zd,u),e(Zd,n8),e(n8,kTe),M(_x,kTe,null),e(Zd,B2r),e(Zd,STe),e(STe,I2r),b(f,PUe,u),b(f,Jo,u),M(ux,Jo,null),e(Jo,N2r),e(Jo,ec),e(ec,q2r),e(ec,dJ),e(dJ,j2r),e(ec,D2r),e(ec,cJ),e(cJ,G2r),e(ec,O2r),e(Jo,V2r),e(Jo,bx),e(bx,X2r),e(bx,RTe),e(RTe,z2r),e(bx,W2r),e(Jo,Q2r),e(Jo,$t),M(vx,$t,null),e($t,U2r),e($t,PTe),e(PTe,H2r),e($t,J2r),e($t,oc),e(oc,Y2r),e(oc,BTe),e(BTe,K2r),e(oc,Z2r),e(oc,fJ),e(fJ,ebr),e(oc,obr),e($t,rbr),M(s8,$t,null),e(Jo,tbr),e(Jo,po),M(Fx,po,null),e(po,abr),e(po,ITe),e(ITe,nbr),e(po,sbr),e(po,sn),e(sn,lbr),e(sn,NTe),e(NTe,ibr),e(sn,dbr),e(sn,qTe),e(qTe,cbr),e(sn,fbr),e(sn,jTe),e(jTe,mbr),e(sn,gbr),e(po,hbr),e(po,Le),e(Le,l8),e(l8,DTe),e(DTe,pbr),e(l8,_br),e(l8,mJ),e(mJ,ubr),e(l8,bbr),e(Le,vbr),e(Le,i8),e(i8,GTe),e(GTe,Fbr),e(i8,Tbr),e(i8,gJ),e(gJ,Mbr),e(i8,Ebr),e(Le,Cbr),e(Le,d8),e(d8,OTe),e(OTe,wbr),e(d8,Abr),e(d8,hJ),e(hJ,Lbr),e(d8,ybr),e(Le,xbr),e(Le,c8),e(c8,VTe),e(VTe,$br),e(c8,kbr),e(c8,pJ),e(pJ,Sbr),e(c8,Rbr),e(Le,Pbr),e(Le,f8),e(f8,XTe),e(XTe,Bbr),e(f8,Ibr),e(f8,_J),e(_J,Nbr),e(f8,qbr),e(Le,jbr),e(Le,m8),e(m8,zTe),e(zTe,Dbr),e(m8,Gbr),e(m8,uJ),e(uJ,Obr),e(m8,Vbr),e(Le,Xbr),e(Le,g8),e(g8,WTe),e(WTe,zbr),e(g8,Wbr),e(g8,bJ),e(bJ,Qbr),e(g8,Ubr),e(Le,Hbr),e(Le,h8),e(h8,QTe),e(QTe,Jbr),e(h8,Ybr),e(h8,vJ),e(vJ,Kbr),e(h8,Zbr),e(Le,evr),e(Le,p8),e(p8,UTe),e(UTe,ovr),e(p8,rvr),e(p8,FJ),e(FJ,tvr),e(p8,avr),e(Le,nvr),e(Le,_8),e(_8,HTe),e(HTe,svr),e(_8,lvr),e(_8,TJ),e(TJ,ivr),e(_8,dvr),e(po,cvr),e(po,u8),e(u8,fvr),e(u8,JTe),e(JTe,mvr),e(u8,gvr),e(u8,YTe),e(YTe,hvr),e(po,pvr),M(b8,po,null),b(f,BUe,u),b(f,rc,u),e(rc,v8),e(v8,KTe),M(Tx,KTe,null),e(rc,_vr),e(rc,ZTe),e(ZTe,uvr),b(f,IUe,u),b(f,Yo,u),M(Mx,Yo,null),e(Yo,bvr),e(Yo,tc),e(tc,vvr),e(tc,MJ),e(MJ,Fvr),e(tc,Tvr),e(tc,EJ),e(EJ,Mvr),e(tc,Evr),e(Yo,Cvr),e(Yo,Ex),e(Ex,wvr),e(Ex,e7e),e(e7e,Avr),e(Ex,Lvr),e(Yo,yvr),e(Yo,kt),M(Cx,kt,null),e(kt,xvr),e(kt,o7e),e(o7e,$vr),e(kt,kvr),e(kt,ac),e(ac,Svr),e(ac,r7e),e(r7e,Rvr),e(ac,Pvr),e(ac,CJ),e(CJ,Bvr),e(ac,Ivr),e(kt,Nvr),M(F8,kt,null),e(Yo,qvr),e(Yo,_o),M(wx,_o,null),e(_o,jvr),e(_o,t7e),e(t7e,Dvr),e(_o,Gvr),e(_o,ln),e(ln,Ovr),e(ln,a7e),e(a7e,Vvr),e(ln,Xvr),e(ln,n7e),e(n7e,zvr),e(ln,Wvr),e(ln,s7e),e(s7e,Qvr),e(ln,Uvr),e(_o,Hvr),e(_o,Ax),e(Ax,T8),e(T8,l7e),e(l7e,Jvr),e(T8,Yvr),e(T8,wJ),e(wJ,Kvr),e(T8,Zvr),e(Ax,e6r),e(Ax,M8),e(M8,i7e),e(i7e,o6r),e(M8,r6r),e(M8,AJ),e(AJ,t6r),e(M8,a6r),e(_o,n6r),e(_o,E8),e(E8,s6r),e(E8,d7e),e(d7e,l6r),e(E8,i6r),e(E8,c7e),e(c7e,d6r),e(_o,c6r),M(C8,_o,null),b(f,NUe,u),b(f,nc,u),e(nc,w8),e(w8,f7e),M(Lx,f7e,null),e(nc,f6r),e(nc,m7e),e(m7e,m6r),b(f,qUe,u),b(f,Ko,u),M(yx,Ko,null),e(Ko,g6r),e(Ko,sc),e(sc,h6r),e(sc,LJ),e(LJ,p6r),e(sc,_6r),e(sc,yJ),e(yJ,u6r),e(sc,b6r),e(Ko,v6r),e(Ko,xx),e(xx,F6r),e(xx,g7e),e(g7e,T6r),e(xx,M6r),e(Ko,E6r),e(Ko,St),M($x,St,null),e(St,C6r),e(St,h7e),e(h7e,w6r),e(St,A6r),e(St,lc),e(lc,L6r),e(lc,p7e),e(p7e,y6r),e(lc,x6r),e(lc,xJ),e(xJ,$6r),e(lc,k6r),e(St,S6r),M(A8,St,null),e(Ko,R6r),e(Ko,uo),M(kx,uo,null),e(uo,P6r),e(uo,_7e),e(_7e,B6r),e(uo,I6r),e(uo,dn),e(dn,N6r),e(dn,u7e),e(u7e,q6r),e(dn,j6r),e(dn,b7e),e(b7e,D6r),e(dn,G6r),e(dn,v7e),e(v7e,O6r),e(dn,V6r),e(uo,X6r),e(uo,lt),e(lt,L8),e(L8,F7e),e(F7e,z6r),e(L8,W6r),e(L8,$J),e($J,Q6r),e(L8,U6r),e(lt,H6r),e(lt,y8),e(y8,T7e),e(T7e,J6r),e(y8,Y6r),e(y8,kJ),e(kJ,K6r),e(y8,Z6r),e(lt,eFr),e(lt,x8),e(x8,M7e),e(M7e,oFr),e(x8,rFr),e(x8,SJ),e(SJ,tFr),e(x8,aFr),e(lt,nFr),e(lt,$8),e($8,E7e),e(E7e,sFr),e($8,lFr),e($8,RJ),e(RJ,iFr),e($8,dFr),e(lt,cFr),e(lt,k8),e(k8,C7e),e(C7e,fFr),e(k8,mFr),e(k8,PJ),e(PJ,gFr),e(k8,hFr),e(uo,pFr),e(uo,S8),e(S8,_Fr),e(S8,w7e),e(w7e,uFr),e(S8,bFr),e(S8,A7e),e(A7e,vFr),e(uo,FFr),M(R8,uo,null),b(f,jUe,u),b(f,ic,u),e(ic,P8),e(P8,L7e),M(Sx,L7e,null),e(ic,TFr),e(ic,y7e),e(y7e,MFr),b(f,DUe,u),b(f,Zo,u),M(Rx,Zo,null),e(Zo,EFr),e(Zo,dc),e(dc,CFr),e(dc,BJ),e(BJ,wFr),e(dc,AFr),e(dc,IJ),e(IJ,LFr),e(dc,yFr),e(Zo,xFr),e(Zo,Px),e(Px,$Fr),e(Px,x7e),e(x7e,kFr),e(Px,SFr),e(Zo,RFr),e(Zo,Rt),M(Bx,Rt,null),e(Rt,PFr),e(Rt,$7e),e($7e,BFr),e(Rt,IFr),e(Rt,cc),e(cc,NFr),e(cc,k7e),e(k7e,qFr),e(cc,jFr),e(cc,NJ),e(NJ,DFr),e(cc,GFr),e(Rt,OFr),M(B8,Rt,null),e(Zo,VFr),e(Zo,bo),M(Ix,bo,null),e(bo,XFr),e(bo,S7e),e(S7e,zFr),e(bo,WFr),e(bo,cn),e(cn,QFr),e(cn,R7e),e(R7e,UFr),e(cn,HFr),e(cn,P7e),e(P7e,JFr),e(cn,YFr),e(cn,B7e),e(B7e,KFr),e(cn,ZFr),e(bo,eTr),e(bo,fn),e(fn,I8),e(I8,I7e),e(I7e,oTr),e(I8,rTr),e(I8,qJ),e(qJ,tTr),e(I8,aTr),e(fn,nTr),e(fn,N8),e(N8,N7e),e(N7e,sTr),e(N8,lTr),e(N8,jJ),e(jJ,iTr),e(N8,dTr),e(fn,cTr),e(fn,q8),e(q8,q7e),e(q7e,fTr),e(q8,mTr),e(q8,DJ),e(DJ,gTr),e(q8,hTr),e(fn,pTr),e(fn,j8),e(j8,j7e),e(j7e,_Tr),e(j8,uTr),e(j8,GJ),e(GJ,bTr),e(j8,vTr),e(bo,FTr),e(bo,D8),e(D8,TTr),e(D8,D7e),e(D7e,MTr),e(D8,ETr),e(D8,G7e),e(G7e,CTr),e(bo,wTr),M(G8,bo,null),b(f,GUe,u),b(f,fc,u),e(fc,O8),e(O8,O7e),M(Nx,O7e,null),e(fc,ATr),e(fc,V7e),e(V7e,LTr),b(f,OUe,u),b(f,er,u),M(qx,er,null),e(er,yTr),e(er,mc),e(mc,xTr),e(mc,OJ),e(OJ,$Tr),e(mc,kTr),e(mc,VJ),e(VJ,STr),e(mc,RTr),e(er,PTr),e(er,jx),e(jx,BTr),e(jx,X7e),e(X7e,ITr),e(jx,NTr),e(er,qTr),e(er,Pt),M(Dx,Pt,null),e(Pt,jTr),e(Pt,z7e),e(z7e,DTr),e(Pt,GTr),e(Pt,gc),e(gc,OTr),e(gc,W7e),e(W7e,VTr),e(gc,XTr),e(gc,XJ),e(XJ,zTr),e(gc,WTr),e(Pt,QTr),M(V8,Pt,null),e(er,UTr),e(er,vo),M(Gx,vo,null),e(vo,HTr),e(vo,Q7e),e(Q7e,JTr),e(vo,YTr),e(vo,mn),e(mn,KTr),e(mn,U7e),e(U7e,ZTr),e(mn,e7r),e(mn,H7e),e(H7e,o7r),e(mn,r7r),e(mn,J7e),e(J7e,t7r),e(mn,a7r),e(vo,n7r),e(vo,Ox),e(Ox,X8),e(X8,Y7e),e(Y7e,s7r),e(X8,l7r),e(X8,zJ),e(zJ,i7r),e(X8,d7r),e(Ox,c7r),e(Ox,z8),e(z8,K7e),e(K7e,f7r),e(z8,m7r),e(z8,WJ),e(WJ,g7r),e(z8,h7r),e(vo,p7r),e(vo,W8),e(W8,_7r),e(W8,Z7e),e(Z7e,u7r),e(W8,b7r),e(W8,e8e),e(e8e,v7r),e(vo,F7r),M(Q8,vo,null),b(f,VUe,u),b(f,hc,u),e(hc,U8),e(U8,o8e),M(Vx,o8e,null),e(hc,T7r),e(hc,r8e),e(r8e,M7r),b(f,XUe,u),b(f,or,u),M(Xx,or,null),e(or,E7r),e(or,pc),e(pc,C7r),e(pc,QJ),e(QJ,w7r),e(pc,A7r),e(pc,UJ),e(UJ,L7r),e(pc,y7r),e(or,x7r),e(or,zx),e(zx,$7r),e(zx,t8e),e(t8e,k7r),e(zx,S7r),e(or,R7r),e(or,Bt),M(Wx,Bt,null),e(Bt,P7r),e(Bt,a8e),e(a8e,B7r),e(Bt,I7r),e(Bt,_c),e(_c,N7r),e(_c,n8e),e(n8e,q7r),e(_c,j7r),e(_c,HJ),e(HJ,D7r),e(_c,G7r),e(Bt,O7r),M(H8,Bt,null),e(or,V7r),e(or,Fo),M(Qx,Fo,null),e(Fo,X7r),e(Fo,s8e),e(s8e,z7r),e(Fo,W7r),e(Fo,gn),e(gn,Q7r),e(gn,l8e),e(l8e,U7r),e(gn,H7r),e(gn,i8e),e(i8e,J7r),e(gn,Y7r),e(gn,d8e),e(d8e,K7r),e(gn,Z7r),e(Fo,e8r),e(Fo,c8e),e(c8e,J8),e(J8,f8e),e(f8e,o8r),e(J8,r8r),e(J8,JJ),e(JJ,t8r),e(J8,a8r),e(Fo,n8r),e(Fo,Y8),e(Y8,s8r),e(Y8,m8e),e(m8e,l8r),e(Y8,i8r),e(Y8,g8e),e(g8e,d8r),e(Fo,c8r),M(K8,Fo,null),b(f,zUe,u),b(f,uc,u),e(uc,Z8),e(Z8,h8e),M(Ux,h8e,null),e(uc,f8r),e(uc,p8e),e(p8e,m8r),b(f,WUe,u),b(f,rr,u),M(Hx,rr,null),e(rr,g8r),e(rr,bc),e(bc,h8r),e(bc,YJ),e(YJ,p8r),e(bc,_8r),e(bc,KJ),e(KJ,u8r),e(bc,b8r),e(rr,v8r),e(rr,Jx),e(Jx,F8r),e(Jx,_8e),e(_8e,T8r),e(Jx,M8r),e(rr,E8r),e(rr,It),M(Yx,It,null),e(It,C8r),e(It,u8e),e(u8e,w8r),e(It,A8r),e(It,vc),e(vc,L8r),e(vc,b8e),e(b8e,y8r),e(vc,x8r),e(vc,ZJ),e(ZJ,$8r),e(vc,k8r),e(It,S8r),M(e9,It,null),e(rr,R8r),e(rr,To),M(Kx,To,null),e(To,P8r),e(To,v8e),e(v8e,B8r),e(To,I8r),e(To,hn),e(hn,N8r),e(hn,F8e),e(F8e,q8r),e(hn,j8r),e(hn,T8e),e(T8e,D8r),e(hn,G8r),e(hn,M8e),e(M8e,O8r),e(hn,V8r),e(To,X8r),e(To,it),e(it,o9),e(o9,E8e),e(E8e,z8r),e(o9,W8r),e(o9,eY),e(eY,Q8r),e(o9,U8r),e(it,H8r),e(it,r9),e(r9,C8e),e(C8e,J8r),e(r9,Y8r),e(r9,oY),e(oY,K8r),e(r9,Z8r),e(it,e9r),e(it,t9),e(t9,w8e),e(w8e,o9r),e(t9,r9r),e(t9,rY),e(rY,t9r),e(t9,a9r),e(it,n9r),e(it,a9),e(a9,A8e),e(A8e,s9r),e(a9,l9r),e(a9,tY),e(tY,i9r),e(a9,d9r),e(it,c9r),e(it,n9),e(n9,L8e),e(L8e,f9r),e(n9,m9r),e(n9,aY),e(aY,g9r),e(n9,h9r),e(To,p9r),e(To,s9),e(s9,_9r),e(s9,y8e),e(y8e,u9r),e(s9,b9r),e(s9,x8e),e(x8e,v9r),e(To,F9r),M(l9,To,null),b(f,QUe,u),b(f,Fc,u),e(Fc,i9),e(i9,$8e),M(Zx,$8e,null),e(Fc,T9r),e(Fc,k8e),e(k8e,M9r),b(f,UUe,u),b(f,tr,u),M(e$,tr,null),e(tr,E9r),e(tr,Tc),e(Tc,C9r),e(Tc,nY),e(nY,w9r),e(Tc,A9r),e(Tc,sY),e(sY,L9r),e(Tc,y9r),e(tr,x9r),e(tr,o$),e(o$,$9r),e(o$,S8e),e(S8e,k9r),e(o$,S9r),e(tr,R9r),e(tr,Nt),M(r$,Nt,null),e(Nt,P9r),e(Nt,R8e),e(R8e,B9r),e(Nt,I9r),e(Nt,Mc),e(Mc,N9r),e(Mc,P8e),e(P8e,q9r),e(Mc,j9r),e(Mc,lY),e(lY,D9r),e(Mc,G9r),e(Nt,O9r),M(d9,Nt,null),e(tr,V9r),e(tr,Mo),M(t$,Mo,null),e(Mo,X9r),e(Mo,B8e),e(B8e,z9r),e(Mo,W9r),e(Mo,pn),e(pn,Q9r),e(pn,I8e),e(I8e,U9r),e(pn,H9r),e(pn,N8e),e(N8e,J9r),e(pn,Y9r),e(pn,q8e),e(q8e,K9r),e(pn,Z9r),e(Mo,eMr),e(Mo,j8e),e(j8e,c9),e(c9,D8e),e(D8e,oMr),e(c9,rMr),e(c9,iY),e(iY,tMr),e(c9,aMr),e(Mo,nMr),e(Mo,f9),e(f9,sMr),e(f9,G8e),e(G8e,lMr),e(f9,iMr),e(f9,O8e),e(O8e,dMr),e(Mo,cMr),M(m9,Mo,null),b(f,HUe,u),b(f,Ec,u),e(Ec,g9),e(g9,V8e),M(a$,V8e,null),e(Ec,fMr),e(Ec,X8e),e(X8e,mMr),b(f,JUe,u),b(f,ar,u),M(n$,ar,null),e(ar,gMr),e(ar,Cc),e(Cc,hMr),e(Cc,dY),e(dY,pMr),e(Cc,_Mr),e(Cc,cY),e(cY,uMr),e(Cc,bMr),e(ar,vMr),e(ar,s$),e(s$,FMr),e(s$,z8e),e(z8e,TMr),e(s$,MMr),e(ar,EMr),e(ar,qt),M(l$,qt,null),e(qt,CMr),e(qt,W8e),e(W8e,wMr),e(qt,AMr),e(qt,wc),e(wc,LMr),e(wc,Q8e),e(Q8e,yMr),e(wc,xMr),e(wc,fY),e(fY,$Mr),e(wc,kMr),e(qt,SMr),M(h9,qt,null),e(ar,RMr),e(ar,Rr),M(i$,Rr,null),e(Rr,PMr),e(Rr,U8e),e(U8e,BMr),e(Rr,IMr),e(Rr,_n),e(_n,NMr),e(_n,H8e),e(H8e,qMr),e(_n,jMr),e(_n,J8e),e(J8e,DMr),e(_n,GMr),e(_n,Y8e),e(Y8e,OMr),e(_n,VMr),e(Rr,XMr),e(Rr,q),e(q,p9),e(p9,K8e),e(K8e,zMr),e(p9,WMr),e(p9,mY),e(mY,QMr),e(p9,UMr),e(q,HMr),e(q,_9),e(_9,Z8e),e(Z8e,JMr),e(_9,YMr),e(_9,gY),e(gY,KMr),e(_9,ZMr),e(q,eEr),e(q,u9),e(u9,e9e),e(e9e,oEr),e(u9,rEr),e(u9,hY),e(hY,tEr),e(u9,aEr),e(q,nEr),e(q,b9),e(b9,o9e),e(o9e,sEr),e(b9,lEr),e(b9,pY),e(pY,iEr),e(b9,dEr),e(q,cEr),e(q,v9),e(v9,r9e),e(r9e,fEr),e(v9,mEr),e(v9,_Y),e(_Y,gEr),e(v9,hEr),e(q,pEr),e(q,F9),e(F9,t9e),e(t9e,_Er),e(F9,uEr),e(F9,uY),e(uY,bEr),e(F9,vEr),e(q,FEr),e(q,T9),e(T9,a9e),e(a9e,TEr),e(T9,MEr),e(T9,bY),e(bY,EEr),e(T9,CEr),e(q,wEr),e(q,M9),e(M9,n9e),e(n9e,AEr),e(M9,LEr),e(M9,vY),e(vY,yEr),e(M9,xEr),e(q,$Er),e(q,E9),e(E9,s9e),e(s9e,kEr),e(E9,SEr),e(E9,FY),e(FY,REr),e(E9,PEr),e(q,BEr),e(q,C9),e(C9,l9e),e(l9e,IEr),e(C9,NEr),e(C9,TY),e(TY,qEr),e(C9,jEr),e(q,DEr),e(q,w9),e(w9,i9e),e(i9e,GEr),e(w9,OEr),e(w9,MY),e(MY,VEr),e(w9,XEr),e(q,zEr),e(q,A9),e(A9,d9e),e(d9e,WEr),e(A9,QEr),e(A9,EY),e(EY,UEr),e(A9,HEr),e(q,JEr),e(q,L9),e(L9,c9e),e(c9e,YEr),e(L9,KEr),e(L9,CY),e(CY,ZEr),e(L9,e4r),e(q,o4r),e(q,y9),e(y9,f9e),e(f9e,r4r),e(y9,t4r),e(y9,wY),e(wY,a4r),e(y9,n4r),e(q,s4r),e(q,x9),e(x9,m9e),e(m9e,l4r),e(x9,i4r),e(x9,AY),e(AY,d4r),e(x9,c4r),e(q,f4r),e(q,$9),e($9,g9e),e(g9e,m4r),e($9,g4r),e($9,LY),e(LY,h4r),e($9,p4r),e(q,_4r),e(q,k9),e(k9,h9e),e(h9e,u4r),e(k9,b4r),e(k9,yY),e(yY,v4r),e(k9,F4r),e(q,T4r),e(q,S9),e(S9,p9e),e(p9e,M4r),e(S9,E4r),e(S9,xY),e(xY,C4r),e(S9,w4r),e(q,A4r),e(q,il),e(il,_9e),e(_9e,L4r),e(il,y4r),e(il,$Y),e($Y,x4r),e(il,$4r),e(il,kY),e(kY,k4r),e(il,S4r),e(q,R4r),e(q,R9),e(R9,u9e),e(u9e,P4r),e(R9,B4r),e(R9,SY),e(SY,I4r),e(R9,N4r),e(q,q4r),e(q,P9),e(P9,b9e),e(b9e,j4r),e(P9,D4r),e(P9,RY),e(RY,G4r),e(P9,O4r),e(q,V4r),e(q,B9),e(B9,v9e),e(v9e,X4r),e(B9,z4r),e(B9,PY),e(PY,W4r),e(B9,Q4r),e(q,U4r),e(q,I9),e(I9,F9e),e(F9e,H4r),e(I9,J4r),e(I9,BY),e(BY,Y4r),e(I9,K4r),e(q,Z4r),e(q,N9),e(N9,T9e),e(T9e,eCr),e(N9,oCr),e(N9,IY),e(IY,rCr),e(N9,tCr),e(q,aCr),e(q,q9),e(q9,M9e),e(M9e,nCr),e(q9,sCr),e(q9,NY),e(NY,lCr),e(q9,iCr),e(q,dCr),e(q,j9),e(j9,E9e),e(E9e,cCr),e(j9,fCr),e(j9,qY),e(qY,mCr),e(j9,gCr),e(q,hCr),e(q,D9),e(D9,C9e),e(C9e,pCr),e(D9,_Cr),e(D9,jY),e(jY,uCr),e(D9,bCr),e(q,vCr),e(q,G9),e(G9,w9e),e(w9e,FCr),e(G9,TCr),e(G9,DY),e(DY,MCr),e(G9,ECr),e(q,CCr),e(q,O9),e(O9,A9e),e(A9e,wCr),e(O9,ACr),e(O9,GY),e(GY,LCr),e(O9,yCr),e(q,xCr),e(q,V9),e(V9,L9e),e(L9e,$Cr),e(V9,kCr),e(V9,OY),e(OY,SCr),e(V9,RCr),e(q,PCr),e(q,X9),e(X9,y9e),e(y9e,BCr),e(X9,ICr),e(X9,VY),e(VY,NCr),e(X9,qCr),e(q,jCr),e(q,z9),e(z9,x9e),e(x9e,DCr),e(z9,GCr),e(z9,XY),e(XY,OCr),e(z9,VCr),e(q,XCr),e(q,W9),e(W9,$9e),e($9e,zCr),e(W9,WCr),e(W9,zY),e(zY,QCr),e(W9,UCr),e(q,HCr),e(q,Q9),e(Q9,k9e),e(k9e,JCr),e(Q9,YCr),e(Q9,WY),e(WY,KCr),e(Q9,ZCr),e(q,e3r),e(q,U9),e(U9,S9e),e(S9e,o3r),e(U9,r3r),e(U9,QY),e(QY,t3r),e(U9,a3r),e(q,n3r),e(q,H9),e(H9,R9e),e(R9e,s3r),e(H9,l3r),e(H9,UY),e(UY,i3r),e(H9,d3r),e(q,c3r),e(q,J9),e(J9,P9e),e(P9e,f3r),e(J9,m3r),e(J9,HY),e(HY,g3r),e(J9,h3r),e(q,p3r),e(q,Y9),e(Y9,B9e),e(B9e,_3r),e(Y9,u3r),e(Y9,JY),e(JY,b3r),e(Y9,v3r),e(q,F3r),e(q,K9),e(K9,I9e),e(I9e,T3r),e(K9,M3r),e(K9,YY),e(YY,E3r),e(K9,C3r),e(q,w3r),e(q,Z9),e(Z9,N9e),e(N9e,A3r),e(Z9,L3r),e(Z9,KY),e(KY,y3r),e(Z9,x3r),e(q,$3r),e(q,eM),e(eM,q9e),e(q9e,k3r),e(eM,S3r),e(eM,ZY),e(ZY,R3r),e(eM,P3r),e(q,B3r),e(q,oM),e(oM,j9e),e(j9e,I3r),e(oM,N3r),e(oM,eK),e(eK,q3r),e(oM,j3r),e(q,D3r),e(q,rM),e(rM,D9e),e(D9e,G3r),e(rM,O3r),e(rM,oK),e(oK,V3r),e(rM,X3r),e(q,z3r),e(q,tM),e(tM,G9e),e(G9e,W3r),e(tM,Q3r),e(tM,rK),e(rK,U3r),e(tM,H3r),e(q,J3r),e(q,aM),e(aM,O9e),e(O9e,Y3r),e(aM,K3r),e(aM,tK),e(tK,Z3r),e(aM,e5r),e(q,o5r),e(q,nM),e(nM,V9e),e(V9e,r5r),e(nM,t5r),e(nM,aK),e(aK,a5r),e(nM,n5r),e(q,s5r),e(q,sM),e(sM,X9e),e(X9e,l5r),e(sM,i5r),e(sM,nK),e(nK,d5r),e(sM,c5r),e(q,f5r),e(q,lM),e(lM,z9e),e(z9e,m5r),e(lM,g5r),e(lM,sK),e(sK,h5r),e(lM,p5r),e(q,_5r),e(q,iM),e(iM,W9e),e(W9e,u5r),e(iM,b5r),e(iM,lK),e(lK,v5r),e(iM,F5r),e(q,T5r),e(q,dM),e(dM,Q9e),e(Q9e,M5r),e(dM,E5r),e(dM,iK),e(iK,C5r),e(dM,w5r),e(q,A5r),e(q,cM),e(cM,U9e),e(U9e,L5r),e(cM,y5r),e(cM,dK),e(dK,x5r),e(cM,$5r),e(Rr,k5r),M(fM,Rr,null),b(f,YUe,u),b(f,Ac,u),e(Ac,mM),e(mM,H9e),M(d$,H9e,null),e(Ac,S5r),e(Ac,J9e),e(J9e,R5r),b(f,KUe,u),b(f,nr,u),M(c$,nr,null),e(nr,P5r),e(nr,Lc),e(Lc,B5r),e(Lc,cK),e(cK,I5r),e(Lc,N5r),e(Lc,fK),e(fK,q5r),e(Lc,j5r),e(nr,D5r),e(nr,f$),e(f$,G5r),e(f$,Y9e),e(Y9e,O5r),e(f$,V5r),e(nr,X5r),e(nr,jt),M(m$,jt,null),e(jt,z5r),e(jt,K9e),e(K9e,W5r),e(jt,Q5r),e(jt,yc),e(yc,U5r),e(yc,Z9e),e(Z9e,H5r),e(yc,J5r),e(yc,mK),e(mK,Y5r),e(yc,K5r),e(jt,Z5r),M(gM,jt,null),e(nr,e0r),e(nr,Pr),M(g$,Pr,null),e(Pr,o0r),e(Pr,eMe),e(eMe,r0r),e(Pr,t0r),e(Pr,un),e(un,a0r),e(un,oMe),e(oMe,n0r),e(un,s0r),e(un,rMe),e(rMe,l0r),e(un,i0r),e(un,tMe),e(tMe,d0r),e(un,c0r),e(Pr,f0r),e(Pr,se),e(se,hM),e(hM,aMe),e(aMe,m0r),e(hM,g0r),e(hM,gK),e(gK,h0r),e(hM,p0r),e(se,_0r),e(se,pM),e(pM,nMe),e(nMe,u0r),e(pM,b0r),e(pM,hK),e(hK,v0r),e(pM,F0r),e(se,T0r),e(se,_M),e(_M,sMe),e(sMe,M0r),e(_M,E0r),e(_M,pK),e(pK,C0r),e(_M,w0r),e(se,A0r),e(se,uM),e(uM,lMe),e(lMe,L0r),e(uM,y0r),e(uM,_K),e(_K,x0r),e(uM,$0r),e(se,k0r),e(se,bM),e(bM,iMe),e(iMe,S0r),e(bM,R0r),e(bM,uK),e(uK,P0r),e(bM,B0r),e(se,I0r),e(se,vM),e(vM,dMe),e(dMe,N0r),e(vM,q0r),e(vM,bK),e(bK,j0r),e(vM,D0r),e(se,G0r),e(se,FM),e(FM,cMe),e(cMe,O0r),e(FM,V0r),e(FM,vK),e(vK,X0r),e(FM,z0r),e(se,W0r),e(se,TM),e(TM,fMe),e(fMe,Q0r),e(TM,U0r),e(TM,FK),e(FK,H0r),e(TM,J0r),e(se,Y0r),e(se,MM),e(MM,mMe),e(mMe,K0r),e(MM,Z0r),e(MM,TK),e(TK,ewr),e(MM,owr),e(se,rwr),e(se,EM),e(EM,gMe),e(gMe,twr),e(EM,awr),e(EM,MK),e(MK,nwr),e(EM,swr),e(se,lwr),e(se,CM),e(CM,hMe),e(hMe,iwr),e(CM,dwr),e(CM,EK),e(EK,cwr),e(CM,fwr),e(se,mwr),e(se,wM),e(wM,pMe),e(pMe,gwr),e(wM,hwr),e(wM,CK),e(CK,pwr),e(wM,_wr),e(se,uwr),e(se,AM),e(AM,_Me),e(_Me,bwr),e(AM,vwr),e(AM,wK),e(wK,Fwr),e(AM,Twr),e(se,Mwr),e(se,LM),e(LM,uMe),e(uMe,Ewr),e(LM,Cwr),e(LM,AK),e(AK,wwr),e(LM,Awr),e(se,Lwr),e(se,yM),e(yM,bMe),e(bMe,ywr),e(yM,xwr),e(yM,LK),e(LK,$wr),e(yM,kwr),e(se,Swr),e(se,xM),e(xM,vMe),e(vMe,Rwr),e(xM,Pwr),e(xM,yK),e(yK,Bwr),e(xM,Iwr),e(se,Nwr),e(se,$M),e($M,FMe),e(FMe,qwr),e($M,jwr),e($M,xK),e(xK,Dwr),e($M,Gwr),e(se,Owr),e(se,kM),e(kM,TMe),e(TMe,Vwr),e(kM,Xwr),e(kM,$K),e($K,zwr),e(kM,Wwr),e(se,Qwr),e(se,SM),e(SM,MMe),e(MMe,Uwr),e(SM,Hwr),e(SM,kK),e(kK,Jwr),e(SM,Ywr),e(se,Kwr),e(se,RM),e(RM,EMe),e(EMe,Zwr),e(RM,eAr),e(RM,SK),e(SK,oAr),e(RM,rAr),e(se,tAr),e(se,PM),e(PM,CMe),e(CMe,aAr),e(PM,nAr),e(PM,RK),e(RK,sAr),e(PM,lAr),e(se,iAr),e(se,BM),e(BM,wMe),e(wMe,dAr),e(BM,cAr),e(BM,PK),e(PK,fAr),e(BM,mAr),e(se,gAr),e(se,IM),e(IM,AMe),e(AMe,hAr),e(IM,pAr),e(IM,BK),e(BK,_Ar),e(IM,uAr),e(Pr,bAr),M(NM,Pr,null),b(f,ZUe,u),b(f,xc,u),e(xc,qM),e(qM,LMe),M(h$,LMe,null),e(xc,vAr),e(xc,yMe),e(yMe,FAr),b(f,eHe,u),b(f,sr,u),M(p$,sr,null),e(sr,TAr),e(sr,$c),e($c,MAr),e($c,IK),e(IK,EAr),e($c,CAr),e($c,NK),e(NK,wAr),e($c,AAr),e(sr,LAr),e(sr,_$),e(_$,yAr),e(_$,xMe),e(xMe,xAr),e(_$,$Ar),e(sr,kAr),e(sr,Dt),M(u$,Dt,null),e(Dt,SAr),e(Dt,$Me),e($Me,RAr),e(Dt,PAr),e(Dt,kc),e(kc,BAr),e(kc,kMe),e(kMe,IAr),e(kc,NAr),e(kc,qK),e(qK,qAr),e(kc,jAr),e(Dt,DAr),M(jM,Dt,null),e(sr,GAr),e(sr,Br),M(b$,Br,null),e(Br,OAr),e(Br,SMe),e(SMe,VAr),e(Br,XAr),e(Br,bn),e(bn,zAr),e(bn,RMe),e(RMe,WAr),e(bn,QAr),e(bn,PMe),e(PMe,UAr),e(bn,HAr),e(bn,BMe),e(BMe,JAr),e(bn,YAr),e(Br,KAr),e(Br,Me),e(Me,DM),e(DM,IMe),e(IMe,ZAr),e(DM,eLr),e(DM,jK),e(jK,oLr),e(DM,rLr),e(Me,tLr),e(Me,GM),e(GM,NMe),e(NMe,aLr),e(GM,nLr),e(GM,DK),e(DK,sLr),e(GM,lLr),e(Me,iLr),e(Me,OM),e(OM,qMe),e(qMe,dLr),e(OM,cLr),e(OM,GK),e(GK,fLr),e(OM,mLr),e(Me,gLr),e(Me,VM),e(VM,jMe),e(jMe,hLr),e(VM,pLr),e(VM,OK),e(OK,_Lr),e(VM,uLr),e(Me,bLr),e(Me,XM),e(XM,DMe),e(DMe,vLr),e(XM,FLr),e(XM,VK),e(VK,TLr),e(XM,MLr),e(Me,ELr),e(Me,zM),e(zM,GMe),e(GMe,CLr),e(zM,wLr),e(zM,XK),e(XK,ALr),e(zM,LLr),e(Me,yLr),e(Me,WM),e(WM,OMe),e(OMe,xLr),e(WM,$Lr),e(WM,zK),e(zK,kLr),e(WM,SLr),e(Me,RLr),e(Me,QM),e(QM,VMe),e(VMe,PLr),e(QM,BLr),e(QM,WK),e(WK,ILr),e(QM,NLr),e(Me,qLr),e(Me,UM),e(UM,XMe),e(XMe,jLr),e(UM,DLr),e(UM,QK),e(QK,GLr),e(UM,OLr),e(Me,VLr),e(Me,HM),e(HM,zMe),e(zMe,XLr),e(HM,zLr),e(HM,UK),e(UK,WLr),e(HM,QLr),e(Me,ULr),e(Me,JM),e(JM,WMe),e(WMe,HLr),e(JM,JLr),e(JM,HK),e(HK,YLr),e(JM,KLr),e(Me,ZLr),e(Me,YM),e(YM,QMe),e(QMe,eyr),e(YM,oyr),e(YM,JK),e(JK,ryr),e(YM,tyr),e(Me,ayr),e(Me,KM),e(KM,UMe),e(UMe,nyr),e(KM,syr),e(KM,YK),e(YK,lyr),e(KM,iyr),e(Br,dyr),M(ZM,Br,null),b(f,oHe,u),b(f,Sc,u),e(Sc,eE),e(eE,HMe),M(v$,HMe,null),e(Sc,cyr),e(Sc,JMe),e(JMe,fyr),b(f,rHe,u),b(f,lr,u),M(F$,lr,null),e(lr,myr),e(lr,Rc),e(Rc,gyr),e(Rc,KK),e(KK,hyr),e(Rc,pyr),e(Rc,ZK),e(ZK,_yr),e(Rc,uyr),e(lr,byr),e(lr,T$),e(T$,vyr),e(T$,YMe),e(YMe,Fyr),e(T$,Tyr),e(lr,Myr),e(lr,Gt),M(M$,Gt,null),e(Gt,Eyr),e(Gt,KMe),e(KMe,Cyr),e(Gt,wyr),e(Gt,Pc),e(Pc,Ayr),e(Pc,ZMe),e(ZMe,Lyr),e(Pc,yyr),e(Pc,eZ),e(eZ,xyr),e(Pc,$yr),e(Gt,kyr),M(oE,Gt,null),e(lr,Syr),e(lr,Ir),M(E$,Ir,null),e(Ir,Ryr),e(Ir,eEe),e(eEe,Pyr),e(Ir,Byr),e(Ir,vn),e(vn,Iyr),e(vn,oEe),e(oEe,Nyr),e(vn,qyr),e(vn,rEe),e(rEe,jyr),e(vn,Dyr),e(vn,tEe),e(tEe,Gyr),e(vn,Oyr),e(Ir,Vyr),e(Ir,Ve),e(Ve,rE),e(rE,aEe),e(aEe,Xyr),e(rE,zyr),e(rE,oZ),e(oZ,Wyr),e(rE,Qyr),e(Ve,Uyr),e(Ve,tE),e(tE,nEe),e(nEe,Hyr),e(tE,Jyr),e(tE,rZ),e(rZ,Yyr),e(tE,Kyr),e(Ve,Zyr),e(Ve,dl),e(dl,sEe),e(sEe,exr),e(dl,oxr),e(dl,tZ),e(tZ,rxr),e(dl,txr),e(dl,aZ),e(aZ,axr),e(dl,nxr),e(Ve,sxr),e(Ve,aE),e(aE,lEe),e(lEe,lxr),e(aE,ixr),e(aE,nZ),e(nZ,dxr),e(aE,cxr),e(Ve,fxr),e(Ve,nE),e(nE,iEe),e(iEe,mxr),e(nE,gxr),e(nE,sZ),e(sZ,hxr),e(nE,pxr),e(Ve,_xr),e(Ve,sE),e(sE,dEe),e(dEe,uxr),e(sE,bxr),e(sE,lZ),e(lZ,vxr),e(sE,Fxr),e(Ve,Txr),e(Ve,lE),e(lE,cEe),e(cEe,Mxr),e(lE,Exr),e(lE,iZ),e(iZ,Cxr),e(lE,wxr),e(Ve,Axr),e(Ve,iE),e(iE,fEe),e(fEe,Lxr),e(iE,yxr),e(iE,dZ),e(dZ,xxr),e(iE,$xr),e(Ir,kxr),M(dE,Ir,null),b(f,tHe,u),b(f,Bc,u),e(Bc,cE),e(cE,mEe),M(C$,mEe,null),e(Bc,Sxr),e(Bc,gEe),e(gEe,Rxr),b(f,aHe,u),b(f,ir,u),M(w$,ir,null),e(ir,Pxr),e(ir,Ic),e(Ic,Bxr),e(Ic,cZ),e(cZ,Ixr),e(Ic,Nxr),e(Ic,fZ),e(fZ,qxr),e(Ic,jxr),e(ir,Dxr),e(ir,A$),e(A$,Gxr),e(A$,hEe),e(hEe,Oxr),e(A$,Vxr),e(ir,Xxr),e(ir,Ot),M(L$,Ot,null),e(Ot,zxr),e(Ot,pEe),e(pEe,Wxr),e(Ot,Qxr),e(Ot,Nc),e(Nc,Uxr),e(Nc,_Ee),e(_Ee,Hxr),e(Nc,Jxr),e(Nc,mZ),e(mZ,Yxr),e(Nc,Kxr),e(Ot,Zxr),M(fE,Ot,null),e(ir,e$r),e(ir,Nr),M(y$,Nr,null),e(Nr,o$r),e(Nr,uEe),e(uEe,r$r),e(Nr,t$r),e(Nr,Fn),e(Fn,a$r),e(Fn,bEe),e(bEe,n$r),e(Fn,s$r),e(Fn,vEe),e(vEe,l$r),e(Fn,i$r),e(Fn,FEe),e(FEe,d$r),e(Fn,c$r),e(Nr,f$r),e(Nr,x$),e(x$,mE),e(mE,TEe),e(TEe,m$r),e(mE,g$r),e(mE,gZ),e(gZ,h$r),e(mE,p$r),e(x$,_$r),e(x$,gE),e(gE,MEe),e(MEe,u$r),e(gE,b$r),e(gE,hZ),e(hZ,v$r),e(gE,F$r),e(Nr,T$r),M(hE,Nr,null),b(f,nHe,u),b(f,qc,u),e(qc,pE),e(pE,EEe),M($$,EEe,null),e(qc,M$r),e(qc,CEe),e(CEe,E$r),b(f,sHe,u),b(f,dr,u),M(k$,dr,null),e(dr,C$r),e(dr,jc),e(jc,w$r),e(jc,pZ),e(pZ,A$r),e(jc,L$r),e(jc,_Z),e(_Z,y$r),e(jc,x$r),e(dr,$$r),e(dr,S$),e(S$,k$r),e(S$,wEe),e(wEe,S$r),e(S$,R$r),e(dr,P$r),e(dr,Vt),M(R$,Vt,null),e(Vt,B$r),e(Vt,AEe),e(AEe,I$r),e(Vt,N$r),e(Vt,Dc),e(Dc,q$r),e(Dc,LEe),e(LEe,j$r),e(Dc,D$r),e(Dc,uZ),e(uZ,G$r),e(Dc,O$r),e(Vt,V$r),M(_E,Vt,null),e(dr,X$r),e(dr,qr),M(P$,qr,null),e(qr,z$r),e(qr,yEe),e(yEe,W$r),e(qr,Q$r),e(qr,Tn),e(Tn,U$r),e(Tn,xEe),e(xEe,H$r),e(Tn,J$r),e(Tn,$Ee),e($Ee,Y$r),e(Tn,K$r),e(Tn,kEe),e(kEe,Z$r),e(Tn,ekr),e(qr,okr),e(qr,de),e(de,uE),e(uE,SEe),e(SEe,rkr),e(uE,tkr),e(uE,bZ),e(bZ,akr),e(uE,nkr),e(de,skr),e(de,bE),e(bE,REe),e(REe,lkr),e(bE,ikr),e(bE,vZ),e(vZ,dkr),e(bE,ckr),e(de,fkr),e(de,vE),e(vE,PEe),e(PEe,mkr),e(vE,gkr),e(vE,FZ),e(FZ,hkr),e(vE,pkr),e(de,_kr),e(de,FE),e(FE,BEe),e(BEe,ukr),e(FE,bkr),e(FE,TZ),e(TZ,vkr),e(FE,Fkr),e(de,Tkr),e(de,TE),e(TE,IEe),e(IEe,Mkr),e(TE,Ekr),e(TE,MZ),e(MZ,Ckr),e(TE,wkr),e(de,Akr),e(de,ME),e(ME,NEe),e(NEe,Lkr),e(ME,ykr),e(ME,EZ),e(EZ,xkr),e(ME,$kr),e(de,kkr),e(de,EE),e(EE,qEe),e(qEe,Skr),e(EE,Rkr),e(EE,CZ),e(CZ,Pkr),e(EE,Bkr),e(de,Ikr),e(de,CE),e(CE,jEe),e(jEe,Nkr),e(CE,qkr),e(CE,wZ),e(wZ,jkr),e(CE,Dkr),e(de,Gkr),e(de,wE),e(wE,DEe),e(DEe,Okr),e(wE,Vkr),e(wE,AZ),e(AZ,Xkr),e(wE,zkr),e(de,Wkr),e(de,AE),e(AE,GEe),e(GEe,Qkr),e(AE,Ukr),e(AE,LZ),e(LZ,Hkr),e(AE,Jkr),e(de,Ykr),e(de,LE),e(LE,OEe),e(OEe,Kkr),e(LE,Zkr),e(LE,yZ),e(yZ,eSr),e(LE,oSr),e(de,rSr),e(de,yE),e(yE,VEe),e(VEe,tSr),e(yE,aSr),e(yE,xZ),e(xZ,nSr),e(yE,sSr),e(de,lSr),e(de,xE),e(xE,XEe),e(XEe,iSr),e(xE,dSr),e(xE,$Z),e($Z,cSr),e(xE,fSr),e(de,mSr),e(de,$E),e($E,zEe),e(zEe,gSr),e($E,hSr),e($E,kZ),e(kZ,pSr),e($E,_Sr),e(de,uSr),e(de,kE),e(kE,WEe),e(WEe,bSr),e(kE,vSr),e(kE,SZ),e(SZ,FSr),e(kE,TSr),e(de,MSr),e(de,SE),e(SE,QEe),e(QEe,ESr),e(SE,CSr),e(SE,RZ),e(RZ,wSr),e(SE,ASr),e(de,LSr),e(de,RE),e(RE,UEe),e(UEe,ySr),e(RE,xSr),e(RE,PZ),e(PZ,$Sr),e(RE,kSr),e(de,SSr),e(de,PE),e(PE,HEe),e(HEe,RSr),e(PE,PSr),e(PE,BZ),e(BZ,BSr),e(PE,ISr),e(de,NSr),e(de,BE),e(BE,JEe),e(JEe,qSr),e(BE,jSr),e(BE,IZ),e(IZ,DSr),e(BE,GSr),e(de,OSr),e(de,IE),e(IE,YEe),e(YEe,VSr),e(IE,XSr),e(IE,NZ),e(NZ,zSr),e(IE,WSr),e(qr,QSr),M(NE,qr,null),b(f,lHe,u),b(f,Gc,u),e(Gc,qE),e(qE,KEe),M(B$,KEe,null),e(Gc,USr),e(Gc,ZEe),e(ZEe,HSr),b(f,iHe,u),b(f,cr,u),M(I$,cr,null),e(cr,JSr),e(cr,Oc),e(Oc,YSr),e(Oc,qZ),e(qZ,KSr),e(Oc,ZSr),e(Oc,jZ),e(jZ,eRr),e(Oc,oRr),e(cr,rRr),e(cr,N$),e(N$,tRr),e(N$,e4e),e(e4e,aRr),e(N$,nRr),e(cr,sRr),e(cr,Xt),M(q$,Xt,null),e(Xt,lRr),e(Xt,o4e),e(o4e,iRr),e(Xt,dRr),e(Xt,Vc),e(Vc,cRr),e(Vc,r4e),e(r4e,fRr),e(Vc,mRr),e(Vc,DZ),e(DZ,gRr),e(Vc,hRr),e(Xt,pRr),M(jE,Xt,null),e(cr,_Rr),e(cr,jr),M(j$,jr,null),e(jr,uRr),e(jr,t4e),e(t4e,bRr),e(jr,vRr),e(jr,Mn),e(Mn,FRr),e(Mn,a4e),e(a4e,TRr),e(Mn,MRr),e(Mn,n4e),e(n4e,ERr),e(Mn,CRr),e(Mn,s4e),e(s4e,wRr),e(Mn,ARr),e(jr,LRr),e(jr,ye),e(ye,DE),e(DE,l4e),e(l4e,yRr),e(DE,xRr),e(DE,GZ),e(GZ,$Rr),e(DE,kRr),e(ye,SRr),e(ye,GE),e(GE,i4e),e(i4e,RRr),e(GE,PRr),e(GE,OZ),e(OZ,BRr),e(GE,IRr),e(ye,NRr),e(ye,OE),e(OE,d4e),e(d4e,qRr),e(OE,jRr),e(OE,VZ),e(VZ,DRr),e(OE,GRr),e(ye,ORr),e(ye,VE),e(VE,c4e),e(c4e,VRr),e(VE,XRr),e(VE,XZ),e(XZ,zRr),e(VE,WRr),e(ye,QRr),e(ye,XE),e(XE,f4e),e(f4e,URr),e(XE,HRr),e(XE,zZ),e(zZ,JRr),e(XE,YRr),e(ye,KRr),e(ye,zE),e(zE,m4e),e(m4e,ZRr),e(zE,ePr),e(zE,WZ),e(WZ,oPr),e(zE,rPr),e(ye,tPr),e(ye,WE),e(WE,g4e),e(g4e,aPr),e(WE,nPr),e(WE,QZ),e(QZ,sPr),e(WE,lPr),e(ye,iPr),e(ye,QE),e(QE,h4e),e(h4e,dPr),e(QE,cPr),e(QE,UZ),e(UZ,fPr),e(QE,mPr),e(ye,gPr),e(ye,UE),e(UE,p4e),e(p4e,hPr),e(UE,pPr),e(UE,HZ),e(HZ,_Pr),e(UE,uPr),e(ye,bPr),e(ye,HE),e(HE,_4e),e(_4e,vPr),e(HE,FPr),e(HE,JZ),e(JZ,TPr),e(HE,MPr),e(jr,EPr),M(JE,jr,null),b(f,dHe,u),b(f,Xc,u),e(Xc,YE),e(YE,u4e),M(D$,u4e,null),e(Xc,CPr),e(Xc,b4e),e(b4e,wPr),b(f,cHe,u),b(f,fr,u),M(G$,fr,null),e(fr,APr),e(fr,zc),e(zc,LPr),e(zc,YZ),e(YZ,yPr),e(zc,xPr),e(zc,KZ),e(KZ,$Pr),e(zc,kPr),e(fr,SPr),e(fr,O$),e(O$,RPr),e(O$,v4e),e(v4e,PPr),e(O$,BPr),e(fr,IPr),e(fr,zt),M(V$,zt,null),e(zt,NPr),e(zt,F4e),e(F4e,qPr),e(zt,jPr),e(zt,Wc),e(Wc,DPr),e(Wc,T4e),e(T4e,GPr),e(Wc,OPr),e(Wc,ZZ),e(ZZ,VPr),e(Wc,XPr),e(zt,zPr),M(KE,zt,null),e(fr,WPr),e(fr,Dr),M(X$,Dr,null),e(Dr,QPr),e(Dr,M4e),e(M4e,UPr),e(Dr,HPr),e(Dr,En),e(En,JPr),e(En,E4e),e(E4e,YPr),e(En,KPr),e(En,C4e),e(C4e,ZPr),e(En,eBr),e(En,w4e),e(w4e,oBr),e(En,rBr),e(Dr,tBr),e(Dr,te),e(te,ZE),e(ZE,A4e),e(A4e,aBr),e(ZE,nBr),e(ZE,eee),e(eee,sBr),e(ZE,lBr),e(te,iBr),e(te,e4),e(e4,L4e),e(L4e,dBr),e(e4,cBr),e(e4,oee),e(oee,fBr),e(e4,mBr),e(te,gBr),e(te,o4),e(o4,y4e),e(y4e,hBr),e(o4,pBr),e(o4,ree),e(ree,_Br),e(o4,uBr),e(te,bBr),e(te,r4),e(r4,x4e),e(x4e,vBr),e(r4,FBr),e(r4,tee),e(tee,TBr),e(r4,MBr),e(te,EBr),e(te,t4),e(t4,$4e),e($4e,CBr),e(t4,wBr),e(t4,aee),e(aee,ABr),e(t4,LBr),e(te,yBr),e(te,a4),e(a4,k4e),e(k4e,xBr),e(a4,$Br),e(a4,nee),e(nee,kBr),e(a4,SBr),e(te,RBr),e(te,n4),e(n4,S4e),e(S4e,PBr),e(n4,BBr),e(n4,see),e(see,IBr),e(n4,NBr),e(te,qBr),e(te,s4),e(s4,R4e),e(R4e,jBr),e(s4,DBr),e(s4,lee),e(lee,GBr),e(s4,OBr),e(te,VBr),e(te,l4),e(l4,P4e),e(P4e,XBr),e(l4,zBr),e(l4,iee),e(iee,WBr),e(l4,QBr),e(te,UBr),e(te,i4),e(i4,B4e),e(B4e,HBr),e(i4,JBr),e(i4,dee),e(dee,YBr),e(i4,KBr),e(te,ZBr),e(te,d4),e(d4,I4e),e(I4e,eIr),e(d4,oIr),e(d4,cee),e(cee,rIr),e(d4,tIr),e(te,aIr),e(te,c4),e(c4,N4e),e(N4e,nIr),e(c4,sIr),e(c4,fee),e(fee,lIr),e(c4,iIr),e(te,dIr),e(te,f4),e(f4,q4e),e(q4e,cIr),e(f4,fIr),e(f4,mee),e(mee,mIr),e(f4,gIr),e(te,hIr),e(te,m4),e(m4,j4e),e(j4e,pIr),e(m4,_Ir),e(m4,gee),e(gee,uIr),e(m4,bIr),e(te,vIr),e(te,g4),e(g4,D4e),e(D4e,FIr),e(g4,TIr),e(g4,hee),e(hee,MIr),e(g4,EIr),e(te,CIr),e(te,h4),e(h4,G4e),e(G4e,wIr),e(h4,AIr),e(h4,pee),e(pee,LIr),e(h4,yIr),e(te,xIr),e(te,p4),e(p4,O4e),e(O4e,$Ir),e(p4,kIr),e(p4,_ee),e(_ee,SIr),e(p4,RIr),e(te,PIr),e(te,_4),e(_4,V4e),e(V4e,BIr),e(_4,IIr),e(_4,uee),e(uee,NIr),e(_4,qIr),e(te,jIr),e(te,u4),e(u4,X4e),e(X4e,DIr),e(u4,GIr),e(u4,bee),e(bee,OIr),e(u4,VIr),e(te,XIr),e(te,b4),e(b4,z4e),e(z4e,zIr),e(b4,WIr),e(b4,vee),e(vee,QIr),e(b4,UIr),e(te,HIr),e(te,v4),e(v4,W4e),e(W4e,JIr),e(v4,YIr),e(v4,Fee),e(Fee,KIr),e(v4,ZIr),e(te,eNr),e(te,F4),e(F4,Q4e),e(Q4e,oNr),e(F4,rNr),e(F4,Tee),e(Tee,tNr),e(F4,aNr),e(te,nNr),e(te,T4),e(T4,U4e),e(U4e,sNr),e(T4,lNr),e(T4,Mee),e(Mee,iNr),e(T4,dNr),e(te,cNr),e(te,M4),e(M4,H4e),e(H4e,fNr),e(M4,mNr),e(M4,Eee),e(Eee,gNr),e(M4,hNr),e(te,pNr),e(te,E4),e(E4,J4e),e(J4e,_Nr),e(E4,uNr),e(E4,Cee),e(Cee,bNr),e(E4,vNr),e(te,FNr),e(te,C4),e(C4,Y4e),e(Y4e,TNr),e(C4,MNr),e(C4,wee),e(wee,ENr),e(C4,CNr),e(Dr,wNr),M(w4,Dr,null),b(f,fHe,u),b(f,Qc,u),e(Qc,A4),e(A4,K4e),M(z$,K4e,null),e(Qc,ANr),e(Qc,Z4e),e(Z4e,LNr),b(f,mHe,u),b(f,mr,u),M(W$,mr,null),e(mr,yNr),e(mr,Uc),e(Uc,xNr),e(Uc,Aee),e(Aee,$Nr),e(Uc,kNr),e(Uc,Lee),e(Lee,SNr),e(Uc,RNr),e(mr,PNr),e(mr,Q$),e(Q$,BNr),e(Q$,eCe),e(eCe,INr),e(Q$,NNr),e(mr,qNr),e(mr,Wt),M(U$,Wt,null),e(Wt,jNr),e(Wt,oCe),e(oCe,DNr),e(Wt,GNr),e(Wt,Hc),e(Hc,ONr),e(Hc,rCe),e(rCe,VNr),e(Hc,XNr),e(Hc,yee),e(yee,zNr),e(Hc,WNr),e(Wt,QNr),M(L4,Wt,null),e(mr,UNr),e(mr,Gr),M(H$,Gr,null),e(Gr,HNr),e(Gr,tCe),e(tCe,JNr),e(Gr,YNr),e(Gr,Cn),e(Cn,KNr),e(Cn,aCe),e(aCe,ZNr),e(Cn,eqr),e(Cn,nCe),e(nCe,oqr),e(Cn,rqr),e(Cn,sCe),e(sCe,tqr),e(Cn,aqr),e(Gr,nqr),e(Gr,ve),e(ve,y4),e(y4,lCe),e(lCe,sqr),e(y4,lqr),e(y4,xee),e(xee,iqr),e(y4,dqr),e(ve,cqr),e(ve,x4),e(x4,iCe),e(iCe,fqr),e(x4,mqr),e(x4,$ee),e($ee,gqr),e(x4,hqr),e(ve,pqr),e(ve,$4),e($4,dCe),e(dCe,_qr),e($4,uqr),e($4,kee),e(kee,bqr),e($4,vqr),e(ve,Fqr),e(ve,k4),e(k4,cCe),e(cCe,Tqr),e(k4,Mqr),e(k4,See),e(See,Eqr),e(k4,Cqr),e(ve,wqr),e(ve,S4),e(S4,fCe),e(fCe,Aqr),e(S4,Lqr),e(S4,Ree),e(Ree,yqr),e(S4,xqr),e(ve,$qr),e(ve,R4),e(R4,mCe),e(mCe,kqr),e(R4,Sqr),e(R4,Pee),e(Pee,Rqr),e(R4,Pqr),e(ve,Bqr),e(ve,P4),e(P4,gCe),e(gCe,Iqr),e(P4,Nqr),e(P4,Bee),e(Bee,qqr),e(P4,jqr),e(ve,Dqr),e(ve,B4),e(B4,hCe),e(hCe,Gqr),e(B4,Oqr),e(B4,Iee),e(Iee,Vqr),e(B4,Xqr),e(ve,zqr),e(ve,I4),e(I4,pCe),e(pCe,Wqr),e(I4,Qqr),e(I4,Nee),e(Nee,Uqr),e(I4,Hqr),e(ve,Jqr),e(ve,N4),e(N4,_Ce),e(_Ce,Yqr),e(N4,Kqr),e(N4,qee),e(qee,Zqr),e(N4,ejr),e(ve,ojr),e(ve,q4),e(q4,uCe),e(uCe,rjr),e(q4,tjr),e(q4,jee),e(jee,ajr),e(q4,njr),e(ve,sjr),e(ve,j4),e(j4,bCe),e(bCe,ljr),e(j4,ijr),e(j4,Dee),e(Dee,djr),e(j4,cjr),e(ve,fjr),e(ve,D4),e(D4,vCe),e(vCe,mjr),e(D4,gjr),e(D4,Gee),e(Gee,hjr),e(D4,pjr),e(ve,_jr),e(ve,G4),e(G4,FCe),e(FCe,ujr),e(G4,bjr),e(G4,Oee),e(Oee,vjr),e(G4,Fjr),e(ve,Tjr),e(ve,O4),e(O4,TCe),e(TCe,Mjr),e(O4,Ejr),e(O4,Vee),e(Vee,Cjr),e(O4,wjr),e(ve,Ajr),e(ve,V4),e(V4,MCe),e(MCe,Ljr),e(V4,yjr),e(V4,Xee),e(Xee,xjr),e(V4,$jr),e(ve,kjr),e(ve,X4),e(X4,ECe),e(ECe,Sjr),e(X4,Rjr),e(X4,zee),e(zee,Pjr),e(X4,Bjr),e(Gr,Ijr),M(z4,Gr,null),b(f,gHe,u),b(f,Jc,u),e(Jc,W4),e(W4,CCe),M(J$,CCe,null),e(Jc,Njr),e(Jc,wCe),e(wCe,qjr),b(f,hHe,u),b(f,gr,u),M(Y$,gr,null),e(gr,jjr),e(gr,Yc),e(Yc,Djr),e(Yc,Wee),e(Wee,Gjr),e(Yc,Ojr),e(Yc,Qee),e(Qee,Vjr),e(Yc,Xjr),e(gr,zjr),e(gr,K$),e(K$,Wjr),e(K$,ACe),e(ACe,Qjr),e(K$,Ujr),e(gr,Hjr),e(gr,Qt),M(Z$,Qt,null),e(Qt,Jjr),e(Qt,LCe),e(LCe,Yjr),e(Qt,Kjr),e(Qt,Kc),e(Kc,Zjr),e(Kc,yCe),e(yCe,eDr),e(Kc,oDr),e(Kc,Uee),e(Uee,rDr),e(Kc,tDr),e(Qt,aDr),M(Q4,Qt,null),e(gr,nDr),e(gr,Or),M(ek,Or,null),e(Or,sDr),e(Or,xCe),e(xCe,lDr),e(Or,iDr),e(Or,wn),e(wn,dDr),e(wn,$Ce),e($Ce,cDr),e(wn,fDr),e(wn,kCe),e(kCe,mDr),e(wn,gDr),e(wn,SCe),e(SCe,hDr),e(wn,pDr),e(Or,_Dr),e(Or,ok),e(ok,U4),e(U4,RCe),e(RCe,uDr),e(U4,bDr),e(U4,Hee),e(Hee,vDr),e(U4,FDr),e(ok,TDr),e(ok,H4),e(H4,PCe),e(PCe,MDr),e(H4,EDr),e(H4,Jee),e(Jee,CDr),e(H4,wDr),e(Or,ADr),M(J4,Or,null),b(f,pHe,u),b(f,Zc,u),e(Zc,Y4),e(Y4,BCe),M(rk,BCe,null),e(Zc,LDr),e(Zc,ICe),e(ICe,yDr),b(f,_He,u),b(f,hr,u),M(tk,hr,null),e(hr,xDr),e(hr,ef),e(ef,$Dr),e(ef,Yee),e(Yee,kDr),e(ef,SDr),e(ef,Kee),e(Kee,RDr),e(ef,PDr),e(hr,BDr),e(hr,ak),e(ak,IDr),e(ak,NCe),e(NCe,NDr),e(ak,qDr),e(hr,jDr),e(hr,Ut),M(nk,Ut,null),e(Ut,DDr),e(Ut,qCe),e(qCe,GDr),e(Ut,ODr),e(Ut,of),e(of,VDr),e(of,jCe),e(jCe,XDr),e(of,zDr),e(of,Zee),e(Zee,WDr),e(of,QDr),e(Ut,UDr),M(K4,Ut,null),e(hr,HDr),e(hr,Vr),M(sk,Vr,null),e(Vr,JDr),e(Vr,DCe),e(DCe,YDr),e(Vr,KDr),e(Vr,An),e(An,ZDr),e(An,GCe),e(GCe,eGr),e(An,oGr),e(An,OCe),e(OCe,rGr),e(An,tGr),e(An,VCe),e(VCe,aGr),e(An,nGr),e(Vr,sGr),e(Vr,XCe),e(XCe,Z4),e(Z4,zCe),e(zCe,lGr),e(Z4,iGr),e(Z4,eoe),e(eoe,dGr),e(Z4,cGr),e(Vr,fGr),M(eC,Vr,null),b(f,uHe,u),b(f,rf,u),e(rf,oC),e(oC,WCe),M(lk,WCe,null),e(rf,mGr),e(rf,QCe),e(QCe,gGr),b(f,bHe,u),b(f,pr,u),M(ik,pr,null),e(pr,hGr),e(pr,tf),e(tf,pGr),e(tf,ooe),e(ooe,_Gr),e(tf,uGr),e(tf,roe),e(roe,bGr),e(tf,vGr),e(pr,FGr),e(pr,dk),e(dk,TGr),e(dk,UCe),e(UCe,MGr),e(dk,EGr),e(pr,CGr),e(pr,Ht),M(ck,Ht,null),e(Ht,wGr),e(Ht,HCe),e(HCe,AGr),e(Ht,LGr),e(Ht,af),e(af,yGr),e(af,JCe),e(JCe,xGr),e(af,$Gr),e(af,toe),e(toe,kGr),e(af,SGr),e(Ht,RGr),M(rC,Ht,null),e(pr,PGr),e(pr,Xr),M(fk,Xr,null),e(Xr,BGr),e(Xr,YCe),e(YCe,IGr),e(Xr,NGr),e(Xr,Ln),e(Ln,qGr),e(Ln,KCe),e(KCe,jGr),e(Ln,DGr),e(Ln,ZCe),e(ZCe,GGr),e(Ln,OGr),e(Ln,e3e),e(e3e,VGr),e(Ln,XGr),e(Xr,zGr),e(Xr,ce),e(ce,tC),e(tC,o3e),e(o3e,WGr),e(tC,QGr),e(tC,aoe),e(aoe,UGr),e(tC,HGr),e(ce,JGr),e(ce,aC),e(aC,r3e),e(r3e,YGr),e(aC,KGr),e(aC,noe),e(noe,ZGr),e(aC,eOr),e(ce,oOr),e(ce,nC),e(nC,t3e),e(t3e,rOr),e(nC,tOr),e(nC,soe),e(soe,aOr),e(nC,nOr),e(ce,sOr),e(ce,sC),e(sC,a3e),e(a3e,lOr),e(sC,iOr),e(sC,loe),e(loe,dOr),e(sC,cOr),e(ce,fOr),e(ce,lC),e(lC,n3e),e(n3e,mOr),e(lC,gOr),e(lC,ioe),e(ioe,hOr),e(lC,pOr),e(ce,_Or),e(ce,iC),e(iC,s3e),e(s3e,uOr),e(iC,bOr),e(iC,doe),e(doe,vOr),e(iC,FOr),e(ce,TOr),e(ce,dC),e(dC,l3e),e(l3e,MOr),e(dC,EOr),e(dC,coe),e(coe,COr),e(dC,wOr),e(ce,AOr),e(ce,cC),e(cC,i3e),e(i3e,LOr),e(cC,yOr),e(cC,foe),e(foe,xOr),e(cC,$Or),e(ce,kOr),e(ce,fC),e(fC,d3e),e(d3e,SOr),e(fC,ROr),e(fC,moe),e(moe,POr),e(fC,BOr),e(ce,IOr),e(ce,mC),e(mC,c3e),e(c3e,NOr),e(mC,qOr),e(mC,goe),e(goe,jOr),e(mC,DOr),e(ce,GOr),e(ce,gC),e(gC,f3e),e(f3e,OOr),e(gC,VOr),e(gC,hoe),e(hoe,XOr),e(gC,zOr),e(ce,WOr),e(ce,hC),e(hC,m3e),e(m3e,QOr),e(hC,UOr),e(hC,poe),e(poe,HOr),e(hC,JOr),e(ce,YOr),e(ce,pC),e(pC,g3e),e(g3e,KOr),e(pC,ZOr),e(pC,_oe),e(_oe,eVr),e(pC,oVr),e(ce,rVr),e(ce,_C),e(_C,h3e),e(h3e,tVr),e(_C,aVr),e(_C,uoe),e(uoe,nVr),e(_C,sVr),e(ce,lVr),e(ce,uC),e(uC,p3e),e(p3e,iVr),e(uC,dVr),e(uC,boe),e(boe,cVr),e(uC,fVr),e(ce,mVr),e(ce,bC),e(bC,_3e),e(_3e,gVr),e(bC,hVr),e(bC,voe),e(voe,pVr),e(bC,_Vr),e(ce,uVr),e(ce,vC),e(vC,u3e),e(u3e,bVr),e(vC,vVr),e(vC,Foe),e(Foe,FVr),e(vC,TVr),e(ce,MVr),e(ce,FC),e(FC,b3e),e(b3e,EVr),e(FC,CVr),e(FC,Toe),e(Toe,wVr),e(FC,AVr),e(ce,LVr),e(ce,TC),e(TC,v3e),e(v3e,yVr),e(TC,xVr),e(TC,Moe),e(Moe,$Vr),e(TC,kVr),e(ce,SVr),e(ce,MC),e(MC,F3e),e(F3e,RVr),e(MC,PVr),e(MC,Eoe),e(Eoe,BVr),e(MC,IVr),e(Xr,NVr),M(EC,Xr,null),b(f,vHe,u),b(f,nf,u),e(nf,CC),e(CC,T3e),M(mk,T3e,null),e(nf,qVr),e(nf,M3e),e(M3e,jVr),b(f,FHe,u),b(f,_r,u),M(gk,_r,null),e(_r,DVr),e(_r,sf),e(sf,GVr),e(sf,Coe),e(Coe,OVr),e(sf,VVr),e(sf,woe),e(woe,XVr),e(sf,zVr),e(_r,WVr),e(_r,hk),e(hk,QVr),e(hk,E3e),e(E3e,UVr),e(hk,HVr),e(_r,JVr),e(_r,Jt),M(pk,Jt,null),e(Jt,YVr),e(Jt,C3e),e(C3e,KVr),e(Jt,ZVr),e(Jt,lf),e(lf,eXr),e(lf,w3e),e(w3e,oXr),e(lf,rXr),e(lf,Aoe),e(Aoe,tXr),e(lf,aXr),e(Jt,nXr),M(wC,Jt,null),e(_r,sXr),e(_r,zr),M(_k,zr,null),e(zr,lXr),e(zr,A3e),e(A3e,iXr),e(zr,dXr),e(zr,yn),e(yn,cXr),e(yn,L3e),e(L3e,fXr),e(yn,mXr),e(yn,y3e),e(y3e,gXr),e(yn,hXr),e(yn,x3e),e(x3e,pXr),e(yn,_Xr),e(zr,uXr),e(zr,fe),e(fe,AC),e(AC,$3e),e($3e,bXr),e(AC,vXr),e(AC,Loe),e(Loe,FXr),e(AC,TXr),e(fe,MXr),e(fe,LC),e(LC,k3e),e(k3e,EXr),e(LC,CXr),e(LC,yoe),e(yoe,wXr),e(LC,AXr),e(fe,LXr),e(fe,yC),e(yC,S3e),e(S3e,yXr),e(yC,xXr),e(yC,xoe),e(xoe,$Xr),e(yC,kXr),e(fe,SXr),e(fe,xC),e(xC,R3e),e(R3e,RXr),e(xC,PXr),e(xC,$oe),e($oe,BXr),e(xC,IXr),e(fe,NXr),e(fe,$C),e($C,P3e),e(P3e,qXr),e($C,jXr),e($C,koe),e(koe,DXr),e($C,GXr),e(fe,OXr),e(fe,kC),e(kC,B3e),e(B3e,VXr),e(kC,XXr),e(kC,Soe),e(Soe,zXr),e(kC,WXr),e(fe,QXr),e(fe,SC),e(SC,I3e),e(I3e,UXr),e(SC,HXr),e(SC,Roe),e(Roe,JXr),e(SC,YXr),e(fe,KXr),e(fe,RC),e(RC,N3e),e(N3e,ZXr),e(RC,ezr),e(RC,Poe),e(Poe,ozr),e(RC,rzr),e(fe,tzr),e(fe,PC),e(PC,q3e),e(q3e,azr),e(PC,nzr),e(PC,Boe),e(Boe,szr),e(PC,lzr),e(fe,izr),e(fe,BC),e(BC,j3e),e(j3e,dzr),e(BC,czr),e(BC,Ioe),e(Ioe,fzr),e(BC,mzr),e(fe,gzr),e(fe,IC),e(IC,D3e),e(D3e,hzr),e(IC,pzr),e(IC,Noe),e(Noe,_zr),e(IC,uzr),e(fe,bzr),e(fe,NC),e(NC,G3e),e(G3e,vzr),e(NC,Fzr),e(NC,qoe),e(qoe,Tzr),e(NC,Mzr),e(fe,Ezr),e(fe,qC),e(qC,O3e),e(O3e,Czr),e(qC,wzr),e(qC,joe),e(joe,Azr),e(qC,Lzr),e(fe,yzr),e(fe,jC),e(jC,V3e),e(V3e,xzr),e(jC,$zr),e(jC,Doe),e(Doe,kzr),e(jC,Szr),e(fe,Rzr),e(fe,DC),e(DC,X3e),e(X3e,Pzr),e(DC,Bzr),e(DC,Goe),e(Goe,Izr),e(DC,Nzr),e(fe,qzr),e(fe,GC),e(GC,z3e),e(z3e,jzr),e(GC,Dzr),e(GC,Ooe),e(Ooe,Gzr),e(GC,Ozr),e(fe,Vzr),e(fe,OC),e(OC,W3e),e(W3e,Xzr),e(OC,zzr),e(OC,Voe),e(Voe,Wzr),e(OC,Qzr),e(fe,Uzr),e(fe,VC),e(VC,Q3e),e(Q3e,Hzr),e(VC,Jzr),e(VC,Xoe),e(Xoe,Yzr),e(VC,Kzr),e(fe,Zzr),e(fe,XC),e(XC,U3e),e(U3e,eWr),e(XC,oWr),e(XC,zoe),e(zoe,rWr),e(XC,tWr),e(fe,aWr),e(fe,zC),e(zC,H3e),e(H3e,nWr),e(zC,sWr),e(zC,Woe),e(Woe,lWr),e(zC,iWr),e(zr,dWr),M(WC,zr,null),b(f,THe,u),b(f,df,u),e(df,QC),e(QC,J3e),M(uk,J3e,null),e(df,cWr),e(df,Y3e),e(Y3e,fWr),b(f,MHe,u),b(f,ur,u),M(bk,ur,null),e(ur,mWr),e(ur,cf),e(cf,gWr),e(cf,Qoe),e(Qoe,hWr),e(cf,pWr),e(cf,Uoe),e(Uoe,_Wr),e(cf,uWr),e(ur,bWr),e(ur,vk),e(vk,vWr),e(vk,K3e),e(K3e,FWr),e(vk,TWr),e(ur,MWr),e(ur,Yt),M(Fk,Yt,null),e(Yt,EWr),e(Yt,Z3e),e(Z3e,CWr),e(Yt,wWr),e(Yt,ff),e(ff,AWr),e(ff,e5e),e(e5e,LWr),e(ff,yWr),e(ff,Hoe),e(Hoe,xWr),e(ff,$Wr),e(Yt,kWr),M(UC,Yt,null),e(ur,SWr),e(ur,Wr),M(Tk,Wr,null),e(Wr,RWr),e(Wr,o5e),e(o5e,PWr),e(Wr,BWr),e(Wr,xn),e(xn,IWr),e(xn,r5e),e(r5e,NWr),e(xn,qWr),e(xn,t5e),e(t5e,jWr),e(xn,DWr),e(xn,a5e),e(a5e,GWr),e(xn,OWr),e(Wr,VWr),e(Wr,n5e),e(n5e,HC),e(HC,s5e),e(s5e,XWr),e(HC,zWr),e(HC,Joe),e(Joe,WWr),e(HC,QWr),e(Wr,UWr),M(JC,Wr,null),b(f,EHe,u),b(f,mf,u),e(mf,YC),e(YC,l5e),M(Mk,l5e,null),e(mf,HWr),e(mf,i5e),e(i5e,JWr),b(f,CHe,u),b(f,br,u),M(Ek,br,null),e(br,YWr),e(br,gf),e(gf,KWr),e(gf,Yoe),e(Yoe,ZWr),e(gf,eQr),e(gf,Koe),e(Koe,oQr),e(gf,rQr),e(br,tQr),e(br,Ck),e(Ck,aQr),e(Ck,d5e),e(d5e,nQr),e(Ck,sQr),e(br,lQr),e(br,Kt),M(wk,Kt,null),e(Kt,iQr),e(Kt,c5e),e(c5e,dQr),e(Kt,cQr),e(Kt,hf),e(hf,fQr),e(hf,f5e),e(f5e,mQr),e(hf,gQr),e(hf,Zoe),e(Zoe,hQr),e(hf,pQr),e(Kt,_Qr),M(KC,Kt,null),e(br,uQr),e(br,Qr),M(Ak,Qr,null),e(Qr,bQr),e(Qr,m5e),e(m5e,vQr),e(Qr,FQr),e(Qr,$n),e($n,TQr),e($n,g5e),e(g5e,MQr),e($n,EQr),e($n,h5e),e(h5e,CQr),e($n,wQr),e($n,p5e),e(p5e,AQr),e($n,LQr),e(Qr,yQr),e(Qr,_5e),e(_5e,ZC),e(ZC,u5e),e(u5e,xQr),e(ZC,$Qr),e(ZC,ere),e(ere,kQr),e(ZC,SQr),e(Qr,RQr),M(e3,Qr,null),b(f,wHe,u),b(f,pf,u),e(pf,o3),e(o3,b5e),M(Lk,b5e,null),e(pf,PQr),e(pf,v5e),e(v5e,BQr),b(f,AHe,u),b(f,vr,u),M(yk,vr,null),e(vr,IQr),e(vr,_f),e(_f,NQr),e(_f,ore),e(ore,qQr),e(_f,jQr),e(_f,rre),e(rre,DQr),e(_f,GQr),e(vr,OQr),e(vr,xk),e(xk,VQr),e(xk,F5e),e(F5e,XQr),e(xk,zQr),e(vr,WQr),e(vr,Zt),M($k,Zt,null),e(Zt,QQr),e(Zt,T5e),e(T5e,UQr),e(Zt,HQr),e(Zt,uf),e(uf,JQr),e(uf,M5e),e(M5e,YQr),e(uf,KQr),e(uf,tre),e(tre,ZQr),e(uf,eUr),e(Zt,oUr),M(r3,Zt,null),e(vr,rUr),e(vr,Ur),M(kk,Ur,null),e(Ur,tUr),e(Ur,E5e),e(E5e,aUr),e(Ur,nUr),e(Ur,kn),e(kn,sUr),e(kn,C5e),e(C5e,lUr),e(kn,iUr),e(kn,w5e),e(w5e,dUr),e(kn,cUr),e(kn,A5e),e(A5e,fUr),e(kn,mUr),e(Ur,gUr),e(Ur,re),e(re,t3),e(t3,L5e),e(L5e,hUr),e(t3,pUr),e(t3,are),e(are,_Ur),e(t3,uUr),e(re,bUr),e(re,a3),e(a3,y5e),e(y5e,vUr),e(a3,FUr),e(a3,nre),e(nre,TUr),e(a3,MUr),e(re,EUr),e(re,n3),e(n3,x5e),e(x5e,CUr),e(n3,wUr),e(n3,sre),e(sre,AUr),e(n3,LUr),e(re,yUr),e(re,s3),e(s3,$5e),e($5e,xUr),e(s3,$Ur),e(s3,lre),e(lre,kUr),e(s3,SUr),e(re,RUr),e(re,l3),e(l3,k5e),e(k5e,PUr),e(l3,BUr),e(l3,ire),e(ire,IUr),e(l3,NUr),e(re,qUr),e(re,i3),e(i3,S5e),e(S5e,jUr),e(i3,DUr),e(i3,dre),e(dre,GUr),e(i3,OUr),e(re,VUr),e(re,d3),e(d3,R5e),e(R5e,XUr),e(d3,zUr),e(d3,cre),e(cre,WUr),e(d3,QUr),e(re,UUr),e(re,c3),e(c3,P5e),e(P5e,HUr),e(c3,JUr),e(c3,fre),e(fre,YUr),e(c3,KUr),e(re,ZUr),e(re,f3),e(f3,B5e),e(B5e,eHr),e(f3,oHr),e(f3,mre),e(mre,rHr),e(f3,tHr),e(re,aHr),e(re,m3),e(m3,I5e),e(I5e,nHr),e(m3,sHr),e(m3,gre),e(gre,lHr),e(m3,iHr),e(re,dHr),e(re,g3),e(g3,N5e),e(N5e,cHr),e(g3,fHr),e(g3,hre),e(hre,mHr),e(g3,gHr),e(re,hHr),e(re,h3),e(h3,q5e),e(q5e,pHr),e(h3,_Hr),e(h3,pre),e(pre,uHr),e(h3,bHr),e(re,vHr),e(re,p3),e(p3,j5e),e(j5e,FHr),e(p3,THr),e(p3,_re),e(_re,MHr),e(p3,EHr),e(re,CHr),e(re,_3),e(_3,D5e),e(D5e,wHr),e(_3,AHr),e(_3,ure),e(ure,LHr),e(_3,yHr),e(re,xHr),e(re,u3),e(u3,G5e),e(G5e,$Hr),e(u3,kHr),e(u3,bre),e(bre,SHr),e(u3,RHr),e(re,PHr),e(re,b3),e(b3,O5e),e(O5e,BHr),e(b3,IHr),e(b3,vre),e(vre,NHr),e(b3,qHr),e(re,jHr),e(re,v3),e(v3,V5e),e(V5e,DHr),e(v3,GHr),e(v3,Fre),e(Fre,OHr),e(v3,VHr),e(re,XHr),e(re,F3),e(F3,X5e),e(X5e,zHr),e(F3,WHr),e(F3,Tre),e(Tre,QHr),e(F3,UHr),e(re,HHr),e(re,T3),e(T3,z5e),e(z5e,JHr),e(T3,YHr),e(T3,Mre),e(Mre,KHr),e(T3,ZHr),e(re,eJr),e(re,M3),e(M3,W5e),e(W5e,oJr),e(M3,rJr),e(M3,Ere),e(Ere,tJr),e(M3,aJr),e(re,nJr),e(re,E3),e(E3,Q5e),e(Q5e,sJr),e(E3,lJr),e(E3,Cre),e(Cre,iJr),e(E3,dJr),e(re,cJr),e(re,C3),e(C3,U5e),e(U5e,fJr),e(C3,mJr),e(C3,wre),e(wre,gJr),e(C3,hJr),e(re,pJr),e(re,w3),e(w3,H5e),e(H5e,_Jr),e(w3,uJr),e(w3,Are),e(Are,bJr),e(w3,vJr),e(re,FJr),e(re,A3),e(A3,J5e),e(J5e,TJr),e(A3,MJr),e(A3,Lre),e(Lre,EJr),e(A3,CJr),e(re,wJr),e(re,L3),e(L3,Y5e),e(Y5e,AJr),e(L3,LJr),e(L3,yre),e(yre,yJr),e(L3,xJr),e(re,$Jr),e(re,y3),e(y3,K5e),e(K5e,kJr),e(y3,SJr),e(y3,xre),e(xre,RJr),e(y3,PJr),e(re,BJr),e(re,x3),e(x3,Z5e),e(Z5e,IJr),e(x3,NJr),e(x3,$re),e($re,qJr),e(x3,jJr),e(Ur,DJr),M($3,Ur,null),b(f,LHe,u),b(f,bf,u),e(bf,k3),e(k3,e0e),M(Sk,e0e,null),e(bf,GJr),e(bf,o0e),e(o0e,OJr),b(f,yHe,u),b(f,Fr,u),M(Rk,Fr,null),e(Fr,VJr),e(Fr,vf),e(vf,XJr),e(vf,kre),e(kre,zJr),e(vf,WJr),e(vf,Sre),e(Sre,QJr),e(vf,UJr),e(Fr,HJr),e(Fr,Pk),e(Pk,JJr),e(Pk,r0e),e(r0e,YJr),e(Pk,KJr),e(Fr,ZJr),e(Fr,ea),M(Bk,ea,null),e(ea,eYr),e(ea,t0e),e(t0e,oYr),e(ea,rYr),e(ea,Ff),e(Ff,tYr),e(Ff,a0e),e(a0e,aYr),e(Ff,nYr),e(Ff,Rre),e(Rre,sYr),e(Ff,lYr),e(ea,iYr),M(S3,ea,null),e(Fr,dYr),e(Fr,Hr),M(Ik,Hr,null),e(Hr,cYr),e(Hr,n0e),e(n0e,fYr),e(Hr,mYr),e(Hr,Sn),e(Sn,gYr),e(Sn,s0e),e(s0e,hYr),e(Sn,pYr),e(Sn,l0e),e(l0e,_Yr),e(Sn,uYr),e(Sn,i0e),e(i0e,bYr),e(Sn,vYr),e(Hr,FYr),e(Hr,xe),e(xe,R3),e(R3,d0e),e(d0e,TYr),e(R3,MYr),e(R3,Pre),e(Pre,EYr),e(R3,CYr),e(xe,wYr),e(xe,P3),e(P3,c0e),e(c0e,AYr),e(P3,LYr),e(P3,Bre),e(Bre,yYr),e(P3,xYr),e(xe,$Yr),e(xe,B3),e(B3,f0e),e(f0e,kYr),e(B3,SYr),e(B3,Ire),e(Ire,RYr),e(B3,PYr),e(xe,BYr),e(xe,I3),e(I3,m0e),e(m0e,IYr),e(I3,NYr),e(I3,Nre),e(Nre,qYr),e(I3,jYr),e(xe,DYr),e(xe,N3),e(N3,g0e),e(g0e,GYr),e(N3,OYr),e(N3,qre),e(qre,VYr),e(N3,XYr),e(xe,zYr),e(xe,q3),e(q3,h0e),e(h0e,WYr),e(q3,QYr),e(q3,jre),e(jre,UYr),e(q3,HYr),e(xe,JYr),e(xe,j3),e(j3,p0e),e(p0e,YYr),e(j3,KYr),e(j3,Dre),e(Dre,ZYr),e(j3,eKr),e(xe,oKr),e(xe,D3),e(D3,_0e),e(_0e,rKr),e(D3,tKr),e(D3,Gre),e(Gre,aKr),e(D3,nKr),e(xe,sKr),e(xe,G3),e(G3,u0e),e(u0e,lKr),e(G3,iKr),e(G3,Ore),e(Ore,dKr),e(G3,cKr),e(xe,fKr),e(xe,O3),e(O3,b0e),e(b0e,mKr),e(O3,gKr),e(O3,Vre),e(Vre,hKr),e(O3,pKr),e(Hr,_Kr),M(V3,Hr,null),b(f,xHe,u),b(f,Tf,u),e(Tf,X3),e(X3,v0e),M(Nk,v0e,null),e(Tf,uKr),e(Tf,F0e),e(F0e,bKr),b(f,$He,u),b(f,Tr,u),M(qk,Tr,null),e(Tr,vKr),e(Tr,Mf),e(Mf,FKr),e(Mf,Xre),e(Xre,TKr),e(Mf,MKr),e(Mf,zre),e(zre,EKr),e(Mf,CKr),e(Tr,wKr),e(Tr,jk),e(jk,AKr),e(jk,T0e),e(T0e,LKr),e(jk,yKr),e(Tr,xKr),e(Tr,oa),M(Dk,oa,null),e(oa,$Kr),e(oa,M0e),e(M0e,kKr),e(oa,SKr),e(oa,Ef),e(Ef,RKr),e(Ef,E0e),e(E0e,PKr),e(Ef,BKr),e(Ef,Wre),e(Wre,IKr),e(Ef,NKr),e(oa,qKr),M(z3,oa,null),e(Tr,jKr),e(Tr,Jr),M(Gk,Jr,null),e(Jr,DKr),e(Jr,C0e),e(C0e,GKr),e(Jr,OKr),e(Jr,Rn),e(Rn,VKr),e(Rn,w0e),e(w0e,XKr),e(Rn,zKr),e(Rn,A0e),e(A0e,WKr),e(Rn,QKr),e(Rn,L0e),e(L0e,UKr),e(Rn,HKr),e(Jr,JKr),e(Jr,Ee),e(Ee,W3),e(W3,y0e),e(y0e,YKr),e(W3,KKr),e(W3,Qre),e(Qre,ZKr),e(W3,eZr),e(Ee,oZr),e(Ee,Q3),e(Q3,x0e),e(x0e,rZr),e(Q3,tZr),e(Q3,Ure),e(Ure,aZr),e(Q3,nZr),e(Ee,sZr),e(Ee,U3),e(U3,$0e),e($0e,lZr),e(U3,iZr),e(U3,Hre),e(Hre,dZr),e(U3,cZr),e(Ee,fZr),e(Ee,H3),e(H3,k0e),e(k0e,mZr),e(H3,gZr),e(H3,Jre),e(Jre,hZr),e(H3,pZr),e(Ee,_Zr),e(Ee,J3),e(J3,S0e),e(S0e,uZr),e(J3,bZr),e(J3,Yre),e(Yre,vZr),e(J3,FZr),e(Ee,TZr),e(Ee,Y3),e(Y3,R0e),e(R0e,MZr),e(Y3,EZr),e(Y3,Kre),e(Kre,CZr),e(Y3,wZr),e(Ee,AZr),e(Ee,K3),e(K3,P0e),e(P0e,LZr),e(K3,yZr),e(K3,Zre),e(Zre,xZr),e(K3,$Zr),e(Ee,kZr),e(Ee,Z3),e(Z3,B0e),e(B0e,SZr),e(Z3,RZr),e(Z3,ete),e(ete,PZr),e(Z3,BZr),e(Ee,IZr),e(Ee,e5),e(e5,I0e),e(I0e,NZr),e(e5,qZr),e(e5,ote),e(ote,jZr),e(e5,DZr),e(Ee,GZr),e(Ee,o5),e(o5,N0e),e(N0e,OZr),e(o5,VZr),e(o5,rte),e(rte,XZr),e(o5,zZr),e(Ee,WZr),e(Ee,r5),e(r5,q0e),e(q0e,QZr),e(r5,UZr),e(r5,tte),e(tte,HZr),e(r5,JZr),e(Ee,YZr),e(Ee,t5),e(t5,j0e),e(j0e,KZr),e(t5,ZZr),e(t5,ate),e(ate,eet),e(t5,oet),e(Ee,ret),e(Ee,a5),e(a5,D0e),e(D0e,tet),e(a5,aet),e(a5,nte),e(nte,net),e(a5,set),e(Jr,iet),M(n5,Jr,null),b(f,kHe,u),b(f,Cf,u),e(Cf,s5),e(s5,G0e),M(Ok,G0e,null),e(Cf,det),e(Cf,O0e),e(O0e,cet),b(f,SHe,u),b(f,Mr,u),M(Vk,Mr,null),e(Mr,fet),e(Mr,wf),e(wf,met),e(wf,ste),e(ste,get),e(wf,het),e(wf,lte),e(lte,pet),e(wf,_et),e(Mr,uet),e(Mr,Xk),e(Xk,bet),e(Xk,V0e),e(V0e,vet),e(Xk,Fet),e(Mr,Tet),e(Mr,ra),M(zk,ra,null),e(ra,Met),e(ra,X0e),e(X0e,Eet),e(ra,Cet),e(ra,Af),e(Af,wet),e(Af,z0e),e(z0e,Aet),e(Af,Let),e(Af,ite),e(ite,yet),e(Af,xet),e(ra,$et),M(l5,ra,null),e(Mr,ket),e(Mr,Yr),M(Wk,Yr,null),e(Yr,Set),e(Yr,W0e),e(W0e,Ret),e(Yr,Pet),e(Yr,Pn),e(Pn,Bet),e(Pn,Q0e),e(Q0e,Iet),e(Pn,Net),e(Pn,U0e),e(U0e,qet),e(Pn,jet),e(Pn,H0e),e(H0e,Det),e(Pn,Get),e(Yr,Oet),e(Yr,$e),e($e,i5),e(i5,J0e),e(J0e,Vet),e(i5,Xet),e(i5,dte),e(dte,zet),e(i5,Wet),e($e,Qet),e($e,d5),e(d5,Y0e),e(Y0e,Uet),e(d5,Het),e(d5,cte),e(cte,Jet),e(d5,Yet),e($e,Ket),e($e,c5),e(c5,K0e),e(K0e,Zet),e(c5,eot),e(c5,fte),e(fte,oot),e(c5,rot),e($e,tot),e($e,f5),e(f5,Z0e),e(Z0e,aot),e(f5,not),e(f5,mte),e(mte,sot),e(f5,lot),e($e,iot),e($e,m5),e(m5,ewe),e(ewe,dot),e(m5,cot),e(m5,gte),e(gte,fot),e(m5,mot),e($e,got),e($e,g5),e(g5,owe),e(owe,hot),e(g5,pot),e(g5,hte),e(hte,_ot),e(g5,uot),e($e,bot),e($e,h5),e(h5,rwe),e(rwe,vot),e(h5,Fot),e(h5,pte),e(pte,Tot),e(h5,Mot),e($e,Eot),e($e,p5),e(p5,twe),e(twe,Cot),e(p5,wot),e(p5,_te),e(_te,Aot),e(p5,Lot),e($e,yot),e($e,_5),e(_5,awe),e(awe,xot),e(_5,$ot),e(_5,ute),e(ute,kot),e(_5,Sot),e($e,Rot),e($e,u5),e(u5,nwe),e(nwe,Pot),e(u5,Bot),e(u5,bte),e(bte,Iot),e(u5,Not),e(Yr,qot),M(b5,Yr,null),b(f,RHe,u),b(f,Lf,u),e(Lf,v5),e(v5,swe),M(Qk,swe,null),e(Lf,jot),e(Lf,lwe),e(lwe,Dot),b(f,PHe,u),b(f,Er,u),M(Uk,Er,null),e(Er,Got),e(Er,yf),e(yf,Oot),e(yf,vte),e(vte,Vot),e(yf,Xot),e(yf,Fte),e(Fte,zot),e(yf,Wot),e(Er,Qot),e(Er,Hk),e(Hk,Uot),e(Hk,iwe),e(iwe,Hot),e(Hk,Jot),e(Er,Yot),e(Er,ta),M(Jk,ta,null),e(ta,Kot),e(ta,dwe),e(dwe,Zot),e(ta,ert),e(ta,xf),e(xf,ort),e(xf,cwe),e(cwe,rrt),e(xf,trt),e(xf,Tte),e(Tte,art),e(xf,nrt),e(ta,srt),M(F5,ta,null),e(Er,lrt),e(Er,Kr),M(Yk,Kr,null),e(Kr,irt),e(Kr,fwe),e(fwe,drt),e(Kr,crt),e(Kr,Bn),e(Bn,frt),e(Bn,mwe),e(mwe,mrt),e(Bn,grt),e(Bn,gwe),e(gwe,hrt),e(Bn,prt),e(Bn,hwe),e(hwe,_rt),e(Bn,urt),e(Kr,brt),e(Kr,ke),e(ke,T5),e(T5,pwe),e(pwe,vrt),e(T5,Frt),e(T5,Mte),e(Mte,Trt),e(T5,Mrt),e(ke,Ert),e(ke,M5),e(M5,_we),e(_we,Crt),e(M5,wrt),e(M5,Ete),e(Ete,Art),e(M5,Lrt),e(ke,yrt),e(ke,E5),e(E5,uwe),e(uwe,xrt),e(E5,$rt),e(E5,Cte),e(Cte,krt),e(E5,Srt),e(ke,Rrt),e(ke,C5),e(C5,bwe),e(bwe,Prt),e(C5,Brt),e(C5,wte),e(wte,Irt),e(C5,Nrt),e(ke,qrt),e(ke,w5),e(w5,vwe),e(vwe,jrt),e(w5,Drt),e(w5,Ate),e(Ate,Grt),e(w5,Ort),e(ke,Vrt),e(ke,A5),e(A5,Fwe),e(Fwe,Xrt),e(A5,zrt),e(A5,Lte),e(Lte,Wrt),e(A5,Qrt),e(ke,Urt),e(ke,L5),e(L5,Twe),e(Twe,Hrt),e(L5,Jrt),e(L5,yte),e(yte,Yrt),e(L5,Krt),e(ke,Zrt),e(ke,y5),e(y5,Mwe),e(Mwe,ett),e(y5,ott),e(y5,xte),e(xte,rtt),e(y5,ttt),e(ke,att),e(ke,x5),e(x5,Ewe),e(Ewe,ntt),e(x5,stt),e(x5,$te),e($te,ltt),e(x5,itt),e(ke,dtt),e(ke,$5),e($5,Cwe),e(Cwe,ctt),e($5,ftt),e($5,kte),e(kte,mtt),e($5,gtt),e(Kr,htt),M(k5,Kr,null),b(f,BHe,u),b(f,$f,u),e($f,S5),e(S5,wwe),M(Kk,wwe,null),e($f,ptt),e($f,Awe),e(Awe,_tt),b(f,IHe,u),b(f,Cr,u),M(Zk,Cr,null),e(Cr,utt),e(Cr,kf),e(kf,btt),e(kf,Ste),e(Ste,vtt),e(kf,Ftt),e(kf,Rte),e(Rte,Ttt),e(kf,Mtt),e(Cr,Ett),e(Cr,eS),e(eS,Ctt),e(eS,Lwe),e(Lwe,wtt),e(eS,Att),e(Cr,Ltt),e(Cr,aa),M(oS,aa,null),e(aa,ytt),e(aa,ywe),e(ywe,xtt),e(aa,$tt),e(aa,Sf),e(Sf,ktt),e(Sf,xwe),e(xwe,Stt),e(Sf,Rtt),e(Sf,Pte),e(Pte,Ptt),e(Sf,Btt),e(aa,Itt),M(R5,aa,null),e(Cr,Ntt),e(Cr,Zr),M(rS,Zr,null),e(Zr,qtt),e(Zr,$we),e($we,jtt),e(Zr,Dtt),e(Zr,In),e(In,Gtt),e(In,kwe),e(kwe,Ott),e(In,Vtt),e(In,Swe),e(Swe,Xtt),e(In,ztt),e(In,Rwe),e(Rwe,Wtt),e(In,Qtt),e(Zr,Utt),e(Zr,Se),e(Se,P5),e(P5,Pwe),e(Pwe,Htt),e(P5,Jtt),e(P5,Bte),e(Bte,Ytt),e(P5,Ktt),e(Se,Ztt),e(Se,B5),e(B5,Bwe),e(Bwe,eat),e(B5,oat),e(B5,Ite),e(Ite,rat),e(B5,tat),e(Se,aat),e(Se,I5),e(I5,Iwe),e(Iwe,nat),e(I5,sat),e(I5,Nte),e(Nte,lat),e(I5,iat),e(Se,dat),e(Se,N5),e(N5,Nwe),e(Nwe,cat),e(N5,fat),e(N5,qte),e(qte,mat),e(N5,gat),e(Se,hat),e(Se,q5),e(q5,qwe),e(qwe,pat),e(q5,_at),e(q5,jte),e(jte,uat),e(q5,bat),e(Se,vat),e(Se,j5),e(j5,jwe),e(jwe,Fat),e(j5,Tat),e(j5,Dte),e(Dte,Mat),e(j5,Eat),e(Se,Cat),e(Se,D5),e(D5,Dwe),e(Dwe,wat),e(D5,Aat),e(D5,Gte),e(Gte,Lat),e(D5,yat),e(Se,xat),e(Se,G5),e(G5,Gwe),e(Gwe,$at),e(G5,kat),e(G5,Ote),e(Ote,Sat),e(G5,Rat),e(Se,Pat),e(Se,O5),e(O5,Owe),e(Owe,Bat),e(O5,Iat),e(O5,Vte),e(Vte,Nat),e(O5,qat),e(Se,jat),e(Se,V5),e(V5,Vwe),e(Vwe,Dat),e(V5,Gat),e(V5,Xte),e(Xte,Oat),e(V5,Vat),e(Zr,Xat),M(X5,Zr,null),b(f,NHe,u),b(f,Rf,u),e(Rf,z5),e(z5,Xwe),M(tS,Xwe,null),e(Rf,zat),e(Rf,zwe),e(zwe,Wat),b(f,qHe,u),b(f,wr,u),M(aS,wr,null),e(wr,Qat),e(wr,Pf),e(Pf,Uat),e(Pf,zte),e(zte,Hat),e(Pf,Jat),e(Pf,Wte),e(Wte,Yat),e(Pf,Kat),e(wr,Zat),e(wr,nS),e(nS,ent),e(nS,Wwe),e(Wwe,ont),e(nS,rnt),e(wr,tnt),e(wr,na),M(sS,na,null),e(na,ant),e(na,Qwe),e(Qwe,nnt),e(na,snt),e(na,Bf),e(Bf,lnt),e(Bf,Uwe),e(Uwe,int),e(Bf,dnt),e(Bf,Qte),e(Qte,cnt),e(Bf,fnt),e(na,mnt),M(W5,na,null),e(wr,gnt),e(wr,et),M(lS,et,null),e(et,hnt),e(et,Hwe),e(Hwe,pnt),e(et,_nt),e(et,Nn),e(Nn,unt),e(Nn,Jwe),e(Jwe,bnt),e(Nn,vnt),e(Nn,Ywe),e(Ywe,Fnt),e(Nn,Tnt),e(Nn,Kwe),e(Kwe,Mnt),e(Nn,Ent),e(et,Cnt),e(et,Re),e(Re,Q5),e(Q5,Zwe),e(Zwe,wnt),e(Q5,Ant),e(Q5,Ute),e(Ute,Lnt),e(Q5,ynt),e(Re,xnt),e(Re,U5),e(U5,eAe),e(eAe,$nt),e(U5,knt),e(U5,Hte),e(Hte,Snt),e(U5,Rnt),e(Re,Pnt),e(Re,H5),e(H5,oAe),e(oAe,Bnt),e(H5,Int),e(H5,Jte),e(Jte,Nnt),e(H5,qnt),e(Re,jnt),e(Re,J5),e(J5,rAe),e(rAe,Dnt),e(J5,Gnt),e(J5,Yte),e(Yte,Ont),e(J5,Vnt),e(Re,Xnt),e(Re,Y5),e(Y5,tAe),e(tAe,znt),e(Y5,Wnt),e(Y5,Kte),e(Kte,Qnt),e(Y5,Unt),e(Re,Hnt),e(Re,K5),e(K5,aAe),e(aAe,Jnt),e(K5,Ynt),e(K5,Zte),e(Zte,Knt),e(K5,Znt),e(Re,est),e(Re,Z5),e(Z5,nAe),e(nAe,ost),e(Z5,rst),e(Z5,eae),e(eae,tst),e(Z5,ast),e(Re,nst),e(Re,e0),e(e0,sAe),e(sAe,sst),e(e0,lst),e(e0,oae),e(oae,ist),e(e0,dst),e(Re,cst),e(Re,o0),e(o0,lAe),e(lAe,fst),e(o0,mst),e(o0,rae),e(rae,gst),e(o0,hst),e(Re,pst),e(Re,r0),e(r0,iAe),e(iAe,_st),e(r0,ust),e(r0,tae),e(tae,bst),e(r0,vst),e(et,Fst),M(t0,et,null),b(f,jHe,u),b(f,If,u),e(If,a0),e(a0,dAe),M(iS,dAe,null),e(If,Tst),e(If,cAe),e(cAe,Mst),b(f,DHe,u),b(f,Ar,u),M(dS,Ar,null),e(Ar,Est),e(Ar,Nf),e(Nf,Cst),e(Nf,aae),e(aae,wst),e(Nf,Ast),e(Nf,nae),e(nae,Lst),e(Nf,yst),e(Ar,xst),e(Ar,cS),e(cS,$st),e(cS,fAe),e(fAe,kst),e(cS,Sst),e(Ar,Rst),e(Ar,sa),M(fS,sa,null),e(sa,Pst),e(sa,mAe),e(mAe,Bst),e(sa,Ist),e(sa,qf),e(qf,Nst),e(qf,gAe),e(gAe,qst),e(qf,jst),e(qf,sae),e(sae,Dst),e(qf,Gst),e(sa,Ost),M(n0,sa,null),e(Ar,Vst),e(Ar,ot),M(mS,ot,null),e(ot,Xst),e(ot,hAe),e(hAe,zst),e(ot,Wst),e(ot,qn),e(qn,Qst),e(qn,pAe),e(pAe,Ust),e(qn,Hst),e(qn,_Ae),e(_Ae,Jst),e(qn,Yst),e(qn,uAe),e(uAe,Kst),e(qn,Zst),e(ot,elt),e(ot,Xe),e(Xe,s0),e(s0,bAe),e(bAe,olt),e(s0,rlt),e(s0,lae),e(lae,tlt),e(s0,alt),e(Xe,nlt),e(Xe,l0),e(l0,vAe),e(vAe,slt),e(l0,llt),e(l0,iae),e(iae,ilt),e(l0,dlt),e(Xe,clt),e(Xe,i0),e(i0,FAe),e(FAe,flt),e(i0,mlt),e(i0,dae),e(dae,glt),e(i0,hlt),e(Xe,plt),e(Xe,d0),e(d0,TAe),e(TAe,_lt),e(d0,ult),e(d0,cae),e(cae,blt),e(d0,vlt),e(Xe,Flt),e(Xe,c0),e(c0,MAe),e(MAe,Tlt),e(c0,Mlt),e(c0,fae),e(fae,Elt),e(c0,Clt),e(Xe,wlt),e(Xe,f0),e(f0,EAe),e(EAe,Alt),e(f0,Llt),e(f0,mae),e(mae,ylt),e(f0,xlt),e(Xe,$lt),e(Xe,m0),e(m0,CAe),e(CAe,klt),e(m0,Slt),e(m0,gae),e(gae,Rlt),e(m0,Plt),e(Xe,Blt),e(Xe,g0),e(g0,wAe),e(wAe,Ilt),e(g0,Nlt),e(g0,hae),e(hae,qlt),e(g0,jlt),e(ot,Dlt),M(h0,ot,null),b(f,GHe,u),b(f,jf,u),e(jf,p0),e(p0,AAe),M(gS,AAe,null),e(jf,Glt),e(jf,LAe),e(LAe,Olt),b(f,OHe,u),b(f,Lr,u),M(hS,Lr,null),e(Lr,Vlt),e(Lr,Df),e(Df,Xlt),e(Df,pae),e(pae,zlt),e(Df,Wlt),e(Df,_ae),e(_ae,Qlt),e(Df,Ult),e(Lr,Hlt),e(Lr,pS),e(pS,Jlt),e(pS,yAe),e(yAe,Ylt),e(pS,Klt),e(Lr,Zlt),e(Lr,la),M(_S,la,null),e(la,eit),e(la,xAe),e(xAe,oit),e(la,rit),e(la,Gf),e(Gf,tit),e(Gf,$Ae),e($Ae,ait),e(Gf,nit),e(Gf,uae),e(uae,sit),e(Gf,lit),e(la,iit),M(_0,la,null),e(Lr,dit),e(Lr,rt),M(uS,rt,null),e(rt,cit),e(rt,kAe),e(kAe,fit),e(rt,mit),e(rt,jn),e(jn,git),e(jn,SAe),e(SAe,hit),e(jn,pit),e(jn,RAe),e(RAe,_it),e(jn,uit),e(jn,PAe),e(PAe,bit),e(jn,vit),e(rt,Fit),e(rt,ze),e(ze,u0),e(u0,BAe),e(BAe,Tit),e(u0,Mit),e(u0,bae),e(bae,Eit),e(u0,Cit),e(ze,wit),e(ze,b0),e(b0,IAe),e(IAe,Ait),e(b0,Lit),e(b0,vae),e(vae,yit),e(b0,xit),e(ze,$it),e(ze,v0),e(v0,NAe),e(NAe,kit),e(v0,Sit),e(v0,Fae),e(Fae,Rit),e(v0,Pit),e(ze,Bit),e(ze,F0),e(F0,qAe),e(qAe,Iit),e(F0,Nit),e(F0,Tae),e(Tae,qit),e(F0,jit),e(ze,Dit),e(ze,T0),e(T0,jAe),e(jAe,Git),e(T0,Oit),e(T0,Mae),e(Mae,Vit),e(T0,Xit),e(ze,zit),e(ze,M0),e(M0,DAe),e(DAe,Wit),e(M0,Qit),e(M0,Eae),e(Eae,Uit),e(M0,Hit),e(ze,Jit),e(ze,E0),e(E0,GAe),e(GAe,Yit),e(E0,Kit),e(E0,Cae),e(Cae,Zit),e(E0,edt),e(ze,odt),e(ze,C0),e(C0,OAe),e(OAe,rdt),e(C0,tdt),e(C0,wae),e(wae,adt),e(C0,ndt),e(rt,sdt),M(w0,rt,null),b(f,VHe,u),b(f,Of,u),e(Of,A0),e(A0,VAe),M(bS,VAe,null),e(Of,ldt),e(Of,XAe),e(XAe,idt),b(f,XHe,u),b(f,yr,u),M(vS,yr,null),e(yr,ddt),e(yr,Vf),e(Vf,cdt),e(Vf,Aae),e(Aae,fdt),e(Vf,mdt),e(Vf,Lae),e(Lae,gdt),e(Vf,hdt),e(yr,pdt),e(yr,FS),e(FS,_dt),e(FS,zAe),e(zAe,udt),e(FS,bdt),e(yr,vdt),e(yr,ia),M(TS,ia,null),e(ia,Fdt),e(ia,WAe),e(WAe,Tdt),e(ia,Mdt),e(ia,Xf),e(Xf,Edt),e(Xf,QAe),e(QAe,Cdt),e(Xf,wdt),e(Xf,yae),e(yae,Adt),e(Xf,Ldt),e(ia,ydt),M(L0,ia,null),e(yr,xdt),e(yr,tt),M(MS,tt,null),e(tt,$dt),e(tt,UAe),e(UAe,kdt),e(tt,Sdt),e(tt,Dn),e(Dn,Rdt),e(Dn,HAe),e(HAe,Pdt),e(Dn,Bdt),e(Dn,JAe),e(JAe,Idt),e(Dn,Ndt),e(Dn,YAe),e(YAe,qdt),e(Dn,jdt),e(tt,Ddt),e(tt,KAe),e(KAe,y0),e(y0,ZAe),e(ZAe,Gdt),e(y0,Odt),e(y0,xae),e(xae,Vdt),e(y0,Xdt),e(tt,zdt),M(x0,tt,null),b(f,zHe,u),b(f,zf,u),e(zf,$0),e($0,eLe),M(ES,eLe,null),e(zf,Wdt),e(zf,oLe),e(oLe,Qdt),b(f,WHe,u),b(f,xr,u),M(CS,xr,null),e(xr,Udt),e(xr,Wf),e(Wf,Hdt),e(Wf,$ae),e($ae,Jdt),e(Wf,Ydt),e(Wf,kae),e(kae,Kdt),e(Wf,Zdt),e(xr,ect),e(xr,wS),e(wS,oct),e(wS,rLe),e(rLe,rct),e(wS,tct),e(xr,act),e(xr,da),M(AS,da,null),e(da,nct),e(da,tLe),e(tLe,sct),e(da,lct),e(da,Qf),e(Qf,ict),e(Qf,aLe),e(aLe,dct),e(Qf,cct),e(Qf,Sae),e(Sae,fct),e(Qf,mct),e(da,gct),M(k0,da,null),e(xr,hct),e(xr,at),M(LS,at,null),e(at,pct),e(at,nLe),e(nLe,_ct),e(at,uct),e(at,Gn),e(Gn,bct),e(Gn,sLe),e(sLe,vct),e(Gn,Fct),e(Gn,lLe),e(lLe,Tct),e(Gn,Mct),e(Gn,iLe),e(iLe,Ect),e(Gn,Cct),e(at,wct),e(at,yS),e(yS,S0),e(S0,dLe),e(dLe,Act),e(S0,Lct),e(S0,Rae),e(Rae,yct),e(S0,xct),e(yS,$ct),e(yS,R0),e(R0,cLe),e(cLe,kct),e(R0,Sct),e(R0,Pae),e(Pae,Rct),e(R0,Pct),e(at,Bct),M(P0,at,null),b(f,QHe,u),b(f,Uf,u),e(Uf,B0),e(B0,fLe),M(xS,fLe,null),e(Uf,Ict),e(Uf,mLe),e(mLe,Nct),b(f,UHe,u),b(f,$r,u),M($S,$r,null),e($r,qct),e($r,Hf),e(Hf,jct),e(Hf,Bae),e(Bae,Dct),e(Hf,Gct),e(Hf,Iae),e(Iae,Oct),e(Hf,Vct),e($r,Xct),e($r,kS),e(kS,zct),e(kS,gLe),e(gLe,Wct),e(kS,Qct),e($r,Uct),e($r,ca),M(SS,ca,null),e(ca,Hct),e(ca,hLe),e(hLe,Jct),e(ca,Yct),e(ca,Jf),e(Jf,Kct),e(Jf,pLe),e(pLe,Zct),e(Jf,eft),e(Jf,Nae),e(Nae,oft),e(Jf,rft),e(ca,tft),M(I0,ca,null),e($r,aft),e($r,nt),M(RS,nt,null),e(nt,nft),e(nt,_Le),e(_Le,sft),e(nt,lft),e(nt,On),e(On,ift),e(On,uLe),e(uLe,dft),e(On,cft),e(On,bLe),e(bLe,fft),e(On,mft),e(On,vLe),e(vLe,gft),e(On,hft),e(nt,pft),e(nt,FLe),e(FLe,N0),e(N0,TLe),e(TLe,_ft),e(N0,uft),e(N0,qae),e(qae,bft),e(N0,vft),e(nt,Fft),M(q0,nt,null),HHe=!0},p(f,[u]){const PS={};u&2&&(PS.$$scope={dirty:u,ctx:f}),nm.$set(PS);const MLe={};u&2&&(MLe.$$scope={dirty:u,ctx:f}),Th.$set(MLe);const ELe={};u&2&&(ELe.$$scope={dirty:u,ctx:f}),tp.$set(ELe);const CLe={};u&2&&(CLe.$$scope={dirty:u,ctx:f}),Xp.$set(CLe);const BS={};u&2&&(BS.$$scope={dirty:u,ctx:f}),zp.$set(BS);const wLe={};u&2&&(wLe.$$scope={dirty:u,ctx:f}),h_.$set(wLe);const Vn={};u&2&&(Vn.$$scope={dirty:u,ctx:f}),p_.$set(Vn);const ALe={};u&2&&(ALe.$$scope={dirty:u,ctx:f}),b_.$set(ALe);const LLe={};u&2&&(LLe.$$scope={dirty:u,ctx:f}),L1.$set(LLe);const yLe={};u&2&&(yLe.$$scope={dirty:u,ctx:f}),x1.$set(yLe);const IS={};u&2&&(IS.$$scope={dirty:u,ctx:f}),C2.$set(IS);const xLe={};u&2&&(xLe.$$scope={dirty:u,ctx:f}),A2.$set(xLe);const NS={};u&2&&(NS.$$scope={dirty:u,ctx:f}),hb.$set(NS);const $Le={};u&2&&($Le.$$scope={dirty:u,ctx:f}),_b.$set($Le);const qS={};u&2&&(qS.$$scope={dirty:u,ctx:f}),rv.$set(qS);const kLe={};u&2&&(kLe.$$scope={dirty:u,ctx:f}),av.$set(kLe);const SLe={};u&2&&(SLe.$$scope={dirty:u,ctx:f}),wv.$set(SLe);const RLe={};u&2&&(RLe.$$scope={dirty:u,ctx:f}),Lv.$set(RLe);const Yf={};u&2&&(Yf.$$scope={dirty:u,ctx:f}),L6.$set(Yf);const PLe={};u&2&&(PLe.$$scope={dirty:u,ctx:f}),x6.$set(PLe);const BLe={};u&2&&(BLe.$$scope={dirty:u,ctx:f}),iF.$set(BLe);const ILe={};u&2&&(ILe.$$scope={dirty:u,ctx:f}),cF.$set(ILe);const jS={};u&2&&(jS.$$scope={dirty:u,ctx:f}),bF.$set(jS);const NLe={};u&2&&(NLe.$$scope={dirty:u,ctx:f}),FF.$set(NLe);const qLe={};u&2&&(qLe.$$scope={dirty:u,ctx:f}),nT.$set(qLe);const jLe={};u&2&&(jLe.$$scope={dirty:u,ctx:f}),lT.$set(jLe);const dt={};u&2&&(dt.$$scope={dirty:u,ctx:f}),KT.$set(dt);const DS={};u&2&&(DS.$$scope={dirty:u,ctx:f}),e7.$set(DS);const DLe={};u&2&&(DLe.$$scope={dirty:u,ctx:f}),t7.$set(DLe);const GS={};u&2&&(GS.$$scope={dirty:u,ctx:f}),n7.$set(GS);const GLe={};u&2&&(GLe.$$scope={dirty:u,ctx:f}),T7.$set(GLe);const ct={};u&2&&(ct.$$scope={dirty:u,ctx:f}),E7.$set(ct);const OLe={};u&2&&(OLe.$$scope={dirty:u,ctx:f}),A7.$set(OLe);const Kf={};u&2&&(Kf.$$scope={dirty:u,ctx:f}),y7.$set(Kf);const VLe={};u&2&&(VLe.$$scope={dirty:u,ctx:f}),k7.$set(VLe);const XLe={};u&2&&(XLe.$$scope={dirty:u,ctx:f}),R7.$set(XLe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),I7.$set(L);const j0={};u&2&&(j0.$$scope={dirty:u,ctx:f}),q7.$set(j0);const zLe={};u&2&&(zLe.$$scope={dirty:u,ctx:f}),H7.$set(zLe);const WLe={};u&2&&(WLe.$$scope={dirty:u,ctx:f}),Y7.$set(WLe);const D0={};u&2&&(D0.$$scope={dirty:u,ctx:f}),a8.$set(D0);const QLe={};u&2&&(QLe.$$scope={dirty:u,ctx:f}),s8.$set(QLe);const ULe={};u&2&&(ULe.$$scope={dirty:u,ctx:f}),b8.$set(ULe);const G0={};u&2&&(G0.$$scope={dirty:u,ctx:f}),F8.$set(G0);const HLe={};u&2&&(HLe.$$scope={dirty:u,ctx:f}),C8.$set(HLe);const JLe={};u&2&&(JLe.$$scope={dirty:u,ctx:f}),A8.$set(JLe);const O0={};u&2&&(O0.$$scope={dirty:u,ctx:f}),R8.$set(O0);const YLe={};u&2&&(YLe.$$scope={dirty:u,ctx:f}),B8.$set(YLe);const KLe={};u&2&&(KLe.$$scope={dirty:u,ctx:f}),G8.$set(KLe);const V0={};u&2&&(V0.$$scope={dirty:u,ctx:f}),V8.$set(V0);const ZLe={};u&2&&(ZLe.$$scope={dirty:u,ctx:f}),Q8.$set(ZLe);const eye={};u&2&&(eye.$$scope={dirty:u,ctx:f}),H8.$set(eye);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),K8.$set(X0);const oye={};u&2&&(oye.$$scope={dirty:u,ctx:f}),e9.$set(oye);const rye={};u&2&&(rye.$$scope={dirty:u,ctx:f}),l9.$set(rye);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),d9.$set(z0);const tye={};u&2&&(tye.$$scope={dirty:u,ctx:f}),m9.$set(tye);const aye={};u&2&&(aye.$$scope={dirty:u,ctx:f}),h9.$set(aye);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),fM.$set(W0);const nye={};u&2&&(nye.$$scope={dirty:u,ctx:f}),gM.$set(nye);const sye={};u&2&&(sye.$$scope={dirty:u,ctx:f}),NM.$set(sye);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),jM.$set(Q0);const lye={};u&2&&(lye.$$scope={dirty:u,ctx:f}),ZM.$set(lye);const iye={};u&2&&(iye.$$scope={dirty:u,ctx:f}),oE.$set(iye);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),dE.$set(U0);const dye={};u&2&&(dye.$$scope={dirty:u,ctx:f}),fE.$set(dye);const cye={};u&2&&(cye.$$scope={dirty:u,ctx:f}),hE.$set(cye);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),_E.$set(H0);const fye={};u&2&&(fye.$$scope={dirty:u,ctx:f}),NE.$set(fye);const mye={};u&2&&(mye.$$scope={dirty:u,ctx:f}),jE.$set(mye);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),JE.$set(J0);const gye={};u&2&&(gye.$$scope={dirty:u,ctx:f}),KE.$set(gye);const hye={};u&2&&(hye.$$scope={dirty:u,ctx:f}),w4.$set(hye);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),L4.$set(Y0);const pye={};u&2&&(pye.$$scope={dirty:u,ctx:f}),z4.$set(pye);const _ye={};u&2&&(_ye.$$scope={dirty:u,ctx:f}),Q4.$set(_ye);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),J4.$set(K0);const uye={};u&2&&(uye.$$scope={dirty:u,ctx:f}),K4.$set(uye);const bye={};u&2&&(bye.$$scope={dirty:u,ctx:f}),eC.$set(bye);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),rC.$set(Z0);const vye={};u&2&&(vye.$$scope={dirty:u,ctx:f}),EC.$set(vye);const Fye={};u&2&&(Fye.$$scope={dirty:u,ctx:f}),wC.$set(Fye);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),WC.$set(ew);const Tye={};u&2&&(Tye.$$scope={dirty:u,ctx:f}),UC.$set(Tye);const Mye={};u&2&&(Mye.$$scope={dirty:u,ctx:f}),JC.$set(Mye);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),KC.$set(ow);const Eye={};u&2&&(Eye.$$scope={dirty:u,ctx:f}),e3.$set(Eye);const Cye={};u&2&&(Cye.$$scope={dirty:u,ctx:f}),r3.$set(Cye);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),$3.$set(rw);const wye={};u&2&&(wye.$$scope={dirty:u,ctx:f}),S3.$set(wye);const Aye={};u&2&&(Aye.$$scope={dirty:u,ctx:f}),V3.$set(Aye);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),z3.$set(tw);const Lye={};u&2&&(Lye.$$scope={dirty:u,ctx:f}),n5.$set(Lye);const yye={};u&2&&(yye.$$scope={dirty:u,ctx:f}),l5.$set(yye);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),b5.$set(aw);const xye={};u&2&&(xye.$$scope={dirty:u,ctx:f}),F5.$set(xye);const $ye={};u&2&&($ye.$$scope={dirty:u,ctx:f}),k5.$set($ye);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),R5.$set(nw);const kye={};u&2&&(kye.$$scope={dirty:u,ctx:f}),X5.$set(kye);const Sye={};u&2&&(Sye.$$scope={dirty:u,ctx:f}),W5.$set(Sye);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),t0.$set(sw);const Rye={};u&2&&(Rye.$$scope={dirty:u,ctx:f}),n0.$set(Rye);const Pye={};u&2&&(Pye.$$scope={dirty:u,ctx:f}),h0.$set(Pye);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),_0.$set(lw);const Bye={};u&2&&(Bye.$$scope={dirty:u,ctx:f}),w0.$set(Bye);const Iye={};u&2&&(Iye.$$scope={dirty:u,ctx:f}),L0.$set(Iye);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),x0.$set(iw);const Nye={};u&2&&(Nye.$$scope={dirty:u,ctx:f}),k0.$set(Nye);const qye={};u&2&&(qye.$$scope={dirty:u,ctx:f}),P0.$set(qye);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),I0.$set(dw);const jye={};u&2&&(jye.$$scope={dirty:u,ctx:f}),q0.$set(jye)},i(f){HHe||(E(d.$$.fragment,f),E(ja.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(nm.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(Th.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(wL.$$.fragment,f),E(tp.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E(kL.$$.fragment,f),E(Xp.$$.fragment,f),E(zp.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(NL.$$.fragment,f),E(h_.$$.fragment,f),E(p_.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(b_.$$.fragment,f),E(VL.$$.fragment,f),E(L1.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(x1.$$.fragment,f),E(UL.$$.fragment,f),E(C2.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(A2.$$.fragment,f),E(ZL.$$.fragment,f),E(hb.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(_b.$$.fragment,f),E(ay.$$.fragment,f),E(rv.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(av.$$.fragment,f),E(dy.$$.fragment,f),E(wv.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(Lv.$$.fragment,f),E(hy.$$.fragment,f),E(L6.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(x6.$$.fragment,f),E(vy.$$.fragment,f),E(iF.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(cF.$$.fragment,f),E(Cy.$$.fragment,f),E(bF.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(FF.$$.fragment,f),E(xy.$$.fragment,f),E(nT.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(lT.$$.fragment,f),E(Py.$$.fragment,f),E(KT.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(e7.$$.fragment,f),E(jy.$$.fragment,f),E(t7.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(n7.$$.fragment,f),E(Xy.$$.fragment,f),E(T7.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(E7.$$.fragment,f),E(Hy.$$.fragment,f),E(A7.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(y7.$$.fragment,f),E(ex.$$.fragment,f),E(k7.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(R7.$$.fragment,f),E(nx.$$.fragment,f),E(I7.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(q7.$$.fragment,f),E(cx.$$.fragment,f),E(H7.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(Y7.$$.fragment,f),E(px.$$.fragment,f),E(a8.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(s8.$$.fragment,f),E(Fx.$$.fragment,f),E(b8.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(F8.$$.fragment,f),E(wx.$$.fragment,f),E(C8.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(A8.$$.fragment,f),E(kx.$$.fragment,f),E(R8.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(B8.$$.fragment,f),E(Ix.$$.fragment,f),E(G8.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(V8.$$.fragment,f),E(Gx.$$.fragment,f),E(Q8.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Wx.$$.fragment,f),E(H8.$$.fragment,f),E(Qx.$$.fragment,f),E(K8.$$.fragment,f),E(Ux.$$.fragment,f),E(Hx.$$.fragment,f),E(Yx.$$.fragment,f),E(e9.$$.fragment,f),E(Kx.$$.fragment,f),E(l9.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(d9.$$.fragment,f),E(t$.$$.fragment,f),E(m9.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(h9.$$.fragment,f),E(i$.$$.fragment,f),E(fM.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(gM.$$.fragment,f),E(g$.$$.fragment,f),E(NM.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(jM.$$.fragment,f),E(b$.$$.fragment,f),E(ZM.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(oE.$$.fragment,f),E(E$.$$.fragment,f),E(dE.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(fE.$$.fragment,f),E(y$.$$.fragment,f),E(hE.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(_E.$$.fragment,f),E(P$.$$.fragment,f),E(NE.$$.fragment,f),E(B$.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E(jE.$$.fragment,f),E(j$.$$.fragment,f),E(JE.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E(KE.$$.fragment,f),E(X$.$$.fragment,f),E(w4.$$.fragment,f),E(z$.$$.fragment,f),E(W$.$$.fragment,f),E(U$.$$.fragment,f),E(L4.$$.fragment,f),E(H$.$$.fragment,f),E(z4.$$.fragment,f),E(J$.$$.fragment,f),E(Y$.$$.fragment,f),E(Z$.$$.fragment,f),E(Q4.$$.fragment,f),E(ek.$$.fragment,f),E(J4.$$.fragment,f),E(rk.$$.fragment,f),E(tk.$$.fragment,f),E(nk.$$.fragment,f),E(K4.$$.fragment,f),E(sk.$$.fragment,f),E(eC.$$.fragment,f),E(lk.$$.fragment,f),E(ik.$$.fragment,f),E(ck.$$.fragment,f),E(rC.$$.fragment,f),E(fk.$$.fragment,f),E(EC.$$.fragment,f),E(mk.$$.fragment,f),E(gk.$$.fragment,f),E(pk.$$.fragment,f),E(wC.$$.fragment,f),E(_k.$$.fragment,f),E(WC.$$.fragment,f),E(uk.$$.fragment,f),E(bk.$$.fragment,f),E(Fk.$$.fragment,f),E(UC.$$.fragment,f),E(Tk.$$.fragment,f),E(JC.$$.fragment,f),E(Mk.$$.fragment,f),E(Ek.$$.fragment,f),E(wk.$$.fragment,f),E(KC.$$.fragment,f),E(Ak.$$.fragment,f),E(e3.$$.fragment,f),E(Lk.$$.fragment,f),E(yk.$$.fragment,f),E($k.$$.fragment,f),E(r3.$$.fragment,f),E(kk.$$.fragment,f),E($3.$$.fragment,f),E(Sk.$$.fragment,f),E(Rk.$$.fragment,f),E(Bk.$$.fragment,f),E(S3.$$.fragment,f),E(Ik.$$.fragment,f),E(V3.$$.fragment,f),E(Nk.$$.fragment,f),E(qk.$$.fragment,f),E(Dk.$$.fragment,f),E(z3.$$.fragment,f),E(Gk.$$.fragment,f),E(n5.$$.fragment,f),E(Ok.$$.fragment,f),E(Vk.$$.fragment,f),E(zk.$$.fragment,f),E(l5.$$.fragment,f),E(Wk.$$.fragment,f),E(b5.$$.fragment,f),E(Qk.$$.fragment,f),E(Uk.$$.fragment,f),E(Jk.$$.fragment,f),E(F5.$$.fragment,f),E(Yk.$$.fragment,f),E(k5.$$.fragment,f),E(Kk.$$.fragment,f),E(Zk.$$.fragment,f),E(oS.$$.fragment,f),E(R5.$$.fragment,f),E(rS.$$.fragment,f),E(X5.$$.fragment,f),E(tS.$$.fragment,f),E(aS.$$.fragment,f),E(sS.$$.fragment,f),E(W5.$$.fragment,f),E(lS.$$.fragment,f),E(t0.$$.fragment,f),E(iS.$$.fragment,f),E(dS.$$.fragment,f),E(fS.$$.fragment,f),E(n0.$$.fragment,f),E(mS.$$.fragment,f),E(h0.$$.fragment,f),E(gS.$$.fragment,f),E(hS.$$.fragment,f),E(_S.$$.fragment,f),E(_0.$$.fragment,f),E(uS.$$.fragment,f),E(w0.$$.fragment,f),E(bS.$$.fragment,f),E(vS.$$.fragment,f),E(TS.$$.fragment,f),E(L0.$$.fragment,f),E(MS.$$.fragment,f),E(x0.$$.fragment,f),E(ES.$$.fragment,f),E(CS.$$.fragment,f),E(AS.$$.fragment,f),E(k0.$$.fragment,f),E(LS.$$.fragment,f),E(P0.$$.fragment,f),E(xS.$$.fragment,f),E($S.$$.fragment,f),E(SS.$$.fragment,f),E(I0.$$.fragment,f),E(RS.$$.fragment,f),E(q0.$$.fragment,f),HHe=!0)},o(f){C(d.$$.fragment,f),C(ja.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(nm.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(Th.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(wL.$$.fragment,f),C(tp.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C(kL.$$.fragment,f),C(Xp.$$.fragment,f),C(zp.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(NL.$$.fragment,f),C(h_.$$.fragment,f),C(p_.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(b_.$$.fragment,f),C(VL.$$.fragment,f),C(L1.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(x1.$$.fragment,f),C(UL.$$.fragment,f),C(C2.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(A2.$$.fragment,f),C(ZL.$$.fragment,f),C(hb.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(_b.$$.fragment,f),C(ay.$$.fragment,f),C(rv.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(av.$$.fragment,f),C(dy.$$.fragment,f),C(wv.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(Lv.$$.fragment,f),C(hy.$$.fragment,f),C(L6.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(x6.$$.fragment,f),C(vy.$$.fragment,f),C(iF.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(cF.$$.fragment,f),C(Cy.$$.fragment,f),C(bF.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(FF.$$.fragment,f),C(xy.$$.fragment,f),C(nT.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(lT.$$.fragment,f),C(Py.$$.fragment,f),C(KT.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(e7.$$.fragment,f),C(jy.$$.fragment,f),C(t7.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(n7.$$.fragment,f),C(Xy.$$.fragment,f),C(T7.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(E7.$$.fragment,f),C(Hy.$$.fragment,f),C(A7.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(y7.$$.fragment,f),C(ex.$$.fragment,f),C(k7.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(R7.$$.fragment,f),C(nx.$$.fragment,f),C(I7.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(q7.$$.fragment,f),C(cx.$$.fragment,f),C(H7.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(Y7.$$.fragment,f),C(px.$$.fragment,f),C(a8.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(s8.$$.fragment,f),C(Fx.$$.fragment,f),C(b8.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(F8.$$.fragment,f),C(wx.$$.fragment,f),C(C8.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(A8.$$.fragment,f),C(kx.$$.fragment,f),C(R8.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(B8.$$.fragment,f),C(Ix.$$.fragment,f),C(G8.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(V8.$$.fragment,f),C(Gx.$$.fragment,f),C(Q8.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Wx.$$.fragment,f),C(H8.$$.fragment,f),C(Qx.$$.fragment,f),C(K8.$$.fragment,f),C(Ux.$$.fragment,f),C(Hx.$$.fragment,f),C(Yx.$$.fragment,f),C(e9.$$.fragment,f),C(Kx.$$.fragment,f),C(l9.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(d9.$$.fragment,f),C(t$.$$.fragment,f),C(m9.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(h9.$$.fragment,f),C(i$.$$.fragment,f),C(fM.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(gM.$$.fragment,f),C(g$.$$.fragment,f),C(NM.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(jM.$$.fragment,f),C(b$.$$.fragment,f),C(ZM.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(oE.$$.fragment,f),C(E$.$$.fragment,f),C(dE.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(fE.$$.fragment,f),C(y$.$$.fragment,f),C(hE.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(_E.$$.fragment,f),C(P$.$$.fragment,f),C(NE.$$.fragment,f),C(B$.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C(jE.$$.fragment,f),C(j$.$$.fragment,f),C(JE.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C(KE.$$.fragment,f),C(X$.$$.fragment,f),C(w4.$$.fragment,f),C(z$.$$.fragment,f),C(W$.$$.fragment,f),C(U$.$$.fragment,f),C(L4.$$.fragment,f),C(H$.$$.fragment,f),C(z4.$$.fragment,f),C(J$.$$.fragment,f),C(Y$.$$.fragment,f),C(Z$.$$.fragment,f),C(Q4.$$.fragment,f),C(ek.$$.fragment,f),C(J4.$$.fragment,f),C(rk.$$.fragment,f),C(tk.$$.fragment,f),C(nk.$$.fragment,f),C(K4.$$.fragment,f),C(sk.$$.fragment,f),C(eC.$$.fragment,f),C(lk.$$.fragment,f),C(ik.$$.fragment,f),C(ck.$$.fragment,f),C(rC.$$.fragment,f),C(fk.$$.fragment,f),C(EC.$$.fragment,f),C(mk.$$.fragment,f),C(gk.$$.fragment,f),C(pk.$$.fragment,f),C(wC.$$.fragment,f),C(_k.$$.fragment,f),C(WC.$$.fragment,f),C(uk.$$.fragment,f),C(bk.$$.fragment,f),C(Fk.$$.fragment,f),C(UC.$$.fragment,f),C(Tk.$$.fragment,f),C(JC.$$.fragment,f),C(Mk.$$.fragment,f),C(Ek.$$.fragment,f),C(wk.$$.fragment,f),C(KC.$$.fragment,f),C(Ak.$$.fragment,f),C(e3.$$.fragment,f),C(Lk.$$.fragment,f),C(yk.$$.fragment,f),C($k.$$.fragment,f),C(r3.$$.fragment,f),C(kk.$$.fragment,f),C($3.$$.fragment,f),C(Sk.$$.fragment,f),C(Rk.$$.fragment,f),C(Bk.$$.fragment,f),C(S3.$$.fragment,f),C(Ik.$$.fragment,f),C(V3.$$.fragment,f),C(Nk.$$.fragment,f),C(qk.$$.fragment,f),C(Dk.$$.fragment,f),C(z3.$$.fragment,f),C(Gk.$$.fragment,f),C(n5.$$.fragment,f),C(Ok.$$.fragment,f),C(Vk.$$.fragment,f),C(zk.$$.fragment,f),C(l5.$$.fragment,f),C(Wk.$$.fragment,f),C(b5.$$.fragment,f),C(Qk.$$.fragment,f),C(Uk.$$.fragment,f),C(Jk.$$.fragment,f),C(F5.$$.fragment,f),C(Yk.$$.fragment,f),C(k5.$$.fragment,f),C(Kk.$$.fragment,f),C(Zk.$$.fragment,f),C(oS.$$.fragment,f),C(R5.$$.fragment,f),C(rS.$$.fragment,f),C(X5.$$.fragment,f),C(tS.$$.fragment,f),C(aS.$$.fragment,f),C(sS.$$.fragment,f),C(W5.$$.fragment,f),C(lS.$$.fragment,f),C(t0.$$.fragment,f),C(iS.$$.fragment,f),C(dS.$$.fragment,f),C(fS.$$.fragment,f),C(n0.$$.fragment,f),C(mS.$$.fragment,f),C(h0.$$.fragment,f),C(gS.$$.fragment,f),C(hS.$$.fragment,f),C(_S.$$.fragment,f),C(_0.$$.fragment,f),C(uS.$$.fragment,f),C(w0.$$.fragment,f),C(bS.$$.fragment,f),C(vS.$$.fragment,f),C(TS.$$.fragment,f),C(L0.$$.fragment,f),C(MS.$$.fragment,f),C(x0.$$.fragment,f),C(ES.$$.fragment,f),C(CS.$$.fragment,f),C(AS.$$.fragment,f),C(k0.$$.fragment,f),C(LS.$$.fragment,f),C(P0.$$.fragment,f),C(xS.$$.fragment,f),C($S.$$.fragment,f),C(SS.$$.fragment,f),C(I0.$$.fragment,f),C(RS.$$.fragment,f),C(q0.$$.fragment,f),HHe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(em),f&&t(ft),f&&t(Oe),f&&t(Qe),f&&t(rm),w(ja,f),f&&t(Ue),f&&t(Ae),f&&t(Lo),f&&t(Da),f&&t(DQe),f&&t(Hi),w(gL),f&&t(GQe),f&&t(Un),f&&t(OQe),w(hL,f),f&&t(VQe),f&&t(iP),f&&t(XQe),w(nm,f),f&&t(zQe),f&&t(Ji),w(pL),f&&t(WQe),f&&t(yo),w(_L),w(vL),w(Th),w(FL),f&&t(QQe),f&&t(Ki),w(TL),f&&t(UQe),f&&t(xo),w(ML),w(wL),w(tp),w(AL),f&&t(HQe),f&&t(Zi),w(LL),f&&t(JQe),f&&t($o),w(yL),w(kL),w(Xp),w(zp),w(SL),f&&t(YQe),f&&t(ed),w(RL),f&&t(KQe),f&&t(ko),w(PL),w(NL),w(h_),w(p_),w(qL),f&&t(ZQe),f&&t(rd),w(jL),f&&t(eUe),f&&t(So),w(DL),w(OL),w(b_),w(VL),w(L1),f&&t(oUe),f&&t(nd),w(XL),f&&t(rUe),f&&t(Ro),w(zL),w(QL),w(x1),w(UL),w(C2),f&&t(tUe),f&&t(id),w(HL),f&&t(aUe),f&&t(Po),w(JL),w(KL),w(A2),w(ZL),w(hb),f&&t(nUe),f&&t(fd),w(ey),f&&t(sUe),f&&t(Bo),w(oy),w(ty),w(_b),w(ay),w(rv),f&&t(lUe),f&&t(hd),w(ny),f&&t(iUe),f&&t(Io),w(sy),w(iy),w(av),w(dy),w(wv),f&&t(dUe),f&&t(ud),w(cy),f&&t(cUe),f&&t(No),w(fy),w(gy),w(Lv),w(hy),w(L6),f&&t(fUe),f&&t(Fd),w(py),f&&t(mUe),f&&t(qo),w(_y),w(by),w(x6),w(vy),w(iF),f&&t(gUe),f&&t(Ed),w(Fy),f&&t(hUe),f&&t(jo),w(Ty),w(Ey),w(cF),w(Cy),w(bF),f&&t(pUe),f&&t(Ad),w(wy),f&&t(_Ue),f&&t(Go),w(Ay),w(yy),w(FF),w(xy),w(nT),f&&t(uUe),f&&t(xd),w($y),f&&t(bUe),f&&t(Oo),w(ky),w(Ry),w(lT),w(Py),w(KT),f&&t(vUe),f&&t(Sd),w(By),f&&t(FUe),f&&t(Vo),w(Iy),w(qy),w(e7),w(jy),w(t7),f&&t(TUe),f&&t(Bd),w(Dy),f&&t(MUe),f&&t(Xo),w(Gy),w(Vy),w(n7),w(Xy),w(T7),f&&t(EUe),f&&t(qd),w(zy),f&&t(CUe),f&&t(zo),w(Wy),w(Uy),w(E7),w(Hy),w(A7),f&&t(wUe),f&&t(Gd),w(Jy),f&&t(AUe),f&&t(Wo),w(Yy),w(Zy),w(y7),w(ex),w(k7),f&&t(LUe),f&&t(Xd),w(ox),f&&t(yUe),f&&t(Qo),w(rx),w(ax),w(R7),w(nx),w(I7),f&&t(xUe),f&&t(Qd),w(sx),f&&t($Ue),f&&t(Uo),w(lx),w(dx),w(q7),w(cx),w(H7),f&&t(kUe),f&&t(Jd),w(fx),f&&t(SUe),f&&t(Ho),w(mx),w(hx),w(Y7),w(px),w(a8),f&&t(RUe),f&&t(Zd),w(_x),f&&t(PUe),f&&t(Jo),w(ux),w(vx),w(s8),w(Fx),w(b8),f&&t(BUe),f&&t(rc),w(Tx),f&&t(IUe),f&&t(Yo),w(Mx),w(Cx),w(F8),w(wx),w(C8),f&&t(NUe),f&&t(nc),w(Lx),f&&t(qUe),f&&t(Ko),w(yx),w($x),w(A8),w(kx),w(R8),f&&t(jUe),f&&t(ic),w(Sx),f&&t(DUe),f&&t(Zo),w(Rx),w(Bx),w(B8),w(Ix),w(G8),f&&t(GUe),f&&t(fc),w(Nx),f&&t(OUe),f&&t(er),w(qx),w(Dx),w(V8),w(Gx),w(Q8),f&&t(VUe),f&&t(hc),w(Vx),f&&t(XUe),f&&t(or),w(Xx),w(Wx),w(H8),w(Qx),w(K8),f&&t(zUe),f&&t(uc),w(Ux),f&&t(WUe),f&&t(rr),w(Hx),w(Yx),w(e9),w(Kx),w(l9),f&&t(QUe),f&&t(Fc),w(Zx),f&&t(UUe),f&&t(tr),w(e$),w(r$),w(d9),w(t$),w(m9),f&&t(HUe),f&&t(Ec),w(a$),f&&t(JUe),f&&t(ar),w(n$),w(l$),w(h9),w(i$),w(fM),f&&t(YUe),f&&t(Ac),w(d$),f&&t(KUe),f&&t(nr),w(c$),w(m$),w(gM),w(g$),w(NM),f&&t(ZUe),f&&t(xc),w(h$),f&&t(eHe),f&&t(sr),w(p$),w(u$),w(jM),w(b$),w(ZM),f&&t(oHe),f&&t(Sc),w(v$),f&&t(rHe),f&&t(lr),w(F$),w(M$),w(oE),w(E$),w(dE),f&&t(tHe),f&&t(Bc),w(C$),f&&t(aHe),f&&t(ir),w(w$),w(L$),w(fE),w(y$),w(hE),f&&t(nHe),f&&t(qc),w($$),f&&t(sHe),f&&t(dr),w(k$),w(R$),w(_E),w(P$),w(NE),f&&t(lHe),f&&t(Gc),w(B$),f&&t(iHe),f&&t(cr),w(I$),w(q$),w(jE),w(j$),w(JE),f&&t(dHe),f&&t(Xc),w(D$),f&&t(cHe),f&&t(fr),w(G$),w(V$),w(KE),w(X$),w(w4),f&&t(fHe),f&&t(Qc),w(z$),f&&t(mHe),f&&t(mr),w(W$),w(U$),w(L4),w(H$),w(z4),f&&t(gHe),f&&t(Jc),w(J$),f&&t(hHe),f&&t(gr),w(Y$),w(Z$),w(Q4),w(ek),w(J4),f&&t(pHe),f&&t(Zc),w(rk),f&&t(_He),f&&t(hr),w(tk),w(nk),w(K4),w(sk),w(eC),f&&t(uHe),f&&t(rf),w(lk),f&&t(bHe),f&&t(pr),w(ik),w(ck),w(rC),w(fk),w(EC),f&&t(vHe),f&&t(nf),w(mk),f&&t(FHe),f&&t(_r),w(gk),w(pk),w(wC),w(_k),w(WC),f&&t(THe),f&&t(df),w(uk),f&&t(MHe),f&&t(ur),w(bk),w(Fk),w(UC),w(Tk),w(JC),f&&t(EHe),f&&t(mf),w(Mk),f&&t(CHe),f&&t(br),w(Ek),w(wk),w(KC),w(Ak),w(e3),f&&t(wHe),f&&t(pf),w(Lk),f&&t(AHe),f&&t(vr),w(yk),w($k),w(r3),w(kk),w($3),f&&t(LHe),f&&t(bf),w(Sk),f&&t(yHe),f&&t(Fr),w(Rk),w(Bk),w(S3),w(Ik),w(V3),f&&t(xHe),f&&t(Tf),w(Nk),f&&t($He),f&&t(Tr),w(qk),w(Dk),w(z3),w(Gk),w(n5),f&&t(kHe),f&&t(Cf),w(Ok),f&&t(SHe),f&&t(Mr),w(Vk),w(zk),w(l5),w(Wk),w(b5),f&&t(RHe),f&&t(Lf),w(Qk),f&&t(PHe),f&&t(Er),w(Uk),w(Jk),w(F5),w(Yk),w(k5),f&&t(BHe),f&&t($f),w(Kk),f&&t(IHe),f&&t(Cr),w(Zk),w(oS),w(R5),w(rS),w(X5),f&&t(NHe),f&&t(Rf),w(tS),f&&t(qHe),f&&t(wr),w(aS),w(sS),w(W5),w(lS),w(t0),f&&t(jHe),f&&t(If),w(iS),f&&t(DHe),f&&t(Ar),w(dS),w(fS),w(n0),w(mS),w(h0),f&&t(GHe),f&&t(jf),w(gS),f&&t(OHe),f&&t(Lr),w(hS),w(_S),w(_0),w(uS),w(w0),f&&t(VHe),f&&t(Of),w(bS),f&&t(XHe),f&&t(yr),w(vS),w(TS),w(L0),w(MS),w(x0),f&&t(zHe),f&&t(zf),w(ES),f&&t(WHe),f&&t(xr),w(CS),w(AS),w(k0),w(LS),w(P0),f&&t(QHe),f&&t(Uf),w(xS),f&&t(UHe),f&&t($r),w($S),w(SS),w(I0),w(RS),w(q0)}}}const Oaa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Vaa($){return Nra(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Jaa extends Rra{constructor(g){super();Pra(this,g,Vaa,Gaa,Bra,{})}}export{Jaa as default,Oaa as metadata};
